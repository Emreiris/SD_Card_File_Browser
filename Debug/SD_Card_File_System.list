
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c28  08006c28  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c30  08006c30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000142c  20000010  08006c48  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000143c  08006c48  0002143c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a766  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d1f  00000000  00000000  0006a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000704c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00007098  00000000  00000000  00071648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a2ab  00000000  00000000  000786e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038eae  00000000  00000000  0008298b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111ef7  00000000  00000000  000bb839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cd730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  001cd784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00038b2e  00000000  00000000  001d1bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006788 	.word	0x08006788

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08006788 	.word	0x08006788

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZN12file_managerC1Ev>:
 */

extern char SDPath[4];


file_manager::file_manager()
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
{
	MX_SDMMC1_SD_Init();  /* Low level driver initalizations */
 8000518:	f000 fa78 	bl	8000a0c <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();      /* File system initalizations */
 800051c:	f003 fe4e 	bl	80041bc <MX_FATFS_Init>

	strncpy(current_dir, SDPath, strlen(SDPath));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f241 2428 	movw	r4, #4648	; 0x1228
 8000526:	441c      	add	r4, r3
 8000528:	4816      	ldr	r0, [pc, #88]	; (8000584 <_ZN12file_managerC1Ev+0x74>)
 800052a:	f7ff fe6d 	bl	8000208 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4914      	ldr	r1, [pc, #80]	; (8000584 <_ZN12file_managerC1Ev+0x74>)
 8000534:	4620      	mov	r0, r4
 8000536:	f006 f913 	bl	8006760 <strncpy>
	result = f_mount(&drive_handler, SDPath, 0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	4911      	ldr	r1, [pc, #68]	; (8000584 <_ZN12file_managerC1Ev+0x74>)
 8000540:	4618      	mov	r0, r3
 8000542:	f005 fe39 	bl	80061b8 <f_mount>
 8000546:	4603      	mov	r3, r0
 8000548:	4619      	mov	r1, r3
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	f241 03a8 	movw	r3, #4264	; 0x10a8
 8000550:	4413      	add	r3, r2
 8000552:	460a      	mov	r2, r1
 8000554:	701a      	strb	r2, [r3, #0]

	get_dir();
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f816 	bl	8000588 <_ZN12file_manager7get_dirEv>
	f_opendir(&direction, current_dir);
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8000562:	4413      	add	r3, r2
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	f241 2228 	movw	r2, #4648	; 0x1228
 800056a:	440a      	add	r2, r1
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f005 ff78 	bl	8006464 <f_opendir>
	get_dir();
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 f807 	bl	8000588 <_ZN12file_manager7get_dirEv>

}
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	20000394 	.word	0x20000394

08000588 <_ZN12file_manager7get_dirEv>:

	get_dir();
}

void file_manager::get_dir()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

	static TCHAR temp_buf[256]; /* I am sure there is a better way that I could not see yet. */
	static UINT len = 0;

	result = f_getcwd(temp_buf, len);
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <_ZN12file_manager7get_dirEv+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <_ZN12file_manager7get_dirEv+0x44>)
 8000598:	f005 fe56 	bl	8006248 <f_getcwd>
 800059c:	4603      	mov	r3, r0
 800059e:	4619      	mov	r1, r3
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	f241 03a8 	movw	r3, #4264	; 0x10a8
 80005a6:	4413      	add	r3, r2
 80005a8:	460a      	mov	r2, r1
 80005aa:	701a      	strb	r2, [r3, #0]

	strncpy(current_dir, temp_buf, len);
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	f241 2328 	movw	r3, #4648	; 0x1228
 80005b2:	4413      	add	r3, r2
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <_ZN12file_manager7get_dirEv+0x40>)
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	4904      	ldr	r1, [pc, #16]	; (80005cc <_ZN12file_manager7get_dirEv+0x44>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 f8d0 	bl	8006760 <strncpy>

}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000012c 	.word	0x2000012c
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_DMA_Init+0x40>)

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	203b      	movs	r0, #59	; 0x3b
 80005d6:	4611      	mov	r1, r2
{
 80005d8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005da:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 80005dc:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005de:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 80005e2:	631c      	str	r4, [r3, #48]	; 0x30
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ee:	f000 fc33 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005f2:	203b      	movs	r0, #59	; 0x3b
 80005f4:	f000 fc6a 	bl	8000ecc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2045      	movs	r0, #69	; 0x45
 80005fc:	4611      	mov	r1, r2
 80005fe:	f000 fc2b 	bl	8000e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000602:	2045      	movs	r0, #69	; 0x45

}
 8000604:	b002      	add	sp, #8
 8000606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800060a:	f000 bc5f 	b.w	8000ecc <HAL_NVIC_EnableIRQ>
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800

08000614 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2108      	movs	r1, #8
{
 800061a:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	2400      	movs	r4, #0
{
 800061e:	b091      	sub	sp, #68	; 0x44
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000620:	4f45      	ldr	r7, [pc, #276]	; (8000738 <MX_GPIO_Init+0x124>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	940b      	str	r4, [sp, #44]	; 0x2c
 8000624:	940a      	str	r4, [sp, #40]	; 0x28
 8000626:	940e      	str	r4, [sp, #56]	; 0x38

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000628:	4e44      	ldr	r6, [pc, #272]	; (800073c <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000630:	f040 0010 	orr.w	r0, r0, #16
 8000634:	6318      	str	r0, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000636:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000638:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800063a:	f005 0510 	and.w	r5, r5, #16
 800063e:	9500      	str	r5, [sp, #0]
 8000640:	9d00      	ldr	r5, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000644:	f045 0504 	orr.w	r5, r5, #4
 8000648:	631d      	str	r5, [r3, #48]	; 0x30
 800064a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800064c:	f005 0504 	and.w	r5, r5, #4
 8000650:	9501      	str	r5, [sp, #4]
 8000652:	9d01      	ldr	r5, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000656:	4315      	orrs	r5, r2
 8000658:	631d      	str	r5, [r3, #48]	; 0x30
 800065a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800065c:	4015      	ands	r5, r2
 800065e:	9502      	str	r5, [sp, #8]
 8000660:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000662:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000664:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8000668:	631d      	str	r5, [r3, #48]	; 0x30
 800066a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800066c:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8000670:	9503      	str	r5, [sp, #12]
 8000672:	9d03      	ldr	r5, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000674:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000676:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 800067a:	631d      	str	r5, [r3, #48]	; 0x30
 800067c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800067e:	f405 7500 	and.w	r5, r5, #512	; 0x200
 8000682:	9504      	str	r5, [sp, #16]
 8000684:	9d04      	ldr	r5, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000688:	430d      	orrs	r5, r1
 800068a:	631d      	str	r5, [r3, #48]	; 0x30
 800068c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800068e:	400d      	ands	r5, r1
 8000690:	9505      	str	r5, [sp, #20]
 8000692:	9d05      	ldr	r5, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000694:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8000696:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800069a:	631d      	str	r5, [r3, #48]	; 0x30
 800069c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800069e:	f405 6580 	and.w	r5, r5, #1024	; 0x400
 80006a2:	9506      	str	r5, [sp, #24]
 80006a4:	9d06      	ldr	r5, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80006a8:	f045 0520 	orr.w	r5, r5, #32
 80006ac:	631d      	str	r5, [r3, #48]	; 0x30
 80006ae:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80006b0:	f005 0520 	and.w	r5, r5, #32
 80006b4:	9507      	str	r5, [sp, #28]
 80006b6:	9d07      	ldr	r5, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006b8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80006ba:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 80006be:	631d      	str	r5, [r3, #48]	; 0x30
 80006c0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80006c2:	f405 7580 	and.w	r5, r5, #256	; 0x100
 80006c6:	9508      	str	r5, [sp, #32]
 80006c8:	9d08      	ldr	r5, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ca:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 80006cc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80006d0:	631d      	str	r5, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006d2:	2503      	movs	r5, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	9309      	str	r3, [sp, #36]	; 0x24
 80006dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80006de:	f000 feb7 	bl	8001450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 80006e2:	4630      	mov	r0, r6
 80006e4:	2201      	movs	r2, #1
 80006e6:	f241 0102 	movw	r1, #4098	; 0x1002
 80006ea:	f000 feb1 	bl	8001450 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f2:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	a90a      	add	r1, sp, #40	; 0x28
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0x12c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006fa:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000700:	f000 fd80 	bl	8001204 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000704:	2208      	movs	r2, #8
 8000706:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000708:	4638      	mov	r0, r7
 800070a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800070c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000710:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000714:	f000 fd76 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000718:	f241 0202 	movw	r2, #4098	; 0x1002
 800071c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800071e:	a90a      	add	r1, sp, #40	; 0x28
 8000720:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000722:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 8000726:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800072a:	f000 fd6b 	bl	8001204 <HAL_GPIO_Init>

}
 800072e:	b011      	add	sp, #68	; 0x44
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40022800 	.word	0x40022800
 800073c:	40022000 	.word	0x40022000
 8000740:	40020800 	.word	0x40020800

08000744 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000748:	f3bf 8f4f 	dsb	sy
}
 800074c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800074e:	f3bf 8f6f 	isb	sy
}
 8000752:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <SCB_EnableICache+0x48>)
 8000756:	2200      	movs	r2, #0
 8000758:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800075c:	f3bf 8f4f 	dsb	sy
}
 8000760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000762:	f3bf 8f6f 	isb	sy
}
 8000766:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <SCB_EnableICache+0x48>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <SCB_EnableICache+0x48>)
 800076e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000772:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000774:	f3bf 8f4f 	dsb	sy
}
 8000778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800077a:	f3bf 8f6f 	isb	sy
}
 800077e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <SCB_EnableDCache+0x9c>)
 8000798:	2200      	movs	r2, #0
 800079a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800079e:	f3bf 8f4f 	dsb	sy
}
 80007a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <SCB_EnableDCache+0x9c>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	0b5b      	lsrs	r3, r3, #13
 80007b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	015a      	lsls	r2, r3, #5
 80007c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007ce:	4917      	ldr	r1, [pc, #92]	; (800082c <SCB_EnableDCache+0x9c>)
 80007d0:	4313      	orrs	r3, r2
 80007d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d000      	beq.n	80007ec <SCB_EnableDCache+0x5c>
      do {
 80007ea:	e7e9      	b.n	80007c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	60fa      	str	r2, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bf14      	ite	ne
 80007f6:	2301      	movne	r3, #1
 80007f8:	2300      	moveq	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d000      	beq.n	8000802 <SCB_EnableDCache+0x72>
    do {
 8000800:	e7d9      	b.n	80007b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000802:	f3bf 8f4f 	dsb	sy
}
 8000806:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <SCB_EnableDCache+0x9c>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <SCB_EnableDCache+0x9c>)
 800080e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000812:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800081a:	f3bf 8f6f 	isb	sy
}
 800081e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	f5ad 5d9a 	sub.w	sp, sp, #4928	; 0x1340
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800083a:	f7ff ff83 	bl	8000744 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800083e:	f7ff ffa7 	bl	8000790 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fac5 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f811 	bl	800086c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f7ff fee3 	bl	8000614 <MX_GPIO_Init>
  MX_DMA_Init();
 800084e:	f7ff febf 	bl	80005d0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000852:	f000 fa3f 	bl	8000cd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  file_manager file_test{};
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <main+0x38>)
 8000858:	f241 3248 	movw	r2, #4936	; 0x1348
 800085c:	443a      	add	r2, r7
 800085e:	4413      	add	r3, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe55 	bl	8000510 <_ZN12file_managerC1Ev>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0x36>
 8000868:	ffffecb8 	.word	0xffffecb8

0800086c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0b4      	sub	sp, #208	; 0xd0
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000876:	2230      	movs	r2, #48	; 0x30
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f005 ff68 	bl	8006750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2284      	movs	r2, #132	; 0x84
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f005 ff59 	bl	8006750 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b4d      	ldr	r3, [pc, #308]	; (80009d4 <_Z18SystemClock_Configv+0x168>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a4c      	ldr	r2, [pc, #304]	; (80009d4 <_Z18SystemClock_Configv+0x168>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b4a      	ldr	r3, [pc, #296]	; (80009d4 <_Z18SystemClock_Configv+0x168>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <_Z18SystemClock_Configv+0x16c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <_Z18SystemClock_Configv+0x16c>)
 80008bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <_Z18SystemClock_Configv+0x16c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008ea:	230f      	movs	r3, #15
 80008ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008f0:	23f0      	movs	r3, #240	; 0xf0
 80008f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008fc:	2309      	movs	r3, #9
 80008fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fdea 	bl	80014e0 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 800091c:	f000 f872 	bl	8000a04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000920:	f000 fda2 	bl	8001468 <HAL_PWREx_EnableOverDrive>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf14      	ite	ne
 800092a:	2301      	movne	r3, #1
 800092c:	2300      	moveq	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8000934:	f000 f866 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800094a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800094e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800095a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800095e:	2106      	movs	r1, #6
 8000960:	4618      	mov	r0, r3
 8000962:	f000 ffb7 	bl	80018d4 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 8000976:	f000 f845 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <_Z18SystemClock_Configv+0x170>)
 800097c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 800097e:	2372      	movs	r3, #114	; 0x72
 8000980:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000982:	2305      	movs	r3, #5
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800098a:	2303      	movs	r3, #3
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000998:	2300      	movs	r3, #0
 800099a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800099c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f8b0 	bl	8001b14 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <_Z18SystemClock_Configv+0x15c>
  {
    Error_Handler();
 80009c4:	f000 f81e 	bl	8000a04 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80009c8:	f001 f858 	bl	8001a7c <HAL_RCC_EnableCSS>
}
 80009cc:	bf00      	nop
 80009ce:	37d0      	adds	r7, #208	; 0xd0
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000
 80009dc:	00a10008 	.word	0x00a10008

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 f9f9 	bl	8000de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010000 	.word	0x40010000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x4>
	...

08000a0c <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <MX_SDMMC1_SD_Init+0x18>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4905      	ldr	r1, [pc, #20]	; (8000a28 <MX_SDMMC1_SD_Init+0x1c>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
 8000a12:	619a      	str	r2, [r3, #24]
  hsd1.Instance = SDMMC1;
 8000a14:	e9c3 1200 	strd	r1, r2, [r3]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a18:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a1c:	e9c3 2204 	strd	r2, r2, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200001b0 	.word	0x200001b0
 8000a28:	40012c00 	.word	0x40012c00

08000a2c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8000a2c:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_SD_MspInit+0x15c>)
 8000a2e:	6802      	ldr	r2, [r0, #0]
{
 8000a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(sdHandle->Instance==SDMMC1)
 8000a34:	429a      	cmp	r2, r3
{
 8000a36:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f04f 0400 	mov.w	r4, #0
 8000a3c:	9405      	str	r4, [sp, #20]
 8000a3e:	9404      	str	r4, [sp, #16]
 8000a40:	9408      	str	r4, [sp, #32]
 8000a42:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8000a46:	d002      	beq.n	8000a4e <HAL_SD_MspInit+0x22>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000a48:	b00b      	add	sp, #44	; 0x2c
 8000a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a4e:	494f      	ldr	r1, [pc, #316]	; (8000b8c <HAL_SD_MspInit+0x160>)
 8000a50:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a52:	260c      	movs	r6, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a54:	2200      	movs	r2, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a56:	6c48      	ldr	r0, [r1, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8000a5e:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a62:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a66:	2704      	movs	r7, #4
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a68:	6448      	str	r0, [r1, #68]	; 0x44
 8000a6a:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8000a6c:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8000a70:	9001      	str	r0, [sp, #4]
 8000a72:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000a76:	f040 0004 	orr.w	r0, r0, #4
 8000a7a:	6308      	str	r0, [r1, #48]	; 0x30
 8000a7c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000a7e:	f000 0004 	and.w	r0, r0, #4
 8000a82:	9002      	str	r0, [sp, #8]
 8000a84:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8000a88:	f040 0008 	orr.w	r0, r0, #8
 8000a8c:	6308      	str	r0, [r1, #48]	; 0x30
 8000a8e:	6b08      	ldr	r0, [r1, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a92:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a94:	f000 0008 	and.w	r0, r0, #8
 8000a98:	9003      	str	r0, [sp, #12]
 8000a9a:	9803      	ldr	r0, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	483c      	ldr	r0, [pc, #240]	; (8000b90 <HAL_SD_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a9e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8000aa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000aa6:	f04f 0801 	mov.w	r8, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aaa:	f000 fbab 	bl	8001204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000aae:	f04f 0903 	mov.w	r9, #3
 8000ab2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000ab6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	a904      	add	r1, sp, #16
 8000aba:	4835      	ldr	r0, [pc, #212]	; (8000b90 <HAL_SD_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000abc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000abe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000ac2:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f000 fb9d 	bl	8001204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aca:	2204      	movs	r2, #4
 8000acc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ace:	a904      	add	r1, sp, #16
 8000ad0:	4830      	ldr	r0, [pc, #192]	; (8000b94 <HAL_SD_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ad2:	9608      	str	r6, [sp, #32]
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000ad4:	4e30      	ldr	r6, [pc, #192]	; (8000b98 <HAL_SD_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000ada:	e9cd 8906 	strd	r8, r9, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ade:	f000 fb91 	bl	8001204 <HAL_GPIO_Init>
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000ae2:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <HAL_SD_MspInit+0x170>)
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aec:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000af0:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000af4:	f04f 0c20 	mov.w	ip, #32
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000af8:	2103      	movs	r1, #3
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000afa:	6032      	str	r2, [r6, #0]
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000afc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b00:	6073      	str	r3, [r6, #4]
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b06:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000b08:	4630      	mov	r0, r6
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b0a:	6234      	str	r4, [r6, #32]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000b0c:	f8c6 c01c 	str.w	ip, [r6, #28]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b14:	e9c6 8e05 	strd	r8, lr, [r6, #20]
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b18:	e9c6 7109 	strd	r7, r1, [r6, #36]	; 0x24
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b1c:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000b20:	f000 f9e2 	bl	8000ee8 <HAL_DMA_Init>
 8000b24:	bb50      	cbnz	r0, 8000b7c <HAL_SD_MspInit+0x150>
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000b26:	4c1e      	ldr	r4, [pc, #120]	; (8000ba0 <HAL_SD_MspInit+0x174>)
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_SD_MspInit+0x178>)
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2e:	2040      	movs	r0, #64	; 0x40
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b34:	6063      	str	r3, [r4, #4]
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000b36:	6022      	str	r2, [r4, #0]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000b38:	2320      	movs	r3, #32
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3e:	60a0      	str	r0, [r4, #8]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b40:	2004      	movs	r0, #4
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b42:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000b46:	642e      	str	r6, [r5, #64]	; 0x40
 8000b48:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b4a:	2603      	movs	r6, #3
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b4c:	6161      	str	r1, [r4, #20]
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b4e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b52:	61a2      	str	r2, [r4, #24]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000b58:	61e3      	str	r3, [r4, #28]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5a:	2300      	movs	r3, #0
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b5c:	6260      	str	r0, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000b5e:	4620      	mov	r0, r4
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b60:	6127      	str	r7, [r4, #16]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b62:	6322      	str	r2, [r4, #48]	; 0x30
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b64:	60e3      	str	r3, [r4, #12]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b66:	6223      	str	r3, [r4, #32]
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b68:	e9c4 610a 	strd	r6, r1, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000b6c:	f000 f9bc 	bl	8000ee8 <HAL_DMA_Init>
 8000b70:	b938      	cbnz	r0, 8000b82 <HAL_SD_MspInit+0x156>
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000b72:	63ec      	str	r4, [r5, #60]	; 0x3c
 8000b74:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8000b76:	b00b      	add	sp, #44	; 0x2c
 8000b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8000b7c:	f7ff ff42 	bl	8000a04 <Error_Handler>
 8000b80:	e7d1      	b.n	8000b26 <HAL_SD_MspInit+0xfa>
      Error_Handler();
 8000b82:	f7ff ff3f 	bl	8000a04 <Error_Handler>
 8000b86:	e7f4      	b.n	8000b72 <HAL_SD_MspInit+0x146>
 8000b88:	40012c00 	.word	0x40012c00
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	20000234 	.word	0x20000234
 8000b9c:	40026458 	.word	0x40026458
 8000ba0:	20000294 	.word	0x20000294
 8000ba4:	400264a0 	.word	0x400264a0

08000ba8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_MspInit+0x2c>)
{
 8000baa:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8000bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	b002      	add	sp, #8
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b530      	push	{r4, r5, lr}
 8000bda:	4601      	mov	r1, r0
 8000bdc:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2019      	movs	r0, #25
 8000be2:	f000 f939 	bl	8000e58 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000be6:	2019      	movs	r0, #25
 8000be8:	f000 f970 	bl	8000ecc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bee:	a901      	add	r1, sp, #4
 8000bf0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf4:	4d14      	ldr	r5, [pc, #80]	; (8000c48 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf6:	f042 0201 	orr.w	r2, r2, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bfa:	4c14      	ldr	r4, [pc, #80]	; (8000c4c <HAL_InitTick+0x74>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c08:	f000 ff50 	bl	8001aac <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c0c:	f000 ff3e 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c10:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c14:	0043      	lsls	r3, r0, #1
  htim1.Instance = TIM1;
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <HAL_InitTick+0x78>)
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c18:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000c1a:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1c:	fba5 0303 	umull	r0, r3, r5, r3
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c20:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8000c22:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	0c9b      	lsrs	r3, r3, #18
  htim1.Init.ClockDivision = 0;
 8000c26:	6122      	str	r2, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2a:	3b01      	subs	r3, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c2c:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c2e:	f001 ff5b 	bl	8002ae8 <HAL_TIM_Base_Init>
 8000c32:	b110      	cbz	r0, 8000c3a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8000c34:	2001      	movs	r0, #1
}
 8000c36:	b009      	add	sp, #36	; 0x24
 8000c38:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f002 f800 	bl	8002c40 <HAL_TIM_Base_Start_IT>
}
 8000c40:	b009      	add	sp, #36	; 0x24
 8000c42:	bd30      	pop	{r4, r5, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	200002f4 	.word	0x200002f4
 8000c50:	40010000 	.word	0x40010000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c56:	f000 ff4d 	bl	8001af4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <NMI_Handler+0x6>

08000c5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <HardFault_Handler>
 8000c5e:	bf00      	nop

08000c60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler>
 8000c62:	bf00      	nop

08000c64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <BusFault_Handler>
 8000c66:	bf00      	nop

08000c68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler>
 8000c6a:	bf00      	nop

08000c6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <DebugMon_Handler>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <PendSV_Handler>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <SysTick_Handler>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c7c:	4801      	ldr	r0, [pc, #4]	; (8000c84 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000c7e:	f002 b8e9 	b.w	8002e54 <HAL_TIM_IRQHandler>
 8000c82:	bf00      	nop
 8000c84:	200002f4 	.word	0x200002f4

08000c88 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c88:	4801      	ldr	r0, [pc, #4]	; (8000c90 <TIM2_IRQHandler+0x8>)
 8000c8a:	f002 b8e3 	b.w	8002e54 <HAL_TIM_IRQHandler>
 8000c8e:	bf00      	nop
 8000c90:	20000340 	.word	0x20000340

08000c94 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000c94:	4801      	ldr	r0, [pc, #4]	; (8000c9c <DMA2_Stream3_IRQHandler+0x8>)
 8000c96:	f000 b9c5 	b.w	8001024 <HAL_DMA_IRQHandler>
 8000c9a:	bf00      	nop
 8000c9c:	20000234 	.word	0x20000234

08000ca0 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000ca0:	4801      	ldr	r0, [pc, #4]	; (8000ca8 <DMA2_Stream6_IRQHandler+0x8>)
 8000ca2:	f000 b9bf 	b.w	8001024 <HAL_DMA_IRQHandler>
 8000ca6:	bf00      	nop
 8000ca8:	20000294 	.word	0x20000294

08000cac <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000cac:	4801      	ldr	r0, [pc, #4]	; (8000cb4 <I2C3_EV_IRQHandler+0x8>)
 8000cae:	f000 bbd3 	b.w	8001458 <HAL_I2C_EV_IRQHandler>
 8000cb2:	bf00      	nop
 8000cb4:	20000164 	.word	0x20000164

08000cb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SystemInit+0x18>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000cc2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cca:	6099      	str	r1, [r3, #8]
#endif
}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 10000;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	2300      	movs	r3, #0
{
 8000cd8:	b088      	sub	sp, #32
  htim2.Instance = TIM2;
 8000cda:	4818      	ldr	r0, [pc, #96]	; (8000d3c <MX_TIM2_Init+0x68>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ce0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ce4:	2464      	movs	r4, #100	; 0x64
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	9301      	str	r3, [sp, #4]
  htim2.Init.Period = 100;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	9307      	str	r3, [sp, #28]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfc:	f001 fef4 	bl	8002ae8 <HAL_TIM_Base_Init>
 8000d00:	b990      	cbnz	r0, 8000d28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d06:	a904      	add	r1, sp, #16
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0a:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0c:	f001 fff4 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 8000d10:	b988      	cbnz	r0, 8000d36 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d12:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d16:	a901      	add	r1, sp, #4
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d1a:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1e:	f002 f951 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	b920      	cbnz	r0, 8000d2e <MX_TIM2_Init+0x5a>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d24:	b008      	add	sp, #32
 8000d26:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d28:	f7ff fe6c 	bl	8000a04 <Error_Handler>
 8000d2c:	e7e9      	b.n	8000d02 <MX_TIM2_Init+0x2e>
    Error_Handler();
 8000d2e:	f7ff fe69 	bl	8000a04 <Error_Handler>
}
 8000d32:	b008      	add	sp, #32
 8000d34:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d36:	f7ff fe65 	bl	8000a04 <Error_Handler>
 8000d3a:	e7ea      	b.n	8000d12 <MX_TIM2_Init+0x3e>
 8000d3c:	20000340 	.word	0x20000340

08000d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8000d40:	6803      	ldr	r3, [r0, #0]
 8000d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d46:	d000      	beq.n	8000d4a <HAL_TIM_Base_MspInit+0xa>
 8000d48:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	201c      	movs	r0, #28
 8000d52:	4611      	mov	r1, r2
{
 8000d54:	b510      	push	{r4, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8000d58:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5a:	f044 0401 	orr.w	r4, r4, #1
 8000d5e:	641c      	str	r4, [r3, #64]	; 0x40
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6a:	f000 f875 	bl	8000e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d6e:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d70:	b002      	add	sp, #8
 8000d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d76:	f000 b8a9 	b.w	8000ecc <HAL_NVIC_EnableIRQ>
 8000d7a:	bf00      	nop

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d82:	e003      	b.n	8000d8c <LoopCopyDataInit>

08000d84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d8a:	3104      	adds	r1, #4

08000d8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d8c:	480b      	ldr	r0, [pc, #44]	; (8000dbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d94:	d3f6      	bcc.n	8000d84 <CopyDataInit>
  ldr  r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d98:	e002      	b.n	8000da0 <LoopFillZerobss>

08000d9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d9c:	f842 3b04 	str.w	r3, [r2], #4

08000da0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000da2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da4:	d3f9      	bcc.n	8000d9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ff87 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f005 fcad 	bl	8006708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fd3f 	bl	8000830 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000db8:	08006c38 	.word	0x08006c38
  ldr  r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000dc4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000dc8:	2000143c 	.word	0x2000143c

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 f82c 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fefd 	bl	8000bd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dde:	f7ff fee3 	bl	8000ba8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000de2:	2000      	movs	r0, #0
 8000de4:	bd08      	pop	{r3, pc}
 8000de6:	bf00      	nop

08000de8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x10>)
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_IncTick+0x14>)
 8000dec:	6811      	ldr	r1, [r2, #0]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	440b      	add	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000038c 	.word	0x2000038c
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e00:	4b01      	ldr	r3, [pc, #4]	; (8000e08 <HAL_GetTick+0x8>)
 8000e02:	6818      	ldr	r0, [r3, #0]
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	2000038c 	.word	0x2000038c

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fff6 	bl	8000e00 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	1c63      	adds	r3, r4, #1
 8000e18:	d002      	beq.n	8000e20 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <HAL_Delay+0x20>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	1b43      	subs	r3, r0, r5
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d3fa      	bcc.n	8000e20 <HAL_Delay+0x14>
  {
  }
}
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e32:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e36:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000e42:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e44:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000e4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e4c:	60cb      	str	r3, [r1, #12]
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	05fa0000 	.word	0x05fa0000

08000e58 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_NVIC_SetPriority+0x68>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e60:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e62:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	2d04      	cmp	r5, #4
 8000e6a:	bf28      	it	cs
 8000e6c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	2c06      	cmp	r4, #6
 8000e70:	d919      	bls.n	8000ea6 <HAL_NVIC_SetPriority+0x4e>
 8000e72:	3b03      	subs	r3, #3
 8000e74:	f04f 34ff 	mov.w	r4, #4294967295
 8000e78:	409c      	lsls	r4, r3
 8000e7a:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7e:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000e82:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	fa04 f405 	lsl.w	r4, r4, r5
 8000e88:	ea21 0104 	bic.w	r1, r1, r4
 8000e8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e90:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000e94:	db0a      	blt.n	8000eac <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	0109      	lsls	r1, r1, #4
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_NVIC_SetPriority+0x6c>)
 8000e9a:	b2c9      	uxtb	r1, r1
 8000e9c:	4403      	add	r3, r0
 8000e9e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ea2:	bc30      	pop	{r4, r5}
 8000ea4:	4770      	bx	lr
 8000ea6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	e7e8      	b.n	8000e7e <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	f000 000f 	and.w	r0, r0, #15
 8000eb0:	0109      	lsls	r1, r1, #4
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_NVIC_SetPriority+0x70>)
 8000eb4:	b2c9      	uxtb	r1, r1
 8000eb6:	4403      	add	r3, r0
 8000eb8:	7619      	strb	r1, [r3, #24]
 8000eba:	bc30      	pop	{r4, r5}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ecfc 	.word	0xe000ecfc

08000ecc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	db07      	blt.n	8000ee0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed0:	f000 011f 	and.w	r1, r0, #31
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	0940      	lsrs	r0, r0, #5
 8000ed8:	4a02      	ldr	r2, [pc, #8]	; (8000ee4 <HAL_NVIC_EnableIRQ+0x18>)
 8000eda:	408b      	lsls	r3, r1
 8000edc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ff88 	bl	8000e00 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ef0:	2c00      	cmp	r4, #0
 8000ef2:	d057      	beq.n	8000fa4 <HAL_DMA_Init+0xbc>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef4:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ef6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000efc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8000f00:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0c:	e005      	b.n	8000f1a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f0e:	f7ff ff77 	bl	8000e00 <HAL_GetTick>
 8000f12:	1b43      	subs	r3, r0, r5
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d83e      	bhi.n	8000f96 <HAL_DMA_Init+0xae>
 8000f18:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	07d1      	lsls	r1, r2, #31
 8000f1e:	d4f6      	bmi.n	8000f0e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f20:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8000f24:	68e5      	ldr	r5, [r4, #12]
 8000f26:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 8000f28:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f2e:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f32:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f34:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f38:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f3a:	4936      	ldr	r1, [pc, #216]	; (8001014 <HAL_DMA_Init+0x12c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3c:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f3e:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f40:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f42:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f44:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f46:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f48:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f4c:	d02c      	beq.n	8000fa8 <HAL_DMA_Init+0xc0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f4e:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f50:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f52:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f56:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	492f      	ldr	r1, [pc, #188]	; (8001018 <HAL_DMA_Init+0x130>)
  hdma->Instance->FCR = tmp;
 8000f5c:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f5e:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f60:	482e      	ldr	r0, [pc, #184]	; (800101c <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f62:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8000f66:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <HAL_DMA_Init+0x138>)
  hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f6e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f72:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f76:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f7a:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7c:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f80:	bf88      	it	hi
 8000f82:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f84:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f86:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f88:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8000f8a:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f8c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f8e:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000f90:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8000f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f98:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8000f9a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f9c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
}
 8000fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fa8:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000fac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fae:	4338      	orrs	r0, r7
 8000fb0:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
 8000fb2:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000fb4:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fb6:	f025 0507 	bic.w	r5, r5, #7
 8000fba:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
 8000fbc:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fc0:	2f00      	cmp	r7, #0
 8000fc2:	d0c9      	beq.n	8000f58 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000fc4:	b17e      	cbz	r6, 8000fe6 <HAL_DMA_Init+0xfe>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fc6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8000fca:	d012      	beq.n	8000ff2 <HAL_DMA_Init+0x10a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000fcc:	2a02      	cmp	r2, #2
 8000fce:	d903      	bls.n	8000fd8 <HAL_DMA_Init+0xf0>
 8000fd0:	2a03      	cmp	r2, #3
 8000fd2:	d1c1      	bne.n	8000f58 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fd4:	01fa      	lsls	r2, r7, #7
 8000fd6:	d5bf      	bpl.n	8000f58 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fda:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8000fdc:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fde:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000fe0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8000fe6:	2a01      	cmp	r2, #1
 8000fe8:	d010      	beq.n	800100c <HAL_DMA_Init+0x124>
 8000fea:	f032 0202 	bics.w	r2, r2, #2
 8000fee:	d1b3      	bne.n	8000f58 <HAL_DMA_Init+0x70>
 8000ff0:	e7f0      	b.n	8000fd4 <HAL_DMA_Init+0xec>
    switch (tmp)
 8000ff2:	2a03      	cmp	r2, #3
 8000ff4:	d8b0      	bhi.n	8000f58 <HAL_DMA_Init+0x70>
 8000ff6:	a101      	add	r1, pc, #4	; (adr r1, 8000ffc <HAL_DMA_Init+0x114>)
 8000ff8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000ffc:	08000fd9 	.word	0x08000fd9
 8001000:	08000fd5 	.word	0x08000fd5
 8001004:	08000fd9 	.word	0x08000fd9
 8001008:	0800100d 	.word	0x0800100d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800100c:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
 8001010:	d1a2      	bne.n	8000f58 <HAL_DMA_Init+0x70>
 8001012:	e7e1      	b.n	8000fd8 <HAL_DMA_Init+0xf0>
 8001014:	f010803f 	.word	0xf010803f
 8001018:	aaaaaaab 	.word	0xaaaaaaab
 800101c:	080067b8 	.word	0x080067b8
 8001020:	fffffc00 	.word	0xfffffc00

08001024 <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
 8001024:	4b75      	ldr	r3, [pc, #468]	; (80011fc <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 8001026:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001028:	2208      	movs	r2, #8
{
 800102a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 800102e:	681d      	ldr	r5, [r3, #0]
{
 8001030:	b082      	sub	sp, #8
 8001032:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 8001034:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001036:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800103a:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800103c:	409a      	lsls	r2, r3
 800103e:	4222      	tst	r2, r4
 8001040:	d004      	beq.n	800104c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	680f      	ldr	r7, [r1, #0]
 8001046:	0778      	lsls	r0, r7, #29
 8001048:	f100 808a 	bmi.w	8001160 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800104c:	2201      	movs	r2, #1
 800104e:	409a      	lsls	r2, r3
 8001050:	4222      	tst	r2, r4
 8001052:	d004      	beq.n	800105e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001054:	f8d8 1000 	ldr.w	r1, [r8]
 8001058:	6949      	ldr	r1, [r1, #20]
 800105a:	0609      	lsls	r1, r1, #24
 800105c:	d478      	bmi.n	8001150 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800105e:	2204      	movs	r2, #4
 8001060:	409a      	lsls	r2, r3
 8001062:	4222      	tst	r2, r4
 8001064:	d004      	beq.n	8001070 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001066:	f8d8 1000 	ldr.w	r1, [r8]
 800106a:	6809      	ldr	r1, [r1, #0]
 800106c:	078f      	lsls	r7, r1, #30
 800106e:	d467      	bmi.n	8001140 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001070:	2210      	movs	r2, #16
 8001072:	409a      	lsls	r2, r3
 8001074:	4222      	tst	r2, r4
 8001076:	d004      	beq.n	8001082 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001078:	f8d8 1000 	ldr.w	r1, [r8]
 800107c:	680f      	ldr	r7, [r1, #0]
 800107e:	0738      	lsls	r0, r7, #28
 8001080:	d449      	bmi.n	8001116 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001082:	2220      	movs	r2, #32
 8001084:	409a      	lsls	r2, r3
 8001086:	4222      	tst	r2, r4
 8001088:	d017      	beq.n	80010ba <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800108a:	f8d8 1000 	ldr.w	r1, [r8]
 800108e:	680c      	ldr	r4, [r1, #0]
 8001090:	06e0      	lsls	r0, r4, #27
 8001092:	d512      	bpl.n	80010ba <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001094:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001096:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800109a:	2a05      	cmp	r2, #5
 800109c:	d073      	beq.n	8001186 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800109e:	680b      	ldr	r3, [r1, #0]
 80010a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010a4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010a6:	f000 8090 	beq.w	80011ca <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010aa:	0319      	lsls	r1, r3, #12
 80010ac:	f140 809b 	bpl.w	80011e6 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80010b0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80010b4:	b10b      	cbz	r3, 80010ba <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80010b6:	4640      	mov	r0, r8
 80010b8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010ba:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80010be:	b33b      	cbz	r3, 8001110 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010c0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80010c4:	07da      	lsls	r2, r3, #31
 80010c6:	d51b      	bpl.n	8001100 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80010c8:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 80010cc:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80010d0:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 80010d4:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 80010de:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e002      	b.n	80010ea <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010e4:	6813      	ldr	r3, [r2, #0]
 80010e6:	07db      	lsls	r3, r3, #31
 80010e8:	d504      	bpl.n	80010f4 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80010ea:	9b01      	ldr	r3, [sp, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	42ab      	cmp	r3, r5
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	d9f7      	bls.n	80010e4 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 80010f4:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80010f6:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80010f8:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80010fc:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001100:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001104:	b123      	cbz	r3, 8001110 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8001106:	4640      	mov	r0, r8
}
 8001108:	b002      	add	sp, #8
 800110a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800110e:	4718      	bx	r3
}
 8001110:	b002      	add	sp, #8
 8001112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001116:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001118:	680a      	ldr	r2, [r1, #0]
 800111a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800111e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001120:	d12a      	bne.n	8001178 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001122:	05d7      	lsls	r7, r2, #23
 8001124:	d403      	bmi.n	800112e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001126:	680a      	ldr	r2, [r1, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800112e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001132:	2a00      	cmp	r2, #0
 8001134:	d0a5      	beq.n	8001082 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8001136:	4640      	mov	r0, r8
 8001138:	4790      	blx	r2
 800113a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800113e:	e7a0      	b.n	8001082 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001140:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001142:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001146:	f042 0204 	orr.w	r2, r2, #4
 800114a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800114e:	e78f      	b.n	8001070 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001150:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001152:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001156:	f042 0202 	orr.w	r2, r2, #2
 800115a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800115e:	e77e      	b.n	800105e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001160:	680f      	ldr	r7, [r1, #0]
 8001162:	f027 0704 	bic.w	r7, r7, #4
 8001166:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001168:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800116a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001176:	e769      	b.n	800104c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001178:	0312      	lsls	r2, r2, #12
 800117a:	d5d8      	bpl.n	800112e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800117c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001180:	2a00      	cmp	r2, #0
 8001182:	d1d8      	bne.n	8001136 <HAL_DMA_IRQHandler+0x112>
 8001184:	e77d      	b.n	8001082 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001186:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001188:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800118c:	f022 0216 	bic.w	r2, r2, #22
 8001190:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001192:	694a      	ldr	r2, [r1, #20]
 8001194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001198:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119a:	b354      	cbz	r4, 80011f2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119c:	680a      	ldr	r2, [r1, #0]
 800119e:	f022 0208 	bic.w	r2, r2, #8
 80011a2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a4:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80011a6:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 80011a8:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80011ae:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b2:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 80011b4:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80011b8:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d0a7      	beq.n	8001110 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80011c0:	4640      	mov	r0, r8
}
 80011c2:	b002      	add	sp, #8
 80011c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80011c8:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ca:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80011ce:	f47f af6f 	bne.w	80010b0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011d2:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80011d4:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011d6:	f022 0210 	bic.w	r2, r2, #16
 80011da:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80011dc:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80011e0:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 80011e4:	e764      	b.n	80010b0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80011e6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f47f af63 	bne.w	80010b6 <HAL_DMA_IRQHandler+0x92>
 80011f0:	e763      	b.n	80010ba <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011f2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d1d0      	bne.n	800119c <HAL_DMA_IRQHandler+0x178>
 80011fa:	e7d3      	b.n	80011a4 <HAL_DMA_IRQHandler+0x180>
 80011fc:	20000000 	.word	0x20000000
 8001200:	1b4e81b5 	.word	0x1b4e81b5

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001208:	2300      	movs	r3, #0
{
 800120a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800143c <HAL_GPIO_Init+0x238>
 8001210:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	f8df e22c 	ldr.w	lr, [pc, #556]	; 8001440 <HAL_GPIO_Init+0x23c>
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x1a>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001218:	3301      	adds	r3, #1
 800121a:	2b10      	cmp	r3, #16
 800121c:	d057      	beq.n	80012ce <HAL_GPIO_Init+0xca>
    ioposition = ((uint32_t)0x01) << position;
 800121e:	2201      	movs	r2, #1
 8001220:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 8001226:	43aa      	bics	r2, r5
 8001228:	d1f6      	bne.n	8001218 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122a:	684a      	ldr	r2, [r1, #4]
 800122c:	005f      	lsls	r7, r3, #1
 800122e:	f022 0c10 	bic.w	ip, r2, #16
 8001232:	f10c 34ff 	add.w	r4, ip, #4294967295
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001238:	f04f 0403 	mov.w	r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	f200 80c0 	bhi.w	80013c0 <HAL_GPIO_Init+0x1bc>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001240:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp = GPIOx->OSPEEDR; 
 8001244:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001248:	40bc      	lsls	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800124a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800124c:	ea28 0804 	bic.w	r8, r8, r4
 8001250:	43e4      	mvns	r4, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001252:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001254:	68ce      	ldr	r6, [r1, #12]
 8001256:	fa06 f907 	lsl.w	r9, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800125a:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800125c:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8001260:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8001264:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	ea28 080a 	bic.w	r8, r8, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800126c:	ea46 0608 	orr.w	r6, r6, r8
        GPIOx->OTYPER = temp;
 8001270:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001272:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001274:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001278:	ea06 0804 	and.w	r8, r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800127c:	688e      	ldr	r6, [r1, #8]
 800127e:	fa06 f607 	lsl.w	r6, r6, r7
 8001282:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 8001286:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001288:	d124      	bne.n	80012d4 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3];
 800128a:	08de      	lsrs	r6, r3, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800128c:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001290:	f002 0203 	and.w	r2, r2, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001294:	f04f 080f 	mov.w	r8, #15
 8001298:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  for(position = 0; position < GPIO_NUMBER; position++)
 800129c:	3301      	adds	r3, #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800129e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012a2:	fa02 f707 	lsl.w	r7, r2, r7
        temp = GPIOx->AFR[position >> 3];
 80012a6:	f8d6 9020 	ldr.w	r9, [r6, #32]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012aa:	2b10      	cmp	r3, #16
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012ac:	690a      	ldr	r2, [r1, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012ae:	fa08 f80c 	lsl.w	r8, r8, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012b2:	fa02 fc0c 	lsl.w	ip, r2, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012b6:	ea29 0208 	bic.w	r2, r9, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012ba:	ea4c 0202 	orr.w	r2, ip, r2
        GPIOx->AFR[position >> 3] = temp;
 80012be:	6232      	str	r2, [r6, #32]
      temp = GPIOx->MODER;
 80012c0:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012c2:	ea04 0402 	and.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012c6:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80012ca:	6004      	str	r4, [r0, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012cc:	d1a7      	bne.n	800121e <HAL_GPIO_Init+0x1a>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80012ce:	b005      	add	sp, #20
 80012d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 80012d4:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012d8:	f002 0603 	and.w	r6, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012dc:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012e0:	fa06 f707 	lsl.w	r7, r6, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e4:	00d4      	lsls	r4, r2, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012e6:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 80012ea:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ec:	d594      	bpl.n	8001218 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
 80012f2:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f6:	f003 0403 	and.w	r4, r3, #3
 80012fa:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001300:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001304:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	f8cb 7044 	str.w	r7, [fp, #68]	; 0x44
 800130a:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800
 800130e:	f8db 7044 	ldr.w	r7, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001312:	fa06 f804 	lsl.w	r8, r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800131a:	9703      	str	r7, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131c:	4f3e      	ldr	r7, [pc, #248]	; (8001418 <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	9e03      	ldr	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001320:	42b8      	cmp	r0, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8001322:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001326:	ea26 0608 	bic.w	r6, r6, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800132a:	d020      	beq.n	800136e <HAL_GPIO_Init+0x16a>
 800132c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001330:	42b8      	cmp	r0, r7
 8001332:	d048      	beq.n	80013c6 <HAL_GPIO_Init+0x1c2>
 8001334:	4f39      	ldr	r7, [pc, #228]	; (800141c <HAL_GPIO_Init+0x218>)
 8001336:	42b8      	cmp	r0, r7
 8001338:	d04a      	beq.n	80013d0 <HAL_GPIO_Init+0x1cc>
 800133a:	4f39      	ldr	r7, [pc, #228]	; (8001420 <HAL_GPIO_Init+0x21c>)
 800133c:	42b8      	cmp	r0, r7
 800133e:	d04c      	beq.n	80013da <HAL_GPIO_Init+0x1d6>
 8001340:	4f38      	ldr	r7, [pc, #224]	; (8001424 <HAL_GPIO_Init+0x220>)
 8001342:	42b8      	cmp	r0, r7
 8001344:	d04e      	beq.n	80013e4 <HAL_GPIO_Init+0x1e0>
 8001346:	4f38      	ldr	r7, [pc, #224]	; (8001428 <HAL_GPIO_Init+0x224>)
 8001348:	42b8      	cmp	r0, r7
 800134a:	d055      	beq.n	80013f8 <HAL_GPIO_Init+0x1f4>
 800134c:	4f37      	ldr	r7, [pc, #220]	; (800142c <HAL_GPIO_Init+0x228>)
 800134e:	42b8      	cmp	r0, r7
 8001350:	d057      	beq.n	8001402 <HAL_GPIO_Init+0x1fe>
 8001352:	4f37      	ldr	r7, [pc, #220]	; (8001430 <HAL_GPIO_Init+0x22c>)
 8001354:	42b8      	cmp	r0, r7
 8001356:	d04a      	beq.n	80013ee <HAL_GPIO_Init+0x1ea>
 8001358:	4f36      	ldr	r7, [pc, #216]	; (8001434 <HAL_GPIO_Init+0x230>)
 800135a:	42b8      	cmp	r0, r7
 800135c:	d056      	beq.n	800140c <HAL_GPIO_Init+0x208>
 800135e:	4f36      	ldr	r7, [pc, #216]	; (8001438 <HAL_GPIO_Init+0x234>)
 8001360:	42b8      	cmp	r0, r7
 8001362:	bf0c      	ite	eq
 8001364:	2709      	moveq	r7, #9
 8001366:	270a      	movne	r7, #10
 8001368:	fa07 f404 	lsl.w	r4, r7, r4
 800136c:	4326      	orrs	r6, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800136e:	f8cc 6008 	str.w	r6, [ip, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001372:	03d7      	lsls	r7, r2, #15
        temp = EXTI->IMR;
 8001374:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001378:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 800137c:	bf4c      	ite	mi
 800137e:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~((uint32_t)iocurrent);
 8001382:	4034      	andpl	r4, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001384:	0397      	lsls	r7, r2, #14
        EXTI->IMR = temp;
 8001386:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->EMR;
 800138a:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800138e:	bf54      	ite	pl
 8001390:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8001392:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001396:	02d7      	lsls	r7, r2, #11
        EXTI->EMR = temp;
 8001398:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->RTSR;
 800139c:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	bf54      	ite	pl
 80013a2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80013a4:	ea4a 0404 	orrmi.w	r4, sl, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	0292      	lsls	r2, r2, #10
        EXTI->RTSR = temp;
 80013aa:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR;
 80013ae:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	bf54      	ite	pl
 80013b4:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80013b6:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR = temp;
 80013ba:	f8ce 400c 	str.w	r4, [lr, #12]
 80013be:	e72b      	b.n	8001218 <HAL_GPIO_Init+0x14>
 80013c0:	40bc      	lsls	r4, r7
 80013c2:	43e4      	mvns	r4, r4
 80013c4:	e755      	b.n	8001272 <HAL_GPIO_Init+0x6e>
 80013c6:	2701      	movs	r7, #1
 80013c8:	fa07 f404 	lsl.w	r4, r7, r4
 80013cc:	4326      	orrs	r6, r4
 80013ce:	e7ce      	b.n	800136e <HAL_GPIO_Init+0x16a>
 80013d0:	2702      	movs	r7, #2
 80013d2:	fa07 f404 	lsl.w	r4, r7, r4
 80013d6:	4326      	orrs	r6, r4
 80013d8:	e7c9      	b.n	800136e <HAL_GPIO_Init+0x16a>
 80013da:	2703      	movs	r7, #3
 80013dc:	fa07 f404 	lsl.w	r4, r7, r4
 80013e0:	4326      	orrs	r6, r4
 80013e2:	e7c4      	b.n	800136e <HAL_GPIO_Init+0x16a>
 80013e4:	2704      	movs	r7, #4
 80013e6:	fa07 f404 	lsl.w	r4, r7, r4
 80013ea:	4326      	orrs	r6, r4
 80013ec:	e7bf      	b.n	800136e <HAL_GPIO_Init+0x16a>
 80013ee:	2707      	movs	r7, #7
 80013f0:	fa07 f404 	lsl.w	r4, r7, r4
 80013f4:	4326      	orrs	r6, r4
 80013f6:	e7ba      	b.n	800136e <HAL_GPIO_Init+0x16a>
 80013f8:	2705      	movs	r7, #5
 80013fa:	fa07 f404 	lsl.w	r4, r7, r4
 80013fe:	4326      	orrs	r6, r4
 8001400:	e7b5      	b.n	800136e <HAL_GPIO_Init+0x16a>
 8001402:	2706      	movs	r7, #6
 8001404:	fa07 f404 	lsl.w	r4, r7, r4
 8001408:	4326      	orrs	r6, r4
 800140a:	e7b0      	b.n	800136e <HAL_GPIO_Init+0x16a>
 800140c:	2708      	movs	r7, #8
 800140e:	fa07 f404 	lsl.w	r4, r7, r4
 8001412:	4326      	orrs	r6, r4
 8001414:	e7ab      	b.n	800136e <HAL_GPIO_Init+0x16a>
 8001416:	bf00      	nop
 8001418:	40020000 	.word	0x40020000
 800141c:	40020800 	.word	0x40020800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40021000 	.word	0x40021000
 8001428:	40021400 	.word	0x40021400
 800142c:	40021800 	.word	0x40021800
 8001430:	40021c00 	.word	0x40021c00
 8001434:	40022000 	.word	0x40022000
 8001438:	40022400 	.word	0x40022400
 800143c:	40023800 	.word	0x40023800
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001444:	6903      	ldr	r3, [r0, #16]
 8001446:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001448:	bf14      	ite	ne
 800144a:	2001      	movne	r0, #1
 800144c:	2000      	moveq	r0, #0
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	b902      	cbnz	r2, 8001454 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001452:	0409      	lsls	r1, r1, #16
 8001454:	6181      	str	r1, [r0, #24]
  }
}
 8001456:	4770      	bx	lr

08001458 <HAL_I2C_EV_IRQHandler>:
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001458:	6802      	ldr	r2, [r0, #0]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800145a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800145c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800145e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8001460:	b103      	cbz	r3, 8001464 <HAL_I2C_EV_IRQHandler+0xc>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001462:	4718      	bx	r3
  }
}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800146e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001472:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001474:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001476:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800147a:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001480:	9201      	str	r2, [sp, #4]
 8001482:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800148a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800148c:	f7ff fcb8 	bl	8000e00 <HAL_GetTick>
 8001490:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001492:	e005      	b.n	80014a0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001494:	f7ff fcb4 	bl	8000e00 <HAL_GetTick>
 8001498:	1b00      	subs	r0, r0, r4
 800149a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800149e:	d817      	bhi.n	80014d0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014a0:	686b      	ldr	r3, [r5, #4]
 80014a2:	03da      	lsls	r2, r3, #15
 80014a4:	d5f6      	bpl.n	8001494 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014a6:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014a8:	4e0c      	ldr	r6, [pc, #48]	; (80014dc <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ae:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80014b0:	f7ff fca6 	bl	8000e00 <HAL_GetTick>
 80014b4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014b6:	e005      	b.n	80014c4 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b8:	f7ff fca2 	bl	8000e00 <HAL_GetTick>
 80014bc:	1b00      	subs	r0, r0, r4
 80014be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014c2:	d805      	bhi.n	80014d0 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014c4:	6873      	ldr	r3, [r6, #4]
 80014c6:	039b      	lsls	r3, r3, #14
 80014c8:	d5f6      	bpl.n	80014b8 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80014ca:	2000      	movs	r0, #0
}
 80014cc:	b002      	add	sp, #8
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 80014d0:	2003      	movs	r0, #3
}
 80014d2:	b002      	add	sp, #8
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	2800      	cmp	r0, #0
 80014e2:	f000 81c1 	beq.w	8001868 <HAL_RCC_OscConfig+0x388>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	6803      	ldr	r3, [r0, #0]
{
 80014e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ec:	07dd      	lsls	r5, r3, #31
{
 80014ee:	b082      	sub	sp, #8
 80014f0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	d535      	bpl.n	8001560 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f4:	49ac      	ldr	r1, [pc, #688]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 80014f6:	688a      	ldr	r2, [r1, #8]
 80014f8:	f002 020c 	and.w	r2, r2, #12
 80014fc:	2a04      	cmp	r2, #4
 80014fe:	f000 80e6 	beq.w	80016ce <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	688a      	ldr	r2, [r1, #8]
 8001504:	f002 020c 	and.w	r2, r2, #12
 8001508:	2a08      	cmp	r2, #8
 800150a:	f000 80dc 	beq.w	80016c6 <HAL_RCC_OscConfig+0x1e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	6863      	ldr	r3, [r4, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d010      	beq.n	8001538 <HAL_RCC_OscConfig+0x58>
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8104 	beq.w	8001724 <HAL_RCC_OscConfig+0x244>
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	4ba1      	ldr	r3, [pc, #644]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f000 8190 	beq.w	8001848 <HAL_RCC_OscConfig+0x368>
 8001528:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e004      	b.n	8001542 <HAL_RCC_OscConfig+0x62>
 8001538:	4a9b      	ldr	r2, [pc, #620]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fc5d 	bl	8000e00 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4e98      	ldr	r6, [pc, #608]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001548:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e005      	b.n	8001558 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc58 	bl	8000e00 <HAL_GetTick>
 8001550:	1b40      	subs	r0, r0, r5
 8001552:	2864      	cmp	r0, #100	; 0x64
 8001554:	f200 80e2 	bhi.w	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001558:	6833      	ldr	r3, [r6, #0]
 800155a:	039a      	lsls	r2, r3, #14
 800155c:	d5f6      	bpl.n	800154c <HAL_RCC_OscConfig+0x6c>
 800155e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001560:	079f      	lsls	r7, r3, #30
 8001562:	d529      	bpl.n	80015b8 <HAL_RCC_OscConfig+0xd8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001564:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001566:	6891      	ldr	r1, [r2, #8]
 8001568:	f011 0f0c 	tst.w	r1, #12
 800156c:	f000 8082 	beq.w	8001674 <HAL_RCC_OscConfig+0x194>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001570:	6891      	ldr	r1, [r2, #8]
 8001572:	f001 010c 	and.w	r1, r1, #12
 8001576:	2908      	cmp	r1, #8
 8001578:	d079      	beq.n	800166e <HAL_RCC_OscConfig+0x18e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157a:	68e3      	ldr	r3, [r4, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 8109 	beq.w	8001794 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001584:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800158e:	f7ff fc37 	bl	8000e00 <HAL_GetTick>
 8001592:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	e005      	b.n	80015a2 <HAL_RCC_OscConfig+0xc2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fc33 	bl	8000e00 <HAL_GetTick>
 800159a:	1b40      	subs	r0, r0, r5
 800159c:	2802      	cmp	r0, #2
 800159e:	f200 80bd 	bhi.w	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	6833      	ldr	r3, [r6, #0]
 80015a4:	0798      	lsls	r0, r3, #30
 80015a6:	d5f6      	bpl.n	8001596 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	6833      	ldr	r3, [r6, #0]
 80015aa:	6922      	ldr	r2, [r4, #16]
 80015ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015b4:	6033      	str	r3, [r6, #0]
 80015b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b8:	071a      	lsls	r2, r3, #28
 80015ba:	d41f      	bmi.n	80015fc <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	075d      	lsls	r5, r3, #29
 80015be:	d535      	bpl.n	800162c <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c0:	4b79      	ldr	r3, [pc, #484]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 80015c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c4:	00d0      	lsls	r0, r2, #3
 80015c6:	d573      	bpl.n	80016b0 <HAL_RCC_OscConfig+0x1d0>
  FlagStatus pwrclkchanged = RESET;
 80015c8:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x2cc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	05d1      	lsls	r1, r2, #23
 80015d0:	f140 8093 	bpl.w	80016fa <HAL_RCC_OscConfig+0x21a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d4:	68a3      	ldr	r3, [r4, #8]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	f000 80f4 	beq.w	80017c4 <HAL_RCC_OscConfig+0x2e4>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80b8 	beq.w	8001752 <HAL_RCC_OscConfig+0x272>
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	4b70      	ldr	r3, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 80015e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015e8:	f000 8136 	beq.w	8001858 <HAL_RCC_OscConfig+0x378>
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	671a      	str	r2, [r3, #112]	; 0x70
 80015f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015f4:	f022 0204 	bic.w	r2, r2, #4
 80015f8:	671a      	str	r2, [r3, #112]	; 0x70
 80015fa:	e0e8      	b.n	80017ce <HAL_RCC_OscConfig+0x2ee>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fc:	6963      	ldr	r3, [r4, #20]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d043      	beq.n	800168a <HAL_RCC_OscConfig+0x1aa>
      __HAL_RCC_LSI_ENABLE();
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001604:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800160e:	f7ff fbf7 	bl	8000e00 <HAL_GetTick>
 8001612:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001614:	e004      	b.n	8001620 <HAL_RCC_OscConfig+0x140>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fbf3 	bl	8000e00 <HAL_GetTick>
 800161a:	1b40      	subs	r0, r0, r5
 800161c:	2802      	cmp	r0, #2
 800161e:	d87d      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001620:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001622:	079b      	lsls	r3, r3, #30
 8001624:	d5f7      	bpl.n	8001616 <HAL_RCC_OscConfig+0x136>
 8001626:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	075d      	lsls	r5, r3, #29
 800162a:	d4c9      	bmi.n	80015c0 <HAL_RCC_OscConfig+0xe0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162c:	69a0      	ldr	r0, [r4, #24]
 800162e:	b1d0      	cbz	r0, 8001666 <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001630:	4b5d      	ldr	r3, [pc, #372]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	f002 020c 	and.w	r2, r2, #12
 8001638:	2a08      	cmp	r2, #8
 800163a:	f000 80db 	beq.w	80017f4 <HAL_RCC_OscConfig+0x314>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001640:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8001644:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001648:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	f000 810f 	beq.w	800186c <HAL_RCC_OscConfig+0x38c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fbd7 	bl	8000e00 <HAL_GetTick>
 8001652:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	e004      	b.n	8001660 <HAL_RCC_OscConfig+0x180>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fbd3 	bl	8000e00 <HAL_GetTick>
 800165a:	1b00      	subs	r0, r0, r4
 800165c:	2802      	cmp	r0, #2
 800165e:	d85d      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	019b      	lsls	r3, r3, #6
 8001664:	d4f7      	bmi.n	8001656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001666:	2000      	movs	r0, #0
}
 8001668:	b002      	add	sp, #8
 800166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	6852      	ldr	r2, [r2, #4]
 8001670:	0256      	lsls	r6, r2, #9
 8001672:	d482      	bmi.n	800157a <HAL_RCC_OscConfig+0x9a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001674:	4a4c      	ldr	r2, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	0795      	lsls	r5, r2, #30
 800167a:	d532      	bpl.n	80016e2 <HAL_RCC_OscConfig+0x202>
 800167c:	68e2      	ldr	r2, [r4, #12]
 800167e:	2a01      	cmp	r2, #1
 8001680:	d02f      	beq.n	80016e2 <HAL_RCC_OscConfig+0x202>
        return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
}
 8001684:	b002      	add	sp, #8
 8001686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 800168c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8001690:	f022 0201 	bic.w	r2, r2, #1
 8001694:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001696:	f7ff fbb3 	bl	8000e00 <HAL_GetTick>
 800169a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e004      	b.n	80016a8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fbaf 	bl	8000e00 <HAL_GetTick>
 80016a2:	1b40      	subs	r0, r0, r5
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d839      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80016aa:	079f      	lsls	r7, r3, #30
 80016ac:	d4f7      	bmi.n	800169e <HAL_RCC_OscConfig+0x1be>
 80016ae:	e7ba      	b.n	8001626 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80016b2:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016c4:	e781      	b.n	80015ca <HAL_RCC_OscConfig+0xea>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c6:	684a      	ldr	r2, [r1, #4]
 80016c8:	0250      	lsls	r0, r2, #9
 80016ca:	f57f af20 	bpl.w	800150e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ce:	4a36      	ldr	r2, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	0391      	lsls	r1, r2, #14
 80016d4:	f57f af44 	bpl.w	8001560 <HAL_RCC_OscConfig+0x80>
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	2a00      	cmp	r2, #0
 80016dc:	f47f af40 	bne.w	8001560 <HAL_RCC_OscConfig+0x80>
 80016e0:	e7cf      	b.n	8001682 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	4931      	ldr	r1, [pc, #196]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 80016e4:	6920      	ldr	r0, [r4, #16]
 80016e6:	680a      	ldr	r2, [r1, #0]
 80016e8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80016ec:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80016f0:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	071a      	lsls	r2, r3, #28
 80016f4:	f57f af62 	bpl.w	80015bc <HAL_RCC_OscConfig+0xdc>
 80016f8:	e780      	b.n	80015fc <HAL_RCC_OscConfig+0x11c>
      PWR->CR1 |= PWR_CR1_DBP;
 80016fa:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fc:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 80016fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001702:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001704:	f7ff fb7c 	bl	8000e00 <HAL_GetTick>
 8001708:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	05da      	lsls	r2, r3, #23
 800170e:	f53f af61 	bmi.w	80015d4 <HAL_RCC_OscConfig+0xf4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fb75 	bl	8000e00 <HAL_GetTick>
 8001716:	1b80      	subs	r0, r0, r6
 8001718:	2864      	cmp	r0, #100	; 0x64
 800171a:	d9f6      	bls.n	800170a <HAL_RCC_OscConfig+0x22a>
            return HAL_TIMEOUT;
 800171c:	2003      	movs	r0, #3
}
 800171e:	b002      	add	sp, #8
 8001720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001726:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001728:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001736:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001738:	f7ff fb62 	bl	8000e00 <HAL_GetTick>
 800173c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e004      	b.n	800174a <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fb5e 	bl	8000e00 <HAL_GetTick>
 8001744:	1b40      	subs	r0, r0, r5
 8001746:	2864      	cmp	r0, #100	; 0x64
 8001748:	d8e8      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	6833      	ldr	r3, [r6, #0]
 800174c:	039b      	lsls	r3, r3, #14
 800174e:	d4f7      	bmi.n	8001740 <HAL_RCC_OscConfig+0x260>
 8001750:	e705      	b.n	800155e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175a:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	671a      	str	r2, [r3, #112]	; 0x70
 8001762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001764:	f022 0204 	bic.w	r2, r2, #4
 8001768:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800176a:	f7ff fb49 	bl	8000e00 <HAL_GetTick>
 800176e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e004      	b.n	800177c <HAL_RCC_OscConfig+0x29c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb45 	bl	8000e00 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	4540      	cmp	r0, r8
 800177a:	d8cf      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800177e:	0798      	lsls	r0, r3, #30
 8001780:	d4f7      	bmi.n	8001772 <HAL_RCC_OscConfig+0x292>
    if (pwrclkchanged == SET)
 8001782:	2d00      	cmp	r5, #0
 8001784:	f43f af52 	beq.w	800162c <HAL_RCC_OscConfig+0x14c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 800178a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800178c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	e74b      	b.n	800162c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_RCC_OscConfig+0x2c8>)
 8001796:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001798:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017a0:	f7ff fb2e 	bl	8000e00 <HAL_GetTick>
 80017a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x2da>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb26 	bl	8000e00 <HAL_GetTick>
 80017b4:	1b40      	subs	r0, r0, r5
 80017b6:	2802      	cmp	r0, #2
 80017b8:	d8b0      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	6833      	ldr	r3, [r6, #0]
 80017bc:	0799      	lsls	r1, r3, #30
 80017be:	d4f7      	bmi.n	80017b0 <HAL_RCC_OscConfig+0x2d0>
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	e6f9      	b.n	80015b8 <HAL_RCC_OscConfig+0xd8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	4a42      	ldr	r2, [pc, #264]	; (80018d0 <HAL_RCC_OscConfig+0x3f0>)
 80017c6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80017ce:	f7ff fb17 	bl	8000e00 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	4f3f      	ldr	r7, [pc, #252]	; (80018d0 <HAL_RCC_OscConfig+0x3f0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	e004      	b.n	80017e6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff fb10 	bl	8000e00 <HAL_GetTick>
 80017e0:	1b80      	subs	r0, r0, r6
 80017e2:	4540      	cmp	r0, r8
 80017e4:	d89a      	bhi.n	800171c <HAL_RCC_OscConfig+0x23c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017e8:	079b      	lsls	r3, r3, #30
 80017ea:	d5f7      	bpl.n	80017dc <HAL_RCC_OscConfig+0x2fc>
    if (pwrclkchanged == SET)
 80017ec:	2d00      	cmp	r5, #0
 80017ee:	f43f af1d 	beq.w	800162c <HAL_RCC_OscConfig+0x14c>
 80017f2:	e7c9      	b.n	8001788 <HAL_RCC_OscConfig+0x2a8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80017f6:	685a      	ldr	r2, [r3, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f8:	f43f af36 	beq.w	8001668 <HAL_RCC_OscConfig+0x188>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001800:	69e1      	ldr	r1, [r4, #28]
 8001802:	428b      	cmp	r3, r1
 8001804:	f47f af3d 	bne.w	8001682 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001808:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180c:	6a21      	ldr	r1, [r4, #32]
 800180e:	428b      	cmp	r3, r1
 8001810:	f47f af37 	bne.w	8001682 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001818:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800181a:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800181c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001820:	f47f af2f 	bne.w	8001682 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001826:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001832:	f47f af26 	bne.w	8001682 <HAL_RCC_OscConfig+0x1a2>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001838:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800183c:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8001840:	bf14      	ite	ne
 8001842:	2001      	movne	r0, #1
 8001844:	2000      	moveq	r0, #0
 8001846:	e70f      	b.n	8001668 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e674      	b.n	8001542 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	f042 0204 	orr.w	r2, r2, #4
 800185c:	671a      	str	r2, [r3, #112]	; 0x70
 800185e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	671a      	str	r2, [r3, #112]	; 0x70
 8001866:	e7b2      	b.n	80017ce <HAL_RCC_OscConfig+0x2ee>
    return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
}
 800186a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800186c:	f7ff fac8 	bl	8000e00 <HAL_GetTick>
 8001870:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e005      	b.n	8001880 <HAL_RCC_OscConfig+0x3a0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fac4 	bl	8000e00 <HAL_GetTick>
 8001878:	1b80      	subs	r0, r0, r6
 800187a:	2802      	cmp	r0, #2
 800187c:	f63f af4e 	bhi.w	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	0199      	lsls	r1, r3, #6
 8001884:	d4f6      	bmi.n	8001874 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001886:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001888:	69e3      	ldr	r3, [r4, #28]
 800188a:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	4e10      	ldr	r6, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x3f0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188e:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
 8001892:	3a01      	subs	r2, #1
 8001894:	430b      	orrs	r3, r1
 8001896:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800189c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80018a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80018a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018a8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018b2:	f7ff faa5 	bl	8000e00 <HAL_GetTick>
 80018b6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b8:	e005      	b.n	80018c6 <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff faa1 	bl	8000e00 <HAL_GetTick>
 80018be:	1b00      	subs	r0, r0, r4
 80018c0:	2802      	cmp	r0, #2
 80018c2:	f63f af2b 	bhi.w	800171c <HAL_RCC_OscConfig+0x23c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c6:	6833      	ldr	r3, [r6, #0]
 80018c8:	019a      	lsls	r2, r3, #6
 80018ca:	d5f6      	bpl.n	80018ba <HAL_RCC_OscConfig+0x3da>
 80018cc:	e6cb      	b.n	8001666 <HAL_RCC_OscConfig+0x186>
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d4:	2800      	cmp	r0, #0
 80018d6:	f000 80b4 	beq.w	8001a42 <HAL_RCC_ClockConfig+0x16e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018da:	4a61      	ldr	r2, [pc, #388]	; (8001a60 <HAL_RCC_ClockConfig+0x18c>)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	428b      	cmp	r3, r1
{
 80018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e8:	4604      	mov	r4, r0
 80018ea:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f023 030f 	bic.w	r3, r3, #15
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	428b      	cmp	r3, r1
 8001900:	d002      	beq.n	8001908 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001902:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	0798      	lsls	r0, r3, #30
 800190c:	d514      	bpl.n	8001938 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190e:	0759      	lsls	r1, r3, #29
 8001910:	d504      	bpl.n	800191c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001912:	4954      	ldr	r1, [pc, #336]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 8001914:	688a      	ldr	r2, [r1, #8]
 8001916:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800191a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	071a      	lsls	r2, r3, #28
 800191e:	d504      	bpl.n	800192a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4950      	ldr	r1, [pc, #320]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 8001922:	688a      	ldr	r2, [r1, #8]
 8001924:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001928:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192a:	494e      	ldr	r1, [pc, #312]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 800192c:	68a0      	ldr	r0, [r4, #8]
 800192e:	688a      	ldr	r2, [r1, #8]
 8001930:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001934:	4302      	orrs	r2, r0
 8001936:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001938:	07df      	lsls	r7, r3, #31
 800193a:	d521      	bpl.n	8001980 <HAL_RCC_ClockConfig+0xac>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001944:	d07f      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001946:	2a02      	cmp	r2, #2
 8001948:	d078      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x168>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	0799      	lsls	r1, r3, #30
 800194c:	d5d9      	bpl.n	8001902 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194e:	4945      	ldr	r1, [pc, #276]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001954:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001960:	f7ff fa4e 	bl	8000e00 <HAL_GetTick>
 8001964:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	e004      	b.n	8001972 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001968:	f7ff fa4a 	bl	8000e00 <HAL_GetTick>
 800196c:	1b80      	subs	r0, r0, r6
 800196e:	4540      	cmp	r0, r8
 8001970:	d86c      	bhi.n	8001a4c <HAL_RCC_ClockConfig+0x178>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6862      	ldr	r2, [r4, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800197e:	d1f3      	bne.n	8001968 <HAL_RCC_ClockConfig+0x94>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <HAL_RCC_ClockConfig+0x18c>)
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	42ab      	cmp	r3, r5
 800198a:	d909      	bls.n	80019a0 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	f023 030f 	bic.w	r3, r3, #15
 8001992:	432b      	orrs	r3, r5
 8001994:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	42ab      	cmp	r3, r5
 800199e:	d1b0      	bne.n	8001902 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	075a      	lsls	r2, r3, #29
 80019a4:	d506      	bpl.n	80019b4 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a6:	492f      	ldr	r1, [pc, #188]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 80019a8:	68e0      	ldr	r0, [r4, #12]
 80019aa:	688a      	ldr	r2, [r1, #8]
 80019ac:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80019b0:	4302      	orrs	r2, r0
 80019b2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	071b      	lsls	r3, r3, #28
 80019b6:	d431      	bmi.n	8001a1c <HAL_RCC_ClockConfig+0x148>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	492a      	ldr	r1, [pc, #168]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 80019ba:	688b      	ldr	r3, [r1, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d039      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x164>
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d118      	bne.n	80019fa <HAL_RCC_ClockConfig+0x126>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c8:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ca:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d0:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019d2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80019d6:	d03b      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x17c>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d8:	4823      	ldr	r0, [pc, #140]	; (8001a68 <HAL_RCC_ClockConfig+0x194>)
 80019da:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019de:	2300      	movs	r3, #0
 80019e0:	fba1 0100 	umull	r0, r1, r1, r0
 80019e4:	f7fe fc18 	bl	8000218 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019f0:	3301      	adds	r3, #1
 80019f2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80019f4:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80019f8:	e000      	b.n	80019fc <HAL_RCC_ClockConfig+0x128>
      sysclockfreq = HSI_VALUE;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fc:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 80019fe:	4c1c      	ldr	r4, [pc, #112]	; (8001a70 <HAL_RCC_ClockConfig+0x19c>)
 8001a00:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8001a02:	481c      	ldr	r0, [pc, #112]	; (8001a74 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a04:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001a08:	491b      	ldr	r1, [pc, #108]	; (8001a78 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8001a0a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a0c:	5ca2      	ldrb	r2, [r4, r2]
 8001a0e:	40d3      	lsrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8001a12:	f7ff f8e1 	bl	8000bd8 <HAL_InitTick>
  return HAL_OK;
 8001a16:	2000      	movs	r0, #0
}
 8001a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
 8001a1e:	6921      	ldr	r1, [r4, #16]
 8001a20:	6893      	ldr	r3, [r2, #8]
 8001a22:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2c:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2e:	688b      	ldr	r3, [r1, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d1c5      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf0>
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x194>)
 8001a3a:	e7df      	b.n	80019fc <HAL_RCC_ClockConfig+0x128>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	0198      	lsls	r0, r3, #6
 8001a3e:	d486      	bmi.n	800194e <HAL_RCC_ClockConfig+0x7a>
 8001a40:	e75f      	b.n	8001902 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
}
 8001a44:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	039e      	lsls	r6, r3, #14
 8001a48:	d481      	bmi.n	800194e <HAL_RCC_ClockConfig+0x7a>
 8001a4a:	e75a      	b.n	8001902 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	e759      	b.n	8001904 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <HAL_RCC_ClockConfig+0x198>)
 8001a52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a56:	fba1 0100 	umull	r0, r1, r1, r0
 8001a5a:	f7fe fbdd 	bl	8000218 <__aeabi_uldivmod>
 8001a5e:	e7c3      	b.n	80019e8 <HAL_RCC_ClockConfig+0x114>
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	017d7840 	.word	0x017d7840
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	080067a0 	.word	0x080067a0
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8001a7c:	4a02      	ldr	r2, [pc, #8]	; (8001a88 <HAL_RCC_EnableCSS+0xc>)
 8001a7e:	6813      	ldr	r3, [r2, #0]
 8001a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	4770      	bx	lr
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a90:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001a92:	4905      	ldr	r1, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a94:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a98:	6808      	ldr	r0, [r1, #0]
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4770      	bx	lr
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	080067b0 	.word	0x080067b0
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aae:	220f      	movs	r2, #15
 8001ab0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001ac0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001ac8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	08db      	lsrs	r3, r3, #3
{
 8001ace:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ad0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad4:	4c05      	ldr	r4, [pc, #20]	; (8001aec <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ad6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad8:	6823      	ldr	r3, [r4, #0]
}
 8001ada:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	600b      	str	r3, [r1, #0]
}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop

08001af4 <HAL_RCC_NMI_IRQHandler>:
{
 8001af4:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_NMI_IRQHandler+0x18>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	061b      	lsls	r3, r3, #24
 8001afc:	d400      	bmi.n	8001b00 <HAL_RCC_NMI_IRQHandler+0xc>
}
 8001afe:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8001b00:	f7ff fff6 	bl	8001af0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	701a      	strb	r2, [r3, #0]
}
 8001b0a:	bd08      	pop	{r3, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	4002380e 	.word	0x4002380e

08001b14 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b14:	6803      	ldr	r3, [r0, #0]
{
 8001b16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b1a:	f013 0601 	ands.w	r6, r3, #1
{
 8001b1e:	b083      	sub	sp, #12
 8001b20:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b22:	d00b      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b24:	4abb      	ldr	r2, [pc, #748]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b26:	6891      	ldr	r1, [r2, #8]
 8001b28:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001b2c:	6091      	str	r1, [r2, #8]
 8001b2e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001b30:	6891      	ldr	r1, [r2, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b32:	fab0 f680 	clz	r6, r0
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b36:	4301      	orrs	r1, r0
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b38:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b3a:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b3c:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001b40:	d010      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b42:	49b4      	ldr	r1, [pc, #720]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b44:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001b46:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b4a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b4e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b52:	ea42 0205 	orr.w	r2, r2, r5
 8001b56:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b5a:	f000 8219 	beq.w	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b5e:	fab5 f585 	clz	r5, r5
 8001b62:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b64:	02df      	lsls	r7, r3, #11
 8001b66:	d510      	bpl.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b68:	48aa      	ldr	r0, [pc, #680]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b6c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b70:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b74:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001b78:	ea42 0201 	orr.w	r2, r2, r1
 8001b7c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b80:	f000 8209 	beq.w	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001b84:	2900      	cmp	r1, #0
 8001b86:	bf08      	it	eq
 8001b88:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001b8a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b8e:	bf18      	it	ne
 8001b90:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b92:	0698      	lsls	r0, r3, #26
 8001b94:	f100 81b6 	bmi.w	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b98:	06df      	lsls	r7, r3, #27
 8001b9a:	d50c      	bpl.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b9c:	4a9d      	ldr	r2, [pc, #628]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b9e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001ba2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001ba6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001baa:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001bae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001bb0:	4301      	orrs	r1, r0
 8001bb2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bb6:	0458      	lsls	r0, r3, #17
 8001bb8:	d508      	bpl.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bba:	4996      	ldr	r1, [pc, #600]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bbc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001bbe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bc2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001bc6:	4302      	orrs	r2, r0
 8001bc8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bcc:	0419      	lsls	r1, r3, #16
 8001bce:	d508      	bpl.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bd0:	4990      	ldr	r1, [pc, #576]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bd2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001bd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bd8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001bdc:	4302      	orrs	r2, r0
 8001bde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001be2:	03da      	lsls	r2, r3, #15
 8001be4:	d508      	bpl.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001be6:	498b      	ldr	r1, [pc, #556]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001be8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001bea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001bf2:	4302      	orrs	r2, r0
 8001bf4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001bf8:	039f      	lsls	r7, r3, #14
 8001bfa:	d508      	bpl.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bfc:	4985      	ldr	r1, [pc, #532]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bfe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c04:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c0e:	0658      	lsls	r0, r3, #25
 8001c10:	d508      	bpl.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c12:	4980      	ldr	r1, [pc, #512]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c14:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001c16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c1a:	f022 0203 	bic.w	r2, r2, #3
 8001c1e:	4302      	orrs	r2, r0
 8001c20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c24:	0619      	lsls	r1, r3, #24
 8001c26:	d508      	bpl.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c28:	497a      	ldr	r1, [pc, #488]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001c2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c30:	f022 020c 	bic.w	r2, r2, #12
 8001c34:	4302      	orrs	r2, r0
 8001c36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c3a:	05da      	lsls	r2, r3, #23
 8001c3c:	d508      	bpl.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c3e:	4975      	ldr	r1, [pc, #468]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c40:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001c42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c46:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001c4a:	4302      	orrs	r2, r0
 8001c4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c50:	059f      	lsls	r7, r3, #22
 8001c52:	d508      	bpl.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c54:	496f      	ldr	r1, [pc, #444]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c56:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001c58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c5c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001c60:	4302      	orrs	r2, r0
 8001c62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c66:	0558      	lsls	r0, r3, #21
 8001c68:	d508      	bpl.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c6a:	496a      	ldr	r1, [pc, #424]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c76:	4302      	orrs	r2, r0
 8001c78:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c7c:	0519      	lsls	r1, r3, #20
 8001c7e:	d508      	bpl.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c80:	4964      	ldr	r1, [pc, #400]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c84:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001c92:	04da      	lsls	r2, r3, #19
 8001c94:	d508      	bpl.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001c96:	495f      	ldr	r1, [pc, #380]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c98:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001c9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ca2:	4302      	orrs	r2, r0
 8001ca4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ca8:	049f      	lsls	r7, r3, #18
 8001caa:	d508      	bpl.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cac:	4959      	ldr	r1, [pc, #356]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001cb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cb4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cbe:	0258      	lsls	r0, r3, #9
 8001cc0:	d508      	bpl.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cc2:	4954      	ldr	r1, [pc, #336]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cc4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001cc6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cca:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001cce:	4302      	orrs	r2, r0
 8001cd0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cd4:	0299      	lsls	r1, r3, #10
 8001cd6:	d50c      	bpl.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001cd8:	494e      	ldr	r1, [pc, #312]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001cda:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001cdc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001ce0:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ce4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001ce8:	bf08      	it	eq
 8001cea:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001cec:	4302      	orrs	r2, r0
 8001cee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001cf2:	f013 0f08 	tst.w	r3, #8
 8001cf6:	bf18      	it	ne
 8001cf8:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001cfa:	035a      	lsls	r2, r3, #13
 8001cfc:	d508      	bpl.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cfe:	4945      	ldr	r1, [pc, #276]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d00:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001d02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d06:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d0a:	4302      	orrs	r2, r0
 8001d0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d10:	021f      	lsls	r7, r3, #8
 8001d12:	d46a      	bmi.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d14:	2e01      	cmp	r6, #1
 8001d16:	d001      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001d18:	0198      	lsls	r0, r3, #6
 8001d1a:	d560      	bpl.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001d1e:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d20:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 8001d22:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d26:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d28:	f7ff f86a 	bl	8000e00 <HAL_GetTick>
 8001d2c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d2e:	e005      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x228>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d30:	f7ff f866 	bl	8000e00 <HAL_GetTick>
 8001d34:	1b83      	subs	r3, r0, r6
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	f200 80e0 	bhi.w	8001efc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	0119      	lsls	r1, r3, #4
 8001d40:	d4f6      	bmi.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x21c>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	07da      	lsls	r2, r3, #31
 8001d46:	d512      	bpl.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001d48:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d4a:	b982      	cbnz	r2, 8001d6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d50:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d54:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001d58:	6860      	ldr	r0, [r4, #4]
 8001d5a:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 8001d5e:	68a1      	ldr	r1, [r4, #8]
 8001d60:	4332      	orrs	r2, r6
 8001d62:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001d66:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001d6a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d6e:	031e      	lsls	r6, r3, #12
 8001d70:	d504      	bpl.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8001d72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001d74:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001d78:	f000 811e 	beq.w	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8001d7c:	02d8      	lsls	r0, r3, #11
 8001d7e:	d504      	bpl.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x276>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d82:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001d86:	f000 8117 	beq.w	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d8a:	01d9      	lsls	r1, r3, #7
 8001d8c:	d511      	bpl.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d8e:	4e21      	ldr	r6, [pc, #132]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d90:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d92:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d96:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001d9a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001d9e:	6921      	ldr	r1, [r4, #16]
 8001da0:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8001da4:	433a      	orrs	r2, r7
 8001da6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001daa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dae:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001db2:	019a      	lsls	r2, r3, #6
 8001db4:	f100 80f1 	bmi.w	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x486>
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001dba:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dbc:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8001dbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dc2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001dc4:	f7ff f81c 	bl	8000e00 <HAL_GetTick>
 8001dc8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dca:	e005      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001dcc:	f7ff f818 	bl	8000e00 <HAL_GetTick>
 8001dd0:	1b80      	subs	r0, r0, r6
 8001dd2:	2864      	cmp	r0, #100	; 0x64
 8001dd4:	f200 8092 	bhi.w	8001efc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	011b      	lsls	r3, r3, #4
 8001ddc:	d5f6      	bpl.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001dde:	2d01      	cmp	r5, #1
 8001de0:	d00e      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001de2:	2000      	movs	r0, #0
}
 8001de4:	b003      	add	sp, #12
 8001de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001dec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001df0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001df4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001dfe:	e789      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_PLLSAI_DISABLE();
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e02:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e04:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8001e06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001e0a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001e0c:	f7fe fff8 	bl	8000e00 <HAL_GetTick>
 8001e10:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e12:	e006      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001e14:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e18:	f7fe fff2 	bl	8000e00 <HAL_GetTick>
 8001e1c:	1b40      	subs	r0, r0, r5
 8001e1e:	2864      	cmp	r0, #100	; 0x64
 8001e20:	d86c      	bhi.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e22:	6833      	ldr	r3, [r6, #0]
 8001e24:	009f      	lsls	r7, r3, #2
 8001e26:	d4f7      	bmi.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x304>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	031d      	lsls	r5, r3, #12
 8001e2c:	f140 80fd 	bpl.w	800202a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001e30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	f040 80f9 	bne.w	800202a <HAL_RCCEx_PeriphCLKConfig+0x516>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e38:	4980      	ldr	r1, [pc, #512]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e3a:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e40:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e44:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001e48:	69a0      	ldr	r0, [r4, #24]
 8001e4a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001e4e:	4332      	orrs	r2, r6
 8001e50:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001e54:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001e58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e5c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e62:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8001e66:	3801      	subs	r0, #1
 8001e68:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e6c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001e70:	0299      	lsls	r1, r3, #10
 8001e72:	d515      	bpl.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8001e74:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001e76:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001e7a:	d111      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e7c:	496f      	ldr	r1, [pc, #444]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e7e:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e84:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001e88:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001e8c:	6a20      	ldr	r0, [r4, #32]
 8001e8e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001e92:	4332      	orrs	r2, r6
 8001e94:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001e98:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e9c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ea0:	071a      	lsls	r2, r3, #28
 8001ea2:	d519      	bpl.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ea4:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001ea6:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ea8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001eac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001eb0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001eb4:	69e0      	ldr	r0, [r4, #28]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001ec0:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001ec8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001ecc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ece:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8001eda:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001edc:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 8001ede:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ee2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001ee4:	f7fe ff8c 	bl	8000e00 <HAL_GetTick>
 8001ee8:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001eea:	682b      	ldr	r3, [r5, #0]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	f53f af78 	bmi.w	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ef2:	f7fe ff85 	bl	8000e00 <HAL_GetTick>
 8001ef6:	1b00      	subs	r0, r0, r4
 8001ef8:	2864      	cmp	r0, #100	; 0x64
 8001efa:	d9f6      	bls.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        return HAL_TIMEOUT;
 8001efc:	2003      	movs	r0, #3
}
 8001efe:	b003      	add	sp, #12
 8001f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4a4d      	ldr	r2, [pc, #308]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
    PWR->CR1 |= PWR_CR1_DBP;
 8001f06:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f0a:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001f10:	6411      	str	r1, [r2, #64]	; 0x40
 8001f12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f14:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001f18:	9201      	str	r2, [sp, #4]
 8001f1a:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f22:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff6c 	bl	8000e00 <HAL_GetTick>
 8001f28:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f2a:	e004      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x422>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7fe ff68 	bl	8000e00 <HAL_GetTick>
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	2864      	cmp	r0, #100	; 0x64
 8001f34:	d8e2      	bhi.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f36:	f8d8 3000 	ldr.w	r3, [r8]
 8001f3a:	05d9      	lsls	r1, r3, #23
 8001f3c:	d5f6      	bpl.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x418>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3e:	4f3f      	ldr	r7, [pc, #252]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f40:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f44:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8001f48:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8001f4e:	4291      	cmp	r1, r2
 8001f50:	d00e      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f54:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001f5e:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f62:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001f66:	6738      	str	r0, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001f68:	673a      	str	r2, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f6c:	07d2      	lsls	r2, r2, #31
 8001f6e:	d448      	bmi.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f70:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001f74:	d03c      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8001f76:	4931      	ldr	r1, [pc, #196]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8001f78:	688a      	ldr	r2, [r1, #8]
 8001f7a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f7e:	608a      	str	r2, [r1, #8]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8001f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f86:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	e603      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x84>
  uint32_t pllsaiused = 0;
 8001f90:	2500      	movs	r5, #0
      plli2sused = 1;
 8001f92:	2601      	movs	r6, #1
 8001f94:	e5e6      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x50>
      plli2sused = 1;
 8001f96:	2601      	movs	r6, #1
 8001f98:	e5f7      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f9a:	6923      	ldr	r3, [r4, #16]
 8001f9c:	6862      	ldr	r2, [r4, #4]
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8001fa4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001fa8:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8001faa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001fae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001fb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001fb6:	e6ff      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fb8:	4e20      	ldr	r6, [pc, #128]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fba:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fbc:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fc0:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fc4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001fc8:	68e1      	ldr	r1, [r4, #12]
 8001fca:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8001fce:	433a      	orrs	r2, r7
 8001fd0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001fd4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001fd8:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fdc:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8001fe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fe2:	f021 011f 	bic.w	r1, r1, #31
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8001fee:	e6cc      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	4812      	ldr	r0, [pc, #72]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8001ff2:	4914      	ldr	r1, [pc, #80]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8001ff4:	6882      	ldr	r2, [r0, #8]
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	6082      	str	r2, [r0, #8]
 8002000:	e7be      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        tickstart = HAL_GetTick();
 8002002:	f7fe fefd 	bl	8000e00 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800200a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	e006      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x508>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7fe fef7 	bl	8000e00 <HAL_GetTick>
 8002012:	eba0 0008 	sub.w	r0, r0, r8
 8002016:	4548      	cmp	r0, r9
 8002018:	f63f af70 	bhi.w	8001efc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201e:	079b      	lsls	r3, r3, #30
 8002020:	d5f5      	bpl.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002022:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002024:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8002028:	e7a2      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800202a:	02d8      	lsls	r0, r3, #11
 800202c:	f57f af20 	bpl.w	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002030:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002032:	2a00      	cmp	r2, #0
 8002034:	f47f af1c 	bne.w	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002038:	e6fe      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000
 8002044:	0ffffcff 	.word	0x0ffffcff

08002048 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	4605      	mov	r5, r0
 800204c:	b089      	sub	sp, #36	; 0x24
 800204e:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7fe fed6 	bl	8000e00 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8002054:	2200      	movs	r2, #0
 8002056:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8002058:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800205a:	2108      	movs	r1, #8
 800205c:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800205e:	e9cd 2300 	strd	r2, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002062:	f001 f85f 	bl	8003124 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002066:	4604      	mov	r4, r0
 8002068:	b110      	cbz	r0, 8002070 <SD_FindSCR+0x28>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800206a:	4620      	mov	r0, r4
 800206c:	b009      	add	sp, #36	; 0x24
 800206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002070:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002072:	6828      	ldr	r0, [r5, #0]
 8002074:	0409      	lsls	r1, r1, #16
 8002076:	f001 fd1f 	bl	8003ab8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800207a:	4604      	mov	r4, r0
 800207c:	2800      	cmp	r0, #0
 800207e:	d1f4      	bne.n	800206a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	2308      	movs	r3, #8
 8002086:	2030      	movs	r0, #48	; 0x30
 8002088:	2102      	movs	r1, #2
 800208a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800208e:	2200      	movs	r2, #0
 8002090:	2301      	movs	r3, #1
 8002092:	e9cd 0104 	strd	r0, r1, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002096:	a902      	add	r1, sp, #8
 8002098:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800209a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800209e:	f001 f82b 	bl	80030f8 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80020a2:	6828      	ldr	r0, [r5, #0]
 80020a4:	f001 fe82 	bl	8003dac <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80020a8:	4604      	mov	r4, r0
 80020aa:	b140      	cbz	r0, 80020be <SD_FindSCR+0x76>
 80020ac:	e7dd      	b.n	800206a <SD_FindSCR+0x22>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80020ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80020b0:	0491      	lsls	r1, r2, #18
 80020b2:	d515      	bpl.n	80020e0 <SD_FindSCR+0x98>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80020b4:	f7fe fea4 	bl	8000e00 <HAL_GetTick>
 80020b8:	1b83      	subs	r3, r0, r6
 80020ba:	3301      	adds	r3, #1
 80020bc:	d024      	beq.n	8002108 <SD_FindSCR+0xc0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80020be:	6828      	ldr	r0, [r5, #0]
 80020c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80020c2:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 80020c6:	d10b      	bne.n	80020e0 <SD_FindSCR+0x98>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80020c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80020ca:	0293      	lsls	r3, r2, #10
 80020cc:	d5ef      	bpl.n	80020ae <SD_FindSCR+0x66>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80020ce:	f000 fff7 	bl	80030c0 <SDMMC_ReadFIFO>
 80020d2:	ab08      	add	r3, sp, #32
 80020d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80020d8:	3401      	adds	r4, #1
 80020da:	f843 0c20 	str.w	r0, [r3, #-32]
 80020de:	e7e9      	b.n	80020b4 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80020e0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80020e2:	0712      	lsls	r2, r2, #28
 80020e4:	d416      	bmi.n	8002114 <SD_FindSCR+0xcc>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80020e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80020e8:	0793      	lsls	r3, r2, #30
 80020ea:	d416      	bmi.n	800211a <SD_FindSCR+0xd2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80020ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80020ee:	f014 0420 	ands.w	r4, r4, #32
 80020f2:	d10c      	bne.n	800210e <SD_FindSCR+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80020f4:	9901      	ldr	r1, [sp, #4]
 80020f6:	f240 533a 	movw	r3, #1338	; 0x53a
 80020fa:	9a00      	ldr	r2, [sp, #0]
 80020fc:	ba09      	rev	r1, r1
 80020fe:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002100:	ba12      	rev	r2, r2
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002102:	e9c7 1200 	strd	r1, r2, [r7]
  return HAL_SD_ERROR_NONE;
 8002106:	e7b0      	b.n	800206a <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8002108:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800210c:	e7ad      	b.n	800206a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800210e:	2420      	movs	r4, #32
 8002110:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8002112:	e7aa      	b.n	800206a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8002114:	2408      	movs	r4, #8
 8002116:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002118:	e7a7      	b.n	800206a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800211a:	2402      	movs	r4, #2
 800211c:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800211e:	e7a4      	b.n	800206a <SD_FindSCR+0x22>

08002120 <HAL_SD_ReadBlocks>:
{
 8002120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002124:	460c      	mov	r4, r1
 8002126:	b087      	sub	sp, #28
 8002128:	4683      	mov	fp, r0
 800212a:	4691      	mov	r9, r2
 800212c:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800212e:	f7fe fe67 	bl	8000e00 <HAL_GetTick>
  if(NULL == pData)
 8002132:	2c00      	cmp	r4, #0
 8002134:	f000 8085 	beq.w	8002242 <HAL_SD_ReadBlocks+0x122>
  if(hsd->State == HAL_SD_STATE_READY)
 8002138:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800213c:	2b01      	cmp	r3, #1
 800213e:	fa5f f883 	uxtb.w	r8, r3
 8002142:	d16a      	bne.n	800221a <HAL_SD_ReadBlocks+0xfa>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002144:	eb09 0306 	add.w	r3, r9, r6
 8002148:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800214c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800214e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002150:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002154:	f200 8081 	bhi.w	800225a <HAL_SD_ReadBlocks+0x13a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002158:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 800215c:	2203      	movs	r2, #3
 800215e:	4605      	mov	r5, r0
    hsd->Instance->DCTRL = 0U;
 8002160:	f8db 0000 	ldr.w	r0, [fp]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002164:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8002166:	f88b 2034 	strb.w	r2, [fp, #52]	; 0x34
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800216a:	ea4f 2346 	mov.w	r3, r6, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800216e:	f04f 32ff 	mov.w	r2, #4294967295
    hsd->Instance->DCTRL = 0U;
 8002172:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002174:	f04f 0190 	mov.w	r1, #144	; 0x90
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002178:	9200      	str	r2, [sp, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800217a:	f04f 0a02 	mov.w	sl, #2
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800217e:	f04f 0200 	mov.w	r2, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002182:	9301      	str	r3, [sp, #4]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002184:	f04f 0301 	mov.w	r3, #1
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002188:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800218a:	4669      	mov	r1, sp
      add *= 512U;
 800218c:	bf18      	it	ne
 800218e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002192:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002194:	e9cd a203 	strd	sl, r2, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002198:	f000 ffae 	bl	80030f8 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800219c:	2e01      	cmp	r6, #1
 800219e:	f04f 0301 	mov.w	r3, #1
 80021a2:	d946      	bls.n	8002232 <HAL_SD_ReadBlocks+0x112>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80021a4:	4649      	mov	r1, r9
 80021a6:	f8db 0000 	ldr.w	r0, [fp]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80021aa:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80021ae:	f001 f8f9 	bl	80033a4 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d15b      	bne.n	800226e <HAL_SD_ReadBlocks+0x14e>
    dataremaining = config.DataLength;
 80021b6:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80021ba:	e006      	b.n	80021ca <HAL_SD_ReadBlocks+0xaa>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80021bc:	f7fe fe20 	bl	8000e00 <HAL_GetTick>
 80021c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80021c2:	1b40      	subs	r0, r0, r5
 80021c4:	4298      	cmp	r0, r3
 80021c6:	f080 809b 	bcs.w	8002300 <HAL_SD_ReadBlocks+0x1e0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80021ca:	f8db 2000 	ldr.w	r2, [fp]
 80021ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80021d0:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80021d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80021d6:	d15a      	bne.n	800228e <HAL_SD_ReadBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	d5ef      	bpl.n	80021bc <HAL_SD_ReadBlocks+0x9c>
 80021dc:	f1ba 0f00 	cmp.w	sl, #0
 80021e0:	d0ec      	beq.n	80021bc <HAL_SD_ReadBlocks+0x9c>
 80021e2:	1d27      	adds	r7, r4, #4
 80021e4:	f104 0924 	add.w	r9, r4, #36	; 0x24
 80021e8:	e001      	b.n	80021ee <HAL_SD_ReadBlocks+0xce>
 80021ea:	f8db 2000 	ldr.w	r2, [fp]
          data = SDMMC_ReadFIFO(hsd->Instance);
 80021ee:	4610      	mov	r0, r2
 80021f0:	3704      	adds	r7, #4
 80021f2:	f000 ff65 	bl	80030c0 <SDMMC_ReadFIFO>
 80021f6:	4602      	mov	r2, r0
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80021f8:	0a00      	lsrs	r0, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 80021fa:	f807 2c08 	strb.w	r2, [r7, #-8]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80021fe:	0c11      	lsrs	r1, r2, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002200:	0e12      	lsrs	r2, r2, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002202:	f807 0c07 	strb.w	r0, [r7, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002206:	f807 1c06 	strb.w	r1, [r7, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800220a:	f807 2c05 	strb.w	r2, [r7, #-5]
        for(count = 0U; count < 8U; count++)
 800220e:	45b9      	cmp	r9, r7
 8002210:	d1eb      	bne.n	80021ea <HAL_SD_ReadBlocks+0xca>
 8002212:	3420      	adds	r4, #32
 8002214:	f1aa 0a20 	sub.w	sl, sl, #32
 8002218:	e7d0      	b.n	80021bc <HAL_SD_ReadBlocks+0x9c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800221a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 800221e:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002226:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 800222a:	4640      	mov	r0, r8
 800222c:	b007      	add	sp, #28
 800222e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002232:	4649      	mov	r1, r9
 8002234:	f8db 0000 	ldr.w	r0, [fp]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002238:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800223c:	f001 f812 	bl	8003264 <SDMMC_CmdReadSingleBlock>
 8002240:	e7b7      	b.n	80021b2 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002242:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
    return HAL_ERROR;
 8002246:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800224a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800224e:	4640      	mov	r0, r8
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002250:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8002254:	b007      	add	sp, #28
 8002256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800225a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
}
 800225e:	4640      	mov	r0, r8
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002264:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
}
 8002268:	b007      	add	sp, #28
 800226a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800226e:	f8db 3000 	ldr.w	r3, [fp]
          hsd->State = HAL_SD_STATE_READY;
 8002272:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002274:	4c4a      	ldr	r4, [pc, #296]	; (80023a0 <HAL_SD_ReadBlocks+0x280>)
          hsd->Context = SD_CONTEXT_NONE;
 8002276:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002278:	639c      	str	r4, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800227a:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800227e:	4318      	orrs	r0, r3
 8002280:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002284:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002288:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
          return HAL_ERROR;
 800228c:	e7cd      	b.n	800222a <HAL_SD_ReadBlocks+0x10a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800228e:	05df      	lsls	r7, r3, #23
 8002290:	d501      	bpl.n	8002296 <HAL_SD_ReadBlocks+0x176>
 8002292:	2e01      	cmp	r6, #1
 8002294:	d847      	bhi.n	8002326 <HAL_SD_ReadBlocks+0x206>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002296:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002298:	f013 0308 	ands.w	r3, r3, #8
 800229c:	d15d      	bne.n	800235a <HAL_SD_ReadBlocks+0x23a>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800229e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022a0:	f011 0102 	ands.w	r1, r1, #2
 80022a4:	d14b      	bne.n	800233e <HAL_SD_ReadBlocks+0x21e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80022a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80022a8:	0698      	lsls	r0, r3, #26
 80022aa:	d465      	bmi.n	8002378 <HAL_SD_ReadBlocks+0x258>
 80022ac:	f10a 0a04 	add.w	sl, sl, #4
 80022b0:	1d26      	adds	r6, r4, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80022b2:	4454      	add	r4, sl
 80022b4:	e017      	b.n	80022e6 <HAL_SD_ReadBlocks+0x1c6>
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	d519      	bpl.n	80022ee <HAL_SD_ReadBlocks+0x1ce>
      data = SDMMC_ReadFIFO(hsd->Instance);
 80022ba:	f000 ff01 	bl	80030c0 <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 80022be:	f806 0c04 	strb.w	r0, [r6, #-4]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80022c2:	0c03      	lsrs	r3, r0, #16
 80022c4:	3604      	adds	r6, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80022c6:	0a02      	lsrs	r2, r0, #8
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80022c8:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80022ca:	f806 3c06 	strb.w	r3, [r6, #-6]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80022ce:	f806 2c07 	strb.w	r2, [r6, #-7]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80022d2:	f806 0c05 	strb.w	r0, [r6, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80022d6:	f7fe fd93 	bl	8000e00 <HAL_GetTick>
 80022da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80022dc:	1b40      	subs	r0, r0, r5
 80022de:	4298      	cmp	r0, r3
 80022e0:	d258      	bcs.n	8002394 <HAL_SD_ReadBlocks+0x274>
 80022e2:	f8db 2000 	ldr.w	r2, [fp]
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80022e6:	42b4      	cmp	r4, r6
      data = SDMMC_ReadFIFO(hsd->Instance);
 80022e8:	4610      	mov	r0, r2
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80022ea:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80022ec:	d1e3      	bne.n	80022b6 <HAL_SD_ReadBlocks+0x196>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80022ee:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 80022f2:	2301      	movs	r3, #1
    return HAL_OK;
 80022f4:	f04f 0800 	mov.w	r8, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80022f8:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80022fa:	f88b 3034 	strb.w	r3, [fp, #52]	; 0x34
    return HAL_OK;
 80022fe:	e794      	b.n	800222a <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002300:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 8002304:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002306:	4826      	ldr	r0, [pc, #152]	; (80023a0 <HAL_SD_ReadBlocks+0x280>)
        hsd->Context = SD_CONTEXT_NONE;
 8002308:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800230a:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800230e:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002310:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8002314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002318:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800231c:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002320:	f8cb 2030 	str.w	r2, [fp, #48]	; 0x30
        return HAL_ERROR;
 8002324:	e781      	b.n	800222a <HAL_SD_ReadBlocks+0x10a>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002326:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
 800232a:	2b03      	cmp	r3, #3
 800232c:	d0b3      	beq.n	8002296 <HAL_SD_ReadBlocks+0x176>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800232e:	4610      	mov	r0, r2
 8002330:	f001 fa18 	bl	8003764 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002334:	2800      	cmp	r0, #0
 8002336:	d19a      	bne.n	800226e <HAL_SD_ReadBlocks+0x14e>
 8002338:	f8db 2000 	ldr.w	r2, [fp]
 800233c:	e7ab      	b.n	8002296 <HAL_SD_ReadBlocks+0x176>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800233e:	4818      	ldr	r0, [pc, #96]	; (80023a0 <HAL_SD_ReadBlocks+0x280>)
      hsd->State = HAL_SD_STATE_READY;
 8002340:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002342:	6390      	str	r0, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002344:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 8002348:	f042 0202 	orr.w	r2, r2, #2
 800234c:	f8cb 2038 	str.w	r2, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002350:	f88b 1034 	strb.w	r1, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002354:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
      return HAL_ERROR;
 8002358:	e767      	b.n	800222a <HAL_SD_ReadBlocks+0x10a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_SD_ReadBlocks+0x280>)
      hsd->State = HAL_SD_STATE_READY;
 800235c:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 800235e:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002360:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002362:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800236e:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002372:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
      return HAL_ERROR;
 8002376:	e758      	b.n	800222a <HAL_SD_ReadBlocks+0x10a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_SD_ReadBlocks+0x280>)
      hsd->State = HAL_SD_STATE_READY;
 800237a:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800237c:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800237e:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 8002382:	f043 0320 	orr.w	r3, r3, #32
 8002386:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800238a:	f88b 0034 	strb.w	r0, [fp, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800238e:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
      return HAL_ERROR;
 8002392:	e74a      	b.n	800222a <HAL_SD_ReadBlocks+0x10a>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002394:	f8db 3000 	ldr.w	r3, [fp]
        hsd->State= HAL_SD_STATE_READY;
 8002398:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800239a:	4801      	ldr	r0, [pc, #4]	; (80023a0 <HAL_SD_ReadBlocks+0x280>)
        hsd->Context = SD_CONTEXT_NONE;
 800239c:	2200      	movs	r2, #0
 800239e:	e7b6      	b.n	800230e <HAL_SD_ReadBlocks+0x1ee>
 80023a0:	004005ff 	.word	0x004005ff

080023a4 <HAL_SD_WriteBlocks>:
{
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a8:	460d      	mov	r5, r1
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	4604      	mov	r4, r0
 80023ae:	4692      	mov	sl, r2
 80023b0:	461f      	mov	r7, r3
 80023b2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80023b6:	f7fe fd23 	bl	8000e00 <HAL_GetTick>
  if(NULL == pData)
 80023ba:	2d00      	cmp	r5, #0
 80023bc:	d067      	beq.n	800248e <HAL_SD_WriteBlocks+0xea>
  if(hsd->State == HAL_SD_STATE_READY)
 80023be:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	fa5f f983 	uxtb.w	r9, r3
 80023c8:	d150      	bne.n	800246c <HAL_SD_WriteBlocks+0xc8>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023ca:	eb0a 0307 	add.w	r3, sl, r7
 80023ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023d0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023d2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023d4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023d6:	d864      	bhi.n	80024a2 <HAL_SD_WriteBlocks+0xfe>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 80023da:	2203      	movs	r2, #3
 80023dc:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80023de:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80023e0:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 80023e2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80023ea:	ea4f 2247 	mov.w	r2, r7, lsl #9
    hsd->Instance->DCTRL = 0U;
 80023ee:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80023f0:	f04f 0190 	mov.w	r1, #144	; 0x90
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80023f4:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80023f6:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80023fa:	9203      	str	r2, [sp, #12]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80023fc:	f04f 0201 	mov.w	r2, #1
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002400:	9104      	str	r1, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002402:	a902      	add	r1, sp, #8
      add *= 512U;
 8002404:	bf18      	it	ne
 8002406:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800240a:	9207      	str	r2, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800240c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002410:	f000 fe72 	bl	80030f8 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8002414:	2f01      	cmp	r7, #1
 8002416:	d933      	bls.n	8002480 <HAL_SD_WriteBlocks+0xdc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002418:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800241a:	4651      	mov	r1, sl
 800241c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800241e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002420:	f001 f900 	bl	8003624 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002424:	2800      	cmp	r0, #0
 8002426:	d144      	bne.n	80024b2 <HAL_SD_WriteBlocks+0x10e>
    dataremaining = config.DataLength;
 8002428:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800242c:	e004      	b.n	8002438 <HAL_SD_WriteBlocks+0x94>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800242e:	f7fe fce7 	bl	8000e00 <HAL_GetTick>
 8002432:	1b80      	subs	r0, r0, r6
 8002434:	4540      	cmp	r0, r8
 8002436:	d263      	bcs.n	8002500 <HAL_SD_WriteBlocks+0x15c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800243c:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002440:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002442:	d142      	bne.n	80024ca <HAL_SD_WriteBlocks+0x126>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002444:	045a      	lsls	r2, r3, #17
 8002446:	d5f2      	bpl.n	800242e <HAL_SD_WriteBlocks+0x8a>
 8002448:	f1bb 0f00 	cmp.w	fp, #0
 800244c:	d0ef      	beq.n	800242e <HAL_SD_WriteBlocks+0x8a>
 800244e:	f105 0a20 	add.w	sl, r5, #32
 8002452:	e000      	b.n	8002456 <HAL_SD_WriteBlocks+0xb2>
 8002454:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002456:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800245a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800245c:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800245e:	f000 fe33 	bl	80030c8 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002462:	4555      	cmp	r5, sl
 8002464:	d1f6      	bne.n	8002454 <HAL_SD_WriteBlocks+0xb0>
 8002466:	f1ab 0b20 	sub.w	fp, fp, #32
 800246a:	e7e0      	b.n	800242e <HAL_SD_WriteBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800246c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800246e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002476:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002478:	4648      	mov	r0, r9
 800247a:	b009      	add	sp, #36	; 0x24
 800247c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002480:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002482:	4651      	mov	r1, sl
 8002484:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002486:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002488:	f001 f82c 	bl	80034e4 <SDMMC_CmdWriteSingleBlock>
 800248c:	e7ca      	b.n	8002424 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800248e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002490:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8002498:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800249a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800249c:	b009      	add	sp, #36	; 0x24
 800249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80024a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 80024a4:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80024a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80024ac:	b009      	add	sp, #36	; 0x24
 80024ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80024b2:	6823      	ldr	r3, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80024b4:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80024b6:	4d2d      	ldr	r5, [pc, #180]	; (800256c <HAL_SD_WriteBlocks+0x1c8>)
          hsd->Context = SD_CONTEXT_NONE;
 80024b8:	2200      	movs	r2, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80024ba:	639d      	str	r5, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024be:	4318      	orrs	r0, r3
 80024c0:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80024c2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80024c6:	6322      	str	r2, [r4, #48]	; 0x30
          return HAL_ERROR;
 80024c8:	e7d6      	b.n	8002478 <HAL_SD_WriteBlocks+0xd4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80024ca:	05db      	lsls	r3, r3, #23
 80024cc:	d501      	bpl.n	80024d2 <HAL_SD_WriteBlocks+0x12e>
 80024ce:	2f01      	cmp	r7, #1
 80024d0:	d823      	bhi.n	800251a <HAL_SD_WriteBlocks+0x176>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80024d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024d4:	f013 0308 	ands.w	r3, r3, #8
 80024d8:	d133      	bne.n	8002542 <HAL_SD_WriteBlocks+0x19e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80024da:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80024dc:	f012 0202 	ands.w	r2, r2, #2
 80024e0:	d124      	bne.n	800252c <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80024e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024e4:	f013 0310 	ands.w	r3, r3, #16
 80024e8:	d037      	beq.n	800255a <HAL_SD_WriteBlocks+0x1b6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <HAL_SD_WriteBlocks+0x1c8>)
      hsd->State = HAL_SD_STATE_READY;
 80024ec:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80024ee:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80024f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024f8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024fc:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 80024fe:	e7bb      	b.n	8002478 <HAL_SD_WriteBlocks+0xd4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002500:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8002502:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002504:	4819      	ldr	r0, [pc, #100]	; (800256c <HAL_SD_WriteBlocks+0x1c8>)
        hsd->Context = SD_CONTEXT_NONE;
 8002506:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002508:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800250c:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800250e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002510:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002512:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002516:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002518:	e7ae      	b.n	8002478 <HAL_SD_WriteBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800251a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800251c:	2b03      	cmp	r3, #3
 800251e:	d0d8      	beq.n	80024d2 <HAL_SD_WriteBlocks+0x12e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002520:	f001 f920 	bl	8003764 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002524:	2800      	cmp	r0, #0
 8002526:	d1c4      	bne.n	80024b2 <HAL_SD_WriteBlocks+0x10e>
 8002528:	6820      	ldr	r0, [r4, #0]
 800252a:	e7d2      	b.n	80024d2 <HAL_SD_WriteBlocks+0x12e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_SD_WriteBlocks+0x1c8>)
      hsd->State = HAL_SD_STATE_READY;
 800252e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002530:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002532:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002534:	f042 0202 	orr.w	r2, r2, #2
 8002538:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800253a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800253e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002540:	e79a      	b.n	8002478 <HAL_SD_WriteBlocks+0xd4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_SD_WriteBlocks+0x1c8>)
      hsd->State = HAL_SD_STATE_READY;
 8002544:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002546:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002548:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800254a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002552:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002556:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002558:	e78e      	b.n	8002478 <HAL_SD_WriteBlocks+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800255a:	f240 513a 	movw	r1, #1338	; 0x53a
    hsd->State = HAL_SD_STATE_READY;
 800255e:	2201      	movs	r2, #1
    return HAL_OK;
 8002560:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8002562:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002564:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8002568:	e786      	b.n	8002478 <HAL_SD_WriteBlocks+0xd4>
 800256a:	bf00      	nop
 800256c:	004005ff 	.word	0x004005ff

08002570 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002570:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8002572:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002574:	0f90      	lsrs	r0, r2, #30
{
 8002576:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002578:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800257a:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800257e:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002582:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002586:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800258a:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800258c:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800258e:	2400      	movs	r4, #0
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002590:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002592:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002594:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002596:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002598:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800259a:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800259c:	f3c2 4003 	ubfx	r0, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80025a0:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80025a4:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80025a8:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80025aa:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80025ae:	7208      	strb	r0, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80025b0:	f3c2 3000 	ubfx	r0, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80025b4:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80025b6:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80025b8:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80025ba:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025bc:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80025be:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d16e      	bne.n	80026a2 <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025c4:	f640 74fc 	movw	r4, #4092	; 0xffc
 80025c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80025ca:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 80025cc:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025d0:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025d4:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80025d8:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025dc:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025e0:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025e4:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025e8:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80025ea:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025ee:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025f2:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025f6:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80025f8:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80025fa:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80025fc:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80025fe:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002600:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002602:	f004 0407 	and.w	r4, r4, #7
 8002606:	3402      	adds	r4, #2
 8002608:	40a2      	lsls	r2, r4
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800260c:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800260e:	661e      	str	r6, [r3, #96]	; 0x60
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002610:	f004 040f 	and.w	r4, r4, #15
 8002614:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002616:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002618:	659d      	str	r5, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800261a:	fb02 f204 	mul.w	r2, r2, r4
 800261e:	65da      	str	r2, [r3, #92]	; 0x5c
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002620:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002624:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002628:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 800262c:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800262e:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 8002630:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002632:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8002634:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002636:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800263c:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002640:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002644:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002648:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800264a:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800264e:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002650:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002654:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002656:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800265a:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800265c:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002660:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002664:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8002668:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800266c:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002670:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002674:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002678:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800267c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002680:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002684:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002688:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800268c:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002690:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002694:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002698:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800269c:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80026a2:	2801      	cmp	r0, #1
 80026a4:	d110      	bne.n	80026c8 <HAL_SD_GetCardCSD+0x158>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80026a6:	0412      	lsls	r2, r2, #16
 80026a8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    hsd->SdCard.BlockSize = 512U;
 80026aa:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80026ae:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80026b2:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80026b6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026b8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80026ba:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026bc:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026be:	661c      	str	r4, [r3, #96]	; 0x60
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026c0:	0292      	lsls	r2, r2, #10
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026c6:	e7ab      	b.n	8002620 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026c8:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80026ca:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026cc:	4c04      	ldr	r4, [pc, #16]	; (80026e0 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 80026ce:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80026d0:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026da:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e0:	004005ff 	.word	0x004005ff

080026e4 <HAL_SD_InitCard>:
{
 80026e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026e8:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80026ea:	2600      	movs	r6, #0
 80026ec:	2700      	movs	r7, #0
 80026ee:	f04f 0800 	mov.w	r8, #0
 80026f2:	f04f 0976 	mov.w	r9, #118	; 0x76
  status = SDMMC_Init(hsd->Instance, Init);
 80026f6:	aa09      	add	r2, sp, #36	; 0x24
{
 80026f8:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 80026fa:	ab06      	add	r3, sp, #24
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80026fc:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8002700:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  status = SDMMC_Init(hsd->Instance, Init);
 8002704:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002706:	e9cd 6706 	strd	r6, r7, [sp, #24]
  status = SDMMC_Init(hsd->Instance, Init);
 800270a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800270e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	f000 fcb9 	bl	8003088 <SDMMC_Init>
  if(status != HAL_OK)
 8002716:	b120      	cbz	r0, 8002722 <HAL_SD_InitCard+0x3e>
    return HAL_ERROR;
 8002718:	2601      	movs	r6, #1
}
 800271a:	4630      	mov	r0, r6
 800271c:	b019      	add	sp, #100	; 0x64
 800271e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_SD_DISABLE(hsd);
 8002722:	4605      	mov	r5, r0
 8002724:	6820      	ldr	r0, [r4, #0]
 8002726:	6843      	ldr	r3, [r0, #4]
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800272e:	f000 fcd1 	bl	80030d4 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	6843      	ldr	r3, [r0, #4]
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6043      	str	r3, [r0, #4]
  __IO uint32_t count = 0U;
 800273c:	9505      	str	r5, [sp, #20]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800273e:	f001 f953 	bl	80039e8 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002742:	4605      	mov	r5, r0
 8002744:	b960      	cbnz	r0, 8002760 <HAL_SD_InitCard+0x7c>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	f001 f978 	bl	8003a3c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800274c:	b990      	cbnz	r0, 8002774 <HAL_SD_InitCard+0x90>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800274e:	2301      	movs	r3, #1
 8002750:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002752:	2100      	movs	r1, #0
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	f001 f9af 	bl	8003ab8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800275a:	b1a8      	cbz	r0, 8002788 <HAL_SD_InitCard+0xa4>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800275c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8002760:	2601      	movs	r6, #1
 8002762:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
}
 8002766:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8002768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800276a:	431d      	orrs	r5, r3
 800276c:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800276e:	b019      	add	sp, #100	; 0x64
 8002770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002774:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002776:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002778:	f001 f936 	bl	80039e8 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800277c:	2800      	cmp	r0, #0
 800277e:	f040 80c7 	bne.w	8002910 <HAL_SD_InitCard+0x22c>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002782:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002784:	2b01      	cmp	r3, #1
 8002786:	d0e4      	beq.n	8002752 <HAL_SD_InitCard+0x6e>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002788:	9b05      	ldr	r3, [sp, #20]
 800278a:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800278e:	42b3      	cmp	r3, r6
 8002790:	d81c      	bhi.n	80027cc <HAL_SD_InitCard+0xe8>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002792:	4f62      	ldr	r7, [pc, #392]	; (800291c <HAL_SD_InitCard+0x238>)
 8002794:	e011      	b.n	80027ba <HAL_SD_InitCard+0xd6>
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	f001 fa2e 	bl	8003bf8 <SDMMC_CmdAppOperCommand>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800279c:	4629      	mov	r1, r5
    if(errorstate != HAL_SD_ERROR_NONE)
 800279e:	2800      	cmp	r0, #0
 80027a0:	d1dc      	bne.n	800275c <HAL_SD_InitCard+0x78>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	f000 fca4 	bl	80030f0 <SDMMC_GetResponse>
    count++;
 80027a8:	9b05      	ldr	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80027aa:	1e05      	subs	r5, r0, #0
    count++;
 80027ac:	f103 0301 	add.w	r3, r3, #1
 80027b0:	9305      	str	r3, [sp, #20]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80027b2:	9b05      	ldr	r3, [sp, #20]
 80027b4:	db0a      	blt.n	80027cc <HAL_SD_InitCard+0xe8>
 80027b6:	42b3      	cmp	r3, r6
 80027b8:	d808      	bhi.n	80027cc <HAL_SD_InitCard+0xe8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80027ba:	2100      	movs	r1, #0
 80027bc:	6820      	ldr	r0, [r4, #0]
 80027be:	f001 f97b 	bl	8003ab8 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80027c2:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 80027c4:	4605      	mov	r5, r0
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d0e5      	beq.n	8002796 <HAL_SD_InitCard+0xb2>
 80027ca:	e7c9      	b.n	8002760 <HAL_SD_InitCard+0x7c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80027cc:	9a05      	ldr	r2, [sp, #20]
 80027ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80027d2:	429a      	cmp	r2, r3
 80027d4:	f200 809e 	bhi.w	8002914 <HAL_SD_InitCard+0x230>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80027d8:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 80027dc:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 80027e2:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80027e6:	f000 fc7f 	bl	80030e8 <SDMMC_GetPowerState>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	f000 808a 	beq.w	8002904 <HAL_SD_InitCard+0x220>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80027f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d132      	bne.n	800285c <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80027f6:	2104      	movs	r1, #4
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	f000 fc79 	bl	80030f0 <SDMMC_GetResponse>
 80027fe:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002800:	a90d      	add	r1, sp, #52	; 0x34
 8002802:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8002804:	0d1b      	lsrs	r3, r3, #20
 8002806:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002808:	f7ff feb2 	bl	8002570 <HAL_SD_GetCardCSD>
 800280c:	4606      	mov	r6, r0
 800280e:	2800      	cmp	r0, #0
 8002810:	d17b      	bne.n	800290a <HAL_SD_InitCard+0x226>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002812:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002814:	4603      	mov	r3, r0
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	0412      	lsls	r2, r2, #16
 800281a:	f001 f845 	bl	80038a8 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800281e:	bb08      	cbnz	r0, 8002864 <HAL_SD_InitCard+0x180>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8002820:	4622      	mov	r2, r4
 8002822:	1d23      	adds	r3, r4, #4
 8002824:	f852 5b10 	ldr.w	r5, [r2], #16
 8002828:	ca07      	ldmia	r2, {r0, r1, r2}
 800282a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800282e:	4628      	mov	r0, r5
 8002830:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002832:	f000 fc29 	bl	8003088 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800283a:	6820      	ldr	r0, [r4, #0]
 800283c:	f000 fc72 	bl	8003124 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002840:	2800      	cmp	r0, #0
 8002842:	f43f af6a 	beq.w	800271a <HAL_SD_InitCard+0x36>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002846:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8002848:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800284a:	4935      	ldr	r1, [pc, #212]	; (8002920 <HAL_SD_InitCard+0x23c>)
    return HAL_ERROR;
 800284c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800284e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002850:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002852:	4310      	orrs	r0, r2
 8002854:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800285a:	e75e      	b.n	800271a <HAL_SD_InitCard+0x36>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	f001 fb47 	bl	8003ef0 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002862:	b148      	cbz	r0, 8002878 <HAL_SD_InitCard+0x194>
    hsd->State = HAL_SD_STATE_READY;
 8002864:	2601      	movs	r6, #1
 8002866:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800286a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800286c:	4308      	orrs	r0, r1
 800286e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002870:	4630      	mov	r0, r6
 8002872:	b019      	add	sp, #100	; 0x64
 8002874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002878:	4601      	mov	r1, r0
 800287a:	6820      	ldr	r0, [r4, #0]
 800287c:	f000 fc38 	bl	80030f0 <SDMMC_GetResponse>
 8002880:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002882:	2104      	movs	r1, #4
 8002884:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002886:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002888:	f000 fc32 	bl	80030f0 <SDMMC_GetResponse>
 800288c:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800288e:	2108      	movs	r1, #8
 8002890:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8002892:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8002894:	f000 fc2c 	bl	80030f0 <SDMMC_GetResponse>
 8002898:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800289a:	210c      	movs	r1, #12
 800289c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800289e:	67e3      	str	r3, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80028a0:	f000 fc26 	bl	80030f0 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80028a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80028a6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d0a3      	beq.n	80027f6 <HAL_SD_InitCard+0x112>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80028ae:	f10d 0112 	add.w	r1, sp, #18
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f001 fb8e 	bl	8003fd4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1d3      	bne.n	8002864 <HAL_SD_InitCard+0x180>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80028bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d099      	beq.n	80027f6 <HAL_SD_InitCard+0x112>
    hsd->SdCard.RelCardAdd = sd_rca;
 80028c2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028c6:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 80028c8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80028ca:	0409      	lsls	r1, r1, #16
 80028cc:	f001 fb4a 	bl	8003f64 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d1c7      	bne.n	8002864 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80028d4:	4601      	mov	r1, r0
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	f000 fc0a 	bl	80030f0 <SDMMC_GetResponse>
 80028dc:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80028de:	2104      	movs	r1, #4
 80028e0:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80028e2:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80028e4:	f000 fc04 	bl	80030f0 <SDMMC_GetResponse>
 80028e8:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80028ea:	2108      	movs	r1, #8
 80028ec:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80028ee:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80028f0:	f000 fbfe 	bl	80030f0 <SDMMC_GetResponse>
 80028f4:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80028f6:	210c      	movs	r1, #12
 80028f8:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80028fa:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80028fc:	f000 fbf8 	bl	80030f0 <SDMMC_GetResponse>
 8002900:	6720      	str	r0, [r4, #112]	; 0x70
 8002902:	e778      	b.n	80027f6 <HAL_SD_InitCard+0x112>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002904:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002908:	e7ac      	b.n	8002864 <HAL_SD_InitCard+0x180>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800290a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800290e:	e7a9      	b.n	8002864 <HAL_SD_InitCard+0x180>
 8002910:	4605      	mov	r5, r0
 8002912:	e725      	b.n	8002760 <HAL_SD_InitCard+0x7c>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002914:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002918:	e722      	b.n	8002760 <HAL_SD_InitCard+0x7c>
 800291a:	bf00      	nop
 800291c:	c1100000 	.word	0xc1100000
 8002920:	004005ff 	.word	0x004005ff

08002924 <HAL_SD_Init>:
  if(hsd == NULL)
 8002924:	b1c8      	cbz	r0, 800295a <HAL_SD_Init+0x36>
{
 8002926:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 8002928:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800292c:	4604      	mov	r4, r0
 800292e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002932:	b173      	cbz	r3, 8002952 <HAL_SD_Init+0x2e>
  hsd->State = HAL_SD_STATE_BUSY;
 8002934:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002936:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8002938:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800293c:	f7ff fed2 	bl	80026e4 <HAL_SD_InitCard>
 8002940:	b928      	cbnz	r0, 800294e <HAL_SD_Init+0x2a>
  hsd->State = HAL_SD_STATE_READY;
 8002942:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002944:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002946:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8002948:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800294c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800294e:	2001      	movs	r0, #1
}
 8002950:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8002952:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002954:	f7fe f86a 	bl	8000a2c <HAL_SD_MspInit>
 8002958:	e7ec      	b.n	8002934 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 800295a:	2001      	movs	r0, #1
}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <HAL_SD_GetCardInfo>:
{
 8002960:	4603      	mov	r3, r0
}
 8002962:	2000      	movs	r0, #0
{
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002966:	e9d3 ec11 	ldrd	lr, ip, [r3, #68]	; 0x44
 800296a:	e9d3 7613 	ldrd	r7, r6, [r3, #76]	; 0x4c
 800296e:	e9d3 5415 	ldrd	r5, r4, [r3, #84]	; 0x54
 8002972:	e9d3 2317 	ldrd	r2, r3, [r3, #92]	; 0x5c
 8002976:	e9c1 ec00 	strd	lr, ip, [r1]
 800297a:	e9c1 7602 	strd	r7, r6, [r1, #8]
 800297e:	e9c1 5404 	strd	r5, r4, [r1, #16]
 8002982:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002988 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8002988:	2203      	movs	r2, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 800298a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800298c:	4293      	cmp	r3, r2
{
 800298e:	b570      	push	{r4, r5, r6, lr}
 8002990:	4604      	mov	r4, r0
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	460e      	mov	r6, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8002996:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800299a:	d024      	beq.n	80029e6 <HAL_SD_ConfigWideBusOperation+0x5e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800299c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80029a0:	d021      	beq.n	80029e6 <HAL_SD_ConfigWideBusOperation+0x5e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80029a2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80029a6:	d05d      	beq.n	8002a64 <HAL_SD_ConfigWideBusOperation+0xdc>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d03c      	beq.n	8002a26 <HAL_SD_ConfigWideBusOperation+0x9e>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80029ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80029ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029b2:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80029b4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80029b6:	b9ed      	cbnz	r5, 80029f4 <HAL_SD_ConfigWideBusOperation+0x6c>
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80029b8:	6961      	ldr	r1, [r4, #20]
    (void)SDMMC_Init(hsd->Instance, Init);
 80029ba:	ab04      	add	r3, sp, #16
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80029bc:	69a2      	ldr	r2, [r4, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80029be:	e9cd 6107 	strd	r6, r1, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80029c2:	9209      	str	r2, [sp, #36]	; 0x24
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80029c4:	68e6      	ldr	r6, [r4, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80029c6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80029ca:	9606      	str	r6, [sp, #24]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80029cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
    (void)SDMMC_Init(hsd->Instance, Init);
 80029d0:	aa0a      	add	r2, sp, #40	; 0x28
 80029d2:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80029d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80029da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	f000 fb53 	bl	8003088 <SDMMC_Init>
 80029e2:	6820      	ldr	r0, [r4, #0]
 80029e4:	e00d      	b.n	8002a02 <HAL_SD_ConfigWideBusOperation+0x7a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80029ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d0e1      	beq.n	80029b8 <HAL_SD_ConfigWideBusOperation+0x30>
    hsd->State = HAL_SD_STATE_READY;
 80029f4:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	4a30      	ldr	r2, [pc, #192]	; (8002abc <HAL_SD_ConfigWideBusOperation+0x134>)
    status = HAL_ERROR;
 80029fa:	461d      	mov	r5, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80029fc:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80029fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a06:	f000 fb8d 	bl	8003124 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a0a:	b130      	cbz	r0, 8002a1a <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002a0c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8002a0e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002a10:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <HAL_SD_ConfigWideBusOperation+0x134>)
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a16:	4318      	orrs	r0, r3
 8002a18:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8002a1a:	2301      	movs	r3, #1
}
 8002a1c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8002a1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002a22:	b00a      	add	sp, #40	; 0x28
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t scr[2U] = {0U, 0U};
 8002a26:	2200      	movs	r2, #0
 8002a28:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a2a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002a2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a30:	f000 fb5e 	bl	80030f0 <SDMMC_GetResponse>
 8002a34:	0182      	lsls	r2, r0, #6
 8002a36:	d435      	bmi.n	8002aa4 <HAL_SD_ConfigWideBusOperation+0x11c>
  errorstate = SD_FindSCR(hsd, scr);
 8002a38:	a904      	add	r1, sp, #16
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7ff fb04 	bl	8002048 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a40:	b960      	cbnz	r0, 8002a5c <HAL_SD_ConfigWideBusOperation+0xd4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002a42:	9b05      	ldr	r3, [sp, #20]
 8002a44:	03db      	lsls	r3, r3, #15
 8002a46:	d532      	bpl.n	8002aae <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a48:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	0409      	lsls	r1, r1, #16
 8002a4e:	f001 f833 	bl	8003ab8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a52:	b918      	cbnz	r0, 8002a5c <HAL_SD_ConfigWideBusOperation+0xd4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002a54:	4601      	mov	r1, r0
 8002a56:	6820      	ldr	r0, [r4, #0]
 8002a58:	f001 f908 	bl	8003c6c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002a5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a5e:	4308      	orrs	r0, r1
 8002a60:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a62:	e7c4      	b.n	80029ee <HAL_SD_ConfigWideBusOperation+0x66>
  uint32_t scr[2U] = {0U, 0U};
 8002a64:	2200      	movs	r2, #0
 8002a66:	2300      	movs	r3, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002a6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a70:	f000 fb3e 	bl	80030f0 <SDMMC_GetResponse>
 8002a74:	0180      	lsls	r0, r0, #6
 8002a76:	d418      	bmi.n	8002aaa <HAL_SD_ConfigWideBusOperation+0x122>
  errorstate = SD_FindSCR(hsd, scr);
 8002a78:	a904      	add	r1, sp, #16
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff fae4 	bl	8002048 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a80:	b960      	cbnz	r0, 8002a9c <HAL_SD_ConfigWideBusOperation+0x114>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002a82:	9b05      	ldr	r3, [sp, #20]
 8002a84:	0359      	lsls	r1, r3, #13
 8002a86:	d515      	bpl.n	8002ab4 <HAL_SD_ConfigWideBusOperation+0x12c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a88:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a8a:	6820      	ldr	r0, [r4, #0]
 8002a8c:	0409      	lsls	r1, r1, #16
 8002a8e:	f001 f813 	bl	8003ab8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a92:	b918      	cbnz	r0, 8002a9c <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002a94:	2102      	movs	r1, #2
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	f001 f8e8 	bl	8003c6c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a9e:	4318      	orrs	r0, r3
 8002aa0:	63a0      	str	r0, [r4, #56]	; 0x38
 8002aa2:	e7a4      	b.n	80029ee <HAL_SD_ConfigWideBusOperation+0x66>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002aa4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002aa8:	e7d8      	b.n	8002a5c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002aaa:	4630      	mov	r0, r6
 8002aac:	e7f6      	b.n	8002a9c <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002aae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002ab2:	e7d3      	b.n	8002a5c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ab4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002ab8:	e7f0      	b.n	8002a9c <HAL_SD_ConfigWideBusOperation+0x114>
 8002aba:	bf00      	nop
 8002abc:	004005ff 	.word	0x004005ff

08002ac0 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ac0:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002ac2:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ac4:	0409      	lsls	r1, r1, #16
{
 8002ac6:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ac8:	6800      	ldr	r0, [r0, #0]
 8002aca:	f001 fad7 	bl	800407c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ace:	4601      	mov	r1, r0
 8002ad0:	b120      	cbz	r0, 8002adc <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8002ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	4319      	orrs	r1, r3
 8002ad8:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8002ada:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002adc:	6820      	ldr	r0, [r4, #0]
 8002ade:	f000 fb07 	bl	80030f0 <SDMMC_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ae2:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	f000 8094 	beq.w	8002c16 <HAL_TIM_Base_Init+0x12e>
{
 8002aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002af4:	4604      	mov	r4, r0
 8002af6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07b      	beq.n	8002bf6 <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afe:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b02:	4947      	ldr	r1, [pc, #284]	; (8002c20 <HAL_TIM_Base_Init+0x138>)
 8002b04:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8002b10:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b12:	fab1 f181 	clz	r1, r1
 8002b16:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_Base_Init+0xd6>
 8002b1c:	2900      	cmp	r1, #0
 8002b1e:	d14e      	bne.n	8002bbe <HAL_TIM_Base_Init+0xd6>
 8002b20:	4d40      	ldr	r5, [pc, #256]	; (8002c24 <HAL_TIM_Base_Init+0x13c>)
 8002b22:	4841      	ldr	r0, [pc, #260]	; (8002c28 <HAL_TIM_Base_Init+0x140>)
 8002b24:	4282      	cmp	r2, r0
 8002b26:	bf18      	it	ne
 8002b28:	42aa      	cmpne	r2, r5
 8002b2a:	d048      	beq.n	8002bbe <HAL_TIM_Base_Init+0xd6>
 8002b2c:	4f3f      	ldr	r7, [pc, #252]	; (8002c2c <HAL_TIM_Base_Init+0x144>)
 8002b2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002b32:	1bd7      	subs	r7, r2, r7
 8002b34:	42aa      	cmp	r2, r5
 8002b36:	fab7 f787 	clz	r7, r7
 8002b3a:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8002b3e:	d05f      	beq.n	8002c00 <HAL_TIM_Base_Init+0x118>
 8002b40:	2f00      	cmp	r7, #0
 8002b42:	d15d      	bne.n	8002c00 <HAL_TIM_Base_Init+0x118>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b44:	4f3a      	ldr	r7, [pc, #232]	; (8002c30 <HAL_TIM_Base_Init+0x148>)
 8002b46:	483b      	ldr	r0, [pc, #236]	; (8002c34 <HAL_TIM_Base_Init+0x14c>)
 8002b48:	4282      	cmp	r2, r0
 8002b4a:	bf18      	it	ne
 8002b4c:	42ba      	cmpne	r2, r7
 8002b4e:	bf0c      	ite	eq
 8002b50:	2701      	moveq	r7, #1
 8002b52:	2700      	movne	r7, #0
 8002b54:	d061      	beq.n	8002c1a <HAL_TIM_Base_Init+0x132>
 8002b56:	4d38      	ldr	r5, [pc, #224]	; (8002c38 <HAL_TIM_Base_Init+0x150>)
 8002b58:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 8002b5c:	4282      	cmp	r2, r0
 8002b5e:	bf18      	it	ne
 8002b60:	42aa      	cmpne	r2, r5
 8002b62:	d035      	beq.n	8002bd0 <HAL_TIM_Base_Init+0xe8>
 8002b64:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b68:	4282      	cmp	r2, r0
 8002b6a:	d056      	beq.n	8002c1a <HAL_TIM_Base_Init+0x132>
 8002b6c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b70:	4282      	cmp	r2, r0
 8002b72:	d052      	beq.n	8002c1a <HAL_TIM_Base_Init+0x132>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	69a1      	ldr	r1, [r4, #24]
 8002b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b7a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b7c:	430b      	orrs	r3, r1

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002b80:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b82:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b84:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b86:	2301      	movs	r3, #1
  return HAL_OK;
 8002b88:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002b8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002b94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002b98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bb0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002bb4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002bb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bbe:	4f1b      	ldr	r7, [pc, #108]	; (8002c2c <HAL_TIM_Base_Init+0x144>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bc4:	68a5      	ldr	r5, [r4, #8]
 8002bc6:	1bd7      	subs	r7, r2, r7
 8002bc8:	432b      	orrs	r3, r5
 8002bca:	fab7 f787 	clz	r7, r7
 8002bce:	097f      	lsrs	r7, r7, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd6:	69a5      	ldr	r5, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd8:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bda:	68e6      	ldr	r6, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	6860      	ldr	r0, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002be4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be6:	62d6      	str	r6, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002be8:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bea:	b909      	cbnz	r1, 8002bf0 <HAL_TIM_Base_Init+0x108>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	d0ca      	beq.n	8002b86 <HAL_TIM_Base_Init+0x9e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf0:	6963      	ldr	r3, [r4, #20]
 8002bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf4:	e7c7      	b.n	8002b86 <HAL_TIM_Base_Init+0x9e>
    htim->Lock = HAL_UNLOCKED;
 8002bf6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002bfa:	f7fe f8a1 	bl	8000d40 <HAL_TIM_Base_MspInit>
 8002bfe:	e77e      	b.n	8002afe <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c00:	480e      	ldr	r0, [pc, #56]	; (8002c3c <HAL_TIM_Base_Init+0x154>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c06:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c08:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8002c0a:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c0e:	d0df      	beq.n	8002bd0 <HAL_TIM_Base_Init+0xe8>
 8002c10:	2f00      	cmp	r7, #0
 8002c12:	d1dd      	bne.n	8002bd0 <HAL_TIM_Base_Init+0xe8>
 8002c14:	e796      	b.n	8002b44 <HAL_TIM_Base_Init+0x5c>
    return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	4770      	bx	lr
 8002c1a:	2700      	movs	r7, #0
 8002c1c:	e7d8      	b.n	8002bd0 <HAL_TIM_Base_Init+0xe8>
 8002c1e:	bf00      	nop
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40010400 	.word	0x40010400
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40014400 	.word	0x40014400
 8002c38:	40014800 	.word	0x40014800
 8002c3c:	40000c00 	.word	0x40000c00

08002c40 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002c40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d141      	bne.n	8002ccc <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c48:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c4c:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002c4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002c52:	bf18      	it	ne
 8002c54:	429a      	cmpne	r2, r3
{
 8002c56:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	4c22      	ldr	r4, [pc, #136]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xa8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	42a2      	cmp	r2, r4
 8002c64:	bf08      	it	eq
 8002c66:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6e:	4d1f      	ldr	r5, [pc, #124]	; (8002cec <HAL_TIM_Base_Start_IT+0xac>)
 8002c70:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8002c74:	428a      	cmp	r2, r1
 8002c76:	bf08      	it	eq
 8002c78:	f043 0301 	orreq.w	r3, r3, #1
 8002c7c:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xb0>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c7e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c80:	42aa      	cmp	r2, r5
 8002c82:	bf08      	it	eq
 8002c84:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c88:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8c:	42a2      	cmp	r2, r4
 8002c8e:	bf08      	it	eq
 8002c90:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c94:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	4282      	cmp	r2, r0
 8002c98:	bf08      	it	eq
 8002c9a:	f043 0301 	orreq.w	r3, r3, #1
 8002c9e:	b933      	cbnz	r3, 8002cae <HAL_TIM_Base_Start_IT+0x6e>
 8002ca0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8002ca4:	1a10      	subs	r0, r2, r0
 8002ca6:	fab0 f080 	clz	r0, r0
 8002caa:	0940      	lsrs	r0, r0, #5
 8002cac:	b198      	cbz	r0, 8002cd6 <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cae:	6891      	ldr	r1, [r2, #8]
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cb2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb4:	2b06      	cmp	r3, #6
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x90>
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d008      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
 8002cbe:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 8002cc0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]
}
 8002cc8:	bc30      	pop	{r4, r5}
 8002cca:	4770      	bx	lr
    return HAL_ERROR;
 8002ccc:	2001      	movs	r0, #1
}
 8002cce:	4770      	bx	lr
  return HAL_OK;
 8002cd0:	2000      	movs	r0, #0
}
 8002cd2:	bc30      	pop	{r4, r5}
 8002cd4:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e7f3      	b.n	8002cc8 <HAL_TIM_Base_Start_IT+0x88>
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000c00 	.word	0x40000c00
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	00010007 	.word	0x00010007

08002cf8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002cf8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002cfc:	2a01      	cmp	r2, #1
 8002cfe:	d073      	beq.n	8002de8 <HAL_TIM_ConfigClockSource+0xf0>
 8002d00:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8002d02:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	6800      	ldr	r0, [r0, #0]
{
 8002d06:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8002d08:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002d0e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d12:	4c4b      	ldr	r4, [pc, #300]	; (8002e40 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr = htim->Instance->SMCR;
 8002d14:	6885      	ldr	r5, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d16:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d18:	402c      	ands	r4, r5
  switch (sClockSourceConfig->ClockSource)
 8002d1a:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8002d1c:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d1e:	d065      	beq.n	8002dec <HAL_TIM_ConfigClockSource+0xf4>
 8002d20:	d831      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x8e>
 8002d22:	2a40      	cmp	r2, #64	; 0x40
 8002d24:	d048      	beq.n	8002db8 <HAL_TIM_ConfigClockSource+0xc0>
 8002d26:	d921      	bls.n	8002d6c <HAL_TIM_ConfigClockSource+0x74>
 8002d28:	2a50      	cmp	r2, #80	; 0x50
 8002d2a:	d116      	bne.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d2c:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2e:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d30:	684c      	ldr	r4, [r1, #4]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d32:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d36:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8002d3c:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d40:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d46:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d4c:	6204      	str	r4, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d4e:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d54:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d58:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8002d5a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	2101      	movs	r1, #1
  return HAL_OK;
 8002d5e:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d68:	bcf0      	pop	{r4, r5, r6, r7}
 8002d6a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002d6c:	2a20      	cmp	r2, #32
 8002d6e:	d002      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x7e>
 8002d70:	d91e      	bls.n	8002db0 <HAL_TIM_ConfigClockSource+0xb8>
 8002d72:	2a30      	cmp	r2, #48	; 0x30
 8002d74:	d1f1      	bne.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr = TIMx->SMCR;
 8002d76:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d78:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8002d82:	6082      	str	r2, [r0, #8]
}
 8002d84:	e7e9      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8002d86:	2a70      	cmp	r2, #112	; 0x70
 8002d88:	d049      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x126>
 8002d8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002d8e:	d1e4      	bne.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d90:	68cc      	ldr	r4, [r1, #12]
 8002d92:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002d96:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d98:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d9e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002da2:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da4:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002da6:	6882      	ldr	r2, [r0, #8]
 8002da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dac:	6082      	str	r2, [r0, #8]
      break;
 8002dae:	e7d4      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 8002db0:	f032 0110 	bics.w	r1, r2, #16
 8002db4:	d1d1      	bne.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
 8002db6:	e7de      	b.n	8002d76 <HAL_TIM_ConfigClockSource+0x7e>
  tmpccer = TIMx->CCER;
 8002db8:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dba:	6a05      	ldr	r5, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbc:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	f025 0501 	bic.w	r5, r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc6:	68cf      	ldr	r7, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8002dc8:	4334      	orrs	r4, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dcc:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002dd6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002dd8:	6204      	str	r4, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002dda:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ddc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002de0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002de4:	6082      	str	r2, [r0, #8]
}
 8002de6:	e7b8      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
  __HAL_LOCK(htim);
 8002de8:	2002      	movs	r0, #2
}
 8002dea:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dec:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dee:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df8:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8002dfa:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dfc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e04:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e08:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0c:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e0e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002e10:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e16:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002e1a:	6082      	str	r2, [r0, #8]
}
 8002e1c:	e79d      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e1e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8002e22:	68cc      	ldr	r4, [r1, #12]
 8002e24:	432a      	orrs	r2, r5
  tmpsmcr = TIMx->SMCR;
 8002e26:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e28:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e30:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8002e32:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002e34:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e36:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002e3a:	6082      	str	r2, [r0, #8]
      break;
 8002e3c:	e78d      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x62>
 8002e3e:	bf00      	nop
 8002e40:	fffe0088 	.word	0xfffe0088

08002e44 <HAL_TIM_OC_DelayElapsedCallback>:
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop

08002e48 <HAL_TIM_IC_CaptureCallback>:
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop

08002e4c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <HAL_TIM_TriggerCallback>:
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	0791      	lsls	r1, r2, #30
{
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5e:	d502      	bpl.n	8002e66 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	0792      	lsls	r2, r2, #30
 8002e64:	d468      	bmi.n	8002f38 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	0752      	lsls	r2, r2, #29
 8002e6a:	d502      	bpl.n	8002e72 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	0750      	lsls	r0, r2, #29
 8002e70:	d44f      	bmi.n	8002f12 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	0711      	lsls	r1, r2, #28
 8002e76:	d502      	bpl.n	8002e7e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	0712      	lsls	r2, r2, #28
 8002e7c:	d437      	bmi.n	8002eee <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	06d0      	lsls	r0, r2, #27
 8002e82:	d502      	bpl.n	8002e8a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	06d1      	lsls	r1, r2, #27
 8002e88:	d41e      	bmi.n	8002ec8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	07d2      	lsls	r2, r2, #31
 8002e8e:	d502      	bpl.n	8002e96 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	07d0      	lsls	r0, r2, #31
 8002e94:	d469      	bmi.n	8002f6a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	0611      	lsls	r1, r2, #24
 8002e9a:	d502      	bpl.n	8002ea2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	0612      	lsls	r2, r2, #24
 8002ea0:	d46b      	bmi.n	8002f7a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	05d0      	lsls	r0, r2, #23
 8002ea6:	d502      	bpl.n	8002eae <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	0611      	lsls	r1, r2, #24
 8002eac:	d46d      	bmi.n	8002f8a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	0652      	lsls	r2, r2, #25
 8002eb2:	d502      	bpl.n	8002eba <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	0650      	lsls	r0, r2, #25
 8002eb8:	d46f      	bmi.n	8002f9a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	0691      	lsls	r1, r2, #26
 8002ebe:	d502      	bpl.n	8002ec6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	0692      	lsls	r2, r2, #26
 8002ec4:	d449      	bmi.n	8002f5a <HAL_TIM_IRQHandler+0x106>
}
 8002ec6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ecc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002eda:	d16f      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002edc:	f7ff ffb2 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f7ff ffb3 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	7722      	strb	r2, [r4, #28]
 8002eec:	e7cd      	b.n	8002e8a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eee:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ef6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d15a      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f00:	f7ff ffa0 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff ffa1 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	7722      	strb	r2, [r4, #28]
 8002f10:	e7b5      	b.n	8002e7e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f12:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f16:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f1a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f24:	d144      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	f7ff ff8d 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7ff ff8e 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f30:	2200      	movs	r2, #0
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	7722      	strb	r2, [r4, #28]
 8002f36:	e79c      	b.n	8002e72 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f38:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f3e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f40:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	0799      	lsls	r1, r3, #30
 8002f46:	d130      	bne.n	8002faa <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f48:	f7ff ff7c 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff ff7d 	bl	8002e4c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	2200      	movs	r2, #0
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	7722      	strb	r2, [r4, #28]
 8002f58:	e785      	b.n	8002e66 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f5a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002f5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f60:	611a      	str	r2, [r3, #16]
}
 8002f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002f66:	f000 b889 	b.w	800307c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f6a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f72:	f7fd fd35 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	e78d      	b.n	8002e96 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002f7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f80:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f82:	f000 f87d 	bl	8003080 <HAL_TIMEx_BreakCallback>
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	e78b      	b.n	8002ea2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8002f8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002f92:	f000 f877 	bl	8003084 <HAL_TIMEx_Break2Callback>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	e789      	b.n	8002eae <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002f9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002fa2:	f7ff ff55 	bl	8002e50 <HAL_TIM_TriggerCallback>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	e787      	b.n	8002eba <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	f7ff ff4d 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002fae:	e7d0      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb0:	f7ff ff4a 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e7bc      	b.n	8002f30 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	f7ff ff47 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002fba:	e7a6      	b.n	8002f0a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbc:	f7ff ff44 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e791      	b.n	8002ee6 <HAL_TIM_IRQHandler+0x92>
 8002fc2:	bf00      	nop

08002fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d048      	beq.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x9a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	4602      	mov	r2, r0
 8002fce:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd0:	6813      	ldr	r3, [r2, #0]
{
 8002fd2:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fd4:	4d23      	ldr	r5, [pc, #140]	; (8003064 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fda:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8002fdc:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002fde:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fe0:	d026      	beq.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8002fe2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fe6:	42ab      	cmp	r3, r5
 8002fe8:	d022      	beq.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fea:	4d1f      	ldr	r5, [pc, #124]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fec:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff0:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	42ab      	cmp	r3, r5
 8002ff4:	bf18      	it	ne
 8002ff6:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8002ffa:	4f1c      	ldr	r7, [pc, #112]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ffc:	ea40 0006 	orr.w	r0, r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003000:	4e1b      	ldr	r6, [pc, #108]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003002:	bf0c      	ite	eq
 8003004:	2501      	moveq	r5, #1
 8003006:	2500      	movne	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8003008:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300a:	42bb      	cmp	r3, r7
 800300c:	bf08      	it	eq
 800300e:	f045 0501 	orreq.w	r5, r5, #1
 8003012:	42b3      	cmp	r3, r6
 8003014:	bf14      	ite	ne
 8003016:	4628      	movne	r0, r5
 8003018:	f045 0001 	orreq.w	r0, r5, #1
 800301c:	4d15      	ldr	r5, [pc, #84]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800301e:	42ab      	cmp	r3, r5
 8003020:	bf08      	it	eq
 8003022:	f040 0001 	orreq.w	r0, r0, #1
 8003026:	b960      	cbnz	r0, 8003042 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003028:	4813      	ldr	r0, [pc, #76]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800302a:	4283      	cmp	r3, r0
 800302c:	d009      	beq.n	8003042 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800302e:	e00d      	b.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x88>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003030:	e9d1 5600 	ldrd	r5, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003034:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003038:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800303a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800303e:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8003040:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003042:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003044:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003048:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800304a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800304c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800304e:	2101      	movs	r1, #1

  return HAL_OK;
 8003050:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8003052:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003056:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800305a:	bcf0      	pop	{r4, r5, r6, r7}
 800305c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800305e:	2002      	movs	r0, #2
}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40010000 	.word	0x40010000
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40014000 	.word	0x40014000
 8003078:	40001800 	.word	0x40001800

0800307c <HAL_TIMEx_CommutCallback>:
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop

08003080 <HAL_TIMEx_BreakCallback>:
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop

08003084 <HAL_TIMEx_Break2Callback>:
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop

08003088 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8003088:	b084      	sub	sp, #16
 800308a:	b470      	push	{r4, r5, r6}
 800308c:	ae04      	add	r6, sp, #16
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
             Init.ClockBypass         |\
             Init.ClockPowerSave      |\
 800308e:	9c07      	ldr	r4, [sp, #28]
{
 8003090:	4605      	mov	r5, r0
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  

  return HAL_OK;
}
 8003092:	2000      	movs	r0, #0
{
 8003094:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8003098:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 800309a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 800309e:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80030a0:	9a08      	ldr	r2, [sp, #32]
             Init.ClockBypass         |\
 80030a2:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 80030a4:	9909      	ldr	r1, [sp, #36]	; 0x24
             Init.ClockPowerSave      |\
 80030a6:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80030a8:	686c      	ldr	r4, [r5, #4]
             Init.BusWide             |\
 80030aa:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80030ac:	4a03      	ldr	r2, [pc, #12]	; (80030bc <SDMMC_Init+0x34>)
             Init.HardwareFlowControl |\
 80030ae:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80030b0:	4022      	ands	r2, r4
 80030b2:	4313      	orrs	r3, r2
 80030b4:	606b      	str	r3, [r5, #4]
}
 80030b6:	bc70      	pop	{r4, r5, r6}
 80030b8:	b004      	add	sp, #16
 80030ba:	4770      	bx	lr
 80030bc:	ffff8100 	.word	0xffff8100

080030c0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80030c0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop

080030c8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80030c8:	4603      	mov	r3, r0
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80030ca:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80030cc:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80030ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80030d2:	4770      	bx	lr

080030d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80030d4:	b508      	push	{r3, lr}
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80030d6:	2203      	movs	r2, #3
{  
 80030d8:	4603      	mov	r3, r0

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80030da:	2002      	movs	r0, #2
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80030dc:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 80030de:	f7fd fe95 	bl	8000e0c <HAL_Delay>
  
  return HAL_OK;
}
 80030e2:	2000      	movs	r0, #0
 80030e4:	bd08      	pop	{r3, pc}
 80030e6:	bf00      	nop

080030e8 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80030e8:	6800      	ldr	r0, [r0, #0]
}
 80030ea:	f000 0003 	and.w	r0, r0, #3
 80030ee:	4770      	bx	lr

080030f0 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80030f0:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 80030f2:	5840      	ldr	r0, [r0, r1]
}  
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop

080030f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80030f8:	b430      	push	{r4, r5}
 80030fa:	4602      	mov	r2, r0
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80030fc:	680c      	ldr	r4, [r1, #0]
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);

  return HAL_OK;

}
 80030fe:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003100:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8003104:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8003106:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8003108:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 800310a:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 800310c:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 800310e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8003110:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003112:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8003114:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003116:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 800311a:	430b      	orrs	r3, r1
}
 800311c:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003124:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <SDMMC_CmdBlockLength+0x130>)
{
 8003126:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	f241 3488 	movw	r4, #5000	; 0x1388
 800312e:	4d4a      	ldr	r5, [pc, #296]	; (8003258 <SDMMC_CmdBlockLength+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003130:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003132:	4b4a      	ldr	r3, [pc, #296]	; (800325c <SDMMC_CmdBlockLength+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003134:	fba5 1202 	umull	r1, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003138:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800313a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800313c:	400b      	ands	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800313e:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003142:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
 8003146:	60c3      	str	r3, [r0, #12]
  
  do
  {
    if (count-- == 0U)
 8003148:	b14a      	cbz	r2, 800315e <SDMMC_CmdBlockLength+0x3a>
 800314a:	1e51      	subs	r1, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 800314c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800314e:	3901      	subs	r1, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003150:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003154:	d001      	beq.n	800315a <SDMMC_CmdBlockLength+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003156:	051a      	lsls	r2, r3, #20
 8003158:	d506      	bpl.n	8003168 <SDMMC_CmdBlockLength+0x44>
    if (count-- == 0U)
 800315a:	1c4c      	adds	r4, r1, #1
 800315c:	d1f6      	bne.n	800314c <SDMMC_CmdBlockLength+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800315e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003162:	4618      	mov	r0, r3
 8003164:	bc30      	pop	{r4, r5}
 8003166:	4770      	bx	lr
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003168:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800316a:	075b      	lsls	r3, r3, #29
 800316c:	d43d      	bmi.n	80031ea <SDMMC_CmdBlockLength+0xc6>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800316e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003170:	f013 0301 	ands.w	r3, r3, #1
 8003174:	d134      	bne.n	80031e0 <SDMMC_CmdBlockLength+0xbc>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003176:	23c5      	movs	r3, #197	; 0xc5
 8003178:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800317a:	6903      	ldr	r3, [r0, #16]
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b10      	cmp	r3, #16
 8003180:	d131      	bne.n	80031e6 <SDMMC_CmdBlockLength+0xc2>
  return (*(__IO uint32_t *) tmp);
 8003182:	6942      	ldr	r2, [r0, #20]
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <SDMMC_CmdBlockLength+0x13c>)
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ea      	beq.n	8003162 <SDMMC_CmdBlockLength+0x3e>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800318c:	2a00      	cmp	r2, #0
 800318e:	db2f      	blt.n	80031f0 <SDMMC_CmdBlockLength+0xcc>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003190:	0055      	lsls	r5, r2, #1
 8003192:	d430      	bmi.n	80031f6 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003194:	0094      	lsls	r4, r2, #2
 8003196:	d430      	bmi.n	80031fa <SDMMC_CmdBlockLength+0xd6>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003198:	00d0      	lsls	r0, r2, #3
 800319a:	d430      	bmi.n	80031fe <SDMMC_CmdBlockLength+0xda>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800319c:	0111      	lsls	r1, r2, #4
 800319e:	d431      	bmi.n	8003204 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80031a0:	0155      	lsls	r5, r2, #5
 80031a2:	d432      	bmi.n	800320a <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80031a4:	01d4      	lsls	r4, r2, #7
 80031a6:	d433      	bmi.n	8003210 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80031a8:	0210      	lsls	r0, r2, #8
 80031aa:	d434      	bmi.n	8003216 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80031ac:	0251      	lsls	r1, r2, #9
 80031ae:	d435      	bmi.n	800321c <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80031b0:	0295      	lsls	r5, r2, #10
 80031b2:	d436      	bmi.n	8003222 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80031b4:	02d4      	lsls	r4, r2, #11
 80031b6:	d437      	bmi.n	8003228 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80031b8:	0350      	lsls	r0, r2, #13
 80031ba:	d438      	bmi.n	800322e <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80031bc:	0391      	lsls	r1, r2, #14
 80031be:	d439      	bmi.n	8003234 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80031c0:	03d5      	lsls	r5, r2, #15
 80031c2:	d43a      	bmi.n	800323a <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80031c4:	0414      	lsls	r4, r2, #16
 80031c6:	d43b      	bmi.n	8003240 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80031c8:	0450      	lsls	r0, r2, #17
 80031ca:	d43f      	bmi.n	800324c <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80031cc:	0491      	lsls	r1, r2, #18
 80031ce:	d43a      	bmi.n	8003246 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80031d0:	f012 0f08 	tst.w	r2, #8
 80031d4:	bf14      	ite	ne
 80031d6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80031da:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80031de:	e7c0      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80031e0:	2201      	movs	r2, #1
 80031e2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80031e4:	e7bd      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e7bb      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80031ea:	2304      	movs	r3, #4
 80031ec:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80031ee:	e7b8      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80031f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f4:	e7b5      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80031f6:	2340      	movs	r3, #64	; 0x40
 80031f8:	e7b3      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	e7b1      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80031fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003202:	e7ae      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003208:	e7ab      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800320a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320e:	e7a8      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003214:	e7a5      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321a:	e7a2      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800321c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003220:	e79f      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003226:	e79c      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CC_ERR;
 8003228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322c:	e799      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800322e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003232:	e796      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003238:	e793      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800323a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800323e:	e790      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003244:	e78d      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_ERASE_RESET;
 8003246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800324a:	e78a      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800324c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003250:	e787      	b.n	8003162 <SDMMC_CmdBlockLength+0x3e>
 8003252:	bf00      	nop
 8003254:	20000000 	.word	0x20000000
 8003258:	10624dd3 	.word	0x10624dd3
 800325c:	fffff000 	.word	0xfffff000
 8003260:	fdffe008 	.word	0xfdffe008

08003264 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <SDMMC_CmdReadSingleBlock+0x130>)
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800326a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800326c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800326e:	f240 4451 	movw	r4, #1105	; 0x451
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003272:	4d49      	ldr	r5, [pc, #292]	; (8003398 <SDMMC_CmdReadSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003274:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003276:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800327a:	4948      	ldr	r1, [pc, #288]	; (800339c <SDMMC_CmdReadSingleBlock+0x138>)
 800327c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800327e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003280:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003282:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003286:	430c      	orrs	r4, r1
 8003288:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800328a:	b14b      	cbz	r3, 80032a0 <SDMMC_CmdReadSingleBlock+0x3c>
 800328c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800328e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003290:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003292:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003296:	d001      	beq.n	800329c <SDMMC_CmdReadSingleBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003298:	0519      	lsls	r1, r3, #20
 800329a:	d506      	bpl.n	80032aa <SDMMC_CmdReadSingleBlock+0x46>
    if (count-- == 0U)
 800329c:	1c54      	adds	r4, r2, #1
 800329e:	d1f6      	bne.n	800328e <SDMMC_CmdReadSingleBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80032a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bc30      	pop	{r4, r5}
 80032a8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80032aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032ac:	075b      	lsls	r3, r3, #29
 80032ae:	d43d      	bmi.n	800332c <SDMMC_CmdReadSingleBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80032b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032b2:	f013 0301 	ands.w	r3, r3, #1
 80032b6:	d134      	bne.n	8003322 <SDMMC_CmdReadSingleBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80032b8:	23c5      	movs	r3, #197	; 0xc5
 80032ba:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80032bc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b11      	cmp	r3, #17
 80032c2:	d131      	bne.n	8003328 <SDMMC_CmdReadSingleBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 80032c4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <SDMMC_CmdReadSingleBlock+0x13c>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ea      	beq.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80032ce:	2a00      	cmp	r2, #0
 80032d0:	db2f      	blt.n	8003332 <SDMMC_CmdReadSingleBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80032d2:	0055      	lsls	r5, r2, #1
 80032d4:	d430      	bmi.n	8003338 <SDMMC_CmdReadSingleBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80032d6:	0094      	lsls	r4, r2, #2
 80032d8:	d430      	bmi.n	800333c <SDMMC_CmdReadSingleBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80032da:	00d0      	lsls	r0, r2, #3
 80032dc:	d430      	bmi.n	8003340 <SDMMC_CmdReadSingleBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80032de:	0111      	lsls	r1, r2, #4
 80032e0:	d431      	bmi.n	8003346 <SDMMC_CmdReadSingleBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80032e2:	0155      	lsls	r5, r2, #5
 80032e4:	d432      	bmi.n	800334c <SDMMC_CmdReadSingleBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80032e6:	01d4      	lsls	r4, r2, #7
 80032e8:	d433      	bmi.n	8003352 <SDMMC_CmdReadSingleBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80032ea:	0210      	lsls	r0, r2, #8
 80032ec:	d434      	bmi.n	8003358 <SDMMC_CmdReadSingleBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80032ee:	0251      	lsls	r1, r2, #9
 80032f0:	d435      	bmi.n	800335e <SDMMC_CmdReadSingleBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80032f2:	0295      	lsls	r5, r2, #10
 80032f4:	d436      	bmi.n	8003364 <SDMMC_CmdReadSingleBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80032f6:	02d4      	lsls	r4, r2, #11
 80032f8:	d437      	bmi.n	800336a <SDMMC_CmdReadSingleBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80032fa:	0350      	lsls	r0, r2, #13
 80032fc:	d438      	bmi.n	8003370 <SDMMC_CmdReadSingleBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80032fe:	0391      	lsls	r1, r2, #14
 8003300:	d439      	bmi.n	8003376 <SDMMC_CmdReadSingleBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003302:	03d5      	lsls	r5, r2, #15
 8003304:	d43a      	bmi.n	800337c <SDMMC_CmdReadSingleBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003306:	0414      	lsls	r4, r2, #16
 8003308:	d43b      	bmi.n	8003382 <SDMMC_CmdReadSingleBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800330a:	0450      	lsls	r0, r2, #17
 800330c:	d43f      	bmi.n	800338e <SDMMC_CmdReadSingleBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800330e:	0491      	lsls	r1, r2, #18
 8003310:	d43a      	bmi.n	8003388 <SDMMC_CmdReadSingleBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003312:	f012 0f08 	tst.w	r2, #8
 8003316:	bf14      	ite	ne
 8003318:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800331c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003320:	e7c0      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003322:	2201      	movs	r2, #1
 8003324:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003326:	e7bd      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003328:	2301      	movs	r3, #1
 800332a:	e7bb      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800332c:	2304      	movs	r3, #4
 800332e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003330:	e7b8      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003336:	e7b5      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003338:	2340      	movs	r3, #64	; 0x40
 800333a:	e7b3      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	e7b1      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003344:	e7ae      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334a:	e7ab      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800334c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003350:	e7a8      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003356:	e7a5      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800335c:	e7a2      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800335e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003362:	e79f      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003364:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003368:	e79c      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800336a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336e:	e799      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003374:	e796      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003376:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800337a:	e793      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800337c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003380:	e790      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003386:	e78d      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003388:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800338c:	e78a      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800338e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003392:	e787      	b.n	80032a4 <SDMMC_CmdReadSingleBlock+0x40>
 8003394:	20000000 	.word	0x20000000
 8003398:	10624dd3 	.word	0x10624dd3
 800339c:	fffff000 	.word	0xfffff000
 80033a0:	fdffe008 	.word	0xfdffe008

080033a4 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <SDMMC_CmdReadMultiBlock+0x130>)
 80033a6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80033aa:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80033ac:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033ae:	f240 4452 	movw	r4, #1106	; 0x452
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80033b2:	4d49      	ldr	r5, [pc, #292]	; (80034d8 <SDMMC_CmdReadMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80033b4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80033b6:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033ba:	4948      	ldr	r1, [pc, #288]	; (80034dc <SDMMC_CmdReadMultiBlock+0x138>)
 80033bc:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80033be:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033c0:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033c6:	430c      	orrs	r4, r1
 80033c8:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80033ca:	b14b      	cbz	r3, 80033e0 <SDMMC_CmdReadMultiBlock+0x3c>
 80033cc:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80033ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80033d0:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80033d2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80033d6:	d001      	beq.n	80033dc <SDMMC_CmdReadMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80033d8:	0519      	lsls	r1, r3, #20
 80033da:	d506      	bpl.n	80033ea <SDMMC_CmdReadMultiBlock+0x46>
    if (count-- == 0U)
 80033dc:	1c54      	adds	r4, r2, #1
 80033de:	d1f6      	bne.n	80033ce <SDMMC_CmdReadMultiBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80033e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bc30      	pop	{r4, r5}
 80033e8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80033ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033ec:	075b      	lsls	r3, r3, #29
 80033ee:	d43d      	bmi.n	800346c <SDMMC_CmdReadMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80033f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033f2:	f013 0301 	ands.w	r3, r3, #1
 80033f6:	d134      	bne.n	8003462 <SDMMC_CmdReadMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80033f8:	23c5      	movs	r3, #197	; 0xc5
 80033fa:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80033fc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b12      	cmp	r3, #18
 8003402:	d131      	bne.n	8003468 <SDMMC_CmdReadMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003404:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <SDMMC_CmdReadMultiBlock+0x13c>)
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ea      	beq.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800340e:	2a00      	cmp	r2, #0
 8003410:	db2f      	blt.n	8003472 <SDMMC_CmdReadMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003412:	0055      	lsls	r5, r2, #1
 8003414:	d430      	bmi.n	8003478 <SDMMC_CmdReadMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003416:	0094      	lsls	r4, r2, #2
 8003418:	d430      	bmi.n	800347c <SDMMC_CmdReadMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800341a:	00d0      	lsls	r0, r2, #3
 800341c:	d430      	bmi.n	8003480 <SDMMC_CmdReadMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800341e:	0111      	lsls	r1, r2, #4
 8003420:	d431      	bmi.n	8003486 <SDMMC_CmdReadMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003422:	0155      	lsls	r5, r2, #5
 8003424:	d432      	bmi.n	800348c <SDMMC_CmdReadMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003426:	01d4      	lsls	r4, r2, #7
 8003428:	d433      	bmi.n	8003492 <SDMMC_CmdReadMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800342a:	0210      	lsls	r0, r2, #8
 800342c:	d434      	bmi.n	8003498 <SDMMC_CmdReadMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800342e:	0251      	lsls	r1, r2, #9
 8003430:	d435      	bmi.n	800349e <SDMMC_CmdReadMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003432:	0295      	lsls	r5, r2, #10
 8003434:	d436      	bmi.n	80034a4 <SDMMC_CmdReadMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003436:	02d4      	lsls	r4, r2, #11
 8003438:	d437      	bmi.n	80034aa <SDMMC_CmdReadMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800343a:	0350      	lsls	r0, r2, #13
 800343c:	d438      	bmi.n	80034b0 <SDMMC_CmdReadMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800343e:	0391      	lsls	r1, r2, #14
 8003440:	d439      	bmi.n	80034b6 <SDMMC_CmdReadMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003442:	03d5      	lsls	r5, r2, #15
 8003444:	d43a      	bmi.n	80034bc <SDMMC_CmdReadMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003446:	0414      	lsls	r4, r2, #16
 8003448:	d43b      	bmi.n	80034c2 <SDMMC_CmdReadMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800344a:	0450      	lsls	r0, r2, #17
 800344c:	d43f      	bmi.n	80034ce <SDMMC_CmdReadMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800344e:	0491      	lsls	r1, r2, #18
 8003450:	d43a      	bmi.n	80034c8 <SDMMC_CmdReadMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003452:	f012 0f08 	tst.w	r2, #8
 8003456:	bf14      	ite	ne
 8003458:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800345c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003460:	e7c0      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003462:	2201      	movs	r2, #1
 8003464:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003466:	e7bd      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003468:	2301      	movs	r3, #1
 800346a:	e7bb      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800346c:	2304      	movs	r3, #4
 800346e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003470:	e7b8      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003476:	e7b5      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003478:	2340      	movs	r3, #64	; 0x40
 800347a:	e7b3      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	e7b1      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003484:	e7ae      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348a:	e7ab      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800348c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003490:	e7a8      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003496:	e7a5      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349c:	e7a2      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800349e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a2:	e79f      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80034a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034a8:	e79c      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	e799      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80034b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b4:	e796      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80034b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034ba:	e793      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80034bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80034c0:	e790      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80034c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034c6:	e78d      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80034c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034cc:	e78a      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80034ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034d2:	e787      	b.n	80033e4 <SDMMC_CmdReadMultiBlock+0x40>
 80034d4:	20000000 	.word	0x20000000
 80034d8:	10624dd3 	.word	0x10624dd3
 80034dc:	fffff000 	.word	0xfffff000
 80034e0:	fdffe008 	.word	0xfdffe008

080034e4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <SDMMC_CmdWriteSingleBlock+0x130>)
{
 80034e6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f241 3488 	movw	r4, #5000	; 0x1388
 80034ee:	4d4a      	ldr	r5, [pc, #296]	; (8003618 <SDMMC_CmdWriteSingleBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 80034f0:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <SDMMC_CmdWriteSingleBlock+0x138>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80034f4:	fba5 1202 	umull	r1, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80034f8:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80034fa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80034fc:	400b      	ands	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80034fe:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003502:	f443 638b 	orr.w	r3, r3, #1112	; 0x458
 8003506:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8003508:	b14a      	cbz	r2, 800351e <SDMMC_CmdWriteSingleBlock+0x3a>
 800350a:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 800350c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 800350e:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003510:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003514:	d001      	beq.n	800351a <SDMMC_CmdWriteSingleBlock+0x36>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003516:	051a      	lsls	r2, r3, #20
 8003518:	d506      	bpl.n	8003528 <SDMMC_CmdWriteSingleBlock+0x44>
    if (count-- == 0U)
 800351a:	1c4c      	adds	r4, r1, #1
 800351c:	d1f6      	bne.n	800350c <SDMMC_CmdWriteSingleBlock+0x28>
      return SDMMC_ERROR_TIMEOUT;
 800351e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003522:	4618      	mov	r0, r3
 8003524:	bc30      	pop	{r4, r5}
 8003526:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003528:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800352a:	075b      	lsls	r3, r3, #29
 800352c:	d43d      	bmi.n	80035aa <SDMMC_CmdWriteSingleBlock+0xc6>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800352e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003530:	f013 0301 	ands.w	r3, r3, #1
 8003534:	d134      	bne.n	80035a0 <SDMMC_CmdWriteSingleBlock+0xbc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003536:	23c5      	movs	r3, #197	; 0xc5
 8003538:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800353a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b18      	cmp	r3, #24
 8003540:	d131      	bne.n	80035a6 <SDMMC_CmdWriteSingleBlock+0xc2>
  return (*(__IO uint32_t *) tmp);
 8003542:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <SDMMC_CmdWriteSingleBlock+0x13c>)
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ea      	beq.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800354c:	2a00      	cmp	r2, #0
 800354e:	db2f      	blt.n	80035b0 <SDMMC_CmdWriteSingleBlock+0xcc>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003550:	0055      	lsls	r5, r2, #1
 8003552:	d430      	bmi.n	80035b6 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003554:	0094      	lsls	r4, r2, #2
 8003556:	d430      	bmi.n	80035ba <SDMMC_CmdWriteSingleBlock+0xd6>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003558:	00d0      	lsls	r0, r2, #3
 800355a:	d430      	bmi.n	80035be <SDMMC_CmdWriteSingleBlock+0xda>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800355c:	0111      	lsls	r1, r2, #4
 800355e:	d431      	bmi.n	80035c4 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003560:	0155      	lsls	r5, r2, #5
 8003562:	d432      	bmi.n	80035ca <SDMMC_CmdWriteSingleBlock+0xe6>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003564:	01d4      	lsls	r4, r2, #7
 8003566:	d433      	bmi.n	80035d0 <SDMMC_CmdWriteSingleBlock+0xec>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003568:	0210      	lsls	r0, r2, #8
 800356a:	d434      	bmi.n	80035d6 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800356c:	0251      	lsls	r1, r2, #9
 800356e:	d435      	bmi.n	80035dc <SDMMC_CmdWriteSingleBlock+0xf8>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003570:	0295      	lsls	r5, r2, #10
 8003572:	d436      	bmi.n	80035e2 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003574:	02d4      	lsls	r4, r2, #11
 8003576:	d437      	bmi.n	80035e8 <SDMMC_CmdWriteSingleBlock+0x104>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003578:	0350      	lsls	r0, r2, #13
 800357a:	d438      	bmi.n	80035ee <SDMMC_CmdWriteSingleBlock+0x10a>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800357c:	0391      	lsls	r1, r2, #14
 800357e:	d439      	bmi.n	80035f4 <SDMMC_CmdWriteSingleBlock+0x110>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003580:	03d5      	lsls	r5, r2, #15
 8003582:	d43a      	bmi.n	80035fa <SDMMC_CmdWriteSingleBlock+0x116>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003584:	0414      	lsls	r4, r2, #16
 8003586:	d43b      	bmi.n	8003600 <SDMMC_CmdWriteSingleBlock+0x11c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003588:	0450      	lsls	r0, r2, #17
 800358a:	d43f      	bmi.n	800360c <SDMMC_CmdWriteSingleBlock+0x128>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800358c:	0491      	lsls	r1, r2, #18
 800358e:	d43a      	bmi.n	8003606 <SDMMC_CmdWriteSingleBlock+0x122>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003590:	f012 0f08 	tst.w	r2, #8
 8003594:	bf14      	ite	ne
 8003596:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800359a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800359e:	e7c0      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80035a0:	2201      	movs	r2, #1
 80035a2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80035a4:	e7bd      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e7bb      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80035aa:	2304      	movs	r3, #4
 80035ac:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80035ae:	e7b8      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80035b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b4:	e7b5      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	e7b3      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	e7b1      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80035be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c2:	e7ae      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80035c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035c8:	e7ab      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80035ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ce:	e7a8      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80035d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035d4:	e7a5      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80035d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035da:	e7a2      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80035dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035e0:	e79f      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80035e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035e6:	e79c      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CC_ERR;
 80035e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ec:	e799      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80035ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035f2:	e796      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80035f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035f8:	e793      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80035fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035fe:	e790      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003604:	e78d      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_ERASE_RESET;
 8003606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800360a:	e78a      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800360c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003610:	e787      	b.n	8003522 <SDMMC_CmdWriteSingleBlock+0x3e>
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000
 8003618:	10624dd3 	.word	0x10624dd3
 800361c:	fffff000 	.word	0xfffff000
 8003620:	fdffe008 	.word	0xfdffe008

08003624 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <SDMMC_CmdWriteMultiBlock+0x130>)
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800362a:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800362c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800362e:	f240 4459 	movw	r4, #1113	; 0x459
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003632:	4d49      	ldr	r5, [pc, #292]	; (8003758 <SDMMC_CmdWriteMultiBlock+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003634:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003636:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800363a:	4948      	ldr	r1, [pc, #288]	; (800375c <SDMMC_CmdWriteMultiBlock+0x138>)
 800363c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800363e:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003640:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003642:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003646:	430c      	orrs	r4, r1
 8003648:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 800364a:	b14b      	cbz	r3, 8003660 <SDMMC_CmdWriteMultiBlock+0x3c>
 800364c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800364e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003650:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003652:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003656:	d001      	beq.n	800365c <SDMMC_CmdWriteMultiBlock+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003658:	0519      	lsls	r1, r3, #20
 800365a:	d506      	bpl.n	800366a <SDMMC_CmdWriteMultiBlock+0x46>
    if (count-- == 0U)
 800365c:	1c54      	adds	r4, r2, #1
 800365e:	d1f6      	bne.n	800364e <SDMMC_CmdWriteMultiBlock+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003660:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003664:	4618      	mov	r0, r3
 8003666:	bc30      	pop	{r4, r5}
 8003668:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800366a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800366c:	075b      	lsls	r3, r3, #29
 800366e:	d43d      	bmi.n	80036ec <SDMMC_CmdWriteMultiBlock+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003670:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003672:	f013 0301 	ands.w	r3, r3, #1
 8003676:	d134      	bne.n	80036e2 <SDMMC_CmdWriteMultiBlock+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003678:	23c5      	movs	r3, #197	; 0xc5
 800367a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800367c:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b19      	cmp	r3, #25
 8003682:	d131      	bne.n	80036e8 <SDMMC_CmdWriteMultiBlock+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003684:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <SDMMC_CmdWriteMultiBlock+0x13c>)
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ea      	beq.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800368e:	2a00      	cmp	r2, #0
 8003690:	db2f      	blt.n	80036f2 <SDMMC_CmdWriteMultiBlock+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003692:	0055      	lsls	r5, r2, #1
 8003694:	d430      	bmi.n	80036f8 <SDMMC_CmdWriteMultiBlock+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003696:	0094      	lsls	r4, r2, #2
 8003698:	d430      	bmi.n	80036fc <SDMMC_CmdWriteMultiBlock+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800369a:	00d0      	lsls	r0, r2, #3
 800369c:	d430      	bmi.n	8003700 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800369e:	0111      	lsls	r1, r2, #4
 80036a0:	d431      	bmi.n	8003706 <SDMMC_CmdWriteMultiBlock+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80036a2:	0155      	lsls	r5, r2, #5
 80036a4:	d432      	bmi.n	800370c <SDMMC_CmdWriteMultiBlock+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80036a6:	01d4      	lsls	r4, r2, #7
 80036a8:	d433      	bmi.n	8003712 <SDMMC_CmdWriteMultiBlock+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80036aa:	0210      	lsls	r0, r2, #8
 80036ac:	d434      	bmi.n	8003718 <SDMMC_CmdWriteMultiBlock+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80036ae:	0251      	lsls	r1, r2, #9
 80036b0:	d435      	bmi.n	800371e <SDMMC_CmdWriteMultiBlock+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80036b2:	0295      	lsls	r5, r2, #10
 80036b4:	d436      	bmi.n	8003724 <SDMMC_CmdWriteMultiBlock+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80036b6:	02d4      	lsls	r4, r2, #11
 80036b8:	d437      	bmi.n	800372a <SDMMC_CmdWriteMultiBlock+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80036ba:	0350      	lsls	r0, r2, #13
 80036bc:	d438      	bmi.n	8003730 <SDMMC_CmdWriteMultiBlock+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80036be:	0391      	lsls	r1, r2, #14
 80036c0:	d439      	bmi.n	8003736 <SDMMC_CmdWriteMultiBlock+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80036c2:	03d5      	lsls	r5, r2, #15
 80036c4:	d43a      	bmi.n	800373c <SDMMC_CmdWriteMultiBlock+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80036c6:	0414      	lsls	r4, r2, #16
 80036c8:	d43b      	bmi.n	8003742 <SDMMC_CmdWriteMultiBlock+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80036ca:	0450      	lsls	r0, r2, #17
 80036cc:	d43f      	bmi.n	800374e <SDMMC_CmdWriteMultiBlock+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80036ce:	0491      	lsls	r1, r2, #18
 80036d0:	d43a      	bmi.n	8003748 <SDMMC_CmdWriteMultiBlock+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80036d2:	f012 0f08 	tst.w	r2, #8
 80036d6:	bf14      	ite	ne
 80036d8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80036dc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80036e0:	e7c0      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80036e2:	2201      	movs	r2, #1
 80036e4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80036e6:	e7bd      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e7bb      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80036ec:	2304      	movs	r3, #4
 80036ee:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80036f0:	e7b8      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80036f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f6:	e7b5      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80036f8:	2340      	movs	r3, #64	; 0x40
 80036fa:	e7b3      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	e7b1      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003704:	e7ae      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800370a:	e7ab      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800370c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003710:	e7a8      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003716:	e7a5      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800371c:	e7a2      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800371e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003722:	e79f      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003728:	e79c      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	e799      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003734:	e796      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003736:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800373a:	e793      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800373c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003740:	e790      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003742:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003746:	e78d      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003748:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800374c:	e78a      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800374e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003752:	e787      	b.n	8003664 <SDMMC_CmdWriteMultiBlock+0x40>
 8003754:	20000000 	.word	0x20000000
 8003758:	10624dd3 	.word	0x10624dd3
 800375c:	fffff000 	.word	0xfffff000
 8003760:	fdffe008 	.word	0xfdffe008

08003764 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <SDMMC_CmdStopTransfer+0x130>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003766:	f240 414c 	movw	r1, #1100	; 0x44c
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800376a:	4a4b      	ldr	r2, [pc, #300]	; (8003898 <SDMMC_CmdStopTransfer+0x134>)
 800376c:	681b      	ldr	r3, [r3, #0]
{
 800376e:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8003770:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003776:	4c49      	ldr	r4, [pc, #292]	; (800389c <SDMMC_CmdStopTransfer+0x138>)
  SDMMCx->ARG = Command->Argument;
 8003778:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800377a:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800377c:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800377e:	4a48      	ldr	r2, [pc, #288]	; (80038a0 <SDMMC_CmdStopTransfer+0x13c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003780:	402c      	ands	r4, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003782:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003786:	4321      	orrs	r1, r4
 8003788:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800378a:	b14b      	cbz	r3, 80037a0 <SDMMC_CmdStopTransfer+0x3c>
 800378c:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 800378e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003790:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003792:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003796:	d001      	beq.n	800379c <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003798:	0519      	lsls	r1, r3, #20
 800379a:	d506      	bpl.n	80037aa <SDMMC_CmdStopTransfer+0x46>
    if (count-- == 0U)
 800379c:	1c54      	adds	r4, r2, #1
 800379e:	d1f6      	bne.n	800378e <SDMMC_CmdStopTransfer+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80037a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bc30      	pop	{r4, r5}
 80037a8:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80037aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037ac:	075b      	lsls	r3, r3, #29
 80037ae:	d43d      	bmi.n	800382c <SDMMC_CmdStopTransfer+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80037b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037b2:	f013 0301 	ands.w	r3, r3, #1
 80037b6:	d134      	bne.n	8003822 <SDMMC_CmdStopTransfer+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80037b8:	23c5      	movs	r3, #197	; 0xc5
 80037ba:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80037bc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d131      	bne.n	8003828 <SDMMC_CmdStopTransfer+0xc4>
  return (*(__IO uint32_t *) tmp);
 80037c4:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80037c6:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <SDMMC_CmdStopTransfer+0x140>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ea      	beq.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	db2f      	blt.n	8003832 <SDMMC_CmdStopTransfer+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80037d2:	0055      	lsls	r5, r2, #1
 80037d4:	d430      	bmi.n	8003838 <SDMMC_CmdStopTransfer+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80037d6:	0094      	lsls	r4, r2, #2
 80037d8:	d430      	bmi.n	800383c <SDMMC_CmdStopTransfer+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80037da:	00d0      	lsls	r0, r2, #3
 80037dc:	d430      	bmi.n	8003840 <SDMMC_CmdStopTransfer+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80037de:	0111      	lsls	r1, r2, #4
 80037e0:	d431      	bmi.n	8003846 <SDMMC_CmdStopTransfer+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80037e2:	0155      	lsls	r5, r2, #5
 80037e4:	d432      	bmi.n	800384c <SDMMC_CmdStopTransfer+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80037e6:	01d4      	lsls	r4, r2, #7
 80037e8:	d433      	bmi.n	8003852 <SDMMC_CmdStopTransfer+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80037ea:	0210      	lsls	r0, r2, #8
 80037ec:	d434      	bmi.n	8003858 <SDMMC_CmdStopTransfer+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80037ee:	0251      	lsls	r1, r2, #9
 80037f0:	d435      	bmi.n	800385e <SDMMC_CmdStopTransfer+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80037f2:	0295      	lsls	r5, r2, #10
 80037f4:	d436      	bmi.n	8003864 <SDMMC_CmdStopTransfer+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80037f6:	02d4      	lsls	r4, r2, #11
 80037f8:	d437      	bmi.n	800386a <SDMMC_CmdStopTransfer+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80037fa:	0350      	lsls	r0, r2, #13
 80037fc:	d438      	bmi.n	8003870 <SDMMC_CmdStopTransfer+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80037fe:	0391      	lsls	r1, r2, #14
 8003800:	d439      	bmi.n	8003876 <SDMMC_CmdStopTransfer+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003802:	03d5      	lsls	r5, r2, #15
 8003804:	d43a      	bmi.n	800387c <SDMMC_CmdStopTransfer+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003806:	0414      	lsls	r4, r2, #16
 8003808:	d43b      	bmi.n	8003882 <SDMMC_CmdStopTransfer+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800380a:	0450      	lsls	r0, r2, #17
 800380c:	d43f      	bmi.n	800388e <SDMMC_CmdStopTransfer+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800380e:	0491      	lsls	r1, r2, #18
 8003810:	d43a      	bmi.n	8003888 <SDMMC_CmdStopTransfer+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003812:	f012 0f08 	tst.w	r2, #8
 8003816:	bf14      	ite	ne
 8003818:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800381c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003820:	e7c0      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003822:	2201      	movs	r2, #1
 8003824:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003826:	e7bd      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003828:	2301      	movs	r3, #1
 800382a:	e7bb      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800382c:	2304      	movs	r3, #4
 800382e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003830:	e7b8      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003836:	e7b5      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003838:	2340      	movs	r3, #64	; 0x40
 800383a:	e7b3      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	e7b1      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003844:	e7ae      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800384a:	e7ab      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800384c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003850:	e7a8      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003856:	e7a5      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800385c:	e7a2      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800385e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003862:	e79f      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003864:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003868:	e79c      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CC_ERR;
 800386a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386e:	e799      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003874:	e796      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003876:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800387a:	e793      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800387c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003880:	e790      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003882:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003886:	e78d      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003888:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800388c:	e78a      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800388e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003892:	e787      	b.n	80037a4 <SDMMC_CmdStopTransfer+0x40>
 8003894:	20000000 	.word	0x20000000
 8003898:	10624dd3 	.word	0x10624dd3
 800389c:	fffff000 	.word	0xfffff000
 80038a0:	05f5e100 	.word	0x05f5e100
 80038a4:	fdffe008 	.word	0xfdffe008

080038a8 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038a8:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <SDMMC_CmdSelDesel+0x130>)
 80038aa:	f241 3188 	movw	r1, #5000	; 0x1388
{
 80038ae:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038b0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038b2:	f240 4447 	movw	r4, #1095	; 0x447
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038b6:	4d49      	ldr	r5, [pc, #292]	; (80039dc <SDMMC_CmdSelDesel+0x134>)
  SDMMCx->ARG = Command->Argument;
 80038b8:	6082      	str	r2, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038ba:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038be:	4a48      	ldr	r2, [pc, #288]	; (80039e0 <SDMMC_CmdSelDesel+0x138>)
 80038c0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038c2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038c4:	402a      	ands	r2, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038ca:	4314      	orrs	r4, r2
 80038cc:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80038ce:	b14b      	cbz	r3, 80038e4 <SDMMC_CmdSelDesel+0x3c>
 80038d0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80038d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80038d4:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80038d6:	f013 0f45 	tst.w	r3, #69	; 0x45
 80038da:	d001      	beq.n	80038e0 <SDMMC_CmdSelDesel+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80038dc:	0519      	lsls	r1, r3, #20
 80038de:	d506      	bpl.n	80038ee <SDMMC_CmdSelDesel+0x46>
    if (count-- == 0U)
 80038e0:	1c54      	adds	r4, r2, #1
 80038e2:	d1f6      	bne.n	80038d2 <SDMMC_CmdSelDesel+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80038e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bc30      	pop	{r4, r5}
 80038ec:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80038ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038f0:	075b      	lsls	r3, r3, #29
 80038f2:	d43d      	bmi.n	8003970 <SDMMC_CmdSelDesel+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80038f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80038f6:	f013 0301 	ands.w	r3, r3, #1
 80038fa:	d134      	bne.n	8003966 <SDMMC_CmdSelDesel+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80038fc:	23c5      	movs	r3, #197	; 0xc5
 80038fe:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003900:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b07      	cmp	r3, #7
 8003906:	d131      	bne.n	800396c <SDMMC_CmdSelDesel+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003908:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800390a:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <SDMMC_CmdSelDesel+0x13c>)
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ea      	beq.n	80038e8 <SDMMC_CmdSelDesel+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003912:	2a00      	cmp	r2, #0
 8003914:	db2f      	blt.n	8003976 <SDMMC_CmdSelDesel+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003916:	0055      	lsls	r5, r2, #1
 8003918:	d430      	bmi.n	800397c <SDMMC_CmdSelDesel+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800391a:	0094      	lsls	r4, r2, #2
 800391c:	d430      	bmi.n	8003980 <SDMMC_CmdSelDesel+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800391e:	00d0      	lsls	r0, r2, #3
 8003920:	d430      	bmi.n	8003984 <SDMMC_CmdSelDesel+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003922:	0111      	lsls	r1, r2, #4
 8003924:	d431      	bmi.n	800398a <SDMMC_CmdSelDesel+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003926:	0155      	lsls	r5, r2, #5
 8003928:	d432      	bmi.n	8003990 <SDMMC_CmdSelDesel+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800392a:	01d4      	lsls	r4, r2, #7
 800392c:	d433      	bmi.n	8003996 <SDMMC_CmdSelDesel+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800392e:	0210      	lsls	r0, r2, #8
 8003930:	d434      	bmi.n	800399c <SDMMC_CmdSelDesel+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003932:	0251      	lsls	r1, r2, #9
 8003934:	d435      	bmi.n	80039a2 <SDMMC_CmdSelDesel+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003936:	0295      	lsls	r5, r2, #10
 8003938:	d436      	bmi.n	80039a8 <SDMMC_CmdSelDesel+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800393a:	02d4      	lsls	r4, r2, #11
 800393c:	d437      	bmi.n	80039ae <SDMMC_CmdSelDesel+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800393e:	0350      	lsls	r0, r2, #13
 8003940:	d438      	bmi.n	80039b4 <SDMMC_CmdSelDesel+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003942:	0391      	lsls	r1, r2, #14
 8003944:	d439      	bmi.n	80039ba <SDMMC_CmdSelDesel+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003946:	03d5      	lsls	r5, r2, #15
 8003948:	d43a      	bmi.n	80039c0 <SDMMC_CmdSelDesel+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800394a:	0414      	lsls	r4, r2, #16
 800394c:	d43b      	bmi.n	80039c6 <SDMMC_CmdSelDesel+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800394e:	0450      	lsls	r0, r2, #17
 8003950:	d43f      	bmi.n	80039d2 <SDMMC_CmdSelDesel+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003952:	0491      	lsls	r1, r2, #18
 8003954:	d43a      	bmi.n	80039cc <SDMMC_CmdSelDesel+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003956:	f012 0f08 	tst.w	r2, #8
 800395a:	bf14      	ite	ne
 800395c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003960:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003964:	e7c0      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003966:	2201      	movs	r2, #1
 8003968:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800396a:	e7bd      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800396c:	2301      	movs	r3, #1
 800396e:	e7bb      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003970:	2304      	movs	r3, #4
 8003972:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003974:	e7b8      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	e7b5      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800397c:	2340      	movs	r3, #64	; 0x40
 800397e:	e7b3      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	e7b1      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003988:	e7ae      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800398a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398e:	e7ab      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003994:	e7a8      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800399a:	e7a5      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800399c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a0:	e7a2      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80039a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039a6:	e79f      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80039a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039ac:	e79c      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	e799      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80039b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b8:	e796      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80039ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039be:	e793      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80039c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039c4:	e790      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80039c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80039ca:	e78d      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80039cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039d0:	e78a      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80039d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039d6:	e787      	b.n	80038e8 <SDMMC_CmdSelDesel+0x40>
 80039d8:	20000000 	.word	0x20000000
 80039dc:	10624dd3 	.word	0x10624dd3
 80039e0:	fffff000 	.word	0xfffff000
 80039e4:	fdffe008 	.word	0xfdffe008

080039e8 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <SDMMC_CmdGoIdleState+0x48>)
{
 80039ea:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80039ec:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80039f4:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039f6:	4c10      	ldr	r4, [pc, #64]	; (8003a38 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 80039f8:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039fa:	fba4 4000 	umull	r4, r0, r4, r0
  SDMMCx->ARG = Command->Argument;
 80039fe:	608d      	str	r5, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a00:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a02:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a04:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a06:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a0e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a10:	e002      	b.n	8003a18 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8003a12:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8003a14:	0612      	lsls	r2, r2, #24
 8003a16:	d405      	bmi.n	8003a24 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	d2fa      	bcs.n	8003a12 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003a1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003a20:	bc30      	pop	{r4, r5}
 8003a22:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003a24:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8003a26:	2000      	movs	r0, #0
}
 8003a28:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003a2a:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000000 	.word	0x20000000
 8003a34:	fffff000 	.word	0xfffff000
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <SDMMC_CmdOperCond+0x70>)
{
 8003a3e:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a40:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a44:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a46:	4a1a      	ldr	r2, [pc, #104]	; (8003ab0 <SDMMC_CmdOperCond+0x74>)
{
 8003a48:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a4a:	4c1a      	ldr	r4, [pc, #104]	; (8003ab4 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 8003a4c:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a50:	fba4 4101 	umull	r4, r1, r4, r1
  SDMMCx->ARG = Command->Argument;
 8003a54:	609d      	str	r5, [r3, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a56:	68dc      	ldr	r4, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a58:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a5a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a5c:	fb00 f101 	mul.w	r1, r0, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003a60:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8003a64:	60da      	str	r2, [r3, #12]
  
  do
  {
    if (count-- == 0U)
 8003a66:	b149      	cbz	r1, 8003a7c <SDMMC_CmdOperCond+0x40>
 8003a68:	1e48      	subs	r0, r1, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8003a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8003a6c:	3801      	subs	r0, #1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003a6e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003a72:	d001      	beq.n	8003a78 <SDMMC_CmdOperCond+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003a74:	0514      	lsls	r4, r2, #20
 8003a76:	d505      	bpl.n	8003a84 <SDMMC_CmdOperCond+0x48>
    if (count-- == 0U)
 8003a78:	1c45      	adds	r5, r0, #1
 8003a7a:	d1f6      	bne.n	8003a6a <SDMMC_CmdOperCond+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003a7c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003a80:	bc30      	pop	{r4, r5}
 8003a82:	4770      	bx	lr
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	0751      	lsls	r1, r2, #29
 8003a88:	d40c      	bmi.n	8003aa4 <SDMMC_CmdOperCond+0x68>
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003a8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a8c:	f010 0001 	ands.w	r0, r0, #1
 8003a90:	d105      	bne.n	8003a9e <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8003a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a94:	0652      	lsls	r2, r2, #25
 8003a96:	d5f3      	bpl.n	8003a80 <SDMMC_CmdOperCond+0x44>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8003a98:	2240      	movs	r2, #64	; 0x40
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a9c:	e7f0      	b.n	8003a80 <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003aa2:	e7ed      	b.n	8003a80 <SDMMC_CmdOperCond+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003aa4:	2004      	movs	r0, #4
 8003aa6:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003aa8:	e7ea      	b.n	8003a80 <SDMMC_CmdOperCond+0x44>
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	fffff000 	.word	0xfffff000
 8003ab4:	10624dd3 	.word	0x10624dd3

08003ab8 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <SDMMC_CmdAppCommand+0x130>)
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003abe:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ac0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ac2:	f240 4477 	movw	r4, #1143	; 0x477
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ac6:	4d49      	ldr	r5, [pc, #292]	; (8003bec <SDMMC_CmdAppCommand+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003ac8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003aca:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ace:	4948      	ldr	r1, [pc, #288]	; (8003bf0 <SDMMC_CmdAppCommand+0x138>)
 8003ad0:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ad2:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ad4:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ada:	430c      	orrs	r4, r1
 8003adc:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003ade:	b14b      	cbz	r3, 8003af4 <SDMMC_CmdAppCommand+0x3c>
 8003ae0:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003ae2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003ae4:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003ae6:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003aea:	d001      	beq.n	8003af0 <SDMMC_CmdAppCommand+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003aec:	0519      	lsls	r1, r3, #20
 8003aee:	d506      	bpl.n	8003afe <SDMMC_CmdAppCommand+0x46>
    if (count-- == 0U)
 8003af0:	1c54      	adds	r4, r2, #1
 8003af2:	d1f6      	bne.n	8003ae2 <SDMMC_CmdAppCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003af4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bc30      	pop	{r4, r5}
 8003afc:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003afe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b00:	075b      	lsls	r3, r3, #29
 8003b02:	d43d      	bmi.n	8003b80 <SDMMC_CmdAppCommand+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003b04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b06:	f013 0301 	ands.w	r3, r3, #1
 8003b0a:	d134      	bne.n	8003b76 <SDMMC_CmdAppCommand+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003b0c:	23c5      	movs	r3, #197	; 0xc5
 8003b0e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003b10:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b37      	cmp	r3, #55	; 0x37
 8003b16:	d131      	bne.n	8003b7c <SDMMC_CmdAppCommand+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003b18:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <SDMMC_CmdAppCommand+0x13c>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ea      	beq.n	8003af8 <SDMMC_CmdAppCommand+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	db2f      	blt.n	8003b86 <SDMMC_CmdAppCommand+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003b26:	0055      	lsls	r5, r2, #1
 8003b28:	d430      	bmi.n	8003b8c <SDMMC_CmdAppCommand+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003b2a:	0094      	lsls	r4, r2, #2
 8003b2c:	d430      	bmi.n	8003b90 <SDMMC_CmdAppCommand+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003b2e:	00d0      	lsls	r0, r2, #3
 8003b30:	d430      	bmi.n	8003b94 <SDMMC_CmdAppCommand+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003b32:	0111      	lsls	r1, r2, #4
 8003b34:	d431      	bmi.n	8003b9a <SDMMC_CmdAppCommand+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003b36:	0155      	lsls	r5, r2, #5
 8003b38:	d432      	bmi.n	8003ba0 <SDMMC_CmdAppCommand+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003b3a:	01d4      	lsls	r4, r2, #7
 8003b3c:	d433      	bmi.n	8003ba6 <SDMMC_CmdAppCommand+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003b3e:	0210      	lsls	r0, r2, #8
 8003b40:	d434      	bmi.n	8003bac <SDMMC_CmdAppCommand+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003b42:	0251      	lsls	r1, r2, #9
 8003b44:	d435      	bmi.n	8003bb2 <SDMMC_CmdAppCommand+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003b46:	0295      	lsls	r5, r2, #10
 8003b48:	d436      	bmi.n	8003bb8 <SDMMC_CmdAppCommand+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003b4a:	02d4      	lsls	r4, r2, #11
 8003b4c:	d437      	bmi.n	8003bbe <SDMMC_CmdAppCommand+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003b4e:	0350      	lsls	r0, r2, #13
 8003b50:	d438      	bmi.n	8003bc4 <SDMMC_CmdAppCommand+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003b52:	0391      	lsls	r1, r2, #14
 8003b54:	d439      	bmi.n	8003bca <SDMMC_CmdAppCommand+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003b56:	03d5      	lsls	r5, r2, #15
 8003b58:	d43a      	bmi.n	8003bd0 <SDMMC_CmdAppCommand+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003b5a:	0414      	lsls	r4, r2, #16
 8003b5c:	d43b      	bmi.n	8003bd6 <SDMMC_CmdAppCommand+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003b5e:	0450      	lsls	r0, r2, #17
 8003b60:	d43f      	bmi.n	8003be2 <SDMMC_CmdAppCommand+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003b62:	0491      	lsls	r1, r2, #18
 8003b64:	d43a      	bmi.n	8003bdc <SDMMC_CmdAppCommand+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b66:	f012 0f08 	tst.w	r2, #8
 8003b6a:	bf14      	ite	ne
 8003b6c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003b70:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003b74:	e7c0      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003b76:	2201      	movs	r2, #1
 8003b78:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b7a:	e7bd      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e7bb      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003b80:	2304      	movs	r3, #4
 8003b82:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b84:	e7b8      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b8a:	e7b5      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	e7b3      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	e7b1      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b98:	e7ae      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b9e:	e7ab      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba4:	e7a8      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003baa:	e7a5      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb0:	e7a2      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb6:	e79f      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bbc:	e79c      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc2:	e799      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc8:	e796      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003bca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bce:	e793      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003bd4:	e790      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003bd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bda:	e78d      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003bdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003be0:	e78a      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003be2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003be6:	e787      	b.n	8003af8 <SDMMC_CmdAppCommand+0x40>
 8003be8:	20000000 	.word	0x20000000
 8003bec:	10624dd3 	.word	0x10624dd3
 8003bf0:	fffff000 	.word	0xfffff000
 8003bf4:	fdffe008 	.word	0xfdffe008

08003bf8 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003bf8:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <SDMMC_CmdAppOperCommand+0x64>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <SDMMC_CmdAppOperCommand+0x68>)
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003bfc:	430a      	orrs	r2, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003bfe:	4919      	ldr	r1, [pc, #100]	; (8003c64 <SDMMC_CmdAppOperCommand+0x6c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c00:	681b      	ldr	r3, [r3, #0]
{
 8003c02:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c04:	4d18      	ldr	r5, [pc, #96]	; (8003c68 <SDMMC_CmdAppOperCommand+0x70>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c06:	f240 4469 	movw	r4, #1129	; 0x469
  SDMMCx->ARG = Command->Argument;
 8003c0a:	6082      	str	r2, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c0c:	fba5 2303 	umull	r2, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c10:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c18:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c1e:	430c      	orrs	r4, r1
 8003c20:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003c22:	b14b      	cbz	r3, 8003c38 <SDMMC_CmdAppOperCommand+0x40>
 8003c24:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003c26:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003c28:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003c2a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003c2e:	d001      	beq.n	8003c34 <SDMMC_CmdAppOperCommand+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003c30:	051b      	lsls	r3, r3, #20
 8003c32:	d506      	bpl.n	8003c42 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 8003c34:	1c51      	adds	r1, r2, #1
 8003c36:	d1f6      	bne.n	8003c26 <SDMMC_CmdAppOperCommand+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bc30      	pop	{r4, r5}
 8003c40:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003c42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c44:	f013 0304 	ands.w	r3, r3, #4
 8003c48:	d104      	bne.n	8003c54 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003c4a:	22c5      	movs	r2, #197	; 0xc5
}
 8003c4c:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003c4e:	6382      	str	r2, [r0, #56]	; 0x38
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003c54:	2304      	movs	r3, #4
 8003c56:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c58:	e7f0      	b.n	8003c3c <SDMMC_CmdAppOperCommand+0x44>
 8003c5a:	bf00      	nop
 8003c5c:	80100000 	.word	0x80100000
 8003c60:	20000000 	.word	0x20000000
 8003c64:	fffff000 	.word	0xfffff000
 8003c68:	10624dd3 	.word	0x10624dd3

08003c6c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c6c:	4b4b      	ldr	r3, [pc, #300]	; (8003d9c <SDMMC_CmdBusWidth+0x130>)
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8003c72:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c74:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c76:	f240 4446 	movw	r4, #1094	; 0x446
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c7a:	4d49      	ldr	r5, [pc, #292]	; (8003da0 <SDMMC_CmdBusWidth+0x134>)
  SDMMCx->ARG = Command->Argument;
 8003c7c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c7e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c82:	4948      	ldr	r1, [pc, #288]	; (8003da4 <SDMMC_CmdBusWidth+0x138>)
 8003c84:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c86:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c88:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003c8e:	430c      	orrs	r4, r1
 8003c90:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003c92:	b14b      	cbz	r3, 8003ca8 <SDMMC_CmdBusWidth+0x3c>
 8003c94:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003c96:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003c98:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003c9a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003c9e:	d001      	beq.n	8003ca4 <SDMMC_CmdBusWidth+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003ca0:	0519      	lsls	r1, r3, #20
 8003ca2:	d506      	bpl.n	8003cb2 <SDMMC_CmdBusWidth+0x46>
    if (count-- == 0U)
 8003ca4:	1c54      	adds	r4, r2, #1
 8003ca6:	d1f6      	bne.n	8003c96 <SDMMC_CmdBusWidth+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8003ca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bc30      	pop	{r4, r5}
 8003cb0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003cb2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cb4:	075b      	lsls	r3, r3, #29
 8003cb6:	d43d      	bmi.n	8003d34 <SDMMC_CmdBusWidth+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003cb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cba:	f013 0301 	ands.w	r3, r3, #1
 8003cbe:	d134      	bne.n	8003d2a <SDMMC_CmdBusWidth+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003cc0:	23c5      	movs	r3, #197	; 0xc5
 8003cc2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003cc4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b06      	cmp	r3, #6
 8003cca:	d131      	bne.n	8003d30 <SDMMC_CmdBusWidth+0xc4>
  return (*(__IO uint32_t *) tmp);
 8003ccc:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <SDMMC_CmdBusWidth+0x13c>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ea      	beq.n	8003cac <SDMMC_CmdBusWidth+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	db2f      	blt.n	8003d3a <SDMMC_CmdBusWidth+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003cda:	0055      	lsls	r5, r2, #1
 8003cdc:	d430      	bmi.n	8003d40 <SDMMC_CmdBusWidth+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003cde:	0094      	lsls	r4, r2, #2
 8003ce0:	d430      	bmi.n	8003d44 <SDMMC_CmdBusWidth+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003ce2:	00d0      	lsls	r0, r2, #3
 8003ce4:	d430      	bmi.n	8003d48 <SDMMC_CmdBusWidth+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003ce6:	0111      	lsls	r1, r2, #4
 8003ce8:	d431      	bmi.n	8003d4e <SDMMC_CmdBusWidth+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003cea:	0155      	lsls	r5, r2, #5
 8003cec:	d432      	bmi.n	8003d54 <SDMMC_CmdBusWidth+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003cee:	01d4      	lsls	r4, r2, #7
 8003cf0:	d433      	bmi.n	8003d5a <SDMMC_CmdBusWidth+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003cf2:	0210      	lsls	r0, r2, #8
 8003cf4:	d434      	bmi.n	8003d60 <SDMMC_CmdBusWidth+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003cf6:	0251      	lsls	r1, r2, #9
 8003cf8:	d435      	bmi.n	8003d66 <SDMMC_CmdBusWidth+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003cfa:	0295      	lsls	r5, r2, #10
 8003cfc:	d436      	bmi.n	8003d6c <SDMMC_CmdBusWidth+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003cfe:	02d4      	lsls	r4, r2, #11
 8003d00:	d437      	bmi.n	8003d72 <SDMMC_CmdBusWidth+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003d02:	0350      	lsls	r0, r2, #13
 8003d04:	d438      	bmi.n	8003d78 <SDMMC_CmdBusWidth+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003d06:	0391      	lsls	r1, r2, #14
 8003d08:	d439      	bmi.n	8003d7e <SDMMC_CmdBusWidth+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003d0a:	03d5      	lsls	r5, r2, #15
 8003d0c:	d43a      	bmi.n	8003d84 <SDMMC_CmdBusWidth+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003d0e:	0414      	lsls	r4, r2, #16
 8003d10:	d43b      	bmi.n	8003d8a <SDMMC_CmdBusWidth+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003d12:	0450      	lsls	r0, r2, #17
 8003d14:	d43f      	bmi.n	8003d96 <SDMMC_CmdBusWidth+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003d16:	0491      	lsls	r1, r2, #18
 8003d18:	d43a      	bmi.n	8003d90 <SDMMC_CmdBusWidth+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003d1a:	f012 0f08 	tst.w	r2, #8
 8003d1e:	bf14      	ite	ne
 8003d20:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003d24:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003d28:	e7c0      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d2e:	e7bd      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e7bb      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003d34:	2304      	movs	r3, #4
 8003d36:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d38:	e7b8      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d3e:	e7b5      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003d40:	2340      	movs	r3, #64	; 0x40
 8003d42:	e7b3      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	e7b1      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d4c:	e7ae      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d52:	e7ab      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d58:	e7a8      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003d5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d5e:	e7a5      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d64:	e7a2      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d6a:	e79f      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d70:	e79c      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	e799      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d7c:	e796      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003d7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d82:	e793      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003d88:	e790      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003d8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d8e:	e78d      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8003d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d94:	e78a      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003d96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d9a:	e787      	b.n	8003cac <SDMMC_CmdBusWidth+0x40>
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	10624dd3 	.word	0x10624dd3
 8003da4:	fffff000 	.word	0xfffff000
 8003da8:	fdffe008 	.word	0xfdffe008

08003dac <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <SDMMC_CmdSendSCR+0x134>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dae:	f240 4173 	movw	r1, #1139	; 0x473
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003db2:	4a4c      	ldr	r2, [pc, #304]	; (8003ee4 <SDMMC_CmdSendSCR+0x138>)
 8003db4:	681b      	ldr	r3, [r3, #0]
{
 8003db6:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8003db8:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dbe:	4c4a      	ldr	r4, [pc, #296]	; (8003ee8 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dc0:	f241 3288 	movw	r2, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8003dc4:	6085      	str	r5, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dc6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dc8:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003dce:	402c      	ands	r4, r5
 8003dd0:	4321      	orrs	r1, r4
 8003dd2:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8003dd4:	b14b      	cbz	r3, 8003dea <SDMMC_CmdSendSCR+0x3e>
 8003dd6:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8003dd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8003dda:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003ddc:	f013 0f45 	tst.w	r3, #69	; 0x45
 8003de0:	d001      	beq.n	8003de6 <SDMMC_CmdSendSCR+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003de2:	0519      	lsls	r1, r3, #20
 8003de4:	d506      	bpl.n	8003df4 <SDMMC_CmdSendSCR+0x48>
    if (count-- == 0U)
 8003de6:	1c54      	adds	r4, r2, #1
 8003de8:	d1f6      	bne.n	8003dd8 <SDMMC_CmdSendSCR+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8003dea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	bc30      	pop	{r4, r5}
 8003df2:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003df4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003df6:	075b      	lsls	r3, r3, #29
 8003df8:	d43d      	bmi.n	8003e76 <SDMMC_CmdSendSCR+0xca>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003dfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003dfc:	f013 0301 	ands.w	r3, r3, #1
 8003e00:	d134      	bne.n	8003e6c <SDMMC_CmdSendSCR+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003e02:	23c5      	movs	r3, #197	; 0xc5
 8003e04:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8003e06:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b33      	cmp	r3, #51	; 0x33
 8003e0c:	d131      	bne.n	8003e72 <SDMMC_CmdSendSCR+0xc6>
  return (*(__IO uint32_t *) tmp);
 8003e0e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e10:	4b36      	ldr	r3, [pc, #216]	; (8003eec <SDMMC_CmdSendSCR+0x140>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ea      	beq.n	8003dee <SDMMC_CmdSendSCR+0x42>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	db2f      	blt.n	8003e7c <SDMMC_CmdSendSCR+0xd0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e1c:	0055      	lsls	r5, r2, #1
 8003e1e:	d430      	bmi.n	8003e82 <SDMMC_CmdSendSCR+0xd6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003e20:	0094      	lsls	r4, r2, #2
 8003e22:	d430      	bmi.n	8003e86 <SDMMC_CmdSendSCR+0xda>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003e24:	00d0      	lsls	r0, r2, #3
 8003e26:	d430      	bmi.n	8003e8a <SDMMC_CmdSendSCR+0xde>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003e28:	0111      	lsls	r1, r2, #4
 8003e2a:	d431      	bmi.n	8003e90 <SDMMC_CmdSendSCR+0xe4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003e2c:	0155      	lsls	r5, r2, #5
 8003e2e:	d432      	bmi.n	8003e96 <SDMMC_CmdSendSCR+0xea>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003e30:	01d4      	lsls	r4, r2, #7
 8003e32:	d433      	bmi.n	8003e9c <SDMMC_CmdSendSCR+0xf0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003e34:	0210      	lsls	r0, r2, #8
 8003e36:	d434      	bmi.n	8003ea2 <SDMMC_CmdSendSCR+0xf6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003e38:	0251      	lsls	r1, r2, #9
 8003e3a:	d435      	bmi.n	8003ea8 <SDMMC_CmdSendSCR+0xfc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003e3c:	0295      	lsls	r5, r2, #10
 8003e3e:	d436      	bmi.n	8003eae <SDMMC_CmdSendSCR+0x102>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003e40:	02d4      	lsls	r4, r2, #11
 8003e42:	d437      	bmi.n	8003eb4 <SDMMC_CmdSendSCR+0x108>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003e44:	0350      	lsls	r0, r2, #13
 8003e46:	d438      	bmi.n	8003eba <SDMMC_CmdSendSCR+0x10e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003e48:	0391      	lsls	r1, r2, #14
 8003e4a:	d439      	bmi.n	8003ec0 <SDMMC_CmdSendSCR+0x114>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003e4c:	03d5      	lsls	r5, r2, #15
 8003e4e:	d43a      	bmi.n	8003ec6 <SDMMC_CmdSendSCR+0x11a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003e50:	0414      	lsls	r4, r2, #16
 8003e52:	d43b      	bmi.n	8003ecc <SDMMC_CmdSendSCR+0x120>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003e54:	0450      	lsls	r0, r2, #17
 8003e56:	d43f      	bmi.n	8003ed8 <SDMMC_CmdSendSCR+0x12c>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003e58:	0491      	lsls	r1, r2, #18
 8003e5a:	d43a      	bmi.n	8003ed2 <SDMMC_CmdSendSCR+0x126>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003e5c:	f012 0f08 	tst.w	r2, #8
 8003e60:	bf14      	ite	ne
 8003e62:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8003e66:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8003e6a:	e7c0      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e70:	e7bd      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e7bb      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003e76:	2304      	movs	r3, #4
 8003e78:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e7a:	e7b8      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e80:	e7b5      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	e7b3      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	e7b1      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e8e:	e7ae      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e94:	e7ab      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9a:	e7a8      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ea0:	e7a5      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea6:	e7a2      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eac:	e79f      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003eae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003eb2:	e79c      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8003eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb8:	e799      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ebe:	e796      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ec4:	e793      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003ec6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003eca:	e790      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003ecc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ed0:	e78d      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8003ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ed6:	e78a      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003ed8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003edc:	e787      	b.n	8003dee <SDMMC_CmdSendSCR+0x42>
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	10624dd3 	.word	0x10624dd3
 8003ee8:	fffff000 	.word	0xfffff000
 8003eec:	fdffe008 	.word	0xfdffe008

08003ef0 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <SDMMC_CmdSendCID+0x68>)
{
 8003ef2:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ef4:	4919      	ldr	r1, [pc, #100]	; (8003f5c <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ef6:	f240 40c2 	movw	r0, #1218	; 0x4c2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003efa:	6812      	ldr	r2, [r2, #0]
{
 8003efc:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8003efe:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f00:	fba1 1202 	umull	r1, r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f04:	4c16      	ldr	r4, [pc, #88]	; (8003f60 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f06:	f241 3188 	movw	r1, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8003f0a:	609d      	str	r5, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f0c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f0e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f10:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f14:	402c      	ands	r4, r5
 8003f16:	4320      	orrs	r0, r4
 8003f18:	60d8      	str	r0, [r3, #12]
    if (count-- == 0U)
 8003f1a:	b14a      	cbz	r2, 8003f30 <SDMMC_CmdSendCID+0x40>
 8003f1c:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8003f20:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f22:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003f26:	d001      	beq.n	8003f2c <SDMMC_CmdSendCID+0x3c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f28:	0510      	lsls	r0, r2, #20
 8003f2a:	d505      	bpl.n	8003f38 <SDMMC_CmdSendCID+0x48>
    if (count-- == 0U)
 8003f2c:	1c4c      	adds	r4, r1, #1
 8003f2e:	d1f6      	bne.n	8003f1e <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8003f30:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003f34:	bc30      	pop	{r4, r5}
 8003f36:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	0752      	lsls	r2, r2, #29
 8003f3c:	d408      	bmi.n	8003f50 <SDMMC_CmdSendCID+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003f3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f40:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003f44:	bf14      	ite	ne
 8003f46:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f48:	22c5      	moveq	r2, #197	; 0xc5
}
 8003f4a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f4e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003f50:	2004      	movs	r0, #4
 8003f52:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f54:	e7ee      	b.n	8003f34 <SDMMC_CmdSendCID+0x44>
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	10624dd3 	.word	0x10624dd3
 8003f60:	fffff000 	.word	0xfffff000

08003f64 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <SDMMC_CmdSendCSD+0x64>)
{
 8003f66:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f68:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f6c:	6812      	ldr	r2, [r2, #0]
{
 8003f6e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f70:	4d16      	ldr	r5, [pc, #88]	; (8003fcc <SDMMC_CmdSendCSD+0x68>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f72:	f240 44c9 	movw	r4, #1225	; 0x4c9
  SDMMCx->ARG = Command->Argument;
 8003f76:	6099      	str	r1, [r3, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f78:	fba5 5202 	umull	r5, r2, r5, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f7c:	4914      	ldr	r1, [pc, #80]	; (8003fd0 <SDMMC_CmdSendCSD+0x6c>)
 8003f7e:	68dd      	ldr	r5, [r3, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f80:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f82:	4029      	ands	r1, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f84:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f88:	430c      	orrs	r4, r1
 8003f8a:	60dc      	str	r4, [r3, #12]
    if (count-- == 0U)
 8003f8c:	b14a      	cbz	r2, 8003fa2 <SDMMC_CmdSendCSD+0x3e>
 8003f8e:	1e51      	subs	r1, r2, #1
    sta_reg = SDMMCx->STA;
 8003f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (count-- == 0U)
 8003f92:	3901      	subs	r1, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8003f94:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003f98:	d001      	beq.n	8003f9e <SDMMC_CmdSendCSD+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8003f9a:	0510      	lsls	r0, r2, #20
 8003f9c:	d505      	bpl.n	8003faa <SDMMC_CmdSendCSD+0x46>
    if (count-- == 0U)
 8003f9e:	1c4c      	adds	r4, r1, #1
 8003fa0:	d1f6      	bne.n	8003f90 <SDMMC_CmdSendCSD+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8003fa2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003fa6:	bc30      	pop	{r4, r5}
 8003fa8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8003faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fac:	0752      	lsls	r2, r2, #29
 8003fae:	d408      	bmi.n	8003fc2 <SDMMC_CmdSendCSD+0x5e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8003fb0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003fb2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8003fb6:	bf14      	ite	ne
 8003fb8:	2201      	movne	r2, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003fba:	22c5      	moveq	r2, #197	; 0xc5
}
 8003fbc:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003fc0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8003fc2:	2004      	movs	r0, #4
 8003fc4:	6398      	str	r0, [r3, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fc6:	e7ee      	b.n	8003fa6 <SDMMC_CmdSendCSD+0x42>
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	10624dd3 	.word	0x10624dd3
 8003fd0:	fffff000 	.word	0xfffff000

08003fd4 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fd4:	4b26      	ldr	r3, [pc, #152]	; (8004070 <SDMMC_CmdSetRelAdd+0x9c>)
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <SDMMC_CmdSetRelAdd+0xa0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
{
 8003fda:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8003fdc:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003fe2:	4d25      	ldr	r5, [pc, #148]	; (8004078 <SDMMC_CmdSetRelAdd+0xa4>)
  SDMMCx->ARG = Command->Argument;
 8003fe4:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fe6:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003fe8:	68c2      	ldr	r2, [r0, #12]
 8003fea:	f240 4443 	movw	r4, #1091	; 0x443
 8003fee:	4015      	ands	r5, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ff4:	432c      	orrs	r4, r5
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003ffa:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8003ffc:	b14b      	cbz	r3, 8004012 <SDMMC_CmdSetRelAdd+0x3e>
 8003ffe:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 8004000:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004002:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004004:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004008:	d001      	beq.n	800400e <SDMMC_CmdSetRelAdd+0x3a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800400a:	051d      	lsls	r5, r3, #20
 800400c:	d506      	bpl.n	800401c <SDMMC_CmdSetRelAdd+0x48>
    if (count-- == 0U)
 800400e:	1c53      	adds	r3, r2, #1
 8004010:	d1f6      	bne.n	8004000 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8004016:	4618      	mov	r0, r3
 8004018:	bc30      	pop	{r4, r5}
 800401a:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800401c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800401e:	075c      	lsls	r4, r3, #29
 8004020:	d41c      	bmi.n	800405c <SDMMC_CmdSetRelAdd+0x88>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004022:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004024:	f013 0301 	ands.w	r3, r3, #1
 8004028:	d113      	bne.n	8004052 <SDMMC_CmdSetRelAdd+0x7e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800402a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b03      	cmp	r3, #3
 8004030:	d112      	bne.n	8004058 <SDMMC_CmdSetRelAdd+0x84>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004032:	23c5      	movs	r3, #197	; 0xc5
 8004034:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8004036:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004038:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800403c:	d014      	beq.n	8004068 <SDMMC_CmdSetRelAdd+0x94>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800403e:	0451      	lsls	r1, r2, #17
 8004040:	d40f      	bmi.n	8004062 <SDMMC_CmdSetRelAdd+0x8e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004042:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004046:	bf14      	ite	ne
 8004048:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800404c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004050:	e7e1      	b.n	8004016 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004052:	2201      	movs	r2, #1
 8004054:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004056:	e7de      	b.n	8004016 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004058:	2301      	movs	r3, #1
 800405a:	e7dc      	b.n	8004016 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800405c:	2304      	movs	r3, #4
 800405e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004060:	e7d9      	b.n	8004016 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004066:	e7d6      	b.n	8004016 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004068:	0c12      	lsrs	r2, r2, #16
 800406a:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800406c:	e7d3      	b.n	8004016 <SDMMC_CmdSetRelAdd+0x42>
 800406e:	bf00      	nop
 8004070:	20000000 	.word	0x20000000
 8004074:	10624dd3 	.word	0x10624dd3
 8004078:	fffff000 	.word	0xfffff000

0800407c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <SDMMC_CmdSendStatus+0x130>)
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004082:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004084:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004086:	f240 444d 	movw	r4, #1101	; 0x44d
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800408a:	4d49      	ldr	r5, [pc, #292]	; (80041b0 <SDMMC_CmdSendStatus+0x134>)
  SDMMCx->ARG = Command->Argument;
 800408c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800408e:	fba5 5303 	umull	r5, r3, r5, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004092:	4948      	ldr	r1, [pc, #288]	; (80041b4 <SDMMC_CmdSendStatus+0x138>)
 8004094:	68c5      	ldr	r5, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004096:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004098:	4029      	ands	r1, r5
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800409a:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800409e:	430c      	orrs	r4, r1
 80040a0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80040a2:	b14b      	cbz	r3, 80040b8 <SDMMC_CmdSendStatus+0x3c>
 80040a4:	1e5a      	subs	r2, r3, #1
    sta_reg = SDMMCx->STA;
 80040a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (count-- == 0U)
 80040a8:	3a01      	subs	r2, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80040aa:	f013 0f45 	tst.w	r3, #69	; 0x45
 80040ae:	d001      	beq.n	80040b4 <SDMMC_CmdSendStatus+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80040b0:	0519      	lsls	r1, r3, #20
 80040b2:	d506      	bpl.n	80040c2 <SDMMC_CmdSendStatus+0x46>
    if (count-- == 0U)
 80040b4:	1c54      	adds	r4, r2, #1
 80040b6:	d1f6      	bne.n	80040a6 <SDMMC_CmdSendStatus+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80040b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80040bc:	4618      	mov	r0, r3
 80040be:	bc30      	pop	{r4, r5}
 80040c0:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80040c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040c4:	075b      	lsls	r3, r3, #29
 80040c6:	d43d      	bmi.n	8004144 <SDMMC_CmdSendStatus+0xc8>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80040c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80040ca:	f013 0301 	ands.w	r3, r3, #1
 80040ce:	d134      	bne.n	800413a <SDMMC_CmdSendStatus+0xbe>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80040d0:	23c5      	movs	r3, #197	; 0xc5
 80040d2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80040d4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b0d      	cmp	r3, #13
 80040da:	d131      	bne.n	8004140 <SDMMC_CmdSendStatus+0xc4>
  return (*(__IO uint32_t *) tmp);
 80040dc:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <SDMMC_CmdSendStatus+0x13c>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0ea      	beq.n	80040bc <SDMMC_CmdSendStatus+0x40>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	db2f      	blt.n	800414a <SDMMC_CmdSendStatus+0xce>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80040ea:	0055      	lsls	r5, r2, #1
 80040ec:	d430      	bmi.n	8004150 <SDMMC_CmdSendStatus+0xd4>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80040ee:	0094      	lsls	r4, r2, #2
 80040f0:	d430      	bmi.n	8004154 <SDMMC_CmdSendStatus+0xd8>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80040f2:	00d0      	lsls	r0, r2, #3
 80040f4:	d430      	bmi.n	8004158 <SDMMC_CmdSendStatus+0xdc>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80040f6:	0111      	lsls	r1, r2, #4
 80040f8:	d431      	bmi.n	800415e <SDMMC_CmdSendStatus+0xe2>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80040fa:	0155      	lsls	r5, r2, #5
 80040fc:	d432      	bmi.n	8004164 <SDMMC_CmdSendStatus+0xe8>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80040fe:	01d4      	lsls	r4, r2, #7
 8004100:	d433      	bmi.n	800416a <SDMMC_CmdSendStatus+0xee>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004102:	0210      	lsls	r0, r2, #8
 8004104:	d434      	bmi.n	8004170 <SDMMC_CmdSendStatus+0xf4>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004106:	0251      	lsls	r1, r2, #9
 8004108:	d435      	bmi.n	8004176 <SDMMC_CmdSendStatus+0xfa>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800410a:	0295      	lsls	r5, r2, #10
 800410c:	d436      	bmi.n	800417c <SDMMC_CmdSendStatus+0x100>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800410e:	02d4      	lsls	r4, r2, #11
 8004110:	d437      	bmi.n	8004182 <SDMMC_CmdSendStatus+0x106>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004112:	0350      	lsls	r0, r2, #13
 8004114:	d438      	bmi.n	8004188 <SDMMC_CmdSendStatus+0x10c>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004116:	0391      	lsls	r1, r2, #14
 8004118:	d439      	bmi.n	800418e <SDMMC_CmdSendStatus+0x112>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800411a:	03d5      	lsls	r5, r2, #15
 800411c:	d43a      	bmi.n	8004194 <SDMMC_CmdSendStatus+0x118>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800411e:	0414      	lsls	r4, r2, #16
 8004120:	d43b      	bmi.n	800419a <SDMMC_CmdSendStatus+0x11e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004122:	0450      	lsls	r0, r2, #17
 8004124:	d43f      	bmi.n	80041a6 <SDMMC_CmdSendStatus+0x12a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004126:	0491      	lsls	r1, r2, #18
 8004128:	d43a      	bmi.n	80041a0 <SDMMC_CmdSendStatus+0x124>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800412a:	f012 0f08 	tst.w	r2, #8
 800412e:	bf14      	ite	ne
 8004130:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004134:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004138:	e7c0      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800413a:	2201      	movs	r2, #1
 800413c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800413e:	e7bd      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004140:	2301      	movs	r3, #1
 8004142:	e7bb      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004144:	2304      	movs	r3, #4
 8004146:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004148:	e7b8      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800414a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800414e:	e7b5      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	e7b3      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	e7b1      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800415c:	e7ae      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800415e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004162:	e7ab      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004168:	e7a8      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800416a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800416e:	e7a5      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004174:	e7a2      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417a:	e79f      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800417c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004180:	e79c      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8004182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004186:	e799      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800418c:	e796      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800418e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004192:	e793      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004194:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004198:	e790      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800419a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800419e:	e78d      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80041a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041a4:	e78a      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80041a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041aa:	e787      	b.n	80040bc <SDMMC_CmdSendStatus+0x40>
 80041ac:	20000000 	.word	0x20000000
 80041b0:	10624dd3 	.word	0x10624dd3
 80041b4:	fffff000 	.word	0xfffff000
 80041b8:	fdffe008 	.word	0xfdffe008

080041bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80041bc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80041be:	4903      	ldr	r1, [pc, #12]	; (80041cc <MX_FATFS_Init+0x10>)
 80041c0:	4803      	ldr	r0, [pc, #12]	; (80041d0 <MX_FATFS_Init+0x14>)
 80041c2:	f002 fa11 	bl	80065e8 <FATFS_LinkDriver>
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <MX_FATFS_Init+0x18>)
 80041c8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	20000394 	.word	0x20000394
 80041d0:	080067c0 	.word	0x080067c0
 80041d4:	20000390 	.word	0x20000390

080041d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80041d8:	b530      	push	{r4, r5, lr}
 80041da:	460d      	mov	r5, r1
 80041dc:	b083      	sub	sp, #12
 80041de:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80041e0:	4601      	mov	r1, r0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	462a      	mov	r2, r5
 80041e6:	4623      	mov	r3, r4
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <BSP_SD_ReadBlocks+0x20>)
 80041ea:	f7fd ff99 	bl	8002120 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80041ee:	3800      	subs	r0, #0
 80041f0:	bf18      	it	ne
 80041f2:	2001      	movne	r0, #1
 80041f4:	b003      	add	sp, #12
 80041f6:	bd30      	pop	{r4, r5, pc}
 80041f8:	200001b0 	.word	0x200001b0

080041fc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80041fc:	b530      	push	{r4, r5, lr}
 80041fe:	460d      	mov	r5, r1
 8004200:	b083      	sub	sp, #12
 8004202:	4614      	mov	r4, r2
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004204:	4601      	mov	r1, r0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	462a      	mov	r2, r5
 800420a:	4623      	mov	r3, r4
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <BSP_SD_WriteBlocks+0x20>)
 800420e:	f7fe f8c9 	bl	80023a4 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8004212:	3800      	subs	r0, #0
 8004214:	bf18      	it	ne
 8004216:	2001      	movne	r0, #1
 8004218:	b003      	add	sp, #12
 800421a:	bd30      	pop	{r4, r5, pc}
 800421c:	200001b0 	.word	0x200001b0

08004220 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004220:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004222:	4803      	ldr	r0, [pc, #12]	; (8004230 <BSP_SD_GetCardState+0x10>)
 8004224:	f7fe fc4c 	bl	8002ac0 <HAL_SD_GetCardState>
}
 8004228:	3804      	subs	r0, #4
 800422a:	bf18      	it	ne
 800422c:	2001      	movne	r0, #1
 800422e:	bd08      	pop	{r3, pc}
 8004230:	200001b0 	.word	0x200001b0

08004234 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004234:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8004236:	4801      	ldr	r0, [pc, #4]	; (800423c <BSP_SD_GetCardInfo+0x8>)
 8004238:	f7fe bb92 	b.w	8002960 <HAL_SD_GetCardInfo>
 800423c:	200001b0 	.word	0x200001b0

08004240 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004240:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8004242:	2301      	movs	r3, #1
{
 8004244:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8004246:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800424a:	f000 f821 	bl	8004290 <BSP_PlatformIsDetected>
 800424e:	b908      	cbnz	r0, 8004254 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8004250:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8004254:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004258:	b003      	add	sp, #12
 800425a:	f85d fb04 	ldr.w	pc, [sp], #4
 800425e:	bf00      	nop

08004260 <BSP_SD_Init>:
{
 8004260:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004262:	f7ff ffed 	bl	8004240 <BSP_SD_IsDetected>
 8004266:	2801      	cmp	r0, #1
 8004268:	d001      	beq.n	800426e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800426a:	2002      	movs	r0, #2
}
 800426c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800426e:	4807      	ldr	r0, [pc, #28]	; (800428c <BSP_SD_Init+0x2c>)
 8004270:	f7fe fb58 	bl	8002924 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8004274:	2800      	cmp	r0, #0
 8004276:	d1f9      	bne.n	800426c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8004278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800427c:	4803      	ldr	r0, [pc, #12]	; (800428c <BSP_SD_Init+0x2c>)
 800427e:	f7fe fb83 	bl	8002988 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8004282:	3800      	subs	r0, #0
 8004284:	bf18      	it	ne
 8004286:	2001      	movne	r0, #1
}
 8004288:	bd08      	pop	{r3, pc}
 800428a:	bf00      	nop
 800428c:	200001b0 	.word	0x200001b0

08004290 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004294:	4803      	ldr	r0, [pc, #12]	; (80042a4 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 8004296:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004298:	f7fd f8d4 	bl	8001444 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800429c:	fab0 f080 	clz	r0, r0
 80042a0:	0940      	lsrs	r0, r0, #5
 80042a2:	bd08      	pop	{r3, pc}
 80042a4:	40020800 	.word	0x40020800

080042a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80042a8:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 80042aa:	4c0a      	ldr	r4, [pc, #40]	; (80042d4 <SD_initialize+0x2c>)
 80042ac:	2501      	movs	r5, #1
 80042ae:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80042b0:	f7ff ffd6 	bl	8004260 <BSP_SD_Init>
 80042b4:	b108      	cbz	r0, 80042ba <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80042b6:	7820      	ldrb	r0, [r4, #0]
}
 80042b8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80042ba:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80042bc:	f7ff ffb0 	bl	8004220 <BSP_SD_GetCardState>
 80042c0:	b918      	cbnz	r0, 80042ca <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 80042c2:	7823      	ldrb	r3, [r4, #0]
 80042c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80042c8:	7023      	strb	r3, [r4, #0]
  return Stat;
 80042ca:	7823      	ldrb	r3, [r4, #0]
 80042cc:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 80042ce:	7023      	strb	r3, [r4, #0]
  return Stat;
 80042d0:	7820      	ldrb	r0, [r4, #0]
}
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	2000000c 	.word	0x2000000c

080042d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80042d8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80042da:	2301      	movs	r3, #1
 80042dc:	4c05      	ldr	r4, [pc, #20]	; (80042f4 <SD_status+0x1c>)
 80042de:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80042e0:	f7ff ff9e 	bl	8004220 <BSP_SD_GetCardState>
 80042e4:	b918      	cbnz	r0, 80042ee <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 80042e6:	7823      	ldrb	r3, [r4, #0]
 80042e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80042ec:	7023      	strb	r3, [r4, #0]
  return Stat;
 80042ee:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	bf00      	nop
 80042f4:	2000000c 	.word	0x2000000c

080042f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80042f8:	b508      	push	{r3, lr}
 80042fa:	4608      	mov	r0, r1
 80042fc:	4611      	mov	r1, r2
 80042fe:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004300:	f04f 33ff 	mov.w	r3, #4294967295
 8004304:	f7ff ff68 	bl	80041d8 <BSP_SD_ReadBlocks>
 8004308:	b108      	cbz	r0, 800430e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800430a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800430c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800430e:	f7ff ff87 	bl	8004220 <BSP_SD_GetCardState>
 8004312:	2800      	cmp	r0, #0
 8004314:	d0fa      	beq.n	800430c <SD_read+0x14>
 8004316:	f7ff ff83 	bl	8004220 <BSP_SD_GetCardState>
 800431a:	2800      	cmp	r0, #0
 800431c:	d1f7      	bne.n	800430e <SD_read+0x16>
 800431e:	e7f5      	b.n	800430c <SD_read+0x14>

08004320 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <SD_ioctl+0x58>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	07db      	lsls	r3, r3, #31
 8004326:	d411      	bmi.n	800434c <SD_ioctl+0x2c>
 8004328:	4608      	mov	r0, r1
{
 800432a:	b510      	push	{r4, lr}
 800432c:	4614      	mov	r4, r2
 800432e:	b088      	sub	sp, #32
 8004330:	2903      	cmp	r1, #3
 8004332:	d81e      	bhi.n	8004372 <SD_ioctl+0x52>
 8004334:	e8df f001 	tbb	[pc, r1]
 8004338:	0c150208 	.word	0x0c150208
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800433c:	4668      	mov	r0, sp
 800433e:	f7ff ff79 	bl	8004234 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004342:	9b06      	ldr	r3, [sp, #24]
    res = RES_OK;
 8004344:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004346:	6023      	str	r3, [r4, #0]
  default:
    res = RES_PARERR;
  }

  return res;
}
 8004348:	b008      	add	sp, #32
 800434a:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800434c:	2003      	movs	r0, #3
}
 800434e:	4770      	bx	lr
    BSP_SD_GetCardInfo(&CardInfo);
 8004350:	4668      	mov	r0, sp
 8004352:	f7ff ff6f 	bl	8004234 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004356:	9b07      	ldr	r3, [sp, #28]
 8004358:	2000      	movs	r0, #0
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	6023      	str	r3, [r4, #0]
}
 800435e:	b008      	add	sp, #32
 8004360:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8004362:	4668      	mov	r0, sp
 8004364:	f7ff ff66 	bl	8004234 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004368:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800436a:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 800436c:	8023      	strh	r3, [r4, #0]
}
 800436e:	b008      	add	sp, #32
 8004370:	bd10      	pop	{r4, pc}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004372:	2004      	movs	r0, #4
 8004374:	e7e8      	b.n	8004348 <SD_ioctl+0x28>
 8004376:	bf00      	nop
 8004378:	2000000c 	.word	0x2000000c

0800437c <SD_write>:
{
 800437c:	b508      	push	{r3, lr}
 800437e:	4608      	mov	r0, r1
 8004380:	4611      	mov	r1, r2
 8004382:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	f7ff ff38 	bl	80041fc <BSP_SD_WriteBlocks>
 800438c:	b108      	cbz	r0, 8004392 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800438e:	2001      	movs	r0, #1
}
 8004390:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004392:	f7ff ff45 	bl	8004220 <BSP_SD_GetCardState>
 8004396:	2800      	cmp	r0, #0
 8004398:	d0fa      	beq.n	8004390 <SD_write+0x14>
 800439a:	f7ff ff41 	bl	8004220 <BSP_SD_GetCardState>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1f7      	bne.n	8004392 <SD_write+0x16>
 80043a2:	e7f5      	b.n	8004390 <SD_write+0x14>

080043a4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <disk_status+0x10>)
 80043a6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80043aa:	4418      	add	r0, r3
 80043ac:	6853      	ldr	r3, [r2, #4]
 80043ae:	7a00      	ldrb	r0, [r0, #8]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4718      	bx	r3
 80043b4:	20000158 	.word	0x20000158

080043b8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <disk_initialize+0x24>)
 80043ba:	5c1a      	ldrb	r2, [r3, r0]
 80043bc:	b95a      	cbnz	r2, 80043d6 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043be:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80043c2:	1819      	adds	r1, r3, r0
{
 80043c4:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 80043c6:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043c8:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80043ca:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 80043cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043d0:	7a08      	ldrb	r0, [r1, #8]
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	4718      	bx	r3
}
 80043d6:	2000      	movs	r0, #0
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000158 	.word	0x20000158

080043e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80043e0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043e2:	4c05      	ldr	r4, [pc, #20]	; (80043f8 <disk_read+0x18>)
 80043e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80043e8:	4420      	add	r0, r4
 80043ea:	686c      	ldr	r4, [r5, #4]
 80043ec:	7a00      	ldrb	r0, [r0, #8]
 80043ee:	68a4      	ldr	r4, [r4, #8]
 80043f0:	46a4      	mov	ip, r4
  return res;
}
 80043f2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043f4:	4760      	bx	ip
 80043f6:	bf00      	nop
 80043f8:	20000158 	.word	0x20000158

080043fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80043fc:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043fe:	4c05      	ldr	r4, [pc, #20]	; (8004414 <disk_write+0x18>)
 8004400:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004404:	4420      	add	r0, r4
 8004406:	686c      	ldr	r4, [r5, #4]
 8004408:	7a00      	ldrb	r0, [r0, #8]
 800440a:	68e4      	ldr	r4, [r4, #12]
 800440c:	46a4      	mov	ip, r4
  return res;
}
 800440e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004410:	4760      	bx	ip
 8004412:	bf00      	nop
 8004414:	20000158 	.word	0x20000158

08004418 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <disk_ioctl+0x18>)
{
 800441a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800441c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8004420:	4418      	add	r0, r3
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	7a00      	ldrb	r0, [r0, #8]
 8004426:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8004428:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800442c:	4718      	bx	r3
 800442e:	bf00      	nop
 8004430:	20000158 	.word	0x20000158

08004434 <pick_lfn>:
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
 8004434:	7eca      	ldrb	r2, [r1, #27]
 8004436:	7e8b      	ldrb	r3, [r1, #26]
{
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004438:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800443c:	f040 8124 	bne.w	8004688 <pick_lfn+0x254>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004440:	780b      	ldrb	r3, [r1, #0]
	rv = rv << 8 | ptr[0];
 8004442:	788a      	ldrb	r2, [r1, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
{
 8004448:	b470      	push	{r4, r5, r6}
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800444a:	3b01      	subs	r3, #1
 800444c:	4604      	mov	r4, r0
	rv = rv << 8 | ptr[0];
 800444e:	7848      	ldrb	r0, [r1, #1]
 8004450:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8004454:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004458:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800445c:	2bfe      	cmp	r3, #254	; 0xfe
 800445e:	f200 8110 	bhi.w	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004462:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 8004466:	1c5a      	adds	r2, r3, #1
	rv = rv << 8 | ptr[0];
 8004468:	790e      	ldrb	r6, [r1, #4]
 800446a:	78cd      	ldrb	r5, [r1, #3]
 800446c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 8004470:	2800      	cmp	r0, #0
 8004472:	d174      	bne.n	800455e <pick_lfn+0x12a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004478:	429d      	cmp	r5, r3
 800447a:	f040 8102 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 800447e:	798b      	ldrb	r3, [r1, #6]
 8004480:	7948      	ldrb	r0, [r1, #5]
 8004482:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448a:	4298      	cmp	r0, r3
 800448c:	f040 80f9 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004490:	7a0b      	ldrb	r3, [r1, #8]
 8004492:	79cd      	ldrb	r5, [r1, #7]
 8004494:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800449c:	429d      	cmp	r5, r3
 800449e:	f040 80f0 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80044a2:	7a8b      	ldrb	r3, [r1, #10]
 80044a4:	7a48      	ldrb	r0, [r1, #9]
 80044a6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80044aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ae:	4298      	cmp	r0, r3
 80044b0:	f040 80e7 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80044b4:	7bcb      	ldrb	r3, [r1, #15]
 80044b6:	7b8d      	ldrb	r5, [r1, #14]
 80044b8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80044bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044c0:	429d      	cmp	r5, r3
 80044c2:	f040 80de 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80044c6:	7c4b      	ldrb	r3, [r1, #17]
 80044c8:	7c08      	ldrb	r0, [r1, #16]
 80044ca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80044ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d2:	4298      	cmp	r0, r3
 80044d4:	f040 80d5 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80044d8:	7ccb      	ldrb	r3, [r1, #19]
 80044da:	7c8d      	ldrb	r5, [r1, #18]
 80044dc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80044e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044e4:	429d      	cmp	r5, r3
 80044e6:	f040 80cc 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80044ea:	7d4b      	ldrb	r3, [r1, #21]
 80044ec:	7d08      	ldrb	r0, [r1, #20]
 80044ee:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80044f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044f6:	4298      	cmp	r0, r3
 80044f8:	f040 80c3 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 80044fc:	7dcb      	ldrb	r3, [r1, #23]
 80044fe:	7d8d      	ldrb	r5, [r1, #22]
 8004500:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004508:	429d      	cmp	r5, r3
 800450a:	f040 80ba 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 800450e:	7e4b      	ldrb	r3, [r1, #25]
 8004510:	7e08      	ldrb	r0, [r1, #24]
 8004512:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800451a:	4298      	cmp	r0, r3
 800451c:	f040 80b1 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004520:	7f4b      	ldrb	r3, [r1, #29]
 8004522:	7f0d      	ldrb	r5, [r1, #28]
 8004524:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800452c:	429d      	cmp	r5, r3
 800452e:	f040 80a8 	bne.w	8004682 <pick_lfn+0x24e>
	rv = rv << 8 | ptr[0];
 8004532:	7fcb      	ldrb	r3, [r1, #31]
 8004534:	7f88      	ldrb	r0, [r1, #30]
 8004536:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800453a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800453e:	4298      	cmp	r0, r3
 8004540:	f040 809f 	bne.w	8004682 <pick_lfn+0x24e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004544:	780b      	ldrb	r3, [r1, #0]
 8004546:	065b      	lsls	r3, r3, #25
 8004548:	f140 8098 	bpl.w	800467c <pick_lfn+0x248>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800454c:	2aff      	cmp	r2, #255	; 0xff
 800454e:	f000 8098 	beq.w	8004682 <pick_lfn+0x24e>
		lfnbuf[i] = 0;
 8004552:	2300      	movs	r3, #0
	}

	return 1;		/* The part of LFN is valid */
 8004554:	2001      	movs	r0, #1
		lfnbuf[i] = 0;
 8004556:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
}
 800455a:	bc70      	pop	{r4, r5, r6}
 800455c:	4770      	bx	lr
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800455e:	2aff      	cmp	r2, #255	; 0xff
 8004560:	f000 808f 	beq.w	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004564:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8004568:	1c9a      	adds	r2, r3, #2
	rv = rv << 8 | ptr[0];
 800456a:	798e      	ldrb	r6, [r1, #6]
 800456c:	7948      	ldrb	r0, [r1, #5]
 800456e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 8004572:	2d00      	cmp	r5, #0
 8004574:	d087      	beq.n	8004486 <pick_lfn+0x52>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004576:	2aff      	cmp	r2, #255	; 0xff
 8004578:	f000 8083 	beq.w	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800457c:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8004580:	1cda      	adds	r2, r3, #3
	rv = rv << 8 | ptr[0];
 8004582:	7a0e      	ldrb	r6, [r1, #8]
 8004584:	79cd      	ldrb	r5, [r1, #7]
 8004586:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 800458a:	2800      	cmp	r0, #0
 800458c:	d084      	beq.n	8004498 <pick_lfn+0x64>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800458e:	2aff      	cmp	r2, #255	; 0xff
 8004590:	d077      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004592:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8004596:	1d1a      	adds	r2, r3, #4
	rv = rv << 8 | ptr[0];
 8004598:	7a8e      	ldrb	r6, [r1, #10]
 800459a:	7a48      	ldrb	r0, [r1, #9]
 800459c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	d082      	beq.n	80044aa <pick_lfn+0x76>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80045a4:	2aff      	cmp	r2, #255	; 0xff
 80045a6:	d06c      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80045a8:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 80045ac:	1d5a      	adds	r2, r3, #5
	rv = rv << 8 | ptr[0];
 80045ae:	7bce      	ldrb	r6, [r1, #15]
 80045b0:	7b8d      	ldrb	r5, [r1, #14]
 80045b2:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d080      	beq.n	80044bc <pick_lfn+0x88>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80045ba:	2aff      	cmp	r2, #255	; 0xff
 80045bc:	d061      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80045be:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 80045c2:	1d9a      	adds	r2, r3, #6
	rv = rv << 8 | ptr[0];
 80045c4:	7c4e      	ldrb	r6, [r1, #17]
 80045c6:	7c08      	ldrb	r0, [r1, #16]
 80045c8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 80045cc:	2d00      	cmp	r5, #0
 80045ce:	f43f af7e 	beq.w	80044ce <pick_lfn+0x9a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80045d2:	2aff      	cmp	r2, #255	; 0xff
 80045d4:	d055      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80045d6:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 80045da:	1dda      	adds	r2, r3, #7
	rv = rv << 8 | ptr[0];
 80045dc:	7cce      	ldrb	r6, [r1, #19]
 80045de:	7c8d      	ldrb	r5, [r1, #18]
 80045e0:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f43f af7b 	beq.w	80044e0 <pick_lfn+0xac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80045ea:	2aff      	cmp	r2, #255	; 0xff
 80045ec:	d049      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80045ee:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 80045f2:	f103 0208 	add.w	r2, r3, #8
	rv = rv << 8 | ptr[0];
 80045f6:	7d4e      	ldrb	r6, [r1, #21]
 80045f8:	7d08      	ldrb	r0, [r1, #20]
 80045fa:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 80045fe:	2d00      	cmp	r5, #0
 8004600:	f43f af77 	beq.w	80044f2 <pick_lfn+0xbe>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004604:	2aff      	cmp	r2, #255	; 0xff
 8004606:	d03c      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004608:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 800460c:	f103 0209 	add.w	r2, r3, #9
	rv = rv << 8 | ptr[0];
 8004610:	7dce      	ldrb	r6, [r1, #23]
 8004612:	7d8d      	ldrb	r5, [r1, #22]
 8004614:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 8004618:	2800      	cmp	r0, #0
 800461a:	f43f af73 	beq.w	8004504 <pick_lfn+0xd0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800461e:	2aff      	cmp	r2, #255	; 0xff
 8004620:	d02f      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004622:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 8004626:	f103 020a 	add.w	r2, r3, #10
	rv = rv << 8 | ptr[0];
 800462a:	7e4e      	ldrb	r6, [r1, #25]
 800462c:	7e08      	ldrb	r0, [r1, #24]
 800462e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (wc) {
 8004632:	2d00      	cmp	r5, #0
 8004634:	f43f af6f 	beq.w	8004516 <pick_lfn+0xe2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004638:	2aff      	cmp	r2, #255	; 0xff
 800463a:	d022      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800463c:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
 8004640:	f103 020b 	add.w	r2, r3, #11
	rv = rv << 8 | ptr[0];
 8004644:	7f4e      	ldrb	r6, [r1, #29]
 8004646:	7f0d      	ldrb	r5, [r1, #28]
 8004648:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
		if (wc) {
 800464c:	2800      	cmp	r0, #0
 800464e:	f43f af6b 	beq.w	8004528 <pick_lfn+0xf4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004652:	2aff      	cmp	r2, #255	; 0xff
 8004654:	d015      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004656:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
 800465a:	f103 060c 	add.w	r6, r3, #12
	rv = rv << 8 | ptr[0];
 800465e:	7fca      	ldrb	r2, [r1, #31]
 8004660:	7f88      	ldrb	r0, [r1, #30]
 8004662:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
		if (wc) {
 8004666:	b18d      	cbz	r5, 800468c <pick_lfn+0x258>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004668:	2eff      	cmp	r6, #255	; 0xff
 800466a:	d00a      	beq.n	8004682 <pick_lfn+0x24e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800466c:	f103 020d 	add.w	r2, r3, #13
 8004670:	f824 0016 	strh.w	r0, [r4, r6, lsl #1]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8004674:	780b      	ldrb	r3, [r1, #0]
 8004676:	065b      	lsls	r3, r3, #25
 8004678:	f53f af68 	bmi.w	800454c <pick_lfn+0x118>
	return 1;		/* The part of LFN is valid */
 800467c:	2001      	movs	r0, #1
}
 800467e:	bc70      	pop	{r4, r5, r6}
 8004680:	4770      	bx	lr
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004682:	2000      	movs	r0, #0
}
 8004684:	bc70      	pop	{r4, r5, r6}
 8004686:	4770      	bx	lr
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8004688:	2000      	movs	r0, #0
}
 800468a:	4770      	bx	lr
			lfnbuf[i++] = wc = uc;			/* Store it */
 800468c:	4632      	mov	r2, r6
 800468e:	e754      	b.n	800453a <pick_lfn+0x106>

08004690 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8004694:	2700      	movs	r7, #0
	FATFS *fs = dp->obj.fs;
 8004696:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800469a:	768f      	strb	r7, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800469c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d06b      	beq.n	800477a <get_fileinfo+0xea>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80046a2:	f898 3000 	ldrb.w	r3, [r8]
 80046a6:	460d      	mov	r5, r1
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d07c      	beq.n	80047a6 <get_fileinfo+0x116>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80046ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80046ae:	4606      	mov	r6, r0
 80046b0:	3301      	adds	r3, #1
 80046b2:	d01e      	beq.n	80046f2 <get_fileinfo+0x62>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80046b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80046b8:	8818      	ldrh	r0, [r3, #0]
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d06d      	beq.n	800479a <get_fileinfo+0x10a>
 80046be:	f101 0719 	add.w	r7, r1, #25
 80046c2:	2401      	movs	r4, #1
 80046c4:	e000      	b.n	80046c8 <get_fileinfo+0x38>
 80046c6:	461c      	mov	r4, r3
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80046c8:	2100      	movs	r1, #0
 80046ca:	f001 ffb1 	bl	8006630 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80046ce:	1c63      	adds	r3, r4, #1
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d062      	beq.n	800479a <get_fileinfo+0x10a>
 80046d4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80046d8:	d05f      	beq.n	800479a <get_fileinfo+0x10a>
				fno->fname[i++] = (TCHAR)w;
 80046da:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80046de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80046e2:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d1ed      	bne.n	80046c6 <get_fileinfo+0x36>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80046ea:	442c      	add	r4, r5
 80046ec:	2300      	movs	r3, #0
 80046ee:	76a3      	strb	r3, [r4, #26]
 80046f0:	7eaf      	ldrb	r7, [r5, #26]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 80046f2:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
	i = j = 0;
 80046f4:	2400      	movs	r4, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 80046f6:	f04f 082e 	mov.w	r8, #46	; 0x2e
 80046fa:	1e70      	subs	r0, r6, #1
 80046fc:	f106 0c0a 	add.w	ip, r6, #10
		c = (TCHAR)dp->dir[i++];
 8004700:	4602      	mov	r2, r0
 8004702:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 8004706:	2b20      	cmp	r3, #32
 8004708:	d01c      	beq.n	8004744 <get_fileinfo+0xb4>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800470a:	3202      	adds	r2, #2
 800470c:	2b05      	cmp	r3, #5
 800470e:	eba2 0206 	sub.w	r2, r2, r6
 8004712:	bf08      	it	eq
 8004714:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8004716:	2a09      	cmp	r2, #9
 8004718:	d031      	beq.n	800477e <get_fileinfo+0xee>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800471a:	1929      	adds	r1, r5, r4
 800471c:	734b      	strb	r3, [r1, #13]
		if (!lfv) {
 800471e:	b987      	cbnz	r7, 8004742 <get_fileinfo+0xb2>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8004720:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8004724:	f1be 0f19 	cmp.w	lr, #25
 8004728:	d80a      	bhi.n	8004740 <get_fileinfo+0xb0>
 800472a:	2a09      	cmp	r2, #9
 800472c:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8004730:	bf34      	ite	cc
 8004732:	2208      	movcc	r2, #8
 8004734:	2210      	movcs	r2, #16
 8004736:	ea1e 0f02 	tst.w	lr, r2
 800473a:	d001      	beq.n	8004740 <get_fileinfo+0xb0>
				c += 0x20;			/* To lower */
 800473c:	3320      	adds	r3, #32
 800473e:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8004740:	768b      	strb	r3, [r1, #26]
		}
		j++;
 8004742:	3401      	adds	r4, #1
	while (i < 11) {		/* Copy name body and extension */
 8004744:	4560      	cmp	r0, ip
 8004746:	d1db      	bne.n	8004700 <get_fileinfo+0x70>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 8004748:	1929      	adds	r1, r5, r4
	if (!lfv) {
 800474a:	b307      	cbz	r7, 800478e <get_fileinfo+0xfe>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800474c:	2000      	movs	r0, #0
 800474e:	7348      	strb	r0, [r1, #13]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004750:	7af3      	ldrb	r3, [r6, #11]
 8004752:	732b      	strb	r3, [r5, #12]
	rv = rv << 8 | ptr[2];
 8004754:	8bf1      	ldrh	r1, [r6, #30]
	rv = rv << 8 | ptr[1];
 8004756:	7f72      	ldrb	r2, [r6, #29]
	rv = rv << 8 | ptr[0];
 8004758:	7f33      	ldrb	r3, [r6, #28]
	rv = rv << 8 | ptr[1];
 800475a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800475e:	6068      	str	r0, [r5, #4]
	rv = rv << 8 | ptr[0];
 8004760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004764:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8004766:	8b31      	ldrh	r1, [r6, #24]
	rv = rv << 8 | ptr[1];
 8004768:	7df2      	ldrb	r2, [r6, #23]
	rv = rv << 8 | ptr[0];
 800476a:	7db3      	ldrb	r3, [r6, #22]
	rv = rv << 8 | ptr[1];
 800476c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8004770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004774:	0c1a      	lsrs	r2, r3, #16
 8004776:	816b      	strh	r3, [r5, #10]
 8004778:	812a      	strh	r2, [r5, #8]
}
 800477a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!lfv) fno->fname[j] = '.';
 800477e:	1929      	adds	r1, r5, r4
 8004780:	b90f      	cbnz	r7, 8004786 <get_fileinfo+0xf6>
 8004782:	f881 801a 	strb.w	r8, [r1, #26]
			fno->altname[j++] = '.';
 8004786:	3401      	adds	r4, #1
 8004788:	f881 800d 	strb.w	r8, [r1, #13]
 800478c:	e7c5      	b.n	800471a <get_fileinfo+0x8a>
		fno->fname[j] = 0;
 800478e:	768f      	strb	r7, [r1, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8004790:	7b33      	ldrb	r3, [r6, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf08      	it	eq
 8004796:	4629      	moveq	r1, r5
 8004798:	e7d8      	b.n	800474c <get_fileinfo+0xbc>
			i = j = 0;
 800479a:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800479c:	2300      	movs	r3, #0
 800479e:	442c      	add	r4, r5
 80047a0:	76a3      	strb	r3, [r4, #26]
 80047a2:	7eaf      	ldrb	r7, [r5, #26]
 80047a4:	e7a5      	b.n	80046f2 <get_fileinfo+0x62>
		get_xdir_info(fs->dirbuf, fno);
 80047a6:	f8d8 6014 	ldr.w	r6, [r8, #20]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80047aa:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 80047ae:	b1d3      	cbz	r3, 80047e6 <get_fileinfo+0x156>
 80047b0:	f101 0819 	add.w	r8, r1, #25
 80047b4:	2440      	movs	r4, #64	; 0x40
 80047b6:	e005      	b.n	80047c4 <get_fileinfo+0x134>
		fno->fname[di++] = (char)w;
 80047b8:	f808 0f01 	strb.w	r0, [r8, #1]!
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80047bc:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 80047c0:	429f      	cmp	r7, r3
 80047c2:	d213      	bcs.n	80047ec <get_fileinfo+0x15c>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 80047c4:	06e2      	lsls	r2, r4, #27
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 80047c6:	f04f 0100 	mov.w	r1, #0
		fno->fname[di++] = (char)w;
 80047ca:	f107 0701 	add.w	r7, r7, #1
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 80047ce:	bf08      	it	eq
 80047d0:	3402      	addeq	r4, #2
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 80047d2:	1933      	adds	r3, r6, r4
	rv = rv << 8 | ptr[0];
 80047d4:	5d32      	ldrb	r2, [r6, r4]
 80047d6:	3402      	adds	r4, #2
 80047d8:	7858      	ldrb	r0, [r3, #1]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 80047da:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80047de:	f001 ff27 	bl	8006630 <ff_convert>
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d1e8      	bne.n	80047b8 <get_fileinfo+0x128>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 80047e6:	233f      	movs	r3, #63	; 0x3f
 80047e8:	2701      	movs	r7, #1
 80047ea:	76ab      	strb	r3, [r5, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 80047ec:	2000      	movs	r0, #0
 80047ee:	442f      	add	r7, r5
 80047f0:	76b8      	strb	r0, [r7, #26]
	fno->altname[0] = 0;							/* No SFN */
 80047f2:	7368      	strb	r0, [r5, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 80047f4:	7933      	ldrb	r3, [r6, #4]
 80047f6:	732b      	strb	r3, [r5, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80047f8:	06db      	lsls	r3, r3, #27
 80047fa:	d50d      	bpl.n	8004818 <get_fileinfo+0x188>
 80047fc:	4603      	mov	r3, r0
 80047fe:	e9c5 0300 	strd	r0, r3, [r5]
	rv = rv << 8 | ptr[0];
 8004802:	7b72      	ldrb	r2, [r6, #13]
 8004804:	7b33      	ldrb	r3, [r6, #12]
 8004806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800480a:	816b      	strh	r3, [r5, #10]
	rv = rv << 8 | ptr[0];
 800480c:	7bf2      	ldrb	r2, [r6, #15]
 800480e:	7bb3      	ldrb	r3, [r6, #14]
 8004810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8004814:	812b      	strh	r3, [r5, #8]
}
 8004816:	e7b0      	b.n	800477a <get_fileinfo+0xea>
	rv = rv << 8 | ptr[4];
 8004818:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	rv = rv << 8 | ptr[3];
 800481a:	f896 803b 	ldrb.w	r8, [r6, #59]	; 0x3b
	rv = rv << 8 | ptr[2];
 800481e:	f896 003a 	ldrb.w	r0, [r6, #58]	; 0x3a
 8004822:	ea48 2403 	orr.w	r4, r8, r3, lsl #8
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	rv = rv << 8 | ptr[1];
 800482c:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	ea40 2204 	orr.w	r2, r0, r4, lsl #8
	rv = rv << 8 | ptr[0];
 8004836:	f896 0038 	ldrb.w	r0, [r6, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 800483a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
	rv = rv << 8 | ptr[0];
 800483e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
	return rv;
 8004848:	e7d9      	b.n	80047fe <get_fileinfo+0x16e>
 800484a:	bf00      	nop

0800484c <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800484c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800484e:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004850:	b083      	sub	sp, #12
 8004852:	4604      	mov	r4, r0
 8004854:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004856:	b973      	cbnz	r3, 8004876 <move_window.part.0+0x2a>
 8004858:	f100 014c 	add.w	r1, r0, #76	; 0x4c
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800485c:	2301      	movs	r3, #1
 800485e:	462a      	mov	r2, r5
 8004860:	7860      	ldrb	r0, [r4, #1]
 8004862:	f7ff fdbd 	bl	80043e0 <disk_read>
 8004866:	b910      	cbnz	r0, 800486e <move_window.part.0+0x22>
			fs->winsect = sector;
 8004868:	64a5      	str	r5, [r4, #72]	; 0x48
}
 800486a:	b003      	add	sp, #12
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800486e:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004870:	f04f 35ff 	mov.w	r5, #4294967295
 8004874:	e7f8      	b.n	8004868 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 8004876:	6c86      	ldr	r6, [r0, #72]	; 0x48
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004878:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800487c:	2301      	movs	r3, #1
 800487e:	7840      	ldrb	r0, [r0, #1]
 8004880:	4632      	mov	r2, r6
 8004882:	9101      	str	r1, [sp, #4]
 8004884:	f7ff fdba 	bl	80043fc <disk_write>
 8004888:	b9b8      	cbnz	r0, 80048ba <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800488a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800488c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800488e:	1ab2      	subs	r2, r6, r2
 8004890:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8004892:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004894:	429a      	cmp	r2, r3
 8004896:	d2e1      	bcs.n	800485c <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004898:	78a7      	ldrb	r7, [r4, #2]
 800489a:	2f01      	cmp	r7, #1
 800489c:	d801      	bhi.n	80048a2 <move_window.part.0+0x56>
 800489e:	e7dd      	b.n	800485c <move_window.part.0+0x10>
 80048a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
					wsect += fs->fsize;
 80048a2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048a4:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80048a6:	2301      	movs	r3, #1
 80048a8:	7860      	ldrb	r0, [r4, #1]
 80048aa:	4632      	mov	r2, r6
 80048ac:	9101      	str	r1, [sp, #4]
 80048ae:	f7ff fda5 	bl	80043fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048b2:	2f01      	cmp	r7, #1
 80048b4:	9901      	ldr	r1, [sp, #4]
 80048b6:	d1f3      	bne.n	80048a0 <move_window.part.0+0x54>
 80048b8:	e7d0      	b.n	800485c <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 80048ba:	2001      	movs	r0, #1
}
 80048bc:	b003      	add	sp, #12
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048c0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048c0:	2901      	cmp	r1, #1
 80048c2:	d911      	bls.n	80048e8 <get_fat+0x28>
{
 80048c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 80048c8:	6805      	ldr	r5, [r0, #0]
 80048ca:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80048ce:	428b      	cmp	r3, r1
 80048d0:	d802      	bhi.n	80048d8 <get_fat+0x18>
		val = 1;	/* Internal error */
 80048d2:	2001      	movs	r0, #1
}
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (fs->fs_type) {
 80048d8:	782b      	ldrb	r3, [r5, #0]
 80048da:	3b01      	subs	r3, #1
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d8f8      	bhi.n	80048d2 <get_fat+0x12>
 80048e0:	e8df f003 	tbb	[pc, r3]
 80048e4:	04385873 	.word	0x04385873
		val = 1;	/* Internal error */
 80048e8:	2001      	movs	r0, #1
}
 80048ea:	4770      	bx	lr
			if (obj->objsize) {
 80048ec:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 80048f0:	ea56 0307 	orrs.w	r3, r6, r7
 80048f4:	d0ed      	beq.n	80048d2 <get_fat+0x12>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80048f6:	79c3      	ldrb	r3, [r0, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80048f8:	6882      	ldr	r2, [r0, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80048fa:	2b02      	cmp	r3, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80048fc:	eba1 0802 	sub.w	r8, r1, r2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004900:	89aa      	ldrh	r2, [r5, #12]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004902:	f000 809a 	beq.w	8004a3a <get_fat+0x17a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004906:	2b03      	cmp	r3, #3
 8004908:	f000 80a8 	beq.w	8004a5c <get_fat+0x19c>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800490c:	69c3      	ldr	r3, [r0, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 80a8 	bne.w	8004a64 <get_fat+0x1a4>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004914:	0891      	lsrs	r1, r2, #2
 8004916:	6be8      	ldr	r0, [r5, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004918:	6cab      	ldr	r3, [r5, #72]	; 0x48
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800491a:	fbb4 f1f1 	udiv	r1, r4, r1
 800491e:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004920:	4299      	cmp	r1, r3
 8004922:	d006      	beq.n	8004932 <get_fat+0x72>
 8004924:	4628      	mov	r0, r5
 8004926:	f7ff ff91 	bl	800484c <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800492a:	2800      	cmp	r0, #0
 800492c:	f040 8082 	bne.w	8004a34 <get_fat+0x174>
 8004930:	89aa      	ldrh	r2, [r5, #12]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004932:	00a4      	lsls	r4, r4, #2
 8004934:	354c      	adds	r5, #76	; 0x4c
 8004936:	fbb4 f3f2 	udiv	r3, r4, r2
 800493a:	fb02 4413 	mls	r4, r2, r3, r4
 800493e:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8004940:	5d28      	ldrb	r0, [r5, r4]
	rv = rv << 8 | ptr[2];
 8004942:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800494a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800494e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004952:	e7bf      	b.n	80048d4 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004954:	89ab      	ldrh	r3, [r5, #12]
 8004956:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004958:	0899      	lsrs	r1, r3, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800495a:	6caa      	ldr	r2, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800495c:	fbb4 f1f1 	udiv	r1, r4, r1
 8004960:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004962:	4291      	cmp	r1, r2
 8004964:	d005      	beq.n	8004972 <get_fat+0xb2>
 8004966:	4628      	mov	r0, r5
 8004968:	f7ff ff70 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800496c:	2800      	cmp	r0, #0
 800496e:	d161      	bne.n	8004a34 <get_fat+0x174>
 8004970:	89ab      	ldrh	r3, [r5, #12]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004972:	00a4      	lsls	r4, r4, #2
 8004974:	354c      	adds	r5, #76	; 0x4c
 8004976:	fbb4 f2f3 	udiv	r2, r4, r3
 800497a:	fb03 4312 	mls	r3, r3, r2, r4
 800497e:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8004980:	5ce8      	ldrb	r0, [r5, r3]
	rv = rv << 8 | ptr[1];
 8004982:	7854      	ldrb	r4, [r2, #1]
	rv = rv << 8 | ptr[2];
 8004984:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8004986:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
	rv = rv << 8 | ptr[0];
 800498a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800498e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004992:	e79f      	b.n	80048d4 <get_fat+0x14>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004994:	89ab      	ldrh	r3, [r5, #12]
 8004996:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8004998:	0859      	lsrs	r1, r3, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800499a:	6caa      	ldr	r2, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800499c:	fbb4 f1f1 	udiv	r1, r4, r1
 80049a0:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80049a2:	4291      	cmp	r1, r2
 80049a4:	d005      	beq.n	80049b2 <get_fat+0xf2>
 80049a6:	4628      	mov	r0, r5
 80049a8:	f7ff ff50 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d141      	bne.n	8004a34 <get_fat+0x174>
 80049b0:	89ab      	ldrh	r3, [r5, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80049b2:	0064      	lsls	r4, r4, #1
 80049b4:	354c      	adds	r5, #76	; 0x4c
 80049b6:	fbb4 f2f3 	udiv	r2, r4, r3
 80049ba:	fb03 4312 	mls	r3, r3, r2, r4
 80049be:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 80049c0:	5ce8      	ldrb	r0, [r5, r3]
 80049c2:	7854      	ldrb	r4, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80049c4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
 80049c8:	e784      	b.n	80048d4 <get_fat+0x14>
			bc = (UINT)clst; bc += bc / 2;
 80049ca:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049ce:	89aa      	ldrh	r2, [r5, #12]
 80049d0:	6be8      	ldr	r0, [r5, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80049d2:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049d6:	fbb6 f3f2 	udiv	r3, r6, r2
 80049da:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80049dc:	4571      	cmp	r1, lr
 80049de:	d009      	beq.n	80049f4 <get_fat+0x134>
 80049e0:	4628      	mov	r0, r5
 80049e2:	f7ff ff33 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049e6:	bb28      	cbnz	r0, 8004a34 <get_fat+0x174>
 80049e8:	89aa      	ldrh	r2, [r5, #12]
 80049ea:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80049ec:	f8d5 e048 	ldr.w	lr, [r5, #72]	; 0x48
 80049f0:	fbb6 f3f2 	udiv	r3, r6, r2
			wc = fs->win[bc++ % SS(fs)];
 80049f4:	1c77      	adds	r7, r6, #1
 80049f6:	fb02 6313 	mls	r3, r2, r3, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049fa:	fbb7 fcf2 	udiv	ip, r7, r2
 80049fe:	eb0c 0100 	add.w	r1, ip, r0
			wc = fs->win[bc++ % SS(fs)];
 8004a02:	442b      	add	r3, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a04:	4571      	cmp	r1, lr
			wc = fs->win[bc++ % SS(fs)];
 8004a06:	f893 604c 	ldrb.w	r6, [r3, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a0a:	d006      	beq.n	8004a1a <get_fat+0x15a>
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7ff ff1d 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a12:	b978      	cbnz	r0, 8004a34 <get_fat+0x174>
 8004a14:	89aa      	ldrh	r2, [r5, #12]
 8004a16:	fbb7 fcf2 	udiv	ip, r7, r2
			wc |= fs->win[bc % SS(fs)] << 8;
 8004a1a:	fb02 721c 	mls	r2, r2, ip, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004a1e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004a20:	4415      	add	r5, r2
 8004a22:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
 8004a26:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004a2a:	bf4c      	ite	mi
 8004a2c:	0900      	lsrmi	r0, r0, #4
 8004a2e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004a32:	e74f      	b.n	80048d4 <get_fat+0x14>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	e74c      	b.n	80048d4 <get_fat+0x14>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004a3a:	f116 30ff 	adds.w	r0, r6, #4294967295
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	f147 31ff 	adc.w	r1, r7, #4294967295
 8004a46:	f7fb fbe7 	bl	8000218 <__aeabi_uldivmod>
 8004a4a:	896b      	ldrh	r3, [r5, #10]
 8004a4c:	fbb0 f0f3 	udiv	r0, r0, r3
					if (cofs <= clen) {
 8004a50:	4580      	cmp	r8, r0
 8004a52:	f63f af3e 	bhi.w	80048d2 <get_fat+0x12>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8004a56:	d005      	beq.n	8004a64 <get_fat+0x1a4>
 8004a58:	1c60      	adds	r0, r4, #1
 8004a5a:	e73b      	b.n	80048d4 <get_fat+0x14>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004a5c:	6983      	ldr	r3, [r0, #24]
 8004a5e:	4543      	cmp	r3, r8
 8004a60:	d8fa      	bhi.n	8004a58 <get_fat+0x198>
 8004a62:	e753      	b.n	800490c <get_fat+0x4c>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8004a64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 8004a68:	e734      	b.n	80048d4 <get_fat+0x14>
 8004a6a:	bf00      	nop

08004a6c <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004a70:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d037      	beq.n	8004ae6 <dir_next.constprop.0+0x7a>
	FATFS *fs = dp->obj.fs;
 8004a76:	6806      	ldr	r6, [r0, #0]
 8004a78:	3520      	adds	r5, #32
 8004a7a:	4604      	mov	r4, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a7c:	7832      	ldrb	r2, [r6, #0]
 8004a7e:	2a04      	cmp	r2, #4
 8004a80:	bf0c      	ite	eq
 8004a82:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8004a86:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8004a8a:	4295      	cmp	r5, r2
 8004a8c:	d22b      	bcs.n	8004ae6 <dir_next.constprop.0+0x7a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a8e:	89b2      	ldrh	r2, [r6, #12]
 8004a90:	fbb5 f7f2 	udiv	r7, r5, r2
 8004a94:	fb02 5217 	mls	r2, r2, r7, r5
 8004a98:	b9fa      	cbnz	r2, 8004ada <dir_next.constprop.0+0x6e>
		dp->sect++;				/* Next sector */
 8004a9a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8004a9c:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8004a9e:	6383      	str	r3, [r0, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 8004aa0:	b319      	cbz	r1, 8004aea <dir_next.constprop.0+0x7e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004aa2:	8973      	ldrh	r3, [r6, #10]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	401f      	ands	r7, r3
 8004aa8:	d117      	bne.n	8004ada <dir_next.constprop.0+0x6e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004aaa:	f7ff ff09 	bl	80048c0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004aae:	2801      	cmp	r0, #1
 8004ab0:	d923      	bls.n	8004afa <dir_next.constprop.0+0x8e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	d023      	beq.n	8004afe <dir_next.constprop.0+0x92>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004ab6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004ab8:	4298      	cmp	r0, r3
 8004aba:	d21a      	bcs.n	8004af2 <dir_next.constprop.0+0x86>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004abc:	3b02      	subs	r3, #2
	clst -= 2;
 8004abe:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ac0:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d203      	bcs.n	8004ace <dir_next.constprop.0+0x62>
	return clst * fs->csize + fs->database;
 8004ac6:	8977      	ldrh	r7, [r6, #10]
 8004ac8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004aca:	fb02 3707 	mla	r7, r2, r7, r3
 8004ace:	89b3      	ldrh	r3, [r6, #12]
				dp->sect = clust2sect(fs, clst);
 8004ad0:	63a7      	str	r7, [r4, #56]	; 0x38
 8004ad2:	fbb5 f2f3 	udiv	r2, r5, r3
 8004ad6:	fb03 5212 	mls	r2, r3, r2, r5
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ada:	364c      	adds	r6, #76	; 0x4c
	return FR_OK;
 8004adc:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8004ade:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ae0:	4416      	add	r6, r2
 8004ae2:	63e6      	str	r6, [r4, #60]	; 0x3c
}
 8004ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004ae6:	2004      	movs	r0, #4
}
 8004ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004aea:	8933      	ldrh	r3, [r6, #8]
 8004aec:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8004af0:	d8f3      	bhi.n	8004ada <dir_next.constprop.0+0x6e>
				dp->sect = 0; return FR_NO_FILE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	2004      	movs	r0, #4
 8004af6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004afa:	2002      	movs	r0, #2
}
 8004afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004afe:	2001      	movs	r0, #1
}
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b02:	bf00      	nop

08004b04 <load_xdir>:
{
 8004b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b08:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8004b0a:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 8004b0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b0e:	6c83      	ldr	r3, [r0, #72]	; 0x48
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8004b10:	6946      	ldr	r6, [r0, #20]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b12:	4299      	cmp	r1, r3
 8004b14:	d003      	beq.n	8004b1e <load_xdir+0x1a>
 8004b16:	f7ff fe99 	bl	800484c <move_window.part.0>
	if (res != FR_OK) return res;
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	b920      	cbnz	r0, 8004b28 <load_xdir+0x24>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8004b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	2a85      	cmp	r2, #133	; 0x85
 8004b24:	d003      	beq.n	8004b2e <load_xdir+0x2a>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8004b26:	2502      	movs	r5, #2
}
 8004b28:	4628      	mov	r0, r5
 8004b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b2e:	1cda      	adds	r2, r3, #3
 8004b30:	1b92      	subs	r2, r2, r6
 8004b32:	2a06      	cmp	r2, #6
 8004b34:	f240 8090 	bls.w	8004c58 <load_xdir+0x154>
			*d++ = *s++;
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	6032      	str	r2, [r6, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	6072      	str	r2, [r6, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	60b2      	str	r2, [r6, #8]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	60f2      	str	r2, [r6, #12]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	6132      	str	r2, [r6, #16]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	6172      	str	r2, [r6, #20]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	61b2      	str	r2, [r6, #24]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	61f3      	str	r3, [r6, #28]
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8004b58:	7873      	ldrb	r3, [r6, #1]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	015f      	lsls	r7, r3, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8004b5e:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 8004b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b66:	d8de      	bhi.n	8004b26 <load_xdir+0x22>
	res = dir_next(dp, 0);
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff ff7f 	bl	8004a6c <dir_next.constprop.0>
	if (res != FR_OK) return res;
 8004b6e:	4605      	mov	r5, r0
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d1d9      	bne.n	8004b28 <load_xdir+0x24>
	res = move_window(dp->obj.fs, dp->sect);
 8004b74:	6820      	ldr	r0, [r4, #0]
 8004b76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b78:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	d004      	beq.n	8004b88 <load_xdir+0x84>
 8004b7e:	f7ff fe65 	bl	800484c <move_window.part.0>
	if (res != FR_OK) return res;
 8004b82:	4605      	mov	r5, r0
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d1cf      	bne.n	8004b28 <load_xdir+0x24>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8004b88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	2ac0      	cmp	r2, #192	; 0xc0
 8004b8e:	d1ca      	bne.n	8004b26 <load_xdir+0x22>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8004b90:	f106 0220 	add.w	r2, r6, #32
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	428a      	cmp	r2, r1
 8004b98:	d204      	bcs.n	8004ba4 <load_xdir+0xa0>
 8004b9a:	f106 0224 	add.w	r2, r6, #36	; 0x24
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	f0c0 809b 	bcc.w	8004cda <load_xdir+0x1d6>
			*d++ = *s++;
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	6232      	str	r2, [r6, #32]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	6272      	str	r2, [r6, #36]	; 0x24
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	62b2      	str	r2, [r6, #40]	; 0x28
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	62f2      	str	r2, [r6, #44]	; 0x2c
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	6332      	str	r2, [r6, #48]	; 0x30
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	6372      	str	r2, [r6, #52]	; 0x34
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	63b2      	str	r2, [r6, #56]	; 0x38
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	63f3      	str	r3, [r6, #60]	; 0x3c
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8004bc4:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8004bc8:	4a4a      	ldr	r2, [pc, #296]	; (8004cf4 <load_xdir+0x1f0>)
 8004bca:	332c      	adds	r3, #44	; 0x2c
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 8004bd6:	d3a6      	bcc.n	8004b26 <load_xdir+0x22>
 8004bd8:	f106 0844 	add.w	r8, r6, #68	; 0x44
	i = SZDIRE * 2;	/* C1 offset */
 8004bdc:	f04f 0940 	mov.w	r9, #64	; 0x40
 8004be0:	e005      	b.n	8004bee <load_xdir+0xea>
	} while ((i += SZDIRE) < sz_ent);
 8004be2:	f109 0920 	add.w	r9, r9, #32
 8004be6:	f108 0820 	add.w	r8, r8, #32
 8004bea:	454f      	cmp	r7, r9
 8004bec:	d949      	bls.n	8004c82 <load_xdir+0x17e>
		res = dir_next(dp, 0);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f7ff ff3c 	bl	8004a6c <dir_next.constprop.0>
		if (res != FR_OK) return res;
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d196      	bne.n	8004b28 <load_xdir+0x24>
		res = move_window(dp->obj.fs, dp->sect);
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bfe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d003      	beq.n	8004c0c <load_xdir+0x108>
 8004c04:	f7ff fe22 	bl	800484c <move_window.part.0>
		if (res != FR_OK) return res;
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d171      	bne.n	8004cf0 <load_xdir+0x1ec>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8004c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c0e:	781a      	ldrb	r2, [r3, #0]
 8004c10:	2ac1      	cmp	r2, #193	; 0xc1
 8004c12:	d188      	bne.n	8004b26 <load_xdir+0x22>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8004c14:	f5b9 7f18 	cmp.w	r9, #608	; 0x260
 8004c18:	d2e3      	bcs.n	8004be2 <load_xdir+0xde>
 8004c1a:	f1a8 0204 	sub.w	r2, r8, #4
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c1e:	1d19      	adds	r1, r3, #4
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d201      	bcs.n	8004c28 <load_xdir+0x124>
 8004c24:	4543      	cmp	r3, r8
 8004c26:	d321      	bcc.n	8004c6c <load_xdir+0x168>
			*d++ = *s++;
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	6011      	str	r1, [r2, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	f8c8 2000 	str.w	r2, [r8]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	f8c8 2004 	str.w	r2, [r8, #4]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	f8c8 2008 	str.w	r2, [r8, #8]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	f8c8 200c 	str.w	r2, [r8, #12]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	f8c8 2010 	str.w	r2, [r8, #16]
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	f8c8 2014 	str.w	r2, [r8, #20]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f8c8 3018 	str.w	r3, [r8, #24]
		} while (--cnt);
 8004c56:	e7c4      	b.n	8004be2 <load_xdir+0xde>
 8004c58:	1e72      	subs	r2, r6, #1
 8004c5a:	f103 0020 	add.w	r0, r3, #32
			*d++ = *s++;
 8004c5e:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8004c62:	4283      	cmp	r3, r0
			*d++ = *s++;
 8004c64:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8004c68:	d1f9      	bne.n	8004c5e <load_xdir+0x15a>
 8004c6a:	e775      	b.n	8004b58 <load_xdir+0x54>
 8004c6c:	f1a8 0205 	sub.w	r2, r8, #5
 8004c70:	f103 0020 	add.w	r0, r3, #32
			*d++ = *s++;
 8004c74:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8004c78:	4283      	cmp	r3, r0
			*d++ = *s++;
 8004c7a:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8004c7e:	d1f9      	bne.n	8004c74 <load_xdir+0x170>
 8004c80:	e7af      	b.n	8004be2 <load_xdir+0xde>
	if (i <= MAXDIRB(_MAX_LFN)) {
 8004c82:	f5b9 7f18 	cmp.w	r9, #608	; 0x260
 8004c86:	f63f af4f 	bhi.w	8004b28 <load_xdir+0x24>
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8004c8a:	7874      	ldrb	r4, [r6, #1]
	for (i = sum = 0; i < szblk; i++) {
 8004c8c:	2100      	movs	r1, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8004c8e:	3401      	adds	r4, #1
	for (i = sum = 0; i < szblk; i++) {
 8004c90:	4608      	mov	r0, r1
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8004c92:	0164      	lsls	r4, r4, #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8004c94:	2802      	cmp	r0, #2
 8004c96:	d10e      	bne.n	8004cb6 <load_xdir+0x1b2>
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004c98:	7933      	ldrb	r3, [r6, #4]
	for (i = sum = 0; i < szblk; i++) {
 8004c9a:	2006      	movs	r0, #6
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004c9c:	7972      	ldrb	r2, [r6, #5]
 8004c9e:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004ca8:	f3c3 014e 	ubfx	r1, r3, #1, #15
 8004cac:	eb02 33c3 	add.w	r3, r2, r3, lsl #15
 8004cb0:	fa11 f383 	uxtah	r3, r1, r3
 8004cb4:	b299      	uxth	r1, r3
 8004cb6:	5c33      	ldrb	r3, [r6, r0]
	for (i = sum = 0; i < szblk; i++) {
 8004cb8:	3001      	adds	r0, #1
 8004cba:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 8004cbe:	4284      	cmp	r4, r0
 8004cc0:	b29b      	uxth	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004cc2:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004cc6:	b299      	uxth	r1, r3
	for (i = sum = 0; i < szblk; i++) {
 8004cc8:	d8e4      	bhi.n	8004c94 <load_xdir+0x190>
	rv = rv << 8 | ptr[0];
 8004cca:	78f2      	ldrb	r2, [r6, #3]
 8004ccc:	78b3      	ldrb	r3, [r6, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8004cce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	f43f af28 	beq.w	8004b28 <load_xdir+0x24>
 8004cd8:	e725      	b.n	8004b26 <load_xdir+0x22>
 8004cda:	f106 021f 	add.w	r2, r6, #31
 8004cde:	f103 0020 	add.w	r0, r3, #32
			*d++ = *s++;
 8004ce2:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8004ce6:	4298      	cmp	r0, r3
			*d++ = *s++;
 8004ce8:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8004cec:	d1f9      	bne.n	8004ce2 <load_xdir+0x1de>
 8004cee:	e769      	b.n	8004bc4 <load_xdir+0xc0>
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	e719      	b.n	8004b28 <load_xdir+0x24>
 8004cf4:	88888889 	.word	0x88888889

08004cf8 <dir_read.constprop.0>:
FRESULT dir_read (
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8004cfc:	6b86      	ldr	r6, [r0, #56]	; 0x38
FRESULT dir_read (
 8004cfe:	b083      	sub	sp, #12
 8004d00:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004d02:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 8004d04:	2e00      	cmp	r6, #0
 8004d06:	d064      	beq.n	8004dd2 <dir_read.constprop.0+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 8004d08:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8004d0c:	f107 084c 	add.w	r8, r7, #76	; 0x4c
 8004d10:	46d1      	mov	r9, sl
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d12:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8004d14:	42b5      	cmp	r5, r6
 8004d16:	d013      	beq.n	8004d40 <dir_read.constprop.0+0x48>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d16f      	bne.n	8004dfe <dir_read.constprop.0+0x106>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4632      	mov	r2, r6
 8004d22:	4641      	mov	r1, r8
 8004d24:	7878      	ldrb	r0, [r7, #1]
 8004d26:	f7ff fb5b 	bl	80043e0 <disk_read>
 8004d2a:	b140      	cbz	r0, 8004d3e <dir_read.constprop.0+0x46>
			fs->winsect = sector;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8004d30:	2001      	movs	r0, #1
			fs->winsect = sector;
 8004d32:	64bb      	str	r3, [r7, #72]	; 0x48
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004d34:	2300      	movs	r3, #0
 8004d36:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004d38:	b003      	add	sp, #12
 8004d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8004d3e:	64be      	str	r6, [r7, #72]	; 0x48
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8004d40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004d42:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d044      	beq.n	8004dd2 <dir_read.constprop.0+0xda>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004d48:	783a      	ldrb	r2, [r7, #0]
 8004d4a:	2a04      	cmp	r2, #4
 8004d4c:	d043      	beq.n	8004dd6 <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004d4e:	7aca      	ldrb	r2, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004d50:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004d52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004d56:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004d58:	d005      	beq.n	8004d66 <dir_read.constprop.0+0x6e>
 8004d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5c:	d003      	beq.n	8004d66 <dir_read.constprop.0+0x6e>
 8004d5e:	f022 0020 	bic.w	r0, r2, #32
 8004d62:	2808      	cmp	r0, #8
 8004d64:	d178      	bne.n	8004e58 <dir_read.constprop.0+0x160>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004d66:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d6e:	3320      	adds	r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d70:	2e00      	cmp	r6, #0
 8004d72:	d02e      	beq.n	8004dd2 <dir_read.constprop.0+0xda>
	FATFS *fs = dp->obj.fs;
 8004d74:	6825      	ldr	r5, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d76:	782a      	ldrb	r2, [r5, #0]
 8004d78:	2a04      	cmp	r2, #4
 8004d7a:	bf0c      	ite	eq
 8004d7c:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8004d80:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d224      	bcs.n	8004dd2 <dir_read.constprop.0+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004d88:	89aa      	ldrh	r2, [r5, #12]
 8004d8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d8e:	fb02 3210 	mls	r2, r2, r0, r3
 8004d92:	2a00      	cmp	r2, #0
 8004d94:	d12e      	bne.n	8004df4 <dir_read.constprop.0+0xfc>
		dp->sect++;				/* Next sector */
 8004d96:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8004d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8004d9a:	63a6      	str	r6, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	d137      	bne.n	8004e10 <dir_read.constprop.0+0x118>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004da0:	892a      	ldrh	r2, [r5, #8]
 8004da2:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8004da6:	d914      	bls.n	8004dd2 <dir_read.constprop.0+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004da8:	354c      	adds	r5, #76	; 0x4c
	dp->dptr = ofs;						/* Current entry */
 8004daa:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004dac:	440d      	add	r5, r1
 8004dae:	63e5      	str	r5, [r4, #60]	; 0x3c
	while (dp->sect) {
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	d1ae      	bne.n	8004d12 <dir_read.constprop.0+0x1a>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004db4:	2000      	movs	r0, #0
}
 8004db6:	b003      	add	sp, #12
 8004db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	f7ff fd7e 	bl	80048c0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004dc4:	2801      	cmp	r0, #1
 8004dc6:	d975      	bls.n	8004eb4 <dir_read.constprop.0+0x1bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d01f      	beq.n	8004e0c <dir_read.constprop.0+0x114>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004dcc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004dce:	4290      	cmp	r0, r2
 8004dd0:	d35f      	bcc.n	8004e92 <dir_read.constprop.0+0x19a>
	FRESULT res = FR_NO_FILE;
 8004dd2:	2004      	movs	r0, #4
 8004dd4:	e7ae      	b.n	8004d34 <dir_read.constprop.0+0x3c>
				if (c == 0x85) {		/* Start of the file entry block? */
 8004dd6:	2b85      	cmp	r3, #133	; 0x85
 8004dd8:	d1c7      	bne.n	8004d6a <dir_read.constprop.0+0x72>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8004dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
 8004ddc:	4620      	mov	r0, r4
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8004dde:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8004de0:	f7ff fe90 	bl	8004b04 <load_xdir>
					if (res == FR_OK) {
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d1a5      	bne.n	8004d34 <dir_read.constprop.0+0x3c>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	71a3      	strb	r3, [r4, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004df2:	e7a1      	b.n	8004d38 <dir_read.constprop.0+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004df4:	354c      	adds	r5, #76	; 0x4c
	dp->dptr = ofs;						/* Current entry */
 8004df6:	6323      	str	r3, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004df8:	4415      	add	r5, r2
 8004dfa:	63e5      	str	r5, [r4, #60]	; 0x3c
	while (dp->sect) {
 8004dfc:	e789      	b.n	8004d12 <dir_read.constprop.0+0x1a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004dfe:	2301      	movs	r3, #1
 8004e00:	462a      	mov	r2, r5
 8004e02:	4641      	mov	r1, r8
 8004e04:	7878      	ldrb	r0, [r7, #1]
 8004e06:	f7ff faf9 	bl	80043fc <disk_write>
 8004e0a:	b150      	cbz	r0, 8004e22 <dir_read.constprop.0+0x12a>
				res = FR_DISK_ERR;
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	e791      	b.n	8004d34 <dir_read.constprop.0+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e10:	f8b5 b00a 	ldrh.w	fp, [r5, #10]
 8004e14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e18:	ea1b 0b00 	ands.w	fp, fp, r0
 8004e1c:	d0ce      	beq.n	8004dbc <dir_read.constprop.0+0xc4>
 8004e1e:	4611      	mov	r1, r2
 8004e20:	e7c2      	b.n	8004da8 <dir_read.constprop.0+0xb0>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e26:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8004e28:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	f4bf af77 	bcs.w	8004d1e <dir_read.constprop.0+0x26>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e30:	f897 b002 	ldrb.w	fp, [r7, #2]
 8004e34:	f1bb 0f01 	cmp.w	fp, #1
 8004e38:	d801      	bhi.n	8004e3e <dir_read.constprop.0+0x146>
 8004e3a:	e770      	b.n	8004d1e <dir_read.constprop.0+0x26>
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
					wsect += fs->fsize;
 8004e3e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e40:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8004e44:	2301      	movs	r3, #1
 8004e46:	4641      	mov	r1, r8
 8004e48:	462a      	mov	r2, r5
 8004e4a:	7878      	ldrb	r0, [r7, #1]
 8004e4c:	f7ff fad6 	bl	80043fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e50:	f1bb 0f01 	cmp.w	fp, #1
 8004e54:	d1f2      	bne.n	8004e3c <dir_read.constprop.0+0x144>
 8004e56:	e762      	b.n	8004d1e <dir_read.constprop.0+0x26>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8004e58:	2a0f      	cmp	r2, #15
 8004e5a:	d12f      	bne.n	8004ebc <dir_read.constprop.0+0x1c4>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8004e5c:	065a      	lsls	r2, r3, #25
 8004e5e:	d514      	bpl.n	8004e8a <dir_read.constprop.0+0x192>
						dp->blk_ofs = dp->dptr;
 8004e60:	6b22      	ldr	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 8004e62:	f003 09bf 	and.w	r9, r3, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8004e66:	f891 a00d 	ldrb.w	sl, [r1, #13]
						dp->blk_ofs = dp->dptr;
 8004e6a:	64e2      	str	r2, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004e6c:	7b4b      	ldrb	r3, [r1, #13]
 8004e6e:	4553      	cmp	r3, sl
 8004e70:	f47f af79 	bne.w	8004d66 <dir_read.constprop.0+0x6e>
 8004e74:	6938      	ldr	r0, [r7, #16]
 8004e76:	f7ff fadd 	bl	8004434 <pick_lfn>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	f43f af73 	beq.w	8004d66 <dir_read.constprop.0+0x6e>
 8004e80:	f109 39ff 	add.w	r9, r9, #4294967295
 8004e84:	fa5f f989 	uxtb.w	r9, r9
 8004e88:	e76f      	b.n	8004d6a <dir_read.constprop.0+0x72>
 8004e8a:	454b      	cmp	r3, r9
 8004e8c:	f47f af6b 	bne.w	8004d66 <dir_read.constprop.0+0x6e>
 8004e90:	e7ec      	b.n	8004e6c <dir_read.constprop.0+0x174>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e92:	3a02      	subs	r2, #2
	clst -= 2;
 8004e94:	1e81      	subs	r1, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e96:	9b01      	ldr	r3, [sp, #4]
 8004e98:	4291      	cmp	r1, r2
				dp->clust = clst;		/* Initialize data for new cluster */
 8004e9a:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e9c:	d20c      	bcs.n	8004eb8 <dir_read.constprop.0+0x1c0>
	return clst * fs->csize + fs->database;
 8004e9e:	896e      	ldrh	r6, [r5, #10]
 8004ea0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004ea2:	fb01 2606 	mla	r6, r1, r6, r2
 8004ea6:	89aa      	ldrh	r2, [r5, #12]
				dp->sect = clust2sect(fs, clst);
 8004ea8:	63a6      	str	r6, [r4, #56]	; 0x38
 8004eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004eae:	fb02 3111 	mls	r1, r2, r1, r3
 8004eb2:	e779      	b.n	8004da8 <dir_read.constprop.0+0xb0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004eb4:	2002      	movs	r0, #2
 8004eb6:	e73d      	b.n	8004d34 <dir_read.constprop.0+0x3c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004eb8:	465e      	mov	r6, fp
 8004eba:	e7f4      	b.n	8004ea6 <dir_read.constprop.0+0x1ae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8004ebc:	f1b9 0f00 	cmp.w	r9, #0
 8004ec0:	d148      	bne.n	8004f54 <dir_read.constprop.0+0x25c>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004ec2:	780a      	ldrb	r2, [r1, #0]
 8004ec4:	784e      	ldrb	r6, [r1, #1]
 8004ec6:	01d3      	lsls	r3, r2, #7
 8004ec8:	788d      	ldrb	r5, [r1, #2]
 8004eca:	78c8      	ldrb	r0, [r1, #3]
 8004ecc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8004ed0:	199a      	adds	r2, r3, r6
 8004ed2:	790e      	ldrb	r6, [r1, #4]
 8004ed4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004ed8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004edc:	fa55 f283 	uxtab	r2, r5, r3
 8004ee0:	794d      	ldrb	r5, [r1, #5]
 8004ee2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004ee6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004eea:	fa50 f283 	uxtab	r2, r0, r3
 8004eee:	7988      	ldrb	r0, [r1, #6]
 8004ef0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004ef4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004ef8:	fa56 f283 	uxtab	r2, r6, r3
 8004efc:	79ce      	ldrb	r6, [r1, #7]
 8004efe:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004f02:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004f06:	fa55 f283 	uxtab	r2, r5, r3
 8004f0a:	7a0d      	ldrb	r5, [r1, #8]
 8004f0c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004f10:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004f14:	fa50 f283 	uxtab	r2, r0, r3
 8004f18:	7a48      	ldrb	r0, [r1, #9]
 8004f1a:	7a89      	ldrb	r1, [r1, #10]
 8004f1c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004f20:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004f24:	fa56 f283 	uxtab	r2, r6, r3
 8004f28:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004f2c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004f30:	fa55 f283 	uxtab	r2, r5, r3
 8004f34:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004f38:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004f3c:	fa50 f283 	uxtab	r2, r0, r3
 8004f40:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8004f44:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8004f48:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	459a      	cmp	sl, r3
 8004f50:	f43f af30 	beq.w	8004db4 <dir_read.constprop.0+0xbc>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
 8004f58:	2000      	movs	r0, #0
 8004f5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f5c:	e6ec      	b.n	8004d38 <dir_read.constprop.0+0x40>
 8004f5e:	bf00      	nop

08004f60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004f60:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004f62:	f04f 36ff 	mov.w	r6, #4294967295
 8004f66:	2300      	movs	r3, #0
{
 8004f68:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f6a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004f6c:	70c3      	strb	r3, [r0, #3]
 8004f6e:	6486      	str	r6, [r0, #72]	; 0x48
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f70:	d00c      	beq.n	8004f8c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f72:	460d      	mov	r5, r1
 8004f74:	460a      	mov	r2, r1
 8004f76:	2301      	movs	r3, #1
 8004f78:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8004f7c:	7840      	ldrb	r0, [r0, #1]
 8004f7e:	f7ff fa2f 	bl	80043e0 <disk_read>
 8004f82:	b110      	cbz	r0, 8004f8a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004f84:	2004      	movs	r0, #4
			fs->winsect = sector;
 8004f86:	64a6      	str	r6, [r4, #72]	; 0x48
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8004f8a:	64a5      	str	r5, [r4, #72]	; 0x48
	rv = rv << 8 | ptr[0];
 8004f8c:	f894 124b 	ldrb.w	r1, [r4, #587]	; 0x24b
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004f90:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8004f94:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
 8004f98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d154      	bne.n	800504a <check_fs+0xea>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004fa0:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8004fa4:	2ae9      	cmp	r2, #233	; 0xe9
 8004fa6:	d032      	beq.n	800500e <check_fs+0xae>
 8004fa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004faa:	492a      	ldr	r1, [pc, #168]	; (8005054 <check_fs+0xf4>)
 8004fac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	d02c      	beq.n	800500e <check_fs+0xae>
	} while (--cnt && r == 0);
 8004fb4:	2aeb      	cmp	r2, #235	; 0xeb
 8004fb6:	d14a      	bne.n	800504e <check_fs+0xee>
 8004fb8:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8004fbc:	2b76      	cmp	r3, #118	; 0x76
 8004fbe:	d146      	bne.n	800504e <check_fs+0xee>
 8004fc0:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8004fc4:	2b90      	cmp	r3, #144	; 0x90
 8004fc6:	d142      	bne.n	800504e <check_fs+0xee>
 8004fc8:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8004fcc:	2b45      	cmp	r3, #69	; 0x45
 8004fce:	d13e      	bne.n	800504e <check_fs+0xee>
 8004fd0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004fd4:	2b58      	cmp	r3, #88	; 0x58
 8004fd6:	d13a      	bne.n	800504e <check_fs+0xee>
 8004fd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004fdc:	2b46      	cmp	r3, #70	; 0x46
 8004fde:	d136      	bne.n	800504e <check_fs+0xee>
 8004fe0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8004fe4:	2b41      	cmp	r3, #65	; 0x41
 8004fe6:	d132      	bne.n	800504e <check_fs+0xee>
 8004fe8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8004fec:	2b54      	cmp	r3, #84	; 0x54
 8004fee:	d12e      	bne.n	800504e <check_fs+0xee>
 8004ff0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d12a      	bne.n	800504e <check_fs+0xee>
 8004ff8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d126      	bne.n	800504e <check_fs+0xee>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8005000:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8005004:	2b20      	cmp	r3, #32
 8005006:	bf14      	ite	ne
 8005008:	2002      	movne	r0, #2
 800500a:	2001      	moveq	r0, #1
}
 800500c:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[2];
 800500e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
	rv = rv << 8 | ptr[1];
 8005012:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
	rv = rv << 8 | ptr[0];
 8005016:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
	rv = rv << 8 | ptr[1];
 800501a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800501e:	480e      	ldr	r0, [pc, #56]	; (8005058 <check_fs+0xf8>)
	rv = rv << 8 | ptr[0];
 8005020:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005024:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005028:	4283      	cmp	r3, r0
 800502a:	d00c      	beq.n	8005046 <check_fs+0xe6>
	rv = rv << 8 | ptr[2];
 800502c:	f8b4 00a0 	ldrh.w	r0, [r4, #160]	; 0xa0
	rv = rv << 8 | ptr[1];
 8005030:	f894 109f 	ldrb.w	r1, [r4, #159]	; 0x9f
	rv = rv << 8 | ptr[0];
 8005034:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
	rv = rv << 8 | ptr[1];
 8005038:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800503c:	4807      	ldr	r0, [pc, #28]	; (800505c <check_fs+0xfc>)
	rv = rv << 8 | ptr[0];
 800503e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005042:	4283      	cmp	r3, r0
 8005044:	d1b6      	bne.n	8004fb4 <check_fs+0x54>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005046:	2000      	movs	r0, #0
}
 8005048:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800504a:	2003      	movs	r0, #3
}
 800504c:	bd70      	pop	{r4, r5, r6, pc}
	return 2;
 800504e:	2002      	movs	r0, #2
}
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	bf00      	nop
 8005054:	009000eb 	.word	0x009000eb
 8005058:	00544146 	.word	0x00544146
 800505c:	33544146 	.word	0x33544146

08005060 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path) {	/* If the pointer is not a null */
 8005064:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005066:	2400      	movs	r4, #0
{
 8005068:	b083      	sub	sp, #12
	*rfs = 0;
 800506a:	600c      	str	r4, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800506c:	b18b      	cbz	r3, 8005092 <find_volume+0x32>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800506e:	781e      	ldrb	r6, [r3, #0]
 8005070:	2e1f      	cmp	r6, #31
 8005072:	d913      	bls.n	800509c <find_volume+0x3c>
 8005074:	2e3a      	cmp	r6, #58	; 0x3a
 8005076:	d011      	beq.n	800509c <find_volume+0x3c>
 8005078:	461d      	mov	r5, r3
 800507a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800507e:	2c1f      	cmp	r4, #31
 8005080:	d90e      	bls.n	80050a0 <find_volume+0x40>
 8005082:	2c3a      	cmp	r4, #58	; 0x3a
 8005084:	d1f9      	bne.n	800507a <find_volume+0x1a>
			i = *tp++ - '0';
 8005086:	3301      	adds	r3, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005088:	429d      	cmp	r5, r3
 800508a:	d102      	bne.n	8005092 <find_volume+0x32>
 800508c:	2e30      	cmp	r6, #48	; 0x30
 800508e:	f000 8151 	beq.w	8005334 <find_volume+0x2d4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8005092:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8005094:	4620      	mov	r0, r4
 8005096:	b003      	add	sp, #12
 8005098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800509c:	4634      	mov	r4, r6
 800509e:	461d      	mov	r5, r3
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050a0:	2c3a      	cmp	r4, #58	; 0x3a
 80050a2:	d0f0      	beq.n	8005086 <find_volume+0x26>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80050a4:	4bbb      	ldr	r3, [pc, #748]	; (8005394 <find_volume+0x334>)
 80050a6:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	f000 8141 	beq.w	8005330 <find_volume+0x2d0>
	*rfs = fs;							/* Return pointer to the file system object */
 80050ae:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80050b0:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80050b4:	782b      	ldrb	r3, [r5, #0]
 80050b6:	b183      	cbz	r3, 80050da <find_volume+0x7a>
		stat = disk_status(fs->drv);
 80050b8:	7868      	ldrb	r0, [r5, #1]
 80050ba:	f7ff f973 	bl	80043a4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80050be:	07c1      	lsls	r1, r0, #31
 80050c0:	d40b      	bmi.n	80050da <find_volume+0x7a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	f000 812b 	beq.w	800531e <find_volume+0x2be>
 80050c8:	f010 0404 	ands.w	r4, r0, #4
 80050cc:	f000 8127 	beq.w	800531e <find_volume+0x2be>
				return FR_WRITE_PROTECTED;
 80050d0:	240a      	movs	r4, #10
}
 80050d2:	4620      	mov	r0, r4
 80050d4:	b003      	add	sp, #12
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80050da:	2000      	movs	r0, #0
 80050dc:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80050de:	f7ff f96b 	bl	80043b8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80050e2:	07c2      	lsls	r2, r0, #31
 80050e4:	f100 811f 	bmi.w	8005326 <find_volume+0x2c6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80050e8:	b10c      	cbz	r4, 80050ee <find_volume+0x8e>
 80050ea:	0743      	lsls	r3, r0, #29
 80050ec:	d4f0      	bmi.n	80050d0 <find_volume+0x70>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80050ee:	f105 020c 	add.w	r2, r5, #12
 80050f2:	2102      	movs	r1, #2
 80050f4:	7868      	ldrb	r0, [r5, #1]
 80050f6:	f7ff f98f 	bl	8004418 <disk_ioctl>
 80050fa:	4604      	mov	r4, r0
 80050fc:	2800      	cmp	r0, #0
 80050fe:	f040 810d 	bne.w	800531c <find_volume+0x2bc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005102:	89ab      	ldrh	r3, [r5, #12]
 8005104:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8005108:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 800510c:	f200 8106 	bhi.w	800531c <find_volume+0x2bc>
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	421a      	tst	r2, r3
 8005114:	f040 8102 	bne.w	800531c <find_volume+0x2bc>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005118:	4601      	mov	r1, r0
 800511a:	4628      	mov	r0, r5
 800511c:	f7ff ff20 	bl	8004f60 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005120:	2802      	cmp	r0, #2
 8005122:	f000 80b4 	beq.w	800528e <find_volume+0x22e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005126:	2804      	cmp	r0, #4
 8005128:	f000 80f8 	beq.w	800531c <find_volume+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800512c:	2801      	cmp	r0, #1
 800512e:	f200 8106 	bhi.w	800533e <find_volume+0x2de>
	bsect = 0;
 8005132:	4626      	mov	r6, r4
	if (fmt == 1) {
 8005134:	2801      	cmp	r0, #1
 8005136:	f000 811c 	beq.w	8005372 <find_volume+0x312>
	rv = rv << 8 | ptr[0];
 800513a:	f895 2058 	ldrb.w	r2, [r5, #88]	; 0x58
 800513e:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005142:	89a8      	ldrh	r0, [r5, #12]
 8005144:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005148:	4298      	cmp	r0, r3
 800514a:	f040 80f8 	bne.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 800514e:	f895 2063 	ldrb.w	r2, [r5, #99]	; 0x63
 8005152:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005156:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800515a:	d109      	bne.n	8005170 <find_volume+0x110>
	rv = rv << 8 | ptr[2];
 800515c:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
	rv = rv << 8 | ptr[1];
 8005160:	f895 3071 	ldrb.w	r3, [r5, #113]	; 0x71
	rv = rv << 8 | ptr[0];
 8005164:	f895 2070 	ldrb.w	r2, [r5, #112]	; 0x70
	rv = rv << 8 | ptr[1];
 8005168:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 800516c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005170:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
		fs->fsize = fasize;
 8005174:	636b      	str	r3, [r5, #52]	; 0x34
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005176:	1e51      	subs	r1, r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005178:	70aa      	strb	r2, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800517a:	2901      	cmp	r1, #1
 800517c:	f200 80df 	bhi.w	800533e <find_volume+0x2de>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005180:	f895 7059 	ldrb.w	r7, [r5, #89]	; 0x59
 8005184:	b2b9      	uxth	r1, r7
 8005186:	8169      	strh	r1, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005188:	2900      	cmp	r1, #0
 800518a:	f000 80d8 	beq.w	800533e <find_volume+0x2de>
 800518e:	1e79      	subs	r1, r7, #1
 8005190:	4239      	tst	r1, r7
 8005192:	f040 80d4 	bne.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 8005196:	f895 e05e 	ldrb.w	lr, [r5, #94]	; 0x5e
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800519a:	0941      	lsrs	r1, r0, #5
	rv = rv << 8 | ptr[0];
 800519c:	f895 c05d 	ldrb.w	ip, [r5, #93]	; 0x5d
 80051a0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 80051a4:	46e6      	mov	lr, ip
 80051a6:	fa0f fc8c 	sxth.w	ip, ip
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80051aa:	fbbe f8f1 	udiv	r8, lr, r1
 80051ae:	fb01 e118 	mls	r1, r1, r8, lr
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80051b2:	f8a5 e008 	strh.w	lr, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80051b6:	b289      	uxth	r1, r1
 80051b8:	2900      	cmp	r1, #0
 80051ba:	f040 80c0 	bne.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 80051be:	f895 9060 	ldrb.w	r9, [r5, #96]	; 0x60
 80051c2:	f895 105f 	ldrb.w	r1, [r5, #95]	; 0x5f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80051c6:	ea51 2109 	orrs.w	r1, r1, r9, lsl #8
 80051ca:	d109      	bne.n	80051e0 <find_volume+0x180>
	rv = rv << 8 | ptr[2];
 80051cc:	f8b5 a06e 	ldrh.w	sl, [r5, #110]	; 0x6e
	rv = rv << 8 | ptr[1];
 80051d0:	f895 106d 	ldrb.w	r1, [r5, #109]	; 0x6d
	rv = rv << 8 | ptr[0];
 80051d4:	f895 906c 	ldrb.w	r9, [r5, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 80051d8:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
	rv = rv << 8 | ptr[0];
 80051dc:	ea49 2101 	orr.w	r1, r9, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80051e0:	f895 a05b 	ldrb.w	sl, [r5, #91]	; 0x5b
 80051e4:	f895 905a 	ldrb.w	r9, [r5, #90]	; 0x5a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80051e8:	ea59 290a 	orrs.w	r9, r9, sl, lsl #8
 80051ec:	f000 80a7 	beq.w	800533e <find_volume+0x2de>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80051f0:	fb03 f202 	mul.w	r2, r3, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80051f4:	44c8      	add	r8, r9
 80051f6:	4490      	add	r8, r2
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80051f8:	4541      	cmp	r1, r8
 80051fa:	f0c0 80a0 	bcc.w	800533e <find_volume+0x2de>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80051fe:	eba1 0108 	sub.w	r1, r1, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005202:	42b9      	cmp	r1, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005204:	fbb1 faf7 	udiv	sl, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005208:	f0c0 8099 	bcc.w	800533e <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800520c:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8005210:	458a      	cmp	sl, r1
 8005212:	f200 818d 	bhi.w	8005530 <find_volume+0x4d0>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005216:	f640 71f5 	movw	r1, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800521a:	eb09 0706 	add.w	r7, r9, r6
		fs->database = bsect + sysect;					/* Data start sector */
 800521e:	44b0      	add	r8, r6
		fs->volbase = bsect;							/* Volume start sector */
 8005220:	63ae      	str	r6, [r5, #56]	; 0x38
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005222:	458a      	cmp	sl, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005224:	f10a 0102 	add.w	r1, sl, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005228:	63ef      	str	r7, [r5, #60]	; 0x3c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800522a:	6329      	str	r1, [r5, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800522c:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005230:	f200 81b7 	bhi.w	80055a2 <find_volume+0x542>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005234:	f1be 0f00 	cmp.w	lr, #0
 8005238:	f000 8081 	beq.w	800533e <find_volume+0x2de>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800523c:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800523e:	eb01 0741 	add.w	r7, r1, r1, lsl #1
 8005242:	f001 0101 	and.w	r1, r1, #1
 8005246:	2601      	movs	r6, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005248:	642a      	str	r2, [r5, #64]	; 0x40
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800524a:	eb01 0257 	add.w	r2, r1, r7, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800524e:	1e41      	subs	r1, r0, #1
 8005250:	440a      	add	r2, r1
 8005252:	fbb2 f0f0 	udiv	r0, r2, r0
 8005256:	4283      	cmp	r3, r0
 8005258:	d371      	bcc.n	800533e <find_volume+0x2de>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800525a:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 800525e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005260:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fs->fsi_flag = 0x80;
 8005264:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8005266:	494c      	ldr	r1, [pc, #304]	; (8005398 <find_volume+0x338>)
	fs->cdir = 0;			/* Initialize current directory */
 8005268:	2000      	movs	r0, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 800526a:	4a4c      	ldr	r2, [pc, #304]	; (800539c <find_volume+0x33c>)
	fs->id = ++Fsid;		/* File system mount ID */
 800526c:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 800526e:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005270:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005272:	6816      	ldr	r6, [r2, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8005274:	6228      	str	r0, [r5, #32]
	fs->id = ++Fsid;		/* File system mount ID */
 8005276:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005278:	42ae      	cmp	r6, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800527a:	800b      	strh	r3, [r1, #0]
 800527c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800527e:	6913      	ldr	r3, [r2, #16]
 8005280:	bf08      	it	eq
 8005282:	6010      	streq	r0, [r2, #0]
 8005284:	429d      	cmp	r5, r3
 8005286:	d14a      	bne.n	800531e <find_volume+0x2be>
 8005288:	2300      	movs	r3, #0
 800528a:	6113      	str	r3, [r2, #16]
 800528c:	e047      	b.n	800531e <find_volume+0x2be>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800528e:	f895 320e 	ldrb.w	r3, [r5, #526]	; 0x20e
 8005292:	2b00      	cmp	r3, #0
 8005294:	d07c      	beq.n	8005390 <find_volume+0x330>
	rv = rv << 8 | ptr[2];
 8005296:	f8b5 2214 	ldrh.w	r2, [r5, #532]	; 0x214
	rv = rv << 8 | ptr[1];
 800529a:	f895 3213 	ldrb.w	r3, [r5, #531]	; 0x213
	rv = rv << 8 | ptr[0];
 800529e:	f895 9212 	ldrb.w	r9, [r5, #530]	; 0x212
	rv = rv << 8 | ptr[1];
 80052a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80052a6:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052aa:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d06c      	beq.n	800538c <find_volume+0x32c>
	rv = rv << 8 | ptr[2];
 80052b2:	f8b5 2224 	ldrh.w	r2, [r5, #548]	; 0x224
	rv = rv << 8 | ptr[1];
 80052b6:	f895 3223 	ldrb.w	r3, [r5, #547]	; 0x223
	rv = rv << 8 | ptr[0];
 80052ba:	f895 8222 	ldrb.w	r8, [r5, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 80052be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80052c2:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052c6:	f895 722e 	ldrb.w	r7, [r5, #558]	; 0x22e
 80052ca:	b14f      	cbz	r7, 80052e0 <find_volume+0x280>
	rv = rv << 8 | ptr[2];
 80052cc:	f8b5 2234 	ldrh.w	r2, [r5, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 80052d0:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
	rv = rv << 8 | ptr[0];
 80052d4:	f895 7232 	ldrb.w	r7, [r5, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 80052d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80052dc:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052e0:	f895 623e 	ldrb.w	r6, [r5, #574]	; 0x23e
 80052e4:	b14e      	cbz	r6, 80052fa <find_volume+0x29a>
	rv = rv << 8 | ptr[2];
 80052e6:	f8b5 2244 	ldrh.w	r2, [r5, #580]	; 0x244
	rv = rv << 8 | ptr[1];
 80052ea:	f895 3243 	ldrb.w	r3, [r5, #579]	; 0x243
	rv = rv << 8 | ptr[0];
 80052ee:	f895 6242 	ldrb.w	r6, [r5, #578]	; 0x242
	rv = rv << 8 | ptr[1];
 80052f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80052f6:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80052fa:	f1b9 0f00 	cmp.w	r9, #0
 80052fe:	d120      	bne.n	8005342 <find_volume+0x2e2>
 8005300:	f1b8 0f00 	cmp.w	r8, #0
 8005304:	d125      	bne.n	8005352 <find_volume+0x2f2>
 8005306:	bb67      	cbnz	r7, 8005362 <find_volume+0x302>
 8005308:	b1ce      	cbz	r6, 800533e <find_volume+0x2de>
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	f7ff fe27 	bl	8004f60 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005312:	2801      	cmp	r0, #1
 8005314:	f67f af0e 	bls.w	8005134 <find_volume+0xd4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005318:	2804      	cmp	r0, #4
 800531a:	d110      	bne.n	800533e <find_volume+0x2de>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800531c:	2401      	movs	r4, #1
}
 800531e:	4620      	mov	r0, r4
 8005320:	b003      	add	sp, #12
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005326:	2403      	movs	r4, #3
}
 8005328:	4620      	mov	r0, r4
 800532a:	b003      	add	sp, #12
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005330:	240c      	movs	r4, #12
 8005332:	e7f4      	b.n	800531e <find_volume+0x2be>
					*path = ++tt;
 8005334:	3501      	adds	r5, #1
 8005336:	6005      	str	r5, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005338:	e6b4      	b.n	80050a4 <find_volume+0x44>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800533a:	f040 80f3 	bne.w	8005524 <find_volume+0x4c4>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800533e:	240d      	movs	r4, #13
 8005340:	e7ed      	b.n	800531e <find_volume+0x2be>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005342:	4649      	mov	r1, r9
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff fe0b 	bl	8004f60 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800534a:	2801      	cmp	r0, #1
 800534c:	d8d8      	bhi.n	8005300 <find_volume+0x2a0>
 800534e:	464e      	mov	r6, r9
 8005350:	e6f0      	b.n	8005134 <find_volume+0xd4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005352:	4641      	mov	r1, r8
 8005354:	4628      	mov	r0, r5
 8005356:	f7ff fe03 	bl	8004f60 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800535a:	2801      	cmp	r0, #1
 800535c:	d8d3      	bhi.n	8005306 <find_volume+0x2a6>
 800535e:	4646      	mov	r6, r8
 8005360:	e6e8      	b.n	8005134 <find_volume+0xd4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005362:	4639      	mov	r1, r7
 8005364:	4628      	mov	r0, r5
 8005366:	f7ff fdfb 	bl	8004f60 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800536a:	2801      	cmp	r0, #1
 800536c:	d8cc      	bhi.n	8005308 <find_volume+0x2a8>
 800536e:	463e      	mov	r6, r7
 8005370:	e6e0      	b.n	8005134 <find_volume+0xd4>
 8005372:	f105 0356 	add.w	r3, r5, #86	; 0x56
 8005376:	462f      	mov	r7, r5
 8005378:	f105 018b 	add.w	r1, r5, #139	; 0x8b
 800537c:	e001      	b.n	8005382 <find_volume+0x322>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800537e:	428b      	cmp	r3, r1
 8005380:	d00e      	beq.n	80053a0 <find_volume+0x340>
 8005382:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005386:	2a00      	cmp	r2, #0
 8005388:	d0f9      	beq.n	800537e <find_volume+0x31e>
 800538a:	e7d8      	b.n	800533e <find_volume+0x2de>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800538c:	4698      	mov	r8, r3
 800538e:	e79a      	b.n	80052c6 <find_volume+0x266>
 8005390:	46a1      	mov	r9, r4
 8005392:	e78a      	b.n	80052aa <find_volume+0x24a>
 8005394:	20000130 	.word	0x20000130
 8005398:	20000154 	.word	0x20000154
 800539c:	20000134 	.word	0x20000134
	rv = rv << 8 | ptr[0];
 80053a0:	f895 20b5 	ldrb.w	r2, [r5, #181]	; 0xb5
 80053a4:	f895 30b4 	ldrb.w	r3, [r5, #180]	; 0xb4
 80053a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80053ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b0:	d1c5      	bne.n	800533e <find_volume+0x2de>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80053b2:	f895 20b8 	ldrb.w	r2, [r5, #184]	; 0xb8
 80053b6:	2301      	movs	r3, #1
 80053b8:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 80053bc:	4093      	lsls	r3, r2
 80053be:	4563      	cmp	r3, ip
 80053c0:	d1bd      	bne.n	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[4];
 80053c2:	f8d5 e098 	ldr.w	lr, [r5, #152]	; 0x98
	rv = rv << 8 | ptr[1];
 80053c6:	2300      	movs	r3, #0
 80053c8:	f895 2095 	ldrb.w	r2, [r5, #149]	; 0x95
	rv = rv << 8 | ptr[3];
 80053cc:	f895 8097 	ldrb.w	r8, [r5, #151]	; 0x97
	rv = rv << 8 | ptr[2];
 80053d0:	f895 0096 	ldrb.w	r0, [r5, #150]	; 0x96
 80053d4:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
	rv = rv << 8 | ptr[0];
 80053d8:	f895 a094 	ldrb.w	sl, [r5, #148]	; 0x94
	rv = rv << 8 | ptr[1];
 80053dc:	e9cd 2300 	strd	r2, r3, [sp]
	rv = rv << 8 | ptr[2];
 80053e0:	ea4f 431e 	mov.w	r3, lr, lsr #16
	rv = rv << 8 | ptr[1];
 80053e4:	9a00      	ldr	r2, [sp, #0]
	rv = rv << 8 | ptr[2];
 80053e6:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
	rv = rv << 8 | ptr[1];
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80053f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
	rv = rv << 8 | ptr[0];
 80053f4:	ea4a 2802 	orr.w	r8, sl, r2, lsl #8
 80053f8:	021b      	lsls	r3, r3, #8
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80053fa:	eb18 0806 	adds.w	r8, r8, r6
	rv = rv << 8 | ptr[0];
 80053fe:	ea43 6912 	orr.w	r9, r3, r2, lsr #24
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8005402:	f149 0900 	adc.w	r9, r9, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8005406:	f1b9 0f01 	cmp.w	r9, #1
 800540a:	bf08      	it	eq
 800540c:	f1b8 0f00 	cmpeq.w	r8, #0
 8005410:	d295      	bcs.n	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 8005412:	f8b5 10a2 	ldrh.w	r1, [r5, #162]	; 0xa2
	rv = rv << 8 | ptr[1];
 8005416:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
	rv = rv << 8 | ptr[0];
 800541a:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
	rv = rv << 8 | ptr[1];
 800541e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8005422:	f895 10ba 	ldrb.w	r1, [r5, #186]	; 0xba
	rv = rv << 8 | ptr[0];
 8005426:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800542a:	2901      	cmp	r1, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800542c:	70a9      	strb	r1, [r5, #2]
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800542e:	636b      	str	r3, [r5, #52]	; 0x34
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8005430:	d185      	bne.n	800533e <find_volume+0x2de>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8005432:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
 8005436:	4099      	lsls	r1, r3
 8005438:	b28b      	uxth	r3, r1
 800543a:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800543c:	2b00      	cmp	r3, #0
 800543e:	f43f af7e 	beq.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 8005442:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
	rv = rv << 8 | ptr[1];
 8005446:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
	rv = rv << 8 | ptr[0];
 800544a:	f895 e0a8 	ldrb.w	lr, [r5, #168]	; 0xa8
	rv = rv << 8 | ptr[1];
 800544e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005452:	4a7d      	ldr	r2, [pc, #500]	; (8005648 <find_volume+0x5e8>)
	rv = rv << 8 | ptr[0];
 8005454:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005458:	4596      	cmp	lr, r2
 800545a:	f63f af70 	bhi.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[1];
 800545e:	f895 a0a5 	ldrb.w	sl, [r5, #165]	; 0xa5
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005462:	b28a      	uxth	r2, r1
	rv = rv << 8 | ptr[2];
 8005464:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	rv = rv << 8 | ptr[0];
 8005468:	f895 00a4 	ldrb.w	r0, [r5, #164]	; 0xa4
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800546c:	4611      	mov	r1, r2
	rv = rv << 8 | ptr[1];
 800546e:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
		fs->n_fatent = nclst + 2;
 8005472:	f10e 0202 	add.w	r2, lr, #2
	rv = rv << 8 | ptr[2];
 8005476:	f8b5 a09e 	ldrh.w	sl, [r5, #158]	; 0x9e
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800547a:	fb0e fb01 	mul.w	fp, lr, r1
	rv = rv << 8 | ptr[0];
 800547e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	rv = rv << 8 | ptr[1];
 8005482:	f895 309d 	ldrb.w	r3, [r5, #157]	; 0x9d
		fs->n_fatent = nclst + 2;
 8005486:	632a      	str	r2, [r5, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005488:	2200      	movs	r2, #0
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800548a:	4430      	add	r0, r6
	rv = rv << 8 | ptr[1];
 800548c:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
	rv = rv << 8 | ptr[0];
 8005490:	f895 a09c 	ldrb.w	sl, [r5, #156]	; 0x9c
		fs->volbase = bsect;
 8005494:	63ae      	str	r6, [r5, #56]	; 0x38
	rv = rv << 8 | ptr[0];
 8005496:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800549a:	4613      	mov	r3, r2
 800549c:	eb10 020b 	adds.w	r2, r0, fp
 80054a0:	9100      	str	r1, [sp, #0]
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80054a2:	4456      	add	r6, sl
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80054a4:	6468      	str	r0, [r5, #68]	; 0x44
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80054a6:	f143 0300 	adc.w	r3, r3, #0
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80054aa:	63ee      	str	r6, [r5, #60]	; 0x3c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80054ac:	4599      	cmp	r9, r3
 80054ae:	bf08      	it	eq
 80054b0:	4590      	cmpeq	r8, r2
 80054b2:	f4ff af44 	bcc.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 80054b6:	f8b5 60ae 	ldrh.w	r6, [r5, #174]	; 0xae
	rv = rv << 8 | ptr[1];
 80054ba:	f895 20ad 	ldrb.w	r2, [r5, #173]	; 0xad
	rv = rv << 8 | ptr[0];
 80054be:	f895 30ac 	ldrb.w	r3, [r5, #172]	; 0xac
	rv = rv << 8 | ptr[1];
 80054c2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	rv = rv << 8 | ptr[0];
 80054c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	clst -= 2;
 80054ca:	1e9a      	subs	r2, r3, #2
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80054cc:	642b      	str	r3, [r5, #64]	; 0x40
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80054ce:	4596      	cmp	lr, r2
 80054d0:	d970      	bls.n	80055b4 <find_volume+0x554>
	return clst * fs->csize + fs->database;
 80054d2:	9b00      	ldr	r3, [sp, #0]
 80054d4:	fb02 0103 	mla	r1, r2, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80054d8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80054da:	428b      	cmp	r3, r1
 80054dc:	d007      	beq.n	80054ee <find_volume+0x48e>
 80054de:	4628      	mov	r0, r5
 80054e0:	f7ff f9b4 	bl	800484c <move_window.part.0>
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80054e4:	2800      	cmp	r0, #0
 80054e6:	f47f af19 	bne.w	800531c <find_volume+0x2bc>
 80054ea:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80054ee:	2300      	movs	r3, #0
 80054f0:	f1bc 0f00 	cmp.w	ip, #0
 80054f4:	d105      	bne.n	8005502 <find_volume+0x4a2>
 80054f6:	e722      	b.n	800533e <find_volume+0x2de>
 80054f8:	4563      	cmp	r3, ip
 80054fa:	f107 0720 	add.w	r7, r7, #32
 80054fe:	f4bf af1c 	bcs.w	800533a <find_volume+0x2da>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8005502:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8005506:	3320      	adds	r3, #32
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8005508:	2a81      	cmp	r2, #129	; 0x81
 800550a:	d1f5      	bne.n	80054f8 <find_volume+0x498>
	rv = rv << 8 | ptr[2];
 800550c:	f8b7 0062 	ldrh.w	r0, [r7, #98]	; 0x62
	rv = rv << 8 | ptr[1];
 8005510:	f897 1061 	ldrb.w	r1, [r7, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8005514:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
	rv = rv << 8 | ptr[1];
 8005518:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800551c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8005520:	2a02      	cmp	r2, #2
 8005522:	d1e9      	bne.n	80054f8 <find_volume+0x498>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
		fmt = FS_EXFAT;			/* FAT sub-type */
 8005528:	2604      	movs	r6, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800552a:	e9c5 3306 	strd	r3, r3, [r5, #24]
		fmt = FS_EXFAT;			/* FAT sub-type */
 800552e:	e69a      	b.n	8005266 <find_volume+0x206>
	rv = rv << 8 | ptr[0];
 8005530:	f895 b077 	ldrb.w	fp, [r5, #119]	; 0x77
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005534:	eb09 0106 	add.w	r1, r9, r6
	rv = rv << 8 | ptr[0];
 8005538:	f895 e076 	ldrb.w	lr, [r5, #118]	; 0x76
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800553c:	f10a 0202 	add.w	r2, sl, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005540:	63e9      	str	r1, [r5, #60]	; 0x3c
		fs->database = bsect + sysect;					/* Data start sector */
 8005542:	eb06 0708 	add.w	r7, r6, r8
	rv = rv << 8 | ptr[0];
 8005546:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800554a:	632a      	str	r2, [r5, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800554c:	646f      	str	r7, [r5, #68]	; 0x44
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800554e:	ea4c 010e 	orr.w	r1, ip, lr
		fs->volbase = bsect;							/* Volume start sector */
 8005552:	63ae      	str	r6, [r5, #56]	; 0x38
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005554:	b209      	sxth	r1, r1
 8005556:	2900      	cmp	r1, #0
 8005558:	f47f aef1 	bne.w	800533e <find_volume+0x2de>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800555c:	1e41      	subs	r1, r0, #1
	rv = rv << 8 | ptr[2];
 800555e:	f8b5 c07a 	ldrh.w	ip, [r5, #122]	; 0x7a
	rv = rv << 8 | ptr[1];
 8005562:	f895 7079 	ldrb.w	r7, [r5, #121]	; 0x79
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005566:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	rv = rv << 8 | ptr[0];
 800556a:	f895 1078 	ldrb.w	r1, [r5, #120]	; 0x78
	rv = rv << 8 | ptr[1];
 800556e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005572:	fbb2 f0f0 	udiv	r0, r2, r0
	rv = rv << 8 | ptr[0];
 8005576:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800557a:	4283      	cmp	r3, r0
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800557c:	6429      	str	r1, [r5, #64]	; 0x40
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800557e:	f4ff aede 	bcc.w	800533e <find_volume+0x2de>
	rv = rv << 8 | ptr[0];
 8005582:	f895 007d 	ldrb.w	r0, [r5, #125]	; 0x7d
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
	rv = rv << 8 | ptr[0];
 800558a:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
		fs->fsi_flag = 0x80;
 800558e:	2180      	movs	r1, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005590:	61ea      	str	r2, [r5, #28]
	rv = rv << 8 | ptr[0];
 8005592:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005596:	61aa      	str	r2, [r5, #24]
		fs->fsi_flag = 0x80;
 8005598:	7129      	strb	r1, [r5, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d00c      	beq.n	80055b8 <find_volume+0x558>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800559e:	2603      	movs	r6, #3
 80055a0:	e661      	b.n	8005266 <find_volume+0x206>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80055a2:	f1be 0f00 	cmp.w	lr, #0
 80055a6:	f43f aeca 	beq.w	800533e <find_volume+0x2de>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80055aa:	4417      	add	r7, r2
 80055ac:	2602      	movs	r6, #2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80055ae:	004a      	lsls	r2, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80055b0:	642f      	str	r7, [r5, #64]	; 0x40
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80055b2:	e64c      	b.n	800524e <find_volume+0x1ee>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80055b4:	2100      	movs	r1, #0
 80055b6:	e78f      	b.n	80054d8 <find_volume+0x478>
			&& move_window(fs, bsect + 1) == FR_OK)
 80055b8:	1c71      	adds	r1, r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80055ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80055bc:	4299      	cmp	r1, r3
 80055be:	d004      	beq.n	80055ca <find_volume+0x56a>
 80055c0:	4628      	mov	r0, r5
 80055c2:	f7ff f943 	bl	800484c <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d1e9      	bne.n	800559e <find_volume+0x53e>
	rv = rv << 8 | ptr[0];
 80055ca:	f895 124b 	ldrb.w	r1, [r5, #587]	; 0x24b
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80055ce:	f64a 2255 	movw	r2, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80055d2:	f895 324a 	ldrb.w	r3, [r5, #586]	; 0x24a
			fs->fsi_flag = 0;
 80055d6:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
 80055d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			fs->fsi_flag = 0;
 80055dc:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80055de:	4293      	cmp	r3, r2
 80055e0:	d1dd      	bne.n	800559e <find_volume+0x53e>
	rv = rv << 8 | ptr[2];
 80055e2:	f8b5 104e 	ldrh.w	r1, [r5, #78]	; 0x4e
	rv = rv << 8 | ptr[1];
 80055e6:	f895 204d 	ldrb.w	r2, [r5, #77]	; 0x4d
	rv = rv << 8 | ptr[0];
 80055ea:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
	rv = rv << 8 | ptr[1];
 80055ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80055f2:	4916      	ldr	r1, [pc, #88]	; (800564c <find_volume+0x5ec>)
	rv = rv << 8 | ptr[0];
 80055f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80055f8:	428b      	cmp	r3, r1
 80055fa:	d1d0      	bne.n	800559e <find_volume+0x53e>
	rv = rv << 8 | ptr[2];
 80055fc:	f8b5 1232 	ldrh.w	r1, [r5, #562]	; 0x232
	rv = rv << 8 | ptr[1];
 8005600:	f895 2231 	ldrb.w	r2, [r5, #561]	; 0x231
	rv = rv << 8 | ptr[0];
 8005604:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
	rv = rv << 8 | ptr[1];
 8005608:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800560c:	4910      	ldr	r1, [pc, #64]	; (8005650 <find_volume+0x5f0>)
	rv = rv << 8 | ptr[0];
 800560e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005612:	428b      	cmp	r3, r1
 8005614:	d1c3      	bne.n	800559e <find_volume+0x53e>
	rv = rv << 8 | ptr[1];
 8005616:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800561a:	2603      	movs	r6, #3
	rv = rv << 8 | ptr[1];
 800561c:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
	rv = rv << 8 | ptr[2];
 8005620:	f8b5 0236 	ldrh.w	r0, [r5, #566]	; 0x236
 8005624:	f8b5 123a 	ldrh.w	r1, [r5, #570]	; 0x23a
	rv = rv << 8 | ptr[1];
 8005628:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 800562c:	f895 2234 	ldrb.w	r2, [r5, #564]	; 0x234
	rv = rv << 8 | ptr[1];
 8005630:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8005634:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
 8005638:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800563c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005640:	e9c5 3206 	strd	r3, r2, [r5, #24]
 8005644:	e60f      	b.n	8005266 <find_volume+0x206>
 8005646:	bf00      	nop
 8005648:	7ffffffd 	.word	0x7ffffffd
 800564c:	41615252 	.word	0x41615252
 8005650:	61417272 	.word	0x61417272

08005654 <dir_sdi>:
{
 8005654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 8005658:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800565c:	f898 3000 	ldrb.w	r3, [r8]
 8005660:	2b04      	cmp	r3, #4
 8005662:	bf0c      	ite	eq
 8005664:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8005668:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800566c:	428a      	cmp	r2, r1
 800566e:	d922      	bls.n	80056b6 <dir_sdi+0x62>
 8005670:	460c      	mov	r4, r1
 8005672:	06e1      	lsls	r1, r4, #27
 8005674:	d11f      	bne.n	80056b6 <dir_sdi+0x62>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005676:	6885      	ldr	r5, [r0, #8]
 8005678:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800567a:	6304      	str	r4, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800567c:	b1f5      	cbz	r5, 80056bc <dir_sdi+0x68>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800567e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8005682:	f8b8 900c 	ldrh.w	r9, [r8, #12]
 8005686:	fb09 f903 	mul.w	r9, r9, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 800568a:	454c      	cmp	r4, r9
 800568c:	f0c0 80f6 	bcc.w	800587c <dir_sdi+0x228>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005690:	2d01      	cmp	r5, #1
 8005692:	d910      	bls.n	80056b6 <dir_sdi+0x62>
 8005694:	eba4 0409 	sub.w	r4, r4, r9
 8005698:	4647      	mov	r7, r8
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	429d      	cmp	r5, r3
 800569e:	d20a      	bcs.n	80056b6 <dir_sdi+0x62>
		switch (fs->fs_type) {
 80056a0:	783b      	ldrb	r3, [r7, #0]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d806      	bhi.n	80056b6 <dir_sdi+0x62>
 80056a8:	e8df f003 	tbb	[pc, r3]
 80056ac:	2559849f 	.word	0x2559849f
		dp->sect = clust2sect(fs, clst);
 80056b0:	2300      	movs	r3, #0
 80056b2:	e9c6 530d 	strd	r5, r3, [r6, #52]	; 0x34
		switch (fs->fs_type) {
 80056b6:	2002      	movs	r0, #2
}
 80056b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f200 80cb 	bhi.w	8005858 <dir_sdi+0x204>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80056c2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80056c6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80056ca:	d9f4      	bls.n	80056b6 <dir_sdi+0x62>
		dp->sect = fs->dirbase;
 80056cc:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80056d0:	63b2      	str	r2, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 80056d2:	6375      	str	r5, [r6, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	d0ee      	beq.n	80056b6 <dir_sdi+0x62>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056d8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056dc:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return FR_OK;
 80056e0:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056e2:	fbb4 f3f1 	udiv	r3, r4, r1
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056e6:	fb01 4413 	mls	r4, r1, r3, r4
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056ea:	4413      	add	r3, r2
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056ec:	4444      	add	r4, r8
 80056ee:	e9c6 340e 	strd	r3, r4, [r6, #56]	; 0x38
}
 80056f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (obj->objsize) {
 80056f6:	e9d6 bc04 	ldrd	fp, ip, [r6, #16]
 80056fa:	ea5b 030c 	orrs.w	r3, fp, ip
 80056fe:	d0da      	beq.n	80056b6 <dir_sdi+0x62>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005700:	79f3      	ldrb	r3, [r6, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005702:	68b2      	ldr	r2, [r6, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005704:	2b02      	cmp	r3, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005706:	eba5 0a02 	sub.w	sl, r5, r2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800570a:	89ba      	ldrh	r2, [r7, #12]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800570c:	f000 80c5 	beq.w	800589a <dir_sdi+0x246>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005710:	2b03      	cmp	r3, #3
 8005712:	f000 80a9 	beq.w	8005868 <dir_sdi+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8005716:	69f3      	ldr	r3, [r6, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 80cd 	bne.w	80058b8 <dir_sdi+0x264>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800571e:	0891      	lsrs	r1, r2, #2
 8005720:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005724:	fbb5 f1f1 	udiv	r1, r5, r1
 8005728:	4401      	add	r1, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800572a:	4299      	cmp	r1, r3
 800572c:	d006      	beq.n	800573c <dir_sdi+0xe8>
 800572e:	4638      	mov	r0, r7
 8005730:	f7ff f88c 	bl	800484c <move_window.part.0>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005734:	2800      	cmp	r0, #0
 8005736:	f040 809e 	bne.w	8005876 <dir_sdi+0x222>
 800573a:	89ba      	ldrh	r2, [r7, #12]
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800573c:	00ad      	lsls	r5, r5, #2
 800573e:	374c      	adds	r7, #76	; 0x4c
 8005740:	fbb5 f3f2 	udiv	r3, r5, r2
 8005744:	fb02 5213 	mls	r2, r2, r3, r5
 8005748:	18bb      	adds	r3, r7, r2
	rv = rv << 8 | ptr[0];
 800574a:	5cbd      	ldrb	r5, [r7, r2]
	rv = rv << 8 | ptr[2];
 800574c:	885a      	ldrh	r2, [r3, #2]
	rv = rv << 8 | ptr[1];
 800574e:	785b      	ldrb	r3, [r3, #1]
 8005750:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8005754:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005758:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800575c:	e01e      	b.n	800579c <dir_sdi+0x148>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800575e:	89b8      	ldrh	r0, [r7, #12]
 8005760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005762:	0881      	lsrs	r1, r0, #2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005766:	fbb5 f1f1 	udiv	r1, r5, r1
 800576a:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800576c:	4299      	cmp	r1, r3
 800576e:	d005      	beq.n	800577c <dir_sdi+0x128>
 8005770:	4638      	mov	r0, r7
 8005772:	f7ff f86b 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005776:	2800      	cmp	r0, #0
 8005778:	d17d      	bne.n	8005876 <dir_sdi+0x222>
 800577a:	89b8      	ldrh	r0, [r7, #12]
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800577c:	00ad      	lsls	r5, r5, #2
 800577e:	374c      	adds	r7, #76	; 0x4c
 8005780:	fbb5 f3f0 	udiv	r3, r5, r0
 8005784:	fb00 5013 	mls	r0, r0, r3, r5
 8005788:	183a      	adds	r2, r7, r0
	rv = rv << 8 | ptr[0];
 800578a:	5c3d      	ldrb	r5, [r7, r0]
	rv = rv << 8 | ptr[2];
 800578c:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 800578e:	7853      	ldrb	r3, [r2, #1]
 8005790:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8005794:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005798:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800579c:	2d01      	cmp	r5, #1
 800579e:	d98a      	bls.n	80056b6 <dir_sdi+0x62>
 80057a0:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	d986      	bls.n	80056b6 <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 80057a8:	45a1      	cmp	r9, r4
 80057aa:	d869      	bhi.n	8005880 <dir_sdi+0x22c>
	FATFS *fs = obj->fs;
 80057ac:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80057ae:	eba4 0409 	sub.w	r4, r4, r9
 80057b2:	e772      	b.n	800569a <dir_sdi+0x46>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057b4:	89b8      	ldrh	r0, [r7, #12]
 80057b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b8:	0841      	lsrs	r1, r0, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057bc:	fbb5 f1f1 	udiv	r1, r5, r1
 80057c0:	4411      	add	r1, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057c2:	4299      	cmp	r1, r3
 80057c4:	d005      	beq.n	80057d2 <dir_sdi+0x17e>
 80057c6:	4638      	mov	r0, r7
 80057c8:	f7ff f840 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d152      	bne.n	8005876 <dir_sdi+0x222>
 80057d0:	89b8      	ldrh	r0, [r7, #12]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80057d2:	006d      	lsls	r5, r5, #1
 80057d4:	374c      	adds	r7, #76	; 0x4c
 80057d6:	fbb5 f3f0 	udiv	r3, r5, r0
 80057da:	fb00 5013 	mls	r0, r0, r3, r5
 80057de:	183b      	adds	r3, r7, r0
	rv = rv << 8 | ptr[0];
 80057e0:	5c3d      	ldrb	r5, [r7, r0]
 80057e2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80057e4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			break;
 80057e8:	e7d8      	b.n	800579c <dir_sdi+0x148>
			bc = (UINT)clst; bc += bc / 2;
 80057ea:	eb05 0b55 	add.w	fp, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057ee:	89ba      	ldrh	r2, [r7, #12]
 80057f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057f2:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057f6:	fbbb f3f2 	udiv	r3, fp, r2
 80057fa:	1819      	adds	r1, r3, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057fc:	4561      	cmp	r1, ip
 80057fe:	d009      	beq.n	8005814 <dir_sdi+0x1c0>
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff f823 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005806:	bbb0      	cbnz	r0, 8005876 <dir_sdi+0x222>
 8005808:	89ba      	ldrh	r2, [r7, #12]
 800580a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800580c:	f8d7 c048 	ldr.w	ip, [r7, #72]	; 0x48
 8005810:	fbbb f3f2 	udiv	r3, fp, r2
			wc = fs->win[bc++ % SS(fs)];
 8005814:	f10b 0a01 	add.w	sl, fp, #1
 8005818:	fb02 b313 	mls	r3, r2, r3, fp
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800581c:	fbba fef2 	udiv	lr, sl, r2
 8005820:	eb0e 0100 	add.w	r1, lr, r0
			wc = fs->win[bc++ % SS(fs)];
 8005824:	443b      	add	r3, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005826:	4561      	cmp	r1, ip
			wc = fs->win[bc++ % SS(fs)];
 8005828:	f893 b04c 	ldrb.w	fp, [r3, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800582c:	d006      	beq.n	800583c <dir_sdi+0x1e8>
 800582e:	4638      	mov	r0, r7
 8005830:	f7ff f80c 	bl	800484c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005834:	b9f8      	cbnz	r0, 8005876 <dir_sdi+0x222>
 8005836:	89ba      	ldrh	r2, [r7, #12]
 8005838:	fbba fef2 	udiv	lr, sl, r2
			wc |= fs->win[bc % SS(fs)] << 8;
 800583c:	fb02 aa1e 	mls	sl, r2, lr, sl
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005840:	07ea      	lsls	r2, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8005842:	4457      	add	r7, sl
 8005844:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005848:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800584c:	bf4c      	ite	mi
 800584e:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 8005852:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
 8005856:	e7a1      	b.n	800579c <dir_sdi+0x148>
		clst = fs->dirbase;
 8005858:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800585c:	71c5      	strb	r5, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800585e:	2b00      	cmp	r3, #0
 8005860:	f43f af2f 	beq.w	80056c2 <dir_sdi+0x6e>
 8005864:	461d      	mov	r5, r3
 8005866:	e70a      	b.n	800567e <dir_sdi+0x2a>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005868:	69b3      	ldr	r3, [r6, #24]
 800586a:	459a      	cmp	sl, r3
 800586c:	f4bf af53 	bcs.w	8005716 <dir_sdi+0xc2>
					val = clst + 1; 	/* Generate the value */
 8005870:	3501      	adds	r5, #1
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005872:	1c6b      	adds	r3, r5, #1
 8005874:	d192      	bne.n	800579c <dir_sdi+0x148>
 8005876:	2001      	movs	r0, #1
}
 8005878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587c:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005880:	3b02      	subs	r3, #2
	clst -= 2;
 8005882:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005884:	429a      	cmp	r2, r3
 8005886:	f4bf af13 	bcs.w	80056b0 <dir_sdi+0x5c>
	return clst * fs->csize + fs->database;
 800588a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800588e:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8005892:	fb02 1203 	mla	r2, r2, r3, r1
		dp->sect = clust2sect(fs, clst);
 8005896:	63b2      	str	r2, [r6, #56]	; 0x38
 8005898:	e71b      	b.n	80056d2 <dir_sdi+0x7e>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800589a:	f11b 30ff 	adds.w	r0, fp, #4294967295
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	f14c 31ff 	adc.w	r1, ip, #4294967295
 80058a6:	f7fa fcb7 	bl	8000218 <__aeabi_uldivmod>
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	fbb0 f0f3 	udiv	r0, r0, r3
					if (cofs <= clen) {
 80058b0:	4582      	cmp	sl, r0
 80058b2:	f63f af00 	bhi.w	80056b6 <dir_sdi+0x62>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80058b6:	d1db      	bne.n	8005870 <dir_sdi+0x21c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80058b8:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f6bf aefa 	bge.w	80056b6 <dir_sdi+0x62>
		while (ofs >= csz) {				/* Follow cluster chain */
 80058c2:	45a1      	cmp	r9, r4
 80058c4:	d803      	bhi.n	80058ce <dir_sdi+0x27a>
	FATFS *fs = obj->fs;
 80058c6:	6837      	ldr	r7, [r6, #0]
 80058c8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80058cc:	e76f      	b.n	80057ae <dir_sdi+0x15a>
		while (ofs >= csz) {				/* Follow cluster chain */
 80058ce:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
	clst -= 2;
 80058d2:	4a01      	ldr	r2, [pc, #4]	; (80058d8 <dir_sdi+0x284>)
 80058d4:	e7d9      	b.n	800588a <dir_sdi+0x236>
 80058d6:	bf00      	nop
 80058d8:	7ffffffd 	.word	0x7ffffffd

080058dc <dir_find>:
{
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058e0:	2100      	movs	r1, #0
{
 80058e2:	b087      	sub	sp, #28
 80058e4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80058e6:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058e8:	f7ff feb4 	bl	8005654 <dir_sdi>
	if (res != FR_OK) return res;
 80058ec:	4680      	mov	r8, r0
 80058ee:	bb00      	cbnz	r0, 8005932 <dir_find+0x56>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80058f0:	782b      	ldrb	r3, [r5, #0]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	f000 819f 	beq.w	8005c36 <dir_find+0x35a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80058f8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80058fc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	9002      	str	r0, [sp, #8]
 8005904:	46ca      	mov	sl, r9
 8005906:	46bb      	mov	fp, r7
 8005908:	64e3      	str	r3, [r4, #76]	; 0x4c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800590a:	6cae      	ldr	r6, [r5, #72]	; 0x48
 800590c:	455e      	cmp	r6, fp
 800590e:	d016      	beq.n	800593e <dir_find+0x62>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005910:	78eb      	ldrb	r3, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005912:	f105 014c 	add.w	r1, r5, #76	; 0x4c
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 8097 	bne.w	8005a4a <dir_find+0x16e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800591c:	2301      	movs	r3, #1
 800591e:	465a      	mov	r2, fp
 8005920:	7868      	ldrb	r0, [r5, #1]
 8005922:	f7fe fd5d 	bl	80043e0 <disk_read>
 8005926:	b140      	cbz	r0, 800593a <dir_find+0x5e>
			fs->winsect = sector;
 8005928:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800592c:	f04f 0801 	mov.w	r8, #1
			fs->winsect = sector;
 8005930:	64ab      	str	r3, [r5, #72]	; 0x48
}
 8005932:	4640      	mov	r0, r8
 8005934:	b007      	add	sp, #28
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800593a:	f8c5 b048 	str.w	fp, [r5, #72]	; 0x48
		c = dp->dir[DIR_Name];
 800593e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8005940:	7837      	ldrb	r7, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005942:	2f00      	cmp	r7, #0
 8005944:	d037      	beq.n	80059b6 <dir_find+0xda>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005946:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005948:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800594a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800594e:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005950:	d004      	beq.n	800595c <dir_find+0x80>
 8005952:	0711      	lsls	r1, r2, #28
 8005954:	d535      	bpl.n	80059c2 <dir_find+0xe6>
 8005956:	2b0f      	cmp	r3, #15
 8005958:	f000 80a7 	beq.w	8005aaa <dir_find+0x1ce>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800595c:	f04f 33ff 	mov.w	r3, #4294967295
 8005960:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8005964:	64e3      	str	r3, [r4, #76]	; 0x4c
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005966:	6b26      	ldr	r6, [r4, #48]	; 0x30
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005968:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800596c:	3620      	adds	r6, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800596e:	f1bb 0f00 	cmp.w	fp, #0
 8005972:	d020      	beq.n	80059b6 <dir_find+0xda>
	FATFS *fs = dp->obj.fs;
 8005974:	6827      	ldr	r7, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005976:	783b      	ldrb	r3, [r7, #0]
 8005978:	2b04      	cmp	r3, #4
 800597a:	bf0c      	ite	eq
 800597c:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 8005980:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8005984:	429e      	cmp	r6, r3
 8005986:	d216      	bcs.n	80059b6 <dir_find+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005988:	89bb      	ldrh	r3, [r7, #12]
 800598a:	fbb6 f2f3 	udiv	r2, r6, r3
 800598e:	fb03 6312 	mls	r3, r3, r2, r6
 8005992:	b95b      	cbnz	r3, 80059ac <dir_find+0xd0>
		dp->sect++;				/* Next sector */
 8005994:	f10b 0b01 	add.w	fp, fp, #1
		if (!dp->clust) {		/* Static table */
 8005998:	6b61      	ldr	r1, [r4, #52]	; 0x34
		dp->sect++;				/* Next sector */
 800599a:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 800599e:	2900      	cmp	r1, #0
 80059a0:	d15f      	bne.n	8005a62 <dir_find+0x186>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80059a2:	893a      	ldrh	r2, [r7, #8]
 80059a4:	ebb2 1f56 	cmp.w	r2, r6, lsr #5
 80059a8:	f240 8140 	bls.w	8005c2c <dir_find+0x350>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059ac:	374c      	adds	r7, #76	; 0x4c
	dp->dptr = ofs;						/* Current entry */
 80059ae:	6326      	str	r6, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059b0:	441f      	add	r7, r3
 80059b2:	63e7      	str	r7, [r4, #60]	; 0x3c
	} while (res == FR_OK);
 80059b4:	e7a9      	b.n	800590a <dir_find+0x2e>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059b6:	f04f 0804 	mov.w	r8, #4
}
 80059ba:	4640      	mov	r0, r8
 80059bc:	b007      	add	sp, #28
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 80059c2:	2b0f      	cmp	r3, #15
 80059c4:	d071      	beq.n	8005aaa <dir_find+0x1ce>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80059c6:	f1ba 0f00 	cmp.w	sl, #0
 80059ca:	f000 80de 	beq.w	8005b8a <dir_find+0x2ae>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80059ce:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80059d2:	07da      	lsls	r2, r3, #31
 80059d4:	d4c2      	bmi.n	800595c <dir_find+0x80>
	} while (--cnt && r == 0);
 80059d6:	7832      	ldrb	r2, [r6, #0]
 80059d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80059dc:	429a      	cmp	r2, r3
 80059de:	d1bd      	bne.n	800595c <dir_find+0x80>
 80059e0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80059e4:	7873      	ldrb	r3, [r6, #1]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d1b8      	bne.n	800595c <dir_find+0x80>
 80059ea:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80059ee:	78b3      	ldrb	r3, [r6, #2]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1b3      	bne.n	800595c <dir_find+0x80>
 80059f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059f8:	78f3      	ldrb	r3, [r6, #3]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d1ae      	bne.n	800595c <dir_find+0x80>
 80059fe:	7932      	ldrb	r2, [r6, #4]
 8005a00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d1a9      	bne.n	800595c <dir_find+0x80>
 8005a08:	7972      	ldrb	r2, [r6, #5]
 8005a0a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d1a4      	bne.n	800595c <dir_find+0x80>
 8005a12:	79b2      	ldrb	r2, [r6, #6]
 8005a14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d19f      	bne.n	800595c <dir_find+0x80>
 8005a1c:	79f2      	ldrb	r2, [r6, #7]
 8005a1e:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d19a      	bne.n	800595c <dir_find+0x80>
 8005a26:	7a32      	ldrb	r2, [r6, #8]
 8005a28:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d195      	bne.n	800595c <dir_find+0x80>
 8005a30:	7a72      	ldrb	r2, [r6, #9]
 8005a32:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d190      	bne.n	800595c <dir_find+0x80>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005a3a:	7ab2      	ldrb	r2, [r6, #10]
 8005a3c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d18b      	bne.n	800595c <dir_find+0x80>
 8005a44:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005a48:	e773      	b.n	8005932 <dir_find+0x56>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	7868      	ldrb	r0, [r5, #1]
 8005a50:	9101      	str	r1, [sp, #4]
 8005a52:	f7fe fcd3 	bl	80043fc <disk_write>
 8005a56:	9901      	ldr	r1, [sp, #4]
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d07c      	beq.n	8005b56 <dir_find+0x27a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a5c:	f04f 0801 	mov.w	r8, #1
 8005a60:	e767      	b.n	8005932 <dir_find+0x56>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a62:	8978      	ldrh	r0, [r7, #10]
 8005a64:	3801      	subs	r0, #1
 8005a66:	ea10 0802 	ands.w	r8, r0, r2
 8005a6a:	d19f      	bne.n	80059ac <dir_find+0xd0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f7fe ff27 	bl	80048c0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a72:	2801      	cmp	r0, #1
 8005a74:	f240 8134 	bls.w	8005ce0 <dir_find+0x404>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d0ef      	beq.n	8005a5c <dir_find+0x180>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	4298      	cmp	r0, r3
 8005a80:	f080 80d4 	bcs.w	8005c2c <dir_find+0x350>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a84:	3b02      	subs	r3, #2
	clst -= 2;
 8005a86:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a88:	6360      	str	r0, [r4, #52]	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a8a:	4299      	cmp	r1, r3
 8005a8c:	f080 812d 	bcs.w	8005cea <dir_find+0x40e>
	return clst * fs->csize + fs->database;
 8005a90:	f8b7 b00a 	ldrh.w	fp, [r7, #10]
 8005a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a96:	fb01 3b0b 	mla	fp, r1, fp, r3
 8005a9a:	89bb      	ldrh	r3, [r7, #12]
				dp->sect = clust2sect(fs, clst);
 8005a9c:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8005aa0:	fbb6 f2f3 	udiv	r2, r6, r3
 8005aa4:	fb03 6312 	mls	r3, r3, r2, r6
 8005aa8:	e780      	b.n	80059ac <dir_find+0xd0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005aaa:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8005aae:	065a      	lsls	r2, r3, #25
 8005ab0:	f53f af59 	bmi.w	8005966 <dir_find+0x8a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005ab4:	067b      	lsls	r3, r7, #25
 8005ab6:	f140 80b3 	bpl.w	8005c20 <dir_find+0x344>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005aba:	6b23      	ldr	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005abc:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8005ac0:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005ac4:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ac6:	7b73      	ldrb	r3, [r6, #13]
 8005ac8:	454b      	cmp	r3, r9
 8005aca:	f040 80ac 	bne.w	8005c26 <dir_find+0x34a>
	rv = rv << 8 | ptr[0];
 8005ace:	7ef2      	ldrb	r2, [r6, #27]
 8005ad0:	7eb3      	ldrb	r3, [r6, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005ad2:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005ad6:	f040 80a6 	bne.w	8005c26 <dir_find+0x34a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005ada:	f896 b000 	ldrb.w	fp, [r6]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4b8c      	ldr	r3, [pc, #560]	; (8005d14 <dir_find+0x438>)
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005ae2:	f00b 0b3f 	and.w	fp, fp, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ae6:	6928      	ldr	r0, [r5, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005ae8:	469a      	mov	sl, r3
 8005aea:	9704      	str	r7, [sp, #16]
 8005aec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005af0:	4637      	mov	r7, r6
 8005af2:	460b      	mov	r3, r1
 8005af4:	4606      	mov	r6, r0
 8005af6:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005afa:	9005      	str	r0, [sp, #20]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005afc:	9501      	str	r5, [sp, #4]
 8005afe:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 8005b02:	9403      	str	r4, [sp, #12]
 8005b04:	e012      	b.n	8005b2c <dir_find+0x250>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b06:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	d81e      	bhi.n	8005b4c <dir_find+0x270>
 8005b0e:	f000 fdb1 	bl	8006674 <ff_wtoupper>
 8005b12:	4604      	mov	r4, r0
 8005b14:	f836 001b 	ldrh.w	r0, [r6, fp, lsl #1]
 8005b18:	46ab      	mov	fp, r5
 8005b1a:	f000 fdab 	bl	8006674 <ff_wtoupper>
 8005b1e:	4284      	cmp	r4, r0
	rv = rv << 8 | ptr[0];
 8005b20:	4643      	mov	r3, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b22:	d113      	bne.n	8005b4c <dir_find+0x270>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b24:	4a7c      	ldr	r2, [pc, #496]	; (8005d18 <dir_find+0x43c>)
 8005b26:	4592      	cmp	sl, r2
 8005b28:	f000 80e1 	beq.w	8005cee <dir_find+0x412>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005b2c:	f81a 2b01 	ldrb.w	r2, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b30:	f10b 0501 	add.w	r5, fp, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005b34:	18b8      	adds	r0, r7, r2
	rv = rv << 8 | ptr[0];
 8005b36:	f817 8002 	ldrb.w	r8, [r7, r2]
 8005b3a:	7842      	ldrb	r2, [r0, #1]
 8005b3c:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
		if (wc) {
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e0      	bne.n	8005b06 <dir_find+0x22a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b48:	4590      	cmp	r8, r2
 8005b4a:	d0eb      	beq.n	8005b24 <dir_find+0x248>
 8005b4c:	9d01      	ldr	r5, [sp, #4]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005b4e:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8005b52:	9c03      	ldr	r4, [sp, #12]
 8005b54:	e707      	b.n	8005966 <dir_find+0x8a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005b58:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005b5a:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8005b5c:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f4bf aedc 	bcs.w	800591c <dir_find+0x40>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b64:	78af      	ldrb	r7, [r5, #2]
 8005b66:	2f01      	cmp	r7, #1
 8005b68:	f67f aed8 	bls.w	800591c <dir_find+0x40>
 8005b6c:	4688      	mov	r8, r1
 8005b6e:	e000      	b.n	8005b72 <dir_find+0x296>
 8005b70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
					wsect += fs->fsize;
 8005b72:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b74:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b76:	2301      	movs	r3, #1
 8005b78:	4641      	mov	r1, r8
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	7868      	ldrb	r0, [r5, #1]
 8005b7e:	f7fe fc3d 	bl	80043fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b82:	2f01      	cmp	r7, #1
 8005b84:	d1f4      	bne.n	8005b70 <dir_find+0x294>
 8005b86:	4641      	mov	r1, r8
 8005b88:	e6c8      	b.n	800591c <dir_find+0x40>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005b8a:	7833      	ldrb	r3, [r6, #0]
 8005b8c:	7872      	ldrb	r2, [r6, #1]
 8005b8e:	01d9      	lsls	r1, r3, #7
 8005b90:	78b0      	ldrb	r0, [r6, #2]
 8005b92:	f896 c004 	ldrb.w	ip, [r6, #4]
 8005b96:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 8005b9a:	78f3      	ldrb	r3, [r6, #3]
 8005b9c:	79b7      	ldrb	r7, [r6, #6]
 8005b9e:	4411      	add	r1, r2
 8005ba0:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8005ba4:	ea42 11c1 	orr.w	r1, r2, r1, lsl #7
 8005ba8:	fa50 f281 	uxtab	r2, r0, r1
 8005bac:	7970      	ldrb	r0, [r6, #5]
 8005bae:	f3c2 0146 	ubfx	r1, r2, #1, #7
 8005bb2:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 8005bb6:	7a32      	ldrb	r2, [r6, #8]
 8005bb8:	fa53 f181 	uxtab	r1, r3, r1
 8005bbc:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8005bc0:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 8005bc4:	fa5c f381 	uxtab	r3, ip, r1
 8005bc8:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8005bcc:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 8005bd0:	79f3      	ldrb	r3, [r6, #7]
 8005bd2:	fa50 f181 	uxtab	r1, r0, r1
 8005bd6:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8005bda:	ea40 11c1 	orr.w	r1, r0, r1, lsl #7
 8005bde:	fa57 f081 	uxtab	r0, r7, r1
 8005be2:	f3c0 0146 	ubfx	r1, r0, #1, #7
 8005be6:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 8005bea:	7a70      	ldrb	r0, [r6, #9]
 8005bec:	fa53 f181 	uxtab	r1, r3, r1
 8005bf0:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8005bf4:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8005bf8:	7ab1      	ldrb	r1, [r6, #10]
 8005bfa:	fa52 f383 	uxtab	r3, r2, r3
 8005bfe:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8005c02:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8005c06:	fa50 f283 	uxtab	r2, r0, r3
 8005c0a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005c0e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005c12:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4599      	cmp	r9, r3
 8005c1a:	f47f aed8 	bne.w	80059ce <dir_find+0xf2>
 8005c1e:	e711      	b.n	8005a44 <dir_find+0x168>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005c20:	45ba      	cmp	sl, r7
 8005c22:	f43f af50 	beq.w	8005ac6 <dir_find+0x1ea>
 8005c26:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8005c2a:	e69c      	b.n	8005966 <dir_find+0x8a>
				dp->sect = 0; return FR_NO_FILE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f04f 0804 	mov.w	r8, #4
 8005c32:	63a3      	str	r3, [r4, #56]	; 0x38
	} while (res == FR_OK);
 8005c34:	e67d      	b.n	8005932 <dir_find+0x56>
	while ((chr = *name++) != 0) {
 8005c36:	692e      	ldr	r6, [r5, #16]
	WORD sum = 0;
 8005c38:	4681      	mov	r9, r0
	while ((chr = *name++) != 0) {
 8005c3a:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005c3e:	b199      	cbz	r1, 8005c68 <dir_find+0x38c>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8005c40:	4608      	mov	r0, r1
 8005c42:	f000 fd17 	bl	8006674 <ff_wtoupper>
	while ((chr = *name++) != 0) {
 8005c46:	f836 1b02 	ldrh.w	r1, [r6], #2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8005c4a:	b2c2      	uxtb	r2, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8005c4c:	0a03      	lsrs	r3, r0, #8
 8005c4e:	eb02 0259 	add.w	r2, r2, r9, lsr #1
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8005c52:	eb02 32c9 	add.w	r2, r2, r9, lsl #15
 8005c56:	b292      	uxth	r2, r2
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8005c58:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005c5c:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8005c60:	fa1f f983 	uxth.w	r9, r3
	while ((chr = *name++) != 0) {
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d1eb      	bne.n	8005c40 <dir_find+0x364>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f7ff f845 	bl	8004cf8 <dir_read.constprop.0>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d139      	bne.n	8005ce6 <dir_find+0x40a>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005c72:	696b      	ldr	r3, [r5, #20]
	rv = rv << 8 | ptr[0];
 8005c74:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8005c78:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005c7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c80:	454a      	cmp	r2, r9
 8005c82:	d1f1      	bne.n	8005c68 <dir_find+0x38c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005c84:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005c88:	b32a      	cbz	r2, 8005cd6 <dir_find+0x3fa>
 8005c8a:	f102 3aff 	add.w	sl, r2, #4294967295
 8005c8e:	4607      	mov	r7, r0
 8005c90:	2640      	movs	r6, #64	; 0x40
 8005c92:	fa5f fa8a 	uxtb.w	sl, sl
 8005c96:	f10a 0201 	add.w	r2, sl, #1
 8005c9a:	9201      	str	r2, [sp, #4]
 8005c9c:	e003      	b.n	8005ca6 <dir_find+0x3ca>
 8005c9e:	45ba      	cmp	sl, r7
 8005ca0:	4617      	mov	r7, r2
 8005ca2:	d016      	beq.n	8005cd2 <dir_find+0x3f6>
 8005ca4:	696b      	ldr	r3, [r5, #20]
				if ((di % SZDIRE) == 0) di += 2;
 8005ca6:	06f0      	lsls	r0, r6, #27
 8005ca8:	bf08      	it	eq
 8005caa:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005cac:	199a      	adds	r2, r3, r6
	rv = rv << 8 | ptr[0];
 8005cae:	5d9b      	ldrb	r3, [r3, r6]
 8005cb0:	3602      	adds	r6, #2
 8005cb2:	7850      	ldrb	r0, [r2, #1]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005cb4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8005cb8:	f000 fcdc 	bl	8006674 <ff_wtoupper>
 8005cbc:	692a      	ldr	r2, [r5, #16]
 8005cbe:	4683      	mov	fp, r0
 8005cc0:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8005cc4:	f000 fcd6 	bl	8006674 <ff_wtoupper>
 8005cc8:	4583      	cmp	fp, r0
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005cca:	f107 0201 	add.w	r2, r7, #1
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005cce:	d0e6      	beq.n	8005c9e <dir_find+0x3c2>
 8005cd0:	e7ca      	b.n	8005c68 <dir_find+0x38c>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	005a      	lsls	r2, r3, #1
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005cd6:	692b      	ldr	r3, [r5, #16]
 8005cd8:	5a9b      	ldrh	r3, [r3, r2]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1c4      	bne.n	8005c68 <dir_find+0x38c>
 8005cde:	e628      	b.n	8005932 <dir_find+0x56>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005ce0:	f04f 0802 	mov.w	r8, #2
 8005ce4:	e625      	b.n	8005932 <dir_find+0x56>
 8005ce6:	4680      	mov	r8, r0
 8005ce8:	e623      	b.n	8005932 <dir_find+0x56>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005cea:	46c3      	mov	fp, r8
 8005cec:	e6d5      	b.n	8005a9a <dir_find+0x1be>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005cee:	463e      	mov	r6, r7
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	9d01      	ldr	r5, [sp, #4]
 8005cf4:	7833      	ldrb	r3, [r6, #0]
 8005cf6:	9f04      	ldr	r7, [sp, #16]
 8005cf8:	0658      	lsls	r0, r3, #25
 8005cfa:	9c03      	ldr	r4, [sp, #12]
 8005cfc:	d500      	bpl.n	8005d00 <dir_find+0x424>
 8005cfe:	b919      	cbnz	r1, 8005d08 <dir_find+0x42c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d00:	3f01      	subs	r7, #1
 8005d02:	fa5f fa87 	uxtb.w	sl, r7
 8005d06:	e62e      	b.n	8005966 <dir_find+0x8a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005d08:	9b05      	ldr	r3, [sp, #20]
 8005d0a:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f6      	beq.n	8005d00 <dir_find+0x424>
 8005d12:	e788      	b.n	8005c26 <dir_find+0x34a>
 8005d14:	08006868 	.word	0x08006868
 8005d18:	08006875 	.word	0x08006875

08005d1c <follow_path>:
{
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8005d20:	780b      	ldrb	r3, [r1, #0]
{
 8005d22:	b099      	sub	sp, #100	; 0x64
 8005d24:	460e      	mov	r6, r1
 8005d26:	4605      	mov	r5, r0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8005d28:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8005d2a:	f8d0 b000 	ldr.w	fp, [r0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8005d2e:	d03b      	beq.n	8005da8 <follow_path+0x8c>
 8005d30:	2b5c      	cmp	r3, #92	; 0x5c
 8005d32:	d03b      	beq.n	8005dac <follow_path+0x90>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8005d34:	f8db 3020 	ldr.w	r3, [fp, #32]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8005d38:	2200      	movs	r2, #0
		obj->sclust = fs->cdir;				/* Start from current directory */
 8005d3a:	6083      	str	r3, [r0, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8005d3c:	61c2      	str	r2, [r0, #28]
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 8005d3e:	f89b 1000 	ldrb.w	r1, [fp]
 8005d42:	2904      	cmp	r1, #4
 8005d44:	d139      	bne.n	8005dba <follow_path+0x9e>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d037      	beq.n	8005dba <follow_path+0x9e>
		obj->c_ofs = fs->cdc_ofs;
 8005d4a:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
	dp->obj.fs = obj->fs;
 8005d4e:	f8cd b008 	str.w	fp, [sp, #8]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005d52:	9207      	str	r2, [sp, #28]
		obj->c_scl = fs->cdc_scl;
 8005d54:	e9db 4309 	ldrd	r4, r3, [fp, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 8005d58:	62a9      	str	r1, [r5, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005d5a:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
	dp->obj.stat = (BYTE)obj->c_size;
 8005d5e:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.sclust = obj->c_scl;
 8005d62:	9404      	str	r4, [sp, #16]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005d64:	9006      	str	r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005d66:	a802      	add	r0, sp, #8
	dp->blk_ofs = obj->c_ofs;
 8005d68:	9115      	str	r1, [sp, #84]	; 0x54
		obj->c_scl = fs->cdc_scl;
 8005d6a:	e9c5 4308 	strd	r4, r3, [r5, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005d6e:	f7ff fc71 	bl	8005654 <dir_sdi>
	if (res == FR_OK) {
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d153      	bne.n	8005e1e <follow_path+0x102>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005d76:	a802      	add	r0, sp, #8
 8005d78:	f7fe fec4 	bl	8004b04 <load_xdir>
 8005d7c:	4603      	mov	r3, r0
		if (res != FR_OK) return res;
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d14d      	bne.n	8005e1e <follow_path+0x102>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8005d82:	f8db 2014 	ldr.w	r2, [fp, #20]
	rv = rv << 8 | ptr[2];
 8005d86:	8f54      	ldrh	r4, [r2, #58]	; 0x3a
	rv = rv << 8 | ptr[1];
 8005d88:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
	rv = rv << 8 | ptr[0];
 8005d8c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
	rv = rv << 8 | ptr[1];
 8005d90:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8005d94:	616b      	str	r3, [r5, #20]
	rv = rv << 8 | ptr[0];
 8005d96:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8005d9a:	6129      	str	r1, [r5, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8005d9c:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	71eb      	strb	r3, [r5, #7]
 8005da6:	e008      	b.n	8005dba <follow_path+0x9e>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005da8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8005dac:	2b2f      	cmp	r3, #47	; 0x2f
 8005dae:	d0fb      	beq.n	8005da8 <follow_path+0x8c>
 8005db0:	2b5c      	cmp	r3, #92	; 0x5c
 8005db2:	d0f9      	beq.n	8005da8 <follow_path+0x8c>
		obj->sclust = 0;					/* Start from root directory */
 8005db4:	2300      	movs	r3, #0
 8005db6:	60ab      	str	r3, [r5, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8005db8:	61eb      	str	r3, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005dba:	7833      	ldrb	r3, [r6, #0]
 8005dbc:	2b1f      	cmp	r3, #31
 8005dbe:	f240 8187 	bls.w	80060d0 <follow_path+0x3b4>
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005dc2:	682a      	ldr	r2, [r5, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8005dc4:	2b1f      	cmp	r3, #31
		w = p[si++];					/* Get a character */
 8005dc6:	b298      	uxth	r0, r3
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005dc8:	f8d2 9010 	ldr.w	r9, [r2, #16]
		if (w < ' ') break;				/* Break if end of the path name */
 8005dcc:	f240 8159 	bls.w	8006082 <follow_path+0x366>
 8005dd0:	f1a9 0a02 	sub.w	sl, r9, #2
 8005dd4:	46b0      	mov	r8, r6
		w = p[si++];					/* Get a character */
 8005dd6:	2701      	movs	r7, #1
 8005dd8:	e008      	b.n	8005dec <follow_path+0xd0>
		lfn[di++] = w;					/* Store the Unicode character */
 8005dda:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8005dde:	1c7b      	adds	r3, r7, #1
 8005de0:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8005de4:	281f      	cmp	r0, #31
 8005de6:	f240 8153 	bls.w	8006090 <follow_path+0x374>
		w = p[si++];					/* Get a character */
 8005dea:	461f      	mov	r7, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005dec:	282f      	cmp	r0, #47	; 0x2f
 8005dee:	f107 34ff 	add.w	r4, r7, #4294967295
 8005df2:	d017      	beq.n	8005e24 <follow_path+0x108>
 8005df4:	285c      	cmp	r0, #92	; 0x5c
 8005df6:	d015      	beq.n	8005e24 <follow_path+0x108>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005df8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8005dfc:	d00e      	beq.n	8005e1c <follow_path+0x100>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005dfe:	2101      	movs	r1, #1
 8005e00:	f000 fc16 	bl	8006630 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005e04:	b150      	cbz	r0, 8005e1c <follow_path+0x100>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005e06:	287f      	cmp	r0, #127	; 0x7f
 8005e08:	d8e7      	bhi.n	8005dda <follow_path+0xbe>
	while (*str && *str != chr) str++;
 8005e0a:	2322      	movs	r3, #34	; 0x22
 8005e0c:	4ad1      	ldr	r2, [pc, #836]	; (8006154 <follow_path+0x438>)
 8005e0e:	e003      	b.n	8005e18 <follow_path+0xfc>
 8005e10:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0e0      	beq.n	8005dda <follow_path+0xbe>
 8005e18:	4298      	cmp	r0, r3
 8005e1a:	d1f9      	bne.n	8005e10 <follow_path+0xf4>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005e1c:	2006      	movs	r0, #6
}
 8005e1e:	b019      	add	sp, #100	; 0x64
 8005e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e24:	5df3      	ldrb	r3, [r6, r7]
 8005e26:	19f2      	adds	r2, r6, r7
 8005e28:	2b5c      	cmp	r3, #92	; 0x5c
 8005e2a:	d002      	beq.n	8005e32 <follow_path+0x116>
 8005e2c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e2e:	f040 81aa 	bne.w	8006186 <follow_path+0x46a>
 8005e32:	3701      	adds	r7, #1
 8005e34:	4437      	add	r7, r6
 8005e36:	463e      	mov	r6, r7
 8005e38:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e3e:	d0fa      	beq.n	8005e36 <follow_path+0x11a>
 8005e40:	2b5c      	cmp	r3, #92	; 0x5c
 8005e42:	d0f8      	beq.n	8005e36 <follow_path+0x11a>
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005e44:	2c01      	cmp	r4, #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e46:	f04f 0320 	mov.w	r3, #32
 8005e4a:	f04f 0800 	mov.w	r8, #0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005e4e:	f000 8127 	beq.w	80060a0 <follow_path+0x384>
 8005e52:	2c02      	cmp	r4, #2
 8005e54:	f040 8112 	bne.w	800607c <follow_path+0x360>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8005e58:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8005e5c:	2a2e      	cmp	r2, #46	; 0x2e
 8005e5e:	f000 816c 	beq.w	800613a <follow_path+0x41e>
 8005e62:	eb09 0244 	add.w	r2, r9, r4, lsl #1
 8005e66:	e002      	b.n	8005e6e <follow_path+0x152>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005e68:	3c01      	subs	r4, #1
 8005e6a:	f000 810a 	beq.w	8006082 <follow_path+0x366>
		w = lfn[di - 1];
 8005e6e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d0f8      	beq.n	8005e68 <follow_path+0x14c>
 8005e76:	2b2e      	cmp	r3, #46	; 0x2e
 8005e78:	d0f6      	beq.n	8005e68 <follow_path+0x14c>
		*d++ = (BYTE)val;
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8005e80:	2100      	movs	r1, #0
 8005e82:	f829 1014 	strh.w	r1, [r9, r4, lsl #1]
		*d++ = (BYTE)val;
 8005e86:	642a      	str	r2, [r5, #64]	; 0x40
 8005e88:	646a      	str	r2, [r5, #68]	; 0x44
 8005e8a:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
 8005e8e:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8005e92:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005e96:	f8b9 0000 	ldrh.w	r0, [r9]
 8005e9a:	282e      	cmp	r0, #46	; 0x2e
 8005e9c:	d002      	beq.n	8005ea4 <follow_path+0x188>
 8005e9e:	4298      	cmp	r0, r3
 8005ea0:	f040 8166 	bne.w	8006170 <follow_path+0x454>
 8005ea4:	464a      	mov	r2, r9
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8005eac:	461f      	mov	r7, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	2820      	cmp	r0, #32
 8005eb2:	d0f9      	beq.n	8005ea8 <follow_path+0x18c>
 8005eb4:	282e      	cmp	r0, #46	; 0x2e
 8005eb6:	d0f7      	beq.n	8005ea8 <follow_path+0x18c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005eb8:	f048 0803 	orr.w	r8, r8, #3
 8005ebc:	3702      	adds	r7, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005ebe:	eb09 0344 	add.w	r3, r9, r4, lsl #1
 8005ec2:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8005ec6:	2a2e      	cmp	r2, #46	; 0x2e
 8005ec8:	d001      	beq.n	8005ece <follow_path+0x1b2>
 8005eca:	3c01      	subs	r4, #1
 8005ecc:	d1f9      	bne.n	8005ec2 <follow_path+0x1a6>
		if (!w) break;					/* Break on end of the LFN */
 8005ece:	b380      	cbz	r0, 8005f32 <follow_path+0x216>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	469a      	mov	sl, r3
 8005ed8:	461e      	mov	r6, r3
 8005eda:	465b      	mov	r3, fp
 8005edc:	46ab      	mov	fp, r5
 8005ede:	464d      	mov	r5, r9
 8005ee0:	4691      	mov	r9, r2
 8005ee2:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005ee4:	2820      	cmp	r0, #32
 8005ee6:	d003      	beq.n	8005ef0 <follow_path+0x1d4>
 8005ee8:	282e      	cmp	r0, #46	; 0x2e
 8005eea:	d13a      	bne.n	8005f62 <follow_path+0x246>
 8005eec:	42bc      	cmp	r4, r7
 8005eee:	d038      	beq.n	8005f62 <follow_path+0x246>
			cf |= NS_LOSS | NS_LFN; continue;
 8005ef0:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 8005ef4:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8005ef8:	3701      	adds	r7, #1
		if (!w) break;					/* Break on end of the LFN */
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d1f2      	bne.n	8005ee4 <follow_path+0x1c8>
 8005efe:	465d      	mov	r5, fp
 8005f00:	469b      	mov	fp, r3
 8005f02:	4633      	mov	r3, r6
 8005f04:	4616      	mov	r6, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f06:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 8005f0a:	464a      	mov	r2, r9
 8005f0c:	29e5      	cmp	r1, #229	; 0xe5
 8005f0e:	d102      	bne.n	8005f16 <follow_path+0x1fa>
 8005f10:	2105      	movs	r1, #5
 8005f12:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;
 8005f16:	2a08      	cmp	r2, #8
 8005f18:	f000 80f5 	beq.w	8006106 <follow_path+0x3ea>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005f1c:	f003 020c 	and.w	r2, r3, #12
 8005f20:	2a0c      	cmp	r2, #12
 8005f22:	d004      	beq.n	8005f2e <follow_path+0x212>
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	f040 80f6 	bne.w	800611a <follow_path+0x3fe>
 8005f2e:	f048 0802 	orr.w	r8, r8, #2
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005f32:	f885 804b 	strb.w	r8, [r5, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7ff fcd0 	bl	80058dc <dir_find>
			ns = dp->fn[NSFLAG];
 8005f3c:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d065      	beq.n	8006010 <follow_path+0x2f4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f44:	2804      	cmp	r0, #4
 8005f46:	f47f af6a 	bne.w	8005e1e <follow_path+0x102>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8005f4a:	069c      	lsls	r4, r3, #26
 8005f4c:	f140 812c 	bpl.w	80061a8 <follow_path+0x48c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8005f50:	0759      	lsls	r1, r3, #29
 8005f52:	d55b      	bpl.n	800600c <follow_path+0x2f0>
						dp->fn[NSFLAG] = NS_NONAME;
 8005f54:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 8005f56:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 8005f58:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
}
 8005f5c:	b019      	add	sp, #100	; 0x64
 8005f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005f62:	45ca      	cmp	sl, r9
 8005f64:	d278      	bcs.n	8006058 <follow_path+0x33c>
 8005f66:	1be1      	subs	r1, r4, r7
 8005f68:	fab1 f181 	clz	r1, r1
 8005f6c:	0949      	lsrs	r1, r1, #5
 8005f6e:	2900      	cmp	r1, #0
 8005f70:	d172      	bne.n	8006058 <follow_path+0x33c>
		if (w >= 0x80) {				/* Non ASCII character */
 8005f72:	287f      	cmp	r0, #127	; 0x7f
 8005f74:	f200 80b6 	bhi.w	80060e4 <follow_path+0x3c8>
	while (*str && *str != chr) str++;
 8005f78:	212b      	movs	r1, #43	; 0x2b
 8005f7a:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 800615c <follow_path+0x440>
 8005f7e:	e004      	b.n	8005f8a <follow_path+0x26e>
 8005f80:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8005f84:	2900      	cmp	r1, #0
 8005f86:	f000 80eb 	beq.w	8006160 <follow_path+0x444>
 8005f8a:	4281      	cmp	r1, r0
 8005f8c:	d1f8      	bne.n	8005f80 <follow_path+0x264>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005f8e:	f048 0803 	orr.w	r8, r8, #3
 8005f92:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8005f94:	eb0b 010a 	add.w	r1, fp, sl
 8005f98:	f10a 0a01 	add.w	sl, sl, #1
 8005f9c:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 8005fa0:	e7a8      	b.n	8005ef4 <follow_path+0x1d8>
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8005fa2:	692b      	ldr	r3, [r5, #16]
 8005fa4:	79ea      	ldrb	r2, [r5, #7]
 8005fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				obj->c_scl = obj->sclust;
 8005faa:	68a8      	ldr	r0, [r5, #8]
				obj->c_ofs = dp->blk_ofs;
 8005fac:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8005fae:	4313      	orrs	r3, r2
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8005fb0:	f8db 2014 	ldr.w	r2, [fp, #20]
				obj->c_ofs = dp->blk_ofs;
 8005fb4:	62a9      	str	r1, [r5, #40]	; 0x28
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8005fb6:	e9c5 0308 	strd	r0, r3, [r5, #32]
	rv = rv << 8 | ptr[2];
 8005fba:	8ed0      	ldrh	r0, [r2, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 8005fbc:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 8005fc0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 8005fc4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8005fc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8005fcc:	60ab      	str	r3, [r5, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8005fce:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	71eb      	strb	r3, [r5, #7]
	rv = rv << 8 | ptr[3];
 8005fd8:	f892 803b 	ldrb.w	r8, [r2, #59]	; 0x3b
	rv = rv << 8 | ptr[4];
 8005fdc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
	rv = rv << 8 | ptr[2];
 8005fde:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
 8005fe2:	ea48 2403 	orr.w	r4, r8, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8005fe6:	f892 8038 	ldrb.w	r8, [r2, #56]	; 0x38
	rv = rv << 8 | ptr[2];
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	rv = rv << 8 | ptr[1];
 8005ff0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8005ffa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
	rv = rv << 8 | ptr[0];
 8005ffe:	ea48 2200 	orr.w	r2, r8, r0, lsl #8
 8006002:	021b      	lsls	r3, r3, #8
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006004:	612a      	str	r2, [r5, #16]
	rv = rv << 8 | ptr[0];
 8006006:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800600a:	616b      	str	r3, [r5, #20]
 800600c:	7833      	ldrb	r3, [r6, #0]
 800600e:	e6d8      	b.n	8005dc2 <follow_path+0xa6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006010:	075a      	lsls	r2, r3, #29
 8006012:	f53f af04 	bmi.w	8005e1e <follow_path+0x102>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006016:	79ab      	ldrb	r3, [r5, #6]
 8006018:	06db      	lsls	r3, r3, #27
 800601a:	f140 80ca 	bpl.w	80061b2 <follow_path+0x496>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800601e:	f89b 1000 	ldrb.w	r1, [fp]
 8006022:	2904      	cmp	r1, #4
 8006024:	d0bd      	beq.n	8005fa2 <follow_path+0x286>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006026:	f8bb 000c 	ldrh.w	r0, [fp, #12]
 800602a:	f10b 034c 	add.w	r3, fp, #76	; 0x4c
 800602e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8006030:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006032:	fbb4 f2f0 	udiv	r2, r4, r0
 8006036:	fb00 4212 	mls	r2, r0, r2, r4
 800603a:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 800603c:	7ed8      	ldrb	r0, [r3, #27]
 800603e:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8006040:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8006044:	d105      	bne.n	8006052 <follow_path+0x336>
	rv = rv << 8 | ptr[0];
 8006046:	7d59      	ldrb	r1, [r3, #21]
 8006048:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800604a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800604e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006052:	60aa      	str	r2, [r5, #8]
 8006054:	7833      	ldrb	r3, [r6, #0]
 8006056:	e6b4      	b.n	8005dc2 <follow_path+0xa6>
			if (ni == 11) {				/* Long extension */
 8006058:	f1b9 0f0b 	cmp.w	r9, #11
 800605c:	f000 8095 	beq.w	800618a <follow_path+0x46e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006060:	42bc      	cmp	r4, r7
 8006062:	d003      	beq.n	800606c <follow_path+0x350>
 8006064:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 8006068:	f4ff af49 	bcc.w	8005efe <follow_path+0x1e2>
			b <<= 2; continue;
 800606c:	00b6      	lsls	r6, r6, #2
 800606e:	4627      	mov	r7, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006070:	f04f 090b 	mov.w	r9, #11
 8006074:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8006078:	b2f6      	uxtb	r6, r6
 800607a:	e73b      	b.n	8005ef4 <follow_path+0x1d8>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800607c:	2c00      	cmp	r4, #0
 800607e:	f47f aef0 	bne.w	8005e62 <follow_path+0x146>
	lfn[di] = 0;						/* LFN is created */
 8006082:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006084:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8006086:	f8a9 3000 	strh.w	r3, [r9]
}
 800608a:	b019      	add	sp, #100	; 0x64
 800608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*path = &p[si];						/* Return pointer to the next segment */
 8006090:	463c      	mov	r4, r7
 8006092:	441e      	add	r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006094:	f04f 0804 	mov.w	r8, #4
	*path = &p[si];						/* Return pointer to the next segment */
 8006098:	2324      	movs	r3, #36	; 0x24
	if ((di == 1 && lfn[di - 1] == '.') ||
 800609a:	2c01      	cmp	r4, #1
 800609c:	f47f aed9 	bne.w	8005e52 <follow_path+0x136>
 80060a0:	f8b9 2000 	ldrh.w	r2, [r9]
 80060a4:	2a2e      	cmp	r2, #46	; 0x2e
 80060a6:	f47f aedc 	bne.w	8005e62 <follow_path+0x146>
		lfn[di] = 0;
 80060aa:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 80060ac:	f242 022e 	movw	r2, #8238	; 0x202e
		lfn[di] = 0;
 80060b0:	f8a9 1002 	strh.w	r1, [r9, #2]
			dp->fn[i] = (i < di) ? '.' : ' ';
 80060b4:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 80060b8:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 80060bc:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
			dp->fn[i] = (i < di) ? '.' : ' ';
 80060c0:	2320      	movs	r3, #32
 80060c2:	f8c5 2042 	str.w	r2, [r5, #66]	; 0x42
 80060c6:	f8c5 2046 	str.w	r2, [r5, #70]	; 0x46
 80060ca:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
			if (res != FR_OK) break;
 80060ce:	e732      	b.n	8005f36 <follow_path+0x21a>
		dp->fn[NSFLAG] = NS_NONAME;
 80060d0:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80060d2:	2100      	movs	r1, #0
 80060d4:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 80060d6:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80060da:	f7ff fabb 	bl	8005654 <dir_sdi>
}
 80060de:	b019      	add	sp, #100	; 0x64
 80060e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80060e4:	e9cd 3200 	strd	r3, r2, [sp]
 80060e8:	f000 faa2 	bl	8006630 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80060ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80060f0:	b300      	cbz	r0, 8006134 <follow_path+0x418>
 80060f2:	4919      	ldr	r1, [pc, #100]	; (8006158 <follow_path+0x43c>)
			cf |= NS_LFN;				/* Force create LFN entry */
 80060f4:	f048 0802 	orr.w	r8, r8, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80060f8:	4408      	add	r0, r1
 80060fa:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80060fe:	2800      	cmp	r0, #0
 8006100:	f43f af45 	beq.w	8005f8e <follow_path+0x272>
 8006104:	e738      	b.n	8005f78 <follow_path+0x25c>
	if (ni == 8) b <<= 2;
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800610c:	2a0c      	cmp	r2, #12
 800610e:	f43f af0e 	beq.w	8005f2e <follow_path+0x212>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006112:	f018 0f02 	tst.w	r8, #2
 8006116:	d008      	beq.n	800612a <follow_path+0x40e>
 8006118:	e70b      	b.n	8005f32 <follow_path+0x216>
 800611a:	f018 0f02 	tst.w	r8, #2
 800611e:	f47f af08 	bne.w	8005f32 <follow_path+0x216>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006122:	2b01      	cmp	r3, #1
 8006124:	bf08      	it	eq
 8006126:	f048 0810 	orreq.w	r8, r8, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800612a:	2a04      	cmp	r2, #4
 800612c:	bf08      	it	eq
 800612e:	f048 0808 	orreq.w	r8, r8, #8
 8006132:	e6fe      	b.n	8005f32 <follow_path+0x216>
			cf |= NS_LFN;				/* Force create LFN entry */
 8006134:	f048 0802 	orr.w	r8, r8, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006138:	e729      	b.n	8005f8e <follow_path+0x272>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800613a:	f8b9 2000 	ldrh.w	r2, [r9]
 800613e:	2a2e      	cmp	r2, #46	; 0x2e
 8006140:	f47f ae8f 	bne.w	8005e62 <follow_path+0x146>
		lfn[di] = 0;
 8006144:	2100      	movs	r1, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
 8006146:	f642 622e 	movw	r2, #11822	; 0x2e2e
		lfn[di] = 0;
 800614a:	f8a9 1004 	strh.w	r1, [r9, #4]
			dp->fn[i] = (i < di) ? '.' : ' ';
 800614e:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 8006152:	e7b1      	b.n	80060b8 <follow_path+0x39c>
 8006154:	080067d4 	.word	0x080067d4
 8006158:	080067e8 	.word	0x080067e8
 800615c:	080067e0 	.word	0x080067e0
				if (IsUpper(w)) {		/* ASCII large capital */
 8006160:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006164:	2919      	cmp	r1, #25
 8006166:	d805      	bhi.n	8006174 <follow_path+0x458>
					b |= 2;
 8006168:	f046 0602 	orr.w	r6, r6, #2
 800616c:	b2c0      	uxtb	r0, r0
 800616e:	e711      	b.n	8005f94 <follow_path+0x278>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006170:	2701      	movs	r7, #1
 8006172:	e6a4      	b.n	8005ebe <follow_path+0x1a2>
					if (IsLower(w)) {	/* ASCII small capital */
 8006174:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8006178:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800617a:	bf9c      	itt	ls
 800617c:	3820      	subls	r0, #32
 800617e:	f046 0601 	orrls.w	r6, r6, #1
 8006182:	b2c0      	uxtb	r0, r0
 8006184:	e706      	b.n	8005f94 <follow_path+0x278>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006186:	4616      	mov	r6, r2
 8006188:	e65c      	b.n	8005e44 <follow_path+0x128>
				cf |= NS_LOSS | NS_LFN; break;
 800618a:	465d      	mov	r5, fp
 800618c:	469b      	mov	fp, r3
 800618e:	4633      	mov	r3, r6
 8006190:	4616      	mov	r6, r2
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006192:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
				cf |= NS_LOSS | NS_LFN; break;
 8006196:	f048 0803 	orr.w	r8, r8, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800619a:	2ae5      	cmp	r2, #229	; 0xe5
 800619c:	f47f aebe 	bne.w	8005f1c <follow_path+0x200>
 80061a0:	2205      	movs	r2, #5
 80061a2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;
 80061a6:	e6b9      	b.n	8005f1c <follow_path+0x200>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80061a8:	f013 0f04 	tst.w	r3, #4
 80061ac:	bf08      	it	eq
 80061ae:	2005      	moveq	r0, #5
 80061b0:	e635      	b.n	8005e1e <follow_path+0x102>
 80061b2:	2005      	movs	r0, #5
 80061b4:	e633      	b.n	8005e1e <follow_path+0x102>
 80061b6:	bf00      	nop

080061b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061b8:	b510      	push	{r4, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 80061c0:	b181      	cbz	r1, 80061e4 <f_mount+0x2c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80061c2:	780c      	ldrb	r4, [r1, #0]
 80061c4:	2c1f      	cmp	r4, #31
 80061c6:	d910      	bls.n	80061ea <f_mount+0x32>
 80061c8:	2c3a      	cmp	r4, #58	; 0x3a
 80061ca:	d00e      	beq.n	80061ea <f_mount+0x32>
 80061cc:	4608      	mov	r0, r1
 80061ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80061d2:	2b1f      	cmp	r3, #31
 80061d4:	d90b      	bls.n	80061ee <f_mount+0x36>
 80061d6:	2b3a      	cmp	r3, #58	; 0x3a
 80061d8:	d1f9      	bne.n	80061ce <f_mount+0x16>
			i = *tp++ - '0';
 80061da:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80061dc:	4288      	cmp	r0, r1
 80061de:	d101      	bne.n	80061e4 <f_mount+0x2c>
 80061e0:	2c30      	cmp	r4, #48	; 0x30
 80061e2:	d006      	beq.n	80061f2 <f_mount+0x3a>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80061e4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80061e6:	b002      	add	sp, #8
 80061e8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80061ea:	4623      	mov	r3, r4
 80061ec:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80061ee:	2b3a      	cmp	r3, #58	; 0x3a
 80061f0:	d0f3      	beq.n	80061da <f_mount+0x22>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061f2:	4913      	ldr	r1, [pc, #76]	; (8006240 <f_mount+0x88>)
 80061f4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 80061f6:	b143      	cbz	r3, 800620a <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80061f8:	4812      	ldr	r0, [pc, #72]	; (8006244 <f_mount+0x8c>)
 80061fa:	6804      	ldr	r4, [r0, #0]
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d019      	beq.n	8006234 <f_mount+0x7c>
 8006200:	6904      	ldr	r4, [r0, #16]
 8006202:	429c      	cmp	r4, r3
 8006204:	d013      	beq.n	800622e <f_mount+0x76>
		cfs->fs_type = 0;				/* Clear old fs object */
 8006206:	2000      	movs	r0, #0
 8006208:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	b15b      	cbz	r3, 8006226 <f_mount+0x6e>
		fs->fs_type = 0;				/* Clear new fs object */
 800620e:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006210:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8006212:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 8006214:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006216:	d1e6      	bne.n	80061e6 <f_mount+0x2e>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006218:	4602      	mov	r2, r0
 800621a:	a901      	add	r1, sp, #4
 800621c:	4668      	mov	r0, sp
 800621e:	f7fe ff1f 	bl	8005060 <find_volume>
}
 8006222:	b002      	add	sp, #8
 8006224:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006226:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8006228:	600b      	str	r3, [r1, #0]
}
 800622a:	b002      	add	sp, #8
 800622c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800622e:	2400      	movs	r4, #0
 8006230:	6104      	str	r4, [r0, #16]
 8006232:	e7e8      	b.n	8006206 <f_mount+0x4e>
 8006234:	2400      	movs	r4, #0
 8006236:	6004      	str	r4, [r0, #0]
 8006238:	6904      	ldr	r4, [r0, #16]
 800623a:	429c      	cmp	r4, r3
 800623c:	d1e3      	bne.n	8006206 <f_mount+0x4e>
 800623e:	e7f6      	b.n	800622e <f_mount+0x76>
 8006240:	20000130 	.word	0x20000130
 8006244:	20000134 	.word	0x20000134

08006248 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8006248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMBUF


	*buff = 0;
 800624c:	2200      	movs	r2, #0
{
 800624e:	f5ad 6dbd 	sub.w	sp, sp, #1512	; 0x5e8
 8006252:	4688      	mov	r8, r1
 8006254:	9001      	str	r0, [sp, #4]
	/* Get logical drive */
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 8006256:	a903      	add	r1, sp, #12
	*buff = 0;
 8006258:	7002      	strb	r2, [r0, #0]
	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 800625a:	a801      	add	r0, sp, #4
 800625c:	f7fe ff00 	bl	8005060 <find_volume>
	if (res == FR_OK) {
 8006260:	4607      	mov	r7, r0
 8006262:	2800      	cmp	r0, #0
 8006264:	d178      	bne.n	8006358 <f_getcwd+0x110>
		dj.obj.fs = fs;
 8006266:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8006268:	aa62      	add	r2, sp, #392	; 0x188
 800626a:	a9e2      	add	r1, sp, #904	; 0x388
		dj.obj.fs = fs;
 800626c:	9304      	str	r3, [sp, #16]
		INIT_NAMBUF(fs);
 800626e:	611a      	str	r2, [r3, #16]
		i = len;			/* Bottom of buffer (directory stack base) */
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8006270:	781a      	ldrb	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8006272:	6159      	str	r1, [r3, #20]
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path) */
 8006274:	2a04      	cmp	r2, #4
 8006276:	f000 80e5 	beq.w	8006444 <f_getcwd+0x1fc>
			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 800627a:	6a1e      	ldr	r6, [r3, #32]
 800627c:	9606      	str	r6, [sp, #24]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 800627e:	2e00      	cmp	r6, #0
 8006280:	f000 80e0 	beq.w	8006444 <f_getcwd+0x1fc>
 8006284:	46c1      	mov	r9, r8
				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 8006286:	2120      	movs	r1, #32
 8006288:	a804      	add	r0, sp, #16
 800628a:	f7ff f9e3 	bl	8005654 <dir_sdi>
				if (res != FR_OK) break;
 800628e:	2800      	cmp	r0, #0
 8006290:	f040 80e3 	bne.w	800645a <f_getcwd+0x212>
				res = move_window(fs, dj.sect);
 8006294:	9803      	ldr	r0, [sp, #12]
 8006296:	9912      	ldr	r1, [sp, #72]	; 0x48
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006298:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800629a:	4299      	cmp	r1, r3
 800629c:	d005      	beq.n	80062aa <f_getcwd+0x62>
 800629e:	f7fe fad5 	bl	800484c <move_window.part.0>
				if (res != FR_OK) break;
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f040 80d9 	bne.w	800645a <f_getcwd+0x212>
 80062a8:	9803      	ldr	r0, [sp, #12]
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 80062aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 80062ac:	7801      	ldrb	r1, [r0, #0]
	rv = rv << 8 | ptr[0];
 80062ae:	7e93      	ldrb	r3, [r2, #26]
 80062b0:	7ed0      	ldrb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 80062b2:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80062b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80062b8:	d105      	bne.n	80062c6 <f_getcwd+0x7e>
	rv = rv << 8 | ptr[0];
 80062ba:	7d51      	ldrb	r1, [r2, #21]
 80062bc:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
				res = dir_sdi(&dj, 0);
 80062c6:	2100      	movs	r1, #0
 80062c8:	a804      	add	r0, sp, #16
				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 80062ca:	9306      	str	r3, [sp, #24]
				res = dir_sdi(&dj, 0);
 80062cc:	f7ff f9c2 	bl	8005654 <dir_sdi>
				if (res != FR_OK) break;
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f040 80c2 	bne.w	800645a <f_getcwd+0x212>
				do {							/* Find the entry links to the child directory */
					res = dir_read(&dj, 0);
 80062d6:	a804      	add	r0, sp, #16
 80062d8:	f7fe fd0e 	bl	8004cf8 <dir_read.constprop.0>
					if (res != FR_OK) break;
 80062dc:	2800      	cmp	r0, #0
 80062de:	d135      	bne.n	800634c <f_getcwd+0x104>
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80062e0:	9903      	ldr	r1, [sp, #12]
 80062e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	if (fs->fs_type == FS_FAT32) {
 80062e4:	7809      	ldrb	r1, [r1, #0]
	rv = rv << 8 | ptr[0];
 80062e6:	7ed0      	ldrb	r0, [r2, #27]
 80062e8:	7e93      	ldrb	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 80062ea:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80062ec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80062f0:	d105      	bne.n	80062fe <f_getcwd+0xb6>
	rv = rv << 8 | ptr[0];
 80062f2:	7d51      	ldrb	r1, [r2, #21]
 80062f4:	7d12      	ldrb	r2, [r2, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 80062fe:	42b3      	cmp	r3, r6
 8006300:	d04f      	beq.n	80063a2 <f_getcwd+0x15a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006302:	9c10      	ldr	r4, [sp, #64]	; 0x40
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006304:	9b12      	ldr	r3, [sp, #72]	; 0x48
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006306:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006308:	b313      	cbz	r3, 8006350 <f_getcwd+0x108>
	FATFS *fs = dp->obj.fs;
 800630a:	9d04      	ldr	r5, [sp, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800630c:	782a      	ldrb	r2, [r5, #0]
 800630e:	2a04      	cmp	r2, #4
 8006310:	bf0c      	ite	eq
 8006312:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8006316:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800631a:	4294      	cmp	r4, r2
 800631c:	d218      	bcs.n	8006350 <f_getcwd+0x108>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800631e:	89aa      	ldrh	r2, [r5, #12]
 8006320:	fbb4 f0f2 	udiv	r0, r4, r2
 8006324:	fb02 4210 	mls	r2, r2, r0, r4
 8006328:	b93a      	cbnz	r2, 800633a <f_getcwd+0xf2>
		dp->sect++;				/* Next sector */
 800632a:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800632c:	9911      	ldr	r1, [sp, #68]	; 0x44
		dp->sect++;				/* Next sector */
 800632e:	9312      	str	r3, [sp, #72]	; 0x48
		if (!dp->clust) {		/* Static table */
 8006330:	b9b9      	cbnz	r1, 8006362 <f_getcwd+0x11a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006332:	892b      	ldrh	r3, [r5, #8]
 8006334:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8006338:	d90a      	bls.n	8006350 <f_getcwd+0x108>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800633a:	354c      	adds	r5, #76	; 0x4c
					res = dir_read(&dj, 0);
 800633c:	a804      	add	r0, sp, #16
	dp->dptr = ofs;						/* Current entry */
 800633e:	9410      	str	r4, [sp, #64]	; 0x40
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006340:	4415      	add	r5, r2
 8006342:	9513      	str	r5, [sp, #76]	; 0x4c
					res = dir_read(&dj, 0);
 8006344:	f7fe fcd8 	bl	8004cf8 <dir_read.constprop.0>
					if (res != FR_OK) break;
 8006348:	2800      	cmp	r0, #0
 800634a:	d0c9      	beq.n	80062e0 <f_getcwd+0x98>
					res = dir_next(&dj, 0);
				} while (res == FR_OK);
				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 800634c:	2804      	cmp	r0, #4
 800634e:	d17f      	bne.n	8006450 <f_getcwd+0x208>
 8006350:	2702      	movs	r7, #2
				}
				while (n) buff[--i] = fno.fname[--n];
				buff[--i] = '/';
			}
		}
		tp = buff;
 8006352:	9c01      	ldr	r4, [sp, #4]
				do		/* Add stacked path str */
					*tp++ = buff[i++];
				while (i < len);
			}
		}
		*tp = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	7023      	strb	r3, [r4, #0]
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8006358:	4638      	mov	r0, r7
 800635a:	f50d 6dbd 	add.w	sp, sp, #1512	; 0x5e8
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006362:	896b      	ldrh	r3, [r5, #10]
 8006364:	3b01      	subs	r3, #1
 8006366:	ea13 0a00 	ands.w	sl, r3, r0
 800636a:	d1e6      	bne.n	800633a <f_getcwd+0xf2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800636c:	a804      	add	r0, sp, #16
 800636e:	f7fe faa7 	bl	80048c0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006372:	2801      	cmp	r0, #1
 8006374:	d96f      	bls.n	8006456 <f_getcwd+0x20e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006376:	1c43      	adds	r3, r0, #1
 8006378:	d069      	beq.n	800644e <f_getcwd+0x206>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800637a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800637c:	4298      	cmp	r0, r3
 800637e:	d2e7      	bcs.n	8006350 <f_getcwd+0x108>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006380:	3b02      	subs	r3, #2
	clst -= 2;
 8006382:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8006384:	9011      	str	r0, [sp, #68]	; 0x44
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006386:	429a      	cmp	r2, r3
 8006388:	d203      	bcs.n	8006392 <f_getcwd+0x14a>
	return clst * fs->csize + fs->database;
 800638a:	8968      	ldrh	r0, [r5, #10]
 800638c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800638e:	fb02 3a00 	mla	sl, r2, r0, r3
 8006392:	89ab      	ldrh	r3, [r5, #12]
				dp->sect = clust2sect(fs, clst);
 8006394:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8006398:	fbb4 f2f3 	udiv	r2, r4, r3
 800639c:	fb03 4212 	mls	r2, r3, r2, r4
 80063a0:	e7cb      	b.n	800633a <f_getcwd+0xf2>
				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 80063a2:	a91a      	add	r1, sp, #104	; 0x68
 80063a4:	a804      	add	r0, sp, #16
 80063a6:	f7fe f973 	bl	8004690 <get_fileinfo>
				for (n = 0; fno.fname[n]; n++) ;
 80063aa:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d043      	beq.n	800643a <f_getcwd+0x1f2>
 80063b2:	f10d 0182 	add.w	r1, sp, #130	; 0x82
 80063b6:	2200      	movs	r2, #0
 80063b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80063bc:	4613      	mov	r3, r2
 80063be:	3201      	adds	r2, #1
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d1f9      	bne.n	80063b8 <f_getcwd+0x170>
				if (i < n + 3) {
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	4589      	cmp	r9, r1
 80063c8:	d349      	bcc.n	800645e <f_getcwd+0x216>
				while (n) buff[--i] = fno.fname[--n];
 80063ca:	2a00      	cmp	r2, #0
 80063cc:	d038      	beq.n	8006440 <f_getcwd+0x1f8>
 80063ce:	331a      	adds	r3, #26
 80063d0:	a91a      	add	r1, sp, #104	; 0x68
 80063d2:	eba9 0202 	sub.w	r2, r9, r2
 80063d6:	440b      	add	r3, r1
 80063d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80063dc:	f813 0901 	ldrb.w	r0, [r3], #-1
 80063e0:	9901      	ldr	r1, [sp, #4]
 80063e2:	4591      	cmp	r9, r2
 80063e4:	f801 0009 	strb.w	r0, [r1, r9]
 80063e8:	d1f6      	bne.n	80063d8 <f_getcwd+0x190>
				buff[--i] = '/';
 80063ea:	f102 39ff 	add.w	r9, r2, #4294967295
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	212f      	movs	r1, #47	; 0x2f
 80063f2:	f803 1009 	strb.w	r1, [r3, r9]
			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 80063f6:	9e06      	ldr	r6, [sp, #24]
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	f47f af44 	bne.w	8006286 <f_getcwd+0x3e>
			if (i == len) {					/* Root-directory */
 80063fe:	45c8      	cmp	r8, r9
		tp = buff;
 8006400:	9c01      	ldr	r4, [sp, #4]
			if (i == len) {					/* Root-directory */
 8006402:	d020      	beq.n	8006446 <f_getcwd+0x1fe>
					*tp++ = buff[i++];
 8006404:	f814 1009 	ldrb.w	r1, [r4, r9]
				while (i < len);
 8006408:	4590      	cmp	r8, r2
					*tp++ = buff[i++];
 800640a:	f104 0301 	add.w	r3, r4, #1
 800640e:	eba8 0609 	sub.w	r6, r8, r9
 8006412:	7021      	strb	r1, [r4, #0]
				while (i < len);
 8006414:	d90a      	bls.n	800642c <f_getcwd+0x1e4>
 8006416:	eba9 0904 	sub.w	r9, r9, r4
 800641a:	19a5      	adds	r5, r4, r6
					*tp++ = buff[i++];
 800641c:	eb03 0109 	add.w	r1, r3, r9
 8006420:	9801      	ldr	r0, [sp, #4]
 8006422:	5c41      	ldrb	r1, [r0, r1]
 8006424:	f803 1b01 	strb.w	r1, [r3], #1
				while (i < len);
 8006428:	42ab      	cmp	r3, r5
 800642a:	d1f7      	bne.n	800641c <f_getcwd+0x1d4>
 800642c:	4590      	cmp	r8, r2
 800642e:	bf2c      	ite	cs
 8006430:	4632      	movcs	r2, r6
 8006432:	2201      	movcc	r2, #1
		tp = buff;
 8006434:	2700      	movs	r7, #0
 8006436:	4414      	add	r4, r2
 8006438:	e78c      	b.n	8006354 <f_getcwd+0x10c>
				if (i < n + 3) {
 800643a:	f1b9 0f02 	cmp.w	r9, #2
 800643e:	d90e      	bls.n	800645e <f_getcwd+0x216>
				while (n) buff[--i] = fno.fname[--n];
 8006440:	464a      	mov	r2, r9
 8006442:	e7d2      	b.n	80063ea <f_getcwd+0x1a2>
		tp = buff;
 8006444:	9c01      	ldr	r4, [sp, #4]
				*tp++ = '/';
 8006446:	232f      	movs	r3, #47	; 0x2f
 8006448:	f804 3b01 	strb.w	r3, [r4], #1
 800644c:	e782      	b.n	8006354 <f_getcwd+0x10c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800644e:	2001      	movs	r0, #1
		tp = buff;
 8006450:	9c01      	ldr	r4, [sp, #4]
 8006452:	4607      	mov	r7, r0
 8006454:	e77e      	b.n	8006354 <f_getcwd+0x10c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006456:	2002      	movs	r0, #2
 8006458:	e7fa      	b.n	8006450 <f_getcwd+0x208>
				res = dir_sdi(&dj, 0);
 800645a:	4607      	mov	r7, r0
 800645c:	e779      	b.n	8006352 <f_getcwd+0x10a>
					res = FR_NOT_ENOUGH_CORE; break;
 800645e:	2711      	movs	r7, #17
 8006460:	e777      	b.n	8006352 <f_getcwd+0x10a>
 8006462:	bf00      	nop

08006464 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006468:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
 800646c:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800646e:	2800      	cmp	r0, #0
 8006470:	d040      	beq.n	80064f4 <f_opendir+0x90>

	/* Get logical drive */
	obj = &dp->obj;
 8006472:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, 0);
 8006474:	2200      	movs	r2, #0
 8006476:	a801      	add	r0, sp, #4
 8006478:	a903      	add	r1, sp, #12
 800647a:	f7fe fdf1 	bl	8005060 <find_volume>
	if (res == FR_OK) {
 800647e:	b128      	cbz	r0, 800648c <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8006480:	2300      	movs	r3, #0
 8006482:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8006484:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 8006488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 800648c:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 800648e:	a804      	add	r0, sp, #16
 8006490:	aa84      	add	r2, sp, #528	; 0x210
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006492:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 8006494:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 8006496:	6118      	str	r0, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006498:	4620      	mov	r0, r4
		INIT_NAMBUF(fs);
 800649a:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800649c:	f7ff fc3e 	bl	8005d1c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 80064a0:	bb20      	cbnz	r0, 80064ec <f_opendir+0x88>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80064a2:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	db29      	blt.n	80064fe <f_opendir+0x9a>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80064aa:	79a3      	ldrb	r3, [r4, #6]
 80064ac:	06db      	lsls	r3, r3, #27
 80064ae:	d51f      	bpl.n	80064f0 <f_opendir+0x8c>
					if (fs->fs_type == FS_EXFAT) {
 80064b0:	9a03      	ldr	r2, [sp, #12]
 80064b2:	7811      	ldrb	r1, [r2, #0]
 80064b4:	2904      	cmp	r1, #4
 80064b6:	d024      	beq.n	8006502 <f_opendir+0x9e>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80064b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	if (fs->fs_type == FS_FAT32) {
 80064ba:	2903      	cmp	r1, #3
	rv = rv << 8 | ptr[0];
 80064bc:	7ec5      	ldrb	r5, [r0, #27]
 80064be:	7e83      	ldrb	r3, [r0, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 80064c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80064c4:	d105      	bne.n	80064d2 <f_opendir+0x6e>
	rv = rv << 8 | ptr[0];
 80064c6:	7d45      	ldrb	r5, [r0, #21]
 80064c8:	7d01      	ldrb	r1, [r0, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80064ca:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80064ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80064d2:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 80064d4:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80064d6:	2100      	movs	r1, #0
 80064d8:	4620      	mov	r0, r4
				obj->id = fs->id;
 80064da:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80064dc:	f7ff f8ba 	bl	8005654 <dir_sdi>
				if (res == FR_OK) {
 80064e0:	b920      	cbnz	r0, 80064ec <f_opendir+0x88>
					if (obj->sclust) {
 80064e2:	68a3      	ldr	r3, [r4, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d141      	bne.n	800656c <f_opendir+0x108>
						obj->lockid = 0;	/* Root directory need not to be locked */
 80064e8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80064ea:	e7cb      	b.n	8006484 <f_opendir+0x20>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80064ec:	2804      	cmp	r0, #4
 80064ee:	d1c7      	bne.n	8006480 <f_opendir+0x1c>
 80064f0:	2005      	movs	r0, #5
 80064f2:	e7c5      	b.n	8006480 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 80064f4:	2009      	movs	r0, #9
}
 80064f6:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 80064fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064fe:	9a03      	ldr	r2, [sp, #12]
 8006500:	e7e8      	b.n	80064d4 <f_opendir+0x70>
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	79e1      	ldrb	r1, [r4, #7]
 8006506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800650a:	68a5      	ldr	r5, [r4, #8]
						obj->c_ofs = dp->blk_ofs;
 800650c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800650e:	430b      	orrs	r3, r1
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8006510:	6951      	ldr	r1, [r2, #20]
						obj->c_ofs = dp->blk_ofs;
 8006512:	62a0      	str	r0, [r4, #40]	; 0x28
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006514:	e9c4 5308 	strd	r5, r3, [r4, #32]
	rv = rv << 8 | ptr[2];
 8006518:	8ecd      	ldrh	r5, [r1, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 800651a:	f891 0035 	ldrb.w	r0, [r1, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 800651e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 8006522:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	rv = rv << 8 | ptr[0];
 8006526:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800652a:	60a3      	str	r3, [r4, #8]
	rv = rv << 8 | ptr[3];
 800652c:	f891 803b 	ldrb.w	r8, [r1, #59]	; 0x3b
	rv = rv << 8 | ptr[4];
 8006530:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
	rv = rv << 8 | ptr[2];
 8006532:	f891 603a 	ldrb.w	r6, [r1, #58]	; 0x3a
 8006536:	ea48 2003 	orr.w	r0, r8, r3, lsl #8
	rv = rv << 8 | ptr[0];
 800653a:	f891 8038 	ldrb.w	r8, [r1, #56]	; 0x38
	rv = rv << 8 | ptr[2];
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	rv = rv << 8 | ptr[1];
 8006544:	f891 6039 	ldrb.w	r6, [r1, #57]	; 0x39
 8006548:	021b      	lsls	r3, r3, #8
 800654a:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 800654e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
	rv = rv << 8 | ptr[0];
 8006552:	ea48 2006 	orr.w	r0, r8, r6, lsl #8
 8006556:	021b      	lsls	r3, r3, #8
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006558:	6120      	str	r0, [r4, #16]
	rv = rv << 8 | ptr[0];
 800655a:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800655e:	6163      	str	r3, [r4, #20]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006560:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	71e3      	strb	r3, [r4, #7]
 800656a:	e7b3      	b.n	80064d4 <f_opendir+0x70>
		if (Files[i].fs == dp->obj.fs &&
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <f_opendir+0x180>)
 800656e:	6825      	ldr	r5, [r4, #0]
 8006570:	6811      	ldr	r1, [r2, #0]
 8006572:	428d      	cmp	r5, r1
 8006574:	d01e      	beq.n	80065b4 <f_opendir+0x150>
 8006576:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800657a:	45ac      	cmp	ip, r5
 800657c:	d007      	beq.n	800658e <f_opendir+0x12a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800657e:	b319      	cbz	r1, 80065c8 <f_opendir+0x164>
 8006580:	f1bc 0f00 	cmp.w	ip, #0
 8006584:	d01f      	beq.n	80065c6 <f_opendir+0x162>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8006586:	2300      	movs	r3, #0
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8006588:	2012      	movs	r0, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800658a:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800658c:	e778      	b.n	8006480 <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 800658e:	6957      	ldr	r7, [r2, #20]
 8006590:	42bb      	cmp	r3, r7
 8006592:	d1f4      	bne.n	800657e <f_opendir+0x11a>
			Files[i].clu == dp->obj.sclust &&
 8006594:	6996      	ldr	r6, [r2, #24]
 8006596:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006598:	42be      	cmp	r6, r7
 800659a:	d1f0      	bne.n	800657e <f_opendir+0x11a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800659c:	2101      	movs	r1, #1
 800659e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 80065a2:	010f      	lsls	r7, r1, #4
 80065a4:	899d      	ldrh	r5, [r3, #12]
 80065a6:	3501      	adds	r5, #1
 80065a8:	b2ad      	uxth	r5, r5
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065aa:	443a      	add	r2, r7
	return i + 1;
 80065ac:	3101      	adds	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065ae:	8195      	strh	r5, [r2, #12]
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80065b0:	62e1      	str	r1, [r4, #44]	; 0x2c
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80065b2:	e767      	b.n	8006484 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 80065b4:	6856      	ldr	r6, [r2, #4]
 80065b6:	42b3      	cmp	r3, r6
 80065b8:	d1dd      	bne.n	8006576 <f_opendir+0x112>
			Files[i].clu == dp->obj.sclust &&
 80065ba:	6897      	ldr	r7, [r2, #8]
 80065bc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80065be:	42b7      	cmp	r7, r6
 80065c0:	d1d9      	bne.n	8006576 <f_opendir+0x112>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065c2:	4601      	mov	r1, r0
 80065c4:	e7eb      	b.n	800659e <f_opendir+0x13a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065c6:	2101      	movs	r1, #1
		Files[i].fs = dp->obj.fs;
 80065c8:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
		Files[i].ofs = dp->dptr;
 80065cc:	6b26      	ldr	r6, [r4, #48]	; 0x30
		Files[i].fs = dp->obj.fs;
 80065ce:	010f      	lsls	r7, r1, #4
		Files[i].ctr = 0;
 80065d0:	f04f 0e00 	mov.w	lr, #0
		Files[i].fs = dp->obj.fs;
 80065d4:	51d5      	str	r5, [r2, r7]
		Files[i].ctr = 0;
 80065d6:	2501      	movs	r5, #1
 80065d8:	f8ac e00c 	strh.w	lr, [ip, #12]
		Files[i].ofs = dp->dptr;
 80065dc:	e9cc 3601 	strd	r3, r6, [ip, #4]
		Files[i].ctr = 0;
 80065e0:	e7e3      	b.n	80065aa <f_opendir+0x146>
 80065e2:	bf00      	nop
 80065e4:	20000134 	.word	0x20000134

080065e8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80065ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 80065ec:	7a5c      	ldrb	r4, [r3, #9]
 80065ee:	b9dc      	cbnz	r4, 8006628 <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 80065f0:	f893 e009 	ldrb.w	lr, [r3, #9]
 80065f4:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 80065f6:	7a5e      	ldrb	r6, [r3, #9]
 80065f8:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 80065fc:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 80065fe:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 8006602:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8006604:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 8006608:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 800660a:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 800660c:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 800660e:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 8006610:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 8006612:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 8006614:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 8006616:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 800661a:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 800661c:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 800661e:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 8006620:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8006624:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8006626:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 8006628:	2001      	movs	r0, #1
}
 800662a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800662c:	20000158 	.word	0x20000158

08006630 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006630:	287f      	cmp	r0, #127	; 0x7f
 8006632:	d911      	bls.n	8006658 <ff_convert+0x28>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006634:	b989      	cbnz	r1, 800665a <ff_convert+0x2a>
 8006636:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <ff_convert+0x40>)
{
 8006638:	b410      	push	{r4}
 800663a:	e001      	b.n	8006640 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800663c:	2980      	cmp	r1, #128	; 0x80
 800663e:	d015      	beq.n	800666c <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 8006640:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006644:	b28c      	uxth	r4, r1
 8006646:	3101      	adds	r1, #1
 8006648:	4282      	cmp	r2, r0
 800664a:	d1f7      	bne.n	800663c <ff_convert+0xc>
 800664c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8006650:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8006652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800665a:	28ff      	cmp	r0, #255	; 0xff
 800665c:	d804      	bhi.n	8006668 <ff_convert+0x38>
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <ff_convert+0x40>)
 8006660:	3880      	subs	r0, #128	; 0x80
 8006662:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006666:	4770      	bx	lr
 8006668:	2000      	movs	r0, #0
 800666a:	4770      	bx	lr
 800666c:	2000      	movs	r0, #0
 800666e:	e7f0      	b.n	8006652 <ff_convert+0x22>
 8006670:	08006878 	.word	0x08006878

08006674 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006674:	4b22      	ldr	r3, [pc, #136]	; (8006700 <ff_wtoupper+0x8c>)
 8006676:	4a23      	ldr	r2, [pc, #140]	; (8006704 <ff_wtoupper+0x90>)
 8006678:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800667c:	bf28      	it	cs
 800667e:	4613      	movcs	r3, r2
{
 8006680:	b470      	push	{r4, r5, r6}
 8006682:	3304      	adds	r3, #4
 8006684:	e001      	b.n	800668a <ff_wtoupper+0x16>
 8006686:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8006688:	b1d2      	cbz	r2, 80066c0 <ff_wtoupper+0x4c>
		bc = *p++;								/* Get block base */
 800668a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800668e:	461e      	mov	r6, r3
 8006690:	b1a1      	cbz	r1, 80066bc <ff_wtoupper+0x48>
 8006692:	4288      	cmp	r0, r1
 8006694:	d312      	bcc.n	80066bc <ff_wtoupper+0x48>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006696:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800669a:	b2d4      	uxtb	r4, r2
 800669c:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800669e:	1865      	adds	r5, r4, r1
 80066a0:	42a8      	cmp	r0, r5
 80066a2:	daf0      	bge.n	8006686 <ff_wtoupper+0x12>
			switch (cmd) {
 80066a4:	2a08      	cmp	r2, #8
 80066a6:	d809      	bhi.n	80066bc <ff_wtoupper+0x48>
 80066a8:	e8df f002 	tbb	[pc, r2]
 80066ac:	1a171105 	.word	0x1a171105
 80066b0:	2623201d 	.word	0x2623201d
 80066b4:	0d          	.byte	0x0d
 80066b5:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80066b6:	1a41      	subs	r1, r0, r1
 80066b8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 80066bc:	bc70      	pop	{r4, r5, r6}
 80066be:	4770      	bx	lr
		if (!cmd) p += nc;
 80066c0:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 80066c4:	e7dd      	b.n	8006682 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80066c6:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80066ca:	b280      	uxth	r0, r0
 80066cc:	e7f6      	b.n	80066bc <ff_wtoupper+0x48>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80066ce:	1a41      	subs	r1, r0, r1
 80066d0:	f001 0301 	and.w	r3, r1, #1
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	b280      	uxth	r0, r0
 80066d8:	e7f0      	b.n	80066bc <ff_wtoupper+0x48>
			case 2: chr -= 16; break;				/* Shift -16 */
 80066da:	3810      	subs	r0, #16
 80066dc:	b280      	uxth	r0, r0
 80066de:	e7ed      	b.n	80066bc <ff_wtoupper+0x48>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80066e0:	3820      	subs	r0, #32
 80066e2:	b280      	uxth	r0, r0
 80066e4:	e7ea      	b.n	80066bc <ff_wtoupper+0x48>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80066e6:	3830      	subs	r0, #48	; 0x30
 80066e8:	b280      	uxth	r0, r0
 80066ea:	e7e7      	b.n	80066bc <ff_wtoupper+0x48>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80066ec:	381a      	subs	r0, #26
 80066ee:	b280      	uxth	r0, r0
 80066f0:	e7e4      	b.n	80066bc <ff_wtoupper+0x48>
			case 6:	chr += 8; break;				/* Shift +8 */
 80066f2:	3008      	adds	r0, #8
 80066f4:	b280      	uxth	r0, r0
 80066f6:	e7e1      	b.n	80066bc <ff_wtoupper+0x48>
			case 7: chr -= 80; break;				/* Shift -80 */
 80066f8:	3850      	subs	r0, #80	; 0x50
 80066fa:	b280      	uxth	r0, r0
 80066fc:	e7de      	b.n	80066bc <ff_wtoupper+0x48>
 80066fe:	bf00      	nop
 8006700:	08006978 	.word	0x08006978
 8006704:	08006b6c 	.word	0x08006b6c

08006708 <__libc_init_array>:
 8006708:	b570      	push	{r4, r5, r6, lr}
 800670a:	4d0d      	ldr	r5, [pc, #52]	; (8006740 <__libc_init_array+0x38>)
 800670c:	4c0d      	ldr	r4, [pc, #52]	; (8006744 <__libc_init_array+0x3c>)
 800670e:	1b64      	subs	r4, r4, r5
 8006710:	10a4      	asrs	r4, r4, #2
 8006712:	2600      	movs	r6, #0
 8006714:	42a6      	cmp	r6, r4
 8006716:	d109      	bne.n	800672c <__libc_init_array+0x24>
 8006718:	4d0b      	ldr	r5, [pc, #44]	; (8006748 <__libc_init_array+0x40>)
 800671a:	4c0c      	ldr	r4, [pc, #48]	; (800674c <__libc_init_array+0x44>)
 800671c:	f000 f834 	bl	8006788 <_init>
 8006720:	1b64      	subs	r4, r4, r5
 8006722:	10a4      	asrs	r4, r4, #2
 8006724:	2600      	movs	r6, #0
 8006726:	42a6      	cmp	r6, r4
 8006728:	d105      	bne.n	8006736 <__libc_init_array+0x2e>
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006730:	4798      	blx	r3
 8006732:	3601      	adds	r6, #1
 8006734:	e7ee      	b.n	8006714 <__libc_init_array+0xc>
 8006736:	f855 3b04 	ldr.w	r3, [r5], #4
 800673a:	4798      	blx	r3
 800673c:	3601      	adds	r6, #1
 800673e:	e7f2      	b.n	8006726 <__libc_init_array+0x1e>
 8006740:	08006c30 	.word	0x08006c30
 8006744:	08006c30 	.word	0x08006c30
 8006748:	08006c30 	.word	0x08006c30
 800674c:	08006c34 	.word	0x08006c34

08006750 <memset>:
 8006750:	4402      	add	r2, r0
 8006752:	4603      	mov	r3, r0
 8006754:	4293      	cmp	r3, r2
 8006756:	d100      	bne.n	800675a <memset+0xa>
 8006758:	4770      	bx	lr
 800675a:	f803 1b01 	strb.w	r1, [r3], #1
 800675e:	e7f9      	b.n	8006754 <memset+0x4>

08006760 <strncpy>:
 8006760:	b510      	push	{r4, lr}
 8006762:	3901      	subs	r1, #1
 8006764:	4603      	mov	r3, r0
 8006766:	b132      	cbz	r2, 8006776 <strncpy+0x16>
 8006768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800676c:	f803 4b01 	strb.w	r4, [r3], #1
 8006770:	3a01      	subs	r2, #1
 8006772:	2c00      	cmp	r4, #0
 8006774:	d1f7      	bne.n	8006766 <strncpy+0x6>
 8006776:	441a      	add	r2, r3
 8006778:	2100      	movs	r1, #0
 800677a:	4293      	cmp	r3, r2
 800677c:	d100      	bne.n	8006780 <strncpy+0x20>
 800677e:	bd10      	pop	{r4, pc}
 8006780:	f803 1b01 	strb.w	r1, [r3], #1
 8006784:	e7f9      	b.n	800677a <strncpy+0x1a>
	...

08006788 <_init>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr

08006794 <_fini>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr
