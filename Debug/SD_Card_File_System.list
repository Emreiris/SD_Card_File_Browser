
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000258ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c04  08025a7c  08025a7c  00035a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a680  0802a680  000400e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802a680  0802a680  0003a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a688  0802a688  000400e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0802a688  0802a688  0003a688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a694  0802a694  0003a694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0802a698  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ba40  200000e0  0802a778  000400e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000bb20  0802a778  0004bb20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0014206c  00000000  00000000  00040110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001dc6f  00000000  00000000  0018217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003fb8  00000000  00000000  0019fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000e5d8  00000000  00000000  001a3da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004851b  00000000  00000000  001b2380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000b9935  00000000  00000000  001fa89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128938  00000000  00000000  002b41d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003dcb08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ce4c  00000000  00000000  003dcb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0007385e  00000000  00000000  003e99a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025a64 	.word	0x08025a64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e4 	.word	0x200000e4
 800020c:	08025a64 	.word	0x08025a64

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_ZN12file_manager17file_manager_initEv>:
 */

extern char SDPath[4];

void file_manager::file_manager_init()
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	MX_SDMMC1_SD_Init();  /* Low level driver initalizations */
 80005e0:	f000 fec0 	bl	8001364 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();      /* File system initalizations */
 80005e4:	f022 fdc2 	bl	802316c <MX_FATFS_Init>

	result = f_mount(&drive_handler, SDPath, 0);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80005ee:	2200      	movs	r2, #0
 80005f0:	4912      	ldr	r1, [pc, #72]	; (800063c <_ZN12file_manager17file_manager_initEv+0x64>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f024 f8fe 	bl	80247f4 <f_mount>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

	result = f_opendir(&direction, SDPath); /* simple workaround */
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <_ZN12file_manager17file_manager_initEv+0x64>)
 800060a:	4618      	mov	r0, r3
 800060c:	f024 f926 	bl	802485c <f_opendir>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	strncpy(current_dir, SDPath, strlen(SDPath));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f103 0410 	add.w	r4, r3, #16
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <_ZN12file_manager17file_manager_initEv+0x64>)
 8000622:	f7ff fdff 	bl	8000224 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4904      	ldr	r1, [pc, #16]	; (800063c <_ZN12file_manager17file_manager_initEv+0x64>)
 800062c:	4620      	mov	r0, r4
 800062e:	f024 fd69 	bl	8025104 <strncpy>
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bd90      	pop	{r4, r7, pc}
 800063a:	bf00      	nop
 800063c:	2000b669 	.word	0x2000b669

08000640 <_ZN9displayerC1Ev>:
#define LCD_DISP_STATE(x) \
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, x)

#define FB_START_ADDRRESS ((uint32_t)0xC0000000)

displayer::displayer()
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
{
	; /*TODO : It may be filled later.*/
}
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <_ZN9displayer4initEv>:
 * @brief  = This constructor initialises first layer.
 */


void displayer::init()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	LCD_BACKLIGHT_STATE(GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4825      	ldr	r0, [pc, #148]	; (80006fc <_ZN9displayer4initEv+0xa4>)
 8000666:	f020 f905 	bl	8020874 <HAL_GPIO_WritePin>
	LCD_DISP_STATE(GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <_ZN9displayer4initEv+0xa8>)
 8000672:	f020 f8ff 	bl	8020874 <HAL_GPIO_WritePin>

	lcd_handle.Instance = LTDC;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <_ZN9displayer4initEv+0xac>)
 800067a:	601a      	str	r2, [r3, #0]
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	605a      	str	r2, [r3, #4]
	lcd_handle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
	lcd_handle.Init.HorizontalSync = (DISPLAYER_HSYNC - 1);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	615a      	str	r2, [r3, #20]
	lcd_handle.Init.VerticalSync = (DISPLAYER_VSYNC - 1);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2209      	movs	r2, #9
 800069e:	619a      	str	r2, [r3, #24]
	lcd_handle.Init.AccumulatedHBP = (DISPLAYER_HSYNC + DISPLAYER_HBP - 1);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2235      	movs	r2, #53	; 0x35
 80006a4:	61da      	str	r2, [r3, #28]
	lcd_handle.Init.AccumulatedVBP = (DISPLAYER_VSYNC + DISPLAYER_VBP - 1);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	220b      	movs	r2, #11
 80006aa:	621a      	str	r2, [r3, #32]
	lcd_handle.Init.AccumulatedActiveH = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f240 121b 	movw	r2, #283	; 0x11b
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
			+ DISPLAYER_VBP - 1);
	lcd_handle.Init.AccumulatedActiveW = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f240 2215 	movw	r2, #533	; 0x215
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
			+ DISPLAYER_HBP - 1);
	lcd_handle.Init.TotalHeigh = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f240 121d 	movw	r2, #285	; 0x11d
 80006c2:	631a      	str	r2, [r3, #48]	; 0x30
			+ DISPLAYER_VBP + DISPLAYER_VFP - 1);
	lcd_handle.Init.TotalWidth = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f240 2235 	movw	r2, #565	; 0x235
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
			+ DISPLAYER_HBP + DISPLAYER_HFP - 1);
	lcd_handle.Init.Backcolor.Blue = 0;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	lcd_handle.Init.Backcolor.Green = 0;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	lcd_handle.Init.Backcolor.Red = 0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	HAL_LTDC_Init(&lcd_handle);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f020 fbbc 	bl	8020e64 <HAL_LTDC_Init>

	this->config_layer();
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f80b 	bl	8000708 <_ZN9displayer12config_layerEv>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40022800 	.word	0x40022800
 8000700:	40022000 	.word	0x40022000
 8000704:	40016800 	.word	0x40016800

08000708 <_ZN9displayer12config_layerEv>:

void displayer::config_layer()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	lcd_handle.LayerCfg[0].WindowX0 = 0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38
	lcd_handle.LayerCfg[0].WindowX1 = DISPLAYER_WIDTH;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	641a      	str	r2, [r3, #64]	; 0x40
	lcd_handle.LayerCfg[0].WindowY1 = DISPLAYER_HEIGHT;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f44f 7288 	mov.w	r2, #272	; 0x110
 800072a:	645a      	str	r2, [r3, #68]	; 0x44
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2202      	movs	r2, #2
 8000730:	649a      	str	r2, [r3, #72]	; 0x48
	lcd_handle.LayerCfg[0].Alpha = 255;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	22ff      	movs	r2, #255	; 0xff
 8000736:	64da      	str	r2, [r3, #76]	; 0x4c
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	651a      	str	r2, [r3, #80]	; 0x50
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000744:	655a      	str	r2, [r3, #84]	; 0x54
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2207      	movs	r2, #7
 800074a:	659a      	str	r2, [r3, #88]	; 0x58
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)0xC0000000;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000752:	65da      	str	r2, [r3, #92]	; 0x5c
	lcd_handle.LayerCfg[0].ImageWidth = DISPLAYER_WIDTH;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800075a:	661a      	str	r2, [r3, #96]	; 0x60
	lcd_handle.LayerCfg[0].ImageHeight = DISPLAYER_HEIGHT;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000762:	665a      	str	r2, [r3, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3338      	adds	r3, #56	; 0x38
 8000782:	2201      	movs	r2, #1
 8000784:	4619      	mov	r1, r3
 8000786:	f020 fbd9 	bl	8020f3c <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	f020 fc03 	bl	8020f98 <HAL_LTDC_EnableDither>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_ZN9displayer10draw_pixelEsst>:

void displayer::draw_pixel(int16_t x_pos, int16_t y_pos, uint16_t color)
{
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	4608      	mov	r0, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	4603      	mov	r3, r0
 80007aa:	817b      	strh	r3, [r7, #10]
 80007ac:	460b      	mov	r3, r1
 80007ae:	813b      	strh	r3, [r7, #8]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80fb      	strh	r3, [r7, #6]
	*(volatile uint16_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 2 * (y_pos * lcd_handle.LayerCfg [0] .ImageWidth + x_pos))) = color;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80007b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007bc:	68f9      	ldr	r1, [r7, #12]
 80007be:	6e09      	ldr	r1, [r1, #96]	; 0x60
 80007c0:	fb01 f103 	mul.w	r1, r1, r3
 80007c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	461a      	mov	r2, r3
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	8013      	strh	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_ZN13sdram_handlerC1Ev>:

class sdram_handler
{

public:
	sdram_handler()
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	{
	}
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <_ZN20displayer_gui_driver8gui_initEv>:
#define DISPLAY_VER (272)

static displayer display;

void displayer_gui_driver::gui_init()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	static sdram_handler sdram;
 8000800:	4b24      	ldr	r3, [pc, #144]	; (8000894 <_ZN20displayer_gui_driver8gui_initEv+0x9c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f3bf 8f5b 	dmb	ish
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf0c      	ite	eq
 8000812:	2301      	moveq	r3, #1
 8000814:	2300      	movne	r3, #0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d010      	beq.n	800083e <_ZN20displayer_gui_driver8gui_initEv+0x46>
 800081c:	481d      	ldr	r0, [pc, #116]	; (8000894 <_ZN20displayer_gui_driver8gui_initEv+0x9c>)
 800081e:	f024 f909 	bl	8024a34 <__cxa_guard_acquire>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf14      	ite	ne
 8000828:	2301      	movne	r3, #1
 800082a:	2300      	moveq	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d005      	beq.n	800083e <_ZN20displayer_gui_driver8gui_initEv+0x46>
 8000832:	4819      	ldr	r0, [pc, #100]	; (8000898 <_ZN20displayer_gui_driver8gui_initEv+0xa0>)
 8000834:	f7ff ffd4 	bl	80007e0 <_ZN13sdram_handlerC1Ev>
 8000838:	4816      	ldr	r0, [pc, #88]	; (8000894 <_ZN20displayer_gui_driver8gui_initEv+0x9c>)
 800083a:	f024 f907 	bl	8024a4c <__cxa_guard_release>

	sdram.init();
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <_ZN20displayer_gui_driver8gui_initEv+0xa0>)
 8000840:	f000 f95c 	bl	8000afc <_ZN13sdram_handler4initEv>
	display.init();
 8000844:	4815      	ldr	r0, [pc, #84]	; (800089c <_ZN20displayer_gui_driver8gui_initEv+0xa4>)
 8000846:	f7ff ff07 	bl	8000658 <_ZN9displayer4initEv>

	lv_init();
 800084a:	f003 f841 	bl	80038d0 <lv_init>

	static lv_disp_draw_buf_t disp_buf;
	static lv_disp_drv_t disp_drv;
	static lv_color_t buf_1[DISPLAY_HOR * 10];

	lv_disp_draw_buf_init(&disp_buf, buf_1, NULL, DISPLAY_HOR*10);
 800084e:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8000852:	2200      	movs	r2, #0
 8000854:	4912      	ldr	r1, [pc, #72]	; (80008a0 <_ZN20displayer_gui_driver8gui_initEv+0xa8>)
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <_ZN20displayer_gui_driver8gui_initEv+0xac>)
 8000858:	f015 fdc0 	bl	80163dc <lv_disp_draw_buf_init>

	lv_disp_drv_init(&disp_drv);
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 800085e:	f015 fda7 	bl	80163b0 <lv_disp_drv_init>

	disp_drv.draw_buf = &disp_buf;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <_ZN20displayer_gui_driver8gui_initEv+0xac>)
 8000866:	605a      	str	r2, [r3, #4]
	disp_drv.hor_res = DISPLAY_HOR;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 800086a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800086e:	801a      	strh	r2, [r3, #0]
	disp_drv.ver_res = DISPLAY_VER;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 8000872:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000876:	805a      	strh	r2, [r3, #2]
	disp_drv.flush_cb = this->displayer_interface;
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <_ZN20displayer_gui_driver8gui_initEv+0xb4>)
 800087c:	60da      	str	r2, [r3, #12]

	lv_disp_drv_register(&disp_drv);
 800087e:	480a      	ldr	r0, [pc, #40]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 8000880:	f015 fdba 	bl	80163f8 <lv_disp_drv_register>

	lv_disp_flush_ready(&disp_drv);
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <_ZN20displayer_gui_driver8gui_initEv+0xb0>)
 8000886:	f015 fe6b 	bl	8016560 <lv_disp_flush_ready>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001dc 	.word	0x200001dc
 8000898:	200001a4 	.word	0x200001a4
 800089c:	200000fc 	.word	0x200000fc
 80008a0:	2000023c 	.word	0x2000023c
 80008a4:	200001e0 	.word	0x200001e0
 80008a8:	20000204 	.word	0x20000204
 80008ac:	080008b1 	.word	0x080008b1

080008b0 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t>:

void displayer_gui_driver::displayer_interface(lv_disp_drv_t *disp,const lv_area_t* area,lv_color_t* color_p)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
    static int32_t x, y;

    for(y = area->y1; y <= area->y2; y++)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x88>)
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x88>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	db27      	blt.n	8000928 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x78>
    {
        for(x = area->x1; x <= area->x2; x++)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008de:	461a      	mov	r2, r3
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x8c>)
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x8c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	db13      	blt.n	800091c <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x6c>
        {
        	display.draw_pixel(x, y, (uint32_t)color_p->full);
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x8c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b219      	sxth	r1, r3
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x88>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	b21a      	sxth	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x90>)
 8000906:	f7ff ff48 	bl	800079a <_ZN9displayer10draw_pixelEsst>
            color_p++;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3302      	adds	r3, #2
 800090e:	607b      	str	r3, [r7, #4]
        for(x = area->x1; x <= area->x2; x++)
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x8c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x8c>)
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e7e3      	b.n	80008e4 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x34>
    for(y = area->y1; y <= area->y2; y++)
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x88>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x88>)
 8000924:	6013      	str	r3, [r2, #0]
 8000926:	e7cf      	b.n	80008c8 <_ZN20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x18>
        }
    }

    lv_disp_flush_ready(disp);
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f015 fe19 	bl	8016560 <lv_disp_flush_ready>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200027c0 	.word	0x200027c0
 800093c:	200027bc 	.word	0x200027bc
 8000940:	200000fc 	.word	0x200000fc

08000944 <_Z41__static_initialization_and_destruction_0ii>:
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d107      	bne.n	8000964 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095a:	4293      	cmp	r3, r2
 800095c:	d102      	bne.n	8000964 <_Z41__static_initialization_and_destruction_0ii+0x20>
static displayer display;
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000960:	f7ff fe6e 	bl	8000640 <_ZN9displayerC1Ev>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000fc 	.word	0x200000fc

08000970 <_GLOBAL__sub_I__ZN20displayer_gui_driver8gui_initEv>:
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
 8000974:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff ffe3 	bl	8000944 <_Z41__static_initialization_and_destruction_0ii>
 800097e:	bd80      	pop	{r7, pc}

08000980 <_ZN12touch_screen10is_pressedEv>:
 */

#define I2C_Handle (&hi2c3)  /* XXX:touch screen driver port is connected to I2C3*/

bool touch_screen::is_pressed()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af04      	add	r7, sp, #16
 8000986:	6078      	str	r0, [r7, #4]
	static uint8_t touch_num;

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_NUM, I2C_MEMADD_SIZE_8BIT, &touch_num, 1, 10);
 8000988:	230a      	movs	r3, #10
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2301      	movs	r3, #1
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <_ZN12touch_screen10is_pressedEv+0x38>)
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	2202      	movs	r2, #2
 8000998:	2171      	movs	r1, #113	; 0x71
 800099a:	4808      	ldr	r0, [pc, #32]	; (80009bc <_ZN12touch_screen10is_pressedEv+0x3c>)
 800099c:	f020 f8ce 	bl	8020b3c <HAL_I2C_Mem_Read>

	if(touch_num > 0)
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <_ZN12touch_screen10is_pressedEv+0x38>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <_ZN12touch_screen10is_pressedEv+0x2c>
	{
		return true;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e000      	b.n	80009ae <_ZN12touch_screen10is_pressedEv+0x2e>
	}
	else
	{
		return false;
 80009ac:	2300      	movs	r3, #0
	}
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200027c4 	.word	0x200027c4
 80009bc:	2000b27c 	.word	0x2000b27c

080009c0 <_ZN12touch_screen17read_touch_screenEPtS0_>:

void touch_screen::read_touch_screen(uint16_t* touch_x, uint16_t* touch_y)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af04      	add	r7, sp, #16
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	uint8_t ts_x[2];
	uint8_t ts_y[2];

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_H, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 80009cc:	230a      	movs	r3, #10
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2301      	movs	r3, #1
 80009dc:	2203      	movs	r2, #3
 80009de:	2171      	movs	r1, #113	; 0x71
 80009e0:	4823      	ldr	r0, [pc, #140]	; (8000a70 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 80009e2:	f020 f8ab 	bl	8020b3c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_X_L, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 80009e6:	230a      	movs	r3, #10
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	2301      	movs	r3, #1
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	3301      	adds	r3, #1
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2301      	movs	r3, #1
 80009f8:	2204      	movs	r2, #4
 80009fa:	2171      	movs	r1, #113	; 0x71
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 80009fe:	f020 f89d 	bl	8020b3c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_H, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 8000a02:	230a      	movs	r3, #10
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	2301      	movs	r3, #1
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	2205      	movs	r2, #5
 8000a14:	2171      	movs	r1, #113	; 0x71
 8000a16:	4816      	ldr	r0, [pc, #88]	; (8000a70 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 8000a18:	f020 f890 	bl	8020b3c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, DEV_ADDRESS_READ , DEV_TOUCH_Y_L, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	2301      	movs	r3, #1
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	3301      	adds	r3, #1
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2206      	movs	r2, #6
 8000a30:	2171      	movs	r1, #113	; 0x71
 8000a32:	480f      	ldr	r0, [pc, #60]	; (8000a70 <_ZN12touch_screen17read_touch_screenEPtS0_+0xb0>)
 8000a34:	f020 f882 	bl	8020b3c <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 8000a38:	7d7b      	ldrb	r3, [r7, #21]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	7d3b      	ldrb	r3, [r7, #20]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	4413      	add	r3, r2
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	801a      	strh	r2, [r3, #0]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 8000a50:	7c7b      	ldrb	r3, [r7, #17]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	7c3b      	ldrb	r3, [r7, #16]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4413      	add	r3, r2
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	801a      	strh	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000b27c 	.word	0x2000b27c

08000a74 <_ZN23touch_screen_gui_driver7ts_initEv>:
#include "touch_screen_gui_driver.hpp"
#include "lvgl.h"
#include "i2c.h"

void touch_screen_gui_driver::ts_init()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

	MX_I2C3_Init();
 8000a7c:	f000 fa14 	bl	8000ea8 <MX_I2C3_Init>

	static lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <_ZN23touch_screen_gui_driver7ts_initEv+0x2c>)
 8000a82:	f015 fd81 	bl	8016588 <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <_ZN23touch_screen_gui_driver7ts_initEv+0x2c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
	indev_drv.read_cb = this->ts_interface;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <_ZN23touch_screen_gui_driver7ts_initEv+0x2c>)
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_ZN23touch_screen_gui_driver7ts_initEv+0x30>)
 8000a90:	605a      	str	r2, [r3, #4]
	lv_indev_drv_register(&indev_drv);
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <_ZN23touch_screen_gui_driver7ts_initEv+0x2c>)
 8000a94:	f015 fd88 	bl	80165a8 <lv_indev_drv_register>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200027c8 	.word	0x200027c8
 8000aa4:	08000aa9 	.word	0x08000aa9

08000aa8 <_ZN23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t>:

void touch_screen_gui_driver::ts_interface(struct _lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	static touch_screen ts;
	uint16_t ts_x;
	uint16_t ts_y;

	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <_ZN23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x50>)
 8000ab4:	f7ff ff64 	bl	8000980 <_ZN12touch_screen10is_pressedEv>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <_ZN23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x1a>
 8000abe:	2201      	movs	r2, #1
 8000ac0:	e000      	b.n	8000ac4 <_ZN23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x1c>
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	739a      	strb	r2, [r3, #14]

	if (data->state == LV_INDEV_STATE_PR)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	7b9b      	ldrb	r3, [r3, #14]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d107      	bne.n	8000ae0 <_ZN23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x38>
	{
		ts.read_touch_screen(&ts_x, &ts_y);
 8000ad0:	f107 020c 	add.w	r2, r7, #12
 8000ad4:	f107 030e 	add.w	r3, r7, #14
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <_ZN23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x50>)
 8000adc:	f7ff ff70 	bl	80009c0 <_ZN12touch_screen17read_touch_screenEPtS0_>
	}

	data->point.x = (int16_t)ts_y;
 8000ae0:	89bb      	ldrh	r3, [r7, #12]
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	801a      	strh	r2, [r3, #0]
	data->point.y = (int16_t)ts_x;
 8000ae8:	89fb      	ldrh	r3, [r7, #14]
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	805a      	strh	r2, [r3, #2]

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200027e8 	.word	0x200027e8

08000afc <_ZN13sdram_handler4initEv>:

#include <sdram.hpp>
#include "fmc.h"

void sdram_handler::init()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	FMC_SDRAM_CommandTypeDef   command;
    FMC_SDRAM_TimingTypeDef    SdramTiming = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]

    hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <_ZN13sdram_handler4initEv+0xa4>)
 8000b1c:	601a      	str	r2, [r3, #0]

    hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
    hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	60da      	str	r2, [r3, #12]
    hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2210      	movs	r2, #16
 8000b34:	611a      	str	r2, [r3, #16]
    hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
    hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	619a      	str	r2, [r3, #24]
    hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
    hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b50:	621a      	str	r2, [r3, #32]
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
    hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28

    SdramTiming.LoadToActiveDelay = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
    SdramTiming.ExitSelfRefreshDelay = 6;
 8000b64:	2306      	movs	r3, #6
 8000b66:	613b      	str	r3, [r7, #16]
    SdramTiming.SelfRefreshTime = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	617b      	str	r3, [r7, #20]
    SdramTiming.RowCycleDelay = 6;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	61bb      	str	r3, [r7, #24]
    SdramTiming.WriteRecoveryTime = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
    SdramTiming.RPDelay = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	623b      	str	r3, [r7, #32]
    SdramTiming.RCDDelay = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f107 020c 	add.w	r2, r7, #12
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f021 fc6d 	bl	8022464 <HAL_SDRAM_Init>

    this->init_sequence(&hsdram1, &command);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b90:	4619      	mov	r1, r3
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f806 	bl	8000ba4 <_ZN13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>

}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	a0000140 	.word	0xa0000140

08000ba4 <_ZN13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>:

void sdram_handler::init_sequence(SDRAM_HandleTypeDef *sdram_handle,
		                          FMC_SDRAM_CommandTypeDef *command)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
	  volatile uint32_t temp_val;

	  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2210      	movs	r2, #16
 8000bba:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 1;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = 0;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f021 fc68 	bl	80224a4 <HAL_SDRAM_SendCommand>

	  HAL_Delay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f01f fba9 	bl	802032c <HAL_Delay>

	  command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2202      	movs	r2, #2
 8000bde:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2210      	movs	r2, #16
 8000be4:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 1;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	68b8      	ldr	r0, [r7, #8]
 8000bfa:	f021 fc53 	bl	80224a4 <HAL_SDRAM_SendCommand>

	  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2203      	movs	r2, #3
 8000c02:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2210      	movs	r2, #16
 8000c08:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 8;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = 0;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	f021 fc41 	bl	80224a4 <HAL_SDRAM_SendCommand>

	  temp_val = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000c22:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000c26:	617b      	str	r3, [r7, #20]
	                       SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                       SDRAM_MODEREG_CAS_LATENCY_2           |
	                       SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                       SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	601a      	str	r2, [r3, #0]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2210      	movs	r2, #16
 8000c32:	605a      	str	r2, [r3, #4]
	  command->AutoRefreshNumber = 1;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	609a      	str	r2, [r3, #8]
	  command->ModeRegisterDefinition = temp_val;
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]

	  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	68b8      	ldr	r0, [r7, #8]
 8000c48:	f021 fc2c 	bl	80224a4 <HAL_SDRAM_SendCommand>
	  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_TIME);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f240 6103 	movw	r1, #1539	; 0x603
 8000c52:	4618      	mov	r0, r3
 8000c54:	f021 fc3d 	bl	80224d2 <HAL_SDRAM_SetAutoRefreshNumber>

}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_DMA_Init+0x3c>)
{
 8000c62:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c66:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c72:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c7c:	f01f fb7a 	bl	8020374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c80:	203b      	movs	r0, #59	; 0x3b
 8000c82:	f01f fba9 	bl	80203d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2045      	movs	r0, #69	; 0x45
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	f01f fb72 	bl	8020374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c90:	2045      	movs	r0, #69	; 0x45

}
 8000c92:	b003      	add	sp, #12
 8000c94:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c98:	f01f bb9e 	b.w	80203d8 <HAL_NVIC_EnableIRQ>
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8000ca4:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000ca6:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8000ca8:	2c00      	cmp	r4, #0
 8000caa:	d14e      	bne.n	8000d4a <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8000cac:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb0:	2603      	movs	r6, #3
 8000cb2:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8000cb4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb6:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cba:	4827      	ldr	r0, [pc, #156]	; (8000d58 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	f042 0201 	orr.w	r2, r2, #1
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd4:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cdc:	f01f fcde 	bl	802069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000ce0:	f248 1313 	movw	r3, #33043	; 0x8113
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce4:	a901      	add	r1, sp, #4
 8000ce6:	481d      	ldr	r0, [pc, #116]	; (8000d5c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf2:	f01f fcd3 	bl	802069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000cf6:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfa:	a901      	add	r1, sp, #4
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cfe:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f01f fcc8 	bl	802069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d0c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d10:	a901      	add	r1, sp, #4
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d14:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d1e:	f01f fcbd 	bl	802069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000d22:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d24:	a901      	add	r1, sp, #4
 8000d26:	4810      	ldr	r0, [pc, #64]	; (8000d68 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d28:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d32:	f01f fcb3 	bl	802069c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d36:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	a901      	add	r1, sp, #4
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f01f fca9 	bl	802069c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d4a:	b007      	add	sp, #28
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200027ec 	.word	0x200027ec
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40021800 	.word	0x40021800
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	40021400 	.word	0x40021400
 8000d68:	40021c00 	.word	0x40021c00
 8000d6c:	40020800 	.word	0x40020800

08000d70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d74:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	2214      	movs	r2, #20
 8000d78:	2100      	movs	r1, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000d7a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8000ea4 <MX_GPIO_Init+0x134>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	a80b      	add	r0, sp, #44	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000d80:	4d45      	ldr	r5, [pc, #276]	; (8000e98 <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f023 fec1 	bl	8024b08 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d86:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <MX_GPIO_Init+0x12c>)
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000d88:	4640      	mov	r0, r8
 8000d8a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d94:	f042 0210 	orr.w	r2, r2, #16
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9c:	f002 0210 	and.w	r2, r2, #16
 8000da0:	9201      	str	r2, [sp, #4]
 8000da2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da6:	f042 0204 	orr.w	r2, r2, #4
 8000daa:	631a      	str	r2, [r3, #48]	; 0x30
 8000dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dae:	f002 0204 	and.w	r2, r2, #4
 8000db2:	9202      	str	r2, [sp, #8]
 8000db4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000db8:	f042 0201 	orr.w	r2, r2, #1
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc0:	f002 0201 	and.w	r2, r2, #1
 8000dc4:	9203      	str	r2, [sp, #12]
 8000dc6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000dd6:	9204      	str	r2, [sp, #16]
 8000dd8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
 8000de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000de8:	9205      	str	r2, [sp, #20]
 8000dea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dee:	f042 0208 	orr.w	r2, r2, #8
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
 8000df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df6:	f002 0208 	and.w	r2, r2, #8
 8000dfa:	9206      	str	r2, [sp, #24]
 8000dfc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e04:	631a      	str	r2, [r3, #48]	; 0x30
 8000e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e08:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000e0c:	9207      	str	r2, [sp, #28]
 8000e0e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
 8000e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1a:	f002 0220 	and.w	r2, r2, #32
 8000e1e:	9208      	str	r2, [sp, #32]
 8000e20:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
 8000e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e30:	9209      	str	r2, [sp, #36]	; 0x24
 8000e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e44:	930a      	str	r3, [sp, #40]	; 0x28
 8000e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000e48:	f01f fd14 	bl	8020874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4628      	mov	r0, r5
 8000e50:	f241 0102 	movw	r1, #4098	; 0x1002
 8000e54:	f01f fd0e 	bl	8020874 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e5e:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f01f fc19 	bl	802069c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e6c:	a90b      	add	r1, sp, #44	; 0x2c
 8000e6e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e78:	f01f fc10 	bl	802069c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000e7c:	f241 0302 	movw	r3, #4098	; 0x1002
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e80:	a90b      	add	r1, sp, #44	; 0x2c
 8000e82:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e8c:	f01f fc06 	bl	802069c <HAL_GPIO_Init>

}
 8000e90:	b010      	add	sp, #64	; 0x40
 8000e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40022800 	.word	0x40022800

08000ea8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ea8:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000eaa:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x0040EAFF;
  hi2c3.Init.OwnAddress1 = 224;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	21e0      	movs	r1, #224	; 0xe0
  hi2c3.Init.Timing = 0x0040EAFF;
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_I2C3_Init+0x50>)
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <MX_I2C3_Init+0x54>)
 8000eb2:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress2 = 0;
 8000ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ec8:	f01f fde6 	bl	8020a98 <HAL_I2C_Init>
 8000ecc:	b108      	cbz	r0, 8000ed2 <MX_I2C3_Init+0x2a>
  {
    Error_Handler();
 8000ece:	f000 fa45 	bl	800135c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_I2C3_Init+0x4c>)
 8000ed6:	f01f fef4 	bl	8020cc2 <HAL_I2CEx_ConfigAnalogFilter>
 8000eda:	b108      	cbz	r0, 8000ee0 <MX_I2C3_Init+0x38>
  {
    Error_Handler();
 8000edc:	f000 fa3e 	bl	800135c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_I2C3_Init+0x4c>)
 8000ee4:	f01f ff13 	bl	8020d0e <HAL_I2CEx_ConfigDigitalFilter>
 8000ee8:	b118      	cbz	r0, 8000ef2 <MX_I2C3_Init+0x4a>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000eee:	f000 ba35 	b.w	800135c <Error_Handler>
}
 8000ef2:	bd08      	pop	{r3, pc}
 8000ef4:	2000b27c 	.word	0x2000b27c
 8000ef8:	0040eaff 	.word	0x0040eaff
 8000efc:	40005c00 	.word	0x40005c00

08000f00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f00:	b510      	push	{r4, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	2214      	movs	r2, #20
 8000f08:	2100      	movs	r1, #0
 8000f0a:	a803      	add	r0, sp, #12
 8000f0c:	f023 fdfc 	bl	8024b08 <memset>
  if(i2cHandle->Instance==I2C3)
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_I2C_MspInit+0x70>)
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d129      	bne.n	8000f6c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f18:	4c16      	ldr	r4, [pc, #88]	; (8000f74 <HAL_I2C_MspInit+0x74>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f20:	4815      	ldr	r0, [pc, #84]	; (8000f78 <HAL_I2C_MspInit+0x78>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6323      	str	r3, [r4, #48]	; 0x30
 8000f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f40:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f42:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f44:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f46:	f01f fba9 	bl	802069c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f54:	4611      	mov	r1, r2
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f56:	6423      	str	r3, [r4, #64]	; 0x40
 8000f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f62:	f01f fa07 	bl	8020374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000f66:	2048      	movs	r0, #72	; 0x48
 8000f68:	f01f fa36 	bl	80203d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f6c:	b008      	add	sp, #32
 8000f6e:	bd10      	pop	{r4, pc}
 8000f70:	40005c00 	.word	0x40005c00
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40021c00 	.word	0x40021c00

08000f7c <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f7e:	b08d      	sub	sp, #52	; 0x34
 8000f80:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	2214      	movs	r2, #20
 8000f84:	2100      	movs	r1, #0
 8000f86:	a807      	add	r0, sp, #28
 8000f88:	f023 fdbe 	bl	8024b08 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000f8c:	6822      	ldr	r2, [r4, #0]
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_LTDC_MspInit+0x100>)
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d171      	bne.n	8001078 <HAL_LTDC_MspInit+0xfc>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f94:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	2403      	movs	r4, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa0:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa2:	a907      	add	r1, sp, #28
 8000fa4:	4836      	ldr	r0, [pc, #216]	; (8001080 <HAL_LTDC_MspInit+0x104>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fa6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000faa:	645a      	str	r2, [r3, #68]	; 0x44
 8000fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fae:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000fb2:	9201      	str	r2, [sp, #4]
 8000fb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb8:	f042 0210 	orr.w	r2, r2, #16
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc0:	f002 0210 	and.w	r2, r2, #16
 8000fc4:	9202      	str	r2, [sp, #8]
 8000fc6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fd6:	9203      	str	r2, [sp, #12]
 8000fd8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000fe8:	9204      	str	r2, [sp, #16]
 8000fea:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ffa:	9205      	str	r2, [sp, #20]
 8000ffc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	9306      	str	r3, [sp, #24]
 800100e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2310      	movs	r3, #16
 8001012:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101c:	f01f fb3e 	bl	802069c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001020:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001024:	a907      	add	r1, sp, #28
 8001026:	4817      	ldr	r0, [pc, #92]	; (8001084 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001028:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001032:	f01f fb33 	bl	802069c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001036:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001038:	a907      	add	r1, sp, #28
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103c:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001046:	f01f fb29 	bl	802069c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104e:	a907      	add	r1, sp, #28
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001056:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800105c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105e:	f01f fb1d 	bl	802069c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001062:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001066:	a907      	add	r1, sp, #28
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106a:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001074:	f01f fb12 	bl	802069c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001078:	b00d      	add	sp, #52	; 0x34
 800107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107c:	40016800 	.word	0x40016800
 8001080:	40021000 	.word	0x40021000
 8001084:	40022400 	.word	0x40022400
 8001088:	40022800 	.word	0x40022800
 800108c:	40021800 	.word	0x40021800
 8001090:	40022000 	.word	0x40022000

08001094 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800109e:	f3bf 8f6f 	isb	sy
}
 80010a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <SCB_EnableICache+0x48>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010ac:	f3bf 8f4f 	dsb	sy
}
 80010b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010b2:	f3bf 8f6f 	isb	sy
}
 80010b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <SCB_EnableICache+0x48>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <SCB_EnableICache+0x48>)
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c4:	f3bf 8f4f 	dsb	sy
}
 80010c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ca:	f3bf 8f6f 	isb	sy
}
 80010ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <SCB_EnableDCache+0x9c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80010ee:	f3bf 8f4f 	dsb	sy
}
 80010f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <SCB_EnableDCache+0x9c>)
 80010f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	0b5b      	lsrs	r3, r3, #13
 8001100:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001104:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800110e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	015a      	lsls	r2, r3, #5
 8001114:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001118:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800111e:	4917      	ldr	r1, [pc, #92]	; (800117c <SCB_EnableDCache+0x9c>)
 8001120:	4313      	orrs	r3, r2
 8001122:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d000      	beq.n	800113c <SCB_EnableDCache+0x5c>
      do {
 800113a:	e7e9      	b.n	8001110 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	60fa      	str	r2, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d000      	beq.n	8001152 <SCB_EnableDCache+0x72>
    do {
 8001150:	e7d9      	b.n	8001106 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SCB_EnableDCache+0x9c>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <SCB_EnableDCache+0x9c>)
 800115e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001162:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001164:	f3bf 8f4f 	dsb	sy
}
 8001168:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800116a:	f3bf 8f6f 	isb	sy
}
 800116e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <lv_task_handler>:
/**********************
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    return lv_timer_handler();
 8001184:	f017 f8ea 	bl	801835c <lv_timer_handler>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001194:	f7ff ff7e 	bl	8001094 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001198:	f7ff ffa2 	bl	80010e0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f01f f8a8 	bl	80202f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f80e 	bl	80011c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f7ff fde4 	bl	8000d70 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a8:	f7ff fd5a 	bl	8000c60 <MX_DMA_Init>
  MX_TIM2_Init();
 80011ac:	f000 fa7e 	bl	80016ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  app.app_init();
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <main+0x2c>)
 80011b2:	f000 fb0d 	bl	80017d0 <_ZN11application8app_initEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lv_task_handler();
 80011b6:	f7ff ffe3 	bl	8001180 <lv_task_handler>
 80011ba:	e7fc      	b.n	80011b6 <main+0x26>
 80011bc:	200027f0 	.word	0x200027f0

080011c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0b4      	sub	sp, #208	; 0xd0
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f023 fc9a 	bl	8024b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2284      	movs	r2, #132	; 0x84
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f023 fc8b 	bl	8024b08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b4d      	ldr	r3, [pc, #308]	; (8001328 <_Z18SystemClock_Configv+0x168>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a4c      	ldr	r2, [pc, #304]	; (8001328 <_Z18SystemClock_Configv+0x168>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b4a      	ldr	r3, [pc, #296]	; (8001328 <_Z18SystemClock_Configv+0x168>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <_Z18SystemClock_Configv+0x16c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a47      	ldr	r2, [pc, #284]	; (800132c <_Z18SystemClock_Configv+0x16c>)
 8001210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <_Z18SystemClock_Configv+0x16c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001222:	2301      	movs	r3, #1
 8001224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 800123e:	230f      	movs	r3, #15
 8001240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001244:	23f0      	movs	r3, #240	; 0xf0
 8001246:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001250:	2309      	movs	r3, #9
 8001252:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800125a:	4618      	mov	r0, r3
 800125c:	f01f feec 	bl	8021038 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf14      	ite	ne
 8001266:	2301      	movne	r3, #1
 8001268:	2300      	moveq	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 8001270:	f000 f874 	bl	800135c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001274:	f01f fea8 	bl	8020fc8 <HAL_PWREx_EnableOverDrive>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf14      	ite	ne
 800127e:	2301      	movne	r3, #1
 8001280:	2300      	moveq	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001288:	f000 f868 	bl	800135c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b2:	2106      	movs	r1, #6
 80012b4:	4618      	mov	r0, r3
 80012b6:	f020 f8b3 	bl	8021420 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 80012ca:	f000 f847 	bl	800135c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <_Z18SystemClock_Configv+0x170>)
 80012d0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 80012d2:	2372      	movs	r3, #114	; 0x72
 80012d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80012d6:	2305      	movs	r3, #5
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80012e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80012f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4618      	mov	r0, r3
 8001304:	f020 f96c 	bl	80215e0 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <_Z18SystemClock_Configv+0x15c>
  {
    Error_Handler();
 8001318:	f000 f820 	bl	800135c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800131c:	f020 f84a 	bl	80213b4 <HAL_RCC_EnableCSS>
}
 8001320:	bf00      	nop
 8001322:	37d0      	adds	r7, #208	; 0xd0
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000
 8001330:	00a10008 	.word	0x00a10008

08001334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a05      	ldr	r2, [pc, #20]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d104      	bne.n	8001350 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8001346:	f01e ffdf 	bl	8020308 <HAL_IncTick>
    lv_tick_inc(1);
 800134a:	2001      	movs	r0, #1
 800134c:	f015 f97c 	bl	8016648 <lv_tick_inc>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010000 	.word	0x40010000

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001360:	e7fe      	b.n	8001360 <Error_Handler+0x4>
	...

08001364 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <MX_SDMMC1_SD_Init+0x18>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001366:	2200      	movs	r2, #0
 8001368:	4905      	ldr	r1, [pc, #20]	; (8001380 <MX_SDMMC1_SD_Init+0x1c>)
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 0;
 800136a:	619a      	str	r2, [r3, #24]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800136c:	e9c3 1200 	strd	r1, r2, [r3]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001370:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001374:	e9c3 2204 	strd	r2, r2, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000b2c8 	.word	0x2000b2c8
 8001380:	40012c00 	.word	0x40012c00

08001384 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001388:	b089      	sub	sp, #36	; 0x24
 800138a:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	2214      	movs	r2, #20
 800138e:	2100      	movs	r1, #0
 8001390:	a803      	add	r0, sp, #12
 8001392:	f023 fbb9 	bl	8024b08 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001396:	682a      	ldr	r2, [r5, #0]
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_SD_MspInit+0x148>)
 800139a:	429a      	cmp	r2, r3
 800139c:	f040 8093 	bne.w	80014c6 <HAL_SD_MspInit+0x142>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013a0:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013a4:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2603      	movs	r6, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2700      	movs	r7, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	4844      	ldr	r0, [pc, #272]	; (80014d0 <HAL_SD_MspInit+0x14c>)

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	f04f 0b01 	mov.w	fp, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c2:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013c6:	645a      	str	r2, [r3, #68]	; 0x44
 80013c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80013ce:	9200      	str	r2, [sp, #0]
 80013d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d4:	f042 0204 	orr.w	r2, r2, #4
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
 80013da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013dc:	f002 0204 	and.w	r2, r2, #4
 80013e0:	9201      	str	r2, [sp, #4]
 80013e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	f042 0208 	orr.w	r2, r2, #8
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013ee:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	e9cd a803 	strd	sl, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	e9cd 7605 	strd	r7, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f01f f94c 	bl	802069c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8001404:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	eb0d 0104 	add.w	r1, sp, r4
 800140c:	4830      	ldr	r0, [pc, #192]	; (80014d0 <HAL_SD_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800140e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	e9cd b605 	strd	fp, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f01f f940 	bl	802069c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141c:	eb0d 0104 	add.w	r1, sp, r4
 8001420:	482c      	ldr	r0, [pc, #176]	; (80014d4 <HAL_SD_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001422:	9407      	str	r4, [sp, #28]

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001424:	4c2c      	ldr	r4, [pc, #176]	; (80014d8 <HAL_SD_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	e9cd 9803 	strd	r9, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	e9cd b605 	strd	fp, r6, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f01f f935 	bl	802069c <HAL_GPIO_Init>
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001436:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 80014e4 <HAL_SD_MspInit+0x160>
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800143a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800143e:	4620      	mov	r0, r4
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001440:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001442:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144a:	e9c4 3a04 	strd	r3, sl, [r4, #16]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800144e:	2320      	movs	r3, #32
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001450:	e9c4 7908 	strd	r7, r9, [r4, #32]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001454:	e9c4 8306 	strd	r8, r3, [r4, #24]
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001458:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800145c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	e9c4 7702 	strd	r7, r7, [r4, #8]
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001464:	e9c4 930b 	strd	r9, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001468:	f01e ffda 	bl	8020420 <HAL_DMA_Init>
 800146c:	b108      	cbz	r0, 8001472 <HAL_SD_MspInit+0xee>
    {
      Error_Handler();
 800146e:	f7ff ff75 	bl	800135c <Error_Handler>

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001472:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <HAL_SD_MspInit+0x158>)
 8001474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001478:	642c      	str	r4, [r5, #64]	; 0x40
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	2140      	movs	r1, #64	; 0x40
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800147c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800147e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001482:	4c17      	ldr	r4, [pc, #92]	; (80014e0 <HAL_SD_MspInit+0x15c>)
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001484:	2704      	movs	r7, #4
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001486:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800148a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800148e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	2300      	movs	r3, #0
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149c:	6223      	str	r3, [r4, #32]
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800149e:	2303      	movs	r3, #3
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a0:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014a4:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80014a8:	2220      	movs	r2, #32
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80014ae:	4620      	mov	r0, r4
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80014b0:	e9c4 6206 	strd	r6, r2, [r4, #24]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014b4:	e9c4 c30b 	strd	ip, r3, [r4, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80014b8:	f01e ffb2 	bl	8020420 <HAL_DMA_Init>
 80014bc:	b108      	cbz	r0, 80014c2 <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 80014be:	f7ff ff4d 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80014c2:	63ec      	str	r4, [r5, #60]	; 0x3c
 80014c4:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80014c6:	b009      	add	sp, #36	; 0x24
 80014c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014cc:	40012c00 	.word	0x40012c00
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	2000b34c 	.word	0x2000b34c
 80014dc:	400264a0 	.word	0x400264a0
 80014e0:	2000b3ac 	.word	0x2000b3ac
 80014e4:	40026458 	.word	0x40026458

080014e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_MspInit+0x2c>)
{
 80014ea:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
 80014f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014fa:	9200      	str	r2, [sp, #0]
 80014fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	b002      	add	sp, #8
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b510      	push	{r4, lr}
 800151a:	4601      	mov	r1, r0
 800151c:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800151e:	2200      	movs	r2, #0
 8001520:	2019      	movs	r0, #25
 8001522:	f01e ff27 	bl	8020374 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001526:	2019      	movs	r0, #25
 8001528:	f01e ff56 	bl	80203d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800152e:	a901      	add	r1, sp, #4
 8001530:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001534:	4c13      	ldr	r4, [pc, #76]	; (8001584 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001546:	f020 f81b 	bl	8021580 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800154a:	f020 f809 	bl	8021560 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001550:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8001552:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001554:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001558:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_InitTick+0x74>)
 800155c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001560:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001562:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8001564:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001566:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001568:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800156c:	f021 f91c 	bl	80227a8 <HAL_TIM_Base_Init>
 8001570:	b920      	cbnz	r0, 800157c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001572:	4620      	mov	r0, r4
 8001574:	f020 ffc0 	bl	80224f8 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001578:	b008      	add	sp, #32
 800157a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800157c:	2001      	movs	r0, #1
 800157e:	e7fb      	b.n	8001578 <HAL_InitTick+0x60>
 8001580:	40023800 	.word	0x40023800
 8001584:	2000b40c 	.word	0x2000b40c
 8001588:	40010000 	.word	0x40010000
 800158c:	000f4240 	.word	0x000f4240

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001592:	f020 f815 	bl	80215c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <NMI_Handler+0x6>

08001598 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <HardFault_Handler>

0800159a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <MemManage_Handler>

0800159c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <BusFault_Handler>

0800159e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <UsageFault_Handler>

080015a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:
 80015a2:	4770      	bx	lr

080015a4 <PendSV_Handler>:
 80015a4:	4770      	bx	lr

080015a6 <SysTick_Handler>:
 80015a6:	4770      	bx	lr

080015a8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a8:	4801      	ldr	r0, [pc, #4]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80015aa:	f020 bfe7 	b.w	802257c <HAL_TIM_IRQHandler>
 80015ae:	bf00      	nop
 80015b0:	2000b40c 	.word	0x2000b40c

080015b4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b4:	4801      	ldr	r0, [pc, #4]	; (80015bc <TIM2_IRQHandler+0x8>)
 80015b6:	f020 bfe1 	b.w	802257c <HAL_TIM_IRQHandler>
 80015ba:	bf00      	nop
 80015bc:	2000b458 	.word	0x2000b458

080015c0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80015c0:	4801      	ldr	r0, [pc, #4]	; (80015c8 <DMA2_Stream3_IRQHandler+0x8>)
 80015c2:	f01e bfad 	b.w	8020520 <HAL_DMA_IRQHandler>
 80015c6:	bf00      	nop
 80015c8:	2000b34c 	.word	0x2000b34c

080015cc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <DMA2_Stream6_IRQHandler+0x8>)
 80015ce:	f01e bfa7 	b.w	8020520 <HAL_DMA_IRQHandler>
 80015d2:	bf00      	nop
 80015d4:	2000b3ac 	.word	0x2000b3ac

080015d8 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80015d8:	4801      	ldr	r0, [pc, #4]	; (80015e0 <I2C3_EV_IRQHandler+0x8>)
 80015da:	f01f bb6b 	b.w	8020cb4 <HAL_I2C_EV_IRQHandler>
 80015de:	bf00      	nop
 80015e0:	2000b27c 	.word	0x2000b27c

080015e4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80015e4:	2001      	movs	r0, #1
 80015e6:	4770      	bx	lr

080015e8 <_kill>:

int _kill(int pid, int sig)
{
 80015e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015ea:	f023 fa51 	bl	8024a90 <__errno>
 80015ee:	2316      	movs	r3, #22
 80015f0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80015f2:	f04f 30ff 	mov.w	r0, #4294967295
 80015f6:	bd08      	pop	{r3, pc}

080015f8 <_exit>:

void _exit (int status)
{
 80015f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015fa:	f023 fa49 	bl	8024a90 <__errno>
 80015fe:	2316      	movs	r3, #22
 8001600:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0xa>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	460e      	mov	r6, r1
 8001608:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	2500      	movs	r5, #0
 800160c:	42a5      	cmp	r5, r4
 800160e:	db01      	blt.n	8001614 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001610:	4620      	mov	r0, r4
 8001612:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001614:	f3af 8000 	nop.w
 8001618:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	3501      	adds	r5, #1
 800161c:	e7f6      	b.n	800160c <_read+0x8>

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b570      	push	{r4, r5, r6, lr}
 8001620:	460e      	mov	r6, r1
 8001622:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	2500      	movs	r5, #0
 8001626:	42a5      	cmp	r5, r4
 8001628:	db01      	blt.n	800162e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800162a:	4620      	mov	r0, r4
 800162c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800162e:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8001632:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	e7f6      	b.n	8001626 <_write+0x8>

08001638 <_close>:

int _close(int file)
{
	return -1;
}
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	4770      	bx	lr

0800163e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001642:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001644:	604b      	str	r3, [r1, #4]
}
 8001646:	4770      	bx	lr

08001648 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001648:	2001      	movs	r0, #1
 800164a:	4770      	bx	lr

0800164c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800164c:	2000      	movs	r0, #0
 800164e:	4770      	bx	lr

08001650 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <_sbrk+0x30>)
{
 8001652:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001654:	6819      	ldr	r1, [r3, #0]
{
 8001656:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001658:	b909      	cbnz	r1, 800165e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800165a:	490a      	ldr	r1, [pc, #40]	; (8001684 <_sbrk+0x34>)
 800165c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	4909      	ldr	r1, [pc, #36]	; (8001688 <_sbrk+0x38>)
 8001662:	4c0a      	ldr	r4, [pc, #40]	; (800168c <_sbrk+0x3c>)
 8001664:	4402      	add	r2, r0
 8001666:	1b09      	subs	r1, r1, r4
 8001668:	428a      	cmp	r2, r1
 800166a:	d906      	bls.n	800167a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800166c:	f023 fa10 	bl	8024a90 <__errno>
 8001670:	230c      	movs	r3, #12
 8001672:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001674:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001678:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800167a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 800167c:	e7fc      	b.n	8001678 <_sbrk+0x28>
 800167e:	bf00      	nop
 8001680:	200027f4 	.word	0x200027f4
 8001684:	2000bb20 	.word	0x2000bb20
 8001688:	20050000 	.word	0x20050000
 800168c:	00000400 	.word	0x00000400

08001690 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <SystemInit+0x18>)
 8001692:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001696:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800169a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800169e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a2:	609a      	str	r2, [r3, #8]
#endif
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <MX_TIM2_Init>:

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ac:	2210      	movs	r2, #16
 80016ae:	2100      	movs	r1, #0
{
 80016b0:	b500      	push	{lr}
 80016b2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b4:	eb0d 0002 	add.w	r0, sp, r2
 80016b8:	f023 fa26 	bl	8024b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016bc:	4816      	ldr	r0, [pc, #88]	; (8001718 <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 10000;
 80016be:	f242 7210 	movw	r2, #10000	; 0x2710
 80016c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c6:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 10000;
 80016c8:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100;
 80016cc:	2264      	movs	r2, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	6183      	str	r3, [r0, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016dc:	f021 f864 	bl	80227a8 <HAL_TIM_Base_Init>
 80016e0:	b108      	cbz	r0, 80016e6 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 80016e2:	f7ff fe3b 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ea:	a904      	add	r1, sp, #16
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <MX_TIM2_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f0:	f021 f894 	bl	802281c <HAL_TIM_ConfigClockSource>
 80016f4:	b108      	cbz	r0, 80016fa <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 80016f6:	f7ff fe31 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fa:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fc:	a901      	add	r1, sp, #4
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001700:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001706:	f021 f91d 	bl	8022944 <HAL_TIMEx_MasterConfigSynchronization>
 800170a:	b108      	cbz	r0, 8001710 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800170c:	f7ff fe26 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001710:	b009      	add	sp, #36	; 0x24
 8001712:	f85d fb04 	ldr.w	pc, [sp], #4
 8001716:	bf00      	nop
 8001718:	2000b458 	.word	0x2000b458

0800171c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800171c:	6803      	ldr	r3, [r0, #0]
 800171e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001722:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8001724:	d115      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	f503 330e 	add.w	r3, r3, #145408	; 0x23800

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001738:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001742:	f01e fe17 	bl	8020374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001746:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001748:	b003      	add	sp, #12
 800174a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174e:	f01e be43 	b.w	80203d8 <HAL_NVIC_EnableIRQ>
}
 8001752:	b003      	add	sp, #12
 8001754:	f85d fb04 	ldr.w	pc, [sp], #4

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800175c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800175e:	e003      	b.n	8001768 <LoopCopyDataInit>

08001760 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001762:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001764:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001766:	3104      	adds	r1, #4

08001768 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800176c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800176e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001770:	d3f6      	bcc.n	8001760 <CopyDataInit>
  ldr  r2, =_sbss
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001774:	e002      	b.n	800177c <LoopFillZerobss>

08001776 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001776:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001778:	f842 3b04 	str.w	r3, [r2], #4

0800177c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800177e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001780:	d3f9      	bcc.n	8001776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001782:	f7ff ff85 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f023 f99b 	bl	8024ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7ff fd01 	bl	8001190 <main>
  bx  lr    
 800178e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001794:	0802a698 	.word	0x0802a698
  ldr  r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800179c:	200000e0 	.word	0x200000e0
  ldr  r2, =_sbss
 80017a0:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 80017a4:	2000bb20 	.word	0x2000bb20

080017a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC_IRQHandler>

080017aa <_ZN20displayer_gui_driverC1Ev>:
#include "sdram.hpp"

class displayer_gui_driver: public ::displayer, ::sdram_handler
{
public:
	displayer_gui_driver() = default;
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe ff43 	bl	8000640 <_ZN9displayerC1Ev>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	33a8      	adds	r3, #168	; 0xa8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f80e 	bl	80007e0 <_ZN13sdram_handlerC1Ev>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <_ZN11application8app_initEv>:
static touch_screen_gui_driver ts;
file_manager fm;


void application::app_init()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	main_window mw;
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f869 	bl	80018b4 <_ZN11main_windowC1Ev>

	gui.gui_init();
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <_ZN11application8app_initEv+0x38>)
 80017e4:	f7ff f808 	bl	80007f8 <_ZN20displayer_gui_driver8gui_initEv>
	ts.ts_init();
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <_ZN11application8app_initEv+0x3c>)
 80017ea:	f7ff f943 	bl	8000a74 <_ZN23touch_screen_gui_driver7ts_initEv>
	fm.file_manager_init();
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <_ZN11application8app_initEv+0x40>)
 80017f0:	f7fe fef2 	bl	80005d8 <_ZN12file_manager17file_manager_initEv>

	mw.create_window();
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f869 	bl	80018d0 <_ZN11main_window13create_windowEv>
}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200027f8 	.word	0x200027f8
 800180c:	200028d8 	.word	0x200028d8
 8001810:	200028e0 	.word	0x200028e0

08001814 <_Z41__static_initialization_and_destruction_0ii>:
void application::app_run()
{



}
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	4293      	cmp	r3, r2
 800182c:	d102      	bne.n	8001834 <_Z41__static_initialization_and_destruction_0ii+0x20>
static displayer_gui_driver gui;
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001830:	f7ff ffbb 	bl	80017aa <_ZN20displayer_gui_driverC1Ev>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200027f8 	.word	0x200027f8

08001840 <_GLOBAL__sub_I_fm>:
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
 8001844:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ffe3 	bl	8001814 <_Z41__static_initialization_and_destruction_0ii>
 800184e:	bd80      	pop	{r7, pc}

08001850 <lv_pct>:
 * Percentage values are stored in special range
 * @param x the percentage (0..1000)
 * @return a coordinate that stores the percentage
 */
static inline lv_coord_t lv_pct(lv_coord_t x)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
    return LV_PCT(x);
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	2b00      	cmp	r3, #0
 8001860:	da08      	bge.n	8001874 <lv_pct+0x24>
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001868:	b29b      	uxth	r3, r3
 800186a:	b21b      	sxth	r3, r3
 800186c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001870:	b21b      	sxth	r3, r3
 8001872:	e003      	b.n	800187c <lv_pct+0x2c>
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800187a:	b21b      	sxth	r3, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 800188c:	f014 fe34 	bl	80164f8 <lv_disp_get_default>
 8001890:	4603      	mov	r3, r0
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f897 	bl	80019c6 <lv_disp_get_scr_act>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}

0800189e <_ZN11main_window10get_screenEv>:

private:
	/* main_window widgets created, only needs to be */
	void search_file_create();
	void file_list_create();
	lv_obj_t* get_screen() { return lv_scr_act();}
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	f7ff ffef 	bl	8001888 <lv_scr_act>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZN11main_windowC1Ev>:
 *      Author: emrei
 */

#include "main_window.hpp"

main_window::main_window()
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
{

}
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_ZN11main_window13create_windowEv>:

void main_window::create_window()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	file_list_create();
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f83f 	bl	800195c <_ZN11main_window16file_list_createEv>
	search_file_create();
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f804 	bl	80018ec <_ZN11main_window18search_file_createEv>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZN11main_window18search_file_createEv>:

void main_window::search_file_create()
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	file_search = lv_textarea_create(get_screen());
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffd2 	bl	800189e <_ZN11main_window10get_screenEv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f01d ff13 	bl	801f728 <lv_textarea_create>
 8001902:	4602      	mov	r2, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
	lv_obj_set_pos(file_search, 5, 5);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2205      	movs	r2, #5
 800190e:	2105      	movs	r1, #5
 8001910:	4618      	mov	r0, r3
 8001912:	f003 f823 	bl	800495c <lv_obj_set_pos>
	lv_obj_set_size(file_search, lv_pct(98), lv_pct(15));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689c      	ldr	r4, [r3, #8]
 800191a:	2062      	movs	r0, #98	; 0x62
 800191c:	f7ff ff98 	bl	8001850 <lv_pct>
 8001920:	4603      	mov	r3, r0
 8001922:	461d      	mov	r5, r3
 8001924:	200f      	movs	r0, #15
 8001926:	f7ff ff93 	bl	8001850 <lv_pct>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4629      	mov	r1, r5
 8001930:	4620      	mov	r0, r4
 8001932:	f002 ff97 	bl	8004864 <lv_obj_set_size>
	lv_textarea_set_placeholder_text(file_search, "Search file in here");
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4907      	ldr	r1, [pc, #28]	; (8001958 <_ZN11main_window18search_file_createEv+0x6c>)
 800193c:	4618      	mov	r0, r3
 800193e:	f01d feff 	bl	801f740 <lv_textarea_set_placeholder_text>
	lv_textarea_set_cursor_click_pos(file_search, true);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2101      	movs	r1, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f01d ffb7 	bl	801f8bc <lv_textarea_set_cursor_click_pos>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}
 8001956:	bf00      	nop
 8001958:	08025a7c 	.word	0x08025a7c

0800195c <_ZN11main_window16file_list_createEv>:

void main_window::file_list_create()
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	file_list = lv_list_create(get_screen());
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff9a 	bl	800189e <_ZN11main_window10get_screenEv>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	f013 fb6b 	bl	8015048 <lv_list_create>
 8001972:	4602      	mov	r2, r0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
	lv_obj_set_pos(file_list, 5,2+lv_pct(15));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68dc      	ldr	r4, [r3, #12]
 800197c:	200f      	movs	r0, #15
 800197e:	f7ff ff67 	bl	8001850 <lv_pct>
 8001982:	4603      	mov	r3, r0
 8001984:	b29b      	uxth	r3, r3
 8001986:	3302      	adds	r3, #2
 8001988:	b29b      	uxth	r3, r3
 800198a:	b21b      	sxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	2105      	movs	r1, #5
 8001990:	4620      	mov	r0, r4
 8001992:	f002 ffe3 	bl	800495c <lv_obj_set_pos>
	lv_obj_set_size(file_list,lv_pct(98),lv_pct(85)-7);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68dc      	ldr	r4, [r3, #12]
 800199a:	2062      	movs	r0, #98	; 0x62
 800199c:	f7ff ff58 	bl	8001850 <lv_pct>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461d      	mov	r5, r3
 80019a4:	2055      	movs	r0, #85	; 0x55
 80019a6:	f7ff ff53 	bl	8001850 <lv_pct>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b07      	subs	r3, #7
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4629      	mov	r1, r5
 80019b8:	4620      	mov	r0, r4
 80019ba:	f002 ff53 	bl	8004864 <lv_obj_set_size>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}

080019c6 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 80019c6:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80019c8:	b910      	cbnz	r0, 80019d0 <lv_disp_get_scr_act+0xa>
 80019ca:	f014 fd95 	bl	80164f8 <lv_disp_get_default>
    if(!disp) {
 80019ce:	b100      	cbz	r0, 80019d2 <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 80019d0:	6900      	ldr	r0, [r0, #16]
}
 80019d2:	bd08      	pop	{r3, pc}

080019d4 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 80019d4:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80019d6:	b910      	cbnz	r0, 80019de <lv_disp_get_scr_prev+0xa>
 80019d8:	f014 fd8e 	bl	80164f8 <lv_disp_get_default>
    if(!disp) {
 80019dc:	b100      	cbz	r0, 80019e0 <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 80019de:	6940      	ldr	r0, [r0, #20]
}
 80019e0:	bd08      	pop	{r3, pc}

080019e2 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 80019e2:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80019e4:	b910      	cbnz	r0, 80019ec <lv_disp_get_layer_top+0xa>
 80019e6:	f014 fd87 	bl	80164f8 <lv_disp_get_default>
    if(!disp) {
 80019ea:	b100      	cbz	r0, 80019ee <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 80019ec:	69c0      	ldr	r0, [r0, #28]
}
 80019ee:	bd08      	pop	{r3, pc}

080019f0 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80019f0:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 80019f2:	b910      	cbnz	r0, 80019fa <lv_disp_get_layer_sys+0xa>
 80019f4:	f014 fd80 	bl	80164f8 <lv_disp_get_default>
    if(!disp) {
 80019f8:	b100      	cbz	r0, 80019fc <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 80019fa:	6a00      	ldr	r0, [r0, #32]
}
 80019fc:	bd08      	pop	{r3, pc}

080019fe <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 80019fe:	b508      	push	{r3, lr}
	if(disp == NULL) disp = lv_disp_get_default();
 8001a00:	b908      	cbnz	r0, 8001a06 <lv_disp_get_theme+0x8>
 8001a02:	f014 fd79 	bl	80164f8 <lv_disp_get_default>
    return disp->theme;
}
 8001a06:	6880      	ldr	r0, [r0, #8]
 8001a08:	bd08      	pop	{r3, pc}

08001a0a <lv_obj_event_base>:
    return res;
}


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8001a0a:	b510      	push	{r4, lr}
 8001a0c:	460c      	mov	r4, r1
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8001a0e:	b968      	cbnz	r0, 8001a2c <lv_obj_event_base+0x22>
 8001a10:	684b      	ldr	r3, [r1, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
    else base = class_p->base_class;

    /*Find a base in which Call the ancestor's event handler_cb is set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8001a14:	b160      	cbz	r0, 8001a30 <lv_obj_event_base+0x26>
 8001a16:	6903      	ldr	r3, [r0, #16]
 8001a18:	b143      	cbz	r3, 8001a2c <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
    if(base->event_cb == NULL) return LV_RES_OK;

    /*Call the actual event callback*/
    e->user_data = NULL;
 8001a1a:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8001a1c:	4621      	mov	r1, r4
    e->user_data = NULL;
 8001a1e:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8001a20:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8001a22:	7e20      	ldrb	r0, [r4, #24]
 8001a24:	43c0      	mvns	r0, r0
 8001a26:	f000 0001 	and.w	r0, r0, #1
 8001a2a:	e002      	b.n	8001a32 <lv_obj_event_base+0x28>
    while(base && base->event_cb == NULL) base = base->base_class;
 8001a2c:	6800      	ldr	r0, [r0, #0]
 8001a2e:	e7f1      	b.n	8001a14 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 8001a30:	2001      	movs	r0, #1

    return res;
}
 8001a32:	bd10      	pop	{r4, pc}

08001a34 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 8001a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a38:	4605      	mov	r5, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8001a3a:	f000 faf3 	bl	8002024 <lv_indev_get_act>
    if(indev_act) {
 8001a3e:	b120      	cbz	r0, 8001a4a <event_send_core+0x16>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8001a40:	6800      	ldr	r0, [r0, #0]
 8001a42:	6883      	ldr	r3, [r0, #8]
 8001a44:	b10b      	cbz	r3, 8001a4a <event_send_core+0x16>
 8001a46:	7a29      	ldrb	r1, [r5, #8]
 8001a48:	4798      	blx	r3
    }

    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8001a4a:	686b      	ldr	r3, [r5, #4]
 8001a4c:	689e      	ldr	r6, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001a4e:	b116      	cbz	r6, 8001a56 <event_send_core+0x22>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001a50:	7eb3      	ldrb	r3, [r6, #26]
 8001a52:	b17b      	cbz	r3, 8001a74 <event_send_core+0x40>
    return &obj->spec_attr->event_dsc[id];
 8001a54:	68f6      	ldr	r6, [r6, #12]
    lv_res_t res = LV_RES_OK;
    res = lv_obj_event_base(NULL, e);
 8001a56:	4629      	mov	r1, r5
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff ffd6 	bl	8001a0a <lv_obj_event_base>

    uint32_t i = 0;
 8001a5e:	2700      	movs	r7, #0
    res = lv_obj_event_base(NULL, e);
 8001a60:	4604      	mov	r4, r0
    return &obj->spec_attr->event_dsc[id];
 8001a62:	f04f 080c 	mov.w	r8, #12
    while(event_dsc && res == LV_RES_OK) {
 8001a66:	2e00      	cmp	r6, #0
 8001a68:	d03e      	beq.n	8001ae8 <event_send_core+0xb4>
 8001a6a:	2c01      	cmp	r4, #1
 8001a6c:	d004      	beq.n	8001a78 <event_send_core+0x44>
            if(res != LV_RES_OK) return LV_RES_INV;
        }
    }

    return res;
}
 8001a6e:	4620      	mov	r0, r4
 8001a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!obj->spec_attr) return NULL;
 8001a74:	461e      	mov	r6, r3
 8001a76:	e7ee      	b.n	8001a56 <event_send_core+0x22>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001a78:	6833      	ldr	r3, [r6, #0]
 8001a7a:	bb03      	cbnz	r3, 8001abe <event_send_core+0x8a>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001a7c:	686b      	ldr	r3, [r5, #4]
        i++;
 8001a7e:	3701      	adds	r7, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001a80:	689b      	ldr	r3, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001a82:	bb53      	cbnz	r3, 8001ada <event_send_core+0xa6>

static bool event_is_bubbled(lv_event_code_t e)
{
    switch(e) {
 8001a84:	7a2b      	ldrb	r3, [r5, #8]
 8001a86:	3b11      	subs	r3, #17
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b15      	cmp	r3, #21
 8001a8c:	d806      	bhi.n	8001a9c <event_send_core+0x68>
 8001a8e:	2401      	movs	r4, #1
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <event_send_core+0xc0>)
 8001a92:	fa04 f303 	lsl.w	r3, r4, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	d1e8      	bne.n	8001a6e <event_send_core+0x3a>
        if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) && e->current_target->parent) {
 8001a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa0:	6868      	ldr	r0, [r5, #4]
 8001aa2:	f001 ffa6 	bl	80039f2 <lv_obj_has_flag>
 8001aa6:	b310      	cbz	r0, 8001aee <event_send_core+0xba>
 8001aa8:	686b      	ldr	r3, [r5, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	b1fb      	cbz	r3, 8001aee <event_send_core+0xba>
            e->current_target = e->current_target->parent;
 8001aae:	606b      	str	r3, [r5, #4]
            res = event_send_core(e);
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f7ff ffbf 	bl	8001a34 <event_send_core>
            if(e->deleted) return LV_RES_INV;
 8001ab6:	1e43      	subs	r3, r0, #1
 8001ab8:	425c      	negs	r4, r3
 8001aba:	415c      	adcs	r4, r3
 8001abc:	e7d7      	b.n	8001a6e <event_send_core+0x3a>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001abe:	7a32      	ldrb	r2, [r6, #8]
 8001ac0:	b112      	cbz	r2, 8001ac8 <event_send_core+0x94>
 8001ac2:	7a29      	ldrb	r1, [r5, #8]
 8001ac4:	4291      	cmp	r1, r2
 8001ac6:	d1d9      	bne.n	8001a7c <event_send_core+0x48>
            e->user_data = event_dsc->user_data;
 8001ac8:	6872      	ldr	r2, [r6, #4]
            event_dsc->cb(e);
 8001aca:	4628      	mov	r0, r5
            e->user_data = event_dsc->user_data;
 8001acc:	60ea      	str	r2, [r5, #12]
            event_dsc->cb(e);
 8001ace:	4798      	blx	r3
            if(e->deleted) return LV_RES_INV;
 8001ad0:	7e2b      	ldrb	r3, [r5, #24]
 8001ad2:	07da      	lsls	r2, r3, #31
 8001ad4:	d5d2      	bpl.n	8001a7c <event_send_core+0x48>
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	e7c9      	b.n	8001a6e <event_send_core+0x3a>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001ada:	7e9a      	ldrb	r2, [r3, #26]
 8001adc:	4297      	cmp	r7, r2
 8001ade:	d2d1      	bcs.n	8001a84 <event_send_core+0x50>
    return &obj->spec_attr->event_dsc[id];
 8001ae0:	68de      	ldr	r6, [r3, #12]
 8001ae2:	fb08 6607 	mla	r6, r8, r7, r6
 8001ae6:	e7be      	b.n	8001a66 <event_send_core+0x32>
    if(res == LV_RES_OK && event_is_bubbled(e->code)) {
 8001ae8:	2c01      	cmp	r4, #1
 8001aea:	d1c0      	bne.n	8001a6e <event_send_core+0x3a>
 8001aec:	e7ca      	b.n	8001a84 <event_send_core+0x50>
    res = lv_obj_event_base(NULL, e);
 8001aee:	2401      	movs	r4, #1
 8001af0:	e7bd      	b.n	8001a6e <event_send_core+0x3a>
 8001af2:	bf00      	nop
 8001af4:	002f27ff 	.word	0x002f27ff

08001af8 <lv_event_send>:
{
 8001af8:	b510      	push	{r4, lr}
 8001afa:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8001afc:	b1b8      	cbz	r0, 8001b2e <lv_event_send+0x36>
    e.deleted = 0;
 8001afe:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.code = event_code;
 8001b02:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8001b06:	2100      	movs	r1, #0
    e.prev = event_head;
 8001b08:	4c0a      	ldr	r4, [pc, #40]	; (8001b34 <lv_event_send+0x3c>)
    e.deleted = 0;
 8001b0a:	f361 0300 	bfi	r3, r1, #0, #1
    e.current_target = obj;
 8001b0e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e.deleted = 0;
 8001b12:	f88d 301c 	strb.w	r3, [sp, #28]
    event_head = &e;
 8001b16:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8001b18:	6823      	ldr	r3, [r4, #0]
    event_head = &e;
 8001b1a:	6020      	str	r0, [r4, #0]
    e.prev = event_head;
 8001b1c:	9306      	str	r3, [sp, #24]
    e.param = param;
 8001b1e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    lv_res_t res = event_send_core(&e);
 8001b22:	f7ff ff87 	bl	8001a34 <event_send_core>
    event_head = e.prev;
 8001b26:	9b06      	ldr	r3, [sp, #24]
 8001b28:	6023      	str	r3, [r4, #0]
}
 8001b2a:	b008      	add	sp, #32
 8001b2c:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e7fb      	b.n	8001b2a <lv_event_send+0x32>
 8001b32:	bf00      	nop
 8001b34:	20003048 	.word	0x20003048

08001b38 <lv_event_get_target>:
}
 8001b38:	6800      	ldr	r0, [r0, #0]
 8001b3a:	4770      	bx	lr

08001b3c <lv_event_get_code>:
}
 8001b3c:	7a00      	ldrb	r0, [r0, #8]
 8001b3e:	4770      	bx	lr

08001b40 <lv_event_get_param>:
}
 8001b40:	6900      	ldr	r0, [r0, #16]
 8001b42:	4770      	bx	lr

08001b44 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <_lv_event_mark_deleted+0x20>)
 8001b46:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8001b48:	b903      	cbnz	r3, 8001b4c <_lv_event_mark_deleted+0x8>
}
 8001b4a:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4282      	cmp	r2, r0
 8001b50:	d002      	beq.n	8001b58 <_lv_event_mark_deleted+0x14>
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4282      	cmp	r2, r0
 8001b56:	d103      	bne.n	8001b60 <_lv_event_mark_deleted+0x1c>
 8001b58:	7e1a      	ldrb	r2, [r3, #24]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	e7f1      	b.n	8001b48 <_lv_event_mark_deleted+0x4>
 8001b64:	20003048 	.word	0x20003048

08001b68 <lv_obj_add_event_cb>:
{
 8001b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b6c:	4605      	mov	r5, r0
 8001b6e:	4617      	mov	r7, r2
 8001b70:	4698      	mov	r8, r3
 8001b72:	460e      	mov	r6, r1
    lv_obj_allocate_spec_attr(obj);
 8001b74:	f002 fa0a 	bl	8003f8c <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8001b78:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8001b7c:	f899 401a 	ldrb.w	r4, [r9, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8001b80:	f8d9 000c 	ldr.w	r0, [r9, #12]
    obj->spec_attr->event_dsc_cnt++;
 8001b84:	3401      	adds	r4, #1
 8001b86:	b2e4      	uxtb	r4, r4
 8001b88:	f889 401a 	strb.w	r4, [r9, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8001b8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001b90:	00a1      	lsls	r1, r4, #2
 8001b92:	f015 fd8f 	bl	80176b4 <lv_mem_realloc>
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001b96:	68aa      	ldr	r2, [r5, #8]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8001b98:	f8c9 000c 	str.w	r0, [r9, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001b9c:	68d3      	ldr	r3, [r2, #12]
 8001b9e:	b903      	cbnz	r3, 8001ba2 <lv_obj_add_event_cb+0x3a>
 8001ba0:	e7fe      	b.n	8001ba0 <lv_obj_add_event_cb+0x38>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8001ba2:	7e91      	ldrb	r1, [r2, #26]
 8001ba4:	240c      	movs	r4, #12
 8001ba6:	f06f 020b 	mvn.w	r2, #11
 8001baa:	fb14 2401 	smlabb	r4, r4, r1, r2
 8001bae:	1918      	adds	r0, r3, r4
 8001bb0:	511e      	str	r6, [r3, r4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 8001bb2:	7207      	strb	r7, [r0, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8001bb4:	f8c0 8004 	str.w	r8, [r0, #4]
}
 8001bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bbc <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8001bbc:	7a03      	ldrb	r3, [r0, #8]
 8001bbe:	2b13      	cmp	r3, #19
 8001bc0:	d106      	bne.n	8001bd0 <lv_event_set_ext_draw_size+0x14>
    return e->param;
 8001bc2:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8001bc4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001bc8:	4299      	cmp	r1, r3
 8001bca:	bfb8      	it	lt
 8001bcc:	4619      	movlt	r1, r3
 8001bce:	8011      	strh	r1, [r2, #0]
}
 8001bd0:	4770      	bx	lr

08001bd2 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8001bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
 8001bd4:	2600      	movs	r6, #0
{
 8001bd6:	4607      	mov	r7, r0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f014 fd0b 	bl	80165f4 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 8001bde:	4635      	mov	r5, r6
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001be0:	4604      	mov	r4, r0
    while(indev) {
 8001be2:	b934      	cbnz	r4, 8001bf2 <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 8001be4:	b9bd      	cbnz	r5, 8001c16 <get_indev+0x44>
    if(indev_group) return indev_group;
 8001be6:	b9c6      	cbnz	r6, 8001c1a <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8001be8:	4630      	mov	r0, r6
}
 8001bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 8001bee:	f014 bd01 	b.w	80165f4 <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 fa1c 	bl	8002030 <lv_indev_get_type>
        if(indev->group == g) {
 8001bf8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001bfa:	42bb      	cmp	r3, r7
 8001bfc:	d105      	bne.n	8001c0a <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d008      	beq.n	8001c14 <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001c02:	4626      	mov	r6, r4
 8001c04:	2804      	cmp	r0, #4
 8001c06:	bf08      	it	eq
 8001c08:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f014 fcf2 	bl	80165f4 <lv_indev_get_next>
 8001c10:	4604      	mov	r4, r0
 8001c12:	e7e6      	b.n	8001be2 <get_indev+0x10>
 8001c14:	4625      	mov	r5, r4
}
 8001c16:	4628      	mov	r0, r5
 8001c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1a:	4635      	mov	r5, r6
 8001c1c:	e7fb      	b.n	8001c16 <get_indev+0x44>

08001c1e <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c22:	4681      	mov	r9, r0
 8001c24:	4688      	mov	r8, r1
 8001c26:	4616      	mov	r6, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 8001c28:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
 8001c2a:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 8001c2c:	2500      	movs	r5, #0
        if(obj_next == NULL) {
 8001c2e:	2c00      	cmp	r4, #0
 8001c30:	d14d      	bne.n	8001cce <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8001c32:	f899 3018 	ldrb.w	r3, [r9, #24]
 8001c36:	071a      	lsls	r2, r3, #28
 8001c38:	d401      	bmi.n	8001c3e <focus_next_core.part.0+0x20>
 8001c3a:	2d00      	cmp	r5, #0
 8001c3c:	d150      	bne.n	8001ce0 <focus_next_core.part.0+0xc2>
                if(!can_begin) return;
 8001c3e:	2f00      	cmp	r7, #0
 8001c40:	d04e      	beq.n	8001ce0 <focus_next_core.part.0+0xc2>
                obj_next  = begin(&group->obj_ll);
 8001c42:	4648      	mov	r0, r9
 8001c44:	47c0      	blx	r8
 8001c46:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 8001c48:	2d00      	cmp	r5, #0
 8001c4a:	d13c      	bne.n	8001cc6 <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d047      	beq.n	8001ce0 <focus_next_core.part.0+0xc2>
 8001c50:	4605      	mov	r5, r0
                can_begin = false;
 8001c52:	2700      	movs	r7, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8001c54:	6820      	ldr	r0, [r4, #0]
 8001c56:	f001 fed9 	bl	8003a0c <lv_obj_get_state>
 8001c5a:	0603      	lsls	r3, r0, #24
 8001c5c:	d4e7      	bmi.n	8001c2e <focus_next_core.part.0+0x10>
        if(lv_obj_has_flag(*obj_next, LV_OBJ_FLAG_HIDDEN) == false) break;
 8001c5e:	2101      	movs	r1, #1
 8001c60:	6820      	ldr	r0, [r4, #0]
 8001c62:	f001 fec6 	bl	80039f2 <lv_obj_has_flag>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1e1      	bne.n	8001c2e <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8001c6a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001c6e:	42a3      	cmp	r3, r4
 8001c70:	d036      	beq.n	8001ce0 <focus_next_core.part.0+0xc2>
    if(group->obj_focus) {
 8001c72:	b17b      	cbz	r3, 8001c94 <focus_next_core.part.0+0x76>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8001c74:	681d      	ldr	r5, [r3, #0]
 8001c76:	4648      	mov	r0, r9
 8001c78:	f7ff ffab 	bl	8001bd2 <get_indev>
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4628      	mov	r0, r5
 8001c82:	f7ff ff39 	bl	8001af8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8001c86:	2801      	cmp	r0, #1
 8001c88:	d12a      	bne.n	8001ce0 <focus_next_core.part.0+0xc2>
        lv_obj_invalidate(*group->obj_focus);
 8001c8a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f003 f85a 	bl	8004d48 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8001c94:	f8c9 400c 	str.w	r4, [r9, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8001c98:	4648      	mov	r0, r9
 8001c9a:	6824      	ldr	r4, [r4, #0]
 8001c9c:	f7ff ff99 	bl	8001bd2 <get_indev>
 8001ca0:	210e      	movs	r1, #14
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff ff27 	bl	8001af8 <lv_event_send>
    if(res != LV_RES_OK) return;
 8001caa:	2801      	cmp	r0, #1
 8001cac:	d118      	bne.n	8001ce0 <focus_next_core.part.0+0xc2>
    lv_obj_invalidate(*group->obj_focus);
 8001cae:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	f003 f848 	bl	8004d48 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8001cb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001cbc:	b183      	cbz	r3, 8001ce0 <focus_next_core.part.0+0xc2>
 8001cbe:	4648      	mov	r0, r9
}
 8001cc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 8001cc4:	4718      	bx	r3
                can_begin = false;
 8001cc6:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 8001cc8:	2c00      	cmp	r4, #0
 8001cca:	d1c3      	bne.n	8001c54 <focus_next_core.part.0+0x36>
 8001ccc:	e7b1      	b.n	8001c32 <focus_next_core.part.0+0x14>
        if(obj_sentinel == NULL) {
 8001cce:	2d00      	cmp	r5, #0
 8001cd0:	bf08      	it	eq
 8001cd2:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	4648      	mov	r0, r9
 8001cd8:	47b0      	blx	r6
            if(obj_next == obj_sentinel) return;
 8001cda:	42a8      	cmp	r0, r5
            obj_next = move(&group->obj_ll, obj_next);
 8001cdc:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
 8001cde:	d1f3      	bne.n	8001cc8 <focus_next_core.part.0+0xaa>
}
 8001ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001ce4 <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8001ce4:	211c      	movs	r1, #28
 8001ce6:	4801      	ldr	r0, [pc, #4]	; (8001cec <_lv_group_init+0x8>)
 8001ce8:	f015 b9cf 	b.w	801708a <_lv_ll_init>
 8001cec:	2000b5d8 	.word	0x2000b5d8

08001cf0 <lv_group_get_default>:
}
 8001cf0:	4b01      	ldr	r3, [pc, #4]	; (8001cf8 <lv_group_get_default+0x8>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000304c 	.word	0x2000304c

08001cfc <lv_group_focus_next>:
    if(group->frozen) return;
 8001cfc:	7e03      	ldrb	r3, [r0, #24]
 8001cfe:	07db      	lsls	r3, r3, #31
 8001d00:	d403      	bmi.n	8001d0a <lv_group_focus_next+0xe>
 8001d02:	4a02      	ldr	r2, [pc, #8]	; (8001d0c <lv_group_focus_next+0x10>)
 8001d04:	4902      	ldr	r1, [pc, #8]	; (8001d10 <lv_group_focus_next+0x14>)
 8001d06:	f7ff bf8a 	b.w	8001c1e <focus_next_core.part.0>
}
 8001d0a:	4770      	bx	lr
 8001d0c:	0801718b 	.word	0x0801718b
 8001d10:	0801717f 	.word	0x0801717f

08001d14 <lv_group_focus_prev>:
    if(group->frozen) return;
 8001d14:	7e03      	ldrb	r3, [r0, #24]
 8001d16:	07db      	lsls	r3, r3, #31
 8001d18:	d403      	bmi.n	8001d22 <lv_group_focus_prev+0xe>
 8001d1a:	4a02      	ldr	r2, [pc, #8]	; (8001d24 <lv_group_focus_prev+0x10>)
 8001d1c:	4902      	ldr	r1, [pc, #8]	; (8001d28 <lv_group_focus_prev+0x14>)
 8001d1e:	f7ff bf7e 	b.w	8001c1e <focus_next_core.part.0>
}
 8001d22:	4770      	bx	lr
 8001d24:	08017193 	.word	0x08017193
 8001d28:	08017185 	.word	0x08017185

08001d2c <lv_group_refocus>:
{
 8001d2c:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 8001d2e:	7e03      	ldrb	r3, [r0, #24]
{
 8001d30:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8001d32:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	d406      	bmi.n	8001d4e <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 8001d40:	f7ff ffdc 	bl	8001cfc <lv_group_focus_next>
    g->wrap = temp_wrap;
 8001d44:	7e23      	ldrb	r3, [r4, #24]
 8001d46:	f365 03c3 	bfi	r3, r5, #3, #1
 8001d4a:	7623      	strb	r3, [r4, #24]
}
 8001d4c:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8001d4e:	f7ff ffe1 	bl	8001d14 <lv_group_focus_prev>
 8001d52:	e7f7      	b.n	8001d44 <lv_group_refocus+0x18>

08001d54 <lv_group_add_obj>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	460c      	mov	r4, r1
    if(group == NULL) return;
 8001d58:	4605      	mov	r5, r0
 8001d5a:	b378      	cbz	r0, 8001dbc <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8001d5c:	f015 fa0f 	bl	801717e <_lv_ll_get_head>
 8001d60:	b9c8      	cbnz	r0, 8001d96 <lv_group_add_obj+0x42>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f001 fe54 	bl	8003a10 <lv_obj_get_group>
    if(group_cur) {
 8001d68:	b140      	cbz	r0, 8001d7c <lv_group_add_obj+0x28>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8001d6a:	68a3      	ldr	r3, [r4, #8]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	b153      	cbz	r3, 8001d86 <lv_group_add_obj+0x32>
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	d106      	bne.n	8001d86 <lv_group_add_obj+0x32>
            lv_group_refocus(group_cur);
 8001d78:	f7ff ffd8 	bl	8001d2c <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8001d7c:	68a3      	ldr	r3, [r4, #8]
 8001d7e:	b913      	cbnz	r3, 8001d86 <lv_group_add_obj+0x32>
 8001d80:	4620      	mov	r0, r4
 8001d82:	f002 f903 	bl	8003f8c <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8001d86:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8001d88:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 8001d8a:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8001d8c:	f015 f9a0 	bl	80170d0 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 8001d90:	4606      	mov	r6, r0
 8001d92:	b940      	cbnz	r0, 8001da6 <lv_group_add_obj+0x52>
 8001d94:	e7fe      	b.n	8001d94 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
 8001d96:	6803      	ldr	r3, [r0, #0]
 8001d98:	42a3      	cmp	r3, r4
 8001d9a:	d00f      	beq.n	8001dbc <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8001d9c:	4601      	mov	r1, r0
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f015 f9f3 	bl	801718a <_lv_ll_get_next>
 8001da4:	e7dc      	b.n	8001d60 <lv_group_add_obj+0xc>
    *next = obj;
 8001da6:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8001da8:	4628      	mov	r0, r5
 8001daa:	f015 f9e8 	bl	801717e <_lv_ll_get_head>
 8001dae:	4286      	cmp	r6, r0
 8001db0:	d104      	bne.n	8001dbc <lv_group_add_obj+0x68>
        lv_group_refocus(group);
 8001db2:	4628      	mov	r0, r5
}
 8001db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 8001db8:	f7ff bfb8 	b.w	8001d2c <lv_group_refocus>
}
 8001dbc:	bd70      	pop	{r4, r5, r6, pc}

08001dbe <lv_group_remove_obj>:
{
 8001dbe:	b570      	push	{r4, r5, r6, lr}
 8001dc0:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 8001dc2:	f001 fe25 	bl	8003a10 <lv_obj_get_group>
    if(g == NULL) return;
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d038      	beq.n	8001e3e <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 8001dcc:	68c3      	ldr	r3, [r0, #12]
 8001dce:	b1e3      	cbz	r3, 8001e0a <lv_group_remove_obj+0x4c>
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	42b3      	cmp	r3, r6
 8001dd4:	d119      	bne.n	8001e0a <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 8001dd6:	7e03      	ldrb	r3, [r0, #24]
 8001dd8:	07da      	lsls	r2, r3, #31
 8001dda:	bf44      	itt	mi
 8001ddc:	f36f 0300 	bfcmi	r3, #0, #1
 8001de0:	7603      	strbmi	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8001de2:	f015 f9cc 	bl	801717e <_lv_ll_get_head>
 8001de6:	68e3      	ldr	r3, [r4, #12]
 8001de8:	4283      	cmp	r3, r0
 8001dea:	d129      	bne.n	8001e40 <lv_group_remove_obj+0x82>
 8001dec:	4620      	mov	r0, r4
 8001dee:	f015 f9c9 	bl	8017184 <_lv_ll_get_tail>
 8001df2:	68e3      	ldr	r3, [r4, #12]
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d123      	bne.n	8001e40 <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8001df8:	6805      	ldr	r5, [r0, #0]
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff fee9 	bl	8001bd2 <get_indev>
 8001e00:	210f      	movs	r1, #15
 8001e02:	4602      	mov	r2, r0
 8001e04:	4628      	mov	r0, r5
 8001e06:	f7ff fe77 	bl	8001af8 <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 8001e0a:	68e3      	ldr	r3, [r4, #12]
 8001e0c:	b123      	cbz	r3, 8001e18 <lv_group_remove_obj+0x5a>
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 8001e12:	bf04      	itt	eq
 8001e14:	2300      	moveq	r3, #0
 8001e16:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f015 f9b0 	bl	801717e <_lv_ll_get_head>
 8001e1e:	4605      	mov	r5, r0
 8001e20:	b168      	cbz	r0, 8001e3e <lv_group_remove_obj+0x80>
        if(*i == obj) {
 8001e22:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 8001e24:	4629      	mov	r1, r5
 8001e26:	4620      	mov	r0, r4
        if(*i == obj) {
 8001e28:	42b3      	cmp	r3, r6
 8001e2a:	d10d      	bne.n	8001e48 <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 8001e2c:	f015 f96c 	bl	8017108 <_lv_ll_remove>
            lv_mem_free(i);
 8001e30:	4628      	mov	r0, r5
 8001e32:	f015 faa7 	bl	8017384 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8001e36:	68b3      	ldr	r3, [r6, #8]
 8001e38:	b10b      	cbz	r3, 8001e3e <lv_group_remove_obj+0x80>
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
}
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff ff73 	bl	8001d2c <lv_group_refocus>
 8001e46:	e7e0      	b.n	8001e0a <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 8001e48:	f015 f99f 	bl	801718a <_lv_ll_get_next>
 8001e4c:	e7e7      	b.n	8001e1e <lv_group_remove_obj+0x60>

08001e4e <lv_group_get_focused>:
    if(!group) return NULL;
 8001e4e:	b110      	cbz	r0, 8001e56 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8001e50:	68c0      	ldr	r0, [r0, #12]
 8001e52:	b100      	cbz	r0, 8001e56 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8001e54:	6800      	ldr	r0, [r0, #0]
}
 8001e56:	4770      	bx	lr

08001e58 <lv_group_send_data>:
{
 8001e58:	b507      	push	{r0, r1, r2, lr}
 8001e5a:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8001e5c:	f7ff fff7 	bl	8001e4e <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8001e60:	b130      	cbz	r0, 8001e70 <lv_group_send_data+0x18>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8001e62:	aa01      	add	r2, sp, #4
 8001e64:	210d      	movs	r1, #13
 8001e66:	f7ff fe47 	bl	8001af8 <lv_event_send>
}
 8001e6a:	b003      	add	sp, #12
 8001e6c:	f85d fb04 	ldr.w	pc, [sp], #4
    if(act == NULL) return LV_RES_OK;
 8001e70:	2001      	movs	r0, #1
 8001e72:	e7fa      	b.n	8001e6a <lv_group_send_data+0x12>

08001e74 <lv_group_set_editing>:
{
 8001e74:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 8001e76:	4603      	mov	r3, r0
 8001e78:	b1e0      	cbz	r0, 8001eb4 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8001e7a:	7e02      	ldrb	r2, [r0, #24]
 8001e7c:	f3c2 0440 	ubfx	r4, r2, #1, #1
 8001e80:	428c      	cmp	r4, r1
 8001e82:	d017      	beq.n	8001eb4 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 8001e84:	f361 0241 	bfi	r2, r1, #1, #1
 8001e88:	7602      	strb	r2, [r0, #24]
    lv_obj_t * focused = lv_group_get_focused(group);
 8001e8a:	f7ff ffe0 	bl	8001e4e <lv_group_get_focused>
    if(focused) {
 8001e8e:	4604      	mov	r4, r0
 8001e90:	b180      	cbz	r0, 8001eb4 <lv_group_set_editing+0x40>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4618      	mov	r0, r3
 8001e96:	6815      	ldr	r5, [r2, #0]
 8001e98:	f7ff fe9b 	bl	8001bd2 <get_indev>
 8001e9c:	210e      	movs	r1, #14
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	f7ff fe29 	bl	8001af8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8001ea6:	2801      	cmp	r0, #1
 8001ea8:	d104      	bne.n	8001eb4 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 8001eaa:	4620      	mov	r0, r4
}
 8001eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 8001eb0:	f002 bf4a 	b.w	8004d48 <lv_obj_invalidate>
}
 8001eb4:	bd38      	pop	{r3, r4, r5, pc}

08001eb6 <lv_group_focus_obj>:
{
 8001eb6:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 8001eb8:	4606      	mov	r6, r0
 8001eba:	b170      	cbz	r0, 8001eda <lv_group_focus_obj+0x24>
    lv_group_t * g = lv_obj_get_group(obj);
 8001ebc:	f001 fda8 	bl	8003a10 <lv_obj_get_group>
    if(g == NULL) return;
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	b150      	cbz	r0, 8001eda <lv_group_focus_obj+0x24>
    if(g->frozen != 0) return;
 8001ec4:	7e01      	ldrb	r1, [r0, #24]
 8001ec6:	f011 0101 	ands.w	r1, r1, #1
 8001eca:	d106      	bne.n	8001eda <lv_group_focus_obj+0x24>
    lv_group_set_editing(g, false);
 8001ecc:	f7ff ffd2 	bl	8001e74 <lv_group_set_editing>
    _LV_LL_READ(&g->obj_ll, i) {
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f015 f954 	bl	801717e <_lv_ll_get_head>
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	b900      	cbnz	r0, 8001edc <lv_group_focus_obj+0x26>
}
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	42b3      	cmp	r3, r6
 8001ee0:	d127      	bne.n	8001f32 <lv_group_focus_obj+0x7c>
            if(g->obj_focus != NULL) {
 8001ee2:	68e3      	ldr	r3, [r4, #12]
 8001ee4:	b173      	cbz	r3, 8001f04 <lv_group_focus_obj+0x4e>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8001ee6:	681e      	ldr	r6, [r3, #0]
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7ff fe72 	bl	8001bd2 <get_indev>
 8001eee:	210f      	movs	r1, #15
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f7ff fe00 	bl	8001af8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8001ef8:	2801      	cmp	r0, #1
 8001efa:	d1ee      	bne.n	8001eda <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	f002 ff22 	bl	8004d48 <lv_obj_invalidate>
                if(g->focus_cb) g->focus_cb(g);
 8001f04:	6923      	ldr	r3, [r4, #16]
            g->obj_focus = i;
 8001f06:	60e5      	str	r5, [r4, #12]
                if(g->focus_cb) g->focus_cb(g);
 8001f08:	b10b      	cbz	r3, 8001f0e <lv_group_focus_obj+0x58>
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 8001f0e:	68e3      	ldr	r3, [r4, #12]
 8001f10:	4620      	mov	r0, r4
 8001f12:	681d      	ldr	r5, [r3, #0]
 8001f14:	f7ff fe5d 	bl	8001bd2 <get_indev>
 8001f18:	210e      	movs	r1, #14
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f7ff fdeb 	bl	8001af8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8001f22:	2801      	cmp	r0, #1
 8001f24:	d1d9      	bne.n	8001eda <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 8001f26:	68e3      	ldr	r3, [r4, #12]
}
 8001f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                lv_obj_invalidate(*g->obj_focus);
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	f002 bf0b 	b.w	8004d48 <lv_obj_invalidate>
    _LV_LL_READ(&g->obj_ll, i) {
 8001f32:	4629      	mov	r1, r5
 8001f34:	4620      	mov	r0, r4
 8001f36:	f015 f928 	bl	801718a <_lv_ll_get_next>
 8001f3a:	e7cc      	b.n	8001ed6 <lv_group_focus_obj+0x20>

08001f3c <lv_group_get_editing>:
    if(!group) return false;
 8001f3c:	b110      	cbz	r0, 8001f44 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 8001f3e:	7e00      	ldrb	r0, [r0, #24]
 8001f40:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8001f44:	4770      	bx	lr

08001f46 <lv_group_get_obj_count>:
    return _lv_ll_get_len(&group->obj_ll);
 8001f46:	f015 b927 	b.w	8017198 <_lv_ll_get_len>
	...

08001f4c <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 8001f4c:	7840      	ldrb	r0, [r0, #1]
 8001f4e:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
    }

    return proc->reset_query ? true : false;
}
 8001f50:	f3c0 0040 	ubfx	r0, r0, #1, #1
        indev_obj_act = NULL;
 8001f54:	bf42      	ittt	mi
 8001f56:	4b02      	ldrmi	r3, [pc, #8]	; (8001f60 <indev_reset_check+0x14>)
 8001f58:	2200      	movmi	r2, #0
 8001f5a:	601a      	strmi	r2, [r3, #0]
}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20003054 	.word	0x20003054

08001f64 <indev_proc_release>:
{
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->wait_until_release != 0) {
 8001f66:	7843      	ldrb	r3, [r0, #1]
{
 8001f68:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8001f6a:	071a      	lsls	r2, r3, #28
 8001f6c:	d507      	bpl.n	8001f7e <indev_proc_release+0x1a>
        proc->types.pointer.act_obj  = NULL;
 8001f6e:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
 8001f70:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.last_obj = NULL;
 8001f74:	e9c0 2208 	strd	r2, r2, [r0, #32]
        proc->longpr_rep_timestamp   = 0;
 8001f78:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
        proc->wait_until_release     = 0;
 8001f7c:	7043      	strb	r3, [r0, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 8001f7e:	6a20      	ldr	r0, [r4, #32]
 8001f80:	4d19      	ldr	r5, [pc, #100]	; (8001fe8 <indev_proc_release+0x84>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8001f82:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    indev_obj_act = proc->types.pointer.act_obj;
 8001f84:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 8001f86:	b168      	cbz	r0, 8001fa4 <indev_proc_release+0x40>
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8001f88:	4e18      	ldr	r6, [pc, #96]	; (8001fec <indev_proc_release+0x88>)
 8001f8a:	2108      	movs	r1, #8
 8001f8c:	6832      	ldr	r2, [r6, #0]
 8001f8e:	f7ff fdb3 	bl	8001af8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff ffda 	bl	8001f4c <indev_reset_check>
 8001f98:	b9d0      	cbnz	r0, 8001fd0 <indev_proc_release+0x6c>
        if(scroll_obj == NULL) {
 8001f9a:	b167      	cbz	r7, 8001fb6 <indev_proc_release+0x52>
        proc->types.pointer.act_obj = NULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6223      	str	r3, [r4, #32]
        proc->longpr_rep_timestamp  = 0;
 8001fa0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    if(scroll_obj) {
 8001fa4:	b1a7      	cbz	r7, 8001fd0 <indev_proc_release+0x6c>
        _lv_indev_scroll_throw_handler(proc);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f001 fa22 	bl	80033f0 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8001fac:	4620      	mov	r0, r4
}
 8001fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        if(indev_reset_check(proc)) return;
 8001fb2:	f7ff bfcb 	b.w	8001f4c <indev_reset_check>
            if(proc->long_pr_sent == 0) {
 8001fb6:	7863      	ldrb	r3, [r4, #1]
 8001fb8:	07db      	lsls	r3, r3, #31
 8001fba:	d50a      	bpl.n	8001fd2 <indev_proc_release+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8001fbc:	6832      	ldr	r2, [r6, #0]
 8001fbe:	2107      	movs	r1, #7
 8001fc0:	6828      	ldr	r0, [r5, #0]
 8001fc2:	f7ff fd99 	bl	8001af8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff ffc0 	bl	8001f4c <indev_reset_check>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d0e5      	beq.n	8001f9c <indev_proc_release+0x38>
}
 8001fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8001fd2:	6832      	ldr	r2, [r6, #0]
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	6828      	ldr	r0, [r5, #0]
 8001fd8:	f7ff fd8e 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff ffb5 	bl	8001f4c <indev_reset_check>
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d0ea      	beq.n	8001fbc <indev_proc_release+0x58>
 8001fe6:	e7f3      	b.n	8001fd0 <indev_proc_release+0x6c>
 8001fe8:	20003054 	.word	0x20003054
 8001fec:	20003050 	.word	0x20003050

08001ff0 <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 8001ff0:	7942      	ldrb	r2, [r0, #5]
 8001ff2:	0793      	lsls	r3, r2, #30
 8001ff4:	d513      	bpl.n	800201e <indev_proc_reset_query_handler+0x2e>
        indev->proc.types.pointer.act_obj           = NULL;
 8001ff6:	2300      	movs	r3, #0
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8001ff8:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
        indev->proc.long_pr_sent                    = 0;
 8001ffc:	f022 0203 	bic.w	r2, r2, #3
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002000:	f363 0103 	bfi	r1, r3, #0, #4
        indev->proc.types.pointer.scroll_obj          = NULL;
 8002004:	62c3      	str	r3, [r0, #44]	; 0x2c
        indev->proc.long_pr_sent                    = 0;
 8002006:	7142      	strb	r2, [r0, #5]
        indev_obj_act                               = NULL;
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <indev_proc_reset_query_handler+0x30>)
        indev->proc.types.pointer.gesture_sum.x     = 0;
 800200a:	63c3      	str	r3, [r0, #60]	; 0x3c
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 800200c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        indev_obj_act                               = NULL;
 8002010:	6013      	str	r3, [r2, #0]
        indev->proc.types.pointer.last_obj          = NULL;
 8002012:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
        indev->proc.longpr_rep_timestamp            = 0;
 8002016:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 800201a:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 800201e:	4770      	bx	lr
 8002020:	20003054 	.word	0x20003054

08002024 <lv_indev_get_act>:
}
 8002024:	4b01      	ldr	r3, [pc, #4]	; (800202c <lv_indev_get_act+0x8>)
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20003050 	.word	0x20003050

08002030 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8002030:	b108      	cbz	r0, 8002036 <lv_indev_get_type+0x6>
    return indev->driver->type;
 8002032:	6803      	ldr	r3, [r0, #0]
 8002034:	7818      	ldrb	r0, [r3, #0]
}
 8002036:	4770      	bx	lr

08002038 <lv_indev_reset>:
{
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	460d      	mov	r5, r1
    if(indev) {
 800203c:	4604      	mov	r4, r0
 800203e:	2800      	cmp	r0, #0
 8002040:	d035      	beq.n	80020ae <lv_indev_reset+0x76>
        indev->proc.reset_query = 1;
 8002042:	7943      	ldrb	r3, [r0, #5]
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <lv_indev_reset+0x8c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4283      	cmp	r3, r0
 8002050:	bf02      	ittt	eq
 8002052:	4b1d      	ldreq	r3, [pc, #116]	; (80020c8 <lv_indev_reset+0x90>)
 8002054:	2200      	moveq	r2, #0
 8002056:	601a      	streq	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8002058:	b171      	cbz	r1, 8002078 <lv_indev_reset+0x40>
 800205a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800205c:	428b      	cmp	r3, r1
 800205e:	d00b      	beq.n	8002078 <lv_indev_reset+0x40>
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8002060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002062:	42ab      	cmp	r3, r5
 8002064:	d102      	bne.n	800206c <lv_indev_reset+0x34>
            indev->proc.types.pointer.act_obj = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	6263      	str	r3, [r4, #36]	; 0x24
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 800206a:	b115      	cbz	r5, 8002072 <lv_indev_reset+0x3a>
 800206c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800206e:	42ab      	cmp	r3, r5
 8002070:	d101      	bne.n	8002076 <lv_indev_reset+0x3e>
            indev->proc.types.pointer.last_obj = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002076:	bd38      	pop	{r3, r4, r5, pc}
            indev->proc.types.pointer.last_pressed = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	6323      	str	r3, [r4, #48]	; 0x30
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 800207c:	2d00      	cmp	r5, #0
 800207e:	d0f2      	beq.n	8002066 <lv_indev_reset+0x2e>
 8002080:	e7ee      	b.n	8002060 <lv_indev_reset+0x28>
            i->proc.reset_query = 1;
 8002082:	7943      	ldrb	r3, [r0, #5]
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	7143      	strb	r3, [r0, #5]
            if((i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) &&
 800208a:	6803      	ldr	r3, [r0, #0]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	3b01      	subs	r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d814      	bhi.n	80020be <lv_indev_reset+0x86>
 8002094:	b195      	cbz	r5, 80020bc <lv_indev_reset+0x84>
               (obj == NULL || i->proc.types.pointer.last_pressed == obj)) {
 8002096:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002098:	42ab      	cmp	r3, r5
 800209a:	d00f      	beq.n	80020bc <lv_indev_reset+0x84>
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800209c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800209e:	42ab      	cmp	r3, r5
 80020a0:	d101      	bne.n	80020a6 <lv_indev_reset+0x6e>
                i->proc.types.pointer.act_obj = NULL;
 80020a2:	6244      	str	r4, [r0, #36]	; 0x24
            if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 80020a4:	b115      	cbz	r5, 80020ac <lv_indev_reset+0x74>
 80020a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020a8:	42ab      	cmp	r3, r5
 80020aa:	d100      	bne.n	80020ae <lv_indev_reset+0x76>
                i->proc.types.pointer.last_obj = NULL;
 80020ac:	6284      	str	r4, [r0, #40]	; 0x28
            i = lv_indev_get_next(i);
 80020ae:	f014 faa1 	bl	80165f4 <lv_indev_get_next>
        while(i) {
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d1e5      	bne.n	8002082 <lv_indev_reset+0x4a>
        indev_obj_act = NULL;
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <lv_indev_reset+0x90>)
 80020b8:	6018      	str	r0, [r3, #0]
}
 80020ba:	e7dc      	b.n	8002076 <lv_indev_reset+0x3e>
                i->proc.types.pointer.last_pressed = NULL;
 80020bc:	6304      	str	r4, [r0, #48]	; 0x30
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80020be:	2d00      	cmp	r5, #0
 80020c0:	d1ec      	bne.n	800209c <lv_indev_reset+0x64>
 80020c2:	e7ee      	b.n	80020a2 <lv_indev_reset+0x6a>
 80020c4:	20003050 	.word	0x20003050
 80020c8:	20003054 	.word	0x20003054

080020cc <lv_indev_reset_long_press>:
    indev->proc.long_pr_sent         = 0;
 80020cc:	7943      	ldrb	r3, [r0, #5]
 80020ce:	f36f 0300 	bfc	r3, #0, #1
{
 80020d2:	b510      	push	{r4, lr}
 80020d4:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 80020d6:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 80020d8:	f014 fac2 	bl	8016660 <lv_tick_get>
 80020dc:	64a0      	str	r0, [r4, #72]	; 0x48
    indev->proc.pr_timestamp         = lv_tick_get();
 80020de:	f014 fabf 	bl	8016660 <lv_tick_get>
 80020e2:	6460      	str	r0, [r4, #68]	; 0x44
}
 80020e4:	bd10      	pop	{r4, pc}

080020e6 <lv_indev_get_point>:
    if(indev == NULL) {
 80020e6:	b910      	cbnz	r0, 80020ee <lv_indev_get_point+0x8>
        point->x = 0;
 80020e8:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 80020ea:	8048      	strh	r0, [r1, #2]
        return;
 80020ec:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 80020ee:	6803      	ldr	r3, [r0, #0]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80020f6:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 80020f8:	bf09      	itett	eq
 80020fa:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
        point->x = -1;
 80020fe:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.types.pointer.act_point.x;
 8002102:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8002104:	f9b0 300a 	ldrsheq.w	r3, [r0, #10]
        point->x = -1;
 8002108:	bf18      	it	ne
 800210a:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800210c:	804b      	strh	r3, [r1, #2]
}
 800210e:	4770      	bx	lr

08002110 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 8002110:	b158      	cbz	r0, 800212a <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8002112:	6803      	ldr	r3, [r0, #0]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800211a:	2b01      	cmp	r3, #1
 800211c:	d104      	bne.n	8002128 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 800211e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002122:	f000 000f 	and.w	r0, r0, #15
 8002126:	4770      	bx	lr
    if(indev == NULL) return false;
 8002128:	2000      	movs	r0, #0
}
 800212a:	4770      	bx	lr

0800212c <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 800212c:	b140      	cbz	r0, 8002140 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 800212e:	6803      	ldr	r3, [r0, #0]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 800213a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800213c:	4770      	bx	lr
    if(indev == NULL) return NULL;
 800213e:	2000      	movs	r0, #0
}
 8002140:	4770      	bx	lr

08002142 <lv_indev_get_vect>:
    point->x = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 8002146:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 8002148:	b158      	cbz	r0, 8002162 <lv_indev_get_vect+0x20>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 800214a:	6803      	ldr	r3, [r0, #0]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002152:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.vect.x;
 8002154:	bf01      	itttt	eq
 8002156:	f9b0 3014 	ldrsheq.w	r3, [r0, #20]
 800215a:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800215c:	f9b0 3016 	ldrsheq.w	r3, [r0, #22]
 8002160:	804b      	strheq	r3, [r1, #2]
}
 8002162:	4770      	bx	lr

08002164 <lv_indev_wait_release>:
    if(indev == NULL)return;
 8002164:	b118      	cbz	r0, 800216e <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 8002166:	7943      	ldrb	r3, [r0, #5]
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	7143      	strb	r3, [r0, #5]
}
 800216e:	4770      	bx	lr

08002170 <lv_indev_get_obj_act>:
}
 8002170:	4b01      	ldr	r3, [pc, #4]	; (8002178 <lv_indev_get_obj_act+0x8>)
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20003054 	.word	0x20003054

0800217c <lv_indev_search_obj>:
{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	460e      	mov	r6, r1
    if(lv_obj_hit_test(obj, point)) {
 8002182:	f003 f804 	bl	800518e <lv_obj_hit_test>
 8002186:	b908      	cbnz	r0, 800218c <lv_indev_search_obj+0x10>
    lv_obj_t * found_p = NULL;
 8002188:	2000      	movs	r0, #0
}
 800218a:	bd70      	pop	{r4, r5, r6, pc}
        for(i = lv_obj_get_child_cnt(obj) - 1; i >= 0; i--) {
 800218c:	4620      	mov	r0, r4
 800218e:	f005 fa5f 	bl	8007650 <lv_obj_get_child_cnt>
 8002192:	1e45      	subs	r5, r0, #1
 8002194:	2d00      	cmp	r5, #0
 8002196:	da07      	bge.n	80021a8 <lv_indev_search_obj+0x2c>
        if(found_p == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) {
 8002198:	2102      	movs	r1, #2
 800219a:	4620      	mov	r0, r4
 800219c:	f001 fc29 	bl	80039f2 <lv_obj_has_flag>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d0f1      	beq.n	8002188 <lv_indev_search_obj+0xc>
            lv_obj_t * hidden_i = obj;
 80021a4:	4625      	mov	r5, r4
 80021a6:	e014      	b.n	80021d2 <lv_indev_search_obj+0x56>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 80021a8:	4629      	mov	r1, r5
 80021aa:	4620      	mov	r0, r4
 80021ac:	f005 fa41 	bl	8007632 <lv_obj_get_child>
            found_p = lv_indev_search_obj(child, point);
 80021b0:	4631      	mov	r1, r6
 80021b2:	f7ff ffe3 	bl	800217c <lv_indev_search_obj>
            if(found_p != NULL) break;
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d1e7      	bne.n	800218a <lv_indev_search_obj+0xe>
        for(i = lv_obj_get_child_cnt(obj) - 1; i >= 0; i--) {
 80021ba:	3d01      	subs	r5, #1
 80021bc:	e7ea      	b.n	8002194 <lv_indev_search_obj+0x18>
                if(lv_obj_has_flag(hidden_i, LV_OBJ_FLAG_HIDDEN) == true) break;
 80021be:	2101      	movs	r1, #1
 80021c0:	4628      	mov	r0, r5
 80021c2:	f001 fc16 	bl	80039f2 <lv_obj_has_flag>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d1de      	bne.n	8002188 <lv_indev_search_obj+0xc>
                hidden_i = lv_obj_get_parent(hidden_i);
 80021ca:	4628      	mov	r0, r5
 80021cc:	f005 fa2e 	bl	800762c <lv_obj_get_parent>
 80021d0:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 80021d2:	2d00      	cmp	r5, #0
 80021d4:	d1f3      	bne.n	80021be <lv_indev_search_obj+0x42>
            if(hidden_i == NULL && (lv_obj_get_state(obj) & LV_STATE_DISABLED) == false) found_p = obj;
 80021d6:	4620      	mov	r0, r4
 80021d8:	f001 fc18 	bl	8003a0c <lv_obj_get_state>
 80021dc:	0603      	lsls	r3, r0, #24
 80021de:	d4d3      	bmi.n	8002188 <lv_indev_search_obj+0xc>
 80021e0:	4620      	mov	r0, r4
    return found_p;
 80021e2:	e7d2      	b.n	800218a <lv_indev_search_obj+0xe>

080021e4 <indev_proc_press>:
{
 80021e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e8:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 80021ea:	4db5      	ldr	r5, [pc, #724]	; (80024c0 <indev_proc_press+0x2dc>)
 80021ec:	6a00      	ldr	r0, [r0, #32]
    if(proc->wait_until_release != 0) return;
 80021ee:	7863      	ldrb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 80021f0:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 80021f2:	071a      	lsls	r2, r3, #28
 80021f4:	d428      	bmi.n	8002248 <indev_proc_press+0x64>
    lv_disp_t * disp = indev_act->driver->disp;
 80021f6:	4eb3      	ldr	r6, [pc, #716]	; (80024c4 <indev_proc_press+0x2e0>)
 80021f8:	6833      	ldr	r3, [r6, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691f      	ldr	r7, [r3, #16]
    if(indev_obj_act == NULL) {
 80021fe:	bb28      	cbnz	r0, 800224c <indev_proc_press+0x68>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002200:	f104 0804 	add.w	r8, r4, #4
 8002204:	4638      	mov	r0, r7
 8002206:	f7ff fbf3 	bl	80019f0 <lv_disp_get_layer_sys>
 800220a:	4641      	mov	r1, r8
 800220c:	f7ff ffb6 	bl	800217c <lv_indev_search_obj>
 8002210:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002212:	b970      	cbnz	r0, 8002232 <indev_proc_press+0x4e>
 8002214:	4638      	mov	r0, r7
 8002216:	f7ff fbe4 	bl	80019e2 <lv_disp_get_layer_top>
 800221a:	4641      	mov	r1, r8
 800221c:	f7ff ffae 	bl	800217c <lv_indev_search_obj>
 8002220:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002222:	b930      	cbnz	r0, 8002232 <indev_proc_press+0x4e>
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff fbce 	bl	80019c6 <lv_disp_get_scr_act>
 800222a:	4641      	mov	r1, r8
 800222c:	f7ff ffa6 	bl	800217c <lv_indev_search_obj>
 8002230:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002234:	b173      	cbz	r3, 8002254 <indev_proc_press+0x70>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8002236:	2300      	movs	r3, #0
        _lv_indev_scroll_throw_handler(proc);
 8002238:	4620      	mov	r0, r4
        proc->types.pointer.scroll_throw_vect.x = 0;
 800223a:	61a3      	str	r3, [r4, #24]
        _lv_indev_scroll_throw_handler(proc);
 800223c:	f001 f8d8 	bl	80033f0 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff fe83 	bl	8001f4c <indev_reset_check>
 8002246:	b128      	cbz	r0, 8002254 <indev_proc_press+0x70>
}
 8002248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(proc->types.pointer.scroll_obj == NULL &&
 800224c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80d7 	beq.w	8002402 <indev_proc_press+0x21e>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002254:	6a20      	ldr	r0, [r4, #32]
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	4298      	cmp	r0, r3
 800225a:	f040 80da 	bne.w	8002412 <indev_proc_press+0x22e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800225e:	8923      	ldrh	r3, [r4, #8]
 8002260:	88a2      	ldrh	r2, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002262:	8961      	ldrh	r1, [r4, #10]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002264:	1ad2      	subs	r2, r2, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002266:	88e3      	ldrh	r3, [r4, #6]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x * 4) >> 3;
 8002268:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800226c:	1a5b      	subs	r3, r3, r1
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800226e:	b212      	sxth	r2, r2
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y * 4) >> 3;
 8002270:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002274:	b21b      	sxth	r3, r3
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002276:	8222      	strh	r2, [r4, #16]
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8002278:	1052      	asrs	r2, r2, #1
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800227a:	8263      	strh	r3, [r4, #18]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800227c:	105b      	asrs	r3, r3, #1
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 800227e:	eb02 0260 	add.w	r2, r2, r0, asr #1
    if(indev_obj_act) {
 8002282:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8002284:	eb03 0361 	add.w	r3, r3, r1, asr #1
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8002288:	8322      	strh	r2, [r4, #24]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 800228a:	8363      	strh	r3, [r4, #26]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 800228c:	69a3      	ldr	r3, [r4, #24]
 800228e:	61e3      	str	r3, [r4, #28]
    if(indev_obj_act) {
 8002290:	2800      	cmp	r0, #0
 8002292:	d0d9      	beq.n	8002248 <indev_proc_press+0x64>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8002294:	6832      	ldr	r2, [r6, #0]
 8002296:	2102      	movs	r1, #2
 8002298:	f7ff fc2e 	bl	8001af8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 800229c:	4620      	mov	r0, r4
 800229e:	f7ff fe55 	bl	8001f4c <indev_reset_check>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d1d0      	bne.n	8002248 <indev_proc_press+0x64>
        if(indev_act->proc.wait_until_release) return;
 80022a6:	6833      	ldr	r3, [r6, #0]
 80022a8:	795b      	ldrb	r3, [r3, #5]
 80022aa:	0718      	lsls	r0, r3, #28
 80022ac:	d4cc      	bmi.n	8002248 <indev_proc_press+0x64>
        _lv_indev_scroll_handler(proc);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f000 fe7e 	bl	8002fb0 <_lv_indev_scroll_handler>
        if(indev_reset_check(proc)) return;
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fe49 	bl	8001f4c <indev_reset_check>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d1c4      	bne.n	8002248 <indev_proc_press+0x64>
    if(proc->types.pointer.scroll_obj) return;
 80022be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d159      	bne.n	8002378 <indev_proc_press+0x194>
    if(proc->types.pointer.gesture_sent) return;
 80022c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80022c8:	07d9      	lsls	r1, r3, #31
 80022ca:	d455      	bmi.n	8002378 <indev_proc_press+0x194>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 80022cc:	6a27      	ldr	r7, [r4, #32]
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 80022ce:	2f00      	cmp	r7, #0
 80022d0:	d052      	beq.n	8002378 <indev_proc_press+0x194>
 80022d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d6:	4638      	mov	r0, r7
 80022d8:	f001 fb8b 	bl	80039f2 <lv_obj_has_flag>
 80022dc:	2800      	cmp	r0, #0
 80022de:	f040 8120 	bne.w	8002522 <indev_proc_press+0x33e>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 80022e2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80022e6:	6832      	ldr	r2, [r6, #0]
 80022e8:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80022ec:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
 80022f0:	f8d2 e000 	ldr.w	lr, [r2]
 80022f4:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80022f8:	f89e 801a 	ldrb.w	r8, [lr, #26]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4543      	cmp	r3, r8
 8002300:	d207      	bcs.n	8002312 <indev_proc_press+0x12e>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8002302:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
 8002306:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 800230a:	b29b      	uxth	r3, r3
 800230c:	4598      	cmp	r8, r3
        proc->types.pointer.gesture_sum.x = 0;
 800230e:	bf88      	it	hi
 8002310:	63a0      	strhi	r0, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002312:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8002314:	4408      	add	r0, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002316:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002318:	b200      	sxth	r0, r0
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 800231a:	4461      	add	r1, ip
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 800231c:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002320:	8720      	strh	r0, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002322:	b209      	sxth	r1, r1
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002324:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 8002328:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 800232c:	8761      	strh	r1, [r4, #58]	; 0x3a
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 800232e:	fa1f fc8c 	uxth.w	ip, ip
 8002332:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8002336:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 800233a:	45f4      	cmp	ip, lr
 800233c:	b29b      	uxth	r3, r3
 800233e:	d801      	bhi.n	8002344 <indev_proc_press+0x160>
 8002340:	459e      	cmp	lr, r3
 8002342:	d219      	bcs.n	8002378 <indev_proc_press+0x194>
        proc->types.pointer.gesture_sent = 1;
 8002344:	f894 e03d 	ldrb.w	lr, [r4, #61]	; 0x3d
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002348:	459c      	cmp	ip, r3
 800234a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
        proc->types.pointer.gesture_sent = 1;
 800234e:	f04e 0e01 	orr.w	lr, lr, #1
 8002352:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002356:	f240 80e9 	bls.w	800252c <indev_proc_press+0x348>
            if(proc->types.pointer.gesture_sum.x > 0)
 800235a:	2800      	cmp	r0, #0
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 800235c:	bfcc      	ite	gt
 800235e:	2102      	movgt	r1, #2
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 8002360:	2101      	movle	r1, #1
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002362:	f361 1307 	bfi	r3, r1, #4, #4
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 8002366:	4638      	mov	r0, r7
 8002368:	210c      	movs	r1, #12
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 800236a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 800236e:	f7ff fbc3 	bl	8001af8 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff fdea 	bl	8001f4c <indev_reset_check>
        if(indev_reset_check(proc)) return;
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff fde7 	bl	8001f4c <indev_reset_check>
 800237e:	2800      	cmp	r0, #0
 8002380:	f47f af62 	bne.w	8002248 <indev_proc_press+0x64>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 8002384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002386:	2b00      	cmp	r3, #0
 8002388:	f47f af5e 	bne.w	8002248 <indev_proc_press+0x64>
 800238c:	7863      	ldrb	r3, [r4, #1]
 800238e:	07da      	lsls	r2, r3, #31
 8002390:	d420      	bmi.n	80023d4 <indev_proc_press+0x1f0>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 8002392:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002394:	f014 f972 	bl	801667c <lv_tick_elaps>
 8002398:	6832      	ldr	r2, [r6, #0]
 800239a:	6813      	ldr	r3, [r2, #0]
 800239c:	8b9b      	ldrh	r3, [r3, #28]
 800239e:	4298      	cmp	r0, r3
 80023a0:	d910      	bls.n	80023c4 <indev_proc_press+0x1e0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80023a2:	2105      	movs	r1, #5
 80023a4:	6828      	ldr	r0, [r5, #0]
 80023a6:	f7ff fba7 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff fdce 	bl	8001f4c <indev_reset_check>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	f47f af49 	bne.w	8002248 <indev_proc_press+0x64>
                proc->long_pr_sent = 1;
 80023b6:	7863      	ldrb	r3, [r4, #1]
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 80023be:	f014 f94f 	bl	8016660 <lv_tick_get>
 80023c2:	6460      	str	r0, [r4, #68]	; 0x44
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 80023c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f47f af3e 	bne.w	8002248 <indev_proc_press+0x64>
 80023cc:	7863      	ldrb	r3, [r4, #1]
 80023ce:	07db      	lsls	r3, r3, #31
 80023d0:	f57f af3a 	bpl.w	8002248 <indev_proc_press+0x64>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 80023d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80023d6:	f014 f951 	bl	801667c <lv_tick_elaps>
 80023da:	6832      	ldr	r2, [r6, #0]
 80023dc:	6813      	ldr	r3, [r2, #0]
 80023de:	8bdb      	ldrh	r3, [r3, #30]
 80023e0:	4298      	cmp	r0, r3
 80023e2:	f67f af31 	bls.w	8002248 <indev_proc_press+0x64>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80023e6:	2106      	movs	r1, #6
 80023e8:	6828      	ldr	r0, [r5, #0]
 80023ea:	f7ff fb85 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fdac 	bl	8001f4c <indev_reset_check>
 80023f4:	2800      	cmp	r0, #0
 80023f6:	f47f af27 	bne.w	8002248 <indev_proc_press+0x64>
                proc->longpr_rep_timestamp = lv_tick_get();
 80023fa:	f014 f931 	bl	8016660 <lv_tick_get>
 80023fe:	6460      	str	r0, [r4, #68]	; 0x44
 8002400:	e722      	b.n	8002248 <indev_proc_press+0x64>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 8002402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002406:	f001 faf4 	bl	80039f2 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 800240a:	2800      	cmp	r0, #0
 800240c:	f47f af22 	bne.w	8002254 <indev_proc_press+0x70>
 8002410:	e6f6      	b.n	8002200 <indev_proc_press+0x1c>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	60a3      	str	r3, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 8002416:	2800      	cmp	r0, #0
 8002418:	d156      	bne.n	80024c8 <indev_proc_press+0x2e4>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 800241a:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
 800241c:	e9c4 3308 	strd	r3, r3, [r4, #32]
        if(indev_obj_act != NULL) {
 8002420:	2b00      	cmp	r3, #0
 8002422:	f43f af1c 	beq.w	800225e <indev_proc_press+0x7a>
            proc->pr_timestamp                 = lv_tick_get();
 8002426:	f014 f91b 	bl	8016660 <lv_tick_get>
            proc->long_pr_sent                 = 0;
 800242a:	7863      	ldrb	r3, [r4, #1]
            proc->types.pointer.gesture_sum.x  = 0;
 800242c:	2200      	movs	r2, #0
            proc->pr_timestamp                 = lv_tick_get();
 800242e:	6420      	str	r0, [r4, #64]	; 0x40
            proc->long_pr_sent                 = 0;
 8002430:	f36f 0300 	bfc	r3, #0, #1
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002434:	2101      	movs	r1, #1
            proc->types.pointer.gesture_sum.x  = 0;
 8002436:	63a2      	str	r2, [r4, #56]	; 0x38
            proc->long_pr_sent                 = 0;
 8002438:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800243a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800243c:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800243e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002442:	f023 0301 	bic.w	r3, r3, #1
            proc->types.pointer.scroll_sum.x     = 0;
 8002446:	e9c4 2204 	strd	r2, r2, [r4, #16]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800244a:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800244c:	6832      	ldr	r2, [r6, #0]
 800244e:	f7ff fb53 	bl	8001af8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002452:	4620      	mov	r0, r4
 8002454:	f7ff fd7a 	bl	8001f4c <indev_reset_check>
 8002458:	2800      	cmp	r0, #0
 800245a:	f47f aef5 	bne.w	8002248 <indev_proc_press+0x64>
            if(indev_act->proc.wait_until_release) return;
 800245e:	6837      	ldr	r7, [r6, #0]
 8002460:	797b      	ldrb	r3, [r7, #5]
 8002462:	071b      	lsls	r3, r3, #28
 8002464:	f53f aef0 	bmi.w	8002248 <indev_proc_press+0x64>
    lv_obj_t * obj_to_focus = indev_obj_act;
 8002468:	f8d5 9000 	ldr.w	r9, [r5]
    if(lv_obj_has_flag(obj_to_focus, LV_OBJ_FLAG_CLICK_FOCUSABLE) &&
 800246c:	2104      	movs	r1, #4
 800246e:	4648      	mov	r0, r9
 8002470:	f001 fabf 	bl	80039f2 <lv_obj_has_flag>
 8002474:	b1e0      	cbz	r0, 80024b0 <indev_proc_press+0x2cc>
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	4599      	cmp	r9, r3
 800247a:	d019      	beq.n	80024b0 <indev_proc_press+0x2cc>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 800247c:	4648      	mov	r0, r9
            indev_click_focus(&indev_act->proc);
 800247e:	f107 0804 	add.w	r8, r7, #4
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 8002482:	f001 fac5 	bl	8003a10 <lv_obj_get_group>
 8002486:	4682      	mov	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8002488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248a:	2800      	cmp	r0, #0
 800248c:	d053      	beq.n	8002536 <indev_proc_press+0x352>
 800248e:	f001 fabf 	bl	8003a10 <lv_obj_get_group>
        if(g_act == g_prev) {
 8002492:	4582      	cmp	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8002494:	4603      	mov	r3, r0
        if(g_act == g_prev) {
 8002496:	d12a      	bne.n	80024ee <indev_proc_press+0x30a>
            if(g_act) {
 8002498:	f1ba 0f00 	cmp.w	sl, #0
 800249c:	d04e      	beq.n	800253c <indev_proc_press+0x358>
                lv_group_focus_obj(obj_to_focus);
 800249e:	4648      	mov	r0, r9
 80024a0:	f7ff fd09 	bl	8001eb6 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80024a4:	4640      	mov	r0, r8
 80024a6:	f7ff fd51 	bl	8001f4c <indev_reset_check>
 80024aa:	b908      	cbnz	r0, 80024b0 <indev_proc_press+0x2cc>
        proc->types.pointer.last_pressed = obj_to_focus;
 80024ac:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
            if(indev_reset_check(proc)) return;
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff fd4b 	bl	8001f4c <indev_reset_check>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	f43f aed1 	beq.w	800225e <indev_proc_press+0x7a>
 80024bc:	e6c4      	b.n	8002248 <indev_proc_press+0x64>
 80024be:	bf00      	nop
 80024c0:	20003054 	.word	0x20003054
 80024c4:	20003050 	.word	0x20003050
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 80024c8:	6832      	ldr	r2, [r6, #0]
 80024ca:	2103      	movs	r1, #3
 80024cc:	f7ff fb14 	bl	8001af8 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff fd3b 	bl	8001f4c <indev_reset_check>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d09f      	beq.n	800241a <indev_proc_press+0x236>
 80024da:	e6b5      	b.n	8002248 <indev_proc_press+0x64>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 80024dc:	6832      	ldr	r2, [r6, #0]
 80024de:	210f      	movs	r1, #15
 80024e0:	f7ff fb0a 	bl	8001af8 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 80024e4:	4640      	mov	r0, r8
 80024e6:	f7ff fd31 	bl	8001f4c <indev_reset_check>
 80024ea:	b350      	cbz	r0, 8002542 <indev_proc_press+0x35e>
 80024ec:	e7e0      	b.n	80024b0 <indev_proc_press+0x2cc>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 80024ee:	b978      	cbnz	r0, 8002510 <indev_proc_press+0x32c>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	b16b      	cbz	r3, 8002510 <indev_proc_press+0x32c>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 80024f4:	6832      	ldr	r2, [r6, #0]
 80024f6:	210f      	movs	r1, #15
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fafd 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80024fe:	4640      	mov	r0, r8
 8002500:	f7ff fd24 	bl	8001f4c <indev_reset_check>
 8002504:	2800      	cmp	r0, #0
 8002506:	d1d3      	bne.n	80024b0 <indev_proc_press+0x2cc>
            if(g_act) {
 8002508:	f1ba 0f00 	cmp.w	sl, #0
 800250c:	d1c7      	bne.n	800249e <indev_proc_press+0x2ba>
 800250e:	e018      	b.n	8002542 <indev_proc_press+0x35e>
                if(proc->types.pointer.last_pressed) {
 8002510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002512:	2800      	cmp	r0, #0
 8002514:	d0f8      	beq.n	8002508 <indev_proc_press+0x324>
                    if(g_prev == NULL) {
 8002516:	6832      	ldr	r2, [r6, #0]
 8002518:	b90b      	cbnz	r3, 800251e <indev_proc_press+0x33a>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 800251a:	210f      	movs	r1, #15
 800251c:	e7ed      	b.n	80024fa <indev_proc_press+0x316>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 800251e:	2110      	movs	r1, #16
 8002520:	e7eb      	b.n	80024fa <indev_proc_press+0x316>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8002522:	4638      	mov	r0, r7
 8002524:	f005 f882 	bl	800762c <lv_obj_get_parent>
 8002528:	4607      	mov	r7, r0
 800252a:	e6d0      	b.n	80022ce <indev_proc_press+0xea>
            if(proc->types.pointer.gesture_sum.y > 0)
 800252c:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 800252e:	bfcc      	ite	gt
 8002530:	2108      	movgt	r1, #8
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002532:	2104      	movle	r1, #4
 8002534:	e715      	b.n	8002362 <indev_proc_press+0x17e>
        if(g_act == g_prev) {
 8002536:	f1ba 0f00 	cmp.w	sl, #0
 800253a:	d1d9      	bne.n	80024f0 <indev_proc_press+0x30c>
                if(proc->types.pointer.last_pressed) {
 800253c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800253e:	2800      	cmp	r0, #0
 8002540:	d1cc      	bne.n	80024dc <indev_proc_press+0x2f8>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, indev_act);
 8002542:	6832      	ldr	r2, [r6, #0]
 8002544:	210e      	movs	r1, #14
 8002546:	4648      	mov	r0, r9
 8002548:	f7ff fad6 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800254c:	e7aa      	b.n	80024a4 <indev_proc_press+0x2c0>
 800254e:	bf00      	nop

08002550 <lv_indev_read_timer_cb>:
    indev_act = timer->user_data;
 8002550:	68c0      	ldr	r0, [r0, #12]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002552:	6803      	ldr	r3, [r0, #0]
{
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002558:	691b      	ldr	r3, [r3, #16]
{
 800255a:	b085      	sub	sp, #20
    indev_act = timer->user_data;
 800255c:	4db6      	ldr	r5, [pc, #728]	; (8002838 <lv_indev_read_timer_cb+0x2e8>)
 800255e:	6028      	str	r0, [r5, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8087 	beq.w	8002674 <lv_indev_read_timer_cb+0x124>
    indev_proc_reset_query_handler(indev_act);
 8002566:	f7ff fd43 	bl	8001ff0 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 800256a:	7943      	ldrb	r3, [r0, #5]
 800256c:	075b      	lsls	r3, r3, #29
 800256e:	f100 8081 	bmi.w	8002674 <lv_indev_read_timer_cb+0x124>
        indev_obj_act = NULL;
 8002572:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800283c <lv_indev_read_timer_cb+0x2ec>
 8002576:	464e      	mov	r6, r9
        _lv_indev_read(indev_act, &data);
 8002578:	4669      	mov	r1, sp
 800257a:	6828      	ldr	r0, [r5, #0]
 800257c:	f014 f844 	bl	8016608 <_lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8002580:	6828      	ldr	r0, [r5, #0]
        continue_reading = data.continue_reading;
 8002582:	f89d 800f 	ldrb.w	r8, [sp, #15]
        indev_proc_reset_query_handler(indev_act);
 8002586:	f7ff fd33 	bl	8001ff0 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c9 3000 	str.w	r3, [r9]
        indev_act->proc.state = data.state;
 8002590:	f89d 300e 	ldrb.w	r3, [sp, #14]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002594:	2b01      	cmp	r3, #1
        indev_act->proc.state = data.state;
 8002596:	7103      	strb	r3, [r0, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002598:	6803      	ldr	r3, [r0, #0]
 800259a:	d105      	bne.n	80025a8 <lv_indev_read_timer_cb+0x58>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 800259c:	691c      	ldr	r4, [r3, #16]
 800259e:	f014 f85f 	bl	8016660 <lv_tick_get>
 80025a2:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
 80025a6:	e006      	b.n	80025b6 <lv_indev_read_timer_cb+0x66>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	2a04      	cmp	r2, #4
 80025ac:	d103      	bne.n	80025b6 <lv_indev_read_timer_cb+0x66>
 80025ae:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d1f2      	bne.n	800259c <lv_indev_read_timer_cb+0x4c>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 80025b6:	682c      	ldr	r4, [r5, #0]
 80025b8:	6822      	ldr	r2, [r4, #0]
 80025ba:	7813      	ldrb	r3, [r2, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d144      	bne.n	800264a <lv_indev_read_timer_cb+0xfa>
    lv_disp_t *disp = i->driver->disp;
 80025c0:	6910      	ldr	r0, [r2, #16]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 80025c2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80025c6:	6807      	ldr	r7, [r0, #0]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 80025c8:	f9bd 2000 	ldrsh.w	r2, [sp]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80025cc:	7a39      	ldrb	r1, [r7, #8]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 80025ce:	8222      	strh	r2, [r4, #16]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80025d0:	f011 0f10 	tst.w	r1, #16
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 80025d4:	8263      	strh	r3, [r4, #18]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80025d6:	f000 82fc 	beq.w	8002bd2 <lv_indev_read_timer_cb+0x682>
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80025da:	f8b7 c000 	ldrh.w	ip, [r7]
 80025de:	43d2      	mvns	r2, r2
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80025e0:	43db      	mvns	r3, r3
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80025e2:	4462      	add	r2, ip
 80025e4:	f8ad 2000 	strh.w	r2, [sp]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	4413      	add	r3, r2
 80025ec:	f8ad 3002 	strh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 80025f0:	070b      	lsls	r3, r1, #28
 80025f2:	d50a      	bpl.n	800260a <lv_indev_read_timer_cb+0xba>
        data->point.y = data->point.x;
 80025f4:	f8bd 2000 	ldrh.w	r2, [sp]
        lv_coord_t tmp = data->point.y;
 80025f8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
        data->point.y = data->point.x;
 80025fc:	f8ad 2002 	strh.w	r2, [sp, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 8002600:	43db      	mvns	r3, r3
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	4413      	add	r3, r2
 8002606:	f8ad 3000 	strh.w	r3, [sp]
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) LV_LOG_WARN("X is %d which is greater than hor. res", data->point.x);
 800260a:	f013 ff7b 	bl	8016504 <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) LV_LOG_WARN("Y is %d which is greater than hor. res", data->point.y);
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	6918      	ldr	r0, [r3, #16]
 8002612:	f013 ff87 	bl	8016524 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 8002616:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002618:	b148      	cbz	r0, 800262e <lv_indev_read_timer_cb+0xde>
 800261a:	68e2      	ldr	r2, [r4, #12]
 800261c:	9b00      	ldr	r3, [sp, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d005      	beq.n	800262e <lv_indev_read_timer_cb+0xde>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8002622:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002626:	f9bd 1000 	ldrsh.w	r1, [sp]
 800262a:	f002 f997 	bl	800495c <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 800262e:	9b00      	ldr	r3, [sp, #0]
 8002630:	1d20      	adds	r0, r4, #4
 8002632:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8002634:	7923      	ldrb	r3, [r4, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d104      	bne.n	8002644 <lv_indev_read_timer_cb+0xf4>
        indev_proc_press(&i->proc);
 800263a:	f7ff fdd3 	bl	80021e4 <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 800263e:	68a3      	ldr	r3, [r4, #8]
 8002640:	60e3      	str	r3, [r4, #12]
 8002642:	e00d      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
        indev_proc_release(&i->proc);
 8002644:	f7ff fc8e 	bl	8001f64 <indev_proc_release>
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8002648:	e7f9      	b.n	800263e <lv_indev_read_timer_cb+0xee>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800264a:	2b02      	cmp	r3, #2
 800264c:	f040 80f8 	bne.w	8002840 <lv_indev_read_timer_cb+0x2f0>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8002650:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8002654:	7963      	ldrb	r3, [r4, #5]
 8002656:	2901      	cmp	r1, #1
 8002658:	f003 0208 	and.w	r2, r3, #8
 800265c:	d10d      	bne.n	800267a <lv_indev_read_timer_cb+0x12a>
 800265e:	b19a      	cbz	r2, 8002688 <lv_indev_read_timer_cb+0x138>
        indev_proc_reset_query_handler(indev_act);
 8002660:	6828      	ldr	r0, [r5, #0]
 8002662:	f7ff fcc5 	bl	8001ff0 <indev_proc_reset_query_handler>
    } while(continue_reading);
 8002666:	f1b8 0f00 	cmp.w	r8, #0
 800266a:	d185      	bne.n	8002578 <lv_indev_read_timer_cb+0x28>
    indev_act     = NULL;
 800266c:	f8c5 8000 	str.w	r8, [r5]
    indev_obj_act = NULL;
 8002670:	f8c6 8000 	str.w	r8, [r6]
}
 8002674:	b005      	add	sp, #20
 8002676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i->proc.wait_until_release) {
 800267a:	b12a      	cbz	r2, 8002688 <lv_indev_read_timer_cb+0x138>
        i->proc.pr_timestamp            = 0;
 800267c:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 800267e:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 8002682:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8002684:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8002686:	7222      	strb	r2, [r4, #8]
    lv_group_t * g = i->group;
 8002688:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if(g == NULL) return;
 800268a:	2f00      	cmp	r7, #0
 800268c:	d0e8      	beq.n	8002660 <lv_indev_read_timer_cb+0x110>
    indev_obj_act = lv_group_get_focused(g);
 800268e:	4638      	mov	r0, r7
 8002690:	f7ff fbdd 	bl	8001e4e <lv_group_get_focused>
 8002694:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002696:	2800      	cmp	r0, #0
 8002698:	d0e2      	beq.n	8002660 <lv_indev_read_timer_cb+0x110>
    i->proc.types.keypad.last_key = data->key;
 800269a:	9a01      	ldr	r2, [sp, #4]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 800269c:	68e3      	ldr	r3, [r4, #12]
    i->proc.types.keypad.last_key = data->key;
 800269e:	60e2      	str	r2, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 80026a0:	f89d b00e 	ldrb.w	fp, [sp, #14]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 80026a4:	f894 a008 	ldrb.w	sl, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 80026a8:	f1bb 0f01 	cmp.w	fp, #1
    i->proc.types.keypad.last_state = data->state;
 80026ac:	f884 b008 	strb.w	fp, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 80026b0:	f040 808d 	bne.w	80027ce <lv_indev_read_timer_cb+0x27e>
 80026b4:	f1ba 0f00 	cmp.w	sl, #0
 80026b8:	d134      	bne.n	8002724 <lv_indev_read_timer_cb+0x1d4>
        i->proc.pr_timestamp = lv_tick_get();
 80026ba:	f013 ffd1 	bl	8016660 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 80026be:	9901      	ldr	r1, [sp, #4]
        i->proc.pr_timestamp = lv_tick_get();
 80026c0:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 80026c2:	290a      	cmp	r1, #10
 80026c4:	d108      	bne.n	80026d8 <lv_indev_read_timer_cb+0x188>
            lv_group_send_data(g, LV_KEY_ENTER);
 80026c6:	4638      	mov	r0, r7
 80026c8:	f7ff fbc6 	bl	8001e58 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80026cc:	682a      	ldr	r2, [r5, #0]
 80026ce:	4659      	mov	r1, fp
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80026d0:	6830      	ldr	r0, [r6, #0]
 80026d2:	f7ff fa11 	bl	8001af8 <lv_event_send>
 80026d6:	e010      	b.n	80026fa <lv_indev_read_timer_cb+0x1aa>
        else if(data->key == LV_KEY_ESC) {
 80026d8:	291b      	cmp	r1, #27
 80026da:	d105      	bne.n	80026e8 <lv_indev_read_timer_cb+0x198>
            lv_group_send_data(g, LV_KEY_ESC);
 80026dc:	4638      	mov	r0, r7
 80026de:	f7ff fbbb 	bl	8001e58 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 80026e2:	682a      	ldr	r2, [r5, #0]
 80026e4:	2120      	movs	r1, #32
 80026e6:	e7f3      	b.n	80026d0 <lv_indev_read_timer_cb+0x180>
        else if(data->key == LV_KEY_NEXT) {
 80026e8:	2909      	cmp	r1, #9
 80026ea:	d10b      	bne.n	8002704 <lv_indev_read_timer_cb+0x1b4>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80026ec:	4638      	mov	r0, r7
 80026ee:	4651      	mov	r1, sl
 80026f0:	f7ff fbc0 	bl	8001e74 <lv_group_set_editing>
            lv_group_focus_next(g);
 80026f4:	4638      	mov	r0, r7
 80026f6:	f7ff fb01 	bl	8001cfc <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 80026fa:	1d20      	adds	r0, r4, #4
                if(indev_reset_check(&i->proc)) return;
 80026fc:	f7ff fc26 	bl	8001f4c <indev_reset_check>
 8002700:	b168      	cbz	r0, 800271e <lv_indev_read_timer_cb+0x1ce>
 8002702:	e7ad      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
        else if(data->key == LV_KEY_PREV) {
 8002704:	290b      	cmp	r1, #11
 8002706:	d107      	bne.n	8002718 <lv_indev_read_timer_cb+0x1c8>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002708:	4638      	mov	r0, r7
 800270a:	4651      	mov	r1, sl
 800270c:	f7ff fbb2 	bl	8001e74 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8002710:	4638      	mov	r0, r7
 8002712:	f7ff faff 	bl	8001d14 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8002716:	e7f0      	b.n	80026fa <lv_indev_read_timer_cb+0x1aa>
            lv_group_send_data(g, data->key);
 8002718:	4638      	mov	r0, r7
 800271a:	f7ff fb9d 	bl	8001e58 <lv_group_send_data>
    indev_obj_act = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	6033      	str	r3, [r6, #0]
 8002722:	e79d      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
    else if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8002724:	f1ba 0f01 	cmp.w	sl, #1
 8002728:	d1f9      	bne.n	800271e <lv_indev_read_timer_cb+0x1ce>
        if(data->key == LV_KEY_ENTER) {
 800272a:	2a0a      	cmp	r2, #10
 800272c:	d016      	beq.n	800275c <lv_indev_read_timer_cb+0x20c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800272e:	7963      	ldrb	r3, [r4, #5]
 8002730:	07d8      	lsls	r0, r3, #31
 8002732:	d41f      	bmi.n	8002774 <lv_indev_read_timer_cb+0x224>
 8002734:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002736:	f013 ffa1 	bl	801667c <lv_tick_elaps>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	8b9b      	ldrh	r3, [r3, #28]
 800273e:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002740:	7963      	ldrb	r3, [r4, #5]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002742:	d915      	bls.n	8002770 <lv_indev_read_timer_cb+0x220>
            i->proc.long_pr_sent = 1;
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 800274a:	9b01      	ldr	r3, [sp, #4]
 800274c:	2b0a      	cmp	r3, #10
 800274e:	d1e6      	bne.n	800271e <lv_indev_read_timer_cb+0x1ce>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002750:	f013 ff86 	bl	8016660 <lv_tick_get>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002754:	682a      	ldr	r2, [r5, #0]
 8002756:	2105      	movs	r1, #5
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002758:	64a0      	str	r0, [r4, #72]	; 0x48
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 800275a:	e7b9      	b.n	80026d0 <lv_indev_read_timer_cb+0x180>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 800275c:	682a      	ldr	r2, [r5, #0]
 800275e:	2102      	movs	r1, #2
 8002760:	f7ff f9ca 	bl	8001af8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002764:	1d20      	adds	r0, r4, #4
 8002766:	f7ff fbf1 	bl	8001f4c <indev_reset_check>
 800276a:	2800      	cmp	r0, #0
 800276c:	d0df      	beq.n	800272e <lv_indev_read_timer_cb+0x1de>
 800276e:	e777      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
        else if(i->proc.long_pr_sent != 0 &&
 8002770:	07d9      	lsls	r1, r3, #31
 8002772:	d5d4      	bpl.n	800271e <lv_indev_read_timer_cb+0x1ce>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002774:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002776:	f013 ff81 	bl	801667c <lv_tick_elaps>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	8bdb      	ldrh	r3, [r3, #30]
        else if(i->proc.long_pr_sent != 0 &&
 800277e:	4298      	cmp	r0, r3
 8002780:	d9cd      	bls.n	800271e <lv_indev_read_timer_cb+0x1ce>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002782:	f013 ff6d 	bl	8016660 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002786:	9901      	ldr	r1, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002788:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 800278a:	3404      	adds	r4, #4
 800278c:	290a      	cmp	r1, #10
 800278e:	d106      	bne.n	800279e <lv_indev_read_timer_cb+0x24e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002790:	682a      	ldr	r2, [r5, #0]
 8002792:	2106      	movs	r1, #6
 8002794:	6830      	ldr	r0, [r6, #0]
 8002796:	f7ff f9af 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800279a:	4620      	mov	r0, r4
 800279c:	e7ae      	b.n	80026fc <lv_indev_read_timer_cb+0x1ac>
            else if(data->key == LV_KEY_NEXT) {
 800279e:	2909      	cmp	r1, #9
 80027a0:	d107      	bne.n	80027b2 <lv_indev_read_timer_cb+0x262>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80027a2:	4638      	mov	r0, r7
 80027a4:	2100      	movs	r1, #0
 80027a6:	f7ff fb65 	bl	8001e74 <lv_group_set_editing>
                lv_group_focus_next(g);
 80027aa:	4638      	mov	r0, r7
 80027ac:	f7ff faa6 	bl	8001cfc <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 80027b0:	e7f3      	b.n	800279a <lv_indev_read_timer_cb+0x24a>
            else if(data->key == LV_KEY_PREV) {
 80027b2:	290b      	cmp	r1, #11
 80027b4:	d107      	bne.n	80027c6 <lv_indev_read_timer_cb+0x276>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80027b6:	4638      	mov	r0, r7
 80027b8:	2100      	movs	r1, #0
 80027ba:	f7ff fb5b 	bl	8001e74 <lv_group_set_editing>
                lv_group_focus_prev(g);
 80027be:	4638      	mov	r0, r7
 80027c0:	f7ff faa8 	bl	8001d14 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 80027c4:	e7e9      	b.n	800279a <lv_indev_read_timer_cb+0x24a>
                lv_group_send_data(g, data->key);
 80027c6:	4638      	mov	r0, r7
 80027c8:	f7ff fb46 	bl	8001e58 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 80027cc:	e7e5      	b.n	800279a <lv_indev_read_timer_cb+0x24a>
    else if(data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 80027ce:	f1bb 0f00 	cmp.w	fp, #0
 80027d2:	d1a4      	bne.n	800271e <lv_indev_read_timer_cb+0x1ce>
 80027d4:	f1ba 0f01 	cmp.w	sl, #1
 80027d8:	d1a1      	bne.n	800271e <lv_indev_read_timer_cb+0x1ce>
        if(data->key == LV_KEY_ENTER) {
 80027da:	2b0a      	cmp	r3, #10
 80027dc:	682a      	ldr	r2, [r5, #0]
        data->key = prev_key;
 80027de:	9301      	str	r3, [sp, #4]
        if(data->key == LV_KEY_ENTER) {
 80027e0:	d006      	beq.n	80027f0 <lv_indev_read_timer_cb+0x2a0>
        i->proc.pr_timestamp = 0;
 80027e2:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 80027e4:	7963      	ldrb	r3, [r4, #5]
 80027e6:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp = 0;
 80027ea:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 80027ec:	7163      	strb	r3, [r4, #5]
 80027ee:	e796      	b.n	800271e <lv_indev_read_timer_cb+0x1ce>
            if(indev_reset_check(&i->proc)) return;
 80027f0:	1d27      	adds	r7, r4, #4
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80027f2:	2108      	movs	r1, #8
 80027f4:	f7ff f980 	bl	8001af8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80027f8:	4638      	mov	r0, r7
 80027fa:	f7ff fba7 	bl	8001f4c <indev_reset_check>
 80027fe:	2800      	cmp	r0, #0
 8002800:	f47f af2e 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
            if(i->proc.long_pr_sent == 0) {
 8002804:	7963      	ldrb	r3, [r4, #5]
 8002806:	07da      	lsls	r2, r3, #31
 8002808:	d50a      	bpl.n	8002820 <lv_indev_read_timer_cb+0x2d0>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 800280a:	682a      	ldr	r2, [r5, #0]
 800280c:	2107      	movs	r1, #7
 800280e:	6830      	ldr	r0, [r6, #0]
 8002810:	f7ff f972 	bl	8001af8 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002814:	4638      	mov	r0, r7
 8002816:	f7ff fb99 	bl	8001f4c <indev_reset_check>
 800281a:	2800      	cmp	r0, #0
 800281c:	d0e1      	beq.n	80027e2 <lv_indev_read_timer_cb+0x292>
 800281e:	e71f      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002820:	682a      	ldr	r2, [r5, #0]
 8002822:	2104      	movs	r1, #4
 8002824:	6830      	ldr	r0, [r6, #0]
 8002826:	f7ff f967 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800282a:	4638      	mov	r0, r7
 800282c:	f7ff fb8e 	bl	8001f4c <indev_reset_check>
 8002830:	2800      	cmp	r0, #0
 8002832:	d0ea      	beq.n	800280a <lv_indev_read_timer_cb+0x2ba>
 8002834:	e714      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
 8002836:	bf00      	nop
 8002838:	20003050 	.word	0x20003050
 800283c:	20003054 	.word	0x20003054
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8002840:	2b04      	cmp	r3, #4
 8002842:	f040 818d 	bne.w	8002b60 <lv_indev_read_timer_cb+0x610>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8002846:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800284a:	7963      	ldrb	r3, [r4, #5]
 800284c:	2a01      	cmp	r2, #1
 800284e:	f003 0108 	and.w	r1, r3, #8
 8002852:	d142      	bne.n	80028da <lv_indev_read_timer_cb+0x38a>
 8002854:	2900      	cmp	r1, #0
 8002856:	f47f af03 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
    i->proc.types.keypad.last_key   = data->key;
 800285a:	9b01      	ldr	r3, [sp, #4]
    lv_group_t * g = i->group;
 800285c:	6d27      	ldr	r7, [r4, #80]	; 0x50
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 800285e:	f894 a008 	ldrb.w	sl, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8002862:	60e3      	str	r3, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 8002864:	7222      	strb	r2, [r4, #8]
    if(g == NULL) return;
 8002866:	2f00      	cmp	r7, #0
 8002868:	f43f aefa 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
    indev_obj_act = lv_group_get_focused(g);
 800286c:	4638      	mov	r0, r7
 800286e:	f7ff faee 	bl	8001e4e <lv_group_get_focused>
 8002872:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002874:	2800      	cmp	r0, #0
 8002876:	f43f aef3 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 800287a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800287e:	b113      	cbz	r3, 8002886 <lv_indev_read_timer_cb+0x336>
        data->enc_diff = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	f8ad 300c 	strh.w	r3, [sp, #12]
    indev_obj_act = lv_group_get_focused(g);
 8002886:	4638      	mov	r0, r7
 8002888:	f7ff fae1 	bl	8001e4e <lv_group_get_focused>
 800288c:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 800288e:	2800      	cmp	r0, #0
 8002890:	f43f aee6 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8002894:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 80bb 	bne.w	8002a14 <lv_indev_read_timer_cb+0x4c4>
 800289e:	f1ba 0f00 	cmp.w	sl, #0
 80028a2:	d15d      	bne.n	8002960 <lv_indev_read_timer_cb+0x410>
        i->proc.pr_timestamp = lv_tick_get();
 80028a4:	f013 fedc 	bl	8016660 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 80028a8:	9901      	ldr	r1, [sp, #4]
        i->proc.pr_timestamp = lv_tick_get();
 80028aa:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 80028ac:	290a      	cmp	r1, #10
 80028ae:	d11d      	bne.n	80028ec <lv_indev_read_timer_cb+0x39c>
            bool editable = lv_obj_is_editable(indev_obj_act);
 80028b0:	6830      	ldr	r0, [r6, #0]
 80028b2:	f001 fc18 	bl	80040e6 <lv_obj_is_editable>
 80028b6:	4682      	mov	sl, r0
            if(lv_group_get_editing(g) == true || editable == false) {
 80028b8:	4638      	mov	r0, r7
 80028ba:	f7ff fb3f 	bl	8001f3c <lv_group_get_editing>
 80028be:	b910      	cbnz	r0, 80028c6 <lv_indev_read_timer_cb+0x376>
 80028c0:	f1ba 0f00 	cmp.w	sl, #0
 80028c4:	d12a      	bne.n	800291c <lv_indev_read_timer_cb+0x3cc>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80028c6:	682a      	ldr	r2, [r5, #0]
 80028c8:	2101      	movs	r1, #1
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80028ca:	6830      	ldr	r0, [r6, #0]
 80028cc:	f7ff f914 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80028d0:	1d20      	adds	r0, r4, #4
 80028d2:	f7ff fb3b 	bl	8001f4c <indev_reset_check>
 80028d6:	b308      	cbz	r0, 800291c <lv_indev_read_timer_cb+0x3cc>
 80028d8:	e6c2      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
    if(i->proc.wait_until_release) {
 80028da:	2900      	cmp	r1, #0
 80028dc:	d0bd      	beq.n	800285a <lv_indev_read_timer_cb+0x30a>
        i->proc.pr_timestamp            = 0;
 80028de:	2100      	movs	r1, #0
        i->proc.long_pr_sent            = 0;
 80028e0:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 80028e4:	6461      	str	r1, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 80028e6:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 80028e8:	7221      	strb	r1, [r4, #8]
 80028ea:	e7b6      	b.n	800285a <lv_indev_read_timer_cb+0x30a>
        else if(data->key == LV_KEY_LEFT) {
 80028ec:	2914      	cmp	r1, #20
 80028ee:	d105      	bne.n	80028fc <lv_indev_read_timer_cb+0x3ac>
                data->enc_diff--;
 80028f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80028f4:	3b01      	subs	r3, #1
                data->enc_diff++;
 80028f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80028fa:	e00f      	b.n	800291c <lv_indev_read_timer_cb+0x3cc>
        else if(data->key == LV_KEY_RIGHT) {
 80028fc:	2913      	cmp	r1, #19
 80028fe:	d103      	bne.n	8002908 <lv_indev_read_timer_cb+0x3b8>
                data->enc_diff++;
 8002900:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002904:	3301      	adds	r3, #1
 8002906:	e7f6      	b.n	80028f6 <lv_indev_read_timer_cb+0x3a6>
        else if(data->key == LV_KEY_ESC) {
 8002908:	291b      	cmp	r1, #27
            lv_group_send_data(g, LV_KEY_ESC);
 800290a:	4638      	mov	r0, r7
        else if(data->key == LV_KEY_ESC) {
 800290c:	d104      	bne.n	8002918 <lv_indev_read_timer_cb+0x3c8>
            lv_group_send_data(g, LV_KEY_ESC);
 800290e:	f7ff faa3 	bl	8001e58 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8002912:	682a      	ldr	r2, [r5, #0]
 8002914:	2120      	movs	r1, #32
 8002916:	e7d8      	b.n	80028ca <lv_indev_read_timer_cb+0x37a>
            lv_group_send_data(g, data->key);
 8002918:	f7ff fa9e 	bl	8001e58 <lv_group_send_data>
    indev_obj_act = NULL;
 800291c:	f04f 0a00 	mov.w	sl, #0
    if(data->enc_diff != 0) {
 8002920:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    indev_obj_act = NULL;
 8002924:	f8c6 a000 	str.w	sl, [r6]
    if(data->enc_diff != 0) {
 8002928:	2b00      	cmp	r3, #0
 800292a:	f43f ae99 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
        if(lv_group_get_editing(g)) {
 800292e:	4638      	mov	r0, r7
 8002930:	f7ff fb04 	bl	8001f3c <lv_group_get_editing>
 8002934:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002938:	4604      	mov	r4, r0
 800293a:	2800      	cmp	r0, #0
 800293c:	f000 80f7 	beq.w	8002b2e <lv_indev_read_timer_cb+0x5de>
            if(data->enc_diff < 0) {
 8002940:	4553      	cmp	r3, sl
 8002942:	f280 80e6 	bge.w	8002b12 <lv_indev_read_timer_cb+0x5c2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8002946:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800294a:	425b      	negs	r3, r3
 800294c:	459a      	cmp	sl, r3
 800294e:	f6bf ae87 	bge.w	8002660 <lv_indev_read_timer_cb+0x110>
 8002952:	2114      	movs	r1, #20
 8002954:	4638      	mov	r0, r7
 8002956:	f10a 0a01 	add.w	sl, sl, #1
 800295a:	f7ff fa7d 	bl	8001e58 <lv_group_send_data>
 800295e:	e7f2      	b.n	8002946 <lv_indev_read_timer_cb+0x3f6>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 8002960:	f1ba 0f01 	cmp.w	sl, #1
 8002964:	d1da      	bne.n	800291c <lv_indev_read_timer_cb+0x3cc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002966:	7963      	ldrb	r3, [r4, #5]
 8002968:	07db      	lsls	r3, r3, #31
 800296a:	d50f      	bpl.n	800298c <lv_indev_read_timer_cb+0x43c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 800296c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800296e:	f013 fe85 	bl	801667c <lv_tick_elaps>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	8bdb      	ldrh	r3, [r3, #30]
 8002976:	4298      	cmp	r0, r3
 8002978:	d9d0      	bls.n	800291c <lv_indev_read_timer_cb+0x3cc>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800297a:	f013 fe71 	bl	8016660 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 800297e:	9901      	ldr	r1, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002980:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002982:	290a      	cmp	r1, #10
 8002984:	d13c      	bne.n	8002a00 <lv_indev_read_timer_cb+0x4b0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002986:	682a      	ldr	r2, [r5, #0]
 8002988:	2106      	movs	r1, #6
 800298a:	e79e      	b.n	80028ca <lv_indev_read_timer_cb+0x37a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800298c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800298e:	f013 fe75 	bl	801667c <lv_tick_elaps>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	8b9b      	ldrh	r3, [r3, #28]
 8002996:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002998:	7963      	ldrb	r3, [r4, #5]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800299a:	d92e      	bls.n	80029fa <lv_indev_read_timer_cb+0x4aa>
            i->proc.long_pr_sent = 1;
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80029a2:	f013 fe5d 	bl	8016660 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 80029a6:	9b01      	ldr	r3, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80029a8:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d115      	bne.n	80029da <lv_indev_read_timer_cb+0x48a>
                bool editable = lv_obj_is_editable(indev_obj_act);
 80029ae:	6830      	ldr	r0, [r6, #0]
 80029b0:	f001 fb99 	bl	80040e6 <lv_obj_is_editable>
                if(editable) {
 80029b4:	b1b0      	cbz	r0, 80029e4 <lv_indev_read_timer_cb+0x494>
                    if(lv_group_get_obj_count(g) > 1) {
 80029b6:	4638      	mov	r0, r7
 80029b8:	f7ff fac5 	bl	8001f46 <lv_group_get_obj_count>
 80029bc:	2801      	cmp	r0, #1
 80029be:	d90c      	bls.n	80029da <lv_indev_read_timer_cb+0x48a>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80029c0:	4638      	mov	r0, r7
 80029c2:	f7ff fabb 	bl	8001f3c <lv_group_get_editing>
 80029c6:	f080 0001 	eor.w	r0, r0, #1
 80029ca:	b2c1      	uxtb	r1, r0
 80029cc:	4638      	mov	r0, r7
 80029ce:	f7ff fa51 	bl	8001e74 <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 80029d2:	2120      	movs	r1, #32
 80029d4:	6830      	ldr	r0, [r6, #0]
 80029d6:	f001 f803 	bl	80039e0 <lv_obj_clear_state>
            i->proc.long_pr_sent = 1;
 80029da:	7963      	ldrb	r3, [r4, #5]
 80029dc:	f043 0301 	orr.w	r3, r3, #1
        i->proc.long_pr_sent = 0;
 80029e0:	7163      	strb	r3, [r4, #5]
 80029e2:	e79b      	b.n	800291c <lv_indev_read_timer_cb+0x3cc>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80029e4:	682a      	ldr	r2, [r5, #0]
 80029e6:	2105      	movs	r1, #5
 80029e8:	6830      	ldr	r0, [r6, #0]
 80029ea:	f7ff f885 	bl	8001af8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80029ee:	1d20      	adds	r0, r4, #4
 80029f0:	f7ff faac 	bl	8001f4c <indev_reset_check>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d0f0      	beq.n	80029da <lv_indev_read_timer_cb+0x48a>
 80029f8:	e632      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 80029fa:	07d8      	lsls	r0, r3, #31
 80029fc:	d58e      	bpl.n	800291c <lv_indev_read_timer_cb+0x3cc>
 80029fe:	e7b5      	b.n	800296c <lv_indev_read_timer_cb+0x41c>
            else if(data->key == LV_KEY_LEFT) {
 8002a00:	2914      	cmp	r1, #20
 8002a02:	f43f af75 	beq.w	80028f0 <lv_indev_read_timer_cb+0x3a0>
            else if(data->key == LV_KEY_RIGHT) {
 8002a06:	2913      	cmp	r1, #19
 8002a08:	f43f af7a 	beq.w	8002900 <lv_indev_read_timer_cb+0x3b0>
                lv_group_send_data(g, data->key);
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	f7ff fa23 	bl	8001e58 <lv_group_send_data>
 8002a12:	e75d      	b.n	80028d0 <lv_indev_read_timer_cb+0x380>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d181      	bne.n	800291c <lv_indev_read_timer_cb+0x3cc>
 8002a18:	f1ba 0f01 	cmp.w	sl, #1
 8002a1c:	f47f af7e 	bne.w	800291c <lv_indev_read_timer_cb+0x3cc>
        if(data->key == LV_KEY_ENTER) {
 8002a20:	9b01      	ldr	r3, [sp, #4]
 8002a22:	2b0a      	cmp	r3, #10
 8002a24:	d128      	bne.n	8002a78 <lv_indev_read_timer_cb+0x528>
            bool editable = lv_obj_is_editable(indev_obj_act);
 8002a26:	f001 fb5e 	bl	80040e6 <lv_obj_is_editable>
            if(editable == false) {
 8002a2a:	bb58      	cbnz	r0, 8002a84 <lv_indev_read_timer_cb+0x534>
                if(indev_reset_check(&i->proc)) return;
 8002a2c:	f104 0a04 	add.w	sl, r4, #4
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002a30:	682a      	ldr	r2, [r5, #0]
 8002a32:	2108      	movs	r1, #8
 8002a34:	6830      	ldr	r0, [r6, #0]
 8002a36:	f7ff f85f 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	f7ff fa86 	bl	8001f4c <indev_reset_check>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	f47f ae0d 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002a46:	7963      	ldrb	r3, [r4, #5]
 8002a48:	07d9      	lsls	r1, r3, #31
 8002a4a:	d404      	bmi.n	8002a56 <lv_indev_read_timer_cb+0x506>
 8002a4c:	682a      	ldr	r2, [r5, #0]
 8002a4e:	2104      	movs	r1, #4
 8002a50:	6830      	ldr	r0, [r6, #0]
 8002a52:	f7ff f851 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002a56:	4650      	mov	r0, sl
 8002a58:	f7ff fa78 	bl	8001f4c <indev_reset_check>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	f47f adff 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002a62:	682a      	ldr	r2, [r5, #0]
 8002a64:	2107      	movs	r1, #7
 8002a66:	6830      	ldr	r0, [r6, #0]
 8002a68:	f7ff f846 	bl	8001af8 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002a6c:	4650      	mov	r0, sl
 8002a6e:	f7ff fa6d 	bl	8001f4c <indev_reset_check>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	f47f adf4 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
        i->proc.pr_timestamp = 0;
 8002a78:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8002a7a:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8002a7c:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8002a7e:	f362 0300 	bfi	r3, r2, #0, #1
 8002a82:	e7ad      	b.n	80029e0 <lv_indev_read_timer_cb+0x490>
            else if(lv_group_get_editing(g)) {
 8002a84:	4638      	mov	r0, r7
 8002a86:	f7ff fa59 	bl	8001f3c <lv_group_get_editing>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d034      	beq.n	8002af8 <lv_indev_read_timer_cb+0x5a8>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 8002a8e:	7963      	ldrb	r3, [r4, #5]
 8002a90:	07da      	lsls	r2, r3, #31
 8002a92:	d427      	bmi.n	8002ae4 <lv_indev_read_timer_cb+0x594>
                    if(indev_reset_check(&i->proc)) return;
 8002a94:	f104 0a04 	add.w	sl, r4, #4
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002a98:	682a      	ldr	r2, [r5, #0]
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	6830      	ldr	r0, [r6, #0]
 8002a9e:	f7ff f82b 	bl	8001af8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002aa2:	4650      	mov	r0, sl
 8002aa4:	f7ff fa52 	bl	8001f4c <indev_reset_check>
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f47f add9 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002aae:	682a      	ldr	r2, [r5, #0]
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	6830      	ldr	r0, [r6, #0]
 8002ab4:	f7ff f820 	bl	8001af8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002ab8:	4650      	mov	r0, sl
 8002aba:	f7ff fa47 	bl	8001f4c <indev_reset_check>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	f47f adce 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002ac4:	682a      	ldr	r2, [r5, #0]
 8002ac6:	2107      	movs	r1, #7
 8002ac8:	6830      	ldr	r0, [r6, #0]
 8002aca:	f7ff f815 	bl	8001af8 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002ace:	4650      	mov	r0, sl
 8002ad0:	f7ff fa3c 	bl	8001f4c <indev_reset_check>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	f47f adc3 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
                    lv_group_send_data(g, LV_KEY_ENTER);
 8002ada:	210a      	movs	r1, #10
 8002adc:	4638      	mov	r0, r7
 8002ade:	f7ff f9bb 	bl	8001e58 <lv_group_send_data>
 8002ae2:	e7c9      	b.n	8002a78 <lv_indev_read_timer_cb+0x528>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	f7ff fa2e 	bl	8001f46 <lv_group_get_obj_count>
 8002aea:	2801      	cmp	r0, #1
 8002aec:	d9d2      	bls.n	8002a94 <lv_indev_read_timer_cb+0x544>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 8002aee:	2120      	movs	r1, #32
 8002af0:	6830      	ldr	r0, [r6, #0]
 8002af2:	f000 ff75 	bl	80039e0 <lv_obj_clear_state>
 8002af6:	e7bf      	b.n	8002a78 <lv_indev_read_timer_cb+0x528>
            else if(editable && !lv_group_get_editing(g) && !i->proc.long_pr_sent) {
 8002af8:	4638      	mov	r0, r7
 8002afa:	f7ff fa1f 	bl	8001f3c <lv_group_get_editing>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d1ba      	bne.n	8002a78 <lv_indev_read_timer_cb+0x528>
 8002b02:	7963      	ldrb	r3, [r4, #5]
 8002b04:	07db      	lsls	r3, r3, #31
 8002b06:	d4b7      	bmi.n	8002a78 <lv_indev_read_timer_cb+0x528>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8002b08:	4651      	mov	r1, sl
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	f7ff f9b2 	bl	8001e74 <lv_group_set_editing>
 8002b10:	e7b2      	b.n	8002a78 <lv_indev_read_timer_cb+0x528>
            else if(data->enc_diff > 0) {
 8002b12:	f43f ada5 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8002b16:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002b1a:	459a      	cmp	sl, r3
 8002b1c:	f6bf ada0 	bge.w	8002660 <lv_indev_read_timer_cb+0x110>
 8002b20:	2113      	movs	r1, #19
 8002b22:	4638      	mov	r0, r7
 8002b24:	f10a 0a01 	add.w	sl, sl, #1
 8002b28:	f7ff f996 	bl	8001e58 <lv_group_send_data>
 8002b2c:	e7f3      	b.n	8002b16 <lv_indev_read_timer_cb+0x5c6>
            if(data->enc_diff < 0) {
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da0a      	bge.n	8002b48 <lv_indev_read_timer_cb+0x5f8>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8002b32:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002b36:	425b      	negs	r3, r3
 8002b38:	429c      	cmp	r4, r3
 8002b3a:	f6bf ad91 	bge.w	8002660 <lv_indev_read_timer_cb+0x110>
 8002b3e:	4638      	mov	r0, r7
 8002b40:	3401      	adds	r4, #1
 8002b42:	f7ff f8e7 	bl	8001d14 <lv_group_focus_prev>
 8002b46:	e7f4      	b.n	8002b32 <lv_indev_read_timer_cb+0x5e2>
            else if(data->enc_diff > 0) {
 8002b48:	f43f ad8a 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 8002b4c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002b50:	429c      	cmp	r4, r3
 8002b52:	f6bf ad85 	bge.w	8002660 <lv_indev_read_timer_cb+0x110>
 8002b56:	4638      	mov	r0, r7
 8002b58:	3401      	adds	r4, #1
 8002b5a:	f7ff f8cf 	bl	8001cfc <lv_group_focus_next>
 8002b5e:	e7f5      	b.n	8002b4c <lv_indev_read_timer_cb+0x5fc>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	f47f ad7d 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
    if(i->btn_points == NULL) {
 8002b66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f43f ad79 	beq.w	8002660 <lv_indev_read_timer_cb+0x110>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002b6e:	9a02      	ldr	r2, [sp, #8]
 8002b70:	1d27      	adds	r7, r4, #4
 8002b72:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8002b76:	f933 b022 	ldrsh.w	fp, [r3, r2, lsl #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8002b7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8002b7e:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10a      	bne.n	8002b9c <lv_indev_read_timer_cb+0x64c>
        if(i->proc.types.pointer.last_point.x != x ||
 8002b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b8a:	455b      	cmp	r3, fp
 8002b8c:	d103      	bne.n	8002b96 <lv_indev_read_timer_cb+0x646>
 8002b8e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8002b92:	4553      	cmp	r3, sl
 8002b94:	d002      	beq.n	8002b9c <lv_indev_read_timer_cb+0x64c>
            indev_proc_release(&i->proc);
 8002b96:	4638      	mov	r0, r7
 8002b98:	f7ff f9e4 	bl	8001f64 <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	f7ff f9d5 	bl	8001f4c <indev_reset_check>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	f47f ad5c 	bne.w	8002660 <lv_indev_read_timer_cb+0x110>
    i->proc.types.pointer.act_point.x = x;
 8002ba8:	f8a4 b008 	strh.w	fp, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8002bac:	4638      	mov	r0, r7
    i->proc.types.pointer.act_point.y = y;
 8002bae:	f8a4 a00a 	strh.w	sl, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8002bb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <lv_indev_read_timer_cb+0x67c>
 8002bba:	f7ff fb13 	bl	80021e4 <indev_proc_press>
    if(indev_reset_check(&i->proc)) return;
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f7ff f9c4 	bl	8001f4c <indev_reset_check>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	f43f ad3a 	beq.w	800263e <lv_indev_read_timer_cb+0xee>
 8002bca:	e549      	b.n	8002660 <lv_indev_read_timer_cb+0x110>
    else indev_proc_release(&i->proc);
 8002bcc:	f7ff f9ca 	bl	8001f64 <indev_proc_release>
 8002bd0:	e7f5      	b.n	8002bbe <lv_indev_read_timer_cb+0x66e>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002bd2:	f001 0118 	and.w	r1, r1, #24
 8002bd6:	2908      	cmp	r1, #8
 8002bd8:	f47f ad17 	bne.w	800260a <lv_indev_read_timer_cb+0xba>
 8002bdc:	e50a      	b.n	80025f4 <lv_indev_read_timer_cb+0xa4>
 8002bde:	bf00      	nop

08002be0 <scroll_throw_predict_x.isra.0>:
    }
}



static lv_coord_t scroll_throw_predict_y(_lv_indev_proc_t * proc)
 8002be0:	b510      	push	{r4, lr}
 8002be2:	4604      	mov	r4, r0
{
    lv_coord_t y =  proc->types.pointer.scroll_throw_vect.y;
    lv_coord_t move = 0;

    lv_indev_t * indev_act = lv_indev_get_act();
 8002be4:	f7ff fa1e 	bl	8002024 <lv_indev_get_act>
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8002be8:	6803      	ldr	r3, [r0, #0]

    while(y) {
        move += y;
        y = y * (100 - scroll_throw) / 100;
 8002bea:	2264      	movs	r2, #100	; 0x64
    lv_coord_t move = 0;
 8002bec:	2000      	movs	r0, #0
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8002bee:	7e5b      	ldrb	r3, [r3, #25]
        y = y * (100 - scroll_throw) / 100;
 8002bf0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
    while(y) {
 8002bf4:	b904      	cbnz	r4, 8002bf8 <scroll_throw_predict_x.isra.0+0x18>
    }
    return move;
}
 8002bf6:	bd10      	pop	{r4, pc}
        move += y;
 8002bf8:	4420      	add	r0, r4
        y = y * (100 - scroll_throw) / 100;
 8002bfa:	435c      	muls	r4, r3
 8002bfc:	fb94 f4f2 	sdiv	r4, r4, r2
        move += y;
 8002c00:	b200      	sxth	r0, r0
        y = y * (100 - scroll_throw) / 100;
 8002c02:	b224      	sxth	r4, r4
 8002c04:	e7f6      	b.n	8002bf4 <scroll_throw_predict_x.isra.0+0x14>

08002c06 <elastic_diff>:
    }
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end, lv_dir_t dir)
{
 8002c06:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0a:	460c      	mov	r4, r1
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8002c0c:	2120      	movs	r1, #32
{
 8002c0e:	4683      	mov	fp, r0
 8002c10:	4690      	mov	r8, r2
 8002c12:	461f      	mov	r7, r3
 8002c14:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8002c18:	f000 feeb 	bl	80039f2 <lv_obj_has_flag>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	f000 80ad 	beq.w	8002d7c <elastic_diff+0x176>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8002c22:	2d03      	cmp	r5, #3
 8002c24:	4658      	mov	r0, fp
 8002c26:	d12a      	bne.n	8002c7e <elastic_diff+0x78>
 8002c28:	f002 ff5c 	bl	8005ae4 <lv_obj_get_scroll_snap_x>
 8002c2c:	4681      	mov	r9, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8002c2e:	f7ff fa9f 	bl	8002170 <lv_indev_get_obj_act>
        lv_coord_t snap_point = 0;
        lv_coord_t act_obj_point = 0;

        if(dir == LV_DIR_HOR) {
 8002c32:	2d03      	cmp	r5, #3
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8002c34:	4682      	mov	sl, r0
        if(dir == LV_DIR_HOR) {
 8002c36:	d14b      	bne.n	8002cd0 <elastic_diff+0xca>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002c38:	f241 0212 	movw	r2, #4114	; 0x1012
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4658      	mov	r0, fp
 8002c40:	f004 f9aa 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002c44:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002c48:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4658      	mov	r0, fp
 8002c4e:	f004 f9a3 	bl	8006f98 <lv_obj_get_style_prop>
            lv_coord_t pad_left = lv_obj_get_style_pad_left(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_right = lv_obj_get_style_pad_right(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 8002c52:	f1b9 0f02 	cmp.w	r9, #2
 8002c56:	d034      	beq.n	8002cc2 <elastic_diff+0xbc>
 8002c58:	f1b9 0f03 	cmp.w	r9, #3
 8002c5c:	d012      	beq.n	8002c84 <elastic_diff+0x7e>
 8002c5e:	f1b9 0f01 	cmp.w	r9, #1
 8002c62:	d16f      	bne.n	8002d44 <elastic_diff+0x13e>
            case LV_SCROLL_SNAP_CENTER:
                snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
                act_obj_point = lv_area_get_width(&act_obj->coords) / 2 + act_obj->coords.x1;
                break;
            case LV_SCROLL_SNAP_START:
                snap_point = scroll_obj->coords.x1 + pad_left;
 8002c64:	f8bb 5014 	ldrh.w	r5, [fp, #20]
 8002c68:	4435      	add	r5, r6
                act_obj_point = act_obj->coords.x1;
 8002c6a:	f9ba 6014 	ldrsh.w	r6, [sl, #20]
                snap_point = scroll_obj->coords.x1 + pad_left;
 8002c6e:	b22d      	sxth	r5, r5
                act_obj_point = act_obj->coords.y2;
                break;
            }
        }

        if(scroll_end < 0) {
 8002c70:	2f00      	cmp	r7, #0
 8002c72:	da79      	bge.n	8002d68 <elastic_diff+0x162>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 8002c74:	42b5      	cmp	r5, r6
 8002c76:	da67      	bge.n	8002d48 <elastic_diff+0x142>
        if(scroll_end + diff < 0) diff = - scroll_end;
        if(scroll_start - diff < 0) diff = scroll_start;
    }

    return diff;
}
 8002c78:	4620      	mov	r0, r4
 8002c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8002c7e:	f002 ff37 	bl	8005af0 <lv_obj_get_scroll_snap_y>
 8002c82:	e7d3      	b.n	8002c2c <elastic_diff+0x26>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8002c84:	f8bb 3018 	ldrh.w	r3, [fp, #24]
                snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 8002c88:	b235      	sxth	r5, r6
 8002c8a:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	4416      	add	r6, r2
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	1b5b      	subs	r3, r3, r5
 8002c98:	b205      	sxth	r5, r0
 8002c9a:	1b5d      	subs	r5, r3, r5
 8002c9c:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8002ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ca4:	eb06 0565 	add.w	r5, r6, r5, asr #1
 8002ca8:	f8ba 6014 	ldrh.w	r6, [sl, #20]
 8002cac:	b22d      	sxth	r5, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002cae:	3301      	adds	r3, #1
 8002cb0:	1b9b      	subs	r3, r3, r6
                act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 8002cb2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002cb6:	fa02 f383 	sxtah	r3, r2, r3
 8002cba:	eb06 0663 	add.w	r6, r6, r3, asr #1
 8002cbe:	b236      	sxth	r6, r6
                break;
 8002cc0:	e7d6      	b.n	8002c70 <elastic_diff+0x6a>
                snap_point = scroll_obj->coords.x2 - pad_right;
 8002cc2:	f8bb 5018 	ldrh.w	r5, [fp, #24]
                act_obj_point = act_obj->coords.x2;
 8002cc6:	f9ba 6018 	ldrsh.w	r6, [sl, #24]
                snap_point = scroll_obj->coords.x2 - pad_right;
 8002cca:	1a2d      	subs	r5, r5, r0
 8002ccc:	b22d      	sxth	r5, r5
                break;
 8002cce:	e7cf      	b.n	8002c70 <elastic_diff+0x6a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002cd0:	f241 0210 	movw	r2, #4112	; 0x1010
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4658      	mov	r0, fp
 8002cd8:	f004 f95e 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002cdc:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002ce0:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4658      	mov	r0, fp
 8002ce6:	f004 f957 	bl	8006f98 <lv_obj_get_style_prop>
            switch(snap) {
 8002cea:	f1b9 0f02 	cmp.w	r9, #2
 8002cee:	d022      	beq.n	8002d36 <elastic_diff+0x130>
 8002cf0:	f1b9 0f03 	cmp.w	r9, #3
 8002cf4:	d009      	beq.n	8002d0a <elastic_diff+0x104>
 8002cf6:	f1b9 0f01 	cmp.w	r9, #1
 8002cfa:	d123      	bne.n	8002d44 <elastic_diff+0x13e>
                snap_point = scroll_obj->coords.y1 + pad_top;
 8002cfc:	f8bb 5016 	ldrh.w	r5, [fp, #22]
 8002d00:	4435      	add	r5, r6
                act_obj_point = act_obj->coords.y1;
 8002d02:	f9ba 6016 	ldrsh.w	r6, [sl, #22]
                snap_point = scroll_obj->coords.y1 + pad_top;
 8002d06:	b22d      	sxth	r5, r5
                break;
 8002d08:	e7b2      	b.n	8002c70 <elastic_diff+0x6a>
 8002d0a:	f8bb 301a 	ldrh.w	r3, [fp, #26]
                snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 8002d0e:	b235      	sxth	r5, r6
 8002d10:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4416      	add	r6, r2
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	1b5b      	subs	r3, r3, r5
 8002d1e:	b205      	sxth	r5, r0
 8002d20:	1b5d      	subs	r5, r3, r5
 8002d22:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 8002d26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d2a:	eb06 0565 	add.w	r5, r6, r5, asr #1
 8002d2e:	f8ba 6016 	ldrh.w	r6, [sl, #22]
 8002d32:	b22d      	sxth	r5, r5
 8002d34:	e7bb      	b.n	8002cae <elastic_diff+0xa8>
                snap_point = scroll_obj->coords.y2 - pad_bottom;
 8002d36:	f8bb 501a 	ldrh.w	r5, [fp, #26]
                act_obj_point = act_obj->coords.y2;
 8002d3a:	f9ba 601a 	ldrsh.w	r6, [sl, #26]
                snap_point = scroll_obj->coords.y2 - pad_bottom;
 8002d3e:	1a2d      	subs	r5, r5, r0
 8002d40:	b22d      	sxth	r5, r5
                break;
 8002d42:	e795      	b.n	8002c70 <elastic_diff+0x6a>
        if(scroll_end < 0) {
 8002d44:	2f00      	cmp	r7, #0
 8002d46:	da0d      	bge.n	8002d64 <elastic_diff+0x15e>
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8002d48:	2c00      	cmp	r4, #0
 8002d4a:	bfbc      	itt	lt
 8002d4c:	3c02      	sublt	r4, #2
 8002d4e:	b224      	sxthlt	r4, r4
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8002d50:	2c00      	cmp	r4, #0
 8002d52:	bfc4      	itt	gt
 8002d54:	3402      	addgt	r4, #2
 8002d56:	b224      	sxthgt	r4, r4
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8002d58:	2c00      	cmp	r4, #0
 8002d5a:	bfb8      	it	lt
 8002d5c:	3403      	addlt	r4, #3
 8002d5e:	f344 048f 	sbfx	r4, r4, #2, #16
 8002d62:	e789      	b.n	8002c78 <elastic_diff+0x72>
 8002d64:	2600      	movs	r6, #0
 8002d66:	4635      	mov	r5, r6
        else if(scroll_start < 0) {
 8002d68:	f1b8 0f00 	cmp.w	r8, #0
 8002d6c:	da84      	bge.n	8002c78 <elastic_diff+0x72>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 8002d6e:	f1b9 0f00 	cmp.w	r9, #0
 8002d72:	d0e9      	beq.n	8002d48 <elastic_diff+0x142>
 8002d74:	42b5      	cmp	r5, r6
 8002d76:	f73f af7f 	bgt.w	8002c78 <elastic_diff+0x72>
 8002d7a:	e7e5      	b.n	8002d48 <elastic_diff+0x142>
        if(scroll_end + diff < 0) diff = - scroll_end;
 8002d7c:	42e7      	cmn	r7, r4
 8002d7e:	bf44      	itt	mi
 8002d80:	427c      	negmi	r4, r7
 8002d82:	b224      	sxthmi	r4, r4
        if(scroll_start - diff < 0) diff = scroll_start;
 8002d84:	eba8 0304 	sub.w	r3, r8, r4
 8002d88:	ea34 0423 	bics.w	r4, r4, r3, asr #32
 8002d8c:	bf28      	it	cs
 8002d8e:	4644      	movcs	r4, r8
 8002d90:	e772      	b.n	8002c78 <elastic_diff+0x72>

08002d92 <find_snap_point_x>:
{
 8002d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d96:	b085      	sub	sp, #20
 8002d98:	4604      	mov	r4, r0
 8002d9a:	469b      	mov	fp, r3
 8002d9c:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 8002da0:	f002 fea0 	bl	8005ae4 <lv_obj_get_scroll_snap_x>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8002da4:	4605      	mov	r5, r0
 8002da6:	b918      	cbnz	r0, 8002db0 <find_snap_point_x+0x1e>
 8002da8:	2000      	movs	r0, #0
}
 8002daa:	b005      	add	sp, #20
 8002dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002db0:	f241 0212 	movw	r2, #4114	; 0x1012
 8002db4:	2100      	movs	r1, #0
 8002db6:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8002db8:	2700      	movs	r7, #0
 8002dba:	f004 f8ed 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002dbe:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 8002dc2:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002dc4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8002dca:	9301      	str	r3, [sp, #4]
    lv_coord_t dist = LV_COORD_MAX;
 8002dcc:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002dd0:	f004 f8e2 	bl	8006f98 <lv_obj_get_style_prop>
 8002dd4:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8002dd6:	b203      	sxth	r3, r0
 8002dd8:	9300      	str	r3, [sp, #0]
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f004 fc38 	bl	8007650 <lv_obj_get_child_cnt>
 8002de0:	42b8      	cmp	r0, r7
 8002de2:	d806      	bhi.n	8002df2 <find_snap_point_x+0x60>
    return dist == LV_COORD_MAX ? 0: -dist;
 8002de4:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
 8002de8:	d0de      	beq.n	8002da8 <find_snap_point_x+0x16>
 8002dea:	f1c9 0000 	rsb	r0, r9, #0
 8002dee:	b200      	sxth	r0, r0
 8002df0:	e7db      	b.n	8002daa <find_snap_point_x+0x18>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8002df2:	4639      	mov	r1, r7
 8002df4:	4620      	mov	r0, r4
 8002df6:	f004 fc1c 	bl	8007632 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8002dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8002dfe:	4682      	mov	sl, r0
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8002e00:	f000 fdfe 	bl	8003a00 <lv_obj_has_flag_any>
 8002e04:	bb40      	cbnz	r0, 8002e58 <find_snap_point_x+0xc6>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPABLE)) {
 8002e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e0a:	4650      	mov	r0, sl
 8002e0c:	f000 fdf1 	bl	80039f2 <lv_obj_has_flag>
 8002e10:	b310      	cbz	r0, 8002e58 <find_snap_point_x+0xc6>
            switch(align) {
 8002e12:	2d02      	cmp	r5, #2
 8002e14:	d022      	beq.n	8002e5c <find_snap_point_x+0xca>
 8002e16:	2d03      	cmp	r5, #3
 8002e18:	d026      	beq.n	8002e68 <find_snap_point_x+0xd6>
 8002e1a:	2d01      	cmp	r5, #1
 8002e1c:	d11c      	bne.n	8002e58 <find_snap_point_x+0xc6>
                x_parent = obj->coords.x1 + pad_left;
 8002e1e:	8aa3      	ldrh	r3, [r4, #20]
                x_child = child->coords.x1;
 8002e20:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
                x_parent = obj->coords.x1 + pad_left;
 8002e24:	4433      	add	r3, r6
            x_child += ofs;
 8002e26:	4458      	add	r0, fp
            if(x_child >= min && x_child <= max) {
 8002e28:	9a02      	ldr	r2, [sp, #8]
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8002e2a:	b21b      	sxth	r3, r3
            x_child += ofs;
 8002e2c:	b281      	uxth	r1, r0
 8002e2e:	b200      	sxth	r0, r0
            if(x_child >= min && x_child <= max) {
 8002e30:	4290      	cmp	r0, r2
 8002e32:	db11      	blt.n	8002e58 <find_snap_point_x+0xc6>
 8002e34:	9a03      	ldr	r2, [sp, #12]
 8002e36:	4290      	cmp	r0, r2
 8002e38:	dc0e      	bgt.n	8002e58 <find_snap_point_x+0xc6>
                lv_coord_t x = x_child -  x_parent;
 8002e3a:	1acb      	subs	r3, r1, r3
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8002e3c:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
                lv_coord_t x = x_child -  x_parent;
 8002e40:	b21b      	sxth	r3, r3
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8002e42:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8002e46:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002e4a:	b289      	uxth	r1, r1
 8002e4c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8002e50:	b280      	uxth	r0, r0
 8002e52:	4288      	cmp	r0, r1
 8002e54:	bf38      	it	cc
 8002e56:	4699      	movcc	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8002e58:	3701      	adds	r7, #1
 8002e5a:	e7be      	b.n	8002dda <find_snap_point_x+0x48>
                x_parent = obj->coords.x2 - pad_right;
 8002e5c:	8b23      	ldrh	r3, [r4, #24]
                x_child = child->coords.x2;
 8002e5e:	f9ba 0018 	ldrsh.w	r0, [sl, #24]
                x_parent = obj->coords.x2 - pad_right;
 8002e62:	eba3 0308 	sub.w	r3, r3, r8
 8002e66:	e7de      	b.n	8002e26 <find_snap_point_x+0x94>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8002e68:	f8ba 3018 	ldrh.w	r3, [sl, #24]
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8002e6c:	f8ba 0014 	ldrh.w	r0, [sl, #20]
 8002e70:	3301      	adds	r3, #1
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8002e72:	9a01      	ldr	r2, [sp, #4]
 8002e74:	1a1b      	subs	r3, r3, r0
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8002e76:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002e7a:	fa01 f383 	sxtah	r3, r1, r3
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8002e7e:	8aa1      	ldrh	r1, [r4, #20]
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8002e80:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8002e84:	b218      	sxth	r0, r3
 8002e86:	8b23      	ldrh	r3, [r4, #24]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	1a5b      	subs	r3, r3, r1
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	9a00      	ldr	r2, [sp, #0]
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8002e98:	198b      	adds	r3, r1, r6
 8002e9a:	eb03 036c 	add.w	r3, r3, ip, asr #1
 8002e9e:	e7c2      	b.n	8002e26 <find_snap_point_x+0x94>

08002ea0 <find_snap_point_y>:
{
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	469b      	mov	fp, r3
 8002eaa:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 8002eae:	f002 fe1f 	bl	8005af0 <lv_obj_get_scroll_snap_y>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8002eb2:	4605      	mov	r5, r0
 8002eb4:	b918      	cbnz	r0, 8002ebe <find_snap_point_y+0x1e>
 8002eb6:	2000      	movs	r0, #0
}
 8002eb8:	b005      	add	sp, #20
 8002eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002ebe:	f241 0210 	movw	r2, #4112	; 0x1010
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8002ec6:	2700      	movs	r7, #0
 8002ec8:	f004 f866 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002ecc:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 8002ed0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002ed2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8002ed8:	9301      	str	r3, [sp, #4]
    lv_coord_t dist = LV_COORD_MAX;
 8002eda:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002ede:	f004 f85b 	bl	8006f98 <lv_obj_get_style_prop>
 8002ee2:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8002ee4:	b203      	sxth	r3, r0
 8002ee6:	9300      	str	r3, [sp, #0]
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f004 fbb1 	bl	8007650 <lv_obj_get_child_cnt>
 8002eee:	42b8      	cmp	r0, r7
 8002ef0:	d806      	bhi.n	8002f00 <find_snap_point_y+0x60>
    return dist == LV_COORD_MAX ? 0 : -dist;
 8002ef2:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
 8002ef6:	d0de      	beq.n	8002eb6 <find_snap_point_y+0x16>
 8002ef8:	f1c9 0000 	rsb	r0, r9, #0
 8002efc:	b200      	sxth	r0, r0
 8002efe:	e7db      	b.n	8002eb8 <find_snap_point_y+0x18>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8002f00:	4639      	mov	r1, r7
 8002f02:	4620      	mov	r0, r4
 8002f04:	f004 fb95 	bl	8007632 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8002f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8002f0c:	4682      	mov	sl, r0
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8002f0e:	f000 fd77 	bl	8003a00 <lv_obj_has_flag_any>
 8002f12:	bb40      	cbnz	r0, 8002f66 <find_snap_point_y+0xc6>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPABLE)) {
 8002f14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f18:	4650      	mov	r0, sl
 8002f1a:	f000 fd6a 	bl	80039f2 <lv_obj_has_flag>
 8002f1e:	b310      	cbz	r0, 8002f66 <find_snap_point_y+0xc6>
            switch(align) {
 8002f20:	2d02      	cmp	r5, #2
 8002f22:	d022      	beq.n	8002f6a <find_snap_point_y+0xca>
 8002f24:	2d03      	cmp	r5, #3
 8002f26:	d026      	beq.n	8002f76 <find_snap_point_y+0xd6>
 8002f28:	2d01      	cmp	r5, #1
 8002f2a:	d11c      	bne.n	8002f66 <find_snap_point_y+0xc6>
                y_parent = obj->coords.y1 + pad_top;
 8002f2c:	8ae3      	ldrh	r3, [r4, #22]
                y_child = child->coords.y1;
 8002f2e:	f9ba 0016 	ldrsh.w	r0, [sl, #22]
                y_parent = obj->coords.y1 + pad_top;
 8002f32:	4433      	add	r3, r6
            y_child += ofs;
 8002f34:	4458      	add	r0, fp
            if(y_child >= min && y_child <= max) {
 8002f36:	9a02      	ldr	r2, [sp, #8]
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8002f38:	b21b      	sxth	r3, r3
            y_child += ofs;
 8002f3a:	b281      	uxth	r1, r0
 8002f3c:	b200      	sxth	r0, r0
            if(y_child >= min && y_child <= max) {
 8002f3e:	4290      	cmp	r0, r2
 8002f40:	db11      	blt.n	8002f66 <find_snap_point_y+0xc6>
 8002f42:	9a03      	ldr	r2, [sp, #12]
 8002f44:	4290      	cmp	r0, r2
 8002f46:	dc0e      	bgt.n	8002f66 <find_snap_point_y+0xc6>
                lv_coord_t y = y_child -  y_parent;
 8002f48:	1acb      	subs	r3, r1, r3
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8002f4a:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
                lv_coord_t y = y_child -  y_parent;
 8002f4e:	b21b      	sxth	r3, r3
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8002f50:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8002f54:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002f58:	b289      	uxth	r1, r1
 8002f5a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8002f5e:	b280      	uxth	r0, r0
 8002f60:	4288      	cmp	r0, r1
 8002f62:	bf38      	it	cc
 8002f64:	4699      	movcc	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8002f66:	3701      	adds	r7, #1
 8002f68:	e7be      	b.n	8002ee8 <find_snap_point_y+0x48>
                y_parent = obj->coords.y2 - pad_bottom;
 8002f6a:	8b63      	ldrh	r3, [r4, #26]
                y_child = child->coords.y2;
 8002f6c:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
                y_parent = obj->coords.y2 - pad_bottom;
 8002f70:	eba3 0308 	sub.w	r3, r3, r8
 8002f74:	e7de      	b.n	8002f34 <find_snap_point_y+0x94>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002f76:	f8ba 301a 	ldrh.w	r3, [sl, #26]
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8002f7a:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 8002f7e:	3301      	adds	r3, #1
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8002f80:	9a01      	ldr	r2, [sp, #4]
 8002f82:	1a1b      	subs	r3, r3, r0
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8002f84:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8002f88:	fa01 f383 	sxtah	r3, r1, r3
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8002f8c:	8ae1      	ldrh	r1, [r4, #22]
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8002f8e:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8002f92:	b218      	sxth	r0, r3
 8002f94:	8b63      	ldrh	r3, [r4, #26]
 8002f96:	3301      	adds	r3, #1
 8002f98:	1a5b      	subs	r3, r3, r1
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	9a00      	ldr	r2, [sp, #0]
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 8002fa6:	198b      	adds	r3, r1, r6
 8002fa8:	eb03 036c 	add.w	r3, r3, ip, asr #1
 8002fac:	e7c2      	b.n	8002f34 <find_snap_point_y+0x94>
	...

08002fb0 <_lv_indev_scroll_handler>:
{
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8002fb4:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	4604      	mov	r4, r0
    if(scroll_obj == NULL) {
 8002fba:	2d00      	cmp	r5, #0
 8002fbc:	f040 81af 	bne.w	800331e <_lv_indev_scroll_handler+0x36e>
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8002fc0:	8a83      	ldrh	r3, [r0, #20]
    lv_dir_t dir_candidate = LV_DIR_NONE;
 8002fc2:	46a9      	mov	r9, r5
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8002fc4:	8a02      	ldrh	r2, [r0, #16]
 8002fc6:	4413      	add	r3, r2
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8002fc8:	8a42      	ldrh	r2, [r0, #18]
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8002fca:	8283      	strh	r3, [r0, #20]
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8002fcc:	8ac3      	ldrh	r3, [r0, #22]
 8002fce:	4413      	add	r3, r2
 8002fd0:	82c3      	strh	r3, [r0, #22]
    lv_indev_t * indev_act = lv_indev_get_act();
 8002fd2:	f7ff f827 	bl	8002024 <lv_indev_get_act>
    lv_coord_t scroll_limit =  indev_act->driver->scroll_limit;
 8002fd6:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 8002fd8:	6a26      	ldr	r6, [r4, #32]
    lv_coord_t scroll_limit =  indev_act->driver->scroll_limit;
 8002fda:	f893 a018 	ldrb.w	sl, [r3, #24]
 8002fde:	46d3      	mov	fp, sl
                (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))
 8002fe0:	f1ca 0a00 	rsb	sl, sl, #0
    while(obj_act) {
 8002fe4:	2e00      	cmp	r6, #0
 8002fe6:	f000 815e 	beq.w	80032a6 <_lv_indev_scroll_handler+0x2f6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 8002fea:	2110      	movs	r1, #16
 8002fec:	4630      	mov	r0, r6
 8002fee:	f000 fd00 	bl	80039f2 <lv_obj_has_flag>
 8002ff2:	4607      	mov	r7, r0
 8002ff4:	b960      	cbnz	r0, 8003010 <_lv_indev_scroll_handler+0x60>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN) == false) break;
 8002ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	f000 fcf9 	bl	80039f2 <lv_obj_has_flag>
 8003000:	2800      	cmp	r0, #0
 8003002:	f000 8150 	beq.w	80032a6 <_lv_indev_scroll_handler+0x2f6>
        obj_act = lv_obj_get_parent(obj_act);
 8003006:	4630      	mov	r0, r6
 8003008:	f004 fb10 	bl	800762c <lv_obj_get_parent>
 800300c:	4606      	mov	r6, r0
 800300e:	e7e9      	b.n	8002fe4 <_lv_indev_scroll_handler+0x34>
        if(LV_ABS(proc->types.pointer.scroll_sum.x) > LV_ABS(proc->types.pointer.scroll_sum.y)) {
 8003010:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8003014:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8003018:	2a00      	cmp	r2, #0
 800301a:	bfb8      	it	lt
 800301c:	4252      	neglt	r2, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	bfb8      	it	lt
 8003022:	425b      	neglt	r3, r3
 8003024:	b292      	uxth	r2, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	429a      	cmp	r2, r3
            ver_en = true;
 800302a:	bf98      	it	ls
 800302c:	4680      	movls	r8, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 800302e:	4630      	mov	r0, r6
        bool hor_en = false;
 8003030:	bf94      	ite	ls
 8003032:	2700      	movls	r7, #0
        bool ver_en = false;
 8003034:	f04f 0800 	movhi.w	r8, #0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 8003038:	f002 fd4c 	bl	8005ad4 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 800303c:	f010 0f01 	tst.w	r0, #1
 8003040:	bf14      	ite	ne
 8003042:	4639      	movne	r1, r7
 8003044:	2100      	moveq	r1, #0
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003046:	f010 0f02 	tst.w	r0, #2
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 800304a:	9107      	str	r1, [sp, #28]
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 800304c:	bf14      	ite	ne
 800304e:	463a      	movne	r2, r7
 8003050:	2200      	moveq	r2, #0
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003052:	f010 0f04 	tst.w	r0, #4
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003056:	9206      	str	r2, [sp, #24]
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003058:	bf14      	ite	ne
 800305a:	4643      	movne	r3, r8
 800305c:	2300      	moveq	r3, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 800305e:	f010 0f08 	tst.w	r0, #8
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8003062:	4630      	mov	r0, r6
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003064:	9305      	str	r3, [sp, #20]
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8003066:	bf08      	it	eq
 8003068:	f04f 0800 	moveq.w	r8, #0
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 800306c:	f002 fd6a 	bl	8005b44 <lv_obj_get_scroll_top>
 8003070:	9002      	str	r0, [sp, #8]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 8003072:	4630      	mov	r0, r6
 8003074:	f002 fd68 	bl	8005b48 <lv_obj_get_scroll_bottom>
 8003078:	9003      	str	r0, [sp, #12]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 800307a:	4630      	mov	r0, r6
 800307c:	f002 fdb8 	bl	8005bf0 <lv_obj_get_scroll_left>
 8003080:	9004      	str	r0, [sp, #16]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 8003082:	4630      	mov	r0, r6
 8003084:	f002 fe20 	bl	8005cc8 <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 8003088:	9b02      	ldr	r3, [sp, #8]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 800308a:	4686      	mov	lr, r0
        if((st > 0 || sb > 0)  &&
 800308c:	9907      	ldr	r1, [sp, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8003094:	dc02      	bgt.n	800309c <_lv_indev_scroll_handler+0xec>
 8003096:	9803      	ldr	r0, [sp, #12]
 8003098:	2800      	cmp	r0, #0
 800309a:	dd0e      	ble.n	80030ba <_lv_indev_scroll_handler+0x10a>
 800309c:	b11b      	cbz	r3, 80030a6 <_lv_indev_scroll_handler+0xf6>
                ((up_en    && proc->types.pointer.scroll_sum.y >= scroll_limit) ||
 800309e:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80030a2:	45dc      	cmp	ip, fp
 80030a4:	da46      	bge.n	8003134 <_lv_indev_scroll_handler+0x184>
 80030a6:	f1b8 0f00 	cmp.w	r8, #0
 80030aa:	d006      	beq.n	80030ba <_lv_indev_scroll_handler+0x10a>
                        (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit)))
 80030ac:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80030b0:	45d4      	cmp	ip, sl
 80030b2:	bfdc      	itt	le
 80030b4:	4635      	movle	r5, r6
 80030b6:	f04f 090c 	movle.w	r9, #12
        if((sl > 0 || sr > 0)  &&
 80030ba:	9804      	ldr	r0, [sp, #16]
 80030bc:	2800      	cmp	r0, #0
 80030be:	dc02      	bgt.n	80030c6 <_lv_indev_scroll_handler+0x116>
 80030c0:	f1be 0f00 	cmp.w	lr, #0
 80030c4:	dd0c      	ble.n	80030e0 <_lv_indev_scroll_handler+0x130>
 80030c6:	b119      	cbz	r1, 80030d0 <_lv_indev_scroll_handler+0x120>
                ((left_en    && proc->types.pointer.scroll_sum.x >=  scroll_limit) ||
 80030c8:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80030cc:	45dc      	cmp	ip, fp
 80030ce:	da35      	bge.n	800313c <_lv_indev_scroll_handler+0x18c>
 80030d0:	b132      	cbz	r2, 80030e0 <_lv_indev_scroll_handler+0x130>
                        (right_en  && proc->types.pointer.scroll_sum.x <= - scroll_limit)))
 80030d2:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80030d6:	45d4      	cmp	ip, sl
 80030d8:	bfdc      	itt	le
 80030da:	4635      	movle	r5, r6
 80030dc:	f04f 0903 	movle.w	r9, #3
        if(st <= 0) up_en = false;
 80030e0:	9802      	ldr	r0, [sp, #8]
 80030e2:	2800      	cmp	r0, #0
        if(sb <= 0) down_en = false;
 80030e4:	9803      	ldr	r0, [sp, #12]
        if(st <= 0) up_en = false;
 80030e6:	bfd8      	it	le
 80030e8:	2300      	movle	r3, #0
        if(sb <= 0) down_en = false;
 80030ea:	2800      	cmp	r0, #0
        if(sl <= 0) left_en = false;
 80030ec:	9804      	ldr	r0, [sp, #16]
        if(sb <= 0) down_en = false;
 80030ee:	bfd8      	it	le
 80030f0:	f04f 0800 	movle.w	r8, #0
        if(sl <= 0) left_en = false;
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f340 8174 	ble.w	80033e2 <_lv_indev_scroll_handler+0x432>
        if(sr <= 0) right_en = false;
 80030fa:	f1be 0f00 	cmp.w	lr, #0
 80030fe:	f340 80bf 	ble.w	8003280 <_lv_indev_scroll_handler+0x2d0>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003102:	2900      	cmp	r1, #0
 8003104:	f040 80c0 	bne.w	8003288 <_lv_indev_scroll_handler+0x2d8>
 8003108:	b122      	cbz	r2, 8003114 <_lv_indev_scroll_handler+0x164>
                (right_en && proc->types.pointer.scroll_sum.x <= - scroll_limit) ||
 800310a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800310e:	4552      	cmp	r2, sl
 8003110:	f340 80bf 	ble.w	8003292 <_lv_indev_scroll_handler+0x2e2>
 8003114:	b123      	cbz	r3, 8003120 <_lv_indev_scroll_handler+0x170>
                (up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8003116:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800311a:	455b      	cmp	r3, fp
 800311c:	f280 80b9 	bge.w	8003292 <_lv_indev_scroll_handler+0x2e2>
 8003120:	f1b8 0f00 	cmp.w	r8, #0
 8003124:	f43f af67 	beq.w	8002ff6 <_lv_indev_scroll_handler+0x46>
                (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))
 8003128:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800312c:	4553      	cmp	r3, sl
 800312e:	f73f af62 	bgt.w	8002ff6 <_lv_indev_scroll_handler+0x46>
 8003132:	e0ae      	b.n	8003292 <_lv_indev_scroll_handler+0x2e2>
 8003134:	4635      	mov	r5, r6
            dir_candidate = LV_DIR_VER;
 8003136:	f04f 090c 	mov.w	r9, #12
 800313a:	e7be      	b.n	80030ba <_lv_indev_scroll_handler+0x10a>
 800313c:	4635      	mov	r5, r6
            dir_candidate = LV_DIR_HOR;
 800313e:	f04f 0903 	mov.w	r9, #3
 8003142:	e7cd      	b.n	80030e0 <_lv_indev_scroll_handler+0x130>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 8003144:	4628      	mov	r0, r5
 8003146:	f002 fcd3 	bl	8005af0 <lv_obj_get_scroll_snap_y>
 800314a:	2802      	cmp	r0, #2
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	d011      	beq.n	8003176 <_lv_indev_scroll_handler+0x1c6>
 8003152:	2803      	cmp	r0, #3
 8003154:	d03a      	beq.n	80031cc <_lv_indev_scroll_handler+0x21c>
 8003156:	2801      	cmp	r0, #1
 8003158:	d14d      	bne.n	80031f6 <_lv_indev_scroll_handler+0x246>
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 800315a:	8ae9      	ldrh	r1, [r5, #22]
 800315c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003160:	4628      	mov	r0, r5
 8003162:	3101      	adds	r1, #1
 8003164:	b209      	sxth	r1, r1
 8003166:	f7ff fe9b 	bl	8002ea0 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 800316a:	8aea      	ldrh	r2, [r5, #22]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 800316c:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 800316e:	3a01      	subs	r2, #1
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8003170:	2300      	movs	r3, #0
 8003172:	b212      	sxth	r2, r2
 8003174:	e00a      	b.n	800318c <_lv_indev_scroll_handler+0x1dc>
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 8003176:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800317a:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
 800317e:	4628      	mov	r0, r5
 8003180:	f7ff fe8e 	bl	8002ea0 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 8003184:	2300      	movs	r3, #0
 8003186:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 800318a:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 800318c:	4997      	ldr	r1, [pc, #604]	; (80033ec <_lv_indev_scroll_handler+0x43c>)
 800318e:	4628      	mov	r0, r5
 8003190:	f7ff fe86 	bl	8002ea0 <find_snap_point_y>
 8003194:	86e0      	strh	r0, [r4, #54]	; 0x36
        switch(lv_obj_get_scroll_snap_x(obj)) {
 8003196:	4628      	mov	r0, r5
 8003198:	f002 fca4 	bl	8005ae4 <lv_obj_get_scroll_snap_x>
 800319c:	2802      	cmp	r0, #2
 800319e:	d031      	beq.n	8003204 <_lv_indev_scroll_handler+0x254>
 80031a0:	2803      	cmp	r0, #3
 80031a2:	d03c      	beq.n	800321e <_lv_indev_scroll_handler+0x26e>
 80031a4:	2801      	cmp	r0, #1
 80031a6:	d152      	bne.n	800324e <_lv_indev_scroll_handler+0x29e>
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 80031a8:	2300      	movs	r3, #0
 80031aa:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80031ae:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 80031b2:	4628      	mov	r0, r5
 80031b4:	f7ff fded 	bl	8002d92 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 80031b8:	2300      	movs	r3, #0
 80031ba:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 80031be:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 80031c0:	498a      	ldr	r1, [pc, #552]	; (80033ec <_lv_indev_scroll_handler+0x43c>)
 80031c2:	4628      	mov	r0, r5
 80031c4:	f7ff fde5 	bl	8002d92 <find_snap_point_x>
 80031c8:	86a0      	strh	r0, [r4, #52]	; 0x34
            break;
 80031ca:	e088      	b.n	80032de <_lv_indev_scroll_handler+0x32e>
 80031cc:	8b6a      	ldrh	r2, [r5, #26]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80031ce:	4628      	mov	r0, r5
            lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 80031d0:	8aee      	ldrh	r6, [r5, #22]
 80031d2:	3201      	adds	r2, #1
 80031d4:	1b92      	subs	r2, r2, r6
 80031d6:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 80031da:	fa01 f282 	sxtah	r2, r1, r2
 80031de:	eb06 0662 	add.w	r6, r6, r2, asr #1
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80031e2:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 80031e6:	b2b6      	uxth	r6, r6
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80031e8:	1c71      	adds	r1, r6, #1
 80031ea:	b209      	sxth	r1, r1
 80031ec:	f7ff fe58 	bl	8002ea0 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 80031f0:	1e72      	subs	r2, r6, #1
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80031f2:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 80031f4:	e7bc      	b.n	8003170 <_lv_indev_scroll_handler+0x1c0>
            proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 80031f6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80031fa:	8663      	strh	r3, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 80031fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003200:	86e3      	strh	r3, [r4, #54]	; 0x36
            break;
 8003202:	e7c8      	b.n	8003196 <_lv_indev_scroll_handler+0x1e6>
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 8003204:	2300      	movs	r3, #0
 8003206:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800320a:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
 800320e:	4628      	mov	r0, r5
 8003210:	f7ff fdbf 	bl	8002d92 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 8003214:	2300      	movs	r3, #0
 8003216:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 800321a:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 800321c:	e7d0      	b.n	80031c0 <_lv_indev_scroll_handler+0x210>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800321e:	8b2a      	ldrh	r2, [r5, #24]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003220:	4628      	mov	r0, r5
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8003222:	8aae      	ldrh	r6, [r5, #20]
 8003224:	3201      	adds	r2, #1
 8003226:	1b92      	subs	r2, r2, r6
 8003228:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 800322c:	fa03 f282 	sxtah	r2, r3, r2
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003230:	2300      	movs	r3, #0
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8003232:	eb06 0662 	add.w	r6, r6, r2, asr #1
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003236:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 800323a:	b2b6      	uxth	r6, r6
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 800323c:	1c71      	adds	r1, r6, #1
 800323e:	b209      	sxth	r1, r1
 8003240:	f7ff fda7 	bl	8002d92 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8003244:	1e72      	subs	r2, r6, #1
 8003246:	2300      	movs	r3, #0
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003248:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 800324a:	b212      	sxth	r2, r2
 800324c:	e7b8      	b.n	80031c0 <_lv_indev_scroll_handler+0x210>
            proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 800324e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003252:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8003254:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003258:	86a3      	strh	r3, [r4, #52]	; 0x34
 800325a:	e04a      	b.n	80032f2 <_lv_indev_scroll_handler+0x342>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800325c:	f002 fc72 	bl	8005b44 <lv_obj_get_scroll_top>
 8003260:	9002      	str	r0, [sp, #8]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003262:	4628      	mov	r0, r5
        lv_coord_t diff_x = 0;
 8003264:	2700      	movs	r7, #0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003266:	f002 fc6f 	bl	8005b48 <lv_obj_get_scroll_bottom>
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 800326a:	210c      	movs	r1, #12
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800326c:	4603      	mov	r3, r0
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 800326e:	9a02      	ldr	r2, [sp, #8]
 8003270:	9100      	str	r1, [sp, #0]
 8003272:	4628      	mov	r0, r5
 8003274:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003278:	f7ff fcc5 	bl	8002c06 <elastic_diff>
 800327c:	4606      	mov	r6, r0
 800327e:	e068      	b.n	8003352 <_lv_indev_scroll_handler+0x3a2>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003280:	2900      	cmp	r1, #0
 8003282:	f43f af47 	beq.w	8003114 <_lv_indev_scroll_handler+0x164>
        if(sr <= 0) right_en = false;
 8003286:	2200      	movs	r2, #0
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003288:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800328c:	4559      	cmp	r1, fp
 800328e:	f6ff af3b 	blt.w	8003108 <_lv_indev_scroll_handler+0x158>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 8003292:	2f00      	cmp	r7, #0
 8003294:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003298:	bf14      	ite	ne
 800329a:	2203      	movne	r2, #3
 800329c:	220c      	moveq	r2, #12
 800329e:	f362 0303 	bfi	r3, r2, #0, #4
 80032a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(obj_candidate) {
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	f000 8098 	beq.w	80033dc <_lv_indev_scroll_handler+0x42c>
        proc->types.pointer.scroll_dir = dir_candidate;
 80032ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	4628      	mov	r0, r5
        proc->types.pointer.scroll_obj = obj_candidate;
 80032b4:	62a5      	str	r5, [r4, #40]	; 0x28
        proc->types.pointer.scroll_dir = dir_candidate;
 80032b6:	f369 0303 	bfi	r3, r9, #0, #4
 80032ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        proc->types.pointer.scroll_sum.x = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	6163      	str	r3, [r4, #20]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 80032c2:	f000 fb96 	bl	80039f2 <lv_obj_has_flag>
 80032c6:	2800      	cmp	r0, #0
 80032c8:	f47f af3c 	bne.w	8003144 <_lv_indev_scroll_handler+0x194>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 80032cc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80032d0:	4a46      	ldr	r2, [pc, #280]	; (80033ec <_lv_indev_scroll_handler+0x43c>)
 80032d2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80032d6:	4611      	mov	r1, r2
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f013 fbc5 	bl	8016a68 <lv_area_set>
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 80032de:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80032e2:	b913      	cbnz	r3, 80032ea <_lv_indev_scroll_handler+0x33a>
 80032e4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80032e8:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 80032ea:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0b0      	beq.n	8003254 <_lv_indev_scroll_handler+0x2a4>
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 80032f2:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 80032f6:	b913      	cbnz	r3, 80032fe <_lv_indev_scroll_handler+0x34e>
 80032f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80032fc:	8663      	strh	r3, [r4, #50]	; 0x32
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 80032fe:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8003302:	b913      	cbnz	r3, 800330a <_lv_indev_scroll_handler+0x35a>
 8003304:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003308:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_indev_t * indev_act = lv_indev_get_act();
 800330a:	f7fe fe8b 	bl	8002024 <lv_indev_get_act>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, indev_act);
 800330e:	2109      	movs	r1, #9
        lv_indev_t * indev_act = lv_indev_get_act();
 8003310:	4602      	mov	r2, r0
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, indev_act);
 8003312:	4628      	mov	r0, r5
 8003314:	f7fe fbf0 	bl	8001af8 <lv_event_send>
        if(proc->reset_query) return;
 8003318:	7863      	ldrb	r3, [r4, #1]
 800331a:	079a      	lsls	r2, r3, #30
 800331c:	d45e      	bmi.n	80033dc <_lv_indev_scroll_handler+0x42c>
    if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 800331e:	6923      	ldr	r3, [r4, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05b      	beq.n	80033dc <_lv_indev_scroll_handler+0x42c>
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8003324:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003328:	4628      	mov	r0, r5
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 800332a:	f006 060f 	and.w	r6, r6, #15
 800332e:	2e03      	cmp	r6, #3
 8003330:	d194      	bne.n	800325c <_lv_indev_scroll_handler+0x2ac>
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003332:	f002 fcc9 	bl	8005cc8 <lv_obj_get_scroll_right>
 8003336:	9002      	str	r0, [sp, #8]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003338:	4628      	mov	r0, r5
 800333a:	f002 fc59 	bl	8005bf0 <lv_obj_get_scroll_left>
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 800333e:	9600      	str	r6, [sp, #0]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003340:	4602      	mov	r2, r0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003342:	9b02      	ldr	r3, [sp, #8]
 8003344:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003348:	4628      	mov	r0, r5
 800334a:	f7ff fc5c 	bl	8002c06 <elastic_diff>
        lv_coord_t diff_y = 0;
 800334e:	2600      	movs	r6, #0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003350:	4607      	mov	r7, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8003352:	4628      	mov	r0, r5
 8003354:	f002 fbbe 	bl	8005ad4 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8003358:	07c3      	lsls	r3, r0, #31
 800335a:	bf5c      	itt	pl
 800335c:	ea07 77e7 	andpl.w	r7, r7, r7, asr #31
 8003360:	b23f      	sxthpl	r7, r7
        if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8003362:	0781      	lsls	r1, r0, #30
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003364:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8003368:	bf5c      	itt	pl
 800336a:	ea27 77e7 	bicpl.w	r7, r7, r7, asr #31
 800336e:	b23f      	sxthpl	r7, r7
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8003370:	0742      	lsls	r2, r0, #29
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003372:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8003376:	bf5c      	itt	pl
 8003378:	ea06 76e6 	andpl.w	r6, r6, r6, asr #31
 800337c:	b236      	sxthpl	r6, r6
        if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 800337e:	0703      	lsls	r3, r0, #28
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003380:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
 8003384:	bf5c      	itt	pl
 8003386:	ea26 76e6 	bicpl.w	r6, r6, r6, asr #31
 800338a:	b236      	sxthpl	r6, r6
 800338c:	18b3      	adds	r3, r6, r2
 800338e:	4283      	cmp	r3, r0
           *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8003390:	bfbc      	itt	lt
 8003392:	1a80      	sublt	r0, r0, r2
 8003394:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8003396:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 800339a:	18b3      	adds	r3, r6, r2
 800339c:	4283      	cmp	r3, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 800339e:	eb07 0301 	add.w	r3, r7, r1
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 80033a2:	bfc4      	itt	gt
 80033a4:	1a80      	subgt	r0, r0, r2
 80033a6:	b206      	sxthgt	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80033a8:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80033ac:	4283      	cmp	r3, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 80033ae:	4632      	mov	r2, r6
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 80033b0:	bfbc      	itt	lt
 80033b2:	1a40      	sublt	r0, r0, r1
 80033b4:	b207      	sxthlt	r7, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 80033b6:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	4283      	cmp	r3, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 80033be:	f04f 0300 	mov.w	r3, #0
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80033c2:	bfc4      	itt	gt
 80033c4:	1a40      	subgt	r0, r0, r1
 80033c6:	b207      	sxthgt	r7, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 80033c8:	4628      	mov	r0, r5
 80033ca:	4639      	mov	r1, r7
 80033cc:	f002 fd00 	bl	8005dd0 <lv_obj_scroll_by>
        proc->types.pointer.scroll_sum.x += diff_x;
 80033d0:	8aa1      	ldrh	r1, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 80033d2:	8ae2      	ldrh	r2, [r4, #22]
        proc->types.pointer.scroll_sum.x += diff_x;
 80033d4:	440f      	add	r7, r1
        proc->types.pointer.scroll_sum.y += diff_y;
 80033d6:	4416      	add	r6, r2
        proc->types.pointer.scroll_sum.x += diff_x;
 80033d8:	82a7      	strh	r7, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 80033da:	82e6      	strh	r6, [r4, #22]
}
 80033dc:	b009      	add	sp, #36	; 0x24
 80033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(sr <= 0) right_en = false;
 80033e2:	f1be 0f00 	cmp.w	lr, #0
 80033e6:	f73f ae8f 	bgt.w	8003108 <_lv_indev_scroll_handler+0x158>
 80033ea:	e693      	b.n	8003114 <_lv_indev_scroll_handler+0x164>
 80033ec:	ffffa000 	.word	0xffffa000

080033f0 <_lv_indev_scroll_throw_handler>:
{
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80033f4:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80033f6:	b085      	sub	sp, #20
 80033f8:	4604      	mov	r4, r0
    if(scroll_obj == NULL) return;
 80033fa:	2d00      	cmp	r5, #0
 80033fc:	f000 8083 	beq.w	8003506 <_lv_indev_scroll_throw_handler+0x116>
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 8003400:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003404:	071b      	lsls	r3, r3, #28
 8003406:	d07e      	beq.n	8003506 <_lv_indev_scroll_throw_handler+0x116>
    lv_indev_t * indev_act = lv_indev_get_act();
 8003408:	f7fe fe0c 	bl	8002024 <lv_indev_get_act>
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 800340c:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 800340e:	4681      	mov	r9, r0
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	4628      	mov	r0, r5
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8003414:	f893 a019 	ldrb.w	sl, [r3, #25]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8003418:	f000 faeb 	bl	80039f2 <lv_obj_has_flag>
 800341c:	b900      	cbnz	r0, 8003420 <_lv_indev_scroll_throw_handler+0x30>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800341e:	61a0      	str	r0, [r4, #24]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 8003420:	4628      	mov	r0, r5
 8003422:	f002 fb5f 	bl	8005ae4 <lv_obj_get_scroll_snap_x>
 8003426:	4607      	mov	r7, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8003428:	4628      	mov	r0, r5
 800342a:	f002 fb61 	bl	8005af0 <lv_obj_get_scroll_snap_y>
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 800342e:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8003432:	4680      	mov	r8, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 8003434:	f006 060f 	and.w	r6, r6, #15
 8003438:	2e0c      	cmp	r6, #12
 800343a:	f040 8087 	bne.w	800354c <_lv_indev_scroll_throw_handler+0x15c>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800343e:	f04f 0b00 	mov.w	fp, #0
 8003442:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
 8003446:	f8a4 b018 	strh.w	fp, [r4, #24]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 800344a:	f1b8 0f00 	cmp.w	r8, #0
 800344e:	d15d      	bne.n	800350c <_lv_indev_scroll_throw_handler+0x11c>
                    proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 8003450:	f1ca 0a64 	rsb	sl, sl, #100	; 0x64
 8003454:	fb00 f00a 	mul.w	r0, r0, sl
 8003458:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800345c:	fb90 f0fa 	sdiv	r0, r0, sl
            proc->types.pointer.scroll_throw_vect.y =
 8003460:	8360      	strh	r0, [r4, #26]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003462:	4628      	mov	r0, r5
 8003464:	f002 fb70 	bl	8005b48 <lv_obj_get_scroll_bottom>
 8003468:	9003      	str	r0, [sp, #12]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800346a:	4628      	mov	r0, r5
 800346c:	f002 fb6a 	bl	8005b44 <lv_obj_get_scroll_top>
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 8003470:	9b03      	ldr	r3, [sp, #12]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8003472:	4602      	mov	r2, r0
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 8003474:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8003478:	4628      	mov	r0, r5
 800347a:	9600      	str	r6, [sp, #0]
 800347c:	f7ff fbc3 	bl	8002c06 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 8003480:	4643      	mov	r3, r8
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 8003482:	4602      	mov	r2, r0
 8003484:	8360      	strh	r0, [r4, #26]
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8003486:	2100      	movs	r1, #0
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 8003488:	4628      	mov	r0, r5
 800348a:	f002 fca1 	bl	8005dd0 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 800348e:	69a3      	ldr	r3, [r4, #24]
 8003490:	bbcb      	cbnz	r3, 8003506 <_lv_indev_scroll_throw_handler+0x116>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8003492:	f1b8 0f00 	cmp.w	r8, #0
 8003496:	d112      	bne.n	80034be <_lv_indev_scroll_throw_handler+0xce>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8003498:	4628      	mov	r0, r5
 800349a:	f002 fb53 	bl	8005b44 <lv_obj_get_scroll_top>
 800349e:	4606      	mov	r6, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 80034a0:	4628      	mov	r0, r5
 80034a2:	f002 fb51 	bl	8005b48 <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	f300 8096 	bgt.w	80035d8 <_lv_indev_scroll_throw_handler+0x1e8>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	dd06      	ble.n	80034be <_lv_indev_scroll_throw_handler+0xce>
                if(st < 0) {
 80034b0:	b12e      	cbz	r6, 80034be <_lv_indev_scroll_throw_handler+0xce>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 80034b2:	2301      	movs	r3, #1
 80034b4:	4632      	mov	r2, r6
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 80034b6:	4641      	mov	r1, r8
 80034b8:	4628      	mov	r0, r5
 80034ba:	f002 fc89 	bl	8005dd0 <lv_obj_scroll_by>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 80034be:	b997      	cbnz	r7, 80034e6 <_lv_indev_scroll_throw_handler+0xf6>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 80034c0:	4628      	mov	r0, r5
 80034c2:	f002 fb95 	bl	8005bf0 <lv_obj_get_scroll_left>
 80034c6:	4606      	mov	r6, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 80034c8:	4628      	mov	r0, r5
 80034ca:	f002 fbfd 	bl	8005cc8 <lv_obj_get_scroll_right>
            if (sl > 0 || sr > 0) {
 80034ce:	2e00      	cmp	r6, #0
 80034d0:	f300 8089 	bgt.w	80035e6 <_lv_indev_scroll_throw_handler+0x1f6>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	dd06      	ble.n	80034e6 <_lv_indev_scroll_throw_handler+0xf6>
                if(sl < 0) {
 80034d8:	b12e      	cbz	r6, 80034e6 <_lv_indev_scroll_throw_handler+0xf6>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 80034da:	2301      	movs	r3, #1
 80034dc:	463a      	mov	r2, r7
 80034de:	4631      	mov	r1, r6
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 80034e0:	4628      	mov	r0, r5
 80034e2:	f002 fc75 	bl	8005dd0 <lv_obj_scroll_by>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 80034e6:	464a      	mov	r2, r9
 80034e8:	210a      	movs	r1, #10
 80034ea:	4628      	mov	r0, r5
 80034ec:	f7fe fb04 	bl	8001af8 <lv_event_send>
        if(proc->reset_query) return;
 80034f0:	7863      	ldrb	r3, [r4, #1]
 80034f2:	f013 0302 	ands.w	r3, r3, #2
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80034f6:	bf01      	itttt	eq
 80034f8:	f894 203c 	ldrbeq.w	r2, [r4, #60]	; 0x3c
        proc->types.pointer.scroll_obj = NULL;
 80034fc:	62a3      	streq	r3, [r4, #40]	; 0x28
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80034fe:	f363 0203 	bfieq	r2, r3, #0, #4
 8003502:	f884 203c 	strbeq.w	r2, [r4, #60]	; 0x3c
}
 8003506:	b005      	add	sp, #20
 8003508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 800350c:	f7ff fb68 	bl	8002be0 <scroll_throw_predict_x.isra.0>
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003510:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 8003514:	4606      	mov	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003516:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 800351a:	4937      	ldr	r1, [pc, #220]	; (80035f8 <_lv_indev_scroll_throw_handler+0x208>)
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 800351c:	18f2      	adds	r2, r6, r3
            proc->types.pointer.scroll_throw_vect.y = 0;
 800351e:	f8a4 b01a 	strh.w	fp, [r4, #26]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003522:	4282      	cmp	r2, r0
           *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8003524:	bfbc      	itt	lt
 8003526:	1ac0      	sublt	r0, r0, r3
 8003528:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 800352a:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 800352e:	18f2      	adds	r2, r6, r3
 8003530:	4282      	cmp	r2, r0
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8003532:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8003536:	bfc4      	itt	gt
 8003538:	1ac0      	subgt	r0, r0, r3
 800353a:	b206      	sxthgt	r6, r0
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 800353c:	4628      	mov	r0, r5
 800353e:	4633      	mov	r3, r6
 8003540:	f7ff fcae 	bl	8002ea0 <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8003544:	1832      	adds	r2, r6, r0
 8003546:	2301      	movs	r3, #1
 8003548:	b212      	sxth	r2, r2
 800354a:	e79c      	b.n	8003486 <_lv_indev_scroll_throw_handler+0x96>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 800354c:	2e03      	cmp	r6, #3
 800354e:	d19e      	bne.n	800348e <_lv_indev_scroll_throw_handler+0x9e>
        proc->types.pointer.scroll_throw_vect.y = 0;
 8003550:	f04f 0b00 	mov.w	fp, #0
 8003554:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8003558:	f8a4 b01a 	strh.w	fp, [r4, #26]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 800355c:	b9df      	cbnz	r7, 8003596 <_lv_indev_scroll_throw_handler+0x1a6>
                    proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 800355e:	f1ca 0a64 	rsb	sl, sl, #100	; 0x64
 8003562:	2364      	movs	r3, #100	; 0x64
 8003564:	fb00 f00a 	mul.w	r0, r0, sl
 8003568:	fb90 f0f3 	sdiv	r0, r0, r3
            proc->types.pointer.scroll_throw_vect.x =
 800356c:	8320      	strh	r0, [r4, #24]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 800356e:	4628      	mov	r0, r5
 8003570:	f002 fb3e 	bl	8005bf0 <lv_obj_get_scroll_left>
 8003574:	9003      	str	r0, [sp, #12]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003576:	4628      	mov	r0, r5
 8003578:	f002 fba6 	bl	8005cc8 <lv_obj_get_scroll_right>
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 800357c:	9a03      	ldr	r2, [sp, #12]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 800357e:	4603      	mov	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003580:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8003584:	4628      	mov	r0, r5
 8003586:	9600      	str	r6, [sp, #0]
 8003588:	f7ff fb3d 	bl	8002c06 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 800358c:	463b      	mov	r3, r7
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 800358e:	4601      	mov	r1, r0
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003590:	463a      	mov	r2, r7
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003592:	8320      	strh	r0, [r4, #24]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003594:	e778      	b.n	8003488 <_lv_indev_scroll_throw_handler+0x98>
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 8003596:	f7ff fb23 	bl	8002be0 <scroll_throw_predict_x.isra.0>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 800359a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 800359e:	4606      	mov	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80035a0:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 80035a4:	4914      	ldr	r1, [pc, #80]	; (80035f8 <_lv_indev_scroll_throw_handler+0x208>)
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80035a6:	18f2      	adds	r2, r6, r3
            proc->types.pointer.scroll_throw_vect.x = 0;
 80035a8:	f8a4 b018 	strh.w	fp, [r4, #24]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80035ac:	4282      	cmp	r2, r0
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 80035ae:	bfbc      	itt	lt
 80035b0:	1ac0      	sublt	r0, r0, r3
 80035b2:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 80035b4:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 80035b8:	18f2      	adds	r2, r6, r3
 80035ba:	4282      	cmp	r2, r0
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 80035bc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80035c0:	bfc4      	itt	gt
 80035c2:	1ac0      	subgt	r0, r0, r3
 80035c4:	b206      	sxthgt	r6, r0
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 80035c6:	4628      	mov	r0, r5
 80035c8:	4633      	mov	r3, r6
 80035ca:	f7ff fbe2 	bl	8002d92 <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 80035ce:	4430      	add	r0, r6
 80035d0:	2301      	movs	r3, #1
 80035d2:	2200      	movs	r2, #0
 80035d4:	b201      	sxth	r1, r0
 80035d6:	e757      	b.n	8003488 <_lv_indev_scroll_throw_handler+0x98>
                else if(sb < 0) {
 80035d8:	2800      	cmp	r0, #0
 80035da:	f6bf af70 	bge.w	80034be <_lv_indev_scroll_throw_handler+0xce>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 80035de:	4240      	negs	r0, r0
 80035e0:	2301      	movs	r3, #1
 80035e2:	b202      	sxth	r2, r0
 80035e4:	e767      	b.n	80034b6 <_lv_indev_scroll_throw_handler+0xc6>
                else if(sr < 0) {
 80035e6:	2800      	cmp	r0, #0
 80035e8:	f6bf af7d 	bge.w	80034e6 <_lv_indev_scroll_throw_handler+0xf6>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 80035ec:	4240      	negs	r0, r0
 80035ee:	2301      	movs	r3, #1
 80035f0:	463a      	mov	r2, r7
 80035f2:	b201      	sxth	r1, r0
 80035f4:	e774      	b.n	80034e0 <_lv_indev_scroll_throw_handler+0xf0>
 80035f6:	bf00      	nop
 80035f8:	ffffa000 	.word	0xffffa000

080035fc <lv_indev_scroll_throw_predict>:
    if(indev == NULL) return 0;
 80035fc:	b1c0      	cbz	r0, 8003630 <lv_indev_scroll_throw_predict+0x34>
    switch(dir) {
 80035fe:	2903      	cmp	r1, #3
 8003600:	d00b      	beq.n	800361a <lv_indev_scroll_throw_predict+0x1e>
 8003602:	290c      	cmp	r1, #12
 8003604:	d113      	bne.n	800362e <lv_indev_scroll_throw_predict+0x32>
        v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 8003606:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 800360a:	6802      	ldr	r2, [r0, #0]
        v = v * (100 - scroll_throw) / 100;
 800360c:	2164      	movs	r1, #100	; 0x64
    lv_coord_t sum = 0;
 800360e:	2000      	movs	r0, #0
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8003610:	7e52      	ldrb	r2, [r2, #25]
        v = v * (100 - scroll_throw) / 100;
 8003612:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
    while(v) {
 8003616:	b91b      	cbnz	r3, 8003620 <lv_indev_scroll_throw_predict+0x24>
 8003618:	4770      	bx	lr
        v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 800361a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
        break;
 800361e:	e7f4      	b.n	800360a <lv_indev_scroll_throw_predict+0xe>
        sum += v;
 8003620:	4418      	add	r0, r3
        v = v * (100 - scroll_throw) / 100;
 8003622:	4353      	muls	r3, r2
 8003624:	fb93 f3f1 	sdiv	r3, r3, r1
        sum += v;
 8003628:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 800362a:	b21b      	sxth	r3, r3
 800362c:	e7f3      	b.n	8003616 <lv_indev_scroll_throw_predict+0x1a>
    switch(dir) {
 800362e:	2000      	movs	r0, #0
}
 8003630:	4770      	bx	lr

08003632 <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);

    if(obj->spec_attr) {
 8003632:	688b      	ldr	r3, [r1, #8]
{
 8003634:	b510      	push	{r4, lr}
 8003636:	460c      	mov	r4, r1
    if(obj->spec_attr) {
 8003638:	b19b      	cbz	r3, 8003662 <lv_obj_destructor+0x30>
        if(obj->spec_attr->children) {
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	b120      	cbz	r0, 8003648 <lv_obj_destructor+0x16>
            lv_mem_free(obj->spec_attr->children);
 800363e:	f013 fea1 	bl	8017384 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8003642:	68a3      	ldr	r3, [r4, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	68d8      	ldr	r0, [r3, #12]
 800364c:	b120      	cbz	r0, 8003658 <lv_obj_destructor+0x26>
            lv_mem_free(obj->spec_attr->event_dsc);
 800364e:	f013 fe99 	bl	8017384 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8003658:	68a0      	ldr	r0, [r4, #8]
 800365a:	f013 fe93 	bl	8017384 <lv_mem_free>
        obj->spec_attr = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	60a3      	str	r3, [r4, #8]
    }

}
 8003662:	bd10      	pop	{r4, pc}

08003664 <lv_obj_set_state>:
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
    if(obj->state == new_state) return;
 8003664:	8c03      	ldrh	r3, [r0, #32]
 8003666:	428b      	cmp	r3, r1
{
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	4604      	mov	r4, r0
 800366e:	4688      	mov	r8, r1
 8003670:	ed2d 8b02 	vpush	{d8}
    if(obj->state == new_state) return;
 8003674:	ee08 3a10 	vmov	s16, r3
{
 8003678:	b08b      	sub	sp, #44	; 0x2c
    if(obj->state == new_state) return;
 800367a:	f000 80e9 	beq.w	8003850 <lv_obj_set_state+0x1ec>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 800367e:	460a      	mov	r2, r1
    obj->state = new_state;
 8003680:	8401      	strh	r1, [r0, #32]
    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8003682:	4619      	mov	r1, r3
 8003684:	f003 fe8e 	bl	80073a4 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8003688:	9002      	str	r0, [sp, #8]
 800368a:	2800      	cmp	r0, #0
 800368c:	f000 80e0 	beq.w	8003850 <lv_obj_set_state+0x1ec>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003690:	f44f 7020 	mov.w	r0, #640	; 0x280
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003694:	f04f 0900 	mov.w	r9, #0
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003698:	f014 f826 	bl	80176e8 <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800369c:	f44f 7120 	mov.w	r1, #640	; 0x280
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80036a0:	4607      	mov	r7, r0
    uint32_t tsi = 0;
 80036a2:	464d      	mov	r5, r9
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80036a4:	f014 f86e 	bl	8017784 <lv_memset_00>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80036a8:	ea6f 0308 	mvn.w	r3, r8
 80036ac:	9306      	str	r3, [sp, #24]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80036ae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80036b0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80036b4:	454b      	cmp	r3, r9
 80036b6:	d901      	bls.n	80036bc <lv_obj_set_state+0x58>
 80036b8:	2d1f      	cmp	r5, #31
 80036ba:	d915      	bls.n	80036e8 <lv_obj_set_state+0x84>
 80036bc:	2314      	movs	r3, #20
 80036be:	463e      	mov	r6, r7
 80036c0:	fb03 7505 	mla	r5, r3, r5, r7
                tsi++;
            }
        }
    }

    for(i = 0;i < tsi; i++) {
 80036c4:	42ae      	cmp	r6, r5
 80036c6:	f040 809c 	bne.w	8003802 <lv_obj_set_state+0x19e>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
    }

    lv_mem_buf_release(ts);
 80036ca:	4638      	mov	r0, r7
 80036cc:	f013 fe68 	bl	80173a0 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 80036d0:	9b02      	ldr	r3, [sp, #8]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80a2 	bne.w	800381c <lv_obj_set_state+0x1b8>
        lv_obj_invalidate(obj);
 80036d8:	4620      	mov	r0, r4
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 80036da:	b00b      	add	sp, #44	; 0x2c
 80036dc:	ecbd 8b02 	vpop	{d8}
 80036e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 80036e4:	f001 bb30 	b.w	8004d48 <lv_obj_invalidate>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80036e8:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80036ec:	ea4f 06c9 	mov.w	r6, r9, lsl #3
 80036f0:	eb0a 0bc9 	add.w	fp, sl, r9, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80036f4:	f8db 0004 	ldr.w	r0, [fp, #4]
 80036f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80036fc:	f003 ff6a 	bl	80075d4 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003700:	68e3      	ldr	r3, [r4, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8003702:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003704:	4433      	add	r3, r6
 8003706:	6858      	ldr	r0, [r3, #4]
 8003708:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800370c:	f003 ff64 	bl	80075d8 <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003710:	9b06      	ldr	r3, [sp, #24]
 8003712:	9a03      	ldr	r2, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003714:	9004      	str	r0, [sp, #16]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003716:	4213      	tst	r3, r2
 8003718:	d10d      	bne.n	8003736 <lv_obj_set_state+0xd2>
        if(obj_style->is_trans) continue;
 800371a:	f89b 3007 	ldrb.w	r3, [fp, #7]
 800371e:	f013 0302 	ands.w	r3, r3, #2
 8003722:	d108      	bne.n	8003736 <lv_obj_set_state+0xd2>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) == false) continue;
 8003724:	f85a 1006 	ldr.w	r1, [sl, r6]
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
 8003728:	f991 2005 	ldrsb.w	r2, [r1, #5]
 800372c:	2a00      	cmp	r2, #0
 800372e:	da16      	bge.n	800375e <lv_obj_set_state+0xfa>
        const lv_style_const_prop_t *const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8003730:	680b      	ldr	r3, [r1, #0]
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	b912      	cbnz	r2, 800373c <lv_obj_set_state+0xd8>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003736:	f109 0901 	add.w	r9, r9, #1
 800373a:	e7b8      	b.n	80036ae <lv_obj_set_state+0x4a>
            if(const_prop->prop == prop) {
 800373c:	2a67      	cmp	r2, #103	; 0x67
 800373e:	d10c      	bne.n	800375a <lv_obj_set_state+0xf6>
                *value = const_prop->value;
 8003740:	685e      	ldr	r6, [r3, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003742:	f04f 0a00 	mov.w	sl, #0
 8003746:	6833      	ldr	r3, [r6, #0]
 8003748:	f833 300a 	ldrh.w	r3, [r3, sl]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f2      	beq.n	8003736 <lv_obj_set_state+0xd2>
 8003750:	2d1f      	cmp	r5, #31
 8003752:	d8f0      	bhi.n	8003736 <lv_obj_set_state+0xd2>
 8003754:	463a      	mov	r2, r7
            for(t = 0; t < tsi; t++) {
 8003756:	2300      	movs	r3, #0
 8003758:	e039      	b.n	80037ce <lv_obj_set_state+0x16a>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 800375a:	3308      	adds	r3, #8
 800375c:	e7e9      	b.n	8003732 <lv_obj_set_state+0xce>
            }
        }
        return LV_RES_INV;
    }

    if(style->prop_cnt == 0) return LV_RES_INV;
 800375e:	79ca      	ldrb	r2, [r1, #7]
 8003760:	2a00      	cmp	r2, #0
 8003762:	d0e8      	beq.n	8003736 <lv_obj_set_state+0xd2>

    if(style->prop_cnt > 1) {
 8003764:	2a01      	cmp	r2, #1
 8003766:	d90d      	bls.n	8003784 <lv_obj_set_state+0x120>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8003768:	6809      	ldr	r1, [r1, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 800376a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
            if(props[i] == prop) {
 800376e:	f830 6b02 	ldrh.w	r6, [r0], #2
 8003772:	2e67      	cmp	r6, #103	; 0x67
 8003774:	d102      	bne.n	800377c <lv_obj_set_state+0x118>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                *value = values[i];
 8003776:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
                return LV_RES_OK;
 800377a:	e7e2      	b.n	8003742 <lv_obj_set_state+0xde>
        for(i = 0; i < style->prop_cnt; i++) {
 800377c:	3301      	adds	r3, #1
 800377e:	429a      	cmp	r2, r3
 8003780:	d8f5      	bhi.n	800376e <lv_obj_set_state+0x10a>
 8003782:	e7d8      	b.n	8003736 <lv_obj_set_state+0xd2>
            }
        }
    } else if(style->prop1 == prop) {
 8003784:	888b      	ldrh	r3, [r1, #4]
 8003786:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800378a:	2b67      	cmp	r3, #103	; 0x67
 800378c:	d1d3      	bne.n	8003736 <lv_obj_set_state+0xd2>
        *value = style->v_p.value1;
 800378e:	680e      	ldr	r6, [r1, #0]
        return LV_RES_OK;
 8003790:	e7d7      	b.n	8003742 <lv_obj_set_state+0xde>
                lv_style_selector_t selector = ts[t].selector;
 8003792:	6851      	ldr	r1, [r2, #4]
 8003794:	9309      	str	r3, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003796:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 8003798:	9208      	str	r2, [sp, #32]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 800379a:	9107      	str	r1, [sp, #28]
 800379c:	f003 ff1a 	bl	80075d4 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80037a0:	9907      	ldr	r1, [sp, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 80037a2:	9005      	str	r0, [sp, #20]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80037a4:	4608      	mov	r0, r1
 80037a6:	f003 ff17 	bl	80075d8 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80037aa:	6831      	ldr	r1, [r6, #0]
 80037ac:	9a08      	ldr	r2, [sp, #32]
 80037ae:	f831 100a 	ldrh.w	r1, [r1, sl]
 80037b2:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 80037b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b8:	458c      	cmp	ip, r1
 80037ba:	d106      	bne.n	80037ca <lv_obj_set_state+0x166>
 80037bc:	9904      	ldr	r1, [sp, #16]
 80037be:	4281      	cmp	r1, r0
 80037c0:	d103      	bne.n	80037ca <lv_obj_set_state+0x166>
 80037c2:	9903      	ldr	r1, [sp, #12]
 80037c4:	9805      	ldr	r0, [sp, #20]
 80037c6:	4281      	cmp	r1, r0
 80037c8:	d918      	bls.n	80037fc <lv_obj_set_state+0x198>
            for(t = 0; t < tsi; t++) {
 80037ca:	3301      	adds	r3, #1
 80037cc:	3214      	adds	r2, #20
 80037ce:	429d      	cmp	r5, r3
 80037d0:	d1df      	bne.n	8003792 <lv_obj_set_state+0x12e>
                ts[tsi].time = tr->time;
 80037d2:	2314      	movs	r3, #20
 80037d4:	68f0      	ldr	r0, [r6, #12]
 80037d6:	6831      	ldr	r1, [r6, #0]
 80037d8:	436b      	muls	r3, r5
                tsi++;
 80037da:	3501      	adds	r5, #1
                ts[tsi].time = tr->time;
 80037dc:	52f8      	strh	r0, [r7, r3]
 80037de:	18fa      	adds	r2, r7, r3
                ts[tsi].delay = tr->delay;
 80037e0:	6933      	ldr	r3, [r6, #16]
 80037e2:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 80037e4:	68b3      	ldr	r3, [r6, #8]
 80037e6:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 80037e8:	f831 300a 	ldrh.w	r3, [r1, sl]
 80037ec:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 80037ee:	6873      	ldr	r3, [r6, #4]
 80037f0:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 80037f2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80037f6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 80037fa:	6053      	str	r3, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80037fc:	f10a 0a02 	add.w	sl, sl, #2
 8003800:	e7a1      	b.n	8003746 <lv_obj_set_state+0xe2>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003802:	6870      	ldr	r0, [r6, #4]
 8003804:	f003 fee8 	bl	80075d8 <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003808:	9600      	str	r6, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 800380a:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 800380c:	4643      	mov	r3, r8
 800380e:	ee18 2a10 	vmov	r2, s16
 8003812:	4620      	mov	r0, r4
 8003814:	3614      	adds	r6, #20
 8003816:	f003 fd2b 	bl	8007270 <_lv_obj_style_create_transition>
    for(i = 0;i < tsi; i++) {
 800381a:	e753      	b.n	80036c4 <lv_obj_set_state+0x60>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 800381c:	9b02      	ldr	r3, [sp, #8]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d10b      	bne.n	800383a <lv_obj_set_state+0x1d6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003826:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800382a:	4620      	mov	r0, r4
}
 800382c:	b00b      	add	sp, #44	; 0x2c
 800382e:	ecbd 8b02 	vpop	{d8}
 8003832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003836:	f003 b92b 	b.w	8006a90 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 800383a:	9b02      	ldr	r3, [sp, #8]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d107      	bne.n	8003850 <lv_obj_set_state+0x1ec>
        lv_obj_refresh_ext_draw_size(obj);
 8003840:	4620      	mov	r0, r4
}
 8003842:	b00b      	add	sp, #44	; 0x2c
 8003844:	ecbd 8b02 	vpop	{d8}
 8003848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 800384c:	f000 bf91 	b.w	8004772 <lv_obj_refresh_ext_draw_size>
}
 8003850:	b00b      	add	sp, #44	; 0x2c
 8003852:	ecbd 8b02 	vpop	{d8}
 8003856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800385a <lv_obj_constructor>:
{
 800385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * parent = obj->parent;
 800385e:	684f      	ldr	r7, [r1, #4]
{
 8003860:	460c      	mov	r4, r1
    if(parent) {
 8003862:	b38f      	cbz	r7, 80038c8 <lv_obj_constructor+0x6e>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8003864:	4638      	mov	r0, r7
 8003866:	f002 f9c3 	bl	8005bf0 <lv_obj_get_scroll_left>
 800386a:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800386c:	4638      	mov	r0, r7
 800386e:	f002 f969 	bl	8005b44 <lv_obj_get_scroll_top>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003872:	8afe      	ldrh	r6, [r7, #22]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8003874:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003876:	f241 0210 	movw	r2, #4112	; 0x1010
 800387a:	2100      	movs	r1, #0
 800387c:	4638      	mov	r0, r7
 800387e:	f003 fb8b 	bl	8006f98 <lv_obj_get_style_prop>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003882:	4406      	add	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003884:	f241 0212 	movw	r2, #4114	; 0x1012
 8003888:	2100      	movs	r1, #0
 800388a:	1b73      	subs	r3, r6, r5
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 800388c:	8abd      	ldrh	r5, [r7, #20]
 800388e:	4638      	mov	r0, r7
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003890:	b29b      	uxth	r3, r3
 8003892:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8003894:	3b01      	subs	r3, #1
 8003896:	8363      	strh	r3, [r4, #26]
 8003898:	f003 fb7e 	bl	8006f98 <lv_obj_get_style_prop>
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 800389c:	4405      	add	r5, r0
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 800389e:	f640 5302 	movw	r3, #3330	; 0xd02
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 80038a2:	eba5 0008 	sub.w	r0, r5, r8
 80038a6:	b280      	uxth	r0, r0
 80038a8:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 80038aa:	3801      	subs	r0, #1
 80038ac:	8320      	strh	r0, [r4, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 80038ae:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 80038b0:	69e3      	ldr	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80038b2:	b927      	cbnz	r7, 80038be <lv_obj_constructor+0x64>
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 80038b4:	f043 0374 	orr.w	r3, r3, #116	; 0x74
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80038b8:	61e3      	str	r3, [r4, #28]
}
 80038ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80038be:	f443 5301 	orr.w	r3, r3, #8256	; 0x2040
 80038c2:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80038c6:	e7f7      	b.n	80038b8 <lv_obj_constructor+0x5e>
    obj->flags |= LV_OBJ_FLAG_SNAPABLE;
 80038c8:	f240 4302 	movw	r3, #1026	; 0x402
 80038cc:	e7ef      	b.n	80038ae <lv_obj_constructor+0x54>
	...

080038d0 <lv_init>:
{
 80038d0:	b510      	push	{r4, lr}
    if(lv_initialized) {
 80038d2:	4c10      	ldr	r4, [pc, #64]	; (8003914 <lv_init+0x44>)
 80038d4:	7823      	ldrb	r3, [r4, #0]
 80038d6:	b9e3      	cbnz	r3, 8003912 <lv_init+0x42>
    lv_mem_init();
 80038d8:	f013 fd46 	bl	8017368 <lv_mem_init>
    _lv_timer_core_init();
 80038dc:	f014 fcfe 	bl	80182dc <_lv_timer_core_init>
    _lv_fs_init();
 80038e0:	f013 fb32 	bl	8016f48 <_lv_fs_init>
    _lv_anim_core_init();
 80038e4:	f012 ffb8 	bl	8016858 <_lv_anim_core_init>
    _lv_group_init();
 80038e8:	f7fe f9fc 	bl	8001ce4 <_lv_group_init>
    _lv_obj_style_init();
 80038ec:	f003 f8ca 	bl	8006a84 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 80038f0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80038f4:	4808      	ldr	r0, [pc, #32]	; (8003918 <lv_init+0x48>)
 80038f6:	f013 fbc8 	bl	801708a <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80038fa:	2158      	movs	r1, #88	; 0x58
 80038fc:	4807      	ldr	r0, [pc, #28]	; (800391c <lv_init+0x4c>)
 80038fe:	f013 fbc4 	bl	801708a <_lv_ll_init>
    _lv_refr_init();
 8003902:	f004 fae1 	bl	8007ec8 <_lv_refr_init>
    _lv_img_decoder_init();
 8003906:	f00b fb0b 	bl	800ef20 <_lv_img_decoder_init>
    lv_extra_init();
 800390a:	f00c fd8f 	bl	801042c <lv_extra_init>
    lv_initialized = true;
 800390e:	2301      	movs	r3, #1
 8003910:	7023      	strb	r3, [r4, #0]
}
 8003912:	bd10      	pop	{r4, pc}
 8003914:	20003058 	.word	0x20003058
 8003918:	2000b4e8 	.word	0x2000b4e8
 800391c:	2000b4d0 	.word	0x2000b4d0

08003920 <lv_obj_create>:
{
 8003920:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003922:	4804      	ldr	r0, [pc, #16]	; (8003934 <lv_obj_create+0x14>)
{
 8003924:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003926:	f000 fb65 	bl	8003ff4 <lv_obj_class_create_obj>
 800392a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 800392c:	f000 fbef 	bl	800410e <lv_obj_class_init_obj>
}
 8003930:	4620      	mov	r0, r4
 8003932:	bd10      	pop	{r4, pc}
 8003934:	08025ac8 	.word	0x08025ac8

08003938 <lv_obj_add_flag>:
{
 8003938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393a:	460d      	mov	r5, r1
 800393c:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 800393e:	f000 ffb7 	bl	80048b0 <lv_obj_is_layout_positioned>
 8003942:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8003944:	f015 0701 	ands.w	r7, r5, #1
 8003948:	d002      	beq.n	8003950 <lv_obj_add_flag+0x18>
 800394a:	4620      	mov	r0, r4
 800394c:	f001 f9fc 	bl	8004d48 <lv_obj_invalidate>
    obj->flags |= f;
 8003950:	69e3      	ldr	r3, [r4, #28]
 8003952:	432b      	orrs	r3, r5
 8003954:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003956:	b117      	cbz	r7, 800395e <lv_obj_add_flag+0x26>
        lv_obj_invalidate(obj);
 8003958:	4620      	mov	r0, r4
 800395a:	f001 f9f5 	bl	8004d48 <lv_obj_invalidate>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 800395e:	4620      	mov	r0, r4
 8003960:	f000 ffa6 	bl	80048b0 <lv_obj_is_layout_positioned>
 8003964:	42b0      	cmp	r0, r6
 8003966:	d102      	bne.n	800396e <lv_obj_add_flag+0x36>
 8003968:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 800396c:	d006      	beq.n	800397c <lv_obj_add_flag+0x44>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 800396e:	4620      	mov	r0, r4
 8003970:	f003 fe5c 	bl	800762c <lv_obj_get_parent>
}
 8003974:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003978:	f000 bffb 	b.w	8004972 <lv_obj_mark_layout_as_dirty>
}
 800397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800397e <lv_obj_clear_flag>:
{
 800397e:	b570      	push	{r4, r5, r6, lr}
 8003980:	4604      	mov	r4, r0
 8003982:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003984:	f000 ff94 	bl	80048b0 <lv_obj_is_layout_positioned>
 8003988:	4606      	mov	r6, r0
    obj->flags &= (~f);
 800398a:	69e3      	ldr	r3, [r4, #28]
 800398c:	ea23 0305 	bic.w	r3, r3, r5
 8003990:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003992:	07eb      	lsls	r3, r5, #31
 8003994:	d50b      	bpl.n	80039ae <lv_obj_clear_flag+0x30>
        lv_obj_invalidate(obj);
 8003996:	4620      	mov	r0, r4
 8003998:	f001 f9d6 	bl	8004d48 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 800399c:	4620      	mov	r0, r4
 800399e:	f000 ff87 	bl	80048b0 <lv_obj_is_layout_positioned>
 80039a2:	b120      	cbz	r0, 80039ae <lv_obj_clear_flag+0x30>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80039a4:	4620      	mov	r0, r4
 80039a6:	f003 fe41 	bl	800762c <lv_obj_get_parent>
 80039aa:	f000 ffe2 	bl	8004972 <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 ff7e 	bl	80048b0 <lv_obj_is_layout_positioned>
 80039b4:	42b0      	cmp	r0, r6
 80039b6:	d102      	bne.n	80039be <lv_obj_clear_flag+0x40>
 80039b8:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 80039bc:	d006      	beq.n	80039cc <lv_obj_clear_flag+0x4e>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80039be:	4620      	mov	r0, r4
 80039c0:	f003 fe34 	bl	800762c <lv_obj_get_parent>
}
 80039c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80039c8:	f000 bfd3 	b.w	8004972 <lv_obj_mark_layout_as_dirty>
}
 80039cc:	bd70      	pop	{r4, r5, r6, pc}

080039ce <lv_obj_add_state>:
{
 80039ce:	460b      	mov	r3, r1
    lv_state_t new_state = obj->state | state;
 80039d0:	8c02      	ldrh	r2, [r0, #32]
    if(obj->state != new_state) {
 80039d2:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
 80039d4:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
 80039d8:	d001      	beq.n	80039de <lv_obj_add_state+0x10>
        lv_obj_set_state(obj, new_state);
 80039da:	f7ff be43 	b.w	8003664 <lv_obj_set_state>
}
 80039de:	4770      	bx	lr

080039e0 <lv_obj_clear_state>:
{
 80039e0:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
 80039e2:	8c03      	ldrh	r3, [r0, #32]
    if(obj->state != new_state) {
 80039e4:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 80039e6:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 80039ea:	d001      	beq.n	80039f0 <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 80039ec:	f7ff be3a 	b.w	8003664 <lv_obj_set_state>
}
 80039f0:	4770      	bx	lr

080039f2 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 80039f2:	69c3      	ldr	r3, [r0, #28]
 80039f4:	ea31 0303 	bics.w	r3, r1, r3
}
 80039f8:	bf0c      	ite	eq
 80039fa:	2001      	moveq	r0, #1
 80039fc:	2000      	movne	r0, #0
 80039fe:	4770      	bx	lr

08003a00 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8003a00:	69c3      	ldr	r3, [r0, #28]
 8003a02:	4219      	tst	r1, r3
}
 8003a04:	bf14      	ite	ne
 8003a06:	2001      	movne	r0, #1
 8003a08:	2000      	moveq	r0, #0
 8003a0a:	4770      	bx	lr

08003a0c <lv_obj_get_state>:
}
 8003a0c:	8c00      	ldrh	r0, [r0, #32]
 8003a0e:	4770      	bx	lr

08003a10 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8003a10:	6880      	ldr	r0, [r0, #8]
 8003a12:	b100      	cbz	r0, 8003a16 <lv_obj_get_group+0x6>
 8003a14:	6880      	ldr	r0, [r0, #8]
}
 8003a16:	4770      	bx	lr

08003a18 <lv_obj_event>:
{
 8003a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8003a1c:	4608      	mov	r0, r1
{
 8003a1e:	460e      	mov	r6, r1
 8003a20:	b092      	sub	sp, #72	; 0x48
    lv_event_code_t code = lv_event_get_code(e);
 8003a22:	f7fe f88b 	bl	8001b3c <lv_event_get_code>
 8003a26:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7fe f885 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 8003a2e:	2d01      	cmp	r5, #1
    lv_obj_t * obj = lv_event_get_target(e);
 8003a30:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 8003a32:	d103      	bne.n	8003a3c <lv_obj_event+0x24>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8003a34:	2120      	movs	r1, #32
            lv_obj_add_state(obj, state);
 8003a36:	f7ff ffca 	bl	80039ce <lv_obj_add_state>
 8003a3a:	e019      	b.n	8003a70 <lv_obj_event+0x58>
    else if(code == LV_EVENT_RELEASED) {
 8003a3c:	2d08      	cmp	r5, #8
 8003a3e:	d11a      	bne.n	8003a76 <lv_obj_event+0x5e>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8003a40:	2120      	movs	r1, #32
 8003a42:	f7ff ffcd 	bl	80039e0 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8003a46:	4630      	mov	r0, r6
 8003a48:	f7fe f87a 	bl	8001b40 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003a4c:	f7fe fb6e 	bl	800212c <lv_indev_get_scroll_obj>
 8003a50:	b970      	cbnz	r0, 8003a70 <lv_obj_event+0x58>
    return (obj->flags & f)  == f ? true : false;
 8003a52:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003a54:	071e      	lsls	r6, r3, #28
 8003a56:	d50b      	bpl.n	8003a70 <lv_obj_event+0x58>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003a58:	8c23      	ldrh	r3, [r4, #32]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	07dd      	lsls	r5, r3, #31
 8003a60:	d425      	bmi.n	8003aae <lv_obj_event+0x96>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003a62:	f7ff ffb4 	bl	80039ce <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8003a66:	2200      	movs	r2, #0
 8003a68:	211c      	movs	r1, #28
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7fe f844 	bl	8001af8 <lv_event_send>
}
 8003a70:	b012      	add	sp, #72	; 0x48
 8003a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_PRESS_LOST) {
 8003a76:	2d03      	cmp	r5, #3
 8003a78:	d103      	bne.n	8003a82 <lv_obj_event+0x6a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8003a7a:	2120      	movs	r1, #32
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8003a7c:	f7ff ffb0 	bl	80039e0 <lv_obj_clear_state>
 8003a80:	e7f6      	b.n	8003a70 <lv_obj_event+0x58>
    else if(code == LV_EVENT_KEY) {
 8003a82:	2d0d      	cmp	r5, #13
 8003a84:	d116      	bne.n	8003ab4 <lv_obj_event+0x9c>
    return (obj->flags & f)  == f ? true : false;
 8003a86:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003a88:	071a      	lsls	r2, r3, #28
 8003a8a:	d5f1      	bpl.n	8003a70 <lv_obj_event+0x58>
            char c = *((char *)lv_event_get_param(e));
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f7fe f857 	bl	8001b40 <lv_event_get_param>
 8003a92:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8003a94:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8003a98:	2a11      	cmp	r2, #17
 8003a9a:	d102      	bne.n	8003aa2 <lv_obj_event+0x8a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	e7df      	b.n	8003a62 <lv_obj_event+0x4a>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8003aa2:	2b14      	cmp	r3, #20
 8003aa4:	d001      	beq.n	8003aaa <lv_obj_event+0x92>
 8003aa6:	2b12      	cmp	r3, #18
 8003aa8:	d1dd      	bne.n	8003a66 <lv_obj_event+0x4e>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff ff97 	bl	80039e0 <lv_obj_clear_state>
 8003ab2:	e7d8      	b.n	8003a66 <lv_obj_event+0x4e>
    else if(code == LV_EVENT_FOCUSED) {
 8003ab4:	2d0e      	cmp	r5, #14
 8003ab6:	d122      	bne.n	8003afe <lv_obj_event+0xe6>
    return (obj->flags & f)  == f ? true : false;
 8003ab8:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8003aba:	059b      	lsls	r3, r3, #22
 8003abc:	d502      	bpl.n	8003ac4 <lv_obj_event+0xac>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	f002 fbbd 	bl	800623e <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff ffa3 	bl	8003a10 <lv_obj_get_group>
 8003aca:	f7fe fa37 	bl	8001f3c <lv_group_get_editing>
 8003ace:	4605      	mov	r5, r0
        lv_indev_t * indev = lv_indev_get_act();
 8003ad0:	f7fe faa8 	bl	8002024 <lv_indev_get_act>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8003ad4:	f7fe faac 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8003ad8:	2802      	cmp	r0, #2
 8003ada:	d008      	beq.n	8003aee <lv_obj_event+0xd6>
        lv_state_t state = LV_STATE_FOCUSED;
 8003adc:	2804      	cmp	r0, #4
 8003ade:	bf0c      	ite	eq
 8003ae0:	2106      	moveq	r1, #6
 8003ae2:	2102      	movne	r1, #2
        if(editing) {
 8003ae4:	b12d      	cbz	r5, 8003af2 <lv_obj_event+0xda>
            lv_obj_add_state(obj, state);
 8003ae6:	f041 0108 	orr.w	r1, r1, #8
 8003aea:	4620      	mov	r0, r4
 8003aec:	e7a3      	b.n	8003a36 <lv_obj_event+0x1e>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8003aee:	2106      	movs	r1, #6
 8003af0:	e7f8      	b.n	8003ae4 <lv_obj_event+0xcc>
            lv_obj_add_state(obj, state);
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7ff ff6b 	bl	80039ce <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8003af8:	2108      	movs	r1, #8
 8003afa:	4620      	mov	r0, r4
 8003afc:	e7be      	b.n	8003a7c <lv_obj_event+0x64>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8003afe:	2d09      	cmp	r5, #9
 8003b00:	d101      	bne.n	8003b06 <lv_obj_event+0xee>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	e797      	b.n	8003a36 <lv_obj_event+0x1e>
    else if(code == LV_EVENT_SCROLL_END) {
 8003b06:	2d0a      	cmp	r5, #10
 8003b08:	d101      	bne.n	8003b0e <lv_obj_event+0xf6>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8003b0a:	2140      	movs	r1, #64	; 0x40
 8003b0c:	e7b6      	b.n	8003a7c <lv_obj_event+0x64>
    else if(code == LV_EVENT_DEFOCUSED) {
 8003b0e:	2d0f      	cmp	r5, #15
 8003b10:	d101      	bne.n	8003b16 <lv_obj_event+0xfe>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8003b12:	210e      	movs	r1, #14
 8003b14:	e7b2      	b.n	8003a7c <lv_obj_event+0x64>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8003b16:	2d23      	cmp	r5, #35	; 0x23
 8003b18:	d121      	bne.n	8003b5e <lv_obj_event+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003b1a:	f241 0209 	movw	r2, #4105	; 0x1009
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f003 fa3a 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003b24:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003b28:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f003 fa33 	bl	8006f98 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8003b32:	b280      	uxth	r0, r0
        if(layout || align) {
 8003b34:	b910      	cbnz	r0, 8003b3c <lv_obj_event+0x124>
 8003b36:	f015 0fff 	tst.w	r5, #255	; 0xff
 8003b3a:	d002      	beq.n	8003b42 <lv_obj_event+0x12a>
            lv_obj_mark_layout_as_dirty(obj);
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f000 ff18 	bl	8004972 <lv_obj_mark_layout_as_dirty>
        lv_state_t state = LV_STATE_FOCUSED;
 8003b42:	2500      	movs	r5, #0
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003b44:	4620      	mov	r0, r4
 8003b46:	f003 fd83 	bl	8007650 <lv_obj_get_child_cnt>
 8003b4a:	42a8      	cmp	r0, r5
 8003b4c:	d990      	bls.n	8003a70 <lv_obj_event+0x58>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 8003b4e:	4629      	mov	r1, r5
 8003b50:	4620      	mov	r0, r4
 8003b52:	f003 fd6e 	bl	8007632 <lv_obj_get_child>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003b56:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 8003b58:	f000 ff0b 	bl	8004972 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003b5c:	e7f2      	b.n	8003b44 <lv_obj_event+0x12c>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8003b5e:	2d22      	cmp	r5, #34	; 0x22
 8003b60:	d12b      	bne.n	8003bba <lv_obj_event+0x1a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003b62:	f241 0201 	movw	r2, #4097	; 0x1001
 8003b66:	2100      	movs	r1, #0
 8003b68:	f003 fa16 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003b6c:	f241 0204 	movw	r2, #4100	; 0x1004
 8003b70:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003b72:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003b74:	4620      	mov	r0, r4
 8003b76:	f003 fa0f 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003b7a:	f241 0209 	movw	r2, #4105	; 0x1009
 8003b7e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8003b80:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003b82:	4620      	mov	r0, r4
 8003b84:	f003 fa08 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003b88:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8003b8c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4620      	mov	r0, r4
 8003b92:	f003 fa01 	bl	8006f98 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8003b96:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8003b98:	b958      	cbnz	r0, 8003bb2 <lv_obj_event+0x19a>
 8003b9a:	f017 0fff 	tst.w	r7, #255	; 0xff
 8003b9e:	d108      	bne.n	8003bb2 <lv_obj_event+0x19a>
 8003ba0:	b236      	sxth	r6, r6
 8003ba2:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8003ba6:	429e      	cmp	r6, r3
 8003ba8:	d003      	beq.n	8003bb2 <lv_obj_event+0x19a>
 8003baa:	b22d      	sxth	r5, r5
 8003bac:	429d      	cmp	r5, r3
 8003bae:	f47f af5f 	bne.w	8003a70 <lv_obj_event+0x58>
            lv_obj_mark_layout_as_dirty(obj);
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 fedd 	bl	8004972 <lv_obj_mark_layout_as_dirty>
 8003bb8:	e75a      	b.n	8003a70 <lv_obj_event+0x58>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8003bba:	2d13      	cmp	r5, #19
 8003bbc:	d10e      	bne.n	8003bdc <lv_obj_event+0x1c4>
        lv_coord_t * s = lv_event_get_param(e);
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f7fd ffbe 	bl	8001b40 <lv_event_get_param>
 8003bc4:	4605      	mov	r5, r0
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 fd54 	bl	8004676 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, d);
 8003bce:	f9b5 3000 	ldrsh.w	r3, [r5]
 8003bd2:	4298      	cmp	r0, r3
 8003bd4:	bfb8      	it	lt
 8003bd6:	4618      	movlt	r0, r3
 8003bd8:	8028      	strh	r0, [r5, #0]
 8003bda:	e749      	b.n	8003a70 <lv_obj_event+0x58>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8003bdc:	2d18      	cmp	r5, #24
 8003bde:	f63f af47 	bhi.w	8003a70 <lv_obj_event+0x58>
 8003be2:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8003be6:	fa20 f505 	lsr.w	r5, r0, r5
 8003bea:	43ed      	mvns	r5, r5
 8003bec:	f015 0501 	ands.w	r5, r5, #1
 8003bf0:	f47f af3e 	bne.w	8003a70 <lv_obj_event+0x58>
    lv_event_code_t code = lv_event_get_code(e);
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f7fd ffa1 	bl	8001b3c <lv_event_get_code>
 8003bfa:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f7fd ff9b 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 8003c02:	2f12      	cmp	r7, #18
    lv_obj_t * obj = lv_event_get_target(e);
 8003c04:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8003c06:	d15c      	bne.n	8003cc2 <lv_obj_event+0x2aa>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f7fd ff99 	bl	8001b40 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8003c0e:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8003c10:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f43f af2c 	beq.w	8003a70 <lv_obj_event+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003c18:	4629      	mov	r1, r5
 8003c1a:	2261      	movs	r2, #97	; 0x61
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f003 f9bb 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8003c22:	4605      	mov	r5, r0
 8003c24:	b110      	cbz	r0, 8003c2c <lv_obj_event+0x214>
            info->res = LV_COVER_RES_MASKED;
 8003c26:	2302      	movs	r3, #2
        info->res = LV_COVER_RES_COVER;
 8003c28:	7033      	strb	r3, [r6, #0]
 8003c2a:	e721      	b.n	8003a70 <lv_obj_event+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	2260      	movs	r2, #96	; 0x60
 8003c30:	4620      	mov	r0, r4
 8003c32:	f003 f9b1 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003c36:	f640 020a 	movw	r2, #2058	; 0x80a
    return (lv_coord_t)v.num;
 8003c3a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	f003 f9a9 	bl	8006f98 <lv_obj_get_style_prop>
 8003c46:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003c48:	f640 020b 	movw	r2, #2059	; 0x80b
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f003 f9a2 	bl	8006f98 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8003c54:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->y2 = src->y2;
 8003c58:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 8003c5c:	b2bb      	uxth	r3, r7
 8003c5e:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 8003c60:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8003c62:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 8003c66:	1ac9      	subs	r1, r1, r3
        coords.y1 -= h;
 8003c68:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 8003c6a:	4460      	add	r0, ip
        coords.x2 += w;
 8003c6c:	4473      	add	r3, lr
        coords.x1 -= w;
 8003c6e:	f8ad 1014 	strh.w	r1, [sp, #20]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8003c72:	a905      	add	r1, sp, #20
        coords.y1 -= h;
 8003c74:	f8ad 2016 	strh.w	r2, [sp, #22]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8003c78:	4642      	mov	r2, r8
        coords.y2 += h;
 8003c7a:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8003c7e:	6870      	ldr	r0, [r6, #4]
        coords.x2 += w;
 8003c80:	f8ad 3018 	strh.w	r3, [sp, #24]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8003c84:	f013 f82e 	bl	8016ce4 <_lv_area_is_in>
 8003c88:	b908      	cbnz	r0, 8003c8e <lv_obj_event+0x276>
            info->res = LV_COVER_RES_NOT_COVER;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e7cc      	b.n	8003c28 <lv_obj_event+0x210>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8003c8e:	2221      	movs	r2, #33	; 0x21
 8003c90:	4629      	mov	r1, r5
 8003c92:	4620      	mov	r0, r4
 8003c94:	f003 f980 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003c98:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8003c9a:	28fc      	cmp	r0, #252	; 0xfc
 8003c9c:	d9f5      	bls.n	8003c8a <lv_obj_event+0x272>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	2268      	movs	r2, #104	; 0x68
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f003 f978 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_blend_mode(obj, LV_PART_MAIN) != LV_BLEND_MODE_NORMAL) {
 8003ca8:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8003cac:	d1ed      	bne.n	8003c8a <lv_obj_event+0x272>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8003cae:	f240 4262 	movw	r2, #1122	; 0x462
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f003 f970 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003cb8:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8003cba:	28fc      	cmp	r0, #252	; 0xfc
 8003cbc:	d9e5      	bls.n	8003c8a <lv_obj_event+0x272>
        info->res = LV_COVER_RES_COVER;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e7b2      	b.n	8003c28 <lv_obj_event+0x210>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8003cc2:	2f15      	cmp	r7, #21
 8003cc4:	d15c      	bne.n	8003d80 <lv_obj_event+0x368>
        const lv_area_t * clip_area = lv_event_get_param(e);
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f7fd ff3a 	bl	8001b40 <lv_event_get_param>
 8003ccc:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8003cce:	a805      	add	r0, sp, #20
 8003cd0:	f008 fcf2 	bl	800c6b8 <lv_draw_rect_dsc_init>
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8003cd4:	2234      	movs	r2, #52	; 0x34
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f003 f95d 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8003cde:	b128      	cbz	r0, 8003cec <lv_obj_event+0x2d4>
            draw_dsc.border_post = 1;
 8003ce0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8003cec:	aa05      	add	r2, sp, #20
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 fa4d 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003cf6:	f640 020a 	movw	r2, #2058	; 0x80a
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f003 f94b 	bl	8006f98 <lv_obj_get_style_prop>
 8003d02:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003d04:	f640 020b 	movw	r2, #2059	; 0x80b
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f003 f944 	bl	8006f98 <lv_obj_get_style_prop>
 8003d10:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
        coords.x1 -= w;
 8003d14:	8aa1      	ldrh	r1, [r4, #20]
 8003d16:	b2ab      	uxth	r3, r5
    dest->y1 = src->y1;
 8003d18:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8003d1c:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 8003d1e:	4463      	add	r3, ip
    dest->y2 = src->y2;
 8003d20:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
 8003d24:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.y1 -= h;
 8003d28:	b283      	uxth	r3, r0
        coords.x1 -= w;
 8003d2a:	f8ad 100c 	strh.w	r1, [sp, #12]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003d2e:	a803      	add	r0, sp, #12
        coords.y1 -= h;
 8003d30:	1ad2      	subs	r2, r2, r3
        coords.y2 += h;
 8003d32:	443b      	add	r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003d34:	4631      	mov	r1, r6
        coords.y1 -= h;
 8003d36:	f8ad 200e 	strh.w	r2, [sp, #14]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003d3a:	aa05      	add	r2, sp, #20
        coords.y2 += h;
 8003d3c:	f8ad 3012 	strh.w	r3, [sp, #18]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003d40:	f008 fcdc 	bl	800c6fc <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003d44:	2261      	movs	r2, #97	; 0x61
 8003d46:	2100      	movs	r1, #0
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f003 f925 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	f43f ae8e 	beq.w	8003a70 <lv_obj_event+0x58>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8003d54:	201c      	movs	r0, #28
 8003d56:	f013 fcc7 	bl	80176e8 <lv_mem_buf_get>
 8003d5a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003d5c:	2260      	movs	r2, #96	; 0x60
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4620      	mov	r0, r4
 8003d62:	f003 f919 	bl	8006f98 <lv_obj_get_style_prop>
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8003d66:	f104 0114 	add.w	r1, r4, #20
 8003d6a:	b202      	sxth	r2, r0
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f008 f904 	bl	800bf7c <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8003d74:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f007 ff99 	bl	800bcb0 <lv_draw_mask_add>
 8003d7e:	e677      	b.n	8003a70 <lv_obj_event+0x58>
    else if(code == LV_EVENT_DRAW_POST) {
 8003d80:	2f18      	cmp	r7, #24
 8003d82:	f47f ae75 	bne.w	8003a70 <lv_obj_event+0x58>
        const lv_area_t * clip_area = lv_event_get_param(e);
 8003d86:	4630      	mov	r0, r6
 8003d88:	f7fd feda 	bl	8001b40 <lv_event_get_param>
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8003d8c:	aa03      	add	r2, sp, #12
        const lv_area_t * clip_area = lv_event_get_param(e);
 8003d8e:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8003d90:	a901      	add	r1, sp, #4
 8003d92:	4620      	mov	r0, r4
 8003d94:	f002 fa6e 	bl	8006274 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8003d98:	a801      	add	r0, sp, #4
 8003d9a:	f012 fe76 	bl	8016a8a <lv_area_get_size>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f000 809a 	beq.w	8003ed8 <lv_obj_event+0x4c0>
    lv_draw_rect_dsc_init(dsc);
 8003da4:	a805      	add	r0, sp, #20
 8003da6:	f008 fc87 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8003daa:	2221      	movs	r2, #33	; 0x21
 8003dac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003db0:	4620      	mov	r0, r4
 8003db2:	f003 f8f1 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003db6:	b2c0      	uxtb	r0, r0
    if(dsc->bg_opa > LV_OPA_MIN) {
 8003db8:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8003dba:	f88d 001e 	strb.w	r0, [sp, #30]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8003dbe:	d907      	bls.n	8003dd0 <lv_obj_event+0x3b8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f003 f8e6 	bl	8006f98 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8003dcc:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8003dd0:	2231      	movs	r2, #49	; 0x31
 8003dd2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f003 f8de 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003ddc:	b2c0      	uxtb	r0, r0
    if(dsc->border_opa > LV_OPA_MIN) {
 8003dde:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8003de0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 8003de4:	d914      	bls.n	8003e10 <lv_obj_event+0x3f8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8003de6:	f241 0232 	movw	r2, #4146	; 0x1032
 8003dea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003dee:	4620      	mov	r0, r4
 8003df0:	f003 f8d2 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003df4:	b200      	sxth	r0, r0
        if(dsc->border_width > 0) {
 8003df6:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8003df8:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 8003dfc:	f340 80bd 	ble.w	8003f7a <lv_obj_event+0x562>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8003e00:	2230      	movs	r2, #48	; 0x30
 8003e02:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e06:	4620      	mov	r0, r4
 8003e08:	f003 f8c6 	bl	8006f98 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8003e0c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8003e10:	f640 0245 	movw	r2, #2117	; 0x845
 8003e14:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f003 f8bd 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8003e1e:	b2c0      	uxtb	r0, r0
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8003e20:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8003e22:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8003e26:	d91d      	bls.n	8003e64 <lv_obj_event+0x44c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8003e28:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8003e2c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e30:	4620      	mov	r0, r4
 8003e32:	f003 f8b1 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003e36:	b200      	sxth	r0, r0
        if(dsc->shadow_width > 0) {
 8003e38:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8003e3a:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 8003e3e:	f340 80a0 	ble.w	8003f82 <lv_obj_event+0x56a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8003e42:	f640 0243 	movw	r2, #2115	; 0x843
 8003e46:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f003 f8a4 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8003e50:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8003e52:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8003e56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f003 f89c 	bl	8006f98 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8003e60:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8003e64:	f240 4262 	movw	r2, #1122	; 0x462
 8003e68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f003 f893 	bl	8006f98 <lv_obj_get_style_prop>
    if(opa < LV_OPA_MAX) {
 8003e72:	b2c3      	uxtb	r3, r0
 8003e74:	2bfc      	cmp	r3, #252	; 0xfc
 8003e76:	d80b      	bhi.n	8003e90 <lv_obj_event+0x478>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8003e78:	f89d 001e 	ldrb.w	r0, [sp, #30]
 8003e7c:	4358      	muls	r0, r3
 8003e7e:	1200      	asrs	r0, r0, #8
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8003e80:	4343      	muls	r3, r0
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8003e82:	f88d 001e 	strb.w	r0, [sp, #30]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8003e8c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP ) {
 8003e90:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8003e94:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d020      	beq.n	8003ee4 <lv_obj_event+0x4cc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8003ea2:	2260      	movs	r2, #96	; 0x60
 8003ea4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f003 f875 	bl	8006f98 <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8003eae:	f8ad 0014 	strh.w	r0, [sp, #20]
    if(lv_area_get_size(&hor_area) > 0) lv_draw_rect(&hor_area, clip_area, &draw_dsc);
 8003eb2:	a801      	add	r0, sp, #4
 8003eb4:	f012 fde9 	bl	8016a8a <lv_area_get_size>
 8003eb8:	b120      	cbz	r0, 8003ec4 <lv_obj_event+0x4ac>
 8003eba:	aa05      	add	r2, sp, #20
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	a801      	add	r0, sp, #4
 8003ec0:	f008 fc1c 	bl	800c6fc <lv_draw_rect>
    if(lv_area_get_size(&ver_area) > 0) lv_draw_rect(&ver_area, clip_area, &draw_dsc);
 8003ec4:	a803      	add	r0, sp, #12
 8003ec6:	f012 fde0 	bl	8016a8a <lv_area_get_size>
 8003eca:	b158      	cbz	r0, 8003ee4 <lv_obj_event+0x4cc>
 8003ecc:	aa05      	add	r2, sp, #20
 8003ece:	4631      	mov	r1, r6
 8003ed0:	a803      	add	r0, sp, #12
 8003ed2:	f008 fc13 	bl	800c6fc <lv_draw_rect>
 8003ed6:	e005      	b.n	8003ee4 <lv_obj_event+0x4cc>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8003ed8:	a803      	add	r0, sp, #12
 8003eda:	f012 fdd6 	bl	8016a8a <lv_area_get_size>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f47f af60 	bne.w	8003da4 <lv_obj_event+0x38c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8003ee4:	2261      	movs	r2, #97	; 0x61
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f003 f855 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8003eee:	b128      	cbz	r0, 8003efc <lv_obj_event+0x4e4>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8003ef0:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8003ef4:	f007 ff28 	bl	800bd48 <lv_draw_mask_remove_custom>
            lv_mem_buf_release(param);
 8003ef8:	f013 fa52 	bl	80173a0 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8003efc:	2234      	movs	r2, #52	; 0x34
 8003efe:	2100      	movs	r1, #0
 8003f00:	4620      	mov	r0, r4
 8003f02:	f003 f849 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8003f06:	2800      	cmp	r0, #0
 8003f08:	f43f adb2 	beq.w	8003a70 <lv_obj_event+0x58>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8003f0c:	2700      	movs	r7, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 8003f0e:	a805      	add	r0, sp, #20
 8003f10:	f008 fbd2 	bl	800c6b8 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8003f14:	aa05      	add	r2, sp, #20
 8003f16:	4639      	mov	r1, r7
 8003f18:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8003f1a:	f88d 701e 	strb.w	r7, [sp, #30]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8003f1e:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8003f22:	f88d 7046 	strb.w	r7, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8003f26:	f000 f933 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8003f2a:	4639      	mov	r1, r7
 8003f2c:	f640 020a 	movw	r2, #2058	; 0x80a
 8003f30:	4620      	mov	r0, r4
 8003f32:	f003 f831 	bl	8006f98 <lv_obj_get_style_prop>
 8003f36:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f640 020b 	movw	r2, #2059	; 0x80b
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f003 f82a 	bl	8006f98 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8003f44:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->y2 = src->y2;
 8003f48:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
            coords.x1 -= w;
 8003f4c:	b2ab      	uxth	r3, r5
 8003f4e:	8aa1      	ldrh	r1, [r4, #20]
            coords.y1 -= h;
 8003f50:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8003f52:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
            coords.x1 -= w;
 8003f56:	1ac9      	subs	r1, r1, r3
            coords.y1 -= h;
 8003f58:	1a12      	subs	r2, r2, r0
            coords.y2 += h;
 8003f5a:	4438      	add	r0, r7
            coords.x2 += w;
 8003f5c:	4463      	add	r3, ip
            coords.x1 -= w;
 8003f5e:	f8ad 100c 	strh.w	r1, [sp, #12]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003f62:	4631      	mov	r1, r6
            coords.y1 -= h;
 8003f64:	f8ad 200e 	strh.w	r2, [sp, #14]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003f68:	aa05      	add	r2, sp, #20
            coords.y2 += h;
 8003f6a:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003f6e:	a803      	add	r0, sp, #12
            coords.x2 += w;
 8003f70:	f8ad 3010 	strh.w	r3, [sp, #16]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8003f74:	f008 fbc2 	bl	800c6fc <lv_draw_rect>
 8003f78:	e57a      	b.n	8003a70 <lv_obj_event+0x58>
            dsc->border_opa = LV_OPA_TRANSP;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8003f80:	e746      	b.n	8003e10 <lv_obj_event+0x3f8>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8003f88:	e76c      	b.n	8003e64 <lv_obj_event+0x44c>
	...

08003f8c <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8003f8c:	6883      	ldr	r3, [r0, #8]
{
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 8003f92:	b99b      	cbnz	r3, 8003fbc <lv_obj_allocate_spec_attr+0x30>
        x++;
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <lv_obj_allocate_spec_attr+0x34>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8003f96:	201c      	movs	r0, #28
        x++;
 8003f98:	6813      	ldr	r3, [r2, #0]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8003f9e:	f013 fb73 	bl	8017688 <lv_mem_alloc>
 8003fa2:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8003fa4:	b900      	cbnz	r0, 8003fa8 <lv_obj_allocate_spec_attr+0x1c>
 8003fa6:	e7fe      	b.n	8003fa6 <lv_obj_allocate_spec_attr+0x1a>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8003fa8:	211c      	movs	r1, #28
 8003faa:	f013 fbeb 	bl	8017784 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8003fae:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8003fb0:	8b13      	ldrh	r3, [r2, #24]
 8003fb2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8003fb6:	f043 0303 	orr.w	r3, r3, #3
 8003fba:	8313      	strh	r3, [r2, #24]
}
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000305c 	.word	0x2000305c

08003fc4 <lv_obj_check_type>:
    if(obj == NULL) return false;
 8003fc4:	b118      	cbz	r0, 8003fce <lv_obj_check_type+0xa>
    return obj->class_p == class_p ? true : false;
 8003fc6:	6800      	ldr	r0, [r0, #0]
 8003fc8:	1a43      	subs	r3, r0, r1
 8003fca:	4258      	negs	r0, r3
 8003fcc:	4158      	adcs	r0, r3
}
 8003fce:	4770      	bx	lr

08003fd0 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8003fd0:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 8003fd2:	6805      	ldr	r5, [r0, #0]
{
 8003fd4:	4604      	mov	r4, r0

    if(obj->class_p->base_class) {
 8003fd6:	682b      	ldr	r3, [r5, #0]
 8003fd8:	b113      	cbz	r3, 8003fe0 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8003fda:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8003fdc:	f7ff fff8 	bl	8003fd0 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8003fe0:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8003fe2:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8003fe4:	b123      	cbz	r3, 8003ff0 <lv_obj_construct+0x20>
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	4628      	mov	r0, r5
}
 8003fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8003fee:	4718      	bx	r3
}
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ff4 <lv_obj_class_create_obj>:
{
 8003ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8003ff6:	4603      	mov	r3, r0
{
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	460d      	mov	r5, r1
    while(base && base->instance_size == 0) base = base->base_class;
 8003ffc:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <lv_obj_class_create_obj+0xd4>)
 8003ffe:	b13b      	cbz	r3, 8004010 <lv_obj_class_create_obj+0x1c>
 8004000:	6999      	ldr	r1, [r3, #24]
 8004002:	420a      	tst	r2, r1
 8004004:	d002      	beq.n	800400c <lv_obj_class_create_obj+0x18>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 8004006:	f3c1 110f 	ubfx	r1, r1, #4, #16
 800400a:	e002      	b.n	8004012 <lv_obj_class_create_obj+0x1e>
    while(base && base->instance_size == 0) base = base->base_class;
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	e7f6      	b.n	8003ffe <lv_obj_class_create_obj+0xa>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8004010:	4619      	mov	r1, r3
    lv_obj_t * obj = lv_mem_alloc(s);
 8004012:	4608      	mov	r0, r1
 8004014:	9101      	str	r1, [sp, #4]
 8004016:	f013 fb37 	bl	8017688 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 800401a:	9901      	ldr	r1, [sp, #4]
 800401c:	4604      	mov	r4, r0
 800401e:	b918      	cbnz	r0, 8004028 <lv_obj_class_create_obj+0x34>
 8004020:	2400      	movs	r4, #0
}
 8004022:	4620      	mov	r0, r4
 8004024:	b002      	add	sp, #8
 8004026:	bd70      	pop	{r4, r5, r6, pc}
    lv_memset_00(obj, s);
 8004028:	f013 fbac 	bl	8017784 <lv_memset_00>
    obj->parent = parent;
 800402c:	e9c4 6500 	strd	r6, r5, [r4]
    if(parent == NULL) {
 8004030:	bb45      	cbnz	r5, 8004084 <lv_obj_class_create_obj+0x90>
        lv_disp_t * disp = lv_disp_get_default();
 8004032:	f012 fa61 	bl	80164f8 <lv_disp_get_default>
        if(!disp) {
 8004036:	4605      	mov	r5, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	d0f1      	beq.n	8004020 <lv_obj_class_create_obj+0x2c>
        if(disp->screens == NULL) {
 800403c:	68c0      	ldr	r0, [r0, #12]
 800403e:	b998      	cbnz	r0, 8004068 <lv_obj_class_create_obj+0x74>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004040:	2004      	movs	r0, #4
 8004042:	f013 fb21 	bl	8017688 <lv_mem_alloc>
            disp->screen_cnt = 1;
 8004046:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004048:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 800404a:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 800404c:	626b      	str	r3, [r5, #36]	; 0x24
        obj->coords.x1 = 0;
 800404e:	2500      	movs	r5, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004050:	4628      	mov	r0, r5
        obj->coords.x1 = 0;
 8004052:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004054:	f012 fa56 	bl	8016504 <lv_disp_get_hor_res>
 8004058:	3801      	subs	r0, #1
 800405a:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 800405c:	4628      	mov	r0, r5
 800405e:	f012 fa61 	bl	8016524 <lv_disp_get_ver_res>
 8004062:	3801      	subs	r0, #1
 8004064:	8360      	strh	r0, [r4, #26]
 8004066:	e7dc      	b.n	8004022 <lv_obj_class_create_obj+0x2e>
            disp->screen_cnt++;
 8004068:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800406a:	3101      	adds	r1, #1
 800406c:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 800406e:	0089      	lsls	r1, r1, #2
 8004070:	f013 fb20 	bl	80176b4 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 8004074:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8004076:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8004078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800407c:	3b01      	subs	r3, #1
 800407e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8004082:	e7e4      	b.n	800404e <lv_obj_class_create_obj+0x5a>
        if(parent->spec_attr == NULL) {
 8004084:	68ab      	ldr	r3, [r5, #8]
 8004086:	b913      	cbnz	r3, 800408e <lv_obj_class_create_obj+0x9a>
            lv_obj_allocate_spec_attr(parent);
 8004088:	4628      	mov	r0, r5
 800408a:	f7ff ff7f 	bl	8003f8c <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 800408e:	68ae      	ldr	r6, [r5, #8]
 8004090:	6830      	ldr	r0, [r6, #0]
 8004092:	b948      	cbnz	r0, 80040a8 <lv_obj_class_create_obj+0xb4>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8004094:	2004      	movs	r0, #4
 8004096:	f013 faf7 	bl	8017688 <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 800409a:	68ab      	ldr	r3, [r5, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 800409c:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 80040a2:	2201      	movs	r2, #1
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e7bc      	b.n	8004022 <lv_obj_class_create_obj+0x2e>
            parent->spec_attr->child_cnt++;
 80040a8:	6871      	ldr	r1, [r6, #4]
 80040aa:	3101      	adds	r1, #1
 80040ac:	6071      	str	r1, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children, sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 80040ae:	0089      	lsls	r1, r1, #2
 80040b0:	f013 fb00 	bl	80176b4 <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 80040b4:	68aa      	ldr	r2, [r5, #8]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children, sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 80040b6:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 80040b8:	6853      	ldr	r3, [r2, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c0:	3b01      	subs	r3, #1
 80040c2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80040c6:	e7ac      	b.n	8004022 <lv_obj_class_create_obj+0x2e>
 80040c8:	000ffff0 	.word	0x000ffff0

080040cc <_lv_obj_destructor>:
{
 80040cc:	b510      	push	{r4, lr}
 80040ce:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 80040d0:	6820      	ldr	r0, [r4, #0]
 80040d2:	6883      	ldr	r3, [r0, #8]
 80040d4:	b10b      	cbz	r3, 80040da <_lv_obj_destructor+0xe>
 80040d6:	4621      	mov	r1, r4
 80040d8:	4798      	blx	r3
    if(obj->class_p->base_class) {
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b10b      	cbz	r3, 80040e4 <_lv_obj_destructor+0x18>
        obj->class_p = obj->class_p->base_class;
 80040e0:	6023      	str	r3, [r4, #0]
        _lv_obj_destructor(obj);
 80040e2:	e7f5      	b.n	80040d0 <_lv_obj_destructor+0x4>
}
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 80040e6:	6800      	ldr	r0, [r0, #0]
 80040e8:	b130      	cbz	r0, 80040f8 <lv_obj_is_editable+0x12>
 80040ea:	7e03      	ldrb	r3, [r0, #24]
 80040ec:	f013 0303 	ands.w	r3, r3, #3
 80040f0:	d0f9      	beq.n	80040e6 <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 80040f2:	3b01      	subs	r3, #1
 80040f4:	4258      	negs	r0, r3
 80040f6:	4158      	adcs	r0, r3
}
 80040f8:	4770      	bx	lr

080040fa <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	b130      	cbz	r0, 800410c <lv_obj_is_group_def+0x12>
 80040fe:	7e03      	ldrb	r3, [r0, #24]
 8004100:	f013 030c 	ands.w	r3, r3, #12
 8004104:	d0f9      	beq.n	80040fa <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8004106:	3b04      	subs	r3, #4
 8004108:	4258      	negs	r0, r3
 800410a:	4158      	adcs	r0, r3
}
 800410c:	4770      	bx	lr

0800410e <lv_obj_class_init_obj>:
{
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 8004112:	f000 fc2e 	bl	8004972 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8004116:	2000      	movs	r0, #0
 8004118:	f002 ff38 	bl	8006f8c <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 800411c:	4620      	mov	r0, r4
 800411e:	f004 f931 	bl	8008384 <lv_theme_apply>
    lv_obj_construct(obj);
 8004122:	4620      	mov	r0, r4
 8004124:	f7ff ff54 	bl	8003fd0 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 8004128:	2001      	movs	r0, #1
 800412a:	f002 ff2f 	bl	8006f8c <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800412e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004132:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8004136:	4620      	mov	r0, r4
 8004138:	f002 fcaa 	bl	8006a90 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 800413c:	4620      	mov	r0, r4
 800413e:	f000 fd3e 	bl	8004bbe <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 8004142:	f7fd fdd5 	bl	8001cf0 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8004146:	4602      	mov	r2, r0
 8004148:	b138      	cbz	r0, 800415a <lv_obj_class_init_obj+0x4c>
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff ffd5 	bl	80040fa <lv_obj_is_group_def>
 8004150:	b118      	cbz	r0, 800415a <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 8004152:	4621      	mov	r1, r4
 8004154:	4610      	mov	r0, r2
 8004156:	f7fd fdfd 	bl	8001d54 <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800415a:	4620      	mov	r0, r4
 800415c:	f003 fa66 	bl	800762c <lv_obj_get_parent>
    if(parent) {
 8004160:	b140      	cbz	r0, 8004174 <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8004162:	4622      	mov	r2, r4
 8004164:	2122      	movs	r1, #34	; 0x22
 8004166:	f7fd fcc7 	bl	8001af8 <lv_event_send>
        lv_obj_invalidate(obj);
 800416a:	4620      	mov	r0, r4
}
 800416c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_invalidate(obj);
 8004170:	f000 bdea 	b.w	8004d48 <lv_obj_invalidate>
}
 8004174:	bd10      	pop	{r4, pc}

08004176 <lv_obj_get_style_opa>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004176:	f240 4262 	movw	r2, #1122	; 0x462
{
 800417a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800417c:	f002 ff0c 	bl	8006f98 <lv_obj_get_style_prop>
}
 8004180:	b2c0      	uxtb	r0, r0
 8004182:	bd08      	pop	{r3, pc}

08004184 <lv_obj_get_style_blend_mode>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8004184:	2268      	movs	r2, #104	; 0x68
{
 8004186:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8004188:	f002 ff06 	bl	8006f98 <lv_obj_get_style_prop>
}
 800418c:	b2c0      	uxtb	r0, r0
 800418e:	bd08      	pop	{r3, pc}

08004190 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004194:	4614      	mov	r4, r2
 8004196:	460d      	mov	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004198:	2260      	movs	r2, #96	; 0x60
 800419a:	4606      	mov	r6, r0
 800419c:	f002 fefc 	bl	8006f98 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 80041a0:	8020      	strh	r0, [r4, #0]

    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 80041a2:	b1bd      	cbz	r5, 80041d4 <lv_obj_init_draw_rect_dsc+0x44>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7ff ffe5 	bl	8004176 <lv_obj_get_style_opa>
 80041ac:	4680      	mov	r8, r0
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80041ae:	4629      	mov	r1, r5
 80041b0:	4630      	mov	r0, r6
 80041b2:	f7ff ffe0 	bl	8004176 <lv_obj_get_style_opa>
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 80041b6:	2802      	cmp	r0, #2
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80041b8:	4607      	mov	r7, r0
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 80041ba:	d902      	bls.n	80041c2 <lv_obj_init_draw_rect_dsc+0x32>
 80041bc:	f1b8 0f02 	cmp.w	r8, #2
 80041c0:	d80b      	bhi.n	80041da <lv_obj_init_draw_rect_dsc+0x4a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 80041c2:	2300      	movs	r3, #0
 80041c4:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 80041c6:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80041c8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = LV_OPA_TRANSP;
 80041cc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
               }
            }
        }
    }
#endif
}
 80041d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 80041d4:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80041d8:	e7e9      	b.n	80041ae <lv_obj_init_draw_rect_dsc+0x1e>
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80041da:	4629      	mov	r1, r5
 80041dc:	4630      	mov	r0, r6
 80041de:	f7ff ffd1 	bl	8004184 <lv_obj_get_style_blend_mode>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80041e2:	7aa3      	ldrb	r3, [r4, #10]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80041e4:	70a0      	strb	r0, [r4, #2]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 80041e6:	b363      	cbz	r3, 8004242 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80041e8:	2221      	movs	r2, #33	; 0x21
 80041ea:	4629      	mov	r1, r5
 80041ec:	4630      	mov	r0, r6
 80041ee:	f002 fed3 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80041f2:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80041f4:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80041f6:	72a0      	strb	r0, [r4, #10]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80041f8:	d923      	bls.n	8004242 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR_FILTERED);
 80041fa:	f244 0220 	movw	r2, #16416	; 0x4020
 80041fe:	4629      	mov	r1, r5
 8004200:	4630      	mov	r0, r6
 8004202:	f002 fec9 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8004206:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8004208:	80a0      	strh	r0, [r4, #4]
 800420a:	4629      	mov	r1, r5
 800420c:	4630      	mov	r0, r6
 800420e:	f002 fec3 	bl	8006f98 <lv_obj_get_style_prop>
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 8004212:	7ae3      	ldrb	r3, [r4, #11]
 8004214:	f360 0302 	bfi	r3, r0, #0, #3
 8004218:	72e3      	strb	r3, [r4, #11]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 800421a:	075b      	lsls	r3, r3, #29
 800421c:	d011      	beq.n	8004242 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR);
 800421e:	2222      	movs	r2, #34	; 0x22
 8004220:	4629      	mov	r1, r5
 8004222:	4630      	mov	r0, r6
 8004224:	f002 feb8 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8004228:	2224      	movs	r2, #36	; 0x24
 800422a:	4629      	mov	r1, r5
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 800422c:	80e0      	strh	r0, [r4, #6]
 800422e:	4630      	mov	r0, r6
 8004230:	f002 feb2 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8004234:	2225      	movs	r2, #37	; 0x25
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8004236:	7220      	strb	r0, [r4, #8]
 8004238:	4629      	mov	r1, r5
 800423a:	4630      	mov	r0, r6
 800423c:	f002 feac 	bl	8006f98 <lv_obj_get_style_prop>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8004240:	7260      	strb	r0, [r4, #9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004242:	f241 0232 	movw	r2, #4146	; 0x1032
 8004246:	4629      	mov	r1, r5
 8004248:	4630      	mov	r0, r6
 800424a:	f002 fea5 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800424e:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8004250:	83a0      	strh	r0, [r4, #28]
    if(draw_dsc->border_width) {
 8004252:	b1d0      	cbz	r0, 800428a <lv_obj_init_draw_rect_dsc+0xfa>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8004254:	7fa3      	ldrb	r3, [r4, #30]
 8004256:	b1c3      	cbz	r3, 800428a <lv_obj_init_draw_rect_dsc+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004258:	2231      	movs	r2, #49	; 0x31
 800425a:	4629      	mov	r1, r5
 800425c:	4630      	mov	r0, r6
 800425e:	f002 fe9b 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004262:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004264:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8004266:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004268:	d90f      	bls.n	800428a <lv_obj_init_draw_rect_dsc+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800426a:	2233      	movs	r2, #51	; 0x33
 800426c:	4629      	mov	r1, r5
 800426e:	4630      	mov	r0, r6
 8004270:	f002 fe92 	bl	8006f98 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8004274:	7fe3      	ldrb	r3, [r4, #31]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR_FILTERED);
 8004276:	f244 0230 	movw	r2, #16432	; 0x4030
 800427a:	4629      	mov	r1, r5
 800427c:	f360 0345 	bfi	r3, r0, #1, #5
 8004280:	4630      	mov	r0, r6
 8004282:	77e3      	strb	r3, [r4, #31]
 8004284:	f002 fe88 	bl	8006f98 <lv_obj_get_style_prop>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8004288:	8360      	strh	r0, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800428a:	f640 023a 	movw	r2, #2106	; 0x83a
 800428e:	4629      	mov	r1, r5
 8004290:	4630      	mov	r0, r6
 8004292:	f002 fe81 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004296:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8004298:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->outline_width) {
 800429a:	b1d0      	cbz	r0, 80042d2 <lv_obj_init_draw_rect_dsc+0x142>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 800429c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80042a0:	b1bb      	cbz	r3, 80042d2 <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80042a2:	f640 023c 	movw	r2, #2108	; 0x83c
 80042a6:	4629      	mov	r1, r5
 80042a8:	4630      	mov	r0, r6
 80042aa:	f002 fe75 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80042ae:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80042b0:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80042b2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80042b6:	d90c      	bls.n	80042d2 <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80042b8:	f640 023d 	movw	r2, #2109	; 0x83d
 80042bc:	4629      	mov	r1, r5
 80042be:	4630      	mov	r0, r6
 80042c0:	f002 fe6a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR);
 80042c4:	223b      	movs	r2, #59	; 0x3b
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80042c6:	84a0      	strh	r0, [r4, #36]	; 0x24
 80042c8:	4629      	mov	r1, r5
 80042ca:	4630      	mov	r0, r6
 80042cc:	f002 fe64 	bl	8006f98 <lv_obj_get_style_prop>
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 80042d0:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 80042d2:	7da3      	ldrb	r3, [r4, #22]
 80042d4:	b313      	cbz	r3, 800431c <lv_obj_init_draw_rect_dsc+0x18c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 80042d6:	2226      	movs	r2, #38	; 0x26
 80042d8:	4629      	mov	r1, r5
 80042da:	4630      	mov	r0, r6
 80042dc:	f002 fe5c 	bl	8006f98 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 80042e0:	60e0      	str	r0, [r4, #12]
        if(draw_dsc->bg_img_src) {
 80042e2:	b1d8      	cbz	r0, 800431c <lv_obj_init_draw_rect_dsc+0x18c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 80042e4:	2227      	movs	r2, #39	; 0x27
 80042e6:	4629      	mov	r1, r5
 80042e8:	4630      	mov	r0, r6
 80042ea:	f002 fe55 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80042ee:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 80042f0:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 80042f2:	75a0      	strb	r0, [r4, #22]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 80042f4:	d912      	bls.n	800431c <lv_obj_init_draw_rect_dsc+0x18c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 80042f6:	68e0      	ldr	r0, [r4, #12]
 80042f8:	f005 ff08 	bl	800a10c <lv_img_src_get_type>
 80042fc:	2802      	cmp	r0, #2
 80042fe:	d169      	bne.n	80043d4 <lv_obj_init_draw_rect_dsc+0x244>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8004300:	f241 4259 	movw	r2, #5209	; 0x1459
 8004304:	4629      	mov	r1, r5
 8004306:	4630      	mov	r0, r6
 8004308:	f002 fe46 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 800430c:	f240 4257 	movw	r2, #1111	; 0x457
                    draw_dsc->bg_img_symbol_font= lv_obj_get_style_text_font(obj, part);
 8004310:	6120      	str	r0, [r4, #16]
 8004312:	4629      	mov	r1, r5
 8004314:	4630      	mov	r0, r6
 8004316:	f002 fe3f 	bl	8006f98 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color(obj, part);
 800431a:	82a0      	strh	r0, [r4, #20]
    if(draw_dsc->shadow_opa) {
 800431c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004320:	b39b      	cbz	r3, 800438a <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004322:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8004326:	4629      	mov	r1, r5
 8004328:	4630      	mov	r0, r6
 800432a:	f002 fe35 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800432e:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8004330:	8560      	strh	r0, [r4, #42]	; 0x2a
        if(draw_dsc->shadow_width) {
 8004332:	b350      	cbz	r0, 800438a <lv_obj_init_draw_rect_dsc+0x1fa>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8004334:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004338:	2b02      	cmp	r3, #2
 800433a:	d926      	bls.n	800438a <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 800433c:	f640 0245 	movw	r2, #2117	; 0x845
 8004340:	4629      	mov	r1, r5
 8004342:	4630      	mov	r0, r6
 8004344:	f002 fe28 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004348:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800434a:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 800434c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8004350:	d91b      	bls.n	800438a <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004352:	f640 0241 	movw	r2, #2113	; 0x841
 8004356:	4629      	mov	r1, r5
 8004358:	4630      	mov	r0, r6
 800435a:	f002 fe1d 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 800435e:	f640 0242 	movw	r2, #2114	; 0x842
 8004362:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8004364:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8004366:	4630      	mov	r0, r6
 8004368:	f002 fe16 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800436c:	f640 0243 	movw	r2, #2115	; 0x843
 8004370:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8004372:	85e0      	strh	r0, [r4, #46]	; 0x2e
 8004374:	4630      	mov	r0, r6
 8004376:	f002 fe0f 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR_FILTERED);
 800437a:	f244 0244 	movw	r2, #16452	; 0x4044
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 800437e:	8620      	strh	r0, [r4, #48]	; 0x30
 8004380:	4629      	mov	r1, r5
 8004382:	4630      	mov	r0, r6
 8004384:	f002 fe08 	bl	8006f98 <lv_obj_get_style_prop>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8004388:	8520      	strh	r0, [r4, #40]	; 0x28
    if(main_opa < LV_OPA_MAX) {
 800438a:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
 800438e:	d837      	bhi.n	8004400 <lv_obj_init_draw_rect_dsc+0x270>
        opa = (uint16_t)((uint16_t) main_opa * opa) >> 8;
 8004390:	fb18 f707 	smulbb	r7, r8, r7
 8004394:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 8004398:	b2bf      	uxth	r7, r7
 800439a:	7aa3      	ldrb	r3, [r4, #10]
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 800439c:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 80043a0:	fb13 f307 	smulbb	r3, r3, r7
 80043a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80043a8:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa) >> 8;
 80043aa:	7fa3      	ldrb	r3, [r4, #30]
 80043ac:	fb13 f307 	smulbb	r3, r3, r7
 80043b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80043b4:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 80043b6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80043ba:	fb13 f307 	smulbb	r3, r3, r7
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80043be:	fb10 f707 	smulbb	r7, r0, r7
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 80043c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80043c6:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 80043ca:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80043ce:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
 80043d2:	e6fd      	b.n	80041d0 <lv_obj_init_draw_rect_dsc+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR);
 80043d4:	2228      	movs	r2, #40	; 0x28
 80043d6:	4629      	mov	r1, r5
 80043d8:	4630      	mov	r0, r6
 80043da:	f002 fddd 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 80043de:	2229      	movs	r2, #41	; 0x29
 80043e0:	4629      	mov	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor(obj, part);
 80043e2:	82a0      	strh	r0, [r4, #20]
 80043e4:	4630      	mov	r0, r6
 80043e6:	f002 fdd7 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 80043ea:	222a      	movs	r2, #42	; 0x2a
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 80043ec:	75e0      	strb	r0, [r4, #23]
 80043ee:	4629      	mov	r1, r5
 80043f0:	4630      	mov	r0, r6
 80043f2:	f002 fdd1 	bl	8006f98 <lv_obj_get_style_prop>
    return (bool)v.num;
 80043f6:	3800      	subs	r0, #0
 80043f8:	bf18      	it	ne
 80043fa:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 80043fc:	7620      	strb	r0, [r4, #24]
 80043fe:	e78d      	b.n	800431c <lv_obj_init_draw_rect_dsc+0x18c>
    if(opa < LV_OPA_MAX) {
 8004400:	2ffc      	cmp	r7, #252	; 0xfc
 8004402:	f63f aee5 	bhi.w	80041d0 <lv_obj_init_draw_rect_dsc+0x40>
 8004406:	e7c7      	b.n	8004398 <lv_obj_init_draw_rect_dsc+0x208>

08004408 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 800440c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8004410:	4605      	mov	r5, r0
 8004412:	460e      	mov	r6, r1
 8004414:	f002 fdc0 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004418:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800441a:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 800441c:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800441e:	d952      	bls.n	80044c6 <lv_obj_init_draw_label_dsc+0xbe>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004420:	4631      	mov	r1, r6
 8004422:	4628      	mov	r0, r5
 8004424:	f7ff fea7 	bl	8004176 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 8004428:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 800442a:	bf9f      	itttt	ls
 800442c:	7ea3      	ldrbls	r3, [r4, #26]
 800442e:	fb13 f000 	smulbbls	r0, r3, r0
 8004432:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004436:	76a0      	strbls	r0, [r4, #26]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8004438:	7ea3      	ldrb	r3, [r4, #26]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d943      	bls.n	80044c6 <lv_obj_init_draw_label_dsc+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 800443e:	f244 4257 	movw	r2, #17495	; 0x4457
 8004442:	4631      	mov	r1, r6
 8004444:	4628      	mov	r0, r5
 8004446:	f002 fda7 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800444a:	f241 425a 	movw	r2, #5210	; 0x145a
 800444e:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8004450:	81a0      	strh	r0, [r4, #12]
 8004452:	4628      	mov	r0, r5
 8004454:	f002 fda0 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8004458:	f241 425b 	movw	r2, #5211	; 0x145b
 800445c:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800445e:	82a0      	strh	r0, [r4, #20]
 8004460:	4628      	mov	r0, r5
 8004462:	f002 fd99 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8004466:	f240 425c 	movw	r2, #1116	; 0x45c
 800446a:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 800446c:	8260      	strh	r0, [r4, #18]
 800446e:	4628      	mov	r0, r5
 8004470:	f002 fd92 	bl	8006f98 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8004474:	7f63      	ldrb	r3, [r4, #29]
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004476:	4631      	mov	r1, r6
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8004478:	f360 0384 	bfi	r3, r0, #2, #3
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800447c:	4628      	mov	r0, r5
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 800447e:	7763      	strb	r3, [r4, #29]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004480:	f7ff fe80 	bl	8004184 <lv_obj_get_style_blend_mode>
 8004484:	7f63      	ldrb	r3, [r4, #29]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8004486:	f241 4259 	movw	r2, #5209	; 0x1459
 800448a:	4631      	mov	r1, r6
 800448c:	f360 1347 	bfi	r3, r0, #5, #3
 8004490:	4628      	mov	r0, r5
 8004492:	7763      	strb	r3, [r4, #29]
 8004494:	f002 fd80 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8004498:	f241 425d 	movw	r2, #5213	; 0x145d
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 800449c:	6020      	str	r0, [r4, #0]
 800449e:	4631      	mov	r1, r6
 80044a0:	4628      	mov	r0, r5
 80044a2:	f002 fd79 	bl	8006f98 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80044a6:	7f62      	ldrb	r2, [r4, #29]
 80044a8:	f360 0201 	bfi	r2, r0, #0, #2
    if(draw_dsc->align == LV_TEXT_ALIGN_AUTO) {
 80044ac:	b2d3      	uxtb	r3, r2
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80044ae:	7762      	strb	r2, [r4, #29]
    if(draw_dsc->align == LV_TEXT_ALIGN_AUTO) {
 80044b0:	0792      	lsls	r2, r2, #30
 80044b2:	d108      	bne.n	80044c6 <lv_obj_init_draw_label_dsc+0xbe>
        if(draw_dsc->bidi_dir == LV_BASE_DIR_RTL) draw_dsc->align = LV_TEXT_ALIGN_RIGHT;
 80044b4:	7ee2      	ldrb	r2, [r4, #27]
 80044b6:	2a01      	cmp	r2, #1
        else draw_dsc->align = LV_TEXT_ALIGN_LEFT;
 80044b8:	bf16      	itet	ne
 80044ba:	2201      	movne	r2, #1
        if(draw_dsc->bidi_dir == LV_BASE_DIR_RTL) draw_dsc->align = LV_TEXT_ALIGN_RIGHT;
 80044bc:	f043 0303 	orreq.w	r3, r3, #3
        else draw_dsc->align = LV_TEXT_ALIGN_LEFT;
 80044c0:	f362 0301 	bfine	r3, r2, #0, #2
 80044c4:	7763      	strb	r3, [r4, #29]
    }
}
 80044c6:	bd70      	pop	{r4, r5, r6, pc}

080044c8 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80044cc:	2246      	movs	r2, #70	; 0x46
 80044ce:	4605      	mov	r5, r0
 80044d0:	460e      	mov	r6, r1
 80044d2:	f002 fd61 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80044d6:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80044d8:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 80044da:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80044dc:	d93b      	bls.n	8004556 <lv_obj_init_draw_img_dsc+0x8e>

    lv_opa_t opa_scale = lv_obj_get_style_opa(obj, part);
 80044de:	4631      	mov	r1, r6
 80044e0:	4628      	mov	r0, r5
 80044e2:	f7ff fe48 	bl	8004176 <lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 80044e6:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 80044e8:	bf9f      	itttt	ls
 80044ea:	7ae3      	ldrbls	r3, [r4, #11]
 80044ec:	fb13 f000 	smulbbls	r0, r3, r0
 80044f0:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 80044f4:	72e0      	strbls	r0, [r4, #11]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80044f6:	7ae3      	ldrb	r3, [r4, #11]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d92c      	bls.n	8004556 <lv_obj_init_draw_img_dsc+0x8e>

    draw_dsc->angle = 0;
 80044fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	6023      	str	r3, [r4, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004506:	8b2b      	ldrh	r3, [r5, #24]
 8004508:	8aaa      	ldrh	r2, [r5, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	1a9b      	subs	r3, r3, r2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 800450e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004512:	fa02 f383 	sxtah	r3, r2, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004516:	8aea      	ldrh	r2, [r5, #22]
 8004518:	105b      	asrs	r3, r3, #1
 800451a:	80a3      	strh	r3, [r4, #4]
 800451c:	8b6b      	ldrh	r3, [r5, #26]
 800451e:	3301      	adds	r3, #1
 8004520:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8004522:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004526:	fa02 f383 	sxtah	r3, r2, r3
 800452a:	2248      	movs	r2, #72	; 0x48
 800452c:	105b      	asrs	r3, r3, #1
 800452e:	80e3      	strh	r3, [r4, #6]
 8004530:	f002 fd32 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004534:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 8004536:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8004538:	b128      	cbz	r0, 8004546 <lv_obj_init_draw_img_dsc+0x7e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR);
 800453a:	2247      	movs	r2, #71	; 0x47
 800453c:	4631      	mov	r1, r6
 800453e:	4628      	mov	r0, r5
 8004540:	f002 fd2a 	bl	8006f98 <lv_obj_get_style_prop>
        draw_dsc->recolor = lv_obj_get_style_img_recolor(obj, part);
 8004544:	8120      	strh	r0, [r4, #8]
    }
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	f7ff fe1b 	bl	8004184 <lv_obj_get_style_blend_mode>
 800454e:	7b23      	ldrb	r3, [r4, #12]
 8004550:	f360 0303 	bfi	r3, r0, #0, #4
 8004554:	7323      	strb	r3, [r4, #12]
#endif
}
 8004556:	bd70      	pop	{r4, r5, r6, pc}

08004558 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4614      	mov	r4, r2
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 800455c:	f640 0249 	movw	r2, #2121	; 0x849
 8004560:	4605      	mov	r5, r0
 8004562:	460e      	mov	r6, r1
 8004564:	f002 fd18 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004568:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 800456a:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 800456c:	2800      	cmp	r0, #0
 800456e:	d040      	beq.n	80045f2 <lv_obj_init_draw_line_dsc+0x9a>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_line_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 8004570:	224e      	movs	r2, #78	; 0x4e
 8004572:	4631      	mov	r1, r6
 8004574:	4628      	mov	r0, r5
 8004576:	f002 fd0f 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800457a:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800457c:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 800457e:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004580:	d937      	bls.n	80045f2 <lv_obj_init_draw_line_dsc+0x9a>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	f7ff fdf6 	bl	8004176 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 800458a:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 800458c:	bf9f      	itttt	ls
 800458e:	7a23      	ldrbls	r3, [r4, #8]
 8004590:	fb13 f000 	smulbbls	r0, r3, r0
 8004594:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004598:	7220      	strbls	r0, [r4, #8]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800459a:	7a23      	ldrb	r3, [r4, #8]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d928      	bls.n	80045f2 <lv_obj_init_draw_line_dsc+0x9a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR);
 80045a0:	224d      	movs	r2, #77	; 0x4d
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	f002 fcf7 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 80045aa:	224a      	movs	r2, #74	; 0x4a

    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 80045ac:	8020      	strh	r0, [r4, #0]
 80045ae:	4631      	mov	r1, r6
 80045b0:	4628      	mov	r0, r5
 80045b2:	f002 fcf1 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80045b6:	b200      	sxth	r0, r0

    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 80045b8:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 80045ba:	b128      	cbz	r0, 80045c8 <lv_obj_init_draw_line_dsc+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 80045bc:	224b      	movs	r2, #75	; 0x4b
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	f002 fce9 	bl	8006f98 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 80045c6:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 80045c8:	224c      	movs	r2, #76	; 0x4c
 80045ca:	4631      	mov	r1, r6
 80045cc:	4628      	mov	r0, r5
 80045ce:	f002 fce3 	bl	8006f98 <lv_obj_get_style_prop>
    }

    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 80045d2:	7a63      	ldrb	r3, [r4, #9]
 80045d4:	f000 0001 	and.w	r0, r0, #1
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80045d8:	4631      	mov	r1, r6
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 80045da:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 80045de:	f360 03c3 	bfi	r3, r0, #3, #1
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80045e2:	4628      	mov	r0, r5
    draw_dsc->round_end = draw_dsc->round_start;
 80045e4:	7263      	strb	r3, [r4, #9]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80045e6:	f7ff fdcd 	bl	8004184 <lv_obj_get_style_blend_mode>
 80045ea:	7a63      	ldrb	r3, [r4, #9]
 80045ec:	f360 0301 	bfi	r3, r0, #0, #2
 80045f0:	7263      	strb	r3, [r4, #9]
#endif
}
 80045f2:	bd70      	pop	{r4, r5, r6, pc}

080045f4 <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4614      	mov	r4, r2
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80045f8:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80045fc:	4605      	mov	r5, r0
 80045fe:	460e      	mov	r6, r1
 8004600:	f002 fcca 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004604:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 8004606:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8004608:	b3a0      	cbz	r0, 8004674 <lv_obj_init_draw_arc_dsc+0x80>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_arc_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 800460a:	2253      	movs	r2, #83	; 0x53
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	f002 fcc2 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004614:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004616:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 8004618:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 800461a:	d92b      	bls.n	8004674 <lv_obj_init_draw_arc_dsc+0x80>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 800461c:	4631      	mov	r1, r6
 800461e:	4628      	mov	r0, r5
 8004620:	f7ff fda9 	bl	8004176 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 8004624:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 8004626:	bf9f      	itttt	ls
 8004628:	7a23      	ldrbls	r3, [r4, #8]
 800462a:	fb13 f000 	smulbbls	r0, r3, r0
 800462e:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004632:	7220      	strbls	r0, [r4, #8]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004634:	7a23      	ldrb	r3, [r4, #8]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d91c      	bls.n	8004674 <lv_obj_init_draw_arc_dsc+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR);
 800463a:	2252      	movs	r2, #82	; 0x52
 800463c:	4631      	mov	r1, r6
 800463e:	4628      	mov	r0, r5
 8004640:	f002 fcaa 	bl	8006f98 <lv_obj_get_style_prop>
}

static inline const void * lv_obj_get_style_arc_img_src(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 8004644:	2254      	movs	r2, #84	; 0x54
 8004646:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_arc_color(obj, part);
 8004648:	8020      	strh	r0, [r4, #0]
 800464a:	4628      	mov	r0, r5
 800464c:	f002 fca4 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8004650:	2251      	movs	r2, #81	; 0x51
 8004652:	4631      	mov	r1, r6
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 8004654:	6060      	str	r0, [r4, #4]
 8004656:	4628      	mov	r0, r5
 8004658:	f002 fc9e 	bl	8006f98 <lv_obj_get_style_prop>

    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 800465c:	7a63      	ldrb	r3, [r4, #9]

#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800465e:	4631      	mov	r1, r6
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004660:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004664:	4628      	mov	r0, r5
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004666:	7263      	strb	r3, [r4, #9]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004668:	f7ff fd8c 	bl	8004184 <lv_obj_get_style_blend_mode>
 800466c:	7a63      	ldrb	r3, [r4, #9]
 800466e:	f360 0301 	bfi	r3, r0, #0, #2
 8004672:	7263      	strb	r3, [r4, #9]
#endif
}
 8004674:	bd70      	pop	{r4, r5, r6, pc}

08004676 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8004676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004678:	f44f 6204 	mov.w	r2, #2112	; 0x840
 800467c:	4605      	mov	r5, r0
 800467e:	460e      	mov	r6, r1
 8004680:	f002 fc8a 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004684:	b207      	sxth	r7, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8004686:	bba7      	cbnz	r7, 80046f2 <lv_obj_calculate_ext_draw_size+0x7c>
    lv_coord_t s = 0;
 8004688:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800468a:	f640 023a 	movw	r2, #2106	; 0x83a
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	f002 fc81 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004696:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8004698:	b1a7      	cbz	r7, 80046c4 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 800469a:	f640 023c 	movw	r2, #2108	; 0x83c
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	f002 fc79 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80046a6:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 80046a8:	2802      	cmp	r0, #2
 80046aa:	d90b      	bls.n	80046c4 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80046ac:	f640 023d 	movw	r2, #2109	; 0x83d
 80046b0:	4631      	mov	r1, r6
 80046b2:	4628      	mov	r0, r5
 80046b4:	f002 fc70 	bl	8006f98 <lv_obj_get_style_prop>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 80046b8:	fa07 f080 	sxtah	r0, r7, r0
 80046bc:	4284      	cmp	r4, r0
 80046be:	bfb8      	it	lt
 80046c0:	4604      	movlt	r4, r0
 80046c2:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80046c4:	4631      	mov	r1, r6
 80046c6:	f640 020a 	movw	r2, #2058	; 0x80a
 80046ca:	4628      	mov	r0, r5
 80046cc:	f002 fc64 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80046d0:	f640 020b 	movw	r2, #2059	; 0x80b
    return (lv_coord_t)v.num;
 80046d4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80046d6:	4631      	mov	r1, r6
 80046d8:	4628      	mov	r0, r5
 80046da:	f002 fc5d 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80046de:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 80046e0:	42b8      	cmp	r0, r7
 80046e2:	bfb8      	it	lt
 80046e4:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 80046e6:	2800      	cmp	r0, #0
 80046e8:	bfc4      	itt	gt
 80046ea:	1824      	addgt	r4, r4, r0
 80046ec:	b224      	sxthgt	r4, r4

    return s;
}
 80046ee:	4620      	mov	r0, r4
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80046f2:	f640 0245 	movw	r2, #2117	; 0x845
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	f002 fc4d 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80046fe:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8004700:	2802      	cmp	r0, #2
 8004702:	d9c1      	bls.n	8004688 <lv_obj_calculate_ext_draw_size+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004704:	f640 0243 	movw	r2, #2115	; 0x843
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 800470c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8004710:	f002 fc42 	bl	8006f98 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8004714:	3001      	adds	r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004716:	f640 0241 	movw	r2, #2113	; 0x841
 800471a:	4631      	mov	r1, r6
 800471c:	eb00 0767 	add.w	r7, r0, r7, asr #1
 8004720:	4628      	mov	r0, r5
 8004722:	f002 fc39 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004726:	f640 0242 	movw	r2, #2114	; 0x842
 800472a:	b2bc      	uxth	r4, r7
 800472c:	4631      	mov	r1, r6
    return (lv_coord_t)v.num;
 800472e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004730:	4628      	mov	r0, r5
 8004732:	f002 fc31 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004736:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8004738:	2800      	cmp	r0, #0
 800473a:	bfb8      	it	lt
 800473c:	4240      	neglt	r0, r0
 800473e:	2f00      	cmp	r7, #0
 8004740:	bfb8      	it	lt
 8004742:	427f      	neglt	r7, r7
 8004744:	b280      	uxth	r0, r0
 8004746:	b2bf      	uxth	r7, r7
 8004748:	42b8      	cmp	r0, r7
 800474a:	bf2c      	ite	cs
 800474c:	1824      	addcs	r4, r4, r0
 800474e:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 8004750:	b224      	sxth	r4, r4
 8004752:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004756:	e798      	b.n	800468a <lv_obj_calculate_ext_draw_size+0x14>

08004758 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, const lv_area_t * clip_area)
{
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 800475e:	2148      	movs	r1, #72	; 0x48
 8004760:	f013 f810 	bl	8017784 <lv_memset_00>
    dsc->clip_area = clip_area;
 8004764:	6025      	str	r5, [r4, #0]
}
 8004766:	bd38      	pop	{r3, r4, r5, pc}

08004768 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8004768:	6880      	ldr	r0, [r0, #8]
 800476a:	b108      	cbz	r0, 8004770 <_lv_obj_get_ext_draw_size+0x8>
 800476c:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 8004770:	4770      	bx	lr

08004772 <lv_obj_refresh_ext_draw_size>:
{
 8004772:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004774:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004776:	f7ff fff7 	bl	8004768 <_lv_obj_get_ext_draw_size>
    lv_coord_t s_new = 0;
 800477a:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 800477c:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800477e:	f10d 0206 	add.w	r2, sp, #6
 8004782:	2113      	movs	r1, #19
 8004784:	4620      	mov	r0, r4
    lv_coord_t s_new = 0;
 8004786:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800478a:	f7fd f9b5 	bl	8001af8 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 800478e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004792:	42ab      	cmp	r3, r5
 8004794:	d002      	beq.n	800479c <lv_obj_refresh_ext_draw_size+0x2a>
 8004796:	4620      	mov	r0, r4
 8004798:	f000 fad6 	bl	8004d48 <lv_obj_invalidate>
    if(obj->spec_attr) {
 800479c:	68a2      	ldr	r2, [r4, #8]
 800479e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80047a2:	b14a      	cbz	r2, 80047b8 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 80047a4:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 80047a6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80047aa:	42ab      	cmp	r3, r5
 80047ac:	d002      	beq.n	80047b4 <lv_obj_refresh_ext_draw_size+0x42>
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 faca 	bl	8004d48 <lv_obj_invalidate>
}
 80047b4:	b003      	add	sp, #12
 80047b6:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f4      	beq.n	80047a6 <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 80047bc:	4620      	mov	r0, r4
 80047be:	f7ff fbe5 	bl	8003f8c <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 80047c2:	68a3      	ldr	r3, [r4, #8]
 80047c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80047c8:	82da      	strh	r2, [r3, #22]
 80047ca:	e7ec      	b.n	80047a6 <lv_obj_refresh_ext_draw_size+0x34>

080047cc <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80047cc:	f241 0232 	movw	r2, #4146	; 0x1032
 80047d0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 80047d2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80047d4:	f002 fbe0 	bl	8006f98 <lv_obj_get_style_prop>
}
 80047d8:	b200      	sxth	r0, r0
 80047da:	bd08      	pop	{r3, pc}

080047dc <lv_obj_get_style_pad_left.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80047dc:	f241 0212 	movw	r2, #4114	; 0x1012
 80047e0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 80047e2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80047e4:	f002 fbd8 	bl	8006f98 <lv_obj_get_style_prop>
}
 80047e8:	b200      	sxth	r0, r0
 80047ea:	bd08      	pop	{r3, pc}

080047ec <lv_obj_get_style_pad_top.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80047ec:	f241 0210 	movw	r2, #4112	; 0x1010
 80047f0:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 80047f2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80047f4:	f002 fbd0 	bl	8006f98 <lv_obj_get_style_prop>
}
 80047f8:	b200      	sxth	r0, r0
 80047fa:	bd08      	pop	{r3, pc}

080047fc <lv_obj_set_width>:
    lv_obj_set_width(obj, w);
    lv_obj_set_height(obj, h);
}

void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 80047fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_w;
    lv_style_value_t v_w;

    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80047fe:	2300      	movs	r3, #0
{
 8004800:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004802:	aa01      	add	r2, sp, #4
 8004804:	f241 0101 	movw	r1, #4097	; 0x1001
{
 8004808:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 800480a:	f002 fd16 	bl	800723a <lv_obj_get_local_style_prop>

    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 800480e:	2801      	cmp	r0, #1
 8004810:	d104      	bne.n	800481c <lv_obj_set_width+0x20>
 8004812:	9b01      	ldr	r3, [sp, #4]
 8004814:	42a3      	cmp	r3, r4
 8004816:	d103      	bne.n	8004820 <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
    }
}
 8004818:	b003      	add	sp, #12
 800481a:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 800481c:	2800      	cmp	r0, #0
 800481e:	d1fb      	bne.n	8004818 <lv_obj_set_width+0x1c>
static inline void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 8004820:	2300      	movs	r3, #0
 8004822:	4622      	mov	r2, r4
 8004824:	f241 0101 	movw	r1, #4097	; 0x1001
 8004828:	4628      	mov	r0, r5
 800482a:	f002 fc99 	bl	8007160 <lv_obj_set_local_style_prop>
}
 800482e:	e7f3      	b.n	8004818 <lv_obj_set_width+0x1c>

08004830 <lv_obj_set_height>:

void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 8004830:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_h;
    lv_style_value_t v_h;

    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004832:	2300      	movs	r3, #0
{
 8004834:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004836:	aa01      	add	r2, sp, #4
 8004838:	f241 0104 	movw	r1, #4100	; 0x1004
{
 800483c:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 800483e:	f002 fcfc 	bl	800723a <lv_obj_get_local_style_prop>

    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004842:	2801      	cmp	r0, #1
 8004844:	d104      	bne.n	8004850 <lv_obj_set_height+0x20>
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	42a3      	cmp	r3, r4
 800484a:	d103      	bne.n	8004854 <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
    }
}
 800484c:	b003      	add	sp, #12
 800484e:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004850:	2800      	cmp	r0, #0
 8004852:	d1fb      	bne.n	800484c <lv_obj_set_height+0x1c>
static inline void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 8004854:	2300      	movs	r3, #0
 8004856:	4622      	mov	r2, r4
 8004858:	f241 0104 	movw	r1, #4100	; 0x1004
 800485c:	4628      	mov	r0, r5
 800485e:	f002 fc7f 	bl	8007160 <lv_obj_set_local_style_prop>
}
 8004862:	e7f3      	b.n	800484c <lv_obj_set_height+0x1c>

08004864 <lv_obj_set_size>:
{
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4604      	mov	r4, r0
 8004868:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 800486a:	f7ff ffc7 	bl	80047fc <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 800486e:	4629      	mov	r1, r5
 8004870:	4620      	mov	r0, r4
}
 8004872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 8004876:	f7ff bfdb 	b.w	8004830 <lv_obj_set_height>

0800487a <lv_obj_set_content_height>:

    lv_obj_set_width(obj, w + pleft + pright + 2 * border_width);
}

void lv_obj_set_content_height(lv_obj_t * obj, lv_coord_t h)
{
 800487a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487c:	4605      	mov	r5, r0
 800487e:	460c      	mov	r4, r1
    lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004880:	f7ff ffb4 	bl	80047ec <lv_obj_get_style_pad_top.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004884:	2100      	movs	r1, #0
 8004886:	4606      	mov	r6, r0
 8004888:	f241 0211 	movw	r2, #4113	; 0x1011
 800488c:	4628      	mov	r0, r5
 800488e:	f002 fb83 	bl	8006f98 <lv_obj_get_style_prop>
 8004892:	4607      	mov	r7, r0
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004894:	4628      	mov	r0, r5
 8004896:	f7ff ff99 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>

    lv_obj_set_height(obj, h + ptop + pbottom + 2 * border_width);
 800489a:	19e1      	adds	r1, r4, r7
 800489c:	198c      	adds	r4, r1, r6
 800489e:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 80048a2:	4628      	mov	r0, r5
 80048a4:	b221      	sxth	r1, r4
}
 80048a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_set_height(obj, h + ptop + pbottom + 2 * border_width);
 80048aa:	f7ff bfc1 	b.w	8004830 <lv_obj_set_height>
	...

080048b0 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 80048b0:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 80048b2:	490b      	ldr	r1, [pc, #44]	; (80048e0 <lv_obj_is_layout_positioned+0x30>)
{
 80048b4:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 80048b6:	f7ff f8a3 	bl	8003a00 <lv_obj_has_flag_any>
 80048ba:	4604      	mov	r4, r0
 80048bc:	b108      	cbz	r0, 80048c2 <lv_obj_is_layout_positioned+0x12>
 80048be:	2000      	movs	r0, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 80048c0:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80048c2:	4628      	mov	r0, r5
 80048c4:	f002 feb2 	bl	800762c <lv_obj_get_parent>
    if(parent == NULL) return false;
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d0f8      	beq.n	80048be <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80048cc:	f241 0269 	movw	r2, #4201	; 0x1069
 80048d0:	4621      	mov	r1, r4
 80048d2:	f002 fb61 	bl	8006f98 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80048d6:	b280      	uxth	r0, r0
    if(layout) return true;
 80048d8:	3800      	subs	r0, #0
 80048da:	bf18      	it	ne
 80048dc:	2001      	movne	r0, #1
 80048de:	e7ef      	b.n	80048c0 <lv_obj_is_layout_positioned+0x10>
 80048e0:	00018001 	.word	0x00018001

080048e4 <lv_obj_set_x>:
{
 80048e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e6:	4604      	mov	r4, r0
 80048e8:	460d      	mov	r5, r1
    if(lv_obj_is_layout_positioned(obj)) {
 80048ea:	f7ff ffe1 	bl	80048b0 <lv_obj_is_layout_positioned>
 80048ee:	4603      	mov	r3, r0
 80048f0:	b950      	cbnz	r0, 8004908 <lv_obj_set_x+0x24>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 80048f2:	aa01      	add	r2, sp, #4
 80048f4:	f241 0107 	movw	r1, #4103	; 0x1007
 80048f8:	4620      	mov	r0, r4
 80048fa:	f002 fc9e 	bl	800723a <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 80048fe:	2801      	cmp	r0, #1
 8004900:	d104      	bne.n	800490c <lv_obj_set_x+0x28>
 8004902:	9b01      	ldr	r3, [sp, #4]
 8004904:	42ab      	cmp	r3, r5
 8004906:	d103      	bne.n	8004910 <lv_obj_set_x+0x2c>
}
 8004908:	b003      	add	sp, #12
 800490a:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800490c:	2800      	cmp	r0, #0
 800490e:	d1fb      	bne.n	8004908 <lv_obj_set_x+0x24>
static inline void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 8004910:	2300      	movs	r3, #0
 8004912:	462a      	mov	r2, r5
 8004914:	f241 0107 	movw	r1, #4103	; 0x1007
 8004918:	4620      	mov	r0, r4
 800491a:	f002 fc21 	bl	8007160 <lv_obj_set_local_style_prop>
}
 800491e:	e7f3      	b.n	8004908 <lv_obj_set_x+0x24>

08004920 <lv_obj_set_y>:
{
 8004920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004922:	4604      	mov	r4, r0
 8004924:	460d      	mov	r5, r1
    if(lv_obj_is_layout_positioned(obj)) {
 8004926:	f7ff ffc3 	bl	80048b0 <lv_obj_is_layout_positioned>
 800492a:	4603      	mov	r3, r0
 800492c:	b950      	cbnz	r0, 8004944 <lv_obj_set_y+0x24>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800492e:	aa01      	add	r2, sp, #4
 8004930:	f241 0108 	movw	r1, #4104	; 0x1008
 8004934:	4620      	mov	r0, r4
 8004936:	f002 fc80 	bl	800723a <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 800493a:	2801      	cmp	r0, #1
 800493c:	d104      	bne.n	8004948 <lv_obj_set_y+0x28>
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	42ab      	cmp	r3, r5
 8004942:	d103      	bne.n	800494c <lv_obj_set_y+0x2c>
}
 8004944:	b003      	add	sp, #12
 8004946:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004948:	2800      	cmp	r0, #0
 800494a:	d1fb      	bne.n	8004944 <lv_obj_set_y+0x24>
static inline void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800494c:	2300      	movs	r3, #0
 800494e:	462a      	mov	r2, r5
 8004950:	f241 0108 	movw	r1, #4104	; 0x1008
 8004954:	4620      	mov	r0, r4
 8004956:	f002 fc03 	bl	8007160 <lv_obj_set_local_style_prop>
}
 800495a:	e7f3      	b.n	8004944 <lv_obj_set_y+0x24>

0800495c <lv_obj_set_pos>:
{
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 8004962:	f7ff ffbf 	bl	80048e4 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8004966:	4629      	mov	r1, r5
 8004968:	4620      	mov	r0, r4
}
 800496a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 800496e:	f7ff bfd7 	b.w	8004920 <lv_obj_set_y>

08004972 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
    obj->layout_inv = 1;
 8004972:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004976:	f042 0201 	orr.w	r2, r2, #1
{
 800497a:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 800497c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is an something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8004980:	f002 fe2d 	bl	80075de <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8004984:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004988:	f042 0202 	orr.w	r2, r2, #2
 800498c:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8004990:	f002 fe2c 	bl	80075ec <lv_obj_get_disp>
    lv_timer_resume(disp->refr_timer);
 8004994:	6840      	ldr	r0, [r0, #4]
}
 8004996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_timer_resume(disp->refr_timer);
 800499a:	f013 bd98 	b.w	80184ce <lv_timer_resume>
	...

080049a0 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 80049a2:	4e0c      	ldr	r6, [pc, #48]	; (80049d4 <lv_layout_register+0x34>)
{
 80049a4:	4605      	mov	r5, r0
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80049a6:	4f0c      	ldr	r7, [pc, #48]	; (80049d8 <lv_layout_register+0x38>)
{
 80049a8:	460c      	mov	r4, r1
    layout_cnt++;
 80049aa:	6833      	ldr	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80049ac:	6838      	ldr	r0, [r7, #0]
    layout_cnt++;
 80049ae:	3301      	adds	r3, #1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80049b0:	00d9      	lsls	r1, r3, #3
    layout_cnt++;
 80049b2:	6033      	str	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80049b4:	f012 fe7e 	bl	80176b4 <lv_mem_realloc>
 80049b8:	4603      	mov	r3, r0
 80049ba:	6038      	str	r0, [r7, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 80049bc:	b900      	cbnz	r0, 80049c0 <lv_layout_register+0x20>
 80049be:	e7fe      	b.n	80049be <lv_layout_register+0x1e>

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 80049c0:	6830      	ldr	r0, [r6, #0]
 80049c2:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 80049c6:	3a01      	subs	r2, #1
 80049c8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80049cc:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 80049d0:	604c      	str	r4, [r1, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 80049d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d4:	20003060 	.word	0x20003060
 80049d8:	2000b53c 	.word	0x2000b53c

080049dc <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4604      	mov	r4, r0
 80049e0:	4615      	mov	r5, r2
 80049e2:	461e      	mov	r6, r3
static inline void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 80049e4:	460a      	mov	r2, r1
 80049e6:	2300      	movs	r3, #0
 80049e8:	f241 0109 	movw	r1, #4105	; 0x1009
 80049ec:	f002 fbb8 	bl	8007160 <lv_obj_set_local_style_prop>
    lv_obj_set_style_align(obj, align, 0);
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 80049f0:	4632      	mov	r2, r6
 80049f2:	4629      	mov	r1, r5
 80049f4:	4620      	mov	r0, r4
}
 80049f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 80049fa:	f7ff bfaf 	b.w	800495c <lv_obj_set_pos>

080049fe <lv_obj_get_coords>:
    dest->x1 = src->x1;
 80049fe:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8004a02:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8004a04:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8004a08:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8004a0a:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004a0e:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8004a10:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8004a14:	80cb      	strh	r3, [r1, #6]
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
}
 8004a16:	4770      	bx	lr

08004a18 <lv_obj_get_x>:

lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004a1c:	f002 fe06 	bl	800762c <lv_obj_get_parent>
    if(parent) {
 8004a20:	4607      	mov	r7, r0
 8004a22:	b190      	cbz	r0, 8004a4a <lv_obj_get_x+0x32>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8004a24:	8aa6      	ldrh	r6, [r4, #20]
 8004a26:	8a85      	ldrh	r5, [r0, #20]
        rel_x += lv_obj_get_scroll_x(parent);
 8004a28:	f001 f868 	bl	8005afc <lv_obj_get_scroll_x>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8004a2c:	1b76      	subs	r6, r6, r5
 8004a2e:	b2b6      	uxth	r6, r6
        rel_x += lv_obj_get_scroll_x(parent);
 8004a30:	1835      	adds	r5, r6, r0
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004a32:	4638      	mov	r0, r7
 8004a34:	f7ff fed2 	bl	80047dc <lv_obj_get_style_pad_left.constprop.0>
        rel_x += lv_obj_get_scroll_x(parent);
 8004a38:	b2ad      	uxth	r5, r5
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004a3a:	1a2c      	subs	r4, r5, r0
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	f7ff fec5 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004a42:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004a44:	1a20      	subs	r0, r4, r0
 8004a46:	b200      	sxth	r0, r0
    }
    else {
        rel_x = obj->coords.x1;
    }
    return rel_x;
}
 8004a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_x = obj->coords.x1;
 8004a4a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8004a4e:	e7fb      	b.n	8004a48 <lv_obj_get_x+0x30>

08004a50 <lv_obj_get_y>:

    return lv_obj_get_x(obj) + lv_obj_get_width(obj);
}

lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004a54:	f002 fdea 	bl	800762c <lv_obj_get_parent>
    if(parent) {
 8004a58:	4607      	mov	r7, r0
 8004a5a:	b190      	cbz	r0, 8004a82 <lv_obj_get_y+0x32>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004a5c:	8ae6      	ldrh	r6, [r4, #22]
 8004a5e:	8ac5      	ldrh	r5, [r0, #22]
        rel_y += lv_obj_get_scroll_y(parent);
 8004a60:	f001 f85e 	bl	8005b20 <lv_obj_get_scroll_y>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004a64:	1b76      	subs	r6, r6, r5
 8004a66:	b2b6      	uxth	r6, r6
        rel_y += lv_obj_get_scroll_y(parent);
 8004a68:	1835      	adds	r5, r6, r0
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	f7ff febe 	bl	80047ec <lv_obj_get_style_pad_top.constprop.0>
        rel_y += lv_obj_get_scroll_y(parent);
 8004a70:	b2ad      	uxth	r5, r5
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004a72:	1a2c      	subs	r4, r5, r0
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004a74:	4638      	mov	r0, r7
 8004a76:	f7ff fea9 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004a7a:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004a7c:	1a20      	subs	r0, r4, r0
 8004a7e:	b200      	sxth	r0, r0
    }
    else {
        rel_y = obj->coords.y1;
    }
    return rel_y;
}
 8004a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_y = obj->coords.y1;
 8004a82:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8004a86:	e7fb      	b.n	8004a80 <lv_obj_get_y+0x30>

08004a88 <lv_obj_get_y2>:

lv_coord_t lv_obj_get_y2(const lv_obj_t * obj)
{
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8004a8c:	f7ff ffe0 	bl	8004a50 <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004a90:	8b63      	ldrh	r3, [r4, #26]
 8004a92:	8ae2      	ldrh	r2, [r4, #22]
 8004a94:	3301      	adds	r3, #1
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	4418      	add	r0, r3
}
 8004a9a:	b200      	sxth	r0, r0
 8004a9c:	bd10      	pop	{r4, pc}

08004a9e <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004a9e:	8b03      	ldrh	r3, [r0, #24]
 8004aa0:	8a80      	ldrh	r0, [r0, #20]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
}
 8004aa6:	b200      	sxth	r0, r0
 8004aa8:	4770      	bx	lr

08004aaa <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004aaa:	8b43      	ldrh	r3, [r0, #26]
 8004aac:	8ac0      	ldrh	r0, [r0, #22]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
}
 8004ab2:	b200      	sxth	r0, r0
 8004ab4:	4770      	bx	lr

08004ab6 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8004ab6:	b570      	push	{r4, r5, r6, lr}
 8004ab8:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004aba:	f7ff fe8f 	bl	80047dc <lv_obj_get_style_pad_left.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004abe:	f241 0213 	movw	r2, #4115	; 0x1013
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f002 fa66 	bl	8006f98 <lv_obj_get_style_prop>
 8004acc:	4604      	mov	r4, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f7ff fe7c 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8004ad4:	f1c4 0301 	rsb	r3, r4, #1
 8004ad8:	8b2c      	ldrh	r4, [r5, #24]
 8004ada:	4423      	add	r3, r4
 8004adc:	8aac      	ldrh	r4, [r5, #20]
 8004ade:	1b1b      	subs	r3, r3, r4
 8004ae0:	1b9c      	subs	r4, r3, r6
 8004ae2:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
}
 8004ae6:	b200      	sxth	r0, r0
 8004ae8:	bd70      	pop	{r4, r5, r6, pc}

08004aea <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8004aea:	b570      	push	{r4, r5, r6, lr}
 8004aec:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top((lv_obj_t *)obj, LV_PART_MAIN);
 8004aee:	f7ff fe7d 	bl	80047ec <lv_obj_get_style_pad_top.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004af2:	f241 0211 	movw	r2, #4113	; 0x1011
 8004af6:	4606      	mov	r6, r0
 8004af8:	2100      	movs	r1, #0
 8004afa:	4628      	mov	r0, r5
 8004afc:	f002 fa4c 	bl	8006f98 <lv_obj_get_style_prop>
 8004b00:	4604      	mov	r4, r0
    lv_coord_t bottom =  lv_obj_get_style_pad_bottom((lv_obj_t *)obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7ff fe62 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8004b08:	f1c4 0301 	rsb	r3, r4, #1
 8004b0c:	8b6c      	ldrh	r4, [r5, #26]
 8004b0e:	4423      	add	r3, r4
 8004b10:	8aec      	ldrh	r4, [r5, #22]
 8004b12:	1b1b      	subs	r3, r3, r4
 8004b14:	1b9c      	subs	r4, r3, r6
 8004b16:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
}
 8004b1a:	b200      	sxth	r0, r0
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}

08004b1e <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8004b1e:	b538      	push	{r3, r4, r5, lr}
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004b24:	f7ff fe52 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>

    lv_obj_get_coords(obj, area);
    lv_area_increase(area, -border_width, -border_width);
 8004b28:	4240      	negs	r0, r0
    dest->x1 = src->x1;
 8004b2a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8004b2e:	b202      	sxth	r2, r0
 8004b30:	4620      	mov	r0, r4
 8004b32:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 8004b34:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8004b38:	4611      	mov	r1, r2
 8004b3a:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 8004b3c:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8004b40:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 8004b42:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8004b46:	80e3      	strh	r3, [r4, #6]
 8004b48:	f011 ffad 	bl	8016aa6 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	f7ff fe45 	bl	80047dc <lv_obj_get_style_pad_left.constprop.0>
 8004b52:	8823      	ldrh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004b54:	f241 0213 	movw	r2, #4115	; 0x1013
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4418      	add	r0, r3
 8004b5c:	8020      	strh	r0, [r4, #0]
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f002 fa1a 	bl	8006f98 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8004b64:	88a3      	ldrh	r3, [r4, #4]
 8004b66:	1a18      	subs	r0, r3, r0
 8004b68:	80a0      	strh	r0, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f7ff fe3e 	bl	80047ec <lv_obj_get_style_pad_top.constprop.0>
 8004b70:	8863      	ldrh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004b72:	f241 0211 	movw	r2, #4113	; 0x1011
 8004b76:	2100      	movs	r1, #0
 8004b78:	4418      	add	r0, r3
 8004b7a:	8060      	strh	r0, [r4, #2]
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f002 fa0b 	bl	8006f98 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8004b82:	88e3      	ldrh	r3, [r4, #6]
 8004b84:	1a18      	subs	r0, r3, r0
 8004b86:	80e0      	strh	r0, [r4, #6]

}
 8004b88:	bd38      	pop	{r3, r4, r5, pc}

08004b8a <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
    lv_point_t p = {0, LV_COORD_MIN};
 8004b8a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
{
 8004b8e:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004b90:	2126      	movs	r1, #38	; 0x26
 8004b92:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 8004b94:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004b96:	f7fc ffaf 	bl	8001af8 <lv_event_send>
    return p.x;
}
 8004b9a:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8004b9e:	b003      	add	sp, #12
 8004ba0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ba4 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
    lv_point_t p = {LV_COORD_MIN, 0};
 8004ba4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
{
 8004ba8:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004baa:	2126      	movs	r1, #38	; 0x26
 8004bac:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 8004bae:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 8004bb0:	f7fc ffa2 	bl	8001af8 <lv_event_send>
    return p.y;
}
 8004bb4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8004bb8:	b003      	add	sp, #12
 8004bba:	f85d fb04 	ldr.w	pc, [sp], #4

08004bbe <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 8004bbe:	b538      	push	{r3, r4, r5, lr}
 8004bc0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004bc2:	f241 0201 	movw	r2, #4097	; 0x1001
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f002 f9e6 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004bcc:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8004bd0:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f002 f9df 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8004bda:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8004bde:	b200      	sxth	r0, r0
 8004be0:	429d      	cmp	r5, r3
 8004be2:	d001      	beq.n	8004be8 <lv_obj_refresh_self_size+0x2a>
 8004be4:	4298      	cmp	r0, r3
 8004be6:	d104      	bne.n	8004bf2 <lv_obj_refresh_self_size+0x34>

    lv_obj_mark_layout_as_dirty(obj);
 8004be8:	4620      	mov	r0, r4
 8004bea:	f7ff fec2 	bl	8004972 <lv_obj_mark_layout_as_dirty>
    return true;
 8004bee:	2001      	movs	r0, #1
}
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	e7fc      	b.n	8004bf0 <lv_obj_refresh_self_size+0x32>

08004bf6 <lv_obj_move_children_by>:
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
    }
}

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 8004bf6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460f      	mov	r7, r1
 8004bfe:	4690      	mov	r8, r2
 8004c00:	4699      	mov	r9, r3
    uint32_t i;
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004c02:	2500      	movs	r5, #0
        lv_obj_t * child = lv_obj_get_child(obj, i);
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
        child->coords.x1 += x_diff;
 8004c04:	fa1f fa81 	uxth.w	sl, r1
        child->coords.y1 += y_diff;
 8004c08:	fa1f fb82 	uxth.w	fp, r2
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f002 fd1f 	bl	8007650 <lv_obj_get_child_cnt>
 8004c12:	42a8      	cmp	r0, r5
 8004c14:	d801      	bhi.n	8004c1a <lv_obj_move_children_by+0x24>
        child->coords.x2 += x_diff;
        child->coords.y2 += y_diff;

        lv_obj_move_children_by(child, x_diff, y_diff, false);
    }
}
 8004c16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f002 fd08 	bl	8007632 <lv_obj_get_child>
 8004c22:	4604      	mov	r4, r0
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8004c24:	f1b9 0f00 	cmp.w	r9, #0
 8004c28:	d113      	bne.n	8004c52 <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 8004c2a:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4620      	mov	r0, r4
        child->coords.x1 += x_diff;
 8004c32:	4453      	add	r3, sl
 8004c34:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 8004c36:	8ae3      	ldrh	r3, [r4, #22]
 8004c38:	445b      	add	r3, fp
 8004c3a:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 8004c3c:	8b23      	ldrh	r3, [r4, #24]
 8004c3e:	4453      	add	r3, sl
 8004c40:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8004c42:	8b63      	ldrh	r3, [r4, #26]
 8004c44:	445b      	add	r3, fp
 8004c46:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f7ff ffd4 	bl	8004bf6 <lv_obj_move_children_by>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004c4e:	3501      	adds	r5, #1
 8004c50:	e7dc      	b.n	8004c0c <lv_obj_move_children_by+0x16>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8004c52:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004c56:	f7fe fecc 	bl	80039f2 <lv_obj_has_flag>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d0e5      	beq.n	8004c2a <lv_obj_move_children_by+0x34>
 8004c5e:	e7f6      	b.n	8004c4e <lv_obj_move_children_by+0x58>

08004c60 <lv_obj_area_is_visible>:
    lv_obj_invalidate_area(obj, &obj_coords);

}

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 8004c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c62:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8004c64:	2101      	movs	r1, #1
{
 8004c66:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8004c68:	f7fe fec3 	bl	80039f2 <lv_obj_has_flag>
 8004c6c:	b118      	cbz	r0, 8004c76 <lv_obj_area_is_visible+0x16>
    obj_coords.y2 += ext_size;

    bool is_common;

    is_common = _lv_area_intersect(area, area, &obj_coords);
    if(is_common == false) return false;  /*The area is not on the object*/
 8004c6e:	2600      	movs	r6, #0

        par = lv_obj_get_parent(par);
    }

    return true;
}
 8004c70:	4630      	mov	r0, r6
 8004c72:	b003      	add	sp, #12
 8004c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8004c76:	4620      	mov	r0, r4
 8004c78:	f002 fcb1 	bl	80075de <lv_obj_get_screen>
 8004c7c:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8004c7e:	f002 fcb5 	bl	80075ec <lv_obj_get_disp>
 8004c82:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8004c84:	f7fc fe9f 	bl	80019c6 <lv_disp_get_scr_act>
 8004c88:	4286      	cmp	r6, r0
 8004c8a:	d133      	bne.n	8004cf4 <lv_obj_area_is_visible+0x94>
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff fd6b 	bl	8004768 <_lv_obj_get_ext_draw_size>
 8004c92:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.x1 -= ext_size;
 8004c96:	b280      	uxth	r0, r0
    dest->y1 = src->y1;
 8004c98:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8004c9c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8004ca0:	8aa1      	ldrh	r1, [r4, #20]
    obj_coords.y1 -= ext_size;
 8004ca2:	1a12      	subs	r2, r2, r0
    obj_coords.x2 += ext_size;
 8004ca4:	4403      	add	r3, r0
    obj_coords.x1 -= ext_size;
 8004ca6:	1a09      	subs	r1, r1, r0
    obj_coords.y2 += ext_size;
 8004ca8:	4430      	add	r0, r6
    obj_coords.y1 -= ext_size;
 8004caa:	f8ad 2002 	strh.w	r2, [sp, #2]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 8004cae:	466a      	mov	r2, sp
    obj_coords.x1 -= ext_size;
 8004cb0:	f8ad 1000 	strh.w	r1, [sp]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 8004cb4:	4629      	mov	r1, r5
    obj_coords.y2 += ext_size;
 8004cb6:	f8ad 0006 	strh.w	r0, [sp, #6]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 8004cba:	4628      	mov	r0, r5
    obj_coords.x2 += ext_size;
 8004cbc:	f8ad 3004 	strh.w	r3, [sp, #4]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 8004cc0:	f011 ff11 	bl	8016ae6 <_lv_area_intersect>
    if(is_common == false) return false;  /*The area is not on the object*/
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d0d1      	beq.n	8004c6e <lv_obj_area_is_visible+0xe>
        par = lv_obj_get_parent(par);
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f002 fcae 	bl	800762c <lv_obj_get_parent>
 8004cd0:	4604      	mov	r4, r0
    while(par != NULL) {
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0cc      	beq.n	8004c70 <lv_obj_area_is_visible+0x10>
        is_common = _lv_area_intersect(area, area, &par->coords);
 8004cd6:	f104 0214 	add.w	r2, r4, #20
 8004cda:	4629      	mov	r1, r5
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f011 ff02 	bl	8016ae6 <_lv_area_intersect>
        if(is_common == false) return false;       /*If no common parts with parent break;*/
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0c3      	beq.n	8004c6e <lv_obj_area_is_visible+0xe>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fe fe82 	bl	80039f2 <lv_obj_has_flag>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d0eb      	beq.n	8004cca <lv_obj_area_is_visible+0x6a>
 8004cf2:	e7bc      	b.n	8004c6e <lv_obj_area_is_visible+0xe>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7fc fe6d 	bl	80019d4 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8004cfa:	4286      	cmp	r6, r0
 8004cfc:	d0c6      	beq.n	8004c8c <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f7fc fe6f 	bl	80019e2 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8004d04:	4286      	cmp	r6, r0
 8004d06:	d0c1      	beq.n	8004c8c <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_sys(disp))
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7fc fe71 	bl	80019f0 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8004d0e:	4286      	cmp	r6, r0
 8004d10:	d1ad      	bne.n	8004c6e <lv_obj_area_is_visible+0xe>
 8004d12:	e7bb      	b.n	8004c8c <lv_obj_area_is_visible+0x2c>

08004d14 <lv_obj_invalidate_area>:
    dest->x1 = src->x1;
 8004d14:	880b      	ldrh	r3, [r1, #0]
{
 8004d16:	b513      	push	{r0, r1, r4, lr}
 8004d18:	f8ad 3000 	strh.w	r3, [sp]
 8004d1c:	4604      	mov	r4, r0
    dest->y1 = src->y1;
 8004d1e:	884b      	ldrh	r3, [r1, #2]
 8004d20:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8004d24:	888b      	ldrh	r3, [r1, #4]
 8004d26:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8004d2a:	88cb      	ldrh	r3, [r1, #6]
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 8004d2c:	4669      	mov	r1, sp
 8004d2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8004d32:	f7ff ff95 	bl	8004c60 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8004d36:	b128      	cbz	r0, 8004d44 <lv_obj_invalidate_area+0x30>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f002 fc57 	bl	80075ec <lv_obj_get_disp>
 8004d3e:	4669      	mov	r1, sp
 8004d40:	f003 f8c3 	bl	8007eca <_lv_inv_area>
}
 8004d44:	b002      	add	sp, #8
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <lv_obj_invalidate>:
{
 8004d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d4a:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8004d4c:	f7ff fd0c 	bl	8004768 <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 8004d50:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 8004d52:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    lv_obj_invalidate_area(obj, &obj_coords);
 8004d56:	4620      	mov	r0, r4
    dest->x2 = src->x2;
 8004d58:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8004d5c:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.y1 -= ext_size;
 8004d60:	1ac9      	subs	r1, r1, r3
    obj_coords.x1 -= ext_size;
 8004d62:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.x2 += ext_size;
 8004d64:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 8004d66:	f8ad 1002 	strh.w	r1, [sp, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
 8004d6a:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 8004d6c:	1aed      	subs	r5, r5, r3
    obj_coords.y2 += ext_size;
 8004d6e:	4433      	add	r3, r6
    obj_coords.x2 += ext_size;
 8004d70:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.x1 -= ext_size;
 8004d74:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.y2 += ext_size;
 8004d78:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8004d7c:	f7ff ffca 	bl	8004d14 <lv_obj_invalidate_area>
}
 8004d80:	b002      	add	sp, #8
 8004d82:	bd70      	pop	{r4, r5, r6, pc}

08004d84 <lv_obj_move_to>:
{
 8004d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 8004d88:	6847      	ldr	r7, [r0, #4]
{
 8004d8a:	4604      	mov	r4, r0
    if(parent) {
 8004d8c:	b31f      	cbz	r7, 8004dd6 <lv_obj_move_to+0x52>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004d8e:	4638      	mov	r0, r7
 8004d90:	b28e      	uxth	r6, r1
 8004d92:	fa1f f882 	uxth.w	r8, r2
 8004d96:	f7ff fd21 	bl	80047dc <lv_obj_get_style_pad_left.constprop.0>
 8004d9a:	4605      	mov	r5, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f7ff fd25 	bl	80047ec <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8004da2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004da6:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7fe fe22 	bl	80039f2 <lv_obj_has_flag>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d06b      	beq.n	8004e8a <lv_obj_move_to+0x106>
            x += pad_left + parent->coords.x1;
 8004db2:	8abb      	ldrh	r3, [r7, #20]
            y += pad_top + parent->coords.y1;
 8004db4:	8afa      	ldrh	r2, [r7, #22]
            x += pad_left + parent->coords.x1;
 8004db6:	441e      	add	r6, r3
            y += pad_top + parent->coords.y1;
 8004db8:	4490      	add	r8, r2
            x += pad_left + parent->coords.x1;
 8004dba:	1970      	adds	r0, r6, r5
            y += pad_top + parent->coords.y1;
 8004dbc:	44c8      	add	r8, r9
            x += pad_left + parent->coords.x1;
 8004dbe:	b205      	sxth	r5, r0
            y += pad_top + parent->coords.y1;
 8004dc0:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f7ff fd01 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 8004dca:	fa15 f180 	uxtah	r1, r5, r0
        y += border_width;
 8004dce:	fa18 f280 	uxtah	r2, r8, r0
        x += border_width;
 8004dd2:	b209      	sxth	r1, r1
        y += border_width;
 8004dd4:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 8004dd6:	8aa3      	ldrh	r3, [r4, #20]
    diff.y = y - obj->coords.y1;
 8004dd8:	8ae0      	ldrh	r0, [r4, #22]
    diff.x = x - obj->coords.x1;
 8004dda:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 8004ddc:	1a12      	subs	r2, r2, r0
    diff.x = x - obj->coords.x1;
 8004dde:	fa1f f881 	uxth.w	r8, r1
    diff.y = y - obj->coords.y1;
 8004de2:	fa1f fa82 	uxth.w	sl, r2
    diff.x = x - obj->coords.x1;
 8004de6:	b20d      	sxth	r5, r1
    if(diff.x == 0 && diff.y == 0) return;
 8004de8:	ea58 030a 	orrs.w	r3, r8, sl
    diff.y = y - obj->coords.y1;
 8004dec:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
 8004dee:	d049      	beq.n	8004e84 <lv_obj_move_to+0x100>
    lv_obj_invalidate(obj);
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7ff ffa9 	bl	8004d48 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8004df6:	8aa3      	ldrh	r3, [r4, #20]
 8004df8:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8004dfc:	8ae3      	ldrh	r3, [r4, #22]
 8004dfe:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8004e02:	8b23      	ldrh	r3, [r4, #24]
 8004e04:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8004e08:	8b63      	ldrh	r3, [r4, #26]
 8004e0a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 8004e0e:	2f00      	cmp	r7, #0
 8004e10:	d051      	beq.n	8004eb6 <lv_obj_move_to+0x132>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8004e12:	a902      	add	r1, sp, #8
 8004e14:	4638      	mov	r0, r7
 8004e16:	f7ff fe82 	bl	8004b1e <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	a902      	add	r1, sp, #8
 8004e1e:	4668      	mov	r0, sp
 8004e20:	f011 ff60 	bl	8016ce4 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8004e24:	4681      	mov	r9, r0
 8004e26:	b910      	cbnz	r0, 8004e2e <lv_obj_move_to+0xaa>
 8004e28:	4638      	mov	r0, r7
 8004e2a:	f001 fd48 	bl	80068be <lv_obj_scrollbar_invalidate>
    obj->coords.x1 += diff.x;
 8004e2e:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8004e30:	4632      	mov	r2, r6
 8004e32:	4629      	mov	r1, r5
 8004e34:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 8004e36:	4443      	add	r3, r8
 8004e38:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 8004e3a:	8ae3      	ldrh	r3, [r4, #22]
 8004e3c:	4453      	add	r3, sl
 8004e3e:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 8004e40:	8b23      	ldrh	r3, [r4, #24]
 8004e42:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 8004e44:	8b63      	ldrh	r3, [r4, #26]
 8004e46:	449a      	add	sl, r3
    obj->coords.x2 += diff.x;
 8004e48:	f8a4 8018 	strh.w	r8, [r4, #24]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8004e4c:	2300      	movs	r3, #0
    obj->coords.y2 += diff.y;
 8004e4e:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8004e52:	f7ff fed0 	bl	8004bf6 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8004e56:	b127      	cbz	r7, 8004e62 <lv_obj_move_to+0xde>
 8004e58:	4622      	mov	r2, r4
 8004e5a:	2122      	movs	r1, #34	; 0x22
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7fc fe4b 	bl	8001af8 <lv_event_send>
    lv_obj_invalidate(obj);
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff ff70 	bl	8004d48 <lv_obj_invalidate>
    if(parent) {
 8004e68:	b167      	cbz	r7, 8004e84 <lv_obj_move_to+0x100>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	a902      	add	r1, sp, #8
 8004e6e:	f104 0014 	add.w	r0, r4, #20
 8004e72:	f011 ff37 	bl	8016ce4 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8004e76:	f1b9 0f00 	cmp.w	r9, #0
 8004e7a:	d100      	bne.n	8004e7e <lv_obj_move_to+0xfa>
 8004e7c:	b110      	cbz	r0, 8004e84 <lv_obj_move_to+0x100>
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f001 fd1d 	bl	80068be <lv_obj_scrollbar_invalidate>
}
 8004e84:	b004      	add	sp, #16
 8004e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8004e8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e8e:	4638      	mov	r0, r7
 8004e90:	441d      	add	r5, r3
 8004e92:	f000 fe33 	bl	8005afc <lv_obj_get_scroll_x>
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8004e96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8004e9a:	1a2d      	subs	r5, r5, r0
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	4499      	add	r9, r3
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8004ea0:	1971      	adds	r1, r6, r5
 8004ea2:	b20d      	sxth	r5, r1
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8004ea4:	f000 fe3c 	bl	8005b20 <lv_obj_get_scroll_y>
 8004ea8:	eba9 0000 	sub.w	r0, r9, r0
 8004eac:	eb08 0200 	add.w	r2, r8, r0
 8004eb0:	fa0f f882 	sxth.w	r8, r2
 8004eb4:	e786      	b.n	8004dc4 <lv_obj_move_to+0x40>
    bool on1 = false;
 8004eb6:	46b9      	mov	r9, r7
 8004eb8:	e7b9      	b.n	8004e2e <lv_obj_move_to+0xaa>

08004eba <lv_obj_refr_pos>:
{
 8004eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ebe:	ed2d 8b02 	vpush	{d8}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8004ec6:	f7ff fcf3 	bl	80048b0 <lv_obj_is_layout_positioned>
 8004eca:	9001      	str	r0, [sp, #4]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f040 811a 	bne.w	8005106 <lv_obj_refr_pos+0x24c>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f002 fbaa 	bl	800762c <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8004ed8:	f241 0207 	movw	r2, #4103	; 0x1007
 8004edc:	ee08 0a10 	vmov	s16, r0
 8004ee0:	9901      	ldr	r1, [sp, #4]
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f002 f858 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004ee8:	f241 0208 	movw	r2, #4104	; 0x1008
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8004eec:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 8004eee:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8004ef0:	9901      	ldr	r1, [sp, #4]
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f002 f850 	bl	8006f98 <lv_obj_get_style_prop>
    if(parent == NULL) {
 8004ef8:	ee18 3a10 	vmov	r3, s16
 8004efc:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 8004efe:	fa0f fa80 	sxth.w	sl, r0
 8004f02:	b94b      	cbnz	r3, 8004f18 <lv_obj_refr_pos+0x5e>
        lv_obj_move_to(obj, x, y);
 8004f04:	4652      	mov	r2, sl
        lv_obj_move_to(obj, x, y);
 8004f06:	4621      	mov	r1, r4
 8004f08:	4640      	mov	r0, r8
}
 8004f0a:	b007      	add	sp, #28
 8004f0c:	ecbd 8b02 	vpop	{d8}
 8004f10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 8004f14:	f7ff bf36 	b.w	8004d84 <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8004f18:	ee18 0a10 	vmov	r0, s16
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004f1c:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8004f20:	f7ff fdc9 	bl	8004ab6 <lv_obj_get_content_width>
 8004f24:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004f26:	ee18 0a10 	vmov	r0, s16
 8004f2a:	f7ff fdde 	bl	8004aea <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004f2e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8004f32:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8004f34:	d10f      	bne.n	8004f56 <lv_obj_refr_pos+0x9c>
 8004f36:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 8004f3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f3e:	dc0a      	bgt.n	8004f56 <lv_obj_refr_pos+0x9c>
 8004f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f44:	461c      	mov	r4, r3
 8004f46:	bfc8      	it	gt
 8004f48:	f5c3 747a 	rsbgt	r4, r3, #1000	; 0x3e8
 8004f4c:	2364      	movs	r3, #100	; 0x64
 8004f4e:	437c      	muls	r4, r7
 8004f50:	fb94 f4f3 	sdiv	r4, r4, r3
 8004f54:	b224      	sxth	r4, r4
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8004f56:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 8004f5a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8004f5e:	d111      	bne.n	8004f84 <lv_obj_refr_pos+0xca>
 8004f60:	f42a 45c0 	bic.w	r5, sl, #24576	; 0x6000
 8004f64:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8004f68:	dc0c      	bgt.n	8004f84 <lv_obj_refr_pos+0xca>
 8004f6a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8004f6e:	46aa      	mov	sl, r5
 8004f70:	bfc8      	it	gt
 8004f72:	f5c5 7a7a 	rsbgt	sl, r5, #1000	; 0x3e8
 8004f76:	2564      	movs	r5, #100	; 0x64
 8004f78:	fb0a fa06 	mul.w	sl, sl, r6
 8004f7c:	fb9a faf5 	sdiv	sl, sl, r5
 8004f80:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8004f84:	f243 020c 	movw	r2, #12300	; 0x300c
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f002 f804 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8004f90:	f243 020d 	movw	r2, #12301	; 0x300d
    return (lv_coord_t)v.num;
 8004f94:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8004f96:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4640      	mov	r0, r8
    return (lv_coord_t)v.num;
 8004f9c:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8004f9e:	f001 fffb 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004fa2:	f8b8 2018 	ldrh.w	r2, [r8, #24]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8004fa6:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004faa:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 8004fae:	fa0f fc80 	sxth.w	ip, r0
 8004fb2:	3201      	adds	r2, #1
 8004fb4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004fb8:	9302      	str	r3, [sp, #8]
 8004fba:	b293      	uxth	r3, r2
 8004fbc:	9a02      	ldr	r2, [sp, #8]
 8004fbe:	eba3 0202 	sub.w	r2, r3, r2
 8004fc2:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004fc4:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004fc8:	fa0f fb82 	sxth.w	fp, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004fcc:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	f102 0201 	add.w	r2, r2, #1
 8004fd6:	b293      	uxth	r3, r2
 8004fd8:	9a03      	ldr	r2, [sp, #12]
 8004fda:	eba3 0902 	sub.w	r9, r3, r2
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	9b05      	ldr	r3, [sp, #20]
 8004fe2:	fa0f f989 	sxth.w	r9, r9
 8004fe6:	d111      	bne.n	800500c <lv_obj_refr_pos+0x152>
 8004fe8:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 8004fec:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 8004ff0:	dc0c      	bgt.n	800500c <lv_obj_refr_pos+0x152>
 8004ff2:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	f04f 0264 	mov.w	r2, #100	; 0x64
 8004ffc:	bfc8      	it	gt
 8004ffe:	f5c1 737a 	rsbgt	r3, r1, #1000	; 0x3e8
 8005002:	fb03 f30b 	mul.w	r3, r3, fp
 8005006:	fb93 f3f2 	sdiv	r3, r3, r2
 800500a:	b21b      	sxth	r3, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800500c:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8005010:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005014:	d111      	bne.n	800503a <lv_obj_refr_pos+0x180>
 8005016:	f42c 42c0 	bic.w	r2, ip, #24576	; 0x6000
 800501a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800501e:	dc0c      	bgt.n	800503a <lv_obj_refr_pos+0x180>
 8005020:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005024:	f04f 0564 	mov.w	r5, #100	; 0x64
 8005028:	bfc8      	it	gt
 800502a:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800502e:	fb02 f209 	mul.w	r2, r2, r9
 8005032:	fb92 f2f5 	sdiv	r2, r2, r5
 8005036:	fa0f fc82 	sxth.w	ip, r2
    x += tr_x;
 800503a:	441c      	add	r4, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800503c:	2100      	movs	r1, #0
 800503e:	f241 0209 	movw	r2, #4105	; 0x1009
 8005042:	4640      	mov	r0, r8
 8005044:	b2a3      	uxth	r3, r4
    y += tr_y;
 8005046:	eb0a 050c 	add.w	r5, sl, ip
    x += tr_x;
 800504a:	b224      	sxth	r4, r4
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	f001 ffa3 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8005052:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    y += tr_y;
 8005056:	fa1f fa85 	uxth.w	sl, r5
    if(align == LV_ALIGN_DEFAULT) {
 800505a:	9b05      	ldr	r3, [sp, #20]
    y += tr_y;
 800505c:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 800505e:	d10c      	bne.n	800507a <lv_obj_refr_pos+0x1c0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005060:	f241 426a 	movw	r2, #5226	; 0x146a
 8005064:	ee18 0a10 	vmov	r0, s16
 8005068:	9303      	str	r3, [sp, #12]
 800506a:	f001 ff95 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800506e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	2801      	cmp	r0, #1
 8005074:	d016      	beq.n	80050a4 <lv_obj_refr_pos+0x1ea>
        lv_obj_move_to(obj, x, y);
 8005076:	462a      	mov	r2, r5
 8005078:	e745      	b.n	8004f06 <lv_obj_refr_pos+0x4c>
    if(align == LV_ALIGN_TOP_LEFT) {
 800507a:	2901      	cmp	r1, #1
 800507c:	d0fb      	beq.n	8005076 <lv_obj_refr_pos+0x1bc>
        switch(align) {
 800507e:	3902      	subs	r1, #2
 8005080:	2907      	cmp	r1, #7
 8005082:	d8f8      	bhi.n	8005076 <lv_obj_refr_pos+0x1bc>
 8005084:	e8df f001 	tbb	[pc, r1]
 8005088:	131c0e04 	.word	0x131c0e04
 800508c:	37282e23 	.word	0x37282e23
            x += pw / 2 - w / 2;
 8005090:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8005094:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8005098:	1064      	asrs	r4, r4, #1
 800509a:	ebc4 0467 	rsb	r4, r4, r7, asr #1
            x += pw - w;
 800509e:	441c      	add	r4, r3
 80050a0:	b224      	sxth	r4, r4
            break;
 80050a2:	e7e8      	b.n	8005076 <lv_obj_refr_pos+0x1bc>
            x += pw - w;
 80050a4:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80050a8:	1a54      	subs	r4, r2, r1
 80050aa:	443c      	add	r4, r7
 80050ac:	e7f7      	b.n	800509e <lv_obj_refr_pos+0x1e4>
            x += pw / 2 - w / 2;
 80050ae:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80050b2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80050b6:	1064      	asrs	r4, r4, #1
 80050b8:	ebc4 0467 	rsb	r4, r4, r7, asr #1
            x += pw - w;
 80050bc:	441c      	add	r4, r3
 80050be:	b224      	sxth	r4, r4
            y += ph - h;
 80050c0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80050c4:	1a9d      	subs	r5, r3, r2
 80050c6:	4435      	add	r5, r6
            y += ph / 2 - h / 2;
 80050c8:	4455      	add	r5, sl
 80050ca:	b22d      	sxth	r5, r5
            break;
 80050cc:	e7d3      	b.n	8005076 <lv_obj_refr_pos+0x1bc>
            x += pw - w;
 80050ce:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80050d2:	1a54      	subs	r4, r2, r1
 80050d4:	443c      	add	r4, r7
 80050d6:	e7f1      	b.n	80050bc <lv_obj_refr_pos+0x202>
            x += pw - w;
 80050d8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80050dc:	1a54      	subs	r4, r2, r1
 80050de:	443c      	add	r4, r7
            x += pw / 2 - w / 2;
 80050e0:	441c      	add	r4, r3
 80050e2:	b224      	sxth	r4, r4
            y += ph / 2 - h / 2;
 80050e4:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80050e8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80050ec:	ea4f 0569 	mov.w	r5, r9, asr #1
 80050f0:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 80050f4:	e7e8      	b.n	80050c8 <lv_obj_refr_pos+0x20e>
            x += pw / 2 - w / 2;
 80050f6:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80050fa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80050fe:	1064      	asrs	r4, r4, #1
 8005100:	ebc4 0467 	rsb	r4, r4, r7, asr #1
 8005104:	e7ec      	b.n	80050e0 <lv_obj_refr_pos+0x226>
}
 8005106:	b007      	add	sp, #28
 8005108:	ecbd 8b02 	vpop	{d8}
 800510c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005110 <lv_obj_is_visible>:

bool lv_obj_is_visible(const lv_obj_t * obj)
{
 8005110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005112:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8005114:	f7ff fb28 	bl	8004768 <_lv_obj_get_ext_draw_size>
    lv_area_copy(&obj_coords, &obj->coords);
    obj_coords.x1 -= ext_size;
 8005118:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 800511a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    obj_coords.y1 -= ext_size;
    obj_coords.x2 += ext_size;
    obj_coords.y2 += ext_size;

    return lv_obj_area_is_visible(obj, &obj_coords);
 800511e:	4620      	mov	r0, r4
    dest->x2 = src->x2;
 8005120:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8005124:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.y1 -= ext_size;
 8005128:	1ac9      	subs	r1, r1, r3
    obj_coords.x1 -= ext_size;
 800512a:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.x2 += ext_size;
 800512c:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 800512e:	f8ad 1002 	strh.w	r1, [sp, #2]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005132:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 8005134:	1aed      	subs	r5, r5, r3
    obj_coords.y2 += ext_size;
 8005136:	4433      	add	r3, r6
    obj_coords.x2 += ext_size;
 8005138:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.x1 -= ext_size;
 800513c:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.y2 += ext_size;
 8005140:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005144:	f7ff fd8c 	bl	8004c60 <lv_obj_area_is_visible>

}
 8005148:	b002      	add	sp, #8
 800514a:	bd70      	pop	{r4, r5, r6, pc}

0800514c <lv_obj_set_ext_click_area>:

void lv_obj_set_ext_click_area(lv_obj_t * obj, lv_coord_t size)
{
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4605      	mov	r5, r0
 8005150:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 8005152:	f7fe ff1b 	bl	8003f8c <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 8005156:	68ab      	ldr	r3, [r5, #8]
 8005158:	829c      	strh	r4, [r3, #20]
}
 800515a:	bd38      	pop	{r3, r4, r5, pc}

0800515c <lv_obj_get_click_area>:
    dest->y1 = src->y1;
 800515c:	f9b0 2016 	ldrsh.w	r2, [r0, #22]

void lv_obj_get_click_area(const lv_obj_t * obj, lv_area_t * area)
{
    lv_area_copy(area, &obj->coords);
    if(obj->spec_attr) {
 8005160:	6883      	ldr	r3, [r0, #8]
{
 8005162:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 8005164:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    dest->x2 = src->x2;
 8005168:	f9b0 4018 	ldrsh.w	r4, [r0, #24]
    dest->y2 = src->y2;
 800516c:	f9b0 601a 	ldrsh.w	r6, [r0, #26]
    dest->x1 = src->x1;
 8005170:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 8005172:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 8005174:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 8005176:	80ce      	strh	r6, [r1, #6]
    if(obj->spec_attr) {
 8005178:	b143      	cbz	r3, 800518c <lv_obj_get_click_area+0x30>
        area->x1 -= obj->spec_attr->ext_click_pad;
 800517a:	8a9b      	ldrh	r3, [r3, #20]
 800517c:	1aed      	subs	r5, r5, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 800517e:	441c      	add	r4, r3
        area->y1 -= obj->spec_attr->ext_click_pad;
 8005180:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 8005182:	4433      	add	r3, r6
        area->x1 -= obj->spec_attr->ext_click_pad;
 8005184:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 8005186:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 8005188:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800518a:	80cb      	strh	r3, [r1, #6]
    }
}
 800518c:	bd70      	pop	{r4, r5, r6, pc}

0800518e <lv_obj_hit_test>:

bool lv_obj_hit_test(lv_obj_t * obj, const lv_point_t * point)
{
 800518e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005190:	460e      	mov	r6, r1
    lv_area_t a;
    lv_obj_get_click_area(obj, &a);
 8005192:	4669      	mov	r1, sp
{
 8005194:	4605      	mov	r5, r0
    lv_obj_get_click_area(obj, &a);
 8005196:	f7ff ffe1 	bl	800515c <lv_obj_get_click_area>
    bool res = _lv_area_is_point_on(&a, point, 0);
 800519a:	2200      	movs	r2, #0
 800519c:	4631      	mov	r1, r6
 800519e:	4668      	mov	r0, sp
 80051a0:	f011 fced 	bl	8016b7e <_lv_area_is_point_on>
    if(res == false) return false;
 80051a4:	4604      	mov	r4, r0
 80051a6:	b180      	cbz	r0, 80051ca <lv_obj_hit_test+0x3c>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 80051a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051ac:	4628      	mov	r0, r5
 80051ae:	f7fe fc20 	bl	80039f2 <lv_obj_has_flag>
 80051b2:	b150      	cbz	r0, 80051ca <lv_obj_hit_test+0x3c>
        lv_hit_test_info_t hit_info;
        hit_info.point = point;
        hit_info.res = true;
 80051b4:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80051b6:	aa02      	add	r2, sp, #8
 80051b8:	2111      	movs	r1, #17
 80051ba:	4628      	mov	r0, r5
        hit_info.point = point;
 80051bc:	9602      	str	r6, [sp, #8]
        hit_info.res = true;
 80051be:	f88d 300c 	strb.w	r3, [sp, #12]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80051c2:	f7fc fc99 	bl	8001af8 <lv_event_send>
        return hit_info.res;
 80051c6:	f89d 400c 	ldrb.w	r4, [sp, #12]
    }

    return res;
}
 80051ca:	4620      	mov	r0, r4
 80051cc:	b004      	add	sp, #16
 80051ce:	bd70      	pop	{r4, r5, r6, pc}

080051d0 <lv_clamp_width>:

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 80051d0:	b530      	push	{r4, r5, lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80051d2:	f401 44c0 	and.w	r4, r1, #24576	; 0x6000
 80051d6:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80051da:	d110      	bne.n	80051fe <lv_clamp_width+0x2e>
 80051dc:	f421 45c0 	bic.w	r5, r1, #24576	; 0x6000
 80051e0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80051e4:	dc0b      	bgt.n	80051fe <lv_clamp_width+0x2e>
 80051e6:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 80051ea:	4629      	mov	r1, r5
 80051ec:	f04f 0464 	mov.w	r4, #100	; 0x64
 80051f0:	bfc8      	it	gt
 80051f2:	f5c5 717a 	rsbgt	r1, r5, #1000	; 0x3e8
 80051f6:	4359      	muls	r1, r3
 80051f8:	fb91 f1f4 	sdiv	r1, r1, r4
 80051fc:	b209      	sxth	r1, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80051fe:	f402 44c0 	and.w	r4, r2, #24576	; 0x6000
 8005202:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8005206:	d10e      	bne.n	8005226 <lv_clamp_width+0x56>
 8005208:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
 800520c:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8005210:	dc09      	bgt.n	8005226 <lv_clamp_width+0x56>
 8005212:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8005216:	bfc8      	it	gt
 8005218:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
 800521c:	4363      	muls	r3, r4
 800521e:	2464      	movs	r4, #100	; 0x64
 8005220:	fb93 f4f4 	sdiv	r4, r3, r4
 8005224:	b222      	sxth	r2, r4
    return LV_CLAMP(min_width, width, max_width);
 8005226:	4290      	cmp	r0, r2
 8005228:	bfa8      	it	ge
 800522a:	4610      	movge	r0, r2
}
 800522c:	4288      	cmp	r0, r1
 800522e:	bfb8      	it	lt
 8005230:	4608      	movlt	r0, r1
 8005232:	bd30      	pop	{r4, r5, pc}

08005234 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
 8005234:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005238:	f003 0306 	and.w	r3, r3, #6
 800523c:	2b06      	cmp	r3, #6
{
 800523e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005242:	4604      	mov	r4, r0
 8005244:	ed2d 8b02 	vpush	{d8}
 8005248:	b087      	sub	sp, #28
    if(obj->w_layout && obj->h_layout) return false;
 800524a:	d003      	beq.n	8005254 <lv_obj_refr_size+0x20>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800524c:	f002 f9ee 	bl	800762c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8005250:	4606      	mov	r6, r0
 8005252:	b908      	cbnz	r0, 8005258 <lv_obj_refr_size+0x24>
    if(obj->w_layout && obj->h_layout) return false;
 8005254:	2000      	movs	r0, #0
 8005256:	e0c6      	b.n	80053e6 <lv_obj_refr_size+0x1b2>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005258:	4620      	mov	r0, r4
 800525a:	f000 fcc9 	bl	8005bf0 <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 800525e:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005262:	4680      	mov	r8, r0
    if(obj->w_layout) {
 8005264:	f017 0704 	ands.w	r7, r7, #4
 8005268:	f000 80c2 	beq.w	80053f0 <lv_obj_refr_size+0x1bc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800526c:	8b20      	ldrh	r0, [r4, #24]
    bool w_content = false;
 800526e:	f04f 0a00 	mov.w	sl, #0
 8005272:	8aa3      	ldrh	r3, [r4, #20]
 8005274:	3001      	adds	r0, #1
 8005276:	1ac0      	subs	r0, r0, r3
 8005278:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fc61 	bl	8005b44 <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8005282:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8005286:	ee08 0a10 	vmov	s16, r0
    if(obj->h_layout) {
 800528a:	f015 0502 	ands.w	r5, r5, #2
 800528e:	f000 810c 	beq.w	80054aa <lv_obj_refr_size+0x276>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005292:	8b65      	ldrh	r5, [r4, #26]
 8005294:	8ae0      	ldrh	r0, [r4, #22]
 8005296:	3501      	adds	r5, #1
 8005298:	1a2d      	subs	r5, r5, r0
 800529a:	b22d      	sxth	r5, r5
    if(w_content || h_content) {
 800529c:	f1ba 0f00 	cmp.w	sl, #0
 80052a0:	f040 8161 	bne.w	8005566 <lv_obj_refr_size+0x332>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80052a4:	8b23      	ldrh	r3, [r4, #24]
 80052a6:	8aa2      	ldrh	r2, [r4, #20]
 80052a8:	3301      	adds	r3, #1
 80052aa:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	454b      	cmp	r3, r9
 80052b0:	d106      	bne.n	80052c0 <lv_obj_refr_size+0x8c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80052b2:	8b63      	ldrh	r3, [r4, #26]
 80052b4:	8ae2      	ldrh	r2, [r4, #22]
 80052b6:	3301      	adds	r3, #1
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	b21b      	sxth	r3, r3
 80052bc:	42ab      	cmp	r3, r5
 80052be:	d0c9      	beq.n	8005254 <lv_obj_refr_size+0x20>
    lv_obj_invalidate(obj);
 80052c0:	4620      	mov	r0, r4
    lv_area_copy(coords, &obj->coords);
 80052c2:	f104 0814 	add.w	r8, r4, #20
    lv_obj_invalidate(obj);
 80052c6:	f7ff fd3f 	bl	8004d48 <lv_obj_invalidate>
    dest->x1 = src->x1;
 80052ca:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 80052cc:	a904      	add	r1, sp, #16
 80052ce:	4630      	mov	r0, r6
 80052d0:	f8ad 3008 	strh.w	r3, [sp, #8]
    dest->y1 = src->y1;
 80052d4:	8ae3      	ldrh	r3, [r4, #22]
 80052d6:	f8ad 300a 	strh.w	r3, [sp, #10]
    dest->x2 = src->x2;
 80052da:	8b23      	ldrh	r3, [r4, #24]
 80052dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    dest->y2 = src->y2;
 80052e0:	8b63      	ldrh	r3, [r4, #26]
 80052e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80052e6:	f7ff fc1a 	bl	8004b1e <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	a802      	add	r0, sp, #8
 80052f0:	f011 fcf8 	bl	8016ce4 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80052f4:	4607      	mov	r7, r0
 80052f6:	b910      	cbnz	r0, 80052fe <lv_obj_refr_size+0xca>
 80052f8:	4630      	mov	r0, r6
 80052fa:	f001 fae0 	bl	80068be <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80052fe:	8ae0      	ldrh	r0, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005300:	f241 426a 	movw	r2, #5226	; 0x146a
 8005304:	2100      	movs	r1, #0
 8005306:	3801      	subs	r0, #1
 8005308:	4405      	add	r5, r0
 800530a:	4620      	mov	r0, r4
 800530c:	8365      	strh	r5, [r4, #26]
 800530e:	f001 fe43 	bl	8006f98 <lv_obj_get_style_prop>
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005312:	aa02      	add	r2, sp, #8
    return (lv_base_dir_t)v.num;
 8005314:	b2c0      	uxtb	r0, r0
 8005316:	2123      	movs	r1, #35	; 0x23
 8005318:	fa1f f389 	uxth.w	r3, r9
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800531c:	2801      	cmp	r0, #1
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800531e:	bf0b      	itete	eq
 8005320:	8b20      	ldrheq	r0, [r4, #24]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005322:	8aa0      	ldrhne	r0, [r4, #20]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005324:	3001      	addeq	r0, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005326:	f100 30ff 	addne.w	r0, r0, #4294967295
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800532a:	bf0c      	ite	eq
 800532c:	1ac3      	subeq	r3, r0, r3
        obj->coords.x2 = obj->coords.x1 + w - 1;
 800532e:	181b      	addne	r3, r3, r0
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005330:	4620      	mov	r0, r4
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005332:	bf0c      	ite	eq
 8005334:	82a3      	strheq	r3, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005336:	8323      	strhne	r3, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005338:	f7fc fbde 	bl	8001af8 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800533c:	4622      	mov	r2, r4
 800533e:	2122      	movs	r1, #34	; 0x22
 8005340:	4630      	mov	r0, r6
 8005342:	f7fc fbd9 	bl	8001af8 <lv_event_send>
    lv_obj_invalidate(obj);
 8005346:	4620      	mov	r0, r4
 8005348:	f7ff fcfe 	bl	8004d48 <lv_obj_invalidate>
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800534c:	4620      	mov	r0, r4
 800534e:	f000 fbcf 	bl	8005af0 <lv_obj_get_scroll_snap_y>
 8005352:	4605      	mov	r5, r0
 8005354:	b9a8      	cbnz	r0, 8005382 <lv_obj_refr_size+0x14e>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fbf4 	bl	8005b44 <lv_obj_get_scroll_top>
 800535c:	4681      	mov	r9, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800535e:	4620      	mov	r0, r4
 8005360:	f000 fbf2 	bl	8005b48 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 8005364:	1e01      	subs	r1, r0, #0
 8005366:	da0c      	bge.n	8005382 <lv_obj_refr_size+0x14e>
 8005368:	f1b9 0f00 	cmp.w	r9, #0
 800536c:	dd09      	ble.n	8005382 <lv_obj_refr_size+0x14e>
            sb = LV_MIN(st, -sb);
 800536e:	424a      	negs	r2, r1
            lv_obj_scroll_by(obj, 0, sb, LV_ANIM_OFF);
 8005370:	462b      	mov	r3, r5
 8005372:	4629      	mov	r1, r5
 8005374:	4620      	mov	r0, r4
            sb = LV_MIN(st, -sb);
 8005376:	454a      	cmp	r2, r9
 8005378:	bfa8      	it	ge
 800537a:	464a      	movge	r2, r9
            lv_obj_scroll_by(obj, 0, sb, LV_ANIM_OFF);
 800537c:	b212      	sxth	r2, r2
 800537e:	f000 fd27 	bl	8005dd0 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fbae 	bl	8005ae4 <lv_obj_get_scroll_snap_x>
 8005388:	bb10      	cbnz	r0, 80053d0 <lv_obj_refr_size+0x19c>
 800538a:	9001      	str	r0, [sp, #4]
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800538c:	4620      	mov	r0, r4
 800538e:	f000 fc2f 	bl	8005bf0 <lv_obj_get_scroll_left>
 8005392:	4681      	mov	r9, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fc97 	bl	8005cc8 <lv_obj_get_scroll_right>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	4605      	mov	r5, r0
 800539e:	f241 426a 	movw	r2, #5226	; 0x146a
 80053a2:	4619      	mov	r1, r3
 80053a4:	4620      	mov	r0, r4
 80053a6:	f001 fdf7 	bl	8006f98 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80053aa:	9b01      	ldr	r3, [sp, #4]
    return (lv_base_dir_t)v.num;
 80053ac:	b2c0      	uxtb	r0, r0
 80053ae:	2801      	cmp	r0, #1
 80053b0:	f000 80e6 	beq.w	8005580 <lv_obj_refr_size+0x34c>
            if(sr < 0 && sl > 0) {
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	da0b      	bge.n	80053d0 <lv_obj_refr_size+0x19c>
 80053b8:	f1b9 0f00 	cmp.w	r9, #0
 80053bc:	dd08      	ble.n	80053d0 <lv_obj_refr_size+0x19c>
                sr = LV_MIN(sl, -sr);
 80053be:	426d      	negs	r5, r5
                lv_obj_scroll_by(obj, sr, 0, LV_ANIM_OFF);
 80053c0:	461a      	mov	r2, r3
                sr = LV_MIN(sl, -sr);
 80053c2:	454d      	cmp	r5, r9
 80053c4:	bfa8      	it	ge
 80053c6:	464d      	movge	r5, r9
                lv_obj_scroll_by(obj, sr, 0, LV_ANIM_OFF);
 80053c8:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, LV_ANIM_OFF);
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 fd00 	bl	8005dd0 <lv_obj_scroll_by>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80053d0:	2200      	movs	r2, #0
 80053d2:	a904      	add	r1, sp, #16
 80053d4:	4640      	mov	r0, r8
 80053d6:	f011 fc85 	bl	8016ce4 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80053da:	b907      	cbnz	r7, 80053de <lv_obj_refr_size+0x1aa>
 80053dc:	b110      	cbz	r0, 80053e4 <lv_obj_refr_size+0x1b0>
 80053de:	4630      	mov	r0, r6
 80053e0:	f001 fa6d 	bl	80068be <lv_obj_scrollbar_invalidate>
    return true;
 80053e4:	2001      	movs	r0, #1
}
 80053e6:	b007      	add	sp, #28
 80053e8:	ecbd 8b02 	vpop	{d8}
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80053f0:	f241 0201 	movw	r2, #4097	; 0x1001
 80053f4:	4639      	mov	r1, r7
 80053f6:	4620      	mov	r0, r4
 80053f8:	f001 fdce 	bl	8006f98 <lv_obj_get_style_prop>
        w_content = w == LV_SIZE_CONTENT ? true : false;
 80053fc:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8005400:	b205      	sxth	r5, r0
 8005402:	429d      	cmp	r5, r3
 8005404:	bf0c      	ite	eq
 8005406:	f04f 0a01 	moveq.w	sl, #1
 800540a:	f04f 0a00 	movne.w	sl, #0
        if(w_content) {
 800540e:	d112      	bne.n	8005436 <lv_obj_refr_size+0x202>
            lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8005410:	463a      	mov	r2, r7
 8005412:	4639      	mov	r1, r7
 8005414:	4620      	mov	r0, r4
 8005416:	f000 fe97 	bl	8006148 <lv_obj_scroll_to_x>
static void calc_auto_size(lv_obj_t * obj, lv_coord_t * w_out, lv_coord_t * h_out)
{
    if(!w_out && !h_out) return;
    /*Get the bounding box of the children*/
    if(w_out) {
        lv_coord_t scroll_right = lv_obj_get_scroll_right(obj);
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fc54 	bl	8005cc8 <lv_obj_get_scroll_right>
 8005420:	4607      	mov	r7, r0
        lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8005422:	4620      	mov	r0, r4
 8005424:	f000 fbe4 	bl	8005bf0 <lv_obj_get_scroll_left>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005428:	8b22      	ldrh	r2, [r4, #24]
 800542a:	8aa3      	ldrh	r3, [r4, #20]
 800542c:	3201      	adds	r2, #1
 800542e:	1ad2      	subs	r2, r2, r3
        *w_out = lv_obj_get_width(obj) + scroll_right + scroll_left;
 8005430:	19d3      	adds	r3, r2, r7
 8005432:	4418      	add	r0, r3
 8005434:	b205      	sxth	r5, r0
        bool pct_w = LV_COORD_IS_PCT(w) ? true : false;
 8005436:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	d131      	bne.n	80054a4 <lv_obj_refr_size+0x270>
 8005440:	f425 49c0 	bic.w	r9, r5, #24576	; 0x6000
 8005444:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 8005448:	bfcc      	ite	gt
 800544a:	f04f 0900 	movgt.w	r9, #0
 800544e:	f04f 0901 	movle.w	r9, #1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005452:	4630      	mov	r0, r6
 8005454:	f7ff fb2f 	bl	8004ab6 <lv_obj_get_content_width>
 8005458:	4607      	mov	r7, r0
        if(pct_w) w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 800545a:	f1b9 0f00 	cmp.w	r9, #0
 800545e:	d00b      	beq.n	8005478 <lv_obj_refr_size+0x244>
 8005460:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8005464:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005468:	bfc8      	it	gt
 800546a:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 800546e:	4345      	muls	r5, r0
 8005470:	2064      	movs	r0, #100	; 0x64
 8005472:	fb95 f5f0 	sdiv	r5, r5, r0
 8005476:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8005478:	f241 0202 	movw	r2, #4098	; 0x1002
 800547c:	2100      	movs	r1, #0
 800547e:	4620      	mov	r0, r4
 8005480:	f001 fd8a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8005484:	f241 0203 	movw	r2, #4099	; 0x1003
    return (lv_coord_t)v.num;
 8005488:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800548c:	2100      	movs	r1, #0
 800548e:	4620      	mov	r0, r4
 8005490:	f001 fd82 	bl	8006f98 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8005494:	4649      	mov	r1, r9
 8005496:	b202      	sxth	r2, r0
 8005498:	463b      	mov	r3, r7
 800549a:	4628      	mov	r0, r5
 800549c:	f7ff fe98 	bl	80051d0 <lv_clamp_width>
 80054a0:	4681      	mov	r9, r0
 80054a2:	e6eb      	b.n	800527c <lv_obj_refr_size+0x48>
        bool pct_w = LV_COORD_IS_PCT(w) ? true : false;
 80054a4:	f04f 0900 	mov.w	r9, #0
 80054a8:	e7d3      	b.n	8005452 <lv_obj_refr_size+0x21e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80054aa:	f241 0204 	movw	r2, #4100	; 0x1004
 80054ae:	4629      	mov	r1, r5
 80054b0:	4620      	mov	r0, r4
 80054b2:	f001 fd71 	bl	8006f98 <lv_obj_get_style_prop>
        if(h_content) {
 80054b6:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 80054ba:	b207      	sxth	r7, r0
 80054bc:	429f      	cmp	r7, r3
 80054be:	d15a      	bne.n	8005576 <lv_obj_refr_size+0x342>
            lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 80054c0:	462a      	mov	r2, r5
 80054c2:	4629      	mov	r1, r5
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 fe83 	bl	80061d0 <lv_obj_scroll_to_y>
    }

    if(h_out) {
        lv_coord_t scroll_bottom = lv_obj_get_scroll_bottom(obj);
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 fb3c 	bl	8005b48 <lv_obj_get_scroll_bottom>
 80054d0:	4683      	mov	fp, r0
        lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fb36 	bl	8005b44 <lv_obj_get_scroll_top>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80054d8:	8b62      	ldrh	r2, [r4, #26]
 80054da:	8ae3      	ldrh	r3, [r4, #22]
 80054dc:	3201      	adds	r2, #1
 80054de:	1ad2      	subs	r2, r2, r3
        *h_out = lv_obj_get_height(obj) + scroll_bottom + scroll_top;
 80054e0:	eb02 030b 	add.w	r3, r2, fp
 80054e4:	4418      	add	r0, r3
 80054e6:	b205      	sxth	r5, r0
        bool pct_h = LV_COORD_IS_PCT(h) ? true : false;
 80054e8:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d143      	bne.n	800557a <lv_obj_refr_size+0x346>
 80054f2:	f425 4bc0 	bic.w	fp, r5, #24576	; 0x6000
 80054f6:	f5bb 6ffa 	cmp.w	fp, #2000	; 0x7d0
 80054fa:	bfcc      	ite	gt
 80054fc:	f04f 0b00 	movgt.w	fp, #0
 8005500:	f04f 0b01 	movle.w	fp, #1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005504:	4630      	mov	r0, r6
 8005506:	f7ff faf0 	bl	8004aea <lv_obj_get_content_height>
 800550a:	4603      	mov	r3, r0
        if(pct_h) h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 800550c:	f1bb 0f00 	cmp.w	fp, #0
 8005510:	d00b      	beq.n	800552a <lv_obj_refr_size+0x2f6>
 8005512:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8005516:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800551a:	bfc8      	it	gt
 800551c:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8005520:	4345      	muls	r5, r0
 8005522:	2064      	movs	r0, #100	; 0x64
 8005524:	fb95 f5f0 	sdiv	r5, r5, r0
 8005528:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800552a:	f241 0205 	movw	r2, #4101	; 0x1005
 800552e:	2100      	movs	r1, #0
 8005530:	4620      	mov	r0, r4
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	f001 fd30 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005538:	f241 0206 	movw	r2, #4102	; 0x1006
    return (lv_coord_t)v.num;
 800553c:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005540:	2100      	movs	r1, #0
 8005542:	4620      	mov	r0, r4
 8005544:	f001 fd28 	bl	8006f98 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005548:	9b01      	ldr	r3, [sp, #4]
 800554a:	b202      	sxth	r2, r0
 800554c:	4659      	mov	r1, fp
 800554e:	4628      	mov	r0, r5
 8005550:	f7ff fe3e 	bl	80051d0 <lv_clamp_width>
 8005554:	4605      	mov	r5, r0
    if(w_content || h_content) {
 8005556:	f1ba 0f00 	cmp.w	sl, #0
 800555a:	d104      	bne.n	8005566 <lv_obj_refr_size+0x332>
 800555c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005560:	429f      	cmp	r7, r3
 8005562:	f47f ae9f 	bne.w	80052a4 <lv_obj_refr_size+0x70>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8005566:	2300      	movs	r3, #0
 8005568:	ee18 2a10 	vmov	r2, s16
 800556c:	4641      	mov	r1, r8
 800556e:	4620      	mov	r0, r4
 8005570:	f000 fe56 	bl	8006220 <lv_obj_scroll_to>
 8005574:	e696      	b.n	80052a4 <lv_obj_refr_size+0x70>
 8005576:	463d      	mov	r5, r7
 8005578:	e7b6      	b.n	80054e8 <lv_obj_refr_size+0x2b4>
        bool pct_h = LV_COORD_IS_PCT(h) ? true : false;
 800557a:	f04f 0b00 	mov.w	fp, #0
 800557e:	e7c1      	b.n	8005504 <lv_obj_refr_size+0x2d0>
            if(sl < 0 && sr > 0) {
 8005580:	f1b9 0f00 	cmp.w	r9, #0
 8005584:	f6bf af24 	bge.w	80053d0 <lv_obj_refr_size+0x19c>
 8005588:	2d00      	cmp	r5, #0
 800558a:	f77f af21 	ble.w	80053d0 <lv_obj_refr_size+0x19c>
                lv_obj_scroll_by(obj, sl, 0, LV_ANIM_OFF);
 800558e:	461a      	mov	r2, r3
 8005590:	4649      	mov	r1, r9
 8005592:	e71a      	b.n	80053ca <lv_obj_refr_size+0x196>

08005594 <layout_update_core>:
    }
}

static void layout_update_core(lv_obj_t * obj)
{
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4604      	mov	r4, r0
    uint32_t i;
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005598:	2500      	movs	r5, #0
 800559a:	4620      	mov	r0, r4
 800559c:	f002 f858 	bl	8007650 <lv_obj_get_child_cnt>
 80055a0:	42a8      	cmp	r0, r5
 80055a2:	d82b      	bhi.n	80055fc <layout_update_core+0x68>
        lv_obj_t * child = lv_obj_get_child(obj, i);
        layout_update_core(child);
    }

    if(obj->layout_inv == 0) return;
 80055a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80055a8:	07da      	lsls	r2, r3, #31
 80055aa:	d52f      	bpl.n	800560c <layout_update_core+0x78>

    obj->layout_inv = 0;
 80055ac:	f36f 0300 	bfc	r3, #0, #1

    lv_obj_refr_size(obj);
 80055b0:	4620      	mov	r0, r4
    obj->layout_inv = 0;
 80055b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 80055b6:	f7ff fe3d 	bl	8005234 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7ff fc7d 	bl	8004eba <lv_obj_refr_pos>

    if(lv_obj_get_child_cnt(obj) > 0) {
 80055c0:	4620      	mov	r0, r4
 80055c2:	f002 f845 	bl	8007650 <lv_obj_get_child_cnt>
 80055c6:	b308      	cbz	r0, 800560c <layout_update_core+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80055c8:	f241 0269 	movw	r2, #4201	; 0x1069
 80055cc:	2100      	movs	r1, #0
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 fce2 	bl	8006f98 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80055d4:	b280      	uxth	r0, r0
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
        if(layout_id > 0 && layout_id <= layout_cnt) {
 80055d6:	b1c8      	cbz	r0, 800560c <layout_update_core+0x78>
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <layout_update_core+0x7c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4283      	cmp	r3, r0
 80055de:	d315      	bcc.n	800560c <layout_update_core+0x78>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id -1].user_data;
 80055e0:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <layout_update_core+0x80>)
 80055e6:	3801      	subs	r0, #1
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id -1].cb(obj, user_data);
 80055ee:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80055f2:	4620      	mov	r0, r4
 80055f4:	6851      	ldr	r1, [r2, #4]
        }
    }
}
 80055f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id -1].cb(obj, user_data);
 80055fa:	4718      	bx	r3
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80055fc:	4629      	mov	r1, r5
 80055fe:	4620      	mov	r0, r4
 8005600:	f002 f817 	bl	8007632 <lv_obj_get_child>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005604:	3501      	adds	r5, #1
        layout_update_core(child);
 8005606:	f7ff ffc5 	bl	8005594 <layout_update_core>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800560a:	e7c6      	b.n	800559a <layout_update_core+0x6>
}
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	bf00      	nop
 8005610:	20003060 	.word	0x20003060
 8005614:	2000b53c 	.word	0x2000b53c

08005618 <lv_obj_update_layout>:
{
 8005618:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 800561a:	4c0b      	ldr	r4, [pc, #44]	; (8005648 <lv_obj_update_layout+0x30>)
 800561c:	7823      	ldrb	r3, [r4, #0]
 800561e:	b953      	cbnz	r3, 8005636 <lv_obj_update_layout+0x1e>
    mutex = true;
 8005620:	2301      	movs	r3, #1
 8005622:	7023      	strb	r3, [r4, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005624:	f001 ffdb 	bl	80075de <lv_obj_get_screen>
 8005628:	4605      	mov	r5, r0
    while(scr->scr_layout_inv) {
 800562a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800562e:	f013 0202 	ands.w	r2, r3, #2
 8005632:	d101      	bne.n	8005638 <lv_obj_update_layout+0x20>
    mutex = false;
 8005634:	7022      	strb	r2, [r4, #0]
}
 8005636:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 8005638:	f36f 0341 	bfc	r3, #1, #1
        layout_update_core(scr);
 800563c:	4628      	mov	r0, r5
        scr->scr_layout_inv = 0;
 800563e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        layout_update_core(scr);
 8005642:	f7ff ffa7 	bl	8005594 <layout_update_core>
 8005646:	e7f0      	b.n	800562a <lv_obj_update_layout+0x12>
 8005648:	20003064 	.word	0x20003064

0800564c <lv_obj_align_to>:
{
 800564c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	460e      	mov	r6, r1
 8005652:	4605      	mov	r5, r0
 8005654:	4614      	mov	r4, r2
 8005656:	4698      	mov	r8, r3
 8005658:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    lv_obj_update_layout(obj);
 800565c:	f7ff ffdc 	bl	8005618 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8005660:	b91e      	cbnz	r6, 800566a <lv_obj_align_to+0x1e>
 8005662:	4628      	mov	r0, r5
 8005664:	f001 ffe2 	bl	800762c <lv_obj_get_parent>
 8005668:	4606      	mov	r6, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800566a:	4628      	mov	r0, r5
 800566c:	f001 ffde 	bl	800762c <lv_obj_get_parent>
 8005670:	4607      	mov	r7, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005672:	f7ff f8ab 	bl	80047cc <lv_obj_get_style_border_width.constprop.0>
 8005676:	4683      	mov	fp, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff f8af 	bl	80047dc <lv_obj_get_style_pad_left.constprop.0>
 800567e:	4682      	mov	sl, r0
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005680:	4638      	mov	r0, r7
 8005682:	f7ff f8b3 	bl	80047ec <lv_obj_get_style_pad_top.constprop.0>
    if(align == LV_ALIGN_DEFAULT) {
 8005686:	b95c      	cbnz	r4, 80056a0 <lv_obj_align_to+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005688:	f241 426a 	movw	r2, #5226	; 0x146a
 800568c:	4621      	mov	r1, r4
 800568e:	4638      	mov	r0, r7
 8005690:	f001 fc82 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005694:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005696:	2801      	cmp	r0, #1
 8005698:	f000 8089 	beq.w	80057ae <lv_obj_align_to+0x162>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800569c:	46a2      	mov	sl, r4
 800569e:	e05c      	b.n	800575a <lv_obj_align_to+0x10e>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 80056a0:	fa1a fa8b 	uxtah	sl, sl, fp
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 80056a4:	fa10 f08b 	uxtah	r0, r0, fp
 80056a8:	3c02      	subs	r4, #2
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 80056aa:	fa1f fc8a 	uxth.w	ip, sl
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 80056ae:	b281      	uxth	r1, r0
    switch(align) {
 80056b0:	2c13      	cmp	r4, #19
 80056b2:	f200 81a4 	bhi.w	80059fe <lv_obj_align_to+0x3b2>
 80056b6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80056ba:	003a      	.short	0x003a
 80056bc:	0086007a 	.word	0x0086007a
 80056c0:	00b10092 	.word	0x00b10092
 80056c4:	00cf00bd 	.word	0x00cf00bd
 80056c8:	00db0014 	.word	0x00db0014
 80056cc:	00ff00e5 	.word	0x00ff00e5
 80056d0:	0114010c 	.word	0x0114010c
 80056d4:	013b012e 	.word	0x013b012e
 80056d8:	01670149 	.word	0x01670149
 80056dc:	017e0178 	.word	0x017e0178
 80056e0:	019c      	.short	0x019c
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7ff f9e7 	bl	8004ab6 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80056e8:	8b2b      	ldrh	r3, [r5, #24]
 80056ea:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 80056ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80056f2:	3301      	adds	r3, #1
 80056f4:	eba3 030a 	sub.w	r3, r3, sl
 80056f8:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 80056fc:	fa0a fa83 	sxtah	sl, sl, r3
 8005700:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005704:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005708:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff f9ec 	bl	8004aea <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005712:	8b6b      	ldrh	r3, [r5, #26]
 8005714:	8aec      	ldrh	r4, [r5, #22]
 8005716:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800571a:	3301      	adds	r3, #1
 800571c:	1b1b      	subs	r3, r3, r4
 800571e:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005722:	fa04 f483 	sxtah	r4, r4, r3
 8005726:	1064      	asrs	r4, r4, #1
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005728:	ebc4 0460 	rsb	r4, r4, r0, asr #1
 800572c:	e10c      	b.n	8005948 <lv_obj_align_to+0x2fc>
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800572e:	4630      	mov	r0, r6
 8005730:	f7ff f9c1 	bl	8004ab6 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005734:	8b2b      	ldrh	r3, [r5, #24]
 8005736:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 800573a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800573e:	3301      	adds	r3, #1
 8005740:	eba3 030a 	sub.w	r3, r3, sl
 8005744:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005748:	fa0a fa83 	sxtah	sl, sl, r3
 800574c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005750:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005754:	fa0f fa8a 	sxth.w	sl, sl
        y = 0;
 8005758:	2400      	movs	r4, #0
    x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent);
 800575a:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 800575e:	4480      	add	r8, r0
 8005760:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005764:	eba8 0800 	sub.w	r8, r8, r0
 8005768:	4638      	mov	r0, r7
 800576a:	f000 fa41 	bl	8005bf0 <lv_obj_get_scroll_left>
 800576e:	4440      	add	r0, r8
 8005770:	4482      	add	sl, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005772:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 8005776:	4481      	add	r9, r0
 8005778:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
    x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent);
 800577c:	fa1f fa8a 	uxth.w	sl, sl
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005780:	eba9 0900 	sub.w	r9, r9, r0
 8005784:	4638      	mov	r0, r7
 8005786:	f000 f9dd 	bl	8005b44 <lv_obj_get_scroll_top>
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800578a:	2300      	movs	r3, #0
 800578c:	4448      	add	r0, r9
 800578e:	2201      	movs	r2, #1
 8005790:	f241 0109 	movw	r1, #4105	; 0x1009
 8005794:	4404      	add	r4, r0
 8005796:	4628      	mov	r0, r5
 8005798:	f001 fce2 	bl	8007160 <lv_obj_set_local_style_prop>
    lv_obj_set_pos(obj, x, y);
 800579c:	4628      	mov	r0, r5
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 800579e:	b2a4      	uxth	r4, r4
    lv_obj_set_pos(obj, x, y);
 80057a0:	fa0f f18a 	sxth.w	r1, sl
 80057a4:	b222      	sxth	r2, r4
}
 80057a6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_pos(obj, x, y);
 80057aa:	f7ff b8d7 	b.w	800495c <lv_obj_set_pos>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 80057ae:	4630      	mov	r0, r6
 80057b0:	f7ff f981 	bl	8004ab6 <lv_obj_get_content_width>
 80057b4:	8b2b      	ldrh	r3, [r5, #24]
 80057b6:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 80057ba:	43db      	mvns	r3, r3
 80057bc:	4453      	add	r3, sl
 80057be:	4418      	add	r0, r3
 80057c0:	fa0f fa80 	sxth.w	sl, r0
 80057c4:	e7c8      	b.n	8005758 <lv_obj_align_to+0x10c>
        y = lv_obj_get_content_height(base) - lv_obj_get_height(obj);
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7ff f98f 	bl	8004aea <lv_obj_get_content_height>
 80057cc:	8b6b      	ldrh	r3, [r5, #26]
 80057ce:	8aec      	ldrh	r4, [r5, #22]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	4423      	add	r3, r4
 80057d4:	4418      	add	r0, r3
 80057d6:	b204      	sxth	r4, r0
        x = 0;
 80057d8:	f04f 0a00 	mov.w	sl, #0
        break;
 80057dc:	e7bd      	b.n	800575a <lv_obj_align_to+0x10e>
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80057de:	4630      	mov	r0, r6
 80057e0:	f7ff f969 	bl	8004ab6 <lv_obj_get_content_width>
 80057e4:	8b2b      	ldrh	r3, [r5, #24]
 80057e6:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 80057ea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80057ee:	3301      	adds	r3, #1
 80057f0:	eba3 030a 	sub.w	r3, r3, sl
 80057f4:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 80057f8:	fa0a fa83 	sxtah	sl, sl, r3
 80057fc:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005800:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005804:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_content_height(base) - lv_obj_get_height(obj);
 8005808:	4630      	mov	r0, r6
 800580a:	f7ff f96e 	bl	8004aea <lv_obj_get_content_height>
 800580e:	8b6b      	ldrh	r3, [r5, #26]
 8005810:	8aec      	ldrh	r4, [r5, #22]
 8005812:	43db      	mvns	r3, r3
 8005814:	4423      	add	r3, r4
 8005816:	4418      	add	r0, r3
 8005818:	b204      	sxth	r4, r0
        break;
 800581a:	e79e      	b.n	800575a <lv_obj_align_to+0x10e>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 800581c:	4630      	mov	r0, r6
 800581e:	f7ff f94a 	bl	8004ab6 <lv_obj_get_content_width>
 8005822:	8b2b      	ldrh	r3, [r5, #24]
 8005824:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005828:	43db      	mvns	r3, r3
 800582a:	4453      	add	r3, sl
 800582c:	4418      	add	r0, r3
 800582e:	fa0f fa80 	sxth.w	sl, r0
 8005832:	e7e9      	b.n	8005808 <lv_obj_align_to+0x1bc>
        y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff f958 	bl	8004aea <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800583a:	8b6b      	ldrh	r3, [r5, #26]
 800583c:	8aec      	ldrh	r4, [r5, #22]
 800583e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005842:	3301      	adds	r3, #1
 8005844:	1b1b      	subs	r3, r3, r4
 8005846:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800584a:	fa04 f483 	sxtah	r4, r4, r3
 800584e:	1064      	asrs	r4, r4, #1
 8005850:	ebc4 0460 	rsb	r4, r4, r0, asr #1
 8005854:	b224      	sxth	r4, r4
 8005856:	e7bf      	b.n	80057d8 <lv_obj_align_to+0x18c>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005858:	4630      	mov	r0, r6
 800585a:	f7ff f92c 	bl	8004ab6 <lv_obj_get_content_width>
 800585e:	8b2b      	ldrh	r3, [r5, #24]
 8005860:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005864:	43db      	mvns	r3, r3
 8005866:	4453      	add	r3, sl
 8005868:	4418      	add	r0, r3
 800586a:	fa0f fa80 	sxth.w	sl, r0
 800586e:	e74d      	b.n	800570c <lv_obj_align_to+0xc0>
        x = -pleft;
 8005870:	f1cc 0a00 	rsb	sl, ip, #0
        y = -lv_obj_get_height(obj) - ptop;
 8005874:	8aec      	ldrh	r4, [r5, #22]
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005876:	fa0f fa8a 	sxth.w	sl, sl
        y = -lv_obj_get_height(obj) - ptop;
 800587a:	8b6b      	ldrh	r3, [r5, #26]
 800587c:	3c01      	subs	r4, #1
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 800587e:	1ae4      	subs	r4, r4, r3
 8005880:	1a64      	subs	r4, r4, r1
 8005882:	e061      	b.n	8005948 <lv_obj_align_to+0x2fc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005884:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005888:	8ab3      	ldrh	r3, [r6, #20]
 800588a:	f10a 0a01 	add.w	sl, sl, #1
 800588e:	ebaa 0a03 	sub.w	sl, sl, r3
 8005892:	8b2b      	ldrh	r3, [r5, #24]
        x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2 - pleft;
 8005894:	f3ca 30c0 	ubfx	r0, sl, #15, #1
 8005898:	3301      	adds	r3, #1
 800589a:	fa00 f08a 	sxtah	r0, r0, sl
 800589e:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 80058a2:	eba3 030a 	sub.w	r3, r3, sl
 80058a6:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 80058aa:	fa0a fa83 	sxtah	sl, sl, r3
 80058ae:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 80058b2:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 80058b6:	e7dd      	b.n	8005874 <lv_obj_align_to+0x228>
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 80058b8:	8b2b      	ldrh	r3, [r5, #24]
 80058ba:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 80058be:	ebaa 0a03 	sub.w	sl, sl, r3
 80058c2:	8b33      	ldrh	r3, [r6, #24]
 80058c4:	449a      	add	sl, r3
 80058c6:	8ab3      	ldrh	r3, [r6, #20]
 80058c8:	ebaa 0a03 	sub.w	sl, sl, r3
 80058cc:	ebaa 0a0c 	sub.w	sl, sl, ip
 80058d0:	e7d0      	b.n	8005874 <lv_obj_align_to+0x228>
        x = - pleft;
 80058d2:	f1cc 0a00 	rsb	sl, ip, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80058d6:	8b74      	ldrh	r4, [r6, #26]
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 80058d8:	fa0f fa8a 	sxth.w	sl, sl
 80058dc:	3401      	adds	r4, #1
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 80058de:	8af3      	ldrh	r3, [r6, #22]
 80058e0:	e7cd      	b.n	800587e <lv_obj_align_to+0x232>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80058e2:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 80058e6:	8ab3      	ldrh	r3, [r6, #20]
 80058e8:	f10a 0a01 	add.w	sl, sl, #1
 80058ec:	ebaa 0a03 	sub.w	sl, sl, r3
 80058f0:	8b2b      	ldrh	r3, [r5, #24]
        x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2 - pleft;
 80058f2:	f3ca 30c0 	ubfx	r0, sl, #15, #1
 80058f6:	3301      	adds	r3, #1
 80058f8:	fa00 f08a 	sxtah	r0, r0, sl
 80058fc:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005900:	eba3 030a 	sub.w	r3, r3, sl
 8005904:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005908:	fa0a fa83 	sxtah	sl, sl, r3
 800590c:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 8005910:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005914:	e7df      	b.n	80058d6 <lv_obj_align_to+0x28a>
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005916:	8b2b      	ldrh	r3, [r5, #24]
 8005918:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 800591c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005920:	8b33      	ldrh	r3, [r6, #24]
 8005922:	449a      	add	sl, r3
 8005924:	8ab3      	ldrh	r3, [r6, #20]
 8005926:	ebaa 0a03 	sub.w	sl, sl, r3
 800592a:	ebaa 0a0c 	sub.w	sl, sl, ip
 800592e:	e7d2      	b.n	80058d6 <lv_obj_align_to+0x28a>
        x = -lv_obj_get_width(obj) - pleft;
 8005930:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005934:	8b2b      	ldrh	r3, [r5, #24]
 8005936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800593a:	ebaa 0a03 	sub.w	sl, sl, r3
        y = - ptop;
 800593e:	424c      	negs	r4, r1
        x = lv_obj_get_width(base) - pleft;
 8005940:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005944:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005948:	b224      	sxth	r4, r4
        break;
 800594a:	e706      	b.n	800575a <lv_obj_align_to+0x10e>
        x = -lv_obj_get_width(obj) - pleft;
 800594c:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005950:	8b2b      	ldrh	r3, [r5, #24]
 8005952:	f10a 3aff 	add.w	sl, sl, #4294967295
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005956:	8b74      	ldrh	r4, [r6, #26]
 8005958:	ebaa 0a03 	sub.w	sl, sl, r3
 800595c:	3401      	adds	r4, #1
 800595e:	8af3      	ldrh	r3, [r6, #22]
 8005960:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005964:	1ae4      	subs	r4, r4, r3
 8005966:	8b6b      	ldrh	r3, [r5, #26]
 8005968:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 800596c:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8005970:	3301      	adds	r3, #1
 8005972:	fa00 f084 	sxtah	r0, r0, r4
 8005976:	8aec      	ldrh	r4, [r5, #22]
 8005978:	1b1b      	subs	r3, r3, r4
 800597a:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800597e:	fa04 f383 	sxtah	r3, r4, r3
 8005982:	eb01 0463 	add.w	r4, r1, r3, asr #1
 8005986:	e6cf      	b.n	8005728 <lv_obj_align_to+0xdc>
        x = -lv_obj_get_width(obj) - pleft;
 8005988:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 800598c:	8b2b      	ldrh	r3, [r5, #24]
 800598e:	f10a 3aff 	add.w	sl, sl, #4294967295
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005992:	ebaa 0a03 	sub.w	sl, sl, r3
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005996:	8aec      	ldrh	r4, [r5, #22]
 8005998:	8b6b      	ldrh	r3, [r5, #26]
        x = lv_obj_get_width(base) - pleft;
 800599a:	ebaa 0a0c 	sub.w	sl, sl, ip
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 800599e:	1ae4      	subs	r4, r4, r3
 80059a0:	8b73      	ldrh	r3, [r6, #26]
        x = lv_obj_get_width(base) - pleft;
 80059a2:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 80059a6:	441c      	add	r4, r3
 80059a8:	e799      	b.n	80058de <lv_obj_align_to+0x292>
 80059aa:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 80059ae:	8ab3      	ldrh	r3, [r6, #20]
 80059b0:	f10a 0a01 	add.w	sl, sl, #1
 80059b4:	e7c1      	b.n	800593a <lv_obj_align_to+0x2ee>
 80059b6:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 80059ba:	8ab3      	ldrh	r3, [r6, #20]
 80059bc:	f10a 0a01 	add.w	sl, sl, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80059c0:	8b74      	ldrh	r4, [r6, #26]
 80059c2:	8b6a      	ldrh	r2, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80059c4:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80059c8:	3401      	adds	r4, #1
 80059ca:	8af3      	ldrh	r3, [r6, #22]
 80059cc:	3201      	adds	r2, #1
        x = lv_obj_get_width(base) - pleft;
 80059ce:	ebaa 0a0c 	sub.w	sl, sl, ip
 80059d2:	1ae4      	subs	r4, r4, r3
 80059d4:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 80059d8:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 80059dc:	fa00 f084 	sxtah	r0, r0, r4
 80059e0:	8aec      	ldrh	r4, [r5, #22]
 80059e2:	1b12      	subs	r2, r2, r4
 80059e4:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 80059e8:	fa04 f282 	sxtah	r2, r4, r2
 80059ec:	eb01 0462 	add.w	r4, r1, r2, asr #1
 80059f0:	e69a      	b.n	8005728 <lv_obj_align_to+0xdc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80059f2:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 80059f6:	8ab3      	ldrh	r3, [r6, #20]
 80059f8:	f10a 0a01 	add.w	sl, sl, #1
 80059fc:	e7c9      	b.n	8005992 <lv_obj_align_to+0x346>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 80059fe:	2400      	movs	r4, #0
 8005a00:	e64c      	b.n	800569c <lv_obj_align_to+0x50>

08005a02 <scroll_by_raw>:
 *   STATIC FUNCTIONS
 **********************/

static void scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
    if(x == 0 && y == 0) return;
 8005a02:	ea51 0302 	orrs.w	r3, r1, r2
{
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	4604      	mov	r4, r0
 8005a0a:	460d      	mov	r5, r1
 8005a0c:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return;
 8005a0e:	d01a      	beq.n	8005a46 <scroll_by_raw+0x44>

    lv_obj_allocate_spec_attr(obj);
 8005a10:	f7fe fabc 	bl	8003f8c <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 8005a14:	68a3      	ldr	r3, [r4, #8]
    obj->spec_attr->scroll.y += y;

    lv_obj_move_children_by(obj, x, y, true);
 8005a16:	4629      	mov	r1, r5
 8005a18:	4620      	mov	r0, r4
    obj->spec_attr->scroll.x += x;
 8005a1a:	8a1a      	ldrh	r2, [r3, #16]
 8005a1c:	442a      	add	r2, r5
 8005a1e:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8005a20:	8a5a      	ldrh	r2, [r3, #18]
 8005a22:	4432      	add	r2, r6
 8005a24:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8005a26:	2301      	movs	r3, #1
 8005a28:	4632      	mov	r2, r6
 8005a2a:	f7ff f8e4 	bl	8004bf6 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	210b      	movs	r1, #11
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7fc f860 	bl	8001af8 <lv_event_send>
    if(res != LV_RES_OK) return;
 8005a38:	2801      	cmp	r0, #1
 8005a3a:	d104      	bne.n	8005a46 <scroll_by_raw+0x44>
    lv_obj_invalidate(obj);
 8005a3c:	4620      	mov	r0, r4
}
 8005a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(obj);
 8005a42:	f7ff b981 	b.w	8004d48 <lv_obj_invalidate>
}
 8005a46:	bd70      	pop	{r4, r5, r6, pc}

08005a48 <scroll_anim_ready_cb>:
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 8005a48:	2200      	movs	r2, #0
 8005a4a:	210a      	movs	r1, #10
 8005a4c:	6800      	ldr	r0, [r0, #0]
 8005a4e:	f7fc b853 	b.w	8001af8 <lv_event_send>

08005a52 <lv_obj_set_scrollbar_mode>:
{
 8005a52:	b538      	push	{r3, r4, r5, lr}
 8005a54:	4604      	mov	r4, r0
 8005a56:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 8005a58:	f7fe fa98 	bl	8003f8c <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8005a5c:	68a2      	ldr	r2, [r4, #8]
 8005a5e:	7e13      	ldrb	r3, [r2, #24]
 8005a60:	f003 0103 	and.w	r1, r3, #3
 8005a64:	42a9      	cmp	r1, r5
 8005a66:	d007      	beq.n	8005a78 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 8005a68:	f365 0301 	bfi	r3, r5, #0, #2
    lv_obj_invalidate(obj);
 8005a6c:	4620      	mov	r0, r4
    obj->spec_attr->scrollbar_mode = mode;
 8005a6e:	7613      	strb	r3, [r2, #24]
}
 8005a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 8005a74:	f7ff b968 	b.w	8004d48 <lv_obj_invalidate>
}
 8005a78:	bd38      	pop	{r3, r4, r5, pc}

08005a7a <lv_obj_set_scroll_dir>:
{
 8005a7a:	b538      	push	{r3, r4, r5, lr}
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005a80:	f7fe fa84 	bl	8003f8c <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 8005a84:	68aa      	ldr	r2, [r5, #8]
 8005a86:	7e53      	ldrb	r3, [r2, #25]
 8005a88:	f003 010f 	and.w	r1, r3, #15
 8005a8c:	42a1      	cmp	r1, r4
        obj->spec_attr->scroll_dir = dir;
 8005a8e:	bf1c      	itt	ne
 8005a90:	f364 0303 	bfine	r3, r4, #0, #4
 8005a94:	7653      	strbne	r3, [r2, #25]
}
 8005a96:	bd38      	pop	{r3, r4, r5, pc}

08005a98 <lv_obj_set_scroll_snap_x>:
{
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005a9e:	f7fe fa75 	bl	8003f8c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 8005aa2:	68ab      	ldr	r3, [r5, #8]
 8005aa4:	7e1a      	ldrb	r2, [r3, #24]
 8005aa6:	f364 0283 	bfi	r2, r4, #2, #2
 8005aaa:	761a      	strb	r2, [r3, #24]
}
 8005aac:	bd38      	pop	{r3, r4, r5, pc}

08005aae <lv_obj_set_scroll_snap_y>:
{
 8005aae:	b538      	push	{r3, r4, r5, lr}
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005ab4:	f7fe fa6a 	bl	8003f8c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 8005ab8:	68ab      	ldr	r3, [r5, #8]
 8005aba:	7e1a      	ldrb	r2, [r3, #24]
 8005abc:	f364 1205 	bfi	r2, r4, #4, #2
 8005ac0:	761a      	strb	r2, [r3, #24]
}
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}

08005ac4 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8005ac4:	6883      	ldr	r3, [r0, #8]
 8005ac6:	b11b      	cbz	r3, 8005ad0 <lv_obj_get_scrollbar_mode+0xc>
 8005ac8:	7e18      	ldrb	r0, [r3, #24]
 8005aca:	f000 0003 	and.w	r0, r0, #3
 8005ace:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8005ad0:	2003      	movs	r0, #3
}
 8005ad2:	4770      	bx	lr

08005ad4 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8005ad4:	6883      	ldr	r3, [r0, #8]
 8005ad6:	b11b      	cbz	r3, 8005ae0 <lv_obj_get_scroll_dir+0xc>
 8005ad8:	7e58      	ldrb	r0, [r3, #25]
 8005ada:	f000 000f 	and.w	r0, r0, #15
 8005ade:	4770      	bx	lr
    else return LV_DIR_ALL;
 8005ae0:	200f      	movs	r0, #15
}
 8005ae2:	4770      	bx	lr

08005ae4 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8005ae4:	6880      	ldr	r0, [r0, #8]
 8005ae6:	b110      	cbz	r0, 8005aee <lv_obj_get_scroll_snap_x+0xa>
 8005ae8:	7e00      	ldrb	r0, [r0, #24]
 8005aea:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 8005aee:	4770      	bx	lr

08005af0 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8005af0:	6880      	ldr	r0, [r0, #8]
 8005af2:	b110      	cbz	r0, 8005afa <lv_obj_get_scroll_snap_y+0xa>
 8005af4:	7e00      	ldrb	r0, [r0, #24]
 8005af6:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 8005afa:	4770      	bx	lr

08005afc <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8005afc:	6880      	ldr	r0, [r0, #8]
 8005afe:	b110      	cbz	r0, 8005b06 <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 8005b00:	8a00      	ldrh	r0, [r0, #16]
 8005b02:	4240      	negs	r0, r0
 8005b04:	b200      	sxth	r0, r0
}
 8005b06:	4770      	bx	lr

08005b08 <scroll_x_anim>:
{
 8005b08:	b508      	push	{r3, lr}
 8005b0a:	4603      	mov	r3, r0
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8005b0c:	f7ff fff6 	bl	8005afc <lv_obj_get_scroll_x>
 8005b10:	4401      	add	r1, r0
 8005b12:	2200      	movs	r2, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	b209      	sxth	r1, r1
}
 8005b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8005b1c:	f7ff bf71 	b.w	8005a02 <scroll_by_raw>

08005b20 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8005b20:	6880      	ldr	r0, [r0, #8]
 8005b22:	b110      	cbz	r0, 8005b2a <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 8005b24:	8a40      	ldrh	r0, [r0, #18]
 8005b26:	4240      	negs	r0, r0
 8005b28:	b200      	sxth	r0, r0
}
 8005b2a:	4770      	bx	lr

08005b2c <scroll_y_anim>:
{
 8005b2c:	b508      	push	{r3, lr}
 8005b2e:	4603      	mov	r3, r0
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8005b30:	f7ff fff6 	bl	8005b20 <lv_obj_get_scroll_y>
 8005b34:	4401      	add	r1, r0
 8005b36:	4618      	mov	r0, r3
 8005b38:	b20a      	sxth	r2, r1
 8005b3a:	2100      	movs	r1, #0
}
 8005b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8005b40:	f7ff bf5f 	b.w	8005a02 <scroll_by_raw>

08005b44 <lv_obj_get_scroll_top>:
 8005b44:	f7ff bfec 	b.w	8005b20 <lv_obj_get_scroll_y>

08005b48 <lv_obj_get_scroll_bottom>:
{
 8005b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b4c:	4606      	mov	r6, r0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005b4e:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005b50:	4d26      	ldr	r5, [pc, #152]	; (8005bec <lv_obj_get_scroll_bottom+0xa4>)
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005b52:	4630      	mov	r0, r6
 8005b54:	f001 fd7c 	bl	8007650 <lv_obj_get_child_cnt>
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d835      	bhi.n	8005bc8 <lv_obj_get_scroll_bottom+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005b5c:	f241 0210 	movw	r2, #4112	; 0x1010
 8005b60:	2100      	movs	r1, #0
 8005b62:	4630      	mov	r0, r6
 8005b64:	f001 fa18 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005b68:	f241 0211 	movw	r2, #4113	; 0x1011
 8005b6c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005b6e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005b70:	4630      	mov	r0, r6
 8005b72:	f001 fa11 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005b76:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005b7a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f001 fa0a 	bl	8006f98 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8005b84:	f515 4fc0 	cmn.w	r5, #24576	; 0x6000
 8005b88:	4681      	mov	r9, r0
 8005b8a:	d005      	beq.n	8005b98 <lv_obj_get_scroll_bottom+0x50>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8005b8c:	eb08 0700 	add.w	r7, r8, r0
 8005b90:	8b73      	ldrh	r3, [r6, #26]
 8005b92:	1aff      	subs	r7, r7, r3
 8005b94:	443d      	add	r5, r7
 8005b96:	b22d      	sxth	r5, r5
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f7ff f803 	bl	8004ba4 <lv_obj_get_self_height>
 8005b9e:	4607      	mov	r7, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7fe ff82 	bl	8004aaa <lv_obj_get_height>
 8005ba6:	eb04 0108 	add.w	r1, r4, r8
 8005baa:	eb01 0249 	add.w	r2, r1, r9, lsl #1
 8005bae:	19d4      	adds	r4, r2, r7
 8005bb0:	1a23      	subs	r3, r4, r0
    self_h -= lv_obj_get_scroll_y(obj);
 8005bb2:	4630      	mov	r0, r6
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8005bb4:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 8005bb6:	f7ff ffb3 	bl	8005b20 <lv_obj_get_scroll_y>
 8005bba:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 8005bbc:	b200      	sxth	r0, r0
}
 8005bbe:	42a8      	cmp	r0, r5
 8005bc0:	bfb8      	it	lt
 8005bc2:	4628      	movlt	r0, r5
 8005bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f001 fd31 	bl	8007632 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005bd4:	4607      	mov	r7, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005bd6:	f7fd ff13 	bl	8003a00 <lv_obj_has_flag_any>
 8005bda:	b920      	cbnz	r0, 8005be6 <lv_obj_get_scroll_bottom+0x9e>
        child_res = LV_MAX(child_res, child->coords.y2);
 8005bdc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005be0:	429d      	cmp	r5, r3
 8005be2:	bfb8      	it	lt
 8005be4:	461d      	movlt	r5, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005be6:	3401      	adds	r4, #1
 8005be8:	e7b3      	b.n	8005b52 <lv_obj_get_scroll_bottom+0xa>
 8005bea:	bf00      	nop
 8005bec:	ffffa000 	.word	0xffffa000

08005bf0 <lv_obj_get_scroll_left>:
{
 8005bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005bf4:	f241 426a 	movw	r2, #5226	; 0x146a
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	f001 f9cc 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005c00:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8005c02:	2801      	cmp	r0, #1
 8005c04:	d006      	beq.n	8005c14 <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 8005c06:	68a8      	ldr	r0, [r5, #8]
 8005c08:	b110      	cbz	r0, 8005c10 <lv_obj_get_scroll_left+0x20>
        return -obj->spec_attr->scroll.x;
 8005c0a:	8a00      	ldrh	r0, [r0, #16]
 8005c0c:	4240      	negs	r0, r0
 8005c0e:	b200      	sxth	r0, r0
}
 8005c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c14:	f241 0213 	movw	r2, #4115	; 0x1013
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4628      	mov	r0, r5
    lv_coord_t x1 = LV_COORD_MAX;
 8005c1c:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
 8005c20:	f001 f9ba 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c24:	f241 0212 	movw	r2, #4114	; 0x1012
 8005c28:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c2a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c2c:	4628      	mov	r0, r5
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005c2e:	2600      	movs	r6, #0
 8005c30:	f001 f9b2 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005c34:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005c38:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f001 f9ab 	bl	8006f98 <lv_obj_get_style_prop>
 8005c42:	4680      	mov	r8, r0
 8005c44:	4628      	mov	r0, r5
 8005c46:	f001 fd03 	bl	8007650 <lv_obj_get_child_cnt>
 8005c4a:	4286      	cmp	r6, r0
 8005c4c:	d328      	bcc.n	8005ca0 <lv_obj_get_scroll_left+0xb0>
    if(x1 != LV_COORD_MAX) {
 8005c4e:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005c52:	fa1f fa8a 	uxth.w	sl, sl
 8005c56:	fa1f f888 	uxth.w	r8, r8
 8005c5a:	bf1b      	ittet	ne
 8005c5c:	8aa8      	ldrhne	r0, [r5, #20]
 8005c5e:	eb0a 0608 	addne.w	r6, sl, r8
        child_res = LV_COORD_MIN;
 8005c62:	4e18      	ldreq	r6, [pc, #96]	; (8005cc4 <lv_obj_get_scroll_left+0xd4>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005c64:	1836      	addne	r6, r6, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005c66:	4628      	mov	r0, r5
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8005c68:	bf1c      	itt	ne
 8005c6a:	eba6 0609 	subne.w	r6, r6, r9
 8005c6e:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8005c70:	f7fe ff8b 	bl	8004b8a <lv_obj_get_self_width>
 8005c74:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005c76:	4628      	mov	r0, r5
 8005c78:	f7fe ff11 	bl	8004a9e <lv_obj_get_width>
 8005c7c:	eb0a 0307 	add.w	r3, sl, r7
 8005c80:	4602      	mov	r2, r0
    self_w += lv_obj_get_scroll_x(obj);
 8005c82:	4628      	mov	r0, r5
 8005c84:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 8005c88:	eb03 0409 	add.w	r4, r3, r9
 8005c8c:	f7ff ff36 	bl	8005afc <lv_obj_get_scroll_x>
 8005c90:	b2a4      	uxth	r4, r4
 8005c92:	4404      	add	r4, r0
 8005c94:	1aa0      	subs	r0, r4, r2
    return LV_MAX(child_res, self_w);
 8005c96:	b200      	sxth	r0, r0
 8005c98:	42b0      	cmp	r0, r6
 8005c9a:	bfb8      	it	lt
 8005c9c:	4630      	movlt	r0, r6
 8005c9e:	e7b7      	b.n	8005c10 <lv_obj_get_scroll_left+0x20>
       lv_obj_t * child = lv_obj_get_child(obj, i);
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f001 fcc5 	bl	8007632 <lv_obj_get_child>
       if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
       lv_obj_t * child = lv_obj_get_child(obj, i);
 8005cac:	4604      	mov	r4, r0
       if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005cae:	f7fd fea7 	bl	8003a00 <lv_obj_has_flag_any>
 8005cb2:	b920      	cbnz	r0, 8005cbe <lv_obj_get_scroll_left+0xce>
        x1 = LV_MIN(x1, child->coords.x1);
 8005cb4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8005cb8:	4599      	cmp	r9, r3
 8005cba:	bfa8      	it	ge
 8005cbc:	4699      	movge	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7c0      	b.n	8005c44 <lv_obj_get_scroll_left+0x54>
 8005cc2:	bf00      	nop
 8005cc4:	ffffa000 	.word	0xffffa000

08005cc8 <lv_obj_get_scroll_right>:
{
 8005cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005ccc:	f241 426a 	movw	r2, #5226	; 0x146a
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	f001 f960 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005cd8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8005cda:	2801      	cmp	r0, #1
 8005cdc:	d14f      	bne.n	8005d7e <lv_obj_get_scroll_right+0xb6>
        if(obj->spec_attr == NULL) return 0;
 8005cde:	68b0      	ldr	r0, [r6, #8]
 8005ce0:	b108      	cbz	r0, 8005ce6 <lv_obj_get_scroll_right+0x1e>
        return obj->spec_attr->scroll.x;
 8005ce2:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
}
 8005ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005cea:	4621      	mov	r1, r4
 8005cec:	4630      	mov	r0, r6
 8005cee:	f001 fca0 	bl	8007632 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005cf6:	4605      	mov	r5, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005cf8:	f7fd fe82 	bl	8003a00 <lv_obj_has_flag_any>
 8005cfc:	b920      	cbnz	r0, 8005d08 <lv_obj_get_scroll_right+0x40>
        child_res = LV_MAX(child_res, child->coords.x2);
 8005cfe:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8005d02:	4598      	cmp	r8, r3
 8005d04:	bfb8      	it	lt
 8005d06:	4698      	movlt	r8, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005d08:	3401      	adds	r4, #1
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f001 fca0 	bl	8007650 <lv_obj_get_child_cnt>
 8005d10:	4284      	cmp	r4, r0
 8005d12:	d3ea      	bcc.n	8005cea <lv_obj_get_scroll_right+0x22>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005d14:	f241 0213 	movw	r2, #4115	; 0x1013
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f001 f93c 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d20:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005d24:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d26:	2100      	movs	r1, #0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f001 f935 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d2e:	f241 0232 	movw	r2, #4146	; 0x1032
 8005d32:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d34:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d36:	4630      	mov	r0, r6
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8005d38:	b2ac      	uxth	r4, r5
 8005d3a:	f001 f92d 	bl	8006f98 <lv_obj_get_style_prop>
 8005d3e:	fa1f f980 	uxth.w	r9, r0
 8005d42:	8b30      	ldrh	r0, [r6, #24]
 8005d44:	fa19 f585 	uxtah	r5, r9, r5
 8005d48:	1a2d      	subs	r5, r5, r0
    self_w = lv_obj_get_self_width(obj);
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7fe ff1d 	bl	8004b8a <lv_obj_get_self_width>
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8005d50:	4445      	add	r5, r8
    self_w = lv_obj_get_self_width(obj);
 8005d52:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005d54:	4630      	mov	r0, r6
 8005d56:	f7fe fea2 	bl	8004a9e <lv_obj_get_width>
 8005d5a:	19e2      	adds	r2, r4, r7
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8005d5c:	b2ad      	uxth	r5, r5
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005d5e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
    return LV_MAX(child_res, self_w);
 8005d62:	b22d      	sxth	r5, r5
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005d64:	eb02 0408 	add.w	r4, r2, r8
 8005d68:	1a23      	subs	r3, r4, r0
    self_w -= lv_obj_get_scroll_x(obj);
 8005d6a:	4630      	mov	r0, r6
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8005d6c:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 8005d6e:	f7ff fec5 	bl	8005afc <lv_obj_get_scroll_x>
 8005d72:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 8005d74:	b200      	sxth	r0, r0
 8005d76:	42a8      	cmp	r0, r5
 8005d78:	bfb8      	it	lt
 8005d7a:	4628      	movlt	r0, r5
 8005d7c:	e7b3      	b.n	8005ce6 <lv_obj_get_scroll_right+0x1e>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005d7e:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8005d80:	f8df 8004 	ldr.w	r8, [pc, #4]	; 8005d88 <lv_obj_get_scroll_right+0xc0>
 8005d84:	e7c1      	b.n	8005d0a <lv_obj_get_scroll_right+0x42>
 8005d86:	bf00      	nop
 8005d88:	ffffa000 	.word	0xffffa000

08005d8c <lv_obj_get_scroll_end>:
{
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	460c      	mov	r4, r1
    a = lv_anim_get(obj, scroll_x_anim);
 8005d90:	490d      	ldr	r1, [pc, #52]	; (8005dc8 <lv_obj_get_scroll_end+0x3c>)
{
 8005d92:	4605      	mov	r5, r0
    a = lv_anim_get(obj, scroll_x_anim);
 8005d94:	f010 fe06 	bl	80169a4 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8005d98:	b168      	cbz	r0, 8005db6 <lv_obj_get_scroll_end+0x2a>
 8005d9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	b218      	sxth	r0, r3
 8005da0:	8020      	strh	r0, [r4, #0]
    a = lv_anim_get(obj, scroll_y_anim);
 8005da2:	4628      	mov	r0, r5
 8005da4:	4909      	ldr	r1, [pc, #36]	; (8005dcc <lv_obj_get_scroll_end+0x40>)
 8005da6:	f010 fdfd 	bl	80169a4 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8005daa:	b140      	cbz	r0, 8005dbe <lv_obj_get_scroll_end+0x32>
 8005dac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005dae:	4240      	negs	r0, r0
 8005db0:	b200      	sxth	r0, r0
 8005db2:	8060      	strh	r0, [r4, #2]
}
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7ff fea0 	bl	8005afc <lv_obj_get_scroll_x>
 8005dbc:	e7f0      	b.n	8005da0 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff feae 	bl	8005b20 <lv_obj_get_scroll_y>
 8005dc4:	e7f5      	b.n	8005db2 <lv_obj_get_scroll_end+0x26>
 8005dc6:	bf00      	nop
 8005dc8:	08005b09 	.word	0x08005b09
 8005dcc:	08005b2d 	.word	0x08005b2d

08005dd0 <lv_obj_scroll_by>:
{
 8005dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd2:	4616      	mov	r6, r2
 8005dd4:	b093      	sub	sp, #76	; 0x4c
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
    if(x == 0 && y == 0) return;
 8005dda:	ea51 0206 	orrs.w	r2, r1, r6
 8005dde:	d05c      	beq.n	8005e9a <lv_obj_scroll_by+0xca>
    if(anim_en == LV_ANIM_ON) {
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d15c      	bne.n	8005e9e <lv_obj_scroll_by+0xce>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8005de4:	f001 fc02 	bl	80075ec <lv_obj_get_disp>
 8005de8:	4607      	mov	r7, r0
        lv_anim_init(&a);
 8005dea:	a801      	add	r0, sp, #4
 8005dec:	f010 fd4e 	bl	801688c <lv_anim_init>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8005df0:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <lv_obj_scroll_by+0xe8>)
    a->var = var;
 8005df2:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8005df4:	9304      	str	r3, [sp, #16]
        if(x) {
 8005df6:	b33d      	cbz	r5, 8005e48 <lv_obj_scroll_by+0x78>
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2109      	movs	r1, #9
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7fb fe7b 	bl	8001af8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8005e02:	2801      	cmp	r0, #1
 8005e04:	d149      	bne.n	8005e9a <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, x);
 8005e06:	4638      	mov	r0, r7
 8005e08:	f010 fb7c 	bl	8016504 <lv_disp_get_hor_res>
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f340 005d 	sbfx	r0, r0, #1, #30
 8005e14:	f010 fddc 	bl	80169d0 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8005e18:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8005e1c:	bf28      	it	cs
 8005e1e:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8005e22:	28c8      	cmp	r0, #200	; 0xc8
 8005e24:	bf38      	it	cc
 8005e26:	20c8      	movcc	r0, #200	; 0xc8
 8005e28:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f7ff fe66 	bl	8005afc <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + x);
 8005e30:	4243      	negs	r3, r0
 8005e32:	1a2d      	subs	r5, r5, r0
            lv_anim_start(&a);
 8005e34:	a801      	add	r0, sp, #4
    a->current_value = start;
 8005e36:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->exec_cb = exec_cb;
 8005e3a:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <lv_obj_scroll_by+0xec>)
    a->end_value = end;
 8005e3c:	950a      	str	r5, [sp, #40]	; 0x28
    a->exec_cb = exec_cb;
 8005e3e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8005e40:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <lv_obj_scroll_by+0xf0>)
 8005e42:	9307      	str	r3, [sp, #28]
 8005e44:	f010 fd68 	bl	8016918 <lv_anim_start>
        if(y) {
 8005e48:	b33e      	cbz	r6, 8005e9a <lv_obj_scroll_by+0xca>
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2109      	movs	r1, #9
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7fb fe52 	bl	8001af8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8005e54:	2801      	cmp	r0, #1
 8005e56:	d120      	bne.n	8005e9a <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, y);
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f010 fb63 	bl	8016524 <lv_disp_get_ver_res>
 8005e5e:	4632      	mov	r2, r6
 8005e60:	2100      	movs	r1, #0
 8005e62:	f340 005d 	sbfx	r0, r0, #1, #30
 8005e66:	f010 fdb3 	bl	80169d0 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8005e6a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8005e6e:	bf28      	it	cs
 8005e70:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8005e74:	28c8      	cmp	r0, #200	; 0xc8
 8005e76:	bf38      	it	cc
 8005e78:	20c8      	movcc	r0, #200	; 0xc8
 8005e7a:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7ff fe4f 	bl	8005b20 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + y);
 8005e82:	4243      	negs	r3, r0
 8005e84:	1a30      	subs	r0, r6, r0
    a->current_value = start;
 8005e86:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->exec_cb = exec_cb;
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <lv_obj_scroll_by+0xf4>)
    a->end_value = end;
 8005e8c:	900a      	str	r0, [sp, #40]	; 0x28
            lv_anim_start(&a);
 8005e8e:	a801      	add	r0, sp, #4
    a->exec_cb = exec_cb;
 8005e90:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <lv_obj_scroll_by+0xf0>)
 8005e94:	9307      	str	r3, [sp, #28]
 8005e96:	f010 fd3f 	bl	8016918 <lv_anim_start>
}
 8005e9a:	b013      	add	sp, #76	; 0x4c
 8005e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(obj, scroll_y_anim);
 8005e9e:	4909      	ldr	r1, [pc, #36]	; (8005ec4 <lv_obj_scroll_by+0xf4>)
 8005ea0:	f010 fd0e 	bl	80168c0 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8005ea4:	4905      	ldr	r1, [pc, #20]	; (8005ebc <lv_obj_scroll_by+0xec>)
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f010 fd0a 	bl	80168c0 <lv_anim_del>
        scroll_by_raw(obj, x, y);
 8005eac:	4632      	mov	r2, r6
 8005eae:	4629      	mov	r1, r5
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f7ff fda6 	bl	8005a02 <scroll_by_raw>
 8005eb6:	e7f0      	b.n	8005e9a <lv_obj_scroll_by+0xca>
 8005eb8:	08005a49 	.word	0x08005a49
 8005ebc:	08005b09 	.word	0x08005b09
 8005ec0:	080169ed 	.word	0x080169ed
 8005ec4:	08005b2d 	.word	0x08005b2d

08005ec8 <scroll_area_into_view>:
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value, lv_anim_enable_t anim_en)
{
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b089      	sub	sp, #36	; 0x24
 8005ece:	4680      	mov	r8, r0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005ed0:	4608      	mov	r0, r1
{
 8005ed2:	4691      	mov	r9, r2
 8005ed4:	9101      	str	r1, [sp, #4]
 8005ed6:	9303      	str	r3, [sp, #12]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8005ed8:	f001 fba8 	bl	800762c <lv_obj_get_parent>
 8005edc:	4606      	mov	r6, r0
    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 8005ede:	f7ff fdf9 	bl	8005ad4 <lv_obj_get_scroll_dir>
 8005ee2:	9000      	str	r0, [sp, #0]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f7ff fe03 	bl	8005af0 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8005eea:	4682      	mov	sl, r0
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f000 80ca 	beq.w	8006086 <scroll_area_into_view+0x1be>
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	f103 0714 	add.w	r7, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005ef8:	f241 0210 	movw	r2, #4112	; 0x1010
 8005efc:	2100      	movs	r1, #0
 8005efe:	4630      	mov	r0, r6
 8005f00:	f001 f84a 	bl	8006f98 <lv_obj_get_style_prop>
 8005f04:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005f06:	f241 0211 	movw	r2, #4113	; 0x1011
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4630      	mov	r0, r6
    else area_tmp = area;

    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN);
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005f0e:	b2a4      	uxth	r4, r4
 8005f10:	f001 f842 	bl	8006f98 <lv_obj_get_style_prop>
 8005f14:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8005f18:	8af1      	ldrh	r1, [r6, #22]
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005f1a:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005f1e:	1aa5      	subs	r5, r4, r2
 8005f20:	fa12 f280 	uxtah	r2, r2, r0
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005f24:	88fb      	ldrh	r3, [r7, #6]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005f26:	4630      	mov	r0, r6
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005f28:	440d      	add	r5, r1
 8005f2a:	8879      	ldrh	r1, [r7, #2]
 8005f2c:	b292      	uxth	r2, r2
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005f2e:	9306      	str	r3, [sp, #24]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005f30:	1a6d      	subs	r5, r5, r1
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005f32:	8b71      	ldrh	r1, [r6, #26]
 8005f34:	9207      	str	r2, [sp, #28]
 8005f36:	9102      	str	r1, [sp, #8]
 8005f38:	1a51      	subs	r1, r2, r1
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8005f3a:	b22d      	sxth	r5, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8005f3c:	4419      	add	r1, r3
 8005f3e:	b209      	sxth	r1, r1
 8005f40:	9105      	str	r1, [sp, #20]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005f42:	f7fe fdb2 	bl	8004aaa <lv_obj_get_height>
    if((top_diff > 0 && bottom_diff > 0)) y_scroll = 0;
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8005f4a:	9004      	str	r0, [sp, #16]
    if((top_diff > 0 && bottom_diff > 0)) y_scroll = 0;
 8005f4c:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8005f50:	f340 809b 	ble.w	800608a <scroll_area_into_view+0x1c2>
 8005f54:	2900      	cmp	r1, #0
 8005f56:	dc05      	bgt.n	8005f64 <scroll_area_into_view+0x9c>
    else if(top_diff > 0) {
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff fde1 	bl	8005b20 <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 8005f5e:	1b40      	subs	r0, r0, r5
 8005f60:	2800      	cmp	r0, #0
 8005f62:	da00      	bge.n	8005f66 <scroll_area_into_view+0x9e>
 8005f64:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8005f66:	f1ba 0f02 	cmp.w	sl, #2
 8005f6a:	f000 809c 	beq.w	80060a6 <scroll_area_into_view+0x1de>
 8005f6e:	f1ba 0f03 	cmp.w	sl, #3
 8005f72:	f000 809e 	beq.w	80060b2 <scroll_area_into_view+0x1ea>
 8005f76:	f1ba 0f01 	cmp.w	sl, #1
 8005f7a:	d104      	bne.n	8005f86 <scroll_area_into_view+0xbe>
    case LV_SCROLL_SNAP_START:
        snap_goal = parent->coords.y1 + ptop;
        act = area_tmp->y1 + y_scroll;
        y_scroll += snap_goal - act;
 8005f7c:	8af5      	ldrh	r5, [r6, #22]
 8005f7e:	4425      	add	r5, r4
 8005f80:	887c      	ldrh	r4, [r7, #2]
 8005f82:	1b2d      	subs	r5, r5, r4
        y_scroll += snap_goal - act;
        break;
    case LV_SCROLL_SNAP_CENTER:
        snap_goal = parent->coords.y1 + ptop + parent_h / 2;
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
        y_scroll += snap_goal - act;
 8005f84:	b22d      	sxth	r5, r5
        break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff fdac 	bl	8005ae4 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	b110      	cbz	r0, 8005f96 <scroll_area_into_view+0xce>
 8005f90:	9b01      	ldr	r3, [sp, #4]
 8005f92:	f103 0814 	add.w	r8, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005f96:	f241 0212 	movw	r2, #4114	; 0x1012
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 fffb 	bl	8006f98 <lv_obj_get_style_prop>
 8005fa2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005fa4:	f241 0213 	movw	r2, #4115	; 0x1013
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4630      	mov	r0, r6
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN);
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8005fac:	b2bf      	uxth	r7, r7
 8005fae:	f000 fff3 	bl	8006f98 <lv_obj_get_style_prop>
 8005fb2:	f8b9 2000 	ldrh.w	r2, [r9]
 8005fb6:	8ab3      	ldrh	r3, [r6, #20]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8005fb8:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8005fbc:	1abc      	subs	r4, r7, r2
 8005fbe:	fa12 f080 	uxtah	r0, r2, r0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8005fc2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8005fc6:	441c      	add	r4, r3
 8005fc8:	f8b8 3000 	ldrh.w	r3, [r8]
 8005fcc:	b280      	uxth	r0, r0
 8005fce:	1ae4      	subs	r4, r4, r3
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8005fd0:	8b33      	ldrh	r3, [r6, #24]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8005fd2:	b224      	sxth	r4, r4
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8005fd4:	1ac2      	subs	r2, r0, r3
    if((left_diff > 0 && right_diff > 0)) x_scroll = 0;
 8005fd6:	2c00      	cmp	r4, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8005fd8:	440a      	add	r2, r1
 8005fda:	b212      	sxth	r2, r2
    if((left_diff > 0 && right_diff > 0)) x_scroll = 0;
 8005fdc:	f340 8082 	ble.w	80060e4 <scroll_area_into_view+0x21c>
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	dc05      	bgt.n	8005ff0 <scroll_area_into_view+0x128>
    else if(left_diff > 0) {
        x_scroll = left_diff;
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff fe03 	bl	8005bf0 <lv_obj_get_scroll_left>
        if(sl + x_scroll > 0) x_scroll = 0;
 8005fea:	4420      	add	r0, r4
 8005fec:	2800      	cmp	r0, #0
 8005fee:	dd00      	ble.n	8005ff2 <scroll_area_into_view+0x12a>
 8005ff0:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7fe fd53 	bl	8004a9e <lv_obj_get_width>
    switch(snap_x) {
 8005ff8:	f1ba 0f02 	cmp.w	sl, #2
 8005ffc:	d07e      	beq.n	80060fc <scroll_area_into_view+0x234>
 8005ffe:	f1ba 0f03 	cmp.w	sl, #3
 8006002:	f000 8083 	beq.w	800610c <scroll_area_into_view+0x244>
 8006006:	f1ba 0f01 	cmp.w	sl, #1
 800600a:	d105      	bne.n	8006018 <scroll_area_into_view+0x150>
    case LV_SCROLL_SNAP_START:
        snap_goal = parent->coords.x1 + pleft;
        act = area_tmp->x1 + x_scroll;
        x_scroll += snap_goal - act;
 800600c:	8ab4      	ldrh	r4, [r6, #20]
 800600e:	443c      	add	r4, r7
 8006010:	f8b8 7000 	ldrh.w	r7, [r8]
 8006014:	1be4      	subs	r4, r4, r7
        break;
    case LV_SCROLL_SNAP_END:
        snap_goal = parent->coords.x2 - pright;
        act = area_tmp->x2 + x_scroll;
        x_scroll += snap_goal - act;
 8006016:	b224      	sxth	r4, r4
        x_scroll += snap_goal - act;
        break;
    }

    /*Remove any pending scroll animations.*/
    lv_anim_del(parent, scroll_x_anim);
 8006018:	4949      	ldr	r1, [pc, #292]	; (8006140 <scroll_area_into_view+0x278>)
 800601a:	4630      	mov	r0, r6
 800601c:	f010 fc50 	bl	80168c0 <lv_anim_del>
    lv_anim_del(parent, scroll_y_anim);
 8006020:	4948      	ldr	r1, [pc, #288]	; (8006144 <scroll_area_into_view+0x27c>)
 8006022:	4630      	mov	r0, r6
 8006024:	f010 fc4c 	bl	80168c0 <lv_anim_del>

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8006028:	9b00      	ldr	r3, [sp, #0]
 800602a:	07d8      	lsls	r0, r3, #31
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800602c:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800602e:	4630      	mov	r0, r6
 8006030:	bf58      	it	pl
 8006032:	ea24 74e4 	bicpl.w	r4, r4, r4, asr #31
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8006036:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8006038:	9b00      	ldr	r3, [sp, #0]
 800603a:	bf58      	it	pl
 800603c:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
 8006040:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8006042:	9b00      	ldr	r3, [sp, #0]
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006044:	9a03      	ldr	r2, [sp, #12]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006046:	4621      	mov	r1, r4
 8006048:	bf58      	it	pl
 800604a:	ea25 75e5 	bicpl.w	r5, r5, r5, asr #31
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800604e:	071b      	lsls	r3, r3, #28
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006050:	f8b9 3000 	ldrh.w	r3, [r9]
 8006054:	bf58      	it	pl
 8006056:	ea05 75e5 	andpl.w	r5, r5, r5, asr #31
 800605a:	2a00      	cmp	r2, #0
 800605c:	bf14      	ite	ne
 800605e:	4622      	movne	r2, r4
 8006060:	2200      	moveq	r2, #0
 8006062:	4413      	add	r3, r2
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006064:	bf14      	ite	ne
 8006066:	462a      	movne	r2, r5
 8006068:	2200      	moveq	r2, #0
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800606a:	f8a9 3000 	strh.w	r3, [r9]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800606e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8006072:	4413      	add	r3, r2
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006074:	462a      	mov	r2, r5
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006076:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800607a:	9b03      	ldr	r3, [sp, #12]
}
 800607c:	b009      	add	sp, #36	; 0x24
 800607e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006082:	f7ff bea5 	b.w	8005dd0 <lv_obj_scroll_by>
    else area_tmp = area;
 8006086:	4647      	mov	r7, r8
 8006088:	e736      	b.n	8005ef8 <scroll_area_into_view+0x30>
    else if(bottom_diff > 0) {
 800608a:	2900      	cmp	r1, #0
 800608c:	f77f af6a 	ble.w	8005f64 <scroll_area_into_view+0x9c>
        y_scroll = -bottom_diff;
 8006090:	9902      	ldr	r1, [sp, #8]
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8006092:	4630      	mov	r0, r6
        y_scroll = -bottom_diff;
 8006094:	1a8d      	subs	r5, r1, r2
 8006096:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8006098:	f7ff fd56 	bl	8005b48 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 800609c:	b22d      	sxth	r5, r5
        if(sb + y_scroll < 0) y_scroll = 0;
 800609e:	42e8      	cmn	r0, r5
 80060a0:	f57f af61 	bpl.w	8005f66 <scroll_area_into_view+0x9e>
 80060a4:	e75e      	b.n	8005f64 <scroll_area_into_view+0x9c>
        y_scroll += snap_goal - act;
 80060a6:	8b75      	ldrh	r5, [r6, #26]
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	eba5 050b 	sub.w	r5, r5, fp
 80060ae:	1aed      	subs	r5, r5, r3
 80060b0:	e768      	b.n	8005f84 <scroll_area_into_view+0xbc>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80060b2:	eb04 050b 	add.w	r5, r4, fp
 80060b6:	9b04      	ldr	r3, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80060b8:	887a      	ldrh	r2, [r7, #2]
 80060ba:	eba3 0b05 	sub.w	fp, r3, r5
 80060be:	88fb      	ldrh	r3, [r7, #6]
        snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 80060c0:	f3cb 35c0 	ubfx	r5, fp, #15, #1
 80060c4:	3301      	adds	r3, #1
 80060c6:	fa05 fb8b 	sxtah	fp, r5, fp
        y_scroll += snap_goal - act;
 80060ca:	8af5      	ldrh	r5, [r6, #22]
 80060cc:	1a9b      	subs	r3, r3, r2
 80060ce:	4425      	add	r5, r4
 80060d0:	1aad      	subs	r5, r5, r2
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 80060d2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
        y_scroll += snap_goal - act;
 80060d6:	eb05 056b 	add.w	r5, r5, fp, asr #1
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 80060da:	fa02 f383 	sxtah	r3, r2, r3
        y_scroll += snap_goal - act;
 80060de:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 80060e2:	e74f      	b.n	8005f84 <scroll_area_into_view+0xbc>
    else if(right_diff > 0) {
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	dd83      	ble.n	8005ff0 <scroll_area_into_view+0x128>
        x_scroll = -right_diff;
 80060e8:	1a1c      	subs	r4, r3, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80060ea:	4630      	mov	r0, r6
        x_scroll = -right_diff;
 80060ec:	1a64      	subs	r4, r4, r1
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 80060ee:	f7ff fdeb 	bl	8005cc8 <lv_obj_get_scroll_right>
        x_scroll = -right_diff;
 80060f2:	b224      	sxth	r4, r4
        if(sr + x_scroll < 0) x_scroll = 0;
 80060f4:	42e0      	cmn	r0, r4
 80060f6:	f57f af7c 	bpl.w	8005ff2 <scroll_area_into_view+0x12a>
 80060fa:	e779      	b.n	8005ff0 <scroll_area_into_view+0x128>
        x_scroll += snap_goal - act;
 80060fc:	8b34      	ldrh	r4, [r6, #24]
 80060fe:	eba4 040b 	sub.w	r4, r4, fp
 8006102:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006106:	eba4 040b 	sub.w	r4, r4, fp
 800610a:	e784      	b.n	8006016 <scroll_area_into_view+0x14e>
        x_scroll += snap_goal - act;
 800610c:	8ab3      	ldrh	r3, [r6, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800610e:	f8b8 2000 	ldrh.w	r2, [r8]
 8006112:	443b      	add	r3, r7
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8006114:	445f      	add	r7, fp
        x_scroll += snap_goal - act;
 8006116:	1a9c      	subs	r4, r3, r2
 8006118:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800611c:	1bc0      	subs	r0, r0, r7
 800611e:	3301      	adds	r3, #1
 8006120:	1a9b      	subs	r3, r3, r2
        act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8006122:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006126:	fa02 f383 	sxtah	r3, r2, r3
        x_scroll += snap_goal - act;
 800612a:	eba4 0363 	sub.w	r3, r4, r3, asr #1
        snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800612e:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8006132:	fa04 f080 	sxtah	r0, r4, r0
        x_scroll += snap_goal - act;
 8006136:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800613a:	b204      	sxth	r4, r0
        break;
 800613c:	e76c      	b.n	8006018 <scroll_area_into_view+0x150>
 800613e:	bf00      	nop
 8006140:	08005b09 	.word	0x08005b09
 8006144:	08005b2d 	.word	0x08005b2d

08006148 <lv_obj_scroll_to_x>:
{
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	4605      	mov	r5, r0
 800614e:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_x_anim);
 8006150:	491e      	ldr	r1, [pc, #120]	; (80061cc <lv_obj_scroll_to_x+0x84>)
{
 8006152:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_x_anim);
 8006154:	f010 fbb4 	bl	80168c0 <lv_anim_del>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006158:	f241 426a 	movw	r2, #5226	; 0x146a
 800615c:	2100      	movs	r1, #0
 800615e:	4628      	mov	r0, r5
 8006160:	f000 ff1a 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006164:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006166:	2801      	cmp	r0, #1
 8006168:	d01b      	beq.n	80061a2 <lv_obj_scroll_to_x+0x5a>
        if(x > 0) {
 800616a:	2f00      	cmp	r7, #0
 800616c:	dd2b      	ble.n	80061c6 <lv_obj_scroll_to_x+0x7e>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800616e:	4628      	mov	r0, r5
 8006170:	f7ff fd3e 	bl	8005bf0 <lv_obj_get_scroll_left>
 8006174:	4604      	mov	r4, r0
 8006176:	4628      	mov	r0, r5
 8006178:	f7ff fda6 	bl	8005cc8 <lv_obj_get_scroll_right>
 800617c:	4404      	add	r4, r0
 800617e:	b224      	sxth	r4, r4
            if(x > scroll_max) x = scroll_max;
 8006180:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006184:	42a7      	cmp	r7, r4
 8006186:	bfa8      	it	ge
 8006188:	4627      	movge	r7, r4
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800618a:	4628      	mov	r0, r5
 800618c:	f7ff fcb6 	bl	8005afc <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8006190:	1bc0      	subs	r0, r0, r7
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 8006192:	4633      	mov	r3, r6
 8006194:	2200      	movs	r2, #0
 8006196:	b201      	sxth	r1, r0
 8006198:	4628      	mov	r0, r5
}
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 800619e:	f7ff be17 	b.w	8005dd0 <lv_obj_scroll_by>
        if(x < 0) {
 80061a2:	2f00      	cmp	r7, #0
 80061a4:	da0f      	bge.n	80061c6 <lv_obj_scroll_to_x+0x7e>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7ff fd22 	bl	8005bf0 <lv_obj_get_scroll_left>
 80061ac:	4604      	mov	r4, r0
 80061ae:	4628      	mov	r0, r5
 80061b0:	f7ff fd8a 	bl	8005cc8 <lv_obj_get_scroll_right>
 80061b4:	1823      	adds	r3, r4, r0
 80061b6:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 80061b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x < -scroll_max) x = -scroll_max;
 80061bc:	425b      	negs	r3, r3
 80061be:	429f      	cmp	r7, r3
 80061c0:	dae3      	bge.n	800618a <lv_obj_scroll_to_x+0x42>
 80061c2:	b21f      	sxth	r7, r3
 80061c4:	e7e1      	b.n	800618a <lv_obj_scroll_to_x+0x42>
 80061c6:	2700      	movs	r7, #0
 80061c8:	e7df      	b.n	800618a <lv_obj_scroll_to_x+0x42>
 80061ca:	bf00      	nop
 80061cc:	08005b09 	.word	0x08005b09

080061d0 <lv_obj_scroll_to_y>:
{
 80061d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d4:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_y_anim);
 80061d6:	4911      	ldr	r1, [pc, #68]	; (800621c <lv_obj_scroll_to_y+0x4c>)
{
 80061d8:	4605      	mov	r5, r0
 80061da:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_y_anim);
 80061dc:	f010 fb70 	bl	80168c0 <lv_anim_del>
    if(y > 0) {
 80061e0:	2f00      	cmp	r7, #0
 80061e2:	dd19      	ble.n	8006218 <lv_obj_scroll_to_y+0x48>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 80061e4:	4628      	mov	r0, r5
 80061e6:	f7ff fc9b 	bl	8005b20 <lv_obj_get_scroll_y>
 80061ea:	4604      	mov	r4, r0
 80061ec:	4628      	mov	r0, r5
 80061ee:	f7ff fcab 	bl	8005b48 <lv_obj_get_scroll_bottom>
 80061f2:	4404      	add	r4, r0
 80061f4:	b224      	sxth	r4, r4
        if(y > scroll_max) y = scroll_max;
 80061f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80061fa:	42bc      	cmp	r4, r7
 80061fc:	bfa8      	it	ge
 80061fe:	463c      	movge	r4, r7
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8006200:	4628      	mov	r0, r5
 8006202:	f7ff fc8d 	bl	8005b20 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 8006206:	1b00      	subs	r0, r0, r4
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 8006208:	4633      	mov	r3, r6
 800620a:	2100      	movs	r1, #0
 800620c:	b202      	sxth	r2, r0
 800620e:	4628      	mov	r0, r5
}
 8006210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 8006214:	f7ff bddc 	b.w	8005dd0 <lv_obj_scroll_by>
 8006218:	2400      	movs	r4, #0
 800621a:	e7f1      	b.n	8006200 <lv_obj_scroll_to_y+0x30>
 800621c:	08005b2d 	.word	0x08005b2d

08006220 <lv_obj_scroll_to>:
{
 8006220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006222:	4604      	mov	r4, r0
 8006224:	4615      	mov	r5, r2
 8006226:	461a      	mov	r2, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	f7ff ff8d 	bl	8006148 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800622e:	9a01      	ldr	r2, [sp, #4]
 8006230:	4629      	mov	r1, r5
 8006232:	4620      	mov	r0, r4
}
 8006234:	b003      	add	sp, #12
 8006236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 800623a:	f7ff bfc9 	b.w	80061d0 <lv_obj_scroll_to_y>

0800623e <lv_obj_scroll_to_view_recursive>:
{
 800623e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006240:	4604      	mov	r4, r0
 8006242:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 8006244:	f7ff f9e8 	bl	8005618 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8006248:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 800624a:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 800624c:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800624e:	f001 f9ed 	bl	800762c <lv_obj_get_parent>
    lv_obj_t * child = obj;
 8006252:	4621      	mov	r1, r4
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006254:	4605      	mov	r5, r0
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8006256:	3414      	adds	r4, #20
    while(parent) {
 8006258:	b90d      	cbnz	r5, 800625e <lv_obj_scroll_to_view_recursive+0x20>
}
 800625a:	b002      	add	sp, #8
 800625c:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800625e:	4633      	mov	r3, r6
 8006260:	aa01      	add	r2, sp, #4
 8006262:	4620      	mov	r0, r4
 8006264:	f7ff fe30 	bl	8005ec8 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8006268:	4628      	mov	r0, r5
 800626a:	f001 f9df 	bl	800762c <lv_obj_get_parent>
 800626e:	4629      	mov	r1, r5
 8006270:	4605      	mov	r5, r0
 8006272:	e7f1      	b.n	8006258 <lv_obj_scroll_to_view_recursive+0x1a>

08006274 <lv_obj_get_scrollbar_area>:
{
 8006274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006278:	f04f 37ff 	mov.w	r7, #4294967295
{
 800627c:	b08f      	sub	sp, #60	; 0x3c
 800627e:	460d      	mov	r5, r1
 8006280:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006282:	2200      	movs	r2, #0
{
 8006284:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 8006286:	463b      	mov	r3, r7
 8006288:	4628      	mov	r0, r5
 800628a:	4611      	mov	r1, r2
 800628c:	9700      	str	r7, [sp, #0]
 800628e:	f010 fbeb 	bl	8016a68 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8006292:	2200      	movs	r2, #0
 8006294:	463b      	mov	r3, r7
 8006296:	4630      	mov	r0, r6
 8006298:	4611      	mov	r1, r2
 800629a:	9700      	str	r7, [sp, #0]
 800629c:	f010 fbe4 	bl	8016a68 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 80062a0:	2110      	movs	r1, #16
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7fd fba5 	bl	80039f2 <lv_obj_has_flag>
 80062a8:	9002      	str	r0, [sp, #8]
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d047      	beq.n	800633e <lv_obj_get_scrollbar_area+0xca>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 80062ae:	4620      	mov	r0, r4
 80062b0:	f7ff fc08 	bl	8005ac4 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 80062b4:	4680      	mov	r8, r0
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d041      	beq.n	800633e <lv_obj_get_scrollbar_area+0xca>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80062ba:	2000      	movs	r0, #0
 80062bc:	f010 f99a 	bl	80165f4 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 80062c0:	f1b8 0f02 	cmp.w	r8, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80062c4:	4682      	mov	sl, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 80062c6:	d037      	beq.n	8006338 <lv_obj_get_scrollbar_area+0xc4>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff fc29 	bl	8005b20 <lv_obj_get_scroll_y>
 80062ce:	4607      	mov	r7, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 80062d0:	4620      	mov	r0, r4
 80062d2:	f7ff fc39 	bl	8005b48 <lv_obj_get_scroll_bottom>
 80062d6:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff fc89 	bl	8005bf0 <lv_obj_get_scroll_left>
 80062de:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7ff fcf1 	bl	8005cc8 <lv_obj_get_scroll_right>
 80062e6:	900a      	str	r0, [sp, #40]	; 0x28
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff fbf3 	bl	8005ad4 <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 80062ee:	f010 090c 	ands.w	r9, r0, #12
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 80062f2:	4683      	mov	fp, r0
    if((dir & LV_DIR_VER) &&
 80062f4:	d00e      	beq.n	8006314 <lv_obj_get_scrollbar_area+0xa0>
 80062f6:	f1b8 0f01 	cmp.w	r8, #1
 80062fa:	d030      	beq.n	800635e <lv_obj_get_scrollbar_area+0xea>
            ((sm == LV_SCROLLBAR_MODE_ON) ||
 80062fc:	f1b8 0f03 	cmp.w	r8, #3
 8006300:	d120      	bne.n	8006344 <lv_obj_get_scrollbar_area+0xd0>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006302:	2f00      	cmp	r7, #0
 8006304:	dc2b      	bgt.n	800635e <lv_obj_get_scrollbar_area+0xea>
 8006306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	bfd4      	ite	le
 800630c:	f04f 0900 	movle.w	r9, #0
 8006310:	f04f 0901 	movgt.w	r9, #1
    if((dir & LV_DIR_HOR) &&
 8006314:	f01b 0f03 	tst.w	fp, #3
 8006318:	d127      	bne.n	800636a <lv_obj_get_scrollbar_area+0xf6>
    if(!hor_draw && !ver_draw) return;
 800631a:	f1b9 0f00 	cmp.w	r9, #0
 800631e:	d00e      	beq.n	800633e <lv_obj_get_scrollbar_area+0xca>
 8006320:	2300      	movs	r3, #0
 8006322:	9302      	str	r3, [sp, #8]
 8006324:	e02e      	b.n	8006384 <lv_obj_get_scrollbar_area+0x110>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8006326:	4650      	mov	r0, sl
 8006328:	f7fb ff00 	bl	800212c <lv_indev_get_scroll_obj>
 800632c:	4284      	cmp	r4, r0
 800632e:	d0cb      	beq.n	80062c8 <lv_obj_get_scrollbar_area+0x54>
            indev = lv_indev_get_next(indev);
 8006330:	4650      	mov	r0, sl
 8006332:	f010 f95f 	bl	80165f4 <lv_indev_get_next>
 8006336:	4682      	mov	sl, r0
        while(indev) {
 8006338:	f1ba 0f00 	cmp.w	sl, #0
 800633c:	d1f3      	bne.n	8006326 <lv_obj_get_scrollbar_area+0xb2>
}
 800633e:	b00f      	add	sp, #60	; 0x3c
 8006340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006344:	f1b8 0f02 	cmp.w	r8, #2
 8006348:	d10c      	bne.n	8006364 <lv_obj_get_scrollbar_area+0xf0>
                    (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800634a:	4650      	mov	r0, sl
 800634c:	f7fb fee0 	bl	8002110 <lv_indev_get_scroll_dir>
 8006350:	f1a0 030c 	sub.w	r3, r0, #12
 8006354:	f1d3 0900 	rsbs	r9, r3, #0
 8006358:	eb49 0903 	adc.w	r9, r9, r3
 800635c:	e7da      	b.n	8006314 <lv_obj_get_scrollbar_area+0xa0>
        ver_draw = true;
 800635e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006362:	e7d7      	b.n	8006314 <lv_obj_get_scrollbar_area+0xa0>
    bool ver_draw = false;
 8006364:	f04f 0900 	mov.w	r9, #0
 8006368:	e7d4      	b.n	8006314 <lv_obj_get_scrollbar_area+0xa0>
    if((dir & LV_DIR_HOR) &&
 800636a:	f1b8 0f01 	cmp.w	r8, #1
 800636e:	d009      	beq.n	8006384 <lv_obj_get_scrollbar_area+0x110>
            ((sm == LV_SCROLLBAR_MODE_ON) ||
 8006370:	f1b8 0f03 	cmp.w	r8, #3
 8006374:	f040 80c1 	bne.w	80064fa <lv_obj_get_scrollbar_area+0x286>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8006378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800637a:	2b00      	cmp	r3, #0
 800637c:	dc02      	bgt.n	8006384 <lv_obj_get_scrollbar_area+0x110>
 800637e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006380:	2b00      	cmp	r3, #0
 8006382:	ddca      	ble.n	800631a <lv_obj_get_scrollbar_area+0xa6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006384:	f241 0210 	movw	r2, #4112	; 0x1010
 8006388:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800638c:	4620      	mov	r0, r4
 800638e:	f000 fe03 	bl	8006f98 <lv_obj_get_style_prop>
 8006392:	9008      	str	r0, [sp, #32]
    return (lv_coord_t)v.num;
 8006394:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006398:	f241 0213 	movw	r2, #4115	; 0x1013
 800639c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80063a0:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 80063a2:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80063a4:	f000 fdf8 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80063a8:	f241 0201 	movw	r2, #4097	; 0x1001
 80063ac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80063b0:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 fdf0 	bl	8006f98 <lv_obj_get_style_prop>
 80063b8:	9006      	str	r0, [sp, #24]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7fe fb75 	bl	8004aaa <lv_obj_get_height>
 80063c0:	4680      	mov	r8, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 80063c2:	4620      	mov	r0, r4
 80063c4:	f7fe fb6b 	bl	8004a9e <lv_obj_get_width>
 80063c8:	9004      	str	r0, [sp, #16]
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	f000 809f 	beq.w	8006510 <lv_obj_get_scrollbar_area+0x29c>
 80063d2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80063d6:	4413      	add	r3, r2
 80063d8:	b21b      	sxth	r3, r3
 80063da:	9305      	str	r3, [sp, #20]
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 80063dc:	9b02      	ldr	r3, [sp, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8099 	beq.w	8006516 <lv_obj_get_scrollbar_area+0x2a2>
 80063e4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80063e8:	4413      	add	r3, r2
 80063ea:	fa0f fa83 	sxth.w	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80063ee:	2221      	movs	r2, #33	; 0x21
 80063f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fdcf 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80063fa:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 80063fc:	2801      	cmp	r0, #1
 80063fe:	f240 808d 	bls.w	800651c <lv_obj_get_scrollbar_area+0x2a8>
    if(ver_draw && content_h) {
 8006402:	f1b9 0f00 	cmp.w	r9, #0
 8006406:	f040 8094 	bne.w	8006532 <lv_obj_get_scrollbar_area+0x2be>
    if(hor_draw && content_w) {
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d096      	beq.n	800633e <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_w = obj_w + sl + sr;
 8006410:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800641a:	4413      	add	r3, r2
 800641c:	fa1f f983 	uxth.w	r9, r3
 8006420:	9b04      	ldr	r3, [sp, #16]
 8006422:	fa19 f383 	uxtah	r3, r9, r3
 8006426:	b219      	sxth	r1, r3
    if(hor_draw && content_w) {
 8006428:	2900      	cmp	r1, #0
 800642a:	d088      	beq.n	800633e <lv_obj_get_scrollbar_area+0xca>
        hor_area->y2 = obj->coords.y2 - side_space;
 800642c:	8b62      	ldrh	r2, [r4, #26]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800642e:	2000      	movs	r0, #0
        hor_area->y2 = obj->coords.y2 - side_space;
 8006430:	f8bd a01c 	ldrh.w	sl, [sp, #28]
        hor_area->x1 = obj->coords.x1;
 8006434:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006438:	eba2 020a 	sub.w	r2, r2, sl
        hor_area->y1 = hor_area->y2 - tickness;
 800643c:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        hor_area->x1 = obj->coords.x1;
 8006440:	802b      	strh	r3, [r5, #0]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006442:	b292      	uxth	r2, r2
        hor_area->x2 = obj->coords.x2;
 8006444:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006448:	80ea      	strh	r2, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness;
 800644a:	eba2 0208 	sub.w	r2, r2, r8
        hor_area->x2 = obj->coords.x2;
 800644e:	80ab      	strh	r3, [r5, #4]
        hor_area->y1 = hor_area->y2 - tickness;
 8006450:	806a      	strh	r2, [r5, #2]
        lv_coord_t sb_w = ((obj_w - end_space * 2 - ver_reg_space) * obj_w) / content_w;
 8006452:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8006456:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800645a:	9a05      	ldr	r2, [sp, #20]
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	9a04      	ldr	r2, [sp, #16]
 8006460:	4353      	muls	r3, r2
 8006462:	fb93 f3f1 	sdiv	r3, r3, r1
 8006466:	b21f      	sxth	r7, r3
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006468:	f010 f86c 	bl	8016544 <lv_disp_get_dpi>
 800646c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006470:	0040      	lsls	r0, r0, #1
 8006472:	28ef      	cmp	r0, #239	; 0xef
 8006474:	f340 817a 	ble.w	800676c <lv_obj_get_scrollbar_area+0x4f8>
 8006478:	2000      	movs	r0, #0
 800647a:	f010 f863 	bl	8016544 <lv_disp_get_dpi>
 800647e:	220a      	movs	r2, #10
 8006480:	2150      	movs	r1, #80	; 0x50
 8006482:	fb00 1002 	mla	r0, r0, r2, r1
 8006486:	22a0      	movs	r2, #160	; 0xa0
 8006488:	fb90 f0f2 	sdiv	r0, r0, r2
 800648c:	4287      	cmp	r7, r0
 800648e:	dc13      	bgt.n	80064b8 <lv_obj_get_scrollbar_area+0x244>
 8006490:	2000      	movs	r0, #0
 8006492:	f010 f857 	bl	8016544 <lv_disp_get_dpi>
 8006496:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800649a:	0040      	lsls	r0, r0, #1
 800649c:	28ef      	cmp	r0, #239	; 0xef
 800649e:	f340 8167 	ble.w	8006770 <lv_obj_get_scrollbar_area+0x4fc>
 80064a2:	2000      	movs	r0, #0
 80064a4:	f010 f84e 	bl	8016544 <lv_disp_get_dpi>
 80064a8:	220a      	movs	r2, #10
 80064aa:	2150      	movs	r1, #80	; 0x50
 80064ac:	23a0      	movs	r3, #160	; 0xa0
 80064ae:	fb00 1002 	mla	r0, r0, r2, r1
 80064b2:	fb90 f3f3 	sdiv	r3, r0, r3
 80064b6:	b21f      	sxth	r7, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 80064b8:	fa0f f989 	sxth.w	r9, r9
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80064bc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80064c0:	f8bd b014 	ldrh.w	fp, [sp, #20]
        if(scroll_w <= 0) {
 80064c4:	f1b9 0f00 	cmp.w	r9, #0
 80064c8:	8b62      	ldrh	r2, [r4, #26]
 80064ca:	f300 8153 	bgt.w	8006774 <lv_obj_get_scrollbar_area+0x500>
            hor_area->x1 = obj->coords.x1 + end_space;
 80064ce:	8aa3      	ldrh	r3, [r4, #20]
            hor_area->y2 = obj->coords.y2 - side_space;
 80064d0:	eba2 0a0a 	sub.w	sl, r2, sl
            hor_area->y1 = hor_area->y2 - tickness + 1;
 80064d4:	f1c8 0801 	rsb	r8, r8, #1
            hor_area->x1 = obj->coords.x1 + end_space;
 80064d8:	4433      	add	r3, r6
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80064da:	43f6      	mvns	r6, r6
            hor_area->y2 = obj->coords.y2 - side_space;
 80064dc:	fa1f fa8a 	uxth.w	sl, sl
            hor_area->x1 = obj->coords.x1 + end_space;
 80064e0:	802b      	strh	r3, [r5, #0]
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80064e2:	8b23      	ldrh	r3, [r4, #24]
            hor_area->y2 = obj->coords.y2 - side_space;
 80064e4:	f8a5 a006 	strh.w	sl, [r5, #6]
            hor_area->y1 = hor_area->y2 - tickness + 1;
 80064e8:	44c2      	add	sl, r8
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80064ea:	441e      	add	r6, r3
            hor_area->y1 = hor_area->y2 - tickness + 1;
 80064ec:	f8a5 a002 	strh.w	sl, [r5, #2]
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 80064f0:	eba6 0b0b 	sub.w	fp, r6, fp
 80064f4:	f8a5 b004 	strh.w	fp, [r5, #4]
 80064f8:	e721      	b.n	800633e <lv_obj_get_scrollbar_area+0xca>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80064fa:	f1b8 0f02 	cmp.w	r8, #2
 80064fe:	f47f af0c 	bne.w	800631a <lv_obj_get_scrollbar_area+0xa6>
                    (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8006502:	4650      	mov	r0, sl
 8006504:	f7fb fe04 	bl	8002110 <lv_indev_get_scroll_dir>
 8006508:	2803      	cmp	r0, #3
 800650a:	f47f af06 	bne.w	800631a <lv_obj_get_scrollbar_area+0xa6>
 800650e:	e739      	b.n	8006384 <lv_obj_get_scrollbar_area+0x110>
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 8006510:	f8cd 9014 	str.w	r9, [sp, #20]
 8006514:	e762      	b.n	80063dc <lv_obj_get_scrollbar_area+0x168>
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 8006516:	f8dd a008 	ldr.w	sl, [sp, #8]
 800651a:	e768      	b.n	80063ee <lv_obj_get_scrollbar_area+0x17a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800651c:	2231      	movs	r2, #49	; 0x31
 800651e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006522:	4620      	mov	r0, r4
 8006524:	f000 fd38 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006528:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800652a:	2801      	cmp	r0, #1
 800652c:	f63f af69 	bhi.w	8006402 <lv_obj_get_scrollbar_area+0x18e>
 8006530:	e705      	b.n	800633e <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_h = obj_h + st + sb;
 8006532:	fa1f f388 	uxth.w	r3, r8
 8006536:	930d      	str	r3, [sp, #52]	; 0x34
 8006538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653a:	441f      	add	r7, r3
 800653c:	b2bf      	uxth	r7, r7
 800653e:	fa17 f388 	uxtah	r3, r7, r8
 8006542:	b219      	sxth	r1, r3
    if(ver_draw && content_h) {
 8006544:	2900      	cmp	r1, #0
 8006546:	f43f af60 	beq.w	800640a <lv_obj_get_scrollbar_area+0x196>
       ver_area->y1 = obj->coords.y1;
 800654a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800654e:	2000      	movs	r0, #0
       ver_area->x2 = obj->coords.x2 - side_space;
 8006550:	8b22      	ldrh	r2, [r4, #24]
       ver_area->y1 = obj->coords.y1;
 8006552:	8073      	strh	r3, [r6, #2]
       ver_area->y2 = obj->coords.y2;
 8006554:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
       ver_area->x2 = obj->coords.x2 - side_space;
 8006558:	f8bd b01c 	ldrh.w	fp, [sp, #28]
       ver_area->y2 = obj->coords.y2;
 800655c:	80f3      	strh	r3, [r6, #6]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 800655e:	9b03      	ldr	r3, [sp, #12]
       ver_area->x2 = obj->coords.x2 - side_space;
 8006560:	eba2 020b 	sub.w	r2, r2, fp
       ver_area->x1 =ver_area->x2 - tickness;
 8006564:	f8bd 9018 	ldrh.w	r9, [sp, #24]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006568:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
       ver_area->x2 = obj->coords.x2 - side_space;
 800656c:	b292      	uxth	r2, r2
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 800656e:	eba3 030a 	sub.w	r3, r3, sl
       ver_area->x2 = obj->coords.x2 - side_space;
 8006572:	80b2      	strh	r2, [r6, #4]
       ver_area->x1 =ver_area->x2 - tickness;
 8006574:	eba2 0209 	sub.w	r2, r2, r9
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006578:	fb08 f303 	mul.w	r3, r8, r3
       ver_area->x1 =ver_area->x2 - tickness;
 800657c:	8032      	strh	r2, [r6, #0]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 800657e:	fb93 f3f1 	sdiv	r3, r3, r1
 8006582:	b21b      	sxth	r3, r3
 8006584:	930b      	str	r3, [sp, #44]	; 0x2c
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006586:	f00f ffdd 	bl	8016544 <lv_disp_get_dpi>
 800658a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800658e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006590:	0040      	lsls	r0, r0, #1
 8006592:	28ef      	cmp	r0, #239	; 0xef
 8006594:	dd43      	ble.n	800661e <lv_obj_get_scrollbar_area+0x3aa>
 8006596:	2000      	movs	r0, #0
 8006598:	f00f ffd4 	bl	8016544 <lv_disp_get_dpi>
 800659c:	220a      	movs	r2, #10
 800659e:	2150      	movs	r1, #80	; 0x50
 80065a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a2:	fb00 1002 	mla	r0, r0, r2, r1
 80065a6:	22a0      	movs	r2, #160	; 0xa0
 80065a8:	fb90 f0f2 	sdiv	r0, r0, r2
 80065ac:	4283      	cmp	r3, r0
 80065ae:	dc12      	bgt.n	80065d6 <lv_obj_get_scrollbar_area+0x362>
 80065b0:	2000      	movs	r0, #0
 80065b2:	f00f ffc7 	bl	8016544 <lv_disp_get_dpi>
 80065b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065ba:	0040      	lsls	r0, r0, #1
 80065bc:	28ef      	cmp	r0, #239	; 0xef
 80065be:	dd30      	ble.n	8006622 <lv_obj_get_scrollbar_area+0x3ae>
 80065c0:	2000      	movs	r0, #0
 80065c2:	f00f ffbf 	bl	8016544 <lv_disp_get_dpi>
 80065c6:	220a      	movs	r2, #10
 80065c8:	2150      	movs	r1, #80	; 0x50
 80065ca:	23a0      	movs	r3, #160	; 0xa0
 80065cc:	fb00 1002 	mla	r0, r0, r2, r1
 80065d0:	fb90 f3f3 	sdiv	r3, r0, r3
 80065d4:	b21b      	sxth	r3, r3
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80065d6:	fa1f f28a 	uxth.w	r2, sl
 80065da:	9908      	ldr	r1, [sp, #32]
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 80065dc:	b23f      	sxth	r7, r7
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80065de:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 80065e2:	920b      	str	r2, [sp, #44]	; 0x2c
        if(scroll_h <= 0) {
 80065e4:	8ae2      	ldrh	r2, [r4, #22]
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	fa12 f281 	uxtah	r2, r2, r1
 80065ec:	b291      	uxth	r1, r2
 80065ee:	dc1a      	bgt.n	8006626 <lv_obj_get_scrollbar_area+0x3b2>
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 80065f0:	8b63      	ldrh	r3, [r4, #26]
 80065f2:	ea6f 0808 	mvn.w	r8, r8
           ver_area->x1 =ver_area->x2 - tickness + 1;
 80065f6:	f1c9 0901 	rsb	r9, r9, #1
           ver_area->y1 = obj->coords.y1 + end_space;
 80065fa:	8071      	strh	r1, [r6, #2]
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 80065fc:	4498      	add	r8, r3
 80065fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006600:	eba8 0a03 	sub.w	sl, r8, r3
           ver_area->x2 = obj->coords.x2 - side_space;
 8006604:	8b23      	ldrh	r3, [r4, #24]
 8006606:	eba3 0b0b 	sub.w	fp, r3, fp
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 800660a:	f8a6 a006 	strh.w	sl, [r6, #6]
           ver_area->x2 = obj->coords.x2 - side_space;
 800660e:	fa1f fb8b 	uxth.w	fp, fp
 8006612:	f8a6 b004 	strh.w	fp, [r6, #4]
           ver_area->x1 =ver_area->x2 - tickness + 1;
 8006616:	44cb      	add	fp, r9
 8006618:	f8a6 b000 	strh.w	fp, [r6]
 800661c:	e6f5      	b.n	800640a <lv_obj_get_scrollbar_area+0x196>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800661e:	2001      	movs	r0, #1
 8006620:	e7c4      	b.n	80065ac <lv_obj_get_scrollbar_area+0x338>
 8006622:	2301      	movs	r3, #1
 8006624:	e7d7      	b.n	80065d6 <lv_obj_get_scrollbar_area+0x362>
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006628:	b29b      	uxth	r3, r3
 800662a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800662c:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
 8006630:	1a12      	subs	r2, r2, r0
 8006632:	1ad2      	subs	r2, r2, r3
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006634:	3b01      	subs	r3, #1
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006636:	b290      	uxth	r0, r2
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006638:	fa11 f282 	uxtah	r2, r1, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800663c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800663e:	fb10 f001 	smulbb	r0, r0, r1
 8006642:	fb90 f7f7 	sdiv	r7, r0, r7
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006646:	1bd7      	subs	r7, r2, r7
 8006648:	b23a      	sxth	r2, r7
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 800664a:	fa13 f787 	uxtah	r7, r3, r7
           ver_area->x2 = obj->coords.x2 - side_space;
 800664e:	8b23      	ldrh	r3, [r4, #24]
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006650:	8072      	strh	r2, [r6, #2]
           ver_area->x2 = obj->coords.x2 - side_space;
 8006652:	eba3 0b0b 	sub.w	fp, r3, fp
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006656:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
           ver_area->x2 = obj->coords.x2 - side_space;
 800665e:	fa1f fb8b 	uxth.w	fp, fp
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006662:	18fb      	adds	r3, r7, r3
           ver_area->x2 = obj->coords.x2 - side_space;
 8006664:	f8a6 b004 	strh.w	fp, [r6, #4]
           ver_area->x1 =ver_area->x2 - tickness;
 8006668:	ebab 0b09 	sub.w	fp, fp, r9
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 800666c:	429a      	cmp	r2, r3
           ver_area->x1 =ver_area->x2 - tickness;
 800666e:	f8a6 b000 	strh.w	fp, [r6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006672:	da2f      	bge.n	80066d4 <lv_obj_get_scrollbar_area+0x460>
               ver_area->y1 = obj->coords.y1 + end_space;
 8006674:	4447      	add	r7, r8
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006676:	2000      	movs	r0, #0
               ver_area->y1 = obj->coords.y1 + end_space;
 8006678:	b23f      	sxth	r7, r7
 800667a:	8077      	strh	r7, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800667c:	f00f ff62 	bl	8016544 <lv_disp_get_dpi>
 8006680:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006684:	0040      	lsls	r0, r0, #1
 8006686:	28ef      	cmp	r0, #239	; 0xef
 8006688:	dd68      	ble.n	800675c <lv_obj_get_scrollbar_area+0x4e8>
 800668a:	2000      	movs	r0, #0
 800668c:	f00f ff5a 	bl	8016544 <lv_disp_get_dpi>
 8006690:	230a      	movs	r3, #10
 8006692:	2250      	movs	r2, #80	; 0x50
 8006694:	fb00 2003 	mla	r0, r0, r3, r2
 8006698:	23a0      	movs	r3, #160	; 0xa0
 800669a:	fb90 f0f3 	sdiv	r0, r0, r3
 800669e:	4407      	add	r7, r0
 80066a0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80066a4:	429f      	cmp	r7, r3
 80066a6:	dd15      	ble.n	80066d4 <lv_obj_get_scrollbar_area+0x460>
 80066a8:	2000      	movs	r0, #0
 80066aa:	8877      	ldrh	r7, [r6, #2]
 80066ac:	f00f ff4a 	bl	8016544 <lv_disp_get_dpi>
 80066b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066b4:	0040      	lsls	r0, r0, #1
 80066b6:	28ef      	cmp	r0, #239	; 0xef
 80066b8:	dd52      	ble.n	8006760 <lv_obj_get_scrollbar_area+0x4ec>
 80066ba:	2000      	movs	r0, #0
 80066bc:	f00f ff42 	bl	8016544 <lv_disp_get_dpi>
 80066c0:	230a      	movs	r3, #10
 80066c2:	2250      	movs	r2, #80	; 0x50
 80066c4:	fb00 2003 	mla	r0, r0, r3, r2
 80066c8:	23a0      	movs	r3, #160	; 0xa0
 80066ca:	fb90 f0f3 	sdiv	r0, r0, r3
 80066ce:	b280      	uxth	r0, r0
 80066d0:	4407      	add	r7, r0
 80066d2:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - end_space) {
 80066d4:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 80066d8:	9803      	ldr	r0, [sp, #12]
 80066da:	eba2 030a 	sub.w	r3, r2, sl
 80066de:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80066e2:	1a1b      	subs	r3, r3, r0
 80066e4:	4299      	cmp	r1, r3
 80066e6:	f77f ae90 	ble.w	800640a <lv_obj_get_scrollbar_area+0x196>
               ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 80066ea:	eba2 0808 	sub.w	r8, r2, r8
 80066ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 80066f0:	2000      	movs	r0, #0
               ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 80066f2:	eba8 0a03 	sub.w	sl, r8, r3
 80066f6:	fa0f fa8a 	sxth.w	sl, sl
 80066fa:	f8a6 a006 	strh.w	sl, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 80066fe:	f00f ff21 	bl	8016544 <lv_disp_get_dpi>
 8006702:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006706:	0040      	lsls	r0, r0, #1
 8006708:	28ef      	cmp	r0, #239	; 0xef
 800670a:	dd2b      	ble.n	8006764 <lv_obj_get_scrollbar_area+0x4f0>
 800670c:	2000      	movs	r0, #0
 800670e:	f00f ff19 	bl	8016544 <lv_disp_get_dpi>
 8006712:	230a      	movs	r3, #10
 8006714:	2250      	movs	r2, #80	; 0x50
 8006716:	fb00 2003 	mla	r0, r0, r3, r2
 800671a:	23a0      	movs	r3, #160	; 0xa0
 800671c:	fb90 f0f3 	sdiv	r0, r0, r3
 8006720:	ebaa 0a00 	sub.w	sl, sl, r0
 8006724:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006728:	459a      	cmp	sl, r3
 800672a:	f6bf ae6e 	bge.w	800640a <lv_obj_get_scrollbar_area+0x196>
 800672e:	2000      	movs	r0, #0
 8006730:	88f7      	ldrh	r7, [r6, #6]
 8006732:	f00f ff07 	bl	8016544 <lv_disp_get_dpi>
 8006736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800673a:	0040      	lsls	r0, r0, #1
 800673c:	28ef      	cmp	r0, #239	; 0xef
 800673e:	dd13      	ble.n	8006768 <lv_obj_get_scrollbar_area+0x4f4>
 8006740:	2000      	movs	r0, #0
 8006742:	f00f feff 	bl	8016544 <lv_disp_get_dpi>
 8006746:	230a      	movs	r3, #10
 8006748:	2250      	movs	r2, #80	; 0x50
 800674a:	fb00 2003 	mla	r0, r0, r3, r2
 800674e:	23a0      	movs	r3, #160	; 0xa0
 8006750:	fb90 f0f3 	sdiv	r0, r0, r3
 8006754:	b280      	uxth	r0, r0
 8006756:	1a3f      	subs	r7, r7, r0
 8006758:	8077      	strh	r7, [r6, #2]
 800675a:	e656      	b.n	800640a <lv_obj_get_scrollbar_area+0x196>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800675c:	2001      	movs	r0, #1
 800675e:	e79e      	b.n	800669e <lv_obj_get_scrollbar_area+0x42a>
 8006760:	2001      	movs	r0, #1
 8006762:	e7b5      	b.n	80066d0 <lv_obj_get_scrollbar_area+0x45c>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006764:	2001      	movs	r0, #1
 8006766:	e7db      	b.n	8006720 <lv_obj_get_scrollbar_area+0x4ac>
 8006768:	2001      	movs	r0, #1
 800676a:	e7f4      	b.n	8006756 <lv_obj_get_scrollbar_area+0x4e2>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800676c:	2001      	movs	r0, #1
 800676e:	e68d      	b.n	800648c <lv_obj_get_scrollbar_area+0x218>
 8006770:	2701      	movs	r7, #1
 8006772:	e6a1      	b.n	80064b8 <lv_obj_get_scrollbar_area+0x244>
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006774:	9902      	ldr	r1, [sp, #8]
 8006776:	b2bb      	uxth	r3, r7
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006778:	8aa0      	ldrh	r0, [r4, #20]
            hor_area->y2 = obj->coords.y2 - side_space;
 800677a:	eba2 0a0a 	sub.w	sl, r2, sl
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 800677e:	eba1 0746 	sub.w	r7, r1, r6, lsl #1
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006782:	4430      	add	r0, r6
            hor_area->y2 = obj->coords.y2 - side_space;
 8006784:	fa1f fa8a 	uxth.w	sl, sl
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006788:	eba7 070b 	sub.w	r7, r7, fp
            hor_area->y2 = obj->coords.y2 - side_space;
 800678c:	f8a5 a006 	strh.w	sl, [r5, #6]
            hor_area->y1 = hor_area->y2 - tickness;
 8006790:	ebaa 0a08 	sub.w	sl, sl, r8
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006794:	1aff      	subs	r7, r7, r3
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006796:	3b01      	subs	r3, #1
            hor_area->y1 = hor_area->y2 - tickness;
 8006798:	f8a5 a002 	strh.w	sl, [r5, #2]
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 800679c:	b2b9      	uxth	r1, r7
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 800679e:	fa10 f787 	uxtah	r7, r0, r7
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 80067a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067a4:	fb11 f100 	smulbb	r1, r1, r0
 80067a8:	fb91 f1f9 	sdiv	r1, r1, r9
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 80067ac:	eba7 0901 	sub.w	r9, r7, r1
 80067b0:	fa0f f189 	sxth.w	r1, r9
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 80067b4:	fa13 f989 	uxtah	r9, r3, r9
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 80067b8:	9b03      	ldr	r3, [sp, #12]
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 80067ba:	8029      	strh	r1, [r5, #0]
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 80067bc:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 80067c0:	f8a5 9004 	strh.w	r9, [r5, #4]
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 80067c4:	18fb      	adds	r3, r7, r3
 80067c6:	4299      	cmp	r1, r3
 80067c8:	da2f      	bge.n	800682a <lv_obj_get_scrollbar_area+0x5b6>
                hor_area->x1 = obj->coords.x1 + end_space;
 80067ca:	4437      	add	r7, r6
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80067cc:	2000      	movs	r0, #0
                hor_area->x1 = obj->coords.x1 + end_space;
 80067ce:	b23f      	sxth	r7, r7
 80067d0:	802f      	strh	r7, [r5, #0]
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80067d2:	f00f feb7 	bl	8016544 <lv_disp_get_dpi>
 80067d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067da:	0040      	lsls	r0, r0, #1
 80067dc:	28ef      	cmp	r0, #239	; 0xef
 80067de:	dd66      	ble.n	80068ae <lv_obj_get_scrollbar_area+0x63a>
 80067e0:	2000      	movs	r0, #0
 80067e2:	f00f feaf 	bl	8016544 <lv_disp_get_dpi>
 80067e6:	230a      	movs	r3, #10
 80067e8:	2250      	movs	r2, #80	; 0x50
 80067ea:	fb00 2003 	mla	r0, r0, r3, r2
 80067ee:	23a0      	movs	r3, #160	; 0xa0
 80067f0:	fb90 f0f3 	sdiv	r0, r0, r3
 80067f4:	4407      	add	r7, r0
 80067f6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80067fa:	429f      	cmp	r7, r3
 80067fc:	dd15      	ble.n	800682a <lv_obj_get_scrollbar_area+0x5b6>
 80067fe:	2000      	movs	r0, #0
 8006800:	882f      	ldrh	r7, [r5, #0]
 8006802:	f00f fe9f 	bl	8016544 <lv_disp_get_dpi>
 8006806:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800680a:	0040      	lsls	r0, r0, #1
 800680c:	28ef      	cmp	r0, #239	; 0xef
 800680e:	dd50      	ble.n	80068b2 <lv_obj_get_scrollbar_area+0x63e>
 8006810:	2000      	movs	r0, #0
 8006812:	f00f fe97 	bl	8016544 <lv_disp_get_dpi>
 8006816:	230a      	movs	r3, #10
 8006818:	2250      	movs	r2, #80	; 0x50
 800681a:	fb00 2003 	mla	r0, r0, r3, r2
 800681e:	23a0      	movs	r3, #160	; 0xa0
 8006820:	fb90 f0f3 	sdiv	r0, r0, r3
 8006824:	b280      	uxth	r0, r0
 8006826:	4438      	add	r0, r7
 8006828:	80a8      	strh	r0, [r5, #4]
            if(hor_area->x2 > obj->coords.x2 - ver_reg_space - end_space) {
 800682a:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 800682e:	9b05      	ldr	r3, [sp, #20]
 8006830:	9903      	ldr	r1, [sp, #12]
 8006832:	1ac3      	subs	r3, r0, r3
 8006834:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006838:	1a5b      	subs	r3, r3, r1
 800683a:	429a      	cmp	r2, r3
 800683c:	f77f ad7f 	ble.w	800633e <lv_obj_get_scrollbar_area+0xca>
                hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 8006840:	1b86      	subs	r6, r0, r6
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006842:	2000      	movs	r0, #0
                hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 8006844:	eba6 0b0b 	sub.w	fp, r6, fp
 8006848:	fa0f fb8b 	sxth.w	fp, fp
 800684c:	f8a5 b004 	strh.w	fp, [r5, #4]
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006850:	f00f fe78 	bl	8016544 <lv_disp_get_dpi>
 8006854:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006858:	0040      	lsls	r0, r0, #1
 800685a:	28ef      	cmp	r0, #239	; 0xef
 800685c:	dd2b      	ble.n	80068b6 <lv_obj_get_scrollbar_area+0x642>
 800685e:	2000      	movs	r0, #0
 8006860:	f00f fe70 	bl	8016544 <lv_disp_get_dpi>
 8006864:	230a      	movs	r3, #10
 8006866:	2250      	movs	r2, #80	; 0x50
 8006868:	fb00 2003 	mla	r0, r0, r3, r2
 800686c:	23a0      	movs	r3, #160	; 0xa0
 800686e:	fb90 f0f3 	sdiv	r0, r0, r3
 8006872:	ebab 0b00 	sub.w	fp, fp, r0
 8006876:	f9b5 3000 	ldrsh.w	r3, [r5]
 800687a:	459b      	cmp	fp, r3
 800687c:	f6bf ad5f 	bge.w	800633e <lv_obj_get_scrollbar_area+0xca>
 8006880:	2000      	movs	r0, #0
 8006882:	88ac      	ldrh	r4, [r5, #4]
 8006884:	f00f fe5e 	bl	8016544 <lv_disp_get_dpi>
 8006888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800688c:	0040      	lsls	r0, r0, #1
 800688e:	28ef      	cmp	r0, #239	; 0xef
 8006890:	dd13      	ble.n	80068ba <lv_obj_get_scrollbar_area+0x646>
 8006892:	2000      	movs	r0, #0
 8006894:	f00f fe56 	bl	8016544 <lv_disp_get_dpi>
 8006898:	230a      	movs	r3, #10
 800689a:	2250      	movs	r2, #80	; 0x50
 800689c:	fb00 2003 	mla	r0, r0, r3, r2
 80068a0:	23a0      	movs	r3, #160	; 0xa0
 80068a2:	fb90 f0f3 	sdiv	r0, r0, r3
 80068a6:	b280      	uxth	r0, r0
 80068a8:	1a20      	subs	r0, r4, r0
 80068aa:	8028      	strh	r0, [r5, #0]
 80068ac:	e547      	b.n	800633e <lv_obj_get_scrollbar_area+0xca>
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80068ae:	2001      	movs	r0, #1
 80068b0:	e7a0      	b.n	80067f4 <lv_obj_get_scrollbar_area+0x580>
 80068b2:	2001      	movs	r0, #1
 80068b4:	e7b7      	b.n	8006826 <lv_obj_get_scrollbar_area+0x5b2>
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80068b6:	2001      	movs	r0, #1
 80068b8:	e7db      	b.n	8006872 <lv_obj_get_scrollbar_area+0x5fe>
 80068ba:	2001      	movs	r0, #1
 80068bc:	e7f4      	b.n	80068a8 <lv_obj_get_scrollbar_area+0x634>

080068be <lv_obj_scrollbar_invalidate>:
{
 80068be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 80068c0:	aa02      	add	r2, sp, #8
 80068c2:	4669      	mov	r1, sp
{
 80068c4:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 80068c6:	f7ff fcd5 	bl	8006274 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 80068ca:	4668      	mov	r0, sp
 80068cc:	f010 f8dd 	bl	8016a8a <lv_area_get_size>
 80068d0:	b918      	cbnz	r0, 80068da <lv_obj_scrollbar_invalidate+0x1c>
 80068d2:	a802      	add	r0, sp, #8
 80068d4:	f010 f8d9 	bl	8016a8a <lv_area_get_size>
 80068d8:	b178      	cbz	r0, 80068fa <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 80068da:	4668      	mov	r0, sp
 80068dc:	f010 f8d5 	bl	8016a8a <lv_area_get_size>
 80068e0:	b118      	cbz	r0, 80068ea <lv_obj_scrollbar_invalidate+0x2c>
 80068e2:	4669      	mov	r1, sp
 80068e4:	4620      	mov	r0, r4
 80068e6:	f7fe fa15 	bl	8004d14 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 80068ea:	a802      	add	r0, sp, #8
 80068ec:	f010 f8cd 	bl	8016a8a <lv_area_get_size>
 80068f0:	b118      	cbz	r0, 80068fa <lv_obj_scrollbar_invalidate+0x3c>
 80068f2:	a902      	add	r1, sp, #8
 80068f4:	4620      	mov	r0, r4
 80068f6:	f7fe fa0d 	bl	8004d14 <lv_obj_invalidate_area>
}
 80068fa:	b004      	add	sp, #16
 80068fc:	bd10      	pop	{r4, pc}
	...

08006900 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 8006900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4607      	mov	r7, r0
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006906:	4829      	ldr	r0, [pc, #164]	; (80069ac <trans_del+0xac>)
{
 8006908:	4690      	mov	r8, r2
 800690a:	460d      	mov	r5, r1
 800690c:	4699      	mov	r9, r3
    while(tr != NULL) {
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800690e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 80069ac <trans_del+0xac>
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006912:	f010 fc37 	bl	8017184 <_lv_ll_get_tail>
    bool removed = false;
 8006916:	2200      	movs	r2, #0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006918:	4604      	mov	r4, r0
    while(tr != NULL) {
 800691a:	b91c      	cbnz	r4, 8006924 <trans_del+0x24>

        }
        tr = tr_prev;
    }
    return removed;
}
 800691c:	4610      	mov	r0, r2
 800691e:	b003      	add	sp, #12
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 8006924:	454c      	cmp	r4, r9
 8006926:	d0f9      	beq.n	800691c <trans_del+0x1c>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006928:	4621      	mov	r1, r4
 800692a:	4658      	mov	r0, fp
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	f010 fc30 	bl	8017192 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006932:	6823      	ldr	r3, [r4, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006934:	4682      	mov	sl, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006936:	9a01      	ldr	r2, [sp, #4]
 8006938:	42bb      	cmp	r3, r7
 800693a:	d135      	bne.n	80069a8 <trans_del+0xa8>
 800693c:	68a3      	ldr	r3, [r4, #8]
 800693e:	42ab      	cmp	r3, r5
 8006940:	d002      	beq.n	8006948 <trans_del+0x48>
 8006942:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006946:	d12f      	bne.n	80069a8 <trans_del+0xa8>
 8006948:	88a3      	ldrh	r3, [r4, #4]
 800694a:	4543      	cmp	r3, r8
 800694c:	d003      	beq.n	8006956 <trans_del+0x56>
 800694e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006952:	4598      	cmp	r8, r3
 8006954:	d128      	bne.n	80069a8 <trans_del+0xa8>
 8006956:	2600      	movs	r6, #0
 8006958:	e021      	b.n	800699e <trans_del+0x9e>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8006960:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 8006964:	79d9      	ldrb	r1, [r3, #7]
 8006966:	0789      	lsls	r1, r1, #30
 8006968:	d518      	bpl.n	800699c <trans_del+0x9c>
 800696a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800696e:	d004      	beq.n	800697a <trans_del+0x7a>
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006976:	42ab      	cmp	r3, r5
 8006978:	d110      	bne.n	800699c <trans_del+0x9c>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800697a:	f850 000c 	ldr.w	r0, [r0, ip]
 800697e:	88a1      	ldrh	r1, [r4, #4]
 8006980:	f011 fb36 	bl	8017ff0 <lv_style_remove_prop>
                    lv_anim_del(tr, NULL);
 8006984:	2100      	movs	r1, #0
 8006986:	4620      	mov	r0, r4
 8006988:	f00f ff9a 	bl	80168c0 <lv_anim_del>
                    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800698c:	4621      	mov	r1, r4
 800698e:	4658      	mov	r0, fp
 8006990:	f010 fbba 	bl	8017108 <_lv_ll_remove>
                    lv_mem_free(tr);
 8006994:	4620      	mov	r0, r4
 8006996:	f010 fcf5 	bl	8017384 <lv_mem_free>
                    removed = true;
 800699a:	2201      	movs	r2, #1
            for(i = 0; i < obj->style_cnt; i++) {
 800699c:	3601      	adds	r6, #1
 800699e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069a0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80069a4:	42b3      	cmp	r3, r6
 80069a6:	d8d8      	bhi.n	800695a <trans_del+0x5a>
 80069a8:	4654      	mov	r4, sl
 80069aa:	e7b6      	b.n	800691a <trans_del+0x1a>
 80069ac:	2000b4f4 	.word	0x2000b4f4

080069b0 <refresh_children_style>:
{
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4606      	mov	r6, r0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80069b4:	2500      	movs	r5, #0
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 fe4a 	bl	8007650 <lv_obj_get_child_cnt>
 80069bc:	42a8      	cmp	r0, r5
 80069be:	d800      	bhi.n	80069c2 <refresh_children_style+0x12>
}
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80069c2:	4629      	mov	r1, r5
 80069c4:	4630      	mov	r0, r6
 80069c6:	f000 fe34 	bl	8007632 <lv_obj_get_child>
 80069ca:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
 80069cc:	f7fe f9bc 	bl	8004d48 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 80069d0:	2200      	movs	r2, #0
 80069d2:	2124      	movs	r1, #36	; 0x24
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7fb f88f 	bl	8001af8 <lv_event_send>
        lv_obj_invalidate(child);
 80069da:	4620      	mov	r0, r4
 80069dc:	f7fe f9b4 	bl	8004d48 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 80069e0:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80069e2:	3501      	adds	r5, #1
        refresh_children_style(child); /*Check children too*/
 80069e4:	f7ff ffe4 	bl	80069b0 <refresh_children_style>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80069e8:	e7e5      	b.n	80069b6 <refresh_children_style+0x6>

080069ea <get_trans_style>:
{
 80069ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 80069ec:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 80069ee:	4604      	mov	r4, r0
 80069f0:	460d      	mov	r5, r1
 80069f2:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 80069f4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80069f8:	2200      	movs	r2, #0
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d803      	bhi.n	8006a06 <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 80069fe:	d00e      	beq.n	8006a1e <get_trans_style+0x34>
 8006a00:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 8006a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8006a06:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006a0a:	79ce      	ldrb	r6, [r1, #7]
 8006a0c:	07b6      	lsls	r6, r6, #30
 8006a0e:	d504      	bpl.n	8006a1a <get_trans_style+0x30>
 8006a10:	6849      	ldr	r1, [r1, #4]
 8006a12:	f3c1 0117 	ubfx	r1, r1, #0, #24
 8006a16:	42a9      	cmp	r1, r5
 8006a18:	d0f2      	beq.n	8006a00 <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	e7ed      	b.n	80069fa <get_trans_style+0x10>
    obj->style_cnt++;
 8006a1e:	3301      	adds	r3, #1
 8006a20:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8006a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a26:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006a2a:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 8006a2c:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006a2e:	f010 fe41 	bl	80176b4 <lv_mem_realloc>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006a32:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006a34:	4602      	mov	r2, r0
        obj->styles[i] = obj->styles[i - 1];
 8006a36:	f1a0 0708 	sub.w	r7, r0, #8
 8006a3a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006a3e:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006a40:	3b01      	subs	r3, #1
 8006a42:	d116      	bne.n	8006a72 <get_trans_style+0x88>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8006a44:	4610      	mov	r0, r2
 8006a46:	2108      	movs	r1, #8
 8006a48:	f010 fe9c 	bl	8017784 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8006a4c:	2008      	movs	r0, #8
 8006a4e:	68e6      	ldr	r6, [r4, #12]
 8006a50:	f010 fe1a 	bl	8017688 <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 8006a54:	68e3      	ldr	r3, [r4, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8006a56:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	f011 faaa 	bl	8017fb2 <lv_style_init>
    obj->styles[0].is_trans = 1;
 8006a5e:	68e0      	ldr	r0, [r4, #12]
 8006a60:	79c3      	ldrb	r3, [r0, #7]
 8006a62:	f043 0302 	orr.w	r3, r3, #2
 8006a66:	71c3      	strb	r3, [r0, #7]
    obj->styles[0].selector = selector;
 8006a68:	6843      	ldr	r3, [r0, #4]
 8006a6a:	f365 0317 	bfi	r3, r5, #0, #24
 8006a6e:	6043      	str	r3, [r0, #4]
    return &obj->styles[0];
 8006a70:	e7c8      	b.n	8006a04 <get_trans_style+0x1a>
        obj->styles[i] = obj->styles[i - 1];
 8006a72:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8006a76:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006a7a:	c903      	ldmia	r1, {r0, r1}
 8006a7c:	e886 0003 	stmia.w	r6, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006a80:	e7de      	b.n	8006a40 <get_trans_style+0x56>
	...

08006a84 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8006a84:	2114      	movs	r1, #20
 8006a86:	4801      	ldr	r0, [pc, #4]	; (8006a8c <_lv_obj_style_init+0x8>)
 8006a88:	f010 baff 	b.w	801708a <_lv_ll_init>
 8006a8c:	2000b4f4 	.word	0x2000b4f4

08006a90 <lv_obj_refresh_style>:
    if(!style_refr) return;
 8006a90:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <lv_obj_refresh_style+0xa8>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
{
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4606      	mov	r6, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	4615      	mov	r5, r2
    if(!style_refr) return;
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d049      	beq.n	8006b34 <lv_obj_refresh_style+0xa4>
    return selector & 0xFF0000;
 8006aa0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    lv_obj_invalidate(obj);
 8006aa4:	f7fe f950 	bl	8004d48 <lv_obj_invalidate>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_LAYOUT_REFR))) {
 8006aa8:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006aac:	d000      	beq.n	8006ab0 <lv_obj_refresh_style+0x20>
 8006aae:	b9ec      	cbnz	r4, 8006aec <lv_obj_refresh_style+0x5c>
 8006ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ab4:	429d      	cmp	r5, r3
 8006ab6:	d001      	beq.n	8006abc <lv_obj_refresh_style+0x2c>
 8006ab8:	04e8      	lsls	r0, r5, #19
 8006aba:	d51f      	bpl.n	8006afc <lv_obj_refresh_style+0x6c>
        lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8006abc:	2200      	movs	r2, #0
 8006abe:	2124      	movs	r1, #36	; 0x24
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7fb f819 	bl	8001af8 <lv_event_send>
        lv_obj_mark_layout_as_dirty(obj);
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7fd ff53 	bl	8004972 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006acc:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006ad0:	d10a      	bne.n	8006ae8 <lv_obj_refresh_style+0x58>
 8006ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	d114      	bne.n	8006b04 <lv_obj_refresh_style+0x74>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8006ada:	4630      	mov	r0, r6
 8006adc:	f000 fda6 	bl	800762c <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8006ae0:	b120      	cbz	r0, 8006aec <lv_obj_refresh_style+0x5c>
 8006ae2:	f7fd ff46 	bl	8004972 <lv_obj_mark_layout_as_dirty>
 8006ae6:	e001      	b.n	8006aec <lv_obj_refresh_style+0x5c>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	d0f2      	beq.n	8006ad2 <lv_obj_refresh_style+0x42>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 8006aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006af0:	429d      	cmp	r5, r3
 8006af2:	d109      	bne.n	8006b08 <lv_obj_refresh_style+0x78>
        lv_obj_refresh_ext_draw_size(obj);
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7fd fe3c 	bl	8004772 <lv_obj_refresh_ext_draw_size>
 8006afa:	e007      	b.n	8006b0c <lv_obj_refresh_style+0x7c>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006afc:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006b00:	d000      	beq.n	8006b04 <lv_obj_refresh_style+0x74>
 8006b02:	b90c      	cbnz	r4, 8006b08 <lv_obj_refresh_style+0x78>
 8006b04:	04a9      	lsls	r1, r5, #18
 8006b06:	d4e8      	bmi.n	8006ada <lv_obj_refresh_style+0x4a>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 8006b08:	052a      	lsls	r2, r5, #20
 8006b0a:	d4f3      	bmi.n	8006af4 <lv_obj_refresh_style+0x64>
    lv_obj_invalidate(obj);
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7fe f91b 	bl	8004d48 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY ||
 8006b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b16:	429d      	cmp	r5, r3
 8006b18:	d004      	beq.n	8006b24 <lv_obj_refresh_style+0x94>
 8006b1a:	056b      	lsls	r3, r5, #21
 8006b1c:	d50a      	bpl.n	8006b34 <lv_obj_refresh_style+0xa4>
      ((prop & LV_STYLE_PROP_INHERIT) && ((prop & LV_STYLE_PROP_EXT_DRAW) || (prop & LV_STYLE_PROP_LAYOUT_REFR))))
 8006b1e:	f415 5fc0 	tst.w	r5, #6144	; 0x1800
 8006b22:	d007      	beq.n	8006b34 <lv_obj_refresh_style+0xa4>
        if(part != LV_PART_SCROLLBAR) {
 8006b24:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006b28:	d004      	beq.n	8006b34 <lv_obj_refresh_style+0xa4>
            refresh_children_style(obj);
 8006b2a:	4630      	mov	r0, r6
}
 8006b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            refresh_children_style(obj);
 8006b30:	f7ff bf3e 	b.w	80069b0 <refresh_children_style>
}
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
 8006b36:	bf00      	nop
 8006b38:	20000004 	.word	0x20000004

08006b3c <lv_obj_add_style>:
{
 8006b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b40:	4615      	mov	r5, r2
 8006b42:	4604      	mov	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8006b44:	2300      	movs	r3, #0
{
 8006b46:	460e      	mov	r6, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8006b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7ff fed7 	bl	8006900 <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 8006b52:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006b54:	68e0      	ldr	r0, [r4, #12]
 8006b56:	2700      	movs	r7, #0
 8006b58:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006b5c:	42bb      	cmp	r3, r7
 8006b5e:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8006b62:	d829      	bhi.n	8006bb8 <lv_obj_add_style+0x7c>
    obj->style_cnt++;
 8006b64:	3301      	adds	r3, #1
 8006b66:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8006b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b6c:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006b70:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 8006b72:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006b74:	f010 fd9e 	bl	80176b4 <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006b78:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006b7a:	4602      	mov	r2, r0
        obj->styles[j] = obj->styles[j - 1];
 8006b7c:	f1a0 0e08 	sub.w	lr, r0, #8
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006b80:	f3c3 03c5 	ubfx	r3, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006b84:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006b86:	3b01      	subs	r3, #1
 8006b88:	429f      	cmp	r7, r3
 8006b8a:	d31c      	bcc.n	8006bc6 <lv_obj_add_style+0x8a>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8006b8c:	eb02 0008 	add.w	r0, r2, r8
 8006b90:	2108      	movs	r1, #8
 8006b92:	f010 fdf7 	bl	8017784 <lv_memset_00>
    obj->styles[i].style = style;
 8006b96:	68e2      	ldr	r2, [r4, #12]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8006b98:	4629      	mov	r1, r5
 8006b9a:	4620      	mov	r0, r4
    obj->styles[i].style = style;
 8006b9c:	eb02 0308 	add.w	r3, r2, r8
 8006ba0:	f842 6008 	str.w	r6, [r2, r8]
    obj->styles[i].selector = selector;
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	f365 0217 	bfi	r2, r5, #0, #24
 8006baa:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8006bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 8006bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 8006bb4:	f7ff bf6c 	b.w	8006a90 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 8006bb8:	eb00 0208 	add.w	r2, r0, r8
        if(obj->styles[i].is_local) continue;
 8006bbc:	79d2      	ldrb	r2, [r2, #7]
 8006bbe:	0792      	lsls	r2, r2, #30
 8006bc0:	d0d0      	beq.n	8006b64 <lv_obj_add_style+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
 8006bc2:	3701      	adds	r7, #1
 8006bc4:	e7ca      	b.n	8006b5c <lv_obj_add_style+0x20>
        obj->styles[j] = obj->styles[j - 1];
 8006bc6:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 8006bca:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006bce:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 8006bd0:	c903      	ldmia	r1, {r0, r1}
 8006bd2:	e88c 0003 	stmia.w	ip, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8006bd6:	e7d7      	b.n	8006b88 <lv_obj_add_style+0x4c>

08006bd8 <report_style_change_core>:
    for(i = 0; i < obj->style_cnt; i++) {
 8006bd8:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8006bda:	2300      	movs	r3, #0
{
 8006bdc:	b570      	push	{r4, r5, r6, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8006bde:	f3c2 02c5 	ubfx	r2, r2, #3, #6
{
 8006be2:	4605      	mov	r5, r0
 8006be4:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d90c      	bls.n	8006c04 <report_style_change_core+0x2c>
        if(style == NULL || obj->styles[i].style == style) {
 8006bea:	b125      	cbz	r5, 8006bf6 <report_style_change_core+0x1e>
 8006bec:	68e1      	ldr	r1, [r4, #12]
 8006bee:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8006bf2:	42a9      	cmp	r1, r5
 8006bf4:	d10d      	bne.n	8006c12 <report_style_change_core+0x3a>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8006bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bfa:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff ff46 	bl	8006a90 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 8006c04:	2600      	movs	r6, #0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fd22 	bl	8007650 <lv_obj_get_child_cnt>
 8006c0c:	42b0      	cmp	r0, r6
 8006c0e:	d802      	bhi.n	8006c16 <report_style_change_core+0x3e>
}
 8006c10:	bd70      	pop	{r4, r5, r6, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8006c12:	3301      	adds	r3, #1
 8006c14:	e7e7      	b.n	8006be6 <report_style_change_core+0xe>
        report_style_change_core(style, lv_obj_get_child(obj, i));
 8006c16:	4631      	mov	r1, r6
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fd0a 	bl	8007632 <lv_obj_get_child>
 8006c1e:	4601      	mov	r1, r0
 8006c20:	4628      	mov	r0, r5
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006c22:	3601      	adds	r6, #1
        report_style_change_core(style, lv_obj_get_child(obj, i));
 8006c24:	f7ff ffd8 	bl	8006bd8 <report_style_change_core>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006c28:	e7ed      	b.n	8006c06 <report_style_change_core+0x2e>
	...

08006c2c <lv_obj_report_style_change>:
    if(!style_refr) return;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <lv_obj_report_style_change+0x34>)
 8006c2e:	781b      	ldrb	r3, [r3, #0]
{
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	4606      	mov	r6, r0
    if(!style_refr) return;
 8006c34:	b123      	cbz	r3, 8006c40 <lv_obj_report_style_change+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
 8006c36:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8006c38:	f00f fc98 	bl	801656c <lv_disp_get_next>
 8006c3c:	4604      	mov	r4, r0
    while(d) {
 8006c3e:	b960      	cbnz	r0, 8006c5a <lv_obj_report_style_change+0x2e>
}
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	4630      	mov	r0, r6
 8006c46:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        for(i = 0; i < d->screen_cnt; i++) {
 8006c4a:	3501      	adds	r5, #1
            report_style_change_core(style, d->screens[i]);
 8006c4c:	f7ff ffc4 	bl	8006bd8 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 8006c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c52:	42ab      	cmp	r3, r5
 8006c54:	d8f5      	bhi.n	8006c42 <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 8006c56:	4620      	mov	r0, r4
 8006c58:	e7ee      	b.n	8006c38 <lv_obj_report_style_change+0xc>
        for(i = 0; i < d->screen_cnt; i++) {
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	e7f8      	b.n	8006c50 <lv_obj_report_style_change+0x24>
 8006c5e:	bf00      	nop
 8006c60:	20000004 	.word	0x20000004

08006c64 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 8006c64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    trans_t * tr = _tr;
    lv_obj_t * obj = tr->obj;

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 8006c68:	2300      	movs	r3, #0
{
 8006c6a:	4604      	mov	r4, r0
    lv_obj_t * obj = tr->obj;
 8006c6c:	6806      	ldr	r6, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 8006c6e:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 8006c70:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d942      	bls.n	8006cfe <trans_anim_cb+0x9a>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 8006c78:	68f0      	ldr	r0, [r6, #12]
 8006c7a:	00df      	lsls	r7, r3, #3
 8006c7c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8006c80:	79c2      	ldrb	r2, [r0, #7]
 8006c82:	0792      	lsls	r2, r2, #30
 8006c84:	d505      	bpl.n	8006c92 <trans_anim_cb+0x2e>
 8006c86:	6842      	ldr	r2, [r0, #4]
 8006c88:	68a5      	ldr	r5, [r4, #8]
 8006c8a:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8006c8e:	42aa      	cmp	r2, r5
 8006c90:	d001      	beq.n	8006c96 <trans_anim_cb+0x32>
    for(i = 0; i < obj->style_cnt; i++) {
 8006c92:	3301      	adds	r3, #1
 8006c94:	e7eb      	b.n	8006c6e <trans_anim_cb+0xa>

        lv_style_value_t value_final;
        switch (tr->prop) {
 8006c96:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8006c9a:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 8006c9e:	d04d      	beq.n	8006d3c <trans_anim_cb+0xd8>
 8006ca0:	d830      	bhi.n	8006d04 <trans_anim_cb+0xa0>
 8006ca2:	f1bc 0f20 	cmp.w	ip, #32
 8006ca6:	d054      	beq.n	8006d52 <trans_anim_cb+0xee>
 8006ca8:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	2a17      	cmp	r2, #23
 8006cb0:	d82f      	bhi.n	8006d12 <trans_anim_cb+0xae>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4093      	lsls	r3, r2
 8006cb6:	4a49      	ldr	r2, [pc, #292]	; (8006ddc <trans_anim_cb+0x178>)
 8006cb8:	4213      	tst	r3, r2
 8006cba:	d14a      	bne.n	8006d52 <trans_anim_cb+0xee>
 8006cbc:	f013 0f18 	tst.w	r3, #24
 8006cc0:	d027      	beq.n	8006d12 <trans_anim_cb+0xae>
                if(v < 255) value_final.num = tr->start_value.num;
                else value_final.num = tr->end_value.num;
                break;
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 8006cc2:	29fe      	cmp	r1, #254	; 0xfe
 8006cc4:	dc38      	bgt.n	8006d38 <trans_anim_cb+0xd4>
 8006cc6:	68e5      	ldr	r5, [r4, #12]
                break;
        }

        lv_style_value_t old_value;
        bool refr = true;
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 8006cc8:	aa01      	add	r2, sp, #4
 8006cca:	4661      	mov	r1, ip
 8006ccc:	6800      	ldr	r0, [r0, #0]
 8006cce:	f011 f9f0 	bl	80180b2 <lv_style_get_prop>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d07e      	beq.n	8006dd4 <trans_anim_cb+0x170>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full && value_final.num == old_value.num) {
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	ebb3 0805 	subs.w	r8, r3, r5
 8006cdc:	bf18      	it	ne
 8006cde:	f04f 0801 	movne.w	r8, #1
                refr = false;
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8006ce2:	68f3      	ldr	r3, [r6, #12]
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	88a1      	ldrh	r1, [r4, #4]
 8006ce8:	59d8      	ldr	r0, [r3, r7]
 8006cea:	f011 fa8a 	bl	8018202 <lv_style_set_prop>
        if (refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 8006cee:	f1b8 0f00 	cmp.w	r8, #0
 8006cf2:	d004      	beq.n	8006cfe <trans_anim_cb+0x9a>
 8006cf4:	88a2      	ldrh	r2, [r4, #4]
 8006cf6:	68a1      	ldr	r1, [r4, #8]
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	f7ff fec9 	bl	8006a90 <lv_obj_refresh_style>
        break;

    }

}
 8006cfe:	b002      	add	sp, #8
 8006d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (tr->prop) {
 8006d04:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 8006d08:	d0db      	beq.n	8006cc2 <trans_anim_cb+0x5e>
 8006d0a:	d80d      	bhi.n	8006d28 <trans_anim_cb+0xc4>
 8006d0c:	f1bc 0f67 	cmp.w	ip, #103	; 0x67
 8006d10:	d0d7      	beq.n	8006cc2 <trans_anim_cb+0x5e>
                if(v == 0) value_final.num = tr->start_value.num;
 8006d12:	2900      	cmp	r1, #0
 8006d14:	d0d7      	beq.n	8006cc6 <trans_anim_cb+0x62>
                else if(v == 255) value_final.num = tr->end_value.num;
 8006d16:	29ff      	cmp	r1, #255	; 0xff
 8006d18:	d00e      	beq.n	8006d38 <trans_anim_cb+0xd4>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 8006d1a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8006d1e:	1a9d      	subs	r5, r3, r2
 8006d20:	434d      	muls	r5, r1
 8006d22:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8006d26:	e7cf      	b.n	8006cc8 <trans_anim_cb+0x64>
        switch (tr->prop) {
 8006d28:	f240 4357 	movw	r3, #1111	; 0x457
 8006d2c:	459c      	cmp	ip, r3
 8006d2e:	d010      	beq.n	8006d52 <trans_anim_cb+0xee>
 8006d30:	f241 4359 	movw	r3, #5209	; 0x1459
 8006d34:	459c      	cmp	ip, r3
 8006d36:	e7eb      	b.n	8006d10 <trans_anim_cb+0xac>
                else value_final.ptr = tr->end_value.ptr;
 8006d38:	6925      	ldr	r5, [r4, #16]
 8006d3a:	e7c5      	b.n	8006cc8 <trans_anim_cb+0x64>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 8006d3c:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8006d40:	b90d      	cbnz	r5, 8006d46 <trans_anim_cb+0xe2>
 8006d42:	461d      	mov	r5, r3
 8006d44:	e7c0      	b.n	8006cc8 <trans_anim_cb+0x64>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0be      	beq.n	8006cc8 <trans_anim_cb+0x64>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 8006d4a:	297f      	cmp	r1, #127	; 0x7f
 8006d4c:	bfc8      	it	gt
 8006d4e:	461d      	movgt	r5, r3
 8006d50:	e7ba      	b.n	8006cc8 <trans_anim_cb+0x64>
                if(v <= 0) value_final.color = tr->start_value.color;
 8006d52:	2900      	cmp	r1, #0
 8006d54:	dc04      	bgt.n	8006d60 <trans_anim_cb+0xfc>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
 8006d58:	2500      	movs	r5, #0
 8006d5a:	f363 050f 	bfi	r5, r3, #0, #16
 8006d5e:	e7b3      	b.n	8006cc8 <trans_anim_cb+0x64>
 8006d60:	29fe      	cmp	r1, #254	; 0xfe
 8006d62:	dd01      	ble.n	8006d68 <trans_anim_cb+0x104>
 8006d64:	8a23      	ldrh	r3, [r4, #16]
 8006d66:	e7f7      	b.n	8006d58 <trans_anim_cb+0xf4>
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006d68:	89a5      	ldrh	r5, [r4, #12]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006d6a:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006d6e:	8a23      	ldrh	r3, [r4, #16]
 8006d70:	f248 0281 	movw	r2, #32897	; 0x8081
 8006d74:	f3c5 1545 	ubfx	r5, r5, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006d78:	f894 800c 	ldrb.w	r8, [r4, #12]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006d7c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006d80:	fb0e f505 	mul.w	r5, lr, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006d84:	f008 081f 	and.w	r8, r8, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006d88:	fb01 5303 	mla	r3, r1, r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006d8c:	fb0e f808 	mul.w	r8, lr, r8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8006d90:	3380      	adds	r3, #128	; 0x80
 8006d92:	4353      	muls	r3, r2
 8006d94:	f3c3 55c5 	ubfx	r5, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006d98:	7c23      	ldrb	r3, [r4, #16]
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	fb01 8303 	mla	r3, r1, r3, r8
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006da2:	f894 800d 	ldrb.w	r8, [r4, #13]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006da6:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006da8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8006dac:	4353      	muls	r3, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8006dae:	fb0e fe08 	mul.w	lr, lr, r8
 8006db2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8006db6:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8006dba:	7c65      	ldrb	r5, [r4, #17]
 8006dbc:	08ed      	lsrs	r5, r5, #3
 8006dbe:	fb01 e105 	mla	r1, r1, r5, lr
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	3180      	adds	r1, #128	; 0x80
 8006dc6:	434a      	muls	r2, r1
 8006dc8:	0dd2      	lsrs	r2, r2, #23
 8006dca:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 8006dce:	f362 050f 	bfi	r5, r2, #0, #16
 8006dd2:	e779      	b.n	8006cc8 <trans_anim_cb+0x64>
        bool refr = true;
 8006dd4:	f04f 0801 	mov.w	r8, #1
 8006dd8:	e783      	b.n	8006ce2 <trans_anim_cb+0x7e>
 8006dda:	bf00      	nop
 8006ddc:	00900801 	.word	0x00900801

08006de0 <lv_obj_remove_style>:
{
 8006de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 8006de6:	fa1f fa82 	uxth.w	sl, r2
    return selector & 0xFF0000;
 8006dea:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 8006dee:	4688      	mov	r8, r1
 8006df0:	b1d1      	cbz	r1, 8006e28 <lv_obj_remove_style+0x48>
 8006df2:	79ce      	ldrb	r6, [r1, #7]
 8006df4:	3e00      	subs	r6, #0
 8006df6:	bf18      	it	ne
 8006df8:	2601      	movne	r6, #1
 8006dfa:	4276      	negs	r6, r6
 8006dfc:	b2b6      	uxth	r6, r6
    bool deleted = false;
 8006dfe:	2200      	movs	r2, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 8006e00:	f64f 7bff 	movw	fp, #65535	; 0xffff
    uint32_t i = 0;
 8006e04:	4617      	mov	r7, r2
    while(i <  obj->style_cnt) {
 8006e06:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006e08:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006e0c:	42bb      	cmp	r3, r7
 8006e0e:	d80e      	bhi.n	8006e2e <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	d064      	beq.n	8006ede <lv_obj_remove_style+0xfe>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	d062      	beq.n	8006ede <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 8006e20:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 8006e24:	f7ff be34 	b.w	8006a90 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8006e28:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006e2c:	e7e7      	b.n	8006dfe <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006e2e:	68e0      	ldr	r0, [r4, #12]
        if((state != LV_STATE_ANY && state_act != state) ||
 8006e30:	45da      	cmp	sl, fp
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006e32:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8006e36:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
 8006e3a:	684b      	ldr	r3, [r1, #4]
 8006e3c:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 8006e40:	d003      	beq.n	8006e4a <lv_obj_remove_style+0x6a>
 8006e42:	fa1f fc83 	uxth.w	ip, r3
 8006e46:	45d4      	cmp	ip, sl
 8006e48:	d10d      	bne.n	8006e66 <lv_obj_remove_style+0x86>
 8006e4a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006e4e:	d003      	beq.n	8006e58 <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 8006e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	d106      	bne.n	8006e66 <lv_obj_remove_style+0x86>
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	d005      	beq.n	8006e6a <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style))
 8006e5e:	f850 3009 	ldr.w	r3, [r0, r9]
 8006e62:	4543      	cmp	r3, r8
 8006e64:	d001      	beq.n	8006e6a <lv_obj_remove_style+0x8a>
            i++;
 8006e66:	3701      	adds	r7, #1
            continue;
 8006e68:	e7cd      	b.n	8006e06 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 8006e6a:	79cb      	ldrb	r3, [r1, #7]
 8006e6c:	0799      	lsls	r1, r3, #30
 8006e6e:	d506      	bpl.n	8006e7e <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 8006e70:	2300      	movs	r3, #0
 8006e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e76:	4629      	mov	r1, r5
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff fd41 	bl	8006900 <trans_del>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	eb03 0209 	add.w	r2, r3, r9
 8006e84:	79d2      	ldrb	r2, [r2, #7]
 8006e86:	0792      	lsls	r2, r2, #30
 8006e88:	d00c      	beq.n	8006ea4 <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 8006e8a:	f853 0009 	ldr.w	r0, [r3, r9]
 8006e8e:	f011 f893 	bl	8017fb8 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 8006e92:	68e3      	ldr	r3, [r4, #12]
 8006e94:	f853 0009 	ldr.w	r0, [r3, r9]
 8006e98:	f010 fa74 	bl	8017384 <lv_mem_free>
            obj->styles[i].style = NULL;
 8006e9c:	68e3      	ldr	r3, [r4, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f843 2009 	str.w	r2, [r3, r9]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8006ea4:	463a      	mov	r2, r7
 8006ea6:	e006      	b.n	8006eb6 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8006eae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006eb2:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8006eb6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006eb8:	68e0      	ldr	r0, [r4, #12]
 8006eba:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 8006ebe:	f101 3cff 	add.w	ip, r1, #4294967295
 8006ec2:	4594      	cmp	ip, r2
 8006ec4:	d8f0      	bhi.n	8006ea8 <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 8006ec6:	313f      	adds	r1, #63	; 0x3f
 8006ec8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006ecc:	f361 03c8 	bfi	r3, r1, #3, #6
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006ed0:	00c9      	lsls	r1, r1, #3
        obj->style_cnt--;
 8006ed2:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006ed4:	f010 fbee 	bl	80176b4 <lv_mem_realloc>
        deleted = true;
 8006ed8:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006eda:	60e0      	str	r0, [r4, #12]
        deleted = true;
 8006edc:	e793      	b.n	8006e06 <lv_obj_remove_style+0x26>
}
 8006ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006ee4 <trans_anim_ready_cb>:
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
 8006ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 8006ee8:	6804      	ldr	r4, [r0, #0]
    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8006eea:	4e27      	ldr	r6, [pc, #156]	; (8006f88 <trans_anim_ready_cb+0xa4>)
 8006eec:	4826      	ldr	r0, [pc, #152]	; (8006f88 <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 8006eee:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 8006ef0:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8006ef2:	f010 f944 	bl	801717e <_lv_ll_get_head>
 8006ef6:	b930      	cbnz	r0, 8006f06 <trans_anim_ready_cb+0x22>
        }
    }

    if(!running) {
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 8006ef8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 8006efa:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 8006efe:	4282      	cmp	r2, r0
 8006f00:	d814      	bhi.n	8006f2c <trans_anim_ready_cb+0x48>
                }
                break;
            }
        }
    }
}
 8006f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 8006f06:	42a0      	cmp	r0, r4
 8006f08:	d00b      	beq.n	8006f22 <trans_anim_ready_cb+0x3e>
 8006f0a:	6802      	ldr	r2, [r0, #0]
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d107      	bne.n	8006f22 <trans_anim_ready_cb+0x3e>
 8006f12:	6882      	ldr	r2, [r0, #8]
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d103      	bne.n	8006f22 <trans_anim_ready_cb+0x3e>
 8006f1a:	8882      	ldrh	r2, [r0, #4]
 8006f1c:	88a3      	ldrh	r3, [r4, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d0ef      	beq.n	8006f02 <trans_anim_ready_cb+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8006f22:	4601      	mov	r1, r0
 8006f24:	4630      	mov	r0, r6
 8006f26:	f010 f930 	bl	801718a <_lv_ll_get_next>
 8006f2a:	e7e4      	b.n	8006ef6 <trans_anim_ready_cb+0x12>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 8006f2c:	68eb      	ldr	r3, [r5, #12]
 8006f2e:	00c6      	lsls	r6, r0, #3
 8006f30:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8006f34:	79d9      	ldrb	r1, [r3, #7]
 8006f36:	0789      	lsls	r1, r1, #30
 8006f38:	d523      	bpl.n	8006f82 <trans_anim_ready_cb+0x9e>
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	68a1      	ldr	r1, [r4, #8]
 8006f3e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006f42:	428b      	cmp	r3, r1
 8006f44:	d11d      	bne.n	8006f82 <trans_anim_ready_cb+0x9e>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006f46:	4621      	mov	r1, r4
 8006f48:	480f      	ldr	r0, [pc, #60]	; (8006f88 <trans_anim_ready_cb+0xa4>)
 8006f4a:	f010 f8dd 	bl	8017108 <_lv_ll_remove>
                lv_mem_free(tr);
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f010 fa18 	bl	8017384 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8006f54:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 8006f56:	4639      	mov	r1, r7
 8006f58:	59a0      	ldr	r0, [r4, r6]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8006f5a:	eb04 0806 	add.w	r8, r4, r6
                lv_style_remove_prop(obj_style->style, prop);
 8006f5e:	f011 f847 	bl	8017ff0 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 8006f62:	68eb      	ldr	r3, [r5, #12]
 8006f64:	5998      	ldr	r0, [r3, r6]
 8006f66:	f011 f93f 	bl	80181e8 <lv_style_is_empty>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d0c9      	beq.n	8006f02 <trans_anim_ready_cb+0x1e>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8006f6e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006f72:	4628      	mov	r0, r5
 8006f74:	59a1      	ldr	r1, [r4, r6]
 8006f76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 8006f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8006f7e:	f7ff bf2f 	b.w	8006de0 <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 8006f82:	3001      	adds	r0, #1
 8006f84:	e7bb      	b.n	8006efe <trans_anim_ready_cb+0x1a>
 8006f86:	bf00      	nop
 8006f88:	2000b4f4 	.word	0x2000b4f4

08006f8c <lv_obj_enable_style_refresh>:
    style_refr = en;
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <lv_obj_enable_style_refresh+0x8>)
 8006f8e:	7018      	strb	r0, [r3, #0]
}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000004 	.word	0x20000004

08006f98 <lv_obj_get_style_prop>:
{
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 8006f9c:	f3c2 2380 	ubfx	r3, r2, #10, #1
{
 8006fa0:	b087      	sub	sp, #28
    if(filter) {
 8006fa2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
{
 8006fa6:	4604      	mov	r4, r0
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 8006fa8:	9301      	str	r3, [sp, #4]
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 8006faa:	f3c2 3380 	ubfx	r3, r2, #14, #1
{
 8006fae:	460e      	mov	r6, r1
 8006fb0:	4693      	mov	fp, r2
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 8006fb2:	9302      	str	r3, [sp, #8]
    if(filter) {
 8006fb4:	d003      	beq.n	8006fbe <lv_obj_get_style_prop+0x26>
        prop &= ~LV_STYLE_PROP_FILTER;
 8006fb6:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 8006fba:	fa1f fb81 	uxth.w	fp, r1
    while(obj) {
 8006fbe:	b92c      	cbnz	r4, 8006fcc <lv_obj_get_style_prop+0x34>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8006fc0:	2e00      	cmp	r6, #0
 8006fc2:	d076      	beq.n	80070b2 <lv_obj_get_style_prop+0x11a>
            value_act = lv_style_prop_get_default(prop);
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f011 f8b9 	bl	801813c <lv_style_prop_get_default>
 8006fca:	e034      	b.n	8007036 <lv_obj_get_style_prop+0x9e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8006fcc:	4658      	mov	r0, fp
    for(i = 0; i < obj->style_cnt; i++) {
 8006fce:	2500      	movs	r5, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8006fd0:	f011 f90f 	bl	80181f2 <_lv_style_get_prop_group>
 8006fd4:	2301      	movs	r3, #1
    lv_state_t state = obj->state;
 8006fd6:	f8b4 a020 	ldrh.w	sl, [r4, #32]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8006fda:	fa03 f000 	lsl.w	r0, r3, r0
    bool skip_trans = obj->skip_trans;
 8006fde:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
    lv_state_t state_inv = ~state;
 8006fe2:	ea6f 090a 	mvn.w	r9, sl
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8006fe6:	b2c7      	uxtb	r7, r0
    bool skip_trans = obj->skip_trans;
 8006fe8:	f3c8 0880 	ubfx	r8, r8, #2, #1
    lv_state_t state_inv = ~state;
 8006fec:	fa1f f989 	uxth.w	r9, r9
    for(i = 0; i < obj->style_cnt; i++) {
 8006ff0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8006ff2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	d302      	bcc.n	8007000 <lv_obj_get_style_prop+0x68>
 8006ffa:	f04f 38ff 	mov.w	r8, #4294967295
 8006ffe:	e045      	b.n	800708c <lv_obj_get_style_prop+0xf4>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8007000:	68e2      	ldr	r2, [r4, #12]
 8007002:	00e8      	lsls	r0, r5, #3
 8007004:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
        if(obj_style->is_trans == false) break;
 8007008:	f893 c007 	ldrb.w	ip, [r3, #7]
 800700c:	f01c 0f02 	tst.w	ip, #2
 8007010:	d0f3      	beq.n	8006ffa <lv_obj_get_style_prop+0x62>
        if(skip_trans) continue;
 8007012:	f1b8 0f00 	cmp.w	r8, #0
 8007016:	d117      	bne.n	8007048 <lv_obj_get_style_prop+0xb0>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007018:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 800701a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800701e:	429e      	cmp	r6, r3
 8007020:	d112      	bne.n	8007048 <lv_obj_get_style_prop+0xb0>
        if((obj_style->style->has_group & group) == 0) continue;
 8007022:	5810      	ldr	r0, [r2, r0]
 8007024:	7983      	ldrb	r3, [r0, #6]
 8007026:	421f      	tst	r7, r3
 8007028:	d00e      	beq.n	8007048 <lv_obj_get_style_prop+0xb0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800702a:	aa05      	add	r2, sp, #20
 800702c:	4659      	mov	r1, fp
 800702e:	f011 f840 	bl	80180b2 <lv_style_get_prop>
        if(found) {
 8007032:	b148      	cbz	r0, 8007048 <lv_obj_get_style_prop+0xb0>
        *v = value_tmp;
 8007034:	9805      	ldr	r0, [sp, #20]
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8007036:	9b02      	ldr	r3, [sp, #8]
 8007038:	b11b      	cbz	r3, 8007042 <lv_obj_get_style_prop+0xaa>
 800703a:	4605      	mov	r5, r0
    if(obj == NULL) return v;
 800703c:	2c00      	cmp	r4, #0
 800703e:	d152      	bne.n	80070e6 <lv_obj_get_style_prop+0x14e>
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8007040:	4628      	mov	r0, r5
}
 8007042:	b007      	add	sp, #28
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8007048:	3501      	adds	r5, #1
 800704a:	e7d1      	b.n	8006ff0 <lv_obj_get_style_prop+0x58>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 8007058:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800705c:	429e      	cmp	r6, r3
 800705e:	d114      	bne.n	800708a <lv_obj_get_style_prop+0xf2>
        if((obj_style->style->has_group & group) == 0) continue;
 8007060:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 8007064:	7983      	ldrb	r3, [r0, #6]
 8007066:	421f      	tst	r7, r3
 8007068:	d00f      	beq.n	800708a <lv_obj_get_style_prop+0xf2>
        if((state_act & state_inv)) continue;
 800706a:	ea12 0f09 	tst.w	r2, r9
    return selector & 0xFFFF;
 800706e:	b293      	uxth	r3, r2
        if((state_act & state_inv)) continue;
 8007070:	d10b      	bne.n	800708a <lv_obj_get_style_prop+0xf2>
        if(state_act <= weight) continue;
 8007072:	4543      	cmp	r3, r8
 8007074:	9303      	str	r3, [sp, #12]
 8007076:	dd08      	ble.n	800708a <lv_obj_get_style_prop+0xf2>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8007078:	aa05      	add	r2, sp, #20
 800707a:	4659      	mov	r1, fp
 800707c:	f011 f819 	bl	80180b2 <lv_style_get_prop>
        if(found) {
 8007080:	b118      	cbz	r0, 800708a <lv_obj_get_style_prop+0xf2>
            if(state_act == state) {
 8007082:	9b03      	ldr	r3, [sp, #12]
 8007084:	459a      	cmp	sl, r3
 8007086:	d0d5      	beq.n	8007034 <lv_obj_get_style_prop+0x9c>
 8007088:	4698      	mov	r8, r3
    for(; i < obj->style_cnt; i++) {
 800708a:	3501      	adds	r5, #1
 800708c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800708e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007092:	429d      	cmp	r5, r3
 8007094:	d3da      	bcc.n	800704c <lv_obj_get_style_prop+0xb4>
    if(weight >= 0) {
 8007096:	f1b8 3fff 	cmp.w	r8, #4294967295
 800709a:	d1cb      	bne.n	8007034 <lv_obj_get_style_prop+0x9c>
        if(!inherit) break;
 800709c:	9b01      	ldr	r3, [sp, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d08e      	beq.n	8006fc0 <lv_obj_get_style_prop+0x28>
        if(part != LV_PART_MAIN) {
 80070a2:	b926      	cbnz	r6, 80070ae <lv_obj_get_style_prop+0x116>
        obj = lv_obj_get_parent(obj);
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fac1 	bl	800762c <lv_obj_get_parent>
 80070aa:	4604      	mov	r4, r0
 80070ac:	e787      	b.n	8006fbe <lv_obj_get_style_prop+0x26>
 80070ae:	2600      	movs	r6, #0
 80070b0:	e785      	b.n	8006fbe <lv_obj_get_style_prop+0x26>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 80070b2:	f241 0301 	movw	r3, #4097	; 0x1001
 80070b6:	459b      	cmp	fp, r3
 80070b8:	d003      	beq.n	80070c2 <lv_obj_get_style_prop+0x12a>
 80070ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80070be:	459b      	cmp	fp, r3
 80070c0:	d180      	bne.n	8006fc4 <lv_obj_get_style_prop+0x2c>
            const lv_obj_class_t * cls = obj->class_p;
 80070c2:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 80070c4:	f241 0201 	movw	r2, #4097	; 0x1001
 80070c8:	b91b      	cbnz	r3, 80070d2 <lv_obj_get_style_prop+0x13a>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 80070ca:	4593      	cmp	fp, r2
 80070cc:	d125      	bne.n	800711a <lv_obj_get_style_prop+0x182>
 80070ce:	8a9b      	ldrh	r3, [r3, #20]
 80070d0:	deff      	udf	#255	; 0xff
                if(prop == LV_STYLE_WIDTH) {
 80070d2:	4593      	cmp	fp, r2
                    if(cls->width_def != 0) break;
 80070d4:	bf0c      	ite	eq
 80070d6:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 80070da:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 80070de:	2800      	cmp	r0, #0
 80070e0:	d1a9      	bne.n	8007036 <lv_obj_get_style_prop+0x9e>
                cls = cls->base_class;
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	e7f0      	b.n	80070c8 <lv_obj_get_style_prop+0x130>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 80070e6:	2263      	movs	r2, #99	; 0x63
 80070e8:	4631      	mov	r1, r6
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7ff ff54 	bl	8006f98 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 80070f0:	4607      	mov	r7, r0
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0a4      	beq.n	8007040 <lv_obj_get_style_prop+0xa8>
 80070f6:	6803      	ldr	r3, [r0, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0a1      	beq.n	8007040 <lv_obj_get_style_prop+0xa8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 80070fc:	2264      	movs	r2, #100	; 0x64
 80070fe:	4631      	mov	r1, r6
 8007100:	4620      	mov	r0, r4
 8007102:	f7ff ff49 	bl	8006f98 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 8007106:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 800710a:	d099      	beq.n	8007040 <lv_obj_get_style_prop+0xa8>
 800710c:	4629      	mov	r1, r5
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	4638      	mov	r0, r7
 8007112:	4798      	blx	r3
 8007114:	f360 050f 	bfi	r5, r0, #0, #16
 8007118:	e792      	b.n	8007040 <lv_obj_get_style_prop+0xa8>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800711a:	8adb      	ldrh	r3, [r3, #22]
 800711c:	e7d8      	b.n	80070d0 <lv_obj_get_style_prop+0x138>

0800711e <trans_anim_start_cb>:
{
 800711e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    trans_t * tr = a->var;
 8007120:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 8007122:	68a1      	ldr	r1, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 8007124:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 8007126:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800712a:	6820      	ldr	r0, [r4, #0]
 800712c:	9101      	str	r1, [sp, #4]
 800712e:	f7ff ff33 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_prop_t prop_tmp = tr->prop;
 8007132:	88a5      	ldrh	r5, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 8007134:	2300      	movs	r3, #0
    trans_del(tr->obj, part, prop_tmp, tr);
 8007136:	9901      	ldr	r1, [sp, #4]
 8007138:	462a      	mov	r2, r5
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800713a:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 800713c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800713e:	4623      	mov	r3, r4
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	f7ff fbdd 	bl	8006900 <trans_del>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 8007146:	68a1      	ldr	r1, [r4, #8]
 8007148:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 800714a:	80a5      	strh	r5, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800714c:	f7ff fc4d 	bl	80069ea <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8007150:	68e2      	ldr	r2, [r4, #12]
 8007152:	88a1      	ldrh	r1, [r4, #4]
 8007154:	6800      	ldr	r0, [r0, #0]
}
 8007156:	b003      	add	sp, #12
 8007158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800715c:	f011 b851 	b.w	8018202 <lv_style_set_prop>

08007160 <lv_obj_set_local_style_prop>:
{
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8007164:	8c44      	ldrh	r4, [r0, #34]	; 0x22
{
 8007166:	4605      	mov	r5, r0
 8007168:	461e      	mov	r6, r3
 800716a:	460f      	mov	r7, r1
 800716c:	4690      	mov	r8, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800716e:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 8007172:	68c0      	ldr	r0, [r0, #12]
 8007174:	2300      	movs	r3, #0
 8007176:	42a3      	cmp	r3, r4
 8007178:	d30d      	bcc.n	8007196 <lv_obj_set_local_style_prop+0x36>
    obj->style_cnt++;
 800717a:	3401      	adds	r4, #1
 800717c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800717e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8007182:	f364 03c8 	bfi	r3, r4, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007186:	00e1      	lsls	r1, r4, #3
    obj->style_cnt++;
 8007188:	846b      	strh	r3, [r5, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800718a:	f010 fa93 	bl	80176b4 <lv_mem_realloc>
 800718e:	4602      	mov	r2, r0
 8007190:	60e8      	str	r0, [r5, #12]
    LV_ASSERT_MALLOC(obj->styles);
 8007192:	b9c0      	cbnz	r0, 80071c6 <lv_obj_set_local_style_prop+0x66>
 8007194:	e7fe      	b.n	8007194 <lv_obj_set_local_style_prop+0x34>
        if(obj->styles[i].is_local &&
 8007196:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800719a:	79d1      	ldrb	r1, [r2, #7]
 800719c:	07c9      	lsls	r1, r1, #31
 800719e:	d510      	bpl.n	80071c2 <lv_obj_set_local_style_prop+0x62>
           obj->styles[i].selector == selector)
 80071a0:	6851      	ldr	r1, [r2, #4]
 80071a2:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 80071a6:	428e      	cmp	r6, r1
 80071a8:	d10b      	bne.n	80071c2 <lv_obj_set_local_style_prop+0x62>
            return obj->styles[i].style;
 80071aa:	6810      	ldr	r0, [r2, #0]
    lv_style_set_prop(style, prop, value);
 80071ac:	4642      	mov	r2, r8
 80071ae:	4639      	mov	r1, r7
 80071b0:	f011 f827 	bl	8018202 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 80071b4:	463a      	mov	r2, r7
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
}
 80071ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_refresh_style(obj, selector, prop);
 80071be:	f7ff bc67 	b.w	8006a90 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 80071c2:	3301      	adds	r3, #1
 80071c4:	e7d7      	b.n	8007176 <lv_obj_set_local_style_prop+0x16>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 80071c6:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
 80071c8:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 80071cc:	f104 3aff 	add.w	sl, r4, #4294967295
 80071d0:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
 80071d4:	3c02      	subs	r4, #2
 80071d6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80071da:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 80071de:	f1ba 0f00 	cmp.w	sl, #0
 80071e2:	d11d      	bne.n	8007220 <lv_obj_set_local_style_prop+0xc0>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 80071e4:	eb02 0009 	add.w	r0, r2, r9
 80071e8:	2108      	movs	r1, #8
 80071ea:	f010 facb 	bl	8017784 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 80071ee:	2008      	movs	r0, #8
 80071f0:	68ec      	ldr	r4, [r5, #12]
 80071f2:	f010 fa49 	bl	8017688 <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 80071f6:	68eb      	ldr	r3, [r5, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 80071f8:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
    lv_style_init(obj->styles[i].style);
 80071fc:	f853 003a 	ldr.w	r0, [r3, sl, lsl #3]
 8007200:	f010 fed7 	bl	8017fb2 <lv_style_init>
    obj->styles[i].is_local = 1;
 8007204:	68e9      	ldr	r1, [r5, #12]
 8007206:	eb01 0309 	add.w	r3, r1, r9
 800720a:	79da      	ldrb	r2, [r3, #7]
 800720c:	f042 0201 	orr.w	r2, r2, #1
 8007210:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	f366 0217 	bfi	r2, r6, #0, #24
 8007218:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 800721a:	f851 003a 	ldr.w	r0, [r1, sl, lsl #3]
 800721e:	e7c5      	b.n	80071ac <lv_obj_set_local_style_prop+0x4c>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8007220:	79e3      	ldrb	r3, [r4, #7]
 8007222:	3c08      	subs	r4, #8
 8007224:	079b      	lsls	r3, r3, #30
 8007226:	d1dd      	bne.n	80071e4 <lv_obj_set_local_style_prop+0x84>
        obj->styles[i] = obj->styles[i - 1];
 8007228:	eb02 0309 	add.w	r3, r2, r9
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800722c:	f10a 3aff 	add.w	sl, sl, #4294967295
        obj->styles[i] = obj->styles[i - 1];
 8007230:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8007234:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8007238:	e7cf      	b.n	80071da <lv_obj_set_local_style_prop+0x7a>

0800723a <lv_obj_get_local_style_prop>:
{
 800723a:	b4f0      	push	{r4, r5, r6, r7}
    for(i = 0; i < obj->style_cnt; i++) {
 800723c:	8c46      	ldrh	r6, [r0, #34]	; 0x22
 800723e:	2500      	movs	r5, #0
 8007240:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 8007244:	42ae      	cmp	r6, r5
 8007246:	d802      	bhi.n	800724e <lv_obj_get_local_style_prop+0x14>
}
 8007248:	2000      	movs	r0, #0
 800724a:	bcf0      	pop	{r4, r5, r6, r7}
 800724c:	4770      	bx	lr
        if(obj->styles[i].is_local &&
 800724e:	68c4      	ldr	r4, [r0, #12]
 8007250:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007254:	79e7      	ldrb	r7, [r4, #7]
 8007256:	07ff      	lsls	r7, r7, #31
 8007258:	d508      	bpl.n	800726c <lv_obj_get_local_style_prop+0x32>
           obj->styles[i].selector ==  selector)
 800725a:	6867      	ldr	r7, [r4, #4]
 800725c:	f3c7 0717 	ubfx	r7, r7, #0, #24
        if(obj->styles[i].is_local &&
 8007260:	429f      	cmp	r7, r3
 8007262:	d103      	bne.n	800726c <lv_obj_get_local_style_prop+0x32>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007264:	6820      	ldr	r0, [r4, #0]
}
 8007266:	bcf0      	pop	{r4, r5, r6, r7}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007268:	f010 bf23 	b.w	80180b2 <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 800726c:	3501      	adds	r5, #1
 800726e:	e7e9      	b.n	8007244 <lv_obj_get_local_style_prop+0xa>

08007270 <_lv_obj_style_create_transition>:
{
 8007270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	461f      	mov	r7, r3
 8007276:	b092      	sub	sp, #72	; 0x48
    obj->skip_trans = 1;
 8007278:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 800727c:	4604      	mov	r4, r0
 800727e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007280:	4688      	mov	r8, r1
    obj->skip_trans = 1;
 8007282:	f043 0304 	orr.w	r3, r3, #4
    obj->state = prev_state;
 8007286:	8402      	strh	r2, [r0, #32]
{
 8007288:	4691      	mov	r9, r2
    obj->skip_trans = 1;
 800728a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800728e:	892a      	ldrh	r2, [r5, #8]
 8007290:	f7ff fe82 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007294:	892a      	ldrh	r2, [r5, #8]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007296:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 8007298:	4641      	mov	r1, r8
 800729a:	4620      	mov	r0, r4
    obj->state = new_state;
 800729c:	8427      	strh	r7, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800729e:	f7ff fe7b 	bl	8006f98 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 80072a2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80072a6:	4582      	cmp	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80072a8:	4606      	mov	r6, r0
    obj->skip_trans = 0;
 80072aa:	f36f 0382 	bfc	r3, #2, #1
 80072ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80072b2:	d06c      	beq.n	800738e <_lv_obj_style_create_transition+0x11e>
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80072b4:	892a      	ldrh	r2, [r5, #8]
 80072b6:	4641      	mov	r1, r8
    obj->state = prev_state;
 80072b8:	f8a4 9020 	strh.w	r9, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80072bc:	4620      	mov	r0, r4
 80072be:	f7ff fe6b 	bl	8006f98 <lv_obj_get_style_prop>
 80072c2:	4681      	mov	r9, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 80072c4:	4641      	mov	r1, r8
 80072c6:	4620      	mov	r0, r4
    obj->state = new_state;
 80072c8:	8427      	strh	r7, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 80072ca:	f7ff fb8e 	bl	80069ea <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 80072ce:	464a      	mov	r2, r9
 80072d0:	8929      	ldrh	r1, [r5, #8]
 80072d2:	6800      	ldr	r0, [r0, #0]
 80072d4:	f010 ff95 	bl	8018202 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 80072d8:	892b      	ldrh	r3, [r5, #8]
 80072da:	2b60      	cmp	r3, #96	; 0x60
 80072dc:	d11e      	bne.n	800731c <_lv_obj_style_create_transition+0xac>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 80072de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80072e2:	4599      	cmp	r9, r3
 80072e4:	d001      	beq.n	80072ea <_lv_obj_style_create_transition+0x7a>
 80072e6:	429e      	cmp	r6, r3
 80072e8:	d118      	bne.n	800731c <_lv_obj_style_create_transition+0xac>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7fd fbd7 	bl	8004a9e <lv_obj_get_width>
 80072f0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80072f4:	f340 074f 	sbfx	r7, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7fd fbd0 	bl	8004a9e <lv_obj_get_width>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 80072fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007302:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007306:	4591      	cmp	r9, r2
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007308:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800730c:	d112      	bne.n	8007334 <_lv_obj_style_create_transition+0xc4>
 800730e:	429f      	cmp	r7, r3
 8007310:	da0a      	bge.n	8007328 <_lv_obj_style_create_transition+0xb8>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007312:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007314:	f107 0901 	add.w	r9, r7, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007318:	d100      	bne.n	800731c <_lv_obj_style_create_transition+0xac>
 800731a:	1c7e      	adds	r6, r7, #1
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800731c:	481d      	ldr	r0, [pc, #116]	; (8007394 <_lv_obj_style_create_transition+0x124>)
 800731e:	f00f febc 	bl	801709a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 8007322:	4607      	mov	r7, r0
 8007324:	b958      	cbnz	r0, 800733e <_lv_obj_style_create_transition+0xce>
 8007326:	e7fe      	b.n	8007326 <_lv_obj_style_create_transition+0xb6>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007328:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800732a:	f103 0901 	add.w	r9, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800732e:	d1f5      	bne.n	800731c <_lv_obj_style_create_transition+0xac>
 8007330:	1c5e      	adds	r6, r3, #1
 8007332:	e7f3      	b.n	800731c <_lv_obj_style_create_transition+0xac>
 8007334:	4296      	cmp	r6, r2
 8007336:	d1f1      	bne.n	800731c <_lv_obj_style_create_transition+0xac>
 8007338:	429f      	cmp	r7, r3
 800733a:	dbee      	blt.n	800731a <_lv_obj_style_create_transition+0xaa>
 800733c:	e7f8      	b.n	8007330 <_lv_obj_style_create_transition+0xc0>
        tr->prop = tr_dsc->prop;
 800733e:	892b      	ldrh	r3, [r5, #8]
        tr->obj = obj;
 8007340:	6004      	str	r4, [r0, #0]
        tr->prop = tr_dsc->prop;
 8007342:	8083      	strh	r3, [r0, #4]
        tr->selector = part;
 8007344:	f8c0 8008 	str.w	r8, [r0, #8]
    tr->end_value = v2;
 8007348:	e9c0 9603 	strd	r9, r6, [r0, #12]
        lv_anim_init(&a);
 800734c:	a801      	add	r0, sp, #4
 800734e:	f00f fa9d 	bl	801688c <lv_anim_init>
    a->end_value = end;
 8007352:	22ff      	movs	r2, #255	; 0xff
    a->exec_cb = exec_cb;
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <_lv_obj_style_create_transition+0x128>)
        lv_anim_start(&a);
 8007356:	a801      	add	r0, sp, #4
    a->end_value = end;
 8007358:	920a      	str	r2, [sp, #40]	; 0x28
    a->time = duration;
 800735a:	882a      	ldrh	r2, [r5, #0]
    a->exec_cb = exec_cb;
 800735c:	9302      	str	r3, [sp, #8]
    a->time = duration;
 800735e:	920b      	str	r2, [sp, #44]	; 0x2c
    a->act_time = -(int32_t)(delay);
 8007360:	886a      	ldrh	r2, [r5, #2]
    a->start_cb = start_cb;
 8007362:	4b0e      	ldr	r3, [pc, #56]	; (800739c <_lv_obj_style_create_transition+0x12c>)
    a->act_time = -(int32_t)(delay);
 8007364:	4252      	negs	r2, r2
    a->var = var;
 8007366:	9701      	str	r7, [sp, #4]
    a->start_cb = start_cb;
 8007368:	9303      	str	r3, [sp, #12]
    a->act_time = -(int32_t)(delay);
 800736a:	920c      	str	r2, [sp, #48]	; 0x30
    a->ready_cb = ready_cb;
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <_lv_obj_style_create_transition+0x130>)
    a->path_cb = path_cb;
 800736e:	68ea      	ldr	r2, [r5, #12]
    a->ready_cb = ready_cb;
 8007370:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 8007372:	2300      	movs	r3, #0
    a->path_cb = path_cb;
 8007374:	9207      	str	r2, [sp, #28]
 * @param en true: apply the start value immediately in `lv_anim_start`;
 *        false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 8007376:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    a->current_value = start;
 800737a:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->early_apply = en;
 800737e:	f363 0200 	bfi	r2, r3, #0, #1
        a.user_data = tr_dsc->user_data;
 8007382:	692b      	ldr	r3, [r5, #16]
 8007384:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 8007388:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
 800738a:	f00f fac5 	bl	8016918 <lv_anim_start>
}
 800738e:	b012      	add	sp, #72	; 0x48
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	2000b4f4 	.word	0x2000b4f4
 8007398:	08006c65 	.word	0x08006c65
 800739c:	0800711f 	.word	0x0800711f
 80073a0:	08006ee5 	.word	0x08006ee5

080073a4 <_lv_obj_style_state_compare>:
{
 80073a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 80073a8:	2600      	movs	r6, #0
{
 80073aa:	4607      	mov	r7, r0
        bool valid1 = state_act & (~state1) ? false : true;
 80073ac:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 80073b0:	ea6f 0902 	mvn.w	r9, r2
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 80073b4:	4635      	mov	r5, r6
    for(i = 0; i < obj->style_cnt; i++) {
 80073b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073b8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80073bc:	42b3      	cmp	r3, r6
 80073be:	f240 80a1 	bls.w	8007504 <_lv_obj_style_state_compare+0x160>
        if(obj->styles[i].is_trans) continue;
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	00f1      	lsls	r1, r6, #3
 80073c6:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 80073ca:	79d8      	ldrb	r0, [r3, #7]
 80073cc:	0784      	lsls	r4, r0, #30
 80073ce:	f100 8093 	bmi.w	80074f8 <_lv_obj_style_state_compare+0x154>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f3c3 0a17 	ubfx	sl, r3, #0, #24
        bool valid1 = state_act & (~state1) ? false : true;
 80073d8:	b29b      	uxth	r3, r3
 80073da:	ea18 0f03 	tst.w	r8, r3
 80073de:	bf0c      	ite	eq
 80073e0:	2001      	moveq	r0, #1
 80073e2:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 80073e4:	ea19 0f03 	tst.w	r9, r3
        if(valid1 != valid2) {
 80073e8:	bf0c      	ite	eq
 80073ea:	2301      	moveq	r3, #1
 80073ec:	2300      	movne	r3, #0
 80073ee:	4298      	cmp	r0, r3
 80073f0:	f000 8082 	beq.w	80074f8 <_lv_obj_style_state_compare+0x154>
            lv_style_t * style = obj->styles[i].style;
 80073f4:	5854      	ldr	r4, [r2, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 80073f6:	aa01      	add	r2, sp, #4
 80073f8:	f241 0110 	movw	r1, #4112	; 0x1010
 80073fc:	4620      	mov	r0, r4
 80073fe:	f010 fe58 	bl	80180b2 <lv_style_get_prop>
 8007402:	2800      	cmp	r0, #0
 8007404:	d17a      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 8007406:	aa01      	add	r2, sp, #4
 8007408:	f241 0111 	movw	r1, #4113	; 0x1011
 800740c:	4620      	mov	r0, r4
 800740e:	f010 fe50 	bl	80180b2 <lv_style_get_prop>
 8007412:	2800      	cmp	r0, #0
 8007414:	d172      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 8007416:	aa01      	add	r2, sp, #4
 8007418:	f241 0112 	movw	r1, #4114	; 0x1012
 800741c:	4620      	mov	r0, r4
 800741e:	f010 fe48 	bl	80180b2 <lv_style_get_prop>
 8007422:	2800      	cmp	r0, #0
 8007424:	d16a      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 8007426:	aa01      	add	r2, sp, #4
 8007428:	f241 0113 	movw	r1, #4115	; 0x1013
 800742c:	4620      	mov	r0, r4
 800742e:	f010 fe40 	bl	80180b2 <lv_style_get_prop>
 8007432:	2800      	cmp	r0, #0
 8007434:	d162      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 8007436:	aa01      	add	r2, sp, #4
 8007438:	f241 0115 	movw	r1, #4117	; 0x1015
 800743c:	4620      	mov	r0, r4
 800743e:	f010 fe38 	bl	80180b2 <lv_style_get_prop>
 8007442:	2800      	cmp	r0, #0
 8007444:	d15a      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 8007446:	aa01      	add	r2, sp, #4
 8007448:	f241 0114 	movw	r1, #4116	; 0x1014
 800744c:	4620      	mov	r0, r4
 800744e:	f010 fe30 	bl	80180b2 <lv_style_get_prop>
 8007452:	2800      	cmp	r0, #0
 8007454:	d152      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 8007456:	aa01      	add	r2, sp, #4
 8007458:	f241 0169 	movw	r1, #4201	; 0x1069
 800745c:	4620      	mov	r0, r4
 800745e:	f010 fe28 	bl	80180b2 <lv_style_get_prop>
 8007462:	2800      	cmp	r0, #0
 8007464:	d14a      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 8007466:	aa01      	add	r2, sp, #4
 8007468:	f243 010c 	movw	r1, #12300	; 0x300c
 800746c:	4620      	mov	r0, r4
 800746e:	f010 fe20 	bl	80180b2 <lv_style_get_prop>
 8007472:	2800      	cmp	r0, #0
 8007474:	d142      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 8007476:	aa01      	add	r2, sp, #4
 8007478:	f243 010d 	movw	r1, #12301	; 0x300d
 800747c:	4620      	mov	r0, r4
 800747e:	f010 fe18 	bl	80180b2 <lv_style_get_prop>
 8007482:	2800      	cmp	r0, #0
 8007484:	d13a      	bne.n	80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 8007486:	aa01      	add	r2, sp, #4
 8007488:	f241 0101 	movw	r1, #4097	; 0x1001
 800748c:	4620      	mov	r0, r4
 800748e:	f010 fe10 	bl	80180b2 <lv_style_get_prop>
 8007492:	bb98      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 8007494:	aa01      	add	r2, sp, #4
 8007496:	f241 0104 	movw	r1, #4100	; 0x1004
 800749a:	4620      	mov	r0, r4
 800749c:	f010 fe09 	bl	80180b2 <lv_style_get_prop>
 80074a0:	bb60      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 80074a2:	aa01      	add	r2, sp, #4
 80074a4:	f241 0102 	movw	r1, #4098	; 0x1002
 80074a8:	4620      	mov	r0, r4
 80074aa:	f010 fe02 	bl	80180b2 <lv_style_get_prop>
 80074ae:	bb28      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 80074b0:	aa01      	add	r2, sp, #4
 80074b2:	f241 0103 	movw	r1, #4099	; 0x1003
 80074b6:	4620      	mov	r0, r4
 80074b8:	f010 fdfb 	bl	80180b2 <lv_style_get_prop>
 80074bc:	b9f0      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 80074be:	aa01      	add	r2, sp, #4
 80074c0:	f241 0105 	movw	r1, #4101	; 0x1005
 80074c4:	4620      	mov	r0, r4
 80074c6:	f010 fdf4 	bl	80180b2 <lv_style_get_prop>
 80074ca:	b9b8      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 80074cc:	aa01      	add	r2, sp, #4
 80074ce:	f241 0106 	movw	r1, #4102	; 0x1006
 80074d2:	4620      	mov	r0, r4
 80074d4:	f010 fded 	bl	80180b2 <lv_style_get_prop>
 80074d8:	b980      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 80074da:	aa01      	add	r2, sp, #4
 80074dc:	f241 0132 	movw	r1, #4146	; 0x1032
 80074e0:	4620      	mov	r0, r4
 80074e2:	f010 fde6 	bl	80180b2 <lv_style_get_prop>
 80074e6:	b948      	cbnz	r0, 80074fc <_lv_obj_style_state_compare+0x158>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80074e8:	aa01      	add	r2, sp, #4
 80074ea:	f640 010a 	movw	r1, #2058	; 0x80a
 80074ee:	4620      	mov	r0, r4
 80074f0:	f010 fddf 	bl	80180b2 <lv_style_get_prop>
 80074f4:	b150      	cbz	r0, 800750c <_lv_obj_style_state_compare+0x168>
                    res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80074f6:	2502      	movs	r5, #2
    for(i = 0; i < obj->style_cnt; i++) {
 80074f8:	3601      	adds	r6, #1
 80074fa:	e75c      	b.n	80073b6 <_lv_obj_style_state_compare+0x12>
                if(part_act == LV_PART_MAIN) {
 80074fc:	f41a 0f7f 	tst.w	sl, #16711680	; 0xff0000
 8007500:	d1f9      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
                    return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 8007502:	2503      	movs	r5, #3
}
 8007504:	4628      	mov	r0, r5
 8007506:	b002      	add	sp, #8
 8007508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800750c:	aa01      	add	r2, sp, #4
 800750e:	f640 010b 	movw	r1, #2059	; 0x80b
 8007512:	4620      	mov	r0, r4
 8007514:	f010 fdcd 	bl	80180b2 <lv_style_get_prop>
 8007518:	2800      	cmp	r0, #0
 800751a:	d1ec      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800751c:	aa01      	add	r2, sp, #4
 800751e:	f640 010f 	movw	r1, #2063	; 0x80f
 8007522:	4620      	mov	r0, r4
 8007524:	f010 fdc5 	bl	80180b2 <lv_style_get_prop>
 8007528:	2800      	cmp	r0, #0
 800752a:	d1e4      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800752c:	aa01      	add	r2, sp, #4
 800752e:	f640 010e 	movw	r1, #2062	; 0x80e
 8007532:	4620      	mov	r0, r4
 8007534:	f010 fdbd 	bl	80180b2 <lv_style_get_prop>
 8007538:	2800      	cmp	r0, #0
 800753a:	d1dc      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800753c:	aa01      	add	r2, sp, #4
 800753e:	f640 013c 	movw	r1, #2108	; 0x83c
 8007542:	4620      	mov	r0, r4
 8007544:	f010 fdb5 	bl	80180b2 <lv_style_get_prop>
 8007548:	2800      	cmp	r0, #0
 800754a:	d1d4      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800754c:	aa01      	add	r2, sp, #4
 800754e:	f640 013d 	movw	r1, #2109	; 0x83d
 8007552:	4620      	mov	r0, r4
 8007554:	f010 fdad 	bl	80180b2 <lv_style_get_prop>
 8007558:	2800      	cmp	r0, #0
 800755a:	d1cc      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800755c:	aa01      	add	r2, sp, #4
 800755e:	f640 013a 	movw	r1, #2106	; 0x83a
 8007562:	4620      	mov	r0, r4
 8007564:	f010 fda5 	bl	80180b2 <lv_style_get_prop>
 8007568:	2800      	cmp	r0, #0
 800756a:	d1c4      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800756c:	aa01      	add	r2, sp, #4
 800756e:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8007572:	4620      	mov	r0, r4
 8007574:	f010 fd9d 	bl	80180b2 <lv_style_get_prop>
 8007578:	2800      	cmp	r0, #0
 800757a:	d1bc      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800757c:	aa01      	add	r2, sp, #4
 800757e:	f640 0145 	movw	r1, #2117	; 0x845
 8007582:	4620      	mov	r0, r4
 8007584:	f010 fd95 	bl	80180b2 <lv_style_get_prop>
 8007588:	2800      	cmp	r0, #0
 800758a:	d1b4      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800758c:	aa01      	add	r2, sp, #4
 800758e:	f640 0141 	movw	r1, #2113	; 0x841
 8007592:	4620      	mov	r0, r4
 8007594:	f010 fd8d 	bl	80180b2 <lv_style_get_prop>
 8007598:	2800      	cmp	r0, #0
 800759a:	d1ac      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800759c:	aa01      	add	r2, sp, #4
 800759e:	f640 0142 	movw	r1, #2114	; 0x842
 80075a2:	4620      	mov	r0, r4
 80075a4:	f010 fd85 	bl	80180b2 <lv_style_get_prop>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d1a4      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80075ac:	aa01      	add	r2, sp, #4
 80075ae:	f640 0143 	movw	r1, #2115	; 0x843
 80075b2:	4620      	mov	r0, r4
 80075b4:	f010 fd7d 	bl	80180b2 <lv_style_get_prop>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d19c      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 80075bc:	aa01      	add	r2, sp, #4
 80075be:	f640 0149 	movw	r1, #2121	; 0x849
 80075c2:	4620      	mov	r0, r4
 80075c4:	f010 fd75 	bl	80180b2 <lv_style_get_prop>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d194      	bne.n	80074f6 <_lv_obj_style_state_compare+0x152>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 80075cc:	2d01      	cmp	r5, #1
 80075ce:	bf38      	it	cc
 80075d0:	2501      	movcc	r5, #1
 80075d2:	e791      	b.n	80074f8 <_lv_obj_style_state_compare+0x154>

080075d4 <lv_obj_style_get_selector_state>:
}
 80075d4:	b280      	uxth	r0, r0
 80075d6:	4770      	bx	lr

080075d8 <lv_obj_style_get_selector_part>:
}
 80075d8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80075dc:	4770      	bx	lr

080075de <lv_obj_get_screen>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 80075de:	b108      	cbz	r0, 80075e4 <lv_obj_get_screen+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 80075e0:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 80075e2:	b903      	cbnz	r3, 80075e6 <lv_obj_get_screen+0x8>
}
 80075e4:	4770      	bx	lr
 80075e6:	4618      	mov	r0, r3
 80075e8:	e7f9      	b.n	80075de <lv_obj_get_screen>
	...

080075ec <lv_obj_get_disp>:
{
 80075ec:	b538      	push	{r3, r4, r5, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80075ee:	6843      	ldr	r3, [r0, #4]
{
 80075f0:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80075f2:	b113      	cbz	r3, 80075fa <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 80075f4:	f7ff fff3 	bl	80075de <lv_obj_get_screen>
 80075f8:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 80075fa:	4d0b      	ldr	r5, [pc, #44]	; (8007628 <lv_obj_get_disp+0x3c>)
 80075fc:	480a      	ldr	r0, [pc, #40]	; (8007628 <lv_obj_get_disp+0x3c>)
 80075fe:	f00f fdbe 	bl	801717e <_lv_ll_get_head>
 8007602:	b178      	cbz	r0, 8007624 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8007604:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007606:	2300      	movs	r3, #0
 8007608:	e005      	b.n	8007616 <lv_obj_get_disp+0x2a>
            if(d->screens[i] == scr) return d;
 800760a:	68c1      	ldr	r1, [r0, #12]
 800760c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007610:	42a1      	cmp	r1, r4
 8007612:	d007      	beq.n	8007624 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8007614:	3301      	adds	r3, #1
 8007616:	429a      	cmp	r2, r3
 8007618:	d1f7      	bne.n	800760a <lv_obj_get_disp+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800761a:	4601      	mov	r1, r0
 800761c:	4628      	mov	r0, r5
 800761e:	f00f fdb4 	bl	801718a <_lv_ll_get_next>
 8007622:	e7ee      	b.n	8007602 <lv_obj_get_disp+0x16>
}
 8007624:	bd38      	pop	{r3, r4, r5, pc}
 8007626:	bf00      	nop
 8007628:	2000b4e8 	.word	0x2000b4e8

0800762c <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 800762c:	b100      	cbz	r0, 8007630 <lv_obj_get_parent+0x4>
    return obj->parent;
 800762e:	6840      	ldr	r0, [r0, #4]
}
 8007630:	4770      	bx	lr

08007632 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8007632:	6880      	ldr	r0, [r0, #8]
 8007634:	b158      	cbz	r0, 800764e <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 8007636:	2900      	cmp	r1, #0
 8007638:	6843      	ldr	r3, [r0, #4]
 800763a:	da01      	bge.n	8007640 <lv_obj_get_child+0xe>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
 800763c:	18c9      	adds	r1, r1, r3
 800763e:	d405      	bmi.n	800764c <lv_obj_get_child+0x1a>
        idu = (uint32_t) id;
    } else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8007640:	4299      	cmp	r1, r3
 8007642:	d203      	bcs.n	800764c <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 8007644:	6803      	ldr	r3, [r0, #0]
 8007646:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800764a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 800764c:	2000      	movs	r0, #0
}
 800764e:	4770      	bx	lr

08007650 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8007650:	6880      	ldr	r0, [r0, #8]
 8007652:	b100      	cbz	r0, 8007656 <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 8007654:	6840      	ldr	r0, [r0, #4]
}
 8007656:	4770      	bx	lr

08007658 <lv_obj_get_child_id>:

uint32_t lv_obj_get_child_id(const lv_obj_t * obj)
{
 8007658:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
 800765a:	4604      	mov	r4, r0
 800765c:	b1a0      	cbz	r0, 8007688 <lv_obj_get_child_id+0x30>
    return obj->parent;
 800765e:	6845      	ldr	r5, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 8007660:	b1a5      	cbz	r5, 800768c <lv_obj_get_child_id+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8007662:	4628      	mov	r0, r5
 8007664:	f7ff fff4 	bl	8007650 <lv_obj_get_child_cnt>
 8007668:	2200      	movs	r2, #0
 800766a:	4606      	mov	r6, r0
 800766c:	4296      	cmp	r6, r2
 800766e:	d103      	bne.n	8007678 <lv_obj_get_child_id+0x20>
        if(lv_obj_get_child(parent, i) == obj) return i;
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 8007670:	f04f 32ff 	mov.w	r2, #4294967295
}
 8007674:	4610      	mov	r0, r2
 8007676:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_get_child(parent, i) == obj) return i;
 8007678:	4611      	mov	r1, r2
 800767a:	4628      	mov	r0, r5
 800767c:	f7ff ffd9 	bl	8007632 <lv_obj_get_child>
 8007680:	4284      	cmp	r4, r0
 8007682:	d0f7      	beq.n	8007674 <lv_obj_get_child_id+0x1c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8007684:	3201      	adds	r2, #1
 8007686:	e7f1      	b.n	800766c <lv_obj_get_child_id+0x14>
    if(parent == NULL) return 0;
 8007688:	4602      	mov	r2, r0
 800768a:	e7f3      	b.n	8007674 <lv_obj_get_child_id+0x1c>
 800768c:	462a      	mov	r2, r5
 800768e:	e7f1      	b.n	8007674 <lv_obj_get_child_id+0x1c>

08007690 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8007692:	2200      	movs	r2, #0
 8007694:	2121      	movs	r1, #33	; 0x21
{
 8007696:	4605      	mov	r5, r0
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8007698:	f7fa fa2e 	bl	8001af8 <lv_event_send>
    if(res == LV_RES_INV) return;
 800769c:	2800      	cmp	r0, #0
 800769e:	f000 8084 	beq.w	80077aa <obj_del_core+0x11a>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7fc f9b4 	bl	8003a10 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 80076a8:	4607      	mov	r7, r0
 80076aa:	b110      	cbz	r0, 80076b2 <obj_del_core+0x22>
 80076ac:	4628      	mov	r0, r5
 80076ae:	f7fa fb86 	bl	8001dbe <lv_group_remove_obj>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 80076b2:	2100      	movs	r1, #0
 80076b4:	4628      	mov	r0, r5
 80076b6:	f00f f903 	bl	80168c0 <lv_anim_del>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 80076ba:	2100      	movs	r1, #0
 80076bc:	4628      	mov	r0, r5
 80076be:	f7ff ffb8 	bl	8007632 <lv_obj_get_child>
 80076c2:	4606      	mov	r6, r0
    while(child) {
 80076c4:	bb20      	cbnz	r0, 8007710 <obj_del_core+0x80>
    }

    _lv_event_mark_deleted(obj);
 80076c6:	4628      	mov	r0, r5
 80076c8:	f7fa fa3c 	bl	8001b44 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff fc5d 	bl	8006f8c <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80076d2:	4a36      	ldr	r2, [pc, #216]	; (80077ac <obj_del_core+0x11c>)
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	f7ff fb82 	bl	8006de0 <lv_obj_remove_style>
    lv_obj_remove_style_all(obj);
    lv_obj_enable_style_refresh(true);
 80076dc:	2001      	movs	r0, #1
 80076de:	f7ff fc55 	bl	8006f8c <lv_obj_enable_style_refresh>

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80076e2:	4630      	mov	r0, r6
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 80076e4:	f00e ff86 	bl	80165f4 <lv_indev_get_next>
 80076e8:	4604      	mov	r4, r0
    while(indev) {
 80076ea:	b9a8      	cbnz	r0, 8007718 <obj_del_core+0x88>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destructor(obj);
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7fc fced 	bl	80040cc <_lv_obj_destructor>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 80076f2:	686b      	ldr	r3, [r5, #4]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 80076f4:	4628      	mov	r0, r5
    if(obj->parent == NULL) {
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13f      	bne.n	800777a <obj_del_core+0xea>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 80076fa:	f7ff ff77 	bl	80075ec <lv_obj_get_disp>
 80076fe:	4606      	mov	r6, r0
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 8007700:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007702:	68c0      	ldr	r0, [r0, #12]
 8007704:	428c      	cmp	r4, r1
 8007706:	d122      	bne.n	800774e <obj_del_core+0xbe>
 8007708:	eb00 0384 	add.w	r3, r0, r4, lsl #2
            if(disp->screens[i] == obj) break;
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800770c:	3901      	subs	r1, #1
 800770e:	e028      	b.n	8007762 <obj_del_core+0xd2>
        obj_del_core(child);
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff ffbd 	bl	8007690 <obj_del_core>
 8007716:	e7d0      	b.n	80076ba <obj_del_core+0x2a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8007718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800771a:	429d      	cmp	r5, r3
 800771c:	d002      	beq.n	8007724 <obj_del_core+0x94>
 800771e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007720:	429d      	cmp	r5, r3
 8007722:	d103      	bne.n	800772c <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 8007724:	4629      	mov	r1, r5
 8007726:	4620      	mov	r0, r4
 8007728:	f7fa fc86 	bl	8002038 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800772c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800772e:	429d      	cmp	r5, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007730:	6d23      	ldr	r3, [r4, #80]	; 0x50
            indev->proc.types.pointer.last_pressed = NULL;
 8007732:	bf08      	it	eq
 8007734:	6326      	streq	r6, [r4, #48]	; 0x30
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007736:	429f      	cmp	r7, r3
 8007738:	d107      	bne.n	800774a <obj_del_core+0xba>
 800773a:	f7fa fd19 	bl	8002170 <lv_indev_get_obj_act>
 800773e:	4285      	cmp	r5, r0
 8007740:	d103      	bne.n	800774a <obj_del_core+0xba>
            lv_indev_reset(indev, obj);
 8007742:	4629      	mov	r1, r5
 8007744:	4620      	mov	r0, r4
 8007746:	f7fa fc77 	bl	8002038 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800774a:	4620      	mov	r0, r4
 800774c:	e7ca      	b.n	80076e4 <obj_del_core+0x54>
            if(disp->screens[i] == obj) break;
 800774e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8007752:	429d      	cmp	r5, r3
 8007754:	d0d8      	beq.n	8007708 <obj_del_core+0x78>
        for(i = 0; i < disp->screen_cnt; i++) {
 8007756:	3401      	adds	r4, #1
 8007758:	e7d4      	b.n	8007704 <obj_del_core+0x74>
            disp->screens[i] = disp->screens[i + 1];
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	3401      	adds	r4, #1
 800775e:	f843 2b04 	str.w	r2, [r3], #4
        for(i = id; i < disp->screen_cnt - 1; i++) {
 8007762:	428c      	cmp	r4, r1
 8007764:	d3f9      	bcc.n	800775a <obj_del_core+0xca>
        }
        disp->screen_cnt--;
 8007766:	6271      	str	r1, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 8007768:	0089      	lsls	r1, r1, #2
 800776a:	f00f ffa3 	bl	80176b4 <lv_mem_realloc>
 800776e:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->child_cnt--;
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children, obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 8007770:	4628      	mov	r0, r5
}
 8007772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj);
 8007776:	f00f be05 	b.w	8017384 <lv_mem_free>
        uint32_t id = lv_obj_get_child_id(obj);
 800777a:	f7ff ff6d 	bl	8007658 <lv_obj_get_child_id>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800777e:	686b      	ldr	r3, [r5, #4]
 8007780:	689c      	ldr	r4, [r3, #8]
 8007782:	6861      	ldr	r1, [r4, #4]
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	3901      	subs	r1, #1
 8007788:	4288      	cmp	r0, r1
 800778a:	d306      	bcc.n	800779a <obj_del_core+0x10a>
        obj->parent->spec_attr->child_cnt--;
 800778c:	6061      	str	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children, obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800778e:	4618      	mov	r0, r3
 8007790:	0089      	lsls	r1, r1, #2
 8007792:	f00f ff8f 	bl	80176b4 <lv_mem_realloc>
 8007796:	6020      	str	r0, [r4, #0]
 8007798:	e7ea      	b.n	8007770 <obj_del_core+0xe0>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800779a:	3001      	adds	r0, #1
 800779c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80077a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80077a4:	f843 2c04 	str.w	r2, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 80077a8:	e7e9      	b.n	800777e <obj_del_core+0xee>
}
 80077aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ac:	000fffff 	.word	0x000fffff

080077b0 <lv_obj_del>:
{
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
 80077b4:	f7fd fac8 	bl	8004d48 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 80077b8:	b1ed      	cbz	r5, 80077f6 <lv_obj_del+0x46>
    return obj->parent;
 80077ba:	686c      	ldr	r4, [r5, #4]
    if(par) {
 80077bc:	b1dc      	cbz	r4, 80077f6 <lv_obj_del+0x46>
    bool act_scr_del = false;
 80077be:	2700      	movs	r7, #0
        lv_obj_scrollbar_invalidate(par);
 80077c0:	4620      	mov	r0, r4
 80077c2:	f7ff f87c 	bl	80068be <lv_obj_scrollbar_invalidate>
    lv_disp_t * disp = NULL;
 80077c6:	463e      	mov	r6, r7
    obj_del_core(obj);
 80077c8:	4628      	mov	r0, r5
 80077ca:	f7ff ff61 	bl	8007690 <obj_del_core>
    if(par) {
 80077ce:	b174      	cbz	r4, 80077ee <lv_obj_del+0x3e>
        lv_obj_scroll_to(par, 0, 0, LV_ANIM_OFF);
 80077d0:	2300      	movs	r3, #0
 80077d2:	4620      	mov	r0, r4
 80077d4:	461a      	mov	r2, r3
 80077d6:	4619      	mov	r1, r3
 80077d8:	f7fe fd22 	bl	8006220 <lv_obj_scroll_to>
        if(par->spec_attr) {
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	b10b      	cbz	r3, 80077e4 <lv_obj_del+0x34>
                par->spec_attr->scroll.x = 0;
 80077e0:	2200      	movs	r2, #0
 80077e2:	611a      	str	r2, [r3, #16]
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 80077e4:	2200      	movs	r2, #0
 80077e6:	2122      	movs	r1, #34	; 0x22
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7fa f985 	bl	8001af8 <lv_event_send>
    if(act_scr_del)  {
 80077ee:	b10f      	cbz	r7, 80077f4 <lv_obj_del+0x44>
        disp->act_scr = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	6133      	str	r3, [r6, #16]
}
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7ff fef8 	bl	80075ec <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 80077fc:	4606      	mov	r6, r0
 80077fe:	2800      	cmp	r0, #0
 8007800:	d0f8      	beq.n	80077f4 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
 8007802:	6907      	ldr	r7, [r0, #16]
 8007804:	2400      	movs	r4, #0
 8007806:	1b7b      	subs	r3, r7, r5
 8007808:	425f      	negs	r7, r3
 800780a:	415f      	adcs	r7, r3
 800780c:	e7dc      	b.n	80077c8 <lv_obj_del+0x18>

0800780e <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 800780e:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too*/
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007810:	2200      	movs	r2, #0
{
 8007812:	460e      	mov	r6, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007814:	3114      	adds	r1, #20
{
 8007816:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007818:	f00f fa64 	bl	8016ce4 <_lv_area_is_in>
 800781c:	b910      	cbnz	r0, 8007824 <lv_refr_get_top_obj+0x16>
    lv_obj_t * found_p = NULL;
 800781e:	2000      	movs	r0, #0
            }
        }
    }

    return found_p;
}
 8007820:	b002      	add	sp, #8
 8007822:	bdd0      	pop	{r4, r6, r7, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007824:	2101      	movs	r1, #1
 8007826:	4630      	mov	r0, r6
 8007828:	f7fc f8e3 	bl	80039f2 <lv_obj_has_flag>
 800782c:	4604      	mov	r4, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	d1f5      	bne.n	800781e <lv_refr_get_top_obj+0x10>
        info.res = LV_COVER_RES_COVER;
 8007832:	f88d 0000 	strb.w	r0, [sp]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8007836:	466a      	mov	r2, sp
 8007838:	2112      	movs	r1, #18
 800783a:	4630      	mov	r0, r6
        info.area = area_p;
 800783c:	9701      	str	r7, [sp, #4]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800783e:	f7fa f95b 	bl	8001af8 <lv_event_send>
        if(info.res == LV_COVER_RES_MASKED) return NULL;
 8007842:	f89d 3000 	ldrb.w	r3, [sp]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d0e9      	beq.n	800781e <lv_refr_get_top_obj+0x10>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff ff00 	bl	8007650 <lv_obj_get_child_cnt>
 8007850:	4284      	cmp	r4, r0
 8007852:	d306      	bcc.n	8007862 <lv_refr_get_top_obj+0x54>
            if(info.res == LV_COVER_RES_COVER) {
 8007854:	f89d 3000 	ldrb.w	r3, [sp]
                found_p = obj;
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	4630      	moveq	r0, r6
 800785e:	2000      	movne	r0, #0
 8007860:	e7de      	b.n	8007820 <lv_refr_get_top_obj+0x12>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 8007862:	4621      	mov	r1, r4
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff fee4 	bl	8007632 <lv_obj_get_child>
 800786a:	4601      	mov	r1, r0
            found_p = lv_refr_get_top_obj(area_p, child);
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff ffce 	bl	800780e <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8007872:	2800      	cmp	r0, #0
 8007874:	d1d4      	bne.n	8007820 <lv_refr_get_top_obj+0x12>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007876:	3401      	adds	r4, #1
 8007878:	e7e7      	b.n	800784a <lv_refr_get_top_obj+0x3c>

0800787a <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 800787a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787c:	460f      	mov	r7, r1
 800787e:	b08b      	sub	sp, #44	; 0x2c
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 8007880:	2101      	movs	r1, #1
{
 8007882:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 8007884:	f7fc f8b5 	bl	80039f2 <lv_obj_has_flag>
 8007888:	4606      	mov	r6, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	d14b      	bne.n	8007926 <lv_refr_obj+0xac>
    /*Truncate the original mask to the coordinates of the parent
     *because the parent and its children are visible only here*/
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800788e:	4620      	mov	r0, r4
 8007890:	f7fc ff6a 	bl	8004768 <_lv_obj_get_ext_draw_size>
 8007894:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_area);
 8007896:	a904      	add	r1, sp, #16
 8007898:	4620      	mov	r0, r4
 800789a:	f7fd f8b0 	bl	80049fe <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 800789e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80078a2:	b2ab      	uxth	r3, r5
    obj_area.y1 -= ext_size;
    obj_area.x2 += ext_size;
    obj_area.y2 += ext_size;
 80078a4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80078a8:	4639      	mov	r1, r7
    obj_area.x1 -= ext_size;
 80078aa:	1ad2      	subs	r2, r2, r3
 80078ac:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 80078b0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 80078ba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80078be:	441a      	add	r2, r3
    obj_area.y2 += ext_size;
 80078c0:	4403      	add	r3, r0
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80078c2:	a802      	add	r0, sp, #8
    obj_area.x2 += ext_size;
 80078c4:	f8ad 2014 	strh.w	r2, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80078c8:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 80078ca:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 80078ce:	f00f f90a 	bl	8016ae6 <_lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 80078d2:	b340      	cbz	r0, 8007926 <lv_refr_obj+0xac>
        /*Redraw the object*/
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, &obj_ext_mask);
 80078d4:	aa02      	add	r2, sp, #8
 80078d6:	2114      	movs	r1, #20
 80078d8:	4620      	mov	r0, r4
 80078da:	f7fa f90d 	bl	8001af8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, &obj_ext_mask);
 80078de:	aa02      	add	r2, sp, #8
 80078e0:	2115      	movs	r1, #21
 80078e2:	4620      	mov	r0, r4
 80078e4:	f7fa f908 	bl	8001af8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &obj_ext_mask);
 80078e8:	aa02      	add	r2, sp, #8
 80078ea:	2116      	movs	r1, #22
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7fa f903 	bl	8001af8 <lv_event_send>
        draw_dsc.border_opa = LV_OPA_30;
        draw_dsc.border_color = debug_color;
        lv_draw_rect(&obj_ext_mask, &obj_ext_mask, &draw_dsc);
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 80078f2:	a904      	add	r1, sp, #16
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7fd f882 	bl	80049fe <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 80078fa:	aa04      	add	r2, sp, #16
 80078fc:	4639      	mov	r1, r7
 80078fe:	4668      	mov	r0, sp
 8007900:	f00f f8f1 	bl	8016ae6 <_lv_area_intersect>
        if(union_ok != false) {
 8007904:	2800      	cmp	r0, #0
 8007906:	d141      	bne.n	800798c <lv_refr_obj+0x112>
                }
            }
        }

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, &obj_ext_mask);
 8007908:	aa02      	add	r2, sp, #8
 800790a:	2117      	movs	r1, #23
 800790c:	4620      	mov	r0, r4
 800790e:	f7fa f8f3 	bl	8001af8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, &obj_ext_mask);
 8007912:	aa02      	add	r2, sp, #8
 8007914:	2118      	movs	r1, #24
 8007916:	4620      	mov	r0, r4
 8007918:	f7fa f8ee 	bl	8001af8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, &obj_ext_mask);
 800791c:	aa02      	add	r2, sp, #8
 800791e:	2119      	movs	r1, #25
 8007920:	4620      	mov	r0, r4
 8007922:	f7fa f8e9 	bl	8001af8 <lv_event_send>
    }
}
 8007926:	b00b      	add	sp, #44	; 0x2c
 8007928:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_t * child = lv_obj_get_child(obj, i);
 800792a:	4629      	mov	r1, r5
 800792c:	4620      	mov	r0, r4
 800792e:	f7ff fe80 	bl	8007632 <lv_obj_get_child>
 8007932:	4606      	mov	r6, r0
                lv_obj_get_coords(child, &child_area);
 8007934:	a908      	add	r1, sp, #32
 8007936:	f7fd f862 	bl	80049fe <lv_obj_get_coords>
                ext_size = _lv_obj_get_ext_draw_size(child);
 800793a:	4630      	mov	r0, r6
 800793c:	f7fc ff14 	bl	8004768 <_lv_obj_get_ext_draw_size>
                child_area.x1 -= ext_size;
 8007940:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007944:	b283      	uxth	r3, r0
                child_area.y2 += ext_size;
 8007946:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800794a:	4669      	mov	r1, sp
                child_area.x1 -= ext_size;
 800794c:	1ad2      	subs	r2, r2, r3
 800794e:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8007952:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 800795c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007960:	441a      	add	r2, r3
                child_area.y2 += ext_size;
 8007962:	4403      	add	r3, r0
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007964:	a806      	add	r0, sp, #24
                child_area.x2 += ext_size;
 8007966:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 800796a:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 800796c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007970:	f00f f8b9 	bl	8016ae6 <_lv_area_intersect>
                if(union_ok) {
 8007974:	b118      	cbz	r0, 800797e <lv_refr_obj+0x104>
                    lv_refr_obj(child, &mask_child);
 8007976:	a906      	add	r1, sp, #24
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ff7e 	bl	800787a <lv_refr_obj>
            for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800797e:	3501      	adds	r5, #1
 8007980:	4620      	mov	r0, r4
 8007982:	f7ff fe65 	bl	8007650 <lv_obj_get_child_cnt>
 8007986:	4285      	cmp	r5, r0
 8007988:	d3cf      	bcc.n	800792a <lv_refr_obj+0xb0>
 800798a:	e7bd      	b.n	8007908 <lv_refr_obj+0x8e>
 800798c:	4635      	mov	r5, r6
 800798e:	e7f7      	b.n	8007980 <lv_refr_obj+0x106>

08007990 <lv_refr_obj_and_children>:
{
 8007990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007996:	4605      	mov	r5, r0
 8007998:	b928      	cbnz	r0, 80079a6 <lv_refr_obj_and_children+0x16>
 800799a:	4b1f      	ldr	r3, [pc, #124]	; (8007a18 <lv_refr_obj_and_children+0x88>)
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	f7fa f812 	bl	80019c6 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 80079a2:	4605      	mov	r5, r0
 80079a4:	b140      	cbz	r0, 80079b8 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
 80079a6:	4628      	mov	r0, r5
 80079a8:	4631      	mov	r1, r6
 80079aa:	f7ff ff66 	bl	800787a <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 80079ae:	4628      	mov	r0, r5
 80079b0:	f7ff fe3c 	bl	800762c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 80079b4:	4604      	mov	r4, r0
    while(par != NULL) {
 80079b6:	bb58      	cbnz	r0, 8007a10 <lv_refr_obj_and_children+0x80>
}
 80079b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_obj_t * child = lv_obj_get_child(par, i);
 80079bc:	4639      	mov	r1, r7
 80079be:	4620      	mov	r0, r4
 80079c0:	f7ff fe37 	bl	8007632 <lv_obj_get_child>
            if(!go) {
 80079c4:	f1b8 0f00 	cmp.w	r8, #0
 80079c8:	d11e      	bne.n	8007a08 <lv_refr_obj_and_children+0x78>
                if(child == border_p) go = true;
 80079ca:	1a2b      	subs	r3, r5, r0
 80079cc:	f1d3 0800 	rsbs	r8, r3, #0
 80079d0:	eb48 0803 	adc.w	r8, r8, r3
        for(i = 0; i < lv_obj_get_child_cnt(par); i++) {
 80079d4:	3701      	adds	r7, #1
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7ff fe3a 	bl	8007650 <lv_obj_get_child_cnt>
 80079dc:	42b8      	cmp	r0, r7
 80079de:	d8ed      	bhi.n	80079bc <lv_refr_obj_and_children+0x2c>
        lv_event_send(par, LV_EVENT_DRAW_POST_BEGIN, (void*)mask_p);
 80079e0:	4632      	mov	r2, r6
 80079e2:	2117      	movs	r1, #23
 80079e4:	4620      	mov	r0, r4
        par = lv_obj_get_parent(par);
 80079e6:	4625      	mov	r5, r4
        lv_event_send(par, LV_EVENT_DRAW_POST_BEGIN, (void*)mask_p);
 80079e8:	f7fa f886 	bl	8001af8 <lv_event_send>
        lv_event_send(par, LV_EVENT_DRAW_POST, (void*)mask_p);
 80079ec:	4632      	mov	r2, r6
 80079ee:	2118      	movs	r1, #24
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7fa f881 	bl	8001af8 <lv_event_send>
        lv_event_send(par, LV_EVENT_DRAW_POST_END, (void*)mask_p);
 80079f6:	4632      	mov	r2, r6
 80079f8:	2119      	movs	r1, #25
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7fa f87c 	bl	8001af8 <lv_event_send>
        par = lv_obj_get_parent(par);
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7ff fe13 	bl	800762c <lv_obj_get_parent>
 8007a06:	e7d5      	b.n	80079b4 <lv_refr_obj_and_children+0x24>
                lv_refr_obj(child, mask_p);
 8007a08:	4631      	mov	r1, r6
 8007a0a:	f7ff ff36 	bl	800787a <lv_refr_obj>
 8007a0e:	e7e1      	b.n	80079d4 <lv_refr_obj_and_children+0x44>
        for(i = 0; i < lv_obj_get_child_cnt(par); i++) {
 8007a10:	2700      	movs	r7, #0
        bool go = false;
 8007a12:	46b8      	mov	r8, r7
 8007a14:	e7df      	b.n	80079d6 <lv_refr_obj_and_children+0x46>
 8007a16:	bf00      	nop
 8007a18:	20003068 	.word	0x20003068

08007a1c <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(void)
{
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007a20:	4dad      	ldr	r5, [pc, #692]	; (8007cd8 <draw_buf_flush+0x2bc>)
{
 8007a22:	ed2d 8b02 	vpush	{d8}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007a26:	6828      	ldr	r0, [r5, #0]
{
 8007a28:	b091      	sub	sp, #68	; 0x44
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007a2a:	f00e fda9 	bl	8016580 <lv_disp_get_draw_buf>
    lv_color_t * color_p = draw_buf->buf_act;

    draw_buf->flushing = 1;
 8007a2e:	2301      	movs	r3, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007a30:	682f      	ldr	r7, [r5, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007a32:	4604      	mov	r4, r0
    draw_buf->flushing = 1;
 8007a34:	6183      	str	r3, [r0, #24]
    lv_color_t * color_p = draw_buf->buf_act;
 8007a36:	6882      	ldr	r2, [r0, #8]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007a38:	6838      	ldr	r0, [r7, #0]
 8007a3a:	6841      	ldr	r1, [r0, #4]
 8007a3c:	6a0e      	ldr	r6, [r1, #32]
 8007a3e:	f016 0f01 	tst.w	r6, #1
 8007a42:	462e      	mov	r6, r5
 8007a44:	d04d      	beq.n	8007ae2 <draw_buf_flush+0xc6>
 8007a46:	6a09      	ldr	r1, [r1, #32]
 8007a48:	078d      	lsls	r5, r1, #30
 8007a4a:	d54a      	bpl.n	8007ae2 <draw_buf_flush+0xc6>
    else draw_buf->flushing_last = 0;
 8007a4c:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 8007a4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a50:	b113      	cbz	r3, 8007a58 <draw_buf_flush+0x3c>
 8007a52:	9201      	str	r2, [sp, #4]
 8007a54:	4798      	blx	r3
 8007a56:	9a01      	ldr	r2, [sp, #4]

    if(disp->driver->flush_cb) {
 8007a58:	6838      	ldr	r0, [r7, #0]
 8007a5a:	68c3      	ldr	r3, [r0, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80a0 	beq.w	8007ba2 <draw_buf_flush+0x186>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8007a62:	7a01      	ldrb	r1, [r0, #8]
 8007a64:	f104 0510 	add.w	r5, r4, #16
 8007a68:	f011 0f18 	tst.w	r1, #24
 8007a6c:	ee08 5a10 	vmov	s16, r5
 8007a70:	f000 8197 	beq.w	8007da2 <draw_buf_flush+0x386>
 8007a74:	0789      	lsls	r1, r1, #30
 8007a76:	f140 8194 	bpl.w	8007da2 <draw_buf_flush+0x386>
    lv_disp_drv_t * drv = disp_refr->driver;
 8007a7a:	6830      	ldr	r0, [r6, #0]
            draw_buf_rotate(&draw_buf->area, draw_buf->buf_act);
 8007a7c:	68a5      	ldr	r5, [r4, #8]
    lv_disp_drv_t * drv = disp_refr->driver;
 8007a7e:	6807      	ldr	r7, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8007a80:	7a3b      	ldrb	r3, [r7, #8]
 8007a82:	f003 0203 	and.w	r2, r3, #3
 8007a86:	2a03      	cmp	r2, #3
 8007a88:	f000 808b 	beq.w	8007ba2 <draw_buf_flush+0x186>
    if(drv->rotated == LV_DISP_ROT_180) {
 8007a8c:	f003 0218 	and.w	r2, r3, #24
 8007a90:	2a10      	cmp	r2, #16
 8007a92:	d133      	bne.n	8007afc <draw_buf_flush+0xe0>
 8007a94:	8aa0      	ldrh	r0, [r4, #20]
    uint32_t i = total - 1, j = 0;
 8007a96:	f04f 3eff 	mov.w	lr, #4294967295
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007a9a:	f8b4 c016 	ldrh.w	ip, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007a9e:	8a21      	ldrh	r1, [r4, #16]
 8007aa0:	1c43      	adds	r3, r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007aa2:	8a66      	ldrh	r6, [r4, #18]
 8007aa4:	f10c 0201 	add.w	r2, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007aa8:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007aaa:	1b92      	subs	r2, r2, r6
 8007aac:	fb13 e302 	smlabb	r3, r3, r2, lr
 8007ab0:	2200      	movs	r2, #0
    while(i > j) {
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d817      	bhi.n	8007ae6 <draw_buf_flush+0xca>
    area->y2 = drv->ver_res - area->y1 - 1;
 8007ab6:	887a      	ldrh	r2, [r7, #2]
 8007ab8:	883b      	ldrh	r3, [r7, #0]
 8007aba:	3a01      	subs	r2, #1
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b292      	uxth	r2, r2
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	1b96      	subs	r6, r2, r6
    area->y1 = drv->ver_res - tmp_coord - 1;
 8007ac4:	eba2 020c 	sub.w	r2, r2, ip
    area->x2 = drv->hor_res - area->x1 - 1;
 8007ac8:	1a59      	subs	r1, r3, r1
    area->x1 = drv->hor_res - tmp_coord - 1;
 8007aca:	1a1b      	subs	r3, r3, r0
    area->y1 = drv->ver_res - tmp_coord - 1;
 8007acc:	8262      	strh	r2, [r4, #18]
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
    TRACE_REFR("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2, color_p);
    drv->flush_cb(drv, area, color_p);
 8007ace:	4638      	mov	r0, r7
    area->x2 = drv->hor_res - area->x1 - 1;
 8007ad0:	82a1      	strh	r1, [r4, #20]
    drv->flush_cb(drv, area, color_p);
 8007ad2:	462a      	mov	r2, r5
    area->x1 = drv->hor_res - tmp_coord - 1;
 8007ad4:	8223      	strh	r3, [r4, #16]
    drv->flush_cb(drv, area, color_p);
 8007ad6:	ee18 1a10 	vmov	r1, s16
 8007ada:	68fb      	ldr	r3, [r7, #12]
    area->y2 = drv->ver_res - area->y1 - 1;
 8007adc:	82e6      	strh	r6, [r4, #22]
    drv->flush_cb(drv, area, color_p);
 8007ade:	4798      	blx	r3
}
 8007ae0:	e05f      	b.n	8007ba2 <draw_buf_flush+0x186>
    else draw_buf->flushing_last = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e7b2      	b.n	8007a4c <draw_buf_flush+0x30>
        tmp = color_p[i];
 8007ae6:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
        color_p[i] = color_p[j];
 8007aea:	f835 8012 	ldrh.w	r8, [r5, r2, lsl #1]
 8007aee:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
        i--;
 8007af2:	3b01      	subs	r3, #1
        color_p[j] = tmp;
 8007af4:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
        j++;
 8007af8:	3201      	adds	r2, #1
 8007afa:	e7da      	b.n	8007ab2 <draw_buf_flush+0x96>
    } else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8007afc:	071b      	lsls	r3, r3, #28
 8007afe:	d550      	bpl.n	8007ba2 <draw_buf_flush+0x186>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007b00:	f00e fd3e 	bl	8016580 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007b04:	8a23      	ldrh	r3, [r4, #16]
 8007b06:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	1c53      	adds	r3, r2, #1
 8007b0e:	9004      	str	r0, [sp, #16]
 8007b10:	9805      	ldr	r0, [sp, #20]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8007b18:	1a1e      	subs	r6, r3, r0
 8007b1a:	9306      	str	r3, [sp, #24]
 8007b1c:	b2b3      	uxth	r3, r6
 8007b1e:	b236      	sxth	r6, r6
 8007b20:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007b22:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8007b26:	930a      	str	r3, [sp, #40]	; 0x28
 8007b28:	8a63      	ldrh	r3, [r4, #18]
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	8ae3      	ldrh	r3, [r4, #22]
 8007b2e:	9801      	ldr	r0, [sp, #4]
 8007b30:	3301      	adds	r3, #1
 8007b32:	1a1b      	subs	r3, r3, r0
 8007b34:	b21b      	sxth	r3, r3
 8007b36:	9302      	str	r3, [sp, #8]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8007b38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007b3c:	9802      	ldr	r0, [sp, #8]
 8007b3e:	fbb3 f3f6 	udiv	r3, r3, r6
 8007b42:	4283      	cmp	r3, r0
 8007b44:	bfa8      	it	ge
 8007b46:	4603      	movge	r3, r0
 8007b48:	930b      	str	r3, [sp, #44]	; 0x2c
        if(drv->rotated == LV_DISP_ROT_90) {
 8007b4a:	7a3b      	ldrb	r3, [r7, #8]
 8007b4c:	f003 0318 	and.w	r3, r3, #24
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d134      	bne.n	8007bbe <draw_buf_flush+0x1a2>
            area->y2 = drv->ver_res - area->x1 - 1;
 8007b54:	887b      	ldrh	r3, [r7, #2]
 8007b56:	9905      	ldr	r1, [sp, #20]
 8007b58:	1e5a      	subs	r2, r3, #1
 8007b5a:	1a52      	subs	r2, r2, r1
 8007b5c:	82e2      	strh	r2, [r4, #22]
            area->y1 = area->y2 - area_w + 1;
 8007b5e:	9a06      	ldr	r2, [sp, #24]
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	8263      	strh	r3, [r4, #18]
        draw_buf->flushing = 0;
 8007b64:	2200      	movs	r2, #0
 8007b66:	9b04      	ldr	r3, [sp, #16]
 8007b68:	619a      	str	r2, [r3, #24]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007b6a:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
        lv_coord_t row = 0;
 8007b6e:	4690      	mov	r8, r2
        lv_color_t * rot_buf = NULL;
 8007b70:	4693      	mov	fp, r2
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007b72:	105b      	asrs	r3, r3, #1
 8007b74:	930f      	str	r3, [sp, #60]	; 0x3c
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8007b76:	1c73      	adds	r3, r6, #1
 8007b78:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8007b7c:	105b      	asrs	r3, r3, #1
 8007b7e:	930e      	str	r3, [sp, #56]	; 0x38
 8007b80:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	930d      	str	r3, [sp, #52]	; 0x34
 8007b88:	9b07      	ldr	r3, [sp, #28]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	9309      	str	r3, [sp, #36]	; 0x24
        while(row < area_h) {
 8007b90:	9b02      	ldr	r3, [sp, #8]
 8007b92:	4543      	cmp	r3, r8
 8007b94:	dc16      	bgt.n	8007bc4 <draw_buf_flush+0x1a8>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 8007b96:	f1bb 0f00 	cmp.w	fp, #0
 8007b9a:	d002      	beq.n	8007ba2 <draw_buf_flush+0x186>
 8007b9c:	4658      	mov	r0, fp
 8007b9e:	f00f fbff 	bl	80173a0 <lv_mem_buf_release>
    if(draw_buf->buf1 && draw_buf->buf2) {
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	b133      	cbz	r3, 8007bb4 <draw_buf_flush+0x198>
 8007ba6:	6862      	ldr	r2, [r4, #4]
 8007ba8:	b122      	cbz	r2, 8007bb4 <draw_buf_flush+0x198>
        if(draw_buf->buf_act == draw_buf->buf1)
 8007baa:	68a1      	ldr	r1, [r4, #8]
            draw_buf->buf_act = draw_buf->buf2;
 8007bac:	428b      	cmp	r3, r1
 8007bae:	bf08      	it	eq
 8007bb0:	4613      	moveq	r3, r2
 8007bb2:	60a3      	str	r3, [r4, #8]
}
 8007bb4:	b011      	add	sp, #68	; 0x44
 8007bb6:	ecbd 8b02 	vpop	{d8}
 8007bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 8007bbe:	8261      	strh	r1, [r4, #18]
            area->y2 = area->y1 + area_w - 1;
 8007bc0:	82e2      	strh	r2, [r4, #22]
 8007bc2:	e7cf      	b.n	8007b64 <draw_buf_flush+0x148>
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bc8:	eba3 0308 	sub.w	r3, r3, r8
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	bfa8      	it	ge
 8007bd0:	4613      	movge	r3, r2
            draw_buf->flushing = 1;
 8007bd2:	9a04      	ldr	r2, [sp, #16]
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8007bd4:	9303      	str	r3, [sp, #12]
            draw_buf->flushing = 1;
 8007bd6:	2301      	movs	r3, #1
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8007bd8:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
            draw_buf->flushing = 1;
 8007bdc:	6193      	str	r3, [r2, #24]
            if((row == 0) && (area_h >= area_w)) {
 8007bde:	f1b8 0f00 	cmp.w	r8, #0
 8007be2:	f040 8088 	bne.w	8007cf6 <draw_buf_flush+0x2da>
 8007be6:	9b02      	ldr	r3, [sp, #8]
 8007be8:	429e      	cmp	r6, r3
 8007bea:	f300 8084 	bgt.w	8007cf6 <draw_buf_flush+0x2da>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007bee:	7a3b      	ldrb	r3, [r7, #8]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007bf0:	46c1      	mov	r9, r8
 8007bf2:	4641      	mov	r1, r8
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8007bf4:	f003 0318 	and.w	r3, r3, #24
 8007bf8:	930c      	str	r3, [sp, #48]	; 0x30
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007bfa:	b20b      	sxth	r3, r1
 8007bfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	da46      	bge.n	8007c90 <draw_buf_flush+0x274>
 8007c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c04:	eba3 0c01 	sub.w	ip, r3, r1
 8007c08:	2300      	movs	r3, #0
 8007c0a:	fa0f fc8c 	sxth.w	ip, ip
 8007c0e:	e023      	b.n	8007c58 <draw_buf_flush+0x23c>
            lv_coord_t inv_j = (w - 1) - j;
 8007c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c12:	eb02 0a09 	add.w	sl, r2, r9
 8007c16:	fb06 c202 	mla	r2, r6, r2, ip
 8007c1a:	1ac3      	subs	r3, r0, r3
            if(is_270) {
 8007c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c1e:	b21b      	sxth	r3, r3
 8007c20:	2818      	cmp	r0, #24
 8007c22:	f835 001a 	ldrh.w	r0, [r5, sl, lsl #1]
 8007c26:	fb06 3e0c 	mla	lr, r6, ip, r3
 8007c2a:	f8ad 0020 	strh.w	r0, [sp, #32]
 8007c2e:	fb06 1303 	mla	r3, r6, r3, r1
 8007c32:	d11c      	bne.n	8007c6e <draw_buf_flush+0x252>
    *a = *b;
 8007c34:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8007c38:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
    *b = *c;
 8007c3c:	f835 a01e 	ldrh.w	sl, [r5, lr, lsl #1]
 8007c40:	f825 a013 	strh.w	sl, [r5, r3, lsl #1]
    *c = *d;
 8007c44:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8007c48:	f825 301e 	strh.w	r3, [r5, lr, lsl #1]
    *d = tmp;
 8007c4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007c50:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	9303      	str	r3, [sp, #12]
 8007c5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007c5c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8007c60:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007c64:	4282      	cmp	r2, r0
 8007c66:	dbd3      	blt.n	8007c10 <draw_buf_flush+0x1f4>
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007c68:	3101      	adds	r1, #1
 8007c6a:	44b1      	add	r9, r6
 8007c6c:	e7c5      	b.n	8007bfa <draw_buf_flush+0x1de>
    *a = *b;
 8007c6e:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8007c72:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
    *b = *c;
 8007c76:	f835 a01e 	ldrh.w	sl, [r5, lr, lsl #1]
 8007c7a:	f825 a012 	strh.w	sl, [r5, r2, lsl #1]
    *c = *d;
 8007c7e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8007c82:	f825 201e 	strh.w	r2, [r5, lr, lsl #1]
    *d = tmp;
 8007c86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007c8a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
}
 8007c8e:	e7e1      	b.n	8007c54 <draw_buf_flush+0x238>
                if(drv->rotated == LV_DISP_ROT_90) {
 8007c90:	7a3b      	ldrb	r3, [r7, #8]
 8007c92:	f003 0318 	and.w	r3, r3, #24
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d120      	bne.n	8007cdc <draw_buf_flush+0x2c0>
                    area->x1 = init_y_off;
 8007c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                    area->x2 = init_y_off + area_w - 1;
 8007c9c:	9a07      	ldr	r2, [sp, #28]
                    area->x1 = init_y_off;
 8007c9e:	8223      	strh	r3, [r4, #16]
                    area->x2 = init_y_off + area_w - 1;
 8007ca0:	9b01      	ldr	r3, [sp, #4]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	4413      	add	r3, r2
 8007ca6:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - area_w + 1;
 8007ca8:	46b1      	mov	r9, r6
    drv->flush_cb(drv, area, color_p);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f1bb 0f00 	cmp.w	fp, #0
 8007cb0:	bf14      	ite	ne
 8007cb2:	465a      	movne	r2, fp
 8007cb4:	462a      	moveq	r2, r5
 8007cb6:	ee18 1a10 	vmov	r1, s16
 8007cba:	4638      	mov	r0, r7
 8007cbc:	4798      	blx	r3
            while(draw_buf->flushing) {
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d167      	bne.n	8007d96 <draw_buf_flush+0x37a>
            color_p += area_w * height;
 8007cc6:	fb09 f306 	mul.w	r3, r9, r6
            row += height;
 8007cca:	44c8      	add	r8, r9
            color_p += area_w * height;
 8007ccc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            row += height;
 8007cd0:	fa0f f888 	sxth.w	r8, r8
 8007cd4:	e75c      	b.n	8007b90 <draw_buf_flush+0x174>
 8007cd6:	bf00      	nop
 8007cd8:	20003068 	.word	0x20003068
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8007cdc:	883b      	ldrh	r3, [r7, #0]
 8007cde:	9a01      	ldr	r2, [sp, #4]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 8007ce4:	9a05      	ldr	r2, [sp, #20]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8007ce6:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 8007ce8:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8007cea:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - area_w + 1;
 8007cec:	4413      	add	r3, r2
 8007cee:	9a06      	ldr	r2, [sp, #24]
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	8223      	strh	r3, [r4, #16]
 8007cf4:	e7d8      	b.n	8007ca8 <draw_buf_flush+0x28c>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8007cf6:	f1bb 0f00 	cmp.w	fp, #0
 8007cfa:	d104      	bne.n	8007d06 <draw_buf_flush+0x2ea>
 8007cfc:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8007d00:	f00f fcf2 	bl	80176e8 <lv_mem_buf_get>
 8007d04:	4683      	mov	fp, r0
    uint32_t invert = (area_w * area_h) - 1;
 8007d06:	fb06 f309 	mul.w	r3, r6, r9
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8007d0a:	7a38      	ldrb	r0, [r7, #8]
    for(lv_coord_t y = 0; y < area_h; y++) {
 8007d0c:	46ae      	mov	lr, r5
 8007d0e:	2100      	movs	r1, #0
    uint32_t initial_i = ((area_w - 1) * area_h);
 8007d10:	eba3 0a09 	sub.w	sl, r3, r9
 8007d14:	3b01      	subs	r3, #1
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8007d16:	f000 0018 	and.w	r0, r0, #24
    for(lv_coord_t y = 0; y < area_h; y++) {
 8007d1a:	eba3 030a 	sub.w	r3, r3, sl
 8007d1e:	9308      	str	r3, [sp, #32]
 8007d20:	b20a      	sxth	r2, r1
 8007d22:	4591      	cmp	r9, r2
 8007d24:	dc10      	bgt.n	8007d48 <draw_buf_flush+0x32c>
                if(drv->rotated == LV_DISP_ROT_90) {
 8007d26:	7a3b      	ldrb	r3, [r7, #8]
 8007d28:	fa1f f188 	uxth.w	r1, r8
 8007d2c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8007d30:	f003 0318 	and.w	r3, r3, #24
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d123      	bne.n	8007d80 <draw_buf_flush+0x364>
                    area->x1 = init_y_off + row;
 8007d38:	9b01      	ldr	r3, [sp, #4]
 8007d3a:	440b      	add	r3, r1
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8223      	strh	r3, [r4, #16]
                    area->x2 = init_y_off + row + height - 1;
 8007d40:	3b01      	subs	r3, #1
 8007d42:	4413      	add	r3, r2
 8007d44:	82a3      	strh	r3, [r4, #20]
 8007d46:	e7b0      	b.n	8007caa <draw_buf_flush+0x28e>
        if(invert_i)
 8007d48:	2818      	cmp	r0, #24
 8007d4a:	eb01 020a 	add.w	r2, r1, sl
    for(lv_coord_t i = 0; i < w/2; i++) {
 8007d4e:	f04f 0c00 	mov.w	ip, #0
 8007d52:	bf04      	itt	eq
 8007d54:	9b08      	ldreq	r3, [sp, #32]
 8007d56:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 8007d58:	fa0f f38c 	sxth.w	r3, ip
 8007d5c:	429e      	cmp	r6, r3
 8007d5e:	dc03      	bgt.n	8007d68 <draw_buf_flush+0x34c>
 8007d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d62:	3101      	adds	r1, #1
 8007d64:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 8007d66:	e7db      	b.n	8007d20 <draw_buf_flush+0x304>
            rot_buf[i] = *(orig_color_p++);
 8007d68:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
            if(invert_i)
 8007d6c:	2818      	cmp	r0, #24
 8007d6e:	f10c 0c01 	add.w	ip, ip, #1
            rot_buf[i] = *(orig_color_p++);
 8007d72:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
                i += area_h;
 8007d76:	bf0c      	ite	eq
 8007d78:	444a      	addeq	r2, r9
                i -= area_h;
 8007d7a:	eba2 0209 	subne.w	r2, r2, r9
        for(lv_coord_t x = 0; x < area_w; x++) {
 8007d7e:	e7eb      	b.n	8007d58 <draw_buf_flush+0x33c>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8007d80:	883b      	ldrh	r3, [r7, #0]
 8007d82:	9801      	ldr	r0, [sp, #4]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	1a1b      	subs	r3, r3, r0
 8007d88:	1a5b      	subs	r3, r3, r1
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - height + 1;
 8007d8e:	3301      	adds	r3, #1
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	8223      	strh	r3, [r4, #16]
 8007d94:	e789      	b.n	8007caa <draw_buf_flush+0x28e>
                if(drv->wait_cb) drv->wait_cb(drv);
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d090      	beq.n	8007cbe <draw_buf_flush+0x2a2>
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	4798      	blx	r3
 8007da0:	e78d      	b.n	8007cbe <draw_buf_flush+0x2a2>
    drv->flush_cb(drv, area, color_p);
 8007da2:	ee18 1a10 	vmov	r1, s16
 8007da6:	e69a      	b.n	8007ade <draw_buf_flush+0xc2>

08007da8 <lv_refr_area_part>:
{
 8007da8:	b570      	push	{r4, r5, r6, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007daa:	4c46      	ldr	r4, [pc, #280]	; (8007ec4 <lv_refr_area_part+0x11c>)
{
 8007dac:	b094      	sub	sp, #80	; 0x50
 8007dae:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	f00e fbe5 	bl	8016580 <lv_disp_get_draw_buf>
 8007db6:	4605      	mov	r5, r0
        if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8007db8:	6822      	ldr	r2, [r4, #0]
    while(draw_buf->flushing) {
 8007dba:	69ab      	ldr	r3, [r5, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d168      	bne.n	8007e92 <lv_refr_area_part+0xea>
    _lv_area_intersect(&start_mask, area_p, &draw_buf->area);
 8007dc0:	f105 0210 	add.w	r2, r5, #16
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	a803      	add	r0, sp, #12
 8007dc8:	f00e fe8d 	bl	8016ae6 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	f7f9 fdfa 	bl	80019c6 <lv_disp_get_scr_act>
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	a803      	add	r0, sp, #12
 8007dd6:	f7ff fd1a 	bl	800780e <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 8007dda:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007ddc:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 8007dde:	695d      	ldr	r5, [r3, #20]
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	d06c      	beq.n	8007ebe <lv_refr_area_part+0x116>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 8007de4:	4629      	mov	r1, r5
 8007de6:	a803      	add	r0, sp, #12
 8007de8:	f7ff fd11 	bl	800780e <lv_refr_get_top_obj>
 8007dec:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8007dee:	bb5e      	cbnz	r6, 8007e48 <lv_refr_area_part+0xa0>
 8007df0:	bb50      	cbnz	r0, 8007e48 <lv_refr_area_part+0xa0>
        if(disp_refr->bg_img) {
 8007df2:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
 8007df4:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
 8007df6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	d050      	beq.n	8007e9e <lv_refr_area_part+0xf6>
            lv_draw_img_dsc_init(&dsc);
 8007dfc:	f002 f864 	bl	8009ec8 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 8007e00:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8007e02:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 8007e04:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8007e08:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8007e0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007e0e:	f006 ffdd 	bl	800edcc <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8007e12:	2801      	cmp	r0, #1
 8007e14:	d117      	bne.n	8007e46 <lv_refr_area_part+0x9e>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 8007e16:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8007e1a:	a805      	add	r0, sp, #20
 8007e1c:	9b02      	ldr	r3, [sp, #8]
 8007e1e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8007e22:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8007e26:	3a01      	subs	r2, #1
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b212      	sxth	r2, r2
 8007e2c:	b21b      	sxth	r3, r3
 8007e2e:	9200      	str	r2, [sp, #0]
 8007e30:	2200      	movs	r2, #0
 8007e32:	4611      	mov	r1, r2
 8007e34:	f00e fe18 	bl	8016a68 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	ab07      	add	r3, sp, #28
 8007e3c:	a903      	add	r1, sp, #12
 8007e3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e40:	a805      	add	r0, sp, #20
 8007e42:	f002 f875 	bl	8009f30 <lv_draw_img>
            }
 8007e46:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	6958      	ldr	r0, [r3, #20]
 8007e4c:	b128      	cbz	r0, 8007e5a <lv_refr_area_part+0xb2>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 8007e4e:	a903      	add	r1, sp, #12
 8007e50:	2d00      	cmp	r5, #0
 8007e52:	bf18      	it	ne
 8007e54:	4628      	movne	r0, r5
 8007e56:	f7ff fd9b 	bl	8007990 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 8007e5a:	b90e      	cbnz	r6, 8007e60 <lv_refr_area_part+0xb8>
        top_act_scr = disp_refr->act_scr;
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	691e      	ldr	r6, [r3, #16]
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 8007e60:	a903      	add	r1, sp, #12
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff fd94 	bl	8007990 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	f7f9 fdba 	bl	80019e2 <lv_disp_get_layer_top>
 8007e6e:	a903      	add	r1, sp, #12
 8007e70:	f7ff fd8e 	bl	8007990 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	f7f9 fdbb 	bl	80019f0 <lv_disp_get_layer_sys>
 8007e7a:	a903      	add	r1, sp, #12
 8007e7c:	f7ff fd88 	bl	8007990 <lv_refr_obj_and_children>
    if(disp_refr->driver->full_refresh == false) {
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	7a1b      	ldrb	r3, [r3, #8]
 8007e86:	07db      	lsls	r3, r3, #31
 8007e88:	d401      	bmi.n	8007e8e <lv_refr_area_part+0xe6>
        draw_buf_flush();
 8007e8a:	f7ff fdc7 	bl	8007a1c <draw_buf_flush>
}
 8007e8e:	b014      	add	sp, #80	; 0x50
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
        if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8007e92:	6810      	ldr	r0, [r2, #0]
 8007e94:	69c3      	ldr	r3, [r0, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d08f      	beq.n	8007dba <lv_refr_area_part+0x12>
 8007e9a:	4798      	blx	r3
 8007e9c:	e78c      	b.n	8007db8 <lv_refr_area_part+0x10>
            lv_draw_rect_dsc_init(&dsc);
 8007e9e:	f004 fc0b 	bl	800c6b8 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8007ea2:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8007ea4:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 8007ea6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8007ea8:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
 8007eaa:	f8ad 2020 	strh.w	r2, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8007eae:	aa07      	add	r2, sp, #28
            dsc.bg_opa = disp_refr->bg_opa;
 8007eb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007eb4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 8007eb8:	f004 fc20 	bl	800c6fc <lv_draw_rect>
 8007ebc:	e7c4      	b.n	8007e48 <lv_refr_area_part+0xa0>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1c2      	bne.n	8007e48 <lv_refr_area_part+0xa0>
 8007ec2:	e796      	b.n	8007df2 <lv_refr_area_part+0x4a>
 8007ec4:	20003068 	.word	0x20003068

08007ec8 <_lv_refr_init>:
}
 8007ec8:	4770      	bx	lr

08007eca <_lv_inv_area>:
{
 8007eca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007ecc:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 8007ece:	4604      	mov	r4, r0
 8007ed0:	b918      	cbnz	r0, 8007eda <_lv_inv_area+0x10>
 8007ed2:	f00e fb11 	bl	80164f8 <lv_disp_get_default>
    if(!disp) return;
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	b110      	cbz	r0, 8007ee0 <_lv_inv_area+0x16>
    if(area_p == NULL) {
 8007eda:	b91d      	cbnz	r5, 8007ee4 <_lv_inv_area+0x1a>
        disp->inv_p = 0;
 8007edc:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 8007ee0:	b004      	add	sp, #16
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x1 = 0;
 8007ee4:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007ee6:	4620      	mov	r0, r4
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8007ee8:	466e      	mov	r6, sp
    scr_area.x1 = 0;
 8007eea:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8007eec:	f00e fb0a 	bl	8016504 <lv_disp_get_hor_res>
 8007ef0:	3801      	subs	r0, #1
 8007ef2:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f00e fb14 	bl	8016524 <lv_disp_get_ver_res>
 8007efc:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8007efe:	4632      	mov	r2, r6
 8007f00:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8007f02:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8007f06:	a802      	add	r0, sp, #8
 8007f08:	f00e fded 	bl	8016ae6 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0e7      	beq.n	8007ee0 <_lv_inv_area+0x16>
    if(disp->driver->full_refresh) {
 8007f10:	6820      	ldr	r0, [r4, #0]
 8007f12:	7a03      	ldrb	r3, [r0, #8]
 8007f14:	07db      	lsls	r3, r3, #31
 8007f16:	d50c      	bpl.n	8007f32 <_lv_inv_area+0x68>
        disp->inv_areas[0] = scr_area;
 8007f18:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007f1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f20:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 8007f24:	2301      	movs	r3, #1
    lv_timer_resume(disp->refr_timer);
 8007f26:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 8007f28:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    lv_timer_resume(disp->refr_timer);
 8007f2c:	f010 facf 	bl	80184ce <lv_timer_resume>
 8007f30:	e7d6      	b.n	8007ee0 <_lv_inv_area+0x16>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8007f32:	6903      	ldr	r3, [r0, #16]
 8007f34:	b10b      	cbz	r3, 8007f3a <_lv_inv_area+0x70>
 8007f36:	a902      	add	r1, sp, #8
 8007f38:	4798      	blx	r3
{
 8007f3a:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 8007f3c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8007f40:	b2aa      	uxth	r2, r5
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d813      	bhi.n	8007f6e <_lv_inv_area+0xa4>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 8007f46:	2b1f      	cmp	r3, #31
 8007f48:	d81d      	bhi.n	8007f86 <_lv_inv_area+0xbc>
    dest->x1 = src->x1;
 8007f4a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007f4e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8007f52:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 8007f54:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8007f58:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 8007f5a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8007f5e:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 8007f60:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007f64:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 8007f66:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	e7db      	b.n	8007f26 <_lv_inv_area+0x5c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 8007f6e:	b2a9      	uxth	r1, r5
 8007f70:	2200      	movs	r2, #0
 8007f72:	a802      	add	r0, sp, #8
 8007f74:	3501      	adds	r5, #1
 8007f76:	3106      	adds	r1, #6
 8007f78:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8007f7c:	f00e feb2 	bl	8016ce4 <_lv_area_is_in>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d0db      	beq.n	8007f3c <_lv_inv_area+0x72>
 8007f84:	e7ac      	b.n	8007ee0 <_lv_inv_area+0x16>
        disp->inv_p = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 8007f8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f90:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 8007f92:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007f96:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 8007f98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007f9c:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 8007f9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007fa2:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 8007fa4:	e7df      	b.n	8007f66 <_lv_inv_area+0x9c>
	...

08007fa8 <_lv_refr_get_disp_refreshing>:
}
 8007fa8:	4b01      	ldr	r3, [pc, #4]	; (8007fb0 <_lv_refr_get_disp_refreshing+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20003068 	.word	0x20003068

08007fb4 <_lv_disp_refr_timer>:
{
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	4605      	mov	r5, r0
    disp_refr = tmr->user_data;
 8007fba:	4cb9      	ldr	r4, [pc, #740]	; (80082a0 <_lv_disp_refr_timer+0x2ec>)
{
 8007fbc:	ed2d 8b02 	vpush	{d8}
 8007fc0:	b089      	sub	sp, #36	; 0x24
    uint32_t start = lv_tick_get();
 8007fc2:	f00e fb4d 	bl	8016660 <lv_tick_get>
    disp_refr = tmr->user_data;
 8007fc6:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 8007fc8:	ee08 0a90 	vmov	s17, r0
    lv_timer_pause(tmr);
 8007fcc:	4628      	mov	r0, r5
    disp_refr = tmr->user_data;
 8007fce:	6023      	str	r3, [r4, #0]
    lv_timer_pause(tmr);
 8007fd0:	f010 fa78 	bl	80184c4 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	6918      	ldr	r0, [r3, #16]
 8007fd8:	f7fd fb1e 	bl	8005618 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	6958      	ldr	r0, [r3, #20]
 8007fe0:	b108      	cbz	r0, 8007fe6 <_lv_disp_refr_timer+0x32>
 8007fe2:	f7fd fb19 	bl	8005618 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	69d8      	ldr	r0, [r3, #28]
 8007fea:	f7fd fb15 	bl	8005618 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	6a18      	ldr	r0, [r3, #32]
 8007ff2:	f7fd fb11 	bl	8005618 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	d167      	bne.n	80080ce <_lv_disp_refr_timer+0x11a>
        disp_refr->inv_p = 0;
 8007ffe:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 8008002:	b009      	add	sp, #36	; 0x24
 8008004:	ecbd 8b02 	vpop	{d8}
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800800c:	4433      	add	r3, r6
 800800e:	f893 5130 	ldrb.w	r5, [r3, #304]	; 0x130
 8008012:	b1b5      	cbz	r5, 8008042 <_lv_disp_refr_timer+0x8e>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8008014:	3601      	adds	r6, #1
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f8b3 7150 	ldrh.w	r7, [r3, #336]	; 0x150
 800801c:	42be      	cmp	r6, r7
 800801e:	d3f5      	bcc.n	800800c <_lv_disp_refr_timer+0x58>
    px_num = 0;
 8008020:	4aa0      	ldr	r2, [pc, #640]	; (80082a4 <_lv_disp_refr_timer+0x2f0>)
 8008022:	2100      	movs	r1, #0
 8008024:	6011      	str	r1, [r2, #0]
    if(disp_refr->inv_p == 0) return;
 8008026:	2f00      	cmp	r7, #0
 8008028:	d155      	bne.n	80080d6 <_lv_disp_refr_timer+0x122>
    if(disp_refr->inv_p != 0) {
 800802a:	4b9d      	ldr	r3, [pc, #628]	; (80082a0 <_lv_disp_refr_timer+0x2ec>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8008032:	2a00      	cmp	r2, #0
 8008034:	f040 8165 	bne.w	8008302 <_lv_disp_refr_timer+0x34e>
    lv_mem_buf_free_all();
 8008038:	f00f f9c6 	bl	80173c8 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800803c:	f00e f9b6 	bl	80163ac <_lv_font_clean_up_fmt_txt>
    TRACE_REFR("finished");
 8008040:	e7df      	b.n	8008002 <_lv_disp_refr_timer+0x4e>
 8008042:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 8008046:	f10a 0930 	add.w	r9, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8008050:	429d      	cmp	r5, r3
 8008052:	d2df      	bcs.n	8008014 <_lv_disp_refr_timer+0x60>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8008054:	1943      	adds	r3, r0, r5
 8008056:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800805a:	2b00      	cmp	r3, #0
 800805c:	d135      	bne.n	80080ca <_lv_disp_refr_timer+0x116>
 800805e:	42ae      	cmp	r6, r5
 8008060:	d033      	beq.n	80080ca <_lv_disp_refr_timer+0x116>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8008062:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8008066:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800806a:	eb00 010b 	add.w	r1, r0, fp
 800806e:	4448      	add	r0, r9
 8008070:	f00e fe1b 	bl	8016caa <_lv_area_is_on>
 8008074:	b348      	cbz	r0, 80080ca <_lv_disp_refr_timer+0x116>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8008076:	6821      	ldr	r1, [r4, #0]
 8008078:	a806      	add	r0, sp, #24
 800807a:	eb01 020b 	add.w	r2, r1, fp
 800807e:	4449      	add	r1, r9
 8008080:	f00e fd5b 	bl	8016b3a <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8008084:	a806      	add	r0, sp, #24
 8008086:	f00e fd00 	bl	8016a8a <lv_area_get_size>
 800808a:	9001      	str	r0, [sp, #4]
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	4448      	add	r0, r9
 8008090:	f00e fcfb 	bl	8016a8a <lv_area_get_size>
 8008094:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 8008096:	6820      	ldr	r0, [r4, #0]
 8008098:	4458      	add	r0, fp
 800809a:	f00e fcf6 	bl	8016a8a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	4407      	add	r7, r0
 80080a2:	42bb      	cmp	r3, r7
 80080a4:	d211      	bcs.n	80080ca <_lv_disp_refr_timer+0x116>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80080a6:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 80080a8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80080ac:	eb03 020a 	add.w	r2, r3, sl
                disp_refr->inv_area_joined[join_from] = 1;
 80080b0:	442b      	add	r3, r5
 80080b2:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 80080b4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80080b8:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 80080ba:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80080be:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 80080c0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80080c4:	86d1      	strh	r1, [r2, #54]	; 0x36
 80080c6:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80080ca:	3501      	adds	r5, #1
 80080cc:	e7bd      	b.n	800804a <_lv_disp_refr_timer+0x96>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80080ce:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 80080d0:	f04f 0801 	mov.w	r8, #1
 80080d4:	e79f      	b.n	8008016 <_lv_disp_refr_timer+0x62>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80080d6:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
 80080d8:	f503 7298 	add.w	r2, r3, #304	; 0x130
 80080dc:	5dd1      	ldrb	r1, [r2, r7]
 80080de:	b111      	cbz	r1, 80080e6 <_lv_disp_refr_timer+0x132>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 80080e0:	3f01      	subs	r7, #1
 80080e2:	d2fb      	bcs.n	80080dc <_lv_disp_refr_timer+0x128>
    int32_t last_i = 0;
 80080e4:	2700      	movs	r7, #0
    disp_refr->driver->draw_buf->last_area = 0;
 80080e6:	681b      	ldr	r3, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80080e8:	f04f 0b00 	mov.w	fp, #0
 80080ec:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80082a0 <_lv_disp_refr_timer+0x2ec>
    disp_refr->driver->draw_buf->last_area = 0;
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80080f6:	f36f 0200 	bfc	r2, #0, #1
 80080fa:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver->draw_buf->last_part = 0;
 80080fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008102:	f36f 0241 	bfc	r2, #1, #1
 8008106:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800810a:	f8d9 5000 	ldr.w	r5, [r9]
 800810e:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 8008112:	459b      	cmp	fp, r3
 8008114:	da89      	bge.n	800802a <_lv_disp_refr_timer+0x76>
        if(disp_refr->inv_area_joined[i] == 0) {
 8008116:	eb05 030b 	add.w	r3, r5, fp
 800811a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 8098 	bne.w	8008254 <_lv_disp_refr_timer+0x2a0>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 8008124:	6829      	ldr	r1, [r5, #0]
 8008126:	45bb      	cmp	fp, r7
 8008128:	684b      	ldr	r3, [r1, #4]
 800812a:	d105      	bne.n	8008138 <_lv_disp_refr_timer+0x184>
 800812c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	f883 2020 	strb.w	r2, [r3, #32]
            disp_refr->driver->draw_buf->last_part = 0;
 8008138:	f893 2020 	ldrb.w	r2, [r3, #32]
 800813c:	ea4f 08cb 	mov.w	r8, fp, lsl #3
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008140:	4628      	mov	r0, r5
            disp_refr->driver->draw_buf->last_part = 0;
 8008142:	f36f 0241 	bfc	r2, #1, #1
 8008146:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800814a:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800814e:	9302      	str	r3, [sp, #8]
 8008150:	18eb      	adds	r3, r5, r3
 8008152:	ee08 3a10 	vmov	s16, r3
    if(disp_refr->driver->full_refresh) {
 8008156:	7a0b      	ldrb	r3, [r1, #8]
 8008158:	07da      	lsls	r2, r3, #31
 800815a:	d51d      	bpl.n	8008198 <_lv_disp_refr_timer+0x1e4>
        draw_buf->area.x1        = 0;
 800815c:	2600      	movs	r6, #0
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800815e:	f00e fa0f 	bl	8016580 <lv_disp_get_draw_buf>
 8008162:	4605      	mov	r5, r0
        draw_buf->area.x1        = 0;
 8008164:	8206      	strh	r6, [r0, #16]
        draw_buf->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008166:	6820      	ldr	r0, [r4, #0]
 8008168:	f00e f9cc 	bl	8016504 <lv_disp_get_hor_res>
 800816c:	3801      	subs	r0, #1
        draw_buf->area.y1        = 0;
 800816e:	826e      	strh	r6, [r5, #18]
        draw_buf->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008170:	82a8      	strh	r0, [r5, #20]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	f00e f9d6 	bl	8016524 <lv_disp_get_ver_res>
        disp_refr->driver->draw_buf->last_part = 1;
 8008178:	6823      	ldr	r3, [r4, #0]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800817a:	3801      	subs	r0, #1
        disp_refr->driver->draw_buf->last_part = 1;
 800817c:	681b      	ldr	r3, [r3, #0]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 800817e:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver->draw_buf->last_part = 1;
 8008180:	685a      	ldr	r2, [r3, #4]
            lv_refr_area_part(area_p);
 8008182:	ee18 0a10 	vmov	r0, s16
            disp_refr->driver->draw_buf->last_part = 1;
 8008186:	f892 3020 	ldrb.w	r3, [r2, #32]
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 8008192:	f7ff fe09 	bl	8007da8 <lv_refr_area_part>
 8008196:	e053      	b.n	8008240 <_lv_disp_refr_timer+0x28c>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008198:	4445      	add	r5, r8
 800819a:	f00e f9f1 	bl	8016580 <lv_disp_get_draw_buf>
 800819e:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80081a0:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
 80081a4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80081a6:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80081aa:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80081ac:	eba8 0803 	sub.w	r8, r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80081b0:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
 80081b4:	f103 0a01 	add.w	sl, r3, #1
 80081b8:	9301      	str	r3, [sp, #4]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80081ba:	4b39      	ldr	r3, [pc, #228]	; (80082a0 <_lv_disp_refr_timer+0x2ec>)
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80081bc:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80081c0:	ebaa 0a02 	sub.w	sl, sl, r2
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f00e f9ad 	bl	8016524 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	fa0f fa8a 	sxth.w	sl, sl
 80081d0:	4283      	cmp	r3, r0
 80081d2:	db42      	blt.n	800825a <_lv_disp_refr_timer+0x2a6>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80081d4:	4b32      	ldr	r3, [pc, #200]	; (80082a0 <_lv_disp_refr_timer+0x2ec>)
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	f00e f9a4 	bl	8016524 <lv_disp_get_ver_res>
 80081dc:	3801      	subs	r0, #1
        lv_coord_t y2 =
 80081de:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)draw_buf->size / w;
 80081e0:	68f2      	ldr	r2, [r6, #12]
 80081e2:	fbb2 f8f8 	udiv	r8, r2, r8
        if(max_row > h) max_row = h;
 80081e6:	45c2      	cmp	sl, r8
 80081e8:	4652      	mov	r2, sl
 80081ea:	bfa8      	it	ge
 80081ec:	4642      	movge	r2, r8
 80081ee:	9201      	str	r2, [sp, #4]
        if(disp_refr->driver->rounder_cb) {
 80081f0:	4a2b      	ldr	r2, [pc, #172]	; (80082a0 <_lv_disp_refr_timer+0x2ec>)
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	6812      	ldr	r2, [r2, #0]
 80081f6:	6912      	ldr	r2, [r2, #16]
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	d035      	beq.n	8008268 <_lv_disp_refr_timer+0x2b4>
            tmp.x1 = 0;
 80081fc:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
 80081fe:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
            tmp.x1 = 0;
 8008202:	9206      	str	r2, [sp, #24]
            tmp.x2 = 0;
 8008204:	f8ad 201c 	strh.w	r2, [sp, #28]
                disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8008208:	f8d9 2000 	ldr.w	r2, [r9]
 800820c:	46c2      	mov	sl, r8
 800820e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008212:	a906      	add	r1, sp, #24
 8008214:	6810      	ldr	r0, [r2, #0]
 8008216:	fa0f f888 	sxth.w	r8, r8
 800821a:	9303      	str	r3, [sp, #12]
 800821c:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
 800821e:	f8ad 801e 	strh.w	r8, [sp, #30]
                disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8008222:	4790      	blx	r2
 8008224:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8008228:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800822c:	3101      	adds	r1, #1
                if(lv_area_get_height(&tmp) <= max_row) break;
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	1a8a      	subs	r2, r1, r2
 8008232:	b212      	sxth	r2, r2
 8008234:	4293      	cmp	r3, r2
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	da12      	bge.n	8008260 <_lv_disp_refr_timer+0x2ac>
            } while(h_tmp > 0);
 800823a:	f1b8 0f00 	cmp.w	r8, #0
 800823e:	dce3      	bgt.n	8008208 <_lv_disp_refr_timer+0x254>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	f8d9 0000 	ldr.w	r0, [r9]
 8008246:	4418      	add	r0, r3
 8008248:	f00e fc1f 	bl	8016a8a <lv_area_get_size>
 800824c:	4a15      	ldr	r2, [pc, #84]	; (80082a4 <_lv_disp_refr_timer+0x2f0>)
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	4418      	add	r0, r3
 8008252:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8008254:	f10b 0b01 	add.w	fp, fp, #1
 8008258:	e757      	b.n	800810a <_lv_disp_refr_timer+0x156>
        lv_coord_t y2 =
 800825a:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
 800825e:	e7bf      	b.n	80081e0 <_lv_disp_refr_timer+0x22c>
            if(h_tmp <= 0) {
 8008260:	f1ba 0f00 	cmp.w	sl, #0
 8008264:	ddec      	ble.n	8008240 <_lv_disp_refr_timer+0x28c>
                max_row = tmp.y2 + 1;
 8008266:	9101      	str	r1, [sp, #4]
            draw_buf->area.y2 = row + max_row - 1;
 8008268:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        lv_coord_t row_last = 0;
 800826c:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008270:	f9b5 0032 	ldrsh.w	r0, [r5, #50]	; 0x32
 8008274:	1e51      	subs	r1, r2, #1
 8008276:	9103      	str	r1, [sp, #12]
 8008278:	9901      	ldr	r1, [sp, #4]
 800827a:	eb00 0c01 	add.w	ip, r0, r1
 800827e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008282:	459c      	cmp	ip, r3
 8008284:	dd10      	ble.n	80082a8 <_lv_disp_refr_timer+0x2f4>
        if(y2 != row_last) {
 8008286:	4543      	cmp	r3, r8
 8008288:	d0da      	beq.n	8008240 <_lv_disp_refr_timer+0x28c>
            draw_buf->area.x1 = area_p->x1;
 800828a:	f9b5 1030 	ldrsh.w	r1, [r5, #48]	; 0x30
 800828e:	6822      	ldr	r2, [r4, #0]
 8008290:	8231      	strh	r1, [r6, #16]
            draw_buf->area.x2 = area_p->x2;
 8008292:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
            draw_buf->area.y2 = y2;
 8008296:	82f3      	strh	r3, [r6, #22]
            draw_buf->area.x2 = area_p->x2;
 8008298:	82b1      	strh	r1, [r6, #20]
            disp_refr->driver->draw_buf->last_part = 1;
 800829a:	6813      	ldr	r3, [r2, #0]
            draw_buf->area.y1 = row;
 800829c:	8270      	strh	r0, [r6, #18]
            disp_refr->driver->draw_buf->last_part = 1;
 800829e:	e76f      	b.n	8008180 <_lv_disp_refr_timer+0x1cc>
 80082a0:	20003068 	.word	0x20003068
 80082a4:	2000306c 	.word	0x2000306c
            draw_buf->area.x1 = area_p->x1;
 80082a8:	9903      	ldr	r1, [sp, #12]
 80082aa:	fa1f fa80 	uxth.w	sl, r0
 80082ae:	f9b5 c030 	ldrsh.w	ip, [r5, #48]	; 0x30
 80082b2:	fa11 f880 	uxtah	r8, r1, r0
 80082b6:	f8a6 c010 	strh.w	ip, [r6, #16]
            draw_buf->area.x2 = area_p->x2;
 80082ba:	fa0f f888 	sxth.w	r8, r8
 80082be:	f9b5 c034 	ldrsh.w	ip, [r5, #52]	; 0x34
            draw_buf->area.y1 = row;
 80082c2:	8270      	strh	r0, [r6, #18]
            draw_buf->area.y2 = row + max_row - 1;
 80082c4:	4598      	cmp	r8, r3
            draw_buf->area.x2 = area_p->x2;
 80082c6:	f8a6 c014 	strh.w	ip, [r6, #20]
            draw_buf->area.y2 = row + max_row - 1;
 80082ca:	bfa8      	it	ge
 80082cc:	4698      	movge	r8, r3
            if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 80082ce:	4543      	cmp	r3, r8
            draw_buf->area.y2 = row + max_row - 1;
 80082d0:	f8a6 8016 	strh.w	r8, [r6, #22]
            if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 80082d4:	d109      	bne.n	80082ea <_lv_disp_refr_timer+0x336>
 80082d6:	f8d9 0000 	ldr.w	r0, [r9]
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	6841      	ldr	r1, [r0, #4]
 80082de:	f891 0020 	ldrb.w	r0, [r1, #32]
 80082e2:	f040 0002 	orr.w	r0, r0, #2
 80082e6:	f881 0020 	strb.w	r0, [r1, #32]
            lv_refr_area_part(area_p);
 80082ea:	ee18 0a10 	vmov	r0, s16
 80082ee:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80082f2:	f7ff fd59 	bl	8007da8 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80082f6:	9a05      	ldr	r2, [sp, #20]
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	4492      	add	sl, r2
 80082fc:	fa0f f08a 	sxth.w	r0, sl
 8008300:	e7ba      	b.n	8008278 <_lv_disp_refr_timer+0x2c4>
        if(disp_refr->driver->full_refresh) {
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	7a1b      	ldrb	r3, [r3, #8]
 8008306:	07db      	lsls	r3, r3, #31
 8008308:	d501      	bpl.n	800830e <_lv_disp_refr_timer+0x35a>
            draw_buf_flush();
 800830a:	f7ff fb87 	bl	8007a1c <draw_buf_flush>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008314:	3030      	adds	r0, #48	; 0x30
 8008316:	f00f fa35 	bl	8017784 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	2120      	movs	r1, #32
 800831e:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8008322:	f00f fa2f 	bl	8017784 <lv_memset_00>
        disp_refr->inv_p = 0;
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	2200      	movs	r2, #0
        elaps = lv_tick_elaps(start);
 800832a:	ee18 0a90 	vmov	r0, s17
        disp_refr->inv_p = 0;
 800832e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8008332:	f00e f9a3 	bl	801667c <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 8008336:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8008338:	4601      	mov	r1, r0
        if(disp_refr->driver->monitor_cb) {
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	6983      	ldr	r3, [r0, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f43f ae7a 	beq.w	8008038 <_lv_disp_refr_timer+0x84>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8008344:	4a01      	ldr	r2, [pc, #4]	; (800834c <_lv_disp_refr_timer+0x398>)
 8008346:	6812      	ldr	r2, [r2, #0]
 8008348:	4798      	blx	r3
 800834a:	e675      	b.n	8008038 <_lv_disp_refr_timer+0x84>
 800834c:	2000306c 	.word	0x2000306c

08008350 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 8008354:	6840      	ldr	r0, [r0, #4]
{
 8008356:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8008358:	b108      	cbz	r0, 800835e <apply_theme+0xe>
 800835a:	f7ff fff9 	bl	8008350 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	b123      	cbz	r3, 800836c <apply_theme+0x1c>
 8008362:	4629      	mov	r1, r5
 8008364:	4620      	mov	r0, r4
}
 8008366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 800836a:	4718      	bx	r3
}
 800836c:	bd70      	pop	{r4, r5, r6, pc}

0800836e <lv_theme_get_from_obj>:
{
 800836e:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8008370:	b128      	cbz	r0, 800837e <lv_theme_get_from_obj+0x10>
 8008372:	f7ff f93b 	bl	80075ec <lv_obj_get_disp>
}
 8008376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 800837a:	f7f9 bb40 	b.w	80019fe <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800837e:	f00e f8bb 	bl	80164f8 <lv_disp_get_default>
 8008382:	e7f8      	b.n	8008376 <lv_theme_get_from_obj+0x8>

08008384 <lv_theme_apply>:
{
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8008388:	f7ff fff1 	bl	800836e <lv_theme_get_from_obj>
    if(th == NULL) return;
 800838c:	4604      	mov	r4, r0
 800838e:	b150      	cbz	r0, 80083a6 <lv_theme_apply+0x22>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8008390:	4628      	mov	r0, r5
 8008392:	2100      	movs	r1, #0
 8008394:	4a04      	ldr	r2, [pc, #16]	; (80083a8 <lv_theme_apply+0x24>)
 8008396:	f7fe fd23 	bl	8006de0 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800839a:	4629      	mov	r1, r5
 800839c:	4620      	mov	r0, r4
}
 800839e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 80083a2:	f7ff bfd5 	b.w	8008350 <apply_theme>
}
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	000fffff 	.word	0x000fffff

080083ac <lv_theme_get_color_primary>:
{
 80083ac:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 80083ae:	f7ff ffde 	bl	800836e <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80083b2:	b108      	cbz	r0, 80083b8 <lv_theme_get_color_primary+0xc>
 80083b4:	8a00      	ldrh	r0, [r0, #16]
}
 80083b6:	bd08      	pop	{r3, pc}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80083b8:	2011      	movs	r0, #17
}
 80083ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80083be:	f00e bd95 	b.w	8016eec <lv_palette_main>

080083c2 <get_rounded_area>:
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
    }
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 80083c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c6:	4607      	mov	r7, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80083c8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80083cc:	eba1 0952 	sub.w	r9, r1, r2, lsr #1
{
 80083d0:	4690      	mov	r8, r2
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80083d2:	b200      	sxth	r0, r0
{
 80083d4:	461d      	mov	r5, r3
    int32_t thick_half = thickness / 2;
 80083d6:	0856      	lsrs	r6, r2, #1
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80083d8:	f00e fef8 	bl	80171cc <lv_trigo_sin>
 80083dc:	fb09 f000 	mul.w	r0, r9, r0
 80083e0:	b2b6      	uxth	r6, r6
 80083e2:	11c4      	asrs	r4, r0, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80083e4:	4638      	mov	r0, r7
 80083e6:	f00e fef1 	bl	80171cc <lv_trigo_sin>
 80083ea:	ea6f 0208 	mvn.w	r2, r8
 80083ee:	fb09 f000 	mul.w	r0, r9, r0

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 80083f2:	2c00      	cmp	r4, #0
 80083f4:	f002 0301 	and.w	r3, r2, #1
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 80083f8:	ea4f 10e0 	mov.w	r0, r0, asr #7
    if(cir_x > 0) {
 80083fc:	dd14      	ble.n	8008428 <get_rounded_area+0x66>
        cir_x = (cir_x - pa) >> ps;
 80083fe:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 8008400:	1b9a      	subs	r2, r3, r6
 8008402:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8008406:	4422      	add	r2, r4
        res_area->x2 = cir_x + thick_half;
 8008408:	4434      	add	r4, r6
        res_area->x1 = cir_x - thick_half + thick_corr;
 800840a:	802a      	strh	r2, [r5, #0]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 800840c:	2800      	cmp	r0, #0
        res_area->x2 = cir_x + thick_half - thick_corr;
 800840e:	80ac      	strh	r4, [r5, #4]
    if(cir_y > 0) {
 8008410:	dd12      	ble.n	8008438 <get_rounded_area+0x76>
        cir_y = (cir_y - pa) >> ps;
 8008412:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 8008416:	1b9a      	subs	r2, r3, r6
 8008418:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800841c:	440a      	add	r2, r1
        res_area->y2 = cir_y + thick_half;
 800841e:	4431      	add	r1, r6
        res_area->y1 = cir_y - thick_half + thick_corr;
 8008420:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 8008422:	80e9      	strh	r1, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 8008424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 8008428:	347f      	adds	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 800842a:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800842e:	1ba2      	subs	r2, r4, r6
 8008430:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8008432:	1af2      	subs	r2, r6, r3
 8008434:	4414      	add	r4, r2
 8008436:	e7e9      	b.n	800840c <get_rounded_area+0x4a>
        cir_y = (cir_y + pa) >> ps;
 8008438:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 800843a:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800843e:	1b82      	subs	r2, r0, r6
 8008440:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8008442:	1af2      	subs	r2, r6, r3
 8008444:	4410      	add	r0, r2
 8008446:	80e8      	strh	r0, [r5, #6]
}
 8008448:	e7ec      	b.n	8008424 <get_rounded_area+0x62>

0800844a <lv_draw_arc_dsc_init>:
{
 800844a:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 800844c:	210c      	movs	r1, #12
{
 800844e:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 8008450:	f00f f998 	bl	8017784 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8008454:	23ff      	movs	r3, #255	; 0xff
 8008456:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 8008458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800845c:	6023      	str	r3, [r4, #0]
}
 800845e:	bd10      	pop	{r4, pc}

08008460 <lv_draw_arc>:
{
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	ed2d 8b04 	vpush	{d8-d9}
 8008468:	b0d5      	sub	sp, #340	; 0x154
 800846a:	461d      	mov	r5, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800846c:	e9dd 8363 	ldrd	r8, r3, [sp, #396]	; 0x18c
{
 8008470:	f8bd 4188 	ldrh.w	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
 8008474:	7a1b      	ldrb	r3, [r3, #8]
{
 8008476:	9205      	str	r2, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 8008478:	2b02      	cmp	r3, #2
{
 800847a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    if(dsc->opa <= LV_OPA_MIN) return;
 800847e:	d972      	bls.n	8008566 <lv_draw_arc+0x106>
    if(dsc->width == 0) return;
 8008480:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d06c      	beq.n	8008566 <lv_draw_arc+0x106>
    if(start_angle == end_angle) return;
 800848c:	42a5      	cmp	r5, r4
 800848e:	d06a      	beq.n	8008566 <lv_draw_arc+0x106>
    if(width > radius) width = radius;
 8008490:	4293      	cmp	r3, r2
    lv_draw_rect_dsc_init(&cir_dsc);
 8008492:	a82c      	add	r0, sp, #176	; 0xb0
    if(width > radius) width = radius;
 8008494:	bfc4      	itt	gt
 8008496:	f9bd 3014 	ldrshgt.w	r3, [sp, #20]
 800849a:	9304      	strgt	r3, [sp, #16]
    lv_draw_rect_dsc_init(&cir_dsc);
 800849c:	f004 f90c 	bl	800c6b8 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 80084a0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80084a2:	7a5b      	ldrb	r3, [r3, #9]
 80084a4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80084a8:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
    if(dsc->img_src) {
 80084ac:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	7a1b      	ldrb	r3, [r3, #8]
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	d05c      	beq.n	8008570 <lv_draw_arc+0x110>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 80084b6:	2100      	movs	r1, #0
        cir_dsc.bg_img_src = dsc->img_src;
 80084b8:	922f      	str	r2, [sp, #188]	; 0xbc
        cir_dsc.bg_img_opa = dsc->opa;
 80084ba:	f88d 30c6 	strb.w	r3, [sp, #198]	; 0xc6
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 80084be:	f88d 10ba 	strb.w	r1, [sp, #186]	; 0xba
    area_out.x1 = center_x - radius;
 80084c2:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80084c6:	9b05      	ldr	r3, [sp, #20]
    area_out.y1 = center_y - radius;
 80084c8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    area_out.x1 = center_x - radius;
 80084cc:	ebaa 0c03 	sub.w	ip, sl, r3
    area_in.x1 += dsc->width;
 80084d0:	9964      	ldr	r1, [sp, #400]	; 0x190
    area_out.x1 = center_x - radius;
 80084d2:	fa0f f38c 	sxth.w	r3, ip
    area_in.x1 += dsc->width;
 80084d6:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 80084da:	8849      	ldrh	r1, [r1, #2]
    area_out.x1 = center_x - radius;
 80084dc:	9308      	str	r3, [sp, #32]
 80084de:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    area_in.x1 += dsc->width;
 80084e2:	fa11 fc8c 	uxtah	ip, r1, ip
    area_out.y1 = center_y - radius;
 80084e6:	9b05      	ldr	r3, [sp, #20]
    area_in.x1 += dsc->width;
 80084e8:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    area_out.y1 = center_y - radius;
 80084ec:	1afe      	subs	r6, r7, r3
 80084ee:	b233      	sxth	r3, r6
    area_in.y1 += dsc->width;
 80084f0:	fa11 f686 	uxtah	r6, r1, r6
    area_out.y1 = center_y - radius;
 80084f4:	9309      	str	r3, [sp, #36]	; 0x24
 80084f6:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80084fa:	9b05      	ldr	r3, [sp, #20]
    area_in.y1 += dsc->width;
 80084fc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 8008500:	4453      	add	r3, sl
 8008502:	b29b      	uxth	r3, r3
 8008504:	1e5a      	subs	r2, r3, #1
 8008506:	930a      	str	r3, [sp, #40]	; 0x28
    area_out.y2 = center_y + radius - 1;
 8008508:	9b05      	ldr	r3, [sp, #20]
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800850a:	b292      	uxth	r2, r2
    area_out.y2 = center_y + radius - 1;
 800850c:	18fb      	adds	r3, r7, r3
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800850e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    area_in.x2 -= dsc->width;
 8008512:	1a52      	subs	r2, r2, r1
    area_out.y2 = center_y + radius - 1;
 8008514:	b29b      	uxth	r3, r3
    area_in.x2 -= dsc->width;
 8008516:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    area_out.y2 = center_y + radius - 1;
 800851a:	930b      	str	r3, [sp, #44]	; 0x2c
 800851c:	3b01      	subs	r3, #1
 800851e:	b29b      	uxth	r3, r3
 8008520:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    area_in.y2 -= dsc->width;
 8008524:	1a5b      	subs	r3, r3, r1
 8008526:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800852a:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 800852e:	42a3      	cmp	r3, r4
 8008530:	d003      	beq.n	800853a <lv_draw_arc+0xda>
 8008532:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8008536:	429d      	cmp	r5, r3
 8008538:	d124      	bne.n	8008584 <lv_draw_arc+0x124>
        cir_dsc.border_color = dsc->color;
 800853a:	9b64      	ldr	r3, [sp, #400]	; 0x190
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 800853c:	aa2c      	add	r2, sp, #176	; 0xb0
        cir_dsc.border_width = dsc->width;
 800853e:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008542:	4641      	mov	r1, r8
        cir_dsc.border_color = dsc->color;
 8008544:	881b      	ldrh	r3, [r3, #0]
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008546:	a80f      	add	r0, sp, #60	; 0x3c
        cir_dsc.border_color = dsc->color;
 8008548:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        cir_dsc.border_opa = dsc->opa;
 800854c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800854e:	7a1b      	ldrb	r3, [r3, #8]
 8008550:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8008554:	2300      	movs	r3, #0
 8008556:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800855a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800855e:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008562:	f004 f8cb 	bl	800c6fc <lv_draw_rect>
}
 8008566:	b055      	add	sp, #340	; 0x154
 8008568:	ecbd 8b04 	vpop	{d8-d9}
 800856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 8008570:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
        cir_dsc.bg_color = dsc->color;
 8008574:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
 800857c:	e7a1      	b.n	80084c2 <lv_draw_arc+0x62>
    while(start_angle >= 360) start_angle -= 360;
 800857e:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8008582:	b2ad      	uxth	r5, r5
 8008584:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8008588:	d2f9      	bcs.n	800857e <lv_draw_arc+0x11e>
    while(end_angle >= 360) end_angle -= 360;
 800858a:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800858e:	f080 8086 	bcs.w	800869e <lv_draw_arc+0x23e>
    lv_draw_mask_angle_init(&mask_angle_param, center_x, center_y, start_angle, end_angle);
 8008592:	b223      	sxth	r3, r4
 8008594:	a839      	add	r0, sp, #228	; 0xe4
 8008596:	fa0f f985 	sxth.w	r9, r5
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	ee08 3a10 	vmov	s16, r3
 80085a0:	464b      	mov	r3, r9
 80085a2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80085a6:	f003 fca5 	bl	800bef4 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 80085aa:	2100      	movs	r1, #0
 80085ac:	a839      	add	r0, sp, #228	; 0xe4
 80085ae:	f003 fb7f 	bl	800bcb0 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 80085b2:	2301      	movs	r3, #1
 80085b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80085b8:	a911      	add	r1, sp, #68	; 0x44
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 80085ba:	ee08 0a90 	vmov	s17, r0
    lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 80085be:	a817      	add	r0, sp, #92	; 0x5c
 80085c0:	f003 fcdc 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 80085c4:	2100      	movs	r1, #0
 80085c6:	a817      	add	r0, sp, #92	; 0x5c
 80085c8:	f003 fb72 	bl	800bcb0 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 80085cc:	2300      	movs	r3, #0
 80085ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80085d2:	a90f      	add	r1, sp, #60	; 0x3c
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 80085d4:	ee09 0a10 	vmov	s18, r0
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 80085d8:	a81e      	add	r0, sp, #120	; 0x78
 80085da:	f003 fccf 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 80085de:	2100      	movs	r1, #0
 80085e0:	a81e      	add	r0, sp, #120	; 0x78
 80085e2:	f003 fb65 	bl	800bcb0 <lv_draw_mask_add>
    if(end_angle > start_angle) {
 80085e6:	42a5      	cmp	r5, r4
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 80085e8:	ee09 0a90 	vmov	s19, r0
        angle_gap = 360 - (end_angle - start_angle);
 80085ec:	bf36      	itet	cc
 80085ee:	1b63      	subcc	r3, r4, r5
        angle_gap = start_angle - end_angle;
 80085f0:	1b2b      	subcs	r3, r5, r4
        angle_gap = 360 - (end_angle - start_angle);
 80085f2:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 80085f6:	2b3c      	cmp	r3, #60	; 0x3c
 80085f8:	f340 8385 	ble.w	8008d06 <lv_draw_arc+0x8a6>
 80085fc:	9b05      	ldr	r3, [sp, #20]
 80085fe:	2b0a      	cmp	r3, #10
 8008600:	f240 8381 	bls.w	8008d06 <lv_draw_arc+0x8a6>
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8008604:	235a      	movs	r3, #90	; 0x5a
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8008606:	2d59      	cmp	r5, #89	; 0x59
        q_dsc.radius = radius;
 8008608:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 800860c:	fbb5 f2f3 	udiv	r2, r5, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 8008610:	fbb4 fbf3 	udiv	fp, r4, r3
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8008614:	9203      	str	r2, [sp, #12]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8008616:	d846      	bhi.n	80086a6 <lv_draw_arc+0x246>
 8008618:	9b04      	ldr	r3, [sp, #16]
 800861a:	2c59      	cmp	r4, #89	; 0x59
 800861c:	eba6 0303 	sub.w	r3, r6, r3
 8008620:	930c      	str	r3, [sp, #48]	; 0x30
 8008622:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 8008626:	b21b      	sxth	r3, r3
 8008628:	930d      	str	r3, [sp, #52]	; 0x34
 800862a:	f200 816a 	bhi.w	8008902 <lv_draw_arc+0x4a2>
 800862e:	42a5      	cmp	r5, r4
 8008630:	f080 8167 	bcs.w	8008902 <lv_draw_arc+0x4a2>
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008634:	4648      	mov	r0, r9
 8008636:	f00e fdc9 	bl	80171cc <lv_trigo_sin>
 800863a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863c:	4358      	muls	r0, r3
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800863e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008640:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008644:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008648:	4618      	mov	r0, r3
 800864a:	f00e fdbf 	bl	80171cc <lv_trigo_sin>
 800864e:	4370      	muls	r0, r6
 8008650:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008654:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008658:	ee18 0a10 	vmov	r0, s16
 800865c:	f00e fdb6 	bl	80171cc <lv_trigo_sin>
 8008660:	4370      	muls	r0, r6
 8008662:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008666:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800866a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800866e:	b200      	sxth	r0, r0
 8008670:	f00e fdac 	bl	80171cc <lv_trigo_sin>
 8008674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008676:	a925      	add	r1, sp, #148	; 0x94
 8008678:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800867a:	4358      	muls	r0, r3
 800867c:	eb0a 33e0 	add.w	r3, sl, r0, asr #15
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008680:	4608      	mov	r0, r1
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008682:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008686:	f00e fa2e 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 800868a:	b120      	cbz	r0, 8008696 <lv_draw_arc+0x236>
 800868c:	aa2c      	add	r2, sp, #176	; 0xb0
 800868e:	a925      	add	r1, sp, #148	; 0x94
 8008690:	a80f      	add	r0, sp, #60	; 0x3c
 8008692:	f004 f833 	bl	800c6fc <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008696:	42a5      	cmp	r5, r4
 8008698:	f200 82a6 	bhi.w	8008be8 <lv_draw_arc+0x788>
 800869c:	e25c      	b.n	8008b58 <lv_draw_arc+0x6f8>
    while(end_angle >= 360) end_angle -= 360;
 800869e:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 80086a2:	b2a4      	uxth	r4, r4
 80086a4:	e771      	b.n	800858a <lv_draw_arc+0x12a>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 80086a6:	2c59      	cmp	r4, #89	; 0x59
 80086a8:	f200 81af 	bhi.w	8008a0a <lv_draw_arc+0x5aa>
            quarter_area.x2 = q->center_x + q->radius;
 80086ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80086ae:	ee18 0a10 	vmov	r0, s16
            quarter_area.x2 = q->center_x + q->radius;
 80086b2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y1 = q->center_y;
 80086b6:	9b07      	ldr	r3, [sp, #28]
 80086b8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80086bc:	f00e fd86 	bl	80171cc <lv_trigo_sin>
 80086c0:	4370      	muls	r0, r6
 80086c2:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 80086c6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80086ca:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80086ce:	b200      	sxth	r0, r0
 80086d0:	f00e fd7c 	bl	80171cc <lv_trigo_sin>
 80086d4:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80086d6:	a925      	add	r1, sp, #148	; 0x94
 80086d8:	4642      	mov	r2, r8
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80086da:	1af3      	subs	r3, r6, r3
 80086dc:	4358      	muls	r0, r3
 80086de:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 80086e2:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80086e6:	4608      	mov	r0, r1
 80086e8:	f00e f9fd 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 80086ec:	b120      	cbz	r0, 80086f8 <lv_draw_arc+0x298>
 80086ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80086f0:	a925      	add	r1, sp, #148	; 0x94
 80086f2:	a80f      	add	r0, sp, #60	; 0x3c
 80086f4:	f004 f802 	bl	800c6fc <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	f040 81b3 	bne.w	8008a66 <lv_draw_arc+0x606>
            quarter_area.x1 = q->center_x - q->radius;
 8008700:	9b08      	ldr	r3, [sp, #32]
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008702:	4648      	mov	r0, r9
            quarter_area.x1 = q->center_x - q->radius;
 8008704:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y1 = q->center_y;
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800870e:	f00e fd5d 	bl	80171cc <lv_trigo_sin>
 8008712:	4370      	muls	r0, r6
 8008714:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008718:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800871c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008720:	b200      	sxth	r0, r0
 8008722:	f00e fd53 	bl	80171cc <lv_trigo_sin>
 8008726:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008728:	a925      	add	r1, sp, #148	; 0x94
 800872a:	4642      	mov	r2, r8
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800872c:	1af3      	subs	r3, r6, r3
 800872e:	4358      	muls	r0, r3
 8008730:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008734:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008738:	4608      	mov	r0, r1
 800873a:	f00e f9d4 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 800873e:	b120      	cbz	r0, 800874a <lv_draw_arc+0x2ea>
 8008740:	aa2c      	add	r2, sp, #176	; 0xb0
 8008742:	a925      	add	r1, sp, #148	; 0x94
 8008744:	a80f      	add	r0, sp, #60	; 0x3c
 8008746:	f003 ffd9 	bl	800c6fc <lv_draw_rect>
        if(q->end_quarter == 1) {
 800874a:	f1bb 0f01 	cmp.w	fp, #1
 800874e:	f000 818d 	beq.w	8008a6c <lv_draw_arc+0x60c>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8008752:	f1bb 0f02 	cmp.w	fp, #2
 8008756:	f040 8267 	bne.w	8008c28 <lv_draw_arc+0x7c8>
            quarter_area.x1 = q->center_x - q->radius;
 800875a:	9b08      	ldr	r3, [sp, #32]
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800875c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
            quarter_area.x1 = q->center_x - q->radius;
 8008760:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y - 1;
 8008764:	1e7b      	subs	r3, r7, #1
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008766:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center_y - 1;
 8008768:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800876c:	f00e fd2e 	bl	80171cc <lv_trigo_sin>
 8008770:	9b04      	ldr	r3, [sp, #16]
 8008772:	1af3      	subs	r3, r6, r3
 8008774:	4358      	muls	r0, r3
 8008776:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 800877a:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800877e:	ee18 0a10 	vmov	r0, s16
 8008782:	f00e fd23 	bl	80171cc <lv_trigo_sin>
 8008786:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008788:	a925      	add	r1, sp, #148	; 0x94
 800878a:	4642      	mov	r2, r8
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800878c:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008790:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008794:	4608      	mov	r0, r1
 8008796:	f00e f9a6 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 800879a:	b120      	cbz	r0, 80087a6 <lv_draw_arc+0x346>
 800879c:	aa2c      	add	r2, sp, #176	; 0xb0
 800879e:	a925      	add	r1, sp, #148	; 0x94
 80087a0:	a80f      	add	r0, sp, #60	; 0x3c
 80087a2:	f003 ffab 	bl	800c6fc <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	f040 824d 	bne.w	8008c48 <lv_draw_arc+0x7e8>
            quarter_area.x2 = q->center_x + q->radius;
 80087ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80087b0:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x2 = q->center_x + q->radius;
 80087b4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y - 1;
 80087b8:	1e7b      	subs	r3, r7, #1
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80087ba:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center_y - 1;
 80087bc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80087c0:	f00e fd04 	bl	80171cc <lv_trigo_sin>
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	1af3      	subs	r3, r6, r3
 80087c8:	4358      	muls	r0, r3
 80087ca:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 80087ce:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80087d2:	4648      	mov	r0, r9
 80087d4:	f00e fcfa 	bl	80171cc <lv_trigo_sin>
 80087d8:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80087da:	a925      	add	r1, sp, #148	; 0x94
 80087dc:	4642      	mov	r2, r8
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80087de:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 80087e2:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80087e6:	4608      	mov	r0, r1
 80087e8:	f00e f97d 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 80087ec:	b120      	cbz	r0, 80087f8 <lv_draw_arc+0x398>
 80087ee:	aa2c      	add	r2, sp, #176	; 0xb0
 80087f0:	a925      	add	r1, sp, #148	; 0x94
 80087f2:	a80f      	add	r0, sp, #60	; 0x3c
 80087f4:	f003 ff82 	bl	800c6fc <lv_draw_rect>
        if(q->end_quarter == 3) {
 80087f8:	f1bb 0f03 	cmp.w	fp, #3
 80087fc:	f000 818f 	beq.w	8008b1e <lv_draw_arc+0x6be>
    lv_draw_mask_remove_id(mask_angle_id);
 8008800:	ee18 0a90 	vmov	r0, s17
 8008804:	f003 fa8c 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8008808:	ee19 0a90 	vmov	r0, s19
 800880c:	f003 fa88 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8008810:	ee19 0a10 	vmov	r0, s18
 8008814:	f003 fa84 	bl	800bd20 <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 8008818:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800881a:	7a5b      	ldrb	r3, [r3, #9]
 800881c:	075b      	lsls	r3, r3, #29
 800881e:	f57f aea2 	bpl.w	8008566 <lv_draw_arc+0x106>
        get_rounded_area(start_angle, radius, width, &round_area);
 8008822:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8008826:	ab13      	add	r3, sp, #76	; 0x4c
 8008828:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800882c:	4648      	mov	r0, r9
 800882e:	4629      	mov	r1, r5
 8008830:	4632      	mov	r2, r6
 8008832:	f7ff fdc6 	bl	80083c2 <get_rounded_area>
        round_area.x1 += center_x;
 8008836:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 800883a:	aa13      	add	r2, sp, #76	; 0x4c
 800883c:	4641      	mov	r1, r8
        round_area.x1 += center_x;
 800883e:	4453      	add	r3, sl
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008840:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center_x;
 8008842:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.x2 += center_x;
 8008846:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800884a:	4453      	add	r3, sl
 800884c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center_y;
 8008850:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008854:	443b      	add	r3, r7
 8008856:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        round_area.y2 += center_y;
 800885a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800885e:	443b      	add	r3, r7
 8008860:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008864:	f00e f93f 	bl	8016ae6 <_lv_area_intersect>
 8008868:	b198      	cbz	r0, 8008892 <lv_draw_arc+0x432>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 800886a:	2300      	movs	r3, #0
 800886c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008870:	a913      	add	r1, sp, #76	; 0x4c
 8008872:	a825      	add	r0, sp, #148	; 0x94
 8008874:	f003 fb82 	bl	800bf7c <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8008878:	2100      	movs	r1, #0
 800887a:	a825      	add	r0, sp, #148	; 0x94
 800887c:	f003 fa18 	bl	800bcb0 <lv_draw_mask_add>
 8008880:	4604      	mov	r4, r0
            lv_draw_rect(&area_out, &clip_area2, &cir_dsc);
 8008882:	aa2c      	add	r2, sp, #176	; 0xb0
 8008884:	a80f      	add	r0, sp, #60	; 0x3c
 8008886:	a915      	add	r1, sp, #84	; 0x54
 8008888:	f003 ff38 	bl	800c6fc <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 800888c:	4620      	mov	r0, r4
 800888e:	f003 fa47 	bl	800bd20 <lv_draw_mask_remove_id>
        get_rounded_area(end_angle, radius, width, &round_area);
 8008892:	ab13      	add	r3, sp, #76	; 0x4c
 8008894:	4632      	mov	r2, r6
 8008896:	4629      	mov	r1, r5
 8008898:	ee18 0a10 	vmov	r0, s16
 800889c:	f7ff fd91 	bl	80083c2 <get_rounded_area>
        round_area.x1 += center_x;
 80088a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 80088a4:	aa13      	add	r2, sp, #76	; 0x4c
 80088a6:	4641      	mov	r1, r8
        round_area.x1 += center_x;
 80088a8:	4453      	add	r3, sl
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 80088aa:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center_x;
 80088ac:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.x2 += center_x;
 80088b0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80088b4:	4453      	add	r3, sl
 80088b6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center_y;
 80088ba:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80088be:	443b      	add	r3, r7
 80088c0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        round_area.y2 += center_y;
 80088c4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80088c8:	441f      	add	r7, r3
 80088ca:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 80088ce:	f00e f90a 	bl	8016ae6 <_lv_area_intersect>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f43f ae47 	beq.w	8008566 <lv_draw_arc+0x106>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 80088d8:	2300      	movs	r3, #0
 80088da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80088de:	a913      	add	r1, sp, #76	; 0x4c
 80088e0:	a825      	add	r0, sp, #148	; 0x94
 80088e2:	f003 fb4b 	bl	800bf7c <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 80088e6:	2100      	movs	r1, #0
 80088e8:	a825      	add	r0, sp, #148	; 0x94
 80088ea:	f003 f9e1 	bl	800bcb0 <lv_draw_mask_add>
 80088ee:	4604      	mov	r4, r0
            lv_draw_rect(&area_out, &clip_area2, &cir_dsc);
 80088f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80088f2:	a80f      	add	r0, sp, #60	; 0x3c
 80088f4:	a915      	add	r1, sp, #84	; 0x54
 80088f6:	f003 ff01 	bl	800c6fc <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 80088fa:	4620      	mov	r0, r4
 80088fc:	f003 fa10 	bl	800bd20 <lv_draw_mask_remove_id>
 8008900:	e631      	b.n	8008566 <lv_draw_arc+0x106>
            quarter_area.x1 = q->center_x;
 8008902:	9b06      	ldr	r3, [sp, #24]
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008904:	4648      	mov	r0, r9
            quarter_area.x1 = q->center_x;
 8008906:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y + q->radius;
 800890a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008910:	f00e fc5c 	bl	80171cc <lv_trigo_sin>
 8008914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008916:	4343      	muls	r3, r0
 8008918:	eb07 30e3 	add.w	r0, r7, r3, asr #15
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800891c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800891e:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008922:	4618      	mov	r0, r3
 8008924:	f00e fc52 	bl	80171cc <lv_trigo_sin>
 8008928:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 800892a:	a925      	add	r1, sp, #148	; 0x94
 800892c:	4642      	mov	r2, r8
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800892e:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008932:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008936:	4608      	mov	r0, r1
 8008938:	f00e f8d5 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 800893c:	b120      	cbz	r0, 8008948 <lv_draw_arc+0x4e8>
 800893e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008940:	a925      	add	r1, sp, #148	; 0x94
 8008942:	a80f      	add	r0, sp, #60	; 0x3c
 8008944:	f003 feda 	bl	800c6fc <lv_draw_rect>
        if(q->end_quarter == 0) {
 8008948:	2c59      	cmp	r4, #89	; 0x59
 800894a:	f67f aeaf 	bls.w	80086ac <lv_draw_arc+0x24c>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	2b01      	cmp	r3, #1
 8008952:	f040 8088 	bne.w	8008a66 <lv_draw_arc+0x606>
 8008956:	f1bb 0f01 	cmp.w	fp, #1
 800895a:	f47f aed1 	bne.w	8008700 <lv_draw_arc+0x2a0>
 800895e:	42a5      	cmp	r5, r4
 8008960:	f4bf aece 	bcs.w	8008700 <lv_draw_arc+0x2a0>
 8008964:	9b04      	ldr	r3, [sp, #16]
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008966:	4648      	mov	r0, r9
 8008968:	1af3      	subs	r3, r6, r3
 800896a:	9307      	str	r3, [sp, #28]
 800896c:	f00e fc2e 	bl	80171cc <lv_trigo_sin>
 8008970:	4370      	muls	r0, r6
 8008972:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008976:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800897a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 800897e:	b200      	sxth	r0, r0
 8008980:	f00e fc24 	bl	80171cc <lv_trigo_sin>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	4358      	muls	r0, r3
 8008988:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 800898c:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008990:	ee18 0a10 	vmov	r0, s16
 8008994:	f00e fc1a 	bl	80171cc <lv_trigo_sin>
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	4358      	muls	r0, r3
 800899c:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 80089a0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80089a4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80089a8:	b200      	sxth	r0, r0
 80089aa:	f00e fc0f 	bl	80171cc <lv_trigo_sin>
 80089ae:	4370      	muls	r0, r6
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80089b0:	a925      	add	r1, sp, #148	; 0x94
 80089b2:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80089b4:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 80089b8:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80089bc:	4608      	mov	r0, r1
 80089be:	f00e f892 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 80089c2:	b120      	cbz	r0, 80089ce <lv_draw_arc+0x56e>
 80089c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80089c6:	a925      	add	r1, sp, #148	; 0x94
 80089c8:	a80f      	add	r0, sp, #60	; 0x3c
 80089ca:	f003 fe97 	bl	800c6fc <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80089ce:	42a5      	cmp	r5, r4
 80089d0:	f240 812e 	bls.w	8008c30 <lv_draw_arc+0x7d0>
        quarter_area.x1 = q->center_x - q->radius;
 80089d4:	9b08      	ldr	r3, [sp, #32]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80089d6:	a925      	add	r1, sp, #148	; 0x94
 80089d8:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x - q->radius;
 80089da:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80089de:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y - q->radius;
 80089e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e2:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x - 1;
 80089e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089ea:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y - 1;
 80089ee:	1e7b      	subs	r3, r7, #1
 80089f0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80089f4:	f00e f877 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 80089f8:	2800      	cmp	r0, #0
 80089fa:	f000 8132 	beq.w	8008c62 <lv_draw_arc+0x802>
 80089fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8008a00:	a925      	add	r1, sp, #148	; 0x94
 8008a02:	a80f      	add	r0, sp, #60	; 0x3c
 8008a04:	f003 fe7a 	bl	800c6fc <lv_draw_rect>
 8008a08:	e12b      	b.n	8008c62 <lv_draw_arc+0x802>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	455b      	cmp	r3, fp
 8008a0e:	d101      	bne.n	8008a14 <lv_draw_arc+0x5b4>
 8008a10:	42a5      	cmp	r5, r4
 8008a12:	d806      	bhi.n	8008a22 <lv_draw_arc+0x5c2>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d11c      	bne.n	8008a54 <lv_draw_arc+0x5f4>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8008a1a:	f1bb 0f01 	cmp.w	fp, #1
 8008a1e:	f040 8096 	bne.w	8008b4e <lv_draw_arc+0x6ee>
        quarter_area.x1 = q->center_x;
 8008a22:	9b06      	ldr	r3, [sp, #24]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a24:	a925      	add	r1, sp, #148	; 0x94
 8008a26:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x;
 8008a28:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a2c:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y;
 8008a2e:	9b07      	ldr	r3, [sp, #28]
 8008a30:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + q->radius;
 8008a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a36:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + q->radius;
 8008a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a40:	f00e f851 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008a44:	2800      	cmp	r0, #0
 8008a46:	d082      	beq.n	800894e <lv_draw_arc+0x4ee>
 8008a48:	aa2c      	add	r2, sp, #176	; 0xb0
 8008a4a:	a925      	add	r1, sp, #148	; 0x94
 8008a4c:	a80f      	add	r0, sp, #60	; 0x3c
 8008a4e:	f003 fe55 	bl	800c6fc <lv_draw_rect>
 8008a52:	e77c      	b.n	800894e <lv_draw_arc+0x4ee>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	f47f af79 	bne.w	800894e <lv_draw_arc+0x4ee>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8008a5c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d9dd      	bls.n	8008a22 <lv_draw_arc+0x5c2>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8008a66:	f1bb 0f01 	cmp.w	fp, #1
 8008a6a:	d170      	bne.n	8008b4e <lv_draw_arc+0x6ee>
            quarter_area.x2 = q->center_x - 1;
 8008a6c:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a70:	ee18 0a10 	vmov	r0, s16
            quarter_area.x2 = q->center_x - 1;
 8008a74:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y + q->radius;
 8008a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008a7e:	f00e fba5 	bl	80171cc <lv_trigo_sin>
 8008a82:	9b04      	ldr	r3, [sp, #16]
 8008a84:	1af3      	subs	r3, r6, r3
 8008a86:	4358      	muls	r0, r3
 8008a88:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008a8c:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008a90:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008a94:	b200      	sxth	r0, r0
 8008a96:	f00e fb99 	bl	80171cc <lv_trigo_sin>
 8008a9a:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008a9c:	a925      	add	r1, sp, #148	; 0x94
 8008a9e:	4642      	mov	r2, r8
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008aa0:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008aa4:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	f00e f81c 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008aae:	b120      	cbz	r0, 8008aba <lv_draw_arc+0x65a>
 8008ab0:	aa2c      	add	r2, sp, #176	; 0xb0
 8008ab2:	a925      	add	r1, sp, #148	; 0x94
 8008ab4:	a80f      	add	r0, sp, #60	; 0x3c
 8008ab6:	f003 fe21 	bl	800c6fc <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	f040 80b3 	bne.w	8008c28 <lv_draw_arc+0x7c8>
            quarter_area.x2 = q->center_x - 1;
 8008ac2:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ac6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x2 = q->center_x - 1;
 8008aca:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ace:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center_y - q->radius;
 8008ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad2:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ad6:	f00e fb79 	bl	80171cc <lv_trigo_sin>
 8008ada:	4370      	muls	r0, r6
 8008adc:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008ae0:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008ae4:	4648      	mov	r0, r9
 8008ae6:	f00e fb71 	bl	80171cc <lv_trigo_sin>
 8008aea:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008aec:	a925      	add	r1, sp, #148	; 0x94
 8008aee:	4642      	mov	r2, r8
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008af0:	1af3      	subs	r3, r6, r3
 8008af2:	4358      	muls	r0, r3
 8008af4:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008af8:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008afc:	4608      	mov	r0, r1
 8008afe:	f00d fff2 	bl	8016ae6 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008b02:	b120      	cbz	r0, 8008b0e <lv_draw_arc+0x6ae>
 8008b04:	aa2c      	add	r2, sp, #176	; 0xb0
 8008b06:	a925      	add	r1, sp, #148	; 0x94
 8008b08:	a80f      	add	r0, sp, #60	; 0x3c
 8008b0a:	f003 fdf7 	bl	800c6fc <lv_draw_rect>
        if(q->end_quarter == 2) {
 8008b0e:	f1bb 0f02 	cmp.w	fp, #2
 8008b12:	f43f ae22 	beq.w	800875a <lv_draw_arc+0x2fa>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8008b16:	f1bb 0f03 	cmp.w	fp, #3
 8008b1a:	f040 8095 	bne.w	8008c48 <lv_draw_arc+0x7e8>
            quarter_area.x1 = q->center_x;
 8008b1e:	9b06      	ldr	r3, [sp, #24]
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b20:	f104 005a 	add.w	r0, r4, #90	; 0x5a
            quarter_area.x1 = q->center_x;
 8008b24:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b28:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center_y - q->radius;
 8008b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b30:	f00e fb4c 	bl	80171cc <lv_trigo_sin>
 8008b34:	4370      	muls	r0, r6
 8008b36:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008b3a:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b3e:	ee18 0a10 	vmov	r0, s16
 8008b42:	f00e fb43 	bl	80171cc <lv_trigo_sin>
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	1af6      	subs	r6, r6, r3
 8008b4a:	4370      	muls	r0, r6
 8008b4c:	e0ba      	b.n	8008cc4 <lv_draw_arc+0x864>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	455b      	cmp	r3, fp
 8008b52:	d047      	beq.n	8008be4 <lv_draw_arc+0x784>
 8008b54:	2d59      	cmp	r5, #89	; 0x59
 8008b56:	d861      	bhi.n	8008c1c <lv_draw_arc+0x7bc>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8008b58:	f1ab 0302 	sub.w	r3, fp, #2
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d942      	bls.n	8008be8 <lv_draw_arc+0x788>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	f47f adf4 	bne.w	8008752 <lv_draw_arc+0x2f2>
 8008b6a:	f1bb 0f02 	cmp.w	fp, #2
 8008b6e:	d1a8      	bne.n	8008ac2 <lv_draw_arc+0x662>
 8008b70:	42a5      	cmp	r5, r4
 8008b72:	d2a6      	bcs.n	8008ac2 <lv_draw_arc+0x662>
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b74:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008b78:	9b04      	ldr	r3, [sp, #16]
 8008b7a:	b200      	sxth	r0, r0
 8008b7c:	eba6 0b03 	sub.w	fp, r6, r3
 8008b80:	f00e fb24 	bl	80171cc <lv_trigo_sin>
 8008b84:	4370      	muls	r0, r6
 8008b86:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008b8a:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b8e:	4648      	mov	r0, r9
 8008b90:	f00e fb1c 	bl	80171cc <lv_trigo_sin>
 8008b94:	fb0b f000 	mul.w	r0, fp, r0
 8008b98:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008b9c:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008ba0:	ee18 0a10 	vmov	r0, s16
 8008ba4:	f00e fb12 	bl	80171cc <lv_trigo_sin>
 8008ba8:	4370      	muls	r0, r6
 8008baa:	eb07 36e0 	add.w	r6, r7, r0, asr #15
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008bae:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008bb2:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008bb4:	f8ad 6096 	strh.w	r6, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008bb8:	f00e fb08 	bl	80171cc <lv_trigo_sin>
 8008bbc:	fb0b f000 	mul.w	r0, fp, r0
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bc0:	a925      	add	r1, sp, #148	; 0x94
 8008bc2:	4642      	mov	r2, r8
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008bc4:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008bc8:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bcc:	4608      	mov	r0, r1
 8008bce:	f00d ff8a 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008bd2:	b120      	cbz	r0, 8008bde <lv_draw_arc+0x77e>
 8008bd4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008bd6:	a925      	add	r1, sp, #148	; 0x94
 8008bd8:	a80f      	add	r0, sp, #60	; 0x3c
 8008bda:	f003 fd8f 	bl	800c6fc <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8008bde:	42a5      	cmp	r5, r4
 8008be0:	d938      	bls.n	8008c54 <lv_draw_arc+0x7f4>
 8008be2:	e083      	b.n	8008cec <lv_draw_arc+0x88c>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008be4:	42a5      	cmp	r5, r4
 8008be6:	d9b5      	bls.n	8008b54 <lv_draw_arc+0x6f4>
        quarter_area.x1 = q->center_x - q->radius;
 8008be8:	9b08      	ldr	r3, [sp, #32]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bea:	a925      	add	r1, sp, #148	; 0x94
 8008bec:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x - q->radius;
 8008bee:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bf2:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y;
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x - 1;
 8008bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bfe:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + q->radius;
 8008c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c04:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008c08:	f00d ff6d 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d0a8      	beq.n	8008b62 <lv_draw_arc+0x702>
 8008c10:	aa2c      	add	r2, sp, #176	; 0xb0
 8008c12:	a925      	add	r1, sp, #148	; 0x94
 8008c14:	a80f      	add	r0, sp, #60	; 0x3c
 8008c16:	f003 fd71 	bl	800c6fc <lv_draw_rect>
 8008c1a:	e7a2      	b.n	8008b62 <lv_draw_arc+0x702>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d19f      	bne.n	8008b62 <lv_draw_arc+0x702>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8008c22:	f1bb 0f02 	cmp.w	fp, #2
 8008c26:	d0df      	beq.n	8008be8 <lv_draw_arc+0x788>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	455b      	cmp	r3, fp
 8008c2c:	f43f aecf 	beq.w	80089ce <lv_draw_arc+0x56e>
 8008c30:	2d59      	cmp	r5, #89	; 0x59
 8008c32:	d912      	bls.n	8008c5a <lv_draw_arc+0x7fa>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d113      	bne.n	8008c62 <lv_draw_arc+0x802>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8008c3a:	f1bb 0f03 	cmp.w	fp, #3
 8008c3e:	f43f aec9 	beq.w	80089d4 <lv_draw_arc+0x574>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8008c42:	2c59      	cmp	r4, #89	; 0x59
 8008c44:	f67f aec6 	bls.w	80089d4 <lv_draw_arc+0x574>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	455b      	cmp	r3, fp
 8008c4c:	d04c      	beq.n	8008ce8 <lv_draw_arc+0x888>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d15b      	bne.n	8008d0c <lv_draw_arc+0x8ac>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8008c54:	2cb3      	cmp	r4, #179	; 0xb3
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8008c56:	d949      	bls.n	8008cec <lv_draw_arc+0x88c>
 8008c58:	e5d2      	b.n	8008800 <lv_draw_arc+0x3a0>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8008c5a:	f1bb 0f03 	cmp.w	fp, #3
 8008c5e:	f43f aeb9 	beq.w	80089d4 <lv_draw_arc+0x574>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8008c62:	9b03      	ldr	r3, [sp, #12]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	f47f af56 	bne.w	8008b16 <lv_draw_arc+0x6b6>
 8008c6a:	f1bb 0f03 	cmp.w	fp, #3
 8008c6e:	f47f ad9e 	bne.w	80087ae <lv_draw_arc+0x34e>
 8008c72:	42a5      	cmp	r5, r4
 8008c74:	f4bf ad9b 	bcs.w	80087ae <lv_draw_arc+0x34e>
 8008c78:	9b04      	ldr	r3, [sp, #16]
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c7a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008c7e:	eba6 0b03 	sub.w	fp, r6, r3
 8008c82:	b200      	sxth	r0, r0
 8008c84:	f00e faa2 	bl	80171cc <lv_trigo_sin>
 8008c88:	fb0b f000 	mul.w	r0, fp, r0
 8008c8c:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008c90:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008c94:	4648      	mov	r0, r9
 8008c96:	f00e fa99 	bl	80171cc <lv_trigo_sin>
 8008c9a:	4370      	muls	r0, r6
 8008c9c:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008ca0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ca4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008ca8:	b200      	sxth	r0, r0
 8008caa:	f00e fa8f 	bl	80171cc <lv_trigo_sin>
 8008cae:	4370      	muls	r0, r6
 8008cb0:	eb0a 36e0 	add.w	r6, sl, r0, asr #15
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008cb4:	ee18 0a10 	vmov	r0, s16
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008cb8:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008cbc:	f00e fa86 	bl	80171cc <lv_trigo_sin>
 8008cc0:	fb0b f000 	mul.w	r0, fp, r0
 8008cc4:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008cc8:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008ccc:	a925      	add	r1, sp, #148	; 0x94
 8008cce:	4642      	mov	r2, r8
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	f00d ff08 	bl	8016ae6 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	f43f ad92 	beq.w	8008800 <lv_draw_arc+0x3a0>
 8008cdc:	aa2c      	add	r2, sp, #176	; 0xb0
 8008cde:	a925      	add	r1, sp, #148	; 0x94
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008ce0:	a80f      	add	r0, sp, #60	; 0x3c
 8008ce2:	f003 fd0b 	bl	800c6fc <lv_draw_rect>
 8008ce6:	e58b      	b.n	8008800 <lv_draw_arc+0x3a0>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8008ce8:	42a5      	cmp	r5, r4
 8008cea:	d9b0      	bls.n	8008c4e <lv_draw_arc+0x7ee>
        quarter_area.x1 = q->center_x;
 8008cec:	9b06      	ldr	r3, [sp, #24]
 8008cee:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        quarter_area.y1 = q->center_y - q->radius;
 8008cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf4:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + q->radius;
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfa:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y - 1;
 8008cfe:	1e7b      	subs	r3, r7, #1
 8008d00:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008d04:	e7e2      	b.n	8008ccc <lv_draw_arc+0x86c>
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008d06:	aa2c      	add	r2, sp, #176	; 0xb0
 8008d08:	4641      	mov	r1, r8
 8008d0a:	e7e9      	b.n	8008ce0 <lv_draw_arc+0x880>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	f47f ad76 	bne.w	8008800 <lv_draw_arc+0x3a0>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8008d14:	2c59      	cmp	r4, #89	; 0x59
 8008d16:	e79e      	b.n	8008c56 <lv_draw_arc+0x7f6>

08008d18 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8008d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d1a:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008d1e:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8008d22:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8008d26:	f248 0681 	movw	r6, #32897	; 0x8081
 8008d2a:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008d2c:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d30:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008d34:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008d38:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008d3a:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d3c:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8008d3e:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8008d40:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008d44:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d48:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008d4c:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d50:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008d54:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d56:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8008d58:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d5a:	4372      	muls	r2, r6
    return ret;
 8008d5c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8008d60:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8008d62:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8008d66:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8008d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d6c <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8008d6c:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 8008d6e:	2a02      	cmp	r2, #2
{
 8008d70:	b4f0      	push	{r4, r5, r6, r7}
 8008d72:	f003 071f 	and.w	r7, r3, #31
 8008d76:	f3c3 1545 	ubfx	r5, r3, #5, #6
 8008d7a:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8008d7e:	d802      	bhi.n	8008d86 <color_blend_true_color_additive+0x1a>
 8008d80:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8008d82:	bcf0      	pop	{r4, r5, r6, r7}
 8008d84:	4770      	bx	lr
    tmp = bg.ch.red + fg.ch.red;
 8008d86:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8008d8a:	4423      	add	r3, r4
    tmp = bg.ch.green + fg.ch.green;
 8008d8c:	f3c0 1445 	ubfx	r4, r0, #5, #6
    fg.ch.red = LV_MIN(tmp, 31);
 8008d90:	2b1f      	cmp	r3, #31
    tmp = bg.ch.green + fg.ch.green;
 8008d92:	442c      	add	r4, r5
    tmp = bg.ch.blue + fg.ch.blue;
 8008d94:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MIN(tmp, 31);
 8008d98:	bf28      	it	cs
 8008d9a:	231f      	movcs	r3, #31
    fg.ch.green = LV_MIN(tmp, 63);
 8008d9c:	2c3f      	cmp	r4, #63	; 0x3f
    tmp = bg.ch.blue + fg.ch.blue;
 8008d9e:	443d      	add	r5, r7
    fg.ch.green = LV_MIN(tmp, 63);
 8008da0:	bf28      	it	cs
 8008da2:	243f      	movcs	r4, #63	; 0x3f
    fg.ch.red = LV_MIN(tmp, 31);
 8008da4:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MIN(tmp, 31);
 8008da8:	2d1f      	cmp	r5, #31
    fg.ch.green = LV_MIN(tmp, 63);
 8008daa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 8008dae:	bf28      	it	cs
 8008db0:	251f      	movcs	r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8008db2:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.blue = LV_MIN(tmp, 31);
 8008db4:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8008db8:	d108      	bne.n	8008dcc <color_blend_true_color_additive+0x60>
 8008dba:	f04f 0000 	mov.w	r0, #0
 8008dbe:	f365 0004 	bfi	r0, r5, #0, #5
 8008dc2:	f364 104a 	bfi	r0, r4, #5, #6
 8008dc6:	f363 20cf 	bfi	r0, r3, #11, #5
 8008dca:	e7da      	b.n	8008d82 <color_blend_true_color_additive+0x16>
    return lv_color_mix(fg, bg, opa);
 8008dcc:	f365 0004 	bfi	r0, r5, #0, #5
 8008dd0:	f364 104a 	bfi	r0, r4, #5, #6
}
 8008dd4:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8008dd6:	f363 20cf 	bfi	r0, r3, #11, #5
 8008dda:	f7ff bf9d 	b.w	8008d18 <lv_color_mix>

08008dde <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8008dde:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 8008de0:	2a02      	cmp	r2, #2
{
 8008de2:	b4f0      	push	{r4, r5, r6, r7}
 8008de4:	f003 061f 	and.w	r6, r3, #31
 8008de8:	f3c3 1545 	ubfx	r5, r3, #5, #6
 8008dec:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8008df0:	d802      	bhi.n	8008df8 <color_blend_true_color_subtractive+0x1a>
 8008df2:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8008df4:	bcf0      	pop	{r4, r5, r6, r7}
 8008df6:	4770      	bx	lr
    tmp = bg.ch.red - fg.ch.red;
 8008df8:	f3c0 23c4 	ubfx	r3, r0, #11, #5
    if(opa == LV_OPA_COVER) return fg;
 8008dfc:	2aff      	cmp	r2, #255	; 0xff
    tmp = bg.ch.red - fg.ch.red;
 8008dfe:	eba4 0303 	sub.w	r3, r4, r3
    tmp = bg.ch.green - fg.ch.green;
 8008e02:	f3c0 1445 	ubfx	r4, r0, #5, #6
 8008e06:	eba5 0404 	sub.w	r4, r5, r4
    tmp = bg.ch.blue - fg.ch.blue;
 8008e0a:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MAX(tmp, 0);
 8008e0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    tmp = bg.ch.blue - fg.ch.blue;
 8008e12:	eba6 0505 	sub.w	r5, r6, r5
    fg.ch.green = LV_MAX(tmp, 0);
 8008e16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.red = LV_MAX(tmp, 0);
 8008e1a:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MAX(tmp, 0);
 8008e1e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.green = LV_MAX(tmp, 0);
 8008e22:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MAX(tmp, 0);
 8008e26:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 8008e2a:	d108      	bne.n	8008e3e <color_blend_true_color_subtractive+0x60>
 8008e2c:	f04f 0000 	mov.w	r0, #0
 8008e30:	f365 0004 	bfi	r0, r5, #0, #5
 8008e34:	f364 104a 	bfi	r0, r4, #5, #6
 8008e38:	f363 20cf 	bfi	r0, r3, #11, #5
 8008e3c:	e7da      	b.n	8008df4 <color_blend_true_color_subtractive+0x16>
    return lv_color_mix(fg, bg, opa);
 8008e3e:	f365 0004 	bfi	r0, r5, #0, #5
 8008e42:	f364 104a 	bfi	r0, r4, #5, #6
}
 8008e46:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8008e48:	f363 20cf 	bfi	r0, r3, #11, #5
 8008e4c:	f7ff bf64 	b.w	8008d18 <lv_color_mix>

08008e50 <_lv_blend_fill>:
{
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	b08d      	sub	sp, #52	; 0x34
 8008e56:	4699      	mov	r9, r3
 8008e58:	4607      	mov	r7, r0
 8008e5a:	4688      	mov	r8, r1
 8008e5c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008e60:	4614      	mov	r4, r2
 8008e62:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
 8008e66:	9307      	str	r3, [sp, #28]
 8008e68:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if(opa < LV_OPA_MIN) return;
 8008e6c:	2b01      	cmp	r3, #1
{
 8008e6e:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 8008e70:	f240 80a7 	bls.w	8008fc2 <_lv_blend_fill+0x172>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8008e74:	9b07      	ldr	r3, [sp, #28]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 80a3 	beq.w	8008fc2 <_lv_blend_fill+0x172>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008e7c:	f7ff f894 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 8008e80:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8008e82:	f00d fb7d 	bl	8016580 <lv_disp_get_draw_buf>
 8008e86:	4606      	mov	r6, r0
    lv_color_t * disp_buf = draw_buf->buf_act;
 8008e88:	f8d0 a008 	ldr.w	sl, [r0, #8]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 8008e8c:	6828      	ldr	r0, [r5, #0]
 8008e8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e90:	b103      	cbz	r3, 8008e94 <_lv_blend_fill+0x44>
 8008e92:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 8008e94:	4642      	mov	r2, r8
 8008e96:	4639      	mov	r1, r7
 8008e98:	a80a      	add	r0, sp, #40	; 0x28
 8008e9a:	f00d fe24 	bl	8016ae6 <_lv_area_intersect>
    if(!is_common) return;
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f000 808f 	beq.w	8008fc2 <_lv_blend_fill+0x172>
    draw_area.x1 -= disp_area->x1;
 8008ea4:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8008ea8:	8a31      	ldrh	r1, [r6, #16]
    draw_area.x2 -= disp_area->x1;
 8008eaa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
 8008eae:	1a43      	subs	r3, r0, r1
    draw_area.y1 -= disp_area->y1;
 8008eb0:	f8b6 c012 	ldrh.w	ip, [r6, #18]
 8008eb4:	f8bd 702a 	ldrh.w	r7, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
 8008eb8:	1a51      	subs	r1, r2, r1
    draw_area.x1 -= disp_area->x1;
 8008eba:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 8008ebc:	eba7 070c 	sub.w	r7, r7, ip
    draw_area.x2 -= disp_area->x1;
 8008ec0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
 8008ec4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    draw_area.y1 -= disp_area->y1;
 8008ec8:	b23f      	sxth	r7, r7
    draw_area.x1 -= disp_area->x1;
 8008eca:	9306      	str	r3, [sp, #24]
    draw_area.y2 -= disp_area->y1;
 8008ecc:	eba1 0c0c 	sub.w	ip, r1, ip
    draw_area.x1 -= disp_area->x1;
 8008ed0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
 8008ed4:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
 8008ed8:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
    if(mask && disp->driver->antialiasing == 0 && mask) {
 8008edc:	f1b9 0f00 	cmp.w	r9, #0
 8008ee0:	d140      	bne.n	8008f64 <_lv_blend_fill+0x114>
    if(disp->driver->set_px_cb) {
 8008ee2:	6829      	ldr	r1, [r5, #0]
 8008ee4:	6949      	ldr	r1, [r1, #20]
 8008ee6:	2900      	cmp	r1, #0
 8008ee8:	d15a      	bne.n	8008fa0 <_lv_blend_fill+0x150>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8008eea:	f1bb 0f00 	cmp.w	fp, #0
 8008eee:	f040 81e5 	bne.w	80092bc <_lv_blend_fill+0x46c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008ef2:	f7ff f859 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008ef6:	8ab3      	ldrh	r3, [r6, #20]
 8008ef8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8008efc:	4680      	mov	r8, r0
 8008efe:	3301      	adds	r3, #1
 8008f00:	8a36      	ldrh	r6, [r6, #16]
 8008f02:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008f04:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008f08:	1b9e      	subs	r6, r3, r6
 8008f0a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	b236      	sxth	r6, r6
 8008f12:	b212      	sxth	r2, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8008f14:	fb06 3307 	mla	r3, r6, r7, r3
 8008f18:	9206      	str	r2, [sp, #24]
 8008f1a:	eb0a 0543 	add.w	r5, sl, r3, lsl #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008f1e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8008f22:	3201      	adds	r2, #1
 8008f24:	1bd2      	subs	r2, r2, r7
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8008f26:	b212      	sxth	r2, r2
 8008f28:	9208      	str	r2, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008f2a:	9a07      	ldr	r2, [sp, #28]
 8008f2c:	2a01      	cmp	r2, #1
 8008f2e:	f040 8109 	bne.w	8009144 <_lv_blend_fill+0x2f4>
        if(opa > LV_OPA_MAX) {
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	2bfd      	cmp	r3, #253	; 0xfd
 8008f36:	f240 80a0 	bls.w	800907a <_lv_blend_fill+0x22a>
            if(disp->driver->gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 8008f3a:	6803      	ldr	r3, [r0, #0]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 8098 	beq.w	8009074 <_lv_blend_fill+0x224>
 8008f44:	a80a      	add	r0, sp, #40	; 0x28
 8008f46:	f00d fda0 	bl	8016a8a <lv_area_get_size>
 8008f4a:	28f0      	cmp	r0, #240	; 0xf0
 8008f4c:	f240 8092 	bls.w	8009074 <_lv_blend_fill+0x224>
                disp->driver->gpu_fill_cb(disp->driver, disp_buf, disp_w, draw_area, color);
 8008f50:	f8d8 0000 	ldr.w	r0, [r8]
 8008f54:	ab0a      	add	r3, sp, #40	; 0x28
 8008f56:	f8ad 4000 	strh.w	r4, [sp]
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008f5e:	4651      	mov	r1, sl
 8008f60:	47a0      	blx	r4
                return;
 8008f62:	e02e      	b.n	8008fc2 <_lv_blend_fill+0x172>
    if(mask && disp->driver->antialiasing == 0 && mask) {
 8008f64:	6829      	ldr	r1, [r5, #0]
 8008f66:	7a09      	ldrb	r1, [r1, #8]
 8008f68:	0749      	lsls	r1, r1, #29
 8008f6a:	d4ba      	bmi.n	8008ee2 <_lv_blend_fill+0x92>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008f6c:	f102 0801 	add.w	r8, r2, #1
 8008f70:	f109 31ff 	add.w	r1, r9, #4294967295
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8008f74:	f1c9 0e01 	rsb	lr, r9, #1
 8008f78:	eba8 0800 	sub.w	r8, r8, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 8008f7c:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8008f80:	eb0e 0c01 	add.w	ip, lr, r1
 8008f84:	45e0      	cmp	r8, ip
 8008f86:	ddac      	ble.n	8008ee2 <_lv_blend_fill+0x92>
 8008f88:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8008f8c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8008f90:	f04f 3cff 	mov.w	ip, #4294967295
 8008f94:	bf98      	it	ls
 8008f96:	f04f 0c00 	movls.w	ip, #0
 8008f9a:	f881 c000 	strb.w	ip, [r1]
 8008f9e:	e7ef      	b.n	8008f80 <_lv_blend_fill+0x130>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8008fa0:	f7ff f802 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 8008fa4:	8ab2      	ldrh	r2, [r6, #20]
 8008fa6:	8a33      	ldrh	r3, [r6, #16]
 8008fa8:	3201      	adds	r2, #1
 8008faa:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 8008fae:	9006      	str	r0, [sp, #24]
 8008fb0:	1ad2      	subs	r2, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8008fb2:	9b07      	ldr	r3, [sp, #28]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	b212      	sxth	r2, r2
 8008fb8:	d121      	bne.n	8008ffe <_lv_blend_fill+0x1ae>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008fba:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	dd02      	ble.n	8008fc8 <_lv_blend_fill+0x178>
}
 8008fc2:	b00d      	add	sp, #52	; 0x34
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008fc8:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8008fcc:	fa0f f885 	sxth.w	r8, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008fd0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8008fd4:	429e      	cmp	r6, r3
 8008fd6:	dd01      	ble.n	8008fdc <_lv_blend_fill+0x18c>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8008fd8:	3501      	adds	r5, #1
 8008fda:	e7ee      	b.n	8008fba <_lv_blend_fill+0x16a>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8008fdc:	9b06      	ldr	r3, [sp, #24]
 8008fde:	4651      	mov	r1, sl
 8008fe0:	9207      	str	r2, [sp, #28]
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	9b05      	ldr	r3, [sp, #20]
 8008fe6:	f8ad 4004 	strh.w	r4, [sp, #4]
 8008fea:	9302      	str	r3, [sp, #8]
 8008fec:	b233      	sxth	r3, r6
 8008fee:	f8cd 8000 	str.w	r8, [sp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008ff2:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8008ff4:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8008ff8:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8008ffa:	9a07      	ldr	r2, [sp, #28]
 8008ffc:	e7e8      	b.n	8008fd0 <_lv_blend_fill+0x180>
 8008ffe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009002:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8009006:	3301      	adds	r3, #1
 8009008:	eba9 0901 	sub.w	r9, r9, r1
 800900c:	1a5b      	subs	r3, r3, r1
 800900e:	fa0f f883 	sxth.w	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009012:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009016:	429d      	cmp	r5, r3
 8009018:	dcd3      	bgt.n	8008fc2 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800901a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800901e:	fa0f fb85 	sxth.w	fp, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009022:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8009026:	429e      	cmp	r6, r3
 8009028:	dd02      	ble.n	8009030 <_lv_blend_fill+0x1e0>
            mask_tmp += draw_area_w;
 800902a:	44c1      	add	r9, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800902c:	3501      	adds	r5, #1
 800902e:	e7f0      	b.n	8009012 <_lv_blend_fill+0x1c2>
                if(mask_tmp[x]) {
 8009030:	f819 3006 	ldrb.w	r3, [r9, r6]
 8009034:	b18b      	cbz	r3, 800905a <_lv_blend_fill+0x20a>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009036:	9906      	ldr	r1, [sp, #24]
 8009038:	9207      	str	r2, [sp, #28]
 800903a:	6808      	ldr	r0, [r1, #0]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800903c:	9905      	ldr	r1, [sp, #20]
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800903e:	f8ad 4004 	strh.w	r4, [sp, #4]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8009042:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009046:	f8cd b000 	str.w	fp, [sp]
 800904a:	4651      	mov	r1, sl
 800904c:	0a1b      	lsrs	r3, r3, #8
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	6943      	ldr	r3, [r0, #20]
 8009052:	461f      	mov	r7, r3
 8009054:	b233      	sxth	r3, r6
 8009056:	47b8      	blx	r7
 8009058:	9a07      	ldr	r2, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800905a:	3601      	adds	r6, #1
 800905c:	e7e1      	b.n	8009022 <_lv_blend_fill+0x1d2>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800905e:	4628      	mov	r0, r5
            for(y = 0; y < draw_area_h; y++) {
 8009060:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
 8009062:	4435      	add	r5, r6
                lv_color_fill(disp_buf_first, color, draw_area_w);
 8009064:	9a06      	ldr	r2, [sp, #24]
 8009066:	4621      	mov	r1, r4
 8009068:	f00d feaf 	bl	8016dca <lv_color_fill>
            for(y = 0; y < draw_area_h; y++) {
 800906c:	9b08      	ldr	r3, [sp, #32]
 800906e:	42bb      	cmp	r3, r7
 8009070:	dcf5      	bgt.n	800905e <_lv_blend_fill+0x20e>
 8009072:	e7a6      	b.n	8008fc2 <_lv_blend_fill+0x172>
                disp_buf_first += disp_w;
 8009074:	0076      	lsls	r6, r6, #1
 8009076:	2700      	movs	r7, #0
 8009078:	e7f8      	b.n	800906c <_lv_blend_fill+0x21c>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800907a:	9a05      	ldr	r2, [sp, #20]
 800907c:	4659      	mov	r1, fp
 800907e:	4620      	mov	r0, r4
 8009080:	f7ff fe4a 	bl	8008d18 <lv_color_mix>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8009084:	9f05      	ldr	r7, [sp, #20]
 8009086:	f3c4 22c4 	ubfx	r2, r4, #11, #5
 800908a:	f000 031f 	and.w	r3, r0, #31
 800908e:	f3c0 1145 	ubfx	r1, r0, #5, #6
            for(y = 0; y < draw_area_h; y++) {
 8009092:	46dc      	mov	ip, fp
 8009094:	437a      	muls	r2, r7
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8009096:	f3c0 20c4 	ubfx	r0, r0, #11, #5
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800909a:	f248 0e81 	movw	lr, #32897	; 0x8081
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800909e:	9207      	str	r2, [sp, #28]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80090a0:	f3c4 1245 	ubfx	r2, r4, #5, #6
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80090a4:	f004 041f 	and.w	r4, r4, #31
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80090a8:	437a      	muls	r2, r7
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80090aa:	fb04 fa07 	mul.w	sl, r4, r7
            lv_opa_t opa_inv = 255 - opa;
 80090ae:	43fc      	mvns	r4, r7
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80090b0:	9209      	str	r2, [sp, #36]	; 0x24
                disp_buf_first += disp_w;
 80090b2:	0072      	lsls	r2, r6, #1
            lv_opa_t opa_inv = 255 - opa;
 80090b4:	b2e4      	uxtb	r4, r4
                disp_buf_first += disp_w;
 80090b6:	9205      	str	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 80090b8:	9a08      	ldr	r2, [sp, #32]
 80090ba:	4562      	cmp	r2, ip
 80090bc:	dd81      	ble.n	8008fc2 <_lv_blend_fill+0x172>
 80090be:	462f      	mov	r7, r5
                for(x = 0; x < draw_area_w; x++) {
 80090c0:	2600      	movs	r6, #0
 80090c2:	e037      	b.n	8009134 <_lv_blend_fill+0x2e4>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 80090c4:	463a      	mov	r2, r7
 80090c6:	f837 8b02 	ldrh.w	r8, [r7], #2
 80090ca:	45d8      	cmp	r8, fp
 80090cc:	d01e      	beq.n	800910c <_lv_blend_fill+0x2bc>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090ce:	7850      	ldrb	r0, [r2, #1]
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090d4:	8811      	ldrh	r1, [r2, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090d6:	fb00 3004 	mla	r0, r0, r4, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090da:	f3c1 1145 	ubfx	r1, r1, #5, #6
 80090de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090e0:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090e2:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090e6:	7813      	ldrb	r3, [r2, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090e8:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090ec:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090f0:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090f2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090f6:	fb03 a304 	mla	r3, r3, r4, sl
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090fa:	fb0e f101 	mul.w	r1, lr, r1
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80090fe:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009100:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009104:	fb0e f303 	mul.w	r3, lr, r3
 8009108:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    disp_buf_first[x] = last_res_color;
 800910c:	f892 9000 	ldrb.w	r9, [r2]
                for(x = 0; x < draw_area_w; x++) {
 8009110:	3601      	adds	r6, #1
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8009112:	46c3      	mov	fp, r8
                    disp_buf_first[x] = last_res_color;
 8009114:	f363 0904 	bfi	r9, r3, #0, #5
 8009118:	f882 9000 	strb.w	r9, [r2]
 800911c:	f8b2 9000 	ldrh.w	r9, [r2]
 8009120:	f361 194a 	bfi	r9, r1, #5, #6
 8009124:	f8a2 9000 	strh.w	r9, [r2]
 8009128:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800912c:	f360 09c7 	bfi	r9, r0, #3, #5
 8009130:	f882 9001 	strb.w	r9, [r2, #1]
                for(x = 0; x < draw_area_w; x++) {
 8009134:	9a06      	ldr	r2, [sp, #24]
 8009136:	42b2      	cmp	r2, r6
 8009138:	dcc4      	bgt.n	80090c4 <_lv_blend_fill+0x274>
                disp_buf_first += disp_w;
 800913a:	9a05      	ldr	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800913c:	f10c 0c01 	add.w	ip, ip, #1
                disp_buf_first += disp_w;
 8009140:	4415      	add	r5, r2
            for(y = 0; y < draw_area_h; y++) {
 8009142:	e7b9      	b.n	80090b8 <_lv_blend_fill+0x268>
        if(opa > LV_OPA_MAX) {
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	0076      	lsls	r6, r6, #1
 8009148:	2afd      	cmp	r2, #253	; 0xfd
 800914a:	d80d      	bhi.n	8009168 <_lv_blend_fill+0x318>
        last_dest_color.full = disp_buf_first[0].full;
 800914c:	f83a c013 	ldrh.w	ip, [sl, r3, lsl #1]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8009150:	465a      	mov	r2, fp
        last_res_color.full = disp_buf_first[0].full;
 8009152:	4660      	mov	r0, ip
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009154:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009158:	429f      	cmp	r7, r3
 800915a:	f73f af32 	bgt.w	8008fc2 <_lv_blend_fill+0x172>
 800915e:	f109 3aff 	add.w	sl, r9, #4294967295
                for(x = 0; x < draw_area_w; x++) {
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	e0a2      	b.n	80092ae <_lv_blend_fill+0x45e>
        int32_t x_end4 = draw_area_w - 4;
 8009168:	9b06      	ldr	r3, [sp, #24]
 800916a:	3b04      	subs	r3, #4
 800916c:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800916e:	9b08      	ldr	r3, [sp, #32]
 8009170:	455b      	cmp	r3, fp
 8009172:	f77f af26 	ble.w	8008fc2 <_lv_blend_fill+0x172>
 8009176:	464f      	mov	r7, r9
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009178:	f04f 0800 	mov.w	r8, #0
 800917c:	e008      	b.n	8009190 <_lv_blend_fill+0x340>
                    FILL_NORMAL_MASK_PX(x, color)
 800917e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8009182:	b11a      	cbz	r2, 800918c <_lv_blend_fill+0x33c>
 8009184:	2aff      	cmp	r2, #255	; 0xff
 8009186:	d118      	bne.n	80091ba <_lv_blend_fill+0x36a>
 8009188:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800918c:	f108 0801 	add.w	r8, r8, #1
 8009190:	9b06      	ldr	r3, [sp, #24]
 8009192:	46ba      	mov	sl, r7
 8009194:	4543      	cmp	r3, r8
 8009196:	dd01      	ble.n	800919c <_lv_blend_fill+0x34c>
 8009198:	07bb      	lsls	r3, r7, #30
 800919a:	d1f0      	bne.n	800917e <_lv_blend_fill+0x32e>
 800919c:	eb05 0748 	add.w	r7, r5, r8, lsl #1
                for(; x <= x_end4; x += 4) {
 80091a0:	9b05      	ldr	r3, [sp, #20]
 80091a2:	4543      	cmp	r3, r8
 80091a4:	da11      	bge.n	80091ca <_lv_blend_fill+0x37a>
 80091a6:	f10a 37ff 	add.w	r7, sl, #4294967295
                for(; x < draw_area_w ; x++) {
 80091aa:	9b06      	ldr	r3, [sp, #24]
 80091ac:	4543      	cmp	r3, r8
 80091ae:	dc4b      	bgt.n	8009248 <_lv_blend_fill+0x3f8>
                disp_buf_first += disp_w;
 80091b0:	4435      	add	r5, r6
                mask += draw_area_w;
 80091b2:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
 80091b4:	f10b 0b01 	add.w	fp, fp, #1
 80091b8:	e7d9      	b.n	800916e <_lv_blend_fill+0x31e>
                    FILL_NORMAL_MASK_PX(x, color)
 80091ba:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff fdaa 	bl	8008d18 <lv_color_mix>
 80091c4:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
 80091c8:	e7e0      	b.n	800918c <_lv_blend_fill+0x33c>
                    if(*mask32) {
 80091ca:	f8da 2000 	ldr.w	r2, [sl]
 80091ce:	b12a      	cbz	r2, 80091dc <_lv_blend_fill+0x38c>
                        if((*mask32) == 0xFFFFFFFF) {
 80091d0:	3201      	adds	r2, #1
 80091d2:	d109      	bne.n	80091e8 <_lv_blend_fill+0x398>
                            disp_buf_first[x] = color;
 80091d4:	803c      	strh	r4, [r7, #0]
                            disp_buf_first[x + 1] = color;
 80091d6:	807c      	strh	r4, [r7, #2]
                            disp_buf_first[x + 2] = color;
 80091d8:	80bc      	strh	r4, [r7, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 80091da:	80fc      	strh	r4, [r7, #6]
                    mask32++;
 80091dc:	f10a 0a04 	add.w	sl, sl, #4
                for(; x <= x_end4; x += 4) {
 80091e0:	f108 0804 	add.w	r8, r8, #4
 80091e4:	3708      	adds	r7, #8
 80091e6:	e7db      	b.n	80091a0 <_lv_blend_fill+0x350>
                            FILL_NORMAL_MASK_PX(x, color)
 80091e8:	f89a 2000 	ldrb.w	r2, [sl]
 80091ec:	b112      	cbz	r2, 80091f4 <_lv_blend_fill+0x3a4>
 80091ee:	2aff      	cmp	r2, #255	; 0xff
 80091f0:	d118      	bne.n	8009224 <_lv_blend_fill+0x3d4>
 80091f2:	803c      	strh	r4, [r7, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 80091f4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80091f8:	b112      	cbz	r2, 8009200 <_lv_blend_fill+0x3b0>
 80091fa:	2aff      	cmp	r2, #255	; 0xff
 80091fc:	d118      	bne.n	8009230 <_lv_blend_fill+0x3e0>
 80091fe:	807c      	strh	r4, [r7, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 8009200:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009204:	b112      	cbz	r2, 800920c <_lv_blend_fill+0x3bc>
 8009206:	2aff      	cmp	r2, #255	; 0xff
 8009208:	d118      	bne.n	800923c <_lv_blend_fill+0x3ec>
 800920a:	80bc      	strh	r4, [r7, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800920c:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8009210:	2a00      	cmp	r2, #0
 8009212:	d0e3      	beq.n	80091dc <_lv_blend_fill+0x38c>
 8009214:	2aff      	cmp	r2, #255	; 0xff
 8009216:	d0e0      	beq.n	80091da <_lv_blend_fill+0x38a>
 8009218:	88f9      	ldrh	r1, [r7, #6]
 800921a:	4620      	mov	r0, r4
 800921c:	f7ff fd7c 	bl	8008d18 <lv_color_mix>
 8009220:	80f8      	strh	r0, [r7, #6]
 8009222:	e7db      	b.n	80091dc <_lv_blend_fill+0x38c>
                            FILL_NORMAL_MASK_PX(x, color)
 8009224:	8839      	ldrh	r1, [r7, #0]
 8009226:	4620      	mov	r0, r4
 8009228:	f7ff fd76 	bl	8008d18 <lv_color_mix>
 800922c:	8038      	strh	r0, [r7, #0]
 800922e:	e7e1      	b.n	80091f4 <_lv_blend_fill+0x3a4>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8009230:	8879      	ldrh	r1, [r7, #2]
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fd70 	bl	8008d18 <lv_color_mix>
 8009238:	8078      	strh	r0, [r7, #2]
 800923a:	e7e1      	b.n	8009200 <_lv_blend_fill+0x3b0>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800923c:	88b9      	ldrh	r1, [r7, #4]
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff fd6a 	bl	8008d18 <lv_color_mix>
 8009244:	80b8      	strh	r0, [r7, #4]
 8009246:	e7e1      	b.n	800920c <_lv_blend_fill+0x3bc>
                    FILL_NORMAL_MASK_PX(x, color)
 8009248:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800924c:	b11a      	cbz	r2, 8009256 <_lv_blend_fill+0x406>
 800924e:	2aff      	cmp	r2, #255	; 0xff
 8009250:	d104      	bne.n	800925c <_lv_blend_fill+0x40c>
 8009252:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
                for(; x < draw_area_w ; x++) {
 8009256:	f108 0801 	add.w	r8, r8, #1
 800925a:	e7a6      	b.n	80091aa <_lv_blend_fill+0x35a>
                    FILL_NORMAL_MASK_PX(x, color)
 800925c:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8009260:	4620      	mov	r0, r4
 8009262:	f7ff fd59 	bl	8008d18 <lv_color_mix>
 8009266:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
 800926a:	e7f4      	b.n	8009256 <_lv_blend_fill+0x406>
                    if(*mask_tmp_x) {
 800926c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8009270:	b1db      	cbz	r3, 80092aa <_lv_blend_fill+0x45a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8009272:	455b      	cmp	r3, fp
 8009274:	eb05 0148 	add.w	r1, r5, r8, lsl #1
 8009278:	d011      	beq.n	800929e <_lv_blend_fill+0x44e>
 800927a:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 800927c:	9a05      	ldr	r2, [sp, #20]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 800927e:	d002      	beq.n	8009286 <_lv_blend_fill+0x436>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 8009280:	fb13 f202 	smulbb	r2, r3, r2
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 8009284:	0a12      	lsrs	r2, r2, #8
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8009286:	8809      	ldrh	r1, [r1, #0]
 8009288:	4620      	mov	r0, r4
 800928a:	9207      	str	r2, [sp, #28]
 800928c:	f7ff fd44 	bl	8008d18 <lv_color_mix>
                            last_mask = *mask_tmp_x;
 8009290:	f89a b000 	ldrb.w	fp, [sl]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 8009294:	b280      	uxth	r0, r0
                            last_dest_color.full = disp_buf_first[x].full;
 8009296:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	e003      	b.n	80092a6 <_lv_blend_fill+0x456>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 800929e:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 80092a2:	4563      	cmp	r3, ip
 80092a4:	d1ef      	bne.n	8009286 <_lv_blend_fill+0x436>
                        disp_buf_first[x] = last_res_color;
 80092a6:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 80092aa:	f108 0801 	add.w	r8, r8, #1
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	4543      	cmp	r3, r8
 80092b2:	dcdb      	bgt.n	800926c <_lv_blend_fill+0x41c>
                disp_buf_first += disp_w;
 80092b4:	4435      	add	r5, r6
                mask += draw_area_w;
 80092b6:	4499      	add	r9, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80092b8:	3701      	adds	r7, #1
 80092ba:	e74b      	b.n	8009154 <_lv_blend_fill+0x304>
    switch(mode) {
 80092bc:	f1bb 0f01 	cmp.w	fp, #1
 80092c0:	d02d      	beq.n	800931e <_lv_blend_fill+0x4ce>
 80092c2:	f1bb 0f02 	cmp.w	fp, #2
 80092c6:	f47f ae7c 	bne.w	8008fc2 <_lv_blend_fill+0x172>
 80092ca:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80093c0 <_lv_blend_fill+0x570>
 80092ce:	8ab5      	ldrh	r5, [r6, #20]
 80092d0:	8a31      	ldrh	r1, [r6, #16]
 80092d2:	3501      	adds	r5, #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	1a6d      	subs	r5, r5, r1
 80092d8:	2b01      	cmp	r3, #1
 80092da:	b22d      	sxth	r5, r5
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 80092dc:	fb05 f107 	mul.w	r1, r5, r7
 80092e0:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80092e4:	eb0a 0641 	add.w	r6, sl, r1, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80092e8:	d12b      	bne.n	8009342 <_lv_blend_fill+0x4f2>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80092ea:	f04f 0a00 	mov.w	sl, #0
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80092ee:	9a05      	ldr	r2, [sp, #20]
 80092f0:	4620      	mov	r0, r4
 80092f2:	4651      	mov	r1, sl
 80092f4:	f7ff fd10 	bl	8008d18 <lv_color_mix>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80092f8:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80092fc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009300:	4599      	cmp	r9, r3
 8009302:	f73f ae5e 	bgt.w	8008fc2 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009306:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800930a:	eb06 0b47 	add.w	fp, r6, r7, lsl #1
 800930e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8009312:	429f      	cmp	r7, r3
 8009314:	dd06      	ble.n	8009324 <_lv_blend_fill+0x4d4>
            disp_buf_tmp += disp_w;
 8009316:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009318:	f109 0901 	add.w	r9, r9, #1
 800931c:	e7ee      	b.n	80092fc <_lv_blend_fill+0x4ac>
            blend_fp = color_blend_true_color_additive;
 800931e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80093c4 <_lv_blend_fill+0x574>
 8009322:	e7d4      	b.n	80092ce <_lv_blend_fill+0x47e>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 8009324:	f8bb 3000 	ldrh.w	r3, [fp]
 8009328:	4553      	cmp	r3, sl
 800932a:	d005      	beq.n	8009338 <_lv_blend_fill+0x4e8>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800932c:	4619      	mov	r1, r3
 800932e:	9a05      	ldr	r2, [sp, #20]
 8009330:	4620      	mov	r0, r4
 8009332:	9306      	str	r3, [sp, #24]
 8009334:	47c0      	blx	r8
 8009336:	9b06      	ldr	r3, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009338:	3701      	adds	r7, #1
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800933a:	469a      	mov	sl, r3
                disp_buf_tmp[x] = last_res_color;
 800933c:	f82b 0b02 	strh.w	r0, [fp], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009340:	e7e5      	b.n	800930e <_lv_blend_fill+0x4be>
 8009342:	f1c0 0001 	rsb	r0, r0, #1
 8009346:	4402      	add	r2, r0
 8009348:	b213      	sxth	r3, r2
 800934a:	9307      	str	r3, [sp, #28]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	eba9 0903 	sub.w	r9, r9, r3
        last_dest_color.full = disp_buf_tmp[0].full;
 8009352:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8009356:	2100      	movs	r1, #0
        last_res_color.full = disp_buf_tmp[0].full;
 8009358:	4618      	mov	r0, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800935a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 800935e:	4297      	cmp	r7, r2
 8009360:	f73f ae2f 	bgt.w	8008fc2 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009364:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8009368:	eb06 0b4a 	add.w	fp, r6, sl, lsl #1
 800936c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8009370:	4592      	cmp	sl, r2
 8009372:	dd04      	ble.n	800937e <_lv_blend_fill+0x52e>
            mask_tmp += draw_area_w;
 8009374:	9a07      	ldr	r2, [sp, #28]
            disp_buf_tmp += disp_w;
 8009376:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009378:	3701      	adds	r7, #1
            mask_tmp += draw_area_w;
 800937a:	4491      	add	r9, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800937c:	e7ed      	b.n	800935a <_lv_blend_fill+0x50a>
                if(mask_tmp[x] == 0) continue;
 800937e:	f819 200a 	ldrb.w	r2, [r9, sl]
 8009382:	b1ba      	cbz	r2, 80093b4 <_lv_blend_fill+0x564>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 8009384:	428a      	cmp	r2, r1
 8009386:	d103      	bne.n	8009390 <_lv_blend_fill+0x540>
 8009388:	f8bb c000 	ldrh.w	ip, [fp]
 800938c:	459c      	cmp	ip, r3
 800938e:	d00f      	beq.n	80093b0 <_lv_blend_fill+0x560>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 8009390:	2afc      	cmp	r2, #252	; 0xfc
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 8009392:	f8bb 1000 	ldrh.w	r1, [fp]
 8009396:	4620      	mov	r0, r4
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 8009398:	bf97      	itett	ls
 800939a:	9b05      	ldrls	r3, [sp, #20]
 800939c:	9a05      	ldrhi	r2, [sp, #20]
 800939e:	fb12 f203 	smulbbls	r2, r2, r3
 80093a2:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 80093a4:	47c0      	blx	r8
                    last_mask = mask_tmp[x];
 80093a6:	f819 100a 	ldrb.w	r1, [r9, sl]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 80093aa:	b280      	uxth	r0, r0
                    last_dest_color.full = disp_buf_tmp[x].full;
 80093ac:	f8bb 3000 	ldrh.w	r3, [fp]
                disp_buf_tmp[x] = last_res_color;
 80093b0:	f8ab 0000 	strh.w	r0, [fp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80093b4:	f10a 0a01 	add.w	sl, sl, #1
 80093b8:	f10b 0b02 	add.w	fp, fp, #2
 80093bc:	e7d6      	b.n	800936c <_lv_blend_fill+0x51c>
 80093be:	bf00      	nop
 80093c0:	08008ddf 	.word	0x08008ddf
 80093c4:	08008d6d 	.word	0x08008d6d

080093c8 <_lv_blend_map>:
{
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	b08f      	sub	sp, #60	; 0x3c
 80093ce:	468b      	mov	fp, r1
 80093d0:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
 80093d4:	9304      	str	r3, [sp, #16]
    if(opa < LV_OPA_MIN) return;
 80093d6:	f1ba 0f01 	cmp.w	sl, #1
{
 80093da:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80093de:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80093e2:	9209      	str	r2, [sp, #36]	; 0x24
 80093e4:	9308      	str	r3, [sp, #32]
    if(opa < LV_OPA_MIN) return;
 80093e6:	f240 80d1 	bls.w	800958c <_lv_blend_map+0x1c4>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 80ce 	beq.w	800958c <_lv_blend_map+0x1c4>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 80093f0:	460a      	mov	r2, r1
 80093f2:	4601      	mov	r1, r0
 80093f4:	a80c      	add	r0, sp, #48	; 0x30
 80093f6:	f00d fb76 	bl	8016ae6 <_lv_area_intersect>
    if(!is_common) return;
 80093fa:	2800      	cmp	r0, #0
 80093fc:	f000 80c6 	beq.w	800958c <_lv_blend_map+0x1c4>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009400:	f7fe fdd2 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 8009404:	4607      	mov	r7, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009406:	f00d f8bb 	bl	8016580 <lv_disp_get_draw_buf>
    lv_color_t * disp_buf = draw_buf->buf_act;
 800940a:	6883      	ldr	r3, [r0, #8]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800940c:	4604      	mov	r4, r0
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 800940e:	6838      	ldr	r0, [r7, #0]
    lv_color_t * disp_buf = draw_buf->buf_act;
 8009410:	9307      	str	r3, [sp, #28]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 8009412:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009414:	b103      	cbz	r3, 8009418 <_lv_blend_map+0x50>
 8009416:	4798      	blx	r3
    draw_area.y1 -= disp_area->y1;
 8009418:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    draw_area.y2 -= disp_area->y1;
 800941c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    draw_area.y1 -= disp_area->y1;
 8009420:	930a      	str	r3, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 8009422:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8009426:	8a20      	ldrh	r0, [r4, #16]
    draw_area.y1 -= disp_area->y1;
 8009428:	8a63      	ldrh	r3, [r4, #18]
 800942a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 800942c:	ebae 0c00 	sub.w	ip, lr, r0
    draw_area.y2 -= disp_area->y1;
 8009430:	910b      	str	r1, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
 8009432:	1ad6      	subs	r6, r2, r3
    draw_area.x2 -= disp_area->x1;
 8009434:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 8009438:	1acb      	subs	r3, r1, r3
    draw_area.x1 -= disp_area->x1;
 800943a:	fa0f fc8c 	sxth.w	ip, ip
    draw_area.y1 -= disp_area->y1;
 800943e:	b236      	sxth	r6, r6
    draw_area.x2 -= disp_area->x1;
 8009440:	1a10      	subs	r0, r2, r0
    draw_area.y2 -= disp_area->y1;
 8009442:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if(mask && disp->driver->antialiasing == 0)
 8009446:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8009448:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800944c:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 8009450:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    if(mask && disp->driver->antialiasing == 0)
 8009454:	2b00      	cmp	r3, #0
 8009456:	d156      	bne.n	8009506 <_lv_blend_map+0x13e>
    if(disp->driver->set_px_cb) {
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d16b      	bne.n	8009538 <_lv_blend_map+0x170>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8009460:	f1ce 0e01 	rsb	lr, lr, #1
 8009464:	8aa7      	ldrh	r7, [r4, #20]
 8009466:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800946a:	4496      	add	lr, r2
 800946c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8009470:	3701      	adds	r7, #1
 8009472:	f9bb 1000 	ldrsh.w	r1, [fp]
 8009476:	fa0f f28e 	sxth.w	r2, lr
 800947a:	f109 0901 	add.w	r9, r9, #1
 800947e:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
 8009482:	1aff      	subs	r7, r7, r3
 8009484:	9205      	str	r2, [sp, #20]
 8009486:	eba9 0901 	sub.w	r9, r9, r1
 800948a:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800948e:	b23f      	sxth	r7, r7
 8009490:	fa0f f989 	sxth.w	r9, r9
 8009494:	9606      	str	r6, [sp, #24]
 8009496:	1b14      	subs	r4, r2, r4
 8009498:	fb07 f506 	mul.w	r5, r7, r6
 800949c:	1b34      	subs	r4, r6, r4
 800949e:	fb09 f404 	mul.w	r4, r9, r4
 80094a2:	f1b8 0f00 	cmp.w	r8, #0
 80094a6:	f040 81ad 	bne.w	8009804 <_lv_blend_map+0x43c>
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80094aa:	1acb      	subs	r3, r1, r3
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80094ac:	fb07 c506 	mla	r5, r7, r6, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80094b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b2:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80094b6:	ebac 0c03 	sub.w	ip, ip, r3
 80094ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094bc:	f1c2 0b01 	rsb	fp, r2, #1
 80094c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094c2:	4464      	add	r4, ip
 80094c4:	445a      	add	r2, fp
 80094c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80094ca:	007b      	lsls	r3, r7, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
 80094cc:	fa0f fb82 	sxth.w	fp, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80094d0:	9a07      	ldr	r2, [sp, #28]
 80094d2:	9306      	str	r3, [sp, #24]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80094d4:	9b08      	ldr	r3, [sp, #32]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80094d6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80094da:	2b01      	cmp	r3, #1
 80094dc:	f040 80bf 	bne.w	800965e <_lv_blend_map+0x296>
        if(opa > LV_OPA_MAX) {
 80094e0:	f1ba 0ffd 	cmp.w	sl, #253	; 0xfd
 80094e4:	f240 80b7 	bls.w	8009656 <_lv_blend_map+0x28e>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 80094e8:	9b05      	ldr	r3, [sp, #20]
 80094ea:	005e      	lsls	r6, r3, #1
            for(y = 0; y < draw_area_h; y++) {
 80094ec:	45c3      	cmp	fp, r8
 80094ee:	dd4d      	ble.n	800958c <_lv_blend_map+0x1c4>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 80094f0:	4621      	mov	r1, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	4632      	mov	r2, r6
                map_buf_first += map_w;
 80094f6:	444c      	add	r4, r9
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 80094f8:	f00d ff7e 	bl	80173f8 <lv_memcpy>
                disp_buf_first += disp_w;
 80094fc:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 80094fe:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009502:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
 8009504:	e7f2      	b.n	80094ec <_lv_blend_map+0x124>
    if(mask && disp->driver->antialiasing == 0)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	7a1b      	ldrb	r3, [r3, #8]
 800950a:	075b      	lsls	r3, r3, #29
 800950c:	d4a4      	bmi.n	8009458 <_lv_blend_map+0x90>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800950e:	1c53      	adds	r3, r2, #1
 8009510:	9904      	ldr	r1, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009512:	9804      	ldr	r0, [sp, #16]
 8009514:	eba3 030e 	sub.w	r3, r3, lr
 8009518:	3901      	subs	r1, #1
 800951a:	f1c0 0501 	rsb	r5, r0, #1
        int32_t mask_w = lv_area_get_width(&draw_area);
 800951e:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009520:	1868      	adds	r0, r5, r1
 8009522:	4283      	cmp	r3, r0
 8009524:	dd98      	ble.n	8009458 <_lv_blend_map+0x90>
 8009526:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800952a:	2880      	cmp	r0, #128	; 0x80
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	bf98      	it	ls
 8009532:	2000      	movls	r0, #0
 8009534:	7008      	strb	r0, [r1, #0]
 8009536:	e7f3      	b.n	8009520 <_lv_blend_map+0x158>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009538:	f7fe fd36 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 800953c:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8009540:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8009544:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009548:	3501      	adds	r5, #1
 800954a:	8aa2      	ldrh	r2, [r4, #20]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 800954c:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
 8009550:	1aed      	subs	r5, r5, r3
 8009552:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
 8009556:	3201      	adds	r2, #1
 8009558:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 800955c:	b22d      	sxth	r5, r5
 800955e:	1b3c      	subs	r4, r7, r4
 8009560:	1a52      	subs	r2, r2, r1
    map_buf_tmp -= draw_area->x1;
 8009562:	1ac9      	subs	r1, r1, r3
 8009564:	9b09      	ldr	r3, [sp, #36]	; 0x24
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009566:	1b34      	subs	r4, r6, r4
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009568:	9005      	str	r0, [sp, #20]
 800956a:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 800956e:	b212      	sxth	r2, r2
    map_buf_tmp -= draw_area->x1;
 8009570:	fb05 1404 	mla	r4, r5, r4, r1
 8009574:	006d      	lsls	r5, r5, #1
 8009576:	f1c0 0900 	rsb	r9, r0, #0
 800957a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800957e:	9b08      	ldr	r3, [sp, #32]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d124      	bne.n	80095ce <_lv_blend_map+0x206>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009584:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009588:	429e      	cmp	r6, r3
 800958a:	dd02      	ble.n	8009592 <_lv_blend_map+0x1ca>
}
 800958c:	b00f      	add	sp, #60	; 0x3c
 800958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009592:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009596:	fa0f f886 	sxth.w	r8, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800959a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 800959e:	429f      	cmp	r7, r3
 80095a0:	dd02      	ble.n	80095a8 <_lv_blend_map+0x1e0>
            map_buf_tmp += map_w;
 80095a2:	442c      	add	r4, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80095a4:	3601      	adds	r6, #1
 80095a6:	e7ed      	b.n	8009584 <_lv_blend_map+0x1bc>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	9907      	ldr	r1, [sp, #28]
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f8cd a008 	str.w	sl, [sp, #8]
 80095b2:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
 80095b6:	f8cd 8000 	str.w	r8, [sp]
 80095ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 80095be:	b23b      	sxth	r3, r7
 80095c0:	f8d0 9014 	ldr.w	r9, [r0, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80095c4:	3701      	adds	r7, #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 80095c6:	9204      	str	r2, [sp, #16]
 80095c8:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80095ca:	9a04      	ldr	r2, [sp, #16]
 80095cc:	e7e5      	b.n	800959a <_lv_blend_map+0x1d2>
 80095ce:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	3701      	adds	r7, #1
 80095d6:	444b      	add	r3, r9
 80095d8:	1a3f      	subs	r7, r7, r0
 80095da:	4699      	mov	r9, r3
 80095dc:	b23f      	sxth	r7, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80095de:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80095e2:	429e      	cmp	r6, r3
 80095e4:	dcd2      	bgt.n	800958c <_lv_blend_map+0x1c4>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80095e6:	b233      	sxth	r3, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80095e8:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 80095ec:	9304      	str	r3, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80095ee:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80095f2:	4598      	cmp	r8, r3
 80095f4:	dd03      	ble.n	80095fe <_lv_blend_map+0x236>
            mask_tmp += draw_area_w;
 80095f6:	44b9      	add	r9, r7
            map_buf_tmp += map_w;
 80095f8:	442c      	add	r4, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80095fa:	3601      	adds	r6, #1
 80095fc:	e7ef      	b.n	80095de <_lv_blend_map+0x216>
                if(mask_tmp[x]) {
 80095fe:	f819 3008 	ldrb.w	r3, [r9, r8]
 8009602:	b19b      	cbz	r3, 800962c <_lv_blend_map+0x264>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8009604:	fb1a f303 	smulbb	r3, sl, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 8009608:	9905      	ldr	r1, [sp, #20]
 800960a:	9206      	str	r2, [sp, #24]
 800960c:	0a1b      	lsrs	r3, r3, #8
 800960e:	6808      	ldr	r0, [r1, #0]
 8009610:	9907      	ldr	r1, [sp, #28]
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
 8009618:	f8ad 3004 	strh.w	r3, [sp, #4]
 800961c:	9b04      	ldr	r3, [sp, #16]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	fa0f f388 	sxth.w	r3, r8
 8009624:	f8d0 b014 	ldr.w	fp, [r0, #20]
 8009628:	47d8      	blx	fp
 800962a:	9a06      	ldr	r2, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800962c:	f108 0801 	add.w	r8, r8, #1
 8009630:	e7dd      	b.n	80095ee <_lv_blend_map+0x226>
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 8009632:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009636:	4652      	mov	r2, sl
 8009638:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 800963c:	f7ff fb6c 	bl	8008d18 <lv_color_mix>
 8009640:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 8009644:	3601      	adds	r6, #1
 8009646:	9b05      	ldr	r3, [sp, #20]
 8009648:	42b3      	cmp	r3, r6
 800964a:	dcf2      	bgt.n	8009632 <_lv_blend_map+0x26a>
                disp_buf_first += disp_w;
 800964c:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 800964e:	444c      	add	r4, r9
            for(y = 0; y < draw_area_h; y++) {
 8009650:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009654:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
 8009656:	45c3      	cmp	fp, r8
 8009658:	dd98      	ble.n	800958c <_lv_blend_map+0x1c4>
                for(x = 0; x < draw_area_w; x++) {
 800965a:	2600      	movs	r6, #0
 800965c:	e7f3      	b.n	8009646 <_lv_blend_map+0x27e>
        if(opa > LV_OPA_MAX) {
 800965e:	f1ba 0ffd 	cmp.w	sl, #253	; 0xfd
 8009662:	f240 80ca 	bls.w	80097fa <_lv_blend_map+0x432>
            int32_t x_end4 = draw_area_w - 4;
 8009666:	9b05      	ldr	r3, [sp, #20]
 8009668:	3b04      	subs	r3, #4
            for(y = 0; y < draw_area_h; y++) {
 800966a:	e9cd 8307 	strd	r8, r3, [sp, #28]
 800966e:	9b07      	ldr	r3, [sp, #28]
 8009670:	459b      	cmp	fp, r3
 8009672:	dd8b      	ble.n	800958c <_lv_blend_map+0x1c4>
 8009674:	f8dd 8010 	ldr.w	r8, [sp, #16]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009678:	2600      	movs	r6, #0
 800967a:	e009      	b.n	8009690 <_lv_blend_map+0x2c8>
                    MAP_NORMAL_MASK_PX(x)
 800967c:	f818 2b01 	ldrb.w	r2, [r8], #1
 8009680:	b12a      	cbz	r2, 800968e <_lv_blend_map+0x2c6>
 8009682:	2aff      	cmp	r2, #255	; 0xff
 8009684:	d122      	bne.n	80096cc <_lv_blend_map+0x304>
 8009686:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 800968a:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800968e:	3601      	adds	r6, #1
 8009690:	9b05      	ldr	r3, [sp, #20]
 8009692:	4647      	mov	r7, r8
 8009694:	42b3      	cmp	r3, r6
 8009696:	dd02      	ble.n	800969e <_lv_blend_map+0x2d6>
 8009698:	f018 0f03 	tst.w	r8, #3
 800969c:	d1ee      	bne.n	800967c <_lv_blend_map+0x2b4>
 800969e:	eb05 0846 	add.w	r8, r5, r6, lsl #1
 80096a2:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
                for(; x < x_end4; x += 4) {
 80096a6:	9b08      	ldr	r3, [sp, #32]
 80096a8:	42b3      	cmp	r3, r6
 80096aa:	dc18      	bgt.n	80096de <_lv_blend_map+0x316>
 80096ac:	f107 38ff 	add.w	r8, r7, #4294967295
                for(; x < draw_area_w ; x++) {
 80096b0:	9b05      	ldr	r3, [sp, #20]
 80096b2:	42b3      	cmp	r3, r6
 80096b4:	dc6f      	bgt.n	8009796 <_lv_blend_map+0x3ce>
                disp_buf_first += disp_w;
 80096b6:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 80096b8:	444c      	add	r4, r9
                disp_buf_first += disp_w;
 80096ba:	441d      	add	r5, r3
                mask += draw_area_w;
 80096bc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80096c0:	4413      	add	r3, r2
 80096c2:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	3301      	adds	r3, #1
 80096c8:	9307      	str	r3, [sp, #28]
 80096ca:	e7d0      	b.n	800966e <_lv_blend_map+0x2a6>
                    MAP_NORMAL_MASK_PX(x)
 80096cc:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 80096d0:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 80096d4:	f7ff fb20 	bl	8008d18 <lv_color_mix>
 80096d8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 80096dc:	e7d7      	b.n	800968e <_lv_blend_map+0x2c6>
                    if(*mask32) {
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	b18a      	cbz	r2, 8009706 <_lv_blend_map+0x33e>
                        if((*mask32) == 0xFFFFFFFF) {
 80096e2:	3201      	adds	r2, #1
 80096e4:	d116      	bne.n	8009714 <_lv_blend_map+0x34c>
                            disp_buf_first[x] = map_buf_first[x];
 80096e6:	f8ba 2000 	ldrh.w	r2, [sl]
 80096ea:	f8a8 2000 	strh.w	r2, [r8]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 80096ee:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 80096f2:	f8a8 2002 	strh.w	r2, [r8, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 80096f6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80096fa:	f8a8 2004 	strh.w	r2, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 80096fe:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009702:	f8a8 2006 	strh.w	r2, [r8, #6]
                    mask32++;
 8009706:	3704      	adds	r7, #4
                for(; x < x_end4; x += 4) {
 8009708:	3604      	adds	r6, #4
 800970a:	f108 0808 	add.w	r8, r8, #8
 800970e:	f10a 0a08 	add.w	sl, sl, #8
 8009712:	e7c8      	b.n	80096a6 <_lv_blend_map+0x2de>
                            MAP_NORMAL_MASK_PX(x)
 8009714:	783a      	ldrb	r2, [r7, #0]
 8009716:	b12a      	cbz	r2, 8009724 <_lv_blend_map+0x35c>
 8009718:	2aff      	cmp	r2, #255	; 0xff
 800971a:	d121      	bne.n	8009760 <_lv_blend_map+0x398>
 800971c:	f8ba 2000 	ldrh.w	r2, [sl]
 8009720:	f8a8 2000 	strh.w	r2, [r8]
                            MAP_NORMAL_MASK_PX(x + 1)
 8009724:	787a      	ldrb	r2, [r7, #1]
 8009726:	b12a      	cbz	r2, 8009734 <_lv_blend_map+0x36c>
 8009728:	2aff      	cmp	r2, #255	; 0xff
 800972a:	d122      	bne.n	8009772 <_lv_blend_map+0x3aa>
 800972c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009730:	f8a8 2002 	strh.w	r2, [r8, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8009734:	78ba      	ldrb	r2, [r7, #2]
 8009736:	b12a      	cbz	r2, 8009744 <_lv_blend_map+0x37c>
 8009738:	2aff      	cmp	r2, #255	; 0xff
 800973a:	d123      	bne.n	8009784 <_lv_blend_map+0x3bc>
 800973c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009740:	f8a8 2004 	strh.w	r2, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009744:	78fa      	ldrb	r2, [r7, #3]
 8009746:	2a00      	cmp	r2, #0
 8009748:	d0dd      	beq.n	8009706 <_lv_blend_map+0x33e>
 800974a:	2aff      	cmp	r2, #255	; 0xff
 800974c:	d0d7      	beq.n	80096fe <_lv_blend_map+0x336>
 800974e:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8009752:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8009756:	f7ff fadf 	bl	8008d18 <lv_color_mix>
 800975a:	f8a8 0006 	strh.w	r0, [r8, #6]
 800975e:	e7d2      	b.n	8009706 <_lv_blend_map+0x33e>
                            MAP_NORMAL_MASK_PX(x)
 8009760:	f8b8 1000 	ldrh.w	r1, [r8]
 8009764:	f8ba 0000 	ldrh.w	r0, [sl]
 8009768:	f7ff fad6 	bl	8008d18 <lv_color_mix>
 800976c:	f8a8 0000 	strh.w	r0, [r8]
 8009770:	e7d8      	b.n	8009724 <_lv_blend_map+0x35c>
                            MAP_NORMAL_MASK_PX(x + 1)
 8009772:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8009776:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800977a:	f7ff facd 	bl	8008d18 <lv_color_mix>
 800977e:	f8a8 0002 	strh.w	r0, [r8, #2]
 8009782:	e7d7      	b.n	8009734 <_lv_blend_map+0x36c>
                            MAP_NORMAL_MASK_PX(x + 2)
 8009784:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8009788:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 800978c:	f7ff fac4 	bl	8008d18 <lv_color_mix>
 8009790:	f8a8 0004 	strh.w	r0, [r8, #4]
 8009794:	e7d6      	b.n	8009744 <_lv_blend_map+0x37c>
                    MAP_NORMAL_MASK_PX(x)
 8009796:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800979a:	b12a      	cbz	r2, 80097a8 <_lv_blend_map+0x3e0>
 800979c:	2aff      	cmp	r2, #255	; 0xff
 800979e:	d105      	bne.n	80097ac <_lv_blend_map+0x3e4>
 80097a0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 80097a4:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(; x < draw_area_w ; x++) {
 80097a8:	3601      	adds	r6, #1
 80097aa:	e781      	b.n	80096b0 <_lv_blend_map+0x2e8>
                    MAP_NORMAL_MASK_PX(x)
 80097ac:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 80097b0:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 80097b4:	f7ff fab0 	bl	8008d18 <lv_color_mix>
 80097b8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 80097bc:	e7f4      	b.n	80097a8 <_lv_blend_map+0x3e0>
                    if(mask[x]) {
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	5d9a      	ldrb	r2, [r3, r6]
 80097c2:	b16a      	cbz	r2, 80097e0 <_lv_blend_map+0x418>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80097c4:	2afc      	cmp	r2, #252	; 0xfc
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 80097c6:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 80097ca:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80097ce:	bf96      	itet	ls
 80097d0:	fb1a f202 	smulbbls	r2, sl, r2
 80097d4:	4652      	movhi	r2, sl
 80097d6:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 80097d8:	f7ff fa9e 	bl	8008d18 <lv_color_mix>
 80097dc:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 80097e0:	3601      	adds	r6, #1
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	42b3      	cmp	r3, r6
 80097e6:	dcea      	bgt.n	80097be <_lv_blend_map+0x3f6>
                disp_buf_first += disp_w;
 80097e8:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 80097ea:	444c      	add	r4, r9
            for(y = 0; y < draw_area_h; y++) {
 80097ec:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 80097f0:	441d      	add	r5, r3
                mask += draw_area_w;
 80097f2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 80097fa:	45c3      	cmp	fp, r8
 80097fc:	f77f aec6 	ble.w	800958c <_lv_blend_map+0x1c4>
                for(x = 0; x < draw_area_w; x++) {
 8009800:	2600      	movs	r6, #0
 8009802:	e7ee      	b.n	80097e2 <_lv_blend_map+0x41a>
    switch(mode) {
 8009804:	f1b8 0f01 	cmp.w	r8, #1
 8009808:	d026      	beq.n	8009858 <_lv_blend_map+0x490>
 800980a:	f1b8 0f02 	cmp.w	r8, #2
 800980e:	f47f aebd 	bne.w	800958c <_lv_blend_map+0x1c4>
 8009812:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80098cc <_lv_blend_map+0x504>
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 8009816:	9a07      	ldr	r2, [sp, #28]
 8009818:	007f      	lsls	r7, r7, #1
 800981a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800981e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009824:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009828:	9a08      	ldr	r2, [sp, #32]
 800982a:	2a01      	cmp	r2, #1
 800982c:	d121      	bne.n	8009872 <_lv_blend_map+0x4aa>
        map_buf_tmp -= draw_area->x1;
 800982e:	1a5b      	subs	r3, r3, r1
 8009830:	eb04 0443 	add.w	r4, r4, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009834:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009838:	9a06      	ldr	r2, [sp, #24]
 800983a:	429a      	cmp	r2, r3
 800983c:	f73f aea6 	bgt.w	800958c <_lv_blend_map+0x1c4>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009840:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 8009844:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009848:	429e      	cmp	r6, r3
 800984a:	dd08      	ble.n	800985e <_lv_blend_map+0x496>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800984c:	9b06      	ldr	r3, [sp, #24]
            disp_buf_tmp += disp_w;
 800984e:	443d      	add	r5, r7
            map_buf_tmp += map_w;
 8009850:	444c      	add	r4, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009852:	3301      	adds	r3, #1
 8009854:	9306      	str	r3, [sp, #24]
 8009856:	e7ed      	b.n	8009834 <_lv_blend_map+0x46c>
            blend_fp = color_blend_true_color_additive;
 8009858:	f8df b074 	ldr.w	fp, [pc, #116]	; 80098d0 <_lv_blend_map+0x508>
 800985c:	e7db      	b.n	8009816 <_lv_blend_map+0x44e>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 800985e:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009862:	4652      	mov	r2, sl
 8009864:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009868:	47d8      	blx	fp
 800986a:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800986e:	3601      	adds	r6, #1
 8009870:	e7e8      	b.n	8009844 <_lv_blend_map+0x47c>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009872:	9b04      	ldr	r3, [sp, #16]
        map_buf_tmp -= draw_area->x1;
 8009874:	eba4 044c 	sub.w	r4, r4, ip, lsl #1
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009878:	eba3 060c 	sub.w	r6, r3, ip
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800987c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009880:	9a06      	ldr	r2, [sp, #24]
 8009882:	429a      	cmp	r2, r3
 8009884:	f73f ae82 	bgt.w	800958c <_lv_blend_map+0x1c4>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009888:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 800988c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009890:	4598      	cmp	r8, r3
 8009892:	dd07      	ble.n	80098a4 <_lv_blend_map+0x4dc>
            mask_tmp += draw_area_w;
 8009894:	9b05      	ldr	r3, [sp, #20]
            disp_buf_tmp += disp_w;
 8009896:	443d      	add	r5, r7
            map_buf_tmp += map_w;
 8009898:	444c      	add	r4, r9
            mask_tmp += draw_area_w;
 800989a:	441e      	add	r6, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800989c:	9b06      	ldr	r3, [sp, #24]
 800989e:	3301      	adds	r3, #1
 80098a0:	9306      	str	r3, [sp, #24]
 80098a2:	e7eb      	b.n	800987c <_lv_blend_map+0x4b4>
                if(mask_tmp[x] == 0) continue;
 80098a4:	f816 2008 	ldrb.w	r2, [r6, r8]
 80098a8:	b162      	cbz	r2, 80098c4 <_lv_blend_map+0x4fc>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 80098aa:	2afc      	cmp	r2, #252	; 0xfc
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 80098ac:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 80098b0:	f834 0018 	ldrh.w	r0, [r4, r8, lsl #1]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 80098b4:	bf96      	itet	ls
 80098b6:	fb1a f202 	smulbbls	r2, sl, r2
 80098ba:	4652      	movhi	r2, sl
 80098bc:	0a12      	lsrls	r2, r2, #8
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 80098be:	47d8      	blx	fp
 80098c0:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80098c4:	f108 0801 	add.w	r8, r8, #1
 80098c8:	e7e0      	b.n	800988c <_lv_blend_map+0x4c4>
 80098ca:	bf00      	nop
 80098cc:	08008ddf 	.word	0x08008ddf
 80098d0:	08008d6d 	.word	0x08008d6d

080098d4 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 80098d4:	b510      	push	{r4, lr}
 80098d6:	b09a      	sub	sp, #104	; 0x68
 80098d8:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 80098da:	a80d      	add	r0, sp, #52	; 0x34
{
 80098dc:	9102      	str	r1, [sp, #8]
 80098de:	9203      	str	r2, [sp, #12]
    lv_draw_rect_dsc_init(&rect_dsc);
 80098e0:	f002 feea 	bl	800c6b8 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 80098e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    lv_draw_rect(coords, clip_area, &rect_dsc);
 80098e8:	9902      	ldr	r1, [sp, #8]
 80098ea:	4620      	mov	r0, r4
    rect_dsc.bg_color = lv_color_white();
 80098ec:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    lv_draw_rect(coords, clip_area, &rect_dsc);
 80098f0:	aa0d      	add	r2, sp, #52	; 0x34
 80098f2:	f002 ff03 	bl	800c6fc <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80098f6:	a805      	add	r0, sp, #20
 80098f8:	f000 fc2a 	bl	800a150 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 80098fc:	2200      	movs	r2, #0
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	4620      	mov	r0, r4
 8009902:	9200      	str	r2, [sp, #0]
 8009904:	aa05      	add	r2, sp, #20
 8009906:	9902      	ldr	r1, [sp, #8]
 8009908:	f000 fdfa 	bl	800a500 <lv_draw_label>
}
 800990c:	b01a      	add	sp, #104	; 0x68
 800990e:	bd10      	pop	{r4, pc}

08009910 <lv_draw_map>:
{
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ed2d 8b02 	vpush	{d8}
 8009918:	b0b3      	sub	sp, #204	; 0xcc
 800991a:	461c      	mov	r4, r3
 800991c:	468b      	mov	fp, r1
 800991e:	4615      	mov	r5, r2
 8009920:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8009924:	4680      	mov	r8, r0
 8009926:	9309      	str	r3, [sp, #36]	; 0x24
 8009928:	f89d 30fc 	ldrb.w	r3, [sp, #252]	; 0xfc
 800992c:	9306      	str	r3, [sp, #24]
    dest->x1 = src->x1;
 800992e:	680b      	ldr	r3, [r1, #0]
 8009930:	931b      	str	r3, [sp, #108]	; 0x6c
    dest->x2 = src->x2;
 8009932:	684b      	ldr	r3, [r1, #4]
 8009934:	931c      	str	r3, [sp, #112]	; 0x70
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009936:	f7fe fb37 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 800993a:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800993c:	f00c fe20 	bl	8016580 <lv_disp_get_draw_buf>
    draw_area.x1 -= disp_area->x1;
 8009940:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8009944:	8a07      	ldrh	r7, [r0, #16]
    draw_area.y1 -= disp_area->y1;
 8009946:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    draw_area.x1 -= disp_area->x1;
 800994a:	1bdb      	subs	r3, r3, r7
    draw_area.x2 -= disp_area->x1;
 800994c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009950:	9004      	str	r0, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8009952:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.x2 -= disp_area->x1;
 8009956:	1bd2      	subs	r2, r2, r7
    draw_area.y1 -= disp_area->y1;
 8009958:	8a40      	ldrh	r0, [r0, #18]
    draw_area.y2 -= disp_area->y1;
 800995a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    draw_area.y1 -= disp_area->y1;
 800995e:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
 8009960:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y2 -= disp_area->y1;
 8009964:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
 8009966:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
    draw_area.y2 -= disp_area->y1;
 800996a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800996e:	f002 f9ff 	bl	800bd70 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 8009972:	9008      	str	r0, [sp, #32]
 8009974:	b9f8      	cbnz	r0, 80099b6 <lv_draw_map+0xa6>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800997c:	d11b      	bne.n	80099b6 <lv_draw_map+0xa6>
 800997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009980:	b9cb      	cbnz	r3, 80099b6 <lv_draw_map+0xa6>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8009982:	9b06      	ldr	r3, [sp, #24]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 809c 	bne.w	8009ac2 <lv_draw_map+0x1b2>
 800998a:	7aa3      	ldrb	r3, [r4, #10]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f040 809a 	bne.w	8009ac6 <lv_draw_map+0x1b6>
                      draw_dsc->blend_mode);
 8009992:	7b22      	ldrb	r2, [r4, #12]
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 8009994:	4641      	mov	r1, r8
 8009996:	4658      	mov	r0, fp
 8009998:	f002 020f 	and.w	r2, r2, #15
 800999c:	9202      	str	r2, [sp, #8]
 800999e:	7ae2      	ldrb	r2, [r4, #11]
 80099a0:	9201      	str	r2, [sp, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	9200      	str	r2, [sp, #0]
 80099a6:	462a      	mov	r2, r5
 80099a8:	f7ff fd0e 	bl	80093c8 <_lv_blend_map>
}
 80099ac:	b033      	add	sp, #204	; 0xcc
 80099ae:	ecbd 8b02 	vpop	{d8}
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bf14      	ite	ne
 80099bc:	2303      	movne	r3, #3
 80099be:	2302      	moveq	r3, #2
 80099c0:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80099c2:	f8b8 9004 	ldrh.w	r9, [r8, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 80099c6:	9b04      	ldr	r3, [sp, #16]
 80099c8:	f9b8 0000 	ldrsh.w	r0, [r8]
 80099cc:	f109 0901 	add.w	r9, r9, #1
 80099d0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80099d4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80099d8:	eba9 0900 	sub.w	r9, r9, r0
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80099dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 80099e0:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
 80099e4:	1a89      	subs	r1, r1, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80099e6:	f9bd c06c 	ldrsh.w	ip, [sp, #108]	; 0x6c
 80099ea:	1ac0      	subs	r0, r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 80099ec:	1a79      	subs	r1, r7, r1
 80099ee:	fa0f f989 	sxth.w	r9, r9
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80099f2:	ebac 0000 	sub.w	r0, ip, r0
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 80099f6:	fa13 f38c 	uxtah	r3, r3, ip
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 80099fa:	fa12 f287 	uxtah	r2, r2, r7
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 80099fe:	fb09 0001 	mla	r0, r9, r1, r0
 8009a02:	9905      	ldr	r1, [sp, #20]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009a04:	b29b      	uxth	r3, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009a06:	fb00 5101 	mla	r1, r0, r1, r5
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009a0a:	b212      	sxth	r2, r2
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009a0c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009a10:	9107      	str	r1, [sp, #28]
 8009a12:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009a16:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 8009a1a:	3101      	adds	r1, #1
        blend_area.y2 = blend_area.y1;
 8009a1c:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
 8009a20:	eba1 0c0c 	sub.w	ip, r1, ip
 8009a24:	fa1f f18c 	uxth.w	r1, ip
 8009a28:	fa0f f08c 	sxth.w	r0, ip
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 8009a2c:	3901      	subs	r1, #1
 8009a2e:	900d      	str	r0, [sp, #52]	; 0x34
 8009a30:	440b      	add	r3, r1
 8009a32:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009a36:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	1bdf      	subs	r7, r3, r7
 8009a3e:	b23b      	sxth	r3, r7
 8009a40:	9312      	str	r3, [sp, #72]	; 0x48
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	930e      	str	r3, [sp, #56]	; 0x38
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 8009a46:	9b08      	ldr	r3, [sp, #32]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 809e 	bne.w	8009b8a <lv_draw_map+0x27a>
 8009a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a54:	f040 8099 	bne.w	8009b8a <lv_draw_map+0x27a>
 8009a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f040 8095 	bne.w	8009b8a <lv_draw_map+0x27a>
 8009a60:	7aa3      	ldrb	r3, [r4, #10]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f040 8091 	bne.w	8009b8a <lv_draw_map+0x27a>
 8009a68:	9b06      	ldr	r3, [sp, #24]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 808d 	beq.w	8009b8a <lv_draw_map+0x27a>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8009a70:	4630      	mov	r0, r6
 8009a72:	f00c fd47 	bl	8016504 <lv_disp_get_hor_res>
 8009a76:	4605      	mov	r5, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009a78:	a81b      	add	r0, sp, #108	; 0x6c
 8009a7a:	f00d f806 	bl	8016a8a <lv_area_get_size>
 8009a7e:	42a8      	cmp	r0, r5
 8009a80:	d803      	bhi.n	8009a8a <lv_draw_map+0x17a>
 8009a82:	a81b      	add	r0, sp, #108	; 0x6c
 8009a84:	f00d f801 	bl	8016a8a <lv_area_get_size>
 8009a88:	4605      	mov	r5, r0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009a8a:	0068      	lsls	r0, r5, #1
            for(y = 0; y < draw_area_h; y++) {
 8009a8c:	f04f 0800 	mov.w	r8, #0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009a90:	f00d fe2a 	bl	80176e8 <lv_mem_buf_get>
 8009a94:	4606      	mov	r6, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009a96:	4628      	mov	r0, r5
 8009a98:	f00d fe26 	bl	80176e8 <lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
 8009a9c:	9b05      	ldr	r3, [sp, #20]
 8009a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009aa0:	4607      	mov	r7, r0
                map_buf_tmp += map_w * px_size_byte;
 8009aa2:	fb13 f909 	smulbb	r9, r3, r9
        uint32_t px_i = 0;
 8009aa6:	4643      	mov	r3, r8
 8009aa8:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
            for(y = 0; y < draw_area_h; y++) {
 8009aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009aae:	4542      	cmp	r2, r8
 8009ab0:	dd4d      	ble.n	8009b4e <lv_draw_map+0x23e>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	eb07 0c03 	add.w	ip, r7, r3
 8009ab8:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
                map_px = map_buf_tmp;
 8009abc:	9a07      	ldr	r2, [sp, #28]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009abe:	9104      	str	r1, [sp, #16]
 8009ac0:	e013      	b.n	8009aea <lv_draw_map+0x1da>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e77c      	b.n	80099c0 <lv_draw_map+0xb0>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e77a      	b.n	80099c0 <lv_draw_map+0xb0>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8009aca:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
 8009acc:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
 8009ad0:	b130      	cbz	r0, 8009ae0 <lv_draw_map+0x1d0>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 8009ad2:	7811      	ldrb	r1, [r2, #0]
 8009ad4:	7850      	ldrb	r0, [r2, #1]
 8009ad6:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 8009ada:	9904      	ldr	r1, [sp, #16]
 8009adc:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009ae0:	9904      	ldr	r1, [sp, #16]
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	4402      	add	r2, r0
 8009ae8:	9104      	str	r1, [sp, #16]
 8009aea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009aec:	9904      	ldr	r1, [sp, #16]
 8009aee:	4288      	cmp	r0, r1
 8009af0:	dceb      	bgt.n	8009aca <lv_draw_map+0x1ba>
                map_buf_tmp += map_w * px_size_byte;
 8009af2:	9a07      	ldr	r2, [sp, #28]
 8009af4:	4453      	add	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009af6:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8009afa:	444a      	add	r2, r9
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8009b02:	3201      	adds	r2, #1
 8009b04:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8009b06:	fa03 f282 	sxtah	r2, r3, r2
 8009b0a:	42aa      	cmp	r2, r5
 8009b0c:	d207      	bcs.n	8009b1e <lv_draw_map+0x20e>
                    blend_area.y2 ++;
 8009b0e:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8009b12:	3201      	adds	r2, #1
 8009b14:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            for(y = 0; y < draw_area_h; y++) {
 8009b18:	f108 0801 	add.w	r8, r8, #1
 8009b1c:	e7c6      	b.n	8009aac <lv_draw_map+0x19c>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8009b1e:	7b23      	ldrb	r3, [r4, #12]
 8009b20:	4632      	mov	r2, r6
 8009b22:	a91d      	add	r1, sp, #116	; 0x74
 8009b24:	4658      	mov	r0, fp
 8009b26:	f003 030f 	and.w	r3, r3, #15
 8009b2a:	9302      	str	r3, [sp, #8]
 8009b2c:	7ae3      	ldrb	r3, [r4, #11]
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	2302      	movs	r3, #2
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	463b      	mov	r3, r7
 8009b36:	f7ff fc47 	bl	80093c8 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8009b3a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8009b3e:	3301      	adds	r3, #1
 8009b40:	b21b      	sxth	r3, r3
 8009b42:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    blend_area.y2 = blend_area.y1;
 8009b46:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    px_i = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e7e4      	b.n	8009b18 <lv_draw_map+0x208>
            if(blend_area.y1 != blend_area.y2) {
 8009b4e:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8009b52:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d010      	beq.n	8009b7c <lv_draw_map+0x26c>
                blend_area.y2--;
 8009b5a:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8009b5c:	4632      	mov	r2, r6
 8009b5e:	a91d      	add	r1, sp, #116	; 0x74
 8009b60:	4658      	mov	r0, fp
                blend_area.y2--;
 8009b62:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 8009b66:	7b23      	ldrb	r3, [r4, #12]
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	9302      	str	r3, [sp, #8]
 8009b6e:	7ae3      	ldrb	r3, [r4, #11]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	2302      	movs	r3, #2
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	463b      	mov	r3, r7
 8009b78:	f7ff fc26 	bl	80093c8 <_lv_blend_map>
            lv_mem_buf_release(mask_buf);
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f00d fc0f 	bl	80173a0 <lv_mem_buf_release>
            lv_mem_buf_release(map2);
 8009b82:	4630      	mov	r0, r6
            lv_mem_buf_release(map2);
 8009b84:	f00d fc0c 	bl	80173a0 <lv_mem_buf_release>
}
 8009b88:	e710      	b.n	80099ac <lv_draw_map+0x9c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f00c fcba 	bl	8016504 <lv_disp_get_hor_res>
 8009b90:	4682      	mov	sl, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009b92:	a81b      	add	r0, sp, #108	; 0x6c
 8009b94:	f00c ff79 	bl	8016a8a <lv_area_get_size>
 8009b98:	4550      	cmp	r0, sl
 8009b9a:	d803      	bhi.n	8009ba4 <lv_draw_map+0x294>
 8009b9c:	a81b      	add	r0, sp, #108	; 0x6c
 8009b9e:	f00c ff74 	bl	8016a8a <lv_area_get_size>
 8009ba2:	4682      	mov	sl, r0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009ba4:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8009ba8:	f00d fd9e 	bl	80176e8 <lv_mem_buf_get>
 8009bac:	ee08 0a10 	vmov	s16, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	f00d fd99 	bl	80176e8 <lv_mem_buf_get>
            lv_memset_00(&trans_dsc, sizeof(_lv_img_transform_dsc_t));
 8009bb6:	214c      	movs	r1, #76	; 0x4c
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009bb8:	4606      	mov	r6, r0
            lv_memset_00(&trans_dsc, sizeof(_lv_img_transform_dsc_t));
 8009bba:	a81f      	add	r0, sp, #124	; 0x7c
 8009bbc:	f00d fde2 	bl	8017784 <lv_memset_00>
            if(transform) {
 8009bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bc6:	d023      	beq.n	8009c10 <lv_draw_map+0x300>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8009bc8:	9b06      	ldr	r3, [sp, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d17b      	bne.n	8009cc6 <lv_draw_map+0x3b6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bf0c      	ite	eq
 8009bd4:	2204      	moveq	r2, #4
 8009bd6:	2206      	movne	r2, #6
                trans_dsc.cfg.angle = draw_dsc->angle;
 8009bd8:	6823      	ldr	r3, [r4, #0]
                _lv_img_buf_transform_init(&trans_dsc);
 8009bda:	a81f      	add	r0, sp, #124	; 0x7c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009bdc:	f8b8 1002 	ldrh.w	r1, [r8, #2]
                trans_dsc.cfg.angle = draw_dsc->angle;
 8009be0:	9322      	str	r3, [sp, #136]	; 0x88
 8009be2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
                trans_dsc.cfg.src = map_p;
 8009be6:	951f      	str	r5, [sp, #124]	; 0x7c
 8009be8:	3301      	adds	r3, #1
                trans_dsc.cfg.src_w = map_w;
 8009bea:	f8ad 9080 	strh.w	r9, [sp, #128]	; 0x80
                trans_dsc.cfg.cf = cf;
 8009bee:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8009bf2:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 8009bf4:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 8009bf8:	6863      	ldr	r3, [r4, #4]
 8009bfa:	9321      	str	r3, [sp, #132]	; 0x84
                trans_dsc.cfg.color = draw_dsc->recolor;
 8009bfc:	8923      	ldrh	r3, [r4, #8]
 8009bfe:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 8009c02:	7d23      	ldrb	r3, [r4, #20]
 8009c04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c08:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                _lv_img_buf_transform_init(&trans_dsc);
 8009c0c:	f004 fa9a 	bl	800e144 <_lv_img_buf_transform_init>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 8009c10:	7aa3      	ldrb	r3, [r4, #10]
 8009c12:	43da      	mvns	r2, r3
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	920f      	str	r2, [sp, #60]	; 0x3c
            if(draw_dsc->recolor_opa != 0) {
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d056      	beq.n	8009cca <lv_draw_map+0x3ba>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 8009c1c:	7a62      	ldrb	r2, [r4, #9]
 8009c1e:	08d2      	lsrs	r2, r2, #3
 8009c20:	435a      	muls	r2, r3
 8009c22:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 8009c24:	8922      	ldrh	r2, [r4, #8]
 8009c26:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8009c2a:	435a      	muls	r2, r3
 8009c2c:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 8009c2e:	7a22      	ldrb	r2, [r4, #8]
 8009c30:	f002 021f 	and.w	r2, r2, #31
 8009c34:	4353      	muls	r3, r2
 8009c36:	930c      	str	r3, [sp, #48]	; 0x30
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d149      	bne.n	8009cd2 <lv_draw_map+0x3c2>
 8009c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d146      	bne.n	8009cd2 <lv_draw_map+0x3c2>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c4a:	bf14      	ite	ne
 8009c4c:	2502      	movne	r5, #2
 8009c4e:	2501      	moveq	r5, #1
            if(other_mask_cnt) {
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	b11b      	cbz	r3, 8009c5c <lv_draw_map+0x34c>
                lv_memset_ff(mask_buf, mask_buf_size);
 8009c54:	4651      	mov	r1, sl
 8009c56:	4630      	mov	r0, r6
 8009c58:	f00d fdc3 	bl	80177e2 <lv_memset_ff>
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 8009c5c:	9b04      	ldr	r3, [sp, #16]
 8009c5e:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 8009c62:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009c66:	4413      	add	r3, r2
 8009c68:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8009c6c:	1a9b      	subs	r3, r3, r2
 8009c6e:	9313      	str	r3, [sp, #76]	; 0x4c
                map_buf_tmp += map_w * px_size_byte;
 8009c70:	9b05      	ldr	r3, [sp, #20]
 8009c72:	fb13 f309 	smulbb	r3, r3, r9
            for(y = 0; y < draw_area_h; y++) {
 8009c76:	f04f 0900 	mov.w	r9, #0
                map_buf_tmp += map_w * px_size_byte;
 8009c7a:	9315      	str	r3, [sp, #84]	; 0x54
        uint32_t px_i = 0;
 8009c7c:	464f      	mov	r7, r9
 8009c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c84:	9317      	str	r3, [sp, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 8009c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c88:	454b      	cmp	r3, r9
 8009c8a:	dc24      	bgt.n	8009cd6 <lv_draw_map+0x3c6>
            if(blend_area.y1 != blend_area.y2) {
 8009c8c:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8009c90:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d010      	beq.n	8009cba <lv_draw_map+0x3aa>
                blend_area.y2--;
 8009c98:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8009c9a:	ee18 2a10 	vmov	r2, s16
 8009c9e:	a91d      	add	r1, sp, #116	; 0x74
 8009ca0:	4658      	mov	r0, fp
                blend_area.y2--;
 8009ca2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8009ca6:	7b23      	ldrb	r3, [r4, #12]
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	9302      	str	r3, [sp, #8]
 8009cae:	7ae3      	ldrb	r3, [r4, #11]
 8009cb0:	e9cd 5300 	strd	r5, r3, [sp]
 8009cb4:	4633      	mov	r3, r6
 8009cb6:	f7ff fb87 	bl	80093c8 <_lv_blend_map>
            lv_mem_buf_release(mask_buf);
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f00d fb70 	bl	80173a0 <lv_mem_buf_release>
            lv_mem_buf_release(map2);
 8009cc0:	ee18 0a10 	vmov	r0, s16
 8009cc4:	e75e      	b.n	8009b84 <lv_draw_map+0x274>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8009cc6:	2205      	movs	r2, #5
 8009cc8:	e786      	b.n	8009bd8 <lv_draw_map+0x2c8>
            uint16_t recolor_premult[3] = {0};
 8009cca:	930c      	str	r3, [sp, #48]	; 0x30
 8009ccc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 8009cd0:	e7b2      	b.n	8009c38 <lv_draw_map+0x328>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009cd2:	2502      	movs	r5, #2
 8009cd4:	e7bc      	b.n	8009c50 <lv_draw_map+0x340>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 8009cd6:	9b04      	ldr	r3, [sp, #16]
 8009cd8:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8009cdc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f9b8 2000 	ldrsh.w	r2, [r8]
 8009ce6:	1a9b      	subs	r3, r3, r2
 8009ce8:	ee18 2a10 	vmov	r2, s16
 8009cec:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 8009cf0:	9314      	str	r3, [sp, #80]	; 0x50
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009cf2:	19f3      	adds	r3, r6, r7
 8009cf4:	9216      	str	r2, [sp, #88]	; 0x58
                map_px = map_buf_tmp;
 8009cf6:	9a07      	ldr	r2, [sp, #28]
 8009cf8:	ee08 3a90 	vmov	s17, r3
 8009cfc:	920a      	str	r2, [sp, #40]	; 0x28
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009cfe:	2200      	movs	r2, #0
 8009d00:	920b      	str	r2, [sp, #44]	; 0x2c
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 8009d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d04:	444a      	add	r2, r9
 8009d06:	b212      	sxth	r2, r2
 8009d08:	ee07 2a90 	vmov	s15, r2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009d0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d10:	428a      	cmp	r2, r1
 8009d12:	dc3e      	bgt.n	8009d92 <lv_draw_map+0x482>
 8009d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d16:	441f      	add	r7, r3
                if(other_mask_cnt) {
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	b323      	cbz	r3, 8009d66 <lv_draw_map+0x456>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + draw_buf->area.x1, y + draw_area.y1 + draw_buf->area.y1,
 8009d1c:	9804      	ldr	r0, [sp, #16]
 8009d1e:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 8009d22:	8a40      	ldrh	r0, [r0, #18]
 8009d24:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8009d28:	4402      	add	r2, r0
 8009d2a:	9804      	ldr	r0, [sp, #16]
 8009d2c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8009d30:	3301      	adds	r3, #1
 8009d32:	8a00      	ldrh	r0, [r0, #16]
 8009d34:	444a      	add	r2, r9
 8009d36:	1a5b      	subs	r3, r3, r1
 8009d38:	4401      	add	r1, r0
 8009d3a:	b212      	sxth	r2, r2
 8009d3c:	b21b      	sxth	r3, r3
 8009d3e:	ee18 0a90 	vmov	r0, s17
 8009d42:	b209      	sxth	r1, r1
 8009d44:	f001 ffca 	bl	800bcdc <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	f040 808d 	bne.w	8009e68 <lv_draw_map+0x558>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009d4e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8009d52:	2502      	movs	r5, #2
 8009d54:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
                        lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 8009d58:	ee18 0a90 	vmov	r0, s17
 8009d5c:	3101      	adds	r1, #1
 8009d5e:	1ac9      	subs	r1, r1, r3
 8009d60:	b209      	sxth	r1, r1
 8009d62:	f00d fd0f 	bl	8017784 <lv_memset_00>
                map_buf_tmp += map_w * px_size_byte;
 8009d66:	9b07      	ldr	r3, [sp, #28]
 8009d68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8009d76:	3301      	adds	r3, #1
 8009d78:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 8009d7a:	fa07 f383 	sxtah	r3, r7, r3
 8009d7e:	4553      	cmp	r3, sl
 8009d80:	d276      	bcs.n	8009e70 <lv_draw_map+0x560>
                    blend_area.y2 ++;
 8009d82:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8009d86:	3301      	adds	r3, #1
 8009d88:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < draw_area_h; y++) {
 8009d8c:	f109 0901 	add.w	r9, r9, #1
 8009d90:	e779      	b.n	8009c86 <lv_draw_map+0x376>
                    if(transform) {
 8009d92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d94:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009d98:	d04d      	beq.n	8009e36 <lv_draw_map+0x526>
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 8009d9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d9c:	a81f      	add	r0, sp, #124	; 0x7c
 8009d9e:	9319      	str	r3, [sp, #100]	; 0x64
 8009da0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da2:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8009da6:	1899      	adds	r1, r3, r2
 8009da8:	ee17 2a90 	vmov	r2, s15
 8009dac:	b209      	sxth	r1, r1
 8009dae:	f004 fc7e 	bl	800e6ae <_lv_img_buf_transform>
                        if(ret == false) {
 8009db2:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8009db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009db8:	b948      	cbnz	r0, 8009dce <lv_draw_map+0x4be>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 8009dba:	7018      	strb	r0, [r3, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009dbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	9905      	ldr	r1, [sp, #20]
 8009dc2:	3201      	adds	r2, #1
 8009dc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dc8:	440a      	add	r2, r1
 8009dca:	920a      	str	r2, [sp, #40]	; 0x28
 8009dcc:	e79e      	b.n	8009d0c <lv_draw_map+0x3fc>
                            mask_buf[px_i] = trans_dsc.res.opa;
 8009dce:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
 8009dd2:	7019      	strb	r1, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 8009dd4:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
                    if(draw_dsc->recolor_opa != 0) {
 8009dd8:	7aa0      	ldrb	r0, [r4, #10]
 8009dda:	b338      	cbz	r0, 8009e2c <lv_draw_map+0x51c>
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dde:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8009de2:	4694      	mov	ip, r2
 8009de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009de6:	fb00 200c 	mla	r0, r0, ip, r2
 8009dea:	f248 0281 	movw	r2, #32897	; 0x8081
 8009dee:	3080      	adds	r0, #128	; 0x80
 8009df0:	4350      	muls	r0, r2
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009df2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009df4:	f3c0 5cc5 	ubfx	ip, r0, #23, #6
 8009df8:	4696      	mov	lr, r2
 8009dfa:	f001 001f 	and.w	r0, r1, #31
 8009dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009e00:	0ac9      	lsrs	r1, r1, #11
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009e02:	fb00 200e 	mla	r0, r0, lr, r2
 8009e06:	f248 0281 	movw	r2, #32897	; 0x8081
 8009e0a:	3080      	adds	r0, #128	; 0x80
 8009e0c:	4350      	muls	r0, r2
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009e0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e10:	fb01 210e 	mla	r1, r1, lr, r2
 8009e14:	f248 0281 	movw	r2, #32897	; 0x8081
 8009e18:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 8009e1c:	3180      	adds	r1, #128	; 0x80
 8009e1e:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
 8009e22:	4351      	muls	r1, r2
 8009e24:	0dc9      	lsrs	r1, r1, #23
 8009e26:	ea40 21c1 	orr.w	r1, r0, r1, lsl #11
 8009e2a:	b289      	uxth	r1, r1
                    map2[px_i].full = c.full;
 8009e2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009e30:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
 8009e34:	e7c2      	b.n	8009dbc <lv_draw_map+0x4ac>
                        if(alpha_byte) {
 8009e36:	9a06      	ldr	r2, [sp, #24]
 8009e38:	b19a      	cbz	r2, 8009e62 <lv_draw_map+0x552>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8009e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e3c:	7891      	ldrb	r1, [r2, #2]
                            mask_buf[px_i] = px_opa;
 8009e3e:	7019      	strb	r1, [r3, #0]
                            if(px_opa == 0) {
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d0bb      	beq.n	8009dbc <lv_draw_map+0x4ac>
                        c.full =  map_px[0] + (map_px[1] << 8);
 8009e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e46:	7850      	ldrb	r0, [r2, #1]
 8009e48:	7811      	ldrb	r1, [r2, #0]
                        if(chroma_key) {
 8009e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        c.full =  map_px[0] + (map_px[1] << 8);
 8009e4c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009e50:	b289      	uxth	r1, r1
                        if(chroma_key) {
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	d0c0      	beq.n	8009dd8 <lv_draw_map+0x4c8>
                            if(c.full == chroma_keyed_color.full) {
 8009e56:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 8009e5a:	d1bd      	bne.n	8009dd8 <lv_draw_map+0x4c8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	7019      	strb	r1, [r3, #0]
                                continue;
 8009e60:	e7ac      	b.n	8009dbc <lv_draw_map+0x4ac>
                            mask_buf[px_i] = 0xFF;
 8009e62:	21ff      	movs	r1, #255	; 0xff
 8009e64:	7019      	strb	r1, [r3, #0]
 8009e66:	e7ed      	b.n	8009e44 <lv_draw_map+0x534>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 8009e68:	2802      	cmp	r0, #2
 8009e6a:	bf08      	it	eq
 8009e6c:	2502      	moveq	r5, #2
 8009e6e:	e77a      	b.n	8009d66 <lv_draw_map+0x456>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 8009e70:	7b23      	ldrb	r3, [r4, #12]
 8009e72:	ee18 2a10 	vmov	r2, s16
 8009e76:	a91d      	add	r1, sp, #116	; 0x74
 8009e78:	4658      	mov	r0, fp
 8009e7a:	f003 030f 	and.w	r3, r3, #15
 8009e7e:	9302      	str	r3, [sp, #8]
 8009e80:	7ae3      	ldrb	r3, [r4, #11]
 8009e82:	e9cd 5300 	strd	r5, r3, [sp]
 8009e86:	4633      	mov	r3, r6
 8009e88:	f7ff fa9e 	bl	80093c8 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 8009e8c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 8009e90:	3301      	adds	r3, #1
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    blend_area.y2 = blend_area.y1;
 8009e98:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009e9c:	9b06      	ldr	r3, [sp, #24]
 8009e9e:	b97b      	cbnz	r3, 8009ec0 <lv_draw_map+0x5b0>
 8009ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea2:	b96b      	cbnz	r3, 8009ec0 <lv_draw_map+0x5b0>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eaa:	bf14      	ite	ne
 8009eac:	2502      	movne	r5, #2
 8009eae:	2501      	moveq	r5, #1
                    if(other_mask_cnt) {
 8009eb0:	9b08      	ldr	r3, [sp, #32]
 8009eb2:	b13b      	cbz	r3, 8009ec4 <lv_draw_map+0x5b4>
                        lv_memset_ff(mask_buf, mask_buf_size);
 8009eb4:	4651      	mov	r1, sl
 8009eb6:	4630      	mov	r0, r6
                    px_i = 0;
 8009eb8:	2700      	movs	r7, #0
                        lv_memset_ff(mask_buf, mask_buf_size);
 8009eba:	f00d fc92 	bl	80177e2 <lv_memset_ff>
 8009ebe:	e765      	b.n	8009d8c <lv_draw_map+0x47c>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 8009ec0:	2502      	movs	r5, #2
 8009ec2:	e7f5      	b.n	8009eb0 <lv_draw_map+0x5a0>
                    px_i = 0;
 8009ec4:	9f08      	ldr	r7, [sp, #32]
 8009ec6:	e761      	b.n	8009d8c <lv_draw_map+0x47c>

08009ec8 <lv_draw_img_dsc_init>:
{
 8009ec8:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8009eca:	2118      	movs	r1, #24
{
 8009ecc:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8009ece:	f00d fc59 	bl	8017784 <lv_memset_00>
    dsc->recolor = lv_color_black();
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 8009ed6:	23ff      	movs	r3, #255	; 0xff
 8009ed8:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8009eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ede:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8009ee0:	7d23      	ldrb	r3, [r4, #20]
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	7523      	strb	r3, [r4, #20]
}
 8009ee8:	bd10      	pop	{r4, pc}
	...

08009eec <lv_img_cf_get_px_size>:
    switch(cf) {
 8009eec:	3804      	subs	r0, #4
 8009eee:	b2c0      	uxtb	r0, r0
 8009ef0:	280a      	cmp	r0, #10
 8009ef2:	bf9a      	itte	ls
 8009ef4:	4b01      	ldrls	r3, [pc, #4]	; (8009efc <lv_img_cf_get_px_size+0x10>)
 8009ef6:	5c18      	ldrbls	r0, [r3, r0]
{
 8009ef8:	2000      	movhi	r0, #0
}
 8009efa:	4770      	bx	lr
 8009efc:	08025aec 	.word	0x08025aec

08009f00 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 8009f00:	2803      	cmp	r0, #3
 8009f02:	d005      	beq.n	8009f10 <lv_img_cf_is_chroma_keyed+0x10>
 8009f04:	3806      	subs	r0, #6
 8009f06:	2804      	cmp	r0, #4
 8009f08:	bf8c      	ite	hi
 8009f0a:	2000      	movhi	r0, #0
 8009f0c:	2001      	movls	r0, #1
 8009f0e:	4770      	bx	lr
            is_chroma_keyed = true;
 8009f10:	2001      	movs	r0, #1
}
 8009f12:	4770      	bx	lr

08009f14 <lv_img_cf_has_alpha>:
    switch(cf) {
 8009f14:	280e      	cmp	r0, #14
 8009f16:	d809      	bhi.n	8009f2c <lv_img_cf_has_alpha+0x18>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f1e:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8009f22:	4218      	tst	r0, r3
 8009f24:	bf14      	ite	ne
 8009f26:	2001      	movne	r0, #1
 8009f28:	2000      	moveq	r0, #0
 8009f2a:	4770      	bx	lr
{
 8009f2c:	2000      	movs	r0, #0
}
 8009f2e:	4770      	bx	lr

08009f30 <lv_draw_img>:
{
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	4604      	mov	r4, r0
 8009f36:	4688      	mov	r8, r1
 8009f38:	461e      	mov	r6, r3
    if(src == NULL) {
 8009f3a:	4610      	mov	r0, r2
{
 8009f3c:	ed2d 8b02 	vpush	{d8}
 8009f40:	b08d      	sub	sp, #52	; 0x34
    if(src == NULL) {
 8009f42:	b94a      	cbnz	r2, 8009f58 <lv_draw_img+0x28>
        show_error(coords, mask, "No\ndata");
 8009f44:	4a70      	ldr	r2, [pc, #448]	; (800a108 <lv_draw_img+0x1d8>)
 8009f46:	4641      	mov	r1, r8
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff fcc3 	bl	80098d4 <show_error>
}
 8009f4e:	b00d      	add	sp, #52	; 0x34
 8009f50:	ecbd 8b02 	vpop	{d8}
 8009f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 8009f58:	7adb      	ldrb	r3, [r3, #11]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d9f7      	bls.n	8009f4e <lv_draw_img+0x1e>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8009f5e:	6932      	ldr	r2, [r6, #16]
 8009f60:	8931      	ldrh	r1, [r6, #8]
 8009f62:	f004 fc43 	bl	800e7ec <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 8009f66:	4605      	mov	r5, r0
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d0eb      	beq.n	8009f44 <lv_draw_img+0x14>
    if(cdsc->dec_dsc.error_msg != NULL) {
 8009f6c:	6a02      	ldr	r2, [r0, #32]
 8009f6e:	b13a      	cbz	r2, 8009f80 <lv_draw_img+0x50>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 8009f70:	4641      	mov	r1, r8
 8009f72:	4620      	mov	r0, r4
 8009f74:	f7ff fcae 	bl	80098d4 <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f004 ffb1 	bl	800eee0 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 8009f7e:	e7e6      	b.n	8009f4e <lv_draw_img+0x1e>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 8009f80:	7d03      	ldrb	r3, [r0, #20]
 8009f82:	f003 031f 	and.w	r3, r3, #31
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff ffba 	bl	8009f00 <lv_img_cf_is_chroma_keyed>
 8009f8c:	9004      	str	r0, [sp, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7ff ffc0 	bl	8009f14 <lv_img_cf_has_alpha>
    else if(cdsc->dec_dsc.img_data) {
 8009f94:	69ab      	ldr	r3, [r5, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 8009f96:	9005      	str	r0, [sp, #20]
    else if(cdsc->dec_dsc.img_data) {
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d04b      	beq.n	800a034 <lv_draw_img+0x104>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8009f9c:	6833      	ldr	r3, [r6, #0]
    dest->x1 = src->x1;
 8009f9e:	f9b4 1000 	ldrsh.w	r1, [r4]
    dest->y1 = src->y1;
 8009fa2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8009fa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->x2 = src->x2;
 8009faa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
    dest->y2 = src->y2;
 8009fae:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    dest->x1 = src->x1;
 8009fb2:	f8ad 1020 	strh.w	r1, [sp, #32]
    dest->y1 = src->y1;
 8009fb6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 8009fba:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 8009fbe:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 8009fc2:	d025      	beq.n	800a010 <lv_draw_img+0xe0>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8009fc4:	46b4      	mov	ip, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009fc6:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009fc8:	3701      	adds	r7, #1
 8009fca:	f93c 3b04 	ldrsh.w	r3, [ip], #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009fce:	1a41      	subs	r1, r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009fd0:	1aba      	subs	r2, r7, r2
 8009fd2:	8870      	ldrh	r0, [r6, #2]
 8009fd4:	b209      	sxth	r1, r1
 8009fd6:	f8cd c004 	str.w	ip, [sp, #4]
 8009fda:	b212      	sxth	r2, r2
 8009fdc:	9000      	str	r0, [sp, #0]
 8009fde:	a808      	add	r0, sp, #32
 8009fe0:	f004 f92c 	bl	800e23c <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8009fe4:	8822      	ldrh	r2, [r4, #0]
 8009fe6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8009fea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 8009fee:	4413      	add	r3, r2
 8009ff0:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8009ff4:	8863      	ldrh	r3, [r4, #2]
 8009ff6:	4419      	add	r1, r3
 8009ff8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 8009ffc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800a000:	440a      	add	r2, r1
 800a002:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 800a006:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a00a:	4413      	add	r3, r2
 800a00c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800a010:	aa08      	add	r2, sp, #32
 800a012:	4641      	mov	r1, r8
 800a014:	a80a      	add	r0, sp, #40	; 0x28
 800a016:	f00c fd66 	bl	8016ae6 <_lv_area_intersect>
        if(union_ok == false) {
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d0ac      	beq.n	8009f78 <lv_draw_img+0x48>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800a01e:	9b05      	ldr	r3, [sp, #20]
 800a020:	a90a      	add	r1, sp, #40	; 0x28
 800a022:	4620      	mov	r0, r4
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	9b04      	ldr	r3, [sp, #16]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	4633      	mov	r3, r6
 800a02c:	69aa      	ldr	r2, [r5, #24]
 800a02e:	f7ff fc6f 	bl	8009910 <lv_draw_map>
 800a032:	e7a1      	b.n	8009f78 <lv_draw_img+0x48>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800a034:	4622      	mov	r2, r4
 800a036:	4641      	mov	r1, r8
 800a038:	a806      	add	r0, sp, #24
 800a03a:	f00c fd54 	bl	8016ae6 <_lv_area_intersect>
        if(union_ok == false) {
 800a03e:	2800      	cmp	r0, #0
 800a040:	d09a      	beq.n	8009f78 <lv_draw_img+0x48>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a042:	f8bd 701c 	ldrh.w	r7, [sp, #28]
        lv_area_set_height(&line, 1);
 800a046:	f10d 0a20 	add.w	sl, sp, #32
 800a04a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a04e:	3701      	adds	r7, #1
 800a050:	1aff      	subs	r7, r7, r3
 800a052:	b23f      	sxth	r7, r7
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800a054:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800a058:	f00d fb46 	bl	80176e8 <lv_mem_buf_get>
    dest->x1 = src->x1;
 800a05c:	9b06      	ldr	r3, [sp, #24]
        lv_area_set_height(&line, 1);
 800a05e:	2101      	movs	r1, #1
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800a060:	4681      	mov	r9, r0
 800a062:	9308      	str	r3, [sp, #32]
        lv_area_set_height(&line, 1);
 800a064:	4650      	mov	r0, sl
    dest->x2 = src->x2;
 800a066:	9b07      	ldr	r3, [sp, #28]
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	f00c fd09 	bl	8016a80 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800a06e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a072:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
 800a076:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a07a:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
 800a07c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a080:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
 800a082:	ebab 0101 	sub.w	r1, fp, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a086:	ee08 3a10 	vmov	s16, r3
        int32_t y = mask_com.y1 - coords->y1;
 800a08a:	9103      	str	r1, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a08c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a090:	459b      	cmp	fp, r3
 800a092:	dd03      	ble.n	800a09c <lv_draw_img+0x16c>
        lv_mem_buf_release(buf);
 800a094:	4648      	mov	r0, r9
 800a096:	f00d f983 	bl	80173a0 <lv_mem_buf_release>
 800a09a:	e76d      	b.n	8009f78 <lv_draw_img+0x48>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800a09c:	4652      	mov	r2, sl
 800a09e:	4641      	mov	r1, r8
 800a0a0:	a80a      	add	r0, sp, #40	; 0x28
 800a0a2:	f00c fd20 	bl	8016ae6 <_lv_area_intersect>
            if(union_ok == false) continue;
 800a0a6:	b360      	cbz	r0, 800a102 <lv_draw_img+0x1d2>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800a0ae:	ee18 1a10 	vmov	r1, s16
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f8cd 9000 	str.w	r9, [sp]
 800a0b8:	f004 ff02 	bl	800eec0 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800a0bc:	2801      	cmp	r0, #1
 800a0be:	d009      	beq.n	800a0d4 <lv_draw_img+0x1a4>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f004 ff0d 	bl	800eee0 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800a0c6:	4648      	mov	r0, r9
 800a0c8:	f00d f96a 	bl	80173a0 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f004 ff07 	bl	800eee0 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800a0d2:	e737      	b.n	8009f44 <lv_draw_img+0x14>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800a0d4:	9b05      	ldr	r3, [sp, #20]
 800a0d6:	464a      	mov	r2, r9
 800a0d8:	a90a      	add	r1, sp, #40	; 0x28
 800a0da:	4650      	mov	r0, sl
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	4633      	mov	r3, r6
 800a0e4:	f7ff fc14 	bl	8009910 <lv_draw_map>
            line.y1++;
 800a0e8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 800a0f2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	3301      	adds	r3, #1
 800a100:	9303      	str	r3, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a102:	f10b 0b01 	add.w	fp, fp, #1
 800a106:	e7c1      	b.n	800a08c <lv_draw_img+0x15c>
 800a108:	08025ae4 	.word	0x08025ae4

0800a10c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800a10c:	b150      	cbz	r0, 800a124 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a10e:	7803      	ldrb	r3, [r0, #0]
 800a110:	f1a3 0220 	sub.w	r2, r3, #32
 800a114:	2a5f      	cmp	r2, #95	; 0x5f
 800a116:	d907      	bls.n	800a128 <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
 800a118:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800a11c:	bf14      	ite	ne
 800a11e:	2002      	movne	r0, #2
 800a120:	2000      	moveq	r0, #0
 800a122:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800a124:	2003      	movs	r0, #3
 800a126:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a128:	2001      	movs	r0, #1
}
 800a12a:	4770      	bx	lr

0800a12c <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800a12c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b09      	cmp	r3, #9
 800a134:	d90a      	bls.n	800a14c <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800a136:	2860      	cmp	r0, #96	; 0x60
 800a138:	bf84      	itt	hi
 800a13a:	3820      	subhi	r0, #32
 800a13c:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
 800a13e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a142:	2b05      	cmp	r3, #5
 800a144:	bf96      	itet	ls
 800a146:	3837      	subls	r0, #55	; 0x37
{
 800a148:	2300      	movhi	r3, #0
 800a14a:	b2c3      	uxtbls	r3, r0
                break;
        }
    }

    return result;
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	4770      	bx	lr

0800a150 <lv_draw_label_dsc_init>:
{
 800a150:	b538      	push	{r3, r4, r5, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800a152:	2120      	movs	r1, #32
{
 800a154:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800a156:	f00d fb15 	bl	8017784 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800a15a:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 800a15c:	2500      	movs	r5, #0
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a15e:	2005      	movs	r0, #5
    dsc->opa = LV_OPA_COVER;
 800a160:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <lv_draw_label_dsc_init+0x2c>)
    dsc->color = lv_color_black();
 800a164:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800a166:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800a168:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800a16c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a170:	f00c febc 	bl	8016eec <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800a174:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a176:	8220      	strh	r0, [r4, #16]
}
 800a178:	bd38      	pop	{r3, r4, r5, pc}
 800a17a:	bf00      	nop
 800a17c:	080296f0 	.word	0x080296f0

0800a180 <lv_draw_letter>:
{
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	b099      	sub	sp, #100	; 0x64
 800a186:	461f      	mov	r7, r3
 800a188:	4680      	mov	r8, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 800a190:	4616      	mov	r6, r2
 800a192:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
    if(opa < LV_OPA_MIN) return;
 800a196:	2c01      	cmp	r4, #1
{
 800a198:	930d      	str	r3, [sp, #52]	; 0x34
    if(opa < LV_OPA_MIN) return;
 800a19a:	f240 8100 	bls.w	800a39e <lv_draw_letter+0x21e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a19e:	2cfe      	cmp	r4, #254	; 0xfe
 800a1a0:	bf28      	it	cs
 800a1a2:	24ff      	movcs	r4, #255	; 0xff
    if(font_p == NULL) {
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	f000 80fa 	beq.w	800a39e <lv_draw_letter+0x21e>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	463a      	mov	r2, r7
 800a1ae:	a915      	add	r1, sp, #84	; 0x54
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f00b ffa9 	bl	8016108 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	f000 80f1 	beq.w	800a39e <lv_draw_letter+0x21e>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800a1bc:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 80ec 	beq.w	800a39e <lv_draw_letter+0x21e>
 800a1c6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800a1ca:	2a00      	cmp	r2, #0
 800a1cc:	f000 80e7 	beq.w	800a39e <lv_draw_letter+0x21e>
    int32_t pos_x = pos_p->x + g.ofs_x;
 800a1d0:	f9bd 105a 	ldrsh.w	r1, [sp, #90]	; 0x5a
 800a1d4:	f9b8 b000 	ldrsh.w	fp, [r8]
 800a1d8:	448b      	add	fp, r1
    if(pos_x + g.box_w < clip_area->x1 ||
 800a1da:	f9b5 1000 	ldrsh.w	r1, [r5]
 800a1de:	445a      	add	r2, fp
 800a1e0:	428a      	cmp	r2, r1
 800a1e2:	f2c0 80dc 	blt.w	800a39e <lv_draw_letter+0x21e>
       pos_x > clip_area->x2 ||
 800a1e6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
 800a1ea:	455a      	cmp	r2, fp
 800a1ec:	f2c0 80d7 	blt.w	800a39e <lv_draw_letter+0x21e>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a1f0:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800a1f4:	f9b6 9008 	ldrsh.w	r9, [r6, #8]
 800a1f8:	eba9 0902 	sub.w	r9, r9, r2
 800a1fc:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800a200:	4491      	add	r9, r2
 800a202:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 800a206:	eba9 0903 	sub.w	r9, r9, r3
 800a20a:	eba9 0902 	sub.w	r9, r9, r2
       pos_y + g.box_h < clip_area->y1 ||
 800a20e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a212:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
 800a214:	4293      	cmp	r3, r2
 800a216:	f2c0 80c2 	blt.w	800a39e <lv_draw_letter+0x21e>
       pos_y > clip_area->y2)  {
 800a21a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
       pos_y + g.box_h < clip_area->y1 ||
 800a21e:	454b      	cmp	r3, r9
 800a220:	f2c0 80bd 	blt.w	800a39e <lv_draw_letter+0x21e>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a224:	4639      	mov	r1, r7
 800a226:	4630      	mov	r0, r6
 800a228:	f00b ff6c 	bl	8016104 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800a22c:	2800      	cmp	r0, #0
 800a22e:	f000 80b6 	beq.w	800a39e <lv_draw_letter+0x21e>
    if(font_p->subpx) {
 800a232:	7b33      	ldrb	r3, [r6, #12]
 800a234:	079e      	lsls	r6, r3, #30
 800a236:	f040 80b2 	bne.w	800a39e <lv_draw_letter+0x21e>
    uint32_t bpp = g->bpp;
 800a23a:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800a23e:	fa0f f18b 	sxth.w	r1, fp
 800a242:	fa0f f289 	sxth.w	r2, r9
    if(bpp == 3) bpp = 4;
 800a246:	2b03      	cmp	r3, #3
 800a248:	f000 80b3 	beq.w	800a3b2 <lv_draw_letter+0x232>
    switch(bpp) {
 800a24c:	3b01      	subs	r3, #1
 800a24e:	2b07      	cmp	r3, #7
 800a250:	f200 80a5 	bhi.w	800a39e <lv_draw_letter+0x21e>
 800a254:	e8df f003 	tbb	[pc, r3]
 800a258:	ada3b304 	.word	0xada3b304
 800a25c:	a6a3a3a3 	.word	0xa6a3a3a3
    if(bpp == 3) bpp = 4;
 800a260:	2780      	movs	r7, #128	; 0x80
 800a262:	2601      	movs	r6, #1
 800a264:	2302      	movs	r3, #2
 800a266:	9708      	str	r7, [sp, #32]
 800a268:	4f9e      	ldr	r7, [pc, #632]	; (800a4e4 <lv_draw_letter+0x364>)
    if(opa < LV_OPA_MAX) {
 800a26a:	2cfc      	cmp	r4, #252	; 0xfc
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a26c:	9705      	str	r7, [sp, #20]
    if(opa < LV_OPA_MAX) {
 800a26e:	d811      	bhi.n	800a294 <lv_draw_letter+0x114>
        if(prev_opa != opa || prev_bpp != bpp) {
 800a270:	4f9d      	ldr	r7, [pc, #628]	; (800a4e8 <lv_draw_letter+0x368>)
 800a272:	f897 c000 	ldrb.w	ip, [r7]
 800a276:	45a4      	cmp	ip, r4
 800a278:	46bc      	mov	ip, r7
 800a27a:	f040 80a6 	bne.w	800a3ca <lv_draw_letter+0x24a>
 800a27e:	4f9b      	ldr	r7, [pc, #620]	; (800a4ec <lv_draw_letter+0x36c>)
 800a280:	683f      	ldr	r7, [r7, #0]
 800a282:	42b7      	cmp	r7, r6
 800a284:	f040 80a1 	bne.w	800a3ca <lv_draw_letter+0x24a>
        prev_bpp = bpp;
 800a288:	4b98      	ldr	r3, [pc, #608]	; (800a4ec <lv_draw_letter+0x36c>)
        prev_opa = opa;
 800a28a:	f88c 4000 	strb.w	r4, [ip]
        prev_bpp = bpp;
 800a28e:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
 800a290:	4b97      	ldr	r3, [pc, #604]	; (800a4f0 <lv_draw_letter+0x370>)
 800a292:	9305      	str	r3, [sp, #20]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a294:	f9b5 7000 	ldrsh.w	r7, [r5]
    int32_t box_w = g->box_w;
 800a298:	f8bd a056 	ldrh.w	sl, [sp, #86]	; 0x56
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a29c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a2a0:	42b9      	cmp	r1, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a2a2:	eb0a 0c01 	add.w	ip, sl, r1
    int32_t box_h = g->box_h;
 800a2a6:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a2aa:	bfb4      	ite	lt
 800a2ac:	1a7f      	sublt	r7, r7, r1
 800a2ae:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a2b0:	459c      	cmp	ip, r3
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800a2b2:	fb06 f40a 	mul.w	r4, r6, sl
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a2b6:	bfcc      	ite	gt
 800a2b8:	1a5b      	subgt	r3, r3, r1
 800a2ba:	f8cd a01c 	strle.w	sl, [sp, #28]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a2be:	eb08 0102 	add.w	r1, r8, r2
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a2c2:	bfc4      	itt	gt
 800a2c4:	3301      	addgt	r3, #1
 800a2c6:	9307      	strgt	r3, [sp, #28]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800a2c8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	bfb4      	ite	lt
 800a2d0:	1a9b      	sublt	r3, r3, r2
 800a2d2:	2300      	movge	r3, #0
 800a2d4:	9306      	str	r3, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a2d6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a2da:	4299      	cmp	r1, r3
 800a2dc:	bfc8      	it	gt
 800a2de:	1a9b      	subgt	r3, r3, r2
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a2e0:	9a06      	ldr	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a2e2:	bfd2      	itee	le
 800a2e4:	f8cd 8030 	strle.w	r8, [sp, #48]	; 0x30
 800a2e8:	3301      	addgt	r3, #1
 800a2ea:	930c      	strgt	r3, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a2ec:	fb07 f306 	mul.w	r3, r7, r6
 800a2f0:	fb02 3404 	mla	r4, r2, r4, r3
    map_p += bit_ofs >> 3;
 800a2f4:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800a2f8:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 800a2fc:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a2fe:	f7fd fe53 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 800a302:	f00c f8ff 	bl	8016504 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a306:	fb08 f30a 	mul.w	r3, r8, sl
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a30a:	44ba      	add	sl, r7
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a30c:	4283      	cmp	r3, r0
 800a30e:	bfa8      	it	ge
 800a310:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a312:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a314:	930a      	str	r3, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a316:	f00d f9e7 	bl	80176e8 <lv_mem_buf_get>
    fill_area.x2 = col_end  + pos_x - 1;
 800a31a:	9a07      	ldr	r2, [sp, #28]
    fill_area.x1 = col_start + pos_x;
 800a31c:	fa1f f38b 	uxth.w	r3, fp
 800a320:	fa17 fb8b 	uxtah	fp, r7, fp
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a324:	4680      	mov	r8, r0
    fill_area.x2 = col_end  + pos_x - 1;
 800a326:	3b01      	subs	r3, #1
    fill_area.x1 = col_start + pos_x;
 800a328:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
    fill_area.x2 = col_end  + pos_x - 1;
 800a32c:	4413      	add	r3, r2
 800a32e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    fill_area.y1 = row_start + pos_y;
 800a332:	9b06      	ldr	r3, [sp, #24]
 800a334:	4499      	add	r9, r3
 800a336:	fa0f f989 	sxth.w	r9, r9
 800a33a:	f8ad 904e 	strh.w	r9, [sp, #78]	; 0x4e
    fill_area.y2 = fill_area.y1;
 800a33e:	f8ad 9052 	strh.w	r9, [sp, #82]	; 0x52
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a342:	f001 fd15 	bl	800bd70 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 800a346:	f1c6 0308 	rsb	r3, r6, #8
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a34a:	900f      	str	r0, [sp, #60]	; 0x3c
    uint32_t col_bit_max = 8 - bpp;
 800a34c:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a34e:	9b07      	ldr	r3, [sp, #28]
 800a350:	ebaa 0a03 	sub.w	sl, sl, r3
 800a354:	fb06 f30a 	mul.w	r3, r6, sl
    int32_t mask_p = 0;
 800a358:	f04f 0a00 	mov.w	sl, #0
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a35c:	9310      	str	r3, [sp, #64]	; 0x40
    for(row = row_start ; row < row_end; row++) {
 800a35e:	9b07      	ldr	r3, [sp, #28]
 800a360:	1bdb      	subs	r3, r3, r7
 800a362:	930e      	str	r3, [sp, #56]	; 0x38
 800a364:	9b06      	ldr	r3, [sp, #24]
 800a366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a368:	4293      	cmp	r3, r2
 800a36a:	db41      	blt.n	800a3f0 <lv_draw_letter+0x270>
    if(fill_area.y1 != fill_area.y2) {
 800a36c:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 800a370:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800a374:	429a      	cmp	r2, r3
 800a376:	d00f      	beq.n	800a398 <lv_draw_letter+0x218>
        fill_area.y2--;
 800a378:	3b01      	subs	r3, #1
        _lv_blend_fill(clip_area, &fill_area,
 800a37a:	22ff      	movs	r2, #255	; 0xff
 800a37c:	a913      	add	r1, sp, #76	; 0x4c
 800a37e:	4628      	mov	r0, r5
        fill_area.y2--;
 800a380:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        _lv_blend_fill(clip_area, &fill_area,
 800a384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a386:	9302      	str	r3, [sp, #8]
 800a388:	2302      	movs	r3, #2
 800a38a:	e9cd 3200 	strd	r3, r2, [sp]
 800a38e:	4643      	mov	r3, r8
 800a390:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800a394:	f7fe fd5c 	bl	8008e50 <_lv_blend_fill>
    lv_mem_buf_release(mask_buf);
 800a398:	4640      	mov	r0, r8
 800a39a:	f00d f801 	bl	80173a0 <lv_mem_buf_release>
}
 800a39e:	b019      	add	sp, #100	; 0x64
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 800a3a4:	27ff      	movs	r7, #255	; 0xff
            break;       /*No opa table, pixel value will be used directly*/
 800a3a6:	2608      	movs	r6, #8
            shades = 256;
 800a3a8:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 800a3ac:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800a3ae:	4f51      	ldr	r7, [pc, #324]	; (800a4f4 <lv_draw_letter+0x374>)
 800a3b0:	e75b      	b.n	800a26a <lv_draw_letter+0xea>
            bitmask_init  = 0xF0;
 800a3b2:	27f0      	movs	r7, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800a3b4:	2604      	movs	r6, #4
            shades = 16;
 800a3b6:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 800a3b8:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800a3ba:	4f4f      	ldr	r7, [pc, #316]	; (800a4f8 <lv_draw_letter+0x378>)
 800a3bc:	e755      	b.n	800a26a <lv_draw_letter+0xea>
            bitmask_init  = 0xC0;
 800a3be:	27c0      	movs	r7, #192	; 0xc0
    if(bpp == 3) bpp = 4;
 800a3c0:	2602      	movs	r6, #2
            shades = 4;
 800a3c2:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
 800a3c4:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a3c6:	4f4d      	ldr	r7, [pc, #308]	; (800a4fc <lv_draw_letter+0x37c>)
 800a3c8:	e74f      	b.n	800a26a <lv_draw_letter+0xea>
 800a3ca:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a3ce:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a4f0 <lv_draw_letter+0x370>
 800a3d2:	4473      	add	r3, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a3d4:	f81e 7b01 	ldrb.w	r7, [lr], #1
 800a3d8:	2fff      	cmp	r7, #255	; 0xff
 800a3da:	bf16      	itet	ne
 800a3dc:	fb17 f704 	smulbbne	r7, r7, r4
 800a3e0:	4627      	moveq	r7, r4
 800a3e2:	f3c7 2707 	ubfxne	r7, r7, #8, #8
            for(i = 0; i < shades; i++) {
 800a3e6:	4573      	cmp	r3, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a3e8:	f808 7b01 	strb.w	r7, [r8], #1
            for(i = 0; i < shades; i++) {
 800a3ec:	d1f2      	bne.n	800a3d4 <lv_draw_letter+0x254>
 800a3ee:	e74b      	b.n	800a288 <lv_draw_letter+0x108>
        bitmask = bitmask_init >> col_bit;
 800a3f0:	9b08      	ldr	r3, [sp, #32]
 800a3f2:	eb08 0b0a 	add.w	fp, r8, sl
        for(col = col_start; col < col_end; col++) {
 800a3f6:	46be      	mov	lr, r7
 800a3f8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 800a3fc:	fa23 f204 	lsr.w	r2, r3, r4
        for(col = col_start; col < col_end; col++) {
 800a400:	4659      	mov	r1, fp
 800a402:	9b07      	ldr	r3, [sp, #28]
 800a404:	4573      	cmp	r3, lr
 800a406:	dc37      	bgt.n	800a478 <lv_draw_letter+0x2f8>
 800a408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a40a:	9a07      	ldr	r2, [sp, #28]
 800a40c:	4297      	cmp	r7, r2
 800a40e:	bfc8      	it	gt
 800a410:	2300      	movgt	r3, #0
 800a412:	4699      	mov	r9, r3
 800a414:	449a      	add	sl, r3
        if(other_mask_cnt) {
 800a416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a418:	b1b3      	cbz	r3, 800a448 <lv_draw_letter+0x2c8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a41a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800a41e:	4658      	mov	r0, fp
 800a420:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 800a424:	3301      	adds	r3, #1
 800a426:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	b21b      	sxth	r3, r3
 800a42e:	f001 fc55 	bl	800bcdc <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a432:	b948      	cbnz	r0, 800a448 <lv_draw_letter+0x2c8>
 800a434:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
                lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800a438:	4658      	mov	r0, fp
 800a43a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a43e:	3101      	adds	r1, #1
 800a440:	1ac9      	subs	r1, r1, r3
 800a442:	b209      	sxth	r1, r1
 800a444:	f00d f99e 	bl	8017784 <lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a44a:	4499      	add	r9, r3
 800a44c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a44e:	4499      	add	r9, r3
 800a450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a452:	454b      	cmp	r3, r9
 800a454:	d92e      	bls.n	800a4b4 <lv_draw_letter+0x334>
            fill_area.y2 ++;
 800a456:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800a45a:	3301      	adds	r3, #1
 800a45c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        col_bit += col_bit_row_ofs;
 800a460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a462:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800a464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a466:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
        col_bit = col_bit & 0x7;
 800a46a:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800a46e:	9309      	str	r3, [sp, #36]	; 0x24
    for(row = row_start ; row < row_end; row++) {
 800a470:	9b06      	ldr	r3, [sp, #24]
 800a472:	3301      	adds	r3, #1
 800a474:	9306      	str	r3, [sp, #24]
 800a476:	e775      	b.n	800a364 <lv_draw_letter+0x1e4>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a478:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800a47a:	f10e 0e01 	add.w	lr, lr, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a47e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a480:	3101      	adds	r1, #1
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	eba0 0c04 	sub.w	ip, r0, r4
 800a488:	4013      	ands	r3, r2
 800a48a:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
 800a48e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800a492:	bf1c      	itt	ne
 800a494:	9805      	ldrne	r0, [sp, #20]
 800a496:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
 800a498:	f801 3c01 	strb.w	r3, [r1, #-1]
            if(col_bit < col_bit_max) {
 800a49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a49e:	42a3      	cmp	r3, r4
                map_p++;
 800a4a0:	bf93      	iteet	ls
 800a4a2:	9b09      	ldrls	r3, [sp, #36]	; 0x24
                col_bit += bpp;
 800a4a4:	19a4      	addhi	r4, r4, r6
                bitmask = bitmask >> bpp;
 800a4a6:	40f2      	lsrhi	r2, r6
                bitmask = bitmask_init;
 800a4a8:	9a08      	ldrls	r2, [sp, #32]
                map_p++;
 800a4aa:	bf9e      	ittt	ls
 800a4ac:	3301      	addls	r3, #1
                col_bit = 0;
 800a4ae:	2400      	movls	r4, #0
                map_p++;
 800a4b0:	9309      	strls	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800a4b2:	e7a6      	b.n	800a402 <lv_draw_letter+0x282>
            _lv_blend_fill(clip_area, &fill_area,
 800a4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b6:	21ff      	movs	r1, #255	; 0xff
 800a4b8:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800a4bc:	4628      	mov	r0, r5
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	2302      	movs	r3, #2
            mask_p = 0;
 800a4c2:	f04f 0a00 	mov.w	sl, #0
            _lv_blend_fill(clip_area, &fill_area,
 800a4c6:	e9cd 3100 	strd	r3, r1, [sp]
 800a4ca:	4643      	mov	r3, r8
 800a4cc:	a913      	add	r1, sp, #76	; 0x4c
 800a4ce:	f7fe fcbf 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800a4d2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area.y2 = fill_area.y1;
 800a4de:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            mask_p = 0;
 800a4e2:	e7bd      	b.n	800a460 <lv_draw_letter+0x2e0>
 800a4e4:	08025af7 	.word	0x08025af7
 800a4e8:	20003174 	.word	0x20003174
 800a4ec:	20003170 	.word	0x20003170
 800a4f0:	20003070 	.word	0x20003070
 800a4f4:	08025b0d 	.word	0x08025b0d
 800a4f8:	08025afd 	.word	0x08025afd
 800a4fc:	08025af9 	.word	0x08025af9

0800a500 <lv_draw_label>:
{
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	469b      	mov	fp, r3
 800a506:	2300      	movs	r3, #0
 800a508:	4605      	mov	r5, r0
 800a50a:	468a      	mov	sl, r1
 800a50c:	4614      	mov	r4, r2
 800a50e:	ed2d 8b02 	vpush	{d8}
 800a512:	b0ab      	sub	sp, #172	; 0xac
 800a514:	930b      	str	r3, [sp, #44]	; 0x2c
    if(dsc->opa <= LV_OPA_MIN) return;
 800a516:	7e93      	ldrb	r3, [r2, #26]
{
 800a518:	f8dd 90d8 	ldr.w	r9, [sp, #216]	; 0xd8
    if(dsc->opa <= LV_OPA_MIN) return;
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	f240 80a7 	bls.w	800a670 <lv_draw_label+0x170>
    if (txt == NULL || txt[0] == '\0')
 800a522:	f1bb 0f00 	cmp.w	fp, #0
 800a526:	f000 80a3 	beq.w	800a670 <lv_draw_label+0x170>
 800a52a:	f89b 3000 	ldrb.w	r3, [fp]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 809e 	beq.w	800a670 <lv_draw_label+0x170>
    const lv_font_t * font = dsc->font;
 800a534:	f8d2 8000 	ldr.w	r8, [r2]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800a538:	460a      	mov	r2, r1
 800a53a:	4601      	mov	r1, r0
 800a53c:	a816      	add	r0, sp, #88	; 0x58
 800a53e:	f00c fad2 	bl	8016ae6 <_lv_area_intersect>
    if(!clip_ok) return;
 800a542:	2800      	cmp	r0, #0
 800a544:	f000 8094 	beq.w	800a670 <lv_draw_label+0x170>
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800a548:	7f23      	ldrb	r3, [r4, #28]
 800a54a:	0799      	lsls	r1, r3, #30
 800a54c:	f100 8095 	bmi.w	800a67a <lv_draw_label+0x17a>
 800a550:	88ab      	ldrh	r3, [r5, #4]
 800a552:	882a      	ldrh	r2, [r5, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 800a558:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 800a55a:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
    pos.y = coords->y1;
 800a55e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height_font = lv_font_get_line_height(font);
 800a562:	9206      	str	r2, [sp, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 800a564:	9906      	ldr	r1, [sp, #24]
 800a566:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800a56a:	440a      	add	r2, r1
    y_ofs = dsc->ofs_y;
 800a56c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 800a570:	9208      	str	r2, [sp, #32]
    pos.x = coords->x1;
 800a572:	882a      	ldrh	r2, [r5, #0]
 800a574:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    x_ofs = dsc->ofs_x;
 800a578:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800a57c:	920e      	str	r2, [sp, #56]	; 0x38
    pos.y += y_ofs;
 800a57e:	1842      	adds	r2, r0, r1
 800a580:	b292      	uxth	r2, r2
 800a582:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800a586:	f1b9 0f00 	cmp.w	r9, #0
 800a58a:	f040 8087 	bne.w	800a69c <lv_draw_label+0x19c>
    uint32_t line_start     = 0;
 800a58e:	2600      	movs	r6, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a590:	b21b      	sxth	r3, r3
 800a592:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800a596:	4641      	mov	r1, r8
 800a598:	eb0b 0006 	add.w	r0, fp, r6
 800a59c:	ee08 3a10 	vmov	s16, r3
 800a5a0:	7f23      	ldrb	r3, [r4, #28]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	ee18 3a10 	vmov	r3, s16
 800a5a8:	f00e fc72 	bl	8018e90 <_lv_txt_get_next_line>
 800a5ac:	1987      	adds	r7, r0, r6
    while(pos.y + line_height_font < mask->y1) {
 800a5ae:	9a06      	ldr	r2, [sp, #24]
 800a5b0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800a5b4:	4413      	add	r3, r2
 800a5b6:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f2c0 808f 	blt.w	800a6de <lv_draw_label+0x1de>
    if(dsc->align == LV_TEXT_ALIGN_CENTER) {
 800a5c0:	7f63      	ldrb	r3, [r4, #29]
 800a5c2:	eb0b 0006 	add.w	r0, fp, r6
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	f040 80b4 	bne.w	800a738 <lv_draw_label+0x238>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a5d0:	7f23      	ldrb	r3, [r4, #28]
 800a5d2:	4642      	mov	r2, r8
 800a5d4:	1bb9      	subs	r1, r7, r6
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a5dc:	f00e fda0 	bl	8019120 <lv_txt_get_width>
 800a5e0:	88ab      	ldrh	r3, [r5, #4]
 800a5e2:	882a      	ldrh	r2, [r5, #0]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a5e8:	b21b      	sxth	r3, r3
 800a5ea:	1a18      	subs	r0, r3, r0
 800a5ec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a5f0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800a5f4:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
 800a5f8:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_opa_t opa = dsc->opa;
 800a5fc:	7ea3      	ldrb	r3, [r4, #26]
 800a5fe:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t sel_start = dsc->sel_start;
 800a600:	6863      	ldr	r3, [r4, #4]
 800a602:	9305      	str	r3, [sp, #20]
    uint32_t sel_end = dsc->sel_end;
 800a604:	68a3      	ldr	r3, [r4, #8]
 800a606:	9306      	str	r3, [sp, #24]
    if(sel_start > sel_end) {
 800a608:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800a60c:	4293      	cmp	r3, r2
 800a60e:	bf88      	it	hi
 800a610:	e9cd 2305 	strdhi	r2, r3, [sp, #20]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800a614:	7f63      	ldrb	r3, [r4, #29]
 800a616:	f013 0f0c 	tst.w	r3, #12
 800a61a:	d017      	beq.n	800a64c <lv_draw_label+0x14c>
        lv_draw_line_dsc_init(&line_dsc);
 800a61c:	a81a      	add	r0, sp, #104	; 0x68
 800a61e:	f000 fa11 	bl	800aa44 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800a622:	89a3      	ldrh	r3, [r4, #12]
        line_dsc.blend_mode = dsc->blend_mode;
 800a624:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
        line_dsc.color = dsc->color;
 800a628:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800a62c:	f998 300e 	ldrsb.w	r3, [r8, #14]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf08      	it	eq
 800a634:	2301      	moveq	r3, #1
 800a636:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        line_dsc.opa = dsc->opa;
 800a63a:	7ea3      	ldrb	r3, [r4, #26]
 800a63c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        line_dsc.blend_mode = dsc->blend_mode;
 800a640:	7f63      	ldrb	r3, [r4, #29]
 800a642:	095b      	lsrs	r3, r3, #5
 800a644:	f363 0201 	bfi	r2, r3, #0, #2
 800a648:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800a64c:	a81d      	add	r0, sp, #116	; 0x74
 800a64e:	f002 f833 	bl	800c6b8 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800a652:	8a23      	ldrh	r3, [r4, #16]
 800a654:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    int32_t pos_x_start = pos.x;
 800a658:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800a65c:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t par_start = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	930a      	str	r3, [sp, #40]	; 0x28
    while(txt[line_start] != '\0') {
 800a662:	eb0b 0306 	add.w	r3, fp, r6
 800a666:	930d      	str	r3, [sp, #52]	; 0x34
 800a668:	f81b 3006 	ldrb.w	r3, [fp, r6]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d178      	bne.n	800a762 <lv_draw_label+0x262>
}
 800a670:	b02b      	add	sp, #172	; 0xac
 800a672:	ecbd 8b02 	vpop	{d8}
 800a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800a67a:	9302      	str	r3, [sp, #8]
 800a67c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a680:	6822      	ldr	r2, [r4, #0]
 800a682:	4659      	mov	r1, fp
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	a81d      	add	r0, sp, #116	; 0x74
 800a688:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a692:	f00e fd88 	bl	80191a6 <lv_txt_get_size>
        w = p.x;
 800a696:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800a69a:	e75e      	b.n	800a55a <lv_draw_label+0x5a>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800a69c:	2900      	cmp	r1, #0
 800a69e:	f47f af76 	bne.w	800a58e <lv_draw_label+0x8e>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f6bf af73 	bge.w	800a58e <lv_draw_label+0x8e>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800a6a8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a6ac:	1a09      	subs	r1, r1, r0
 800a6ae:	9808      	ldr	r0, [sp, #32]
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 800a6b6:	bfb8      	it	lt
 800a6b8:	4249      	neglt	r1, r1
 800a6ba:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 800a6be:	bfc4      	itt	gt
 800a6c0:	f04f 31ff 	movgt.w	r1, #4294967295
 800a6c4:	f8c9 1000 	strgt.w	r1, [r9]
        last_line_start = hint->line_start;
 800a6c8:	f8d9 6000 	ldr.w	r6, [r9]
    if(hint && last_line_start >= 0) {
 800a6cc:	2e00      	cmp	r6, #0
 800a6ce:	f6ff af5e 	blt.w	800a58e <lv_draw_label+0x8e>
        pos.y += hint->y;
 800a6d2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6d6:	440a      	add	r2, r1
 800a6d8:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800a6dc:	e758      	b.n	800a590 <lv_draw_label+0x90>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a6de:	eb0b 0307 	add.w	r3, fp, r7
 800a6e2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	7f23      	ldrb	r3, [r4, #28]
 800a6ec:	9805      	ldr	r0, [sp, #20]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	ee18 3a10 	vmov	r3, s16
 800a6f4:	f00e fbcc 	bl	8018e90 <_lv_txt_get_next_line>
        pos.y += line_height;
 800a6f8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800a6fc:	9a08      	ldr	r2, [sp, #32]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a6fe:	4438      	add	r0, r7
        pos.y += line_height;
 800a700:	4413      	add	r3, r2
 800a702:	b21b      	sxth	r3, r3
 800a704:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800a708:	f1b9 0f00 	cmp.w	r9, #0
 800a70c:	d00d      	beq.n	800a72a <lv_draw_label+0x22a>
 800a70e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800a712:	db0a      	blt.n	800a72a <lv_draw_label+0x22a>
 800a714:	f8d9 2000 	ldr.w	r2, [r9]
 800a718:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
 800a71a:	bfbf      	itttt	lt
 800a71c:	f9b5 2002 	ldrshlt.w	r2, [r5, #2]
            hint->line_start = line_start;
 800a720:	f8c9 7000 	strlt.w	r7, [r9]
            hint->y          = pos.y - coords->y1;
 800a724:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
 800a726:	e9c9 3201 	strdlt	r3, r2, [r9, #4]
        if(txt[line_start] == '\0') return;
 800a72a:	9b05      	ldr	r3, [sp, #20]
 800a72c:	463e      	mov	r6, r7
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d09d      	beq.n	800a670 <lv_draw_label+0x170>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a734:	4607      	mov	r7, r0
 800a736:	e73a      	b.n	800a5ae <lv_draw_label+0xae>
    else if(dsc->align == LV_TEXT_ALIGN_RIGHT) {
 800a738:	2b03      	cmp	r3, #3
 800a73a:	f47f af5f 	bne.w	800a5fc <lv_draw_label+0xfc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a73e:	7f23      	ldrb	r3, [r4, #28]
 800a740:	4642      	mov	r2, r8
 800a742:	1bb9      	subs	r1, r7, r6
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a74a:	f00e fce9 	bl	8019120 <lv_txt_get_width>
 800a74e:	88ab      	ldrh	r3, [r5, #4]
 800a750:	882a      	ldrh	r2, [r5, #0]
 800a752:	3301      	adds	r3, #1
 800a754:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800a756:	b21b      	sxth	r3, r3
 800a758:	1a18      	subs	r0, r3, r0
 800a75a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a75e:	4418      	add	r0, r3
 800a760:	e74a      	b.n	800a5f8 <lv_draw_label+0xf8>
        pos.x += x_ofs;
 800a762:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a768:	4413      	add	r3, r2
 800a76a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        i         = 0;
 800a76e:	2300      	movs	r3, #0
        cmd_state = CMD_STATE_WAIT;
 800a770:	4699      	mov	r9, r3
        i         = 0;
 800a772:	9313      	str	r3, [sp, #76]	; 0x4c
        while(i < line_end - line_start) {
 800a774:	1bbb      	subs	r3, r7, r6
 800a776:	9310      	str	r3, [sp, #64]	; 0x40
 800a778:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a77a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a77c:	428b      	cmp	r3, r1
 800a77e:	f200 8082 	bhi.w	800a886 <lv_draw_label+0x386>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800a782:	7f63      	ldrb	r3, [r4, #29]
 800a784:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800a788:	079a      	lsls	r2, r3, #30
 800a78a:	d520      	bpl.n	800a7ce <lv_draw_label+0x2ce>
            p1.x = pos_x_start;
 800a78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a78e:	a918      	add	r1, sp, #96	; 0x60
 800a790:	a815      	add	r0, sp, #84	; 0x54
            p1.x = pos_x_start;
 800a792:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a796:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800a79a:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 800a79e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800a7a2:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800a7ac:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800a7b0:	eb03 0362 	add.w	r3, r3, r2, asr #1
            p2.x = pos.x;
 800a7b4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a7b8:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800a7ba:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a7be:	4652      	mov	r2, sl
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800a7c0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.y = p1.y;
 800a7c4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a7c8:	ab1a      	add	r3, sp, #104	; 0x68
 800a7ca:	f000 f947 	bl	800aa5c <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800a7ce:	7f63      	ldrb	r3, [r4, #29]
 800a7d0:	075b      	lsls	r3, r3, #29
 800a7d2:	d51b      	bpl.n	800a80c <lv_draw_label+0x30c>
            p1.x = pos_x_start;
 800a7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a7d6:	a815      	add	r0, sp, #84	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a7d8:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 800a7da:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a7de:	8911      	ldrh	r1, [r2, #8]
 800a7e0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800a7e4:	8952      	ldrh	r2, [r2, #10]
 800a7e6:	440b      	add	r3, r1
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a7e8:	a918      	add	r1, sp, #96	; 0x60
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	f998 200d 	ldrsb.w	r2, [r8, #13]
 800a7f0:	1a9b      	subs	r3, r3, r2
            p2.x = pos.x;
 800a7f2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a7f6:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800a7f8:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a7fc:	4652      	mov	r2, sl
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800a7fe:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.y = p1.y;
 800a802:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800a806:	ab1a      	add	r3, sp, #104	; 0x68
 800a808:	f000 f928 	bl	800aa5c <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a80c:	7f23      	ldrb	r3, [r4, #28]
 800a80e:	eb0b 0607 	add.w	r6, fp, r7
 800a812:	4641      	mov	r1, r8
 800a814:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4630      	mov	r0, r6
 800a81c:	ee18 3a10 	vmov	r3, s16
 800a820:	f00e fb36 	bl	8018e90 <_lv_txt_get_next_line>
        pos.x = coords->x1;
 800a824:	882b      	ldrh	r3, [r5, #0]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a826:	4601      	mov	r1, r0
 800a828:	eb07 0900 	add.w	r9, r7, r0
        pos.x = coords->x1;
 800a82c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(dsc->align == LV_TEXT_ALIGN_CENTER) {
 800a830:	7f63      	ldrb	r3, [r4, #29]
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b02      	cmp	r3, #2
 800a838:	f040 80ed 	bne.w	800aa16 <lv_draw_label+0x516>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800a83c:	7f23      	ldrb	r3, [r4, #28]
 800a83e:	4642      	mov	r2, r8
 800a840:	4630      	mov	r0, r6
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a848:	f00e fc6a 	bl	8019120 <lv_txt_get_width>
 800a84c:	88ab      	ldrh	r3, [r5, #4]
 800a84e:	882a      	ldrh	r2, [r5, #0]
 800a850:	3301      	adds	r3, #1
 800a852:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800a854:	b21b      	sxth	r3, r3
 800a856:	1a18      	subs	r0, r3, r0
 800a858:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a85c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800a860:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 800a864:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        pos.y += line_height;
 800a868:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
        line_start = line_end;
 800a86c:	463e      	mov	r6, r7
        pos.y += line_height;
 800a86e:	9a08      	ldr	r2, [sp, #32]
 800a870:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 800a872:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        pos.y += line_height;
 800a876:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 800a878:	429a      	cmp	r2, r3
        pos.y += line_height;
 800a87a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(pos.y > mask->y2) return;
 800a87e:	f6ff aef7 	blt.w	800a670 <lv_draw_label+0x170>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800a882:	464f      	mov	r7, r9
 800a884:	e6ed      	b.n	800a662 <lv_draw_label+0x162>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a886:	9b05      	ldr	r3, [sp, #20]
 800a888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d01c      	beq.n	800a8ca <lv_draw_label+0x3ca>
 800a890:	9b06      	ldr	r3, [sp, #24]
 800a892:	4293      	cmp	r3, r2
 800a894:	d019      	beq.n	800a8ca <lv_draw_label+0x3ca>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800a896:	4b6a      	ldr	r3, [pc, #424]	; (800aa40 <lv_draw_label+0x540>)
 800a898:	4431      	add	r1, r6
 800a89a:	4658      	mov	r0, fp
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4798      	blx	r3
 800a8a0:	9007      	str	r0, [sp, #28]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800a8a2:	ab13      	add	r3, sp, #76	; 0x4c
 800a8a4:	aa15      	add	r2, sp, #84	; 0x54
 800a8a6:	a914      	add	r1, sp, #80	; 0x50
 800a8a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a8aa:	f00e fc1f 	bl	80190ec <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800a8ae:	7f23      	ldrb	r3, [r4, #28]
 800a8b0:	f013 0301 	ands.w	r3, r3, #1
 800a8b4:	d05c      	beq.n	800a970 <lv_draw_label+0x470>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800a8b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8b8:	2a23      	cmp	r2, #35	; 0x23
 800a8ba:	d112      	bne.n	800a8e2 <lv_draw_label+0x3e2>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800a8bc:	f1b9 0f00 	cmp.w	r9, #0
 800a8c0:	d106      	bne.n	800a8d0 <lv_draw_label+0x3d0>
                        par_start = i;
 800a8c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_PAR;
 800a8c4:	4699      	mov	r9, r3
                        par_start = i;
 800a8c6:	920a      	str	r2, [sp, #40]	; 0x28
                        continue;
 800a8c8:	e756      	b.n	800a778 <lv_draw_label+0x278>
            uint32_t logical_char_pos = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9307      	str	r3, [sp, #28]
 800a8ce:	e7e8      	b.n	800a8a2 <lv_draw_label+0x3a2>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800a8d0:	f1b9 0f01 	cmp.w	r9, #1
 800a8d4:	d052      	beq.n	800a97c <lv_draw_label+0x47c>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800a8d6:	f1b9 0f02 	cmp.w	r9, #2
 800a8da:	d151      	bne.n	800a980 <lv_draw_label+0x480>
                        cmd_state = CMD_STATE_WAIT;
 800a8dc:	f04f 0900 	mov.w	r9, #0
 800a8e0:	e74a      	b.n	800a778 <lv_draw_label+0x278>
                if(cmd_state == CMD_STATE_PAR) {
 800a8e2:	f1b9 0f01 	cmp.w	r9, #1
 800a8e6:	d143      	bne.n	800a970 <lv_draw_label+0x470>
                    if(letter == ' ') {
 800a8e8:	2a20      	cmp	r2, #32
 800a8ea:	f47f af45 	bne.w	800a778 <lv_draw_label+0x278>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800a8ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	2b07      	cmp	r3, #7
 800a8f6:	d139      	bne.n	800a96c <lv_draw_label+0x46c>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800a8f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 800a8fa:	a918      	add	r1, sp, #96	; 0x60
 800a8fc:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800a8fe:	1e5a      	subs	r2, r3, #1
 800a900:	3305      	adds	r3, #5
        *d8 = *s8;
 800a902:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    while(len) {
 800a906:	4293      	cmp	r3, r2
        *d8 = *s8;
 800a908:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
 800a90c:	d1f9      	bne.n	800a902 <lv_draw_label+0x402>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800a90e:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800a912:	f7ff fc0b 	bl	800a12c <hex_char_to_num>
 800a916:	4602      	mov	r2, r0
 800a918:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 800a91c:	f7ff fc06 	bl	800a12c <hex_char_to_num>
 800a920:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800a924:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
 800a928:	f7ff fc00 	bl	800a12c <hex_char_to_num>
 800a92c:	4601      	mov	r1, r0
 800a92e:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
 800a932:	f7ff fbfb 	bl	800a12c <hex_char_to_num>
 800a936:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800a93a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800a93e:	f7ff fbf5 	bl	800a12c <hex_char_to_num>
 800a942:	4681      	mov	r9, r0
 800a944:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 800a948:	f7ff fbf0 	bl	800a12c <hex_char_to_num>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800a94c:	f3c1 0185 	ubfx	r1, r1, #2, #6
 800a950:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800a954:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800a958:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800a95c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800a960:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800a964:	f04f 0902 	mov.w	r9, #2
                            recolor.full = dsc->color.full;
 800a968:	930b      	str	r3, [sp, #44]	; 0x2c
 800a96a:	e705      	b.n	800a778 <lv_draw_label+0x278>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	e7f9      	b.n	800a964 <lv_draw_label+0x464>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800a970:	f1b9 0f02 	cmp.w	r9, #2
 800a974:	d104      	bne.n	800a980 <lv_draw_label+0x480>
 800a976:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800a97a:	e002      	b.n	800a982 <lv_draw_label+0x482>
                        cmd_state = CMD_STATE_WAIT;
 800a97c:	f04f 0900 	mov.w	r9, #0
            lv_color_t color = dsc->color;
 800a980:	89a3      	ldrh	r3, [r4, #12]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a982:	4640      	mov	r0, r8
 800a984:	9311      	str	r3, [sp, #68]	; 0x44
 800a986:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800a98a:	f00b fbc3 	bl	8016114 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a98e:	9b05      	ldr	r3, [sp, #20]
 800a990:	f64f 71ff 	movw	r1, #65535	; 0xffff
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800a994:	9009      	str	r0, [sp, #36]	; 0x24
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800a996:	428b      	cmp	r3, r1
 800a998:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a99a:	d022      	beq.n	800a9e2 <lv_draw_label+0x4e2>
 800a99c:	9a06      	ldr	r2, [sp, #24]
 800a99e:	428a      	cmp	r2, r1
 800a9a0:	d01f      	beq.n	800a9e2 <lv_draw_label+0x4e2>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800a9a2:	9a05      	ldr	r2, [sp, #20]
 800a9a4:	9907      	ldr	r1, [sp, #28]
 800a9a6:	428a      	cmp	r2, r1
 800a9a8:	d81b      	bhi.n	800a9e2 <lv_draw_label+0x4e2>
 800a9aa:	9a06      	ldr	r2, [sp, #24]
 800a9ac:	428a      	cmp	r2, r1
 800a9ae:	d918      	bls.n	800a9e2 <lv_draw_label+0x4e2>
                    sel_coords.x1 = pos.x;
 800a9b0:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a9b4:	8aa1      	ldrh	r1, [r4, #20]
                    sel_coords.x1 = pos.x;
 800a9b6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a9ba:	3b01      	subs	r3, #1
                    sel_coords.y1 = pos.y;
 800a9bc:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a9c0:	440b      	add	r3, r1
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800a9c2:	4651      	mov	r1, sl
                    sel_coords.y1 = pos.y;
 800a9c4:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.y2 = pos.y + line_height - 1;
 800a9c8:	3a01      	subs	r2, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a9ca:	4403      	add	r3, r0
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800a9cc:	a818      	add	r0, sp, #96	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800a9ce:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
 800a9d2:	9b08      	ldr	r3, [sp, #32]
 800a9d4:	441a      	add	r2, r3
 800a9d6:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800a9da:	aa1d      	add	r2, sp, #116	; 0x74
 800a9dc:	f001 fe8e 	bl	800c6fc <lv_draw_rect>
                    color = dsc->sel_color;
 800a9e0:	89e3      	ldrh	r3, [r4, #14]
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800a9e2:	7f62      	ldrb	r2, [r4, #29]
 800a9e4:	4651      	mov	r1, sl
 800a9e6:	f8ad 3000 	strh.w	r3, [sp]
 800a9ea:	a812      	add	r0, sp, #72	; 0x48
 800a9ec:	0952      	lsrs	r2, r2, #5
 800a9ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9f0:	9202      	str	r2, [sp, #8]
 800a9f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9f4:	9201      	str	r2, [sp, #4]
 800a9f6:	4642      	mov	r2, r8
 800a9f8:	f7ff fbc2 	bl	800a180 <lv_draw_letter>
            if(letter_w > 0) {
 800a9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f43f aeba 	beq.w	800a778 <lv_draw_label+0x278>
                pos.x += letter_w + dsc->letter_space;
 800aa04:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800aa08:	8aa3      	ldrh	r3, [r4, #20]
 800aa0a:	4418      	add	r0, r3
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	4403      	add	r3, r0
 800aa10:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800aa14:	e6b0      	b.n	800a778 <lv_draw_label+0x278>
        else if(dsc->align == LV_TEXT_ALIGN_RIGHT) {
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	f47f af26 	bne.w	800a868 <lv_draw_label+0x368>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800aa1c:	7f23      	ldrb	r3, [r4, #28]
 800aa1e:	4642      	mov	r2, r8
 800aa20:	4630      	mov	r0, r6
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800aa28:	f00e fb7a 	bl	8019120 <lv_txt_get_width>
 800aa2c:	88ab      	ldrh	r3, [r5, #4]
 800aa2e:	882a      	ldrh	r2, [r5, #0]
 800aa30:	3301      	adds	r3, #1
 800aa32:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800aa34:	b21b      	sxth	r3, r3
 800aa36:	1a18      	subs	r0, r3, r0
 800aa38:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800aa3c:	4418      	add	r0, r3
 800aa3e:	e711      	b.n	800a864 <lv_draw_label+0x364>
 800aa40:	2000003c 	.word	0x2000003c

0800aa44 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800aa44:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800aa46:	210a      	movs	r1, #10
{
 800aa48:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800aa4a:	f00c fe9b 	bl	8017784 <lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 800aa4e:	23ff      	movs	r3, #255	; 0xff
 800aa50:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800aa52:	2300      	movs	r3, #0
 800aa54:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 800aa56:	2301      	movs	r3, #1
 800aa58:	8063      	strh	r3, [r4, #2]
}
 800aa5a:	bd10      	pop	{r4, pc}

0800aa5c <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	469b      	mov	fp, r3
    if(dsc->width == 0) return;
 800aa62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
 800aa66:	ed2d 8b04 	vpush	{d8-d9}
 800aa6a:	b0bf      	sub	sp, #252	; 0xfc
 800aa6c:	ee08 2a10 	vmov	s16, r2
 800aa70:	e9cd 0105 	strd	r0, r1, [sp, #20]
    if(dsc->width == 0) return;
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 80dd 	beq.w	800ac34 <lv_draw_line+0x1d8>
    if(dsc->opa <= LV_OPA_MIN) return;
 800aa7a:	f89b 2008 	ldrb.w	r2, [fp, #8]
 800aa7e:	2a02      	cmp	r2, #2
 800aa80:	f240 80d8 	bls.w	800ac34 <lv_draw_line+0x1d8>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800aa84:	f9b0 2000 	ldrsh.w	r2, [r0]
 800aa88:	f9b1 4000 	ldrsh.w	r4, [r1]
 800aa8c:	9906      	ldr	r1, [sp, #24]
 800aa8e:	42a2      	cmp	r2, r4
 800aa90:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800aa94:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800aa98:	d102      	bne.n	800aaa0 <lv_draw_line+0x44>
 800aa9a:	4288      	cmp	r0, r1
 800aa9c:	f000 80ca 	beq.w	800ac34 <lv_draw_line+0x1d8>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800aaa0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800aaa4:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800aaa8:	42a2      	cmp	r2, r4
 800aaaa:	bfd4      	ite	le
 800aaac:	ebc3 0502 	rsble	r5, r3, r2
 800aab0:	ebc3 0504 	rsbgt	r5, r3, r4
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800aab4:	42a2      	cmp	r2, r4
 800aab6:	bfac      	ite	ge
 800aab8:	189a      	addge	r2, r3, r2
 800aaba:	191a      	addlt	r2, r3, r4
 800aabc:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800aac0:	4288      	cmp	r0, r1
 800aac2:	bfd4      	ite	le
 800aac4:	ebc3 0200 	rsble	r2, r3, r0
 800aac8:	ebc3 0201 	rsbgt	r2, r3, r1
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800aacc:	4288      	cmp	r0, r1
 800aace:	bfac      	ite	ge
 800aad0:	181b      	addge	r3, r3, r0
 800aad2:	185b      	addlt	r3, r3, r1

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800aad4:	a90a      	add	r1, sp, #40	; 0x28
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800aad6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800aada:	ee18 2a10 	vmov	r2, s16
 800aade:	4608      	mov	r0, r1
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800aae0:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800aae4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800aae8:	f00b fffd 	bl	8016ae6 <_lv_area_intersect>
    if(!is_common) return;
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f000 80a1 	beq.w	800ac34 <lv_draw_line+0x1d8>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 800aaf2:	9b05      	ldr	r3, [sp, #20]
 800aaf4:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 800aaf8:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800aafc:	9b06      	ldr	r3, [sp, #24]
 800aafe:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800ab02:	45c1      	cmp	r9, r8
 800ab04:	f040 813b 	bne.w	800ad7e <lv_draw_line+0x322>
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;

    int32_t w = dsc->width - 1;
 800ab08:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ab0a:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    lv_opa_t opa = dsc->opa;
 800ab0e:	f89b 6008 	ldrb.w	r6, [fp, #8]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ab12:	f004 0301 	and.w	r3, r4, #1
    int32_t w_half0 = w >> 1;
 800ab16:	1067      	asrs	r7, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ab18:	eb03 0464 	add.w	r4, r3, r4, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ab1c:	b125      	cbz	r5, 800ab28 <lv_draw_line+0xcc>
 800ab1e:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
 800ab22:	3d00      	subs	r5, #0
 800ab24:	bf18      	it	ne
 800ab26:	2501      	movne	r5, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800ab28:	f001 f922 	bl	800bd70 <lv_draw_mask_get_cnt>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f040 8086 	bne.w	800ac3e <lv_draw_line+0x1e2>
    else if(dashed) simple_mode = false;
 800ab32:	f085 0201 	eor.w	r2, r5, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MIN(point1->x, point2->x);
 800ab36:	9b06      	ldr	r3, [sp, #24]
 800ab38:	9905      	ldr	r1, [sp, #20]
 800ab3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab3e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ab42:	4618      	mov	r0, r3
 800ab44:	428b      	cmp	r3, r1
 800ab46:	bfa8      	it	ge
 800ab48:	4608      	movge	r0, r1
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800ab4a:	428b      	cmp	r3, r1
 800ab4c:	bfb8      	it	lt
 800ab4e:	460b      	movlt	r3, r1
    draw_area.x1 = LV_MIN(point1->x, point2->x);
 800ab50:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800ab54:	3b01      	subs	r3, #1
 800ab56:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = point1->y - w_half1;
 800ab5a:	9b05      	ldr	r3, [sp, #20]
 800ab5c:	885b      	ldrh	r3, [r3, #2]
 800ab5e:	1b1c      	subs	r4, r3, r4
    draw_area.y2 = point1->y + w_half0;
 800ab60:	441f      	add	r7, r3
    draw_area.y1 = point1->y - w_half1;
 800ab62:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
    draw_area.y2 = point1->y + w_half0;
 800ab66:	f8ad 709e 	strh.w	r7, [sp, #158]	; 0x9e

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d069      	beq.n	800ac42 <lv_draw_line+0x1e6>

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 800ab6e:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
 800ab72:	a926      	add	r1, sp, #152	; 0x98
 800ab74:	f8bb 2000 	ldrh.w	r2, [fp]
 800ab78:	a80a      	add	r0, sp, #40	; 0x28
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ab82:	2301      	movs	r3, #1
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	2300      	movs	r3, #0
 800ab88:	f7fe f962 	bl	8008e50 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 800ab8c:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800ab90:	f013 0f0c 	tst.w	r3, #12
 800ab94:	d04e      	beq.n	800ac34 <lv_draw_line+0x1d8>
        lv_draw_rect_dsc_init(&cir_dsc);
 800ab96:	a831      	add	r0, sp, #196	; 0xc4
 800ab98:	f001 fd8e 	bl	800c6b8 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800ab9c:	f8bb 3000 	ldrh.w	r3, [fp]
 800aba0:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800aba4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800aba8:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        cir_dsc.bg_opa = dsc->opa;
 800abac:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800abb0:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        int32_t r = (dsc->width >> 1);
 800abb4:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 800abb8:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800abba:	43db      	mvns	r3, r3
 800abbc:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
 800abc0:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800abc4:	075a      	lsls	r2, r3, #29
 800abc6:	d518      	bpl.n	800abfa <lv_draw_line+0x19e>
            cir_area.x1 = point1->x - r;
 800abc8:	9b05      	ldr	r3, [sp, #20]
 800abca:	881a      	ldrh	r2, [r3, #0]
 800abcc:	b2a3      	uxth	r3, r4
 800abce:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
 800abd0:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
 800abd2:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point1->x + r - r_corr;
 800abd6:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point1->y - r;
 800abd8:	9905      	ldr	r1, [sp, #20]
            cir_area.x2 = point1->x + r - r_corr;
 800abda:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800abde:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point1->y - r;
 800abe0:	8849      	ldrh	r1, [r1, #2]
 800abe2:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800abe4:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800abe6:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point1->y + r - r_corr ;
 800abea:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point1->y - r;
 800abec:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800abf0:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point1->y + r - r_corr ;
 800abf2:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800abf6:	f001 fd81 	bl	800c6fc <lv_draw_rect>
        if(dsc->round_end) {
 800abfa:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800abfe:	071b      	lsls	r3, r3, #28
 800ac00:	d518      	bpl.n	800ac34 <lv_draw_line+0x1d8>
            cir_area.x1 = point2->x - r;
 800ac02:	9b06      	ldr	r3, [sp, #24]
 800ac04:	881a      	ldrh	r2, [r3, #0]
 800ac06:	b2a3      	uxth	r3, r4
 800ac08:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
 800ac0a:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
 800ac0c:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point2->x + r - r_corr;
 800ac10:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point2->y - r;
 800ac12:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
 800ac14:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800ac18:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point2->y - r;
 800ac1a:	8849      	ldrh	r1, [r1, #2]
 800ac1c:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800ac1e:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800ac20:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point2->y + r - r_corr ;
 800ac24:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point2->y - r;
 800ac26:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800ac2a:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point2->y + r - r_corr ;
 800ac2c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800ac30:	f001 fd64 	bl	800c6fc <lv_draw_rect>
}
 800ac34:	b03f      	add	sp, #252	; 0xfc
 800ac36:	ecbd 8b04 	vpop	{d8-d9}
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800ac3e:	2200      	movs	r2, #0
 800ac40:	e779      	b.n	800ab36 <lv_draw_line+0xda>
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ac42:	f7fd f9b1 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800ac46:	f00b fc9b 	bl	8016580 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800ac4a:	aa26      	add	r2, sp, #152	; 0x98
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800ac4c:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800ac4e:	a90a      	add	r1, sp, #40	; 0x28
 800ac50:	4610      	mov	r0, r2
 800ac52:	f00b ff48 	bl	8016ae6 <_lv_area_intersect>
        if(!is_common) return;
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d098      	beq.n	800ab8c <lv_draw_line+0x130>
        draw_area.y1 -= disp_area->y1;
 800ac5a:	8a7c      	ldrh	r4, [r7, #18]
 800ac5c:	f9bd 009a 	ldrsh.w	r0, [sp, #154]	; 0x9a
        draw_area.x1 -= disp_area->x1;
 800ac60:	8a39      	ldrh	r1, [r7, #16]
        draw_area.y1 -= disp_area->y1;
 800ac62:	1b03      	subs	r3, r0, r4
        draw_area.x1 -= disp_area->x1;
 800ac64:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
 800ac68:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
        draw_area.y1 -= disp_area->y1;
 800ac6c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        draw_area.x2 -= disp_area->x1;
 800ac70:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
        draw_area.x1 -= disp_area->x1;
 800ac74:	1a72      	subs	r2, r6, r1
        draw_area.x2 -= disp_area->x1;
 800ac76:	f9bd c09c 	ldrsh.w	ip, [sp, #156]	; 0x9c
 800ac7a:	1a59      	subs	r1, r3, r1
        draw_area.x1 -= disp_area->x1;
 800ac7c:	f9bd e098 	ldrsh.w	lr, [sp, #152]	; 0x98
 800ac80:	b212      	sxth	r2, r2
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800ac82:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
        draw_area.x2 -= disp_area->x1;
 800ac86:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
        draw_area.y2 -= disp_area->y1;
 800ac8a:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
        draw_area.x1 -= disp_area->x1;
 800ac8e:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
        draw_area.y2 -= disp_area->y1;
 800ac92:	1b0c      	subs	r4, r1, r4
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800ac94:	f8ad e0c4 	strh.w	lr, [sp, #196]	; 0xc4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800ac98:	f8ad 00c6 	strh.w	r0, [sp, #198]	; 0xc6
        draw_area.y2 -= disp_area->y1;
 800ac9c:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
 800aca0:	1c5c      	adds	r4, r3, #1
        fill_area.y2 = fill_area.y1;
 800aca2:	f8ad 00ca 	strh.w	r0, [sp, #202]	; 0xca
 800aca6:	1ba4      	subs	r4, r4, r6
 800aca8:	b224      	sxth	r4, r4
        if(dashed) {
 800acaa:	b1dd      	cbz	r5, 800ace4 <lv_draw_line+0x288>
            dash_start = (draw_buf->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800acac:	4490      	add	r8, r2
 800acae:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800acb2:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800acb6:	4413      	add	r3, r2
 800acb8:	fb98 f2f3 	sdiv	r2, r8, r3
 800acbc:	fb03 8812 	mls	r8, r3, r2, r8
 800acc0:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800acc4:	4620      	mov	r0, r4
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800acc6:	f04f 0a00 	mov.w	sl, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800acca:	f00c fd0d 	bl	80176e8 <lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800acce:	f9bd 909a 	ldrsh.w	r9, [sp, #154]	; 0x9a
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800acd2:	4606      	mov	r6, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800acd4:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 800acd8:	4599      	cmp	r9, r3
 800acda:	dd05      	ble.n	800ace8 <lv_draw_line+0x28c>
        lv_mem_buf_release(mask_buf);
 800acdc:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800acde:	f00c fb5f 	bl	80173a0 <lv_mem_buf_release>
 800ace2:	e753      	b.n	800ab8c <lv_draw_line+0x130>
        lv_coord_t dash_start = 0;
 800ace4:	46a8      	mov	r8, r5
 800ace6:	e7ed      	b.n	800acc4 <lv_draw_line+0x268>
            lv_memset_ff(mask_buf, draw_area_w);
 800ace8:	4621      	mov	r1, r4
 800acea:	4630      	mov	r0, r6
 800acec:	f00c fd79 	bl	80177e2 <lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800acf0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800acf4:	8a7a      	ldrh	r2, [r7, #18]
 800acf6:	4630      	mov	r0, r6
 800acf8:	8a39      	ldrh	r1, [r7, #16]
 800acfa:	444a      	add	r2, r9
 800acfc:	4419      	add	r1, r3
 800acfe:	4623      	mov	r3, r4
 800ad00:	b212      	sxth	r2, r2
 800ad02:	b209      	sxth	r1, r1
 800ad04:	f000 ffea 	bl	800bcdc <lv_draw_mask_apply>
 800ad08:	4602      	mov	r2, r0
            if(dashed) {
 800ad0a:	b18d      	cbz	r5, 800ad30 <lv_draw_line+0x2d4>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800ad0c:	b180      	cbz	r0, 800ad30 <lv_draw_line+0x2d4>
                    lv_coord_t dash_cnt = dash_start;
 800ad0e:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800ad10:	2300      	movs	r3, #0
 800ad12:	e00a      	b.n	800ad2a <lv_draw_line+0x2ce>
                        if(dash_cnt <= dsc->dash_width) {
 800ad14:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800ad18:	428a      	cmp	r2, r1
 800ad1a:	db26      	blt.n	800ad6a <lv_draw_line+0x30e>
                            i += diff;
 800ad1c:	4413      	add	r3, r2
 800ad1e:	1a5b      	subs	r3, r3, r1
 800ad20:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800ad22:	3301      	adds	r3, #1
 800ad24:	3201      	adds	r2, #1
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	b211      	sxth	r1, r2
 800ad2a:	429c      	cmp	r4, r3
 800ad2c:	dcf2      	bgt.n	800ad14 <lv_draw_line+0x2b8>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ad2e:	2202      	movs	r2, #2
                           dsc->blend_mode);
 800ad30:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(clip, &fill_area,
 800ad34:	a931      	add	r1, sp, #196	; 0xc4
 800ad36:	a80a      	add	r0, sp, #40	; 0x28
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ad38:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fill_area,
 800ad3c:	f003 0303 	and.w	r3, r3, #3
 800ad40:	9302      	str	r3, [sp, #8]
 800ad42:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800ad46:	e9cd 2300 	strd	r2, r3, [sp]
 800ad4a:	4633      	mov	r3, r6
 800ad4c:	f8bb 2000 	ldrh.w	r2, [fp]
 800ad50:	f7fe f87e 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
 800ad54:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
 800ad58:	3301      	adds	r3, #1
 800ad5a:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
 800ad5e:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
 800ad62:	3301      	adds	r3, #1
 800ad64:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ad68:	e7b4      	b.n	800acd4 <lv_draw_line+0x278>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800ad6a:	f9bb 0006 	ldrsh.w	r0, [fp, #6]
 800ad6e:	4402      	add	r2, r0
 800ad70:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800ad72:	bfb6      	itet	lt
 800ad74:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800ad76:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
 800ad78:	f806 a003 	strblt.w	sl, [r6, r3]
 800ad7c:	e7d1      	b.n	800ad22 <lv_draw_line+0x2c6>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 800ad7e:	9b05      	ldr	r3, [sp, #20]
 800ad80:	f9b3 7000 	ldrsh.w	r7, [r3]
 800ad84:	9b06      	ldr	r3, [sp, #24]
 800ad86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad8a:	42b7      	cmp	r7, r6
 800ad8c:	f040 80c1 	bne.w	800af12 <lv_draw_line+0x4b6>
    int32_t w = dsc->width - 1;
 800ad90:	3c01      	subs	r4, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ad92:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    lv_opa_t opa = dsc->opa;
 800ad96:	f89b 6008 	ldrb.w	r6, [fp, #8]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ad9a:	f004 0301 	and.w	r3, r4, #1
    int32_t w_half0 = w >> 1;
 800ad9e:	1067      	asrs	r7, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800ada0:	eb03 0464 	add.w	r4, r3, r4, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ada4:	b125      	cbz	r5, 800adb0 <lv_draw_line+0x354>
 800ada6:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
 800adaa:	3d00      	subs	r5, #0
 800adac:	bf18      	it	ne
 800adae:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800adb0:	f000 ffde 	bl	800bd70 <lv_draw_mask_get_cnt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d16e      	bne.n	800ae96 <lv_draw_line+0x43a>
    else if(dashed) simple_mode = false;
 800adb8:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
 800adbc:	9b05      	ldr	r3, [sp, #20]
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800adbe:	9905      	ldr	r1, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
 800adc0:	881b      	ldrh	r3, [r3, #0]
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800adc2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
 800adc6:	1b1c      	subs	r4, r3, r4
    draw_area.x2 = point1->x + w_half0;
 800adc8:	443b      	add	r3, r7
 800adca:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800adce:	9b06      	ldr	r3, [sp, #24]
    draw_area.x1 = point1->x - w_half1;
 800add0:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800add4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800add8:	428b      	cmp	r3, r1
 800adda:	4618      	mov	r0, r3
 800addc:	bfa8      	it	ge
 800adde:	4608      	movge	r0, r1
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800ade0:	428b      	cmp	r3, r1
 800ade2:	bfb8      	it	lt
 800ade4:	460b      	movlt	r3, r1
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800ade6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800adea:	3b01      	subs	r3, #1
 800adec:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(simple_mode) {
 800adf0:	2a00      	cmp	r2, #0
 800adf2:	f47f aebc 	bne.w	800ab6e <lv_draw_line+0x112>
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800adf6:	f7fd f8d7 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800adfa:	f00b fbc1 	bl	8016580 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800adfe:	aa26      	add	r2, sp, #152	; 0x98
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800ae00:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800ae02:	a90a      	add	r1, sp, #40	; 0x28
 800ae04:	4610      	mov	r0, r2
 800ae06:	f00b fe6e 	bl	8016ae6 <_lv_area_intersect>
        if(!is_common) return;
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	f43f aebe 	beq.w	800ab8c <lv_draw_line+0x130>
        draw_area.x1 -= draw_buf->area.x1;
 800ae10:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 800ae14:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
        draw_area.y1 -= draw_buf->area.y1;
 800ae18:	f8b8 6012 	ldrh.w	r6, [r8, #18]
 800ae1c:	f9bd 109a 	ldrsh.w	r1, [sp, #154]	; 0x9a
        draw_area.x1 -= draw_buf->area.x1;
 800ae20:	1abb      	subs	r3, r7, r2
 800ae22:	f9bd 4098 	ldrsh.w	r4, [sp, #152]	; 0x98
 800ae26:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        draw_area.y1 -= draw_buf->area.y1;
 800ae2a:	1b8b      	subs	r3, r1, r6
        draw_area.x2 -= draw_buf->area.x1;
 800ae2c:	f9bd 009c 	ldrsh.w	r0, [sp, #156]	; 0x9c
        draw_area.y1 -= draw_buf->area.y1;
 800ae30:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        draw_area.x2 -= draw_buf->area.x1;
 800ae34:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800ae38:	f8ad 00c8 	strh.w	r0, [sp, #200]	; 0xc8
        draw_area.x2 -= draw_buf->area.x1;
 800ae3c:	1a9a      	subs	r2, r3, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800ae3e:	f8ad 40c4 	strh.w	r4, [sp, #196]	; 0xc4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800ae42:	f8ad 10c6 	strh.w	r1, [sp, #198]	; 0xc6
        draw_area.x2 -= draw_buf->area.x1;
 800ae46:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
        draw_area.y2 -= draw_buf->area.y1;
 800ae4a:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
        fill_area.y2 = fill_area.y1;
 800ae4e:	f8ad 10ca 	strh.w	r1, [sp, #202]	; 0xca
        draw_area.y2 -= draw_buf->area.y1;
 800ae52:	1b92      	subs	r2, r2, r6
 800ae54:	1c5e      	adds	r6, r3, #1
 800ae56:	1bf6      	subs	r6, r6, r7
 800ae58:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
 800ae5c:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f00c fc42 	bl	80176e8 <lv_mem_buf_get>
 800ae64:	f9bd 709a 	ldrsh.w	r7, [sp, #154]	; 0x9a
 800ae68:	4681      	mov	r9, r0
        if(dashed) {
 800ae6a:	b1b5      	cbz	r5, 800ae9a <lv_draw_line+0x43e>
            dash_start = (draw_buf->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800ae6c:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
 800ae70:	f9b8 2012 	ldrsh.w	r2, [r8, #18]
 800ae74:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800ae78:	443a      	add	r2, r7
 800ae7a:	4423      	add	r3, r4
 800ae7c:	fb92 f4f3 	sdiv	r4, r2, r3
 800ae80:	fb03 2414 	mls	r4, r3, r4, r2
 800ae84:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
 800ae86:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ae8a:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 800ae8e:	429f      	cmp	r7, r3
 800ae90:	dd05      	ble.n	800ae9e <lv_draw_line+0x442>
        lv_mem_buf_release(mask_buf);
 800ae92:	4648      	mov	r0, r9
 800ae94:	e723      	b.n	800acde <lv_draw_line+0x282>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800ae96:	2200      	movs	r2, #0
 800ae98:	e790      	b.n	800adbc <lv_draw_line+0x360>
        lv_coord_t dash_start = 0;
 800ae9a:	462c      	mov	r4, r5
 800ae9c:	e7f3      	b.n	800ae86 <lv_draw_line+0x42a>
            lv_memset_ff(mask_buf, draw_area_w);
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4648      	mov	r0, r9
 800aea2:	f00c fc9e 	bl	80177e2 <lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800aea6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800aeaa:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 800aeae:	4648      	mov	r0, r9
 800aeb0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800aeb4:	443a      	add	r2, r7
 800aeb6:	4419      	add	r1, r3
 800aeb8:	4633      	mov	r3, r6
 800aeba:	b212      	sxth	r2, r2
 800aebc:	b209      	sxth	r1, r1
 800aebe:	f000 ff0d 	bl	800bcdc <lv_draw_mask_apply>
            if(dashed) {
 800aec2:	b16d      	cbz	r5, 800aee0 <lv_draw_line+0x484>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800aec4:	b150      	cbz	r0, 800aedc <lv_draw_line+0x480>
                    if(dash_cnt > dsc->dash_width) {
 800aec6:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800aeca:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 800aece:	42a2      	cmp	r2, r4
 800aed0:	bfb8      	it	lt
 800aed2:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800aed4:	4413      	add	r3, r2
                        dash_cnt = 0;
 800aed6:	429c      	cmp	r4, r3
 800aed8:	bfa8      	it	ge
 800aeda:	2400      	movge	r4, #0
                dash_cnt ++;
 800aedc:	3401      	adds	r4, #1
 800aede:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
 800aee0:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800aee4:	a931      	add	r1, sp, #196	; 0xc4
 800aee6:	f8bb 2000 	ldrh.w	r2, [fp]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800aeea:	3701      	adds	r7, #1
            _lv_blend_fill(clip, &fill_area,
 800aeec:	f8cd a008 	str.w	sl, [sp, #8]
 800aef0:	e9cd 0300 	strd	r0, r3, [sp]
 800aef4:	464b      	mov	r3, r9
 800aef6:	a80a      	add	r0, sp, #40	; 0x28
 800aef8:	f7fd ffaa 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
 800aefc:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
 800af00:	3301      	adds	r3, #1
 800af02:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
 800af06:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
 800af0a:	3301      	adds	r3, #1
 800af0c:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800af10:	e7bb      	b.n	800ae8a <lv_draw_line+0x42e>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800af12:	45c1      	cmp	r9, r8
 800af14:	db05      	blt.n	800af22 <lv_draw_line+0x4c6>
 800af16:	464b      	mov	r3, r9
 800af18:	46c1      	mov	r9, r8
 800af1a:	4698      	mov	r8, r3
 800af1c:	463b      	mov	r3, r7
 800af1e:	4637      	mov	r7, r6
 800af20:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800af22:	1bf3      	subs	r3, r6, r7
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800af24:	213f      	movs	r1, #63	; 0x3f
    int32_t xdiff = p2.x - p1.x;
 800af26:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
 800af28:	eba8 0309 	sub.w	r3, r8, r9
 800af2c:	9308      	str	r3, [sp, #32]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800af2e:	1bf3      	subs	r3, r6, r7
 800af30:	2b00      	cmp	r3, #0
 800af32:	bfb8      	it	lt
 800af34:	425b      	neglt	r3, r3
 800af36:	9307      	str	r3, [sp, #28]
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	bfb8      	it	lt
 800af3e:	425b      	neglt	r3, r3
 800af40:	469a      	mov	sl, r3
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800af42:	9b07      	ldr	r3, [sp, #28]
 800af44:	4553      	cmp	r3, sl
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800af46:	bfd3      	iteet	le
 800af48:	9b07      	ldrle	r3, [sp, #28]
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800af4a:	ea4f 134a 	movgt.w	r3, sl, lsl #5
 800af4e:	9a07      	ldrgt	r2, [sp, #28]
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800af50:	015b      	lslle	r3, r3, #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800af52:	bfcc      	ite	gt
 800af54:	fbb3 f3f2 	udivgt	r3, r3, r2
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800af58:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800af5c:	4ac3      	ldr	r2, [pc, #780]	; (800b26c <lv_draw_line+0x810>)
 800af5e:	5cd3      	ldrb	r3, [r2, r3]
 800af60:	fb14 1403 	smlabb	r4, r4, r3, r1
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800af64:	a90c      	add	r1, sp, #48	; 0x30
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800af66:	f3c4 13cf 	ubfx	r3, r4, #7, #16
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800af6a:	4608      	mov	r0, r1
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800af6c:	11e5      	asrs	r5, r4, #7
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800af6e:	42be      	cmp	r6, r7
 800af70:	bfd4      	ite	le
 800af72:	ebc3 0206 	rsble	r2, r3, r6
 800af76:	ebc3 0207 	rsbgt	r2, r3, r7
 800af7a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    draw_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800af7e:	42be      	cmp	r6, r7
 800af80:	bfac      	ite	ge
 800af82:	199a      	addge	r2, r3, r6
 800af84:	19da      	addlt	r2, r3, r7
 800af86:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800af8a:	45c8      	cmp	r8, r9
 800af8c:	bfd4      	ite	le
 800af8e:	ebc3 0208 	rsble	r2, r3, r8
 800af92:	ebc3 0209 	rsbgt	r2, r3, r9
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800af96:	45c8      	cmp	r8, r9
 800af98:	bfac      	ite	ge
 800af9a:	4443      	addge	r3, r8
 800af9c:	444b      	addlt	r3, r9
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800af9e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800afa2:	aa0a      	add	r2, sp, #40	; 0x28
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800afa4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800afa8:	f00b fd9d 	bl	8016ae6 <_lv_area_intersect>
    if(is_common == false) return;
 800afac:	2800      	cmp	r0, #0
 800afae:	f43f aded 	beq.w	800ab8c <lv_draw_line+0x130>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800afb2:	f005 0501 	and.w	r5, r5, #1
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800afb6:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800afb8:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
 800afbc:	4553      	cmp	r3, sl
 800afbe:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800afc2:	b2ad      	uxth	r5, r5
 800afc4:	f340 80f3 	ble.w	800b1ae <lv_draw_line+0x752>
        if(xdiff > 0) {
 800afc8:	fa15 f389 	uxtah	r3, r5, r9
 800afcc:	eba9 0a04 	sub.w	sl, r9, r4
 800afd0:	fa15 f588 	uxtah	r5, r5, r8
 800afd4:	eba8 0404 	sub.w	r4, r8, r4
 800afd8:	b21b      	sxth	r3, r3
 800afda:	b22d      	sxth	r5, r5
 800afdc:	ee08 3a90 	vmov	s17, r3
 800afe0:	1bf3      	subs	r3, r6, r7
 800afe2:	fa0f fa8a 	sxth.w	sl, sl
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800afee:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800aff0:	f340 80cf 	ble.w	800b192 <lv_draw_line+0x736>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800aff4:	4633      	mov	r3, r6
 800aff6:	4652      	mov	r2, sl
 800aff8:	4639      	mov	r1, r7
 800affa:	a810      	add	r0, sp, #64	; 0x40
 800affc:	9400      	str	r4, [sp, #0]
 800affe:	f000 fec5 	bl	800bd8c <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b002:	2301      	movs	r3, #1
 800b004:	ee18 2a90 	vmov	r2, s17
 800b008:	e9cd 5300 	strd	r5, r3, [sp]
 800b00c:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b00e:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b010:	a81b      	add	r0, sp, #108	; 0x6c
 800b012:	f000 febb 	bl	800bd8c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b016:	2100      	movs	r1, #0
 800b018:	a810      	add	r0, sp, #64	; 0x40
 800b01a:	f000 fe49 	bl	800bcb0 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b01e:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b020:	ee09 0a10 	vmov	s18, r0
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b024:	a81b      	add	r0, sp, #108	; 0x6c
 800b026:	f000 fe43 	bl	800bcb0 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800b02a:	f89b 5009 	ldrb.w	r5, [fp, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b02e:	ee09 0a90 	vmov	s19, r0
    if(!dsc->raw_end) {
 800b032:	f015 0510 	ands.w	r5, r5, #16
 800b036:	f040 80d4 	bne.w	800b1e2 <lv_draw_line+0x786>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b03a:	2203      	movs	r2, #3
 800b03c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b040:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800b044:	4639      	mov	r1, r7
 800b046:	9201      	str	r2, [sp, #4]
 800b048:	1bf2      	subs	r2, r6, r7
 800b04a:	1b3b      	subs	r3, r7, r4
 800b04c:	a826      	add	r0, sp, #152	; 0x98
 800b04e:	fa19 f282 	uxtah	r2, r9, r2
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b052:	44c2      	add	sl, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b054:	b21b      	sxth	r3, r3
 800b056:	b212      	sxth	r2, r2
 800b058:	9200      	str	r2, [sp, #0]
 800b05a:	464a      	mov	r2, r9
 800b05c:	f000 fe96 	bl	800bd8c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b060:	2202      	movs	r2, #2
 800b062:	1b33      	subs	r3, r6, r4
 800b064:	4631      	mov	r1, r6
 800b066:	9201      	str	r2, [sp, #4]
 800b068:	fa0f f28a 	sxth.w	r2, sl
 800b06c:	b21b      	sxth	r3, r3
 800b06e:	a831      	add	r0, sp, #196	; 0xc4
 800b070:	9200      	str	r2, [sp, #0]
 800b072:	4642      	mov	r2, r8
 800b074:	f000 fe8a 	bl	800bd8c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b078:	4629      	mov	r1, r5
 800b07a:	a826      	add	r0, sp, #152	; 0x98
 800b07c:	f000 fe18 	bl	800bcb0 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b080:	4629      	mov	r1, r5
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b082:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b084:	a831      	add	r0, sp, #196	; 0xc4
 800b086:	f000 fe13 	bl	800bcb0 <lv_draw_mask_add>
 800b08a:	4681      	mov	r9, r0
    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b08c:	f7fc ff8c 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
 800b090:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b092:	f00b fa75 	bl	8016580 <lv_disp_get_draw_buf>

    const lv_area_t * disp_area = &draw_buf->area;

    /*Store the coordinates of the `draw_a` relative to the draw_buf*/
    draw_area.x1 -= disp_area->x1;
 800b096:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800b09a:	8a02      	ldrh	r2, [r0, #16]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b09c:	4606      	mov	r6, r0
    draw_area.y1 -= disp_area->y1;
 800b09e:	8a40      	ldrh	r0, [r0, #18]
    draw_area.x1 -= disp_area->x1;
 800b0a0:	1a8b      	subs	r3, r1, r2
 800b0a2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800b0a6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b0aa:	1a1b      	subs	r3, r3, r0
 800b0ac:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 800b0b0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b0b4:	1a9a      	subs	r2, r3, r2
 800b0b6:	1c5c      	adds	r4, r3, #1
 800b0b8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b0bc:	1a64      	subs	r4, r4, r1
    draw_area.y2 -= disp_area->y1;
 800b0be:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 800b0c2:	b224      	sxth	r4, r4
 800b0c4:	1a12      	subs	r2, r2, r0
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800b0c6:	4628      	mov	r0, r5
    draw_area.y2 -= disp_area->y1;
 800b0c8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800b0cc:	f00b fa1a 	bl	8016504 <lv_disp_get_hor_res>
 800b0d0:	4605      	mov	r5, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&draw_area), hor_res);
 800b0d2:	a80c      	add	r0, sp, #48	; 0x30
 800b0d4:	f00b fcd9 	bl	8016a8a <lv_area_get_size>
 800b0d8:	4285      	cmp	r5, r0
 800b0da:	d903      	bls.n	800b0e4 <lv_draw_line+0x688>
 800b0dc:	a80c      	add	r0, sp, #48	; 0x30
 800b0de:	f00b fcd4 	bl	8016a8a <lv_area_get_size>
 800b0e2:	4605      	mov	r5, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b0e4:	4628      	mov	r0, r5
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = draw_buf->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
 800b0e6:	f04f 0800 	mov.w	r8, #0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b0ea:	f00c fafd 	bl	80176e8 <lv_mem_buf_get>
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b0ee:	8a33      	ldrh	r3, [r6, #16]
 800b0f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30

    lv_memset_ff(mask_buf, mask_buf_size);
 800b0f4:	4629      	mov	r1, r5
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b0f6:	4607      	mov	r7, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b0f8:	441a      	add	r2, r3
 800b0fa:	b212      	sxth	r2, r2
 800b0fc:	9207      	str	r2, [sp, #28]
 800b0fe:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b102:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800b106:	4413      	add	r3, r2
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b108:	8a72      	ldrh	r2, [r6, #18]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b10a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b10e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b112:	4413      	add	r3, r2
 800b114:	b21b      	sxth	r3, r3
 800b116:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
 800b11a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_memset_ff(mask_buf, mask_buf_size);
 800b11e:	f00c fb60 	bl	80177e2 <lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800b122:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b126:	f9b6 a012 	ldrsh.w	sl, [r6, #18]
 800b12a:	449a      	add	sl, r3
 800b12c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800b130:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800b134:	4413      	add	r3, r2
 800b136:	459a      	cmp	sl, r3
 800b138:	dd58      	ble.n	800b1ec <lv_draw_line+0x790>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800b13a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800b13e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800b142:	429a      	cmp	r2, r3
 800b144:	d013      	beq.n	800b16e <lv_draw_line+0x712>
        fill_area.y2--;
 800b146:	3b01      	subs	r3, #1
        _lv_blend_fill(&fill_area, clip,
 800b148:	f8bb 2000 	ldrh.w	r2, [fp]
 800b14c:	a90a      	add	r1, sp, #40	; 0x28
 800b14e:	a80e      	add	r0, sp, #56	; 0x38
        fill_area.y2--;
 800b150:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800b154:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(&fill_area, clip,
 800b158:	f003 0303 	and.w	r3, r3, #3
 800b15c:	9302      	str	r3, [sp, #8]
 800b15e:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b162:	9301      	str	r3, [sp, #4]
 800b164:	2302      	movs	r3, #2
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	463b      	mov	r3, r7
 800b16a:	f7fd fe71 	bl	8008e50 <_lv_blend_fill>

    }

    lv_mem_buf_release(mask_buf);
 800b16e:	4638      	mov	r0, r7
 800b170:	f00c f916 	bl	80173a0 <lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800b174:	ee19 0a10 	vmov	r0, s18
 800b178:	f000 fdd2 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800b17c:	ee19 0a90 	vmov	r0, s19
 800b180:	f000 fdce 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800b184:	9808      	ldr	r0, [sp, #32]
 800b186:	f000 fdcb 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800b18a:	4648      	mov	r0, r9
 800b18c:	f000 fdc8 	bl	800bd20 <lv_draw_mask_remove_id>
 800b190:	e4fc      	b.n	800ab8c <lv_draw_line+0x130>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b192:	4633      	mov	r3, r6
 800b194:	ee18 2a90 	vmov	r2, s17
 800b198:	4639      	mov	r1, r7
 800b19a:	a810      	add	r0, sp, #64	; 0x40
 800b19c:	9500      	str	r5, [sp, #0]
 800b19e:	f000 fdf5 	bl	800bd8c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	e9cd 4300 	strd	r4, r3, [sp]
 800b1aa:	4633      	mov	r3, r6
 800b1ac:	e72f      	b.n	800b00e <lv_draw_line+0x5b2>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800b1ae:	fa15 f386 	uxtah	r3, r5, r6
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	fa15 f587 	uxtah	r5, r5, r7
 800b1b8:	a810      	add	r0, sp, #64	; 0x40
 800b1ba:	b21b      	sxth	r3, r3
 800b1bc:	b229      	sxth	r1, r5
 800b1be:	fa1f fa87 	uxth.w	sl, r7
 800b1c2:	e9cd 8200 	strd	r8, r2, [sp]
 800b1c6:	464a      	mov	r2, r9
 800b1c8:	f000 fde0 	bl	800bd8c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	b2b3      	uxth	r3, r6
 800b1d0:	ebaa 0104 	sub.w	r1, sl, r4
 800b1d4:	1b1b      	subs	r3, r3, r4
 800b1d6:	b209      	sxth	r1, r1
 800b1d8:	e9cd 8200 	strd	r8, r2, [sp]
 800b1dc:	b21b      	sxth	r3, r3
 800b1de:	464a      	mov	r2, r9
 800b1e0:	e716      	b.n	800b010 <lv_draw_line+0x5b4>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800b1e2:	f04f 39ff 	mov.w	r9, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800b1e6:	f8cd 9020 	str.w	r9, [sp, #32]
 800b1ea:	e74f      	b.n	800b08c <lv_draw_line+0x630>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 800b1ec:	eb07 0308 	add.w	r3, r7, r8
 800b1f0:	fa0f f28a 	sxth.w	r2, sl
 800b1f4:	9907      	ldr	r1, [sp, #28]
 800b1f6:	ee08 3a90 	vmov	s17, r3
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	ee18 0a90 	vmov	r0, s17
 800b200:	f000 fd6c 	bl	800bcdc <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800b204:	b920      	cbnz	r0, 800b210 <lv_draw_line+0x7b4>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800b206:	4621      	mov	r1, r4
 800b208:	ee18 0a90 	vmov	r0, s17
 800b20c:	f00c faba 	bl	8017784 <lv_memset_00>
        mask_p += draw_area_w;
 800b210:	44a0      	add	r8, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800b212:	eb08 0304 	add.w	r3, r8, r4
 800b216:	429d      	cmp	r5, r3
 800b218:	d907      	bls.n	800b22a <lv_draw_line+0x7ce>
            fill_area.y2 ++;
 800b21a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b21e:	3301      	adds	r3, #1
 800b220:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800b224:	f10a 0a01 	add.w	sl, sl, #1
 800b228:	e780      	b.n	800b12c <lv_draw_line+0x6d0>
                           dsc->blend_mode);
 800b22a:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(&fill_area, clip,
 800b22e:	a90a      	add	r1, sp, #40	; 0x28
 800b230:	f8bb 2000 	ldrh.w	r2, [fp]
 800b234:	a80e      	add	r0, sp, #56	; 0x38
 800b236:	f003 0303 	and.w	r3, r3, #3
            mask_p = 0;
 800b23a:	f04f 0800 	mov.w	r8, #0
            _lv_blend_fill(&fill_area, clip,
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	2302      	movs	r3, #2
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	463b      	mov	r3, r7
 800b24c:	f7fd fe00 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800b250:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
            lv_memset_ff(mask_buf, mask_buf_size);
 800b254:	4629      	mov	r1, r5
 800b256:	4638      	mov	r0, r7
            fill_area.y1 = fill_area.y2 + 1;
 800b258:	3301      	adds	r3, #1
 800b25a:	b21b      	sxth	r3, r3
 800b25c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            fill_area.y2 = fill_area.y1;
 800b260:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            lv_memset_ff(mask_buf, mask_buf_size);
 800b264:	f00c fabd 	bl	80177e2 <lv_memset_ff>
 800b268:	e7dc      	b.n	800b224 <lv_draw_line+0x7c8>
 800b26a:	bf00      	nop
 800b26c:	08025c0d 	.word	0x08025c0d

0800b270 <mask_mix>:
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800b270:	29fc      	cmp	r1, #252	; 0xfc
 800b272:	d80a      	bhi.n	800b28a <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800b274:	2902      	cmp	r1, #2
 800b276:	d907      	bls.n	800b288 <mask_mix+0x18>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800b278:	fb10 f001 	smulbb	r0, r0, r1
 800b27c:	f248 0181 	movw	r1, #32897	; 0x8081
 800b280:	4348      	muls	r0, r1
 800b282:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800b286:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800b288:	2000      	movs	r0, #0
}
 800b28a:	4770      	bx	lr

0800b28c <lv_draw_mask_line>:
{
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	9e08      	ldr	r6, [sp, #32]
 800b292:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 800b294:	8ab4      	ldrh	r4, [r6, #20]
    abs_x -= p->origo.x;
 800b296:	f8b6 8012 	ldrh.w	r8, [r6, #18]
    abs_y -= p->origo.y;
 800b29a:	1b12      	subs	r2, r2, r4
    abs_x -= p->origo.x;
 800b29c:	eba1 0108 	sub.w	r1, r1, r8
    abs_y -= p->origo.y;
 800b2a0:	b214      	sxth	r4, r2
    abs_x -= p->origo.x;
 800b2a2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b2a6:	fa0f f881 	sxth.w	r8, r1
    if(p->steep == 0) {
 800b2aa:	6a31      	ldr	r1, [r6, #32]
 800b2ac:	f002 0001 	and.w	r0, r2, #1
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d13a      	bne.n	800b32a <lv_draw_mask_line+0x9e>
        if(p->flat) {
 800b2b4:	7c32      	ldrb	r2, [r6, #16]
 800b2b6:	f002 0602 	and.w	r6, r2, #2
 800b2ba:	b180      	cbz	r0, 800b2de <lv_draw_mask_line+0x52>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800b2bc:	b13e      	cbz	r6, 800b2ce <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b2be:	f002 0203 	and.w	r2, r2, #3
 800b2c2:	2a02      	cmp	r2, #2
 800b2c4:	d105      	bne.n	800b2d2 <lv_draw_mask_line+0x46>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b2c6:	3401      	adds	r4, #1
 800b2c8:	bfac      	ite	ge
 800b2ca:	2000      	movge	r0, #0
 800b2cc:	2001      	movlt	r0, #1
}
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b2d2:	2a03      	cmp	r2, #3
 800b2d4:	d101      	bne.n	800b2da <lv_draw_mask_line+0x4e>
 800b2d6:	2c00      	cmp	r4, #0
 800b2d8:	dcf9      	bgt.n	800b2ce <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e7f7      	b.n	800b2ce <lv_draw_mask_line+0x42>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800b2de:	2e00      	cmp	r6, #0
 800b2e0:	f040 8173 	bne.w	800b5ca <lv_draw_mask_line+0x33e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b2e4:	f002 0003 	and.w	r0, r2, #3
 800b2e8:	2801      	cmp	r0, #1
 800b2ea:	d10e      	bne.n	800b30a <lv_draw_mask_line+0x7e>
 800b2ec:	f1b8 0f00 	cmp.w	r8, #0
 800b2f0:	dced      	bgt.n	800b2ce <lv_draw_mask_line+0x42>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b2f2:	eb18 0f03 	cmn.w	r8, r3
 800b2f6:	d4f0      	bmi.n	800b2da <lv_draw_mask_line+0x4e>
                    if(k < 0) k = 0;
 800b2f8:	f1b8 0f00 	cmp.w	r8, #0
 800b2fc:	f300 8167 	bgt.w	800b5ce <lv_draw_mask_line+0x342>
                    int32_t k = - abs_x;
 800b300:	f1c8 0100 	rsb	r1, r8, #0
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800b304:	428b      	cmp	r3, r1
 800b306:	dde8      	ble.n	800b2da <lv_draw_mask_line+0x4e>
 800b308:	e0a3      	b.n	800b452 <lv_draw_mask_line+0x1c6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d1f1      	bne.n	800b2f2 <lv_draw_mask_line+0x66>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b30e:	eb13 0108 	adds.w	r1, r3, r8
 800b312:	f100 815a 	bmi.w	800b5ca <lv_draw_mask_line+0x33e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b316:	f1b8 0f00 	cmp.w	r8, #0
 800b31a:	dcde      	bgt.n	800b2da <lv_draw_mask_line+0x4e>
                    int32_t k = - abs_x;
 800b31c:	f1c8 0000 	rsb	r0, r8, #0
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800b320:	4298      	cmp	r0, r3
 800b322:	f2c0 80a1 	blt.w	800b468 <lv_draw_mask_line+0x1dc>
    return LV_DRAW_MASK_RES_CHANGED;
 800b326:	2002      	movs	r0, #2
 800b328:	e7d1      	b.n	800b2ce <lv_draw_mask_line+0x42>
    if(p->flat) {
 800b32a:	f002 0202 	and.w	r2, r2, #2
 800b32e:	2800      	cmp	r0, #0
 800b330:	f000 809e 	beq.w	800b470 <lv_draw_mask_line+0x1e4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b334:	69f0      	ldr	r0, [r6, #28]
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	fb08 f100 	mul.w	r1, r8, r0
    if(p->yx_steep > 0) {
 800b33c:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b33e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800b342:	dd05      	ble.n	800b350 <lv_draw_mask_line+0xc4>
        if(y_at_x > abs_y) {
 800b344:	42a1      	cmp	r1, r4
 800b346:	dd05      	ble.n	800b354 <lv_draw_mask_line+0xc8>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b348:	1e10      	subs	r0, r2, #0
 800b34a:	bf18      	it	ne
 800b34c:	2001      	movne	r0, #1
 800b34e:	e7be      	b.n	800b2ce <lv_draw_mask_line+0x42>
        if(y_at_x < abs_y) {
 800b350:	42a1      	cmp	r1, r4
 800b352:	dbf9      	blt.n	800b348 <lv_draw_mask_line+0xbc>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b354:	eb03 0108 	add.w	r1, r3, r8
    if(p->yx_steep > 0) {
 800b358:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b35a:	fb00 f101 	mul.w	r1, r0, r1
 800b35e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800b362:	dd05      	ble.n	800b370 <lv_draw_mask_line+0xe4>
        if(y_at_x < abs_y) {
 800b364:	42a1      	cmp	r1, r4
 800b366:	da09      	bge.n	800b37c <lv_draw_mask_line+0xf0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b368:	fab2 f082 	clz	r0, r2
 800b36c:	0940      	lsrs	r0, r0, #5
 800b36e:	e7ae      	b.n	800b2ce <lv_draw_mask_line+0x42>
        if(y_at_x > abs_y) {
 800b370:	42a1      	cmp	r1, r4
 800b372:	dcf9      	bgt.n	800b368 <lv_draw_mask_line+0xdc>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b374:	69b1      	ldr	r1, [r6, #24]
 800b376:	fb04 1401 	mla	r4, r4, r1, r1
 800b37a:	e001      	b.n	800b380 <lv_draw_mask_line+0xf4>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 800b37c:	69b1      	ldr	r1, [r6, #24]
 800b37e:	434c      	muls	r4, r1
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b380:	f344 0495 	sbfx	r4, r4, #2, #22
    if(xef == 0) px_h = 255;
 800b384:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
    int32_t xei = xe >> 8;
 800b388:	ea4f 2124 	mov.w	r1, r4, asr #8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b38c:	bf1a      	itte	ne
 800b38e:	6a70      	ldrne	r0, [r6, #36]	; 0x24
 800b390:	f1c7 04ff 	rsbne	r4, r7, #255	; 0xff
    if(xef == 0) px_h = 255;
 800b394:	24ff      	moveq	r4, #255	; 0xff
    int32_t k = xei - abs_x;
 800b396:	eba1 0808 	sub.w	r8, r1, r8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b39a:	bf1e      	ittt	ne
 800b39c:	4344      	mulne	r4, r0
 800b39e:	1224      	asrne	r4, r4, #8
 800b3a0:	f1c4 04ff 	rsbne	r4, r4, #255	; 0xff
    if(xef) {
 800b3a4:	2f00      	cmp	r7, #0
 800b3a6:	d056      	beq.n	800b456 <lv_draw_mask_line+0x1ca>
        if(k >= 0 && k < len) {
 800b3a8:	f1b8 0f00 	cmp.w	r8, #0
 800b3ac:	db11      	blt.n	800b3d2 <lv_draw_mask_line+0x146>
 800b3ae:	4543      	cmp	r3, r8
 800b3b0:	dd0f      	ble.n	800b3d2 <lv_draw_mask_line+0x146>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b3b2:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
 800b3b6:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800b3ba:	434f      	muls	r7, r1
 800b3bc:	f3c7 2147 	ubfx	r1, r7, #9, #8
            if(p->inv) m = 255 - m;
 800b3c0:	b90a      	cbnz	r2, 800b3c6 <lv_draw_mask_line+0x13a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b3c2:	43c9      	mvns	r1, r1
 800b3c4:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b3c6:	f815 0008 	ldrb.w	r0, [r5, r8]
 800b3ca:	f7ff ff51 	bl	800b270 <mask_mix>
 800b3ce:	f805 0008 	strb.w	r0, [r5, r8]
        k++;
 800b3d2:	f108 0201 	add.w	r2, r8, #1
    while(px_h > p->spx) {
 800b3d6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800b3d8:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 800b3dc:	428c      	cmp	r4, r1
 800b3de:	f000 0002 	and.w	r0, r0, #2
 800b3e2:	dc16      	bgt.n	800b412 <lv_draw_mask_line+0x186>
    if(k < len && k >= 0) {
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	dd28      	ble.n	800b43a <lv_draw_mask_line+0x1ae>
 800b3e8:	2a00      	cmp	r2, #0
 800b3ea:	db26      	blt.n	800b43a <lv_draw_mask_line+0x1ae>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800b3ec:	69b1      	ldr	r1, [r6, #24]
 800b3ee:	4361      	muls	r1, r4
 800b3f0:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800b3f2:	4361      	muls	r1, r4
        if(p->yx_steep < 0) m = 255 - m;
 800b3f4:	69f4      	ldr	r4, [r6, #28]
        m = (x_inters * px_h) >> 9;
 800b3f6:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800b3fa:	2c00      	cmp	r4, #0
 800b3fc:	bfbc      	itt	lt
 800b3fe:	43c9      	mvnlt	r1, r1
 800b400:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 800b402:	b108      	cbz	r0, 800b408 <lv_draw_mask_line+0x17c>
 800b404:	43c9      	mvns	r1, r1
 800b406:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800b408:	5ca8      	ldrb	r0, [r5, r2]
 800b40a:	f7ff ff31 	bl	800b270 <mask_mix>
 800b40e:	54a8      	strb	r0, [r5, r2]
 800b410:	e013      	b.n	800b43a <lv_draw_mask_line+0x1ae>
        if(k >= 0 && k < len) {
 800b412:	2a00      	cmp	r2, #0
 800b414:	db0b      	blt.n	800b42e <lv_draw_mask_line+0x1a2>
 800b416:	4293      	cmp	r3, r2
 800b418:	dd09      	ble.n	800b42e <lv_draw_mask_line+0x1a2>
            m = px_h - (p->spx >> 1);
 800b41a:	eba4 0161 	sub.w	r1, r4, r1, asr #1
 800b41e:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800b420:	b108      	cbz	r0, 800b426 <lv_draw_mask_line+0x19a>
 800b422:	43c9      	mvns	r1, r1
 800b424:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b426:	5ca8      	ldrb	r0, [r5, r2]
 800b428:	f7ff ff22 	bl	800b270 <mask_mix>
 800b42c:	54a8      	strb	r0, [r5, r2]
        k++;
 800b42e:	3201      	adds	r2, #1
        px_h -= p->spx;
 800b430:	6a71      	ldr	r1, [r6, #36]	; 0x24
        if(k >= len) break;
 800b432:	4293      	cmp	r3, r2
        px_h -= p->spx;
 800b434:	eba4 0401 	sub.w	r4, r4, r1
        if(k >= len) break;
 800b438:	dccd      	bgt.n	800b3d6 <lv_draw_mask_line+0x14a>
    if(p->inv) {
 800b43a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b43e:	0789      	lsls	r1, r1, #30
 800b440:	d50b      	bpl.n	800b45a <lv_draw_mask_line+0x1ce>
        if(k > len) {
 800b442:	4543      	cmp	r3, r8
 800b444:	f6ff af49 	blt.w	800b2da <lv_draw_mask_line+0x4e>
        if(k >= 0) {
 800b448:	f1b8 0f00 	cmp.w	r8, #0
 800b44c:	f6ff af6b 	blt.w	800b326 <lv_draw_mask_line+0x9a>
            lv_memset_00(&mask_buf[0], k);
 800b450:	4641      	mov	r1, r8
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800b452:	4628      	mov	r0, r5
 800b454:	e009      	b.n	800b46a <lv_draw_mask_line+0x1de>
    int32_t k = xei - abs_x;
 800b456:	4642      	mov	r2, r8
 800b458:	e7bd      	b.n	800b3d6 <lv_draw_mask_line+0x14a>
        if(k < 0) {
 800b45a:	1c50      	adds	r0, r2, #1
 800b45c:	f53f af3d 	bmi.w	800b2da <lv_draw_mask_line+0x4e>
        if(k <= len) {
 800b460:	4283      	cmp	r3, r0
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800b462:	f6ff af60 	blt.w	800b326 <lv_draw_mask_line+0x9a>
 800b466:	1a19      	subs	r1, r3, r0
 800b468:	4428      	add	r0, r5
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800b46a:	f00c f98b 	bl	8017784 <lv_memset_00>
 800b46e:	e75a      	b.n	800b326 <lv_draw_mask_line+0x9a>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b470:	69b0      	ldr	r0, [r6, #24]
 800b472:	b2d2      	uxtb	r2, r2
 800b474:	4344      	muls	r4, r0
    if(p->xy_steep > 0) x_at_y++;
 800b476:	2800      	cmp	r0, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b478:	ea4f 21a4 	mov.w	r1, r4, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800b47c:	bfcc      	ite	gt
 800b47e:	1c4f      	addgt	r7, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b480:	460f      	movle	r7, r1
    if(x_at_y < abs_x) {
 800b482:	4547      	cmp	r7, r8
 800b484:	f6ff af60 	blt.w	800b348 <lv_draw_mask_line+0xbc>
    if(x_at_y > abs_x + len) {
 800b488:	eb03 0708 	add.w	r7, r3, r8
 800b48c:	42b9      	cmp	r1, r7
 800b48e:	f73f af6b 	bgt.w	800b368 <lv_draw_mask_line+0xdc>
    int32_t xsi = xs >> 8;
 800b492:	f344 2c8d 	sbfx	ip, r4, #10, #14
    int32_t xsf = xs & 0xFF;
 800b496:	f3c4 0787 	ubfx	r7, r4, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b49a:	4404      	add	r4, r0
    int32_t xei = xe >> 8;
 800b49c:	f344 298d 	sbfx	r9, r4, #10, #14
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b4a0:	0221      	lsls	r1, r4, #8
    k = xsi - abs_x;
 800b4a2:	ebac 0408 	sub.w	r4, ip, r8
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800b4a6:	45cc      	cmp	ip, r9
 800b4a8:	f000 8095 	beq.w	800b5d6 <lv_draw_mask_line+0x34a>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	da52      	bge.n	800b556 <lv_draw_mask_line+0x2ca>
 800b4b0:	f104 3aff 	add.w	sl, r4, #4294967295
 800b4b4:	2f00      	cmp	r7, #0
 800b4b6:	f000 808c 	beq.w	800b5d2 <lv_draw_mask_line+0x346>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b4ba:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 800b4bc:	2c00      	cmp	r4, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b4be:	f1c1 0100 	rsb	r1, r1, #0
 800b4c2:	fb07 f101 	mul.w	r1, r7, r1
 800b4c6:	ea4f 28a1 	mov.w	r8, r1, asr #10
            if(k >= 0 && k < len) {
 800b4ca:	db0c      	blt.n	800b4e6 <lv_draw_mask_line+0x25a>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	dd0a      	ble.n	800b4e6 <lv_draw_mask_line+0x25a>
                m = (y_inters * xsf) >> 9;
 800b4d0:	fb08 f107 	mul.w	r1, r8, r7
 800b4d4:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b4d8:	b10a      	cbz	r2, 800b4de <lv_draw_mask_line+0x252>
 800b4da:	43c9      	mvns	r1, r1
 800b4dc:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b4de:	5d28      	ldrb	r0, [r5, r4]
 800b4e0:	f7ff fec6 	bl	800b270 <mask_mix>
 800b4e4:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800b4e6:	f1ba 0f00 	cmp.w	sl, #0
 800b4ea:	db16      	blt.n	800b51a <lv_draw_mask_line+0x28e>
 800b4ec:	4553      	cmp	r3, sl
 800b4ee:	dd14      	ble.n	800b51a <lv_draw_mask_line+0x28e>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800b4f0:	69b2      	ldr	r2, [r6, #24]
 800b4f2:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b4f6:	f815 000a 	ldrb.w	r0, [r5, sl]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800b4fa:	4252      	negs	r2, r2
 800b4fc:	434a      	muls	r2, r1
 800b4fe:	1292      	asrs	r2, r2, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b500:	4351      	muls	r1, r2
                if(p->inv) m = 255 - m;
 800b502:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b506:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b50a:	0797      	lsls	r7, r2, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800b50c:	bf5c      	itt	pl
 800b50e:	43c9      	mvnpl	r1, r1
 800b510:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b512:	f7ff fead 	bl	800b270 <mask_mix>
 800b516:	f805 000a 	strb.w	r0, [r5, sl]
            if(p->inv) {
 800b51a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b51e:	0796      	lsls	r6, r2, #30
 800b520:	d514      	bpl.n	800b54c <lv_draw_mask_line+0x2c0>
                if(k > len) k = len;
 800b522:	4553      	cmp	r3, sl
 800b524:	f6ff aeff 	blt.w	800b326 <lv_draw_mask_line+0x9a>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800b528:	f1ba 0f00 	cmp.w	sl, #0
 800b52c:	f77f aefb 	ble.w	800b326 <lv_draw_mask_line+0x9a>
 800b530:	4651      	mov	r1, sl
 800b532:	e78e      	b.n	800b452 <lv_draw_mask_line+0x1c6>
        k++;
 800b534:	3401      	adds	r4, #1
 800b536:	429c      	cmp	r4, r3
 800b538:	bfa8      	it	ge
 800b53a:	461c      	movge	r4, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800b53c:	2c00      	cmp	r4, #0
 800b53e:	f43f aecc 	beq.w	800b2da <lv_draw_mask_line+0x4e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800b542:	f77f aef0 	ble.w	800b326 <lv_draw_mask_line+0x9a>
 800b546:	1b19      	subs	r1, r3, r4
 800b548:	1928      	adds	r0, r5, r4
 800b54a:	e78e      	b.n	800b46a <lv_draw_mask_line+0x1de>
            k += 2;
 800b54c:	1c60      	adds	r0, r4, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b54e:	4283      	cmp	r3, r0
 800b550:	db3b      	blt.n	800b5ca <lv_draw_mask_line+0x33e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800b552:	2800      	cmp	r0, #0
 800b554:	e785      	b.n	800b462 <lv_draw_mask_line+0x1d6>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800b556:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800b55a:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 800b55c:	2c00      	cmp	r4, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800b55e:	fb01 f107 	mul.w	r1, r1, r7
 800b562:	ea4f 28a1 	mov.w	r8, r1, asr #10
            if(k >= 0 && k < len) {
 800b566:	db0c      	blt.n	800b582 <lv_draw_mask_line+0x2f6>
 800b568:	42a3      	cmp	r3, r4
 800b56a:	dd0a      	ble.n	800b582 <lv_draw_mask_line+0x2f6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800b56c:	fb08 f707 	mul.w	r7, r8, r7
 800b570:	f3c7 2147 	ubfx	r1, r7, #9, #8
                if(p->inv) m = 255 - m;
 800b574:	b90a      	cbnz	r2, 800b57a <lv_draw_mask_line+0x2ee>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800b576:	43c9      	mvns	r1, r1
 800b578:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b57a:	5d28      	ldrb	r0, [r5, r4]
 800b57c:	f7ff fe78 	bl	800b270 <mask_mix>
 800b580:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800b582:	1c62      	adds	r2, r4, #1
 800b584:	d413      	bmi.n	800b5ae <lv_draw_mask_line+0x322>
 800b586:	4293      	cmp	r3, r2
 800b588:	dd11      	ble.n	800b5ae <lv_draw_mask_line+0x322>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800b58a:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
 800b58e:	69b0      	ldr	r0, [r6, #24]
 800b590:	4348      	muls	r0, r1
 800b592:	1280      	asrs	r0, r0, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800b594:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
 800b596:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = ((255 - y_inters) * x_inters) >> 9;
 800b59a:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800b59e:	0780      	lsls	r0, r0, #30
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b5a0:	5ca8      	ldrb	r0, [r5, r2]
                if(p->inv) m = 255 - m;
 800b5a2:	bf44      	itt	mi
 800b5a4:	43c9      	mvnmi	r1, r1
 800b5a6:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800b5a8:	f7ff fe62 	bl	800b270 <mask_mix>
 800b5ac:	54a8      	strb	r0, [r5, r2]
            if(p->inv) {
 800b5ae:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b5b2:	0792      	lsls	r2, r2, #30
 800b5b4:	d507      	bpl.n	800b5c6 <lv_draw_mask_line+0x33a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800b5b6:	42a3      	cmp	r3, r4
 800b5b8:	f6ff ae8f 	blt.w	800b2da <lv_draw_mask_line+0x4e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	f6ff aeb2 	blt.w	800b326 <lv_draw_mask_line+0x9a>
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	e745      	b.n	800b452 <lv_draw_mask_line+0x1c6>
            k++;
 800b5c6:	3402      	adds	r4, #2
 800b5c8:	e7b5      	b.n	800b536 <lv_draw_mask_line+0x2aa>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	e67f      	b.n	800b2ce <lv_draw_mask_line+0x42>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	e699      	b.n	800b306 <lv_draw_mask_line+0x7a>
 800b5d2:	4654      	mov	r4, sl
        xsf = 0xFF;
 800b5d4:	27ff      	movs	r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	db0d      	blt.n	800b5f6 <lv_draw_mask_line+0x36a>
 800b5da:	42a3      	cmp	r3, r4
 800b5dc:	dd0b      	ble.n	800b5f6 <lv_draw_mask_line+0x36a>
    int32_t xef = xe & 0xFF;
 800b5de:	f3c1 2187 	ubfx	r1, r1, #10, #8
            m = (xsf + xef) >> 1;
 800b5e2:	4439      	add	r1, r7
 800b5e4:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 800b5e8:	b10a      	cbz	r2, 800b5ee <lv_draw_mask_line+0x362>
 800b5ea:	43c9      	mvns	r1, r1
 800b5ec:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b5ee:	5d28      	ldrb	r0, [r5, r4]
 800b5f0:	f7ff fe3e 	bl	800b270 <mask_mix>
 800b5f4:	5528      	strb	r0, [r5, r4]
        if(p->inv) {
 800b5f6:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b5fa:	0792      	lsls	r2, r2, #30
 800b5fc:	d59a      	bpl.n	800b534 <lv_draw_mask_line+0x2a8>
            k = xsi - abs_x;
 800b5fe:	eba9 0108 	sub.w	r1, r9, r8
            if(k >= len) {
 800b602:	428b      	cmp	r3, r1
 800b604:	f77f ae69 	ble.w	800b2da <lv_draw_mask_line+0x4e>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800b608:	2900      	cmp	r1, #0
 800b60a:	f6ff ae8c 	blt.w	800b326 <lv_draw_mask_line+0x9a>
 800b60e:	e720      	b.n	800b452 <lv_draw_mask_line+0x1c6>

0800b610 <lv_draw_mask_angle>:
{
 800b610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b616:	4606      	mov	r6, r0
 800b618:	4691      	mov	r9, r2
 800b61a:	4688      	mov	r8, r1
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800b61c:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
{
 800b620:	461f      	mov	r7, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800b622:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800b626:	eba2 0c00 	sub.w	ip, r2, r0
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800b62a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800b62e:	1b09      	subs	r1, r1, r4
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800b630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b634:	2ab3      	cmp	r2, #179	; 0xb3
 800b636:	dc6c      	bgt.n	800b712 <lv_draw_mask_angle+0x102>
 800b638:	2bb3      	cmp	r3, #179	; 0xb3
 800b63a:	f300 80ce 	bgt.w	800b7da <lv_draw_mask_angle+0x1ca>
 800b63e:	2a00      	cmp	r2, #0
 800b640:	f000 80cc 	beq.w	800b7dc <lv_draw_mask_angle+0x1cc>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 80ce 	beq.w	800b7e6 <lv_draw_mask_angle+0x1d6>
 800b64a:	429a      	cmp	r2, r3
 800b64c:	f340 80cb 	ble.w	800b7e6 <lv_draw_mask_angle+0x1d6>
        if(abs_y < p->cfg.vertex_p.y) {
 800b650:	4548      	cmp	r0, r9
 800b652:	dd04      	ble.n	800b65e <lv_draw_mask_angle+0x4e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800b654:	2501      	movs	r5, #1
}
 800b656:	4628      	mov	r0, r5
 800b658:	b002      	add	sp, #8
 800b65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800b65e:	6d68      	ldr	r0, [r5, #84]	; 0x54
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b660:	b292      	uxth	r2, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800b662:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800b664:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800b668:	fb0c 4404 	mla	r4, ip, r4, r4
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800b66c:	f102 3cff 	add.w	ip, r2, #4294967295
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800b670:	1280      	asrs	r0, r0, #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800b672:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800b676:	ea4f 24a4 	mov.w	r4, r4, asr #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800b67a:	d83b      	bhi.n	800b6f4 <lv_draw_mask_angle+0xe4>
 800b67c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b680:	b29b      	uxth	r3, r3
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800b682:	1e5a      	subs	r2, r3, #1
 800b684:	2a59      	cmp	r2, #89	; 0x59
 800b686:	d83b      	bhi.n	800b700 <lv_draw_mask_angle+0xf0>
 800b688:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800b68c:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800b68e:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800b692:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800b694:	42bc      	cmp	r4, r7
 800b696:	bfa8      	it	ge
 800b698:	463c      	movge	r4, r7
        if(tmp > 0) {
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	dd36      	ble.n	800b70c <lv_draw_mask_angle+0xfc>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 800b69e:	f105 0310 	add.w	r3, r5, #16
 800b6a2:	464a      	mov	r2, r9
 800b6a4:	4641      	mov	r1, r8
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	b223      	sxth	r3, r4
 800b6ac:	f7ff fdee 	bl	800b28c <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	b918      	cbnz	r0, 800b6bc <lv_draw_mask_angle+0xac>
                lv_memset_00(&mask_buf[0], tmp);
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f00c f864 	bl	8017784 <lv_memset_00>
        if(tmp > len) tmp = len;
 800b6bc:	42bc      	cmp	r4, r7
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800b6be:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800b6c2:	bfa8      	it	ge
 800b6c4:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800b6c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800b6ca:	b2a1      	uxth	r1, r4
 800b6cc:	4426      	add	r6, r4
 800b6ce:	1a7b      	subs	r3, r7, r1
 800b6d0:	4441      	add	r1, r8
 800b6d2:	9500      	str	r5, [sp, #0]
 800b6d4:	b21b      	sxth	r3, r3
 800b6d6:	464a      	mov	r2, r9
 800b6d8:	b209      	sxth	r1, r1
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff fdd6 	bl	800b28c <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	b918      	cbnz	r0, 800b6ec <lv_draw_mask_angle+0xdc>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800b6e4:	1b39      	subs	r1, r7, r4
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f00c f84c 	bl	8017784 <lv_memset_00>
        if(res1 == res2) return res1;
 800b6ec:	45aa      	cmp	sl, r5
 800b6ee:	d0b2      	beq.n	800b656 <lv_draw_mask_angle+0x46>
        else return LV_DRAW_MASK_RES_CHANGED;
 800b6f0:	2502      	movs	r5, #2
 800b6f2:	e7b0      	b.n	800b656 <lv_draw_mask_angle+0x46>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800b6f4:	3a5b      	subs	r2, #91	; 0x5b
 800b6f6:	2ab2      	cmp	r2, #178	; 0xb2
 800b6f8:	bf98      	it	ls
 800b6fa:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800b6fe:	e7bf      	b.n	800b680 <lv_draw_mask_angle+0x70>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800b700:	3b5b      	subs	r3, #91	; 0x5b
 800b702:	2bb2      	cmp	r3, #178	; 0xb2
 800b704:	bf98      	it	ls
 800b706:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800b70a:	e7bf      	b.n	800b68c <lv_draw_mask_angle+0x7c>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800b70c:	f04f 0a01 	mov.w	sl, #1
 800b710:	e7d4      	b.n	800b6bc <lv_draw_mask_angle+0xac>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 800b712:	2ab4      	cmp	r2, #180	; 0xb4
 800b714:	d051      	beq.n	800b7ba <lv_draw_mask_angle+0x1aa>
 800b716:	2bb4      	cmp	r3, #180	; 0xb4
 800b718:	dd72      	ble.n	800b800 <lv_draw_mask_angle+0x1f0>
 800b71a:	429a      	cmp	r2, r3
 800b71c:	dd70      	ble.n	800b800 <lv_draw_mask_angle+0x1f0>
        if(abs_y > p->cfg.vertex_p.y) {
 800b71e:	4548      	cmp	r0, r9
 800b720:	db98      	blt.n	800b654 <lv_draw_mask_angle+0x44>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800b722:	6d68      	ldr	r0, [r5, #84]	; 0x54
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b724:	b292      	uxth	r2, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800b726:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800b728:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800b72c:	fb0c 4404 	mla	r4, ip, r4, r4
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b730:	f46f 7c87 	mvn.w	ip, #270	; 0x10e
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800b734:	1280      	asrs	r0, r0, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b736:	4494      	add	ip, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800b738:	12a4      	asrs	r4, r4, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b73a:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
 800b73e:	d82d      	bhi.n	800b79c <lv_draw_mask_angle+0x18c>
 800b740:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800b744:	b29b      	uxth	r3, r3
 800b746:	f46f 7287 	mvn.w	r2, #270	; 0x10e
 800b74a:	189a      	adds	r2, r3, r2
 800b74c:	2a58      	cmp	r2, #88	; 0x58
 800b74e:	d82b      	bhi.n	800b7a8 <lv_draw_mask_angle+0x198>
 800b750:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800b754:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800b756:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800b75a:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800b75c:	42bc      	cmp	r4, r7
 800b75e:	bfa8      	it	ge
 800b760:	463c      	movge	r4, r7
        if(tmp > 0) {
 800b762:	2c00      	cmp	r4, #0
 800b764:	dd26      	ble.n	800b7b4 <lv_draw_mask_angle+0x1a4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 800b766:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800b76a:	464a      	mov	r2, r9
 800b76c:	4641      	mov	r1, r8
 800b76e:	4630      	mov	r0, r6
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	b223      	sxth	r3, r4
 800b774:	f7ff fd8a 	bl	800b28c <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800b778:	4682      	mov	sl, r0
 800b77a:	b918      	cbnz	r0, 800b784 <lv_draw_mask_angle+0x174>
                lv_memset_00(&mask_buf[0], tmp);
 800b77c:	4621      	mov	r1, r4
 800b77e:	4630      	mov	r0, r6
 800b780:	f00c f800 	bl	8017784 <lv_memset_00>
        if(tmp > len) tmp = len;
 800b784:	42bc      	cmp	r4, r7
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800b786:	f105 0510 	add.w	r5, r5, #16
 800b78a:	bfa8      	it	ge
 800b78c:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800b78e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800b792:	b2a1      	uxth	r1, r4
 800b794:	4426      	add	r6, r4
 800b796:	1a7b      	subs	r3, r7, r1
 800b798:	4441      	add	r1, r8
 800b79a:	e79a      	b.n	800b6d2 <lv_draw_mask_angle+0xc2>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800b79c:	3a5b      	subs	r2, #91	; 0x5b
 800b79e:	2ab2      	cmp	r2, #178	; 0xb2
 800b7a0:	bf98      	it	ls
 800b7a2:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800b7a6:	e7cd      	b.n	800b744 <lv_draw_mask_angle+0x134>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800b7a8:	3b5b      	subs	r3, #91	; 0x5b
 800b7aa:	2bb2      	cmp	r3, #178	; 0xb2
 800b7ac:	bf98      	it	ls
 800b7ae:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800b7b2:	e7cf      	b.n	800b754 <lv_draw_mask_angle+0x144>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800b7b4:	f04f 0a01 	mov.w	sl, #1
 800b7b8:	e7e4      	b.n	800b784 <lv_draw_mask_angle+0x174>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800b7ba:	4548      	cmp	r0, r9
 800b7bc:	bfcc      	ite	gt
 800b7be:	2401      	movgt	r4, #1
 800b7c0:	2403      	movle	r4, #3
        if(p->cfg.end_angle == 180) {
 800b7c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7c6:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 800b7ca:	2bb4      	cmp	r3, #180	; 0xb4
 800b7cc:	d11c      	bne.n	800b808 <lv_draw_mask_angle+0x1f8>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800b7ce:	4548      	cmp	r0, r9
 800b7d0:	bfcc      	ite	gt
 800b7d2:	2003      	movgt	r0, #3
 800b7d4:	2001      	movle	r0, #1
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800b7d6:	bb5c      	cbnz	r4, 800b830 <lv_draw_mask_angle+0x220>
 800b7d8:	e02f      	b.n	800b83a <lv_draw_mask_angle+0x22a>
        else if(p->cfg.start_angle == 0) {
 800b7da:	b922      	cbnz	r2, 800b7e6 <lv_draw_mask_angle+0x1d6>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800b7dc:	4548      	cmp	r0, r9
 800b7de:	bfcc      	ite	gt
 800b7e0:	2403      	movgt	r4, #3
 800b7e2:	2401      	movle	r4, #1
 800b7e4:	e7ed      	b.n	800b7c2 <lv_draw_mask_angle+0x1b2>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800b7e6:	4548      	cmp	r0, r9
 800b7e8:	dc0c      	bgt.n	800b804 <lv_draw_mask_angle+0x1f4>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 800b7ea:	f105 0310 	add.w	r3, r5, #16
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	4641      	mov	r1, r8
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	f7ff fd48 	bl	800b28c <lv_draw_mask_line>
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	e7e0      	b.n	800b7c2 <lv_draw_mask_angle+0x1b2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800b800:	4548      	cmp	r0, r9
 800b802:	dcf2      	bgt.n	800b7ea <lv_draw_mask_angle+0x1da>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800b804:	2403      	movs	r4, #3
 800b806:	e7dc      	b.n	800b7c2 <lv_draw_mask_angle+0x1b2>
        else if(p->cfg.end_angle == 0) {
 800b808:	b923      	cbnz	r3, 800b814 <lv_draw_mask_angle+0x204>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800b80a:	4548      	cmp	r0, r9
 800b80c:	bfd4      	ite	le
 800b80e:	2003      	movle	r0, #3
 800b810:	2001      	movgt	r0, #1
 800b812:	e7e0      	b.n	800b7d6 <lv_draw_mask_angle+0x1c6>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800b814:	2bb3      	cmp	r3, #179	; 0xb3
 800b816:	dc12      	bgt.n	800b83e <lv_draw_mask_angle+0x22e>
 800b818:	4548      	cmp	r0, r9
 800b81a:	dc12      	bgt.n	800b842 <lv_draw_mask_angle+0x232>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800b81c:	353c      	adds	r5, #60	; 0x3c
 800b81e:	463b      	mov	r3, r7
 800b820:	464a      	mov	r2, r9
 800b822:	4641      	mov	r1, r8
 800b824:	4630      	mov	r0, r6
 800b826:	9500      	str	r5, [sp, #0]
 800b828:	f7ff fd30 	bl	800b28c <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800b82c:	b12c      	cbz	r4, 800b83a <lv_draw_mask_angle+0x22a>
 800b82e:	b120      	cbz	r0, 800b83a <lv_draw_mask_angle+0x22a>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 800b830:	2c03      	cmp	r4, #3
 800b832:	d108      	bne.n	800b846 <lv_draw_mask_angle+0x236>
 800b834:	2803      	cmp	r0, #3
 800b836:	f47f af5b 	bne.w	800b6f0 <lv_draw_mask_angle+0xe0>
 800b83a:	2500      	movs	r5, #0
 800b83c:	e70b      	b.n	800b656 <lv_draw_mask_angle+0x46>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800b83e:	4548      	cmp	r0, r9
 800b840:	dcec      	bgt.n	800b81c <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800b842:	2003      	movs	r0, #3
 800b844:	e7c7      	b.n	800b7d6 <lv_draw_mask_angle+0x1c6>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 800b846:	2c01      	cmp	r4, #1
 800b848:	f47f af52 	bne.w	800b6f0 <lv_draw_mask_angle+0xe0>
 800b84c:	2801      	cmp	r0, #1
 800b84e:	f47f af4f 	bne.w	800b6f0 <lv_draw_mask_angle+0xe0>
 800b852:	e6ff      	b.n	800b654 <lv_draw_mask_angle+0x44>

0800b854 <lv_draw_mask_radius>:
{
 800b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	b08b      	sub	sp, #44	; 0x2c
 800b85a:	460f      	mov	r7, r1
 800b85c:	4605      	mov	r5, r0
 800b85e:	461c      	mov	r4, r3
 800b860:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
 800b864:	f89a b012 	ldrb.w	fp, [sl, #18]
    dest->y1 = src->y1;
 800b868:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
    if(outer == false) {
 800b86c:	f01b 0101 	ands.w	r1, fp, #1
    dest->y2 = src->y2;
 800b870:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 800b874:	9101      	str	r1, [sp, #4]
 800b876:	d134      	bne.n	800b8e2 <lv_draw_mask_radius+0x8e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b878:	4282      	cmp	r2, r0
 800b87a:	da01      	bge.n	800b880 <lv_draw_mask_radius+0x2c>
                    return LV_DRAW_MASK_RES_TRANSP;
 800b87c:	2000      	movs	r0, #0
 800b87e:	e033      	b.n	800b8e8 <lv_draw_mask_radius+0x94>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b880:	429a      	cmp	r2, r3
 800b882:	dcfb      	bgt.n	800b87c <lv_draw_mask_radius+0x28>
    dest->x1 = src->x1;
 800b884:	f9ba c008 	ldrsh.w	ip, [sl, #8]
    int32_t radius = p->cfg.radius;
 800b888:	f9ba 9010 	ldrsh.w	r9, [sl, #16]
    dest->x2 = src->x2;
 800b88c:	f9ba 600c 	ldrsh.w	r6, [sl, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800b890:	ebac 0807 	sub.w	r8, ip, r7
 800b894:	eb0c 0109 	add.w	r1, ip, r9
 800b898:	428f      	cmp	r7, r1
 800b89a:	db04      	blt.n	800b8a6 <lv_draw_mask_radius+0x52>
 800b89c:	19e1      	adds	r1, r4, r7
 800b89e:	eba6 0e09 	sub.w	lr, r6, r9
 800b8a2:	4571      	cmp	r1, lr
 800b8a4:	dd07      	ble.n	800b8b6 <lv_draw_mask_radius+0x62>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800b8a6:	eb00 0109 	add.w	r1, r0, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800b8aa:	428a      	cmp	r2, r1
 800b8ac:	db37      	blt.n	800b91e <lv_draw_mask_radius+0xca>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800b8ae:	eba3 0109 	sub.w	r1, r3, r9
 800b8b2:	428a      	cmp	r2, r1
 800b8b4:	dc33      	bgt.n	800b91e <lv_draw_mask_radius+0xca>
        if(outer == false) {
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	bb1b      	cbnz	r3, 800b902 <lv_draw_mask_radius+0xae>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800b8ba:	4544      	cmp	r4, r8
 800b8bc:	dbde      	blt.n	800b87c <lv_draw_mask_radius+0x28>
            if(last >= 0) {
 800b8be:	f1b8 0f00 	cmp.w	r8, #0
 800b8c2:	db03      	blt.n	800b8cc <lv_draw_mask_radius+0x78>
                lv_memset_00(&mask_buf[0], last);
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f00b ff5c 	bl	8017784 <lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800b8cc:	1bf1      	subs	r1, r6, r7
 800b8ce:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	ddd3      	ble.n	800b87c <lv_draw_mask_radius+0x28>
            else if(first < len) {
 800b8d4:	4284      	cmp	r4, r0
 800b8d6:	dd0d      	ble.n	800b8f4 <lv_draw_mask_radius+0xa0>
                lv_memset_00(&mask_buf[first], len - first);
 800b8d8:	1a21      	subs	r1, r4, r0
                    lv_memset_00(&mask_buf[first], len_tmp);
 800b8da:	4428      	add	r0, r5
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800b8dc:	f00b ff52 	bl	8017784 <lv_memset_00>
 800b8e0:	e00d      	b.n	800b8fe <lv_draw_mask_radius+0xaa>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b8e2:	4282      	cmp	r2, r0
 800b8e4:	da03      	bge.n	800b8ee <lv_draw_mask_radius+0x9a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800b8e6:	2001      	movs	r0, #1
}
 800b8e8:	b00b      	add	sp, #44	; 0x2c
 800b8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	ddc8      	ble.n	800b884 <lv_draw_mask_radius+0x30>
 800b8f2:	e7f8      	b.n	800b8e6 <lv_draw_mask_radius+0x92>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800b8f4:	f1b8 0f00 	cmp.w	r8, #0
 800b8f8:	d101      	bne.n	800b8fe <lv_draw_mask_radius+0xaa>
 800b8fa:	4284      	cmp	r4, r0
 800b8fc:	d0f3      	beq.n	800b8e6 <lv_draw_mask_radius+0x92>
    return LV_DRAW_MASK_RES_CHANGED;
 800b8fe:	2002      	movs	r0, #2
 800b900:	e7f2      	b.n	800b8e8 <lv_draw_mask_radius+0x94>
            if(first < 0) first = 0;
 800b902:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
            if(first <= len) {
 800b906:	42a0      	cmp	r0, r4
 800b908:	dcf9      	bgt.n	800b8fe <lv_draw_mask_radius+0xaa>
                int32_t last =  rect.x2 - abs_x - first + 1;
 800b90a:	1bf1      	subs	r1, r6, r7
 800b90c:	1a09      	subs	r1, r1, r0
 800b90e:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800b910:	1843      	adds	r3, r0, r1
 800b912:	42a3      	cmp	r3, r4
 800b914:	dd00      	ble.n	800b918 <lv_draw_mask_radius+0xc4>
 800b916:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800b918:	2900      	cmp	r1, #0
 800b91a:	dbf0      	blt.n	800b8fe <lv_draw_mask_radius+0xaa>
 800b91c:	e7dd      	b.n	800b8da <lv_draw_mask_radius+0x86>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b91e:	1c71      	adds	r1, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b920:	b286      	uxth	r6, r0
 800b922:	1c58      	adds	r0, r3, #1
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800b924:	fb09 fb09 	mul.w	fp, r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b928:	eba1 070c 	sub.w	r7, r1, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b92c:	1b80      	subs	r0, r0, r6
    abs_y -= rect.y1;
 800b92e:	1b96      	subs	r6, r2, r6
    int32_t w = lv_area_get_width(&rect);
 800b930:	b23f      	sxth	r7, r7
    abs_y -= rect.y1;
 800b932:	b236      	sxth	r6, r6
    int32_t h = lv_area_get_height(&rect);
 800b934:	b200      	sxth	r0, r0
    if(abs_y < radius || abs_y > h - radius - 1) {
 800b936:	45b1      	cmp	r9, r6
 800b938:	f300 81a4 	bgt.w	800bc84 <lv_draw_mask_radius+0x430>
 800b93c:	eba0 0309 	sub.w	r3, r0, r9
 800b940:	429e      	cmp	r6, r3
 800b942:	dbdc      	blt.n	800b8fe <lv_draw_mask_radius+0xaa>
            y = radius - (h - abs_y) + 1;
 800b944:	1b86      	subs	r6, r0, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800b946:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            if((y - 1) == p->y_prev) {
 800b94a:	f8da 3014 	ldr.w	r3, [sl, #20]
            y = radius - (h - abs_y) + 1;
 800b94e:	eba9 0006 	sub.w	r0, r9, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800b952:	bfd4      	ite	le
 800b954:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800b958:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
 800b95c:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
 800b95e:	f100 0601 	add.w	r6, r0, #1
            if((y - 1) == p->y_prev) {
 800b962:	d06c      	beq.n	800ba3e <lv_draw_mask_radius+0x1ea>
                lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800b964:	a907      	add	r1, sp, #28
 800b966:	fb00 b010 	mls	r0, r0, r0, fp
 800b96a:	9202      	str	r2, [sp, #8]
 800b96c:	f00b fc7e 	bl	801726c <lv_sqrt>
 800b970:	9a02      	ldr	r2, [sp, #8]
 800b972:	e067      	b.n	800ba44 <lv_draw_mask_radius+0x1f0>
                x0.i = p->y_prev_x.i;
 800b974:	f8da 3018 	ldr.w	r3, [sl, #24]
 800b978:	9306      	str	r3, [sp, #24]
            lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800b97a:	1e73      	subs	r3, r6, #1
 800b97c:	a907      	add	r1, sp, #28
 800b97e:	9203      	str	r2, [sp, #12]
 800b980:	fb03 b013 	mls	r0, r3, r3, fp
 800b984:	9302      	str	r3, [sp, #8]
 800b986:	f00b fc71 	bl	801726c <lv_sqrt>
            p->y_prev = y - 1;
 800b98a:	9b02      	ldr	r3, [sp, #8]
 800b98c:	9a03      	ldr	r2, [sp, #12]
 800b98e:	f8ca 3014 	str.w	r3, [sl, #20]
            p->y_prev_x.i = x1.i;
 800b992:	9b07      	ldr	r3, [sp, #28]
 800b994:	f8ca 3018 	str.w	r3, [sl, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800b998:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b99c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800b9a0:	3901      	subs	r1, #1
 800b9a2:	428b      	cmp	r3, r1
 800b9a4:	d107      	bne.n	800b9b6 <lv_draw_mask_radius+0x162>
 800b9a6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800b9aa:	b921      	cbnz	r1, 800b9b6 <lv_draw_mask_radius+0x162>
            x1.f = 0xFF;
 800b9ac:	21ff      	movs	r1, #255	; 0xff
            x1.i--;
 800b9ae:	f8ad 301c 	strh.w	r3, [sp, #28]
            x1.f = 0xFF;
 800b9b2:	f8ad 101e 	strh.w	r1, [sp, #30]
        if(x0.i == x1.i) {
 800b9b6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b9ba:	4299      	cmp	r1, r3
 800b9bc:	d15b      	bne.n	800ba76 <lv_draw_mask_radius+0x222>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800b9be:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800b9c2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800b9c6:	440a      	add	r2, r1
            if(outer) m = 255 - m;
 800b9c8:	9901      	ldr	r1, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800b9ca:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
 800b9ce:	b109      	cbz	r1, 800b9d4 <lv_draw_mask_radius+0x180>
 800b9d0:	43d2      	mvns	r2, r2
 800b9d2:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
 800b9d4:	eba9 0903 	sub.w	r9, r9, r3
 800b9d8:	f109 39ff 	add.w	r9, r9, #4294967295
            if(kl >= 0 && kl < len) {
 800b9dc:	eb18 0609 	adds.w	r6, r8, r9
 800b9e0:	d406      	bmi.n	800b9f0 <lv_draw_mask_radius+0x19c>
 800b9e2:	42b4      	cmp	r4, r6
 800b9e4:	dd04      	ble.n	800b9f0 <lv_draw_mask_radius+0x19c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800b9e6:	5da8      	ldrb	r0, [r5, r6]
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	f7ff fc41 	bl	800b270 <mask_mix>
 800b9ee:	55a8      	strb	r0, [r5, r6]
            int32_t kr = k + (w - ofs - 1);
 800b9f0:	eba7 0909 	sub.w	r9, r7, r9
 800b9f4:	f109 30ff 	add.w	r0, r9, #4294967295
            if(kr >= 0 && kr < len) {
 800b9f8:	eb10 0808 	adds.w	r8, r0, r8
 800b9fc:	d408      	bmi.n	800ba10 <lv_draw_mask_radius+0x1bc>
 800b9fe:	4544      	cmp	r4, r8
 800ba00:	dd06      	ble.n	800ba10 <lv_draw_mask_radius+0x1bc>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800ba02:	f815 0008 	ldrb.w	r0, [r5, r8]
 800ba06:	4611      	mov	r1, r2
 800ba08:	f7ff fc32 	bl	800b270 <mask_mix>
 800ba0c:	f805 0008 	strb.w	r0, [r5, r8]
            if(outer == false) {
 800ba10:	9b01      	ldr	r3, [sp, #4]
 800ba12:	bb23      	cbnz	r3, 800ba5e <lv_draw_mask_radius+0x20a>
                if(kl > len)  {
 800ba14:	42b4      	cmp	r4, r6
 800ba16:	f6ff af31 	blt.w	800b87c <lv_draw_mask_radius+0x28>
                if(kl >= 0) {
 800ba1a:	2e00      	cmp	r6, #0
 800ba1c:	db03      	blt.n	800ba26 <lv_draw_mask_radius+0x1d2>
                    lv_memset_00(&mask_buf[0], kl);
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4628      	mov	r0, r5
 800ba22:	f00b feaf 	bl	8017784 <lv_memset_00>
                if(kr < 0) {
 800ba26:	f118 0801 	adds.w	r8, r8, #1
 800ba2a:	f53f af27 	bmi.w	800b87c <lv_draw_mask_radius+0x28>
                if(kr <= len) {
 800ba2e:	4544      	cmp	r4, r8
 800ba30:	f6ff af65 	blt.w	800b8fe <lv_draw_mask_radius+0xaa>
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800ba34:	eba4 0108 	sub.w	r1, r4, r8
 800ba38:	eb05 0008 	add.w	r0, r5, r8
 800ba3c:	e74e      	b.n	800b8dc <lv_draw_mask_radius+0x88>
                x1.i = p->y_prev_x.i;
 800ba3e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800ba42:	9307      	str	r3, [sp, #28]
            lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800ba44:	a906      	add	r1, sp, #24
 800ba46:	fb06 b016 	mls	r0, r6, r6, fp
 800ba4a:	9202      	str	r2, [sp, #8]
 800ba4c:	f00b fc0e 	bl	801726c <lv_sqrt>
            p->y_prev_x.i = x0.i;
 800ba50:	9b06      	ldr	r3, [sp, #24]
 800ba52:	9a02      	ldr	r2, [sp, #8]
            p->y_prev = y;
 800ba54:	f8ca 6014 	str.w	r6, [sl, #20]
            p->y_prev_x.i = x0.i;
 800ba58:	f8ca 3018 	str.w	r3, [sl, #24]
 800ba5c:	e79c      	b.n	800b998 <lv_draw_mask_radius+0x144>
                kl++;
 800ba5e:	1c70      	adds	r0, r6, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800ba60:	4544      	cmp	r4, r8
 800ba62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800ba66:	bfac      	ite	ge
 800ba68:	eba8 0100 	subge.w	r1, r8, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800ba6c:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800ba6e:	42a0      	cmp	r0, r4
 800ba70:	f6bf af45 	bge.w	800b8fe <lv_draw_mask_radius+0xaa>
 800ba74:	e750      	b.n	800b918 <lv_draw_mask_radius+0xc4>
            int32_t ofs = radius - (x0.i + 1);
 800ba76:	3301      	adds	r3, #1
 800ba78:	eba9 0903 	sub.w	r9, r9, r3
            if(outer) {
 800ba7c:	9b01      	ldr	r3, [sp, #4]
            int32_t kl = k + ofs;
 800ba7e:	eb08 0a09 	add.w	sl, r8, r9
            int32_t kr = k + (w - ofs - 1);
 800ba82:	eba7 0909 	sub.w	r9, r7, r9
 800ba86:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba8a:	44c8      	add	r8, r9
            if(outer) {
 800ba8c:	b18b      	cbz	r3, 800bab2 <lv_draw_mask_radius+0x25e>
                int32_t first = kl + 1;
 800ba8e:	f10a 0001 	add.w	r0, sl, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800ba92:	4544      	cmp	r4, r8
 800ba94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800ba98:	bfac      	ite	ge
 800ba9a:	eba8 0100 	subge.w	r1, r8, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800ba9e:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800baa0:	42a0      	cmp	r0, r4
 800baa2:	da06      	bge.n	800bab2 <lv_draw_mask_radius+0x25e>
 800baa4:	2900      	cmp	r1, #0
 800baa6:	db04      	blt.n	800bab2 <lv_draw_mask_radius+0x25e>
                    lv_memset_00(&mask_buf[first], len_tmp);
 800baa8:	4428      	add	r0, r5
 800baaa:	9202      	str	r2, [sp, #8]
 800baac:	f00b fe6a 	bl	8017784 <lv_memset_00>
 800bab0:	9a02      	ldr	r2, [sp, #8]
            uint32_t i = x0.i + 1;
 800bab2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800bab6:	a908      	add	r1, sp, #32
 800bab8:	9202      	str	r2, [sp, #8]
 800baba:	fb07 b017 	mls	r0, r7, r7, fp
            uint32_t i = x0.i + 1;
 800babe:	f107 0901 	add.w	r9, r7, #1
            lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800bac2:	f00b fbd3 	bl	801726c <lv_sqrt>
            if(y_prev.f == 0) {
 800bac6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800baca:	9a02      	ldr	r2, [sp, #8]
 800bacc:	b93b      	cbnz	r3, 800bade <lv_draw_mask_radius+0x28a>
                y_prev.i--;
 800bace:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
 800bad8:	23ff      	movs	r3, #255	; 0xff
 800bada:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
 800bade:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bae2:	42b3      	cmp	r3, r6
 800bae4:	db33      	blt.n	800bb4e <lv_draw_mask_radius+0x2fa>
                lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800bae6:	a909      	add	r1, sp, #36	; 0x24
 800bae8:	fb09 b019 	mls	r0, r9, r9, fp
 800baec:	f00b fbbe 	bl	801726c <lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800baf0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800baf4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800baf8:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 800bafc:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800bb00:	434b      	muls	r3, r1
                if(outer) m = 255 - m;
 800bb02:	9901      	ldr	r1, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800bb04:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800bb08:	b909      	cbnz	r1, 800bb0e <lv_draw_mask_radius+0x2ba>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800bb0a:	43db      	mvns	r3, r3
 800bb0c:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bb0e:	f1ba 0f00 	cmp.w	sl, #0
 800bb12:	db08      	blt.n	800bb26 <lv_draw_mask_radius+0x2d2>
 800bb14:	4554      	cmp	r4, sl
 800bb16:	dd06      	ble.n	800bb26 <lv_draw_mask_radius+0x2d2>
 800bb18:	f815 000a 	ldrb.w	r0, [r5, sl]
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	f7ff fba7 	bl	800b270 <mask_mix>
 800bb22:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bb26:	f1b8 0f00 	cmp.w	r8, #0
 800bb2a:	db08      	blt.n	800bb3e <lv_draw_mask_radius+0x2ea>
 800bb2c:	4544      	cmp	r4, r8
 800bb2e:	dd06      	ble.n	800bb3e <lv_draw_mask_radius+0x2ea>
 800bb30:	f815 0008 	ldrb.w	r0, [r5, r8]
 800bb34:	4619      	mov	r1, r3
 800bb36:	f7ff fb9b 	bl	800b270 <mask_mix>
 800bb3a:	f805 0008 	strb.w	r0, [r5, r8]
                kl--;
 800bb3e:	f10a 3aff 	add.w	sl, sl, #4294967295
                kr++;
 800bb42:	f108 0801 	add.w	r8, r8, #1
                i++;
 800bb46:	f107 0902 	add.w	r9, r7, #2
                y_prev.f = y_next.f;
 800bb4a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
            for(; i <= x1.i; i++) {
 800bb4e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800bb52:	464f      	mov	r7, r9
 800bb54:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
 800bb58:	4646      	mov	r6, r8
            for(; i <= x1.i; i++) {
 800bb5a:	9302      	str	r3, [sp, #8]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bb62:	2100      	movs	r1, #0
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	9304      	str	r3, [sp, #16]
 800bb68:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800bb6c:	9303      	str	r3, [sp, #12]
 800bb6e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            for(; i <= x1.i; i++) {
 800bb72:	9802      	ldr	r0, [sp, #8]
 800bb74:	42b8      	cmp	r0, r7
 800bb76:	d251      	bcs.n	800bc1c <lv_draw_mask_radius+0x3c8>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	3201      	adds	r2, #1
 800bb7c:	4591      	cmp	r9, r2
 800bb7e:	eba2 0009 	sub.w	r0, r2, r9
 800bb82:	eba9 0602 	sub.w	r6, r9, r2
 800bb86:	bf84      	itt	hi
 800bb88:	2000      	movhi	r0, #0
 800bb8a:	2600      	movhi	r6, #0
 800bb8c:	4480      	add	r8, r0
 800bb8e:	44b2      	add	sl, r6
 800bb90:	b131      	cbz	r1, 800bba0 <lv_draw_mask_radius+0x34c>
 800bb92:	9a03      	ldr	r2, [sp, #12]
 800bb94:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
 800bb98:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800bb9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
 800bba0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800bba4:	b323      	cbz	r3, 800bbf0 <lv_draw_mask_radius+0x39c>
                m = (y_prev.f * x1.f) >> 9;
 800bba6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
                if(outer) m = 255 - m;
 800bbaa:	9a01      	ldr	r2, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
 800bbac:	434b      	muls	r3, r1
 800bbae:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800bbb2:	b10a      	cbz	r2, 800bbb8 <lv_draw_mask_radius+0x364>
 800bbb4:	43db      	mvns	r3, r3
 800bbb6:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bbb8:	f1ba 0f00 	cmp.w	sl, #0
 800bbbc:	db08      	blt.n	800bbd0 <lv_draw_mask_radius+0x37c>
 800bbbe:	4554      	cmp	r4, sl
 800bbc0:	dd06      	ble.n	800bbd0 <lv_draw_mask_radius+0x37c>
 800bbc2:	f815 000a 	ldrb.w	r0, [r5, sl]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	f7ff fb52 	bl	800b270 <mask_mix>
 800bbcc:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bbd0:	f1b8 0f00 	cmp.w	r8, #0
 800bbd4:	db08      	blt.n	800bbe8 <lv_draw_mask_radius+0x394>
 800bbd6:	4544      	cmp	r4, r8
 800bbd8:	dd06      	ble.n	800bbe8 <lv_draw_mask_radius+0x394>
 800bbda:	f815 0008 	ldrb.w	r0, [r5, r8]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	f7ff fb46 	bl	800b270 <mask_mix>
 800bbe4:	f805 0008 	strb.w	r0, [r5, r8]
                kl--;
 800bbe8:	f10a 3aff 	add.w	sl, sl, #4294967295
                kr++;
 800bbec:	f108 0801 	add.w	r8, r8, #1
            if(outer == 0) {
 800bbf0:	9b01      	ldr	r3, [sp, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f47f ae83 	bne.w	800b8fe <lv_draw_mask_radius+0xaa>
                kl++;
 800bbf8:	f10a 0101 	add.w	r1, sl, #1
                if(kl > len) {
 800bbfc:	428c      	cmp	r4, r1
 800bbfe:	f6ff ae3d 	blt.w	800b87c <lv_draw_mask_radius+0x28>
                if(kl >= 0) lv_memset_00(&mask_buf[0], kl);
 800bc02:	2900      	cmp	r1, #0
 800bc04:	db02      	blt.n	800bc0c <lv_draw_mask_radius+0x3b8>
 800bc06:	4628      	mov	r0, r5
 800bc08:	f00b fdbc 	bl	8017784 <lv_memset_00>
                if(kr < 0) {
 800bc0c:	f1b8 0f00 	cmp.w	r8, #0
 800bc10:	f6ff ae34 	blt.w	800b87c <lv_draw_mask_radius+0x28>
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800bc14:	4544      	cmp	r4, r8
 800bc16:	f77f ae72 	ble.w	800b8fe <lv_draw_mask_radius+0xaa>
 800bc1a:	e70b      	b.n	800ba34 <lv_draw_mask_radius+0x1e0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800bc1c:	f3cc 130f 	ubfx	r3, ip, #4, #16
 800bc20:	9904      	ldr	r1, [sp, #16]
 800bc22:	1859      	adds	r1, r3, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800bc24:	fb07 b317 	mls	r3, r7, r7, fp
    uint32_t raw2 = raw * raw;
 800bc28:	fb01 f001 	mul.w	r0, r1, r1

    int32_t d = x - raw2;
 800bc2c:	ebc0 2303 	rsb	r3, r0, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800bc30:	0048      	lsls	r0, r1, #1
 800bc32:	fb93 f3f0 	sdiv	r3, r3, r0
 800bc36:	440b      	add	r3, r1
                if(outer) m = 255 - m;
 800bc38:	9801      	ldr	r0, [sp, #4]

    q->i = d >> 4;
 800bc3a:	f3c3 110f 	ubfx	r1, r3, #4, #16
    q->f = (d & 0xF) << 4;
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    q->i = d >> 4;
 800bc44:	9103      	str	r1, [sp, #12]
                m = (y_prev.f + y_next.f) >> 1;
 800bc46:	eb0c 0103 	add.w	r1, ip, r3
 800bc4a:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
 800bc4e:	b108      	cbz	r0, 800bc54 <lv_draw_mask_radius+0x400>
 800bc50:	43c9      	mvns	r1, r1
 800bc52:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	db07      	blt.n	800bc68 <lv_draw_mask_radius+0x414>
 800bc58:	4294      	cmp	r4, r2
 800bc5a:	dd05      	ble.n	800bc68 <lv_draw_mask_radius+0x414>
 800bc5c:	5ca8      	ldrb	r0, [r5, r2]
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	f7ff fb06 	bl	800b270 <mask_mix>
 800bc64:	9905      	ldr	r1, [sp, #20]
 800bc66:	54a8      	strb	r0, [r5, r2]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bc68:	2e00      	cmp	r6, #0
 800bc6a:	db05      	blt.n	800bc78 <lv_draw_mask_radius+0x424>
 800bc6c:	42b4      	cmp	r4, r6
 800bc6e:	dd03      	ble.n	800bc78 <lv_draw_mask_radius+0x424>
 800bc70:	5da8      	ldrb	r0, [r5, r6]
 800bc72:	f7ff fafd 	bl	800b270 <mask_mix>
 800bc76:	55a8      	strb	r0, [r5, r6]
                kl--;
 800bc78:	3a01      	subs	r2, #1
                kr++;
 800bc7a:	3601      	adds	r6, #1
            for(; i <= x1.i; i++) {
 800bc7c:	3701      	adds	r7, #1
                y_prev.f = y_next.f;
 800bc7e:	469c      	mov	ip, r3
            for(; i <= x1.i; i++) {
 800bc80:	2101      	movs	r1, #1
 800bc82:	e776      	b.n	800bb72 <lv_draw_mask_radius+0x31e>
        if(radius <= 256) sqrt_mask = 0x800;
 800bc84:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - abs_y;
 800bc88:	eba9 0606 	sub.w	r6, r9, r6
            if(y == p->y_prev) {
 800bc8c:	f8da 3014 	ldr.w	r3, [sl, #20]
        if(radius <= 256) sqrt_mask = 0x800;
 800bc90:	bfd4      	ite	le
 800bc92:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800bc96:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if(y == p->y_prev) {
 800bc9a:	42b3      	cmp	r3, r6
 800bc9c:	f43f ae6a 	beq.w	800b974 <lv_draw_mask_radius+0x120>
                lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800bca0:	a906      	add	r1, sp, #24
 800bca2:	fb06 b016 	mls	r0, r6, r6, fp
 800bca6:	9202      	str	r2, [sp, #8]
 800bca8:	f00b fae0 	bl	801726c <lv_sqrt>
 800bcac:	9a02      	ldr	r2, [sp, #8]
 800bcae:	e664      	b.n	800b97a <lv_draw_mask_radius+0x126>

0800bcb0 <lv_draw_mask_add>:
{
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800bcb4:	4c08      	ldr	r4, [pc, #32]	; (800bcd8 <lv_draw_mask_add+0x28>)
 800bcb6:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800bcc0:	b12e      	cbz	r6, 800bcce <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	2b10      	cmp	r3, #16
 800bcc6:	d1f6      	bne.n	800bcb6 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bccc:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800bcce:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    return i;
 800bcd2:	b210      	sxth	r0, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800bcd4:	6069      	str	r1, [r5, #4]
    return i;
 800bcd6:	e7f9      	b.n	800bccc <lv_draw_mask_add+0x1c>
 800bcd8:	2000b54c 	.word	0x2000b54c

0800bcdc <lv_draw_mask_apply>:
{
 800bcdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	4607      	mov	r7, r0
 800bce2:	4688      	mov	r8, r1
 800bce4:	4691      	mov	r9, r2
 800bce6:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 800bce8:	4e0c      	ldr	r6, [pc, #48]	; (800bd1c <lv_draw_mask_apply+0x40>)
    bool changed = false;
 800bcea:	2500      	movs	r5, #0
    while(m->param) {
 800bcec:	6834      	ldr	r4, [r6, #0]
 800bcee:	b934      	cbnz	r4, 800bcfe <lv_draw_mask_apply+0x22>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	bf14      	ite	ne
 800bcf4:	2002      	movne	r0, #2
 800bcf6:	2001      	moveq	r0, #1
}
 800bcf8:	b002      	add	sp, #8
 800bcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800bcfe:	9400      	str	r4, [sp, #0]
 800bd00:	4653      	mov	r3, sl
 800bd02:	6824      	ldr	r4, [r4, #0]
 800bd04:	464a      	mov	r2, r9
 800bd06:	4641      	mov	r1, r8
 800bd08:	4638      	mov	r0, r7
 800bd0a:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d0f3      	beq.n	800bcf8 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800bd10:	2802      	cmp	r0, #2
        m++;
 800bd12:	f106 0608 	add.w	r6, r6, #8
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800bd16:	bf08      	it	eq
 800bd18:	2501      	moveq	r5, #1
        m++;
 800bd1a:	e7e7      	b.n	800bcec <lv_draw_mask_apply+0x10>
 800bd1c:	2000b54c 	.word	0x2000b54c

0800bd20 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	f04f 0200 	mov.w	r2, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800bd26:	bf17      	itett	ne
 800bd28:	4b06      	ldrne	r3, [pc, #24]	; (800bd44 <lv_draw_mask_remove_id+0x24>)
    void * p = NULL;
 800bd2a:	4611      	moveq	r1, r2
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800bd2c:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800bd30:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800bd34:	bf18      	it	ne
 800bd36:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
}
 800bd3a:	4608      	mov	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800bd3c:	bf18      	it	ne
 800bd3e:	605a      	strne	r2, [r3, #4]
}
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	2000b54c 	.word	0x2000b54c

0800bd48 <lv_draw_mask_remove_custom>:
{
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <lv_draw_mask_remove_custom+0x24>)
 800bd4c:	b530      	push	{r4, r5, lr}
    void * p = NULL;
 800bd4e:	4611      	mov	r1, r2
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800bd50:	4614      	mov	r4, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800bd52:	685d      	ldr	r5, [r3, #4]
 800bd54:	3201      	adds	r2, #1
 800bd56:	4285      	cmp	r5, r0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800bd58:	bf04      	itt	eq
 800bd5a:	6819      	ldreq	r1, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 800bd5c:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800bd60:	2a10      	cmp	r2, #16
 800bd62:	f103 0308 	add.w	r3, r3, #8
 800bd66:	d1f4      	bne.n	800bd52 <lv_draw_mask_remove_custom+0xa>
}
 800bd68:	4608      	mov	r0, r1
 800bd6a:	bd30      	pop	{r4, r5, pc}
 800bd6c:	2000b54c 	.word	0x2000b54c

0800bd70 <lv_draw_mask_get_cnt>:
{
 800bd70:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800bd72:	4a05      	ldr	r2, [pc, #20]	; (800bd88 <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
 800bd74:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800bd76:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bd7a:	b109      	cbz	r1, 800bd80 <lv_draw_mask_get_cnt+0x10>
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800bd80:	3301      	adds	r3, #1
 800bd82:	2b10      	cmp	r3, #16
 800bd84:	d1f7      	bne.n	800bd76 <lv_draw_mask_get_cnt+0x6>
}
 800bd86:	4770      	bx	lr
 800bd88:	2000b54c 	.word	0x2000b54c

0800bd8c <lv_draw_mask_line_points_init>:
{
 800bd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd90:	4615      	mov	r5, r2
 800bd92:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800bd96:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800bd98:	212c      	movs	r1, #44	; 0x2c
{
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4698      	mov	r8, r3
 800bd9e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800bda2:	f00b fcef 	bl	8017784 <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800bda6:	42b5      	cmp	r5, r6
 800bda8:	d106      	bne.n	800bdb8 <lv_draw_mask_line_points_init+0x2c>
 800bdaa:	f1b9 0f03 	cmp.w	r9, #3
 800bdae:	d10b      	bne.n	800bdc8 <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 800bdb0:	3d01      	subs	r5, #1
        p2y--;
 800bdb2:	3e01      	subs	r6, #1
        p1y--;
 800bdb4:	b22d      	sxth	r5, r5
        p2y--;
 800bdb6:	b236      	sxth	r6, r6
    if(p1y > p2y) {
 800bdb8:	42b5      	cmp	r5, r6
 800bdba:	dd05      	ble.n	800bdc8 <lv_draw_mask_line_points_init+0x3c>
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4635      	mov	r5, r6
 800bdc0:	4616      	mov	r6, r2
 800bdc2:	463a      	mov	r2, r7
        p1x = t;
 800bdc4:	4647      	mov	r7, r8
        p2x = p1x;
 800bdc6:	4690      	mov	r8, r2
    param->cfg.side = side;
 800bdc8:	7c22      	ldrb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bdca:	eba8 0307 	sub.w	r3, r8, r7
    param->cfg.p1.y = p1y;
 800bdce:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
 800bdd0:	f369 0201 	bfi	r2, r9, #0, #2
    param->origo.y = p1y;
 800bdd4:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bdd6:	1b75      	subs	r5, r6, r5
 800bdd8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    param->cfg.side = side;
 800bddc:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bdde:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800bde2:	482f      	ldr	r0, [pc, #188]	; (800bea0 <lv_draw_mask_line_points_init+0x114>)
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bde4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    param->cfg.p1.x = p1x;
 800bde8:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bdea:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
    param->cfg.p2.x = p2x;
 800bdee:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800bdf2:	81e6      	strh	r6, [r4, #14]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bdf4:	4291      	cmp	r1, r2
 800bdf6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->origo.x = p1x;
 800bdfa:	8267      	strh	r7, [r4, #18]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800bdfc:	bfd4      	ite	le
 800bdfe:	2100      	movle	r1, #0
 800be00:	2101      	movgt	r1, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800be02:	6020      	str	r0, [r4, #0]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800be04:	f361 0200 	bfi	r2, r1, #0, #1
    param->yx_steep = 0;
 800be08:	2100      	movs	r1, #0
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800be0a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->flat) {
 800be0e:	07d2      	lsls	r2, r2, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800be10:	7121      	strb	r1, [r4, #4]
    param->xy_steep = 0;
 800be12:	e9c4 1106 	strd	r1, r1, [r4, #24]
    if(param->flat) {
 800be16:	d524      	bpl.n	800be62 <lv_draw_mask_line_points_init+0xd6>
        if(dx) {
 800be18:	b133      	cbz	r3, 800be28 <lv_draw_mask_line_points_init+0x9c>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800be1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800be1e:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 800be22:	436a      	muls	r2, r5
 800be24:	1292      	asrs	r2, r2, #10
 800be26:	61e2      	str	r2, [r4, #28]
        if(dy) {
 800be28:	b135      	cbz	r5, 800be38 <lv_draw_mask_line_points_init+0xac>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800be2a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800be2e:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
 800be32:	436b      	muls	r3, r5
 800be34:	129b      	asrs	r3, r3, #10
 800be36:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 800be38:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800be3a:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800be3c:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800be3e:	f012 0203 	ands.w	r2, r2, #3
 800be42:	6a21      	ldr	r1, [r4, #32]
 800be44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800be48:	d11d      	bne.n	800be86 <lv_draw_mask_line_points_init+0xfa>
 800be4a:	f36f 0341 	bfc	r3, #1, #1
    if(param->steep < 0) param->spx = -param->spx;
 800be4e:	2900      	cmp	r1, #0
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800be50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800be54:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 800be58:	bfb8      	it	lt
 800be5a:	425b      	neglt	r3, r3
 800be5c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800be5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 800be62:	b135      	cbz	r5, 800be72 <lv_draw_mask_line_points_init+0xe6>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800be64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800be68:	fb92 f2f5 	sdiv	r2, r2, r5
            param->xy_steep = (m * dx) >> 10;
 800be6c:	435a      	muls	r2, r3
 800be6e:	1292      	asrs	r2, r2, #10
 800be70:	61a2      	str	r2, [r4, #24]
        if(dx) {
 800be72:	b133      	cbz	r3, 800be82 <lv_draw_mask_line_points_init+0xf6>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800be74:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800be78:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800be7c:	435d      	muls	r5, r3
 800be7e:	12ad      	asrs	r5, r5, #10
 800be80:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800be82:	69a3      	ldr	r3, [r4, #24]
 800be84:	e7d9      	b.n	800be3a <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800be86:	2a01      	cmp	r2, #1
 800be88:	d102      	bne.n	800be90 <lv_draw_mask_line_points_init+0x104>
 800be8a:	f043 0302 	orr.w	r3, r3, #2
 800be8e:	e7de      	b.n	800be4e <lv_draw_mask_line_points_init+0xc2>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800be90:	2a02      	cmp	r2, #2
 800be92:	d102      	bne.n	800be9a <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 800be94:	2900      	cmp	r1, #0
 800be96:	dcf8      	bgt.n	800be8a <lv_draw_mask_line_points_init+0xfe>
 800be98:	e7d7      	b.n	800be4a <lv_draw_mask_line_points_init+0xbe>
        if(param->steep > 0) param->inv = 0;
 800be9a:	2900      	cmp	r1, #0
 800be9c:	dcd5      	bgt.n	800be4a <lv_draw_mask_line_points_init+0xbe>
 800be9e:	e7f4      	b.n	800be8a <lv_draw_mask_line_points_init+0xfe>
 800bea0:	0800b28d 	.word	0x0800b28d

0800bea4 <lv_draw_mask_line_angle_init>:
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800bea4:	2bb4      	cmp	r3, #180	; 0xb4
{
 800bea6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800beaa:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800beac:	bfc8      	it	gt
 800beae:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
{
 800beb2:	4606      	mov	r6, r0
 800beb4:	4690      	mov	r8, r2
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800beb6:	bfc8      	it	gt
 800beb8:	b224      	sxthgt	r4, r4
{
 800beba:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800bebc:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800bec0:	b200      	sxth	r0, r0
 800bec2:	f00b f983 	bl	80171cc <lv_trigo_sin>
 800bec6:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 800bec8:	4620      	mov	r0, r4
 800beca:	f00b f97f 	bl	80171cc <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 800bece:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800bed2:	eb08 1060 	add.w	r0, r8, r0, asr #5
 800bed6:	4639      	mov	r1, r7
 800bed8:	eb07 1365 	add.w	r3, r7, r5, asr #5
 800bedc:	9201      	str	r2, [sp, #4]
 800bede:	b200      	sxth	r0, r0
 800bee0:	4642      	mov	r2, r8
 800bee2:	b21b      	sxth	r3, r3
 800bee4:	9000      	str	r0, [sp, #0]
 800bee6:	4630      	mov	r0, r6
 800bee8:	f7ff ff50 	bl	800bd8c <lv_draw_mask_line_points_init>
}
 800beec:	b002      	add	sp, #8
 800beee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bef4 <lv_draw_mask_angle_init>:
{
 800bef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bef6:	f240 1567 	movw	r5, #359	; 0x167
 800befa:	b085      	sub	sp, #20
 800befc:	4604      	mov	r4, r0
 800befe:	42ab      	cmp	r3, r5
 800bf00:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800bf04:	bfa8      	it	ge
 800bf06:	462b      	movge	r3, r5
 800bf08:	42b5      	cmp	r5, r6
 800bf0a:	bfa8      	it	ge
 800bf0c:	4635      	movge	r5, r6
 800bf0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 800bf12:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 800bf16:	b29f      	uxth	r7, r3
 800bf18:	429d      	cmp	r5, r3
 800bf1a:	da28      	bge.n	800bf6e <lv_draw_mask_angle_init+0x7a>
        param->delta_deg = 360 - start_angle + end_angle;
 800bf1c:	f505 70b4 	add.w	r0, r5, #360	; 0x168
 800bf20:	1bc0      	subs	r0, r0, r7
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800bf22:	b280      	uxth	r0, r0
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800bf24:	2fb3      	cmp	r7, #179	; 0xb3
    param->cfg.start_angle = start_angle;
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800bf2c:	bf98      	it	ls
 800bf2e:	2700      	movls	r7, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800bf30:	4811      	ldr	r0, [pc, #68]	; (800bf78 <lv_draw_mask_angle_init+0x84>)
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800bf32:	bf88      	it	hi
 800bf34:	2701      	movhi	r7, #1
    param->cfg.vertex_p.x = vertex_x;
 800bf36:	8121      	strh	r1, [r4, #8]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800bf38:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800bf3a:	2001      	movs	r0, #1
    param->cfg.vertex_p.y = vertex_y;
 800bf3c:	8162      	strh	r2, [r4, #10]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800bf3e:	7120      	strb	r0, [r4, #4]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800bf40:	f104 0010 	add.w	r0, r4, #16
    param->cfg.end_angle = end_angle;
 800bf44:	81e5      	strh	r5, [r4, #14]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800bf46:	9700      	str	r7, [sp, #0]
 800bf48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bf4c:	f7ff ffaa 	bl	800bea4 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800bf50:	2eb3      	cmp	r6, #179	; 0xb3
 800bf52:	462b      	mov	r3, r5
 800bf54:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800bf58:	bfcc      	ite	gt
 800bf5a:	2600      	movgt	r6, #0
 800bf5c:	2601      	movle	r6, #1
 800bf5e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bf62:	960a      	str	r6, [sp, #40]	; 0x28
}
 800bf64:	b005      	add	sp, #20
 800bf66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800bf6a:	f7ff bf9b 	b.w	800bea4 <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800bf6e:	1ae8      	subs	r0, r5, r3
 800bf70:	2800      	cmp	r0, #0
 800bf72:	bfb8      	it	lt
 800bf74:	4240      	neglt	r0, r0
 800bf76:	e7d4      	b.n	800bf22 <lv_draw_mask_angle_init+0x2e>
 800bf78:	0800b611 	.word	0x0800b611

0800bf7c <lv_draw_mask_radius_init>:
{
 800bf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bf7e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bf82:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bf86:	f9b1 7000 	ldrsh.w	r7, [r1]
 800bf8a:	1c74      	adds	r4, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bf8c:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 800bf90:	1c69      	adds	r1, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bf92:	1be4      	subs	r4, r4, r7
    dest->x1 = src->x1;
 800bf94:	8107      	strh	r7, [r0, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bf96:	eba1 010c 	sub.w	r1, r1, ip
    dest->y1 = src->y1;
 800bf9a:	f8a0 c00a 	strh.w	ip, [r0, #10]
    int32_t short_side = LV_MIN(w, h);
 800bf9e:	b224      	sxth	r4, r4
    dest->x2 = src->x2;
 800bfa0:	8186      	strh	r6, [r0, #12]
 800bfa2:	b209      	sxth	r1, r1
    dest->y2 = src->y2;
 800bfa4:	81c5      	strh	r5, [r0, #14]
 800bfa6:	42a1      	cmp	r1, r4
 800bfa8:	bfa8      	it	ge
 800bfaa:	4621      	movge	r1, r4
    if(radius > short_side >> 1) radius = short_side >> 1;
 800bfac:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800bfb0:	ea4f 0461 	mov.w	r4, r1, asr #1
 800bfb4:	bfc8      	it	gt
 800bfb6:	b222      	sxthgt	r2, r4
    param->cfg.radius = radius;
 800bfb8:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
 800bfba:	7c82      	ldrb	r2, [r0, #18]
 800bfbc:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <lv_draw_mask_radius_init+0x5c>)
 800bfc2:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800bfc4:	2302      	movs	r3, #2
    param->cfg.outer = inv ? 1 : 0;
 800bfc6:	7482      	strb	r2, [r0, #18]
    param->y_prev_x.i = 0;
 800bfc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800bfcc:	7103      	strb	r3, [r0, #4]
    param->y_prev_x.i = 0;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e9c0 2305 	strd	r2, r3, [r0, #20]
}
 800bfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	0800b855 	.word	0x0800b855

0800bfdc <lv_area_copy>:
    dest->x1 = src->x1;
 800bfdc:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bfe0:	8003      	strh	r3, [r0, #0]
    dest->y1 = src->y1;
 800bfe2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bfe6:	8043      	strh	r3, [r0, #2]
    dest->x2 = src->x2;
 800bfe8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800bfec:	8083      	strh	r3, [r0, #4]
    dest->y2 = src->y2;
 800bfee:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800bff2:	80c3      	strh	r3, [r0, #6]
}
 800bff4:	4770      	bx	lr

0800bff6 <grad_get>:
#endif
}

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 800bff6:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800bff8:	7a04      	ldrb	r4, [r0, #8]
 800bffa:	fb14 f301 	smulbb	r3, r4, r1
    if(i <= min) return dsc->bg_color;
 800bffe:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800c002:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
 800c006:	dc01      	bgt.n	800c00c <grad_get+0x16>
 800c008:	8880      	ldrh	r0, [r0, #4]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 800c00c:	7a43      	ldrb	r3, [r0, #9]
 800c00e:	fb13 f601 	smulbb	r6, r3, r1
    if(i >= max) return dsc->bg_grad_color;
 800c012:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800c016:	db01      	blt.n	800c01c <grad_get+0x26>
 800c018:	88c0      	ldrh	r0, [r0, #6]
 800c01a:	e7f6      	b.n	800c00a <grad_get+0x14>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 800c01c:	1b1b      	subs	r3, r3, r4
    i -= min;
 800c01e:	1b52      	subs	r2, r2, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c020:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c024:	7906      	ldrb	r6, [r0, #4]
    d = (s * d) >> 8;
 800c026:	434b      	muls	r3, r1
    lv_opa_t mix = (i * 255) / d;
 800c028:	b212      	sxth	r2, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c02a:	8881      	ldrh	r1, [r0, #4]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c02c:	f006 061f 	and.w	r6, r6, #31
 800c030:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
 800c034:	121b      	asrs	r3, r3, #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c036:	f3c1 1145 	ubfx	r1, r1, #5, #6
    lv_opa_t mix = (i * 255) / d;
 800c03a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	88c2      	ldrh	r2, [r0, #6]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c042:	f1c3 04ff 	rsb	r4, r3, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c046:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800c04a:	4361      	muls	r1, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c04c:	4366      	muls	r6, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c04e:	fb03 1202 	mla	r2, r3, r2, r1
 800c052:	3280      	adds	r2, #128	; 0x80
 800c054:	436a      	muls	r2, r5
 800c056:	f3c2 51c5 	ubfx	r1, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c05a:	7982      	ldrb	r2, [r0, #6]
 800c05c:	f002 021f 	and.w	r2, r2, #31
 800c060:	fb03 6202 	mla	r2, r3, r2, r6
 800c064:	3280      	adds	r2, #128	; 0x80
 800c066:	436a      	muls	r2, r5
 800c068:	f3c2 52c4 	ubfx	r2, r2, #23, #5
 800c06c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c070:	79c1      	ldrb	r1, [r0, #7]
 800c072:	7940      	ldrb	r0, [r0, #5]
 800c074:	08c9      	lsrs	r1, r1, #3
 800c076:	08c0      	lsrs	r0, r0, #3
 800c078:	4360      	muls	r0, r4
 800c07a:	fb03 0001 	mla	r0, r3, r1, r0
 800c07e:	3080      	adds	r0, #128	; 0x80
 800c080:	4368      	muls	r0, r5
 800c082:	0dc0      	lsrs	r0, r0, #23
 800c084:	ea42 20c0 	orr.w	r0, r2, r0, lsl #11
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 800c088:	e7bf      	b.n	800c00a <grad_get+0x14>

0800c08a <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800c08a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08e:	4614      	mov	r4, r2
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c090:	0042      	lsls	r2, r0, #1
{
 800c092:	b087      	sub	sp, #28
    int32_t s_left = sw >> 1;
 800c094:	ea4f 0861 	mov.w	r8, r1, asr #1
    if((sw & 1) == 0) s_left--;
 800c098:	07cb      	lsls	r3, r1, #31
{
 800c09a:	4605      	mov	r5, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c09c:	4610      	mov	r0, r2
    int32_t s_left = sw >> 1;
 800c09e:	46c2      	mov	sl, r8
{
 800c0a0:	460e      	mov	r6, r1
    if((sw & 1) == 0) s_left--;
 800c0a2:	bf58      	it	pl
 800c0a4:	f108 3aff 	addpl.w	sl, r8, #4294967295
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c0a8:	9201      	str	r2, [sp, #4]
 800c0aa:	f00b fb1d 	bl	80176e8 <lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c0ae:	9a01      	ldr	r2, [sp, #4]
 800c0b0:	f06f 0701 	mvn.w	r7, #1
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c0b4:	4601      	mov	r1, r0
    for(y = 0; y < size; y++) {
 800c0b6:	46a1      	mov	r9, r4
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c0b8:	1e93      	subs	r3, r2, #2
 800c0ba:	fb0a 7707 	mla	r7, sl, r7, r7
    for(y = 0; y < size; y++) {
 800c0be:	f04f 0b00 	mov.w	fp, #0
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c0c2:	9301      	str	r3, [sp, #4]
 800c0c4:	f10a 0301 	add.w	r3, sl, #1
 800c0c8:	4427      	add	r7, r4
 800c0ca:	9302      	str	r3, [sp, #8]
 800c0cc:	eb04 0348 	add.w	r3, r4, r8, lsl #1
    for(y = 0; y < size; y++) {
 800c0d0:	455d      	cmp	r5, fp
 800c0d2:	dc1f      	bgt.n	800c114 <shadow_blur_corner+0x8a>
        sh_ups_tmp_buf += size;
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800c0d4:	8823      	ldrh	r3, [r4, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c0d6:	fb05 fe05 	mul.w	lr, r5, r5
 800c0da:	2701      	movs	r7, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800c0dc:	fb93 f3f6 	sdiv	r3, r3, r6
 800c0e0:	8023      	strh	r3, [r4, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c0e2:	4623      	mov	r3, r4
 800c0e4:	45be      	cmp	lr, r7
 800c0e6:	d842      	bhi.n	800c16e <shadow_blur_corner+0xe4>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c0e8:	1e6f      	subs	r7, r5, #1
    for(x = 0; x < size; x++) {
 800c0ea:	f04f 0c00 	mov.w	ip, #0
 800c0ee:	fb02 4307 	mla	r3, r2, r7, r4
 800c0f2:	3c02      	subs	r4, #2
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	9b02      	ldr	r3, [sp, #8]
 800c0f8:	4353      	muls	r3, r2
 800c0fa:	9303      	str	r3, [sp, #12]
 800c0fc:	f1c8 0300 	rsb	r3, r8, #0
 800c100:	4353      	muls	r3, r2
 800c102:	9304      	str	r3, [sp, #16]
 800c104:	4565      	cmp	r5, ip
 800c106:	dc3f      	bgt.n	800c188 <shadow_blur_corner+0xfe>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 800c108:	4608      	mov	r0, r1
}
 800c10a:	b007      	add	sp, #28
 800c10c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 800c110:	f00b b946 	b.w	80173a0 <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c114:	9801      	ldr	r0, [sp, #4]
 800c116:	f839 c000 	ldrh.w	ip, [r9, r0]
        for(x = size - 1; x >= 0; x--) {
 800c11a:	1e68      	subs	r0, r5, #1
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c11c:	fb06 fc0c 	mul.w	ip, r6, ip
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800c120:	eb00 0e08 	add.w	lr, r0, r8
            sh_ups_blur_buf[x] = v;
 800c124:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800c128:	4575      	cmp	r5, lr
 800c12a:	bfcc      	ite	gt
 800c12c:	f833 e010 	ldrhgt.w	lr, [r3, r0, lsl #1]
            uint32_t right_val = 0;
 800c130:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 800c134:	ebac 0e0e 	sub.w	lr, ip, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800c138:	eba0 0c0a 	sub.w	ip, r0, sl
 800c13c:	f1bc 0f00 	cmp.w	ip, #0
 800c140:	bfd4      	ite	le
 800c142:	f8b9 c000 	ldrhle.w	ip, [r9]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800c146:	f837 c010 	ldrhgt.w	ip, [r7, r0, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800c14a:	3801      	subs	r0, #1
            v += left_val;
 800c14c:	44f4      	add	ip, lr
        for(x = size - 1; x >= 0; x--) {
 800c14e:	d2e7      	bcs.n	800c120 <shadow_blur_corner+0x96>
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800c150:	4648      	mov	r0, r9
 800c152:	9103      	str	r1, [sp, #12]
    for(y = 0; y < size; y++) {
 800c154:	f10b 0b01 	add.w	fp, fp, #1
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800c158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c15c:	f00b f94c 	bl	80173f8 <lv_memcpy>
        sh_ups_tmp_buf += size;
 800c160:	9a04      	ldr	r2, [sp, #16]
 800c162:	9b05      	ldr	r3, [sp, #20]
 800c164:	4491      	add	r9, r2
    for(y = 0; y < size; y++) {
 800c166:	4417      	add	r7, r2
 800c168:	4413      	add	r3, r2
 800c16a:	9903      	ldr	r1, [sp, #12]
 800c16c:	e7b0      	b.n	800c0d0 <shadow_blur_corner+0x46>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800c16e:	8858      	ldrh	r0, [r3, #2]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c170:	3701      	adds	r7, #1
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800c172:	f833 cb02 	ldrh.w	ip, [r3], #2
 800c176:	4560      	cmp	r0, ip
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800c178:	bf1c      	itt	ne
 800c17a:	fb90 f0f6 	sdivne	r0, r0, r6
 800c17e:	fa1f fc80 	uxthne.w	ip, r0
 800c182:	f8a3 c000 	strh.w	ip, [r3]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c186:	e7ad      	b.n	800c0e4 <shadow_blur_corner+0x5a>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800c188:	3402      	adds	r4, #2
 800c18a:	9803      	ldr	r0, [sp, #12]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800c18c:	8823      	ldrh	r3, [r4, #0]
 800c18e:	1820      	adds	r0, r4, r0
 800c190:	46a6      	mov	lr, r4
 800c192:	4373      	muls	r3, r6
 800c194:	46a2      	mov	sl, r4
 800c196:	4607      	mov	r7, r0
 800c198:	9804      	ldr	r0, [sp, #16]
 800c19a:	eb04 0900 	add.w	r9, r4, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c19e:	2000      	movs	r0, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	bfac      	ite	ge
 800c1a4:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 800c1a8:	f04f 0b00 	movlt.w	fp, #0
 800c1ac:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800c1b0:	eba0 0b08 	sub.w	fp, r0, r8
 800c1b4:	f1bb 0f00 	cmp.w	fp, #0
 800c1b8:	bfd8      	it	le
 800c1ba:	f8ba b000 	ldrhle.w	fp, [sl]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c1be:	4492      	add	sl, r2
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800c1c0:	bfc8      	it	gt
 800c1c2:	f8b9 b000 	ldrhgt.w	fp, [r9]
            v -= top_val;
 800c1c6:	4491      	add	r9, r2
 800c1c8:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800c1cc:	9b02      	ldr	r3, [sp, #8]
 800c1ce:	18c3      	adds	r3, r0, r3
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c1d0:	3001      	adds	r0, #1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800c1d2:	429d      	cmp	r5, r3
 800c1d4:	bfcc      	ite	gt
 800c1d6:	463b      	movgt	r3, r7
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c1d8:	9b01      	ldrle	r3, [sp, #4]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c1da:	4285      	cmp	r5, r0
 800c1dc:	4417      	add	r7, r2
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c1de:	881b      	ldrh	r3, [r3, #0]
            v += bottom_val;
 800c1e0:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c1e2:	dcdd      	bgt.n	800c1a0 <shadow_blur_corner+0x116>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c1e4:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800c1e6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	429d      	cmp	r5, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800c1ee:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c1f2:	4496      	add	lr, r2
 800c1f4:	dcf7      	bgt.n	800c1e6 <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 800c1f6:	9b01      	ldr	r3, [sp, #4]
 800c1f8:	f10c 0c01 	add.w	ip, ip, #1
 800c1fc:	3302      	adds	r3, #2
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	e780      	b.n	800c104 <shadow_blur_corner+0x7a>

0800c202 <draw_full_border>:
}

#if LV_DRAW_COMPLEX
static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800c202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c206:	ed2d 8b02 	vpush	{d8}
 800c20a:	b0a3      	sub	sp, #140	; 0x8c
 800c20c:	461d      	mov	r5, r3
 800c20e:	4680      	mov	r8, r0
 800c210:	460c      	mov	r4, r1
 800c212:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800c216:	4617      	mov	r7, r2
 800c218:	f89d 60b8 	ldrb.w	r6, [sp, #184]	; 0xb8
 800c21c:	9305      	str	r3, [sp, #20]
 800c21e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800c222:	f8bd 90bc 	ldrh.w	r9, [sp, #188]	; 0xbc
 800c226:	9306      	str	r3, [sp, #24]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c228:	f7ff fda2 	bl	800bd70 <lv_draw_mask_get_cnt>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c22c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c230:	900a      	str	r0, [sp, #40]	; 0x28
 800c232:	930b      	str	r3, [sp, #44]	; 0x2c
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800c234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c236:	88a3      	ldrh	r3, [r4, #4]
 800c238:	f9b8 a000 	ldrsh.w	sl, [r8]
 800c23c:	9309      	str	r3, [sp, #36]	; 0x24
 800c23e:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c240:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800c244:	b29a      	uxth	r2, r3
 800c246:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 800c24a:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c24c:	f9b4 c000 	ldrsh.w	ip, [r4]
 800c250:	920d      	str	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c252:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800c256:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 800c25a:	9307      	str	r3, [sp, #28]
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	f000 80eb 	beq.w	800c438 <draw_full_border+0x236>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c264:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c266:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c268:	eba1 0e0e 	sub.w	lr, r1, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c26c:	eba3 0a0a 	sub.w	sl, r3, sl
    int32_t inner_h = lv_area_get_height(area_inner);
 800c270:	fa0f fe8e 	sxth.w	lr, lr
    int32_t inner_w = lv_area_get_width(area_inner);
 800c274:	fa0f fa8a 	sxth.w	sl, sl
        rin = radius;
        int32_t short_side = LV_MIN(inner_w, inner_h);
 800c278:	45f2      	cmp	sl, lr
 800c27a:	bfa8      	it	ge
 800c27c:	46f2      	movge	sl, lr
        if(rin > short_side >> 1) rin = short_side >> 1;
 800c27e:	ea4f 036a 	mov.w	r3, sl, asr #1
 800c282:	429d      	cmp	r5, r3
 800c284:	bfa8      	it	ge
 800c286:	461d      	movge	r5, r3

        /*Get the outer area*/
        rout = rin + border_width;
 800c288:	9b07      	ldr	r3, [sp, #28]
 800c28a:	18eb      	adds	r3, r5, r3
 800c28c:	9304      	str	r3, [sp, #16]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c28e:	f7fb fe8b 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c292:	f00a f975 	bl	8016580 <lv_disp_get_draw_buf>

    /*Get clipped fill area which is the real draw area.
     *It is always the same or inside `fill_area`*/
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800c296:	463a      	mov	r2, r7
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c298:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800c29a:	4621      	mov	r1, r4
 800c29c:	a80e      	add	r0, sp, #56	; 0x38
 800c29e:	f00a fc22 	bl	8016ae6 <_lv_area_intersect>
    if(is_common == false) return;
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f000 80c3 	beq.w	800c42e <draw_full_border+0x22c>

    const lv_area_t * disp_area = &draw_buf->area;

    /*Now `draw_area` has absolute coordinates.
     *Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c2a8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800c2ac:	f8bb 2010 	ldrh.w	r2, [fp, #16]
    draw_area.y1 -= disp_area->y1;
 800c2b0:	f8bb 0012 	ldrh.w	r0, [fp, #18]
    draw_area.x1 -= disp_area->x1;
 800c2b4:	1a8b      	subs	r3, r1, r2
 800c2b6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800c2ba:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c2be:	1a1b      	subs	r3, r3, r0
 800c2c0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800c2c4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c2c8:	1a9a      	subs	r2, r3, r2
 800c2ca:	1c5e      	adds	r6, r3, #1

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c2cc:	2301      	movs	r3, #1
    draw_area.x2 -= disp_area->x1;
 800c2ce:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800c2d2:	1a76      	subs	r6, r6, r1
    draw_area.y2 -= disp_area->y1;
 800c2d4:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c2d8:	4641      	mov	r1, r8
 800c2da:	b236      	sxth	r6, r6
    draw_area.y2 -= disp_area->y1;
 800c2dc:	1a12      	subs	r2, r2, r0
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c2de:	a814      	add	r0, sp, #80	; 0x50
    draw_area.y2 -= disp_area->y1;
 800c2e0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c2e4:	b22a      	sxth	r2, r5
 800c2e6:	f7ff fe49 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	a814      	add	r0, sp, #80	; 0x50
 800c2ee:	f7ff fcdf 	bl	800bcb0 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c2f8:	4621      	mov	r1, r4
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c2fa:	ee08 0a10 	vmov	s16, r0
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800c2fe:	a81b      	add	r0, sp, #108	; 0x6c
 800c300:	f7ff fe3c 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c304:	2100      	movs	r1, #0
 800c306:	a81b      	add	r0, sp, #108	; 0x6c
 800c308:	f7ff fcd2 	bl	800bcb0 <lv_draw_mask_add>
 800c30c:	ee08 0a90 	vmov	s17, r0

    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800c310:	4630      	mov	r0, r6
 800c312:	f00b f9e9 	bl	80176e8 <lv_mem_buf_get>

    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	9a07      	ldr	r2, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800c31a:	4605      	mov	r5, r0
    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c31c:	f9bb c012 	ldrsh.w	ip, [fp, #18]
 800c320:	4293      	cmp	r3, r2
 800c322:	f9bd 803a 	ldrsh.w	r8, [sp, #58]	; 0x3a
 800c326:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c32a:	bfb4      	ite	lt
 800c32c:	4613      	movlt	r3, r2
 800c32e:	9b04      	ldrge	r3, [sp, #16]
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800c330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c332:	bfb8      	it	lt
 800c334:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c338:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800c33c:	9308      	str	r3, [sp, #32]
    if(simple_mode) {
 800c33e:	eb0c 0308 	add.w	r3, ip, r8
 800c342:	b21b      	sxth	r3, r3
 800c344:	2a00      	cmp	r2, #0
 800c346:	f040 8180 	bne.w	800c64a <draw_full_border+0x448>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c34a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800c34e:	9908      	ldr	r1, [sp, #32]
 800c350:	eba2 020c 	sub.w	r2, r2, ip
            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
            fill_area2.y2 = fill_area.y2;

            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c354:	f8bd a010 	ldrh.w	sl, [sp, #16]
        fill_area.x1 = area_outer->x1;
 800c358:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c35c:	440a      	add	r2, r1
        fill_area.x2 = area_outer->x2;
 800c35e:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c362:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c366:	920a      	str	r2, [sp, #40]	; 0x28
        fill_area.y2 = fill_area.y1;
 800c368:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36e:	4598      	cmp	r8, r3
 800c370:	dd79      	ble.n	800c466 <draw_full_border+0x264>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area*/
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800c372:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
 800c376:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 800c37a:	9a08      	ldr	r2, [sp, #32]
 800c37c:	eba8 0803 	sub.w	r8, r8, r3
            lv_memset_ff(mask_buf, draw_area_w);
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c380:	f8bd a010 	ldrh.w	sl, [sp, #16]
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800c384:	eba8 0802 	sub.w	r8, r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800c388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c38a:	4542      	cmp	r2, r8
 800c38c:	bfa8      	it	ge
 800c38e:	f102 0801 	addge.w	r8, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800c392:	4443      	add	r3, r8
 800c394:	b21b      	sxth	r3, r3
 800c396:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800c39a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800c39e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800c3a2:	4543      	cmp	r3, r8
 800c3a4:	f280 80d8 	bge.w	800c558 <draw_full_border+0x356>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c3a8:	8863      	ldrh	r3, [r4, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3aa:	2601      	movs	r6, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c3ac:	9a08      	ldr	r2, [sp, #32]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3ae:	a910      	add	r1, sp, #64	; 0x40
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c3b0:	3301      	adds	r3, #1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	9600      	str	r6, [sp, #0]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c3b6:	fa13 f382 	uxtah	r3, r3, r2
 800c3ba:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800c3be:	88e3      	ldrh	r3, [r4, #6]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	1a9b      	subs	r3, r3, r2
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c3c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800c3c6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        fill_area.x1 = area_outer->x1;
 800c3ca:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c3ce:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3d6:	9b06      	ldr	r3, [sp, #24]
 800c3d8:	9302      	str	r3, [sp, #8]
 800c3da:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c3dc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3e0:	464a      	mov	r2, r9
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f7fc fd33 	bl	8008e50 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c3ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800c3ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3f0:	4638      	mov	r0, r7
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c3f2:	1993      	adds	r3, r2, r6
        fill_area.x2 = area_outer->x2;
 800c3f4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c3f8:	464a      	mov	r2, r9
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c3fa:	4419      	add	r1, r3
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c400:	1a5b      	subs	r3, r3, r1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c402:	a910      	add	r1, sp, #64	; 0x40
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c404:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c408:	9b06      	ldr	r3, [sp, #24]
 800c40a:	9302      	str	r3, [sp, #8]
 800c40c:	9b05      	ldr	r3, [sp, #20]
 800c40e:	e9cd 6300 	strd	r6, r3, [sp]
 800c412:	2300      	movs	r3, #0
 800c414:	f7fc fd1c 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800c418:	ee18 0a10 	vmov	r0, s16
 800c41c:	f7ff fc80 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800c420:	ee18 0a90 	vmov	r0, s17
 800c424:	f7ff fc7c 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_mem_buf_release(mask_buf);
 800c428:	4628      	mov	r0, r5
 800c42a:	f00a ffb9 	bl	80173a0 <lv_mem_buf_release>
}
 800c42e:	b023      	add	sp, #140	; 0x8c
 800c430:	ecbd 8b02 	vpop	{d8}
 800c434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c438:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c43a:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c43c:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c43e:	1a10      	subs	r0, r2, r0
        rin = rout - border_width;
 800c440:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c442:	eba3 0c0c 	sub.w	ip, r3, ip
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800c446:	b200      	sxth	r0, r0
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800c448:	fa0f fc8c 	sxth.w	ip, ip
        int32_t short_side = LV_MIN(coords_out_w, coords_out_h);
 800c44c:	4584      	cmp	ip, r0
 800c44e:	bfa8      	it	ge
 800c450:	4684      	movge	ip, r0
        if(rout > short_side >> 1) rout = short_side >> 1;
 800c452:	ea4f 036c 	mov.w	r3, ip, asr #1
 800c456:	42ab      	cmp	r3, r5
 800c458:	bfa8      	it	ge
 800c45a:	462b      	movge	r3, r5
        rin = rout - border_width;
 800c45c:	1a9d      	subs	r5, r3, r2
 800c45e:	9304      	str	r3, [sp, #16]
        if(rin < 0) rin = 0;
 800c460:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800c464:	e713      	b.n	800c28e <draw_full_border+0x8c>
            lv_memset_ff(mask_buf, draw_area_w);
 800c466:	4631      	mov	r1, r6
 800c468:	4628      	mov	r0, r5
 800c46a:	f00b f9ba 	bl	80177e2 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c46e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c472:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800c476:	4628      	mov	r0, r5
 800c478:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800c47c:	4442      	add	r2, r8
 800c47e:	4419      	add	r1, r3
 800c480:	4633      	mov	r3, r6
 800c482:	b212      	sxth	r2, r2
 800c484:	b209      	sxth	r1, r1
 800c486:	f7ff fc29 	bl	800bcdc <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800c48a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c48e:	464a      	mov	r2, r9
 800c490:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.y1 = fill_area.y1;
 800c492:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800c496:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c49a:	900c      	str	r0, [sp, #48]	; 0x30
            fill_area2.y2 = fill_area.y2;
 800c49c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area2.x1 = area_outer->x1;
 800c4a0:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c4a4:	9000      	str	r0, [sp, #0]
 800c4a6:	4638      	mov	r0, r7
            fill_area2.x1 = area_outer->x1;
 800c4a8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	4453      	add	r3, sl
 800c4b0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c4b4:	9b06      	ldr	r3, [sp, #24]
 800c4b6:	9302      	str	r3, [sp, #8]
 800c4b8:	9b05      	ldr	r3, [sp, #20]
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	462b      	mov	r3, r5
 800c4be:	f7fc fcc7 	bl	8008e50 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800c4c2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c4c6:	9907      	ldr	r1, [sp, #28]
 800c4c8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800c4cc:	440b      	add	r3, r1
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	da14      	bge.n	800c4fc <draw_full_border+0x2fa>
                fill_area2.x1 = area_outer->x1 + rout;
 800c4d2:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c4d4:	464a      	mov	r2, r9
 800c4d6:	a912      	add	r1, sp, #72	; 0x48
 800c4d8:	4638      	mov	r0, r7
                fill_area2.x1 = area_outer->x1 + rout;
 800c4da:	4453      	add	r3, sl
 800c4dc:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800c4e0:	88a3      	ldrh	r3, [r4, #4]
 800c4e2:	eba3 030a 	sub.w	r3, r3, sl
 800c4e6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c4ea:	9b06      	ldr	r3, [sp, #24]
 800c4ec:	9302      	str	r3, [sp, #8]
 800c4ee:	9b05      	ldr	r3, [sp, #20]
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f7fc fcaa 	bl	8008e50 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c4fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c500:	4638      	mov	r0, r7
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c502:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c506:	f108 0801 	add.w	r8, r8, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c50a:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800c50c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c510:	eba2 020a 	sub.w	r2, r2, sl
 800c514:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c518:	9a04      	ldr	r2, [sp, #16]
 800c51a:	1a9b      	subs	r3, r3, r2
 800c51c:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 800c520:	3301      	adds	r3, #1
 800c522:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c524:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c526:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c528:	9a06      	ldr	r2, [sp, #24]
 800c52a:	9202      	str	r2, [sp, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bfac      	ite	ge
 800c530:	18eb      	addge	r3, r5, r3
 800c532:	1c2b      	addlt	r3, r5, #0
 800c534:	9a05      	ldr	r2, [sp, #20]
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c53a:	9200      	str	r2, [sp, #0]
 800c53c:	464a      	mov	r2, r9
 800c53e:	f7fc fc87 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
 800c542:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800c546:	3301      	adds	r3, #1
 800c548:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800c54c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800c550:	3301      	adds	r3, #1
 800c552:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c556:	e709      	b.n	800c36c <draw_full_border+0x16a>
            lv_memset_ff(mask_buf, draw_area_w);
 800c558:	4631      	mov	r1, r6
 800c55a:	4628      	mov	r0, r5
 800c55c:	f00b f941 	bl	80177e2 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c560:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c564:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800c568:	4628      	mov	r0, r5
 800c56a:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800c56e:	4442      	add	r2, r8
 800c570:	4419      	add	r1, r3
 800c572:	4633      	mov	r3, r6
 800c574:	b212      	sxth	r2, r2
 800c576:	b209      	sxth	r1, r1
 800c578:	f7ff fbb0 	bl	800bcdc <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800c57c:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c580:	464a      	mov	r2, r9
 800c582:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.x1 = area_outer->x1;
 800c584:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c588:	3b01      	subs	r3, #1
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c58a:	900a      	str	r0, [sp, #40]	; 0x28
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c58c:	4453      	add	r3, sl
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c58e:	9000      	str	r0, [sp, #0]
 800c590:	4638      	mov	r0, r7
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c592:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.y1 = fill_area.y1;
 800c596:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800c59a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800c59e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800c5a2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c5a6:	9b06      	ldr	r3, [sp, #24]
 800c5a8:	9302      	str	r3, [sp, #8]
 800c5aa:	9b05      	ldr	r3, [sp, #20]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7fc fc4e 	bl	8008e50 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800c5b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800c5b8:	9907      	ldr	r1, [sp, #28]
 800c5ba:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800c5be:	1a5b      	subs	r3, r3, r1
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	dd14      	ble.n	800c5ee <draw_full_border+0x3ec>
                fill_area2.x1 = area_outer->x1 + rout;
 800c5c4:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c5c6:	464a      	mov	r2, r9
 800c5c8:	a912      	add	r1, sp, #72	; 0x48
 800c5ca:	4638      	mov	r0, r7
                fill_area2.x1 = area_outer->x1 + rout;
 800c5cc:	4453      	add	r3, sl
 800c5ce:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800c5d2:	88a3      	ldrh	r3, [r4, #4]
 800c5d4:	eba3 030a 	sub.w	r3, r3, sl
 800c5d8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c5dc:	9b06      	ldr	r3, [sp, #24]
 800c5de:	9302      	str	r3, [sp, #8]
 800c5e0:	9b05      	ldr	r3, [sp, #20]
 800c5e2:	9301      	str	r3, [sp, #4]
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f7fc fc31 	bl	8008e50 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c5ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c5f2:	4638      	mov	r0, r7
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c5f4:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800c5f8:	f108 0801 	add.w	r8, r8, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c5fc:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800c5fe:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800c602:	eba2 020a 	sub.w	r2, r2, sl
 800c606:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c60a:	9a04      	ldr	r2, [sp, #16]
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 800c612:	3301      	adds	r3, #1
 800c614:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c616:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800c618:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800c61a:	9a06      	ldr	r2, [sp, #24]
 800c61c:	9202      	str	r2, [sp, #8]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bfac      	ite	ge
 800c622:	18eb      	addge	r3, r5, r3
 800c624:	1c2b      	addlt	r3, r5, #0
 800c626:	9a05      	ldr	r2, [sp, #20]
 800c628:	9201      	str	r2, [sp, #4]
 800c62a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c62c:	9200      	str	r2, [sp, #0]
 800c62e:	464a      	mov	r2, r9
 800c630:	f7fc fc0e 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
 800c634:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800c638:	3301      	adds	r3, #1
 800c63a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800c63e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800c642:	3301      	adds	r3, #1
 800c644:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800c648:	e6a9      	b.n	800c39e <draw_full_border+0x19c>
        fill_area.x1 = area_outer->x1;
 800c64a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800c64e:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c652:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800c656:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c65a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800c65e:	4543      	cmp	r3, r8
 800c660:	f6ff aeda 	blt.w	800c418 <draw_full_border+0x216>
            lv_memset_ff(mask_buf, draw_area_w);
 800c664:	4631      	mov	r1, r6
 800c666:	4628      	mov	r0, r5
 800c668:	f00b f8bb 	bl	80177e2 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c66c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c670:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800c674:	4628      	mov	r0, r5
 800c676:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800c67a:	4442      	add	r2, r8
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c67c:	f108 0801 	add.w	r8, r8, #1
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c680:	4419      	add	r1, r3
 800c682:	4633      	mov	r3, r6
 800c684:	b212      	sxth	r2, r2
 800c686:	b209      	sxth	r1, r1
 800c688:	f7ff fb28 	bl	800bcdc <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800c68c:	9b06      	ldr	r3, [sp, #24]
 800c68e:	464a      	mov	r2, r9
 800c690:	a910      	add	r1, sp, #64	; 0x40
 800c692:	9302      	str	r3, [sp, #8]
 800c694:	9b05      	ldr	r3, [sp, #20]
 800c696:	e9cd 0300 	strd	r0, r3, [sp]
 800c69a:	462b      	mov	r3, r5
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7fc fbd7 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
 800c6a2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800c6ac:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800c6b6:	e7d0      	b.n	800c65a <draw_full_border+0x458>

0800c6b8 <lv_draw_rect_dsc_init>:
{
 800c6b8:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800c6ba:	2134      	movs	r1, #52	; 0x34
{
 800c6bc:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800c6be:	f00b f861 	bl	8017784 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 800c6c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800c6c6:	4a0c      	ldr	r2, [pc, #48]	; (800c6f8 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_color = lv_color_white();
 800c6c8:	6063      	str	r3, [r4, #4]
    dsc->border_color = lv_color_black();
 800c6ca:	2300      	movs	r3, #0
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800c6cc:	6122      	str	r2, [r4, #16]
    dsc->border_color = lv_color_black();
 800c6ce:	8363      	strh	r3, [r4, #26]
    dsc->shadow_color = lv_color_black();
 800c6d0:	8523      	strh	r3, [r4, #40]	; 0x28
    dsc->bg_grad_color_stop = 0xFF;
 800c6d2:	23ff      	movs	r3, #255	; 0xff
 800c6d4:	7263      	strb	r3, [r4, #9]
    dsc->bg_opa = LV_OPA_COVER;
 800c6d6:	72a3      	strb	r3, [r4, #10]
    dsc->bg_img_opa = LV_OPA_COVER;
 800c6d8:	75a3      	strb	r3, [r4, #22]
    dsc->outline_opa = LV_OPA_COVER;
 800c6da:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    dsc->shadow_opa = LV_OPA_COVER;
 800c6de:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    dsc->border_opa = LV_OPA_COVER;
 800c6e2:	8be3      	ldrh	r3, [r4, #30]
 800c6e4:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
 800c6e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c6ec:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
 800c6f0:	f043 031f 	orr.w	r3, r3, #31
 800c6f4:	83e3      	strh	r3, [r4, #30]
}
 800c6f6:	bd10      	pop	{r4, pc}
 800c6f8:	080296f0 	.word	0x080296f0

0800c6fc <lv_draw_rect>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c6fc:	88c3      	ldrh	r3, [r0, #6]
{
 800c6fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c702:	4690      	mov	r8, r2
 800c704:	8845      	ldrh	r5, [r0, #2]
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	468b      	mov	fp, r1
 800c70a:	1b52      	subs	r2, r2, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800c70c:	b212      	sxth	r2, r2
{
 800c70e:	ed2d 8b02 	vpush	{d8}
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800c712:	2a00      	cmp	r2, #0
{
 800c714:	b0ad      	sub	sp, #180	; 0xb4
 800c716:	9005      	str	r0, [sp, #20]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800c718:	f340 877f 	ble.w	800d61a <lv_draw_rect+0xf1e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c71c:	4602      	mov	r2, r0
 800c71e:	8880      	ldrh	r0, [r0, #4]
 800c720:	8812      	ldrh	r2, [r2, #0]
 800c722:	1c41      	adds	r1, r0, #1
 800c724:	1a89      	subs	r1, r1, r2
 800c726:	b209      	sxth	r1, r1
 800c728:	2900      	cmp	r1, #0
 800c72a:	f340 8776 	ble.w	800d61a <lv_draw_rect+0xf1e>
    if(dsc->shadow_width == 0) return;
 800c72e:	f9b8 402a 	ldrsh.w	r4, [r8, #42]	; 0x2a
 800c732:	2c00      	cmp	r4, #0
 800c734:	f000 859f 	beq.w	800d276 <lv_draw_rect+0xb7a>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800c738:	f898 1032 	ldrb.w	r1, [r8, #50]	; 0x32
 800c73c:	2902      	cmp	r1, #2
 800c73e:	9109      	str	r1, [sp, #36]	; 0x24
 800c740:	f240 8599 	bls.w	800d276 <lv_draw_rect+0xb7a>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800c744:	2c01      	cmp	r4, #1
 800c746:	f9b8 1030 	ldrsh.w	r1, [r8, #48]	; 0x30
 800c74a:	d105      	bne.n	800c758 <lv_draw_rect+0x5c>
 800c74c:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 800c750:	b916      	cbnz	r6, 800c758 <lv_draw_rect+0x5c>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 800c752:	2900      	cmp	r1, #0
 800c754:	f340 858f 	ble.w	800d276 <lv_draw_rect+0xb7a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c758:	b289      	uxth	r1, r1
 800c75a:	f8b8 602c 	ldrh.w	r6, [r8, #44]	; 0x2c
 800c75e:	1a77      	subs	r7, r6, r1
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c760:	440e      	add	r6, r1
 800c762:	4430      	add	r0, r6
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c764:	f8b8 602e 	ldrh.w	r6, [r8, #46]	; 0x2e
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c768:	443a      	add	r2, r7
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c76a:	1a77      	subs	r7, r6, r1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c76c:	4431      	add	r1, r6
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c76e:	b280      	uxth	r0, r0
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c770:	4419      	add	r1, r3
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800c772:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800c776:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c77a:	443d      	add	r5, r7
 800c77c:	ea6f 0663 	mvn.w	r6, r3, asr #1
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800c780:	105b      	asrs	r3, r3, #1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c782:	b289      	uxth	r1, r1
 800c784:	3301      	adds	r3, #1
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c786:	b292      	uxth	r2, r2
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c788:	b2ad      	uxth	r5, r5
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800c78a:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800c78e:	fa10 f083 	uxtah	r0, r0, r3
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800c792:	fa11 f383 	uxtah	r3, r1, r3
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800c796:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800c79a:	fa12 f286 	uxtah	r2, r2, r6
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800c79e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800c7a4:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800c7a8:	fa15 f586 	uxtah	r5, r5, r6
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c7ac:	2bfe      	cmp	r3, #254	; 0xfe
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800c7ae:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800c7b2:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c7b6:	bf28      	it	cs
 800c7b8:	23ff      	movcs	r3, #255	; 0xff
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800c7ba:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800c7be:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c7c0:	f7fb fbf2 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c7c4:	f009 fedc 	bl	8016580 <lv_disp_get_draw_buf>
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800c7c8:	465a      	mov	r2, fp
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c7ca:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800c7cc:	a913      	add	r1, sp, #76	; 0x4c
 800c7ce:	a815      	add	r0, sp, #84	; 0x54
 800c7d0:	f00a f989 	bl	8016ae6 <_lv_area_intersect>
    if(is_common == false) return;
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f000 854e 	beq.w	800d276 <lv_draw_rect+0xb7a>
    draw_area.x1 -= disp_area->x1;
 800c7da:	8a2e      	ldrh	r6, [r5, #16]
    for(y = 0; y < size; y++) {
 800c7dc:	f04f 0900 	mov.w	r9, #0
    draw_area.x1 -= disp_area->x1;
 800c7e0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    draw_area.y1 -= disp_area->y1;
 800c7e4:	8a68      	ldrh	r0, [r5, #18]
    draw_area.x1 -= disp_area->x1;
 800c7e6:	1b9b      	subs	r3, r3, r6
    draw_area.y1 -= disp_area->y1;
 800c7e8:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    draw_area.x2 -= disp_area->x1;
 800c7ec:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    draw_area.x1 -= disp_area->x1;
 800c7f0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    draw_area.y1 -= disp_area->y1;
 800c7f4:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 800c7f6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
 800c7fa:	1b92      	subs	r2, r2, r6
    draw_area.y1 -= disp_area->y1;
 800c7fc:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
    draw_area.y2 -= disp_area->y1;
 800c800:	1a1b      	subs	r3, r3, r0
    lv_area_copy(&bg_coords, coords);
 800c802:	9905      	ldr	r1, [sp, #20]
 800c804:	a817      	add	r0, sp, #92	; 0x5c
    draw_area.x2 -= disp_area->x1;
 800c806:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    draw_area.y2 -= disp_area->y1;
 800c80a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    lv_area_copy(&bg_coords, coords);
 800c80e:	f7ff fbe5 	bl	800bfdc <lv_area_copy>
    bg_coords.x1 += 1;
 800c812:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
    bg_coords.y1 += 1;
 800c816:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
    bg_coords.x2 -= 1;
 800c81a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    bg_coords.x1 += 1;
 800c81e:	3501      	adds	r5, #1
    bg_coords.y1 += 1;
 800c820:	3101      	adds	r1, #1
 800c822:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
    bg_coords.x2 -= 1;
 800c826:	1e5a      	subs	r2, r3, #1
    bg_coords.x1 += 1;
 800c828:	b2ad      	uxth	r5, r5
    bg_coords.y1 += 1;
 800c82a:	b288      	uxth	r0, r1
    bg_coords.y2 -= 1;
 800c82c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    bg_coords.x1 += 1;
 800c830:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 800c834:	1b5d      	subs	r5, r3, r5
    bg_coords.x2 -= 1;
 800c836:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    bg_coords.y2 -= 1;
 800c83a:	1e4a      	subs	r2, r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c83c:	1a09      	subs	r1, r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c83e:	b22d      	sxth	r5, r5
 800c840:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 800c844:	3601      	adds	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c846:	b20b      	sxth	r3, r1
    int32_t r_bg = dsc->radius;
 800c848:	f9b8 2000 	ldrsh.w	r2, [r8]
 800c84c:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800c850:	429d      	cmp	r5, r3
    bg_coords.y1 += 1;
 800c852:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800c856:	bfa8      	it	ge
 800c858:	461d      	movge	r5, r3
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800c85a:	106d      	asrs	r5, r5, #1
 800c85c:	4295      	cmp	r5, r2
 800c85e:	462b      	mov	r3, r5
 800c860:	bfa8      	it	ge
 800c862:	4613      	movge	r3, r2
 800c864:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c866:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800c86a:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c86c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800c870:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c872:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c874:	1a5b      	subs	r3, r3, r1
 800c876:	b21b      	sxth	r3, r3
    short_side = LV_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 800c878:	429e      	cmp	r6, r3
 800c87a:	bfa8      	it	ge
 800c87c:	461e      	movge	r6, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800c87e:	1076      	asrs	r6, r6, #1
 800c880:	4296      	cmp	r6, r2
 800c882:	bfa8      	it	ge
 800c884:	4616      	movge	r6, r2
    int32_t corner_size = sw  + r_sh;
 800c886:	19a3      	adds	r3, r4, r6
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c888:	fb03 f003 	mul.w	r0, r3, r3
    int32_t corner_size = sw  + r_sh;
 800c88c:	9306      	str	r3, [sp, #24]
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c88e:	0040      	lsls	r0, r0, #1
 800c890:	f00a ff2a 	bl	80176e8 <lv_mem_buf_get>
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800c894:	f9b8 402a 	ldrsh.w	r4, [r8, #42]	; 0x2a
    lv_area_copy(&sh_area, coords);
 800c898:	a911      	add	r1, sp, #68	; 0x44
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c89a:	9007      	str	r0, [sp, #28]
    lv_area_copy(&sh_area, coords);
 800c89c:	a81d      	add	r0, sp, #116	; 0x74
    int32_t size = sw_ori  + r;
 800c89e:	1935      	adds	r5, r6, r4
    lv_area_copy(&sh_area, coords);
 800c8a0:	f7ff fb9c 	bl	800bfdc <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c8a4:	f004 0201 	and.w	r2, r4, #1
 800c8a8:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c8ac:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800c8b0:	920a      	str	r2, [sp, #40]	; 0x28
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c8b2:	f064 0201 	orn	r2, r4, #1
 800c8b6:	f3c3 034f 	ubfx	r3, r3, #1, #16
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c8ba:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 800c8be:	43c9      	mvns	r1, r1
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800c8c0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c8c4:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 800c8c6:	3301      	adds	r3, #1
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c8c8:	4401      	add	r1, r0
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800c8ca:	a824      	add	r0, sp, #144	; 0x90
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c8cc:	4432      	add	r2, r6
    sh_area.y1 = sw / 2 + 1;
 800c8ce:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c8d0:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 800c8d2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800c8d6:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800c8da:	440a      	add	r2, r1
 800c8dc:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 800c8e0:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 800c8e4:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800c8e8:	3201      	adds	r2, #1
 800c8ea:	1a52      	subs	r2, r2, r1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800c8ec:	a91d      	add	r1, sp, #116	; 0x74
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800c8ee:	4413      	add	r3, r2
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800c8f0:	4632      	mov	r2, r6
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800c8f2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f7ff fb40 	bl	800bf7c <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800c8fc:	2c01      	cmp	r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800c8fe:	4628      	mov	r0, r5
    else sw = sw_ori >> 1;
 800c900:	bf18      	it	ne
 800c902:	1064      	asrne	r4, r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800c904:	f00a fef0 	bl	80176e8 <lv_mem_buf_get>
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c908:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800c90a:	4607      	mov	r7, r0
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800c90c:	9308      	str	r3, [sp, #32]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800c90e:	b22b      	sxth	r3, r5
 800c910:	ee08 3a10 	vmov	s16, r3
    for(y = 0; y < size; y++) {
 800c914:	454d      	cmp	r5, r9
 800c916:	dc09      	bgt.n	800c92c <lv_draw_rect+0x230>
    lv_mem_buf_release(mask_line);
 800c918:	4638      	mov	r0, r7
 800c91a:	fb05 f605 	mul.w	r6, r5, r5
 800c91e:	f00a fd3f 	bl	80173a0 <lv_mem_buf_release>
    if(sw == 1) {
 800c922:	2c01      	cmp	r4, #1
 800c924:	f040 81b5 	bne.w	800cc92 <lv_draw_rect+0x596>
        for(i = 0; i < size * size; i++) {
 800c928:	2300      	movs	r3, #0
 800c92a:	e03c      	b.n	800c9a6 <lv_draw_rect+0x2aa>
        lv_memset_ff(mask_line, size);
 800c92c:	4629      	mov	r1, r5
 800c92e:	4638      	mov	r0, r7
 800c930:	f00a ff57 	bl	80177e2 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800c934:	ab24      	add	r3, sp, #144	; 0x90
 800c936:	fa0f f289 	sxth.w	r2, r9
 800c93a:	2100      	movs	r1, #0
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	4638      	mov	r0, r7
 800c940:	ee18 3a10 	vmov	r3, s16
 800c944:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800c946:	47b0      	blx	r6
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800c948:	b948      	cbnz	r0, 800c95e <lv_draw_rect+0x262>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800c94a:	4651      	mov	r1, sl
 800c94c:	9808      	ldr	r0, [sp, #32]
 800c94e:	f00a ff19 	bl	8017784 <lv_memset_00>
        sh_ups_tmp_buf += size;
 800c952:	9b08      	ldr	r3, [sp, #32]
    for(y = 0; y < size; y++) {
 800c954:	f109 0901 	add.w	r9, r9, #1
        sh_ups_tmp_buf += size;
 800c958:	4453      	add	r3, sl
 800c95a:	9308      	str	r3, [sp, #32]
    for(y = 0; y < size; y++) {
 800c95c:	e7da      	b.n	800c914 <lv_draw_rect+0x218>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800c95e:	783a      	ldrb	r2, [r7, #0]
 800c960:	4639      	mov	r1, r7
 800c962:	9b08      	ldr	r3, [sp, #32]
 800c964:	0192      	lsls	r2, r2, #6
 800c966:	fb92 f2f4 	sdiv	r2, r2, r4
 800c96a:	f823 2b02 	strh.w	r2, [r3], #2
            for(i = 1; i < size; i++) {
 800c96e:	9a08      	ldr	r2, [sp, #32]
 800c970:	eb0a 0002 	add.w	r0, sl, r2
 800c974:	4298      	cmp	r0, r3
 800c976:	d0ec      	beq.n	800c952 <lv_draw_rect+0x256>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800c978:	468c      	mov	ip, r1
 800c97a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c97e:	3302      	adds	r3, #2
 800c980:	f89c c000 	ldrb.w	ip, [ip]
 800c984:	4594      	cmp	ip, r2
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800c986:	bf16      	itet	ne
 800c988:	0192      	lslne	r2, r2, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800c98a:	f833 2c04 	ldrheq.w	r2, [r3, #-4]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800c98e:	fb92 f2f4 	sdivne	r2, r2, r4
 800c992:	f823 2c02 	strh.w	r2, [r3, #-2]
            for(i = 1; i < size; i++) {
 800c996:	e7ed      	b.n	800c974 <lv_draw_rect+0x278>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800c998:	9a07      	ldr	r2, [sp, #28]
 800c99a:	9907      	ldr	r1, [sp, #28]
 800c99c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c9a0:	0992      	lsrs	r2, r2, #6
 800c9a2:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	42b3      	cmp	r3, r6
 800c9a8:	d1f6      	bne.n	800c998 <lv_draw_rect+0x29c>
 800c9aa:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800c9ae:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800c9ba:	fa01 f383 	sxtah	r3, r1, r3
 800c9be:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	b21b      	sxth	r3, r3
 800c9c6:	920c      	str	r2, [sp, #48]	; 0x30
 800c9c8:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c9ca:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800c9ce:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	1a9b      	subs	r3, r3, r2
 800c9d6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800c9da:	fa01 f383 	sxtah	r3, r1, r3
 800c9de:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	b21b      	sxth	r3, r3
 800c9e6:	920d      	str	r2, [sp, #52]	; 0x34
 800c9e8:	930b      	str	r3, [sp, #44]	; 0x2c
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800c9ea:	f7ff f9c1 	bl	800bd70 <lv_draw_mask_get_cnt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f040 817f 	bne.w	800ccf2 <lv_draw_rect+0x5f6>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 800c9f4:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f040 817c 	bne.w	800ccf6 <lv_draw_rect+0x5fa>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 800c9fe:	f9b8 5030 	ldrsh.w	r5, [r8, #48]	; 0x30
 800ca02:	fab5 f385 	clz	r3, r5
 800ca06:	095b      	lsrs	r3, r3, #5
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800ca08:	9308      	str	r3, [sp, #32]
 800ca0a:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 800ca0e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ca12:	3001      	adds	r0, #1
 800ca14:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&sh_area));
 800ca16:	b200      	sxth	r0, r0
 800ca18:	f00a fe66 	bl	80176e8 <lv_mem_buf_get>
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800ca1c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800ca20:	a917      	add	r1, sp, #92	; 0x5c
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&sh_area));
 800ca22:	4604      	mov	r4, r0
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800ca24:	ee08 3a10 	vmov	s16, r3
 800ca28:	a824      	add	r0, sp, #144	; 0x90
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	ee18 2a10 	vmov	r2, s16
 800ca30:	f7ff faa4 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ca34:	2100      	movs	r1, #0
 800ca36:	a824      	add	r0, sp, #144	; 0x90
 800ca38:	f7ff f93a 	bl	800bcb0 <lv_draw_mask_add>
    a.x2 = sh_area.x2;
 800ca3c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    a.x1 = a.x2 - corner_size + 1;
 800ca40:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ca44:	ee08 0a90 	vmov	s17, r0
    a.x2 = sh_area.x2;
 800ca48:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800ca4c:	3301      	adds	r3, #1
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800ca4e:	465a      	mov	r2, fp
 800ca50:	a919      	add	r1, sp, #100	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 800ca52:	1b5b      	subs	r3, r3, r5
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800ca54:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800ca56:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y1;
 800ca5a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800ca5e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = a.y1 + corner_size - 1;
 800ca62:	3b01      	subs	r3, #1
 800ca64:	442b      	add	r3, r5
 800ca66:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800ca6a:	f00a f83c 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d048      	beq.n	800cb04 <lv_draw_rect+0x408>
 800ca72:	ee18 2a10 	vmov	r2, s16
 800ca76:	a917      	add	r1, sp, #92	; 0x5c
 800ca78:	a819      	add	r0, sp, #100	; 0x64
 800ca7a:	f00a f933 	bl	8016ce4 <_lv_area_is_in>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d140      	bne.n	800cb04 <lv_draw_rect+0x408>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800ca82:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800ca86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca88:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	f107 0701 	add.w	r7, r7, #1
 800ca92:	bfc8      	it	gt
 800ca94:	4613      	movgt	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800ca96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y2 > h_half) ca.y2 = h_half;
 800ca98:	bfc8      	it	gt
 800ca9a:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800ca9e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800caa2:	4293      	cmp	r3, r2
 800caa4:	bfde      	ittt	le
 800caa6:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800caa8:	3301      	addle	r3, #1
 800caaa:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
 800caae:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800cab2:	1abf      	subs	r7, r7, r2
 800cab4:	b23f      	sxth	r7, r7
        if(w > 0) {
 800cab6:	2f00      	cmp	r7, #0
 800cab8:	dd24      	ble.n	800cb04 <lv_draw_rect+0x408>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800caba:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cabe:	a81d      	add	r0, sp, #116	; 0x74
 800cac0:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            for(y = 0; y < h; y++) {
 800cac4:	f04f 0900 	mov.w	r9, #0
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800cac8:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800cacc:	f10a 0a01 	add.w	sl, sl, #1
 800cad0:	1b9e      	subs	r6, r3, r6
 800cad2:	ebaa 0a03 	sub.w	sl, sl, r3
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800cad6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800cada:	fa0f f18a 	sxth.w	r1, sl
 800cade:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	910e      	str	r1, [sp, #56]	; 0x38
            lv_area_copy(&fa, &ca);
 800cae4:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800cae6:	fb03 2606 	mla	r6, r3, r6, r2
 800caea:	9b07      	ldr	r3, [sp, #28]
 800caec:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
 800caee:	f7ff fa75 	bl	800bfdc <lv_area_copy>
            fa.y2 = fa.y1;
 800caf2:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800caf6:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800caf8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800cafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cafe:	4599      	cmp	r9, r3
 800cb00:	f2c0 80fb 	blt.w	800ccfa <lv_draw_rect+0x5fe>
    a.x2 = sh_area.x2;
 800cb04:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cb08:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800cb0a:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cb0e:	a81b      	add	r0, sp, #108	; 0x6c
    a.x2 = sh_area.x2;
 800cb10:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800cb14:	3301      	adds	r3, #1
    a.y2 = sh_area.y2;
 800cb16:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x1 = a.x2 - corner_size + 1;
 800cb1a:	1b5b      	subs	r3, r3, r5
 800cb1c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800cb20:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cb22:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800cb24:	1b5b      	subs	r3, r3, r5
 800cb26:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cb2a:	f009 ffdc 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d047      	beq.n	800cbc2 <lv_draw_rect+0x4c6>
 800cb32:	ee18 2a10 	vmov	r2, s16
 800cb36:	a917      	add	r1, sp, #92	; 0x5c
 800cb38:	a819      	add	r0, sp, #100	; 0x64
 800cb3a:	f00a f8d3 	bl	8016ce4 <_lv_area_is_in>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d13f      	bne.n	800cbc2 <lv_draw_rect+0x4c6>
        if(ca.y1 <= h_half) ca.y1 = h_half;
 800cb42:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800cb46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cb48:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	f106 0601 	add.w	r6, r6, #1
 800cb52:	bfd8      	it	le
 800cb54:	4613      	movle	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half;
 800cb56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y1 <= h_half) ca.y1 = h_half;
 800cb58:	bfd8      	it	le
 800cb5a:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(ca.x1 <= w_half) ca.x1 = w_half;
 800cb5e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cb62:	4293      	cmp	r3, r2
 800cb64:	bfdc      	itt	le
 800cb66:	4613      	movle	r3, r2
 800cb68:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
 800cb6c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cb70:	1af6      	subs	r6, r6, r3
 800cb72:	b236      	sxth	r6, r6
        if(w > 0) {
 800cb74:	2e00      	cmp	r6, #0
 800cb76:	dd24      	ble.n	800cbc2 <lv_draw_rect+0x4c6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cb78:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cb7c:	a81d      	add	r0, sp, #116	; 0x74
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cb7e:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            for(y = 0; y < h; y++) {
 800cb82:	f04f 0900 	mov.w	r9, #0
 800cb86:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
 800cb8a:	f102 0a01 	add.w	sl, r2, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cb8e:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800cb90:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800cb94:	ebaa 0a01 	sub.w	sl, sl, r1
 800cb98:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cb9a:	9a06      	ldr	r2, [sp, #24]
 800cb9c:	fa0f f18a 	sxth.w	r1, sl
 800cba0:	fb02 3707 	mla	r7, r2, r7, r3
 800cba4:	9b07      	ldr	r3, [sp, #28]
 800cba6:	910e      	str	r1, [sp, #56]	; 0x38
            lv_area_copy(&fa, &ca);
 800cba8:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cbaa:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800cbac:	f7ff fa16 	bl	800bfdc <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800cbb0:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cbb4:	4682      	mov	sl, r0
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800cbb6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            for(y = 0; y < h; y++) {
 800cbba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbbc:	4599      	cmp	r9, r3
 800cbbe:	f2c0 80c8 	blt.w	800cd52 <lv_draw_rect+0x656>
    a.x2 = sh_area.x2;
 800cbc2:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cbc6:	465a      	mov	r2, fp
 800cbc8:	a919      	add	r1, sp, #100	; 0x64
 800cbca:	a81b      	add	r0, sp, #108	; 0x6c
    a.x2 = sh_area.x2;
 800cbcc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	1b5b      	subs	r3, r3, r5
 800cbd4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 800cbd8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cbdc:	442b      	add	r3, r5
 800cbde:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800cbe2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800cbe6:	1b5b      	subs	r3, r3, r5
 800cbe8:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cbec:	f009 ff7b 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d049      	beq.n	800cc88 <lv_draw_rect+0x58c>
 800cbf4:	ee18 2a10 	vmov	r2, s16
 800cbf8:	a917      	add	r1, sp, #92	; 0x5c
 800cbfa:	a819      	add	r0, sp, #100	; 0x64
 800cbfc:	f00a f872 	bl	8016ce4 <_lv_area_is_in>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d141      	bne.n	800cc88 <lv_draw_rect+0x58c>
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800cc04:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cc08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	bfde      	ittt	le
 800cc0e:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800cc10:	3301      	addle	r3, #1
 800cc12:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
        if(simple_mode) ca.x1 = LV_MAX(ca.x1, coords->x2);
 800cc16:	9b08      	ldr	r3, [sp, #32]
 800cc18:	b14b      	cbz	r3, 800cc2e <lv_draw_rect+0x532>
 800cc1a:	9b05      	ldr	r3, [sp, #20]
 800cc1c:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800cc20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	bfb8      	it	lt
 800cc28:	4613      	movlt	r3, r2
 800cc2a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cc2e:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800cc32:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cc36:	3601      	adds	r6, #1
 800cc38:	1af6      	subs	r6, r6, r3
 800cc3a:	b236      	sxth	r6, r6
        if(w > 0) {
 800cc3c:	2e00      	cmp	r6, #0
 800cc3e:	dd23      	ble.n	800cc88 <lv_draw_rect+0x58c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cc40:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cc44:	a81d      	add	r0, sp, #116	; 0x74
 800cc46:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800cc4a:	a91b      	add	r1, sp, #108	; 0x6c
 800cc4c:	f10a 0a01 	add.w	sl, sl, #1
            for(y = 0; y < h; y++) {
 800cc50:	f04f 0900 	mov.w	r9, #0
 800cc54:	ebaa 0a02 	sub.w	sl, sl, r2
 800cc58:	fa0f f28a 	sxth.w	r2, sl
 800cc5c:	920d      	str	r2, [sp, #52]	; 0x34
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800cc5e:	9a06      	ldr	r2, [sp, #24]
 800cc60:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800cc62:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800cc66:	1a9b      	subs	r3, r3, r2
 800cc68:	9a06      	ldr	r2, [sp, #24]
 800cc6a:	fb02 3707 	mla	r7, r2, r7, r3
 800cc6e:	9b07      	ldr	r3, [sp, #28]
 800cc70:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800cc72:	f7ff f9b3 	bl	800bfdc <lv_area_copy>
            fa.y2 = fa.y1;
 800cc76:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa,
 800cc7a:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800cc7c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800cc80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc82:	4599      	cmp	r9, r3
 800cc84:	f2c0 8091 	blt.w	800cdaa <lv_draw_rect+0x6ae>
        for(x = 0; x < corner_size / 2; x++) {
 800cc88:	9b06      	ldr	r3, [sp, #24]
 800cc8a:	2000      	movs	r0, #0
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cc8c:	9a07      	ldr	r2, [sp, #28]
        for(x = 0; x < corner_size / 2; x++) {
 800cc8e:	105f      	asrs	r7, r3, #1
 800cc90:	e0c7      	b.n	800ce22 <lv_draw_rect+0x726>
    shadow_blur_corner(size, sw, sh_buf);
 800cc92:	b228      	sxth	r0, r5
 800cc94:	4621      	mov	r1, r4
 800cc96:	9a07      	ldr	r2, [sp, #28]
 800cc98:	9008      	str	r0, [sp, #32]
 800cc9a:	f7ff f9f6 	bl	800c08a <shadow_blur_corner>
    sw += sw_ori & 1;
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca0:	4423      	add	r3, r4
    if(sw > 1) {
 800cca2:	2b01      	cmp	r3, #1
    sw += sw_ori & 1;
 800cca4:	4619      	mov	r1, r3
    if(sw > 1) {
 800cca6:	dd0d      	ble.n	800ccc4 <lv_draw_rect+0x5c8>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800cca8:	9b07      	ldr	r3, [sp, #28]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800ccaa:	2401      	movs	r4, #1
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800ccac:	9a07      	ldr	r2, [sp, #28]
 800ccae:	881b      	ldrh	r3, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800ccb0:	9808      	ldr	r0, [sp, #32]
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800ccb2:	019b      	lsls	r3, r3, #6
 800ccb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccb8:	8013      	strh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800ccba:	42b4      	cmp	r4, r6
 800ccbc:	d304      	bcc.n	800ccc8 <lv_draw_rect+0x5cc>
        shadow_blur_corner(size, sw, sh_buf);
 800ccbe:	9a07      	ldr	r2, [sp, #28]
 800ccc0:	f7ff f9e3 	bl	800c08a <shadow_blur_corner>
        for(i = 1; i < (uint32_t) size * size; i++) {
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	e011      	b.n	800ccec <lv_draw_rect+0x5f0>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800ccc8:	8853      	ldrh	r3, [r2, #2]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800ccca:	3401      	adds	r4, #1
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800cccc:	f832 5b02 	ldrh.w	r5, [r2], #2
 800ccd0:	42ab      	cmp	r3, r5
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800ccd2:	bf1e      	ittt	ne
 800ccd4:	019b      	lslne	r3, r3, #6
 800ccd6:	fbb3 f3f1 	udivne	r3, r3, r1
 800ccda:	b29d      	uxthne	r5, r3
 800ccdc:	8015      	strh	r5, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800ccde:	e7ec      	b.n	800ccba <lv_draw_rect+0x5be>
        res_buf[x] = sh_buf[x];
 800cce0:	9a07      	ldr	r2, [sp, #28]
 800cce2:	9907      	ldr	r1, [sp, #28]
 800cce4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800cce8:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 800ccea:	3301      	adds	r3, #1
 800ccec:	42b3      	cmp	r3, r6
 800ccee:	d1f7      	bne.n	800cce0 <lv_draw_rect+0x5e4>
 800ccf0:	e65b      	b.n	800c9aa <lv_draw_rect+0x2ae>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e688      	b.n	800ca08 <lv_draw_rect+0x30c>
 800ccf6:	9008      	str	r0, [sp, #32]
 800ccf8:	e687      	b.n	800ca0a <lv_draw_rect+0x30e>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	463a      	mov	r2, r7
 800ccfe:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800cd00:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800cd04:	f00a fb78 	bl	80173f8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800cd08:	463b      	mov	r3, r7
 800cd0a:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800cd14:	f7fe ffe2 	bl	800bcdc <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cd18:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cd1c:	2801      	cmp	r0, #1
 800cd1e:	bf08      	it	eq
 800cd20:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cd22:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800cd26:	9302      	str	r3, [sp, #8]
 800cd28:	4651      	mov	r1, sl
 800cd2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd2c:	e9cd 0300 	strd	r0, r3, [sp]
 800cd30:	4623      	mov	r3, r4
 800cd32:	4658      	mov	r0, fp
 800cd34:	f7fc f88c 	bl	8008e50 <_lv_blend_fill>
                fa.y1++;
 800cd38:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800cd42:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800cd46:	3301      	adds	r3, #1
 800cd48:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800cd4c:	9b06      	ldr	r3, [sp, #24]
 800cd4e:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800cd50:	e6d4      	b.n	800cafc <lv_draw_rect+0x400>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800cd52:	4639      	mov	r1, r7
 800cd54:	4632      	mov	r2, r6
 800cd56:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800cd58:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800cd5c:	f00a fb4c 	bl	80173f8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800cd60:	4633      	mov	r3, r6
 800cd62:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800cd66:	4620      	mov	r0, r4
 800cd68:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800cd6c:	f7fe ffb6 	bl	800bcdc <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cd70:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cd74:	2801      	cmp	r0, #1
 800cd76:	bf08      	it	eq
 800cd78:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cd7a:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800cd7e:	9302      	str	r3, [sp, #8]
 800cd80:	4651      	mov	r1, sl
 800cd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd84:	e9cd 0300 	strd	r0, r3, [sp]
 800cd88:	4623      	mov	r3, r4
 800cd8a:	4658      	mov	r0, fp
 800cd8c:	f7fc f860 	bl	8008e50 <_lv_blend_fill>
                fa.y1--;
 800cd90:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800cd94:	3b01      	subs	r3, #1
 800cd96:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2--;
 800cd9a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800cda4:	9b06      	ldr	r3, [sp, #24]
 800cda6:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800cda8:	e707      	b.n	800cbba <lv_draw_rect+0x4be>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800cdaa:	4632      	mov	r2, r6
 800cdac:	4639      	mov	r1, r7
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f00a fb22 	bl	80173f8 <lv_memcpy>
                if(simple_mode) {
 800cdb4:	9b08      	ldr	r3, [sp, #32]
 800cdb6:	b94b      	cbnz	r3, 800cdcc <lv_draw_rect+0x6d0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800cdb8:	4633      	mov	r3, r6
 800cdba:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800cdbe:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f7fe ff8a 	bl	800bcdc <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cdc8:	2801      	cmp	r0, #1
 800cdca:	d100      	bne.n	800cdce <lv_draw_rect+0x6d2>
 800cdcc:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800cdce:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cdd2:	4651      	mov	r1, sl
 800cdd4:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800cdd8:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800cddc:	9302      	str	r3, [sp, #8]
 800cdde:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800cde2:	e9cd 0300 	strd	r0, r3, [sp]
 800cde6:	4623      	mov	r3, r4
 800cde8:	4658      	mov	r0, fp
 800cdea:	f7fc f831 	bl	8008e50 <_lv_blend_fill>
                fa.y1++;
 800cdee:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800cdf8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800ce02:	e73d      	b.n	800cc80 <lv_draw_rect+0x584>
            lv_opa_t tmp = sh_buf_tmp[x];
 800ce04:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 800ce08:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 800ce0c:	f881 e000 	strb.w	lr, [r1]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 800ce10:	f883 c000 	strb.w	ip, [r3]
        for(x = 0; x < corner_size / 2; x++) {
 800ce14:	eba6 0c03 	sub.w	ip, r6, r3
 800ce18:	4567      	cmp	r7, ip
 800ce1a:	dcf3      	bgt.n	800ce04 <lv_draw_rect+0x708>
        sh_buf_tmp += corner_size;
 800ce1c:	9b06      	ldr	r3, [sp, #24]
    for(y = 0; y < corner_size; y++) {
 800ce1e:	3001      	adds	r0, #1
        sh_buf_tmp += corner_size;
 800ce20:	441a      	add	r2, r3
    for(y = 0; y < corner_size; y++) {
 800ce22:	9b06      	ldr	r3, [sp, #24]
 800ce24:	4283      	cmp	r3, r0
 800ce26:	dd03      	ble.n	800ce30 <lv_draw_rect+0x734>
 800ce28:	18d6      	adds	r6, r2, r3
 800ce2a:	1e51      	subs	r1, r2, #1
 800ce2c:	4633      	mov	r3, r6
 800ce2e:	e7f1      	b.n	800ce14 <lv_draw_rect+0x718>
    a.x1 = sh_area.x1;
 800ce30:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800ce34:	465a      	mov	r2, fp
 800ce36:	a919      	add	r1, sp, #100	; 0x64
 800ce38:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800ce3a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	442b      	add	r3, r5
 800ce42:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800ce46:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800ce4a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = a.y1 + corner_size - 1;
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	442b      	add	r3, r5
 800ce52:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800ce56:	f009 fe46 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d047      	beq.n	800ceee <lv_draw_rect+0x7f2>
 800ce5e:	ee18 2a10 	vmov	r2, s16
 800ce62:	a917      	add	r1, sp, #92	; 0x5c
 800ce64:	a819      	add	r0, sp, #100	; 0x64
 800ce66:	f009 ff3d 	bl	8016ce4 <_lv_area_is_in>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d13f      	bne.n	800ceee <lv_draw_rect+0x7f2>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800ce6e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800ce72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce74:	4293      	cmp	r3, r2
 800ce76:	bfc8      	it	gt
 800ce78:	4613      	movgt	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 800ce7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y2 > h_half) ca.y2 = h_half;
 800ce7c:	bfc8      	it	gt
 800ce7e:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(ca.x2 > w_half) ca.x2 = w_half;
 800ce82:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800ce86:	4293      	cmp	r3, r2
 800ce88:	bfc8      	it	gt
 800ce8a:	4613      	movgt	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ce8c:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800ce90:	bfc8      	it	gt
 800ce92:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
 800ce96:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800ce9a:	3701      	adds	r7, #1
 800ce9c:	1abf      	subs	r7, r7, r2
 800ce9e:	b23f      	sxth	r7, r7
        if(w > 0) {
 800cea0:	2f00      	cmp	r7, #0
 800cea2:	dd24      	ble.n	800ceee <lv_draw_rect+0x7f2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cea4:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cea8:	a81d      	add	r0, sp, #116	; 0x74
 800ceaa:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            for(y = 0; y < h; y++) {
 800ceae:	f04f 0900 	mov.w	r9, #0
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800ceb2:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800ceb6:	f10a 0a01 	add.w	sl, sl, #1
 800ceba:	1b9e      	subs	r6, r3, r6
 800cebc:	ebaa 0a03 	sub.w	sl, sl, r3
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800cec0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800cec4:	fa0f f18a 	sxth.w	r1, sl
 800cec8:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800ceca:	9b06      	ldr	r3, [sp, #24]
 800cecc:	910d      	str	r1, [sp, #52]	; 0x34
            lv_area_copy(&fa, &ca);
 800cece:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800ced0:	fb03 2606 	mla	r6, r3, r6, r2
 800ced4:	9b07      	ldr	r3, [sp, #28]
 800ced6:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
 800ced8:	f7ff f880 	bl	800bfdc <lv_area_copy>
            fa.y2 = fa.y1;
 800cedc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cee0:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800cee2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800cee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee8:	4599      	cmp	r9, r3
 800ceea:	f2c0 839b 	blt.w	800d624 <lv_draw_rect+0xf28>
    a.x1 = sh_area.x1;
 800ceee:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cef2:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800cef4:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cef8:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800cefa:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800cefe:	3b01      	subs	r3, #1
    a.y2 = sh_area.y2;
 800cf00:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x2 = a.x1 + corner_size - 1;
 800cf04:	442b      	add	r3, r5
 800cf06:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800cf0a:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cf0c:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800cf0e:	1b5b      	subs	r3, r3, r5
 800cf10:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cf14:	f009 fde7 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d046      	beq.n	800cfaa <lv_draw_rect+0x8ae>
 800cf1c:	ee18 2a10 	vmov	r2, s16
 800cf20:	a917      	add	r1, sp, #92	; 0x5c
 800cf22:	a819      	add	r0, sp, #100	; 0x64
 800cf24:	f009 fede 	bl	8016ce4 <_lv_area_is_in>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d13e      	bne.n	800cfaa <lv_draw_rect+0x8ae>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800cf2c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800cf30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf32:	4293      	cmp	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 800cf34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800cf36:	bfde      	ittt	le
 800cf38:	9b0c      	ldrle	r3, [sp, #48]	; 0x30
 800cf3a:	3301      	addle	r3, #1
 800cf3c:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(ca.x2 > w_half) ca.x2 = w_half;
 800cf40:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800cf44:	4293      	cmp	r3, r2
 800cf46:	bfc4      	itt	gt
 800cf48:	4613      	movgt	r3, r2
 800cf4a:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cf4e:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800cf52:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cf56:	3601      	adds	r6, #1
 800cf58:	1af6      	subs	r6, r6, r3
 800cf5a:	b236      	sxth	r6, r6
        if(w > 0) {
 800cf5c:	2e00      	cmp	r6, #0
 800cf5e:	dd24      	ble.n	800cfaa <lv_draw_rect+0x8ae>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cf60:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cf64:	a81d      	add	r0, sp, #116	; 0x74
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf66:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            for(y = 0; y < h; y++) {
 800cf6a:	f04f 0900 	mov.w	r9, #0
 800cf6e:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
 800cf72:	f102 0a01 	add.w	sl, r2, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf76:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800cf78:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800cf7c:	ebaa 0a01 	sub.w	sl, sl, r1
 800cf80:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf82:	9a06      	ldr	r2, [sp, #24]
 800cf84:	fa0f f18a 	sxth.w	r1, sl
 800cf88:	fb02 3707 	mla	r7, r2, r7, r3
 800cf8c:	9b07      	ldr	r3, [sp, #28]
 800cf8e:	910d      	str	r1, [sp, #52]	; 0x34
            lv_area_copy(&fa, &ca);
 800cf90:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800cf92:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800cf94:	f7ff f822 	bl	800bfdc <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800cf98:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800cf9c:	4682      	mov	sl, r0
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800cf9e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            for(y = 0; y < h; y++) {
 800cfa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfa4:	4599      	cmp	r9, r3
 800cfa6:	f2c0 8369 	blt.w	800d67c <lv_draw_rect+0xf80>
    a.x1 = sh_area.x1;
 800cfaa:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cfae:	465a      	mov	r2, fp
 800cfb0:	a919      	add	r1, sp, #100	; 0x64
 800cfb2:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800cfb4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	442b      	add	r3, r5
 800cfbc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800cfc0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800cfc4:	442b      	add	r3, r5
 800cfc6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800cfca:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800cfce:	1b5b      	subs	r3, r3, r5
 800cfd0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800cfd4:	f009 fd87 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d048      	beq.n	800d06e <lv_draw_rect+0x972>
 800cfdc:	ee18 2a10 	vmov	r2, s16
 800cfe0:	a917      	add	r1, sp, #92	; 0x5c
 800cfe2:	a819      	add	r0, sp, #100	; 0x64
 800cfe4:	f009 fe7e 	bl	8016ce4 <_lv_area_is_in>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d140      	bne.n	800d06e <lv_draw_rect+0x972>
        if(ca.x2 > w_half) ca.x2 = w_half;
 800cfec:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800cff0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bfc4      	itt	gt
 800cff6:	4613      	movgt	r3, r2
 800cff8:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
        if(simple_mode) ca.x2 = LV_MIN(coords->x1, ca.x2);
 800cffc:	9b08      	ldr	r3, [sp, #32]
 800cffe:	b14b      	cbz	r3, 800d014 <lv_draw_rect+0x918>
 800d000:	9b05      	ldr	r3, [sp, #20]
 800d002:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 800d006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d00a:	4293      	cmp	r3, r2
 800d00c:	bfa8      	it	ge
 800d00e:	4613      	movge	r3, r2
 800d010:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d014:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d018:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d01c:	3601      	adds	r6, #1
 800d01e:	1af6      	subs	r6, r6, r3
 800d020:	b236      	sxth	r6, r6
        if(w > 0) {
 800d022:	2e00      	cmp	r6, #0
 800d024:	dd23      	ble.n	800d06e <lv_draw_rect+0x972>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d026:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d02a:	a81d      	add	r0, sp, #116	; 0x74
 800d02c:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800d030:	a91b      	add	r1, sp, #108	; 0x6c
 800d032:	f10a 0a01 	add.w	sl, sl, #1
            for(y = 0; y < h; y++) {
 800d036:	f04f 0900 	mov.w	r9, #0
 800d03a:	ebaa 0a02 	sub.w	sl, sl, r2
 800d03e:	fa0f f28a 	sxth.w	r2, sl
 800d042:	920b      	str	r2, [sp, #44]	; 0x2c
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800d044:	9a06      	ldr	r2, [sp, #24]
 800d046:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800d048:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d04c:	1a9b      	subs	r3, r3, r2
 800d04e:	9a06      	ldr	r2, [sp, #24]
 800d050:	fb02 3707 	mla	r7, r2, r7, r3
 800d054:	9b07      	ldr	r3, [sp, #28]
 800d056:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d058:	f7fe ffc0 	bl	800bfdc <lv_area_copy>
            fa.y2 = fa.y1;
 800d05c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa,
 800d060:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d062:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d068:	4599      	cmp	r9, r3
 800d06a:	f2c0 8333 	blt.w	800d6d4 <lv_draw_rect+0xfd8>
    a.x1 = sh_area.x1 + corner_size;
 800d06e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d072:	465a      	mov	r2, fp
 800d074:	a919      	add	r1, sp, #100	; 0x64
 800d076:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d078:	442b      	add	r3, r5
 800d07a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d07e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d082:	1b5b      	subs	r3, r3, r5
 800d084:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800d088:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800d08c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y1 + corner_size - 1;
 800d090:	3b01      	subs	r3, #1
 800d092:	442b      	add	r3, r5
 800d094:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d098:	f009 fd25 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d043      	beq.n	800d128 <lv_draw_rect+0xa2c>
 800d0a0:	ee18 2a10 	vmov	r2, s16
 800d0a4:	a917      	add	r1, sp, #92	; 0x5c
 800d0a6:	a819      	add	r0, sp, #100	; 0x64
 800d0a8:	f009 fe1c 	bl	8016ce4 <_lv_area_is_in>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d13b      	bne.n	800d128 <lv_draw_rect+0xa2c>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d0b0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800d0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	bfc4      	itt	gt
 800d0ba:	4613      	movgt	r3, r2
 800d0bc:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(simple_mode) ca.y2 = LV_MIN(ca.y2, coords->y1);
 800d0c0:	9b08      	ldr	r3, [sp, #32]
 800d0c2:	b14b      	cbz	r3, 800d0d8 <lv_draw_rect+0x9dc>
 800d0c4:	9b05      	ldr	r3, [sp, #20]
 800d0c6:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 800d0ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	bfa8      	it	ge
 800d0d2:	4613      	movge	r3, r2
 800d0d4:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d0d8:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d0dc:	a81d      	add	r0, sp, #116	; 0x74
 800d0de:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d0e2:	a91b      	add	r1, sp, #108	; 0x6c
 800d0e4:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d0e6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d0ea:	9a06      	ldr	r2, [sp, #24]
        for(y = 0; y < h; y++) {
 800d0ec:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d0f0:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d0f2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800d0f6:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d0f8:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d0fa:	1b9b      	subs	r3, r3, r6
 800d0fc:	b21b      	sxth	r3, r3
 800d0fe:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d100:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d104:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
 800d106:	9b06      	ldr	r3, [sp, #24]
 800d108:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d10a:	fb02 3606 	mla	r6, r2, r6, r3
 800d10e:	9b07      	ldr	r3, [sp, #28]
 800d110:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 800d112:	f7fe ff63 	bl	800bfdc <lv_area_copy>
        fa.y2 = fa.y1;
 800d116:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d11a:	4682      	mov	sl, r0
        fa.y2 = fa.y1;
 800d11c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d122:	4599      	cmp	r9, r3
 800d124:	f2c0 8303 	blt.w	800d72e <lv_draw_rect+0x1032>
    a.x1 = sh_area.x1 + corner_size;
 800d128:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d12c:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d12e:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d132:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d134:	442b      	add	r3, r5
    a.y2 = sh_area.y2;
 800d136:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x1 = sh_area.x1 + corner_size;
 800d13a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d13e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d142:	1b5b      	subs	r3, r3, r5
 800d144:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800d148:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d14a:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800d14c:	1b5b      	subs	r3, r3, r5
 800d14e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d152:	f009 fcc8 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d156:	2800      	cmp	r0, #0
 800d158:	d044      	beq.n	800d1e4 <lv_draw_rect+0xae8>
 800d15a:	ee18 2a10 	vmov	r2, s16
 800d15e:	a917      	add	r1, sp, #92	; 0x5c
 800d160:	a819      	add	r0, sp, #100	; 0x64
 800d162:	f009 fdbf 	bl	8016ce4 <_lv_area_is_in>
 800d166:	2800      	cmp	r0, #0
 800d168:	d13c      	bne.n	800d1e4 <lv_draw_rect+0xae8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d16a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800d16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d170:	4293      	cmp	r3, r2
 800d172:	bfde      	ittt	le
 800d174:	9b0c      	ldrle	r3, [sp, #48]	; 0x30
 800d176:	3301      	addle	r3, #1
 800d178:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(simple_mode) ca.y1 = LV_MAX(ca.y1, coords->y2);
 800d17c:	9b08      	ldr	r3, [sp, #32]
 800d17e:	b14b      	cbz	r3, 800d194 <lv_draw_rect+0xa98>
 800d180:	9b05      	ldr	r3, [sp, #20]
 800d182:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800d186:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d18a:	4293      	cmp	r3, r2
 800d18c:	bfb8      	it	lt
 800d18e:	4613      	movlt	r3, r2
 800d190:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d194:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d198:	a81d      	add	r0, sp, #116	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d19a:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
        for(y = 0; y < h; y++) {
 800d19e:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d1a2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d1a6:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d1a8:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d1ac:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d1ae:	1c53      	adds	r3, r2, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d1b0:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
 800d1b4:	1a5b      	subs	r3, r3, r1
        lv_area_copy(&fa, &ca);
 800d1b6:	a91b      	add	r1, sp, #108	; 0x6c
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d1b8:	1ab6      	subs	r6, r6, r2
 800d1ba:	9a06      	ldr	r2, [sp, #24]
 800d1bc:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d1be:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d1c0:	930a      	str	r3, [sp, #40]	; 0x28
        sh_buf_tmp = sh_buf + corner_size - 1;
 800d1c2:	9b06      	ldr	r3, [sp, #24]
 800d1c4:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d1c6:	fb02 3606 	mla	r6, r2, r6, r3
 800d1ca:	9b07      	ldr	r3, [sp, #28]
 800d1cc:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 800d1ce:	f7fe ff05 	bl	800bfdc <lv_area_copy>
        fa.y1 = fa.y2;
 800d1d2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d1d6:	4682      	mov	sl, r0
        fa.y1 = fa.y2;
 800d1d8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(y = 0; y < h; y++) {
 800d1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1de:	4599      	cmp	r9, r3
 800d1e0:	f2c0 82dd 	blt.w	800d79e <lv_draw_rect+0x10a2>
    a.x1 = sh_area.x1 + corner_size;
 800d1e4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d1e8:	465a      	mov	r2, fp
 800d1ea:	a919      	add	r1, sp, #100	; 0x64
 800d1ec:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d1ee:	442b      	add	r3, r5
 800d1f0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d1f4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d1f8:	1b5b      	subs	r3, r3, r5
 800d1fa:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800d1fe:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d202:	442b      	add	r3, r5
 800d204:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800d208:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d20c:	1b5b      	subs	r3, r3, r5
 800d20e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d212:	f009 fc68 	bl	8016ae6 <_lv_area_intersect>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d216:	b320      	cbz	r0, 800d262 <lv_draw_rect+0xb66>
 800d218:	9b08      	ldr	r3, [sp, #32]
 800d21a:	bb13      	cbnz	r3, 800d262 <lv_draw_rect+0xb66>
 800d21c:	ee18 2a10 	vmov	r2, s16
 800d220:	a917      	add	r1, sp, #92	; 0x5c
 800d222:	a819      	add	r0, sp, #100	; 0x64
 800d224:	f009 fd5e 	bl	8016ce4 <_lv_area_is_in>
 800d228:	b9d8      	cbnz	r0, 800d262 <lv_draw_rect+0xb66>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d22a:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d22e:	a91b      	add	r1, sp, #108	; 0x6c
 800d230:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d234:	a81d      	add	r0, sp, #116	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d236:	f8bd 7072 	ldrh.w	r7, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d23a:	3601      	adds	r6, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d23c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d240:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d242:	3701      	adds	r7, #1
 800d244:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d248:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d24a:	1aff      	subs	r7, r7, r3
        lv_area_copy(&fa, &ca);
 800d24c:	f7fe fec6 	bl	800bfdc <lv_area_copy>
        fa.y2 = fa.y1;
 800d250:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d254:	b23f      	sxth	r7, r7
        for(y = 0; y < h; y++) {
 800d256:	9d08      	ldr	r5, [sp, #32]
        fa.y2 = fa.y1;
 800d258:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d25c:	42bd      	cmp	r5, r7
 800d25e:	f2c0 82d6 	blt.w	800d80e <lv_draw_rect+0x1112>
    lv_draw_mask_remove_id(mask_rout_id);
 800d262:	ee18 0a90 	vmov	r0, s17
 800d266:	f7fe fd5b 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_mem_buf_release(mask_buf);
 800d26a:	4620      	mov	r0, r4
 800d26c:	f00a f898 	bl	80173a0 <lv_mem_buf_release>
    lv_mem_buf_release(sh_buf);
 800d270:	9807      	ldr	r0, [sp, #28]
 800d272:	f00a f895 	bl	80173a0 <lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800d276:	f898 300a 	ldrb.w	r3, [r8, #10]
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	f240 80a1 	bls.w	800d3c2 <lv_draw_rect+0xcc6>
    lv_area_copy(&coords_bg, coords);
 800d280:	9905      	ldr	r1, [sp, #20]
 800d282:	a817      	add	r0, sp, #92	; 0x5c
 800d284:	f7fe feaa 	bl	800bfdc <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800d288:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	dd24      	ble.n	800d2da <lv_draw_rect+0xbde>
 800d290:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d294:	2bfc      	cmp	r3, #252	; 0xfc
 800d296:	d920      	bls.n	800d2da <lv_draw_rect+0xbde>
 800d298:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d29c:	b1eb      	cbz	r3, 800d2da <lv_draw_rect+0xbde>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800d29e:	f898 301f 	ldrb.w	r3, [r8, #31]
 800d2a2:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 800d2a6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800d2aa:	440a      	add	r2, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d2ac:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800d2b0:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d2b4:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800d2b8:	440a      	add	r2, r1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800d2ba:	f3c3 1100 	ubfx	r1, r3, #4, #1
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800d2be:	f3c3 0340 	ubfx	r3, r3, #1, #1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d2c2:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800d2c6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800d2ca:	1a52      	subs	r2, r2, r1
 800d2cc:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800d2d0:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_opa_t opa = dsc->bg_opa;
 800d2da:	f898 500a 	ldrb.w	r5, [r8, #10]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800d2de:	2dfe      	cmp	r5, #254	; 0xfe
 800d2e0:	bf28      	it	cs
 800d2e2:	25ff      	movcs	r5, #255	; 0xff
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d2e4:	f7fa fe60 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800d2e8:	f009 f94a 	bl	8016580 <lv_disp_get_draw_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800d2ec:	465a      	mov	r2, fp
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800d2ee:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800d2f0:	a917      	add	r1, sp, #92	; 0x5c
 800d2f2:	a819      	add	r0, sp, #100	; 0x64
 800d2f4:	f009 fbf7 	bl	8016ae6 <_lv_area_intersect>
    if(is_common == false) return;
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d062      	beq.n	800d3c2 <lv_draw_rect+0xcc6>
    draw_area.x1 -= disp_area->x1;
 800d2fc:	f8b9 4010 	ldrh.w	r4, [r9, #16]
 800d300:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    draw_area.y1 -= disp_area->y1;
 800d304:	f8b9 0012 	ldrh.w	r0, [r9, #18]
    draw_area.x1 -= disp_area->x1;
 800d308:	1b1b      	subs	r3, r3, r4
    draw_area.x2 -= disp_area->x1;
 800d30a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
 800d30e:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    draw_area.x1 -= disp_area->x1;
 800d312:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.x2 -= disp_area->x1;
 800d316:	1b12      	subs	r2, r2, r4
    draw_area.y2 -= disp_area->y1;
 800d318:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    draw_area.y1 -= disp_area->y1;
 800d31c:	1a09      	subs	r1, r1, r0
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800d31e:	f898 400b 	ldrb.w	r4, [r8, #11]
    draw_area.y2 -= disp_area->y1;
 800d322:	1a1b      	subs	r3, r3, r0
    draw_area.x2 -= disp_area->x1;
 800d324:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800d328:	f004 0407 	and.w	r4, r4, #7
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d32c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    draw_area.y2 -= disp_area->y1;
 800d330:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d334:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    draw_area.y1 -= disp_area->y1;
 800d338:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d33c:	429a      	cmp	r2, r3
 800d33e:	bf08      	it	eq
 800d340:	2400      	moveq	r4, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 800d342:	f7fe fd15 	bl	800bd70 <lv_draw_mask_get_cnt>
 800d346:	900d      	str	r0, [sp, #52]	; 0x34
 800d348:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800d34c:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f040 8286 	bne.w	800d860 <lv_draw_rect+0x1164>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 800d354:	1ea3      	subs	r3, r4, #2
 800d356:	bf18      	it	ne
 800d358:	2301      	movne	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d35a:	f8bd 7060 	ldrh.w	r7, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d35e:	f8bd a062 	ldrh.w	sl, [sp, #98]	; 0x62
    if(other_mask_cnt) simple_mode = false;
 800d362:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d364:	3701      	adds	r7, #1
 800d366:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d36a:	f10a 0a01 	add.w	sl, sl, #1
 800d36e:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d372:	1aff      	subs	r7, r7, r3
    int32_t rout = dsc->radius;
 800d374:	f9b8 3000 	ldrsh.w	r3, [r8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d378:	ebaa 0a02 	sub.w	sl, sl, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d37c:	b23f      	sxth	r7, r7
    int32_t coords_h = lv_area_get_height(&coords_bg);
 800d37e:	fa0f fa8a 	sxth.w	sl, sl
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800d382:	45ba      	cmp	sl, r7
 800d384:	bfa8      	it	ge
 800d386:	46ba      	movge	sl, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
 800d388:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800d38c:	459a      	cmp	sl, r3
 800d38e:	bfa8      	it	ge
 800d390:	469a      	movge	sl, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800d392:	9b08      	ldr	r3, [sp, #32]
 800d394:	2b00      	cmp	r3, #0
 800d396:	f000 8265 	beq.w	800d864 <lv_draw_rect+0x1168>
 800d39a:	f1ba 0f00 	cmp.w	sl, #0
 800d39e:	f040 8261 	bne.w	800d864 <lv_draw_rect+0x1168>
 800d3a2:	2c00      	cmp	r4, #0
 800d3a4:	f040 825e 	bne.w	800d864 <lv_draw_rect+0x1168>
        _lv_blend_fill(clip, &coords_bg,
 800d3a8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d3ac:	a917      	add	r1, sp, #92	; 0x5c
 800d3ae:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d3b2:	4658      	mov	r0, fp
 800d3b4:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	4623      	mov	r3, r4
 800d3be:	f7fb fd47 	bl	8008e50 <_lv_blend_fill>
    if(dsc->bg_img_src == NULL) return;
 800d3c2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d05a      	beq.n	800d480 <lv_draw_rect+0xd84>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800d3ca:	f898 3016 	ldrb.w	r3, [r8, #22]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d956      	bls.n	800d480 <lv_draw_rect+0xd84>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800d3d2:	f7fc fe9b 	bl	800a10c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800d3d6:	2802      	cmp	r0, #2
 800d3d8:	f040 83fd 	bne.w	800dbd6 <lv_draw_rect+0x14da>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800d3dc:	2400      	movs	r4, #0
 800d3de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800d3e2:	a81b      	add	r0, sp, #108	; 0x6c
 800d3e4:	9400      	str	r4, [sp, #0]
 800d3e6:	e9d8 1203 	ldrd	r1, r2, [r8, #12]
 800d3ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3ee:	4623      	mov	r3, r4
 800d3f0:	f00b fed9 	bl	80191a6 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800d3f4:	9b05      	ldr	r3, [sp, #20]
 800d3f6:	f9bd 006c 	ldrsh.w	r0, [sp, #108]	; 0x6c
 800d3fa:	8899      	ldrh	r1, [r3, #4]
 800d3fc:	881a      	ldrh	r2, [r3, #0]
 800d3fe:	3101      	adds	r1, #1
 800d400:	1a89      	subs	r1, r1, r2
 800d402:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 800d406:	fa03 f181 	sxtah	r1, r3, r1
 800d40a:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
        a.x2 = a.x1 + size.x - 1;
 800d40e:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800d410:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800d414:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        a.x2 = a.x1 + size.x - 1;
 800d41e:	4403      	add	r3, r0
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d420:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
        a.x2 = a.x1 + size.x - 1;
 800d424:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d428:	9b05      	ldr	r3, [sp, #20]
 800d42a:	8859      	ldrh	r1, [r3, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d42c:	88db      	ldrh	r3, [r3, #6]
 800d42e:	3301      	adds	r3, #1
 800d430:	1a5b      	subs	r3, r3, r1
 800d432:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800d436:	fa02 f383 	sxtah	r3, r2, r3
 800d43a:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
        a.y2 = a.y1 + size.y - 1;
 800d43e:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d440:	eba1 0262 	sub.w	r2, r1, r2, asr #1
 800d444:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800d448:	b292      	uxth	r2, r2
 800d44a:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        a.y2 = a.y1 + size.y - 1;
 800d44e:	4402      	add	r2, r0
        lv_draw_label_dsc_init(&label_draw_dsc);
 800d450:	a824      	add	r0, sp, #144	; 0x90
        a.y2 = a.y1 + size.y - 1;
 800d452:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
        lv_draw_label_dsc_init(&label_draw_dsc);
 800d456:	f7fc fe7b 	bl	800a150 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800d45a:	f8d8 3010 	ldr.w	r3, [r8, #16]
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d45e:	aa24      	add	r2, sp, #144	; 0x90
 800d460:	4659      	mov	r1, fp
 800d462:	a81d      	add	r0, sp, #116	; 0x74
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800d464:	9324      	str	r3, [sp, #144]	; 0x90
        label_draw_dsc.color = dsc->bg_img_recolor;
 800d466:	f8b8 3014 	ldrh.w	r3, [r8, #20]
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d46a:	9400      	str	r4, [sp, #0]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800d46c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        label_draw_dsc.opa = dsc->bg_img_opa;
 800d470:	f898 3016 	ldrb.w	r3, [r8, #22]
 800d474:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d478:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d47c:	f7fd f840 	bl	800a500 <lv_draw_label>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800d480:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d974      	bls.n	800d572 <lv_draw_rect+0xe76>
    if(dsc->border_width == 0) return;
 800d488:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d070      	beq.n	800d572 <lv_draw_rect+0xe76>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800d490:	f898 301f 	ldrb.w	r3, [r8, #31]
 800d494:	f013 0f3e 	tst.w	r3, #62	; 0x3e
 800d498:	d06b      	beq.n	800d572 <lv_draw_rect+0xe76>
    if(dsc->border_post) return;
 800d49a:	07d9      	lsls	r1, r3, #31
 800d49c:	d469      	bmi.n	800d572 <lv_draw_rect+0xe76>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d49e:	9b05      	ldr	r3, [sp, #20]
    lv_area_copy(&area_inner, coords);
 800d4a0:	a817      	add	r0, sp, #92	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4a2:	9905      	ldr	r1, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d4a4:	889c      	ldrh	r4, [r3, #4]
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	3401      	adds	r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4aa:	8849      	ldrh	r1, [r1, #2]
    int32_t rout = dsc->radius;
 800d4ac:	f9b8 2000 	ldrsh.w	r2, [r8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d4b0:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4b2:	9b05      	ldr	r3, [sp, #20]
 800d4b4:	88db      	ldrh	r3, [r3, #6]
    int32_t coords_w = lv_area_get_width(coords);
 800d4b6:	b224      	sxth	r4, r4
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	1a5b      	subs	r3, r3, r1
    lv_area_copy(&area_inner, coords);
 800d4bc:	9905      	ldr	r1, [sp, #20]
    int32_t coords_h = lv_area_get_height(coords);
 800d4be:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800d4c0:	429c      	cmp	r4, r3
 800d4c2:	bfa8      	it	ge
 800d4c4:	461c      	movge	r4, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 800d4c6:	1064      	asrs	r4, r4, #1
 800d4c8:	4294      	cmp	r4, r2
 800d4ca:	bfa8      	it	ge
 800d4cc:	4614      	movge	r4, r2
    lv_area_copy(&area_inner, coords);
 800d4ce:	f7fe fd85 	bl	800bfdc <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800d4d2:	f898 101f 	ldrb.w	r1, [r8, #31]
 800d4d6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
 800d4da:	f011 0f08 	tst.w	r1, #8
 800d4de:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800d4e2:	f3c1 0044 	ubfx	r0, r1, #1, #5
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d4e6:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800d4ea:	bf0c      	ite	eq
 800d4ec:	18e2      	addeq	r2, r4, r3
 800d4ee:	461a      	movne	r2, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800d4f0:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 800d4f4:	f898 901e 	ldrb.w	r9, [r8, #30]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800d4f8:	bf04      	itt	eq
 800d4fa:	4252      	negeq	r2, r2
 800d4fc:	b292      	uxtheq	r2, r2
 800d4fe:	442a      	add	r2, r5
 800d500:	461d      	mov	r5, r3
 800d502:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d506:	0702      	lsls	r2, r0, #28
 800d508:	bf57      	itett	pl
 800d50a:	191a      	addpl	r2, r3, r4
 800d50c:	461a      	movmi	r2, r3
 800d50e:	4252      	negpl	r2, r2
 800d510:	b292      	uxthpl	r2, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d512:	0787      	lsls	r7, r0, #30
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d514:	eba6 0202 	sub.w	r2, r6, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d518:	f8bd 605e 	ldrh.w	r6, [sp, #94]	; 0x5e
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800d51c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d520:	bf57      	itett	pl
 800d522:	191a      	addpl	r2, r3, r4
 800d524:	461a      	movmi	r2, r3
 800d526:	4252      	negpl	r2, r2
 800d528:	b292      	uxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d52a:	07c0      	lsls	r0, r0, #31
 800d52c:	bf58      	it	pl
 800d52e:	191b      	addpl	r3, r3, r4
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d530:	4432      	add	r2, r6
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d532:	bf58      	it	pl
 800d534:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800d536:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d53a:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800d53e:	bf58      	it	pl
 800d540:	b29d      	uxthpl	r5, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800d542:	291e      	cmp	r1, #30
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800d544:	eba2 0305 	sub.w	r3, r2, r5
 800d548:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800d54c:	f040 83e4 	bne.w	800dd18 <lv_draw_rect+0x161c>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 800d550:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d554:	465a      	mov	r2, fp
 800d556:	9905      	ldr	r1, [sp, #20]
 800d558:	a817      	add	r0, sp, #92	; 0x5c
 800d55a:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800d55e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800d562:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d566:	2300      	movs	r3, #0
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d56e:	f7fe fe48 	bl	800c202 <draw_full_border>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800d572:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 800d576:	2b02      	cmp	r3, #2
 800d578:	d94f      	bls.n	800d61a <lv_draw_rect+0xf1e>
    if(dsc->outline_width == 0) return;
 800d57a:	f9b8 3022 	ldrsh.w	r3, [r8, #34]	; 0x22
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d04b      	beq.n	800d61a <lv_draw_rect+0xf1e>
    lv_area_copy(&area_inner, coords);
 800d582:	9905      	ldr	r1, [sp, #20]
 800d584:	a81d      	add	r0, sp, #116	; 0x74
 800d586:	f7fe fd29 	bl	800bfdc <lv_area_copy>
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800d58a:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
    area_inner.x1 -= pad;
 800d58e:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    lv_area_copy(&area_outer, &area_inner);
 800d592:	a91d      	add	r1, sp, #116	; 0x74
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800d594:	2b00      	cmp	r3, #0
    lv_area_copy(&area_outer, &area_inner);
 800d596:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800d598:	bf08      	it	eq
 800d59a:	f04f 33ff 	moveq.w	r3, #4294967295
    area_inner.x1 -= pad;
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	1ad2      	subs	r2, r2, r3
 800d5a2:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    area_inner.y1 -= pad;
 800d5a6:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 800d5aa:	1ad2      	subs	r2, r2, r3
 800d5ac:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    area_inner.x2 += pad;
 800d5b0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800d5b4:	441a      	add	r2, r3
 800d5b6:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 800d5ba:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800d5be:	4413      	add	r3, r2
 800d5c0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_area_copy(&area_outer, &area_inner);
 800d5c4:	f7fe fd0a 	bl	800bfdc <lv_area_copy>
    area_outer.x1 -= dsc->outline_width;
 800d5c8:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d5cc:	a924      	add	r1, sp, #144	; 0x90
    area_outer.x1 -= dsc->outline_width;
 800d5ce:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d5d2:	a81d      	add	r0, sp, #116	; 0x74
    area_outer.x1 -= dsc->outline_width;
 800d5d4:	1ad2      	subs	r2, r2, r3
 800d5d6:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
    area_outer.x2 += dsc->outline_width;
 800d5da:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800d5de:	441a      	add	r2, r3
 800d5e0:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    area_outer.y1 -= dsc->outline_width;
 800d5e4:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
 800d5e8:	1ad2      	subs	r2, r2, r3
 800d5ea:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
    area_outer.y2 += dsc->outline_width;
 800d5ee:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 800d5f2:	4413      	add	r3, r2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d5f4:	465a      	mov	r2, fp
    area_outer.y2 += dsc->outline_width;
 800d5f6:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800d5fa:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 800d604:	9302      	str	r3, [sp, #8]
 800d606:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 800d60a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d60e:	2301      	movs	r3, #1
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d616:	f7fe fdf4 	bl	800c202 <draw_full_border>
}
 800d61a:	b02d      	add	sp, #180	; 0xb4
 800d61c:	ecbd 8b02 	vpop	{d8}
 800d620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d624:	4631      	mov	r1, r6
 800d626:	463a      	mov	r2, r7
 800d628:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d62a:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d62e:	f009 fee3 	bl	80173f8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d632:	463b      	mov	r3, r7
 800d634:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d638:	4620      	mov	r0, r4
 800d63a:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d63e:	f7fe fb4d 	bl	800bcdc <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d642:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d646:	2801      	cmp	r0, #1
 800d648:	bf08      	it	eq
 800d64a:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d64c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d650:	9302      	str	r3, [sp, #8]
 800d652:	4651      	mov	r1, sl
 800d654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d656:	e9cd 0300 	strd	r0, r3, [sp]
 800d65a:	4623      	mov	r3, r4
 800d65c:	4658      	mov	r0, fp
 800d65e:	f7fb fbf7 	bl	8008e50 <_lv_blend_fill>
                fa.y1++;
 800d662:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d666:	3301      	adds	r3, #1
 800d668:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800d66c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d670:	3301      	adds	r3, #1
 800d672:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800d676:	9b06      	ldr	r3, [sp, #24]
 800d678:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800d67a:	e434      	b.n	800cee6 <lv_draw_rect+0x7ea>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d67c:	4639      	mov	r1, r7
 800d67e:	4632      	mov	r2, r6
 800d680:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d682:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d686:	f009 feb7 	bl	80173f8 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d68a:	4633      	mov	r3, r6
 800d68c:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d690:	4620      	mov	r0, r4
 800d692:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d696:	f7fe fb21 	bl	800bcdc <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d69a:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d69e:	2801      	cmp	r0, #1
 800d6a0:	bf08      	it	eq
 800d6a2:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d6a4:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d6a8:	9302      	str	r3, [sp, #8]
 800d6aa:	4651      	mov	r1, sl
 800d6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ae:	e9cd 0300 	strd	r0, r3, [sp]
 800d6b2:	4623      	mov	r3, r4
 800d6b4:	4658      	mov	r0, fp
 800d6b6:	f7fb fbcb 	bl	8008e50 <_lv_blend_fill>
                fa.y1--;
 800d6ba:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2--;
 800d6c4:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800d6ce:	9b06      	ldr	r3, [sp, #24]
 800d6d0:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800d6d2:	e466      	b.n	800cfa2 <lv_draw_rect+0x8a6>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f009 fe8d 	bl	80173f8 <lv_memcpy>
                if(simple_mode) {
 800d6de:	9b08      	ldr	r3, [sp, #32]
 800d6e0:	b94b      	cbnz	r3, 800d6f6 <lv_draw_rect+0xffa>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d6e2:	4633      	mov	r3, r6
 800d6e4:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d6e8:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f7fe faf5 	bl	800bcdc <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d6f2:	2801      	cmp	r0, #1
 800d6f4:	d100      	bne.n	800d6f8 <lv_draw_rect+0xffc>
 800d6f6:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800d6f8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d6fc:	4651      	mov	r1, sl
 800d6fe:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800d702:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800d70c:	e9cd 0300 	strd	r0, r3, [sp]
 800d710:	4623      	mov	r3, r4
 800d712:	4658      	mov	r0, fp
 800d714:	f7fb fb9c 	bl	8008e50 <_lv_blend_fill>
                fa.y1++;
 800d718:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d71c:	3301      	adds	r3, #1
 800d71e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800d722:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d726:	3301      	adds	r3, #1
 800d728:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d72c:	e49b      	b.n	800d066 <lv_draw_rect+0x96a>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 800d72e:	7833      	ldrb	r3, [r6, #0]
            lv_memset(mask_buf, opa_tmp, w);
 800d730:	4620      	mov	r0, r4
 800d732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d734:	ea02 0103 	and.w	r1, r2, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800d738:	29ff      	cmp	r1, #255	; 0xff
 800d73a:	bf18      	it	ne
 800d73c:	fb12 f303 	smulbbne	r3, r2, r3
            lv_memset(mask_buf, opa_tmp, w);
 800d740:	463a      	mov	r2, r7
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800d742:	bf18      	it	ne
 800d744:	f3c3 2107 	ubfxne	r1, r3, #8, #8
            lv_memset(mask_buf, opa_tmp, w);
 800d748:	f009 ff46 	bl	80175d8 <lv_memset>
            if(simple_mode) {
 800d74c:	9b08      	ldr	r3, [sp, #32]
 800d74e:	b94b      	cbnz	r3, 800d764 <lv_draw_rect+0x1068>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d750:	463b      	mov	r3, r7
 800d752:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d756:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7fe fabe 	bl	800bcdc <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d760:	2801      	cmp	r0, #1
 800d762:	d100      	bne.n	800d766 <lv_draw_rect+0x106a>
 800d764:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d766:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d76a:	4651      	mov	r1, sl
 800d76c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800d770:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d774:	9302      	str	r3, [sp, #8]
 800d776:	23ff      	movs	r3, #255	; 0xff
 800d778:	e9cd 0300 	strd	r0, r3, [sp]
 800d77c:	4623      	mov	r3, r4
 800d77e:	4658      	mov	r0, fp
 800d780:	f7fb fb66 	bl	8008e50 <_lv_blend_fill>
            fa.y1++;
 800d784:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d788:	3301      	adds	r3, #1
 800d78a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2++;
 800d78e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d792:	3301      	adds	r3, #1
 800d794:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size;
 800d798:	9b06      	ldr	r3, [sp, #24]
 800d79a:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800d79c:	e4c0      	b.n	800d120 <lv_draw_rect+0xa24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 800d79e:	7833      	ldrb	r3, [r6, #0]
            lv_memset(mask_buf, opa_tmp, w);
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7a4:	ea02 0103 	and.w	r1, r2, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800d7a8:	29ff      	cmp	r1, #255	; 0xff
 800d7aa:	bf18      	it	ne
 800d7ac:	fb12 f303 	smulbbne	r3, r2, r3
            lv_memset(mask_buf, opa_tmp, w);
 800d7b0:	463a      	mov	r2, r7
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800d7b2:	bf18      	it	ne
 800d7b4:	f3c3 2107 	ubfxne	r1, r3, #8, #8
            lv_memset(mask_buf, opa_tmp, w);
 800d7b8:	f009 ff0e 	bl	80175d8 <lv_memset>
            if(simple_mode) {
 800d7bc:	9b08      	ldr	r3, [sp, #32]
 800d7be:	b94b      	cbnz	r3, 800d7d4 <lv_draw_rect+0x10d8>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d7c0:	463b      	mov	r3, r7
 800d7c2:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d7c6:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f7fe fa86 	bl	800bcdc <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d7d0:	2801      	cmp	r0, #1
 800d7d2:	d100      	bne.n	800d7d6 <lv_draw_rect+0x10da>
 800d7d4:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d7d6:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d7da:	4651      	mov	r1, sl
 800d7dc:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800d7e0:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d7e4:	9302      	str	r3, [sp, #8]
 800d7e6:	23ff      	movs	r3, #255	; 0xff
 800d7e8:	e9cd 0300 	strd	r0, r3, [sp]
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	4658      	mov	r0, fp
 800d7f0:	f7fb fb2e 	bl	8008e50 <_lv_blend_fill>
            fa.y1--;
 800d7f4:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2--;
 800d7fe:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d802:	3b01      	subs	r3, #1
 800d804:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size;
 800d808:	9b06      	ldr	r3, [sp, #24]
 800d80a:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800d80c:	e4e6      	b.n	800d1dc <lv_draw_rect+0xae0>
            lv_memset(mask_buf, dsc->shadow_opa, w);
 800d80e:	4632      	mov	r2, r6
 800d810:	f898 1032 	ldrb.w	r1, [r8, #50]	; 0x32
 800d814:	4620      	mov	r0, r4
        for(y = 0; y < h; y++) {
 800d816:	3501      	adds	r5, #1
            lv_memset(mask_buf, dsc->shadow_opa, w);
 800d818:	f009 fede 	bl	80175d8 <lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d81c:	4633      	mov	r3, r6
 800d81e:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d822:	4620      	mov	r0, r4
 800d824:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d828:	f7fe fa58 	bl	800bcdc <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d82c:	f898 3002 	ldrb.w	r3, [r8, #2]
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d830:	2801      	cmp	r0, #1
 800d832:	bf08      	it	eq
 800d834:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d836:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d83a:	a91d      	add	r1, sp, #116	; 0x74
 800d83c:	9000      	str	r0, [sp, #0]
 800d83e:	4658      	mov	r0, fp
 800d840:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d844:	4623      	mov	r3, r4
 800d846:	f7fb fb03 	bl	8008e50 <_lv_blend_fill>
            fa.y1++;
 800d84a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d84e:	3301      	adds	r3, #1
 800d850:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2++;
 800d854:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d858:	3301      	adds	r3, #1
 800d85a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d85e:	e4fd      	b.n	800d25c <lv_draw_rect+0xb60>
    if(other_mask_cnt) simple_mode = false;
 800d860:	2300      	movs	r3, #0
 800d862:	e57a      	b.n	800d35a <lv_draw_rect+0xc5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d864:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800d868:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800d86c:	3301      	adds	r3, #1
 800d86e:	1a9b      	subs	r3, r3, r2
 800d870:	b21b      	sxth	r3, r3
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800d872:	4618      	mov	r0, r3
 800d874:	ee08 3a90 	vmov	s17, r3
 800d878:	f009 ff36 	bl	80176e8 <lv_mem_buf_get>
        if(rout > 0) {
 800d87c:	f1ba 0f00 	cmp.w	sl, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800d880:	4606      	mov	r6, r0
        if(rout > 0) {
 800d882:	f340 80ad 	ble.w	800d9e0 <lv_draw_rect+0x12e4>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 800d886:	2300      	movs	r3, #0
 800d888:	4652      	mov	r2, sl
 800d88a:	a917      	add	r1, sp, #92	; 0x5c
 800d88c:	a824      	add	r0, sp, #144	; 0x90
 800d88e:	f7fe fb75 	bl	800bf7c <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800d892:	2100      	movs	r1, #0
 800d894:	a824      	add	r0, sp, #144	; 0x90
 800d896:	f7fe fa0b 	bl	800bcb0 <lv_draw_mask_add>
 800d89a:	900f      	str	r0, [sp, #60]	; 0x3c
        lv_color_t grad_color = dsc->bg_color;
 800d89c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800d8a0:	2c02      	cmp	r4, #2
        lv_color_t grad_color = dsc->bg_color;
 800d8a2:	ee08 3a10 	vmov	s16, r3
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800d8a6:	f040 80ac 	bne.w	800da02 <lv_draw_rect+0x1306>
            grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800d8aa:	0078      	lsls	r0, r7, #1
 800d8ac:	f009 ff1c 	bl	80176e8 <lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 800d8b0:	2300      	movs	r3, #0
            grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800d8b2:	9009      	str	r0, [sp, #36]	; 0x24
            for(i = 0; i < coords_w; i++) {
 800d8b4:	429f      	cmp	r7, r3
 800d8b6:	f300 8097 	bgt.w	800d9e8 <lv_draw_rect+0x12ec>
 800d8ba:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 800d8be:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 800d8c2:	1c53      	adds	r3, r2, #1
        fill_area.x2 = coords_bg.x2;
 800d8c4:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800d8c8:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 800d8cc:	1a5b      	subs	r3, r3, r1
        fill_area.x1 = coords_bg.x1;
 800d8ce:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d8d2:	9207      	str	r2, [sp, #28]
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800d8d4:	b21b      	sxth	r3, r3
 800d8d6:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800d8da:	930c      	str	r3, [sp, #48]	; 0x30
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800d8dc:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b21b      	sxth	r3, r3
 800d8e4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        fill_area.y2 = fill_area.y1;
 800d8e8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800d8ec:	fa1f f38a 	uxth.w	r3, sl
 800d8f0:	930b      	str	r3, [sp, #44]	; 0x2c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800d8f2:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800d8f6:	9a07      	ldr	r2, [sp, #28]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	f340 8085 	ble.w	800da08 <lv_draw_rect+0x130c>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800d8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d900:	4323      	orrs	r3, r4
 800d902:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800d906:	d15e      	bne.n	800d9c6 <lv_draw_rect+0x12ca>
 800d908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d90a:	2a32      	cmp	r2, #50	; 0x32
 800d90c:	dd5b      	ble.n	800d9c6 <lv_draw_rect+0x12ca>
            fill_area.x1 = coords_bg.x1 + rout;
 800d90e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800d912:	fa1f f78a 	uxth.w	r7, sl
            _lv_blend_fill(clip, &fill_area,
 800d916:	a91b      	add	r1, sp, #108	; 0x6c
 800d918:	4658      	mov	r0, fp
            fill_area.x1 = coords_bg.x1 + rout;
 800d91a:	fa12 fa8a 	uxtah	sl, r2, sl
            fill_area.x2 = coords_bg.x2 - rout;
 800d91e:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 800d922:	2401      	movs	r4, #1
            fill_area.x2 = coords_bg.x2 - rout;
 800d924:	1bd2      	subs	r2, r2, r7
            fill_area.x1 = coords_bg.x1 + rout;
 800d926:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
            fill_area.x2 = coords_bg.x2 - rout;
 800d92a:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            fill_area.y1 = coords_bg.y1;
 800d92e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 800d932:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y1 + rout;
 800d936:	443a      	add	r2, r7
 800d938:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800d93c:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d940:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	9200      	str	r2, [sp, #0]
 800d948:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d94c:	f7fb fa80 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 800d950:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800d954:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800d958:	4658      	mov	r0, fp
            fill_area.y1 = coords_bg.y2 - rout;
 800d95a:	1bca      	subs	r2, r1, r7
            fill_area.y2 = coords_bg.y2;
 800d95c:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800d960:	9400      	str	r4, [sp, #0]
 800d962:	a91b      	add	r1, sp, #108	; 0x6c
            fill_area.y1 = coords_bg.y2 - rout;
 800d964:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800d966:	429a      	cmp	r2, r3
            fill_area.y1 = coords_bg.y2 - rout;
 800d968:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 800d96c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800d970:	bfdc      	itt	le
 800d972:	3301      	addle	r3, #1
 800d974:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 800d978:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d97c:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800d980:	2300      	movs	r3, #0
 800d982:	f7fb fa65 	bl	8008e50 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 800d986:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
            _lv_blend_fill(clip, &fill_area,
 800d98a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d98e:	a91b      	add	r1, sp, #108	; 0x6c
            fill_area.x1 = coords_bg.x1;
 800d990:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area,
 800d994:	4658      	mov	r0, fp
            fill_area.x2 = coords_bg.x2;
 800d996:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 800d99a:	9400      	str	r4, [sp, #0]
            fill_area.x2 = coords_bg.x2;
 800d99c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800d9a0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800d9a4:	4423      	add	r3, r4
 800d9a6:	443b      	add	r3, r7
 800d9a8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800d9ac:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
 800d9b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d9b8:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800d9bc:	2300      	movs	r3, #0
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800d9be:	f8ad 7072 	strh.w	r7, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800d9c2:	f7fb fa45 	bl	8008e50 <_lv_blend_fill>
        if(grad_map) lv_mem_buf_release(grad_map);
 800d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c8:	b113      	cbz	r3, 800d9d0 <lv_draw_rect+0x12d4>
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f009 fce8 	bl	80173a0 <lv_mem_buf_release>
        if(mask_buf) lv_mem_buf_release(mask_buf);
 800d9d0:	b116      	cbz	r6, 800d9d8 <lv_draw_rect+0x12dc>
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f009 fce4 	bl	80173a0 <lv_mem_buf_release>
        lv_draw_mask_remove_id(mask_rout_id);
 800d9d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d9da:	f7fe f9a1 	bl	800bd20 <lv_draw_mask_remove_id>
 800d9de:	e4f0      	b.n	800d3c2 <lv_draw_rect+0xcc6>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800d9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9e6:	e759      	b.n	800d89c <lv_draw_rect+0x11a0>
                grad_map[i] = grad_get(dsc, coords_w, i);
 800d9e8:	b21a      	sxth	r2, r3
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	9306      	str	r3, [sp, #24]
 800d9f0:	f7fe fb01 	bl	800bff6 <grad_get>
 800d9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	9b06      	ldr	r3, [sp, #24]
 800d9fa:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
            for(i = 0; i < coords_w; i++) {
 800d9fe:	3301      	adds	r3, #1
 800da00:	e758      	b.n	800d8b4 <lv_draw_rect+0x11b8>
        lv_color_t * grad_map = NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	9309      	str	r3, [sp, #36]	; 0x24
 800da06:	e758      	b.n	800d8ba <lv_draw_rect+0x11be>
            int32_t y = h + draw_buf->area.y1;
 800da08:	9a07      	ldr	r2, [sp, #28]
 800da0a:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
 800da0e:	4413      	add	r3, r2
 800da10:	930a      	str	r3, [sp, #40]	; 0x28
            if(y > coords_bg.y1 + rout + 1 &&
 800da12:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800da16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da18:	4453      	add	r3, sl
 800da1a:	3301      	adds	r3, #1
 800da1c:	429a      	cmp	r2, r3
 800da1e:	dd0a      	ble.n	800da36 <lv_draw_rect+0x133a>
               y < coords_bg.y2 - rout - 1) {
 800da20:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800da24:	eba3 030a 	sub.w	r3, r3, sl
 800da28:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 800da2a:	429a      	cmp	r2, r3
 800da2c:	da03      	bge.n	800da36 <lv_draw_rect+0x133a>
                if(simple_mode == false) {
 800da2e:	9b08      	ldr	r3, [sp, #32]
 800da30:	2b00      	cmp	r3, #0
 800da32:	f040 8258 	bne.w	800dee6 <lv_draw_rect+0x17ea>
                lv_memset(mask_buf, opa, draw_area_w);
 800da36:	ee18 2a90 	vmov	r2, s17
 800da3a:	4629      	mov	r1, r5
 800da3c:	4630      	mov	r0, r6
 800da3e:	f009 fdcb 	bl	80175d8 <lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800da42:	9b07      	ldr	r3, [sp, #28]
 800da44:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800da48:	4630      	mov	r0, r6
 800da4a:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800da4e:	441a      	add	r2, r3
 800da50:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800da54:	4419      	add	r1, r3
 800da56:	b212      	sxth	r2, r2
 800da58:	ee18 3a90 	vmov	r3, s17
 800da5c:	b209      	sxth	r1, r1
 800da5e:	f7fe f93d 	bl	800bcdc <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
 800da62:	2802      	cmp	r0, #2
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800da64:	4607      	mov	r7, r0
                opa2 = LV_OPA_COVER;
 800da66:	bf14      	ite	ne
 800da68:	462b      	movne	r3, r5
 800da6a:	23ff      	moveq	r3, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
 800da6c:	2c01      	cmp	r4, #1
                opa2 = LV_OPA_COVER;
 800da6e:	9306      	str	r3, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
 800da70:	d11d      	bne.n	800daae <lv_draw_rect+0x13b2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800da72:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800da76:	4640      	mov	r0, r8
 800da78:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800da7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da7e:	3101      	adds	r1, #1
 800da80:	1ad2      	subs	r2, r2, r3
 800da82:	1ac9      	subs	r1, r1, r3
 800da84:	b212      	sxth	r2, r2
 800da86:	b209      	sxth	r1, r1
 800da88:	f7fe fab5 	bl	800bff6 <grad_get>
            if(simple_mode && split &&
 800da8c:	9b08      	ldr	r3, [sp, #32]
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800da8e:	ee08 0a10 	vmov	s16, r0
            if(simple_mode && split &&
 800da92:	b983      	cbnz	r3, 800dab6 <lv_draw_rect+0x13ba>
                    _lv_blend_fill(clip, &fill_area,
 800da94:	f898 3002 	ldrb.w	r3, [r8, #2]
 800da98:	ee18 2a10 	vmov	r2, s16
 800da9c:	a91b      	add	r1, sp, #108	; 0x6c
 800da9e:	9302      	str	r3, [sp, #8]
 800daa0:	9b06      	ldr	r3, [sp, #24]
 800daa2:	e9cd 7300 	strd	r7, r3, [sp]
 800daa6:	4633      	mov	r3, r6
 800daa8:	e06a      	b.n	800db80 <lv_draw_rect+0x1484>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800daaa:	4627      	mov	r7, r4
 800daac:	e7e1      	b.n	800da72 <lv_draw_rect+0x1376>
            if(simple_mode && split &&
 800daae:	9b08      	ldr	r3, [sp, #32]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f000 821e 	beq.w	800def2 <lv_draw_rect+0x17f6>
 800dab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dab8:	2b32      	cmp	r3, #50	; 0x32
 800daba:	dd65      	ble.n	800db88 <lv_draw_rect+0x148c>
               (y < coords_bg.y1 + rout + 1 ||
 800dabc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
            if(simple_mode && split &&
 800dac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
               (y < coords_bg.y1 + rout + 1 ||
 800dac2:	4453      	add	r3, sl
            if(simple_mode && split &&
 800dac4:	429a      	cmp	r2, r3
 800dac6:	dd05      	ble.n	800dad4 <lv_draw_rect+0x13d8>
                y > coords_bg.y2 - rout - 1)) {
 800dac8:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800dacc:	eba3 030a 	sub.w	r3, r3, sl
               (y < coords_bg.y1 + rout + 1 ||
 800dad0:	429a      	cmp	r2, r3
 800dad2:	db59      	blt.n	800db88 <lv_draw_rect+0x148c>
                fill_area2.x1 = coords_bg.x1;
 800dad4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
                _lv_blend_fill(clip, &fill_area2,
 800dad8:	a91d      	add	r1, sp, #116	; 0x74
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800dada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                _lv_blend_fill(clip, &fill_area2,
 800dadc:	4658      	mov	r0, fp
                fill_area2.x1 = coords_bg.x1;
 800dade:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800dae2:	3b01      	subs	r3, #1
 800dae4:	4413      	add	r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800dae6:	ee18 2a10 	vmov	r2, s16
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800daea:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.y1 = fill_area.y1;
 800daee:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800daf2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fill_area2.y2 = fill_area.y2;
 800daf6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800dafa:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fill_area2,
 800dafe:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db02:	9302      	str	r3, [sp, #8]
 800db04:	9b06      	ldr	r3, [sp, #24]
 800db06:	e9cd 7300 	strd	r7, r3, [sp]
 800db0a:	4633      	mov	r3, r6
 800db0c:	f7fb f9a0 	bl	8008e50 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 800db10:	2c01      	cmp	r4, #1
 800db12:	d116      	bne.n	800db42 <lv_draw_rect+0x1446>
                    fill_area2.x1 = coords_bg.x1 + rout;
 800db14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    _lv_blend_fill(clip, &fill_area2,
 800db16:	a91d      	add	r1, sp, #116	; 0x74
                    fill_area2.x1 = coords_bg.x1 + rout;
 800db18:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
                    _lv_blend_fill(clip, &fill_area2,
 800db1c:	4658      	mov	r0, fp
 800db1e:	9400      	str	r4, [sp, #0]
                    fill_area2.x1 = coords_bg.x1 + rout;
 800db20:	4413      	add	r3, r2
 800db22:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    fill_area2.x2 = coords_bg.x2 - rout;
 800db26:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800db2a:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 800db2c:	ee18 2a10 	vmov	r2, s16
                    fill_area2.x2 = coords_bg.x2 - rout;
 800db30:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                    _lv_blend_fill(clip, &fill_area2,
 800db34:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db38:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800db3c:	2300      	movs	r3, #0
 800db3e:	f7fb f987 	bl	8008e50 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800db42:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800db46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db48:	1c5a      	adds	r2, r3, #1
                fill_area2.x2 = coords_bg.x2;
 800db4a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800db4e:	eba3 030a 	sub.w	r3, r3, sl
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800db52:	1a52      	subs	r2, r2, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800db54:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800db58:	3301      	adds	r3, #1
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800db5a:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800db5e:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
 800db62:	440a      	add	r2, r1
                _lv_blend_fill(clip, &fill_area2,
 800db64:	a91d      	add	r1, sp, #116	; 0x74
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800db66:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800db68:	f898 2002 	ldrb.w	r2, [r8, #2]
 800db6c:	9202      	str	r2, [sp, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	bfac      	ite	ge
 800db72:	18f3      	addge	r3, r6, r3
 800db74:	1c33      	addlt	r3, r6, #0
 800db76:	9a06      	ldr	r2, [sp, #24]
 800db78:	e9cd 7200 	strd	r7, r2, [sp]
 800db7c:	ee18 2a10 	vmov	r2, s16
                    _lv_blend_fill(clip, &fill_area,
 800db80:	4658      	mov	r0, fp
 800db82:	f7fb f965 	bl	8008e50 <_lv_blend_fill>
 800db86:	e00d      	b.n	800dba4 <lv_draw_rect+0x14a8>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800db88:	2c02      	cmp	r4, #2
 800db8a:	d119      	bne.n	800dbc0 <lv_draw_rect+0x14c4>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->blend_mode);
 800db8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db90:	a91b      	add	r1, sp, #108	; 0x6c
 800db92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db94:	4658      	mov	r0, fp
 800db96:	9302      	str	r3, [sp, #8]
 800db98:	9b06      	ldr	r3, [sp, #24]
 800db9a:	e9cd 7300 	strd	r7, r3, [sp]
 800db9e:	4633      	mov	r3, r6
 800dba0:	f7fb fc12 	bl	80093c8 <_lv_blend_map>
            fill_area.y1++;
 800dba4:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800dba8:	3301      	adds	r3, #1
 800dbaa:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2++;
 800dbae:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800dbb8:	9b07      	ldr	r3, [sp, #28]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	9307      	str	r3, [sp, #28]
 800dbbe:	e698      	b.n	800d8f2 <lv_draw_rect+0x11f6>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 800dbc0:	2c01      	cmp	r4, #1
 800dbc2:	f43f af67 	beq.w	800da94 <lv_draw_rect+0x1398>
                else if(other_mask_cnt != 0 || !split) {
 800dbc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f47f af63 	bne.w	800da94 <lv_draw_rect+0x1398>
 800dbce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbd0:	2b32      	cmp	r3, #50	; 0x32
 800dbd2:	dce7      	bgt.n	800dba4 <lv_draw_rect+0x14a8>
 800dbd4:	e75e      	b.n	800da94 <lv_draw_rect+0x1398>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800dbd6:	a91b      	add	r1, sp, #108	; 0x6c
 800dbd8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800dbdc:	f001 f8f6 	bl	800edcc <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 800dbe0:	2801      	cmp	r0, #1
 800dbe2:	f47f ac4d 	bne.w	800d480 <lv_draw_rect+0xd84>
        lv_draw_img_dsc_init(&img_dsc);
 800dbe6:	a824      	add	r0, sp, #144	; 0x90
 800dbe8:	f7fc f96e 	bl	8009ec8 <lv_draw_img_dsc_init>
        img_dsc.blend_mode = dsc->blend_mode;
 800dbec:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 800dbf0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dbf4:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
 800dbf8:	f362 0303 	bfi	r3, r2, #0, #4
 800dbfc:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
        img_dsc.recolor = dsc->bg_img_recolor;
 800dc00:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 800dc04:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800dc08:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 800dc0c:	ba5b      	rev16	r3, r3
 800dc0e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        if(dsc->bg_img_tiled == false) {
 800dc12:	f898 3018 	ldrb.w	r3, [r8, #24]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d137      	bne.n	800dc8a <lv_draw_rect+0x158e>
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dc1a:	9b05      	ldr	r3, [sp, #20]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800dc1c:	f3c0 154a 	ubfx	r5, r0, #5, #11
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dc20:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800dc22:	881a      	ldrh	r2, [r3, #0]
            area.y2 = area.y1 + header.h - 1;
 800dc24:	3d01      	subs	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dc26:	889b      	ldrh	r3, [r3, #4]
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dc28:	f3c1 268a 	ubfx	r6, r1, #10, #11
 800dc2c:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 800dc30:	3301      	adds	r3, #1
            area.x2 = area.x1 + header.w - 1;
 800dc32:	3e01      	subs	r6, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dc34:	1a51      	subs	r1, r2, r1
 800dc36:	1a9b      	subs	r3, r3, r2
 800dc38:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800dc3c:	fa04 f383 	sxtah	r3, r4, r3
 800dc40:	eb01 0363 	add.w	r3, r1, r3, asr #1
 800dc44:	b299      	uxth	r1, r3
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800dc46:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dc48:	88dc      	ldrh	r4, [r3, #6]
 800dc4a:	885a      	ldrh	r2, [r3, #2]
 800dc4c:	3401      	adds	r4, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800dc4e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
            area.x2 = area.x1 + header.w - 1;
 800dc52:	4431      	add	r1, r6
 800dc54:	1aa4      	subs	r4, r4, r2
 800dc56:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800dc5a:	4659      	mov	r1, fp
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800dc5c:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 800dc60:	fa03 f484 	sxtah	r4, r3, r4
 800dc64:	f3c0 1389 	ubfx	r3, r0, #6, #10
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800dc68:	a81d      	add	r0, sp, #116	; 0x74
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800dc6a:	1ad3      	subs	r3, r2, r3
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800dc6c:	f8d8 200c 	ldr.w	r2, [r8, #12]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800dc70:	eb03 0364 	add.w	r3, r3, r4, asr #1
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            area.y2 = area.y1 + header.h - 1;
 800dc7a:	442b      	add	r3, r5
 800dc7c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800dc80:	ab24      	add	r3, sp, #144	; 0x90
 800dc82:	f7fc f955 	bl	8009f30 <lv_draw_img>
 800dc86:	f7ff bbfb 	b.w	800d480 <lv_draw_rect+0xd84>
            area.y1 = coords->y1;
 800dc8a:	9b05      	ldr	r3, [sp, #20]
            area.y2 = area.y1 + header.h - 1;
 800dc8c:	f3c0 104a 	ubfx	r0, r0, #5, #11
            area.y1 = coords->y1;
 800dc90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            area.y2 = area.y1 + header.h - 1;
 800dc94:	3801      	subs	r0, #1
 800dc96:	4418      	add	r0, r3
            area.y1 = coords->y1;
 800dc98:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            area.y2 = area.y1 + header.h - 1;
 800dc9c:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800dca0:	9b05      	ldr	r3, [sp, #20]
 800dca2:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dca6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	f73f abe8 	bgt.w	800d480 <lv_draw_rect+0xd84>
                area.x1 = coords->x1;
 800dcb0:	9b05      	ldr	r3, [sp, #20]
 800dcb2:	f9b3 2000 	ldrsh.w	r2, [r3]
                area.x2 = area.x1 + header.w - 1;
 800dcb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
                area.x1 = coords->x1;
 800dcb8:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                area.x2 = area.x1 + header.w - 1;
 800dcbc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dcc0:	3b01      	subs	r3, #1
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 800dcc8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 800dccc:	9b05      	ldr	r3, [sp, #20]
 800dcce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	dd0e      	ble.n	800dcf4 <lv_draw_rect+0x15f8>
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800dcd6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800dcda:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 800dcde:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800dce2:	441a      	add	r2, r3
 800dce4:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 800dce8:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800dcec:	4413      	add	r3, r2
 800dcee:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 800dcf2:	e7d5      	b.n	800dca0 <lv_draw_rect+0x15a4>
                    lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800dcf4:	ab24      	add	r3, sp, #144	; 0x90
 800dcf6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800dcfa:	4659      	mov	r1, fp
 800dcfc:	a81d      	add	r0, sp, #116	; 0x74
 800dcfe:	f7fc f917 	bl	8009f30 <lv_draw_img>
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800dd02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd04:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 800dd08:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dd0c:	441a      	add	r2, r3
 800dd0e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 800dd12:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800dd16:	e7d4      	b.n	800dcc2 <lv_draw_rect+0x15c6>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800dd18:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 800dd1c:	bf28      	it	cs
 800dd1e:	f04f 09ff 	movcs.w	r9, #255	; 0xff
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800dd22:	f7fa f941 	bl	8007fa8 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800dd26:	f008 fc2b 	bl	8016580 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800dd2a:	465a      	mov	r2, fp
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800dd2c:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800dd2e:	9905      	ldr	r1, [sp, #20]
 800dd30:	a819      	add	r0, sp, #100	; 0x64
 800dd32:	f008 fed8 	bl	8016ae6 <_lv_area_intersect>
        if(is_common == false) return;
 800dd36:	2800      	cmp	r0, #0
 800dd38:	f43f ac1b 	beq.w	800d572 <lv_draw_rect+0xe76>
        draw_area.x1 -= disp_area->x1;
 800dd3c:	8a3a      	ldrh	r2, [r7, #16]
 800dd3e:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
        draw_area.y1 -= disp_area->y1;
 800dd42:	8a7d      	ldrh	r5, [r7, #18]
        draw_area.x1 -= disp_area->x1;
 800dd44:	1a83      	subs	r3, r0, r2
        draw_area.y1 -= disp_area->y1;
 800dd46:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
        draw_area.x1 -= disp_area->x1;
 800dd4a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        draw_area.y1 -= disp_area->y1;
 800dd4e:	1b49      	subs	r1, r1, r5
        draw_area.x2 -= disp_area->x1;
 800dd50:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
        draw_area.y1 -= disp_area->y1;
 800dd54:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
        draw_area.x2 -= disp_area->x1;
 800dd58:	1a9a      	subs	r2, r3, r2
 800dd5a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        draw_area.y2 -= disp_area->y1;
 800dd5e:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 800dd62:	1b52      	subs	r2, r2, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dd64:	1c5d      	adds	r5, r3, #1
 800dd66:	1a2d      	subs	r5, r5, r0
 800dd68:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 800dd6c:	b22d      	sxth	r5, r5
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f009 fcba 	bl	80176e8 <lv_mem_buf_get>
        if(rout > 0) {
 800dd74:	2c00      	cmp	r4, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800dd76:	4682      	mov	sl, r0
        if(rout > 0) {
 800dd78:	dd65      	ble.n	800de46 <lv_draw_rect+0x174a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	b222      	sxth	r2, r4
 800dd7e:	9905      	ldr	r1, [sp, #20]
 800dd80:	a81d      	add	r0, sp, #116	; 0x74
 800dd82:	f7fe f8fb 	bl	800bf7c <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800dd86:	2100      	movs	r1, #0
 800dd88:	a81d      	add	r0, sp, #116	; 0x74
 800dd8a:	f7fd ff91 	bl	800bcb0 <lv_draw_mask_add>
 800dd8e:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800dd90:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 800dd94:	2301      	movs	r3, #1
 800dd96:	a917      	add	r1, sp, #92	; 0x5c
 800dd98:	a824      	add	r0, sp, #144	; 0x90
 800dd9a:	1aa2      	subs	r2, r4, r2
 800dd9c:	b212      	sxth	r2, r2
 800dd9e:	f7fe f8ed 	bl	800bf7c <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800dda2:	2100      	movs	r1, #0
 800dda4:	a824      	add	r0, sp, #144	; 0x90
 800dda6:	f7fd ff83 	bl	800bcb0 <lv_draw_mask_add>
        int32_t corner_size = LV_MAX(rout, dsc->border_width - 1);
 800ddaa:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ddae:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800ddb2:	ee08 0a10 	vmov	s16, r0
        int32_t corner_size = LV_MAX(rout, dsc->border_width - 1);
 800ddb6:	429c      	cmp	r4, r3
 800ddb8:	bfb8      	it	lt
 800ddba:	f103 34ff 	addlt.w	r4, r3, #4294967295
        lv_color_t color = dsc->border_color;
 800ddbe:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800ddc2:	ee08 3a90 	vmov	s17, r3
        lv_blend_mode_t blend_mode = dsc->blend_mode;
 800ddc6:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ddca:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
 800ddcc:	9b05      	ldr	r3, [sp, #20]
 800ddce:	f9b3 2000 	ldrsh.w	r2, [r3]
        fill_area.x2 = coords->x2;
 800ddd2:	889b      	ldrh	r3, [r3, #4]
        fill_area.x1 = coords->x1;
 800ddd4:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        fill_area.x2 = coords->x2;
 800ddd8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800dddc:	8a7b      	ldrh	r3, [r7, #18]
 800ddde:	4433      	add	r3, r6
 800dde0:	b21b      	sxth	r3, r3
 800dde2:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        fill_area.y2 = fill_area.y1;
 800dde6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800ddea:	f898 301f 	ldrb.w	r3, [r8, #31]
 800ddee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ddf2:	2b08      	cmp	r3, #8
 800ddf4:	bf04      	itt	eq
 800ddf6:	1912      	addeq	r2, r2, r4
 800ddf8:	f8ad 2070 	strheq.w	r2, [sp, #112]	; 0x70
        volatile bool top_only = false;
 800ddfc:	2200      	movs	r2, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800ddfe:	2b04      	cmp	r3, #4
        volatile bool top_only = false;
 800de00:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        volatile bool bottom_only = false;
 800de04:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800de08:	d121      	bne.n	800de4e <lv_draw_rect+0x1752>
 800de0a:	2301      	movs	r3, #1
 800de0c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800de10:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800de14:	bb3b      	cbnz	r3, 800de66 <lv_draw_rect+0x176a>
 800de16:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800de1a:	f083 0301 	eor.w	r3, r3, #1
 800de1e:	f003 0301 	and.w	r3, r3, #1
 800de22:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800de26:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800de2a:	429e      	cmp	r6, r3
 800de2c:	dd1d      	ble.n	800de6a <lv_draw_rect+0x176e>
        lv_draw_mask_remove_id(mask_rin_id);
 800de2e:	ee18 0a10 	vmov	r0, s16
 800de32:	f7fd ff75 	bl	800bd20 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800de36:	9806      	ldr	r0, [sp, #24]
 800de38:	f7fd ff72 	bl	800bd20 <lv_draw_mask_remove_id>
        lv_mem_buf_release(mask_buf);
 800de3c:	4650      	mov	r0, sl
 800de3e:	f009 faaf 	bl	80173a0 <lv_mem_buf_release>
 800de42:	f7ff bb96 	b.w	800d572 <lv_draw_rect+0xe76>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800de46:	f04f 33ff 	mov.w	r3, #4294967295
 800de4a:	9306      	str	r3, [sp, #24]
 800de4c:	e7a0      	b.n	800dd90 <lv_draw_rect+0x1694>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d005      	beq.n	800de5e <lv_draw_rect+0x1762>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 800de52:	2b06      	cmp	r3, #6
 800de54:	d1dc      	bne.n	800de10 <lv_draw_rect+0x1714>
            top_only = true;
 800de56:	2301      	movs	r3, #1
 800de58:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800de5c:	e000      	b.n	800de60 <lv_draw_rect+0x1764>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800de5e:	2301      	movs	r3, #1
            bottom_only = true;
 800de60:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800de64:	e7d4      	b.n	800de10 <lv_draw_rect+0x1714>
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800de66:	2300      	movs	r3, #0
 800de68:	e7d9      	b.n	800de1e <lv_draw_rect+0x1722>
            if(normal ||
 800de6a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800de6e:	b99b      	cbnz	r3, 800de98 <lv_draw_rect+0x179c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800de70:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800de74:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
            if(normal ||
 800de78:	b12b      	cbz	r3, 800de86 <lv_draw_rect+0x178a>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800de7a:	9b05      	ldr	r3, [sp, #20]
 800de7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de80:	4423      	add	r3, r4
 800de82:	429a      	cmp	r2, r3
 800de84:	dd08      	ble.n	800de98 <lv_draw_rect+0x179c>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800de86:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800de8a:	b303      	cbz	r3, 800dece <lv_draw_rect+0x17d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800de8c:	9b05      	ldr	r3, [sp, #20]
 800de8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800de92:	1b1b      	subs	r3, r3, r4
 800de94:	429a      	cmp	r2, r3
 800de96:	db1a      	blt.n	800dece <lv_draw_rect+0x17d2>
                lv_memset_ff(mask_buf, draw_area_w);
 800de98:	4629      	mov	r1, r5
 800de9a:	4650      	mov	r0, sl
 800de9c:	f009 fca1 	bl	80177e2 <lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800dea0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800dea4:	8a7a      	ldrh	r2, [r7, #18]
 800dea6:	4650      	mov	r0, sl
 800dea8:	8a39      	ldrh	r1, [r7, #16]
 800deaa:	4432      	add	r2, r6
 800deac:	4419      	add	r1, r3
 800deae:	462b      	mov	r3, r5
 800deb0:	b212      	sxth	r2, r2
 800deb2:	b209      	sxth	r1, r1
 800deb4:	f7fd ff12 	bl	800bcdc <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800deb8:	9b07      	ldr	r3, [sp, #28]
 800deba:	9000      	str	r0, [sp, #0]
 800debc:	ee18 2a90 	vmov	r2, s17
 800dec0:	a91b      	add	r1, sp, #108	; 0x6c
 800dec2:	4658      	mov	r0, fp
 800dec4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dec8:	4653      	mov	r3, sl
 800deca:	f7fa ffc1 	bl	8008e50 <_lv_blend_fill>
            fill_area.y1++;
 800dece:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ded2:	3601      	adds	r6, #1
            fill_area.y1++;
 800ded4:	3301      	adds	r3, #1
 800ded6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2++;
 800deda:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800dede:	3301      	adds	r3, #1
 800dee0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800dee4:	e79f      	b.n	800de26 <lv_draw_rect+0x172a>
            if(grad_dir == LV_GRAD_DIR_VER) {
 800dee6:	2c01      	cmp	r4, #1
            opa2 = opa;
 800dee8:	9506      	str	r5, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
 800deea:	f43f adde 	beq.w	800daaa <lv_draw_rect+0x13ae>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800deee:	2701      	movs	r7, #1
 800def0:	e5e1      	b.n	800dab6 <lv_draw_rect+0x13ba>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800def2:	2c02      	cmp	r4, #2
 800def4:	f47f ae67 	bne.w	800dbc6 <lv_draw_rect+0x14ca>
 800def8:	e648      	b.n	800db8c <lv_draw_rect+0x1490>

0800defa <lv_color_mix>:
{
 800defa:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800defc:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800df00:	f3c1 1445 	ubfx	r4, r1, #5, #6
 800df04:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800df08:	f248 0681 	movw	r6, #32897	; 0x8081
 800df0c:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800df0e:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df12:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800df16:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800df1a:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800df1c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df1e:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800df20:	4373      	muls	r3, r6
    return ret;
 800df22:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800df26:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df2a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800df2e:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df32:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800df36:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df38:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800df3a:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df3c:	4372      	muls	r2, r6
    return ret;
 800df3e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800df42:	0dd0      	lsrs	r0, r2, #23
    return ret;
 800df44:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 800df48:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 800df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df4e <lv_memcpy_small>:
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800df4e:	3901      	subs	r1, #1
 800df50:	4402      	add	r2, r0
    uint8_t * d8 = (uint8_t *)dst;
 800df52:	4603      	mov	r3, r0
{
 800df54:	b510      	push	{r4, lr}
    while(len) {
 800df56:	4293      	cmp	r3, r2
 800df58:	d100      	bne.n	800df5c <lv_memcpy_small+0xe>
        s8++;
        len--;
    }

    return dst;
}
 800df5a:	bd10      	pop	{r4, pc}
        *d8 = *s8;
 800df5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df60:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 800df64:	e7f7      	b.n	800df56 <lv_memcpy_small+0x8>

0800df66 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 800df66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df68:	4607      	mov	r7, r0
 800df6a:	4615      	mov	r5, r2
    lv_color_t p_color = lv_color_black();
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800df6c:	6886      	ldr	r6, [r0, #8]
    lv_color_t p_color = lv_color_black();
 800df6e:	2200      	movs	r2, #0

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800df70:	7800      	ldrb	r0, [r0, #0]
{
 800df72:	460c      	mov	r4, r1
    lv_color_t p_color = lv_color_black();
 800df74:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800df78:	f000 021f 	and.w	r2, r0, #31
 800df7c:	1f11      	subs	r1, r2, #4
 800df7e:	2902      	cmp	r1, #2
 800df80:	d816      	bhi.n	800dfb0 <lv_img_buf_get_px_color+0x4a>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800df82:	4610      	mov	r0, r2
 800df84:	f7fb ffb2 	bl	8009eec <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800df88:	683b      	ldr	r3, [r7, #0]
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800df8a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800df8e:	2202      	movs	r2, #2
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800df90:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800df94:	fb10 f104 	smulbb	r1, r0, r4
 800df98:	fb13 f305 	smulbb	r3, r3, r5
 800df9c:	fb00 1103 	mla	r1, r0, r3, r1
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800dfa0:	a801      	add	r0, sp, #4
 800dfa2:	4431      	add	r1, r6
 800dfa4:	f7ff ffd3 	bl	800df4e <lv_memcpy_small>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 800dfa8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800dfac:	b003      	add	sp, #12
 800dfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 800dfb0:	2a07      	cmp	r2, #7
 800dfb2:	d114      	bne.n	800dfde <lv_img_buf_get_px_color+0x78>
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800dfb4:	f004 0307 	and.w	r3, r4, #7
 800dfb8:	2101      	movs	r1, #1
 800dfba:	f1c3 0207 	rsb	r2, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800dfc4:	4091      	lsls	r1, r2
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800dfc6:	3307      	adds	r3, #7
 800dfc8:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800dfca:	fb05 6303 	mla	r3, r5, r3, r6
 800dfce:	eb03 04e4 	add.w	r4, r3, r4, asr #3
 800dfd2:	7a23      	ldrb	r3, [r4, #8]
 800dfd4:	400b      	ands	r3, r1
 800dfd6:	4113      	asrs	r3, r2
        p_color = color;
 800dfd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800dfdc:	e7e4      	b.n	800dfa8 <lv_img_buf_get_px_color+0x42>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 800dfde:	2a08      	cmp	r2, #8
 800dfe0:	d116      	bne.n	800e010 <lv_img_buf_get_px_color+0xaa>
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800dfe2:	6838      	ldr	r0, [r7, #0]
        uint8_t bit = (x & 0x3) * 2;
 800dfe4:	f004 0203 	and.w	r2, r4, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800dfe8:	2103      	movs	r1, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800dfea:	f3c0 208a 	ubfx	r0, r0, #10, #11
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800dfee:	0052      	lsls	r2, r2, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800dff0:	3003      	adds	r0, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800dff2:	f1c2 0206 	rsb	r2, r2, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800dff6:	1080      	asrs	r0, r0, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800dff8:	fb05 6300 	mla	r3, r5, r0, r6
 800dffc:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800e000:	7c23      	ldrb	r3, [r4, #16]
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e002:	4091      	lsls	r1, r2
 800e004:	400b      	ands	r3, r1
 800e006:	fa43 f202 	asr.w	r2, r3, r2
 800e00a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e00e:	e7cb      	b.n	800dfa8 <lv_img_buf_get_px_color+0x42>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 800e010:	2a09      	cmp	r2, #9
 800e012:	d111      	bne.n	800e038 <lv_img_buf_get_px_color+0xd2>
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e014:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x1) * 4;
 800e016:	f004 0201 	and.w	r2, r4, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e01a:	210f      	movs	r1, #15
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e01c:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e020:	0092      	lsls	r2, r2, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e022:	3301      	adds	r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e024:	f1c2 0204 	rsb	r2, r2, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e028:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e02a:	fb05 6303 	mla	r3, r5, r3, r6
 800e02e:	eb03 0464 	add.w	r4, r3, r4, asr #1
 800e032:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e036:	e7e4      	b.n	800e002 <lv_img_buf_get_px_color+0x9c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800e038:	2a0a      	cmp	r2, #10
 800e03a:	d108      	bne.n	800e04e <lv_img_buf_get_px_color+0xe8>
        uint32_t px  = dsc->header.w * y + x;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e042:	fb15 4303 	smlabb	r3, r5, r3, r4
        p_color.full = buf_u8[px];
 800e046:	4433      	add	r3, r6
 800e048:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800e04c:	e7c4      	b.n	800dfd8 <lv_img_buf_get_px_color+0x72>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800e04e:	3a0b      	subs	r2, #11
 800e050:	2a03      	cmp	r2, #3
 800e052:	d8a9      	bhi.n	800dfa8 <lv_img_buf_get_px_color+0x42>
 800e054:	e7c0      	b.n	800dfd8 <lv_img_buf_get_px_color+0x72>
	...

0800e058 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800e058:	460b      	mov	r3, r1
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800e05a:	7801      	ldrb	r1, [r0, #0]
 800e05c:	f001 011f 	and.w	r1, r1, #31
 800e060:	2905      	cmp	r1, #5
{
 800e062:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e064:	4604      	mov	r4, r0
 800e066:	b085      	sub	sp, #20
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800e068:	6885      	ldr	r5, [r0, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800e06a:	d10a      	bne.n	800e082 <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800e06c:	6801      	ldr	r1, [r0, #0]
 800e06e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800e072:	fb12 3301 	smlabb	r3, r2, r1, r3
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800e076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e07a:	442b      	add	r3, r5
 800e07c:	7898      	ldrb	r0, [r3, #2]
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
}
 800e07e:	b005      	add	sp, #20
 800e080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 800e082:	290b      	cmp	r1, #11
 800e084:	d114      	bne.n	800e0b0 <lv_img_buf_get_px_alpha+0x58>
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e086:	6800      	ldr	r0, [r0, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e088:	f003 0607 	and.w	r6, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e08c:	10d9      	asrs	r1, r3, #3
 800e08e:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e092:	f1c6 0607 	rsb	r6, r6, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e096:	3007      	adds	r0, #7
 800e098:	10c0      	asrs	r0, r0, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e09a:	fb02 5300 	mla	r3, r2, r0, r5
 800e09e:	2201      	movs	r2, #1
 800e0a0:	5c5b      	ldrb	r3, [r3, r1]
 800e0a2:	40b2      	lsls	r2, r6
 800e0a4:	4013      	ands	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 800e0a6:	4133      	asrs	r3, r6
 800e0a8:	bf0c      	ite	eq
 800e0aa:	20ff      	moveq	r0, #255	; 0xff
 800e0ac:	2000      	movne	r0, #0
 800e0ae:	e7e6      	b.n	800e07e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 800e0b0:	290c      	cmp	r1, #12
 800e0b2:	d118      	bne.n	800e0e6 <lv_img_buf_get_px_alpha+0x8e>
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e0b4:	6800      	ldr	r0, [r0, #0]
        uint8_t bit = (x & 0x3) * 2;
 800e0b6:	f003 0603 	and.w	r6, r3, #3
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e0ba:	4920      	ldr	r1, [pc, #128]	; (800e13c <lv_img_buf_get_px_alpha+0xe4>)
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e0bc:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e0c0:	0076      	lsls	r6, r6, #1
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e0c2:	9100      	str	r1, [sp, #0]
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e0c4:	1099      	asrs	r1, r3, #2
 800e0c6:	3003      	adds	r0, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e0c8:	f1c6 0606 	rsb	r6, r6, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e0cc:	1080      	asrs	r0, r0, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e0ce:	fb02 5300 	mla	r3, r2, r0, r5
 800e0d2:	2203      	movs	r2, #3
 800e0d4:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e0d6:	40b2      	lsls	r2, r6
 800e0d8:	4013      	ands	r3, r2
        return opa_table[px_opa];
 800e0da:	aa04      	add	r2, sp, #16
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e0dc:	4133      	asrs	r3, r6
        return opa_table[px_opa];
 800e0de:	4413      	add	r3, r2
 800e0e0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 800e0e4:	e7cb      	b.n	800e07e <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 800e0e6:	290d      	cmp	r1, #13
 800e0e8:	d11c      	bne.n	800e124 <lv_img_buf_get_px_alpha+0xcc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 800e0ea:	4e15      	ldr	r6, [pc, #84]	; (800e140 <lv_img_buf_get_px_alpha+0xe8>)
 800e0ec:	46ec      	mov	ip, sp
 800e0ee:	f106 0e10 	add.w	lr, r6, #16
 800e0f2:	6830      	ldr	r0, [r6, #0]
 800e0f4:	3608      	adds	r6, #8
 800e0f6:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800e0fa:	4667      	mov	r7, ip
 800e0fc:	4576      	cmp	r6, lr
 800e0fe:	c703      	stmia	r7!, {r0, r1}
 800e100:	46bc      	mov	ip, r7
 800e102:	d1f6      	bne.n	800e0f2 <lv_img_buf_get_px_alpha+0x9a>
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e104:	6820      	ldr	r0, [r4, #0]
        uint8_t bit = (x & 0x1) * 4;
 800e106:	f003 0601 	and.w	r6, r3, #1
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e10a:	1059      	asrs	r1, r3, #1
 800e10c:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e110:	00b6      	lsls	r6, r6, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e112:	3001      	adds	r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e114:	f1c6 0604 	rsb	r6, r6, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e118:	1040      	asrs	r0, r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e11a:	fb02 5300 	mla	r3, r2, r0, r5
 800e11e:	220f      	movs	r2, #15
 800e120:	5c5b      	ldrb	r3, [r3, r1]
 800e122:	e7d8      	b.n	800e0d6 <lv_img_buf_get_px_alpha+0x7e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800e124:	290e      	cmp	r1, #14
        uint32_t px = dsc->header.w * y + x;
 800e126:	bf09      	itett	eq
 800e128:	6801      	ldreq	r1, [r0, #0]
    return LV_OPA_COVER;
 800e12a:	20ff      	movne	r0, #255	; 0xff
        uint32_t px = dsc->header.w * y + x;
 800e12c:	f3c1 218a 	ubfxeq	r1, r1, #10, #11
 800e130:	fb12 3301 	smlabbeq	r3, r2, r1, r3
        return buf_u8[px];
 800e134:	bf08      	it	eq
 800e136:	5ce8      	ldrbeq	r0, [r5, r3]
 800e138:	e7a1      	b.n	800e07e <lv_img_buf_get_px_alpha+0x26>
 800e13a:	bf00      	nop
 800e13c:	ffaa5500 	.word	0xffaa5500
 800e140:	08025a90 	.word	0x08025a90

0800e144 <_lv_img_buf_transform_init>:
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(_lv_img_transform_dsc_t * dsc)
{
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e144:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;

    int32_t angle_low = dsc->cfg.angle / 10;
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800e148:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e14c:	021b      	lsls	r3, r3, #8
{
 800e14e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e152:	6243      	str	r3, [r0, #36]	; 0x24
{
 800e154:	4604      	mov	r4, r0
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800e156:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int32_t angle_low = dsc->cfg.angle / 10;
 800e15a:	260a      	movs	r6, #10
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800e15c:	021b      	lsls	r3, r3, #8
 800e15e:	6283      	str	r3, [r0, #40]	; 0x28
    int32_t angle_low = dsc->cfg.angle / 10;
 800e160:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800e164:	fb90 f5f6 	sdiv	r5, r0, r6
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800e168:	fb15 0802 	smlabb	r8, r5, r2, r0

    int32_t s1 = lv_trigo_sin(-angle_low);
 800e16c:	b2af      	uxth	r7, r5
    int32_t angle_high = angle_low + 1;
 800e16e:	3501      	adds	r5, #1
    int32_t s1 = lv_trigo_sin(-angle_low);
 800e170:	4278      	negs	r0, r7
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e172:	b2ad      	uxth	r5, r5
    int32_t s1 = lv_trigo_sin(-angle_low);
 800e174:	b200      	sxth	r0, r0
 800e176:	f009 f829 	bl	80171cc <lv_trigo_sin>
 800e17a:	4681      	mov	r9, r0
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e17c:	4268      	negs	r0, r5

    int32_t c1 = lv_trigo_sin(-angle_low + 90);
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800e17e:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e182:	b200      	sxth	r0, r0
 800e184:	f009 f822 	bl	80171cc <lv_trigo_sin>
 800e188:	4682      	mov	sl, r0
    int32_t c1 = lv_trigo_sin(-angle_low + 90);
 800e18a:	f1c7 005a 	rsb	r0, r7, #90	; 0x5a
 800e18e:	b200      	sxth	r0, r0
 800e190:	f009 f81c 	bl	80171cc <lv_trigo_sin>
 800e194:	4607      	mov	r7, r0
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800e196:	b228      	sxth	r0, r5
 800e198:	f009 f818 	bl	80171cc <lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e19c:	eba6 0308 	sub.w	r3, r6, r8
 800e1a0:	fb08 f20a 	mul.w	r2, r8, sl
 800e1a4:	fb03 2209 	mla	r2, r3, r9, r2
 800e1a8:	fb92 f2f6 	sdiv	r2, r2, r6
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e1ac:	1152      	asrs	r2, r2, #5
 800e1ae:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e1b0:	fb08 f200 	mul.w	r2, r8, r0
 800e1b4:	fb03 2007 	mla	r0, r3, r7, r2
 800e1b8:	fb90 f3f6 	sdiv	r3, r0, r6
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e1bc:	115b      	asrs	r3, r3, #5

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e1be:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e1c0:	6323      	str	r3, [r4, #48]	; 0x30
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e1c2:	f7fb fe9d 	bl	8009f00 <lv_img_cf_is_chroma_keyed>
 800e1c6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e1ca:	f360 0300 	bfi	r3, r0, #0, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e1ce:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e1d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e1d4:	f7fb fe9e 	bl	8009f14 <lv_img_cf_has_alpha>
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e1d8:	7ca3      	ldrb	r3, [r4, #18]
 800e1da:	1f1a      	subs	r2, r3, #4
        dsc->tmp.native_color = 0;
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    dsc->tmp.img_dsc.header.always_zero = 0;
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e1dc:	f003 031f 	and.w	r3, r3, #31
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e1e0:	2a02      	cmp	r2, #2
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e1e2:	ea4f 0240 	mov.w	r2, r0, lsl #1
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e1e6:	bf8c      	ite	hi
 800e1e8:	2100      	movhi	r1, #0
 800e1ea:	2101      	movls	r1, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e1ec:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800e1f0:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800e1f4:	f002 0206 	and.w	r2, r2, #6
 800e1f8:	f021 0106 	bic.w	r1, r1, #6
 800e1fc:	430a      	orrs	r2, r1
 800e1fe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    dsc->tmp.img_dsc.data = dsc->cfg.src;
 800e202:	6822      	ldr	r2, [r4, #0]
 800e204:	6222      	str	r2, [r4, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e206:	88a2      	ldrh	r2, [r4, #4]
 800e208:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800e20c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800e210:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e214:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800e218:	69a2      	ldr	r2, [r4, #24]
 800e21a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800e21e:	4313      	orrs	r3, r2
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;

    /*The inverse of the zoom will be sued during the transformation
     * + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800e220:	89e2      	ldrh	r2, [r4, #14]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e222:	61a3      	str	r3, [r4, #24]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800e224:	0853      	lsrs	r3, r2, #1
 800e226:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e22a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22e:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
 800e230:	23ff      	movs	r3, #255	; 0xff
 800e232:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
 800e234:	8a23      	ldrh	r3, [r4, #16]
 800e236:	82a3      	strh	r3, [r4, #20]
}
 800e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e23c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800e23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e242:	4604      	mov	r4, r0
 800e244:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800e248:	b953      	cbnz	r3, 800e260 <_lv_img_buf_get_transformed_area+0x24>
 800e24a:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800e24e:	d107      	bne.n	800e260 <_lv_img_buf_get_transformed_area+0x24>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 800e250:	3901      	subs	r1, #1
        res->y2 = h - 1;
 800e252:	3a01      	subs	r2, #1
        res->x1 = 0;
 800e254:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800e256:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 800e258:	8081      	strh	r1, [r0, #4]

    if(angle == 0) {
        res->x1 += pivot->x;
        res->y1 += pivot->y;
        res->x2 += pivot->x;
        res->y2 += pivot->y;
 800e25a:	80e2      	strh	r2, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800e25c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e260:	f9b7 c000 	ldrsh.w	ip, [r7]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e264:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e268:	f1cc 0600 	rsb	r6, ip, #0
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e26c:	eba1 010c 	sub.w	r1, r1, ip
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e270:	4245      	negs	r5, r0
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e272:	1a12      	subs	r2, r2, r0
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e274:	fb0e f606 	mul.w	r6, lr, r6
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e278:	fb0e f505 	mul.w	r5, lr, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e27c:	fb0e f101 	mul.w	r1, lr, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e280:	1236      	asrs	r6, r6, #8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e282:	fb0e f202 	mul.w	r2, lr, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e286:	122d      	asrs	r5, r5, #8
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e288:	1209      	asrs	r1, r1, #8
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e28a:	3e01      	subs	r6, #1
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e28c:	1212      	asrs	r2, r2, #8
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e28e:	3d01      	subs	r5, #1
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e290:	3102      	adds	r1, #2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e292:	b2b6      	uxth	r6, r6
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e294:	3202      	adds	r2, #2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e296:	b2ad      	uxth	r5, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e298:	b289      	uxth	r1, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e29a:	8026      	strh	r6, [r4, #0]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e29c:	b292      	uxth	r2, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e29e:	8065      	strh	r5, [r4, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e2a0:	80a1      	strh	r1, [r4, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e2a2:	80e2      	strh	r2, [r4, #6]
    if(angle == 0) {
 800e2a4:	b95b      	cbnz	r3, 800e2be <_lv_img_buf_get_transformed_area+0x82>
        res->x1 += pivot->x;
 800e2a6:	fa16 f68c 	uxtah	r6, r6, ip
        res->y1 += pivot->y;
 800e2aa:	fa15 f580 	uxtah	r5, r5, r0
        res->x2 += pivot->x;
 800e2ae:	fa11 f18c 	uxtah	r1, r1, ip
        res->y2 += pivot->y;
 800e2b2:	fa12 f280 	uxtah	r2, r2, r0
        res->x1 += pivot->x;
 800e2b6:	8026      	strh	r6, [r4, #0]
        res->y1 += pivot->y;
 800e2b8:	8065      	strh	r5, [r4, #2]
        res->x2 += pivot->x;
 800e2ba:	80a1      	strh	r1, [r4, #4]
        res->y2 += pivot->y;
 800e2bc:	e7cd      	b.n	800e25a <_lv_img_buf_get_transformed_area+0x1e>
    int32_t angle_low = angle / 10;
 800e2be:	f04f 090a 	mov.w	r9, #10
    int32_t angle_rem = angle  - (angle_low * 10);
 800e2c2:	f64f 7af6 	movw	sl, #65526	; 0xfff6
    int32_t angle_low = angle / 10;
 800e2c6:	fb93 f8f9 	sdiv	r8, r3, r9
    int32_t angle_high = angle_low + 1;
 800e2ca:	f108 0b01 	add.w	fp, r8, #1
    int32_t s1 = lv_trigo_sin(angle_low);
 800e2ce:	4640      	mov	r0, r8
    int32_t angle_rem = angle  - (angle_low * 10);
 800e2d0:	fb18 3a0a 	smlabb	sl, r8, sl, r3
    int32_t s1 = lv_trigo_sin(angle_low);
 800e2d4:	f008 ff7a 	bl	80171cc <lv_trigo_sin>
 800e2d8:	4605      	mov	r5, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 800e2da:	fa0f f08b 	sxth.w	r0, fp
 800e2de:	f008 ff75 	bl	80171cc <lv_trigo_sin>
 800e2e2:	4683      	mov	fp, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800e2e4:	f108 005a 	add.w	r0, r8, #90	; 0x5a
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800e2e8:	f108 085b 	add.w	r8, r8, #91	; 0x5b
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800e2ec:	b200      	sxth	r0, r0
 800e2ee:	f008 ff6d 	bl	80171cc <lv_trigo_sin>
 800e2f2:	4606      	mov	r6, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800e2f4:	fa0f f088 	sxth.w	r0, r8
 800e2f8:	f008 ff68 	bl	80171cc <lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e2fc:	eba9 010a 	sub.w	r1, r9, sl
 800e300:	fb0a f20b 	mul.w	r2, sl, fp
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e304:	f8b7 c000 	ldrh.w	ip, [r7]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e308:	fb0a f000 	mul.w	r0, sl, r0
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e30c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e310:	fb01 2205 	mla	r2, r1, r5, r2
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e314:	887f      	ldrh	r7, [r7, #2]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e316:	fb01 0606 	mla	r6, r1, r6, r0
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e31a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e31e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e322:	fb92 f2f9 	sdiv	r2, r2, r9
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e326:	fb96 f6f9 	sdiv	r6, r6, r9
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e32a:	1152      	asrs	r2, r2, #5
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e32c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e330:	1176      	asrs	r6, r6, #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e332:	fb02 f800 	mul.w	r8, r2, r0
 800e336:	fb06 fe01 	mul.w	lr, r6, r1
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e33a:	fb06 fb09 	mul.w	fp, r6, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e33e:	ebae 0508 	sub.w	r5, lr, r8
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e342:	4351      	muls	r1, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e344:	ebab 0808 	sub.w	r8, fp, r8
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e348:	fb02 f909 	mul.w	r9, r2, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e34c:	eb0c 25a5 	add.w	r5, ip, r5, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e350:	fb02 f20a 	mul.w	r2, r2, sl
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e354:	eb0c 28a8 	add.w	r8, ip, r8, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e358:	4370      	muls	r0, r6
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e35a:	b22d      	sxth	r5, r5
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e35c:	ebae 0e02 	sub.w	lr, lr, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e360:	fa0f f888 	sxth.w	r8, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e364:	ebab 0202 	sub.w	r2, fp, r2
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e368:	eb0c 2eae 	add.w	lr, ip, lr, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e36c:	180b      	adds	r3, r1, r0
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e36e:	4545      	cmp	r5, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e370:	eb0c 2ca2 	add.w	ip, ip, r2, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e374:	fa0f fe8e 	sxth.w	lr, lr
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e378:	462a      	mov	r2, r5
 800e37a:	bfa8      	it	ge
 800e37c:	4642      	movge	r2, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e37e:	fa0f fc8c 	sxth.w	ip, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e382:	4448      	add	r0, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e384:	eb07 23a3 	add.w	r3, r7, r3, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e388:	4572      	cmp	r2, lr
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e38a:	fb06 f60a 	mul.w	r6, r6, sl
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e38e:	eb07 20a0 	add.w	r0, r7, r0, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e392:	bfa8      	it	ge
 800e394:	4672      	movge	r2, lr
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e396:	b21b      	sxth	r3, r3
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e398:	b200      	sxth	r0, r0
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e39a:	4431      	add	r1, r6
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e39c:	4562      	cmp	r2, ip
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e39e:	444e      	add	r6, r9
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e3a0:	eb07 21a1 	add.w	r1, r7, r1, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e3a4:	bfa8      	it	ge
 800e3a6:	4662      	movge	r2, ip
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e3a8:	4545      	cmp	r5, r8
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e3aa:	b209      	sxth	r1, r1
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e3ac:	bfb8      	it	lt
 800e3ae:	4645      	movlt	r5, r8
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e3b0:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e3b2:	461a      	mov	r2, r3
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e3b4:	eb07 27a6 	add.w	r7, r7, r6, asr #10
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e3b8:	45ae      	cmp	lr, r5
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e3ba:	b23f      	sxth	r7, r7
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e3bc:	bfb8      	it	lt
 800e3be:	46ae      	movlt	lr, r5
 800e3c0:	45f4      	cmp	ip, lr
 800e3c2:	bfb8      	it	lt
 800e3c4:	46f4      	movlt	ip, lr
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e3c6:	4283      	cmp	r3, r0
 800e3c8:	bfa8      	it	ge
 800e3ca:	4602      	movge	r2, r0
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e3cc:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e3d0:	428a      	cmp	r2, r1
 800e3d2:	bfa8      	it	ge
 800e3d4:	460a      	movge	r2, r1
 800e3d6:	42ba      	cmp	r2, r7
 800e3d8:	bfa8      	it	ge
 800e3da:	463a      	movge	r2, r7
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 800e3dc:	4283      	cmp	r3, r0
 800e3de:	bfb8      	it	lt
 800e3e0:	4603      	movlt	r3, r0
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e3e2:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 800e3e4:	4299      	cmp	r1, r3
 800e3e6:	bfb8      	it	lt
 800e3e8:	4619      	movlt	r1, r3
 800e3ea:	428f      	cmp	r7, r1
 800e3ec:	bfb8      	it	lt
 800e3ee:	460f      	movlt	r7, r1
 800e3f0:	80e7      	strh	r7, [r4, #6]
 800e3f2:	e733      	b.n	800e25c <_lv_img_buf_get_transformed_area+0x20>

0800e3f4 <_lv_img_buf_transform_anti_alias>:
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(_lv_img_transform_dsc_t * dsc)
{
    const uint8_t * src_u8 = dsc->cfg.src;
 800e3f4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800e3f8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    int xs_fract = dsc->tmp.xs & 0xff;
    int ys_fract = dsc->tmp.ys & 0xff;
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 800e3fc:	2a6f      	cmp	r2, #111	; 0x6f
{
 800e3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e402:	4604      	mov	r4, r0
 800e404:	b089      	sub	sp, #36	; 0x24
    const uint8_t * src_u8 = dsc->cfg.src;
 800e406:	f8d0 a000 	ldr.w	sl, [r0]
    int xs_fract = dsc->tmp.xs & 0xff;
 800e40a:	f9b0 503c 	ldrsh.w	r5, [r0, #60]	; 0x3c
    int ys_fract = dsc->tmp.ys & 0xff;
 800e40e:	f9b0 703e 	ldrsh.w	r7, [r0, #62]	; 0x3e
    if(xs_fract < 0x70) {
 800e412:	f200 8093 	bhi.w	800e53c <_lv_img_buf_transform_anti_alias+0x148>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800e416:	f9b0 6040 	ldrsh.w	r6, [r0, #64]	; 0x40
        xr = xs_fract + 0x80;
 800e41a:	3d80      	subs	r5, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800e41c:	2e00      	cmp	r6, #0
 800e41e:	bfd4      	ite	le
 800e420:	2600      	movle	r6, #0
 800e422:	2601      	movgt	r6, #1
 800e424:	4276      	negs	r6, r6
    }
    else if(xs_fract > 0x90) {
        xn =  1;
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
        xr = (0xFF - xs_fract) + 0x80;
 800e426:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 800e428:	2b6f      	cmp	r3, #111	; 0x6f
 800e42a:	f200 8098 	bhi.w	800e55e <_lv_img_buf_transform_anti_alias+0x16a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800e42e:	f9b4 8042 	ldrsh.w	r8, [r4, #66]	; 0x42

        yr = ys_fract + 0x80;
 800e432:	3f80      	subs	r7, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800e434:	f1b8 0f00 	cmp.w	r8, #0
 800e438:	bfd4      	ite	le
 800e43a:	f04f 0800 	movle.w	r8, #0
 800e43e:	f04f 0801 	movgt.w	r8, #1
 800e442:	f1c8 0800 	rsb	r8, r8, #0
    }
    else if(ys_fract > 0x90) {
        yn =  1;
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;

        yr = (0xFF - ys_fract) + 0x80;
 800e446:	b2ff      	uxtb	r7, r7
    lv_color_t c00 = dsc->res.color;
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 800e448:	7da3      	ldrb	r3, [r4, #22]
    lv_color_t c00 = dsc->res.color;
 800e44a:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_opa_t a00 = dsc->res.opa;
 800e44e:	9301      	str	r3, [sp, #4]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 800e450:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e454:	075b      	lsls	r3, r3, #29
 800e456:	f140 80ad 	bpl.w	800e5b4 <_lv_img_buf_transform_anti_alias+0x1c0>
        lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 800e45a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e45c:	2202      	movs	r2, #2
 800e45e:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e462:	a805      	add	r0, sp, #20
 800e464:	fb06 3101 	mla	r1, r6, r1, r3
 800e468:	4451      	add	r1, sl
 800e46a:	f7ff fd70 	bl	800df4e <lv_memcpy_small>
        lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 800e46e:	88a3      	ldrh	r3, [r4, #4]
 800e470:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e474:	2202      	movs	r2, #2
 800e476:	a806      	add	r0, sp, #24
 800e478:	fb11 f103 	smulbb	r1, r1, r3
 800e47c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e47e:	fb08 3101 	mla	r1, r8, r1, r3
 800e482:	4451      	add	r1, sl
 800e484:	f7ff fd63 	bl	800df4e <lv_memcpy_small>
        lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 800e488:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e48c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e48e:	a807      	add	r0, sp, #28
 800e490:	88a1      	ldrh	r1, [r4, #4]
 800e492:	fb11 f103 	smulbb	r1, r1, r3
 800e496:	fb06 2303 	mla	r3, r6, r3, r2
 800e49a:	2202      	movs	r2, #2
 800e49c:	fb08 3101 	mla	r1, r8, r1, r3
 800e4a0:	4451      	add	r1, sl
 800e4a2:	f7ff fd54 	bl	800df4e <lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 800e4a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e4aa:	0798      	lsls	r0, r3, #30
 800e4ac:	d46c      	bmi.n	800e588 <_lv_img_buf_transform_anti_alias+0x194>
    lv_opa_t a11 = 0;
 800e4ae:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
 800e4b0:	4680      	mov	r8, r0
    lv_opa_t a10 = 0;
 800e4b2:	4603      	mov	r3, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
 800e4b4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800e4b8:	0792      	lsls	r2, r2, #30
 800e4ba:	f140 80cf 	bpl.w	800e65c <_lv_img_buf_transform_anti_alias+0x268>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800e4be:	9901      	ldr	r1, [sp, #4]
 800e4c0:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 800e4c4:	fb11 f605 	smulbb	r6, r1, r5
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e4c8:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800e4cc:	fb02 6603 	mla	r6, r2, r3, r6
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800e4d0:	4342      	muls	r2, r0
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e4d2:	f3c6 2607 	ubfx	r6, r6, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800e4d6:	fb15 2208 	smlabb	r2, r5, r8, r2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e4da:	fb07 fc06 	mul.w	ip, r7, r6

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800e4de:	2e02      	cmp	r6, #2
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800e4e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e4e4:	fb02 c101 	mla	r1, r2, r1, ip
 800e4e8:	ea4f 2121 	mov.w	r1, r1, asr #8
 800e4ec:	75a1      	strb	r1, [r4, #22]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800e4ee:	f200 80b1 	bhi.w	800e654 <_lv_img_buf_transform_anti_alias+0x260>
 800e4f2:	2a02      	cmp	r2, #2
 800e4f4:	f240 80d9 	bls.w	800e6aa <_lv_img_buf_transform_anti_alias+0x2b6>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 800e4f8:	2700      	movs	r7, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 800e4fa:	9a01      	ldr	r2, [sp, #4]
 800e4fc:	2a02      	cmp	r2, #2
 800e4fe:	bf94      	ite	ls
 800e500:	2200      	movls	r2, #0
 800e502:	462a      	movhi	r2, r5
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 800e504:	2b02      	cmp	r3, #2
 800e506:	bf98      	it	ls
 800e508:	22ff      	movls	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 800e50a:	f1b8 0f02 	cmp.w	r8, #2
 800e50e:	bf98      	it	ls
 800e510:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 800e512:	2802      	cmp	r0, #2
 800e514:	bf98      	it	ls
 800e516:	25ff      	movls	r5, #255	; 0xff
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 800e518:	2a00      	cmp	r2, #0
 800e51a:	f040 80a3 	bne.w	800e664 <_lv_img_buf_transform_anti_alias+0x270>
 800e51e:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 800e522:	2d00      	cmp	r5, #0
 800e524:	f040 80a8 	bne.w	800e678 <_lv_img_buf_transform_anti_alias+0x284>
 800e528:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 800e52c:	2f00      	cmp	r7, #0
 800e52e:	f040 80b1 	bne.w	800e694 <_lv_img_buf_transform_anti_alias+0x2a0>
 800e532:	82a1      	strh	r1, [r4, #20]
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
 800e534:	2001      	movs	r0, #1
}
 800e536:	b009      	add	sp, #36	; 0x24
 800e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(xs_fract > 0x90) {
 800e53c:	2a90      	cmp	r2, #144	; 0x90
 800e53e:	d90b      	bls.n	800e558 <_lv_img_buf_transform_anti_alias+0x164>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800e540:	f9b0 6040 	ldrsh.w	r6, [r0, #64]	; 0x40
        xr = (0xFF - xs_fract) + 0x80;
 800e544:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800e548:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800e54c:	3601      	adds	r6, #1
 800e54e:	428e      	cmp	r6, r1
 800e550:	bfac      	ite	ge
 800e552:	2600      	movge	r6, #0
 800e554:	2601      	movlt	r6, #1
        xr = (0xFF - xs_fract) + 0x80;
 800e556:	e766      	b.n	800e426 <_lv_img_buf_transform_anti_alias+0x32>
        xr = 0xFF;
 800e558:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
 800e55a:	2600      	movs	r6, #0
 800e55c:	e764      	b.n	800e428 <_lv_img_buf_transform_anti_alias+0x34>
    else if(ys_fract > 0x90) {
 800e55e:	2b90      	cmp	r3, #144	; 0x90
 800e560:	d90e      	bls.n	800e580 <_lv_img_buf_transform_anti_alias+0x18c>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800e562:	f9b4 8042 	ldrsh.w	r8, [r4, #66]	; 0x42
        yr = (0xFF - ys_fract) + 0x80;
 800e566:	f1c7 077f 	rsb	r7, r7, #127	; 0x7f
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800e56a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e56e:	f108 0801 	add.w	r8, r8, #1
 800e572:	4590      	cmp	r8, r2
 800e574:	bfac      	ite	ge
 800e576:	f04f 0800 	movge.w	r8, #0
 800e57a:	f04f 0801 	movlt.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
 800e57e:	e762      	b.n	800e446 <_lv_img_buf_transform_anti_alias+0x52>
        yr = 0xFF;
 800e580:	27ff      	movs	r7, #255	; 0xff
        yn = 0;
 800e582:	f04f 0800 	mov.w	r8, #0
 800e586:	e75f      	b.n	800e448 <_lv_img_buf_transform_anti_alias+0x54>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e588:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e58a:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e58e:	3801      	subs	r0, #1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800e590:	88a2      	ldrh	r2, [r4, #4]
 800e592:	fb12 f201 	smulbb	r2, r2, r1
 800e596:	4408      	add	r0, r1
 800e598:	fb08 f202 	mul.w	r2, r8, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e59c:	fb06 0601 	mla	r6, r6, r1, r0
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800e5a0:	eb0a 0102 	add.w	r1, sl, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e5a4:	f81a 3006 	ldrb.w	r3, [sl, r6]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e5a8:	44b2      	add	sl, r6
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800e5aa:	f811 8000 	ldrb.w	r8, [r1, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800e5ae:	f81a 0002 	ldrb.w	r0, [sl, r2]
 800e5b2:	e77f      	b.n	800e4b4 <_lv_img_buf_transform_anti_alias+0xc0>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800e5b4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800e5b8:	f104 0b18 	add.w	fp, r4, #24
 800e5bc:	8a23      	ldrh	r3, [r4, #16]
 800e5be:	fa1f fa86 	uxth.w	sl, r6
 800e5c2:	fa11 f186 	uxtah	r1, r1, r6
 800e5c6:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800e5ca:	4658      	mov	r0, fp
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e5cc:	fa1f f688 	uxth.w	r6, r8
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800e5d0:	b209      	sxth	r1, r1
 800e5d2:	f7ff fcc8 	bl	800df66 <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e5d6:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800e5da:	8a23      	ldrh	r3, [r4, #16]
 800e5dc:	fa12 f288 	uxtah	r2, r2, r8
 800e5e0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800e5e4:	f8ad 0014 	strh.w	r0, [sp, #20]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e5e8:	4658      	mov	r0, fp
 800e5ea:	b212      	sxth	r2, r2
 800e5ec:	f7ff fcbb 	bl	800df66 <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e5f0:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800e5f4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800e5f8:	4432      	add	r2, r6
 800e5fa:	8a23      	ldrh	r3, [r4, #16]
 800e5fc:	4451      	add	r1, sl
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e5fe:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e602:	b212      	sxth	r2, r2
 800e604:	4658      	mov	r0, fp
 800e606:	b209      	sxth	r1, r1
 800e608:	f7ff fcad 	bl	800df66 <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 800e60c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800e610:	f8ad 001c 	strh.w	r0, [sp, #28]
        if(dsc->tmp.has_alpha) {
 800e614:	0799      	lsls	r1, r3, #30
 800e616:	f57f af4a 	bpl.w	800e4ae <_lv_img_buf_transform_anti_alias+0xba>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800e61a:	f9b4 8040 	ldrsh.w	r8, [r4, #64]	; 0x40
 800e61e:	4658      	mov	r0, fp
 800e620:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800e624:	44c2      	add	sl, r8
 800e626:	9202      	str	r2, [sp, #8]
 800e628:	fa0f fa8a 	sxth.w	sl, sl
 800e62c:	4651      	mov	r1, sl
 800e62e:	f7ff fd13 	bl	800e058 <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800e632:	9a02      	ldr	r2, [sp, #8]
 800e634:	4641      	mov	r1, r8
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800e636:	9003      	str	r0, [sp, #12]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800e638:	4432      	add	r2, r6
 800e63a:	4658      	mov	r0, fp
 800e63c:	b212      	sxth	r2, r2
 800e63e:	9202      	str	r2, [sp, #8]
 800e640:	f7ff fd0a 	bl	800e058 <lv_img_buf_get_px_alpha>
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800e644:	9a02      	ldr	r2, [sp, #8]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800e646:	4680      	mov	r8, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800e648:	4651      	mov	r1, sl
 800e64a:	4658      	mov	r0, fp
 800e64c:	f7ff fd04 	bl	800e058 <lv_img_buf_get_px_alpha>
 800e650:	9b03      	ldr	r3, [sp, #12]
 800e652:	e72f      	b.n	800e4b4 <_lv_img_buf_transform_anti_alias+0xc0>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 800e654:	2a02      	cmp	r2, #2
 800e656:	bf98      	it	ls
 800e658:	27ff      	movls	r7, #255	; 0xff
 800e65a:	e74e      	b.n	800e4fa <_lv_img_buf_transform_anti_alias+0x106>
        dsc->res.opa = LV_OPA_COVER;
 800e65c:	23ff      	movs	r3, #255	; 0xff
        xr0 = xr;
 800e65e:	462a      	mov	r2, r5
        dsc->res.opa = LV_OPA_COVER;
 800e660:	75a3      	strb	r3, [r4, #22]
 800e662:	e759      	b.n	800e518 <_lv_img_buf_transform_anti_alias+0x124>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 800e664:	2aff      	cmp	r2, #255	; 0xff
 800e666:	f43f af5c 	beq.w	800e522 <_lv_img_buf_transform_anti_alias+0x12e>
    else c0 = lv_color_mix(c00, c01, xr0);
 800e66a:	4648      	mov	r0, r9
 800e66c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800e670:	f7ff fc43 	bl	800defa <lv_color_mix>
 800e674:	4681      	mov	r9, r0
 800e676:	e754      	b.n	800e522 <_lv_img_buf_transform_anti_alias+0x12e>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 800e678:	2dff      	cmp	r5, #255	; 0xff
 800e67a:	d102      	bne.n	800e682 <_lv_img_buf_transform_anti_alias+0x28e>
 800e67c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800e680:	e754      	b.n	800e52c <_lv_img_buf_transform_anti_alias+0x138>
    else c1 = lv_color_mix(c10, c11, xr1);
 800e682:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e686:	462a      	mov	r2, r5
 800e688:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800e68c:	f7ff fc35 	bl	800defa <lv_color_mix>
 800e690:	4601      	mov	r1, r0
 800e692:	e74b      	b.n	800e52c <_lv_img_buf_transform_anti_alias+0x138>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 800e694:	2fff      	cmp	r7, #255	; 0xff
 800e696:	d102      	bne.n	800e69e <_lv_img_buf_transform_anti_alias+0x2aa>
 800e698:	f8a4 9014 	strh.w	r9, [r4, #20]
 800e69c:	e74a      	b.n	800e534 <_lv_img_buf_transform_anti_alias+0x140>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 800e69e:	463a      	mov	r2, r7
 800e6a0:	4648      	mov	r0, r9
 800e6a2:	f7ff fc2a 	bl	800defa <lv_color_mix>
 800e6a6:	82a0      	strh	r0, [r4, #20]
 800e6a8:	e744      	b.n	800e534 <_lv_img_buf_transform_anti_alias+0x140>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	e743      	b.n	800e536 <_lv_img_buf_transform_anti_alias+0x142>

0800e6ae <_lv_img_buf_transform>:
{
 800e6ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b2:	4604      	mov	r4, r0
    int32_t xt = x - dsc->cfg.pivot_x;
 800e6b4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    int32_t yt = y - dsc->cfg.pivot_y;
 800e6b8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    int32_t xt = x - dsc->cfg.pivot_x;
 800e6bc:	1a09      	subs	r1, r1, r0
    int32_t yt = y - dsc->cfg.pivot_y;
 800e6be:	1ad2      	subs	r2, r2, r3
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800e6c0:	89e3      	ldrh	r3, [r4, #14]
 800e6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6c6:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
 800e6ca:	d117      	bne.n	800e6fc <_lv_img_buf_transform+0x4e>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800e6cc:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 800e6d0:	fb01 f703 	mul.w	r7, r1, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800e6d4:	4353      	muls	r3, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800e6d6:	fb02 7710 	mls	r7, r2, r0, r7
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800e6da:	fb01 3200 	mla	r2, r1, r0, r3
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800e6de:	eb05 05a7 	add.w	r5, r5, r7, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800e6e2:	eb06 06a2 	add.w	r6, r6, r2, asr #2
    if(xs_int >= dsc->cfg.src_w) return false;
 800e6e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    int32_t xs_int = xs >> 8;
 800e6ea:	ea4f 2925 	mov.w	r9, r5, asr #8
    if(xs_int >= dsc->cfg.src_w) return false;
 800e6ee:	ebb3 2f25 	cmp.w	r3, r5, asr #8
 800e6f2:	dc1c      	bgt.n	800e72e <_lv_img_buf_transform+0x80>
 800e6f4:	2000      	movs	r0, #0
}
 800e6f6:	b002      	add	sp, #8
 800e6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(dsc->cfg.angle == 0) {
 800e6fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6fe:	4359      	muls	r1, r3
 800e700:	4353      	muls	r3, r2
 800e702:	1149      	asrs	r1, r1, #5
 800e704:	115a      	asrs	r2, r3, #5
 800e706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70a:	b913      	cbnz	r3, 800e712 <_lv_img_buf_transform+0x64>
        xs = xt + dsc->tmp.pivot_x_256;
 800e70c:	440d      	add	r5, r1
        ys = yt + dsc->tmp.pivot_y_256;
 800e70e:	4416      	add	r6, r2
 800e710:	e7e9      	b.n	800e6e6 <_lv_img_buf_transform+0x38>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800e712:	e9d4 070b 	ldrd	r0, r7, [r4, #44]	; 0x2c
 800e716:	fb01 f307 	mul.w	r3, r1, r7
 800e71a:	fb02 3310 	mls	r3, r2, r0, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800e71e:	437a      	muls	r2, r7
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800e720:	eb05 25a3 	add.w	r5, r5, r3, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800e724:	fb01 2000 	mla	r0, r1, r0, r2
 800e728:	eb06 26a0 	add.w	r6, r6, r0, asr #10
 800e72c:	e7db      	b.n	800e6e6 <_lv_img_buf_transform+0x38>
    else if(xs_int < 0) return false;
 800e72e:	f1b9 0f00 	cmp.w	r9, #0
 800e732:	dbdf      	blt.n	800e6f4 <_lv_img_buf_transform+0x46>
    if(ys_int >= dsc->cfg.src_h) return false;
 800e734:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t ys_int = ys >> 8;
 800e738:	ea4f 2826 	mov.w	r8, r6, asr #8
    if(ys_int >= dsc->cfg.src_h) return false;
 800e73c:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800e740:	ddd8      	ble.n	800e6f4 <_lv_img_buf_transform+0x46>
    else if(ys_int < 0) return false;
 800e742:	f1b8 0f00 	cmp.w	r8, #0
 800e746:	dbd5      	blt.n	800e6f4 <_lv_img_buf_transform+0x46>
    if(dsc->tmp.native_color) {
 800e748:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800e74c:	f012 0704 	ands.w	r7, r2, #4
 800e750:	d021      	beq.n	800e796 <_lv_img_buf_transform+0xe8>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800e752:	4620      	mov	r0, r4
 800e754:	fb08 9303 	mla	r3, r8, r3, r9
        if(dsc->tmp.has_alpha == 0) {
 800e758:	f012 0f02 	tst.w	r2, #2
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800e75c:	f850 1b14 	ldr.w	r1, [r0], #20
        if(dsc->tmp.has_alpha == 0) {
 800e760:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800e764:	d10c      	bne.n	800e780 <_lv_img_buf_transform+0xd2>
            px_size = LV_COLOR_SIZE >> 3;
 800e766:	2702      	movs	r7, #2
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800e768:	2202      	movs	r2, #2
 800e76a:	4451      	add	r1, sl
 800e76c:	f7ff fbef 	bl	800df4e <lv_memcpy_small>
    if(dsc->tmp.chroma_keyed) {
 800e770:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e774:	07db      	lsls	r3, r3, #31
 800e776:	d423      	bmi.n	800e7c0 <_lv_img_buf_transform+0x112>
    if(dsc->cfg.antialias == false) return true;
 800e778:	7ce3      	ldrb	r3, [r4, #19]
 800e77a:	bb33      	cbnz	r3, 800e7ca <_lv_img_buf_transform+0x11c>
 800e77c:	2001      	movs	r0, #1
 800e77e:	e7ba      	b.n	800e6f6 <_lv_img_buf_transform+0x48>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800e780:	449a      	add	sl, r3
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800e782:	2202      	movs	r2, #2
 800e784:	eb01 070a 	add.w	r7, r1, sl
 800e788:	4639      	mov	r1, r7
 800e78a:	f7ff fbe0 	bl	800df4e <lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800e78e:	78bb      	ldrb	r3, [r7, #2]
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800e790:	2703      	movs	r7, #3
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800e792:	75a3      	strb	r3, [r4, #22]
 800e794:	e7ec      	b.n	800e770 <_lv_img_buf_transform+0xc2>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800e796:	f104 0a18 	add.w	sl, r4, #24
 800e79a:	fa0f f189 	sxth.w	r1, r9
 800e79e:	fa0f f288 	sxth.w	r2, r8
 800e7a2:	8a23      	ldrh	r3, [r4, #16]
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	e9cd 1200 	strd	r1, r2, [sp]
 800e7aa:	f7ff fbdc 	bl	800df66 <lv_img_buf_get_px_color>
 800e7ae:	82a0      	strh	r0, [r4, #20]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800e7b0:	4650      	mov	r0, sl
        pxi = 0; /*unused*/
 800e7b2:	46ba      	mov	sl, r7
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800e7b4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e7b8:	f7ff fc4e 	bl	800e058 <lv_img_buf_get_px_alpha>
 800e7bc:	75a0      	strb	r0, [r4, #22]
 800e7be:	e7d7      	b.n	800e770 <_lv_img_buf_transform+0xc2>
        if(dsc->res.color.full == ct.full) return false;
 800e7c0:	8aa3      	ldrh	r3, [r4, #20]
 800e7c2:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800e7c6:	d1d7      	bne.n	800e778 <_lv_img_buf_transform+0xca>
 800e7c8:	e794      	b.n	800e6f4 <_lv_img_buf_transform+0x46>
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800e7ca:	4620      	mov	r0, r4
    dsc->tmp.xs = xs;
 800e7cc:	87a5      	strh	r5, [r4, #60]	; 0x3c
    dsc->tmp.ys = ys;
 800e7ce:	87e6      	strh	r6, [r4, #62]	; 0x3e
    dsc->tmp.xs_int = xs_int;
 800e7d0:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
    dsc->tmp.ys_int = ys_int;
 800e7d4:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
    dsc->tmp.pxi = pxi;
 800e7d8:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    dsc->tmp.px_size = px_size;
 800e7dc:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
}
 800e7e0:	b002      	add	sp, #8
 800e7e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800e7e6:	f7ff be05 	b.w	800e3f4 <_lv_img_buf_transform_anti_alias>
	...

0800e7ec <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800e7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	460f      	mov	r7, r1
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800e7f2:	4c13      	ldr	r4, [pc, #76]	; (800e840 <_lv_img_cache_open+0x54>)
{
 800e7f4:	9201      	str	r2, [sp, #4]
    uint32_t t_start  = lv_tick_get();
 800e7f6:	f007 ff33 	bl	8016660 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800e7fa:	4629      	mov	r1, r5
    uint32_t t_start  = lv_tick_get();
 800e7fc:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800e7fe:	9b01      	ldr	r3, [sp, #4]
 800e800:	463a      	mov	r2, r7
 800e802:	4620      	mov	r0, r4
 800e804:	f000 fb06 	bl	800ee14 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800e808:	4605      	mov	r5, r0
 800e80a:	b948      	cbnz	r0, 800e820 <_lv_img_cache_open+0x34>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800e80c:	4620      	mov	r0, r4
 800e80e:	212c      	movs	r1, #44	; 0x2c
 800e810:	f008 ffb8 	bl	8017784 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800e814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        return NULL;
 800e818:	4628      	mov	r0, r5
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800e81a:	62a3      	str	r3, [r4, #40]	; 0x28
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 800e81c:	b003      	add	sp, #12
 800e81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cached_src->life = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	62a3      	str	r3, [r4, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 800e824:	69e3      	ldr	r3, [r4, #28]
 800e826:	b10b      	cbz	r3, 800e82c <_lv_img_cache_open+0x40>
    return cached_src;
 800e828:	4805      	ldr	r0, [pc, #20]	; (800e840 <_lv_img_cache_open+0x54>)
 800e82a:	e7f7      	b.n	800e81c <_lv_img_cache_open+0x30>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800e82c:	4630      	mov	r0, r6
 800e82e:	f007 ff25 	bl	801667c <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800e832:	b108      	cbz	r0, 800e838 <_lv_img_cache_open+0x4c>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800e834:	61e0      	str	r0, [r4, #28]
 800e836:	e7f7      	b.n	800e828 <_lv_img_cache_open+0x3c>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800e838:	2301      	movs	r3, #1
    return cached_src;
 800e83a:	4620      	mov	r0, r4
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800e83c:	61e3      	str	r3, [r4, #28]
 800e83e:	e7ed      	b.n	800e81c <_lv_img_cache_open+0x30>
 800e840:	2000b510 	.word	0x2000b510

0800e844 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800e844:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800e846:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 800e848:	460c      	mov	r4, r1
    if(user_data) {
 800e84a:	b195      	cbz	r5, 800e872 <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800e84c:	7c0b      	ldrb	r3, [r1, #16]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d102      	bne.n	800e858 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 800e852:	4628      	mov	r0, r5
 800e854:	f008 fb7e 	bl	8016f54 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800e858:	68a8      	ldr	r0, [r5, #8]
 800e85a:	b108      	cbz	r0, 800e860 <lv_img_decoder_built_in_close+0x1c>
 800e85c:	f008 fd92 	bl	8017384 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800e860:	68e8      	ldr	r0, [r5, #12]
 800e862:	b108      	cbz	r0, 800e868 <lv_img_decoder_built_in_close+0x24>
 800e864:	f008 fd8e 	bl	8017384 <lv_mem_free>

        lv_mem_free(user_data);
 800e868:	4628      	mov	r0, r5
 800e86a:	f008 fd8b 	bl	8017384 <lv_mem_free>
        dsc->user_data = NULL;
 800e86e:	2300      	movs	r3, #0
 800e870:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800e872:	bd38      	pop	{r3, r4, r5, pc}

0800e874 <lv_img_decoder_built_in_info>:
{
 800e874:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800e876:	4608      	mov	r0, r1
{
 800e878:	460e      	mov	r6, r1
 800e87a:	4615      	mov	r5, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800e87c:	f7fb fc46 	bl	800a10c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800e880:	4604      	mov	r4, r0
 800e882:	b9d8      	cbnz	r0, 800e8bc <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800e884:	7833      	ldrb	r3, [r6, #0]
 800e886:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800e88a:	3b04      	subs	r3, #4
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b0a      	cmp	r3, #10
 800e890:	d811      	bhi.n	800e8b6 <lv_img_decoder_built_in_info+0x42>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800e892:	8873      	ldrh	r3, [r6, #2]
 800e894:	886a      	ldrh	r2, [r5, #2]
 800e896:	f3c3 134a 	ubfx	r3, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800e89a:	6831      	ldr	r1, [r6, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800e89c:	f363 124f 	bfi	r2, r3, #5, #11
 800e8a0:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800e8a2:	682b      	ldr	r3, [r5, #0]
 800e8a4:	4a1b      	ldr	r2, [pc, #108]	; (800e914 <lv_img_decoder_built_in_info+0xa0>)
 800e8a6:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
 800e8aa:	400a      	ands	r2, r1
 800e8ac:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800e8b0:	4313      	orrs	r3, r2
    return LV_RES_OK;
 800e8b2:	2401      	movs	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800e8b4:	602b      	str	r3, [r5, #0]
}
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	b004      	add	sp, #16
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800e8bc:	2801      	cmp	r0, #1
 800e8be:	d122      	bne.n	800e906 <lv_img_decoder_built_in_info+0x92>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f008 fbc3 	bl	801704c <lv_fs_get_ext>
 800e8c6:	4914      	ldr	r1, [pc, #80]	; (800e918 <lv_img_decoder_built_in_info+0xa4>)
 800e8c8:	f7f1 fca2 	bl	8000210 <strcmp>
 800e8cc:	b9c8      	cbnz	r0, 800e902 <lv_img_decoder_built_in_info+0x8e>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	a802      	add	r0, sp, #8
 800e8d4:	f008 fb90 	bl	8016ff8 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800e8d8:	b968      	cbnz	r0, 800e8f6 <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800e8da:	ab01      	add	r3, sp, #4
 800e8dc:	2204      	movs	r2, #4
 800e8de:	4629      	mov	r1, r5
 800e8e0:	a802      	add	r0, sp, #8
 800e8e2:	f008 fb47 	bl	8016f74 <lv_fs_read>
 800e8e6:	4606      	mov	r6, r0
            lv_fs_close(&f);
 800e8e8:	a802      	add	r0, sp, #8
 800e8ea:	f008 fb33 	bl	8016f54 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800e8ee:	b946      	cbnz	r6, 800e902 <lv_img_decoder_built_in_info+0x8e>
 800e8f0:	9b01      	ldr	r3, [sp, #4]
 800e8f2:	2b04      	cmp	r3, #4
 800e8f4:	d105      	bne.n	800e902 <lv_img_decoder_built_in_info+0x8e>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800e8f6:	782b      	ldrb	r3, [r5, #0]
 800e8f8:	331c      	adds	r3, #28
 800e8fa:	f003 031f 	and.w	r3, r3, #31
 800e8fe:	2b0a      	cmp	r3, #10
 800e900:	d9d9      	bls.n	800e8b6 <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800e902:	2400      	movs	r4, #0
 800e904:	e7d7      	b.n	800e8b6 <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800e906:	2802      	cmp	r0, #2
 800e908:	d1fb      	bne.n	800e902 <lv_img_decoder_built_in_info+0x8e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800e90a:	682b      	ldr	r3, [r5, #0]
 800e90c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800e910:	4b02      	ldr	r3, [pc, #8]	; (800e91c <lv_img_decoder_built_in_info+0xa8>)
 800e912:	e7cd      	b.n	800e8b0 <lv_img_decoder_built_in_info+0x3c>
 800e914:	001ffc1f 	.word	0x001ffc1f
 800e918:	08025c2e 	.word	0x08025c2e
 800e91c:	0020040b 	.word	0x0020040b

0800e920 <lv_img_decoder_built_in_read_line>:
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e920:	7d08      	ldrb	r0, [r1, #20]
{
 800e922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e926:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e928:	f000 031e 	and.w	r3, r0, #30
{
 800e92c:	b08b      	sub	sp, #44	; 0x2c
 800e92e:	460e      	mov	r6, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e930:	2b04      	cmp	r3, #4
{
 800e932:	4614      	mov	r4, r2
 800e934:	f9bd a050 	ldrsh.w	sl, [sp, #80]	; 0x50
 800e938:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e93c:	d003      	beq.n	800e946 <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800e93e:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e942:	2b06      	cmp	r3, #6
 800e944:	d12d      	bne.n	800e9a2 <lv_img_decoder_built_in_read_line+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800e946:	7c37      	ldrb	r7, [r6, #16]
 800e948:	2f01      	cmp	r7, #1
 800e94a:	d001      	beq.n	800e950 <lv_img_decoder_built_in_read_line+0x30>
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
    res = lv_fs_read(&user_data->f, buf, btr, &br);
    if(res != LV_FS_RES_OK || btr != br) {
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800e94c:	2700      	movs	r7, #0
 800e94e:	e024      	b.n	800e99a <lv_img_decoder_built_in_read_line+0x7a>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800e950:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800e954:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800e958:	f7fb fac8 	bl	8009eec <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800e95c:	6971      	ldr	r1, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800e95e:	4605      	mov	r5, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800e960:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800e962:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800e966:	fb1b 4101 	smlabb	r1, fp, r1, r4
 800e96a:	4341      	muls	r1, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800e96c:	4648      	mov	r0, r9
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800e96e:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800e970:	3104      	adds	r1, #4
 800e972:	f008 fb1a 	bl	8016faa <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800e976:	2800      	cmp	r0, #0
 800e978:	d1e8      	bne.n	800e94c <lv_img_decoder_built_in_read_line+0x2c>
    uint32_t btr = len * (px_size >> 3);
 800e97a:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    uint32_t br  = 0;
 800e97e:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800e980:	ab06      	add	r3, sp, #24
 800e982:	4641      	mov	r1, r8
    uint32_t btr = len * (px_size >> 3);
 800e984:	fb15 fa0a 	smulbb	sl, r5, sl
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800e988:	4648      	mov	r0, r9
 800e98a:	4652      	mov	r2, sl
 800e98c:	f008 faf2 	bl	8016f74 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800e990:	2800      	cmp	r0, #0
 800e992:	d1db      	bne.n	800e94c <lv_img_decoder_built_in_read_line+0x2c>
 800e994:	9b06      	ldr	r3, [sp, #24]
 800e996:	459a      	cmp	sl, r3
 800e998:	d1d8      	bne.n	800e94c <lv_img_decoder_built_in_read_line+0x2c>
}
 800e99a:	4638      	mov	r0, r7
 800e99c:	b00b      	add	sp, #44	; 0x2c
 800e99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800e9a2:	f1a3 020b 	sub.w	r2, r3, #11
 800e9a6:	2a03      	cmp	r2, #3
 800e9a8:	f200 80ba 	bhi.w	800eb20 <lv_img_decoder_built_in_read_line+0x200>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800e9ac:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800e9b0:	aa06      	add	r2, sp, #24
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800e9b2:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e9b6:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800e9ba:	4691      	mov	r9, r2
 800e9bc:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800e9c0:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800e9c2:	4ba4      	ldr	r3, [pc, #656]	; (800ec54 <lv_img_decoder_built_in_read_line+0x334>)
 800e9c4:	f103 0710 	add.w	r7, r3, #16
 800e9c8:	6818      	ldr	r0, [r3, #0]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e9d0:	4615      	mov	r5, r2
 800e9d2:	42bb      	cmp	r3, r7
 800e9d4:	c503      	stmia	r5!, {r0, r1}
 800e9d6:	462a      	mov	r2, r5
 800e9d8:	d1f6      	bne.n	800e9c8 <lv_img_decoder_built_in_read_line+0xa8>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800e9da:	8931      	ldrh	r1, [r6, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800e9dc:	4643      	mov	r3, r8
 800e9de:	2200      	movs	r2, #0
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800e9e0:	0a0d      	lsrs	r5, r1, #8
    for(i = 0; i < len; i++) {
 800e9e2:	b210      	sxth	r0, r2
 800e9e4:	3303      	adds	r3, #3
 800e9e6:	4582      	cmp	sl, r0
 800e9e8:	dc14      	bgt.n	800ea14 <lv_img_decoder_built_in_read_line+0xf4>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800e9ea:	7d30      	ldrb	r0, [r6, #20]
 800e9ec:	f000 001f 	and.w	r0, r0, #31
 800e9f0:	f7fb fa7c 	bl	8009eec <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800e9f4:	2301      	movs	r3, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800e9f6:	9001      	str	r0, [sp, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800e9f8:	4083      	lsls	r3, r0
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800ea00:	7d33      	ldrb	r3, [r6, #20]
 800ea02:	f003 031f 	and.w	r3, r3, #31
 800ea06:	3b0b      	subs	r3, #11
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	d85e      	bhi.n	800eaca <lv_img_decoder_built_in_read_line+0x1aa>
 800ea0c:	e8df f003 	tbb	[pc, r3]
 800ea10:	54453508 	.word	0x54453508
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800ea14:	3201      	adds	r2, #1
 800ea16:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800ea1a:	f803 5c02 	strb.w	r5, [r3, #-2]
    for(i = 0; i < len; i++) {
 800ea1e:	e7e0      	b.n	800e9e2 <lv_img_decoder_built_in_read_line+0xc2>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ea20:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800ea22:	10e1      	asrs	r1, r4, #3
            pos = 7 - (x & 0x7);
 800ea24:	43e4      	mvns	r4, r4
            opa_table = alpha1_opa_table;
 800ea26:	f10d 0910 	add.w	r9, sp, #16
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ea2a:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 800ea2e:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ea32:	3507      	adds	r5, #7
 800ea34:	10eb      	asrs	r3, r5, #3
 800ea36:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 800ea38:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ea3c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ea3e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800ea42:	9103      	str	r1, [sp, #12]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ea44:	f008 fe50 	bl	80176e8 <lv_mem_buf_get>
    if (fs_buf == NULL) return LV_RES_INV;
 800ea48:	4607      	mov	r7, r0
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d0a5      	beq.n	800e99a <lv_img_decoder_built_in_read_line+0x7a>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ea4e:	7c33      	ldrb	r3, [r6, #16]
 800ea50:	9903      	ldr	r1, [sp, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d13d      	bne.n	800ead2 <lv_img_decoder_built_in_read_line+0x1b2>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800ea56:	6873      	ldr	r3, [r6, #4]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800ea5c:	9a01      	ldr	r2, [sp, #4]
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800ea5e:	2300      	movs	r3, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800ea60:	f108 0802 	add.w	r8, r8, #2
            pos = 8 - px_size;
 800ea64:	f1c2 0008 	rsb	r0, r2, #8
 800ea68:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 800ea6a:	b21a      	sxth	r2, r3
 800ea6c:	4552      	cmp	r2, sl
 800ea6e:	db3d      	blt.n	800eaec <lv_img_decoder_built_in_read_line+0x1cc>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 800ea70:	4638      	mov	r0, r7
    return LV_RES_OK;
 800ea72:	2701      	movs	r7, #1
    lv_mem_buf_release(fs_buf);
 800ea74:	f008 fc94 	bl	80173a0 <lv_mem_buf_release>
    return LV_RES_OK;
 800ea78:	e78f      	b.n	800e99a <lv_img_decoder_built_in_read_line+0x7a>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ea7a:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800ea7c:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800ea7e:	43e4      	mvns	r4, r4
            opa_table = alpha2_opa_table;
 800ea80:	f10d 0914 	add.w	r9, sp, #20
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ea84:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 800ea88:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ea8c:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 800ea8e:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ea90:	10ab      	asrs	r3, r5, #2
 800ea92:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 800ea94:	fb03 110b 	mla	r1, r3, fp, r1
            break;
 800ea98:	e7d0      	b.n	800ea3c <lv_img_decoder_built_in_read_line+0x11c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ea9a:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800ea9c:	1061      	asrs	r1, r4, #1
            pos = 4 - (x & 0x1) * 4;
 800ea9e:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800eaa2:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 800eaa6:	bf0c      	ite	eq
 800eaa8:	2404      	moveq	r4, #4
 800eaaa:	2400      	movne	r4, #0
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800eaac:	3501      	adds	r5, #1
 800eaae:	106b      	asrs	r3, r5, #1
 800eab0:	461d      	mov	r5, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 800eab2:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 4 - (x & 0x1) * 4;
 800eab6:	e7c1      	b.n	800ea3c <lv_img_decoder_built_in_read_line+0x11c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800eab8:	6975      	ldr	r5, [r6, #20]
 800eaba:	f3c5 218a 	ubfx	r1, r5, #10, #11
 800eabe:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 800eac0:	fb1b 4101 	smlabb	r1, fp, r1, r4
            pos = 0;
 800eac4:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 800eac6:	46a1      	mov	r9, r4
 800eac8:	e7b8      	b.n	800ea3c <lv_img_decoder_built_in_read_line+0x11c>
 800eaca:	2400      	movs	r4, #0
 800eacc:	4621      	mov	r1, r4
 800eace:	4625      	mov	r5, r4
 800ead0:	e7f9      	b.n	800eac6 <lv_img_decoder_built_in_read_line+0x1a6>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800ead2:	2200      	movs	r2, #0
 800ead4:	3104      	adds	r1, #4
 800ead6:	4658      	mov	r0, fp
 800ead8:	f008 fa67 	bl	8016faa <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800eadc:	4639      	mov	r1, r7
 800eade:	2300      	movs	r3, #0
 800eae0:	462a      	mov	r2, r5
 800eae2:	4658      	mov	r0, fp
 800eae4:	f008 fa46 	bl	8016f74 <lv_fs_read>
 800eae8:	4639      	mov	r1, r7
 800eaea:	e7b7      	b.n	800ea5c <lv_img_decoder_built_in_read_line+0x13c>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800eaec:	780a      	ldrb	r2, [r1, #0]
 800eaee:	9d02      	ldr	r5, [sp, #8]
 800eaf0:	4122      	asrs	r2, r4
 800eaf2:	402a      	ands	r2, r5
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800eaf4:	7d35      	ldrb	r5, [r6, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800eaf6:	f005 051f 	and.w	r5, r5, #31
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800eafa:	b2d2      	uxtb	r2, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800eafc:	2d0e      	cmp	r5, #14
 800eafe:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800eb02:	f103 0301 	add.w	r3, r3, #1
 800eb06:	bf18      	it	ne
 800eb08:	f819 2002 	ldrbne.w	r2, [r9, r2]
 800eb0c:	f808 2005 	strb.w	r2, [r8, r5]
        pos -= px_size;
 800eb10:	9a01      	ldr	r2, [sp, #4]
 800eb12:	1aa4      	subs	r4, r4, r2
 800eb14:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800eb16:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800eb18:	bfbc      	itt	lt
 800eb1a:	4604      	movlt	r4, r0
            data_tmp++;
 800eb1c:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 800eb1e:	e7a4      	b.n	800ea6a <lv_img_decoder_built_in_read_line+0x14a>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800eb20:	3b07      	subs	r3, #7
 800eb22:	2b03      	cmp	r3, #3
 800eb24:	f63f af12 	bhi.w	800e94c <lv_img_decoder_built_in_read_line+0x2c>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800eb28:	f000 001f 	and.w	r0, r0, #31
 800eb2c:	f7fb f9de 	bl	8009eec <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800eb30:	2301      	movs	r3, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800eb32:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800eb34:	4083      	lsls	r3, r0
 800eb36:	3b01      	subs	r3, #1
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 800eb3c:	7d33      	ldrb	r3, [r6, #20]
 800eb3e:	f003 031f 	and.w	r3, r3, #31
 800eb42:	3b07      	subs	r3, #7
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d873      	bhi.n	800ec30 <lv_img_decoder_built_in_read_line+0x310>
 800eb48:	e8df f003 	tbb	[pc, r3]
 800eb4c:	68574702 	.word	0x68574702
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800eb50:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800eb52:	10e3      	asrs	r3, r4, #3
            pos = 7 - (x & 0x7);
 800eb54:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800eb56:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 800eb5a:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800eb5e:	3507      	adds	r5, #7
 800eb60:	10e9      	asrs	r1, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800eb62:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800eb66:	460d      	mov	r5, r1
            ofs += 8;                /*Skip the palette*/
 800eb68:	f10b 0108 	add.w	r1, fp, #8
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800eb6c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800eb6e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800eb72:	9102      	str	r1, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800eb74:	f008 fdb8 	bl	80176e8 <lv_mem_buf_get>
    if (fs_buf == NULL) return LV_RES_INV;
 800eb78:	4607      	mov	r7, r0
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	f43f aee6 	beq.w	800e94c <lv_img_decoder_built_in_read_line+0x2c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800eb80:	7c33      	ldrb	r3, [r6, #16]
 800eb82:	9902      	ldr	r1, [sp, #8]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d157      	bne.n	800ec38 <lv_img_decoder_built_in_read_line+0x318>
        data_tmp                     = img_dsc->data + ofs;
 800eb88:	6873      	ldr	r3, [r6, #4]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	4419      	add	r1, r3
            pos = 8 - px_size;
 800eb8e:	f1c9 0508 	rsb	r5, r9, #8
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800eb92:	2000      	movs	r0, #0
            pos = 8 - px_size;
 800eb94:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800eb96:	b203      	sxth	r3, r0
 800eb98:	459a      	cmp	sl, r3
 800eb9a:	f77f af69 	ble.w	800ea70 <lv_img_decoder_built_in_read_line+0x150>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800eb9e:	780b      	ldrb	r3, [r1, #0]
 800eba0:	3001      	adds	r0, #1
 800eba2:	9a01      	ldr	r2, [sp, #4]
 800eba4:	f108 0803 	add.w	r8, r8, #3
 800eba8:	4123      	asrs	r3, r4
        pos -= px_size;
 800ebaa:	eba4 0409 	sub.w	r4, r4, r9
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800ebae:	4013      	ands	r3, r2
        lv_color_t color = user_data->palette[val_act];
 800ebb0:	f8db 2008 	ldr.w	r2, [fp, #8]
        pos -= px_size;
 800ebb4:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800ebb6:	b2de      	uxtb	r6, r3
        if(pos < 0) {
 800ebb8:	2c00      	cmp	r4, #0
        lv_color_t color = user_data->palette[val_act];
 800ebba:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
            pos = 8 - px_size;
 800ebbe:	bfbc      	itt	lt
 800ebc0:	462c      	movlt	r4, r5
            data_tmp++;
 800ebc2:	3101      	addlt	r1, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800ebc4:	f808 3c03 	strb.w	r3, [r8, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800ebc8:	0a1b      	lsrs	r3, r3, #8
 800ebca:	f808 3c02 	strb.w	r3, [r8, #-2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800ebce:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ebd2:	5d9b      	ldrb	r3, [r3, r6]
 800ebd4:	f808 3c01 	strb.w	r3, [r8, #-1]
    for(i = 0; i < len; i++) {
 800ebd8:	e7dd      	b.n	800eb96 <lv_img_decoder_built_in_read_line+0x276>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ebda:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800ebdc:	10a3      	asrs	r3, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800ebde:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ebe0:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 800ebe4:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ebe8:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 800ebea:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ebec:	10a9      	asrs	r1, r5, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800ebee:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ebf2:	460d      	mov	r5, r1
            ofs += 16;               /*Skip the palette*/
 800ebf4:	f10b 0110 	add.w	r1, fp, #16
            break;
 800ebf8:	e7b8      	b.n	800eb6c <lv_img_decoder_built_in_read_line+0x24c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ebfa:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800ebfc:	1063      	asrs	r3, r4, #1
            pos = 4 - (x & 0x1) * 4;
 800ebfe:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ec02:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 800ec06:	bf0c      	ite	eq
 800ec08:	2404      	moveq	r4, #4
 800ec0a:	2400      	movne	r4, #0
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ec0c:	3501      	adds	r5, #1
 800ec0e:	1069      	asrs	r1, r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800ec10:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ec14:	460d      	mov	r5, r1
            ofs += 64;               /*Skip the palette*/
 800ec16:	f10b 0140 	add.w	r1, fp, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 800ec1a:	e7a7      	b.n	800eb6c <lv_img_decoder_built_in_read_line+0x24c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ec1c:	6975      	ldr	r5, [r6, #20]
 800ec1e:	f3c5 218a 	ubfx	r1, r5, #10, #11
            ofs += w * y + x;  /*First pixel*/
 800ec22:	fb1b 4401 	smlabb	r4, fp, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ec26:	460d      	mov	r5, r1
            ofs += 1024;       /*Skip the palette*/
 800ec28:	f504 6180 	add.w	r1, r4, #1024	; 0x400
            pos = 0;
 800ec2c:	2400      	movs	r4, #0
            break;
 800ec2e:	e79d      	b.n	800eb6c <lv_img_decoder_built_in_read_line+0x24c>
    switch(dsc->header.cf) {
 800ec30:	2100      	movs	r1, #0
 800ec32:	460c      	mov	r4, r1
 800ec34:	460d      	mov	r5, r1
 800ec36:	e799      	b.n	800eb6c <lv_img_decoder_built_in_read_line+0x24c>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800ec38:	2200      	movs	r2, #0
 800ec3a:	3104      	adds	r1, #4
 800ec3c:	4658      	mov	r0, fp
 800ec3e:	f008 f9b4 	bl	8016faa <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800ec42:	4639      	mov	r1, r7
 800ec44:	2300      	movs	r3, #0
 800ec46:	462a      	mov	r2, r5
 800ec48:	4658      	mov	r0, fp
 800ec4a:	f008 f993 	bl	8016f74 <lv_fs_read>
 800ec4e:	4639      	mov	r1, r7
 800ec50:	e79d      	b.n	800eb8e <lv_img_decoder_built_in_read_line+0x26e>
 800ec52:	bf00      	nop
 800ec54:	08025aa0 	.word	0x08025aa0

0800ec58 <lv_img_decoder_built_in_open>:
{
 800ec58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ec5c:	7c0d      	ldrb	r5, [r1, #16]
{
 800ec5e:	4680      	mov	r8, r0
 800ec60:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ec62:	2d01      	cmp	r5, #1
 800ec64:	d12d      	bne.n	800ecc2 <lv_img_decoder_built_in_open+0x6a>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800ec66:	6848      	ldr	r0, [r1, #4]
 800ec68:	f008 f9f0 	bl	801704c <lv_fs_get_ext>
 800ec6c:	4956      	ldr	r1, [pc, #344]	; (800edc8 <lv_img_decoder_built_in_open+0x170>)
 800ec6e:	f7f1 facf 	bl	8000210 <strcmp>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d15b      	bne.n	800ed2e <lv_img_decoder_built_in_open+0xd6>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800ec76:	2202      	movs	r2, #2
 800ec78:	6861      	ldr	r1, [r4, #4]
 800ec7a:	4668      	mov	r0, sp
 800ec7c:	f008 f9bc 	bl	8016ff8 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d154      	bne.n	800ed2e <lv_img_decoder_built_in_open+0xd6>
        if(dsc->user_data == NULL) {
 800ec84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec86:	b943      	cbnz	r3, 800ec9a <lv_img_decoder_built_in_open+0x42>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800ec88:	2010      	movs	r0, #16
 800ec8a:	f008 fcfd 	bl	8017688 <lv_mem_alloc>
 800ec8e:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800ec90:	b900      	cbnz	r0, 800ec94 <lv_img_decoder_built_in_open+0x3c>
 800ec92:	e7fe      	b.n	800ec92 <lv_img_decoder_built_in_open+0x3a>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800ec94:	2110      	movs	r1, #16
 800ec96:	f008 fd75 	bl	8017784 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ec9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    while(len) {
 800ec9c:	466b      	mov	r3, sp
 800ec9e:	f102 0108 	add.w	r1, r2, #8
        *d8 = *s8;
 800eca2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eca6:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 800ecaa:	428a      	cmp	r2, r1
 800ecac:	d1f9      	bne.n	800eca2 <lv_img_decoder_built_in_open+0x4a>
    lv_img_cf_t cf = dsc->header.cf;
 800ecae:	7d23      	ldrb	r3, [r4, #20]
 800ecb0:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ecb4:	1f03      	subs	r3, r0, #4
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d811      	bhi.n	800ecde <lv_img_decoder_built_in_open+0x86>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ecba:	7c23      	ldrb	r3, [r4, #16]
 800ecbc:	b15b      	cbz	r3, 800ecd6 <lv_img_decoder_built_in_open+0x7e>
            return LV_RES_OK;
 800ecbe:	2501      	movs	r5, #1
 800ecc0:	e005      	b.n	800ecce <lv_img_decoder_built_in_open+0x76>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ecc2:	2d00      	cmp	r5, #0
 800ecc4:	d1f3      	bne.n	800ecae <lv_img_decoder_built_in_open+0x56>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800ecc6:	684b      	ldr	r3, [r1, #4]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1ef      	bne.n	800ecae <lv_img_decoder_built_in_open+0x56>
}
 800ecce:	4628      	mov	r0, r5
 800ecd0:	b002      	add	sp, #8
 800ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800ecd6:	6863      	ldr	r3, [r4, #4]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	61a3      	str	r3, [r4, #24]
 800ecdc:	e7ef      	b.n	800ecbe <lv_img_decoder_built_in_open+0x66>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800ecde:	1fc3      	subs	r3, r0, #7
 800ece0:	2b03      	cmp	r3, #3
 800ece2:	d86a      	bhi.n	800edba <lv_img_decoder_built_in_open+0x162>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800ece4:	f7fb f902 	bl	8009eec <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 800ece8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800ecea:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800ecec:	b943      	cbnz	r3, 800ed00 <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800ecee:	2010      	movs	r0, #16
 800ecf0:	f008 fcca 	bl	8017688 <lv_mem_alloc>
 800ecf4:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800ecf6:	b900      	cbnz	r0, 800ecfa <lv_img_decoder_built_in_open+0xa2>
 800ecf8:	e7fe      	b.n	800ecf8 <lv_img_decoder_built_in_open+0xa0>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800ecfa:	2110      	movs	r1, #16
 800ecfc:	f008 fd42 	bl	8017784 <lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800ed00:	2002      	movs	r0, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ed02:	6a66      	ldr	r6, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800ed04:	40b8      	lsls	r0, r7
 800ed06:	f008 fcbf 	bl	8017688 <lv_mem_alloc>
 800ed0a:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(user_data->palette);
 800ed0c:	b900      	cbnz	r0, 800ed10 <lv_img_decoder_built_in_open+0xb8>
 800ed0e:	e7fe      	b.n	800ed0e <lv_img_decoder_built_in_open+0xb6>
        uint32_t palette_size = 1 << px_size;
 800ed10:	2001      	movs	r0, #1
 800ed12:	fa00 f707 	lsl.w	r7, r0, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800ed16:	4638      	mov	r0, r7
 800ed18:	f008 fcb6 	bl	8017688 <lv_mem_alloc>
 800ed1c:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->opa);
 800ed1e:	b900      	cbnz	r0, 800ed22 <lv_img_decoder_built_in_open+0xca>
 800ed20:	e7fe      	b.n	800ed20 <lv_img_decoder_built_in_open+0xc8>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800ed22:	68b3      	ldr	r3, [r6, #8]
 800ed24:	b92b      	cbnz	r3, 800ed32 <lv_img_decoder_built_in_open+0xda>
            lv_img_decoder_built_in_close(decoder, dsc);
 800ed26:	4621      	mov	r1, r4
 800ed28:	4640      	mov	r0, r8
 800ed2a:	f7ff fd8b 	bl	800e844 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800ed2e:	2500      	movs	r5, #0
 800ed30:	e7cd      	b.n	800ecce <lv_img_decoder_built_in_open+0x76>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ed32:	7c25      	ldrb	r5, [r4, #16]
 800ed34:	2d01      	cmp	r5, #1
 800ed36:	d123      	bne.n	800ed80 <lv_img_decoder_built_in_open+0x128>
            for(i = 0; i < palette_size; i++) {
 800ed38:	2400      	movs	r4, #0
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	2104      	movs	r1, #4
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f008 f933 	bl	8016faa <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800ed44:	42bc      	cmp	r4, r7
 800ed46:	d0c2      	beq.n	800ecce <lv_img_decoder_built_in_open+0x76>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800ed48:	2300      	movs	r3, #0
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	4669      	mov	r1, sp
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f008 f910 	bl	8016f74 <lv_fs_read>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800ed54:	f89d 3001 	ldrb.w	r3, [sp, #1]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800ed58:	68b2      	ldr	r2, [r6, #8]
 800ed5a:	0899      	lsrs	r1, r3, #2
 800ed5c:	f89d 3000 	ldrb.w	r3, [sp]
 800ed60:	08db      	lsrs	r3, r3, #3
 800ed62:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800ed66:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800ed6a:	08c9      	lsrs	r1, r1, #3
 800ed6c:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 800ed70:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800ed74:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ed78:	68f3      	ldr	r3, [r6, #12]
 800ed7a:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 800ed7c:	3401      	adds	r4, #1
 800ed7e:	e7e1      	b.n	800ed44 <lv_img_decoder_built_in_open+0xec>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800ed80:	6863      	ldr	r3, [r4, #4]
            for(i = 0; i < palette_size; i++) {
 800ed82:	2000      	movs	r0, #0
 800ed84:	689a      	ldr	r2, [r3, #8]
 800ed86:	42b8      	cmp	r0, r7
 800ed88:	f102 0204 	add.w	r2, r2, #4
 800ed8c:	d097      	beq.n	800ecbe <lv_img_decoder_built_in_open+0x66>
 800ed8e:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800ed92:	68b1      	ldr	r1, [r6, #8]
 800ed94:	089c      	lsrs	r4, r3, #2
 800ed96:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800ed9a:	08db      	lsrs	r3, r3, #3
 800ed9c:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 800eda0:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800eda4:	08e4      	lsrs	r4, r4, #3
 800eda6:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 800edaa:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800edae:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800edb2:	68f3      	ldr	r3, [r6, #12]
 800edb4:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 800edb6:	3001      	adds	r0, #1
 800edb8:	e7e5      	b.n	800ed86 <lv_img_decoder_built_in_open+0x12e>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800edba:	f1a0 030b 	sub.w	r3, r0, #11
 800edbe:	2b03      	cmp	r3, #3
 800edc0:	f67f af7d 	bls.w	800ecbe <lv_img_decoder_built_in_open+0x66>
 800edc4:	e7af      	b.n	800ed26 <lv_img_decoder_built_in_open+0xce>
 800edc6:	bf00      	nop
 800edc8:	08025c2e 	.word	0x08025c2e

0800edcc <lv_img_decoder_get_info>:
{
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	460e      	mov	r6, r1
 800edd2:	4607      	mov	r7, r0
   lv_memset_00(header, sizeof(lv_img_header_t));
 800edd4:	2104      	movs	r1, #4
    lv_res_t res = LV_RES_INV;
 800edd6:	2500      	movs	r5, #0
   lv_memset_00(header, sizeof(lv_img_header_t));
 800edd8:	4630      	mov	r0, r6
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800edda:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800ee10 <lv_img_decoder_get_info+0x44>
   lv_memset_00(header, sizeof(lv_img_header_t));
 800edde:	f008 fcd1 	bl	8017784 <lv_memset_00>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800ede2:	480b      	ldr	r0, [pc, #44]	; (800ee10 <lv_img_decoder_get_info+0x44>)
 800ede4:	f008 f9cb 	bl	801717e <_lv_ll_get_head>
 800ede8:	4604      	mov	r4, r0
 800edea:	b914      	cbnz	r4, 800edf2 <lv_img_decoder_get_info+0x26>
}
 800edec:	4628      	mov	r0, r5
 800edee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	b133      	cbz	r3, 800ee04 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 800edf6:	4632      	mov	r2, r6
 800edf8:	4639      	mov	r1, r7
 800edfa:	4620      	mov	r0, r4
 800edfc:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 800edfe:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800ee00:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 800ee02:	d0f3      	beq.n	800edec <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800ee04:	4621      	mov	r1, r4
 800ee06:	4640      	mov	r0, r8
 800ee08:	f008 f9bf 	bl	801718a <_lv_ll_get_next>
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	e7ec      	b.n	800edea <lv_img_decoder_get_info+0x1e>
 800ee10:	2000b500 	.word	0x2000b500

0800ee14 <lv_img_decoder_open>:
{
 800ee14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee18:	4604      	mov	r4, r0
 800ee1a:	4616      	mov	r6, r2
 800ee1c:	460f      	mov	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800ee1e:	2128      	movs	r1, #40	; 0x28
{
 800ee20:	461d      	mov	r5, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800ee22:	f008 fcaf 	bl	8017784 <lv_memset_00>
    dsc->src_type = lv_img_src_get_type(src);
 800ee26:	4638      	mov	r0, r7
    dsc->color    = color;
 800ee28:	8126      	strh	r6, [r4, #8]
    dsc->src_type = lv_img_src_get_type(src);
 800ee2a:	f7fb f96f 	bl	800a10c <lv_img_src_get_type>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ee2e:	2801      	cmp	r0, #1
    dsc->src_type = lv_img_src_get_type(src);
 800ee30:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 800ee32:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ee34:	d11e      	bne.n	800ee74 <lv_img_decoder_open+0x60>
        size_t fnlen = strlen(src);
 800ee36:	4638      	mov	r0, r7
 800ee38:	f7f1 f9f4 	bl	8000224 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800ee3c:	3001      	adds	r0, #1
 800ee3e:	f008 fc23 	bl	8017688 <lv_mem_alloc>
 800ee42:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 800ee44:	b900      	cbnz	r0, 800ee48 <lv_img_decoder_open+0x34>
 800ee46:	e7fe      	b.n	800ee46 <lv_img_decoder_open+0x32>
        strcpy((char *)dsc->src, src);
 800ee48:	4639      	mov	r1, r7
 800ee4a:	f016 f953 	bl	80250f4 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ee4e:	481b      	ldr	r0, [pc, #108]	; (800eebc <lv_img_decoder_open+0xa8>)
    lv_res_t res = LV_RES_INV;
 800ee50:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ee52:	f008 f994 	bl	801717e <_lv_ll_get_head>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800ee56:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800eebc <lv_img_decoder_open+0xa8>
 800ee60:	b955      	cbnz	r5, 800ee78 <lv_img_decoder_open+0x64>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800ee62:	7c23      	ldrb	r3, [r4, #16]
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d102      	bne.n	800ee6e <lv_img_decoder_open+0x5a>
        lv_mem_free((void*)dsc->src);
 800ee68:	6860      	ldr	r0, [r4, #4]
 800ee6a:	f008 fa8b 	bl	8017384 <lv_mem_free>
}
 800ee6e:	4630      	mov	r0, r6
 800ee70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dsc->src = src;
 800ee74:	6067      	str	r7, [r4, #4]
 800ee76:	e7ea      	b.n	800ee4e <lv_img_decoder_open+0x3a>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b1cb      	cbz	r3, 800eeb0 <lv_img_decoder_open+0x9c>
 800ee7c:	686a      	ldr	r2, [r5, #4]
 800ee7e:	b1ba      	cbz	r2, 800eeb0 <lv_img_decoder_open+0x9c>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800ee80:	4642      	mov	r2, r8
 800ee82:	4639      	mov	r1, r7
 800ee84:	4628      	mov	r0, r5
 800ee86:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800ee88:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 800ee8a:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800ee8c:	d110      	bne.n	800eeb0 <lv_img_decoder_open+0x9c>
        res = decoder->open_cb(decoder, dsc);
 800ee8e:	686b      	ldr	r3, [r5, #4]
 800ee90:	4621      	mov	r1, r4
 800ee92:	4628      	mov	r0, r5
        dsc->decoder = decoder;
 800ee94:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 800ee96:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 800ee98:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 800ee9a:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 800ee9c:	d0e7      	beq.n	800ee6e <lv_img_decoder_open+0x5a>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800ee9e:	2104      	movs	r1, #4
 800eea0:	4640      	mov	r0, r8
 800eea2:	f008 fc6f 	bl	8017784 <lv_memset_00>
        dsc->error_msg = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 800eeaa:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 800eeac:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 800eeae:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4648      	mov	r0, r9
 800eeb4:	f008 f969 	bl	801718a <_lv_ll_get_next>
 800eeb8:	4605      	mov	r5, r0
 800eeba:	e7d1      	b.n	800ee60 <lv_img_decoder_open+0x4c>
 800eebc:	2000b500 	.word	0x2000b500

0800eec0 <lv_img_decoder_read_line>:
{
 800eec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800eec2:	6805      	ldr	r5, [r0, #0]
 800eec4:	68ac      	ldr	r4, [r5, #8]
 800eec6:	b14c      	cbz	r4, 800eedc <lv_img_decoder_read_line+0x1c>
 800eec8:	9e06      	ldr	r6, [sp, #24]
 800eeca:	e9cd 3600 	strd	r3, r6, [sp]
 800eece:	4613      	mov	r3, r2
 800eed0:	460a      	mov	r2, r1
 800eed2:	4601      	mov	r1, r0
 800eed4:	4628      	mov	r0, r5
 800eed6:	47a0      	blx	r4
}
 800eed8:	b002      	add	sp, #8
 800eeda:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800eedc:	4620      	mov	r0, r4
 800eede:	e7fb      	b.n	800eed8 <lv_img_decoder_read_line+0x18>

0800eee0 <lv_img_decoder_close>:
{
 800eee0:	b510      	push	{r4, lr}
 800eee2:	4604      	mov	r4, r0
    if(dsc->decoder) {
 800eee4:	6800      	ldr	r0, [r0, #0]
 800eee6:	b158      	cbz	r0, 800ef00 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800eee8:	68c3      	ldr	r3, [r0, #12]
 800eeea:	b10b      	cbz	r3, 800eef0 <lv_img_decoder_close+0x10>
 800eeec:	4621      	mov	r1, r4
 800eeee:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800eef0:	7c23      	ldrb	r3, [r4, #16]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d104      	bne.n	800ef00 <lv_img_decoder_close+0x20>
            lv_mem_free((void*)dsc->src);
 800eef6:	6860      	ldr	r0, [r4, #4]
 800eef8:	f008 fa44 	bl	8017384 <lv_mem_free>
            dsc->src = NULL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	6063      	str	r3, [r4, #4]
}
 800ef00:	bd10      	pop	{r4, pc}
	...

0800ef04 <lv_img_decoder_create>:
{
 800ef04:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 800ef06:	4805      	ldr	r0, [pc, #20]	; (800ef1c <lv_img_decoder_create+0x18>)
 800ef08:	f008 f8c7 	bl	801709a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	b900      	cbnz	r0, 800ef12 <lv_img_decoder_create+0xe>
 800ef10:	e7fe      	b.n	800ef10 <lv_img_decoder_create+0xc>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800ef12:	2114      	movs	r1, #20
 800ef14:	f008 fc36 	bl	8017784 <lv_memset_00>
}
 800ef18:	4620      	mov	r0, r4
 800ef1a:	bd10      	pop	{r4, pc}
 800ef1c:	2000b500 	.word	0x2000b500

0800ef20 <_lv_img_decoder_init>:
{
 800ef20:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 800ef22:	2114      	movs	r1, #20
 800ef24:	4807      	ldr	r0, [pc, #28]	; (800ef44 <_lv_img_decoder_init+0x24>)
 800ef26:	f008 f8b0 	bl	801708a <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800ef2a:	f7ff ffeb 	bl	800ef04 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 800ef2e:	b900      	cbnz	r0, 800ef32 <_lv_img_decoder_init+0x12>
 800ef30:	e7fe      	b.n	800ef30 <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800ef32:	4b05      	ldr	r3, [pc, #20]	; (800ef48 <_lv_img_decoder_init+0x28>)
 800ef34:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800ef36:	4b05      	ldr	r3, [pc, #20]	; (800ef4c <_lv_img_decoder_init+0x2c>)
 800ef38:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800ef3a:	4b05      	ldr	r3, [pc, #20]	; (800ef50 <_lv_img_decoder_init+0x30>)
 800ef3c:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800ef3e:	4b05      	ldr	r3, [pc, #20]	; (800ef54 <_lv_img_decoder_init+0x34>)
 800ef40:	60c3      	str	r3, [r0, #12]
}
 800ef42:	bd08      	pop	{r3, pc}
 800ef44:	2000b500 	.word	0x2000b500
 800ef48:	0800e875 	.word	0x0800e875
 800ef4c:	0800ec59 	.word	0x0800ec59
 800ef50:	0800e921 	.word	0x0800e921
 800ef54:	0800e845 	.word	0x0800e845

0800ef58 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ef58:	8883      	ldrh	r3, [r0, #4]
 800ef5a:	8800      	ldrh	r0, [r0, #0]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	1a18      	subs	r0, r3, r0
}
 800ef60:	b200      	sxth	r0, r0
 800ef62:	4770      	bx	lr

0800ef64 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ef64:	88c3      	ldrh	r3, [r0, #6]
 800ef66:	8840      	ldrh	r0, [r0, #2]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	1a18      	subs	r0, r3, r0
}
 800ef6c:	b200      	sxth	r0, r0
 800ef6e:	4770      	bx	lr

0800ef70 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt, lv_coord_t * start_pos, lv_coord_t * gap)
{
    if(item_cnt <= 1) {
 800ef70:	2b01      	cmp	r3, #1
{
 800ef72:	b570      	push	{r4, r5, r6, lr}
 800ef74:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 800ef78:	dc02      	bgt.n	800ef80 <place_content+0x10>
        switch(place) {
 800ef7a:	1ec6      	subs	r6, r0, #3
 800ef7c:	2e02      	cmp	r6, #2
 800ef7e:	d907      	bls.n	800ef90 <place_content+0x20>
            default:
                break;
        }
    }

    switch(place) {
 800ef80:	3801      	subs	r0, #1
 800ef82:	2804      	cmp	r0, #4
 800ef84:	d835      	bhi.n	800eff2 <place_content+0x82>
 800ef86:	e8df f000 	tbb	[pc, r0]
 800ef8a:	030d      	.short	0x030d
 800ef8c:	1b2a      	.short	0x1b2a
 800ef8e:	13          	.byte	0x13
 800ef8f:	00          	.byte	0x00
    case LV_FLEX_ALIGN_CENTER:
        *gap = 0;
 800ef90:	2300      	movs	r3, #0
        *start_pos += (max_size - content_size) / 2;
 800ef92:	1a89      	subs	r1, r1, r2
        *gap = 0;
 800ef94:	802b      	strh	r3, [r5, #0]
        *start_pos += (max_size - content_size) / 2;
 800ef96:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800ef9a:	8823      	ldrh	r3, [r4, #0]
 800ef9c:	eb03 0161 	add.w	r1, r3, r1, asr #1
        break;
    case LV_FLEX_ALIGN_END:
        *gap = 0;
        *start_pos += max_size - content_size;
 800efa0:	8021      	strh	r1, [r4, #0]
       *start_pos += *gap;
       break;
   default:
       *gap = 0;
    }
}
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
        *gap = 0;
 800efa4:	2300      	movs	r3, #0
        *start_pos += max_size - content_size;
 800efa6:	1a89      	subs	r1, r1, r2
        *gap = 0;
 800efa8:	802b      	strh	r3, [r5, #0]
        *start_pos += max_size - content_size;
 800efaa:	8822      	ldrh	r2, [r4, #0]
 800efac:	4411      	add	r1, r2
 800efae:	e7f7      	b.n	800efa0 <place_content+0x30>
       *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 800efb0:	1a89      	subs	r1, r1, r2
 800efb2:	3b01      	subs	r3, #1
 800efb4:	b209      	sxth	r1, r1
 800efb6:	b21b      	sxth	r3, r3
 800efb8:	fb91 f1f3 	sdiv	r1, r1, r3
 800efbc:	8029      	strh	r1, [r5, #0]
       break;
 800efbe:	e7f0      	b.n	800efa2 <place_content+0x32>
       *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 800efc0:	1a89      	subs	r1, r1, r2
 800efc2:	b209      	sxth	r1, r1
 800efc4:	fb91 f3f3 	sdiv	r3, r1, r3
 800efc8:	8829      	ldrh	r1, [r5, #0]
 800efca:	440b      	add	r3, r1
 800efcc:	b21b      	sxth	r3, r3
 800efce:	802b      	strh	r3, [r5, #0]
       *start_pos += *gap / 2;
 800efd0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800efd4:	8822      	ldrh	r2, [r4, #0]
 800efd6:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800efda:	8023      	strh	r3, [r4, #0]
       break;
 800efdc:	e7e1      	b.n	800efa2 <place_content+0x32>
       *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 800efde:	1a89      	subs	r1, r1, r2
 800efe0:	3301      	adds	r3, #1
 800efe2:	b209      	sxth	r1, r1
 800efe4:	b21b      	sxth	r3, r3
 800efe6:	fb91 f1f3 	sdiv	r1, r1, r3
 800efea:	8029      	strh	r1, [r5, #0]
       *start_pos += *gap;
 800efec:	8823      	ldrh	r3, [r4, #0]
 800efee:	4419      	add	r1, r3
 800eff0:	e7d6      	b.n	800efa0 <place_content+0x30>
       *gap = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	802b      	strh	r3, [r5, #0]
}
 800eff6:	e7d4      	b.n	800efa2 <place_content+0x32>

0800eff8 <get_next_item.isra.0>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 800eff8:	6813      	ldr	r3, [r2, #0]
 800effa:	b151      	cbz	r1, 800f012 <get_next_item.isra.0+0x1a>
        (*item_id)--;
 800effc:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800effe:	2b00      	cmp	r3, #0
        (*item_id)--;
 800f000:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f002:	da01      	bge.n	800f008 <get_next_item.isra.0+0x10>
        else return NULL;
 800f004:	2000      	movs	r0, #0
 800f006:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f008:	6802      	ldr	r2, [r0, #0]
    } else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800f00a:	6812      	ldr	r2, [r2, #0]
 800f00c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 800f010:	4770      	bx	lr
        (*item_id)++;
 800f012:	3301      	adds	r3, #1
 800f014:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800f016:	6802      	ldr	r2, [r0, #0]
 800f018:	6851      	ldr	r1, [r2, #4]
 800f01a:	428b      	cmp	r3, r1
 800f01c:	dbf5      	blt.n	800f00a <get_next_item.isra.0+0x12>
 800f01e:	e7f1      	b.n	800f004 <get_next_item.isra.0+0xc>

0800f020 <find_track_end>:
{
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	b087      	sub	sp, #28
 800f026:	4607      	mov	r7, r0
 800f028:	460e      	mov	r6, r1
 800f02a:	4690      	mov	r8, r2
 800f02c:	9301      	str	r3, [sp, #4]
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f02e:	f241 0201 	movw	r2, #4097	; 0x1001
 800f032:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800f036:	2100      	movs	r1, #0
 800f038:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f03a:	9302      	str	r3, [sp, #8]
 800f03c:	f7f7 ffac 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f040:	f241 0204 	movw	r2, #4100	; 0x1004
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f044:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f046:	2100      	movs	r1, #0
 800f048:	4638      	mov	r0, r7
 800f04a:	f7f7 ffa5 	bl	8006f98 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800f04e:	78f3      	ldrb	r3, [r6, #3]
 800f050:	079a      	lsls	r2, r3, #30
 800f052:	d50b      	bpl.n	800f06c <find_track_end+0x4c>
 800f054:	f013 0f01 	tst.w	r3, #1
 800f058:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f05c:	d00e      	beq.n	800f07c <find_track_end+0x5c>
 800f05e:	b22d      	sxth	r5, r5
 800f060:	429d      	cmp	r5, r3
 800f062:	d106      	bne.n	800f072 <find_track_end+0x52>
        f->wrap = false;
 800f064:	78f3      	ldrb	r3, [r6, #3]
 800f066:	f36f 0341 	bfc	r3, #1, #1
 800f06a:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f06c:	78f3      	ldrb	r3, [r6, #3]
 800f06e:	07d9      	lsls	r1, r3, #31
 800f070:	d507      	bpl.n	800f082 <find_track_end+0x62>
 800f072:	4b72      	ldr	r3, [pc, #456]	; (800f23c <find_track_end+0x21c>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800f074:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 800f240 <find_track_end+0x220>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f078:	9300      	str	r3, [sp, #0]
 800f07a:	e006      	b.n	800f08a <find_track_end+0x6a>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800f07c:	b200      	sxth	r0, r0
 800f07e:	4298      	cmp	r0, r3
 800f080:	d0f0      	beq.n	800f064 <find_track_end+0x44>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f082:	4b6f      	ldr	r3, [pc, #444]	; (800f240 <find_track_end+0x220>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800f084:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800f23c <find_track_end+0x21c>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f088:	9300      	str	r3, [sp, #0]
    t->grow_item_cnt = 0;
 800f08a:	2300      	movs	r3, #0
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800f08c:	4641      	mov	r1, r8
    int32_t item_id = item_start_id;
 800f08e:	f8cd 8014 	str.w	r8, [sp, #20]
    t->grow_item_cnt = 0;
 800f092:	6123      	str	r3, [r4, #16]
    t->track_cross_size = 0;
 800f094:	6023      	str	r3, [r4, #0]
    t->track_fix_main_size = 0;
 800f096:	80a3      	strh	r3, [r4, #4]
    t->grow_dsc = NULL;
 800f098:	e9c4 3302 	strd	r3, r3, [r4, #8]
        item = lv_obj_get_child(cont, item_id);
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7f8 fac8 	bl	8007632 <lv_obj_get_child>
 800f0a2:	9b05      	ldr	r3, [sp, #20]
 800f0a4:	4605      	mov	r5, r0
    while(item) {
 800f0a6:	b370      	cbz	r0, 800f106 <find_track_end+0xe6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800f0a8:	4598      	cmp	r8, r3
 800f0aa:	d125      	bne.n	800f0f8 <find_track_end+0xd8>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800f0ac:	4965      	ldr	r1, [pc, #404]	; (800f244 <find_track_end+0x224>)
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f7f4 fca6 	bl	8003a00 <lv_obj_has_flag_any>
 800f0b4:	4682      	mov	sl, r0
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	f040 809f 	bne.w	800f1fa <find_track_end+0x1da>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800f0bc:	4b62      	ldr	r3, [pc, #392]	; (800f248 <find_track_end+0x228>)
 800f0be:	4601      	mov	r1, r0
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	881a      	ldrh	r2, [r3, #0]
 800f0c4:	f7f7 ff68 	bl	8006f98 <lv_obj_get_style_prop>
            if(grow_value) {
 800f0c8:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f0cc:	9003      	str	r0, [sp, #12]
 800f0ce:	f000 80a2 	beq.w	800f216 <find_track_end+0x1f6>
                t->track_fix_main_size += item_gap;
 800f0d2:	88a3      	ldrh	r3, [r4, #4]
 800f0d4:	9a02      	ldr	r2, [sp, #8]
                t->grow_item_cnt++;
 800f0d6:	6920      	ldr	r0, [r4, #16]
                t->track_fix_main_size += item_gap;
 800f0d8:	4413      	add	r3, r2
                t->grow_item_cnt++;
 800f0da:	3001      	adds	r0, #1
                t->track_fix_main_size += item_gap;
 800f0dc:	80a3      	strh	r3, [r4, #4]
                if(t->grow_dsc_calc) {
 800f0de:	7d23      	ldrb	r3, [r4, #20]
                t->grow_item_cnt++;
 800f0e0:	6120      	str	r0, [r4, #16]
                if(t->grow_dsc_calc) {
 800f0e2:	07da      	lsls	r2, r3, #31
 800f0e4:	d57c      	bpl.n	800f1e0 <find_track_end+0x1c0>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800f0e6:	2314      	movs	r3, #20
 800f0e8:	4358      	muls	r0, r3
 800f0ea:	f008 fafd 	bl	80176e8 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 800f0ee:	2314      	movs	r3, #20
 800f0f0:	4681      	mov	r9, r0
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d133      	bne.n	800f15e <find_track_end+0x13e>
 800f0f6:	e7fe      	b.n	800f0f6 <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800f0f8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	f7f4 fc78 	bl	80039f2 <lv_obj_has_flag>
 800f102:	2800      	cmp	r0, #0
 800f104:	d0d2      	beq.n	800f0ac <find_track_end+0x8c>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800f106:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	bfc2      	ittt	gt
 800f10e:	9a02      	ldrgt	r2, [sp, #8]
 800f110:	1a9b      	subgt	r3, r3, r2
 800f112:	80a3      	strhgt	r3, [r4, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	b913      	cbnz	r3, 800f11e <find_track_end+0xfe>
 800f118:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	9b01      	ldr	r3, [sp, #4]
 800f120:	8063      	strh	r3, [r4, #2]
    if(item && item_id == item_start_id) {
 800f122:	b1c5      	cbz	r5, 800f156 <find_track_end+0x136>
 800f124:	9b05      	ldr	r3, [sp, #20]
 800f126:	4598      	cmp	r8, r3
 800f128:	d115      	bne.n	800f156 <find_track_end+0x136>
        item = cont->spec_attr->children[item_id];
 800f12a:	4638      	mov	r0, r7
        get_next_item(cont, f->rev, &item_id);
 800f12c:	78f1      	ldrb	r1, [r6, #3]
 800f12e:	aa05      	add	r2, sp, #20
        item = cont->spec_attr->children[item_id];
 800f130:	f850 3f08 	ldr.w	r3, [r0, #8]!
        get_next_item(cont, f->rev, &item_id);
 800f134:	f3c1 0180 	ubfx	r1, r1, #2, #1
        item = cont->spec_attr->children[item_id];
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800f13e:	f7ff ff5b 	bl	800eff8 <get_next_item.isra.0>
        if(item) {
 800f142:	b145      	cbz	r5, 800f156 <find_track_end+0x136>
            t->track_cross_size = get_cross_size(item);
 800f144:	4628      	mov	r0, r5
 800f146:	47d8      	blx	fp
            t->track_main_size = get_main_size(item);
 800f148:	9b00      	ldr	r3, [sp, #0]
            t->track_cross_size = get_cross_size(item);
 800f14a:	8020      	strh	r0, [r4, #0]
            t->track_main_size = get_main_size(item);
 800f14c:	4628      	mov	r0, r5
 800f14e:	4798      	blx	r3
            t->item_cnt = 1;
 800f150:	2301      	movs	r3, #1
            t->track_main_size = get_main_size(item);
 800f152:	8060      	strh	r0, [r4, #2]
            t->item_cnt = 1;
 800f154:	60a3      	str	r3, [r4, #8]
}
 800f156:	9805      	ldr	r0, [sp, #20]
 800f158:	b007      	add	sp, #28
 800f15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 800f15e:	6922      	ldr	r2, [r4, #16]
 800f160:	68e1      	ldr	r1, [r4, #12]
 800f162:	435a      	muls	r2, r3
 800f164:	3a14      	subs	r2, #20
 800f166:	f008 f947 	bl	80173f8 <lv_memcpy>
                    lv_mem_buf_release(t->grow_dsc);
 800f16a:	68e0      	ldr	r0, [r4, #12]
 800f16c:	f008 f918 	bl	80173a0 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f170:	6922      	ldr	r2, [r4, #16]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f172:	78f1      	ldrb	r1, [r6, #3]
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f174:	2314      	movs	r3, #20
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800f176:	4628      	mov	r0, r5
 800f178:	fb03 9302 	mla	r3, r3, r2, r9
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f17c:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f180:	f843 5c14 	str.w	r5, [r3, #-20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800f184:	bf1a      	itte	ne
 800f186:	f241 0202 	movwne	r2, #4098	; 0x1002
 800f18a:	4651      	movne	r1, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800f18c:	f241 0205 	movweq	r2, #4101	; 0x1005
 800f190:	f7f7 ff02 	bl	8006f98 <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f194:	2214      	movs	r2, #20
 800f196:	6923      	ldr	r3, [r4, #16]
    return (lv_coord_t)v.num;
 800f198:	b200      	sxth	r0, r0
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f19a:	78f1      	ldrb	r1, [r6, #3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f19c:	fb02 9303 	mla	r3, r2, r3, r9
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f1a0:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f1a4:	f823 0c10 	strh.w	r0, [r3, #-16]
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f1a8:	4628      	mov	r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800f1aa:	bf16      	itet	ne
 800f1ac:	f241 0203 	movwne	r2, #4099	; 0x1003
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f1b0:	f241 0206 	movweq	r2, #4102	; 0x1006
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800f1b4:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f1b6:	f7f7 feef 	bl	8006f98 <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800f1be:	b200      	sxth	r0, r0
 800f1c0:	fb02 9303 	mla	r3, r2, r3, r9
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f1c4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f1c8:	f823 0c0e 	strh.w	r0, [r3, #-14]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f1cc:	f36f 0200 	bfc	r2, #0, #1
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800f1d0:	f89d 000c 	ldrb.w	r0, [sp, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f1d4:	f803 2c04 	strb.w	r2, [r3, #-4]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800f1d8:	f843 0c08 	str.w	r0, [r3, #-8]
                    t->grow_dsc = new_dsc;
 800f1dc:	f8c4 900c 	str.w	r9, [r4, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	47d8      	blx	fp
 800f1e4:	f9b4 3000 	ldrsh.w	r3, [r4]
 800f1e8:	4298      	cmp	r0, r3
 800f1ea:	dd02      	ble.n	800f1f2 <find_track_end+0x1d2>
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	47d8      	blx	fp
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	8023      	strh	r3, [r4, #0]
            t->item_cnt++;
 800f1f4:	68a3      	ldr	r3, [r4, #8]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	60a3      	str	r3, [r4, #8]
        item_id += f->rev ? -1 : +1;
 800f1fa:	78f3      	ldrb	r3, [r6, #3]
 800f1fc:	f013 0f04 	tst.w	r3, #4
 800f200:	9b05      	ldr	r3, [sp, #20]
 800f202:	bf14      	ite	ne
 800f204:	f04f 31ff 	movne.w	r1, #4294967295
 800f208:	2101      	moveq	r1, #1
 800f20a:	4419      	add	r1, r3
        if(item_id < 0) break;
 800f20c:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 800f20e:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800f210:	f6bf af44 	bge.w	800f09c <find_track_end+0x7c>
 800f214:	e777      	b.n	800f106 <find_track_end+0xe6>
                lv_coord_t item_size = get_main_size(item);
 800f216:	9b00      	ldr	r3, [sp, #0]
 800f218:	4628      	mov	r0, r5
 800f21a:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800f21c:	78f3      	ldrb	r3, [r6, #3]
 800f21e:	079b      	lsls	r3, r3, #30
 800f220:	d506      	bpl.n	800f230 <find_track_end+0x210>
 800f222:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f226:	9a01      	ldr	r2, [sp, #4]
 800f228:	4403      	add	r3, r0
 800f22a:	4293      	cmp	r3, r2
 800f22c:	f73f af6b 	bgt.w	800f106 <find_track_end+0xe6>
                t->track_fix_main_size += item_size + item_gap;
 800f230:	88a3      	ldrh	r3, [r4, #4]
 800f232:	9a02      	ldr	r2, [sp, #8]
 800f234:	4413      	add	r3, r2
 800f236:	4418      	add	r0, r3
 800f238:	80a0      	strh	r0, [r4, #4]
 800f23a:	e7d1      	b.n	800f1e0 <find_track_end+0x1c0>
 800f23c:	08004a9f 	.word	0x08004a9f
 800f240:	08004aab 	.word	0x08004aab
 800f244:	00018001 	.word	0x00018001
 800f248:	2000b4aa 	.word	0x2000b4aa

0800f24c <flex_update>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800f24c:	4ba3      	ldr	r3, [pc, #652]	; (800f4dc <flex_update+0x290>)
 800f24e:	2100      	movs	r1, #0
{
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	881a      	ldrh	r2, [r3, #0]
 800f256:	4604      	mov	r4, r0
 800f258:	ed2d 8b02 	vpush	{d8}
 800f25c:	b09f      	sub	sp, #124	; 0x7c
 800f25e:	f7f7 fe9b 	bl	8006f98 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800f262:	43c3      	mvns	r3, r0
 800f264:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800f268:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800f26c:	f003 0301 	and.w	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800f270:	2100      	movs	r1, #0
 800f272:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800f276:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800f27a:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800f27e:	f022 0207 	bic.w	r2, r2, #7
 800f282:	4620      	mov	r0, r4
 800f284:	4313      	orrs	r3, r2
 800f286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f28a:	4b95      	ldr	r3, [pc, #596]	; (800f4e0 <flex_update+0x294>)
 800f28c:	881a      	ldrh	r2, [r3, #0]
 800f28e:	f7f7 fe83 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800f292:	4b94      	ldr	r3, [pc, #592]	; (800f4e4 <flex_update+0x298>)
 800f294:	2100      	movs	r1, #0
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800f296:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
 800f29a:	881a      	ldrh	r2, [r3, #0]
 800f29c:	4620      	mov	r0, r4
 800f29e:	f7f7 fe7b 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800f2a2:	4b91      	ldr	r3, [pc, #580]	; (800f4e8 <flex_update+0x29c>)
 800f2a4:	2100      	movs	r1, #0
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800f2a6:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
 800f2aa:	881a      	ldrh	r2, [r3, #0]
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f7f7 fe73 	bl	8006f98 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800f2b2:	f241 426a 	movw	r2, #5226	; 0x146a
 800f2b6:	2100      	movs	r1, #0
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800f2b8:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7f7 fe6b 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 800f2c2:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
    return (lv_base_dir_t)v.num;
 800f2c6:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f011 0101 	ands.w	r1, r1, #1
    return (lv_base_dir_t)v.num;
 800f2ce:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800f2d0:	bf0e      	itee	eq
 800f2d2:	f241 0215 	movweq	r2, #4117	; 0x1015
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f2d6:	f241 0214 	movwne	r2, #4116	; 0x1014
 800f2da:	2100      	movne	r1, #0
 800f2dc:	f7f7 fe5c 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 800f2e0:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
    return (lv_coord_t)v.num;
 800f2e4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f011 0101 	ands.w	r1, r1, #1
    return (lv_coord_t)v.num;
 800f2ec:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800f2ee:	bf1a      	itte	ne
 800f2f0:	f241 0215 	movwne	r2, #4117	; 0x1015
 800f2f4:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f2f6:	f241 0214 	movweq	r2, #4116	; 0x1014
 800f2fa:	f7f7 fe4d 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f2fe:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800f300:	4620      	mov	r0, r4
 800f302:	9302      	str	r3, [sp, #8]
 800f304:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f308:	07dd      	lsls	r5, r3, #31
 800f30a:	d559      	bpl.n	800f3c0 <flex_update+0x174>
 800f30c:	f7f5 fbd3 	bl	8004ab6 <lv_obj_get_content_width>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800f310:	f241 0232 	movw	r2, #4146	; 0x1032
 800f314:	2100      	movs	r1, #0
 800f316:	ee08 0a10 	vmov	s16, r0
 800f31a:	4620      	mov	r0, r4
 800f31c:	f7f7 fe3c 	bl	8006f98 <lv_obj_get_style_prop>
 800f320:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800f322:	f241 0210 	movw	r2, #4112	; 0x1010
 800f326:	2100      	movs	r1, #0
 800f328:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_y(cont);
 800f32a:	8ae6      	ldrh	r6, [r4, #22]
 800f32c:	f7f7 fe34 	bl	8006f98 <lv_obj_get_style_prop>
 800f330:	fa10 f085 	uxtah	r0, r0, r5
 800f334:	b2af      	uxth	r7, r5
 800f336:	4406      	add	r6, r0
 800f338:	4620      	mov	r0, r4
 800f33a:	f7f6 fbf1 	bl	8005b20 <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800f33e:	f241 0212 	movw	r2, #4114	; 0x1012
 800f342:	b2b6      	uxth	r6, r6
 800f344:	2100      	movs	r1, #0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f346:	8aa5      	ldrh	r5, [r4, #20]
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_y(cont);
 800f348:	1a30      	subs	r0, r6, r0
 800f34a:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 800f34e:	4620      	mov	r0, r4
 800f350:	f7f7 fe22 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f354:	4438      	add	r0, r7
 800f356:	4405      	add	r5, r0
 800f358:	4620      	mov	r0, r4
 800f35a:	f7f6 fbcf 	bl	8005afc <lv_obj_get_scroll_x>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800f35e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f362:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f364:	f241 0201 	movw	r2, #4097	; 0x1001
 800f368:	2100      	movs	r1, #0
    lv_flex_align_t track_cross_place = f.track_place;
 800f36a:	f89d 7052 	ldrb.w	r7, [sp, #82]	; 0x52
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f36e:	1a28      	subs	r0, r5, r0
 800f370:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800f374:	07d8      	lsls	r0, r3, #31
 800f376:	4620      	mov	r0, r4
 800f378:	bf54      	ite	pl
 800f37a:	ad12      	addpl	r5, sp, #72	; 0x48
 800f37c:	f10d 0546 	addmi.w	r5, sp, #70	; 0x46
 800f380:	f7f7 fe0a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f384:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800f388:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f38a:	2100      	movs	r1, #0
 800f38c:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800f38e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f390:	f7f7 fe02 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f394:	b203      	sxth	r3, r0
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800f396:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 800f39a:	f010 0f01 	tst.w	r0, #1
 800f39e:	9308      	str	r3, [sp, #32]
 800f3a0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f3a4:	d00f      	beq.n	800f3c6 <flex_update+0x17a>
 800f3a6:	9a08      	ldr	r2, [sp, #32]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d103      	bne.n	800f3b4 <flex_update+0x168>
 800f3ac:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f3b0:	0799      	lsls	r1, r3, #30
 800f3b2:	d547      	bpl.n	800f444 <flex_update+0x1f8>
    lv_coord_t gap = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800f3ba:	b9a7      	cbnz	r7, 800f3e6 <flex_update+0x19a>
    lv_coord_t total_track_cross_size = 0;
 800f3bc:	463e      	mov	r6, r7
 800f3be:	e044      	b.n	800f44a <flex_update+0x1fe>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800f3c0:	f7f5 fb93 	bl	8004aea <lv_obj_get_content_height>
 800f3c4:	e7a4      	b.n	800f310 <flex_update+0xc4>
    	(!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0))
 800f3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d104      	bne.n	800f3d6 <flex_update+0x18a>
 800f3cc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f3d0:	075a      	lsls	r2, r3, #29
 800f3d2:	f140 82b5 	bpl.w	800f940 <flex_update+0x6f4>
    if(rtl && !f.row) {
 800f3d6:	9b03      	ldr	r3, [sp, #12]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d1eb      	bne.n	800f3b4 <flex_update+0x168>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800f3dc:	bb87      	cbnz	r7, 800f440 <flex_update+0x1f4>
    lv_coord_t gap = 0;
 800f3de:	2300      	movs	r3, #0
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800f3e0:	2701      	movs	r7, #1
    lv_coord_t gap = 0;
 800f3e2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f3e6:	68a3      	ldr	r3, [r4, #8]
 800f3e8:	f010 0004 	ands.w	r0, r0, #4
 800f3ec:	f04f 0800 	mov.w	r8, #0
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f3f0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800f3f4:	685a      	ldr	r2, [r3, #4]
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f3f6:	bf08      	it	eq
 800f3f8:	4602      	moveq	r2, r0
 800f3fa:	4646      	mov	r6, r8
 800f3fc:	bf18      	it	ne
 800f3fe:	f102 32ff 	addne.w	r2, r2, #4294967295
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800f402:	68a3      	ldr	r3, [r4, #8]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	4293      	cmp	r3, r2
 800f408:	dd01      	ble.n	800f40e <flex_update+0x1c2>
 800f40a:	2a00      	cmp	r2, #0
 800f40c:	da49      	bge.n	800f4a2 <flex_update+0x256>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800f40e:	f1b8 0f00 	cmp.w	r8, #0
 800f412:	d002      	beq.n	800f41a <flex_update+0x1ce>
 800f414:	9b04      	ldr	r3, [sp, #16]
 800f416:	1af6      	subs	r6, r6, r3
 800f418:	b236      	sxth	r6, r6
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800f41a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f41e:	4620      	mov	r0, r4
 800f420:	07db      	lsls	r3, r3, #31
 800f422:	d558      	bpl.n	800f4d6 <flex_update+0x28a>
 800f424:	f7f5 fb61 	bl	8004aea <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800f428:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
 800f42c:	4601      	mov	r1, r0
 800f42e:	4632      	mov	r2, r6
 800f430:	4638      	mov	r0, r7
 800f432:	e9cd 5300 	strd	r5, r3, [sp]
 800f436:	fa0f f388 	sxth.w	r3, r8
 800f43a:	f7ff fd99 	bl	800ef70 <place_content>
 800f43e:	e004      	b.n	800f44a <flex_update+0x1fe>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800f440:	2f01      	cmp	r7, #1
 800f442:	d1b7      	bne.n	800f3b4 <flex_update+0x168>
    lv_coord_t gap = 0;
 800f444:	2600      	movs	r6, #0
 800f446:	f8ad 604a 	strh.w	r6, [sp, #74]	; 0x4a
    track_first_item =  f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f44a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f44e:	68a2      	ldr	r2, [r4, #8]
 800f450:	f013 0704 	ands.w	r7, r3, #4
 800f454:	6852      	ldr	r2, [r2, #4]
 800f456:	bf18      	it	ne
 800f458:	f102 37ff 	addne.w	r7, r2, #4294967295
    if(rtl && !f.row) {
 800f45c:	9a03      	ldr	r2, [sp, #12]
 800f45e:	2a01      	cmp	r2, #1
 800f460:	d104      	bne.n	800f46c <flex_update+0x220>
 800f462:	07d9      	lsls	r1, r3, #31
 800f464:	d402      	bmi.n	800f46c <flex_update+0x220>
         *cross_pos += total_track_cross_size;
 800f466:	882b      	ldrh	r3, [r5, #0]
 800f468:	441e      	add	r6, r3
 800f46a:	802e      	strh	r6, [r5, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800f46c:	68a3      	ldr	r3, [r4, #8]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	42bb      	cmp	r3, r7
 800f472:	dd01      	ble.n	800f478 <flex_update+0x22c>
 800f474:	2f00      	cmp	r7, #0
 800f476:	da39      	bge.n	800f4ec <flex_update+0x2a0>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800f478:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f47e:	429a      	cmp	r2, r3
 800f480:	d002      	beq.n	800f488 <flex_update+0x23c>
 800f482:	9a08      	ldr	r2, [sp, #32]
 800f484:	429a      	cmp	r2, r3
 800f486:	d102      	bne.n	800f48e <flex_update+0x242>
        lv_obj_refr_size(cont);
 800f488:	4620      	mov	r0, r4
 800f48a:	f7f5 fed3 	bl	8005234 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800f48e:	2200      	movs	r2, #0
 800f490:	2125      	movs	r1, #37	; 0x25
 800f492:	4620      	mov	r0, r4
 800f494:	f7f2 fb30 	bl	8001af8 <lv_event_send>
}
 800f498:	b01f      	add	sp, #124	; 0x7c
 800f49a:	ecbd 8b02 	vpop	{d8}
 800f49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            t.grow_dsc_calc = 0;
 800f4a2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f4a6:	a914      	add	r1, sp, #80	; 0x50
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f8cd 9004 	str.w	r9, [sp, #4]
            t.grow_dsc_calc = 0;
 800f4ae:	f36f 0300 	bfc	r3, #0, #1
            track_cnt++;
 800f4b2:	f108 0801 	add.w	r8, r8, #1
            t.grow_dsc_calc = 0;
 800f4b6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f4ba:	9b02      	ldr	r3, [sp, #8]
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	ee18 3a10 	vmov	r3, s16
 800f4c2:	f7ff fdad 	bl	800f020 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 800f4c6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800f4ca:	9904      	ldr	r1, [sp, #16]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f4cc:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800f4ce:	440b      	add	r3, r1
 800f4d0:	441e      	add	r6, r3
 800f4d2:	b236      	sxth	r6, r6
            track_first_item = next_track_first_item;
 800f4d4:	e795      	b.n	800f402 <flex_update+0x1b6>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800f4d6:	f7f5 faee 	bl	8004ab6 <lv_obj_get_content_width>
 800f4da:	e7a5      	b.n	800f428 <flex_update+0x1dc>
 800f4dc:	2000b4a8 	.word	0x2000b4a8
 800f4e0:	2000b4ac 	.word	0x2000b4ac
 800f4e4:	2000b4a4 	.word	0x2000b4a4
 800f4e8:	2000b4a6 	.word	0x2000b4a6
        t.grow_dsc_calc = 1;
 800f4ec:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f4f0:	463a      	mov	r2, r7
 800f4f2:	a914      	add	r1, sp, #80	; 0x50
 800f4f4:	4620      	mov	r0, r4
        t.grow_dsc_calc = 1;
 800f4f6:	f043 0301 	orr.w	r3, r3, #1
 800f4fa:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f4fe:	ab18      	add	r3, sp, #96	; 0x60
 800f500:	9301      	str	r3, [sp, #4]
 800f502:	9b02      	ldr	r3, [sp, #8]
 800f504:	9300      	str	r3, [sp, #0]
 800f506:	ee18 3a10 	vmov	r3, s16
 800f50a:	f7ff fd89 	bl	800f020 <find_track_end>
        if(rtl && !f.row) {
 800f50e:	9b03      	ldr	r3, [sp, #12]
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f510:	9007      	str	r0, [sp, #28]
        if(rtl && !f.row) {
 800f512:	2b01      	cmp	r3, #1
 800f514:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f518:	d106      	bne.n	800f528 <flex_update+0x2dc>
 800f51a:	07da      	lsls	r2, r3, #31
            *cross_pos -= t.track_cross_size;
 800f51c:	bf5f      	itttt	pl
 800f51e:	882a      	ldrhpl	r2, [r5, #0]
 800f520:	f8bd 1060 	ldrhpl.w	r1, [sp, #96]	; 0x60
 800f524:	1a52      	subpl	r2, r2, r1
 800f526:	802a      	strhpl	r2, [r5, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f528:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800f52c:	f003 0301 	and.w	r3, r3, #1
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f530:	4969      	ldr	r1, [pc, #420]	; (800f6d8 <flex_update+0x48c>)
 800f532:	f04f 0e14 	mov.w	lr, #20
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f536:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f538:	2b00      	cmp	r3, #0
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f53a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f53e:	bf18      	it	ne
 800f540:	460b      	movne	r3, r1
 800f542:	4866      	ldr	r0, [pc, #408]	; (800f6dc <flex_update+0x490>)
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800f544:	920c      	str	r2, [sp, #48]	; 0x30
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f546:	4a66      	ldr	r2, [pc, #408]	; (800f6e0 <flex_update+0x494>)
 800f548:	9715      	str	r7, [sp, #84]	; 0x54
 800f54a:	bf08      	it	eq
 800f54c:	4613      	moveq	r3, r2
 800f54e:	9305      	str	r3, [sp, #20]
 800f550:	4b64      	ldr	r3, [pc, #400]	; (800f6e4 <flex_update+0x498>)
 800f552:	bf08      	it	eq
 800f554:	4603      	moveq	r3, r0
 800f556:	930d      	str	r3, [sp, #52]	; 0x34
 800f558:	bf0c      	ite	eq
 800f55a:	460b      	moveq	r3, r1
 800f55c:	4613      	movne	r3, r2
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800f55e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800f562:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800f564:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800f568:	1ac9      	subs	r1, r1, r3
 800f56a:	e9dd a31b 	ldrd	sl, r3, [sp, #108]	; 0x6c
 800f56e:	b209      	sxth	r1, r1
 800f570:	fb0e ae03 	mla	lr, lr, r3, sl
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f574:	4650      	mov	r0, sl
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800f576:	460f      	mov	r7, r1
        lv_coord_t grow_value_sum = 0;
 800f578:	f04f 0c00 	mov.w	ip, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f57c:	4586      	cmp	lr, r0
 800f57e:	d153      	bne.n	800f628 <flex_update+0x3dc>
 800f580:	4653      	mov	r3, sl
        grow_reiterate = false;
 800f582:	2600      	movs	r6, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f584:	459e      	cmp	lr, r3
 800f586:	d15e      	bne.n	800f646 <flex_update+0x3fa>
    while(grow_reiterate) {
 800f588:	2e00      	cmp	r6, #0
 800f58a:	d1f3      	bne.n	800f574 <flex_update+0x328>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800f58c:	f241 426a 	movw	r2, #5226	; 0x146a
 800f590:	4631      	mov	r1, r6
 800f592:	4620      	mov	r0, r4
 800f594:	f7f7 fd00 	bl	8006f98 <lv_obj_get_style_prop>
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800f598:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    return (lv_base_dir_t)v.num;
 800f59c:	b2c3      	uxtb	r3, r0
 800f59e:	ee18 1a10 	vmov	r1, s16
 800f5a2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800f5a6:	9306      	str	r3, [sp, #24]
 800f5a8:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
    lv_coord_t main_pos = 0;
 800f5ac:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800f5b0:	9301      	str	r3, [sp, #4]
 800f5b2:	ab13      	add	r3, sp, #76	; 0x4c
    lv_coord_t place_gap = 0;
 800f5b4:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800f5be:	f7ff fcd7 	bl	800ef70 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800f5c2:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f5c6:	07da      	lsls	r2, r3, #31
 800f5c8:	d50a      	bpl.n	800f5e0 <flex_update+0x394>
 800f5ca:	9b06      	ldr	r3, [sp, #24]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d107      	bne.n	800f5e0 <flex_update+0x394>
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f7f5 fa70 	bl	8004ab6 <lv_obj_get_content_width>
 800f5d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f5da:	4418      	add	r0, r3
 800f5dc:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800f5e0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f7f8 f825 	bl	8007632 <lv_obj_get_child>
 800f5e8:	f104 0a08 	add.w	sl, r4, #8
 800f5ec:	4606      	mov	r6, r0
    while(item && item_first_id != item_last_id) {
 800f5ee:	b11e      	cbz	r6, 800f5f8 <flex_update+0x3ac>
 800f5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5f2:	9a07      	ldr	r2, [sp, #28]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d14e      	bne.n	800f696 <flex_update+0x44a>
        lv_mem_buf_release(t.grow_dsc);
 800f5f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f5fa:	f007 fed1 	bl	80173a0 <lv_mem_buf_release>
        if(rtl && !f.row) {
 800f5fe:	9a03      	ldr	r2, [sp, #12]
 800f600:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f604:	2a01      	cmp	r2, #1
 800f606:	f040 8192 	bne.w	800f92e <flex_update+0x6e2>
 800f60a:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 800f60e:	f9b5 2000 	ldrsh.w	r2, [r5]
 800f612:	07c0      	lsls	r0, r0, #31
 800f614:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 800f618:	f100 8189 	bmi.w	800f92e <flex_update+0x6e2>
            *cross_pos -= gap + track_gap;
 800f61c:	440b      	add	r3, r1
 800f61e:	1ad3      	subs	r3, r2, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 800f620:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f622:	9f07      	ldr	r7, [sp, #28]
 800f624:	802b      	strh	r3, [r5, #0]
 800f626:	e721      	b.n	800f46c <flex_update+0x220>
            if(t->grow_dsc[i].clamped == 0) {
 800f628:	7c03      	ldrb	r3, [r0, #16]
 800f62a:	3014      	adds	r0, #20
 800f62c:	07de      	lsls	r6, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 800f62e:	bf55      	itete	pl
 800f630:	f850 3c08 	ldrpl.w	r3, [r0, #-8]
                grow_max_size -= t->grow_dsc[i].final_size;
 800f634:	f830 2c0c 	ldrhmi.w	r2, [r0, #-12]
                grow_value_sum += t->grow_dsc[i].grow_value;
 800f638:	449c      	addpl	ip, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 800f63a:	1abf      	submi	r7, r7, r2
                grow_value_sum += t->grow_dsc[i].grow_value;
 800f63c:	bf54      	ite	pl
 800f63e:	fa0f fc8c 	sxthpl.w	ip, ip
                grow_max_size -= t->grow_dsc[i].final_size;
 800f642:	b23f      	sxthmi	r7, r7
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f644:	e79a      	b.n	800f57c <flex_update+0x330>
            if(t->grow_dsc[i].clamped == 0) {
 800f646:	f893 9010 	ldrb.w	r9, [r3, #16]
 800f64a:	f019 0f01 	tst.w	r9, #1
 800f64e:	d120      	bne.n	800f692 <flex_update+0x446>
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800f650:	f8b3 800c 	ldrh.w	r8, [r3, #12]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800f654:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f658:	f9b3 b004 	ldrsh.w	fp, [r3, #4]
                grow_unit = grow_max_size / grow_value_sum;
 800f65c:	fb97 f0fc 	sdiv	r0, r7, ip
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800f660:	fb10 f008 	smulbb	r0, r0, r8
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800f664:	ebac 0c08 	sub.w	ip, ip, r8
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800f668:	b200      	sxth	r0, r0
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800f66a:	fa0f fc8c 	sxth.w	ip, ip
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800f66e:	4282      	cmp	r2, r0
 800f670:	bfa8      	it	ge
 800f672:	4602      	movge	r2, r0
 800f674:	455a      	cmp	r2, fp
 800f676:	bfb8      	it	lt
 800f678:	465a      	movlt	r2, fp
                if(size_clamp != size) {
 800f67a:	4290      	cmp	r0, r2
                t->grow_dsc[i].final_size = size_clamp;
 800f67c:	811a      	strh	r2, [r3, #8]
                grow_max_size  -= t->grow_dsc[i].final_size;
 800f67e:	eba7 0202 	sub.w	r2, r7, r2
                    t->grow_dsc[i].clamped = 1;
 800f682:	bf1c      	itt	ne
 800f684:	f049 0901 	orrne.w	r9, r9, #1
                    grow_reiterate = true;
 800f688:	2601      	movne	r6, #1
                grow_max_size  -= t->grow_dsc[i].final_size;
 800f68a:	b217      	sxth	r7, r2
                    t->grow_dsc[i].clamped = 1;
 800f68c:	bf18      	it	ne
 800f68e:	f883 9010 	strbne.w	r9, [r3, #16]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800f692:	3314      	adds	r3, #20
 800f694:	e776      	b.n	800f584 <flex_update+0x338>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800f696:	4914      	ldr	r1, [pc, #80]	; (800f6e8 <flex_update+0x49c>)
 800f698:	4630      	mov	r0, r6
 800f69a:	f7f4 f9b1 	bl	8003a00 <lv_obj_has_flag_any>
 800f69e:	4607      	mov	r7, r0
 800f6a0:	b148      	cbz	r0, 800f6b6 <flex_update+0x46a>
        item = get_next_item(cont, f->rev, &item_first_id);
 800f6a2:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 800f6a6:	aa15      	add	r2, sp, #84	; 0x54
 800f6a8:	4650      	mov	r0, sl
 800f6aa:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800f6ae:	f7ff fca3 	bl	800eff8 <get_next_item.isra.0>
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	e79b      	b.n	800f5ee <flex_update+0x3a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800f6b6:	4b0d      	ldr	r3, [pc, #52]	; (800f6ec <flex_update+0x4a0>)
 800f6b8:	4601      	mov	r1, r0
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	881a      	ldrh	r2, [r3, #0]
 800f6be:	f7f7 fc6b 	bl	8006f98 <lv_obj_get_style_prop>
        if(grow_size) {
 800f6c2:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f6c6:	f000 8112 	beq.w	800f8ee <flex_update+0x6a2>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 800f6d0:	4290      	cmp	r0, r2
 800f6d2:	d10d      	bne.n	800f6f0 <flex_update+0x4a4>
            lv_coord_t s = 0;
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	e013      	b.n	800f700 <flex_update+0x4b4>
 800f6d8:	0800ef59 	.word	0x0800ef59
 800f6dc:	08016a81 	.word	0x08016a81
 800f6e0:	0800ef65 	.word	0x0800ef65
 800f6e4:	08016a77 	.word	0x08016a77
 800f6e8:	00018001 	.word	0x00018001
 800f6ec:	2000b4aa 	.word	0x2000b4aa
                if(t->grow_dsc[i].item == item) {
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	f853 7b14 	ldr.w	r7, [r3], #20
 800f6f6:	42be      	cmp	r6, r7
 800f6f8:	f040 80f7 	bne.w	800f8ea <flex_update+0x69e>
                    s = t->grow_dsc[i].final_size;
 800f6fc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
    dest->x1 = src->x1;
 800f700:	8ab3      	ldrh	r3, [r6, #20]
            lv_area_copy(&old_coords, &item->coords);
 800f702:	f106 0714 	add.w	r7, r6, #20
 800f706:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            area_set_main_size(&item->coords, s);
 800f70a:	4638      	mov	r0, r7
    dest->y1 = src->y1;
 800f70c:	8af3      	ldrh	r3, [r6, #22]
 800f70e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    dest->x2 = src->x2;
 800f712:	8b33      	ldrh	r3, [r6, #24]
 800f714:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y2 = src->y2;
 800f718:	8b73      	ldrh	r3, [r6, #26]
 800f71a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 800f71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f720:	4798      	blx	r3
            if(f->row) item->w_layout = 1;
 800f722:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
            if(area_get_main_size(&old_coords) != area_get_main_size(&item->coords)) {
 800f726:	a816      	add	r0, sp, #88	; 0x58
            if(f->row) item->w_layout = 1;
 800f728:	f013 0f01 	tst.w	r3, #1
 800f72c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800f730:	bf14      	ite	ne
 800f732:	f043 0304 	orrne.w	r3, r3, #4
            else item->h_layout = 1;
 800f736:	f043 0302 	orreq.w	r3, r3, #2
 800f73a:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
            if(area_get_main_size(&old_coords) != area_get_main_size(&item->coords)) {
 800f73e:	9b05      	ldr	r3, [sp, #20]
 800f740:	4798      	blx	r3
 800f742:	4680      	mov	r8, r0
 800f744:	9b05      	ldr	r3, [sp, #20]
 800f746:	4638      	mov	r0, r7
 800f748:	4798      	blx	r3
 800f74a:	4580      	cmp	r8, r0
 800f74c:	d011      	beq.n	800f772 <flex_update+0x526>
                lv_obj_invalidate(item);
 800f74e:	4630      	mov	r0, r6
 800f750:	f7f5 fafa 	bl	8004d48 <lv_obj_invalidate>
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800f754:	aa16      	add	r2, sp, #88	; 0x58
 800f756:	2123      	movs	r1, #35	; 0x23
 800f758:	4630      	mov	r0, r6
 800f75a:	f7f2 f9cd 	bl	8001af8 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800f75e:	4630      	mov	r0, r6
 800f760:	f7f7 ff64 	bl	800762c <lv_obj_get_parent>
 800f764:	4632      	mov	r2, r6
 800f766:	2122      	movs	r1, #34	; 0x22
 800f768:	f7f2 f9c6 	bl	8001af8 <lv_event_send>
                lv_obj_invalidate(item);
 800f76c:	4630      	mov	r0, r6
 800f76e:	f7f5 faeb 	bl	8004d48 <lv_obj_invalidate>
        switch(f->cross_place) {
 800f772:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 800f776:	2b01      	cmp	r3, #1
 800f778:	f000 80c0 	beq.w	800f8fc <flex_update+0x6b0>
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	f040 80c7 	bne.w	800f910 <flex_update+0x6c4>
            cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800f782:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 800f786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f788:	3001      	adds	r0, #1
 800f78a:	f020 0801 	bic.w	r8, r0, #1
 800f78e:	f106 0014 	add.w	r0, r6, #20
 800f792:	4798      	blx	r3
 800f794:	eba8 0000 	sub.w	r0, r8, r0
 800f798:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f79c:	f340 074f 	sbfx	r7, r0, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800f7a0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f7a4:	07db      	lsls	r3, r3, #31
 800f7a6:	d50b      	bpl.n	800f7c0 <flex_update+0x574>
 800f7a8:	9b06      	ldr	r3, [sp, #24]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d108      	bne.n	800f7c0 <flex_update+0x574>
 800f7ae:	9b05      	ldr	r3, [sp, #20]
 800f7b0:	f106 0014 	add.w	r0, r6, #20
 800f7b4:	4798      	blx	r3
 800f7b6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f7ba:	1a18      	subs	r0, r3, r0
 800f7bc:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800f7c0:	f243 020c 	movw	r2, #12300	; 0x300c
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	f7f7 fbe6 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800f7cc:	f243 020d 	movw	r2, #12301	; 0x300d
 800f7d0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800f7d2:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800f7d4:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7f7 fbdd 	bl	8006f98 <lv_obj_get_style_prop>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800f7de:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
    return (lv_coord_t)v.num;
 800f7e2:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800f7e4:	4680      	mov	r8, r0
        lv_coord_t w = lv_obj_get_width(item);
 800f7e6:	4630      	mov	r0, r6
    return (lv_coord_t)v.num;
 800f7e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7ea:	f7f5 f958 	bl	8004a9e <lv_obj_get_width>
 800f7ee:	900e      	str	r0, [sp, #56]	; 0x38
        lv_coord_t h = lv_obj_get_height(item);
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f7f5 f95a 	bl	8004aaa <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800f7f6:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800f7fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f7fe:	d111      	bne.n	800f824 <flex_update+0x5d8>
 800f800:	f42b 41c0 	bic.w	r1, fp, #24576	; 0x6000
 800f804:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800f808:	dc0c      	bgt.n	800f824 <flex_update+0x5d8>
 800f80a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800f80e:	468b      	mov	fp, r1
 800f810:	bfc8      	it	gt
 800f812:	f5c1 7b7a 	rsbgt	fp, r1, #1000	; 0x3e8
 800f816:	fb0b fb02 	mul.w	fp, fp, r2
 800f81a:	2264      	movs	r2, #100	; 0x64
 800f81c:	fb9b fbf2 	sdiv	fp, fp, r2
 800f820:	fa0f fb8b 	sxth.w	fp, fp
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800f824:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800f828:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800f82c:	d10f      	bne.n	800f84e <flex_update+0x602>
 800f82e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800f832:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800f836:	dc0a      	bgt.n	800f84e <flex_update+0x602>
 800f838:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800f83c:	f04f 0364 	mov.w	r3, #100	; 0x64
 800f840:	bfc8      	it	gt
 800f842:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800f846:	4350      	muls	r0, r2
 800f848:	fb90 f3f3 	sdiv	r3, r0, r3
 800f84c:	b21b      	sxth	r3, r3
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800f84e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f850:	8ab1      	ldrh	r1, [r6, #20]
        diff_x += f->row ? main_pos : cross_pos;
 800f852:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800f856:	1a51      	subs	r1, r2, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800f858:	8af2      	ldrh	r2, [r6, #22]
        diff_x += f->row ? main_pos : cross_pos;
 800f85a:	f010 0001 	ands.w	r0, r0, #1
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800f85e:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800f860:	990c      	ldr	r1, [sp, #48]	; 0x30
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800f862:	fa1f fb8b 	uxth.w	fp, fp
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800f866:	eba1 0202 	sub.w	r2, r1, r2
        diff_x += f->row ? main_pos : cross_pos;
 800f86a:	bf14      	ite	ne
 800f86c:	f8bd 104c 	ldrhne.w	r1, [sp, #76]	; 0x4c
 800f870:	b2b9      	uxtheq	r1, r7
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800f872:	4413      	add	r3, r2
        diff_x += f->row ? main_pos : cross_pos;
 800f874:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800f876:	b29b      	uxth	r3, r3
        diff_x += f->row ? main_pos : cross_pos;
 800f878:	fa1f fb8b 	uxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d049      	beq.n	800f914 <flex_update+0x6c8>
 800f880:	b2bf      	uxth	r7, r7
 800f882:	441f      	add	r7, r3
 800f884:	b2bf      	uxth	r7, r7
        if(diff_x || diff_y) {
 800f886:	ea5b 0307 	orrs.w	r3, fp, r7
 800f88a:	d018      	beq.n	800f8be <flex_update+0x672>
            lv_obj_invalidate(item);
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7f5 fa5b 	bl	8004d48 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800f892:	8ab3      	ldrh	r3, [r6, #20]
            lv_obj_invalidate(item);
 800f894:	4630      	mov	r0, r6
            item->coords.x1 += diff_x;
 800f896:	445b      	add	r3, fp
 800f898:	82b3      	strh	r3, [r6, #20]
            item->coords.x2 += diff_x;
 800f89a:	8b33      	ldrh	r3, [r6, #24]
 800f89c:	445b      	add	r3, fp
 800f89e:	8333      	strh	r3, [r6, #24]
            item->coords.y1 += diff_y;
 800f8a0:	8af3      	ldrh	r3, [r6, #22]
 800f8a2:	443b      	add	r3, r7
 800f8a4:	82f3      	strh	r3, [r6, #22]
            item->coords.y2 += diff_y;
 800f8a6:	8b73      	ldrh	r3, [r6, #26]
 800f8a8:	443b      	add	r3, r7
 800f8aa:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(item);
 800f8ac:	f7f5 fa4c 	bl	8004d48 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, true);
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	b23a      	sxth	r2, r7
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	fa0f f18b 	sxth.w	r1, fp
 800f8ba:	f7f5 f99c 	bl	8004bf6 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800f8be:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f8c2:	07df      	lsls	r7, r3, #31
 800f8c4:	d502      	bpl.n	800f8cc <flex_update+0x680>
 800f8c6:	9b06      	ldr	r3, [sp, #24]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d026      	beq.n	800f91a <flex_update+0x6ce>
 800f8cc:	9b05      	ldr	r3, [sp, #20]
 800f8ce:	f106 0014 	add.w	r0, r6, #20
 800f8d2:	4798      	blx	r3
 800f8d4:	9b02      	ldr	r3, [sp, #8]
 800f8d6:	4418      	add	r0, r3
 800f8d8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800f8dc:	4418      	add	r0, r3
 800f8de:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f8e2:	4418      	add	r0, r3
 800f8e4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 800f8e8:	e6db      	b.n	800f6a2 <flex_update+0x456>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	e6f0      	b.n	800f6d0 <flex_update+0x484>
            item->h_layout = 0;
 800f8ee:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800f8f2:	f023 0306 	bic.w	r3, r3, #6
 800f8f6:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 800f8fa:	e73a      	b.n	800f772 <flex_update+0x526>
            cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800f8fc:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 800f900:	f106 0014 	add.w	r0, r6, #20
 800f904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f906:	4798      	blx	r3
 800f908:	eba8 0000 	sub.w	r0, r8, r0
 800f90c:	b207      	sxth	r7, r0
            break;
 800f90e:	e747      	b.n	800f7a0 <flex_update+0x554>
        switch(f->cross_place) {
 800f910:	2700      	movs	r7, #0
 800f912:	e745      	b.n	800f7a0 <flex_update+0x554>
        diff_y += f->row ? cross_pos : main_pos;
 800f914:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800f918:	e7b3      	b.n	800f882 <flex_update+0x636>
        else main_pos -= item_gap + place_gap;
 800f91a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800f91e:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800f922:	1a9b      	subs	r3, r3, r2
 800f924:	9a02      	ldr	r2, [sp, #8]
 800f926:	1a9b      	subs	r3, r3, r2
 800f928:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800f92c:	e6b9      	b.n	800f6a2 <flex_update+0x456>
            *cross_pos += t.track_cross_size + gap + track_gap;
 800f92e:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800f932:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800f936:	440a      	add	r2, r1
 800f938:	4413      	add	r3, r2
 800f93a:	882a      	ldrh	r2, [r5, #0]
 800f93c:	4413      	add	r3, r2
 800f93e:	e66f      	b.n	800f620 <flex_update+0x3d4>
    if(rtl && !f.row) {
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	2b01      	cmp	r3, #1
 800f944:	f43f ad4b 	beq.w	800f3de <flex_update+0x192>
 800f948:	e57c      	b.n	800f444 <flex_update+0x1f8>
 800f94a:	bf00      	nop

0800f94c <lv_flex_init>:
{
 800f94c:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800f94e:	2100      	movs	r1, #0
 800f950:	480d      	ldr	r0, [pc, #52]	; (800f988 <lv_flex_init+0x3c>)
 800f952:	f7f5 f825 	bl	80049a0 <lv_layout_register>
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <lv_flex_init+0x40>)
 800f958:	6018      	str	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop();
 800f95a:	f008 fb41 	bl	8017fe0 <lv_style_register_prop>
 800f95e:	4b0c      	ldr	r3, [pc, #48]	; (800f990 <lv_flex_init+0x44>)
 800f960:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800f962:	f008 fb3d 	bl	8017fe0 <lv_style_register_prop>
 800f966:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <lv_flex_init+0x48>)
 800f968:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800f96c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800f96e:	f008 fb37 	bl	8017fe0 <lv_style_register_prop>
 800f972:	4b09      	ldr	r3, [pc, #36]	; (800f998 <lv_flex_init+0x4c>)
 800f974:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800f978:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800f97a:	f008 fb31 	bl	8017fe0 <lv_style_register_prop>
 800f97e:	4b07      	ldr	r3, [pc, #28]	; (800f99c <lv_flex_init+0x50>)
 800f980:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800f984:	8018      	strh	r0, [r3, #0]
}
 800f986:	bd08      	pop	{r3, pc}
 800f988:	0800f24d 	.word	0x0800f24d
 800f98c:	2000b4b0 	.word	0x2000b4b0
 800f990:	2000b4a8 	.word	0x2000b4a8
 800f994:	2000b4ac 	.word	0x2000b4ac
 800f998:	2000b4a4 	.word	0x2000b4a4
 800f99c:	2000b4a6 	.word	0x2000b4a6

0800f9a0 <lv_obj_set_flex_flow>:
{
 800f9a0:	460a      	mov	r2, r1
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 800f9a2:	4908      	ldr	r1, [pc, #32]	; (800f9c4 <lv_obj_set_flex_flow+0x24>)
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	8809      	ldrh	r1, [r1, #0]
 800f9a8:	b510      	push	{r4, lr}
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	f7f7 fbd8 	bl	8007160 <lv_obj_set_local_style_prop>
static inline void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 800f9b0:	4a05      	ldr	r2, [pc, #20]	; (800f9c8 <lv_obj_set_flex_flow+0x28>)
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f241 0169 	movw	r1, #4201	; 0x1069
 800f9ba:	8812      	ldrh	r2, [r2, #0]
}
 800f9bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9c0:	f7f7 bbce 	b.w	8007160 <lv_obj_set_local_style_prop>
 800f9c4:	2000b4a8 	.word	0x2000b4a8
 800f9c8:	2000b4b0 	.word	0x2000b4b0

0800f9cc <lv_obj_set_flex_align>:
{
 800f9cc:	b570      	push	{r4, r5, r6, lr}
 800f9ce:	4616      	mov	r6, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 800f9d0:	460a      	mov	r2, r1
 800f9d2:	490f      	ldr	r1, [pc, #60]	; (800fa10 <lv_obj_set_flex_align+0x44>)
 800f9d4:	461d      	mov	r5, r3
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	4604      	mov	r4, r0
 800f9da:	8809      	ldrh	r1, [r1, #0]
 800f9dc:	f7f7 fbc0 	bl	8007160 <lv_obj_set_local_style_prop>
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 800f9e0:	490c      	ldr	r1, [pc, #48]	; (800fa14 <lv_obj_set_flex_align+0x48>)
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	8809      	ldrh	r1, [r1, #0]
 800f9ea:	f7f7 fbb9 	bl	8007160 <lv_obj_set_local_style_prop>
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 800f9ee:	490a      	ldr	r1, [pc, #40]	; (800fa18 <lv_obj_set_flex_align+0x4c>)
 800f9f0:	462a      	mov	r2, r5
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	8809      	ldrh	r1, [r1, #0]
 800f9f8:	f7f7 fbb2 	bl	8007160 <lv_obj_set_local_style_prop>
 800f9fc:	4a07      	ldr	r2, [pc, #28]	; (800fa1c <lv_obj_set_flex_align+0x50>)
 800f9fe:	4620      	mov	r0, r4
 800fa00:	2300      	movs	r3, #0
 800fa02:	8812      	ldrh	r2, [r2, #0]
 800fa04:	f241 0169 	movw	r1, #4201	; 0x1069
}
 800fa08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa0c:	f7f7 bba8 	b.w	8007160 <lv_obj_set_local_style_prop>
 800fa10:	2000b4ac 	.word	0x2000b4ac
 800fa14:	2000b4a4 	.word	0x2000b4a4
 800fa18:	2000b4a6 	.word	0x2000b4a6
 800fa1c:	2000b4b0 	.word	0x2000b4b0

0800fa20 <lv_obj_set_flex_grow>:
{
 800fa20:	460a      	mov	r2, r1
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 800fa22:	4902      	ldr	r1, [pc, #8]	; (800fa2c <lv_obj_set_flex_grow+0xc>)
 800fa24:	2300      	movs	r3, #0
 800fa26:	8809      	ldrh	r1, [r1, #0]
 800fa28:	f7f7 bb9a 	b.w	8007160 <lv_obj_set_local_style_prop>
 800fa2c:	2000b4aa 	.word	0x2000b4aa

0800fa30 <grid_align>:
 * @param size_array array with the track sizes
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num, lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 800fa30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fa36:	4605      	mov	r5, r0
 800fa38:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 800fa3c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 800fa40:	b111      	cbz	r1, 800fa48 <grid_align+0x18>
        pos_array[0] = 0;
 800fa42:	2200      	movs	r2, #0
            pos_array[0] = 0;
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
            break;
        case LV_GRID_ALIGN_SPACE_AROUND:
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
            pos_array[0] = gap / 2;
 800fa44:	8022      	strh	r2, [r4, #0]
            break;
 800fa46:	e021      	b.n	800fa8c <grid_align+0x5c>
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 800fa48:	1f10      	subs	r0, r2, #4
 800fa4a:	b2c0      	uxtb	r0, r0
 800fa4c:	2802      	cmp	r0, #2
 800fa4e:	d803      	bhi.n	800fa58 <grid_align+0x28>
            gap = 0;
 800fa50:	2e01      	cmp	r6, #1
 800fa52:	460b      	mov	r3, r1
 800fa54:	bf08      	it	eq
 800fa56:	2201      	moveq	r2, #1
        for(i = 0; i < track_num; i++) {
 800fa58:	46be      	mov	lr, r7
 800fa5a:	eb07 0846 	add.w	r8, r7, r6, lsl #1
    lv_coord_t grid_size = 0;
 800fa5e:	2000      	movs	r0, #0
 800fa60:	b299      	uxth	r1, r3
        for(i = 0; i < track_num; i++) {
 800fa62:	45f0      	cmp	r8, lr
 800fa64:	b280      	uxth	r0, r0
 800fa66:	d109      	bne.n	800fa7c <grid_align+0x4c>
        switch(align) {
 800fa68:	f04f 0e00 	mov.w	lr, #0
 800fa6c:	2a06      	cmp	r2, #6
 800fa6e:	d80d      	bhi.n	800fa8c <grid_align+0x5c>
 800fa70:	e8df f002 	tbb	[pc, r2]
 800fa74:	0c28200a 	.word	0x0c28200a
 800fa78:	3643      	.short	0x3643
 800fa7a:	2b          	.byte	0x2b
 800fa7b:	00          	.byte	0x00
            grid_size += size_array[i] + gap;
 800fa7c:	f93e 9b02 	ldrsh.w	r9, [lr], #2
 800fa80:	4408      	add	r0, r1
 800fa82:	4448      	add	r0, r9
 800fa84:	b200      	sxth	r0, r0
        for(i = 0; i < track_num; i++) {
 800fa86:	e7ec      	b.n	800fa62 <grid_align+0x32>
            pos_array[0] = 0;
 800fa88:	f8a4 e000 	strh.w	lr, [r4]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	1e70      	subs	r0, r6, #1
 800fa90:	4290      	cmp	r0, r2
 800fa92:	d83c      	bhi.n	800fb0e <grid_align+0xde>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 800fa94:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fa98:	3b01      	subs	r3, #1
 800fa9a:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 800fa9e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 800faa2:	4418      	add	r0, r3
 800faa4:	8823      	ldrh	r3, [r4, #0]
 800faa6:	1ac0      	subs	r0, r0, r3
 800faa8:	b200      	sxth	r0, r0

    if(reverse) {
 800faaa:	f1bc 0f00 	cmp.w	ip, #0
 800faae:	d144      	bne.n	800fb3a <grid_align+0x10a>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 800fab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        grid_size -= gap;
 800fab4:	1a41      	subs	r1, r0, r1
            pos_array[0] = (cont_size - grid_size) / 2;
 800fab6:	b209      	sxth	r1, r1
 800fab8:	1a69      	subs	r1, r5, r1
 800faba:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800fabe:	1049      	asrs	r1, r1, #1
            pos_array[0] = cont_size - grid_size;
 800fac0:	8021      	strh	r1, [r4, #0]
            break;
 800fac2:	e7e3      	b.n	800fa8c <grid_align+0x5c>
            pos_array[0] = cont_size - grid_size;
 800fac4:	4429      	add	r1, r5
 800fac6:	1a09      	subs	r1, r1, r0
 800fac8:	e7fa      	b.n	800fac0 <grid_align+0x90>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800faca:	194b      	adds	r3, r1, r5
 800facc:	1e71      	subs	r1, r6, #1
            pos_array[0] = 0;
 800face:	f8a4 e000 	strh.w	lr, [r4]
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800fad2:	1a1b      	subs	r3, r3, r0
 800fad4:	b209      	sxth	r1, r1
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	fb93 f3f1 	sdiv	r3, r3, r1
 800fadc:	b21b      	sxth	r3, r3
            break;
 800fade:	e7d5      	b.n	800fa8c <grid_align+0x5c>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800fae0:	194a      	adds	r2, r1, r5
 800fae2:	b233      	sxth	r3, r6
 800fae4:	1a12      	subs	r2, r2, r0
 800fae6:	b212      	sxth	r2, r2
 800fae8:	fb92 f2f3 	sdiv	r2, r2, r3
            pos_array[0] = gap / 2;
 800faec:	f3c2 31c0 	ubfx	r1, r2, #15, #1
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 800faf0:	b213      	sxth	r3, r2
            pos_array[0] = gap / 2;
 800faf2:	fa01 f282 	sxtah	r2, r1, r2
 800faf6:	1052      	asrs	r2, r2, #1
 800faf8:	e7a4      	b.n	800fa44 <grid_align+0x14>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 800fafa:	194b      	adds	r3, r1, r5
 800fafc:	1c71      	adds	r1, r6, #1
 800fafe:	1a1b      	subs	r3, r3, r0
 800fb00:	b209      	sxth	r1, r1
 800fb02:	b21b      	sxth	r3, r3
 800fb04:	fb93 f3f1 	sdiv	r3, r3, r1
 800fb08:	b21b      	sxth	r3, r3
            pos_array[0] = gap;
 800fb0a:	8023      	strh	r3, [r4, #0]
            break;
 800fb0c:	e7be      	b.n	800fa8c <grid_align+0x5c>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 800fb0e:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 800fb12:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 800fb16:	3201      	adds	r2, #1
 800fb18:	4471      	add	r1, lr
 800fb1a:	4419      	add	r1, r3
 800fb1c:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    for(i = 0; i < track_num - 1; i++) {
 800fb20:	e7b6      	b.n	800fa90 <grid_align+0x60>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 800fb22:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800fb26:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 800fb2a:	440a      	add	r2, r1
 800fb2c:	1aaa      	subs	r2, r5, r2
 800fb2e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
        for(i = 0; i < track_num; i++) {
 800fb32:	3301      	adds	r3, #1
 800fb34:	42b3      	cmp	r3, r6
 800fb36:	d1f4      	bne.n	800fb22 <grid_align+0xf2>
 800fb38:	e7ba      	b.n	800fab0 <grid_align+0x80>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	e7fa      	b.n	800fb34 <grid_align+0x104>
	...

0800fb40 <grid_update>:
{
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800fb44:	4fcc      	ldr	r7, [pc, #816]	; (800fe78 <grid_update+0x338>)
 800fb46:	b099      	sub	sp, #100	; 0x64
 800fb48:	4604      	mov	r4, r0
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	883a      	ldrh	r2, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800fb4e:	4ecb      	ldr	r6, [pc, #812]	; (800fe7c <grid_update+0x33c>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800fb50:	f7f7 fa22 	bl	8006f98 <lv_obj_get_style_prop>
 800fb54:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 800fb56:	2100      	movs	r1, #0
 800fb58:	8832      	ldrh	r2, [r6, #0]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f7f7 fa1c 	bl	8006f98 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 800fb60:	9705      	str	r7, [sp, #20]
 800fb62:	2d00      	cmp	r5, #0
 800fb64:	d06a      	beq.n	800fc3c <grid_update+0xfc>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d068      	beq.n	800fc3c <grid_update+0xfc>
    if(lv_obj_get_child(cont, 0) == NULL) {
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	f7f7 fd60 	bl	8007632 <lv_obj_get_child>
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d165      	bne.n	800fc42 <grid_update+0x102>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 800fb76:	211c      	movs	r1, #28
 800fb78:	a811      	add	r0, sp, #68	; 0x44
 800fb7a:	f007 fe03 	bl	8017784 <lv_memset_00>
    lv_memset_00(&hint, sizeof(hint));
 800fb7e:	210c      	movs	r1, #12
 800fb80:	a80e      	add	r0, sp, #56	; 0x38
 800fb82:	f007 fdff 	bl	8017784 <lv_memset_00>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800fb86:	f241 0232 	movw	r2, #4146	; 0x1032
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7f7 fa03 	bl	8006f98 <lv_obj_get_style_prop>
 800fb92:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800fb94:	f241 0212 	movw	r2, #4114	; 0x1012
 800fb98:	2100      	movs	r1, #0
 800fb9a:	4620      	mov	r0, r4
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 800fb9c:	b2ae      	uxth	r6, r5
 800fb9e:	f7f7 f9fb 	bl	8006f98 <lv_obj_get_style_prop>
 800fba2:	fa10 f085 	uxtah	r0, r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800fba6:	f241 0210 	movw	r2, #4112	; 0x1010
 800fbaa:	2100      	movs	r1, #0
 800fbac:	b285      	uxth	r5, r0
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f7f7 f9f2 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800fbb4:	4406      	add	r6, r0
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800fbb6:	8aa0      	ldrh	r0, [r4, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 800fbb8:	b2b6      	uxth	r6, r6
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 800fbba:	4405      	add	r5, r0
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	f7f5 ff9d 	bl	8005afc <lv_obj_get_scroll_x>
 800fbc2:	b2ad      	uxth	r5, r5
 800fbc4:	1a28      	subs	r0, r5, r0
 800fbc6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800fbca:	8ae0      	ldrh	r0, [r4, #22]
 800fbcc:	4406      	add	r6, r0
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7f5 ffa6 	bl	8005b20 <lv_obj_get_scroll_y>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800fbd4:	2300      	movs	r3, #0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 800fbd6:	b2b6      	uxth	r6, r6
 800fbd8:	1a30      	subs	r0, r6, r0
 800fbda:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 800fbde:	9305      	str	r3, [sp, #20]
 800fbe0:	68a3      	ldr	r3, [r4, #8]
 800fbe2:	9905      	ldr	r1, [sp, #20]
 800fbe4:	685a      	ldr	r2, [r3, #4]
 800fbe6:	4291      	cmp	r1, r2
 800fbe8:	f0c0 8215 	bcc.w	8010016 <grid_update+0x4d6>
    lv_mem_buf_release(calc->x);
 800fbec:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fbee:	f007 fbd7 	bl	80173a0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 800fbf2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fbf4:	f007 fbd4 	bl	80173a0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 800fbf8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800fbfa:	f007 fbd1 	bl	80173a0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 800fbfe:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fc00:	f007 fbce 	bl	80173a0 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800fc04:	f241 0201 	movw	r2, #4097	; 0x1001
 800fc08:	2100      	movs	r1, #0
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f7f7 f9c4 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800fc10:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800fc14:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800fc16:	2100      	movs	r1, #0
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f7f7 f9bd 	bl	8006f98 <lv_obj_get_style_prop>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800fc1e:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800fc22:	b200      	sxth	r0, r0
 800fc24:	429d      	cmp	r5, r3
 800fc26:	d001      	beq.n	800fc2c <grid_update+0xec>
 800fc28:	4298      	cmp	r0, r3
 800fc2a:	d102      	bne.n	800fc32 <grid_update+0xf2>
        lv_obj_refr_size(cont);
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f7f5 fb01 	bl	8005234 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800fc32:	2200      	movs	r2, #0
 800fc34:	2125      	movs	r1, #37	; 0x25
 800fc36:	4620      	mov	r0, r4
 800fc38:	f7f1 ff5e 	bl	8001af8 <lv_event_send>
}
 800fc3c:	b019      	add	sp, #100	; 0x64
 800fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc42:	8832      	ldrh	r2, [r6, #0]
 800fc44:	2100      	movs	r1, #0
 800fc46:	4620      	mov	r0, r4
 800fc48:	f7f7 f9a6 	bl	8006f98 <lv_obj_get_style_prop>

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	4605      	mov	r5, r0
 800fc50:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 800fc54:	0058      	lsls	r0, r3, #1
 800fc56:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800fc5a:	f040 80fc 	bne.w	800fe56 <grid_update+0x316>
    c->row_num = count_tracks(row_templ);
 800fc5e:	9316      	str	r3, [sp, #88]	; 0x58
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800fc60:	f007 fd42 	bl	80176e8 <lv_mem_buf_get>
 800fc64:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 800fc66:	2600      	movs	r6, #0
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 800fc68:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fc6a:	0040      	lsls	r0, r0, #1
 800fc6c:	f007 fd3c 	bl	80176e8 <lv_mem_buf_get>
 800fc70:	9014      	str	r0, [sp, #80]	; 0x50
    for(i = 0; i < c->row_num; i++) {
 800fc72:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fc74:	428e      	cmp	r6, r1
 800fc76:	f0c0 80f0 	bcc.w	800fe5a <grid_update+0x31a>
    lv_coord_t grid_h = 0;
 800fc7a:	2200      	movs	r2, #0
            c->h[i] = x;
 800fc7c:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
        if(IS_FR(x)) {
 800fc80:	f645 7e9b 	movw	lr, #24475	; 0x5f9b
    uint32_t row_fr_cnt = 0;
 800fc84:	4616      	mov	r6, r2
    for(i = 0; i < c->row_num; i++) {
 800fc86:	4610      	mov	r0, r2
 800fc88:	4281      	cmp	r1, r0
 800fc8a:	b297      	uxth	r7, r2
 800fc8c:	f040 8136 	bne.w	800fefc <grid_update+0x3bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800fc90:	f241 0214 	movw	r2, #4116	; 0x1014
 800fc94:	2100      	movs	r1, #0
 800fc96:	4620      	mov	r0, r4
 800fc98:	f7f7 f97e 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800fc9c:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7f4 ff22 	bl	8004aea <lv_obj_get_content_height>
 800fca6:	9916      	ldr	r1, [sp, #88]	; 0x58
    lv_coord_t free_h = cont_h - grid_h;
 800fca8:	1bc2      	subs	r2, r0, r7
        if(IS_FR(x)) {
 800fcaa:	f645 7c9b 	movw	ip, #24475	; 0x5f9b
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800fcae:	1e4b      	subs	r3, r1, #1
            c->h[i] = (free_h * f) / row_fr_cnt;
 800fcb0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 800fcb2:	fb13 f008 	smulbb	r0, r3, r8
    lv_coord_t free_h = cont_h - grid_h;
 800fcb6:	1a12      	subs	r2, r2, r0
    for(i = 0; i < c->row_num; i++) {
 800fcb8:	2000      	movs	r0, #0
    lv_coord_t free_h = cont_h - grid_h;
 800fcba:	b212      	sxth	r2, r2
    if(free_h < 0) free_h = 0;
 800fcbc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    for(i = 0; i < c->row_num; i++) {
 800fcc0:	4281      	cmp	r1, r0
 800fcc2:	f040 812e 	bne.w	800ff22 <grid_update+0x3e2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 800fcc6:	9b05      	ldr	r3, [sp, #20]
 800fcc8:	2100      	movs	r1, #0
 800fcca:	4620      	mov	r0, r4
 800fccc:	881a      	ldrh	r2, [r3, #0]
 800fcce:	f7f7 f963 	bl	8006f98 <lv_obj_get_style_prop>
 800fcd2:	4605      	mov	r5, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f7f4 feee 	bl	8004ab6 <lv_obj_get_content_width>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 800fcda:	2300      	movs	r3, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800fcdc:	9005      	str	r0, [sp, #20]
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 800fcde:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 800fce2:	0058      	lsls	r0, r3, #1
 800fce4:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800fce8:	f040 812a 	bne.w	800ff40 <grid_update+0x400>
    c->col_num = count_tracks(col_templ);
 800fcec:	9315      	str	r3, [sp, #84]	; 0x54
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800fcee:	f007 fcfb 	bl	80176e8 <lv_mem_buf_get>
 800fcf2:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 800fcf4:	2600      	movs	r6, #0
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 800fcf6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fcf8:	0040      	lsls	r0, r0, #1
 800fcfa:	f007 fcf5 	bl	80176e8 <lv_mem_buf_get>
 800fcfe:	9013      	str	r0, [sp, #76]	; 0x4c
    for(i = 0; i < c->col_num; i++) {
 800fd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd02:	429e      	cmp	r6, r3
 800fd04:	f0c0 811e 	bcc.w	800ff44 <grid_update+0x404>
    lv_coord_t grid_w = 0;
 800fd08:	2100      	movs	r1, #0
            c->w[i] = x;
 800fd0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if(IS_FR(x)) {
 800fd0c:	f645 7e9b 	movw	lr, #24475	; 0x5f9b
    uint32_t col_fr_cnt = 0;
 800fd10:	460e      	mov	r6, r1
    for(i = 0; i < c->col_num; i++) {
 800fd12:	468c      	mov	ip, r1
 800fd14:	4563      	cmp	r3, ip
 800fd16:	b28f      	uxth	r7, r1
 800fd18:	f040 8158 	bne.w	800ffcc <grid_update+0x48c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800fd1c:	f241 0215 	movw	r2, #4117	; 0x1015
 800fd20:	2100      	movs	r1, #0
 800fd22:	4620      	mov	r0, r4
        if(IS_FR(x)) {
 800fd24:	f645 789b 	movw	r8, #24475	; 0x5f9b
 800fd28:	f7f7 f936 	bl	8006f98 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 800fd2c:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    int32_t last_fr_i = -1;
 800fd30:	f04f 3eff 	mov.w	lr, #4294967295
    cont_w -= col_gap * (c->col_num - 1);
 800fd34:	f10c 32ff 	add.w	r2, ip, #4294967295
 800fd38:	fb12 f300 	smulbb	r3, r2, r0
 800fd3c:	9a05      	ldr	r2, [sp, #20]
 800fd3e:	1ad3      	subs	r3, r2, r3
    int32_t last_fr_x = 0;
 800fd40:	2200      	movs	r2, #0
    lv_coord_t free_w = cont_w - grid_w;
 800fd42:	1bdb      	subs	r3, r3, r7
    for(i = 0; i < c->col_num; i++) {
 800fd44:	4611      	mov	r1, r2
            c->w[i] = (free_w * f) / col_fr_cnt;
 800fd46:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    lv_coord_t free_w = cont_w - grid_w;
 800fd48:	b21b      	sxth	r3, r3
    if(free_w < 0) free_w = 0;
 800fd4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    for(i = 0; i < c->col_num; i++) {
 800fd4e:	458c      	cmp	ip, r1
 800fd50:	f040 8150 	bne.w	800fff4 <grid_update+0x4b4>
    if(last_fr_i >= 0) {
 800fd54:	f1be 3fff 	cmp.w	lr, #4294967295
 800fd58:	d006      	beq.n	800fd68 <grid_update+0x228>
    	c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 800fd5a:	1ab2      	subs	r2, r6, r2
 800fd5c:	435a      	muls	r2, r3
 800fd5e:	fbb2 f2f6 	udiv	r2, r2, r6
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	f827 301e 	strh.w	r3, [r7, lr, lsl #1]
 800fd68:	f241 0215 	movw	r2, #4117	; 0x1015
 800fd6c:	2100      	movs	r1, #0
 800fd6e:	4620      	mov	r0, r4
 800fd70:	f7f7 f912 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800fd74:	f241 0214 	movw	r2, #4116	; 0x1014
    return (lv_coord_t)v.num;
 800fd78:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f7f7 f90a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800fd84:	f241 426a 	movw	r2, #5226	; 0x146a
    return (lv_coord_t)v.num;
 800fd88:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f7f7 f903 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800fd92:	f241 0201 	movw	r2, #4097	; 0x1001
    return (lv_base_dir_t)v.num;
 800fd96:	fa5f f880 	uxtb.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4620      	mov	r0, r4
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 800fd9e:	f108 33ff 	add.w	r3, r8, #4294967295
 800fda2:	f1d3 0800 	rsbs	r8, r3, #0
 800fda6:	eb48 0803 	adc.w	r8, r8, r3
 800fdaa:	f7f7 f8f5 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800fdae:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800fdb2:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f7f7 f8ee 	bl	8006f98 <lv_obj_get_style_prop>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800fdbc:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800fdc0:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800fdc4:	4620      	mov	r0, r4
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 800fdc6:	429d      	cmp	r5, r3
 800fdc8:	bf09      	itett	eq
 800fdca:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
 800fdce:	2500      	movne	r5, #0
 800fdd0:	f085 0504 	eoreq.w	r5, r5, #4
 800fdd4:	f3c5 0580 	ubfxeq	r5, r5, #2, #1
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 800fdd8:	f7f4 fe6d 	bl	8004ab6 <lv_obj_get_content_width>
    return (lv_grid_align_t)v.num;
}

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 800fddc:	4b28      	ldr	r3, [pc, #160]	; (800fe80 <grid_update+0x340>)
 800fdde:	4606      	mov	r6, r0
 800fde0:	2100      	movs	r1, #0
 800fde2:	4620      	mov	r0, r4
 800fde4:	881a      	ldrh	r2, [r3, #0]
 800fde6:	f7f7 f8d7 	bl	8006f98 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w, calc_out->x, rev);
 800fdea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fdec:	4629      	mov	r1, r5
 800fdee:	b2c2      	uxtb	r2, r0
 800fdf0:	9302      	str	r3, [sp, #8]
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdfa:	9301      	str	r3, [sp, #4]
 800fdfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	4653      	mov	r3, sl
 800fe02:	f7ff fe15 	bl	800fa30 <grid_align>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800fe06:	f242 73d1 	movw	r3, #10193	; 0x27d1
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w, calc_out->x, rev);
 800fe0a:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800fe0e:	4620      	mov	r0, r4
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 800fe10:	4599      	cmp	r9, r3
 800fe12:	bf09      	itett	eq
 800fe14:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
 800fe18:	2500      	movne	r5, #0
 800fe1a:	f085 0502 	eoreq.w	r5, r5, #2
 800fe1e:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 800fe22:	f7f4 fe62 	bl	8004aea <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 800fe26:	4b17      	ldr	r3, [pc, #92]	; (800fe84 <grid_update+0x344>)
 800fe28:	4606      	mov	r6, r0
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	881a      	ldrh	r2, [r3, #0]
 800fe30:	f7f7 f8b2 	bl	8006f98 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h, calc_out->y, false);
 800fe34:	2300      	movs	r3, #0
 800fe36:	b2c2      	uxtb	r2, r0
 800fe38:	4629      	mov	r1, r5
 800fe3a:	9303      	str	r3, [sp, #12]
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fe40:	9302      	str	r3, [sp, #8]
 800fe42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe44:	9301      	str	r3, [sp, #4]
 800fe46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe48:	9300      	str	r3, [sp, #0]
 800fe4a:	463b      	mov	r3, r7
 800fe4c:	f7ff fdf0 	bl	800fa30 <grid_align>
 800fe50:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
 800fe54:	e693      	b.n	800fb7e <grid_update+0x3e>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 800fe56:	3301      	adds	r3, #1
 800fe58:	e6fa      	b.n	800fc50 <grid_update+0x110>
        if(IS_CONTENT(row_templ[i])) {
 800fe5a:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 800fe5e:	f645 739b 	movw	r3, #24475	; 0x5f9b
 800fe62:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d146      	bne.n	800fef8 <grid_update+0x3b8>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800fe6a:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800fe6e:	4f06      	ldr	r7, [pc, #24]	; (800fe88 <grid_update+0x348>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800fe70:	f8df a018 	ldr.w	sl, [pc, #24]	; 800fe8c <grid_update+0x34c>
 800fe74:	e033      	b.n	800fede <grid_update+0x39e>
 800fe76:	bf00      	nop
 800fe78:	2000b4c4 	.word	0x2000b4c4
 800fe7c:	2000b4b8 	.word	0x2000b4b8
 800fe80:	2000b4be 	.word	0x2000b4be
 800fe84:	2000b4b6 	.word	0x2000b4b6
 800fe88:	ffffa000 	.word	0xffffa000
 800fe8c:	00018001 	.word	0x00018001
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800fe90:	4641      	mov	r1, r8
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7f7 fbcd 	bl	8007632 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800fe98:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800fe9a:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800fe9c:	f7f3 fdb0 	bl	8003a00 <lv_obj_has_flag_any>
 800fea0:	4601      	mov	r1, r0
 800fea2:	b9d0      	cbnz	r0, 800feda <grid_update+0x39a>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 800fea4:	4bc0      	ldr	r3, [pc, #768]	; (80101a8 <grid_update+0x668>)
 800fea6:	9006      	str	r0, [sp, #24]
 800fea8:	4658      	mov	r0, fp
 800feaa:	881a      	ldrh	r2, [r3, #0]
 800feac:	f7f7 f874 	bl	8006f98 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 800feb0:	9906      	ldr	r1, [sp, #24]
 800feb2:	b2c0      	uxtb	r0, r0
 800feb4:	2801      	cmp	r0, #1
 800feb6:	d110      	bne.n	800feda <grid_update+0x39a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 800feb8:	4bbc      	ldr	r3, [pc, #752]	; (80101ac <grid_update+0x66c>)
 800feba:	4658      	mov	r0, fp
 800febc:	881a      	ldrh	r2, [r3, #0]
 800febe:	f7f7 f86b 	bl	8006f98 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 800fec2:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 800fec4:	4286      	cmp	r6, r0
 800fec6:	d108      	bne.n	800feda <grid_update+0x39a>
                size = LV_MAX(size, lv_obj_get_height(item));
 800fec8:	4658      	mov	r0, fp
 800feca:	f7f4 fdee 	bl	8004aaa <lv_obj_get_height>
 800fece:	42b8      	cmp	r0, r7
 800fed0:	db03      	blt.n	800feda <grid_update+0x39a>
 800fed2:	4658      	mov	r0, fp
 800fed4:	f7f4 fde9 	bl	8004aaa <lv_obj_get_height>
 800fed8:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800feda:	f108 0801 	add.w	r8, r8, #1
 800fede:	4620      	mov	r0, r4
 800fee0:	f7f7 fbb6 	bl	8007650 <lv_obj_get_child_cnt>
 800fee4:	4580      	cmp	r8, r0
 800fee6:	d3d3      	bcc.n	800fe90 <grid_update+0x350>
            if(size >= 0) c->h[i] = size;
 800fee8:	2f00      	cmp	r7, #0
 800feea:	9b14      	ldr	r3, [sp, #80]	; 0x50
            else c->h[i] = 0;
 800feec:	bfb6      	itet	lt
 800feee:	2200      	movlt	r2, #0
            if(size >= 0) c->h[i] = size;
 800fef0:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->h[i] = 0;
 800fef4:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->row_num; i++) {
 800fef8:	3601      	adds	r6, #1
 800fefa:	e6ba      	b.n	800fc72 <grid_update+0x132>
        lv_coord_t x = row_templ[i];
 800fefc:	f935 3010 	ldrsh.w	r3, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 800ff00:	4573      	cmp	r3, lr
 800ff02:	dd05      	ble.n	800ff10 <grid_update+0x3d0>
            row_fr_cnt += GET_FR(x);
 800ff04:	f5a6 46bf 	sub.w	r6, r6, #24448	; 0x5f80
 800ff08:	3e1c      	subs	r6, #28
 800ff0a:	441e      	add	r6, r3
    for(i = 0; i < c->row_num; i++) {
 800ff0c:	3001      	adds	r0, #1
 800ff0e:	e6bb      	b.n	800fc88 <grid_update+0x148>
            grid_h += c->h[i];
 800ff10:	bf0d      	iteet	eq
 800ff12:	f83c 2010 	ldrheq.w	r2, [ip, r0, lsl #1]
            grid_h += x;
 800ff16:	18fa      	addne	r2, r7, r3
            c->h[i] = x;
 800ff18:	f82c 3010 	strhne.w	r3, [ip, r0, lsl #1]
            grid_h += c->h[i];
 800ff1c:	19d2      	addeq	r2, r2, r7
            grid_h += x;
 800ff1e:	b212      	sxth	r2, r2
 800ff20:	e7f4      	b.n	800ff0c <grid_update+0x3cc>
        lv_coord_t x = row_templ[i];
 800ff22:	f935 3010 	ldrsh.w	r3, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 800ff26:	4563      	cmp	r3, ip
 800ff28:	dd08      	ble.n	800ff3c <grid_update+0x3fc>
            lv_coord_t f = GET_FR(x);
 800ff2a:	f5a3 43bf 	sub.w	r3, r3, #24448	; 0x5f80
 800ff2e:	3b1c      	subs	r3, #28
            c->h[i] = (free_h * f) / row_fr_cnt;
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	4353      	muls	r3, r2
 800ff34:	fbb3 f3f6 	udiv	r3, r3, r6
 800ff38:	f827 3010 	strh.w	r3, [r7, r0, lsl #1]
    for(i = 0; i < c->row_num; i++) {
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	e6bf      	b.n	800fcc0 <grid_update+0x180>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 800ff40:	3301      	adds	r3, #1
 800ff42:	e6cc      	b.n	800fcde <grid_update+0x19e>
        if(IS_CONTENT(col_templ[i])) {
 800ff44:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 800ff48:	f645 739b 	movw	r3, #24475	; 0x5f9b
 800ff4c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d139      	bne.n	800ffc8 <grid_update+0x488>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800ff54:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 800ff58:	4f95      	ldr	r7, [pc, #596]	; (80101b0 <grid_update+0x670>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800ff5a:	f8df a260 	ldr.w	sl, [pc, #608]	; 80101bc <grid_update+0x67c>
 800ff5e:	e026      	b.n	800ffae <grid_update+0x46e>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800ff60:	4641      	mov	r1, r8
 800ff62:	4620      	mov	r0, r4
 800ff64:	f7f7 fb65 	bl	8007632 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800ff68:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 800ff6a:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800ff6c:	f7f3 fd48 	bl	8003a00 <lv_obj_has_flag_any>
 800ff70:	4601      	mov	r1, r0
 800ff72:	b9d0      	cbnz	r0, 800ffaa <grid_update+0x46a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 800ff74:	4b8f      	ldr	r3, [pc, #572]	; (80101b4 <grid_update+0x674>)
 800ff76:	9006      	str	r0, [sp, #24]
 800ff78:	4658      	mov	r0, fp
 800ff7a:	881a      	ldrh	r2, [r3, #0]
 800ff7c:	f7f7 f80c 	bl	8006f98 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 800ff80:	9906      	ldr	r1, [sp, #24]
 800ff82:	b2c0      	uxtb	r0, r0
 800ff84:	2801      	cmp	r0, #1
 800ff86:	d110      	bne.n	800ffaa <grid_update+0x46a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 800ff88:	4b8b      	ldr	r3, [pc, #556]	; (80101b8 <grid_update+0x678>)
 800ff8a:	4658      	mov	r0, fp
 800ff8c:	881a      	ldrh	r2, [r3, #0]
 800ff8e:	f7f7 f803 	bl	8006f98 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 800ff92:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 800ff94:	4286      	cmp	r6, r0
 800ff96:	d108      	bne.n	800ffaa <grid_update+0x46a>
                size = LV_MAX(size, lv_obj_get_width(item));
 800ff98:	4658      	mov	r0, fp
 800ff9a:	f7f4 fd80 	bl	8004a9e <lv_obj_get_width>
 800ff9e:	42b8      	cmp	r0, r7
 800ffa0:	db03      	blt.n	800ffaa <grid_update+0x46a>
 800ffa2:	4658      	mov	r0, fp
 800ffa4:	f7f4 fd7b 	bl	8004a9e <lv_obj_get_width>
 800ffa8:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 800ffaa:	f108 0801 	add.w	r8, r8, #1
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f7f7 fb4e 	bl	8007650 <lv_obj_get_child_cnt>
 800ffb4:	4580      	cmp	r8, r0
 800ffb6:	d3d3      	bcc.n	800ff60 <grid_update+0x420>
            if(size >= 0) c->w[i] = size;
 800ffb8:	2f00      	cmp	r7, #0
 800ffba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            else c->w[i] = 0;
 800ffbc:	bfb6      	itet	lt
 800ffbe:	2200      	movlt	r2, #0
            if(size >= 0) c->w[i] = size;
 800ffc0:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->w[i] = 0;
 800ffc4:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->col_num; i++) {
 800ffc8:	3601      	adds	r6, #1
 800ffca:	e699      	b.n	800fd00 <grid_update+0x1c0>
        lv_coord_t x = col_templ[i];
 800ffcc:	f935 001c 	ldrsh.w	r0, [r5, ip, lsl #1]
        if(IS_FR(x)) {
 800ffd0:	4570      	cmp	r0, lr
 800ffd2:	dd06      	ble.n	800ffe2 <grid_update+0x4a2>
            col_fr_cnt += GET_FR(x);
 800ffd4:	f5a6 46bf 	sub.w	r6, r6, #24448	; 0x5f80
 800ffd8:	3e1c      	subs	r6, #28
 800ffda:	4406      	add	r6, r0
    for(i = 0; i < c->col_num; i++) {
 800ffdc:	f10c 0c01 	add.w	ip, ip, #1
 800ffe0:	e698      	b.n	800fd14 <grid_update+0x1d4>
            grid_w += c->w[i];
 800ffe2:	bf0d      	iteet	eq
 800ffe4:	f832 101c 	ldrheq.w	r1, [r2, ip, lsl #1]
            grid_w += x;
 800ffe8:	1839      	addne	r1, r7, r0
            c->w[i] = x;
 800ffea:	f822 001c 	strhne.w	r0, [r2, ip, lsl #1]
            grid_w += c->w[i];
 800ffee:	19c9      	addeq	r1, r1, r7
            grid_w += x;
 800fff0:	b209      	sxth	r1, r1
 800fff2:	e7f3      	b.n	800ffdc <grid_update+0x49c>
        lv_coord_t x = col_templ[i];
 800fff4:	f935 0011 	ldrsh.w	r0, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 800fff8:	4540      	cmp	r0, r8
 800fffa:	dd0a      	ble.n	8010012 <grid_update+0x4d2>
            lv_coord_t f = GET_FR(x);
 800fffc:	f5a0 42bf 	sub.w	r2, r0, #24448	; 0x5f80
            last_fr_i = i;
 8010000:	468e      	mov	lr, r1
            lv_coord_t f = GET_FR(x);
 8010002:	3a1c      	subs	r2, #28
            c->w[i] = (free_w * f) / col_fr_cnt;
 8010004:	b292      	uxth	r2, r2
 8010006:	fb02 f003 	mul.w	r0, r2, r3
 801000a:	fbb0 f0f6 	udiv	r0, r0, r6
 801000e:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
    for(i = 0; i < c->col_num; i++) {
 8010012:	3101      	adds	r1, #1
 8010014:	e69b      	b.n	800fd4e <grid_update+0x20e>
        lv_obj_t * item = cont->spec_attr->children[i];
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	9a05      	ldr	r2, [sp, #20]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 801001a:	4968      	ldr	r1, [pc, #416]	; (80101bc <grid_update+0x67c>)
        lv_obj_t * item = cont->spec_attr->children[i];
 801001c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 8010020:	4628      	mov	r0, r5
 8010022:	f7f3 fced 	bl	8003a00 <lv_obj_has_flag_any>
 8010026:	4601      	mov	r1, r0
 8010028:	2800      	cmp	r0, #0
 801002a:	f040 8183 	bne.w	8010334 <grid_update+0x7f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 801002e:	4b61      	ldr	r3, [pc, #388]	; (80101b4 <grid_update+0x674>)
 8010030:	9006      	str	r0, [sp, #24]
 8010032:	4628      	mov	r0, r5
 8010034:	881a      	ldrh	r2, [r3, #0]
 8010036:	f7f6 ffaf 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801003a:	4b5b      	ldr	r3, [pc, #364]	; (80101a8 <grid_update+0x668>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 801003c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801003e:	9906      	ldr	r1, [sp, #24]
 8010040:	881a      	ldrh	r2, [r3, #0]
 8010042:	4628      	mov	r0, r5
 8010044:	f7f6 ffa8 	bl	8006f98 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 8010048:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 801004c:	f000 8172 	beq.w	8010334 <grid_update+0x7f4>
 8010050:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010054:	f000 816e 	beq.w	8010334 <grid_update+0x7f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8010058:	4b57      	ldr	r3, [pc, #348]	; (80101b8 <grid_update+0x678>)
 801005a:	4628      	mov	r0, r5
 801005c:	9906      	ldr	r1, [sp, #24]
 801005e:	881a      	ldrh	r2, [r3, #0]
 8010060:	f7f6 ff9a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8010064:	4a51      	ldr	r2, [pc, #324]	; (80101ac <grid_update+0x66c>)
    uint32_t col_pos = get_col_pos(item);
 8010066:	b2c3      	uxtb	r3, r0
 8010068:	9906      	ldr	r1, [sp, #24]
 801006a:	8812      	ldrh	r2, [r2, #0]
 801006c:	4628      	mov	r0, r5
 801006e:	9307      	str	r3, [sp, #28]
 8010070:	f7f6 ff92 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 8010074:	4a52      	ldr	r2, [pc, #328]	; (80101c0 <grid_update+0x680>)
    uint32_t row_pos = get_row_pos(item);
 8010076:	fa5f fa80 	uxtb.w	sl, r0
 801007a:	9906      	ldr	r1, [sp, #24]
 801007c:	4628      	mov	r0, r5
 801007e:	8812      	ldrh	r2, [r2, #0]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8010080:	4456      	add	r6, sl
 8010082:	f7f6 ff89 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 8010086:	4a4f      	ldr	r2, [pc, #316]	; (80101c4 <grid_update+0x684>)
 8010088:	9906      	ldr	r1, [sp, #24]
static inline uint8_t get_cell_col_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_x_align(obj, 0); }
 801008a:	fa5f f980 	uxtb.w	r9, r0
 801008e:	8812      	ldrh	r2, [r2, #0]
 8010090:	4628      	mov	r0, r5
 8010092:	910b      	str	r1, [sp, #44]	; 0x2c
 8010094:	f7f6 ff80 	bl	8006f98 <lv_obj_get_style_prop>
static inline uint8_t get_cell_row_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_y_align(obj, 0); }
 8010098:	b2c3      	uxtb	r3, r0
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 801009a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    lv_coord_t col_x1 = c->x[col_pos];
 801009e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
static inline uint8_t get_cell_row_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_y_align(obj, 0); }
 80100a2:	9306      	str	r3, [sp, #24]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80100a4:	9b07      	ldr	r3, [sp, #28]
 80100a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80100a8:	441f      	add	r7, r3
    lv_coord_t col_w = col_x2 - col_x1;
 80100aa:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80100ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80100ae:	4407      	add	r7, r0
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80100b0:	4430      	add	r0, r6
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80100b2:	f832 b017 	ldrh.w	fp, [r2, r7, lsl #1]
 80100b6:	f83c 2017 	ldrh.w	r2, [ip, r7, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80100ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80100bc:	4493      	add	fp, r2
    lv_coord_t col_w = col_x2 - col_x1;
 80100be:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80100c2:	f837 6010 	ldrh.w	r6, [r7, r0, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 80100c6:	ebab 0b02 	sub.w	fp, fp, r2
    lv_coord_t row_y1 = c->y[row_pos];
 80100ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80100cc:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 80100d0:	fa1f f38b 	uxth.w	r3, fp
    lv_coord_t row_h = row_y2 - row_y1;
 80100d4:	f832 201a 	ldrh.w	r2, [r2, sl, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80100d8:	4406      	add	r6, r0
    lv_coord_t col_w = col_x2 - col_x1;
 80100da:	9308      	str	r3, [sp, #32]
 80100dc:	fa0f f38b 	sxth.w	r3, fp
 80100e0:	4628      	mov	r0, r5
    lv_coord_t row_h = row_y2 - row_y1;
 80100e2:	1ab6      	subs	r6, r6, r2
 80100e4:	f241 426a 	movw	r2, #5226	; 0x146a
    lv_coord_t col_w = col_x2 - col_x1;
 80100e8:	9307      	str	r3, [sp, #28]
    lv_coord_t row_h = row_y2 - row_y1;
 80100ea:	b2b3      	uxth	r3, r6
 80100ec:	b236      	sxth	r6, r6
 80100ee:	9309      	str	r3, [sp, #36]	; 0x24
 80100f0:	f7f6 ff52 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80100f4:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80100f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f8:	2801      	cmp	r0, #1
 80100fa:	d107      	bne.n	801010c <grid_update+0x5cc>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 80100fc:	f1b9 0f00 	cmp.w	r9, #0
 8010100:	d029      	beq.n	8010156 <grid_update+0x616>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 8010102:	f1b9 0f02 	cmp.w	r9, #2
 8010106:	bf08      	it	eq
 8010108:	f04f 0900 	moveq.w	r9, #0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801010c:	f8b5 8018 	ldrh.w	r8, [r5, #24]
    switch(col_align) {
 8010110:	f1b9 0f02 	cmp.w	r9, #2
 8010114:	8aaa      	ldrh	r2, [r5, #20]
 8010116:	f108 0801 	add.w	r8, r8, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801011a:	8b6f      	ldrh	r7, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801011c:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010120:	f107 0701 	add.w	r7, r7, #1
 8010124:	8aea      	ldrh	r2, [r5, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010126:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801012a:	eba7 0702 	sub.w	r7, r7, r2
 801012e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010130:	b23f      	sxth	r7, r7
 8010132:	f932 b013 	ldrsh.w	fp, [r2, r3, lsl #1]
 8010136:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801013a:	d045      	beq.n	80101c8 <grid_update+0x688>
 801013c:	f1b9 0f03 	cmp.w	r9, #3
 8010140:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8010144:	d00a      	beq.n	801015c <grid_update+0x61c>
 8010146:	f1b9 0f01 	cmp.w	r9, #1
 801014a:	d023      	beq.n	8010194 <grid_update+0x654>
            item->w_layout = 0;
 801014c:	f36f 0382 	bfc	r3, #2, #1
 8010150:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 8010154:	e008      	b.n	8010168 <grid_update+0x628>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 8010156:	f04f 0902 	mov.w	r9, #2
 801015a:	e7d7      	b.n	801010c <grid_update+0x5cc>
            item->w_layout = 1;
 801015c:	f043 0304 	orr.w	r3, r3, #4
 8010160:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            item_w = col_w;
 8010164:	f8dd 801c 	ldr.w	r8, [sp, #28]
    switch(row_align) {
 8010168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801016a:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
 801016e:	f833 201a 	ldrh.w	r2, [r3, sl, lsl #1]
 8010172:	9b06      	ldr	r3, [sp, #24]
 8010174:	2b02      	cmp	r3, #2
 8010176:	f000 80e8 	beq.w	801034a <grid_update+0x80a>
 801017a:	2b03      	cmp	r3, #3
 801017c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8010180:	d030      	beq.n	80101e4 <grid_update+0x6a4>
 8010182:	9906      	ldr	r1, [sp, #24]
 8010184:	2901      	cmp	r1, #1
 8010186:	f000 80d8 	beq.w	801033a <grid_update+0x7fa>
            item->h_layout = 0;
 801018a:	f36f 0341 	bfc	r3, #1, #1
 801018e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 8010192:	e02c      	b.n	80101ee <grid_update+0x6ae>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 8010194:	9a07      	ldr	r2, [sp, #28]
 8010196:	eba2 0b08 	sub.w	fp, r2, r8
 801019a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 801019e:	eb00 0b6b 	add.w	fp, r0, fp, asr #1
 80101a2:	fa0f fb8b 	sxth.w	fp, fp
            item->w_layout = 0;
 80101a6:	e7d1      	b.n	801014c <grid_update+0x60c>
 80101a8:	2000b4c0 	.word	0x2000b4c0
 80101ac:	2000b4c6 	.word	0x2000b4c6
 80101b0:	ffffa000 	.word	0xffffa000
 80101b4:	2000b4b4 	.word	0x2000b4b4
 80101b8:	2000b4ba 	.word	0x2000b4ba
 80101bc:	00018001 	.word	0x00018001
 80101c0:	2000b4c2 	.word	0x2000b4c2
 80101c4:	2000b4bc 	.word	0x2000b4bc
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 80101c8:	9b08      	ldr	r3, [sp, #32]
 80101ca:	4418      	add	r0, r3
 80101cc:	fa1f f980 	uxth.w	r9, r0
 80101d0:	4628      	mov	r0, r5
 80101d2:	f7f4 fc64 	bl	8004a9e <lv_obj_get_width>
            item->w_layout = 0;
 80101d6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 80101da:	eba9 0000 	sub.w	r0, r9, r0
 80101de:	fa0f fb80 	sxth.w	fp, r0
            item->w_layout = 0;
 80101e2:	e7b3      	b.n	801014c <grid_update+0x60c>
            item->h_layout = 1;
 80101e4:	f043 0302 	orr.w	r3, r3, #2
            item_h = row_h;
 80101e8:	4637      	mov	r7, r6
            item->h_layout = 1;
 80101ea:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 80101ee:	4628      	mov	r0, r5
 80101f0:	f7f4 fc55 	bl	8004a9e <lv_obj_get_width>
 80101f4:	4540      	cmp	r0, r8
 80101f6:	f000 80b6 	beq.w	8010366 <grid_update+0x826>
    dest->x1 = src->x1;
 80101fa:	8aab      	ldrh	r3, [r5, #20]
        lv_area_copy(&old_coords, &item->coords);
 80101fc:	f105 0614 	add.w	r6, r5, #20
        lv_obj_invalidate(item);
 8010200:	4628      	mov	r0, r5
 8010202:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    dest->y1 = src->y1;
 8010206:	8aeb      	ldrh	r3, [r5, #22]
 8010208:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    dest->x2 = src->x2;
 801020c:	8b2b      	ldrh	r3, [r5, #24]
 801020e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    dest->y2 = src->y2;
 8010212:	8b6b      	ldrh	r3, [r5, #26]
 8010214:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010218:	f7f4 fd96 	bl	8004d48 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 801021c:	4641      	mov	r1, r8
 801021e:	4630      	mov	r0, r6
 8010220:	9606      	str	r6, [sp, #24]
 8010222:	f006 fc28 	bl	8016a76 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 8010226:	4639      	mov	r1, r7
 8010228:	9806      	ldr	r0, [sp, #24]
 801022a:	f006 fc29 	bl	8016a80 <lv_area_set_height>
        lv_obj_invalidate(item);
 801022e:	4628      	mov	r0, r5
 8010230:	f7f4 fd8a 	bl	8004d48 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8010234:	aa0c      	add	r2, sp, #48	; 0x30
 8010236:	2123      	movs	r1, #35	; 0x23
 8010238:	4628      	mov	r0, r5
 801023a:	f7f1 fc5d 	bl	8001af8 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 801023e:	4628      	mov	r0, r5
 8010240:	f7f7 f9f4 	bl	800762c <lv_obj_get_parent>
 8010244:	462a      	mov	r2, r5
 8010246:	2122      	movs	r1, #34	; 0x22
 8010248:	f7f1 fc56 	bl	8001af8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801024c:	f243 020c 	movw	r2, #12300	; 0x300c
 8010250:	2100      	movs	r1, #0
 8010252:	4628      	mov	r0, r5
 8010254:	f7f6 fea0 	bl	8006f98 <lv_obj_get_style_prop>
 8010258:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 801025a:	f243 020d 	movw	r2, #12301	; 0x300d
 801025e:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8010260:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8010264:	4628      	mov	r0, r5
 8010266:	f7f6 fe97 	bl	8006f98 <lv_obj_get_style_prop>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801026a:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 801026e:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8010270:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(item);
 8010274:	4628      	mov	r0, r5
 8010276:	f7f4 fc12 	bl	8004a9e <lv_obj_get_width>
 801027a:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(item);
 801027c:	4628      	mov	r0, r5
 801027e:	f7f4 fc14 	bl	8004aaa <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8010282:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8010286:	9b06      	ldr	r3, [sp, #24]
 8010288:	d111      	bne.n	80102ae <grid_update+0x76e>
 801028a:	f428 42c0 	bic.w	r2, r8, #24576	; 0x6000
 801028e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8010292:	dc0c      	bgt.n	80102ae <grid_update+0x76e>
 8010294:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010298:	4690      	mov	r8, r2
 801029a:	bfc8      	it	gt
 801029c:	f5c2 787a 	rsbgt	r8, r2, #1000	; 0x3e8
 80102a0:	fb08 f803 	mul.w	r8, r8, r3
 80102a4:	2364      	movs	r3, #100	; 0x64
 80102a6:	fb98 f8f3 	sdiv	r8, r8, r3
 80102aa:	fa0f f888 	sxth.w	r8, r8
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80102ae:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 80102b2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80102b6:	d110      	bne.n	80102da <grid_update+0x79a>
 80102b8:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 80102bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80102c0:	dc0b      	bgt.n	80102da <grid_update+0x79a>
 80102c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80102c6:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80102ca:	bfc8      	it	gt
 80102cc:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80102d0:	4358      	muls	r0, r3
 80102d2:	fb90 fafa 	sdiv	sl, r0, sl
 80102d6:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80102da:	8aab      	ldrh	r3, [r5, #20]
 80102dc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80102e0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80102e4:	1ac9      	subs	r1, r1, r3
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80102e6:	8aeb      	ldrh	r3, [r5, #22]
 80102e8:	1ad2      	subs	r2, r2, r3
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80102ea:	448b      	add	fp, r1
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80102ec:	4491      	add	r9, r2
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80102ee:	44d8      	add	r8, fp
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80102f0:	44ca      	add	sl, r9
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80102f2:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80102f6:	fa1f fa8a 	uxth.w	sl, sl
    if(diff_x || diff_y) {
 80102fa:	ea58 030a 	orrs.w	r3, r8, sl
 80102fe:	d019      	beq.n	8010334 <grid_update+0x7f4>
        lv_obj_invalidate(item);
 8010300:	4628      	mov	r0, r5
 8010302:	f7f4 fd21 	bl	8004d48 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 8010306:	8aab      	ldrh	r3, [r5, #20]
        lv_obj_invalidate(item);
 8010308:	4628      	mov	r0, r5
        item->coords.x1 += diff_x;
 801030a:	4443      	add	r3, r8
 801030c:	82ab      	strh	r3, [r5, #20]
        item->coords.x2 += diff_x;
 801030e:	8b2b      	ldrh	r3, [r5, #24]
 8010310:	4443      	add	r3, r8
 8010312:	832b      	strh	r3, [r5, #24]
        item->coords.y1 += diff_y;
 8010314:	8aeb      	ldrh	r3, [r5, #22]
 8010316:	4453      	add	r3, sl
 8010318:	82eb      	strh	r3, [r5, #22]
        item->coords.y2 += diff_y;
 801031a:	8b6b      	ldrh	r3, [r5, #26]
 801031c:	4453      	add	r3, sl
 801031e:	836b      	strh	r3, [r5, #26]
        lv_obj_invalidate(item);
 8010320:	f7f4 fd12 	bl	8004d48 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, true);
 8010324:	2301      	movs	r3, #1
 8010326:	fa0f f28a 	sxth.w	r2, sl
 801032a:	4628      	mov	r0, r5
 801032c:	fa0f f188 	sxth.w	r1, r8
 8010330:	f7f4 fc61 	bl	8004bf6 <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8010334:	9b05      	ldr	r3, [sp, #20]
 8010336:	3301      	adds	r3, #1
 8010338:	e451      	b.n	800fbde <grid_update+0x9e>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 801033a:	1bf6      	subs	r6, r6, r7
 801033c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8010340:	eb02 0966 	add.w	r9, r2, r6, asr #1
 8010344:	fa0f f989 	sxth.w	r9, r9
            item->h_layout = 0;
 8010348:	e71f      	b.n	801018a <grid_update+0x64a>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801034a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034c:	4628      	mov	r0, r5
 801034e:	441a      	add	r2, r3
 8010350:	fa1f fa82 	uxth.w	sl, r2
 8010354:	f7f4 fba9 	bl	8004aaa <lv_obj_get_height>
            item->h_layout = 0;
 8010358:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801035c:	ebaa 0000 	sub.w	r0, sl, r0
 8010360:	fa0f f980 	sxth.w	r9, r0
            item->h_layout = 0;
 8010364:	e711      	b.n	801018a <grid_update+0x64a>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8010366:	4628      	mov	r0, r5
 8010368:	f7f4 fb9f 	bl	8004aaa <lv_obj_get_height>
 801036c:	42b8      	cmp	r0, r7
 801036e:	f47f af44 	bne.w	80101fa <grid_update+0x6ba>
 8010372:	e76b      	b.n	801024c <grid_update+0x70c>

08010374 <lv_grid_init>:
{
 8010374:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 8010376:	2100      	movs	r1, #0
 8010378:	4820      	ldr	r0, [pc, #128]	; (80103fc <lv_grid_init+0x88>)
 801037a:	f7f4 fb11 	bl	80049a0 <lv_layout_register>
 801037e:	4b20      	ldr	r3, [pc, #128]	; (8010400 <lv_grid_init+0x8c>)
 8010380:	6018      	str	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8010382:	f007 fe2d 	bl	8017fe0 <lv_style_register_prop>
 8010386:	4b1f      	ldr	r3, [pc, #124]	; (8010404 <lv_grid_init+0x90>)
 8010388:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 801038c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801038e:	f007 fe27 	bl	8017fe0 <lv_style_register_prop>
 8010392:	4b1d      	ldr	r3, [pc, #116]	; (8010408 <lv_grid_init+0x94>)
 8010394:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010398:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801039a:	f007 fe21 	bl	8017fe0 <lv_style_register_prop>
 801039e:	4b1b      	ldr	r3, [pc, #108]	; (801040c <lv_grid_init+0x98>)
 80103a0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103a4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103a6:	f007 fe1b 	bl	8017fe0 <lv_style_register_prop>
 80103aa:	4b19      	ldr	r3, [pc, #100]	; (8010410 <lv_grid_init+0x9c>)
 80103ac:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103b0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103b2:	f007 fe15 	bl	8017fe0 <lv_style_register_prop>
 80103b6:	4b17      	ldr	r3, [pc, #92]	; (8010414 <lv_grid_init+0xa0>)
 80103b8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103bc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103be:	f007 fe0f 	bl	8017fe0 <lv_style_register_prop>
 80103c2:	4b15      	ldr	r3, [pc, #84]	; (8010418 <lv_grid_init+0xa4>)
 80103c4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103c8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103ca:	f007 fe09 	bl	8017fe0 <lv_style_register_prop>
 80103ce:	4b13      	ldr	r3, [pc, #76]	; (801041c <lv_grid_init+0xa8>)
 80103d0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103d4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103d6:	f007 fe03 	bl	8017fe0 <lv_style_register_prop>
 80103da:	4b11      	ldr	r3, [pc, #68]	; (8010420 <lv_grid_init+0xac>)
 80103dc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103e0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103e2:	f007 fdfd 	bl	8017fe0 <lv_style_register_prop>
 80103e6:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <lv_grid_init+0xb0>)
 80103e8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103ec:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80103ee:	f007 fdf7 	bl	8017fe0 <lv_style_register_prop>
 80103f2:	4b0d      	ldr	r3, [pc, #52]	; (8010428 <lv_grid_init+0xb4>)
 80103f4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80103f8:	8018      	strh	r0, [r3, #0]
}
 80103fa:	bd08      	pop	{r3, pc}
 80103fc:	0800fb41 	.word	0x0800fb41
 8010400:	2000b4c8 	.word	0x2000b4c8
 8010404:	2000b4c4 	.word	0x2000b4c4
 8010408:	2000b4b8 	.word	0x2000b4b8
 801040c:	2000b4be 	.word	0x2000b4be
 8010410:	2000b4b6 	.word	0x2000b4b6
 8010414:	2000b4c0 	.word	0x2000b4c0
 8010418:	2000b4c6 	.word	0x2000b4c6
 801041c:	2000b4b4 	.word	0x2000b4b4
 8010420:	2000b4ba 	.word	0x2000b4ba
 8010424:	2000b4c2 	.word	0x2000b4c2
 8010428:	2000b4bc 	.word	0x2000b4bc

0801042c <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801042c:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 801042e:	f7ff fa8d 	bl	800f94c <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
#endif
}
 8010432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_grid_init();
 8010436:	f7ff bf9d 	b.w	8010374 <lv_grid_init>

0801043a <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801043a:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801043c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010440:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8010444:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8010448:	f248 0681 	movw	r6, #32897	; 0x8081
 801044c:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801044e:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010452:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010456:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801045a:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801045c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801045e:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010460:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8010462:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010466:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801046a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801046e:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010472:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010476:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010478:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801047a:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801047c:	4372      	muls	r2, r6
    return ret;
 801047e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010482:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8010484:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8010488:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 801048c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801048e <lv_color_white>:
 *  PREDEFINED COLORS
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
 801048e:	f04f 30ff 	mov.w	r0, #4294967295
 8010492:	4770      	bx	lr

08010494 <theme_apply>:
    return inited;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 8010494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 8010496:	4608      	mov	r0, r1
{
 8010498:	460c      	mov	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 801049a:	f7f7 f8c7 	bl	800762c <lv_obj_get_parent>
 801049e:	4602      	mov	r2, r0
 80104a0:	b9a0      	cbnz	r0, 80104cc <theme_apply+0x38>
        lv_obj_add_style(obj, &styles->scr, 0);
 80104a2:	4db7      	ldr	r5, [pc, #732]	; (8010780 <theme_apply+0x2ec>)
 80104a4:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
            return;
        }
        /*Tabview pages*/
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 80104a6:	4620      	mov	r0, r4
 80104a8:	f7f6 fb48 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80104ac:	6829      	ldr	r1, [r5, #0]
 80104ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80104b2:	4620      	mov	r0, r4
 80104b4:	3108      	adds	r1, #8
 80104b6:	f7f6 fb41 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80104ba:	6829      	ldr	r1, [r5, #0]
 80104bc:	4ab1      	ldr	r2, [pc, #708]	; (8010784 <theme_apply+0x2f0>)
 80104be:	3110      	adds	r1, #16
    }
#endif

#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
            lv_obj_add_style(obj, &styles->led, 0);
 80104c0:	4620      	mov	r0, r4
        }
#endif
}
 80104c2:	b003      	add	sp, #12
 80104c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_add_style(obj, &styles->led, 0);
 80104c8:	f7f6 bb38 	b.w	8006b3c <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_obj_class)) {
 80104cc:	49ae      	ldr	r1, [pc, #696]	; (8010788 <theme_apply+0x2f4>)
 80104ce:	4620      	mov	r0, r4
 80104d0:	f7f3 fd78 	bl	8003fc4 <lv_obj_check_type>
 80104d4:	4606      	mov	r6, r0
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d050      	beq.n	801057c <theme_apply+0xe8>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80104da:	4620      	mov	r0, r4
 80104dc:	f7f7 f8a6 	bl	800762c <lv_obj_get_parent>
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 80104e0:	49aa      	ldr	r1, [pc, #680]	; (801078c <theme_apply+0x2f8>)
        lv_obj_t * parent = lv_obj_get_parent(obj);
 80104e2:	4605      	mov	r5, r0
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 80104e4:	f7f3 fd6e 	bl	8003fc4 <lv_obj_check_type>
 80104e8:	4606      	mov	r6, r0
 80104ea:	2800      	cmp	r0, #0
 80104ec:	f040 859d 	bne.w	801102a <theme_apply+0xb96>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 80104f0:	4628      	mov	r0, r5
 80104f2:	4da3      	ldr	r5, [pc, #652]	; (8010780 <theme_apply+0x2ec>)
 80104f4:	f7f7 f89a 	bl	800762c <lv_obj_get_parent>
 80104f8:	49a4      	ldr	r1, [pc, #656]	; (801078c <theme_apply+0x2f8>)
 80104fa:	f7f3 fd63 	bl	8003fc4 <lv_obj_check_type>
 80104fe:	b118      	cbz	r0, 8010508 <theme_apply+0x74>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010500:	6829      	ldr	r1, [r5, #0]
 8010502:	4632      	mov	r2, r6
 8010504:	3180      	adds	r1, #128	; 0x80
 8010506:	e7ce      	b.n	80104a6 <theme_apply+0x12>
        if(lv_obj_get_child_id(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8010508:	4620      	mov	r0, r4
 801050a:	f7f7 f8a5 	bl	8007658 <lv_obj_get_child_id>
 801050e:	9001      	str	r0, [sp, #4]
 8010510:	b980      	cbnz	r0, 8010534 <theme_apply+0xa0>
 8010512:	4620      	mov	r0, r4
 8010514:	f7f7 f88a 	bl	800762c <lv_obj_get_parent>
 8010518:	499d      	ldr	r1, [pc, #628]	; (8010790 <theme_apply+0x2fc>)
 801051a:	f7f3 fd53 	bl	8003fc4 <lv_obj_check_type>
 801051e:	9a01      	ldr	r2, [sp, #4]
 8010520:	b140      	cbz	r0, 8010534 <theme_apply+0xa0>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8010522:	6829      	ldr	r1, [r5, #0]
 8010524:	4620      	mov	r0, r4
 8010526:	3148      	adds	r1, #72	; 0x48
 8010528:	f7f6 fb08 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 801052c:	6829      	ldr	r1, [r5, #0]
 801052e:	9a01      	ldr	r2, [sp, #4]
 8010530:	3170      	adds	r1, #112	; 0x70
 8010532:	e7c5      	b.n	80104c0 <theme_apply+0x2c>
        else if(lv_obj_get_child_id(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8010534:	4620      	mov	r0, r4
 8010536:	f7f7 f88f 	bl	8007658 <lv_obj_get_child_id>
 801053a:	2801      	cmp	r0, #1
 801053c:	d10e      	bne.n	801055c <theme_apply+0xc8>
 801053e:	4620      	mov	r0, r4
 8010540:	f7f7 f874 	bl	800762c <lv_obj_get_parent>
 8010544:	4992      	ldr	r1, [pc, #584]	; (8010790 <theme_apply+0x2fc>)
 8010546:	f7f3 fd3d 	bl	8003fc4 <lv_obj_check_type>
 801054a:	b138      	cbz	r0, 801055c <theme_apply+0xc8>
            lv_obj_add_style(obj, &styles->scr, 0);
 801054c:	2200      	movs	r2, #0
 801054e:	6829      	ldr	r1, [r5, #0]
 8010550:	4620      	mov	r0, r4
 8010552:	f7f6 faf3 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010556:	6829      	ldr	r1, [r5, #0]
 8010558:	2200      	movs	r2, #0
 801055a:	e7d3      	b.n	8010504 <theme_apply+0x70>
        lv_obj_add_style(obj, &styles->card, 0);
 801055c:	6829      	ldr	r1, [r5, #0]
 801055e:	2200      	movs	r2, #0
 8010560:	4620      	mov	r0, r4
 8010562:	3118      	adds	r1, #24
 8010564:	f7f6 faea 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010568:	6829      	ldr	r1, [r5, #0]
 801056a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801056e:	4620      	mov	r0, r4
 8010570:	3108      	adds	r1, #8
 8010572:	f7f6 fae3 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010576:	6829      	ldr	r1, [r5, #0]
 8010578:	f000 bd1b 	b.w	8010fb2 <theme_apply+0xb1e>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 801057c:	4985      	ldr	r1, [pc, #532]	; (8010794 <theme_apply+0x300>)
 801057e:	4620      	mov	r0, r4
 8010580:	f7f3 fd20 	bl	8003fc4 <lv_obj_check_type>
 8010584:	4605      	mov	r5, r0
 8010586:	b3a0      	cbz	r0, 80105f2 <theme_apply+0x15e>
        lv_obj_add_style(obj, &styles->btn, 0);
 8010588:	4d7d      	ldr	r5, [pc, #500]	; (8010780 <theme_apply+0x2ec>)
 801058a:	4632      	mov	r2, r6
 801058c:	4620      	mov	r0, r4
 801058e:	6829      	ldr	r1, [r5, #0]
 8010590:	3120      	adds	r1, #32
 8010592:	f7f6 fad3 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 8010596:	6829      	ldr	r1, [r5, #0]
 8010598:	4632      	mov	r2, r6
 801059a:	4620      	mov	r0, r4
 801059c:	3128      	adds	r1, #40	; 0x28
 801059e:	f7f6 facd 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 80105a2:	6829      	ldr	r1, [r5, #0]
 80105a4:	4632      	mov	r2, r6
 80105a6:	4620      	mov	r0, r4
 80105a8:	31d0      	adds	r1, #208	; 0xd0
 80105aa:	f7f6 fac7 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 80105ae:	6829      	ldr	r1, [r5, #0]
 80105b0:	2220      	movs	r2, #32
 80105b2:	4620      	mov	r0, r4
 80105b4:	3158      	adds	r1, #88	; 0x58
 80105b6:	f7f6 fac1 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 80105ba:	6829      	ldr	r1, [r5, #0]
 80105bc:	2220      	movs	r2, #32
 80105be:	4620      	mov	r0, r4
 80105c0:	31d8      	adds	r1, #216	; 0xd8
 80105c2:	f7f6 fabb 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80105c6:	6829      	ldr	r1, [r5, #0]
 80105c8:	2204      	movs	r2, #4
 80105ca:	4620      	mov	r0, r4
 80105cc:	31a0      	adds	r1, #160	; 0xa0
 80105ce:	f7f6 fab5 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 80105d2:	6829      	ldr	r1, [r5, #0]
 80105d4:	2220      	movs	r2, #32
 80105d6:	4620      	mov	r0, r4
 80105d8:	31c8      	adds	r1, #200	; 0xc8
 80105da:	f7f6 faaf 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 80105de:	6829      	ldr	r1, [r5, #0]
 80105e0:	2201      	movs	r2, #1
 80105e2:	4620      	mov	r0, r4
 80105e4:	3138      	adds	r1, #56	; 0x38
 80105e6:	f7f6 faa9 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 80105ea:	6829      	ldr	r1, [r5, #0]
 80105ec:	2280      	movs	r2, #128	; 0x80
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 80105ee:	3160      	adds	r1, #96	; 0x60
 80105f0:	e00a      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 80105f2:	4969      	ldr	r1, [pc, #420]	; (8010798 <theme_apply+0x304>)
 80105f4:	4620      	mov	r0, r4
 80105f6:	f7f3 fce5 	bl	8003fc4 <lv_obj_check_type>
 80105fa:	4607      	mov	r7, r0
 80105fc:	b1c0      	cbz	r0, 8010630 <theme_apply+0x19c>
        lv_obj_add_style(obj, &styles->line, 0);
 80105fe:	4b60      	ldr	r3, [pc, #384]	; (8010780 <theme_apply+0x2ec>)
 8010600:	462a      	mov	r2, r5
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	f501 71a4 	add.w	r1, r1, #328	; 0x148
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010608:	4620      	mov	r0, r4
 801060a:	f7f6 fa97 	bl	8006b3c <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_tabview_class)) {
 801060e:	495f      	ldr	r1, [pc, #380]	; (801078c <theme_apply+0x2f8>)
 8010610:	4620      	mov	r0, r4
 8010612:	f7f3 fcd7 	bl	8003fc4 <lv_obj_check_type>
 8010616:	2800      	cmp	r0, #0
 8010618:	f000 84d9 	beq.w	8010fce <theme_apply+0xb3a>
        lv_obj_add_style(obj, &styles->scr, 0);
 801061c:	4d58      	ldr	r5, [pc, #352]	; (8010780 <theme_apply+0x2ec>)
 801061e:	2200      	movs	r2, #0
 8010620:	4620      	mov	r0, r4
 8010622:	6829      	ldr	r1, [r5, #0]
 8010624:	f7f6 fa8a 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8010628:	6829      	ldr	r1, [r5, #0]
 801062a:	2200      	movs	r2, #0
 801062c:	3168      	adds	r1, #104	; 0x68
 801062e:	e747      	b.n	80104c0 <theme_apply+0x2c>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8010630:	495a      	ldr	r1, [pc, #360]	; (801079c <theme_apply+0x308>)
 8010632:	4620      	mov	r0, r4
 8010634:	f7f3 fcc6 	bl	8003fc4 <lv_obj_check_type>
 8010638:	4606      	mov	r6, r0
 801063a:	2800      	cmp	r0, #0
 801063c:	f000 80ba 	beq.w	80107b4 <theme_apply+0x320>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 8010640:	4620      	mov	r0, r4
 8010642:	4d4f      	ldr	r5, [pc, #316]	; (8010780 <theme_apply+0x2ec>)
 8010644:	f7f6 fff2 	bl	800762c <lv_obj_get_parent>
 8010648:	4955      	ldr	r1, [pc, #340]	; (80107a0 <theme_apply+0x30c>)
 801064a:	f7f3 fcbb 	bl	8003fc4 <lv_obj_check_type>
 801064e:	4606      	mov	r6, r0
 8010650:	b348      	cbz	r0, 80106a6 <theme_apply+0x212>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 8010652:	6829      	ldr	r1, [r5, #0]
 8010654:	463a      	mov	r2, r7
 8010656:	4620      	mov	r0, r4
 8010658:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 801065c:	f7f6 fa6e 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 8010660:	6829      	ldr	r1, [r5, #0]
 8010662:	463a      	mov	r2, r7
 8010664:	4620      	mov	r0, r4
 8010666:	3188      	adds	r1, #136	; 0x88
 8010668:	f7f6 fa68 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 801066c:	6829      	ldr	r1, [r5, #0]
 801066e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010672:	4620      	mov	r0, r4
 8010674:	3120      	adds	r1, #32
 8010676:	f7f6 fa61 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 801067a:	6829      	ldr	r1, [r5, #0]
 801067c:	4a49      	ldr	r2, [pc, #292]	; (80107a4 <theme_apply+0x310>)
 801067e:	4620      	mov	r0, r4
 8010680:	3158      	adds	r1, #88	; 0x58
 8010682:	f7f6 fa5b 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010686:	6829      	ldr	r1, [r5, #0]
 8010688:	4a47      	ldr	r2, [pc, #284]	; (80107a8 <theme_apply+0x314>)
 801068a:	4620      	mov	r0, r4
 801068c:	3128      	adds	r1, #40	; 0x28
 801068e:	f7f6 fa55 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010692:	6829      	ldr	r1, [r5, #0]
 8010694:	4a45      	ldr	r2, [pc, #276]	; (80107ac <theme_apply+0x318>)
 8010696:	4620      	mov	r0, r4
 8010698:	3130      	adds	r1, #48	; 0x30
 801069a:	f7f6 fa4f 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 801069e:	6829      	ldr	r1, [r5, #0]
 80106a0:	4a43      	ldr	r2, [pc, #268]	; (80107b0 <theme_apply+0x31c>)
 80106a2:	3140      	adds	r1, #64	; 0x40
 80106a4:	e70c      	b.n	80104c0 <theme_apply+0x2c>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 80106a6:	4620      	mov	r0, r4
 80106a8:	f7f6 ffc0 	bl	800762c <lv_obj_get_parent>
 80106ac:	4937      	ldr	r1, [pc, #220]	; (801078c <theme_apply+0x2f8>)
 80106ae:	f7f3 fc89 	bl	8003fc4 <lv_obj_check_type>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 80106b2:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 80106b4:	4602      	mov	r2, r0
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d035      	beq.n	8010726 <theme_apply+0x292>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 80106ba:	4632      	mov	r2, r6
 80106bc:	3150      	adds	r1, #80	; 0x50
 80106be:	4620      	mov	r0, r4
 80106c0:	f7f6 fa3c 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80106c4:	6829      	ldr	r1, [r5, #0]
 80106c6:	2204      	movs	r2, #4
 80106c8:	4620      	mov	r0, r4
 80106ca:	31a0      	adds	r1, #160	; 0xa0
 80106cc:	f7f6 fa36 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 80106d0:	6829      	ldr	r1, [r5, #0]
 80106d2:	2204      	movs	r2, #4
 80106d4:	4620      	mov	r0, r4
 80106d6:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 80106da:	f7f6 fa2f 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 80106de:	6829      	ldr	r1, [r5, #0]
 80106e0:	4a30      	ldr	r2, [pc, #192]	; (80107a4 <theme_apply+0x310>)
 80106e2:	4620      	mov	r0, r4
 80106e4:	3158      	adds	r1, #88	; 0x58
 80106e6:	f7f6 fa29 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 80106ea:	6829      	ldr	r1, [r5, #0]
 80106ec:	4a2e      	ldr	r2, [pc, #184]	; (80107a8 <theme_apply+0x314>)
 80106ee:	4620      	mov	r0, r4
 80106f0:	3130      	adds	r1, #48	; 0x30
 80106f2:	f7f6 fa23 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 80106f6:	6829      	ldr	r1, [r5, #0]
 80106f8:	4a2b      	ldr	r2, [pc, #172]	; (80107a8 <theme_apply+0x314>)
 80106fa:	4620      	mov	r0, r4
 80106fc:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 8010700:	f7f6 fa1c 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010704:	6829      	ldr	r1, [r5, #0]
 8010706:	4a29      	ldr	r2, [pc, #164]	; (80107ac <theme_apply+0x318>)
 8010708:	4620      	mov	r0, r4
 801070a:	31a0      	adds	r1, #160	; 0xa0
 801070c:	f7f6 fa16 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010710:	6829      	ldr	r1, [r5, #0]
 8010712:	4a27      	ldr	r2, [pc, #156]	; (80107b0 <theme_apply+0x31c>)
 8010714:	4620      	mov	r0, r4
 8010716:	31a8      	adds	r1, #168	; 0xa8
 8010718:	f7f6 fa10 	bl	8006b3c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 801071c:	6829      	ldr	r1, [r5, #0]
 801071e:	4a23      	ldr	r2, [pc, #140]	; (80107ac <theme_apply+0x318>)
 8010720:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8010724:	e6cc      	b.n	80104c0 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->card, 0);
 8010726:	3118      	adds	r1, #24
 8010728:	4620      	mov	r0, r4
 801072a:	f7f6 fa07 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801072e:	6829      	ldr	r1, [r5, #0]
 8010730:	2204      	movs	r2, #4
 8010732:	4620      	mov	r0, r4
 8010734:	31a0      	adds	r1, #160	; 0xa0
 8010736:	f7f6 fa01 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801073a:	6829      	ldr	r1, [r5, #0]
 801073c:	2208      	movs	r2, #8
 801073e:	4620      	mov	r0, r4
 8010740:	31a8      	adds	r1, #168	; 0xa8
 8010742:	f7f6 f9fb 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8010746:	6829      	ldr	r1, [r5, #0]
 8010748:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801074c:	4620      	mov	r0, r4
 801074e:	3120      	adds	r1, #32
 8010750:	f7f6 f9f4 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010754:	6829      	ldr	r1, [r5, #0]
 8010756:	4a13      	ldr	r2, [pc, #76]	; (80107a4 <theme_apply+0x310>)
 8010758:	4620      	mov	r0, r4
 801075a:	3158      	adds	r1, #88	; 0x58
 801075c:	f7f6 f9ee 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010760:	6829      	ldr	r1, [r5, #0]
 8010762:	4a11      	ldr	r2, [pc, #68]	; (80107a8 <theme_apply+0x314>)
 8010764:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010766:	4620      	mov	r0, r4
 8010768:	f7f6 f9e8 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 801076c:	6829      	ldr	r1, [r5, #0]
 801076e:	4a0f      	ldr	r2, [pc, #60]	; (80107ac <theme_apply+0x318>)
 8010770:	4620      	mov	r0, r4
 8010772:	31a0      	adds	r1, #160	; 0xa0
 8010774:	f7f6 f9e2 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010778:	6829      	ldr	r1, [r5, #0]
 801077a:	4a0d      	ldr	r2, [pc, #52]	; (80107b0 <theme_apply+0x31c>)
 801077c:	31a8      	adds	r1, #168	; 0xa8
 801077e:	e743      	b.n	8010608 <theme_apply+0x174>
 8010780:	20003198 	.word	0x20003198
 8010784:	00010040 	.word	0x00010040
 8010788:	08025ac8 	.word	0x08025ac8
 801078c:	080261d4 	.word	0x080261d4
 8010790:	08026228 	.word	0x08026228
 8010794:	08029f48 	.word	0x08029f48
 8010798:	0802a040 	.word	0x0802a040
 801079c:	08029f80 	.word	0x08029f80
 80107a0:	0802619c 	.word	0x0802619c
 80107a4:	00050020 	.word	0x00050020
 80107a8:	00050001 	.word	0x00050001
 80107ac:	00050004 	.word	0x00050004
 80107b0:	00050008 	.word	0x00050008
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 80107b4:	49ad      	ldr	r1, [pc, #692]	; (8010a6c <theme_apply+0x5d8>)
 80107b6:	4620      	mov	r0, r4
 80107b8:	f7f3 fc04 	bl	8003fc4 <lv_obj_check_type>
 80107bc:	b320      	cbz	r0, 8010808 <theme_apply+0x374>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 80107be:	4dac      	ldr	r5, [pc, #688]	; (8010a70 <theme_apply+0x5dc>)
 80107c0:	4632      	mov	r2, r6
 80107c2:	4620      	mov	r0, r4
 80107c4:	6829      	ldr	r1, [r5, #0]
 80107c6:	3130      	adds	r1, #48	; 0x30
 80107c8:	f7f6 f9b8 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 80107cc:	6829      	ldr	r1, [r5, #0]
 80107ce:	4632      	mov	r2, r6
 80107d0:	4620      	mov	r0, r4
 80107d2:	31b0      	adds	r1, #176	; 0xb0
 80107d4:	f7f6 f9b2 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80107d8:	6829      	ldr	r1, [r5, #0]
 80107da:	2204      	movs	r2, #4
 80107dc:	4620      	mov	r0, r4
 80107de:	31a0      	adds	r1, #160	; 0xa0
 80107e0:	f7f6 f9ac 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80107e4:	6829      	ldr	r1, [r5, #0]
 80107e6:	2208      	movs	r2, #8
 80107e8:	4620      	mov	r0, r4
 80107ea:	31a8      	adds	r1, #168	; 0xa8
 80107ec:	f7f6 f9a6 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 80107f0:	6829      	ldr	r1, [r5, #0]
 80107f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80107f6:	4620      	mov	r0, r4
 80107f8:	3128      	adds	r1, #40	; 0x28
 80107fa:	f7f6 f99f 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 80107fe:	6829      	ldr	r1, [r5, #0]
 8010800:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010804:	31b0      	adds	r1, #176	; 0xb0
 8010806:	e6ff      	b.n	8010608 <theme_apply+0x174>
 8010808:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 801080a:	4620      	mov	r0, r4
 801080c:	4999      	ldr	r1, [pc, #612]	; (8010a74 <theme_apply+0x5e0>)
 801080e:	f7f3 fbd9 	bl	8003fc4 <lv_obj_check_type>
 8010812:	4606      	mov	r6, r0
 8010814:	2800      	cmp	r0, #0
 8010816:	d03e      	beq.n	8010896 <theme_apply+0x402>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8010818:	4d95      	ldr	r5, [pc, #596]	; (8010a70 <theme_apply+0x5dc>)
 801081a:	4620      	mov	r0, r4
 801081c:	9a01      	ldr	r2, [sp, #4]
 801081e:	6829      	ldr	r1, [r5, #0]
 8010820:	3130      	adds	r1, #48	; 0x30
 8010822:	f7f6 f98b 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010826:	6829      	ldr	r1, [r5, #0]
 8010828:	9a01      	ldr	r2, [sp, #4]
 801082a:	4620      	mov	r0, r4
 801082c:	31b0      	adds	r1, #176	; 0xb0
 801082e:	f7f6 f985 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010832:	6829      	ldr	r1, [r5, #0]
 8010834:	2204      	movs	r2, #4
 8010836:	4620      	mov	r0, r4
 8010838:	31a0      	adds	r1, #160	; 0xa0
 801083a:	f7f6 f97f 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801083e:	6829      	ldr	r1, [r5, #0]
 8010840:	2208      	movs	r2, #8
 8010842:	4620      	mov	r0, r4
 8010844:	31a8      	adds	r1, #168	; 0xa8
 8010846:	f7f6 f979 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 801084a:	6829      	ldr	r1, [r5, #0]
 801084c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010850:	4620      	mov	r0, r4
 8010852:	3128      	adds	r1, #40	; 0x28
 8010854:	f7f6 f972 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010858:	6829      	ldr	r1, [r5, #0]
 801085a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801085e:	4620      	mov	r0, r4
 8010860:	31b0      	adds	r1, #176	; 0xb0
 8010862:	f7f6 f96b 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010866:	6829      	ldr	r1, [r5, #0]
 8010868:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801086c:	4620      	mov	r0, r4
 801086e:	31e8      	adds	r1, #232	; 0xe8
 8010870:	f7f6 f964 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 8010874:	6829      	ldr	r1, [r5, #0]
 8010876:	4a80      	ldr	r2, [pc, #512]	; (8010a78 <theme_apply+0x5e4>)
 8010878:	4620      	mov	r0, r4
 801087a:	31c8      	adds	r1, #200	; 0xc8
 801087c:	f7f6 f95e 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 8010880:	6829      	ldr	r1, [r5, #0]
 8010882:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010886:	4620      	mov	r0, r4
 8010888:	31d0      	adds	r1, #208	; 0xd0
 801088a:	f7f6 f957 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 801088e:	6829      	ldr	r1, [r5, #0]
 8010890:	4a79      	ldr	r2, [pc, #484]	; (8010a78 <theme_apply+0x5e4>)
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8010892:	31d8      	adds	r1, #216	; 0xd8
 8010894:	e6b8      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8010896:	4979      	ldr	r1, [pc, #484]	; (8010a7c <theme_apply+0x5e8>)
 8010898:	4620      	mov	r0, r4
 801089a:	f7f3 fb93 	bl	8003fc4 <lv_obj_check_type>
 801089e:	4607      	mov	r7, r0
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d051      	beq.n	8010948 <theme_apply+0x4b4>
        lv_obj_add_style(obj, &styles->card, 0);
 80108a4:	4d72      	ldr	r5, [pc, #456]	; (8010a70 <theme_apply+0x5dc>)
 80108a6:	4632      	mov	r2, r6
 80108a8:	4620      	mov	r0, r4
 80108aa:	6829      	ldr	r1, [r5, #0]
 80108ac:	3118      	adds	r1, #24
 80108ae:	f7f6 f945 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 80108b2:	6829      	ldr	r1, [r5, #0]
 80108b4:	4632      	mov	r2, r6
 80108b6:	4620      	mov	r0, r4
 80108b8:	3168      	adds	r1, #104	; 0x68
 80108ba:	f7f6 f93f 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 80108be:	6829      	ldr	r1, [r5, #0]
 80108c0:	4632      	mov	r2, r6
 80108c2:	4620      	mov	r0, r4
 80108c4:	31b8      	adds	r1, #184	; 0xb8
 80108c6:	f7f6 f939 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80108ca:	6829      	ldr	r1, [r5, #0]
 80108cc:	2204      	movs	r2, #4
 80108ce:	4620      	mov	r0, r4
 80108d0:	31a0      	adds	r1, #160	; 0xa0
 80108d2:	f7f6 f933 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80108d6:	6829      	ldr	r1, [r5, #0]
 80108d8:	2208      	movs	r2, #8
 80108da:	4620      	mov	r0, r4
 80108dc:	31a8      	adds	r1, #168	; 0xa8
 80108de:	f7f6 f92d 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80108e2:	6829      	ldr	r1, [r5, #0]
 80108e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80108e8:	4620      	mov	r0, r4
 80108ea:	3108      	adds	r1, #8
 80108ec:	f7f6 f926 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80108f0:	6829      	ldr	r1, [r5, #0]
 80108f2:	4a63      	ldr	r2, [pc, #396]	; (8010a80 <theme_apply+0x5ec>)
 80108f4:	4620      	mov	r0, r4
 80108f6:	3110      	adds	r1, #16
 80108f8:	f7f6 f920 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 80108fc:	6829      	ldr	r1, [r5, #0]
 80108fe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010902:	4620      	mov	r0, r4
 8010904:	3150      	adds	r1, #80	; 0x50
 8010906:	f7f6 f919 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 801090a:	6829      	ldr	r1, [r5, #0]
 801090c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010910:	4620      	mov	r0, r4
 8010912:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8010916:	f7f6 f911 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 801091a:	6829      	ldr	r1, [r5, #0]
 801091c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010920:	4620      	mov	r0, r4
 8010922:	3180      	adds	r1, #128	; 0x80
 8010924:	f7f6 f90a 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010928:	6829      	ldr	r1, [r5, #0]
 801092a:	4a56      	ldr	r2, [pc, #344]	; (8010a84 <theme_apply+0x5f0>)
 801092c:	4620      	mov	r0, r4
 801092e:	3158      	adds	r1, #88	; 0x58
 8010930:	f7f6 f904 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010934:	6829      	ldr	r1, [r5, #0]
 8010936:	4a54      	ldr	r2, [pc, #336]	; (8010a88 <theme_apply+0x5f4>)
 8010938:	4620      	mov	r0, r4
 801093a:	3128      	adds	r1, #40	; 0x28
 801093c:	f7f6 f8fe 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010940:	6829      	ldr	r1, [r5, #0]
 8010942:	4a52      	ldr	r2, [pc, #328]	; (8010a8c <theme_apply+0x5f8>)
 8010944:	3138      	adds	r1, #56	; 0x38
 8010946:	e65f      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 8010948:	4951      	ldr	r1, [pc, #324]	; (8010a90 <theme_apply+0x5fc>)
 801094a:	4620      	mov	r0, r4
 801094c:	f7f3 fb3a 	bl	8003fc4 <lv_obj_check_type>
 8010950:	2800      	cmp	r0, #0
 8010952:	d03e      	beq.n	80109d2 <theme_apply+0x53e>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 8010954:	4d46      	ldr	r5, [pc, #280]	; (8010a70 <theme_apply+0x5dc>)
 8010956:	463a      	mov	r2, r7
 8010958:	4620      	mov	r0, r4
 801095a:	6829      	ldr	r1, [r5, #0]
 801095c:	3188      	adds	r1, #136	; 0x88
 801095e:	f7f6 f8ed 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010962:	6829      	ldr	r1, [r5, #0]
 8010964:	2204      	movs	r2, #4
 8010966:	4620      	mov	r0, r4
 8010968:	31a0      	adds	r1, #160	; 0xa0
 801096a:	f7f6 f8e7 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 801096e:	6829      	ldr	r1, [r5, #0]
 8010970:	4a48      	ldr	r2, [pc, #288]	; (8010a94 <theme_apply+0x600>)
 8010972:	4620      	mov	r0, r4
 8010974:	3160      	adds	r1, #96	; 0x60
 8010976:	f7f6 f8e1 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 801097a:	6829      	ldr	r1, [r5, #0]
 801097c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010980:	4620      	mov	r0, r4
 8010982:	f501 7198 	add.w	r1, r1, #304	; 0x130
 8010986:	f7f6 f8d9 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801098a:	6829      	ldr	r1, [r5, #0]
 801098c:	4a42      	ldr	r2, [pc, #264]	; (8010a98 <theme_apply+0x604>)
 801098e:	4620      	mov	r0, r4
 8010990:	3128      	adds	r1, #40	; 0x28
 8010992:	f7f6 f8d3 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8010996:	6829      	ldr	r1, [r5, #0]
 8010998:	4a3f      	ldr	r2, [pc, #252]	; (8010a98 <theme_apply+0x604>)
 801099a:	4620      	mov	r0, r4
 801099c:	f501 719c 	add.w	r1, r1, #312	; 0x138
 80109a0:	f7f6 f8cc 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 80109a4:	6829      	ldr	r1, [r5, #0]
 80109a6:	4a3d      	ldr	r2, [pc, #244]	; (8010a9c <theme_apply+0x608>)
 80109a8:	4620      	mov	r0, r4
 80109aa:	3158      	adds	r1, #88	; 0x58
 80109ac:	f7f6 f8c6 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 80109b0:	6829      	ldr	r1, [r5, #0]
 80109b2:	4a3a      	ldr	r2, [pc, #232]	; (8010a9c <theme_apply+0x608>)
 80109b4:	4620      	mov	r0, r4
 80109b6:	31c8      	adds	r1, #200	; 0xc8
 80109b8:	f7f6 f8c0 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 80109bc:	6829      	ldr	r1, [r5, #0]
 80109be:	4a37      	ldr	r2, [pc, #220]	; (8010a9c <theme_apply+0x608>)
 80109c0:	4620      	mov	r0, r4
 80109c2:	31d8      	adds	r1, #216	; 0xd8
 80109c4:	f7f6 f8ba 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 80109c8:	6829      	ldr	r1, [r5, #0]
 80109ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80109ce:	31d0      	adds	r1, #208	; 0xd0
 80109d0:	e61a      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 80109d2:	4933      	ldr	r1, [pc, #204]	; (8010aa0 <theme_apply+0x60c>)
 80109d4:	4620      	mov	r0, r4
 80109d6:	f7f3 faf5 	bl	8003fc4 <lv_obj_check_type>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d064      	beq.n	8010aa8 <theme_apply+0x614>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 80109de:	4d24      	ldr	r5, [pc, #144]	; (8010a70 <theme_apply+0x5dc>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	4620      	mov	r0, r4
 80109e4:	6829      	ldr	r1, [r5, #0]
 80109e6:	3148      	adds	r1, #72	; 0x48
 80109e8:	f7f6 f8a8 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 80109ec:	6829      	ldr	r1, [r5, #0]
 80109ee:	2200      	movs	r2, #0
 80109f0:	4620      	mov	r0, r4
 80109f2:	31b0      	adds	r1, #176	; 0xb0
 80109f4:	f7f6 f8a2 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 80109f8:	6829      	ldr	r1, [r5, #0]
 80109fa:	2280      	movs	r2, #128	; 0x80
 80109fc:	4620      	mov	r0, r4
 80109fe:	3160      	adds	r1, #96	; 0x60
 8010a00:	f7f6 f89c 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010a04:	6829      	ldr	r1, [r5, #0]
 8010a06:	2204      	movs	r2, #4
 8010a08:	4620      	mov	r0, r4
 8010a0a:	31a0      	adds	r1, #160	; 0xa0
 8010a0c:	f7f6 f896 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010a10:	6829      	ldr	r1, [r5, #0]
 8010a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010a16:	4620      	mov	r0, r4
 8010a18:	3128      	adds	r1, #40	; 0x28
 8010a1a:	f7f6 f88f 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010a1e:	6829      	ldr	r1, [r5, #0]
 8010a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010a24:	4620      	mov	r0, r4
 8010a26:	31b0      	adds	r1, #176	; 0xb0
 8010a28:	f7f6 f888 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8010a2c:	6829      	ldr	r1, [r5, #0]
 8010a2e:	4a19      	ldr	r2, [pc, #100]	; (8010a94 <theme_apply+0x600>)
 8010a30:	4620      	mov	r0, r4
 8010a32:	3160      	adds	r1, #96	; 0x60
 8010a34:	f7f6 f882 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010a38:	6829      	ldr	r1, [r5, #0]
 8010a3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010a3e:	4620      	mov	r0, r4
 8010a40:	31e8      	adds	r1, #232	; 0xe8
 8010a42:	f7f6 f87b 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8010a46:	6829      	ldr	r1, [r5, #0]
 8010a48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	3150      	adds	r1, #80	; 0x50
 8010a50:	f7f6 f874 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 8010a54:	6829      	ldr	r1, [r5, #0]
 8010a56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8010a60:	f7f6 f86c 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8010a64:	6829      	ldr	r1, [r5, #0]
 8010a66:	4a0f      	ldr	r2, [pc, #60]	; (8010aa4 <theme_apply+0x610>)
 8010a68:	e5c1      	b.n	80105ee <theme_apply+0x15a>
 8010a6a:	bf00      	nop
 8010a6c:	08029f2c 	.word	0x08029f2c
 8010a70:	20003198 	.word	0x20003198
 8010a74:	0802a0c4 	.word	0x0802a0c4
 8010a78:	00030020 	.word	0x00030020
 8010a7c:	0802a0fc 	.word	0x0802a0fc
 8010a80:	00010040 	.word	0x00010040
 8010a84:	00050020 	.word	0x00050020
 8010a88:	00050004 	.word	0x00050004
 8010a8c:	00050008 	.word	0x00050008
 8010a90:	08029fa8 	.word	0x08029fa8
 8010a94:	00020080 	.word	0x00020080
 8010a98:	00020001 	.word	0x00020001
 8010a9c:	00020020 	.word	0x00020020
 8010aa0:	0802a0e0 	.word	0x0802a0e0
 8010aa4:	00030080 	.word	0x00030080
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 8010aa8:	49ae      	ldr	r1, [pc, #696]	; (8010d64 <theme_apply+0x8d0>)
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f7f3 fa8a 	bl	8003fc4 <lv_obj_check_type>
 8010ab0:	4606      	mov	r6, r0
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d03e      	beq.n	8010b34 <theme_apply+0x6a0>
        lv_obj_add_style(obj, &styles->card, 0);
 8010ab6:	4dac      	ldr	r5, [pc, #688]	; (8010d68 <theme_apply+0x8d4>)
 8010ab8:	2200      	movs	r2, #0
 8010aba:	4620      	mov	r0, r4
 8010abc:	6829      	ldr	r1, [r5, #0]
 8010abe:	3118      	adds	r1, #24
 8010ac0:	f7f6 f83c 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010ac4:	6829      	ldr	r1, [r5, #0]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	4620      	mov	r0, r4
 8010aca:	3178      	adds	r1, #120	; 0x78
 8010acc:	f7f6 f836 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 8010ad0:	6829      	ldr	r1, [r5, #0]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f501 7190 	add.w	r1, r1, #288	; 0x120
 8010ada:	f7f6 f82f 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010ade:	6829      	ldr	r1, [r5, #0]
 8010ae0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	3108      	adds	r1, #8
 8010ae8:	f7f6 f828 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010aec:	6829      	ldr	r1, [r5, #0]
 8010aee:	4a9f      	ldr	r2, [pc, #636]	; (8010d6c <theme_apply+0x8d8>)
 8010af0:	4620      	mov	r0, r4
 8010af2:	3110      	adds	r1, #16
 8010af4:	f7f6 f822 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 8010af8:	6829      	ldr	r1, [r5, #0]
 8010afa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010afe:	4620      	mov	r0, r4
 8010b00:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8010b04:	f7f6 f81a 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 8010b08:	6829      	ldr	r1, [r5, #0]
 8010b0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f501 7188 	add.w	r1, r1, #272	; 0x110
 8010b14:	f7f6 f812 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 8010b18:	6829      	ldr	r1, [r5, #0]
 8010b1a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8010b24:	f7f6 f80a 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 8010b28:	6829      	ldr	r1, [r5, #0]
 8010b2a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8010b2e:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8010b32:	e569      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 8010b34:	498e      	ldr	r1, [pc, #568]	; (8010d70 <theme_apply+0x8dc>)
 8010b36:	4620      	mov	r0, r4
 8010b38:	f7f3 fa44 	bl	8003fc4 <lv_obj_check_type>
 8010b3c:	b348      	cbz	r0, 8010b92 <theme_apply+0x6fe>
        lv_obj_add_style(obj, &styles->card, 0);
 8010b3e:	4d8a      	ldr	r5, [pc, #552]	; (8010d68 <theme_apply+0x8d4>)
 8010b40:	4632      	mov	r2, r6
 8010b42:	4620      	mov	r0, r4
 8010b44:	6829      	ldr	r1, [r5, #0]
 8010b46:	3118      	adds	r1, #24
 8010b48:	f7f5 fff8 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 8010b4c:	6829      	ldr	r1, [r5, #0]
 8010b4e:	4632      	mov	r2, r6
 8010b50:	4620      	mov	r0, r4
 8010b52:	31e0      	adds	r1, #224	; 0xe0
 8010b54:	f7f5 fff2 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8010b58:	6829      	ldr	r1, [r5, #0]
 8010b5a:	4632      	mov	r2, r6
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	3190      	adds	r1, #144	; 0x90
 8010b60:	f7f5 ffec 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 8010b64:	6829      	ldr	r1, [r5, #0]
 8010b66:	4632      	mov	r2, r6
 8010b68:	4620      	mov	r0, r4
 8010b6a:	3198      	adds	r1, #152	; 0x98
 8010b6c:	f7f5 ffe6 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010b70:	6829      	ldr	r1, [r5, #0]
 8010b72:	2204      	movs	r2, #4
 8010b74:	4620      	mov	r0, r4
 8010b76:	31a0      	adds	r1, #160	; 0xa0
 8010b78:	f7f5 ffe0 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010b7c:	6829      	ldr	r1, [r5, #0]
 8010b7e:	2208      	movs	r2, #8
 8010b80:	4620      	mov	r0, r4
 8010b82:	31a8      	adds	r1, #168	; 0xa8
 8010b84:	f7f5 ffda 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 8010b88:	6829      	ldr	r1, [r5, #0]
 8010b8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 8010b8e:	3128      	adds	r1, #40	; 0x28
 8010b90:	e53a      	b.n	8010608 <theme_apply+0x174>
 8010b92:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 8010b94:	4620      	mov	r0, r4
 8010b96:	4977      	ldr	r1, [pc, #476]	; (8010d74 <theme_apply+0x8e0>)
 8010b98:	f7f3 fa14 	bl	8003fc4 <lv_obj_check_type>
 8010b9c:	4606      	mov	r6, r0
 8010b9e:	b370      	cbz	r0, 8010bfe <theme_apply+0x76a>
        lv_obj_add_style(obj, &styles->card, 0);
 8010ba0:	4d71      	ldr	r5, [pc, #452]	; (8010d68 <theme_apply+0x8d4>)
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	9a01      	ldr	r2, [sp, #4]
 8010ba6:	6829      	ldr	r1, [r5, #0]
 8010ba8:	3118      	adds	r1, #24
 8010baa:	f7f5 ffc7 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010bae:	6829      	ldr	r1, [r5, #0]
 8010bb0:	9a01      	ldr	r2, [sp, #4]
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	3178      	adds	r1, #120	; 0x78
 8010bb6:	f7f5 ffc1 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8010bba:	6829      	ldr	r1, [r5, #0]
 8010bbc:	9a01      	ldr	r2, [sp, #4]
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	31d0      	adds	r1, #208	; 0xd0
 8010bc2:	f7f5 ffbb 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 8010bc6:	6829      	ldr	r1, [r5, #0]
 8010bc8:	2220      	movs	r2, #32
 8010bca:	4620      	mov	r0, r4
 8010bcc:	31d8      	adds	r1, #216	; 0xd8
 8010bce:	f7f5 ffb5 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8010bd2:	6829      	ldr	r1, [r5, #0]
 8010bd4:	2220      	movs	r2, #32
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	3158      	adds	r1, #88	; 0x58
 8010bda:	f7f5 ffaf 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010bde:	6829      	ldr	r1, [r5, #0]
 8010be0:	2204      	movs	r2, #4
 8010be2:	4620      	mov	r0, r4
 8010be4:	31a0      	adds	r1, #160	; 0xa0
 8010be6:	f7f5 ffa9 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010bea:	6829      	ldr	r1, [r5, #0]
 8010bec:	2208      	movs	r2, #8
 8010bee:	4620      	mov	r0, r4
 8010bf0:	31a8      	adds	r1, #168	; 0xa8
 8010bf2:	f7f5 ffa3 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8010bf6:	6829      	ldr	r1, [r5, #0]
 8010bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010bfc:	e649      	b.n	8010892 <theme_apply+0x3fe>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 8010bfe:	495e      	ldr	r1, [pc, #376]	; (8010d78 <theme_apply+0x8e4>)
 8010c00:	4620      	mov	r0, r4
 8010c02:	f7f3 f9df 	bl	8003fc4 <lv_obj_check_type>
 8010c06:	4607      	mov	r7, r0
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d037      	beq.n	8010c7c <theme_apply+0x7e8>
        lv_obj_add_style(obj, &styles->card, 0);
 8010c0c:	4d56      	ldr	r5, [pc, #344]	; (8010d68 <theme_apply+0x8d4>)
 8010c0e:	4632      	mov	r2, r6
 8010c10:	4620      	mov	r0, r4
 8010c12:	6829      	ldr	r1, [r5, #0]
 8010c14:	3118      	adds	r1, #24
 8010c16:	f7f5 ff91 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 8010c1a:	6829      	ldr	r1, [r5, #0]
 8010c1c:	4632      	mov	r2, r6
 8010c1e:	4620      	mov	r0, r4
 8010c20:	31c0      	adds	r1, #192	; 0xc0
 8010c22:	f7f5 ff8b 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8010c26:	6829      	ldr	r1, [r5, #0]
 8010c28:	4632      	mov	r2, r6
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	3190      	adds	r1, #144	; 0x90
 8010c2e:	f7f5 ff85 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 8010c32:	6829      	ldr	r1, [r5, #0]
 8010c34:	4632      	mov	r2, r6
 8010c36:	4620      	mov	r0, r4
 8010c38:	f501 7194 	add.w	r1, r1, #296	; 0x128
 8010c3c:	f7f5 ff7e 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010c40:	6829      	ldr	r1, [r5, #0]
 8010c42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010c46:	4620      	mov	r0, r4
 8010c48:	3108      	adds	r1, #8
 8010c4a:	f7f5 ff77 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010c4e:	6829      	ldr	r1, [r5, #0]
 8010c50:	4a46      	ldr	r2, [pc, #280]	; (8010d6c <theme_apply+0x8d8>)
 8010c52:	4620      	mov	r0, r4
 8010c54:	3110      	adds	r1, #16
 8010c56:	f7f5 ff71 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 8010c5a:	6829      	ldr	r1, [r5, #0]
 8010c5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010c60:	4620      	mov	r0, r4
 8010c62:	3150      	adds	r1, #80	; 0x50
 8010c64:	f7f5 ff6a 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 8010c68:	6829      	ldr	r1, [r5, #0]
 8010c6a:	4a44      	ldr	r2, [pc, #272]	; (8010d7c <theme_apply+0x8e8>)
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	3128      	adds	r1, #40	; 0x28
 8010c70:	f7f5 ff64 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 8010c74:	6829      	ldr	r1, [r5, #0]
 8010c76:	4a42      	ldr	r2, [pc, #264]	; (8010d80 <theme_apply+0x8ec>)
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8010c78:	3158      	adds	r1, #88	; 0x58
 8010c7a:	e4c5      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 8010c7c:	4941      	ldr	r1, [pc, #260]	; (8010d84 <theme_apply+0x8f0>)
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f7f3 f9a0 	bl	8003fc4 <lv_obj_check_type>
 8010c84:	b1d0      	cbz	r0, 8010cbc <theme_apply+0x828>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 8010c86:	4d38      	ldr	r5, [pc, #224]	; (8010d68 <theme_apply+0x8d4>)
 8010c88:	463a      	mov	r2, r7
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	6829      	ldr	r1, [r5, #0]
 8010c8e:	31f8      	adds	r1, #248	; 0xf8
 8010c90:	f7f5 ff54 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 8010c94:	6829      	ldr	r1, [r5, #0]
 8010c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	31f8      	adds	r1, #248	; 0xf8
 8010c9e:	f7f5 ff4d 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 8010ca2:	6829      	ldr	r1, [r5, #0]
 8010ca4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010ca8:	4620      	mov	r0, r4
 8010caa:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8010cae:	f7f5 ff45 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010cb2:	6829      	ldr	r1, [r5, #0]
 8010cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010cb8:	31e8      	adds	r1, #232	; 0xe8
 8010cba:	e4a5      	b.n	8010608 <theme_apply+0x174>
 8010cbc:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	4931      	ldr	r1, [pc, #196]	; (8010d88 <theme_apply+0x8f4>)
 8010cc2:	f7f3 f97f 	bl	8003fc4 <lv_obj_check_type>
 8010cc6:	4607      	mov	r7, r0
 8010cc8:	b190      	cbz	r0, 8010cf0 <theme_apply+0x85c>
        lv_obj_add_style(obj, &styles->card, 0);
 8010cca:	4d27      	ldr	r5, [pc, #156]	; (8010d68 <theme_apply+0x8d4>)
 8010ccc:	4620      	mov	r0, r4
 8010cce:	9a01      	ldr	r2, [sp, #4]
 8010cd0:	6829      	ldr	r1, [r5, #0]
 8010cd2:	3118      	adds	r1, #24
 8010cd4:	f7f5 ff32 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010cd8:	6829      	ldr	r1, [r5, #0]
 8010cda:	9a01      	ldr	r2, [sp, #4]
 8010cdc:	4620      	mov	r0, r4
 8010cde:	31b0      	adds	r1, #176	; 0xb0
 8010ce0:	f7f5 ff2c 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 8010ce4:	6829      	ldr	r1, [r5, #0]
 8010ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010cea:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 8010cee:	e48b      	b.n	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 8010cf0:	4926      	ldr	r1, [pc, #152]	; (8010d8c <theme_apply+0x8f8>)
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f7f3 f966 	bl	8003fc4 <lv_obj_check_type>
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d04b      	beq.n	8010d94 <theme_apply+0x900>
        lv_obj_add_style(obj, &styles->card, 0);
 8010cfc:	4d1a      	ldr	r5, [pc, #104]	; (8010d68 <theme_apply+0x8d4>)
 8010cfe:	463a      	mov	r2, r7
 8010d00:	4620      	mov	r0, r4
 8010d02:	6829      	ldr	r1, [r5, #0]
 8010d04:	3118      	adds	r1, #24
 8010d06:	f7f5 ff19 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010d0a:	6829      	ldr	r1, [r5, #0]
 8010d0c:	463a      	mov	r2, r7
 8010d0e:	4620      	mov	r0, r4
 8010d10:	3178      	adds	r1, #120	; 0x78
 8010d12:	f7f5 ff13 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010d16:	6829      	ldr	r1, [r5, #0]
 8010d18:	2204      	movs	r2, #4
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	31a0      	adds	r1, #160	; 0xa0
 8010d1e:	f7f5 ff0d 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010d22:	6829      	ldr	r1, [r5, #0]
 8010d24:	2208      	movs	r2, #8
 8010d26:	4620      	mov	r0, r4
 8010d28:	31a8      	adds	r1, #168	; 0xa8
 8010d2a:	f7f5 ff07 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010d2e:	6829      	ldr	r1, [r5, #0]
 8010d30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010d34:	4620      	mov	r0, r4
 8010d36:	3108      	adds	r1, #8
 8010d38:	f7f5 ff00 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010d3c:	6829      	ldr	r1, [r5, #0]
 8010d3e:	4a0b      	ldr	r2, [pc, #44]	; (8010d6c <theme_apply+0x8d8>)
 8010d40:	4620      	mov	r0, r4
 8010d42:	3110      	adds	r1, #16
 8010d44:	f7f5 fefa 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 8010d48:	6829      	ldr	r1, [r5, #0]
 8010d4a:	4a11      	ldr	r2, [pc, #68]	; (8010d90 <theme_apply+0x8fc>)
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8010d52:	f7f5 fef3 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 8010d56:	6829      	ldr	r1, [r5, #0]
 8010d58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010d5c:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 8010d60:	e452      	b.n	8010608 <theme_apply+0x174>
 8010d62:	bf00      	nop
 8010d64:	08025c9c 	.word	0x08025c9c
 8010d68:	20003198 	.word	0x20003198
 8010d6c:	00010040 	.word	0x00010040
 8010d70:	0802a08c 	.word	0x0802a08c
 8010d74:	08029fe4 	.word	0x08029fe4
 8010d78:	0802a000 	.word	0x0802a000
 8010d7c:	00040001 	.word	0x00040001
 8010d80:	00040020 	.word	0x00040020
 8010d84:	08029f10 	.word	0x08029f10
 8010d88:	08026180 	.word	0x08026180
 8010d8c:	0802a11c 	.word	0x0802a11c
 8010d90:	00070002 	.word	0x00070002
 8010d94:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_calendar_class)) {
 8010d96:	4620      	mov	r0, r4
 8010d98:	49a5      	ldr	r1, [pc, #660]	; (8011030 <theme_apply+0xb9c>)
 8010d9a:	f7f3 f913 	bl	8003fc4 <lv_obj_check_type>
 8010d9e:	4607      	mov	r7, r0
 8010da0:	b358      	cbz	r0, 8010dfa <theme_apply+0x966>
        lv_obj_add_style(obj, &styles->card, 0);
 8010da2:	4da4      	ldr	r5, [pc, #656]	; (8011034 <theme_apply+0xba0>)
 8010da4:	4620      	mov	r0, r4
 8010da6:	9a01      	ldr	r2, [sp, #4]
 8010da8:	6829      	ldr	r1, [r5, #0]
 8010daa:	3118      	adds	r1, #24
 8010dac:	f7f5 fec6 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->calendar_bg, 0);
 8010db0:	6829      	ldr	r1, [r5, #0]
 8010db2:	9a01      	ldr	r2, [sp, #4]
 8010db4:	4620      	mov	r0, r4
 8010db6:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 8010dba:	f7f5 febf 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010dbe:	6829      	ldr	r1, [r5, #0]
 8010dc0:	2204      	movs	r2, #4
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	31a0      	adds	r1, #160	; 0xa0
 8010dc6:	f7f5 feb9 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010dca:	6829      	ldr	r1, [r5, #0]
 8010dcc:	2208      	movs	r2, #8
 8010dce:	4620      	mov	r0, r4
 8010dd0:	31a8      	adds	r1, #168	; 0xa8
 8010dd2:	f7f5 feb3 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->calendar_day, LV_PART_ITEMS);
 8010dd6:	6829      	ldr	r1, [r5, #0]
 8010dd8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8010de2:	f7f5 feab 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010de6:	6829      	ldr	r1, [r5, #0]
 8010de8:	4a93      	ldr	r2, [pc, #588]	; (8011038 <theme_apply+0xba4>)
 8010dea:	4620      	mov	r0, r4
 8010dec:	3158      	adds	r1, #88	; 0x58
 8010dee:	f7f5 fea5 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8010df2:	6829      	ldr	r1, [r5, #0]
 8010df4:	4a91      	ldr	r2, [pc, #580]	; (801103c <theme_apply+0xba8>)
 8010df6:	3160      	adds	r1, #96	; 0x60
 8010df8:	e4b5      	b.n	8010766 <theme_apply+0x2d2>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 8010dfa:	4991      	ldr	r1, [pc, #580]	; (8011040 <theme_apply+0xbac>)
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f7f3 f8e1 	bl	8003fc4 <lv_obj_check_type>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d03c      	beq.n	8010e80 <theme_apply+0x9ec>
        lv_obj_add_style(obj, &styles->scr, 0);
 8010e06:	4d8b      	ldr	r5, [pc, #556]	; (8011034 <theme_apply+0xba0>)
 8010e08:	463a      	mov	r2, r7
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	6829      	ldr	r1, [r5, #0]
 8010e0e:	f7f5 fe95 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 8010e12:	4b8c      	ldr	r3, [pc, #560]	; (8011044 <theme_apply+0xbb0>)
 8010e14:	6829      	ldr	r1, [r5, #0]
 8010e16:	2200      	movs	r2, #0
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	bf0c      	ite	eq
 8010e20:	3178      	addeq	r1, #120	; 0x78
 8010e22:	3170      	addne	r1, #112	; 0x70
 8010e24:	f7f5 fe8a 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010e28:	6829      	ldr	r1, [r5, #0]
 8010e2a:	2204      	movs	r2, #4
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	31a0      	adds	r1, #160	; 0xa0
 8010e30:	f7f5 fe84 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010e34:	6829      	ldr	r1, [r5, #0]
 8010e36:	2208      	movs	r2, #8
 8010e38:	4620      	mov	r0, r4
 8010e3a:	31a8      	adds	r1, #168	; 0xa8
 8010e3c:	f7f5 fe7e 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8010e40:	6829      	ldr	r1, [r5, #0]
 8010e42:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010e46:	4620      	mov	r0, r4
 8010e48:	3120      	adds	r1, #32
 8010e4a:	f7f5 fe77 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8010e4e:	6829      	ldr	r1, [r5, #0]
 8010e50:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010e54:	4620      	mov	r0, r4
 8010e56:	3150      	adds	r1, #80	; 0x50
 8010e58:	f7f5 fe70 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 8010e5c:	6829      	ldr	r1, [r5, #0]
 8010e5e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010e62:	4620      	mov	r0, r4
 8010e64:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 8010e68:	f7f5 fe68 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010e6c:	6829      	ldr	r1, [r5, #0]
 8010e6e:	4a72      	ldr	r2, [pc, #456]	; (8011038 <theme_apply+0xba4>)
 8010e70:	4620      	mov	r0, r4
 8010e72:	3158      	adds	r1, #88	; 0x58
 8010e74:	f7f5 fe62 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010e78:	6829      	ldr	r1, [r5, #0]
 8010e7a:	4a73      	ldr	r2, [pc, #460]	; (8011048 <theme_apply+0xbb4>)
 8010e7c:	3148      	adds	r1, #72	; 0x48
 8010e7e:	e472      	b.n	8010766 <theme_apply+0x2d2>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 8010e80:	4972      	ldr	r1, [pc, #456]	; (801104c <theme_apply+0xbb8>)
 8010e82:	4620      	mov	r0, r4
 8010e84:	f7f3 f89e 	bl	8003fc4 <lv_obj_check_type>
 8010e88:	b160      	cbz	r0, 8010ea4 <theme_apply+0xa10>
        lv_obj_add_style(obj, &styles->card, 0);
 8010e8a:	4d6a      	ldr	r5, [pc, #424]	; (8011034 <theme_apply+0xba0>)
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	4620      	mov	r0, r4
 8010e90:	6829      	ldr	r1, [r5, #0]
 8010e92:	3118      	adds	r1, #24
 8010e94:	f7f5 fe52 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 8010e98:	6829      	ldr	r1, [r5, #0]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 8010ea0:	f7ff bb01 	b.w	80104a6 <theme_apply+0x12>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 8010ea4:	496a      	ldr	r1, [pc, #424]	; (8011050 <theme_apply+0xbbc>)
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f7f3 f88c 	bl	8003fc4 <lv_obj_check_type>
 8010eac:	b160      	cbz	r0, 8010ec8 <theme_apply+0xa34>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8010eae:	4d61      	ldr	r5, [pc, #388]	; (8011034 <theme_apply+0xba0>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	6829      	ldr	r1, [r5, #0]
 8010eb6:	3148      	adds	r1, #72	; 0x48
 8010eb8:	f7f5 fe40 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 8010ebc:	6829      	ldr	r1, [r5, #0]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8010ec4:	f7ff bba0 	b.w	8010608 <theme_apply+0x174>
 8010ec8:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4961      	ldr	r1, [pc, #388]	; (8011054 <theme_apply+0xbc0>)
 8010ece:	f7f3 f879 	bl	8003fc4 <lv_obj_check_type>
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	b320      	cbz	r0, 8010f20 <theme_apply+0xa8c>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8010ed6:	4d57      	ldr	r5, [pc, #348]	; (8011034 <theme_apply+0xba0>)
 8010ed8:	4620      	mov	r0, r4
 8010eda:	9a01      	ldr	r2, [sp, #4]
 8010edc:	6829      	ldr	r1, [r5, #0]
 8010ede:	3150      	adds	r1, #80	; 0x50
 8010ee0:	f7f5 fe2c 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 8010ee4:	6829      	ldr	r1, [r5, #0]
 8010ee6:	9a01      	ldr	r2, [sp, #4]
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 8010eee:	f7f5 fe25 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 8010ef2:	6829      	ldr	r1, [r5, #0]
 8010ef4:	2204      	movs	r2, #4
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	3128      	adds	r1, #40	; 0x28
 8010efa:	f7f5 fe1f 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 8010efe:	6829      	ldr	r1, [r5, #0]
 8010f00:	2204      	movs	r2, #4
 8010f02:	4620      	mov	r0, r4
 8010f04:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8010f08:	f7f5 fe18 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 8010f0c:	6829      	ldr	r1, [r5, #0]
 8010f0e:	2220      	movs	r2, #32
 8010f10:	4620      	mov	r0, r4
 8010f12:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8010f16:	f7f5 fe11 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8010f1a:	6829      	ldr	r1, [r5, #0]
 8010f1c:	2220      	movs	r2, #32
 8010f1e:	e6ab      	b.n	8010c78 <theme_apply+0x7e4>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 8010f20:	494d      	ldr	r1, [pc, #308]	; (8011058 <theme_apply+0xbc4>)
 8010f22:	4620      	mov	r0, r4
 8010f24:	f7f3 f84e 	bl	8003fc4 <lv_obj_check_type>
 8010f28:	b160      	cbz	r0, 8010f44 <theme_apply+0xab0>
        lv_obj_add_style(obj, &styles->card, 0);
 8010f2a:	4e42      	ldr	r6, [pc, #264]	; (8011034 <theme_apply+0xba0>)
 8010f2c:	462a      	mov	r2, r5
 8010f2e:	4620      	mov	r0, r4
 8010f30:	6831      	ldr	r1, [r6, #0]
 8010f32:	3118      	adds	r1, #24
 8010f34:	f7f5 fe02 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 8010f38:	6831      	ldr	r1, [r6, #0]
 8010f3a:	462a      	mov	r2, r5
 8010f3c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8010f40:	f7ff babe 	b.w	80104c0 <theme_apply+0x2c>
 8010f44:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 8010f46:	4620      	mov	r0, r4
 8010f48:	4944      	ldr	r1, [pc, #272]	; (801105c <theme_apply+0xbc8>)
 8010f4a:	f7f3 f83b 	bl	8003fc4 <lv_obj_check_type>
 8010f4e:	4605      	mov	r5, r0
 8010f50:	b1e0      	cbz	r0, 8010f8c <theme_apply+0xaf8>
        lv_obj_add_style(obj, &styles->card, 0);
 8010f52:	4d38      	ldr	r5, [pc, #224]	; (8011034 <theme_apply+0xba0>)
 8010f54:	4620      	mov	r0, r4
 8010f56:	9a01      	ldr	r2, [sp, #4]
 8010f58:	6829      	ldr	r1, [r5, #0]
 8010f5a:	3118      	adds	r1, #24
 8010f5c:	f7f5 fdee 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010f60:	6829      	ldr	r1, [r5, #0]
 8010f62:	9a01      	ldr	r2, [sp, #4]
 8010f64:	4620      	mov	r0, r4
 8010f66:	3178      	adds	r1, #120	; 0x78
 8010f68:	f7f5 fde8 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010f6c:	6829      	ldr	r1, [r5, #0]
 8010f6e:	2204      	movs	r2, #4
 8010f70:	4620      	mov	r0, r4
 8010f72:	31a0      	adds	r1, #160	; 0xa0
 8010f74:	f7f5 fde2 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010f78:	6829      	ldr	r1, [r5, #0]
 8010f7a:	2208      	movs	r2, #8
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	31a8      	adds	r1, #168	; 0xa8
 8010f80:	f7f5 fddc 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 8010f84:	6829      	ldr	r1, [r5, #0]
 8010f86:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8010f8a:	e600      	b.n	8010b8e <theme_apply+0x6fa>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 8010f8c:	4934      	ldr	r1, [pc, #208]	; (8011060 <theme_apply+0xbcc>)
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f7f3 f818 	bl	8003fc4 <lv_obj_check_type>
 8010f94:	b188      	cbz	r0, 8010fba <theme_apply+0xb26>
        lv_obj_add_style(obj, &styles->scr, 0);
 8010f96:	4e27      	ldr	r6, [pc, #156]	; (8011034 <theme_apply+0xba0>)
 8010f98:	462a      	mov	r2, r5
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	6831      	ldr	r1, [r6, #0]
 8010f9e:	f7f5 fdcd 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010fa2:	6831      	ldr	r1, [r6, #0]
 8010fa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010fa8:	4620      	mov	r0, r4
 8010faa:	3108      	adds	r1, #8
 8010fac:	f7f5 fdc6 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010fb0:	6831      	ldr	r1, [r6, #0]
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010fb2:	4a2c      	ldr	r2, [pc, #176]	; (8011064 <theme_apply+0xbd0>)
 8010fb4:	3110      	adds	r1, #16
 8010fb6:	f7ff bb27 	b.w	8010608 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 8010fba:	492b      	ldr	r1, [pc, #172]	; (8011068 <theme_apply+0xbd4>)
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7f3 f801 	bl	8003fc4 <lv_obj_check_type>
 8010fc2:	2800      	cmp	r0, #0
 8010fc4:	f43f ab23 	beq.w	801060e <theme_apply+0x17a>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010fc8:	4d1a      	ldr	r5, [pc, #104]	; (8011034 <theme_apply+0xba0>)
 8010fca:	f7ff bacd 	b.w	8010568 <theme_apply+0xd4>
 8010fce:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	4926      	ldr	r1, [pc, #152]	; (801106c <theme_apply+0xbd8>)
 8010fd4:	f7f2 fff6 	bl	8003fc4 <lv_obj_check_type>
 8010fd8:	4606      	mov	r6, r0
 8010fda:	b1d0      	cbz	r0, 8011012 <theme_apply+0xb7e>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 8010fdc:	4e15      	ldr	r6, [pc, #84]	; (8011034 <theme_apply+0xba0>)
 8010fde:	4620      	mov	r0, r4
 8010fe0:	9a01      	ldr	r2, [sp, #4]
 8010fe2:	6831      	ldr	r1, [r6, #0]
 8010fe4:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 8010fe8:	f7f5 fda8 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010fec:	6831      	ldr	r1, [r6, #0]
 8010fee:	9a01      	ldr	r2, [sp, #4]
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	3180      	adds	r1, #128	; 0x80
 8010ff4:	f7f5 fda2 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8010ff8:	6831      	ldr	r1, [r6, #0]
 8010ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010ffe:	4620      	mov	r0, r4
 8011000:	3150      	adds	r1, #80	; 0x50
 8011002:	f7f5 fd9b 	bl	8006b3c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 8011006:	6831      	ldr	r1, [r6, #0]
 8011008:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801100c:	3180      	adds	r1, #128	; 0x80
 801100e:	f7ff ba57 	b.w	80104c0 <theme_apply+0x2c>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 8011012:	4917      	ldr	r1, [pc, #92]	; (8011070 <theme_apply+0xbdc>)
 8011014:	4620      	mov	r0, r4
 8011016:	f7f2 ffd5 	bl	8003fc4 <lv_obj_check_type>
 801101a:	b130      	cbz	r0, 801102a <theme_apply+0xb96>
            lv_obj_add_style(obj, &styles->led, 0);
 801101c:	4b05      	ldr	r3, [pc, #20]	; (8011034 <theme_apply+0xba0>)
 801101e:	4632      	mov	r2, r6
 8011020:	6819      	ldr	r1, [r3, #0]
 8011022:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 8011026:	f7ff ba4b 	b.w	80104c0 <theme_apply+0x2c>
}
 801102a:	b003      	add	sp, #12
 801102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801102e:	bf00      	nop
 8011030:	08025c80 	.word	0x08025c80
 8011034:	20003198 	.word	0x20003198
 8011038:	00050020 	.word	0x00050020
 801103c:	00050080 	.word	0x00050080
 8011040:	080260f4 	.word	0x080260f4
 8011044:	20003188 	.word	0x20003188
 8011048:	00050001 	.word	0x00050001
 801104c:	08026148 	.word	0x08026148
 8011050:	08026164 	.word	0x08026164
 8011054:	0802612c 	.word	0x0802612c
 8011058:	0802619c 	.word	0x0802619c
 801105c:	080261b8 	.word	0x080261b8
 8011060:	080261f0 	.word	0x080261f0
 8011064:	00010040 	.word	0x00010040
 8011068:	0802620c 	.word	0x0802620c
 801106c:	08025cb8 	.word	0x08025cb8
 8011070:	08026110 	.word	0x08026110

08011074 <grey_filter_cb>:
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 8011074:	4b0b      	ldr	r3, [pc, #44]	; (80110a4 <grey_filter_cb+0x30>)
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	07db      	lsls	r3, r3, #31
{
 801107a:	b513      	push	{r0, r1, r4, lr}
 801107c:	460c      	mov	r4, r1
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 801107e:	f04f 0012 	mov.w	r0, #18
 8011082:	f04f 0102 	mov.w	r1, #2
 8011086:	9201      	str	r2, [sp, #4]
 8011088:	d508      	bpl.n	801109c <grey_filter_cb+0x28>
 801108a:	f005 ff4b 	bl	8016f24 <lv_palette_darken>
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 801108e:	9a01      	ldr	r2, [sp, #4]
 8011090:	4621      	mov	r1, r4
}
 8011092:	b002      	add	sp, #8
 8011094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 8011098:	f7ff b9cf 	b.w	801043a <lv_color_mix>
 801109c:	f005 ff30 	bl	8016f00 <lv_palette_lighten>
 80110a0:	e7f5      	b.n	801108e <grey_filter_cb+0x1a>
 80110a2:	bf00      	nop
 80110a4:	2000319c 	.word	0x2000319c

080110a8 <dark_color_filter_cb>:
{
 80110a8:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 80110aa:	4611      	mov	r1, r2
 80110ac:	f005 beae 	b.w	8016e0c <lv_color_darken>

080110b0 <lv_style_set_pad_row>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 80110b0:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 80110b2:	f241 0114 	movw	r1, #4116	; 0x1014
 80110b6:	f007 b8a4 	b.w	8018202 <lv_style_set_prop>

080110ba <lv_style_set_line_width>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 80110ba:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 80110bc:	f640 0149 	movw	r1, #2121	; 0x849
 80110c0:	f007 b89f 	b.w	8018202 <lv_style_set_prop>

080110c4 <lv_style_set_line_color>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 80110c4:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80110c6:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80110c8:	b28a      	uxth	r2, r1
 80110ca:	214d      	movs	r1, #77	; 0x4d
    lv_style_value_t v = {
 80110cc:	f8ad 3000 	strh.w	r3, [sp]
}
 80110d0:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80110d2:	f007 b896 	b.w	8018202 <lv_style_set_prop>

080110d6 <lv_style_set_size>:
static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value) {
    lv_style_set_pad_row(style, value);
    lv_style_set_pad_column(style, value);
}

static inline void lv_style_set_size(lv_style_t * style, lv_coord_t value) {
 80110d6:	b513      	push	{r0, r1, r4, lr}
 80110d8:	4604      	mov	r4, r0
 80110da:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 80110dc:	9101      	str	r1, [sp, #4]
 80110de:	f241 0101 	movw	r1, #4097	; 0x1001
 80110e2:	f007 f88e 	bl	8018202 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 80110e6:	9a01      	ldr	r2, [sp, #4]
 80110e8:	f241 0104 	movw	r1, #4100	; 0x1004
 80110ec:	4620      	mov	r0, r4
    lv_style_set_width(style, value);
    lv_style_set_height(style, value);
}
 80110ee:	b002      	add	sp, #8
 80110f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110f4:	f007 b885 	b.w	8018202 <lv_style_set_prop>

080110f8 <lv_style_set_text_color>:
{
 80110f8:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80110fa:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 80110fc:	b28a      	uxth	r2, r1
 80110fe:	f240 4157 	movw	r1, #1111	; 0x457
    lv_style_value_t v = {
 8011102:	f8ad 3000 	strh.w	r3, [sp]
}
 8011106:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8011108:	f007 b87b 	b.w	8018202 <lv_style_set_prop>

0801110c <lv_style_set_border_width>:
{
 801110c:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 801110e:	f241 0132 	movw	r1, #4146	; 0x1032
 8011112:	f007 b876 	b.w	8018202 <lv_style_set_prop>

08011116 <lv_style_set_border_color>:
{
 8011116:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8011118:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 801111a:	b28a      	uxth	r2, r1
 801111c:	2130      	movs	r1, #48	; 0x30
    lv_style_value_t v = {
 801111e:	f8ad 3000 	strh.w	r3, [sp]
}
 8011122:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8011124:	f007 b86d 	b.w	8018202 <lv_style_set_prop>

08011128 <lv_style_set_pad_column>:
{
 8011128:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 801112a:	f241 0115 	movw	r1, #4117	; 0x1015
 801112e:	f007 b868 	b.w	8018202 <lv_style_set_prop>

08011132 <lv_style_set_bg_opa>:
{
 8011132:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8011134:	2121      	movs	r1, #33	; 0x21
 8011136:	f007 b864 	b.w	8018202 <lv_style_set_prop>

0801113a <lv_style_set_bg_color>:
{
 801113a:	b082      	sub	sp, #8
    lv_style_value_t v = {
 801113c:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 801113e:	b28a      	uxth	r2, r1
 8011140:	2120      	movs	r1, #32
    lv_style_value_t v = {
 8011142:	f8ad 3000 	strh.w	r3, [sp]
}
 8011146:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8011148:	f007 b85b 	b.w	8018202 <lv_style_set_prop>

0801114c <lv_style_set_radius>:
{
 801114c:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 801114e:	2160      	movs	r1, #96	; 0x60
 8011150:	f007 b857 	b.w	8018202 <lv_style_set_prop>

08011154 <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
 8011154:	4b03      	ldr	r3, [pc, #12]	; (8011164 <style_init_reset+0x10>)
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	b10b      	cbz	r3, 801115e <style_init_reset+0xa>
 801115a:	f006 bf2d 	b.w	8017fb8 <lv_style_reset>
    else lv_style_init(style);
 801115e:	f006 bf28 	b.w	8017fb2 <lv_style_init>
 8011162:	bf00      	nop
 8011164:	20003194 	.word	0x20003194

08011168 <lv_disp_dpx.part.0>:
 * DPI of the display.
 * @param obj   an display whose dpi should be considered
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	460c      	mov	r4, r1
 801116c:	4605      	mov	r5, r0
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 801116e:	f005 f9e9 	bl	8016544 <lv_disp_get_dpi>
 8011172:	4360      	muls	r0, r4
 8011174:	28ef      	cmp	r0, #239	; 0xef
 8011176:	dd0a      	ble.n	801118e <lv_disp_dpx.part.0+0x26>
 8011178:	4628      	mov	r0, r5
 801117a:	f005 f9e3 	bl	8016544 <lv_disp_get_dpi>
 801117e:	2150      	movs	r1, #80	; 0x50
 8011180:	fb04 1000 	mla	r0, r4, r0, r1
 8011184:	21a0      	movs	r1, #160	; 0xa0
 8011186:	fb90 f0f1 	sdiv	r0, r0, r1
 801118a:	b200      	sxth	r0, r0
}
 801118c:	bd38      	pop	{r3, r4, r5, pc}
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 801118e:	2001      	movs	r0, #1
 8011190:	e7fc      	b.n	801118c <lv_disp_dpx.part.0+0x24>

08011192 <lv_style_set_pad_hor>:
static inline void lv_style_set_pad_hor(lv_style_t * style, lv_coord_t value) {
 8011192:	b513      	push	{r0, r1, r4, lr}
 8011194:	4604      	mov	r4, r0
 8011196:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8011198:	9101      	str	r1, [sp, #4]
 801119a:	f241 0112 	movw	r1, #4114	; 0x1012
 801119e:	f007 f830 	bl	8018202 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 80111a2:	9a01      	ldr	r2, [sp, #4]
 80111a4:	f241 0113 	movw	r1, #4115	; 0x1013
 80111a8:	4620      	mov	r0, r4
}
 80111aa:	b002      	add	sp, #8
 80111ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111b0:	f007 b827 	b.w	8018202 <lv_style_set_prop>

080111b4 <lv_style_set_pad_ver>:
static inline void lv_style_set_pad_ver(lv_style_t * style, lv_coord_t value) {
 80111b4:	b513      	push	{r0, r1, r4, lr}
 80111b6:	4604      	mov	r4, r0
 80111b8:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 80111ba:	9101      	str	r1, [sp, #4]
 80111bc:	f241 0110 	movw	r1, #4112	; 0x1010
 80111c0:	f007 f81f 	bl	8018202 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 80111c4:	9a01      	ldr	r2, [sp, #4]
 80111c6:	f241 0111 	movw	r1, #4113	; 0x1011
 80111ca:	4620      	mov	r0, r4
}
 80111cc:	b002      	add	sp, #8
 80111ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111d2:	f007 b816 	b.w	8018202 <lv_style_set_prop>

080111d6 <lv_style_set_pad_all>:
static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value) {
 80111d6:	b513      	push	{r0, r1, r4, lr}
 80111d8:	4604      	mov	r4, r0
 80111da:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 80111dc:	9101      	str	r1, [sp, #4]
 80111de:	f241 0112 	movw	r1, #4114	; 0x1012
 80111e2:	f007 f80e 	bl	8018202 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 80111e6:	9a01      	ldr	r2, [sp, #4]
 80111e8:	4620      	mov	r0, r4
 80111ea:	f241 0113 	movw	r1, #4115	; 0x1013
 80111ee:	f007 f808 	bl	8018202 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 80111f2:	9a01      	ldr	r2, [sp, #4]
 80111f4:	4620      	mov	r0, r4
 80111f6:	f241 0110 	movw	r1, #4112	; 0x1010
 80111fa:	f007 f802 	bl	8018202 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 80111fe:	9a01      	ldr	r2, [sp, #4]
 8011200:	f241 0111 	movw	r1, #4113	; 0x1011
 8011204:	4620      	mov	r0, r4
}
 8011206:	b002      	add	sp, #8
 8011208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801120c:	f006 bff9 	b.w	8018202 <lv_style_set_prop>

08011210 <lv_theme_default_init>:
{
 8011210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011214:	4699      	mov	r9, r3
    if(!inited) {
 8011216:	4ba7      	ldr	r3, [pc, #668]	; (80114b4 <lv_theme_default_init+0x2a4>)
{
 8011218:	b087      	sub	sp, #28
 801121a:	4680      	mov	r8, r0
    if(!inited) {
 801121c:	781b      	ldrb	r3, [r3, #0]
{
 801121e:	468b      	mov	fp, r1
 8011220:	4692      	mov	sl, r2
 8011222:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011224:	4ca4      	ldr	r4, [pc, #656]	; (80114b8 <lv_theme_default_init+0x2a8>)
    if(!inited) {
 8011226:	b933      	cbnz	r3, 8011236 <lv_theme_default_init+0x26>
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8011228:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801122c:	f006 fa2c 	bl	8017688 <lv_mem_alloc>
 8011230:	4ba2      	ldr	r3, [pc, #648]	; (80114bc <lv_theme_default_init+0x2ac>)
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 8011232:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8011234:	6018      	str	r0, [r3, #0]
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 8011236:	f005 f95f 	bl	80164f8 <lv_disp_get_default>
 801123a:	4ea1      	ldr	r6, [pc, #644]	; (80114c0 <lv_theme_default_init+0x2b0>)
 801123c:	f005 f962 	bl	8016504 <lv_disp_get_hor_res>
 8011240:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8011244:	f301 800c 	bgt.w	8012260 <lv_theme_default_init+0x1050>
 8011248:	2303      	movs	r3, #3
    theme.disp = disp;
 801124a:	4d9e      	ldr	r5, [pc, #632]	; (80114c4 <lv_theme_default_init+0x2b4>)
    else disp_size = DISP_LARGE;
 801124c:	7033      	strb	r3, [r6, #0]
    theme.apply_cb = theme_apply;
 801124e:	4b9e      	ldr	r3, [pc, #632]	; (80114c8 <lv_theme_default_init+0x2b8>)
    theme.color_secondary = color_secondary;
 8011250:	f8a5 a012 	strh.w	sl, [r5, #18]
    theme.font_large = font;
 8011254:	61ef      	str	r7, [r5, #28]
 8011256:	f8df a28c 	ldr.w	sl, [pc, #652]	; 80114e4 <lv_theme_default_init+0x2d4>
    theme.disp = disp;
 801125a:	f8c5 800c 	str.w	r8, [r5, #12]
    theme.color_primary = color_primary;
 801125e:	f8a5 b010 	strh.w	fp, [r5, #16]
    theme.apply_cb = theme_apply;
 8011262:	602b      	str	r3, [r5, #0]
    theme.flags = dark ? MODE_DARK : 0;
 8011264:	f8c5 9020 	str.w	r9, [r5, #32]
    theme.font_normal = font;
 8011268:	e9c5 7705 	strd	r7, r7, [r5, #20]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 801126c:	4f97      	ldr	r7, [pc, #604]	; (80114cc <lv_theme_default_init+0x2bc>)
 801126e:	f1b9 0f00 	cmp.w	r9, #0
 8011272:	f001 8000 	beq.w	8012276 <lv_theme_default_init+0x1066>
 8011276:	f241 03a3 	movw	r3, #4259	; 0x10a3
 801127a:	f8aa 3000 	strh.w	r3, [sl]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 801127e:	2105      	movs	r1, #5
 8011280:	2012      	movs	r0, #18
 8011282:	f005 fe3d 	bl	8016f00 <lv_palette_lighten>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8011286:	6a2b      	ldr	r3, [r5, #32]
 8011288:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80114e8 <lv_theme_default_init+0x2d8>
 801128c:	f013 0f01 	tst.w	r3, #1
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8011290:	8038      	strh	r0, [r7, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8011292:	f001 8000 	beq.w	8012296 <lv_theme_default_init+0x1086>
 8011296:	f642 1346 	movw	r3, #10566	; 0x2946
 801129a:	4a8d      	ldr	r2, [pc, #564]	; (80114d0 <lv_theme_default_init+0x2c0>)
 801129c:	8013      	strh	r3, [r2, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 801129e:	f642 1386 	movw	r3, #10630	; 0x2986
 80112a2:	f8a9 3000 	strh.w	r3, [r9]
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 80112a6:	f04f 0b00 	mov.w	fp, #0
 80112aa:	2346      	movs	r3, #70	; 0x46
 80112ac:	4a89      	ldr	r2, [pc, #548]	; (80114d4 <lv_theme_default_init+0x2c4>)
 80112ae:	498a      	ldr	r1, [pc, #552]	; (80114d8 <lv_theme_default_init+0x2c8>)
 80112b0:	488a      	ldr	r0, [pc, #552]	; (80114dc <lv_theme_default_init+0x2cc>)
 80112b2:	e9cd 3b00 	strd	r3, fp, [sp]
 80112b6:	2350      	movs	r3, #80	; 0x50
 80112b8:	f006 ff2a 	bl	8018110 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 80112bc:	2350      	movs	r3, #80	; 0x50
 80112be:	4a85      	ldr	r2, [pc, #532]	; (80114d4 <lv_theme_default_init+0x2c4>)
 80112c0:	4985      	ldr	r1, [pc, #532]	; (80114d8 <lv_theme_default_init+0x2c8>)
 80112c2:	4887      	ldr	r0, [pc, #540]	; (80114e0 <lv_theme_default_init+0x2d0>)
 80112c4:	e9cd bb00 	strd	fp, fp, [sp]
 80112c8:	f006 ff22 	bl	8018110 <lv_style_transition_dsc_init>
    style_init_reset(&styles->transition_delayed);
 80112cc:	6820      	ldr	r0, [r4, #0]
 80112ce:	30d0      	adds	r0, #208	; 0xd0
 80112d0:	f7ff ff40 	bl	8011154 <style_init_reset>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 80112d4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 80112d6:	4a81      	ldr	r2, [pc, #516]	; (80114dc <lv_theme_default_init+0x2cc>)
 80112d8:	2167      	movs	r1, #103	; 0x67
 80112da:	30d0      	adds	r0, #208	; 0xd0
 80112dc:	f006 ff91 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->transition_normal);
 80112e0:	6820      	ldr	r0, [r4, #0]
 80112e2:	30d8      	adds	r0, #216	; 0xd8
 80112e4:	f7ff ff36 	bl	8011154 <style_init_reset>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 80112e8:	6820      	ldr	r0, [r4, #0]
 80112ea:	4a7d      	ldr	r2, [pc, #500]	; (80114e0 <lv_theme_default_init+0x2d0>)
 80112ec:	2167      	movs	r1, #103	; 0x67
 80112ee:	30d8      	adds	r0, #216	; 0xd8
 80112f0:	f006 ff87 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->scrollbar);
 80112f4:	6820      	ldr	r0, [r4, #0]
 80112f6:	3008      	adds	r0, #8
 80112f8:	f7ff ff2c 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->scrollbar, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_main(LV_PALETTE_GREY));
 80112fc:	6823      	ldr	r3, [r4, #0]
 80112fe:	f103 0b08 	add.w	fp, r3, #8
 8011302:	6a2b      	ldr	r3, [r5, #32]
 8011304:	07da      	lsls	r2, r3, #31
 8011306:	f140 87d6 	bpl.w	80122b6 <lv_theme_default_init+0x10a6>
 801130a:	2102      	movs	r1, #2
 801130c:	2012      	movs	r0, #18
 801130e:	f005 fe09 	bl	8016f24 <lv_palette_darken>
 8011312:	4601      	mov	r1, r0
 8011314:	4658      	mov	r0, fp
 8011316:	f7ff ff10 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 801131a:	6820      	ldr	r0, [r4, #0]
 801131c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011320:	3008      	adds	r0, #8
 8011322:	f7ff ff13 	bl	801114c <lv_style_set_radius>
    lv_style_set_pad_right(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 8011326:	6823      	ldr	r3, [r4, #0]
 8011328:	2107      	movs	r1, #7
 801132a:	68e8      	ldr	r0, [r5, #12]
 801132c:	f103 0b08 	add.w	fp, r3, #8
 8011330:	f7ff ff1a 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8011334:	f241 0113 	movw	r1, #4115	; 0x1013
 8011338:	4602      	mov	r2, r0
 801133a:	4658      	mov	r0, fp
 801133c:	f006 ff61 	bl	8018202 <lv_style_set_prop>
    lv_style_set_pad_top(&styles->scrollbar,  lv_disp_dpx(theme.disp, 7));
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	2107      	movs	r1, #7
 8011344:	68e8      	ldr	r0, [r5, #12]
 8011346:	f103 0b08 	add.w	fp, r3, #8
 801134a:	f7ff ff0d 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 801134e:	f241 0110 	movw	r1, #4112	; 0x1010
 8011352:	4602      	mov	r2, r0
 8011354:	4658      	mov	r0, fp
 8011356:	f006 ff54 	bl	8018202 <lv_style_set_prop>
    lv_style_set_size(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 801135a:	6820      	ldr	r0, [r4, #0]
 801135c:	2105      	movs	r1, #5
 801135e:	f100 0b08 	add.w	fp, r0, #8
 8011362:	68e8      	ldr	r0, [r5, #12]
 8011364:	f7ff ff00 	bl	8011168 <lv_disp_dpx.part.0>
 8011368:	4601      	mov	r1, r0
 801136a:	4658      	mov	r0, fp
 801136c:	f7ff feb3 	bl	80110d6 <lv_style_set_size>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 8011370:	6820      	ldr	r0, [r4, #0]
 8011372:	2166      	movs	r1, #102	; 0x66
 8011374:	3008      	adds	r0, #8
 8011376:	f7ff fedc 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 801137a:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 801137c:	4a58      	ldr	r2, [pc, #352]	; (80114e0 <lv_theme_default_init+0x2d0>)
 801137e:	2167      	movs	r1, #103	; 0x67
 8011380:	3008      	adds	r0, #8
 8011382:	f006 ff3e 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->scrollbar_scrolled);
 8011386:	6820      	ldr	r0, [r4, #0]
 8011388:	3010      	adds	r0, #16
 801138a:	f7ff fee3 	bl	8011154 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 801138e:	6820      	ldr	r0, [r4, #0]
 8011390:	21ff      	movs	r1, #255	; 0xff
 8011392:	3010      	adds	r0, #16
 8011394:	f7ff fecd 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 8011398:	6820      	ldr	r0, [r4, #0]
 801139a:	f7ff fedb 	bl	8011154 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 801139e:	21ff      	movs	r1, #255	; 0xff
 80113a0:	6820      	ldr	r0, [r4, #0]
 80113a2:	f7ff fec6 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 80113a6:	f8ba 1000 	ldrh.w	r1, [sl]
 80113aa:	6820      	ldr	r0, [r4, #0]
 80113ac:	f7ff fec5 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 80113b0:	8839      	ldrh	r1, [r7, #0]
 80113b2:	6820      	ldr	r0, [r4, #0]
 80113b4:	f7ff fea0 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 80113b8:	7833      	ldrb	r3, [r6, #0]
 80113ba:	f8d4 a000 	ldr.w	sl, [r4]
 80113be:	2b01      	cmp	r3, #1
 80113c0:	f040 877e 	bne.w	80122c0 <lv_theme_default_init+0x10b0>
 80113c4:	210e      	movs	r1, #14
 80113c6:	68e8      	ldr	r0, [r5, #12]
 80113c8:	f7ff fece 	bl	8011168 <lv_disp_dpx.part.0>
 80113cc:	4601      	mov	r1, r0
 80113ce:	4650      	mov	r0, sl
 80113d0:	f7ff fe6e 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 80113d4:	7833      	ldrb	r3, [r6, #0]
 80113d6:	f8d4 a000 	ldr.w	sl, [r4]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	f040 8777 	bne.w	80122ce <lv_theme_default_init+0x10be>
 80113e0:	210e      	movs	r1, #14
 80113e2:	68e8      	ldr	r0, [r5, #12]
 80113e4:	f7ff fec0 	bl	8011168 <lv_disp_dpx.part.0>
 80113e8:	4601      	mov	r1, r0
 80113ea:	4650      	mov	r0, sl
 80113ec:	f7ff fe9c 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 80113f0:	6820      	ldr	r0, [r4, #0]
 80113f2:	3018      	adds	r0, #24
 80113f4:	f7ff feae 	bl	8011154 <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 80113f8:	6823      	ldr	r3, [r4, #0]
 80113fa:	68e8      	ldr	r0, [r5, #12]
 80113fc:	f103 0a18 	add.w	sl, r3, #24
 8011400:	7833      	ldrb	r3, [r6, #0]
 8011402:	2b01      	cmp	r3, #1
 8011404:	bf0c      	ite	eq
 8011406:	210c      	moveq	r1, #12
 8011408:	2108      	movne	r1, #8
 801140a:	f7ff fead 	bl	8011168 <lv_disp_dpx.part.0>
 801140e:	4601      	mov	r1, r0
 8011410:	4650      	mov	r0, sl
 8011412:	f7ff fe9b 	bl	801114c <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 8011416:	6820      	ldr	r0, [r4, #0]
 8011418:	21ff      	movs	r1, #255	; 0xff
 801141a:	3018      	adds	r0, #24
 801141c:	f7ff fe89 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 8011420:	4b2b      	ldr	r3, [pc, #172]	; (80114d0 <lv_theme_default_init+0x2c0>)
 8011422:	6820      	ldr	r0, [r4, #0]
 8011424:	8819      	ldrh	r1, [r3, #0]
 8011426:	3018      	adds	r0, #24
 8011428:	f7ff fe87 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 801142c:	6820      	ldr	r0, [r4, #0]
 801142e:	f8b9 1000 	ldrh.w	r1, [r9]
 8011432:	3018      	adds	r0, #24
 8011434:	f7ff fe6f 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 8011438:	6820      	ldr	r0, [r4, #0]
 801143a:	2102      	movs	r1, #2
 801143c:	f100 0a18 	add.w	sl, r0, #24
 8011440:	68e8      	ldr	r0, [r5, #12]
 8011442:	f7ff fe91 	bl	8011168 <lv_disp_dpx.part.0>
 8011446:	4601      	mov	r1, r0
 8011448:	4650      	mov	r0, sl
 801144a:	f7ff fe5f 	bl	801110c <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 801144e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 8011450:	2201      	movs	r2, #1
 8011452:	2134      	movs	r1, #52	; 0x34
 8011454:	3018      	adds	r0, #24
 8011456:	f006 fed4 	bl	8018202 <lv_style_set_prop>
    lv_style_set_text_color(&styles->card, color_text);
 801145a:	6820      	ldr	r0, [r4, #0]
 801145c:	8839      	ldrh	r1, [r7, #0]
 801145e:	3018      	adds	r0, #24
 8011460:	f7ff fe4a 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	f103 0a18 	add.w	sl, r3, #24
 801146a:	7833      	ldrb	r3, [r6, #0]
 801146c:	2b01      	cmp	r3, #1
 801146e:	f040 8735 	bne.w	80122dc <lv_theme_default_init+0x10cc>
 8011472:	2118      	movs	r1, #24
 8011474:	68e8      	ldr	r0, [r5, #12]
 8011476:	f7ff fe77 	bl	8011168 <lv_disp_dpx.part.0>
 801147a:	4601      	mov	r1, r0
 801147c:	4650      	mov	r0, sl
 801147e:	f7ff feaa 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 8011482:	6823      	ldr	r3, [r4, #0]
 8011484:	f103 0a18 	add.w	sl, r3, #24
 8011488:	7833      	ldrb	r3, [r6, #0]
 801148a:	2b01      	cmp	r3, #1
 801148c:	f040 872d 	bne.w	80122ea <lv_theme_default_init+0x10da>
 8011490:	210e      	movs	r1, #14
 8011492:	68e8      	ldr	r0, [r5, #12]
 8011494:	f7ff fe68 	bl	8011168 <lv_disp_dpx.part.0>
 8011498:	4601      	mov	r1, r0
 801149a:	4650      	mov	r0, sl
 801149c:	f7ff fe08 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 80114a0:	6823      	ldr	r3, [r4, #0]
 80114a2:	f103 0a18 	add.w	sl, r3, #24
 80114a6:	7833      	ldrb	r3, [r6, #0]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	f040 8725 	bne.w	80122f8 <lv_theme_default_init+0x10e8>
 80114ae:	210e      	movs	r1, #14
 80114b0:	68e8      	ldr	r0, [r5, #12]
 80114b2:	e01b      	b.n	80114ec <lv_theme_default_init+0x2dc>
 80114b4:	20003194 	.word	0x20003194
 80114b8:	20003198 	.word	0x20003198
 80114bc:	2000b50c 	.word	0x2000b50c
 80114c0:	20003188 	.word	0x20003188
 80114c4:	2000319c 	.word	0x2000319c
 80114c8:	08010495 	.word	0x08010495
 80114cc:	2000317c 	.word	0x2000317c
 80114d0:	20003176 	.word	0x20003176
 80114d4:	08016689 	.word	0x08016689
 80114d8:	08025c36 	.word	0x08025c36
 80114dc:	200031c0 	.word	0x200031c0
 80114e0:	200031d4 	.word	0x200031d4
 80114e4:	2000317a 	.word	0x2000317a
 80114e8:	20003178 	.word	0x20003178
 80114ec:	f7ff fe3c 	bl	8011168 <lv_disp_dpx.part.0>
 80114f0:	4601      	mov	r1, r0
 80114f2:	4650      	mov	r0, sl
 80114f4:	f7ff fe18 	bl	8011128 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 80114f8:	6820      	ldr	r0, [r4, #0]
 80114fa:	f100 0a18 	add.w	sl, r0, #24
 80114fe:	2012      	movs	r0, #18
 8011500:	f005 fcf4 	bl	8016eec <lv_palette_main>
 8011504:	4601      	mov	r1, r0
 8011506:	4650      	mov	r0, sl
 8011508:	f7ff fddc 	bl	80110c4 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 801150c:	6820      	ldr	r0, [r4, #0]
 801150e:	2101      	movs	r1, #1
 8011510:	f100 0a18 	add.w	sl, r0, #24
 8011514:	68e8      	ldr	r0, [r5, #12]
 8011516:	f7ff fe27 	bl	8011168 <lv_disp_dpx.part.0>
 801151a:	4601      	mov	r1, r0
 801151c:	4650      	mov	r0, sl
    lv_style_value_t v = {
 801151e:	f04f 0a00 	mov.w	sl, #0
 8011522:	f7ff fdca 	bl	80110ba <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 8011526:	6820      	ldr	r0, [r4, #0]
 8011528:	30a0      	adds	r0, #160	; 0xa0
 801152a:	f7ff fe13 	bl	8011154 <style_init_reset>
 801152e:	4652      	mov	r2, sl
 8011530:	8a2b      	ldrh	r3, [r5, #16]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011532:	213b      	movs	r1, #59	; 0x3b
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 8011534:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8011536:	f36a 421f 	bfi	r2, sl, #16, #16
 801153a:	f8ad a010 	strh.w	sl, [sp, #16]
 801153e:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011542:	30a0      	adds	r0, #160	; 0xa0
 8011544:	f006 fe5d 	bl	8018202 <lv_style_set_prop>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 8011548:	6820      	ldr	r0, [r4, #0]
 801154a:	2103      	movs	r1, #3
 801154c:	f100 0ba0 	add.w	fp, r0, #160	; 0xa0
 8011550:	68e8      	ldr	r0, [r5, #12]
 8011552:	f7ff fe09 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8011556:	f640 013a 	movw	r1, #2106	; 0x83a
 801155a:	4602      	mov	r2, r0
 801155c:	4658      	mov	r0, fp
 801155e:	f006 fe50 	bl	8018202 <lv_style_set_prop>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 8011562:	6820      	ldr	r0, [r4, #0]
 8011564:	2103      	movs	r1, #3
 8011566:	f100 0ba0 	add.w	fp, r0, #160	; 0xa0
 801156a:	68e8      	ldr	r0, [r5, #12]
 801156c:	f7ff fdfc 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8011570:	f640 013d 	movw	r1, #2109	; 0x83d
 8011574:	4602      	mov	r2, r0
 8011576:	4658      	mov	r0, fp
 8011578:	f006 fe43 	bl	8018202 <lv_style_set_prop>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 801157c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 801157e:	227f      	movs	r2, #127	; 0x7f
 8011580:	f640 013c 	movw	r1, #2108	; 0x83c
 8011584:	30a0      	adds	r0, #160	; 0xa0
 8011586:	f006 fe3c 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->outline_secondary);
 801158a:	6820      	ldr	r0, [r4, #0]
 801158c:	30a8      	adds	r0, #168	; 0xa8
 801158e:	f7ff fde1 	bl	8011154 <style_init_reset>
    lv_style_value_t v = {
 8011592:	4652      	mov	r2, sl
 8011594:	8a6b      	ldrh	r3, [r5, #18]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011596:	213b      	movs	r1, #59	; 0x3b
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 8011598:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 801159a:	f36a 421f 	bfi	r2, sl, #16, #16
 801159e:	f8ad a010 	strh.w	sl, [sp, #16]
 80115a2:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 80115a6:	30a8      	adds	r0, #168	; 0xa8
 80115a8:	f006 fe2b 	bl	8018202 <lv_style_set_prop>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 80115ac:	6820      	ldr	r0, [r4, #0]
 80115ae:	2103      	movs	r1, #3
 80115b0:	f100 0aa8 	add.w	sl, r0, #168	; 0xa8
 80115b4:	68e8      	ldr	r0, [r5, #12]
 80115b6:	f7ff fdd7 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 80115ba:	f640 013a 	movw	r1, #2106	; 0x83a
 80115be:	4602      	mov	r2, r0
 80115c0:	4650      	mov	r0, sl
 80115c2:	f006 fe1e 	bl	8018202 <lv_style_set_prop>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 80115c6:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 80115c8:	227f      	movs	r2, #127	; 0x7f
 80115ca:	f640 013c 	movw	r1, #2108	; 0x83c
 80115ce:	30a8      	adds	r0, #168	; 0xa8
 80115d0:	f006 fe17 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->btn);
 80115d4:	6820      	ldr	r0, [r4, #0]
 80115d6:	3020      	adds	r0, #32
 80115d8:	f7ff fdbc 	bl	8011154 <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp, 16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 80115dc:	6823      	ldr	r3, [r4, #0]
 80115de:	f103 0a20 	add.w	sl, r3, #32
 80115e2:	7833      	ldrb	r3, [r6, #0]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	f040 868e 	bne.w	8012306 <lv_theme_default_init+0x10f6>
 80115ea:	2110      	movs	r1, #16
 80115ec:	68e8      	ldr	r0, [r5, #12]
 80115ee:	f7ff fdbb 	bl	8011168 <lv_disp_dpx.part.0>
 80115f2:	4601      	mov	r1, r0
 80115f4:	4650      	mov	r0, sl
 80115f6:	f7ff fda9 	bl	801114c <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 80115fa:	6820      	ldr	r0, [r4, #0]
 80115fc:	21ff      	movs	r1, #255	; 0xff
 80115fe:	3020      	adds	r0, #32
 8011600:	f7ff fd97 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 8011604:	6820      	ldr	r0, [r4, #0]
 8011606:	f8b9 1000 	ldrh.w	r1, [r9]
 801160a:	3020      	adds	r0, #32
 801160c:	f7ff fd95 	bl	801113a <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 8011610:	6a2b      	ldr	r3, [r5, #32]
 8011612:	f013 0901 	ands.w	r9, r3, #1
 8011616:	d125      	bne.n	8011664 <lv_theme_default_init+0x454>
        lv_style_set_shadow_color(&styles->btn, lv_palette_lighten(LV_PALETTE_GREY, 3));
 8011618:	6820      	ldr	r0, [r4, #0]
 801161a:	2103      	movs	r1, #3
 801161c:	f100 0a20 	add.w	sl, r0, #32
 8011620:	2012      	movs	r0, #18
 8011622:	f005 fc6d 	bl	8016f00 <lv_palette_lighten>
    lv_style_value_t v = {
 8011626:	2200      	movs	r2, #0
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8011628:	2144      	movs	r1, #68	; 0x44
    lv_style_value_t v = {
 801162a:	f8ad 9010 	strh.w	r9, [sp, #16]
 801162e:	f369 421f 	bfi	r2, r9, #16, #16
 8011632:	f360 020f 	bfi	r2, r0, #0, #16
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8011636:	4650      	mov	r0, sl
 8011638:	f006 fde3 	bl	8018202 <lv_style_set_prop>
        lv_style_set_shadow_width(&styles->btn, 1);
 801163c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 801163e:	2201      	movs	r2, #1
 8011640:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8011644:	3020      	adds	r0, #32
 8011646:	f006 fddc 	bl	8018202 <lv_style_set_prop>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, 4));
 801164a:	6820      	ldr	r0, [r4, #0]
 801164c:	2104      	movs	r1, #4
 801164e:	f100 0920 	add.w	r9, r0, #32
 8011652:	68e8      	ldr	r0, [r5, #12]
 8011654:	f7ff fd88 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8011658:	f640 0142 	movw	r1, #2114	; 0x842
 801165c:	4602      	mov	r2, r0
 801165e:	4648      	mov	r0, r9
 8011660:	f006 fdcf 	bl	8018202 <lv_style_set_prop>
    lv_style_set_text_color(&styles->btn, color_text);
 8011664:	6820      	ldr	r0, [r4, #0]
 8011666:	8839      	ldrh	r1, [r7, #0]
 8011668:	3020      	adds	r0, #32
 801166a:	f7ff fd45 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 801166e:	6823      	ldr	r3, [r4, #0]
 8011670:	f103 0920 	add.w	r9, r3, #32
 8011674:	7833      	ldrb	r3, [r6, #0]
 8011676:	2b01      	cmp	r3, #1
 8011678:	f040 864c 	bne.w	8012314 <lv_theme_default_init+0x1104>
 801167c:	2118      	movs	r1, #24
 801167e:	68e8      	ldr	r0, [r5, #12]
 8011680:	f7ff fd72 	bl	8011168 <lv_disp_dpx.part.0>
 8011684:	4601      	mov	r1, r0
 8011686:	4648      	mov	r0, r9
 8011688:	f7ff fd83 	bl	8011192 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 801168c:	6823      	ldr	r3, [r4, #0]
 801168e:	f103 0920 	add.w	r9, r3, #32
 8011692:	7833      	ldrb	r3, [r6, #0]
 8011694:	2b01      	cmp	r3, #1
 8011696:	f040 8644 	bne.w	8012322 <lv_theme_default_init+0x1112>
 801169a:	210e      	movs	r1, #14
 801169c:	68e8      	ldr	r0, [r5, #12]
 801169e:	f7ff fd63 	bl	8011168 <lv_disp_dpx.part.0>
 80116a2:	4601      	mov	r1, r0
 80116a4:	4648      	mov	r0, r9
    dsc->filter_cb = cb;
 80116a6:	f8df a384 	ldr.w	sl, [pc, #900]	; 8011a2c <lv_theme_default_init+0x81c>
 80116aa:	f7ff fd83 	bl	80111b4 <lv_style_set_pad_ver>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 80116ae:	6820      	ldr	r0, [r4, #0]
 80116b0:	2105      	movs	r1, #5
 80116b2:	f100 0920 	add.w	r9, r0, #32
 80116b6:	68e8      	ldr	r0, [r5, #12]
 80116b8:	f7ff fd56 	bl	8011168 <lv_disp_dpx.part.0>
 80116bc:	4601      	mov	r1, r0
 80116be:	4648      	mov	r0, r9
 80116c0:	f7ff fd32 	bl	8011128 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 80116c4:	6820      	ldr	r0, [r4, #0]
 80116c6:	2105      	movs	r1, #5
 80116c8:	f100 0920 	add.w	r9, r0, #32
 80116cc:	68e8      	ldr	r0, [r5, #12]
 80116ce:	f7ff fd4b 	bl	8011168 <lv_disp_dpx.part.0>
 80116d2:	4601      	mov	r1, r0
 80116d4:	4648      	mov	r0, r9
 80116d6:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8011a30 <lv_theme_default_init+0x820>
 80116da:	f7ff fce9 	bl	80110b0 <lv_style_set_pad_row>
 80116de:	4bd1      	ldr	r3, [pc, #836]	; (8011a24 <lv_theme_default_init+0x814>)
    style_init_reset(&styles->pressed);
 80116e0:	6820      	ldr	r0, [r4, #0]
 80116e2:	f8ca 3000 	str.w	r3, [sl]
 80116e6:	4bd0      	ldr	r3, [pc, #832]	; (8011a28 <lv_theme_default_init+0x818>)
 80116e8:	3058      	adds	r0, #88	; 0x58
 80116ea:	f8c9 3000 	str.w	r3, [r9]
 80116ee:	f7ff fd31 	bl	8011154 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 80116f2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 80116f4:	4652      	mov	r2, sl
 80116f6:	2163      	movs	r1, #99	; 0x63
 80116f8:	3058      	adds	r0, #88	; 0x58
 80116fa:	f006 fd82 	bl	8018202 <lv_style_set_prop>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 80116fe:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8011700:	2223      	movs	r2, #35	; 0x23
 8011702:	2164      	movs	r1, #100	; 0x64
 8011704:	3058      	adds	r0, #88	; 0x58
 8011706:	f006 fd7c 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->disabled);
 801170a:	6820      	ldr	r0, [r4, #0]
 801170c:	3060      	adds	r0, #96	; 0x60
 801170e:	f7ff fd21 	bl	8011154 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 8011712:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8011714:	464a      	mov	r2, r9
 8011716:	2163      	movs	r1, #99	; 0x63
 8011718:	3060      	adds	r0, #96	; 0x60
 801171a:	f006 fd72 	bl	8018202 <lv_style_set_prop>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 801171e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8011720:	227f      	movs	r2, #127	; 0x7f
 8011722:	2164      	movs	r1, #100	; 0x64
 8011724:	3060      	adds	r0, #96	; 0x60
 8011726:	f006 fd6c 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->clip_corner);
 801172a:	6820      	ldr	r0, [r4, #0]
 801172c:	30c0      	adds	r0, #192	; 0xc0
 801172e:	f7ff fd11 	bl	8011154 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 8011732:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8011734:	2201      	movs	r2, #1
 8011736:	2161      	movs	r1, #97	; 0x61
 8011738:	30c0      	adds	r0, #192	; 0xc0
 801173a:	f006 fd62 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->pad_normal);
 801173e:	6820      	ldr	r0, [r4, #0]
 8011740:	3080      	adds	r0, #128	; 0x80
 8011742:	f7ff fd07 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	f103 0980 	add.w	r9, r3, #128	; 0x80
 801174c:	7833      	ldrb	r3, [r6, #0]
 801174e:	2b01      	cmp	r3, #1
 8011750:	f040 85ee 	bne.w	8012330 <lv_theme_default_init+0x1120>
 8011754:	2118      	movs	r1, #24
 8011756:	68e8      	ldr	r0, [r5, #12]
 8011758:	f7ff fd06 	bl	8011168 <lv_disp_dpx.part.0>
 801175c:	4601      	mov	r1, r0
 801175e:	4648      	mov	r0, r9
 8011760:	f7ff fd39 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	f103 0980 	add.w	r9, r3, #128	; 0x80
 801176a:	7833      	ldrb	r3, [r6, #0]
 801176c:	2b01      	cmp	r3, #1
 801176e:	f040 85e6 	bne.w	801233e <lv_theme_default_init+0x112e>
 8011772:	2118      	movs	r1, #24
 8011774:	68e8      	ldr	r0, [r5, #12]
 8011776:	f7ff fcf7 	bl	8011168 <lv_disp_dpx.part.0>
 801177a:	4601      	mov	r1, r0
 801177c:	4648      	mov	r0, r9
 801177e:	f7ff fc97 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011788:	7833      	ldrb	r3, [r6, #0]
 801178a:	2b01      	cmp	r3, #1
 801178c:	f040 85de 	bne.w	801234c <lv_theme_default_init+0x113c>
 8011790:	2118      	movs	r1, #24
 8011792:	68e8      	ldr	r0, [r5, #12]
 8011794:	f7ff fce8 	bl	8011168 <lv_disp_dpx.part.0>
 8011798:	4601      	mov	r1, r0
 801179a:	4648      	mov	r0, r9
 801179c:	f7ff fcc4 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 80117a0:	6820      	ldr	r0, [r4, #0]
 80117a2:	3078      	adds	r0, #120	; 0x78
 80117a4:	f7ff fcd6 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	f103 0978 	add.w	r9, r3, #120	; 0x78
 80117ae:	7833      	ldrb	r3, [r6, #0]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	f040 85d2 	bne.w	801235a <lv_theme_default_init+0x114a>
 80117b6:	210e      	movs	r1, #14
 80117b8:	68e8      	ldr	r0, [r5, #12]
 80117ba:	f7ff fcd5 	bl	8011168 <lv_disp_dpx.part.0>
 80117be:	4601      	mov	r1, r0
 80117c0:	4648      	mov	r0, r9
 80117c2:	f7ff fd08 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 80117cc:	7833      	ldrb	r3, [r6, #0]
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	f040 85ca 	bne.w	8012368 <lv_theme_default_init+0x1158>
 80117d4:	210e      	movs	r1, #14
 80117d6:	68e8      	ldr	r0, [r5, #12]
 80117d8:	f7ff fcc6 	bl	8011168 <lv_disp_dpx.part.0>
 80117dc:	4681      	mov	r9, r0
    lv_style_set_pad_row(style, value);
 80117de:	4601      	mov	r1, r0
 80117e0:	4650      	mov	r0, sl
 80117e2:	f7ff fc65 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80117e6:	4649      	mov	r1, r9
 80117e8:	4650      	mov	r0, sl
 80117ea:	f7ff fc9d 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_gap);
 80117ee:	6820      	ldr	r0, [r4, #0]
 80117f0:	3088      	adds	r0, #136	; 0x88
 80117f2:	f7ff fcaf 	bl	8011154 <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 80117f6:	6820      	ldr	r0, [r4, #0]
 80117f8:	210a      	movs	r1, #10
 80117fa:	f100 0988 	add.w	r9, r0, #136	; 0x88
 80117fe:	68e8      	ldr	r0, [r5, #12]
 8011800:	f7ff fcb2 	bl	8011168 <lv_disp_dpx.part.0>
 8011804:	4601      	mov	r1, r0
 8011806:	4648      	mov	r0, r9
 8011808:	f7ff fc52 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 801180c:	6820      	ldr	r0, [r4, #0]
 801180e:	210a      	movs	r1, #10
 8011810:	f100 0988 	add.w	r9, r0, #136	; 0x88
 8011814:	68e8      	ldr	r0, [r5, #12]
 8011816:	f7ff fca7 	bl	8011168 <lv_disp_dpx.part.0>
 801181a:	4601      	mov	r1, r0
 801181c:	4648      	mov	r0, r9
 801181e:	f7ff fc83 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 8011822:	6820      	ldr	r0, [r4, #0]
 8011824:	3090      	adds	r0, #144	; 0x90
 8011826:	f7ff fc95 	bl	8011154 <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 801182a:	6820      	ldr	r0, [r4, #0]
 801182c:	2114      	movs	r1, #20
 801182e:	f100 0990 	add.w	r9, r0, #144	; 0x90
 8011832:	68e8      	ldr	r0, [r5, #12]
 8011834:	f7ff fc98 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 8011838:	f241 415b 	movw	r1, #5211	; 0x145b
 801183c:	4602      	mov	r2, r0
 801183e:	4648      	mov	r0, r9
 8011840:	f006 fcdf 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->text_align_center);
 8011844:	6820      	ldr	r0, [r4, #0]
 8011846:	3098      	adds	r0, #152	; 0x98
 8011848:	f7ff fc84 	bl	8011154 <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 801184c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 801184e:	2202      	movs	r2, #2
 8011850:	f241 415d 	movw	r1, #5213	; 0x145d
 8011854:	3098      	adds	r0, #152	; 0x98
 8011856:	f006 fcd4 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->pad_zero);
 801185a:	6820      	ldr	r0, [r4, #0]
 801185c:	3068      	adds	r0, #104	; 0x68
 801185e:	f7ff fc79 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8011862:	6820      	ldr	r0, [r4, #0]
 8011864:	2100      	movs	r1, #0
 8011866:	3068      	adds	r0, #104	; 0x68
 8011868:	f7ff fcb5 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 801186c:	6820      	ldr	r0, [r4, #0]
 801186e:	2100      	movs	r1, #0
 8011870:	3068      	adds	r0, #104	; 0x68
 8011872:	f7ff fc1d 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 8011876:	6820      	ldr	r0, [r4, #0]
 8011878:	2100      	movs	r1, #0
 801187a:	3068      	adds	r0, #104	; 0x68
 801187c:	f7ff fc54 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	3070      	adds	r0, #112	; 0x70
 8011884:	f7ff fc66 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8011888:	6823      	ldr	r3, [r4, #0]
 801188a:	f103 0970 	add.w	r9, r3, #112	; 0x70
 801188e:	7833      	ldrb	r3, [r6, #0]
 8011890:	2b01      	cmp	r3, #1
 8011892:	f040 8570 	bne.w	8012376 <lv_theme_default_init+0x1166>
 8011896:	2108      	movs	r1, #8
 8011898:	68e8      	ldr	r0, [r5, #12]
 801189a:	f7ff fc65 	bl	8011168 <lv_disp_dpx.part.0>
 801189e:	4601      	mov	r1, r0
 80118a0:	4648      	mov	r0, r9
 80118a2:	f7ff fc98 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 80118a6:	6823      	ldr	r3, [r4, #0]
 80118a8:	f103 0970 	add.w	r9, r3, #112	; 0x70
 80118ac:	7833      	ldrb	r3, [r6, #0]
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	f040 8568 	bne.w	8012384 <lv_theme_default_init+0x1174>
 80118b4:	2108      	movs	r1, #8
 80118b6:	68e8      	ldr	r0, [r5, #12]
 80118b8:	f7ff fc56 	bl	8011168 <lv_disp_dpx.part.0>
 80118bc:	4601      	mov	r1, r0
 80118be:	4648      	mov	r0, r9
 80118c0:	f7ff fbf6 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 80118c4:	6823      	ldr	r3, [r4, #0]
 80118c6:	f103 0970 	add.w	r9, r3, #112	; 0x70
 80118ca:	7833      	ldrb	r3, [r6, #0]
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	f040 8560 	bne.w	8012392 <lv_theme_default_init+0x1182>
 80118d2:	2108      	movs	r1, #8
 80118d4:	68e8      	ldr	r0, [r5, #12]
 80118d6:	f7ff fc47 	bl	8011168 <lv_disp_dpx.part.0>
 80118da:	4601      	mov	r1, r0
 80118dc:	4648      	mov	r0, r9
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 80118de:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8011a34 <lv_theme_default_init+0x824>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 80118e2:	f7ff fc21 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 80118e6:	6820      	ldr	r0, [r4, #0]
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 80118e8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8011a38 <lv_theme_default_init+0x828>
    style_init_reset(&styles->bg_color_primary);
 80118ec:	3028      	adds	r0, #40	; 0x28
 80118ee:	f7ff fc31 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 80118f2:	6820      	ldr	r0, [r4, #0]
 80118f4:	8a29      	ldrh	r1, [r5, #16]
 80118f6:	3028      	adds	r0, #40	; 0x28
 80118f8:	f7ff fc1f 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 80118fc:	6820      	ldr	r0, [r4, #0]
 80118fe:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8011902:	f7fe fdc4 	bl	801048e <lv_color_white>
 8011906:	4601      	mov	r1, r0
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fbf5 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	21ff      	movs	r1, #255	; 0xff
 8011912:	3028      	adds	r0, #40	; 0x28
 8011914:	f7ff fc0d 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 8011918:	6820      	ldr	r0, [r4, #0]
 801191a:	3030      	adds	r0, #48	; 0x30
 801191c:	f7ff fc1a 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 8011920:	6820      	ldr	r0, [r4, #0]
 8011922:	8a29      	ldrh	r1, [r5, #16]
 8011924:	3030      	adds	r0, #48	; 0x30
 8011926:	f7ff fc08 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 801192a:	6820      	ldr	r0, [r4, #0]
 801192c:	8a29      	ldrh	r1, [r5, #16]
 801192e:	3030      	adds	r0, #48	; 0x30
 8011930:	f7ff fbe2 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 8011934:	6820      	ldr	r0, [r4, #0]
 8011936:	2133      	movs	r1, #51	; 0x33
 8011938:	3030      	adds	r0, #48	; 0x30
 801193a:	f7ff fbfa 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 801193e:	6820      	ldr	r0, [r4, #0]
 8011940:	3038      	adds	r0, #56	; 0x38
 8011942:	f7ff fc07 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 8011946:	6820      	ldr	r0, [r4, #0]
 8011948:	8a69      	ldrh	r1, [r5, #18]
 801194a:	3038      	adds	r0, #56	; 0x38
 801194c:	f7ff fbf5 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 8011950:	6820      	ldr	r0, [r4, #0]
 8011952:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8011956:	f7fe fd9a 	bl	801048e <lv_color_white>
 801195a:	4601      	mov	r1, r0
 801195c:	4618      	mov	r0, r3
 801195e:	f7ff fbcb 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 8011962:	6820      	ldr	r0, [r4, #0]
 8011964:	21ff      	movs	r1, #255	; 0xff
 8011966:	3038      	adds	r0, #56	; 0x38
 8011968:	f7ff fbe3 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 801196c:	6820      	ldr	r0, [r4, #0]
 801196e:	3040      	adds	r0, #64	; 0x40
 8011970:	f7ff fbf0 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	8a69      	ldrh	r1, [r5, #18]
 8011978:	3040      	adds	r0, #64	; 0x40
 801197a:	f7ff fbde 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 801197e:	6820      	ldr	r0, [r4, #0]
 8011980:	8a69      	ldrh	r1, [r5, #18]
 8011982:	3040      	adds	r0, #64	; 0x40
 8011984:	f7ff fbb8 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 8011988:	6820      	ldr	r0, [r4, #0]
 801198a:	2133      	movs	r1, #51	; 0x33
 801198c:	3040      	adds	r0, #64	; 0x40
 801198e:	f7ff fbd0 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 8011992:	6820      	ldr	r0, [r4, #0]
 8011994:	3048      	adds	r0, #72	; 0x48
 8011996:	f7ff fbdd 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 801199a:	6820      	ldr	r0, [r4, #0]
 801199c:	f8b9 1000 	ldrh.w	r1, [r9]
 80119a0:	3048      	adds	r0, #72	; 0x48
 80119a2:	f7ff fbca 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 80119a6:	6820      	ldr	r0, [r4, #0]
 80119a8:	21ff      	movs	r1, #255	; 0xff
 80119aa:	3048      	adds	r0, #72	; 0x48
 80119ac:	f7ff fbc1 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 80119b0:	6820      	ldr	r0, [r4, #0]
 80119b2:	8839      	ldrh	r1, [r7, #0]
 80119b4:	3048      	adds	r0, #72	; 0x48
 80119b6:	f7ff fb9f 	bl	80110f8 <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 80119ba:	6820      	ldr	r0, [r4, #0]
 80119bc:	3050      	adds	r0, #80	; 0x50
 80119be:	f7ff fbc9 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 80119c2:	6820      	ldr	r0, [r4, #0]
 80119c4:	f8ba 1000 	ldrh.w	r1, [sl]
 80119c8:	3050      	adds	r0, #80	; 0x50
 80119ca:	f7ff fbb6 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 80119ce:	6820      	ldr	r0, [r4, #0]
 80119d0:	21ff      	movs	r1, #255	; 0xff
 80119d2:	3050      	adds	r0, #80	; 0x50
 80119d4:	f7ff fbad 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 80119d8:	6820      	ldr	r0, [r4, #0]
 80119da:	8839      	ldrh	r1, [r7, #0]
 80119dc:	3050      	adds	r0, #80	; 0x50
 80119de:	f7ff fb8b 	bl	80110f8 <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 80119e2:	6820      	ldr	r0, [r4, #0]
 80119e4:	30b0      	adds	r0, #176	; 0xb0
 80119e6:	f7ff fbb5 	bl	8011154 <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 80119ea:	6820      	ldr	r0, [r4, #0]
 80119ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80119f0:	30b0      	adds	r0, #176	; 0xb0
 80119f2:	f7ff fbab 	bl	801114c <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 80119f6:	6820      	ldr	r0, [r4, #0]
 80119f8:	30b8      	adds	r0, #184	; 0xb8
 80119fa:	f7ff fbab 	bl	8011154 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 80119fe:	6820      	ldr	r0, [r4, #0]
 8011a00:	2100      	movs	r1, #0
 8011a02:	30b8      	adds	r0, #184	; 0xb8
 8011a04:	f7ff fba2 	bl	801114c <lv_style_set_radius>
    style_init_reset(&styles->grow);
 8011a08:	6820      	ldr	r0, [r4, #0]
 8011a0a:	30c8      	adds	r0, #200	; 0xc8
 8011a0c:	f7ff fba2 	bl	8011154 <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8011a10:	6820      	ldr	r0, [r4, #0]
 8011a12:	2103      	movs	r1, #3
 8011a14:	f100 0bc8 	add.w	fp, r0, #200	; 0xc8
 8011a18:	68e8      	ldr	r0, [r5, #12]
 8011a1a:	f7ff fba5 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8011a1e:	f640 010a 	movw	r1, #2058	; 0x80a
 8011a22:	e00b      	b.n	8011a3c <lv_theme_default_init+0x82c>
 8011a24:	080110a9 	.word	0x080110a9
 8011a28:	08011075 	.word	0x08011075
 8011a2c:	20003180 	.word	0x20003180
 8011a30:	2000318c 	.word	0x2000318c
 8011a34:	20003178 	.word	0x20003178
 8011a38:	20003176 	.word	0x20003176
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	4658      	mov	r0, fp
 8011a40:	f006 fbdf 	bl	8018202 <lv_style_set_prop>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	2103      	movs	r1, #3
 8011a48:	f100 0bc8 	add.w	fp, r0, #200	; 0xc8
 8011a4c:	68e8      	ldr	r0, [r5, #12]
 8011a4e:	f7ff fb8b 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8011a52:	f640 010b 	movw	r1, #2059	; 0x80b
 8011a56:	4602      	mov	r2, r0
 8011a58:	4658      	mov	r0, fp
 8011a5a:	f006 fbd2 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->knob);
 8011a5e:	6820      	ldr	r0, [r4, #0]
 8011a60:	30e8      	adds	r0, #232	; 0xe8
 8011a62:	f7ff fb77 	bl	8011154 <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 8011a66:	6820      	ldr	r0, [r4, #0]
 8011a68:	8a29      	ldrh	r1, [r5, #16]
 8011a6a:	30e8      	adds	r0, #232	; 0xe8
 8011a6c:	f7ff fb65 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 8011a70:	6820      	ldr	r0, [r4, #0]
 8011a72:	21ff      	movs	r1, #255	; 0xff
 8011a74:	30e8      	adds	r0, #232	; 0xe8
 8011a76:	f7ff fb5c 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 8011a7a:	6820      	ldr	r0, [r4, #0]
 8011a7c:	2106      	movs	r1, #6
 8011a7e:	f100 0be8 	add.w	fp, r0, #232	; 0xe8
 8011a82:	68e8      	ldr	r0, [r5, #12]
 8011a84:	f7ff fb70 	bl	8011168 <lv_disp_dpx.part.0>
 8011a88:	4601      	mov	r1, r0
 8011a8a:	4658      	mov	r0, fp
        } \
    }

static inline void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
    lv_style_value_t v = {
 8011a8c:	f04f 0b00 	mov.w	fp, #0
 8011a90:	f7ff fba1 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 8011a94:	6820      	ldr	r0, [r4, #0]
 8011a96:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011a9a:	30e8      	adds	r0, #232	; 0xe8
 8011a9c:	f7ff fb56 	bl	801114c <lv_style_set_radius>
    style_init_reset(&styles->anim);
 8011aa0:	6820      	ldr	r0, [r4, #0]
 8011aa2:	30e0      	adds	r0, #224	; 0xe0
 8011aa4:	f7ff fb56 	bl	8011154 <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 8011aa8:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8011aaa:	22c8      	movs	r2, #200	; 0xc8
 8011aac:	2165      	movs	r1, #101	; 0x65
 8011aae:	30e0      	adds	r0, #224	; 0xe0
 8011ab0:	f006 fba7 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->arc_indic);
 8011ab4:	6820      	ldr	r0, [r4, #0]
 8011ab6:	30f8      	adds	r0, #248	; 0xf8
 8011ab8:	f7ff fb4c 	bl	8011154 <style_init_reset>
    lv_style_value_t v = {
 8011abc:	465a      	mov	r2, fp
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 8011abe:	6820      	ldr	r0, [r4, #0]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ac0:	2152      	movs	r1, #82	; 0x52
    lv_style_value_t v = {
 8011ac2:	f8ad b010 	strh.w	fp, [sp, #16]
 8011ac6:	f36b 421f 	bfi	r2, fp, #16, #16
 8011aca:	f8b9 3000 	ldrh.w	r3, [r9]
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ace:	30f8      	adds	r0, #248	; 0xf8
    lv_style_value_t v = {
 8011ad0:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ad4:	f006 fb95 	bl	8018202 <lv_style_set_prop>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 8011ad8:	6823      	ldr	r3, [r4, #0]
 8011ada:	210f      	movs	r1, #15
 8011adc:	68e8      	ldr	r0, [r5, #12]
 8011ade:	33f8      	adds	r3, #248	; 0xf8
 8011ae0:	9303      	str	r3, [sp, #12]
 8011ae2:	f7ff fb41 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8011ae6:	9b03      	ldr	r3, [sp, #12]
 8011ae8:	4602      	mov	r2, r0
 8011aea:	f44f 6105 	mov.w	r1, #2128	; 0x850
 8011aee:	4618      	mov	r0, r3
 8011af0:	f006 fb87 	bl	8018202 <lv_style_set_prop>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 8011af4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 8011af6:	2201      	movs	r2, #1
 8011af8:	2151      	movs	r1, #81	; 0x51
 8011afa:	30f8      	adds	r0, #248	; 0xf8
 8011afc:	f006 fb81 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->arc_indic_primary);
 8011b00:	6820      	ldr	r0, [r4, #0]
 8011b02:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8011b06:	f7ff fb25 	bl	8011154 <style_init_reset>
    lv_style_value_t v = {
 8011b0a:	465a      	mov	r2, fp
 8011b0c:	8a2b      	ldrh	r3, [r5, #16]
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011b0e:	2152      	movs	r1, #82	; 0x52
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 8011b10:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8011b12:	f36b 421f 	bfi	r2, fp, #16, #16
 8011b16:	f8ad b010 	strh.w	fp, [sp, #16]
 8011b1a:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011b1e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8011b22:	f006 fb6e 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->dropdown_list);
 8011b26:	6820      	ldr	r0, [r4, #0]
 8011b28:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8011b2c:	f7ff fb12 	bl	8011154 <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 8011b30:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 8011b32:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011b36:	f241 0106 	movw	r1, #4102	; 0x1006
 8011b3a:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8011b3e:	f006 fb60 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->cb_marker);
 8011b42:	6820      	ldr	r0, [r4, #0]
 8011b44:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011b48:	f7ff fb04 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	2103      	movs	r1, #3
 8011b50:	f500 7b98 	add.w	fp, r0, #304	; 0x130
 8011b54:	68e8      	ldr	r0, [r5, #12]
 8011b56:	f7ff fb07 	bl	8011168 <lv_disp_dpx.part.0>
 8011b5a:	4601      	mov	r1, r0
 8011b5c:	4658      	mov	r0, fp
 8011b5e:	f7ff fb3a 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 8011b62:	6820      	ldr	r0, [r4, #0]
 8011b64:	2102      	movs	r1, #2
 8011b66:	f500 7b98 	add.w	fp, r0, #304	; 0x130
 8011b6a:	68e8      	ldr	r0, [r5, #12]
 8011b6c:	f7ff fafc 	bl	8011168 <lv_disp_dpx.part.0>
 8011b70:	4601      	mov	r1, r0
 8011b72:	4658      	mov	r0, fp
 8011b74:	f7ff faca 	bl	801110c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 8011b78:	6820      	ldr	r0, [r4, #0]
 8011b7a:	8a29      	ldrh	r1, [r5, #16]
 8011b7c:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011b80:	f7ff fac9 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 8011b84:	6820      	ldr	r0, [r4, #0]
 8011b86:	f8ba 1000 	ldrh.w	r1, [sl]
 8011b8a:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011b8e:	f7ff fad4 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 8011b92:	6820      	ldr	r0, [r4, #0]
 8011b94:	21ff      	movs	r1, #255	; 0xff
 8011b96:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8011b9a:	f7ff faca 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	68e8      	ldr	r0, [r5, #12]
 8011ba2:	f503 7b98 	add.w	fp, r3, #304	; 0x130
 8011ba6:	7833      	ldrb	r3, [r6, #0]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	bf0c      	ite	eq
 8011bac:	210c      	moveq	r1, #12
 8011bae:	2108      	movne	r1, #8
 8011bb0:	f7ff fada 	bl	8011168 <lv_disp_dpx.part.0>
 8011bb4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8011bb8:	f340 014f 	sbfx	r1, r0, #1, #16
 8011bbc:	4658      	mov	r0, fp
 8011bbe:	f7ff fac5 	bl	801114c <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 8011bc2:	6820      	ldr	r0, [r4, #0]
 8011bc4:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8011bc8:	f7ff fac4 	bl	8011154 <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 8011bcc:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 8011bce:	4ad1      	ldr	r2, [pc, #836]	; (8011f14 <lv_theme_default_init+0xd04>)
 8011bd0:	2126      	movs	r1, #38	; 0x26
 8011bd2:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8011bd6:	f006 fb14 	bl	8018202 <lv_style_set_prop>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 8011bda:	6820      	ldr	r0, [r4, #0]
 8011bdc:	f500 739c 	add.w	r3, r0, #312	; 0x138
 8011be0:	f7fe fc55 	bl	801048e <lv_color_white>
 8011be4:	4601      	mov	r1, r0
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7ff fa86 	bl	80110f8 <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 8011bec:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 8011bee:	696a      	ldr	r2, [r5, #20]
 8011bf0:	f241 4159 	movw	r1, #5209	; 0x1459
 8011bf4:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8011bf8:	f006 fb03 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->switch_knob);
 8011bfc:	6820      	ldr	r0, [r4, #0]
 8011bfe:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8011c02:	f7ff faa7 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 8011c06:	6820      	ldr	r0, [r4, #0]
 8011c08:	2104      	movs	r1, #4
 8011c0a:	f500 7ba0 	add.w	fp, r0, #320	; 0x140
 8011c0e:	68e8      	ldr	r0, [r5, #12]
 8011c10:	f7ff faaa 	bl	8011168 <lv_disp_dpx.part.0>
 8011c14:	4240      	negs	r0, r0
 8011c16:	b201      	sxth	r1, r0
 8011c18:	4658      	mov	r0, fp
 8011c1a:	f7ff fadc 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 8011c1e:	6820      	ldr	r0, [r4, #0]
 8011c20:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8011c24:	f7fe fc33 	bl	801048e <lv_color_white>
 8011c28:	4601      	mov	r1, r0
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7ff fa85 	bl	801113a <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 8011c30:	6820      	ldr	r0, [r4, #0]
 8011c32:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8011c36:	f7ff fa8d 	bl	8011154 <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 8011c3a:	6820      	ldr	r0, [r4, #0]
 8011c3c:	2101      	movs	r1, #1
 8011c3e:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8011c42:	f7ff fa3a 	bl	80110ba <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 8011c46:	6820      	ldr	r0, [r4, #0]
 8011c48:	8839      	ldrh	r1, [r7, #0]
 8011c4a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8011c4e:	f7ff fa39 	bl	80110c4 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 8011c52:	6820      	ldr	r0, [r4, #0]
 8011c54:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8011c58:	f7ff fa7c 	bl	8011154 <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 8011c5c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 8011c5e:	2200      	movs	r2, #0
 8011c60:	2134      	movs	r1, #52	; 0x34
 8011c62:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8011c66:	f006 facc 	bl	8018202 <lv_style_set_prop>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 8011c6a:	6820      	ldr	r0, [r4, #0]
 8011c6c:	210a      	movs	r1, #10
 8011c6e:	f500 7b90 	add.w	fp, r0, #288	; 0x120
 8011c72:	68e8      	ldr	r0, [r5, #12]
 8011c74:	f7ff fa78 	bl	8011168 <lv_disp_dpx.part.0>
 8011c78:	4601      	mov	r1, r0
 8011c7a:	4658      	mov	r0, fp
 8011c7c:	f7ff fa54 	bl	8011128 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 8011c80:	6820      	ldr	r0, [r4, #0]
 8011c82:	f8b9 1000 	ldrh.w	r1, [r9]
 8011c86:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8011c8a:	f7ff fa1b 	bl	80110c4 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8011c94:	f7ff fa5e 	bl	8011154 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 8011c98:	6820      	ldr	r0, [r4, #0]
 8011c9a:	2103      	movs	r1, #3
 8011c9c:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8011ca0:	68e8      	ldr	r0, [r5, #12]
 8011ca2:	f7ff fa61 	bl	8011168 <lv_disp_dpx.part.0>
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	4658      	mov	r0, fp
 8011caa:	f7ff fa06 	bl	80110ba <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 8011cae:	6820      	ldr	r0, [r4, #0]
 8011cb0:	2103      	movs	r1, #3
 8011cb2:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8011cb6:	68e8      	ldr	r0, [r5, #12]
 8011cb8:	f7ff fa56 	bl	8011168 <lv_disp_dpx.part.0>
 8011cbc:	4601      	mov	r1, r0
 8011cbe:	4658      	mov	r0, fp
 8011cc0:	f7ff fa44 	bl	801114c <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 8011cc4:	6820      	ldr	r0, [r4, #0]
 8011cc6:	2108      	movs	r1, #8
 8011cc8:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8011ccc:	68e8      	ldr	r0, [r5, #12]
 8011cce:	f7ff fa4b 	bl	8011168 <lv_disp_dpx.part.0>
 8011cd2:	4601      	mov	r1, r0
 8011cd4:	4658      	mov	r0, fp
 8011cd6:	f7ff f9fe 	bl	80110d6 <lv_style_set_size>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 8011cda:	6820      	ldr	r0, [r4, #0]
 8011cdc:	2102      	movs	r1, #2
 8011cde:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8011ce2:	68e8      	ldr	r0, [r5, #12]
 8011ce4:	f7ff fa40 	bl	8011168 <lv_disp_dpx.part.0>
 8011ce8:	4601      	mov	r1, r0
 8011cea:	4658      	mov	r0, fp
 8011cec:	f7ff fa1c 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 8011cf0:	6820      	ldr	r0, [r4, #0]
 8011cf2:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8011cf6:	f7ff fa2d 	bl	8011154 <style_init_reset>
    lv_style_set_radius(&styles->chart_indic,LV_RADIUS_CIRCLE);
 8011cfa:	6820      	ldr	r0, [r4, #0]
 8011cfc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011d00:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8011d04:	f7ff fa22 	bl	801114c <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 8011d08:	6820      	ldr	r0, [r4, #0]
 8011d0a:	2108      	movs	r1, #8
 8011d0c:	f500 7b88 	add.w	fp, r0, #272	; 0x110
 8011d10:	68e8      	ldr	r0, [r5, #12]
 8011d12:	f7ff fa29 	bl	8011168 <lv_disp_dpx.part.0>
 8011d16:	4601      	mov	r1, r0
 8011d18:	4658      	mov	r0, fp
 8011d1a:	f7ff f9dc 	bl	80110d6 <lv_style_set_size>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 8011d1e:	6820      	ldr	r0, [r4, #0]
 8011d20:	8a29      	ldrh	r1, [r5, #16]
 8011d22:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8011d26:	f7ff fa08 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 8011d2a:	6820      	ldr	r0, [r4, #0]
 8011d2c:	21ff      	movs	r1, #255	; 0xff
 8011d2e:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8011d32:	f7ff f9fe 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 8011d36:	6820      	ldr	r0, [r4, #0]
 8011d38:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8011d3c:	f7ff fa0a 	bl	8011154 <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 8011d40:	6820      	ldr	r0, [r4, #0]
 8011d42:	2101      	movs	r1, #1
 8011d44:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 8011d48:	68e8      	ldr	r0, [r5, #12]
 8011d4a:	f7ff fa0d 	bl	8011168 <lv_disp_dpx.part.0>
 8011d4e:	4601      	mov	r1, r0
 8011d50:	4658      	mov	r0, fp
 8011d52:	f7ff f9b2 	bl	80110ba <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 8011d56:	6820      	ldr	r0, [r4, #0]
 8011d58:	8839      	ldrh	r1, [r7, #0]
 8011d5a:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8011d5e:	f7ff f9b1 	bl	80110c4 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 8011d62:	6820      	ldr	r0, [r4, #0]
 8011d64:	2102      	movs	r1, #2
 8011d66:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 8011d6a:	68e8      	ldr	r0, [r5, #12]
 8011d6c:	f7ff f9fc 	bl	8011168 <lv_disp_dpx.part.0>
 8011d70:	4601      	mov	r1, r0
 8011d72:	4658      	mov	r0, fp
 8011d74:	f7ff fa2f 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 8011d78:	6820      	ldr	r0, [r4, #0]
 8011d7a:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 8011d7e:	2012      	movs	r0, #18
 8011d80:	f005 f8b4 	bl	8016eec <lv_palette_main>
 8011d84:	4601      	mov	r1, r0
 8011d86:	4658      	mov	r0, fp
 8011d88:	f7ff f9b6 	bl	80110f8 <lv_style_set_text_color>
    style_init_reset(&styles->meter_marker);
 8011d8c:	6820      	ldr	r0, [r4, #0]
 8011d8e:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8011d92:	f7ff f9df 	bl	8011154 <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 8011d96:	6820      	ldr	r0, [r4, #0]
 8011d98:	2105      	movs	r1, #5
 8011d9a:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 8011d9e:	68e8      	ldr	r0, [r5, #12]
 8011da0:	f7ff f9e2 	bl	8011168 <lv_disp_dpx.part.0>
 8011da4:	4601      	mov	r1, r0
 8011da6:	4658      	mov	r0, fp
 8011da8:	f7ff f987 	bl	80110ba <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 8011dac:	6820      	ldr	r0, [r4, #0]
 8011dae:	8839      	ldrh	r1, [r7, #0]
 8011db0:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8011db4:	f7ff f986 	bl	80110c4 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 8011db8:	6820      	ldr	r0, [r4, #0]
 8011dba:	2114      	movs	r1, #20
 8011dbc:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 8011dc0:	68e8      	ldr	r0, [r5, #12]
 8011dc2:	f7ff f9d1 	bl	8011168 <lv_disp_dpx.part.0>
 8011dc6:	4601      	mov	r1, r0
 8011dc8:	4658      	mov	r0, fp
 8011dca:	f7ff f984 	bl	80110d6 <lv_style_set_size>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 8011dce:	6820      	ldr	r0, [r4, #0]
 8011dd0:	210f      	movs	r1, #15
 8011dd2:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 8011dd6:	68e8      	ldr	r0, [r5, #12]
 8011dd8:	f7ff f9c6 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8011ddc:	f241 0112 	movw	r1, #4114	; 0x1012
 8011de0:	4602      	mov	r2, r0
 8011de2:	4658      	mov	r0, fp
 8011de4:	f006 fa0d 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->meter_indic);
 8011de8:	6820      	ldr	r0, [r4, #0]
 8011dea:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8011dee:	f7ff f9b1 	bl	8011154 <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 8011df2:	6820      	ldr	r0, [r4, #0]
 8011df4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011df8:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8011dfc:	f7ff f9a6 	bl	801114c <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	8839      	ldrh	r1, [r7, #0]
 8011e04:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8011e08:	f7ff f997 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 8011e0c:	6820      	ldr	r0, [r4, #0]
 8011e0e:	21ff      	movs	r1, #255	; 0xff
 8011e10:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8011e14:	f7ff f98d 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 8011e18:	6820      	ldr	r0, [r4, #0]
 8011e1a:	210f      	movs	r1, #15
 8011e1c:	f500 7bb0 	add.w	fp, r0, #352	; 0x160
 8011e20:	68e8      	ldr	r0, [r5, #12]
 8011e22:	f7ff f9a1 	bl	8011168 <lv_disp_dpx.part.0>
 8011e26:	4601      	mov	r1, r0
 8011e28:	4658      	mov	r0, fp
 8011e2a:	f7ff f954 	bl	80110d6 <lv_style_set_size>
    style_init_reset(&styles->table_cell);
 8011e2e:	6820      	ldr	r0, [r4, #0]
 8011e30:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8011e34:	f7ff f98e 	bl	8011154 <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 8011e38:	6820      	ldr	r0, [r4, #0]
 8011e3a:	2101      	movs	r1, #1
 8011e3c:	f500 7ba8 	add.w	fp, r0, #336	; 0x150
 8011e40:	68e8      	ldr	r0, [r5, #12]
 8011e42:	f7ff f991 	bl	8011168 <lv_disp_dpx.part.0>
 8011e46:	4601      	mov	r1, r0
 8011e48:	4658      	mov	r0, fp
 8011e4a:	f7ff f95f 	bl	801110c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 8011e4e:	6820      	ldr	r0, [r4, #0]
 8011e50:	f8b9 1000 	ldrh.w	r1, [r9]
 8011e54:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8011e58:	f7ff f95d 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM );
 8011e5c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8011e5e:	2203      	movs	r2, #3
 8011e60:	2133      	movs	r1, #51	; 0x33
 8011e62:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8011e66:	f006 f9cc 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->ta_cursor);
 8011e6a:	6820      	ldr	r0, [r4, #0]
 8011e6c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8011e70:	f7ff f970 	bl	8011154 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 8011e74:	6820      	ldr	r0, [r4, #0]
 8011e76:	8839      	ldrh	r1, [r7, #0]
 8011e78:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8011e7c:	f7ff f94b 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	2102      	movs	r1, #2
 8011e84:	f500 77b4 	add.w	r7, r0, #360	; 0x168
 8011e88:	68e8      	ldr	r0, [r5, #12]
 8011e8a:	f7ff f96d 	bl	8011168 <lv_disp_dpx.part.0>
 8011e8e:	4601      	mov	r1, r0
 8011e90:	4638      	mov	r0, r7
 8011e92:	f7ff f93b 	bl	801110c <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, lv_disp_dpx(theme.disp, 1));
 8011e96:	6820      	ldr	r0, [r4, #0]
 8011e98:	2101      	movs	r1, #1
 8011e9a:	f500 77b4 	add.w	r7, r0, #360	; 0x168
 8011e9e:	68e8      	ldr	r0, [r5, #12]
 8011ea0:	f7ff f962 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8011ea4:	f241 0112 	movw	r1, #4114	; 0x1012
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	4638      	mov	r0, r7
 8011eac:	f006 f9a9 	bl	8018202 <lv_style_set_prop>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 8011eb0:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8011eb2:	2204      	movs	r2, #4
 8011eb4:	2133      	movs	r1, #51	; 0x33
 8011eb6:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8011eba:	f006 f9a2 	bl	8018202 <lv_style_set_prop>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 8011ebe:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8011ec0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011ec4:	2165      	movs	r1, #101	; 0x65
 8011ec6:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8011eca:	f006 f99a 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->ta_placeholder);
 8011ece:	6820      	ldr	r0, [r4, #0]
 8011ed0:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 8011ed4:	f7ff f93e 	bl	8011154 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 8011ed8:	6a2b      	ldr	r3, [r5, #32]
 8011eda:	6827      	ldr	r7, [r4, #0]
 8011edc:	07db      	lsls	r3, r3, #31
 8011ede:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8011ee2:	f140 825d 	bpl.w	80123a0 <lv_theme_default_init+0x1190>
 8011ee6:	2102      	movs	r1, #2
 8011ee8:	2012      	movs	r0, #18
 8011eea:	f005 f81b 	bl	8016f24 <lv_palette_darken>
 8011eee:	4601      	mov	r1, r0
 8011ef0:	4638      	mov	r0, r7
 8011ef2:	f7ff f901 	bl	80110f8 <lv_style_set_text_color>
    style_init_reset(&styles->calendar_bg);
 8011ef6:	6820      	ldr	r0, [r4, #0]
 8011ef8:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8011efc:	f7ff f92a 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->calendar_bg, PAD_SMALL);
 8011f00:	7833      	ldrb	r3, [r6, #0]
 8011f02:	6827      	ldr	r7, [r4, #0]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 8011f0a:	f040 824e 	bne.w	80123aa <lv_theme_default_init+0x119a>
 8011f0e:	210e      	movs	r1, #14
 8011f10:	68e8      	ldr	r0, [r5, #12]
 8011f12:	e001      	b.n	8011f18 <lv_theme_default_init+0xd08>
 8011f14:	08025c32 	.word	0x08025c32
 8011f18:	f7ff f926 	bl	8011168 <lv_disp_dpx.part.0>
 8011f1c:	4601      	mov	r1, r0
 8011f1e:	4638      	mov	r0, r7
 8011f20:	f7ff f959 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->calendar_bg, PAD_SMALL / 2);
 8011f24:	6823      	ldr	r3, [r4, #0]
 8011f26:	f503 7bbc 	add.w	fp, r3, #376	; 0x178
 8011f2a:	7833      	ldrb	r3, [r6, #0]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	f040 8242 	bne.w	80123b6 <lv_theme_default_init+0x11a6>
 8011f32:	210e      	movs	r1, #14
 8011f34:	68e8      	ldr	r0, [r5, #12]
 8011f36:	f7ff f917 	bl	8011168 <lv_disp_dpx.part.0>
 8011f3a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8011f3e:	f340 074f 	sbfx	r7, r0, #1, #16
    lv_style_set_pad_row(style, value);
 8011f42:	4658      	mov	r0, fp
 8011f44:	4639      	mov	r1, r7
 8011f46:	f7ff f8b3 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	4658      	mov	r0, fp
 8011f4e:	f7ff f8eb 	bl	8011128 <lv_style_set_pad_column>
    lv_style_set_radius(&styles->calendar_bg, 0);
 8011f52:	6820      	ldr	r0, [r4, #0]
 8011f54:	2100      	movs	r1, #0
 8011f56:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8011f5a:	f7ff f8f7 	bl	801114c <lv_style_set_radius>
    style_init_reset(&styles->calendar_day);
 8011f5e:	6820      	ldr	r0, [r4, #0]
 8011f60:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8011f64:	f7ff f8f6 	bl	8011154 <style_init_reset>
    lv_style_set_border_width(&styles->calendar_day, lv_disp_dpx(theme.disp, 1));
 8011f68:	6820      	ldr	r0, [r4, #0]
 8011f6a:	2101      	movs	r1, #1
 8011f6c:	f500 77c0 	add.w	r7, r0, #384	; 0x180
 8011f70:	68e8      	ldr	r0, [r5, #12]
 8011f72:	f7ff f8f9 	bl	8011168 <lv_disp_dpx.part.0>
 8011f76:	4601      	mov	r1, r0
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f7ff f8c7 	bl	801110c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->calendar_day, color_grey);
 8011f7e:	6820      	ldr	r0, [r4, #0]
 8011f80:	f8b9 1000 	ldrh.w	r1, [r9]
 8011f84:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8011f88:	f7ff f8c5 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->calendar_day, color_card);
 8011f8c:	6820      	ldr	r0, [r4, #0]
 8011f8e:	f8ba 1000 	ldrh.w	r1, [sl]
 8011f92:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8011f96:	f7ff f8d0 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->calendar_day, LV_OPA_20);
 8011f9a:	6820      	ldr	r0, [r4, #0]
 8011f9c:	2133      	movs	r1, #51	; 0x33
 8011f9e:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8011fa2:	f7ff f8c6 	bl	8011132 <lv_style_set_bg_opa>
    style_init_reset(&styles->colorwheel_main);
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8011fac:	f7ff f8d2 	bl	8011154 <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 8011fb0:	6820      	ldr	r0, [r4, #0]
 8011fb2:	210a      	movs	r1, #10
 8011fb4:	f500 77c4 	add.w	r7, r0, #392	; 0x188
 8011fb8:	68e8      	ldr	r0, [r5, #12]
 8011fba:	f7ff f8d5 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8011fbe:	f44f 6105 	mov.w	r1, #2128	; 0x850
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	4638      	mov	r0, r7
 8011fc6:	f006 f91c 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->msgbox_btn_bg);
 8011fca:	6820      	ldr	r0, [r4, #0]
 8011fcc:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8011fd0:	f7ff f8c0 	bl	8011154 <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 8011fd4:	6820      	ldr	r0, [r4, #0]
 8011fd6:	2104      	movs	r1, #4
 8011fd8:	f500 77cc 	add.w	r7, r0, #408	; 0x198
 8011fdc:	68e8      	ldr	r0, [r5, #12]
 8011fde:	f7ff f8c3 	bl	8011168 <lv_disp_dpx.part.0>
 8011fe2:	4601      	mov	r1, r0
 8011fe4:	4638      	mov	r0, r7
 8011fe6:	f7ff f8f6 	bl	80111d6 <lv_style_set_pad_all>
    style_init_reset(&styles->msgbox_bg);
 8011fea:	6820      	ldr	r0, [r4, #0]
 8011fec:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8011ff0:	f7ff f8b0 	bl	8011154 <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 8011ff4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 8011ff6:	f242 0264 	movw	r2, #8292	; 0x2064
 8011ffa:	f241 0103 	movw	r1, #4099	; 0x1003
 8011ffe:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8012002:	f006 f8fe 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->keyboard_btn_bg);
 8012006:	6820      	ldr	r0, [r4, #0]
 8012008:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 801200c:	f7ff f8a2 	bl	8011154 <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 8012010:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8012012:	2200      	movs	r2, #0
 8012014:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8012018:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 801201c:	f006 f8f1 	bl	8018202 <lv_style_set_prop>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 8012020:	7833      	ldrb	r3, [r6, #0]
 8012022:	6827      	ldr	r7, [r4, #0]
 8012024:	2b03      	cmp	r3, #3
 8012026:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 801202a:	f040 81ca 	bne.w	80123c2 <lv_theme_default_init+0x11b2>
 801202e:	2108      	movs	r1, #8
 8012030:	68e8      	ldr	r0, [r5, #12]
 8012032:	f7ff f899 	bl	8011168 <lv_disp_dpx.part.0>
 8012036:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801203a:	f340 004f 	sbfx	r0, r0, #1, #16
 801203e:	4601      	mov	r1, r0
 8012040:	4638      	mov	r0, r7
 8012042:	f7ff f883 	bl	801114c <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 8012046:	6820      	ldr	r0, [r4, #0]
 8012048:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 801204c:	f7ff f882 	bl	8011154 <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 8012050:	6820      	ldr	r0, [r4, #0]
 8012052:	8a29      	ldrh	r1, [r5, #16]
 8012054:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8012058:	f7ff f85d 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 801205c:	6820      	ldr	r0, [r4, #0]
 801205e:	2102      	movs	r1, #2
 8012060:	f500 77e8 	add.w	r7, r0, #464	; 0x1d0
 8012064:	68e8      	ldr	r0, [r5, #12]
 8012066:	f7ff f87f 	bl	8011168 <lv_disp_dpx.part.0>
 801206a:	0040      	lsls	r0, r0, #1
 801206c:	b201      	sxth	r1, r0
 801206e:	4638      	mov	r0, r7
 8012070:	f7ff f84c 	bl	801110c <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 8012074:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8012076:	2201      	movs	r2, #1
 8012078:	2133      	movs	r1, #51	; 0x33
 801207a:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 801207e:	f006 f8c0 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->tab_bg_focus);
 8012082:	6820      	ldr	r0, [r4, #0]
 8012084:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 8012088:	f7ff f864 	bl	8011154 <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 801208c:	6820      	ldr	r0, [r4, #0]
 801208e:	2102      	movs	r1, #2
 8012090:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
 8012094:	68e8      	ldr	r0, [r5, #12]
 8012096:	f7ff f867 	bl	8011168 <lv_disp_dpx.part.0>
 801209a:	4240      	negs	r0, r0
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 801209c:	f640 013d 	movw	r1, #2109	; 0x83d
 80120a0:	b202      	sxth	r2, r0
 80120a2:	4638      	mov	r0, r7
 80120a4:	f006 f8ad 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->list_bg);
 80120a8:	6820      	ldr	r0, [r4, #0]
 80120aa:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80120ae:	f7ff f851 	bl	8011154 <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 80120b2:	7833      	ldrb	r3, [r6, #0]
 80120b4:	6827      	ldr	r7, [r4, #0]
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80120bc:	f040 8189 	bne.w	80123d2 <lv_theme_default_init+0x11c2>
 80120c0:	2118      	movs	r1, #24
 80120c2:	68e8      	ldr	r0, [r5, #12]
 80120c4:	f7ff f850 	bl	8011168 <lv_disp_dpx.part.0>
 80120c8:	4601      	mov	r1, r0
 80120ca:	4638      	mov	r0, r7
 80120cc:	f7ff f861 	bl	8011192 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 80120d0:	6820      	ldr	r0, [r4, #0]
 80120d2:	2100      	movs	r1, #0
 80120d4:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80120d8:	f7ff f86c 	bl	80111b4 <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 80120dc:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_row(style, value);
 80120de:	2100      	movs	r1, #0
 80120e0:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80120e4:	9003      	str	r0, [sp, #12]
 80120e6:	f7fe ffe3 	bl	80110b0 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80120ea:	2100      	movs	r1, #0
 80120ec:	9803      	ldr	r0, [sp, #12]
 80120ee:	f7ff f81b 	bl	8011128 <lv_style_set_pad_column>
    lv_style_set_clip_corner(&styles->list_bg, true);
 80120f2:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 80120f4:	2201      	movs	r2, #1
 80120f6:	2161      	movs	r1, #97	; 0x61
 80120f8:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80120fc:	f006 f881 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->list_btn);
 8012100:	6820      	ldr	r0, [r4, #0]
 8012102:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8012106:	f7ff f825 	bl	8011154 <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 801210a:	6820      	ldr	r0, [r4, #0]
 801210c:	2101      	movs	r1, #1
 801210e:	f500 77d8 	add.w	r7, r0, #432	; 0x1b0
 8012112:	68e8      	ldr	r0, [r5, #12]
 8012114:	f7ff f828 	bl	8011168 <lv_disp_dpx.part.0>
 8012118:	4601      	mov	r1, r0
 801211a:	4638      	mov	r0, r7
 801211c:	f7fe fff6 	bl	801110c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 8012120:	6820      	ldr	r0, [r4, #0]
 8012122:	f8b9 1000 	ldrh.w	r1, [r9]
 8012126:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 801212a:	f7fe fff4 	bl	8011116 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 801212e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8012130:	2201      	movs	r2, #1
 8012132:	2133      	movs	r1, #51	; 0x33
 8012134:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8012138:	f006 f863 	bl	8018202 <lv_style_set_prop>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801213c:	7833      	ldrb	r3, [r6, #0]
 801213e:	6827      	ldr	r7, [r4, #0]
 8012140:	2b01      	cmp	r3, #1
 8012142:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8012146:	f040 814a 	bne.w	80123de <lv_theme_default_init+0x11ce>
 801214a:	210e      	movs	r1, #14
 801214c:	68e8      	ldr	r0, [r5, #12]
 801214e:	f7ff f80b 	bl	8011168 <lv_disp_dpx.part.0>
 8012152:	4601      	mov	r1, r0
 8012154:	4638      	mov	r0, r7
 8012156:	f7ff f83e 	bl	80111d6 <lv_style_set_pad_all>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801215a:	7833      	ldrb	r3, [r6, #0]
 801215c:	6824      	ldr	r4, [r4, #0]
 801215e:	2b01      	cmp	r3, #1
 8012160:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
 8012164:	f040 8141 	bne.w	80123ea <lv_theme_default_init+0x11da>
 8012168:	210e      	movs	r1, #14
 801216a:	68e8      	ldr	r0, [r5, #12]
 801216c:	f7fe fffc 	bl	8011168 <lv_disp_dpx.part.0>
 8012170:	4601      	mov	r1, r0
 8012172:	4620      	mov	r0, r4
    style_init_reset(&styles->list_item_grow);
 8012174:	4ca6      	ldr	r4, [pc, #664]	; (8012410 <lv_theme_default_init+0x1200>)
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 8012176:	f7fe ffd7 	bl	8011128 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 801217a:	6820      	ldr	r0, [r4, #0]
 801217c:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8012180:	f7fe ffe8 	bl	8011154 <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 8012184:	7833      	ldrb	r3, [r6, #0]
 8012186:	6827      	ldr	r7, [r4, #0]
 8012188:	2b01      	cmp	r3, #1
 801218a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 801218e:	f040 8132 	bne.w	80123f6 <lv_theme_default_init+0x11e6>
 8012192:	2118      	movs	r1, #24
 8012194:	68e8      	ldr	r0, [r5, #12]
 8012196:	f7fe ffe7 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 801219a:	f640 010a 	movw	r1, #2058	; 0x80a
 801219e:	4602      	mov	r2, r0
 80121a0:	4638      	mov	r0, r7
 80121a2:	f006 f82e 	bl	8018202 <lv_style_set_prop>
    style_init_reset(&styles->led);
 80121a6:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 80121a8:	2700      	movs	r7, #0
 80121aa:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80121ae:	f7fe ffd1 	bl	8011154 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 80121b2:	6820      	ldr	r0, [r4, #0]
 80121b4:	21ff      	movs	r1, #255	; 0xff
 80121b6:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80121ba:	f7fe ffba 	bl	8011132 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 80121be:	6820      	ldr	r0, [r4, #0]
 80121c0:	f500 73ec 	add.w	r3, r0, #472	; 0x1d8
 80121c4:	f7fe f963 	bl	801048e <lv_color_white>
 80121c8:	4601      	mov	r1, r0
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fe ffb5 	bl	801113a <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 80121d0:	6820      	ldr	r0, [r4, #0]
 80121d2:	f500 76ec 	add.w	r6, r0, #472	; 0x1d8
 80121d6:	2012      	movs	r0, #18
 80121d8:	f004 fe88 	bl	8016eec <lv_palette_main>
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 80121dc:	2122      	movs	r1, #34	; 0x22
 80121de:	b282      	uxth	r2, r0
 80121e0:	4630      	mov	r0, r6
    lv_style_value_t v = {
 80121e2:	f8ad 7010 	strh.w	r7, [sp, #16]
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 80121e6:	f006 f80c 	bl	8018202 <lv_style_set_prop>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80121f0:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80121f4:	f7fe ffaa 	bl	801114c <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 80121f8:	6820      	ldr	r0, [r4, #0]
 80121fa:	210f      	movs	r1, #15
 80121fc:	f500 76ec 	add.w	r6, r0, #472	; 0x1d8
 8012200:	68e8      	ldr	r0, [r5, #12]
 8012202:	f7fe ffb1 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8012206:	f44f 6104 	mov.w	r1, #2112	; 0x840
 801220a:	4602      	mov	r2, r0
 801220c:	4630      	mov	r0, r6
 801220e:	f005 fff8 	bl	8018202 <lv_style_set_prop>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 8012212:	6820      	ldr	r0, [r4, #0]
 8012214:	f500 73ec 	add.w	r3, r0, #472	; 0x1d8
 8012218:	f7fe f939 	bl	801048e <lv_color_white>
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 801221c:	2144      	movs	r1, #68	; 0x44
 801221e:	b282      	uxth	r2, r0
 8012220:	4618      	mov	r0, r3
    lv_style_value_t v = {
 8012222:	f8ad 7010 	strh.w	r7, [sp, #16]
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8012226:	f005 ffec 	bl	8018202 <lv_style_set_prop>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 801222a:	6824      	ldr	r4, [r4, #0]
 801222c:	2105      	movs	r1, #5
 801222e:	68e8      	ldr	r0, [r5, #12]
 8012230:	f504 74ec 	add.w	r4, r4, #472	; 0x1d8
 8012234:	f7fe ff98 	bl	8011168 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 8012238:	f640 0143 	movw	r1, #2115	; 0x843
 801223c:	4602      	mov	r2, r0
 801223e:	4620      	mov	r0, r4
 8012240:	f005 ffdf 	bl	8018202 <lv_style_set_prop>
    inited = true;
 8012244:	4b73      	ldr	r3, [pc, #460]	; (8012414 <lv_theme_default_init+0x1204>)
 8012246:	2201      	movs	r2, #1
 8012248:	701a      	strb	r2, [r3, #0]
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 801224a:	f1b8 0f00 	cmp.w	r8, #0
 801224e:	f040 80d8 	bne.w	8012402 <lv_theme_default_init+0x11f2>
 8012252:	2000      	movs	r0, #0
 8012254:	f7f4 fcea 	bl	8006c2c <lv_obj_report_style_change>
}
 8012258:	486f      	ldr	r0, [pc, #444]	; (8012418 <lv_theme_default_init+0x1208>)
 801225a:	b007      	add	sp, #28
 801225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 8012260:	f004 f94a 	bl	80164f8 <lv_disp_get_default>
 8012264:	f004 f94e 	bl	8016504 <lv_disp_get_hor_res>
 8012268:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 801226c:	bfb4      	ite	lt
 801226e:	2302      	movlt	r3, #2
    else disp_size = DISP_LARGE;
 8012270:	2301      	movge	r3, #1
 8012272:	f7fe bfea 	b.w	801124a <lv_theme_default_init+0x3a>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8012276:	2104      	movs	r1, #4
 8012278:	2012      	movs	r0, #18
 801227a:	f004 fe41 	bl	8016f00 <lv_palette_lighten>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 801227e:	6a2b      	ldr	r3, [r5, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8012280:	f8aa 0000 	strh.w	r0, [sl]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8012284:	07d8      	lsls	r0, r3, #31
 8012286:	f53e affa 	bmi.w	801127e <lv_theme_default_init+0x6e>
 801228a:	2104      	movs	r1, #4
 801228c:	2012      	movs	r0, #18
 801228e:	f004 fe49 	bl	8016f24 <lv_palette_darken>
 8012292:	f7fe bff8 	b.w	8011286 <lv_theme_default_init+0x76>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8012296:	f7fe f8fa 	bl	801048e <lv_color_white>
 801229a:	4b60      	ldr	r3, [pc, #384]	; (801241c <lv_theme_default_init+0x120c>)
 801229c:	8018      	strh	r0, [r3, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 801229e:	6a2b      	ldr	r3, [r5, #32]
 80122a0:	07d9      	lsls	r1, r3, #31
 80122a2:	f53e affc 	bmi.w	801129e <lv_theme_default_init+0x8e>
 80122a6:	2102      	movs	r1, #2
 80122a8:	2012      	movs	r0, #18
 80122aa:	f004 fe29 	bl	8016f00 <lv_palette_lighten>
 80122ae:	f8a9 0000 	strh.w	r0, [r9]
 80122b2:	f7fe bff8 	b.w	80112a6 <lv_theme_default_init+0x96>
    lv_style_set_bg_color(&styles->scrollbar, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_main(LV_PALETTE_GREY));
 80122b6:	2012      	movs	r0, #18
 80122b8:	f004 fe18 	bl	8016eec <lv_palette_main>
 80122bc:	f7ff b829 	b.w	8011312 <lv_theme_default_init+0x102>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	68e8      	ldr	r0, [r5, #12]
 80122c4:	bf0c      	ite	eq
 80122c6:	210c      	moveq	r1, #12
 80122c8:	210a      	movne	r1, #10
 80122ca:	f7ff b87d 	b.w	80113c8 <lv_theme_default_init+0x1b8>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	68e8      	ldr	r0, [r5, #12]
 80122d2:	bf0c      	ite	eq
 80122d4:	210c      	moveq	r1, #12
 80122d6:	210a      	movne	r1, #10
 80122d8:	f7ff b884 	b.w	80113e4 <lv_theme_default_init+0x1d4>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 80122dc:	2b02      	cmp	r3, #2
 80122de:	68e8      	ldr	r0, [r5, #12]
 80122e0:	bf0c      	ite	eq
 80122e2:	2114      	moveq	r1, #20
 80122e4:	2110      	movne	r1, #16
 80122e6:	f7ff b8c6 	b.w	8011476 <lv_theme_default_init+0x266>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 80122ea:	2b02      	cmp	r3, #2
 80122ec:	68e8      	ldr	r0, [r5, #12]
 80122ee:	bf0c      	ite	eq
 80122f0:	210c      	moveq	r1, #12
 80122f2:	210a      	movne	r1, #10
 80122f4:	f7ff b8ce 	b.w	8011494 <lv_theme_default_init+0x284>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 80122f8:	2b02      	cmp	r3, #2
 80122fa:	68e8      	ldr	r0, [r5, #12]
 80122fc:	bf0c      	ite	eq
 80122fe:	210c      	moveq	r1, #12
 8012300:	210a      	movne	r1, #10
 8012302:	f7ff b8f3 	b.w	80114ec <lv_theme_default_init+0x2dc>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp, 16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 8012306:	2b02      	cmp	r3, #2
 8012308:	68e8      	ldr	r0, [r5, #12]
 801230a:	bf0c      	ite	eq
 801230c:	210c      	moveq	r1, #12
 801230e:	2108      	movne	r1, #8
 8012310:	f7ff b96d 	b.w	80115ee <lv_theme_default_init+0x3de>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8012314:	2b02      	cmp	r3, #2
 8012316:	68e8      	ldr	r0, [r5, #12]
 8012318:	bf0c      	ite	eq
 801231a:	2114      	moveq	r1, #20
 801231c:	2110      	movne	r1, #16
 801231e:	f7ff b9af 	b.w	8011680 <lv_theme_default_init+0x470>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8012322:	2b02      	cmp	r3, #2
 8012324:	68e8      	ldr	r0, [r5, #12]
 8012326:	bf0c      	ite	eq
 8012328:	210c      	moveq	r1, #12
 801232a:	210a      	movne	r1, #10
 801232c:	f7ff b9b7 	b.w	801169e <lv_theme_default_init+0x48e>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8012330:	2b02      	cmp	r3, #2
 8012332:	68e8      	ldr	r0, [r5, #12]
 8012334:	bf0c      	ite	eq
 8012336:	2114      	moveq	r1, #20
 8012338:	2110      	movne	r1, #16
 801233a:	f7ff ba0d 	b.w	8011758 <lv_theme_default_init+0x548>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 801233e:	2b02      	cmp	r3, #2
 8012340:	68e8      	ldr	r0, [r5, #12]
 8012342:	bf0c      	ite	eq
 8012344:	2114      	moveq	r1, #20
 8012346:	2110      	movne	r1, #16
 8012348:	f7ff ba15 	b.w	8011776 <lv_theme_default_init+0x566>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 801234c:	2b02      	cmp	r3, #2
 801234e:	68e8      	ldr	r0, [r5, #12]
 8012350:	bf0c      	ite	eq
 8012352:	2114      	moveq	r1, #20
 8012354:	2110      	movne	r1, #16
 8012356:	f7ff ba1d 	b.w	8011794 <lv_theme_default_init+0x584>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 801235a:	2b02      	cmp	r3, #2
 801235c:	68e8      	ldr	r0, [r5, #12]
 801235e:	bf0c      	ite	eq
 8012360:	210c      	moveq	r1, #12
 8012362:	210a      	movne	r1, #10
 8012364:	f7ff ba29 	b.w	80117ba <lv_theme_default_init+0x5aa>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8012368:	2b02      	cmp	r3, #2
 801236a:	68e8      	ldr	r0, [r5, #12]
 801236c:	bf0c      	ite	eq
 801236e:	210c      	moveq	r1, #12
 8012370:	210a      	movne	r1, #10
 8012372:	f7ff ba31 	b.w	80117d8 <lv_theme_default_init+0x5c8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8012376:	2b02      	cmp	r3, #2
 8012378:	68e8      	ldr	r0, [r5, #12]
 801237a:	bf0c      	ite	eq
 801237c:	2106      	moveq	r1, #6
 801237e:	2102      	movne	r1, #2
 8012380:	f7ff ba8b 	b.w	801189a <lv_theme_default_init+0x68a>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 8012384:	2b02      	cmp	r3, #2
 8012386:	68e8      	ldr	r0, [r5, #12]
 8012388:	bf0c      	ite	eq
 801238a:	2106      	moveq	r1, #6
 801238c:	2102      	movne	r1, #2
 801238e:	f7ff ba93 	b.w	80118b8 <lv_theme_default_init+0x6a8>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8012392:	2b02      	cmp	r3, #2
 8012394:	68e8      	ldr	r0, [r5, #12]
 8012396:	bf0c      	ite	eq
 8012398:	2106      	moveq	r1, #6
 801239a:	2102      	movne	r1, #2
 801239c:	f7ff ba9b 	b.w	80118d6 <lv_theme_default_init+0x6c6>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 80123a0:	2101      	movs	r1, #1
 80123a2:	2012      	movs	r0, #18
 80123a4:	f004 fdac 	bl	8016f00 <lv_palette_lighten>
 80123a8:	e5a1      	b.n	8011eee <lv_theme_default_init+0xcde>
    lv_style_set_pad_all(&styles->calendar_bg, PAD_SMALL);
 80123aa:	2b02      	cmp	r3, #2
 80123ac:	68e8      	ldr	r0, [r5, #12]
 80123ae:	bf0c      	ite	eq
 80123b0:	210c      	moveq	r1, #12
 80123b2:	210a      	movne	r1, #10
 80123b4:	e5b0      	b.n	8011f18 <lv_theme_default_init+0xd08>
    lv_style_set_pad_gap(&styles->calendar_bg, PAD_SMALL / 2);
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	68e8      	ldr	r0, [r5, #12]
 80123ba:	bf0c      	ite	eq
 80123bc:	210c      	moveq	r1, #12
 80123be:	210a      	movne	r1, #10
 80123c0:	e5b9      	b.n	8011f36 <lv_theme_default_init+0xd26>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	68e8      	ldr	r0, [r5, #12]
 80123c6:	bf0c      	ite	eq
 80123c8:	210c      	moveq	r1, #12
 80123ca:	2108      	movne	r1, #8
 80123cc:	f7fe fecc 	bl	8011168 <lv_disp_dpx.part.0>
 80123d0:	e635      	b.n	801203e <lv_theme_default_init+0xe2e>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	68e8      	ldr	r0, [r5, #12]
 80123d6:	bf0c      	ite	eq
 80123d8:	2114      	moveq	r1, #20
 80123da:	2110      	movne	r1, #16
 80123dc:	e672      	b.n	80120c4 <lv_theme_default_init+0xeb4>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 80123de:	2b02      	cmp	r3, #2
 80123e0:	68e8      	ldr	r0, [r5, #12]
 80123e2:	bf0c      	ite	eq
 80123e4:	210c      	moveq	r1, #12
 80123e6:	210a      	movne	r1, #10
 80123e8:	e6b1      	b.n	801214e <lv_theme_default_init+0xf3e>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 80123ea:	2b02      	cmp	r3, #2
 80123ec:	68e8      	ldr	r0, [r5, #12]
 80123ee:	bf0c      	ite	eq
 80123f0:	210c      	moveq	r1, #12
 80123f2:	210a      	movne	r1, #10
 80123f4:	e6ba      	b.n	801216c <lv_theme_default_init+0xf5c>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 80123f6:	2b02      	cmp	r3, #2
 80123f8:	68e8      	ldr	r0, [r5, #12]
 80123fa:	bf0c      	ite	eq
 80123fc:	2114      	moveq	r1, #20
 80123fe:	2110      	movne	r1, #16
 8012400:	e6c9      	b.n	8012196 <lv_theme_default_init+0xf86>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 8012402:	4640      	mov	r0, r8
 8012404:	f7ef fafb 	bl	80019fe <lv_disp_get_theme>
 8012408:	4285      	cmp	r5, r0
 801240a:	f47f af25 	bne.w	8012258 <lv_theme_default_init+0x1048>
 801240e:	e720      	b.n	8012252 <lv_theme_default_init+0x1042>
 8012410:	20003198 	.word	0x20003198
 8012414:	20003194 	.word	0x20003194
 8012418:	2000319c 	.word	0x2000319c
 801241c:	20003176 	.word	0x20003176

08012420 <lv_theme_default_is_inited>:
}
 8012420:	4b01      	ldr	r3, [pc, #4]	; (8012428 <lv_theme_default_is_inited+0x8>)
 8012422:	7818      	ldrb	r0, [r3, #0]
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	20003194 	.word	0x20003194

0801242c <get_month_length>:
 * @return [28..31]
 */
static uint8_t get_month_length(int32_t year, int32_t month)
{
    month--;
    if(month < 0) {
 801242c:	1e4b      	subs	r3, r1, #1
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
        month = 12 + month; /*`month` is negative, the result will be < 12*/
 801242e:	bf44      	itt	mi
 8012430:	f101 030b 	addmi.w	r3, r1, #11
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
 8012434:	f100 30ff 	addmi.w	r0, r0, #4294967295
    }
    if(month >= 12) {
 8012438:	2b0b      	cmp	r3, #11
        year++;
        month -= 12;
 801243a:	bfc4      	itt	gt
 801243c:	3b0c      	subgt	r3, #12
        year++;
 801243e:	3001      	addgt	r0, #1
    }

    /*month == 1 is february*/
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012440:	2b01      	cmp	r3, #1
 8012442:	d116      	bne.n	8012472 <get_month_length+0x46>
 * @param year a year
 * @return 0: not leap year; 1: leap year
 */
static uint8_t is_leap_year(uint32_t year)
{
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8012444:	0782      	lsls	r2, r0, #30
 8012446:	d112      	bne.n	801246e <get_month_length+0x42>
 8012448:	2164      	movs	r1, #100	; 0x64
 801244a:	fbb0 f2f1 	udiv	r2, r0, r1
 801244e:	fb01 0212 	mls	r2, r1, r2, r0
 8012452:	b942      	cbnz	r2, 8012466 <get_month_length+0x3a>
 8012454:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012458:	fbb0 f2f3 	udiv	r2, r0, r3
 801245c:	fb03 0312 	mls	r3, r3, r2, r0
 8012460:	fab3 f383 	clz	r3, r3
 8012464:	095b      	lsrs	r3, r3, #5
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012466:	f103 001c 	add.w	r0, r3, #28
 801246a:	b2c0      	uxtb	r0, r0
}
 801246c:	4770      	bx	lr
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 801246e:	2300      	movs	r3, #0
 8012470:	e7f9      	b.n	8012466 <get_month_length+0x3a>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012472:	2007      	movs	r0, #7
 8012474:	fb93 f0f0 	sdiv	r0, r3, r0
 8012478:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801247c:	1a1b      	subs	r3, r3, r0
 801247e:	f003 0001 	and.w	r0, r3, #1
 8012482:	bf48      	it	mi
 8012484:	4240      	negmi	r0, r0
 8012486:	f1c0 001f 	rsb	r0, r0, #31
 801248a:	e7ee      	b.n	801246a <get_month_length+0x3e>

0801248c <get_day_of_week>:
 * @param day a day [1..32]
 * @return [0..6] which means [Sun..Sat] or [Mon..Sun] depending on LV_CALENDAR_WEEK_STARTS_MONDAY
 */
static uint8_t get_day_of_week(uint32_t year, uint32_t month, uint32_t day)
{
    uint32_t a = month < 3 ? 1 : 0;
 801248c:	2902      	cmp	r1, #2
 801248e:	bf94      	ite	ls
 8012490:	2301      	movls	r3, #1
 8012492:	2300      	movhi	r3, #0
    uint32_t b = year - a;
 8012494:	eba0 0003 	sub.w	r0, r0, r3

#if LV_CALENDAR_WEEK_STARTS_MONDAY
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400) - 1) % 7;
#else
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 8012498:	bf94      	ite	ls
 801249a:	230c      	movls	r3, #12
 801249c:	2300      	movhi	r3, #0
 801249e:	4402      	add	r2, r0
 80124a0:	4419      	add	r1, r3
 80124a2:	230c      	movs	r3, #12
 80124a4:	eb02 0290 	add.w	r2, r2, r0, lsr #2
 80124a8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80124ac:	393e      	subs	r1, #62	; 0x3e
 80124ae:	fbb1 f1f3 	udiv	r1, r1, r3
 80124b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80124b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80124ba:	441a      	add	r2, r3
 80124bc:	2364      	movs	r3, #100	; 0x64
 80124be:	fbb0 f0f3 	udiv	r0, r0, r3
 80124c2:	4411      	add	r1, r2
 80124c4:	2307      	movs	r3, #7
 80124c6:	1a08      	subs	r0, r1, r0
 80124c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80124cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80124d0:	1ac0      	subs	r0, r0, r3
#endif

    return day_of_week;
}
 80124d2:	b2c0      	uxtb	r0, r0
 80124d4:	4770      	bx	lr

080124d6 <draw_part_begin_event_cb>:
{
 80124d6:	b570      	push	{r4, r5, r6, lr}
 80124d8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80124da:	f7ef fb2d 	bl	8001b38 <lv_event_get_target>
 80124de:	4605      	mov	r5, r0
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 80124e0:	4620      	mov	r0, r4
 80124e2:	f7ef fb2d 	bl	8001b40 <lv_event_get_param>
    if(dsc->part == LV_PART_ITEMS) {
 80124e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 80124e8:	4604      	mov	r4, r0
    if(dsc->part == LV_PART_ITEMS) {
 80124ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80124ee:	d12f      	bne.n	8012550 <draw_part_begin_event_cb+0x7a>
        if(dsc->id < 7) {
 80124f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80124f2:	2906      	cmp	r1, #6
 80124f4:	d82d      	bhi.n	8012552 <draw_part_begin_event_cb+0x7c>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 80124f6:	6883      	ldr	r3, [r0, #8]
 80124f8:	2200      	movs	r2, #0
 80124fa:	729a      	strb	r2, [r3, #10]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 80124fc:	779a      	strb	r2, [r3, #30]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_HIGHLIGHT)) {
 80124fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012502:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012504:	4628      	mov	r0, r5
 8012506:	f008 fe59 	bl	801b1bc <lv_btnmatrix_has_btn_ctrl>
 801250a:	b178      	cbz	r0, 801252c <draw_part_begin_event_cb+0x56>
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 801250c:	2366      	movs	r3, #102	; 0x66
 801250e:	68a6      	ldr	r6, [r4, #8]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 8012510:	4628      	mov	r0, r5
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 8012512:	72b3      	strb	r3, [r6, #10]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 8012514:	f7f5 ff4a 	bl	80083ac <lv_theme_get_color_primary>
 8012518:	80b0      	strh	r0, [r6, #4]
            if(lv_btnmatrix_get_selected_btn(obj) == dsc->id) {
 801251a:	4628      	mov	r0, r5
 801251c:	f008 fe1e 	bl	801b15c <lv_btnmatrix_get_selected_btn>
 8012520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012522:	4298      	cmp	r0, r3
                dsc->rect_dsc->bg_opa = LV_OPA_70;
 8012524:	bf02      	ittt	eq
 8012526:	68a3      	ldreq	r3, [r4, #8]
 8012528:	22b2      	moveq	r2, #178	; 0xb2
 801252a:	729a      	strbeq	r2, [r3, #10]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_TODAY)) {
 801252c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012530:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012532:	4628      	mov	r0, r5
 8012534:	f008 fe42 	bl	801b1bc <lv_btnmatrix_has_btn_ctrl>
 8012538:	b150      	cbz	r0, 8012550 <draw_part_begin_event_cb+0x7a>
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 801253a:	68a6      	ldr	r6, [r4, #8]
 801253c:	23ff      	movs	r3, #255	; 0xff
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 801253e:	4628      	mov	r0, r5
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 8012540:	77b3      	strb	r3, [r6, #30]
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012542:	f7f5 ff33 	bl	80083ac <lv_theme_get_color_primary>
            dsc->rect_dsc->border_width += 1;
 8012546:	68a2      	ldr	r2, [r4, #8]
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012548:	8370      	strh	r0, [r6, #26]
            dsc->rect_dsc->border_width += 1;
 801254a:	8b93      	ldrh	r3, [r2, #28]
 801254c:	3301      	adds	r3, #1
 801254e:	8393      	strh	r3, [r2, #28]
}
 8012550:	bd70      	pop	{r4, r5, r6, pc}
        else if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_BTNMATRIX_CTRL_DISABLED)) {
 8012552:	2220      	movs	r2, #32
 8012554:	b289      	uxth	r1, r1
 8012556:	4628      	mov	r0, r5
 8012558:	f008 fe30 	bl	801b1bc <lv_btnmatrix_has_btn_ctrl>
 801255c:	2800      	cmp	r0, #0
 801255e:	d0ce      	beq.n	80124fe <draw_part_begin_event_cb+0x28>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012560:	68a3      	ldr	r3, [r4, #8]
 8012562:	2200      	movs	r2, #0
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8012564:	2012      	movs	r0, #18
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012566:	729a      	strb	r2, [r3, #10]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8012568:	779a      	strb	r2, [r3, #30]
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 801256a:	68e6      	ldr	r6, [r4, #12]
 801256c:	f004 fcbe 	bl	8016eec <lv_palette_main>
 8012570:	81b0      	strh	r0, [r6, #12]
 8012572:	e7c4      	b.n	80124fe <draw_part_begin_event_cb+0x28>

08012574 <highlight_update>:

static void highlight_update(lv_obj_t * obj)
{
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	4604      	mov	r4, r0
    lv_calendar_t * calendar = (lv_calendar_t *)obj;
    uint16_t i;

    /*Clear all kind of selection*/
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_CALENDAR_CTRL_TODAY | LV_CALENDAR_CTRL_HIGHLIGHT);
 8012578:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 801257c:	f008 fdb3 	bl	801b0e6 <lv_btnmatrix_clear_btn_ctrl_all>

    if(calendar->highlighted_dates) {
 8012580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012582:	2b00      	cmp	r3, #0
 8012584:	d138      	bne.n	80125f8 <highlight_update+0x84>
                lv_btnmatrix_set_btn_ctrl(obj, calendar->highlighted_dates[i].day + 7, LV_CALENDAR_CTRL_HIGHLIGHT);
            }
        }
    }

    if(calendar->showed_date.year == calendar->today.year && calendar->showed_date.month == calendar->today.month) {
 8012586:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012588:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 801258c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801258e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012592:	429a      	cmp	r2, r3
 8012594:	d132      	bne.n	80125fc <highlight_update+0x88>
        uint8_t day_first = get_day_of_week(calendar->today.year, calendar->today.month, calendar->today.day - 1);
 8012596:	f994 503b 	ldrsb.w	r5, [r4, #59]	; 0x3b
 801259a:	f994 103a 	ldrsb.w	r1, [r4, #58]	; 0x3a
 801259e:	1e6a      	subs	r2, r5, #1
 80125a0:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 80125a2:	f7ff ff73 	bl	801248c <get_day_of_week>
        lv_btnmatrix_set_btn_ctrl(obj, calendar->today.day + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 80125a6:	4428      	add	r0, r5
 80125a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80125ac:	1dc1      	adds	r1, r0, #7
 80125ae:	4620      	mov	r0, r4
 80125b0:	b289      	uxth	r1, r1
    }
}
 80125b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_btnmatrix_set_btn_ctrl(obj, calendar->today.day + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 80125b6:	f008 bda5 	b.w	801b104 <lv_btnmatrix_set_btn_ctrl>
            if(calendar->highlighted_dates[i].year == calendar->today.year && calendar->highlighted_dates[i].month == calendar->showed_date.month) {
 80125ba:	b2ab      	uxth	r3, r5
 80125bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80125be:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80125c2:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 80125c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80125c8:	4299      	cmp	r1, r3
 80125ca:	d10e      	bne.n	80125ea <highlight_update+0x76>
 80125cc:	f992 1002 	ldrsb.w	r1, [r2, #2]
 80125d0:	f994 303e 	ldrsb.w	r3, [r4, #62]	; 0x3e
 80125d4:	4299      	cmp	r1, r3
 80125d6:	d108      	bne.n	80125ea <highlight_update+0x76>
                lv_btnmatrix_set_btn_ctrl(obj, calendar->highlighted_dates[i].day + 7, LV_CALENDAR_CTRL_HIGHLIGHT);
 80125d8:	f992 1003 	ldrsb.w	r1, [r2, #3]
 80125dc:	4620      	mov	r0, r4
 80125de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80125e2:	3107      	adds	r1, #7
 80125e4:	b289      	uxth	r1, r1
 80125e6:	f008 fd8d 	bl	801b104 <lv_btnmatrix_set_btn_ctrl>
        for(i = 0; i < calendar->highlighted_dates_num; i++) {
 80125ea:	3501      	adds	r5, #1
 80125ec:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 80125f0:	b2ab      	uxth	r3, r5
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d8e1      	bhi.n	80125ba <highlight_update+0x46>
 80125f6:	e7c6      	b.n	8012586 <highlight_update+0x12>
 80125f8:	2500      	movs	r5, #0
 80125fa:	e7f7      	b.n	80125ec <highlight_update+0x78>
}
 80125fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08012600 <lv_calendar_set_showed_date>:
{
 8012600:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calendar->showed_date.month  = month;
 8012604:	fa4f f982 	sxtb.w	r9, r2
    calendar->showed_date.day    = 1;
 8012608:	2301      	movs	r3, #1
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 801260a:	2400      	movs	r4, #0
    calendar->showed_date.year   = year;
 801260c:	8781      	strh	r1, [r0, #60]	; 0x3c
{
 801260e:	460f      	mov	r7, r1
    calendar->showed_date.month  = month;
 8012610:	f880 903e 	strb.w	r9, [r0, #62]	; 0x3e
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 8012614:	2120      	movs	r1, #32
    calendar->showed_date.day    = 1;
 8012616:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
{
 801261a:	4605      	mov	r5, r0
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 801261c:	f008 fd63 	bl	801b0e6 <lv_btnmatrix_clear_btn_ctrl_all>
        lv_btnmatrix_set_btn_ctrl(obj, i, LV_BTNMATRIX_CTRL_DISABLED);
 8012620:	b2a1      	uxth	r1, r4
 8012622:	3401      	adds	r4, #1
 8012624:	2220      	movs	r2, #32
 8012626:	4628      	mov	r0, r5
 8012628:	f008 fd6c 	bl	801b104 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < 7; i++) {
 801262c:	2c07      	cmp	r4, #7
 801262e:	d1f7      	bne.n	8012620 <lv_calendar_set_showed_date+0x20>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 8012630:	b2bf      	uxth	r7, r7
 8012632:	4649      	mov	r1, r9
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012634:	f04f 0a00 	mov.w	sl, #0
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012638:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8012708 <lv_calendar_set_showed_date+0x108>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 801263c:	4638      	mov	r0, r7
 801263e:	f7ff fef5 	bl	801242c <get_month_length>
 8012642:	4604      	mov	r4, r0
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
 8012644:	2201      	movs	r2, #1
 8012646:	4649      	mov	r1, r9
 8012648:	4638      	mov	r0, r7
 801264a:	f7ff ff1f 	bl	801248c <get_day_of_week>
 801264e:	4680      	mov	r8, r0
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012650:	4404      	add	r4, r0
 8012652:	fa5f f68a 	uxtb.w	r6, sl
 8012656:	f10a 0a01 	add.w	sl, sl, #1
 801265a:	1c73      	adds	r3, r6, #1
 801265c:	4446      	add	r6, r8
 801265e:	b2f6      	uxtb	r6, r6
 8012660:	b2db      	uxtb	r3, r3
 8012662:	42a6      	cmp	r6, r4
 8012664:	db27      	blt.n	80126b6 <lv_calendar_set_showed_date+0xb6>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012666:	f1c8 0601 	rsb	r6, r8, #1
    uint8_t prev_mo_len = get_month_length(d.year, d.month - 1);
 801266a:	f109 31ff 	add.w	r1, r9, #4294967295
 801266e:	4638      	mov	r0, r7
 8012670:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8012674:	f7ff feda 	bl	801242c <get_month_length>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012678:	4430      	add	r0, r6
 801267a:	2700      	movs	r7, #0
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 801267c:	f8df a088 	ldr.w	sl, [pc, #136]	; 8012708 <lv_calendar_set_showed_date+0x108>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012680:	b2c6      	uxtb	r6, r0
 8012682:	b2fa      	uxtb	r2, r7
 8012684:	fa56 f387 	uxtab	r3, r6, r7
 8012688:	4590      	cmp	r8, r2
 801268a:	b2db      	uxtb	r3, r3
 801268c:	d81c      	bhi.n	80126c8 <lv_calendar_set_showed_date+0xc8>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 801268e:	b2e0      	uxtb	r0, r4
 8012690:	2600      	movs	r6, #0
 8012692:	b2e4      	uxtb	r4, r4
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012694:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8012708 <lv_calendar_set_showed_date+0x108>
 8012698:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 801269c:	b2e3      	uxtb	r3, r4
 801269e:	3601      	adds	r6, #1
 80126a0:	1d07      	adds	r7, r0, #4
 80126a2:	2b29      	cmp	r3, #41	; 0x29
 80126a4:	d91f      	bls.n	80126e6 <lv_calendar_set_showed_date+0xe6>
    highlight_update(obj);
 80126a6:	4628      	mov	r0, r5
 80126a8:	f7ff ff64 	bl	8012574 <highlight_update>
    lv_obj_invalidate(obj);
 80126ac:	4628      	mov	r0, r5
}
 80126ae:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 80126b2:	f7f2 bb49 	b.w	8004d48 <lv_obj_invalidate>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 80126b6:	f106 004a 	add.w	r0, r6, #74	; 0x4a
 80126ba:	465a      	mov	r2, fp
 80126bc:	2104      	movs	r1, #4
 80126be:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80126c2:	f005 fc69 	bl	8017f98 <lv_snprintf>
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 80126c6:	e7c4      	b.n	8012652 <lv_calendar_set_showed_date+0x52>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 80126c8:	4652      	mov	r2, sl
 80126ca:	2104      	movs	r1, #4
 80126cc:	4648      	mov	r0, r9
 80126ce:	f109 0904 	add.w	r9, r9, #4
 80126d2:	f005 fc61 	bl	8017f98 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(obj, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 80126d6:	1df9      	adds	r1, r7, #7
 80126d8:	2220      	movs	r2, #32
 80126da:	4628      	mov	r0, r5
 80126dc:	b289      	uxth	r1, r1
 80126de:	3701      	adds	r7, #1
 80126e0:	f008 fd10 	bl	801b104 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 80126e4:	e7cd      	b.n	8012682 <lv_calendar_set_showed_date+0x82>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 80126e6:	4633      	mov	r3, r6
 80126e8:	4642      	mov	r2, r8
 80126ea:	2104      	movs	r1, #4
 80126ec:	f500 7094 	add.w	r0, r0, #296	; 0x128
 80126f0:	f005 fc52 	bl	8017f98 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(obj, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 80126f4:	1de1      	adds	r1, r4, #7
 80126f6:	3401      	adds	r4, #1
 80126f8:	4628      	mov	r0, r5
 80126fa:	2220      	movs	r2, #32
 80126fc:	b289      	uxth	r1, r1
 80126fe:	f008 fd01 	bl	801b104 <lv_btnmatrix_set_btn_ctrl>
 8012702:	4638      	mov	r0, r7
 8012704:	b2a4      	uxth	r4, r4
 8012706:	e7c9      	b.n	801269c <lv_calendar_set_showed_date+0x9c>
 8012708:	08025c4c 	.word	0x08025c4c

0801270c <lv_calendar_constructor>:
{
 801270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    calendar->today.year  = 2020;
 8012710:	4b28      	ldr	r3, [pc, #160]	; (80127b4 <lv_calendar_constructor+0xa8>)
    calendar->highlighted_dates      = NULL;
 8012712:	2500      	movs	r5, #0
{
 8012714:	460c      	mov	r4, r1
            calendar->map[i] = day_names_def[i];
 8012716:	4e28      	ldr	r6, [pc, #160]	; (80127b8 <lv_calendar_constructor+0xac>)
    calendar->highlighted_dates      = NULL;
 8012718:	640d      	str	r5, [r1, #64]	; 0x40
            calendar->nums[j][0] = 'x';
 801271a:	2778      	movs	r7, #120	; 0x78
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 801271c:	f504 7094 	add.w	r0, r4, #296	; 0x128
    calendar->highlighted_dates_num  = 0;
 8012720:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    calendar->showed_date.year  = 2020;
 8012724:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012728:	21a8      	movs	r1, #168	; 0xa8
 801272a:	f005 f82b 	bl	8017784 <lv_memset_00>
    for(i = 0; i < 8 * 7; i++) {
 801272e:	f104 0248 	add.w	r2, r4, #72	; 0x48
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012732:	462b      	mov	r3, r5
    uint8_t j = 0;
 8012734:	4628      	mov	r0, r5
 8012736:	4611      	mov	r1, r2
            calendar->map[i] = "\n";
 8012738:	f8df c088 	ldr.w	ip, [pc, #136]	; 80127c4 <lv_calendar_constructor+0xb8>
        if(i != 0 && (i + 1) % 8 == 0) {
 801273c:	fa5f fe83 	uxtb.w	lr, r3
 8012740:	1c5d      	adds	r5, r3, #1
 8012742:	b343      	cbz	r3, 8012796 <lv_calendar_constructor+0x8a>
 8012744:	f015 0f07 	tst.w	r5, #7
 8012748:	d122      	bne.n	8012790 <lv_calendar_constructor+0x84>
            calendar->map[i] = "\n";
 801274a:	f8c2 c000 	str.w	ip, [r2]
    for(i = 0; i < 8 * 7; i++) {
 801274e:	2d38      	cmp	r5, #56	; 0x38
 8012750:	462b      	mov	r3, r5
 8012752:	f102 0204 	add.w	r2, r2, #4
 8012756:	d1f1      	bne.n	801273c <lv_calendar_constructor+0x30>
    calendar->map[8 * 7 - 1] = "";
 8012758:	4b18      	ldr	r3, [pc, #96]	; (80127bc <lv_calendar_constructor+0xb0>)
    lv_btnmatrix_set_map(obj, calendar->map);
 801275a:	4620      	mov	r0, r4
    calendar->map[8 * 7 - 1] = "";
 801275c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    lv_btnmatrix_set_map(obj, calendar->map);
 8012760:	f008 fca0 	bl	801b0a4 <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 8012764:	4620      	mov	r0, r4
 8012766:	f44f 7188 	mov.w	r1, #272	; 0x110
 801276a:	f008 fce8 	bl	801b13e <lv_btnmatrix_set_btn_ctrl_all>
    lv_calendar_set_showed_date(obj, calendar->showed_date.year, calendar->showed_date.month);
 801276e:	f994 203e 	ldrsb.w	r2, [r4, #62]	; 0x3e
 8012772:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8012774:	4620      	mov	r0, r4
 8012776:	f7ff ff43 	bl	8012600 <lv_calendar_set_showed_date>
    highlight_update(obj);
 801277a:	4620      	mov	r0, r4
 801277c:	f7ff fefa 	bl	8012574 <highlight_update>
    lv_obj_add_event_cb(obj, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 8012780:	4620      	mov	r0, r4
 8012782:	2300      	movs	r3, #0
 8012784:	221a      	movs	r2, #26
 8012786:	490e      	ldr	r1, [pc, #56]	; (80127c0 <lv_calendar_constructor+0xb4>)
}
 8012788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_add_event_cb(obj, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 801278c:	f7ef b9ec 	b.w	8001b68 <lv_obj_add_event_cb>
        } else if(i < 8){
 8012790:	f1be 0f07 	cmp.w	lr, #7
 8012794:	d803      	bhi.n	801279e <lv_calendar_constructor+0x92>
            calendar->map[i] = day_names_def[i];
 8012796:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	e7d7      	b.n	801274e <lv_calendar_constructor+0x42>
            calendar->nums[j][0] = 'x';
 801279e:	f100 034a 	add.w	r3, r0, #74	; 0x4a
            j++;
 80127a2:	3001      	adds	r0, #1
            calendar->nums[j][0] = 'x';
 80127a4:	f804 7023 	strb.w	r7, [r4, r3, lsl #2]
            calendar->map[i] = calendar->nums[j];
 80127a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            j++;
 80127ac:	b2c0      	uxtb	r0, r0
            calendar->map[i] = calendar->nums[j];
 80127ae:	6013      	str	r3, [r2, #0]
            j++;
 80127b0:	e7cd      	b.n	801274e <lv_calendar_constructor+0x42>
 80127b2:	bf00      	nop
 80127b4:	010107e4 	.word	0x010107e4
 80127b8:	08025c64 	.word	0x08025c64
 80127bc:	0802a5e7 	.word	0x0802a5e7
 80127c0:	080124d7 	.word	0x080124d7
 80127c4:	0802a5e6 	.word	0x0802a5e6

080127c8 <lv_obj_get_style_pad_left>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80127c8:	f241 0212 	movw	r2, #4114	; 0x1012
{
 80127cc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80127ce:	f7f4 fbe3 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 80127d2:	b200      	sxth	r0, r0
 80127d4:	bd08      	pop	{r3, pc}

080127d6 <lv_obj_get_style_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80127d6:	f241 0201 	movw	r2, #4097	; 0x1001
{
 80127da:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80127dc:	f7f4 fbdc 	bl	8006f98 <lv_obj_get_style_prop>
}
 80127e0:	b200      	sxth	r0, r0
 80127e2:	bd08      	pop	{r3, pc}

080127e4 <lv_obj_get_style_pad_column>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80127e4:	f241 0215 	movw	r2, #4117	; 0x1015
{
 80127e8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80127ea:	f7f4 fbd5 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 80127ee:	b200      	sxth	r0, r0
 80127f0:	bd08      	pop	{r3, pc}

080127f2 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80127f2:	f241 0210 	movw	r2, #4112	; 0x1010
{
 80127f6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80127f8:	f7f4 fbce 	bl	8006f98 <lv_obj_get_style_prop>
}
 80127fc:	b200      	sxth	r0, r0
 80127fe:	bd08      	pop	{r3, pc}

08012800 <lv_chart_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_chart_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8012800:	b570      	push	{r4, r5, r6, lr}
 8012802:	460d      	mov	r5, r1
 8012804:	f101 0624 	add.w	r6, r1, #36	; 0x24
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_chart_t * chart = (lv_chart_t *)obj;
    lv_chart_series_t * ser;
    while(chart->series_ll.head) {
 8012808:	6aab      	ldr	r3, [r5, #40]	; 0x28
        ser = _lv_ll_get_head(&chart->series_ll);
 801280a:	4630      	mov	r0, r6
    while(chart->series_ll.head) {
 801280c:	b91b      	cbnz	r3, 8012816 <lv_chart_destructor+0x16>
        lv_mem_free(ser);
    }
    _lv_ll_clear(&chart->series_ll);

    LV_TRACE_OBJ_CREATE("finished");
}
 801280e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_ll_clear(&chart->series_ll);
 8012812:	f004 bca2 	b.w	801715a <_lv_ll_clear>
        ser = _lv_ll_get_head(&chart->series_ll);
 8012816:	f004 fcb2 	bl	801717e <_lv_ll_get_head>
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 801281a:	7b03      	ldrb	r3, [r0, #12]
        ser = _lv_ll_get_head(&chart->series_ll);
 801281c:	4604      	mov	r4, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 801281e:	075b      	lsls	r3, r3, #29
 8012820:	d402      	bmi.n	8012828 <lv_chart_destructor+0x28>
 8012822:	6840      	ldr	r0, [r0, #4]
 8012824:	f004 fdae 	bl	8017384 <lv_mem_free>
        _lv_ll_remove(&chart->series_ll, ser);
 8012828:	4630      	mov	r0, r6
 801282a:	4621      	mov	r1, r4
 801282c:	f004 fc6c 	bl	8017108 <_lv_ll_remove>
        lv_mem_free(ser);
 8012830:	4620      	mov	r0, r4
 8012832:	f004 fda7 	bl	8017384 <lv_mem_free>
 8012836:	e7e7      	b.n	8012808 <lv_chart_destructor+0x8>

08012838 <lv_chart_constructor>:
{
 8012838:	b510      	push	{r4, lr}
 801283a:	460c      	mov	r4, r1
    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 801283c:	2110      	movs	r1, #16
 801283e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012842:	f004 fc22 	bl	801708a <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 8012846:	2110      	movs	r1, #16
 8012848:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801284c:	f004 fc1d 	bl	801708a <_lv_ll_init>
    chart->ymax[0] = 100;
 8012850:	2200      	movs	r2, #0
 8012852:	f04f 1364 	mov.w	r3, #6553700	; 0x640064
 8012856:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    chart->xmax[0] = 100;
 801285a:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 801285e:	4b08      	ldr	r3, [pc, #32]	; (8012880 <lv_chart_constructor+0x48>)
 8012860:	4a08      	ldr	r2, [pc, #32]	; (8012884 <lv_chart_constructor+0x4c>)
 8012862:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 8012866:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 801286a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    chart->type        = LV_CHART_TYPE_LINE;
 801286e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8012872:	f023 030f 	bic.w	r3, r3, #15
 8012876:	f043 0301 	orr.w	r3, r3, #1
 801287a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
}
 801287e:	bd10      	pop	{r4, pc}
 8012880:	000a0005 	.word	0x000a0005
 8012884:	00037fff 	.word	0x00037fff

08012888 <invalidate_point>:
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 8012888:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 801288c:	428b      	cmp	r3, r1
{
 801288e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012892:	4606      	mov	r6, r0
 8012894:	460c      	mov	r4, r1
    if(i >= chart->point_cnt) return;
 8012896:	d972      	bls.n	801297e <invalidate_point+0xf6>

    lv_coord_t w  = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012898:	f7f2 f90d 	bl	8004ab6 <lv_obj_get_content_width>
 801289c:	f8b6 7084 	ldrh.w	r7, [r6, #132]	; 0x84
 80128a0:	4378      	muls	r0, r7
 80128a2:	f340 270f 	sbfx	r7, r0, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 80128a6:	4630      	mov	r0, r6
 80128a8:	f7f3 f9a2 	bl	8005bf0 <lv_obj_get_scroll_left>
    if(chart->type == LV_CHART_TYPE_LINE) {
 80128ac:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 80128b0:	4680      	mov	r8, r0
    if(chart->type == LV_CHART_TYPE_LINE) {
 80128b2:	f003 0307 	and.w	r3, r3, #7
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d164      	bne.n	8012984 <invalidate_point+0xfc>
        lv_coord_t x_ofs = obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN) - scroll_left;
 80128ba:	f8b6 9014 	ldrh.w	r9, [r6, #20]
 80128be:	2100      	movs	r1, #0
 80128c0:	4630      	mov	r0, r6
 80128c2:	eba9 0808 	sub.w	r8, r9, r8
 80128c6:	f7ff ff7f 	bl	80127c8 <lv_obj_get_style_pad_left>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80128ca:	f640 0249 	movw	r2, #2121	; 0x849
 80128ce:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80128d2:	4480      	add	r8, r0
 80128d4:	4630      	mov	r0, r6
 80128d6:	f7f4 fb5f 	bl	8006f98 <lv_obj_get_style_prop>
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_ITEMS);
        lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR);
 80128da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80128de:	4682      	mov	sl, r0
 80128e0:	4630      	mov	r0, r6
 80128e2:	f7ff ff78 	bl	80127d6 <lv_obj_get_style_width>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 80128e6:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
        lv_coord_t x_ofs = obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN) - scroll_left;
 80128ea:	fa1f f588 	uxth.w	r5, r8
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 80128ee:	f9b6 201a 	ldrsh.w	r2, [r6, #26]

        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
        coords.y1 -= line_width + point_w;
 80128f2:	fa1f f880 	uxth.w	r8, r0
 80128f6:	fa1f f98a 	uxth.w	r9, sl
 80128fa:	fa18 fa8a 	uxtah	sl, r8, sl
 80128fe:	fa1f fa8a 	uxth.w	sl, sl
 8012902:	eba3 030a 	sub.w	r3, r3, sl
        coords.y2 += line_width + point_w;
 8012906:	4492      	add	sl, r2
        coords.y1 -= line_width + point_w;
 8012908:	f8ad 3002 	strh.w	r3, [sp, #2]

        if(i < chart->point_cnt - 1) {
 801290c:	f8b6 3082 	ldrh.w	r3, [r6, #130]	; 0x82
        coords.y2 += line_width + point_w;
 8012910:	f8ad a006 	strh.w	sl, [sp, #6]
        if(i < chart->point_cnt - 1) {
 8012914:	1e59      	subs	r1, r3, #1
 8012916:	428c      	cmp	r4, r1
 8012918:	da16      	bge.n	8012948 <invalidate_point+0xc0>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801291a:	fb07 f304 	mul.w	r3, r7, r4
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
            lv_obj_invalidate_area(obj, &coords);
 801291e:	4630      	mov	r0, r6
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012920:	fb93 f2f1 	sdiv	r2, r3, r1
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012924:	443b      	add	r3, r7
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012926:	eba2 0209 	sub.w	r2, r2, r9
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801292a:	fb93 f3f1 	sdiv	r3, r3, r1
 801292e:	444b      	add	r3, r9
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012930:	442a      	add	r2, r5
            lv_obj_invalidate_area(obj, &coords);
 8012932:	4669      	mov	r1, sp
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012934:	4443      	add	r3, r8
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012936:	eba2 0208 	sub.w	r2, r2, r8
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801293a:	442b      	add	r3, r5
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801293c:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012940:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 8012944:	f7f2 f9e6 	bl	8004d14 <lv_obj_invalidate_area>
        }

        if(i > 0) {
 8012948:	b1cc      	cbz	r4, 801297e <invalidate_point+0xf6>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801294a:	3c01      	subs	r4, #1
 801294c:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
 8012950:	437c      	muls	r4, r7
 8012952:	3a01      	subs	r2, #1
 8012954:	fb94 f3f2 	sdiv	r3, r4, r2
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012958:	443c      	add	r4, r7
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801295a:	eba3 0309 	sub.w	r3, r3, r9
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801295e:	fb94 f4f2 	sdiv	r4, r4, r2
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012962:	442b      	add	r3, r5
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012964:	444c      	add	r4, r9
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012966:	eba3 0308 	sub.w	r3, r3, r8
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801296a:	44a0      	add	r8, r4
 801296c:	44a8      	add	r8, r5
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801296e:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012972:	f8ad 8004 	strh.w	r8, [sp, #4]
        lv_obj_get_coords(obj, &col_a);
        col_a.x1 = x_act - scroll_left;
        col_a.x2 = col_a.x1 + block_w;
        col_a.x1 -= block_gap;

        lv_obj_invalidate_area(obj, &col_a);
 8012976:	4669      	mov	r1, sp
 8012978:	4630      	mov	r0, r6
 801297a:	f7f2 f9cb 	bl	8004d14 <lv_obj_invalidate_area>
        lv_obj_invalidate(obj);
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 801297e:	b002      	add	sp, #8
 8012980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8012984:	2b02      	cmp	r3, #2
 8012986:	d12a      	bne.n	80129de <invalidate_point+0x156>
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012988:	2100      	movs	r1, #0
 801298a:	4630      	mov	r0, r6
 801298c:	f7ff ff2a 	bl	80127e4 <lv_obj_get_style_pad_column>
 8012990:	f8b6 5084 	ldrh.w	r5, [r6, #132]	; 0x84
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012994:	2100      	movs	r1, #0
 8012996:	f9b6 a014 	ldrsh.w	sl, [r6, #20]
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801299a:	4368      	muls	r0, r5
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 801299c:	f8b6 5082 	ldrh.w	r5, [r6, #130]	; 0x82
 80129a0:	eb07 2720 	add.w	r7, r7, r0, asr #8
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80129a4:	ea4f 2920 	mov.w	r9, r0, asr #8
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80129a8:	4630      	mov	r0, r6
 80129aa:	f7ff ff0d 	bl	80127c8 <lv_obj_get_style_pad_left>
        lv_obj_get_coords(obj, &col_a);
 80129ae:	4669      	mov	r1, sp
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 80129b0:	fb97 f5f5 	sdiv	r5, r7, r5
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 80129b4:	fb14 f405 	smulbb	r4, r4, r5
 80129b8:	b2af      	uxth	r7, r5
 80129ba:	b2a5      	uxth	r5, r4
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80129bc:	4604      	mov	r4, r0
        lv_obj_get_coords(obj, &col_a);
 80129be:	4630      	mov	r0, r6
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80129c0:	4454      	add	r4, sl
        lv_obj_get_coords(obj, &col_a);
 80129c2:	f7f2 f81c 	bl	80049fe <lv_obj_get_coords>
        col_a.x1 = x_act - scroll_left;
 80129c6:	eba4 0408 	sub.w	r4, r4, r8
 80129ca:	442c      	add	r4, r5
        col_a.x2 = col_a.x1 + block_w;
 80129cc:	fa17 f784 	uxtah	r7, r7, r4
        col_a.x1 -= block_gap;
 80129d0:	eba4 0409 	sub.w	r4, r4, r9
        col_a.x2 = col_a.x1 + block_w;
 80129d4:	f8ad 7004 	strh.w	r7, [sp, #4]
        col_a.x1 -= block_gap;
 80129d8:	f8ad 4000 	strh.w	r4, [sp]
 80129dc:	e7cb      	b.n	8012976 <invalidate_point+0xee>
        lv_obj_invalidate(obj);
 80129de:	4630      	mov	r0, r6
 80129e0:	f7f2 f9b2 	bl	8004d48 <lv_obj_invalidate>
 80129e4:	e7cb      	b.n	801297e <invalidate_point+0xf6>

080129e6 <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80129e6:	f241 0232 	movw	r2, #4146	; 0x1032
 80129ea:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 80129ec:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80129ee:	f7f4 fad3 	bl	8006f98 <lv_obj_get_style_prop>
}
 80129f2:	b200      	sxth	r0, r0
 80129f4:	bd08      	pop	{r3, pc}

080129f6 <lv_chart_get_point_pos_by_id>:
{
 80129f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129fa:	4688      	mov	r8, r1
 80129fc:	b085      	sub	sp, #20
 80129fe:	4691      	mov	r9, r2
 8012a00:	461d      	mov	r5, r3
    LV_ASSERT_NULL(obj);
 8012a02:	4604      	mov	r4, r0
 8012a04:	b900      	cbnz	r0, 8012a08 <lv_chart_get_point_pos_by_id+0x12>
 8012a06:	e7fe      	b.n	8012a06 <lv_chart_get_point_pos_by_id+0x10>
    LV_ASSERT_NULL(ser);
 8012a08:	b901      	cbnz	r1, 8012a0c <lv_chart_get_point_pos_by_id+0x16>
 8012a0a:	e7fe      	b.n	8012a0a <lv_chart_get_point_pos_by_id+0x14>
    if(id >= chart->point_cnt) {
 8012a0c:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 8012a10:	4293      	cmp	r3, r2
 8012a12:	d805      	bhi.n	8012a20 <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 8012a14:	2300      	movs	r3, #0
 8012a16:	802b      	strh	r3, [r5, #0]
        p_out->y = 0;
 8012a18:	806b      	strh	r3, [r5, #2]
}
 8012a1a:	b005      	add	sp, #20
 8012a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012a20:	f7f2 f849 	bl	8004ab6 <lv_obj_get_content_width>
 8012a24:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8012a28:	4358      	muls	r0, r3
 8012a2a:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012a2e:	4620      	mov	r0, r4
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012a30:	9303      	str	r3, [sp, #12]
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012a32:	f7f2 f85a 	bl	8004aea <lv_obj_get_content_height>
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012a36:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012a3a:	f8b4 7086 	ldrh.w	r7, [r4, #134]	; 0x86
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012a3e:	f002 0207 	and.w	r2, r2, #7
 8012a42:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012a44:	4378      	muls	r0, r7
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012a46:	2a01      	cmp	r2, #1
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012a48:	ea4f 2720 	mov.w	r7, r0, asr #8
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012a4c:	d108      	bne.n	8012a60 <lv_chart_get_point_pos_by_id+0x6a>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 8012a4e:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8012a52:	fb09 f303 	mul.w	r3, r9, r3
 8012a56:	3a01      	subs	r2, #1
 8012a58:	fb93 f3f2 	sdiv	r3, r3, r2
        p_out->x += (col_w - ser_gap) / 2;
 8012a5c:	802b      	strh	r3, [r5, #0]
 8012a5e:	e014      	b.n	8012a8a <lv_chart_get_point_pos_by_id+0x94>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 8012a60:	2a03      	cmp	r2, #3
 8012a62:	d144      	bne.n	8012aee <lv_chart_get_point_pos_by_id+0xf8>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8012a64:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012a68:	f8d8 2000 	ldr.w	r2, [r8]
 8012a6c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8012a70:	f932 0019 	ldrsh.w	r0, [r2, r9, lsl #1]
 8012a74:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 8012a80:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 8012a84:	f004 fc4f 	bl	8017326 <lv_map>
 8012a88:	8028      	strh	r0, [r5, #0]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	f7ff ffab 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
 8012a90:	4606      	mov	r6, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8012a92:	2100      	movs	r1, #0
 8012a94:	4620      	mov	r0, r4
 8012a96:	f7ff fe97 	bl	80127c8 <lv_obj_get_style_pad_left>
 8012a9a:	882b      	ldrh	r3, [r5, #0]
 8012a9c:	4430      	add	r0, r6
 8012a9e:	4418      	add	r0, r3
 8012aa0:	8028      	strh	r0, [r5, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7f3 f8a4 	bl	8005bf0 <lv_obj_get_scroll_left>
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012aa8:	f898 200c 	ldrb.w	r2, [r8, #12]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012aac:	882b      	ldrh	r3, [r5, #0]
 8012aae:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8012ab2:	1a18      	subs	r0, r3, r0
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012ab4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ab8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012abc:	8028      	strh	r0, [r5, #0]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012abe:	4620      	mov	r0, r4
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012ac0:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 8012ac4:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012ac8:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012acc:	1a5b      	subs	r3, r3, r1
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012ace:	1a52      	subs	r2, r2, r1
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012ad0:	2100      	movs	r1, #0
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012ad2:	fb13 f307 	smulbb	r3, r3, r7
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012ad6:	b21b      	sxth	r3, r3
 8012ad8:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - p_out->y;
 8012adc:	1aff      	subs	r7, r7, r3
 8012ade:	806f      	strh	r7, [r5, #2]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012ae0:	f7ff fe87 	bl	80127f2 <lv_obj_get_style_pad_top>
 8012ae4:	4430      	add	r0, r6
 8012ae6:	886e      	ldrh	r6, [r5, #2]
 8012ae8:	4406      	add	r6, r0
 8012aea:	806e      	strh	r6, [r5, #2]
 8012aec:	e795      	b.n	8012a1a <lv_chart_get_point_pos_by_id+0x24>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8012aee:	2a02      	cmp	r2, #2
 8012af0:	d1cb      	bne.n	8012a8a <lv_chart_get_point_pos_by_id+0x94>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8012af2:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8012af6:	9303      	str	r3, [sp, #12]
 8012af8:	4650      	mov	r0, sl
 8012afa:	f004 fb4d 	bl	8017198 <_lv_ll_get_len>
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8012afe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8012b02:	4606      	mov	r6, r0
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8012b04:	4620      	mov	r0, r4
 8012b06:	f7ff fe6d 	bl	80127e4 <lv_obj_get_style_pad_column>
 8012b0a:	f8b4 b084 	ldrh.w	fp, [r4, #132]	; 0x84
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012b0e:	2100      	movs	r1, #0
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8012b10:	fb00 f00b 	mul.w	r0, r0, fp
 8012b14:	ea4f 2b20 	mov.w	fp, r0, asr #8
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f7ff fe63 	bl	80127e4 <lv_obj_get_style_pad_column>
 8012b1e:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012b22:	f8b4 c082 	ldrh.w	ip, [r4, #130]	; 0x82
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012b26:	4341      	muls	r1, r0
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012b28:	9b03      	ldr	r3, [sp, #12]
 8012b2a:	f10c 30ff 	add.w	r0, ip, #4294967295
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012b2e:	1209      	asrs	r1, r1, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012b30:	fb00 3111 	mls	r1, r0, r1, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012b34:	4650      	mov	r0, sl
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8012b36:	fb03 f309 	mul.w	r3, r3, r9
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8012b3a:	fb91 f1fc 	sdiv	r1, r1, ip
        lv_coord_t col_w = block_w / ser_cnt;
 8012b3e:	b209      	sxth	r1, r1
 8012b40:	fbb1 f6f6 	udiv	r6, r1, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8012b44:	fb93 fcfc 	sdiv	ip, r3, ip
        lv_coord_t col_w = block_w / ser_cnt;
 8012b48:	b232      	sxth	r2, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8012b4a:	f8a5 c000 	strh.w	ip, [r5]
        lv_coord_t col_w = block_w / ser_cnt;
 8012b4e:	9203      	str	r2, [sp, #12]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012b50:	f004 fb18 	bl	8017184 <_lv_ll_get_tail>
 8012b54:	882b      	ldrh	r3, [r5, #0]
 8012b56:	b938      	cbnz	r0, 8012b68 <lv_chart_get_point_pos_by_id+0x172>
        p_out->x += (col_w - ser_gap) / 2;
 8012b58:	9a03      	ldr	r2, [sp, #12]
 8012b5a:	eba2 0a0b 	sub.w	sl, r2, fp
 8012b5e:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8012b62:	eb03 036a 	add.w	r3, r3, sl, asr #1
 8012b66:	e779      	b.n	8012a5c <lv_chart_get_point_pos_by_id+0x66>
            if(ser_i == ser) break;
 8012b68:	4580      	cmp	r8, r0
 8012b6a:	d0f5      	beq.n	8012b58 <lv_chart_get_point_pos_by_id+0x162>
            p_out->x += col_w;
 8012b6c:	4433      	add	r3, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012b6e:	4601      	mov	r1, r0
 8012b70:	4650      	mov	r0, sl
            p_out->x += col_w;
 8012b72:	802b      	strh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8012b74:	f004 fb0d 	bl	8017192 <_lv_ll_get_prev>
 8012b78:	e7ec      	b.n	8012b54 <lv_chart_get_point_pos_by_id+0x15e>

08012b7a <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t*) obj;
    switch(axis) {
 8012b7a:	2904      	cmp	r1, #4
 8012b7c:	d80c      	bhi.n	8012b98 <get_tick_gsc+0x1e>
 8012b7e:	e8df f001 	tbb	[pc, r1]
 8012b82:	0703      	.short	0x0703
 8012b84:	0b05      	.short	0x0b05
 8012b86:	09          	.byte	0x09
 8012b87:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y: return &chart->tick[0];
 8012b88:	303c      	adds	r0, #60	; 0x3c
 8012b8a:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X: return &chart->tick[1];
 8012b8c:	3048      	adds	r0, #72	; 0x48
 8012b8e:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y: return &chart->tick[2];
 8012b90:	3054      	adds	r0, #84	; 0x54
 8012b92:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X: return &chart->tick[3];
 8012b94:	3060      	adds	r0, #96	; 0x60
 8012b96:	4770      	bx	lr
{
 8012b98:	2000      	movs	r0, #0
        default: return NULL;
    }
}
 8012b9a:	4770      	bx	lr

08012b9c <draw_y_ticks>:
{
 8012b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba0:	4689      	mov	r9, r1
 8012ba2:	b0ad      	sub	sp, #180	; 0xb4
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012ba4:	4611      	mov	r1, r2
{
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	4616      	mov	r6, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012baa:	f7ff ffe6 	bl	8012b7a <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 8012bae:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012bb0:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 8012bb2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	f240 8121 	bls.w	8012dfe <draw_y_ticks+0x262>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8012bbc:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	db03      	blt.n	8012bcc <draw_y_ticks+0x30>
 8012bc4:	6803      	ldr	r3, [r0, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f000 8119 	beq.w	8012dfe <draw_y_ticks+0x262>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f7ff ff0a 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8012bd2:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012bd4:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7ff fe0b 	bl	80127f2 <lv_obj_get_style_pad_top>
 8012bdc:	4607      	mov	r7, r0
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012bde:	4620      	mov	r0, r4
 8012be0:	f7f1 ff83 	bl	8004aea <lv_obj_get_content_height>
 8012be4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 8012be8:	4358      	muls	r0, r3
 8012bea:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8012bee:	eb07 0008 	add.w	r0, r7, r8
 8012bf2:	8ae7      	ldrh	r7, [r4, #22]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012bf4:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8012bf6:	4407      	add	r7, r0
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f7f2 ffa3 	bl	8005b44 <lv_obj_get_scroll_top>
 8012bfe:	b2bf      	uxth	r7, r7
 8012c00:	1a38      	subs	r0, r7, r0
 8012c02:	b283      	uxth	r3, r0
 8012c04:	9305      	str	r3, [sp, #20]
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 8012c06:	2e00      	cmp	r6, #0
 8012c08:	f040 80fc 	bne.w	8012e04 <draw_y_ticks+0x268>
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 8012c0c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012c10:	4620      	mov	r0, r4
 8012c12:	f7ff fdd9 	bl	80127c8 <lv_obj_get_style_pad_left>
        x_ofs = obj->coords.x1;
 8012c16:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 8012c1a:	9004      	str	r0, [sp, #16]
    if(axis == LV_CHART_AXIS_SECONDARY_Y) {
 8012c1c:	2e01      	cmp	r6, #1
    lv_coord_t major_len = t->major_len;
 8012c1e:	f9b5 8000 	ldrsh.w	r8, [r5]
    lv_coord_t minor_len = t->minor_len;
 8012c22:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    lv_draw_line_dsc_init(&line_dsc);
 8012c26:	af0f      	add	r7, sp, #60	; 0x3c
        major_len *= -1;
 8012c28:	bf08      	it	eq
 8012c2a:	f1c8 0800 	rsbeq	r8, r8, #0
        else p1.x++;
 8012c2e:	fa1f fb8b 	uxth.w	fp, fp
        minor_len *= -1;
 8012c32:	bf08      	it	eq
 8012c34:	f1ca 0a00 	rsbeq	sl, sl, #0
    lv_draw_line_dsc_init(&line_dsc);
 8012c38:	4638      	mov	r0, r7
        major_len *= -1;
 8012c3a:	bf04      	itt	eq
 8012c3c:	fa0f f888 	sxtheq.w	r8, r8
        minor_len *= -1;
 8012c40:	fa0f fa8a 	sxtheq.w	sl, sl
    lv_draw_line_dsc_init(&line_dsc);
 8012c44:	f7f7 fefe 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8012c48:	463a      	mov	r2, r7
 8012c4a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f7f1 fc82 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 8012c54:	aa12      	add	r2, sp, #72	; 0x48
 8012c56:	4610      	mov	r0, r2
 8012c58:	f7f7 fa7a 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8012c5c:	aa12      	add	r2, sp, #72	; 0x48
 8012c5e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012c62:	4620      	mov	r0, r4
 8012c64:	f7f1 fbd0 	bl	8004408 <lv_obj_init_draw_label_dsc>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8012c68:	4649      	mov	r1, r9
 8012c6a:	a81a      	add	r0, sp, #104	; 0x68
 8012c6c:	f7f1 fd74 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.line_dsc = &line_dsc;
 8012c70:	971e      	str	r7, [sp, #120]	; 0x78
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8012c72:	892f      	ldrh	r7, [r5, #8]
    dsc.part = LV_PART_TICKS;
 8012c74:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    dsc.label_dsc = &label_dsc;
 8012c78:	aa12      	add	r2, sp, #72	; 0x48
    dsc.id = axis;
 8012c7a:	9628      	str	r6, [sp, #160]	; 0xa0
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8012c7c:	f3c7 070e 	ubfx	r7, r7, #0, #15
    dsc.part = LV_PART_TICKS;
 8012c80:	9327      	str	r3, [sp, #156]	; 0x9c
    dsc.label_dsc = &label_dsc;
 8012c82:	921d      	str	r2, [sp, #116]	; 0x74
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8012c84:	1e7b      	subs	r3, r7, #1
 8012c86:	88ef      	ldrh	r7, [r5, #6]
 8012c88:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8012c8c:	435f      	muls	r7, r3
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 8012c8e:	f10b 33ff 	add.w	r3, fp, #4294967295
        else p1.x++;
 8012c92:	f10b 0b01 	add.w	fp, fp, #1
 8012c96:	2e00      	cmp	r6, #0
 8012c98:	bf08      	it	eq
 8012c9a:	469b      	moveq	fp, r3
 8012c9c:	fa0f f38b 	sxth.w	r3, fp
        else p2.x = p1.x - minor_len; /*minor tick*/
 8012ca0:	fa1f fb8b 	uxth.w	fp, fp
 8012ca4:	9308      	str	r3, [sp, #32]
 8012ca6:	ebab 0a0a 	sub.w	sl, fp, sl
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8012caa:	ebab 0808 	sub.w	r8, fp, r8
        else p2.x = p1.x - minor_len; /*minor tick*/
 8012cae:	fa0f f38a 	sxth.w	r3, sl
 8012cb2:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
 8012cb6:	9307      	str	r3, [sp, #28]
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8012cb8:	fa0f f388 	sxth.w	r3, r8
    for(i = 0; i <= total_tick_num; i++) {
 8012cbc:	f04f 0800 	mov.w	r8, #0
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8012cc0:	9306      	str	r3, [sp, #24]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8012cc2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 8012cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cc8:	9905      	ldr	r1, [sp, #20]
 8012cca:	1a9b      	subs	r3, r3, r2
 8012ccc:	fb08 f303 	mul.w	r3, r8, r3
 8012cd0:	fbb3 f3f7 	udiv	r3, r3, r7
 8012cd4:	440b      	add	r3, r1
 8012cd6:	9908      	ldr	r1, [sp, #32]
 8012cd8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 8012cdc:	b21b      	sxth	r3, r3
        if(i % t->minor_cnt == 0) major = true;
 8012cde:	88e9      	ldrh	r1, [r5, #6]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8012ce0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        if(i % t->minor_cnt == 0) major = true;
 8012ce4:	f3c1 010e 	ubfx	r1, r1, #0, #15
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8012ce8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(i % t->minor_cnt == 0) major = true;
 8012cec:	fbb8 f0f1 	udiv	r0, r8, r1
 8012cf0:	fb01 8110 	mls	r1, r1, r0, r8
 8012cf4:	2900      	cmp	r1, #0
 8012cf6:	f040 8091 	bne.w	8012e1c <draw_y_ticks+0x280>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8012cfa:	9906      	ldr	r1, [sp, #24]
        if(i % t->minor_cnt == 0) major = true;
 8012cfc:	f04f 0b01 	mov.w	fp, #1
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 8012d00:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8012d04:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8012d08:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8012d0c:	1051      	asrs	r1, r2, #1
 8012d0e:	eb03 0262 	add.w	r2, r3, r2, asr #1
 8012d12:	4282      	cmp	r2, r0
 8012d14:	db0a      	blt.n	8012d2c <draw_y_ticks+0x190>
           p2.y - line_dsc.width / 2  <= obj->coords.y2)
 8012d16:	1a5b      	subs	r3, r3, r1
 8012d18:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	dc05      	bgt.n	8012d2c <draw_y_ticks+0x190>
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 8012d20:	ab0f      	add	r3, sp, #60	; 0x3c
 8012d22:	464a      	mov	r2, r9
 8012d24:	a90b      	add	r1, sp, #44	; 0x2c
 8012d26:	a80a      	add	r0, sp, #40	; 0x28
 8012d28:	f7f7 fe98 	bl	800aa5c <lv_draw_line>
        if(major  && t->label_en)  {
 8012d2c:	f1bb 0f00 	cmp.w	fp, #0
 8012d30:	d060      	beq.n	8012df4 <draw_y_ticks+0x258>
 8012d32:	f995 3009 	ldrsb.w	r3, [r5, #9]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	da5c      	bge.n	8012df4 <draw_y_ticks+0x258>
            int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 8012d3a:	f9ba 3070 	ldrsh.w	r3, [sl, #112]	; 0x70
 8012d3e:	463a      	mov	r2, r7
 8012d40:	2100      	movs	r1, #0
 8012d42:	eba7 0008 	sub.w	r0, r7, r8
 8012d46:	9300      	str	r3, [sp, #0]
 8012d48:	f9ba 306c 	ldrsh.w	r3, [sl, #108]	; 0x6c
 8012d4c:	f004 faeb 	bl	8017326 <lv_map>
            lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8012d50:	4a38      	ldr	r2, [pc, #224]	; (8012e34 <draw_y_ticks+0x298>)
 8012d52:	4603      	mov	r3, r0
            int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 8012d54:	4683      	mov	fp, r0
            lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8012d56:	2110      	movs	r1, #16
 8012d58:	a823      	add	r0, sp, #140	; 0x8c
 8012d5a:	f005 f91d 	bl	8017f98 <lv_snprintf>
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8012d5e:	aa1a      	add	r2, sp, #104	; 0x68
 8012d60:	211a      	movs	r1, #26
 8012d62:	4620      	mov	r0, r4
            dsc.value = tick_value;
 8012d64:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8012d68:	f7ee fec6 	bl	8001af8 <lv_event_send>
            lv_txt_get_size(&size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8012d6c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012d70:	2200      	movs	r2, #0
 8012d72:	a923      	add	r1, sp, #140	; 0x8c
 8012d74:	a80c      	add	r0, sp, #48	; 0x30
 8012d76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012d7a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8012d7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8012d86:	f006 fa0e 	bl	80191a6 <lv_txt_get_size>
            a.y1 = p2.y - size.y / 2;
 8012d8a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012d8e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8012d92:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012d96:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8012d9a:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
 8012d9e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8012da2:	1ad1      	subs	r1, r2, r3
            a.y2 = p2.y + size.y / 2;
 8012da4:	4413      	add	r3, r2
 8012da6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
            a.y1 = p2.y - size.y / 2;
 8012daa:	b209      	sxth	r1, r1
            a.y2 = p2.y + size.y / 2;
 8012dac:	b21b      	sxth	r3, r3
            a.y1 = p2.y - size.y / 2;
 8012dae:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
            a.y2 = p2.y + size.y / 2;
 8012db2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            if(!sec_axis) {
 8012db6:	bbae      	cbnz	r6, 8012e24 <draw_y_ticks+0x288>
                a.x1 = p2.x - size.x - label_gap;
 8012db8:	eba2 0c0c 	sub.w	ip, r2, ip
                a.x2 = p2.x - label_gap;
 8012dbc:	1a12      	subs	r2, r2, r0
                a.x1 = p2.x - size.x - label_gap;
 8012dbe:	ebac 0c00 	sub.w	ip, ip, r0
 8012dc2:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                a.x2 = p2.x + size.x + label_gap;
 8012dc6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            if(a.y2 >= obj->coords.y1 &&
 8012dca:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	dc0b      	bgt.n	8012dea <draw_y_ticks+0x24e>
 8012dd2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8012dd6:	428b      	cmp	r3, r1
 8012dd8:	db07      	blt.n	8012dea <draw_y_ticks+0x24e>
                lv_draw_label(&a, clip_area, &label_dsc, dsc.text, NULL);
 8012dda:	2300      	movs	r3, #0
 8012ddc:	aa12      	add	r2, sp, #72	; 0x48
 8012dde:	4649      	mov	r1, r9
 8012de0:	a80d      	add	r0, sp, #52	; 0x34
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	ab23      	add	r3, sp, #140	; 0x8c
 8012de6:	f7f7 fb8b 	bl	800a500 <lv_draw_label>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8012dea:	aa1a      	add	r2, sp, #104	; 0x68
 8012dec:	211b      	movs	r1, #27
 8012dee:	4620      	mov	r0, r4
 8012df0:	f7ee fe82 	bl	8001af8 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 8012df4:	f108 0801 	add.w	r8, r8, #1
 8012df8:	4547      	cmp	r7, r8
 8012dfa:	f4bf af62 	bcs.w	8012cc2 <draw_y_ticks+0x126>
}
 8012dfe:	b02d      	add	sp, #180	; 0xb4
 8012e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8012e04:	f241 0213 	movw	r2, #4115	; 0x1013
 8012e08:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f7f4 f8c3 	bl	8006f98 <lv_obj_get_style_prop>
        x_ofs = obj->coords.x2;
 8012e12:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
    return (lv_coord_t)v.num;
 8012e16:	b203      	sxth	r3, r0
 8012e18:	9304      	str	r3, [sp, #16]
 8012e1a:	e6ff      	b.n	8012c1c <draw_y_ticks+0x80>
        else p2.x = p1.x - minor_len; /*minor tick*/
 8012e1c:	9907      	ldr	r1, [sp, #28]
        bool major = false;
 8012e1e:	f04f 0b00 	mov.w	fp, #0
 8012e22:	e76d      	b.n	8012d00 <draw_y_ticks+0x164>
                a.x1 = p2.x + label_gap;
 8012e24:	eb02 0e00 	add.w	lr, r2, r0
                a.x2 = p2.x + size.x + label_gap;
 8012e28:	4462      	add	r2, ip
                a.x1 = p2.x + label_gap;
 8012e2a:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
                a.x2 = p2.x + size.x + label_gap;
 8012e2e:	4402      	add	r2, r0
 8012e30:	e7c9      	b.n	8012dc6 <draw_y_ticks+0x22a>
 8012e32:	bf00      	nop
 8012e34:	08025c4c 	.word	0x08025c4c

08012e38 <draw_x_ticks>:
{
 8012e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3c:	b0ad      	sub	sp, #180	; 0xb4
 8012e3e:	468a      	mov	sl, r1
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012e40:	4611      	mov	r1, r2
{
 8012e42:	4604      	mov	r4, r0
 8012e44:	9205      	str	r2, [sp, #20]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012e46:	f7ff fe98 	bl	8012b7a <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 8012e4a:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8012e4c:	4681      	mov	r9, r0
    if(t->major_cnt <= 1) return;
 8012e4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d93b      	bls.n	8012ece <draw_x_ticks+0x96>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8012e56:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	db01      	blt.n	8012e62 <draw_x_ticks+0x2a>
 8012e5e:	6803      	ldr	r3, [r0, #0]
 8012e60:	b3ab      	cbz	r3, 8012ece <draw_x_ticks+0x96>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012e62:	2100      	movs	r1, #0
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7ff fcaf 	bl	80127c8 <lv_obj_get_style_pad_left>
    lv_draw_label_dsc_init(&label_dsc);
 8012e6a:	af12      	add	r7, sp, #72	; 0x48
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f7ff fdb9 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
 8012e74:	9007      	str	r0, [sp, #28]
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7f1 fe1d 	bl	8004ab6 <lv_obj_get_content_width>
 8012e7c:	9006      	str	r0, [sp, #24]
    lv_draw_label_dsc_init(&label_dsc);
 8012e7e:	4638      	mov	r0, r7
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012e80:	f8b4 6084 	ldrh.w	r6, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 8012e84:	f7f7 f964 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8012e88:	463a      	mov	r2, r7
 8012e8a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f7f1 faba 	bl	8004408 <lv_obj_init_draw_label_dsc>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8012e94:	4620      	mov	r0, r4
 8012e96:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 8012e9a:	f7f2 fea9 	bl	8005bf0 <lv_obj_get_scroll_left>
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 8012e9e:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8012ea0:	4680      	mov	r8, r0
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 8012ea2:	2b02      	cmp	r3, #2
 8012ea4:	f999 3009 	ldrsb.w	r3, [r9, #9]
 8012ea8:	d116      	bne.n	8012ed8 <draw_x_ticks+0xa0>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	da12      	bge.n	8012ed4 <draw_x_ticks+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8012eae:	f241 0211 	movw	r2, #4113	; 0x1011
 8012eb2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	f7f4 f86e 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012ebc:	b203      	sxth	r3, r0
        if(y_ofs > clip_area->y2) return;
 8012ebe:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 8012ec2:	9304      	str	r3, [sp, #16]
        y_ofs = obj->coords.y2;
 8012ec4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        if(y_ofs > clip_area->y2) return;
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	f280 80fd 	bge.w	80130c8 <draw_x_ticks+0x290>
}
 8012ece:	b02d      	add	sp, #180	; 0xb4
 8012ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	e7f2      	b.n	8012ebe <draw_x_ticks+0x86>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	f280 80f2 	bge.w	80130c2 <draw_x_ticks+0x28a>
 8012ede:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f7ff fc85 	bl	80127f2 <lv_obj_get_style_pad_top>
 8012ee8:	9004      	str	r0, [sp, #16]
        y_ofs = obj->coords.y1;
 8012eea:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 8012eee:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012ef0:	9b06      	ldr	r3, [sp, #24]
 8012ef2:	435e      	muls	r6, r3
 8012ef4:	1233      	asrs	r3, r6, #8
 8012ef6:	9308      	str	r3, [sp, #32]
 8012ef8:	f346 230f 	sbfx	r3, r6, #8, #16
    line_dsc.dash_width = 0;
 8012efc:	2600      	movs	r6, #0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012efe:	9306      	str	r3, [sp, #24]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012f00:	9b07      	ldr	r3, [sp, #28]
 8012f02:	441d      	add	r5, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8012f04:	44ab      	add	fp, r5
    lv_draw_line_dsc_init(&line_dsc);
 8012f06:	ad0f      	add	r5, sp, #60	; 0x3c
 8012f08:	4628      	mov	r0, r5
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8012f0a:	ebab 0808 	sub.w	r8, fp, r8
    lv_draw_line_dsc_init(&line_dsc);
 8012f0e:	f7f7 fd99 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8012f12:	462a      	mov	r2, r5
 8012f14:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f7f1 fb1d 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8012f1e:	4651      	mov	r1, sl
 8012f20:	a81a      	add	r0, sp, #104	; 0x68
    line_dsc.dash_width = 0;
 8012f22:	9610      	str	r6, [sp, #64]	; 0x40
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8012f24:	f7f1 fc18 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_TICKS;
 8012f28:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8012f2c:	2102      	movs	r1, #2
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8012f2e:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8012f30:	fa1f f888 	uxth.w	r8, r8
    dsc.part = LV_PART_TICKS;
 8012f34:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
    if(chart->type == LV_CHART_TYPE_BAR) {
 8012f38:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    dsc.line_dsc = &line_dsc;
 8012f3c:	e9cd 751d 	strd	r7, r5, [sp, #116]	; 0x74
    if(chart->type == LV_CHART_TYPE_BAR) {
 8012f40:	f002 0207 	and.w	r2, r2, #7
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8012f44:	1e9f      	subs	r7, r3, #2
    if(chart->type == LV_CHART_TYPE_BAR) {
 8012f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8012f48:	bf18      	it	ne
 8012f4a:	2701      	movne	r7, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 8012f4c:	2a02      	cmp	r2, #2
 8012f4e:	f000 80ca 	beq.w	80130e6 <draw_x_ticks+0x2ae>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8012f52:	fa0f fb88 	sxth.w	fp, r8
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 8012f56:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 8012f5a:	2500      	movs	r5, #0
    p1.y = y_ofs;
 8012f5c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 8012f60:	eb04 0847 	add.w	r8, r4, r7, lsl #1
 8012f64:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8012f68:	1e73      	subs	r3, r6, #1
 8012f6a:	f8b9 6006 	ldrh.w	r6, [r9, #6]
 8012f6e:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8012f72:	435e      	muls	r6, r3
        if(i % t->minor_cnt == 0) major = true;
 8012f74:	f8b9 7006 	ldrh.w	r7, [r9, #6]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 8012f78:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        if(i % t->minor_cnt == 0) major = true;
 8012f7c:	f3c7 030e 	ubfx	r3, r7, #0, #15
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 8012f80:	9905      	ldr	r1, [sp, #20]
 8012f82:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 8012f86:	2902      	cmp	r1, #2
        if(i % t->minor_cnt == 0) major = true;
 8012f88:	fbb5 f7f3 	udiv	r7, r5, r3
 8012f8c:	fb03 5717 	mls	r7, r3, r7, r5
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 8012f90:	9b06      	ldr	r3, [sp, #24]
 8012f92:	eba3 0302 	sub.w	r3, r3, r2
 8012f96:	fb05 f303 	mul.w	r3, r5, r3
 8012f9a:	fbb3 f3f6 	udiv	r3, r3, r6
 8012f9e:	445b      	add	r3, fp
 8012fa0:	b21b      	sxth	r3, r3
 8012fa2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8012fa6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 8012faa:	f000 80c0 	beq.w	801312e <draw_x_ticks+0x2f6>
 8012fae:	2f00      	cmp	r7, #0
 8012fb0:	f040 80ba 	bne.w	8013128 <draw_x_ticks+0x2f0>
 8012fb4:	f8b9 1000 	ldrh.w	r1, [r9]
 8012fb8:	1a41      	subs	r1, r0, r1
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 8012fba:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8012fbe:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 8012fc2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 8012fc6:	1051      	asrs	r1, r2, #1
 8012fc8:	eb03 0262 	add.w	r2, r3, r2, asr #1
 8012fcc:	4282      	cmp	r2, r0
 8012fce:	db0a      	blt.n	8012fe6 <draw_x_ticks+0x1ae>
           p2.x - line_dsc.width / 2  <= obj->coords.x2)
 8012fd0:	1a5b      	subs	r3, r3, r1
 8012fd2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	dc05      	bgt.n	8012fe6 <draw_x_ticks+0x1ae>
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 8012fda:	ab0f      	add	r3, sp, #60	; 0x3c
 8012fdc:	4652      	mov	r2, sl
 8012fde:	a90b      	add	r1, sp, #44	; 0x2c
 8012fe0:	a80a      	add	r0, sp, #40	; 0x28
 8012fe2:	f7f7 fd3b 	bl	800aa5c <lv_draw_line>
        if(!major || !t->label_en) continue;
 8012fe6:	2f00      	cmp	r7, #0
 8012fe8:	d166      	bne.n	80130b8 <draw_x_ticks+0x280>
 8012fea:	f999 3009 	ldrsb.w	r3, [r9, #9]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	da62      	bge.n	80130b8 <draw_x_ticks+0x280>
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 8012ff2:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8012ff6:	f003 0307 	and.w	r3, r3, #7
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	f040 809f 	bne.w	801313e <draw_x_ticks+0x306>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 8013000:	f9b8 3078 	ldrsh.w	r3, [r8, #120]	; 0x78
 8013004:	4639      	mov	r1, r7
 8013006:	4632      	mov	r2, r6
 8013008:	4628      	mov	r0, r5
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	f9b8 3074 	ldrsh.w	r3, [r8, #116]	; 0x74
 8013010:	f004 f989 	bl	8017326 <lv_map>
 8013014:	4607      	mov	r7, r0
        lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8013016:	463b      	mov	r3, r7
 8013018:	4a51      	ldr	r2, [pc, #324]	; (8013160 <draw_x_ticks+0x328>)
 801301a:	2110      	movs	r1, #16
 801301c:	a823      	add	r0, sp, #140	; 0x8c
 801301e:	f004 ffbb 	bl	8017f98 <lv_snprintf>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013022:	aa1a      	add	r2, sp, #104	; 0x68
 8013024:	211a      	movs	r1, #26
 8013026:	4620      	mov	r0, r4
        dsc.value = tick_value;
 8013028:	972a      	str	r7, [sp, #168]	; 0xa8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801302a:	f7ee fd65 	bl	8001af8 <lv_event_send>
        lv_txt_get_size(&size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801302e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013032:	2200      	movs	r2, #0
 8013034:	a923      	add	r1, sp, #140	; 0x8c
 8013036:	a80c      	add	r0, sp, #48	; 0x30
 8013038:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801303c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013040:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8013048:	f006 f8ad 	bl	80191a6 <lv_txt_get_size>
        a.x1 = (p2.x - size.x / 2);
 801304c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013050:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8013054:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        if(sec_axis) {
 8013058:	9805      	ldr	r0, [sp, #20]
        a.x1 = (p2.x - size.x / 2);
 801305a:	f3c3 034f 	ubfx	r3, r3, #1, #16
        if(sec_axis) {
 801305e:	2802      	cmp	r0, #2
 8013060:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
        a.x1 = (p2.x - size.x / 2);
 8013064:	eba2 0103 	sub.w	r1, r2, r3
        a.x2 = (p2.x + size.x / 2);
 8013068:	441a      	add	r2, r3
 801306a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        a.x1 = (p2.x - size.x / 2);
 801306e:	b209      	sxth	r1, r1
        a.x2 = (p2.x + size.x / 2);
 8013070:	b212      	sxth	r2, r2
        a.x1 = (p2.x - size.x / 2);
 8013072:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
        a.x2 = (p2.x + size.x / 2);
 8013076:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        if(sec_axis) {
 801307a:	d067      	beq.n	801314c <draw_x_ticks+0x314>
            a.y2 = p2.y - label_gap;
 801307c:	1ac3      	subs	r3, r0, r3
            a.y1 = a.y2 - size.y;
 801307e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
            a.y2 = p2.y - label_gap;
 8013082:	b29b      	uxth	r3, r3
 8013084:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            a.y1 = a.y2 - size.y;
 8013088:	1a1b      	subs	r3, r3, r0
 801308a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(a.x2 >= obj->coords.x1 &&
 801308e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8013092:	4293      	cmp	r3, r2
 8013094:	dc0b      	bgt.n	80130ae <draw_x_ticks+0x276>
 8013096:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801309a:	428b      	cmp	r3, r1
 801309c:	db07      	blt.n	80130ae <draw_x_ticks+0x276>
            lv_draw_label(&a, clip_area, &label_dsc, dsc.text, NULL);
 801309e:	2300      	movs	r3, #0
 80130a0:	aa12      	add	r2, sp, #72	; 0x48
 80130a2:	4651      	mov	r1, sl
 80130a4:	a80d      	add	r0, sp, #52	; 0x34
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	ab23      	add	r3, sp, #140	; 0x8c
 80130aa:	f7f7 fa29 	bl	800a500 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80130ae:	aa1a      	add	r2, sp, #104	; 0x68
 80130b0:	211b      	movs	r1, #27
 80130b2:	4620      	mov	r0, r4
 80130b4:	f7ee fd20 	bl	8001af8 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 80130b8:	3501      	adds	r5, #1
 80130ba:	42ae      	cmp	r6, r5
 80130bc:	f4bf af5a 	bcs.w	8012f74 <draw_x_ticks+0x13c>
 80130c0:	e705      	b.n	8012ece <draw_x_ticks+0x96>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 80130c2:	2300      	movs	r3, #0
 80130c4:	9304      	str	r3, [sp, #16]
 80130c6:	e710      	b.n	8012eea <draw_x_ticks+0xb2>
        if(y_ofs + label_gap  + label_dsc.font->line_height + t->major_len < clip_area->y1) return;
 80130c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130ca:	9904      	ldr	r1, [sp, #16]
 80130cc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80130d0:	1859      	adds	r1, r3, r1
 80130d2:	440a      	add	r2, r1
 80130d4:	f9b9 1000 	ldrsh.w	r1, [r9]
 80130d8:	440a      	add	r2, r1
 80130da:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 80130de:	428a      	cmp	r2, r1
 80130e0:	f6bf af05 	bge.w	8012eee <draw_x_ticks+0xb6>
 80130e4:	e6f3      	b.n	8012ece <draw_x_ticks+0x96>
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 80130e6:	4631      	mov	r1, r6
 80130e8:	4620      	mov	r0, r4
 80130ea:	9307      	str	r3, [sp, #28]
 80130ec:	f7ff fb7a 	bl	80127e4 <lv_obj_get_style_pad_column>
 80130f0:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 80130f4:	9b06      	ldr	r3, [sp, #24]
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 80130f6:	4350      	muls	r0, r2
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 80130f8:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 80130fc:	eb03 2620 	add.w	r6, r3, r0, asr #8
        w -= block_w - block_gap;
 8013100:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 8013102:	fb96 f6f2 	sdiv	r6, r6, r2
        x_ofs += (block_w - block_gap) / 2;
 8013106:	fa0f fb86 	sxth.w	fp, r6
 801310a:	ebab 2b20 	sub.w	fp, fp, r0, asr #8
        w -= block_w - block_gap;
 801310e:	eb03 2020 	add.w	r0, r3, r0, asr #8
        x_ofs += (block_w - block_gap) / 2;
 8013112:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
        w -= block_w - block_gap;
 8013116:	1b86      	subs	r6, r0, r6
        x_ofs += (block_w - block_gap) / 2;
 8013118:	eb08 0b6b 	add.w	fp, r8, fp, asr #1
        w -= block_w - block_gap;
 801311c:	b233      	sxth	r3, r6
        x_ofs += (block_w - block_gap) / 2;
 801311e:	fa0f fb8b 	sxth.w	fp, fp
        w -= block_w - block_gap;
 8013122:	9306      	str	r3, [sp, #24]
 8013124:	9b07      	ldr	r3, [sp, #28]
 8013126:	e716      	b.n	8012f56 <draw_x_ticks+0x11e>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 8013128:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 801312c:	e744      	b.n	8012fb8 <draw_x_ticks+0x180>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 801312e:	b91f      	cbnz	r7, 8013138 <draw_x_ticks+0x300>
 8013130:	f8b9 1000 	ldrh.w	r1, [r9]
 8013134:	4401      	add	r1, r0
 8013136:	e740      	b.n	8012fba <draw_x_ticks+0x182>
 8013138:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 801313c:	e7fa      	b.n	8013134 <draw_x_ticks+0x2fc>
            tick_value = i / t->minor_cnt;
 801313e:	f8b9 7006 	ldrh.w	r7, [r9, #6]
 8013142:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8013146:	fbb5 f7f7 	udiv	r7, r5, r7
 801314a:	e764      	b.n	8013016 <draw_x_ticks+0x1de>
            a.y1 = p2.y + label_gap;
 801314c:	4403      	add	r3, r0
            a.y2 = a.y1 + size.y;
 801314e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
            a.y1 = p2.y + label_gap;
 8013152:	b29b      	uxth	r3, r3
 8013154:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            a.y2 = a.y1 + size.y;
 8013158:	4403      	add	r3, r0
 801315a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801315e:	e796      	b.n	801308e <draw_x_ticks+0x256>
 8013160:	08025c4c 	.word	0x08025c4c

08013164 <lv_chart_event>:
{
 8013164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8013168:	4856      	ldr	r0, [pc, #344]	; (80132c4 <lv_chart_event+0x160>)
{
 801316a:	460d      	mov	r5, r1
 801316c:	ed2d 8b04 	vpush	{d8-d9}
 8013170:	b0cd      	sub	sp, #308	; 0x134
    res = lv_obj_event_base(MY_CLASS, e);
 8013172:	f7ee fc4a 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8013176:	2801      	cmp	r0, #1
 8013178:	d147      	bne.n	801320a <lv_chart_event+0xa6>
    lv_event_code_t code = lv_event_get_code(e);
 801317a:	4628      	mov	r0, r5
 801317c:	f7ee fcde 	bl	8001b3c <lv_event_get_code>
 8013180:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013182:	4628      	mov	r0, r5
 8013184:	f7ee fcd8 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 8013188:	2c01      	cmp	r4, #1
    lv_obj_t * obj = lv_event_get_target(e);
 801318a:	4680      	mov	r8, r0
    if(code == LV_EVENT_PRESSED) {
 801318c:	d15b      	bne.n	8013246 <lv_chart_event+0xe2>
        lv_indev_t * indev = lv_indev_get_act();
 801318e:	f7ee ff49 	bl	8002024 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 8013192:	a93a      	add	r1, sp, #232	; 0xe8
 8013194:	f7ee ffa7 	bl	80020e6 <lv_indev_get_point>
        p.x -= obj->coords.x1;
 8013198:	f8b8 0014 	ldrh.w	r0, [r8, #20]
 801319c:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
 80131a0:	1a24      	subs	r4, r4, r0
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 80131a2:	4640      	mov	r0, r8
        p.x -= obj->coords.x1;
 80131a4:	b2a4      	uxth	r4, r4
 80131a6:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 80131aa:	f7f2 fd21 	bl	8005bf0 <lv_obj_get_scroll_left>
 80131ae:	4420      	add	r0, r4
 80131b0:	b285      	uxth	r5, r0
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80131b2:	4640      	mov	r0, r8
 80131b4:	f7f1 fc7f 	bl	8004ab6 <lv_obj_get_content_width>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80131b8:	2100      	movs	r1, #0
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80131ba:	4606      	mov	r6, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80131bc:	4640      	mov	r0, r8
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80131be:	f8b8 4084 	ldrh.w	r4, [r8, #132]	; 0x84
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80131c2:	f7ff fb01 	bl	80127c8 <lv_obj_get_style_pad_left>
    x-= pad_left;
 80131c6:	1a2b      	subs	r3, r5, r0
 80131c8:	b21b      	sxth	r3, r3
    if(x < 0) return 0;
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	db39      	blt.n	8013242 <lv_chart_event+0xde>
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80131ce:	fb04 f006 	mul.w	r0, r4, r6
 80131d2:	f340 210f 	sbfx	r1, r0, #8, #16
    if(x > w) return chart->point_cnt - 1;
 80131d6:	4299      	cmp	r1, r3
 80131d8:	da1c      	bge.n	8013214 <lv_chart_event+0xb0>
 80131da:	f8b8 1082 	ldrh.w	r1, [r8, #130]	; 0x82
 80131de:	3901      	subs	r1, #1
        if(id != chart->pressed_point_id) {
 80131e0:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
 80131e4:	428b      	cmp	r3, r1
 80131e6:	d010      	beq.n	801320a <lv_chart_event+0xa6>
            invalidate_point(obj, id);
 80131e8:	b28c      	uxth	r4, r1
 80131ea:	4640      	mov	r0, r8
 80131ec:	4621      	mov	r1, r4
 80131ee:	f7ff fb4b 	bl	8012888 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 80131f2:	f8b8 107c 	ldrh.w	r1, [r8, #124]	; 0x7c
 80131f6:	4640      	mov	r0, r8
 80131f8:	f7ff fb46 	bl	8012888 <invalidate_point>
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80131fc:	2200      	movs	r2, #0
 80131fe:	211c      	movs	r1, #28
 8013200:	4640      	mov	r0, r8
            chart->pressed_point_id = id;
 8013202:	f8a8 407c 	strh.w	r4, [r8, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8013206:	f7ee fc77 	bl	8001af8 <lv_event_send>
}
 801320a:	b04d      	add	sp, #308	; 0x134
 801320c:	ecbd 8b04 	vpop	{d8-d9}
 8013210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 8013214:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
 8013218:	f002 0207 	and.w	r2, r2, #7
 801321c:	2a01      	cmp	r2, #1
 801321e:	d108      	bne.n	8013232 <lv_chart_event+0xce>
 8013220:	f8b8 0082 	ldrh.w	r0, [r8, #130]	; 0x82
 8013224:	104a      	asrs	r2, r1, #1
 8013226:	3801      	subs	r0, #1
 8013228:	fb03 2300 	mla	r3, r3, r0, r2
 801322c:	fb93 f1f1 	sdiv	r1, r3, r1
 8013230:	e7d6      	b.n	80131e0 <lv_chart_event+0x7c>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 8013232:	2a02      	cmp	r2, #2
 8013234:	d105      	bne.n	8013242 <lv_chart_event+0xde>
 8013236:	f8b8 0082 	ldrh.w	r0, [r8, #130]	; 0x82
 801323a:	4343      	muls	r3, r0
 801323c:	fbb3 f1f1 	udiv	r1, r3, r1
 8013240:	e7ce      	b.n	80131e0 <lv_chart_event+0x7c>
    if(x < 0) return 0;
 8013242:	2100      	movs	r1, #0
 8013244:	e7cc      	b.n	80131e0 <lv_chart_event+0x7c>
    } else if(code == LV_EVENT_RELEASED) {
 8013246:	2c08      	cmp	r4, #8
 8013248:	d108      	bne.n	801325c <lv_chart_event+0xf8>
        invalidate_point(obj, chart->pressed_point_id);
 801324a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 801324e:	f7ff fb1b 	bl	8012888 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 8013252:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013256:	f8a8 307c 	strh.w	r3, [r8, #124]	; 0x7c
 801325a:	e7d6      	b.n	801320a <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_SIZE_CHANGED) {
 801325c:	2c23      	cmp	r4, #35	; 0x23
 801325e:	d102      	bne.n	8013266 <lv_chart_event+0x102>
        lv_obj_refresh_self_size(obj);
 8013260:	f7f1 fcad 	bl	8004bbe <lv_obj_refresh_self_size>
 8013264:	e7d1      	b.n	801320a <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013266:	2c13      	cmp	r4, #19
 8013268:	d114      	bne.n	8013294 <lv_chart_event+0x130>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size, chart->tick[3].draw_size));
 801326a:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 801326e:	f9b0 3058 	ldrsh.w	r3, [r0, #88]	; 0x58
 8013272:	4299      	cmp	r1, r3
 8013274:	bfb8      	it	lt
 8013276:	4619      	movlt	r1, r3
 8013278:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
 801327c:	4299      	cmp	r1, r3
 801327e:	bfb8      	it	lt
 8013280:	4619      	movlt	r1, r3
 8013282:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 8013286:	4628      	mov	r0, r5
 8013288:	4299      	cmp	r1, r3
 801328a:	bfb8      	it	lt
 801328c:	4619      	movlt	r1, r3
 801328e:	f7ee fc95 	bl	8001bbc <lv_event_set_ext_draw_size>
 8013292:	e7ba      	b.n	801320a <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_GET_SELF_SIZE) {
 8013294:	2c26      	cmp	r4, #38	; 0x26
 8013296:	d117      	bne.n	80132c8 <lv_chart_event+0x164>
        lv_point_t * p = lv_event_get_param(e);
 8013298:	4628      	mov	r0, r5
 801329a:	f7ee fc51 	bl	8001b40 <lv_event_get_param>
 801329e:	4604      	mov	r4, r0
        p->x = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80132a0:	4640      	mov	r0, r8
 80132a2:	f7f1 fc08 	bl	8004ab6 <lv_obj_get_content_width>
 80132a6:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 80132aa:	4343      	muls	r3, r0
        p->y = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80132ac:	4640      	mov	r0, r8
        p->x = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80132ae:	121b      	asrs	r3, r3, #8
 80132b0:	8023      	strh	r3, [r4, #0]
        p->y = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80132b2:	f7f1 fc1a 	bl	8004aea <lv_obj_get_content_height>
 80132b6:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
 80132ba:	4343      	muls	r3, r0
 80132bc:	121b      	asrs	r3, r3, #8
 80132be:	8063      	strh	r3, [r4, #2]
 80132c0:	e7a3      	b.n	801320a <lv_chart_event+0xa6>
 80132c2:	bf00      	nop
 80132c4:	08025c9c 	.word	0x08025c9c
    } else if(code == LV_EVENT_DRAW_MAIN) {
 80132c8:	2c15      	cmp	r4, #21
 80132ca:	d19e      	bne.n	801320a <lv_chart_event+0xa6>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80132cc:	4628      	mov	r0, r5
 80132ce:	f7ee fc37 	bl	8001b40 <lv_event_get_param>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80132d2:	f108 0314 	add.w	r3, r8, #20
        const lv_area_t * clip_area = lv_event_get_param(e);
 80132d6:	ee08 0a10 	vmov	s16, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80132da:	4602      	mov	r2, r0
 80132dc:	4619      	mov	r1, r3
 80132de:	a820      	add	r0, sp, #128	; 0x80
 80132e0:	ee08 3a90 	vmov	s17, r3
 80132e4:	f003 fbff 	bl	8016ae6 <_lv_area_intersect>
    if(mask_ret == false) return;
 80132e8:	2800      	cmp	r0, #0
 80132ea:	f040 81be 	bne.w	801366a <lv_chart_event+0x506>
    draw_y_ticks(obj, mask, LV_CHART_AXIS_PRIMARY_Y);
 80132ee:	2200      	movs	r2, #0
 80132f0:	ee18 1a10 	vmov	r1, s16
 80132f4:	4640      	mov	r0, r8
 80132f6:	f7ff fc51 	bl	8012b9c <draw_y_ticks>
    draw_y_ticks(obj, mask, LV_CHART_AXIS_SECONDARY_Y);
 80132fa:	2201      	movs	r2, #1
 80132fc:	ee18 1a10 	vmov	r1, s16
 8013300:	4640      	mov	r0, r8
 8013302:	f7ff fc4b 	bl	8012b9c <draw_y_ticks>
    draw_x_ticks(obj, mask, LV_CHART_AXIS_PRIMARY_X);
 8013306:	2202      	movs	r2, #2
 8013308:	ee18 1a10 	vmov	r1, s16
 801330c:	4640      	mov	r0, r8
 801330e:	f7ff fd93 	bl	8012e38 <draw_x_ticks>
    draw_x_ticks(obj, mask, LV_CHART_AXIS_SECONDARY_X);
 8013312:	2204      	movs	r2, #4
 8013314:	ee18 1a10 	vmov	r1, s16
 8013318:	4640      	mov	r0, r8
 801331a:	f7ff fd8d 	bl	8012e38 <draw_x_ticks>
        if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, clip_area);
 801331e:	f898 3088 	ldrb.w	r3, [r8, #136]	; 0x88
 8013322:	f003 0307 	and.w	r3, r3, #7
 8013326:	2b01      	cmp	r3, #1
 8013328:	f040 8425 	bne.w	8013b76 <lv_chart_event+0xa12>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 801332c:	ee18 2a10 	vmov	r2, s16
 8013330:	ee18 1a90 	vmov	r1, s17
 8013334:	a818      	add	r0, sp, #96	; 0x60
 8013336:	f003 fbd6 	bl	8016ae6 <_lv_area_intersect>
 801333a:	2800      	cmp	r0, #0
 801333c:	f000 80a4 	beq.w	8013488 <lv_chart_event+0x324>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013340:	4640      	mov	r0, r8
 8013342:	f7ff fb50 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013346:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013348:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801334a:	4640      	mov	r0, r8
 801334c:	f7ff fa3c 	bl	80127c8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013350:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013352:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013354:	4640      	mov	r0, r8
 8013356:	f7ff fa4c 	bl	80127f2 <lv_obj_get_style_pad_top>
 801335a:	4683      	mov	fp, r0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801335c:	4640      	mov	r0, r8
 801335e:	f7f1 fbaa 	bl	8004ab6 <lv_obj_get_content_width>
 8013362:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013366:	9004      	str	r0, [sp, #16]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013368:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801336a:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801336c:	f7f1 fbbd 	bl	8004aea <lv_obj_get_content_height>
 8013370:	9007      	str	r0, [sp, #28]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013372:	4640      	mov	r0, r8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013374:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013378:	f9b8 9014 	ldrsh.w	r9, [r8, #20]
 801337c:	f7f2 fc38 	bl	8005bf0 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013380:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013384:	4607      	mov	r7, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013386:	4640      	mov	r0, r8
 8013388:	9308      	str	r3, [sp, #32]
 801338a:	f7f2 fbdb 	bl	8005b44 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801338e:	ee18 2a10 	vmov	r2, s16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013392:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013394:	ee18 1a90 	vmov	r1, s17
 8013398:	a81a      	add	r0, sp, #104	; 0x68
 801339a:	f003 fba4 	bl	8016ae6 <_lv_area_intersect>
    if(mask_ret == false) return;
 801339e:	2800      	cmp	r0, #0
 80133a0:	d072      	beq.n	8013488 <lv_chart_event+0x324>
    lv_draw_line_dsc_init(&line_dsc_default);
 80133a2:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80133a4:	fa15 f584 	uxtah	r5, r5, r4
    lv_draw_line_dsc_init(&line_dsc_default);
 80133a8:	f7f7 fb4c 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 80133ac:	aa20      	add	r2, sp, #128	; 0x80
 80133ae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80133b2:	4640      	mov	r0, r8
 80133b4:	f7f1 f8d0 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 80133b8:	a82d      	add	r0, sp, #180	; 0xb4
 80133ba:	f7f9 f97d 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 80133be:	aa2d      	add	r2, sp, #180	; 0xb4
 80133c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80133c4:	4640      	mov	r0, r8
 80133c6:	f7f0 fee3 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80133ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80133ce:	4640      	mov	r0, r8
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80133d0:	44a9      	add	r9, r5
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80133d2:	f7ff fa00 	bl	80127d6 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80133d6:	f241 0204 	movw	r2, #4100	; 0x1004
 80133da:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80133de:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80133e2:	eba9 0707 	sub.w	r7, r9, r7
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80133e6:	fa1b f484 	uxtah	r4, fp, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80133ea:	f340 034f 	sbfx	r3, r0, #1, #16
 80133ee:	4640      	mov	r0, r8
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80133f0:	f647 79ff 	movw	r9, #32767	; 0x7fff
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80133f4:	9303      	str	r3, [sp, #12]
 80133f6:	f7f3 fdcf 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80133fa:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 80133fe:	9a03      	ldr	r2, [sp, #12]
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8013400:	fa03 f080 	sxtah	r0, r3, r0
 8013404:	1043      	asrs	r3, r0, #1
 8013406:	9306      	str	r3, [sp, #24]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 8013408:	9906      	ldr	r1, [sp, #24]
 801340a:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 801340e:	428a      	cmp	r2, r1
 8013410:	bfa8      	it	ge
 8013412:	460a      	movge	r2, r1
 8013414:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8013418:	b212      	sxth	r2, r2
 801341a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 801341e:	bfc2      	ittt	gt
 8013420:	f89d 2089 	ldrbgt.w	r2, [sp, #137]	; 0x89
 8013424:	f042 0210 	orrgt.w	r2, r2, #16
 8013428:	f88d 2089 	strbgt.w	r2, [sp, #137]	; 0x89
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801342c:	2b01      	cmp	r3, #1
 801342e:	bf02      	ittt	eq
 8013430:	f89d 3089 	ldrbeq.w	r3, [sp, #137]	; 0x89
 8013434:	f043 0310 	orreq.w	r3, r3, #16
 8013438:	f88d 3089 	strbeq.w	r3, [sp, #137]	; 0x89
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801343c:	9b07      	ldr	r3, [sp, #28]
 801343e:	435e      	muls	r6, r3
 8013440:	1233      	asrs	r3, r6, #8
 8013442:	9310      	str	r3, [sp, #64]	; 0x40
 8013444:	f346 230f 	sbfx	r3, r6, #8, #16
 8013448:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801344a:	b2bb      	uxth	r3, r7
 801344c:	9311      	str	r3, [sp, #68]	; 0x44
 801344e:	b23b      	sxth	r3, r7
 8013450:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013452:	9b08      	ldr	r3, [sp, #32]
 8013454:	441c      	add	r4, r3
 8013456:	eba4 0a0a 	sub.w	sl, r4, sl
 801345a:	fa1f f38a 	uxth.w	r3, sl
 801345e:	9312      	str	r3, [sp, #72]	; 0x48
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 8013460:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8013464:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013466:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 801346a:	4358      	muls	r0, r3
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801346c:	f340 230f 	sbfx	r3, r0, #8, #16
 8013470:	9308      	str	r3, [sp, #32]
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013472:	f108 0324 	add.w	r3, r8, #36	; 0x24
 8013476:	4618      	mov	r0, r3
 8013478:	ee09 3a10 	vmov	s18, r3
 801347c:	f003 fe82 	bl	8017184 <_lv_ll_get_tail>
 8013480:	4604      	mov	r4, r0
 8013482:	2c00      	cmp	r4, #0
 8013484:	f040 820d 	bne.w	80138a2 <lv_chart_event+0x73e>
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 8013488:	f108 0b30 	add.w	fp, r8, #48	; 0x30
 801348c:	4658      	mov	r0, fp
 801348e:	f003 fe90 	bl	80171b2 <_lv_ll_is_empty>
 8013492:	2800      	cmp	r0, #0
 8013494:	f47f aeb9 	bne.w	801320a <lv_chart_event+0xa6>
    lv_draw_line_dsc_init(&line_dsc_ori);
 8013498:	ae1a      	add	r6, sp, #104	; 0x68
    dsc.line_dsc = &line_dsc_tmp;
 801349a:	af1d      	add	r7, sp, #116	; 0x74
    lv_draw_line_dsc_init(&line_dsc_ori);
 801349c:	4630      	mov	r0, r6
 801349e:	f7f7 fad1 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 80134a2:	4632      	mov	r2, r6
 80134a4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80134a8:	4640      	mov	r0, r8
 80134aa:	f7f1 f855 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 80134ae:	a820      	add	r0, sp, #128	; 0x80
 80134b0:	f7f9 f902 	bl	800c6b8 <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 80134b4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134b8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80134bc:	4640      	mov	r0, r8
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 80134be:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 80134c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80134c6:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134ca:	f7ff f984 	bl	80127d6 <lv_obj_get_style_width>
 80134ce:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134d2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134d6:	f340 034f 	sbfx	r3, r0, #1, #16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134da:	4640      	mov	r0, r8
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134dc:	9303      	str	r3, [sp, #12]
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134de:	f7ff f97a 	bl	80127d6 <lv_obj_get_style_width>
 80134e2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80134e6:	ee18 1a10 	vmov	r1, s16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134ea:	f340 034f 	sbfx	r3, r0, #1, #16
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80134ee:	a83a      	add	r0, sp, #232	; 0xe8
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80134f0:	9304      	str	r3, [sp, #16]
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80134f2:	f7f1 f931 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.rect_dsc = &point_dsc_tmp;
 80134f6:	ab2d      	add	r3, sp, #180	; 0xb4
    _lv_area_intersect(&clip_area2, clip_area, &obj->coords);
 80134f8:	ee18 1a10 	vmov	r1, s16
 80134fc:	ee18 2a90 	vmov	r2, s17
 8013500:	a816      	add	r0, sp, #88	; 0x58
    dsc.rect_dsc = &point_dsc_tmp;
 8013502:	933c      	str	r3, [sp, #240]	; 0xf0
    dsc.part = LV_PART_CURSOR;
 8013504:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    dsc.line_dsc = &line_dsc_tmp;
 8013508:	973e      	str	r7, [sp, #248]	; 0xf8
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 801350a:	ee08 6a10 	vmov	s16, r6
    dsc.part = LV_PART_CURSOR;
 801350e:	9347      	str	r3, [sp, #284]	; 0x11c
    _lv_area_intersect(&clip_area2, clip_area, &obj->coords);
 8013510:	f003 fae9 	bl	8016ae6 <_lv_area_intersect>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8013514:	4658      	mov	r0, fp
 8013516:	f003 fe35 	bl	8017184 <_lv_ll_get_tail>
 801351a:	4604      	mov	r4, r0
 801351c:	2c00      	cmp	r4, #0
 801351e:	f43f ae74 	beq.w	801320a <lv_chart_event+0xa6>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 8013522:	220a      	movs	r2, #10
 8013524:	ee18 1a10 	vmov	r1, s16
 8013528:	4638      	mov	r0, r7
 801352a:	f003 ff65 	bl	80173f8 <lv_memcpy>
        lv_memcpy(&point_dsc_tmp, &point_dsc_ori, sizeof(lv_draw_rect_dsc_t));
 801352e:	2234      	movs	r2, #52	; 0x34
 8013530:	a920      	add	r1, sp, #128	; 0x80
 8013532:	a82d      	add	r0, sp, #180	; 0xb4
 8013534:	f003 ff60 	bl	80173f8 <lv_memcpy>
        line_dsc_tmp.color = cursor->color;
 8013538:	88e3      	ldrh	r3, [r4, #6]
 801353a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        point_dsc_tmp.bg_color = cursor->color;
 801353e:	88e3      	ldrh	r3, [r4, #6]
 8013540:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        dsc.p1 = &p1;
 8013544:	ab14      	add	r3, sp, #80	; 0x50
 8013546:	9341      	str	r3, [sp, #260]	; 0x104
        dsc.p2 = &p2;
 8013548:	ab15      	add	r3, sp, #84	; 0x54
 801354a:	9342      	str	r3, [sp, #264]	; 0x108
        if(cursor->pos_set) {
 801354c:	7b63      	ldrb	r3, [r4, #13]
 801354e:	07dd      	lsls	r5, r3, #31
 8013550:	f140 8616 	bpl.w	8014180 <lv_chart_event+0x101c>
            cx = cursor->pos.x;
 8013554:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 8013558:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cy += obj->coords.y1;
 801355c:	f8b8 3016 	ldrh.w	r3, [r8, #22]
        cx += obj->coords.x1;
 8013560:	f9b8 2014 	ldrsh.w	r2, [r8, #20]
        cy += obj->coords.y1;
 8013564:	441d      	add	r5, r3
        if(cursor->dir & LV_DIR_HOR) {
 8013566:	7b23      	ldrb	r3, [r4, #12]
        cx += obj->coords.x1;
 8013568:	4416      	add	r6, r2
        if(cursor->dir & LV_DIR_HOR) {
 801356a:	0798      	lsls	r0, r3, #30
        cy += obj->coords.y1;
 801356c:	fa1f f985 	uxth.w	r9, r5
        cx += obj->coords.x1;
 8013570:	fa1f fa86 	uxth.w	sl, r6
        cy += obj->coords.y1;
 8013574:	b22d      	sxth	r5, r5
        cx += obj->coords.x1;
 8013576:	b236      	sxth	r6, r6
        if(cursor->dir & LV_DIR_HOR) {
 8013578:	d021      	beq.n	80135be <lv_chart_event+0x45a>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 801357a:	f013 0f01 	tst.w	r3, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801357e:	4640      	mov	r0, r8
            p1.y = cy;
 8013580:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013584:	bf08      	it	eq
 8013586:	4632      	moveq	r2, r6
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 8013588:	0799      	lsls	r1, r3, #30
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801358a:	f04f 011a 	mov.w	r1, #26
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 801358e:	bf4c      	ite	mi
 8013590:	f9b8 3018 	ldrshmi.w	r3, [r8, #24]
 8013594:	4633      	movpl	r3, r6
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013596:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801359a:	aa3a      	add	r2, sp, #232	; 0xe8
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 801359c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p2.y = p1.y;
 80135a0:	f8ad 5056 	strh.w	r5, [sp, #86]	; 0x56
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80135a4:	f7ee faa8 	bl	8001af8 <lv_event_send>
            lv_draw_line(&p1, &p2, &clip_area2, &line_dsc_tmp);
 80135a8:	aa16      	add	r2, sp, #88	; 0x58
 80135aa:	a915      	add	r1, sp, #84	; 0x54
 80135ac:	a814      	add	r0, sp, #80	; 0x50
 80135ae:	463b      	mov	r3, r7
 80135b0:	f7f7 fa54 	bl	800aa5c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80135b4:	aa3a      	add	r2, sp, #232	; 0xe8
 80135b6:	211b      	movs	r1, #27
 80135b8:	4640      	mov	r0, r8
 80135ba:	f7ee fa9d 	bl	8001af8 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 80135be:	7b23      	ldrb	r3, [r4, #12]
 80135c0:	f013 0f0c 	tst.w	r3, #12
 80135c4:	d021      	beq.n	801360a <lv_chart_event+0x4a6>
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 80135c6:	075a      	lsls	r2, r3, #29
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80135c8:	f04f 011a 	mov.w	r1, #26
 80135cc:	4640      	mov	r0, r8
            p1.x = cx;
 80135ce:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 80135d2:	bf4c      	ite	mi
 80135d4:	f9b8 2016 	ldrshmi.w	r2, [r8, #22]
 80135d8:	462a      	movpl	r2, r5
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 80135da:	071b      	lsls	r3, r3, #28
            p2.x = p1.x;
 80135dc:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 80135e0:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80135e4:	aa3a      	add	r2, sp, #232	; 0xe8
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 80135e6:	bf48      	it	mi
 80135e8:	f9b8 501a 	ldrshmi.w	r5, [r8, #26]
 80135ec:	f8ad 5056 	strh.w	r5, [sp, #86]	; 0x56
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80135f0:	f7ee fa82 	bl	8001af8 <lv_event_send>
            lv_draw_line(&p1, &p2, &clip_area2, &line_dsc_tmp);
 80135f4:	aa16      	add	r2, sp, #88	; 0x58
 80135f6:	a915      	add	r1, sp, #84	; 0x54
 80135f8:	a814      	add	r0, sp, #80	; 0x50
 80135fa:	463b      	mov	r3, r7
 80135fc:	f7f7 fa2e 	bl	800aa5c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013600:	aa3a      	add	r2, sp, #232	; 0xe8
 8013602:	211b      	movs	r1, #27
 8013604:	4640      	mov	r0, r8
 8013606:	f7ee fa77 	bl	8001af8 <lv_event_send>
        if(point_w && point_h) {
 801360a:	9b03      	ldr	r3, [sp, #12]
 801360c:	b33b      	cbz	r3, 801365e <lv_chart_event+0x4fa>
 801360e:	9b04      	ldr	r3, [sp, #16]
 8013610:	b32b      	cbz	r3, 801365e <lv_chart_event+0x4fa>
            point_area.x1 = cx - point_w;
 8013612:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            dsc.draw_area = &point_area;
 8013616:	ad18      	add	r5, sp, #96	; 0x60
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013618:	211a      	movs	r1, #26
 801361a:	4640      	mov	r0, r8
            point_area.x1 = cx - point_w;
 801361c:	ebaa 0203 	sub.w	r2, sl, r3
            point_area.x2 = cx + point_w;
 8013620:	449a      	add	sl, r3
            point_area.y1 = cy - point_h;
 8013622:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            point_area.x1 = cx - point_w;
 8013626:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            point_area.y1 = cy - point_h;
 801362a:	eba9 0203 	sub.w	r2, r9, r3
            point_area.y2 = cy + point_h;
 801362e:	4499      	add	r9, r3
            dsc.p1 = NULL;
 8013630:	2300      	movs	r3, #0
            point_area.x2 = cx + point_w;
 8013632:	f8ad a064 	strh.w	sl, [sp, #100]	; 0x64
            point_area.y1 = cy - point_h;
 8013636:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801363a:	aa3a      	add	r2, sp, #232	; 0xe8
            point_area.y2 = cy + point_h;
 801363c:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
            dsc.draw_area = &point_area;
 8013640:	953b      	str	r5, [sp, #236]	; 0xec
            dsc.p2 = NULL;
 8013642:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013646:	f7ee fa57 	bl	8001af8 <lv_event_send>
            lv_draw_rect(&point_area, &clip_area2, &point_dsc_tmp);
 801364a:	aa2d      	add	r2, sp, #180	; 0xb4
 801364c:	a916      	add	r1, sp, #88	; 0x58
 801364e:	4628      	mov	r0, r5
 8013650:	f7f9 f854 	bl	800c6fc <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013654:	aa3a      	add	r2, sp, #232	; 0xe8
 8013656:	211b      	movs	r1, #27
 8013658:	4640      	mov	r0, r8
 801365a:	f7ee fa4d 	bl	8001af8 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 801365e:	4621      	mov	r1, r4
 8013660:	4658      	mov	r0, fp
 8013662:	f003 fd96 	bl	8017192 <_lv_ll_get_prev>
 8013666:	4604      	mov	r4, r0
 8013668:	e758      	b.n	801351c <lv_chart_event+0x3b8>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801366a:	4640      	mov	r0, r8
    lv_draw_line_dsc_init(&line_dsc);
 801366c:	ad2d      	add	r5, sp, #180	; 0xb4
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801366e:	f7ff f9ba 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
 8013672:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013674:	2100      	movs	r1, #0
 8013676:	4640      	mov	r0, r8
 8013678:	f7ff f8a6 	bl	80127c8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801367c:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801367e:	b2a3      	uxth	r3, r4
 8013680:	9005      	str	r0, [sp, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013682:	4640      	mov	r0, r8
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013684:	9303      	str	r3, [sp, #12]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013686:	f7ff f8b4 	bl	80127f2 <lv_obj_get_style_pad_top>
 801368a:	4604      	mov	r4, r0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801368c:	4640      	mov	r0, r8
 801368e:	f7f1 fa12 	bl	8004ab6 <lv_obj_get_content_width>
 8013692:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013696:	9006      	str	r0, [sp, #24]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013698:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801369a:	9307      	str	r3, [sp, #28]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801369c:	f7f1 fa25 	bl	8004aea <lv_obj_get_content_height>
 80136a0:	4681      	mov	r9, r0
    lv_draw_line_dsc_init(&line_dsc);
 80136a2:	4628      	mov	r0, r5
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80136a4:	f8b8 7086 	ldrh.w	r7, [r8, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 80136a8:	f7f7 f9cc 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 80136ac:	462a      	mov	r2, r5
 80136ae:	2100      	movs	r1, #0
 80136b0:	4640      	mov	r0, r8
 80136b2:	f7f0 ff51 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 80136b6:	ee18 1a10 	vmov	r1, s16
 80136ba:	a83a      	add	r0, sp, #232	; 0xe8
 80136bc:	f7f1 f84c 	bl	8004758 <lv_obj_draw_dsc_init>
    obj_draw_dsc.part = LV_PART_MAIN;
 80136c0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80136c2:	2231      	movs	r2, #49	; 0x31
 80136c4:	4640      	mov	r0, r8
 80136c6:	9147      	str	r1, [sp, #284]	; 0x11c
    obj_draw_dsc.line_dsc = &line_dsc;
 80136c8:	953e      	str	r5, [sp, #248]	; 0xf8
 80136ca:	f7f3 fc65 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80136ce:	b2c3      	uxtb	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80136d0:	4640      	mov	r0, r8
 80136d2:	9304      	str	r3, [sp, #16]
 80136d4:	f7ff f987 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80136d8:	2233      	movs	r2, #51	; 0x33
 80136da:	2100      	movs	r1, #0
 80136dc:	4683      	mov	fp, r0
 80136de:	4640      	mov	r0, r8
 80136e0:	f7f3 fc5a 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_border_side_t)v.num;
 80136e4:	b2c6      	uxtb	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 80136e6:	4640      	mov	r0, r8
 80136e8:	f7f2 fa82 	bl	8005bf0 <lv_obj_get_scroll_left>
 80136ec:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 80136ee:	4640      	mov	r0, r8
 80136f0:	f7f2 fa28 	bl	8005b44 <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 80136f4:	f8b8 507e 	ldrh.w	r5, [r8, #126]	; 0x7e
 80136f8:	2d00      	cmp	r5, #0
 80136fa:	d16a      	bne.n	80137d2 <lv_chart_event+0x66e>
    if(chart->vdiv_cnt != 0) {
 80136fc:	f8b8 7080 	ldrh.w	r7, [r8, #128]	; 0x80
 8013700:	2f00      	cmp	r7, #0
 8013702:	f43f adf4 	beq.w	80132ee <lv_chart_event+0x18a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013706:	9b03      	ldr	r3, [sp, #12]
 8013708:	9a05      	ldr	r2, [sp, #20]
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 801370a:	f8b8 0014 	ldrh.w	r0, [r8, #20]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801370e:	4413      	add	r3, r2
 8013710:	461d      	mov	r5, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013714:	4405      	add	r5, r0
 8013716:	1aed      	subs	r5, r5, r3
 8013718:	b2ab      	uxth	r3, r5
        i_end = chart->vdiv_cnt;
 801371a:	b23d      	sxth	r5, r7
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 801371c:	9303      	str	r3, [sp, #12]
        p1.y = obj->coords.y1;
 801371e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8013722:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        p2.y = obj->coords.y2;
 8013726:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801372a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 801372e:	9b04      	ldr	r3, [sp, #16]
 8013730:	2b02      	cmp	r3, #2
 8013732:	f240 80b4 	bls.w	801389e <lv_chart_event+0x73a>
 8013736:	f1bb 0f00 	cmp.w	fp, #0
 801373a:	f340 80b0 	ble.w	801389e <lv_chart_event+0x73a>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 801373e:	f016 0404 	ands.w	r4, r6, #4
 8013742:	d006      	beq.n	8013752 <lv_chart_event+0x5ee>
 8013744:	2100      	movs	r1, #0
 8013746:	4640      	mov	r0, r8
 8013748:	f7ff f83e 	bl	80127c8 <lv_obj_get_style_pad_left>
 801374c:	fab0 f480 	clz	r4, r0
 8013750:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 8013752:	0730      	lsls	r0, r6, #28
 8013754:	d509      	bpl.n	801376a <lv_chart_event+0x606>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013756:	f241 0213 	movw	r2, #4115	; 0x1013
 801375a:	2100      	movs	r1, #0
 801375c:	4640      	mov	r0, r8
 801375e:	f7f3 fc1b 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013762:	b200      	sxth	r0, r0
 8013764:	b908      	cbnz	r0, 801376a <lv_chart_event+0x606>
 8013766:	1e7b      	subs	r3, r7, #1
 8013768:	b21d      	sxth	r5, r3
 801376a:	4627      	mov	r7, r4
            obj_draw_dsc.p1 = &p1;
 801376c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
            obj_draw_dsc.p2 = &p2;
 8013770:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013774:	e9dd 3606 	ldrd	r3, r6, [sp, #24]
 8013778:	435e      	muls	r6, r3
 801377a:	f346 260f 	sbfx	r6, r6, #8, #16
        for(i = i_start; i < i_end; i++) {
 801377e:	42ac      	cmp	r4, r5
 8013780:	f6bf adb5 	bge.w	80132ee <lv_chart_event+0x18a>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013784:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013788:	211a      	movs	r1, #26
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 801378a:	f8b8 2080 	ldrh.w	r2, [r8, #128]	; 0x80
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801378e:	4640      	mov	r0, r8
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013790:	1af3      	subs	r3, r6, r3
            obj_draw_dsc.id = i;
 8013792:	9748      	str	r7, [sp, #288]	; 0x120
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013794:	3a01      	subs	r2, #1
 8013796:	3401      	adds	r4, #1
 8013798:	437b      	muls	r3, r7
 801379a:	3701      	adds	r7, #1
 801379c:	b224      	sxth	r4, r4
 801379e:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 80137a2:	9a03      	ldr	r2, [sp, #12]
 80137a4:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 80137a6:	aa3a      	add	r2, sp, #232	; 0xe8
            p1.x += x_ofs;
 80137a8:	b21b      	sxth	r3, r3
            obj_draw_dsc.p2 = &p2;
 80137aa:	e9cd 9a41 	strd	r9, sl, [sp, #260]	; 0x104
            p1.x += x_ofs;
 80137ae:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.x = p1.x;
 80137b2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 80137b6:	f7ee f99f 	bl	8001af8 <lv_event_send>
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
 80137ba:	ab2d      	add	r3, sp, #180	; 0xb4
 80137bc:	aa20      	add	r2, sp, #128	; 0x80
 80137be:	4651      	mov	r1, sl
 80137c0:	4648      	mov	r0, r9
 80137c2:	f7f7 f94b 	bl	800aa5c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 80137c6:	aa3a      	add	r2, sp, #232	; 0xe8
 80137c8:	211b      	movs	r1, #27
 80137ca:	4640      	mov	r0, r8
 80137cc:	f7ee f994 	bl	8001af8 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 80137d0:	e7d5      	b.n	801377e <lv_chart_event+0x61a>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80137d2:	9b03      	ldr	r3, [sp, #12]
        i_end = chart->hdiv_cnt;
 80137d4:	fa0f fa85 	sxth.w	sl, r5
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80137d8:	441c      	add	r4, r3
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 80137da:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 80137de:	441c      	add	r4, r3
 80137e0:	1a20      	subs	r0, r4, r0
 80137e2:	b283      	uxth	r3, r0
 80137e4:	930a      	str	r3, [sp, #40]	; 0x28
        p1.x = obj->coords.x1;
 80137e6:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 80137ea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        p2.x = obj->coords.x2;
 80137ee:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 80137f2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 80137f6:	9b04      	ldr	r3, [sp, #16]
 80137f8:	2b02      	cmp	r3, #2
 80137fa:	d94e      	bls.n	801389a <lv_chart_event+0x736>
 80137fc:	f1bb 0f00 	cmp.w	fp, #0
 8013800:	dd4b      	ble.n	801389a <lv_chart_event+0x736>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 8013802:	f016 0402 	ands.w	r4, r6, #2
 8013806:	d006      	beq.n	8013816 <lv_chart_event+0x6b2>
 8013808:	2100      	movs	r1, #0
 801380a:	4640      	mov	r0, r8
 801380c:	f7fe fff1 	bl	80127f2 <lv_obj_get_style_pad_top>
 8013810:	fab0 f480 	clz	r4, r0
 8013814:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 8013816:	07f3      	lsls	r3, r6, #31
 8013818:	d50b      	bpl.n	8013832 <lv_chart_event+0x6ce>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801381a:	f241 0211 	movw	r2, #4113	; 0x1011
 801381e:	2100      	movs	r1, #0
 8013820:	4640      	mov	r0, r8
 8013822:	f7f3 fbb9 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013826:	b200      	sxth	r0, r0
 8013828:	b918      	cbnz	r0, 8013832 <lv_chart_event+0x6ce>
 801382a:	f105 3aff 	add.w	sl, r5, #4294967295
 801382e:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013832:	fb07 f509 	mul.w	r5, r7, r9
 8013836:	4627      	mov	r7, r4
            obj_draw_dsc.p2 = &p2;
 8013838:	f10d 0974 	add.w	r9, sp, #116	; 0x74
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801383c:	f345 230f 	sbfx	r3, r5, #8, #16
            obj_draw_dsc.p1 = &p1;
 8013840:	ad1a      	add	r5, sp, #104	; 0x68
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013842:	9308      	str	r3, [sp, #32]
        for(i = i_start; i < i_end; i++) {
 8013844:	4554      	cmp	r4, sl
 8013846:	f6bf af59 	bge.w	80136fc <lv_chart_event+0x598>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 801384a:	9a08      	ldr	r2, [sp, #32]
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801384c:	211a      	movs	r1, #26
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 801384e:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013852:	4640      	mov	r0, r8
 8013854:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013856:	1ad3      	subs	r3, r2, r3
 8013858:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
            obj_draw_dsc.id = i;
 801385c:	9748      	str	r7, [sp, #288]	; 0x120
 801385e:	b224      	sxth	r4, r4
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013860:	437b      	muls	r3, r7
 8013862:	3a01      	subs	r2, #1
 8013864:	3701      	adds	r7, #1
 8013866:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 801386a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801386c:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801386e:	aa3a      	add	r2, sp, #232	; 0xe8
            p1.y += y_ofs;
 8013870:	b21b      	sxth	r3, r3
            obj_draw_dsc.p2 = &p2;
 8013872:	e9cd 5941 	strd	r5, r9, [sp, #260]	; 0x104
            p1.y += y_ofs;
 8013876:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            p2.y = p1.y;
 801387a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801387e:	f7ee f93b 	bl	8001af8 <lv_event_send>
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
 8013882:	ab2d      	add	r3, sp, #180	; 0xb4
 8013884:	aa20      	add	r2, sp, #128	; 0x80
 8013886:	4649      	mov	r1, r9
 8013888:	4628      	mov	r0, r5
 801388a:	f7f7 f8e7 	bl	800aa5c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801388e:	aa3a      	add	r2, sp, #232	; 0xe8
 8013890:	211b      	movs	r1, #27
 8013892:	4640      	mov	r0, r8
 8013894:	f7ee f930 	bl	8001af8 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8013898:	e7d4      	b.n	8013844 <lv_chart_event+0x6e0>
        i_start = 0;
 801389a:	2400      	movs	r4, #0
 801389c:	e7c9      	b.n	8013832 <lv_chart_event+0x6ce>
        i_start = 0;
 801389e:	2400      	movs	r4, #0
 80138a0:	e763      	b.n	801376a <lv_chart_event+0x606>
        if (ser->hidden) continue;
 80138a2:	7b23      	ldrb	r3, [r4, #12]
 80138a4:	f013 0301 	ands.w	r3, r3, #1
 80138a8:	d006      	beq.n	80138b8 <lv_chart_event+0x754>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80138aa:	4621      	mov	r1, r4
 80138ac:	ee19 0a10 	vmov	r0, s18
 80138b0:	f003 fc6f 	bl	8017192 <_lv_ll_get_prev>
 80138b4:	4604      	mov	r4, r0
 80138b6:	e5e4      	b.n	8013482 <lv_chart_event+0x31e>
        line_dsc_default.color = ser->color;
 80138b8:	8922      	ldrh	r2, [r4, #8]
 80138ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80138bc:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        point_dsc_default.bg_color = ser->color;
 80138c0:	8922      	ldrh	r2, [r4, #8]
 80138c2:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 80138c6:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
 80138ca:	0711      	lsls	r1, r2, #28
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 80138cc:	7b22      	ldrb	r2, [r4, #12]
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 80138ce:	bf58      	it	pl
 80138d0:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
 80138d4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80138d8:	9307      	str	r3, [sp, #28]
        p1.x = x_ofs;
 80138da:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 80138de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 80138e0:	9807      	ldr	r0, [sp, #28]
        p1.x = x_ofs;
 80138e2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        p2.x = x_ofs;
 80138e6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 80138ea:	6863      	ldr	r3, [r4, #4]
 80138ec:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 80138f0:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 80138f4:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 80138f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138fa:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 80138fc:	1a52      	subs	r2, r2, r1
        lv_obj_draw_dsc_init(&dsc, clip_area);
 80138fe:	ee18 1a10 	vmov	r1, s16
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013902:	4343      	muls	r3, r0
        p2.y   = h - y_tmp + y_ofs;
 8013904:	9812      	ldr	r0, [sp, #72]	; 0x48
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013906:	fb93 f3f2 	sdiv	r3, r3, r2
 801390a:	4428      	add	r0, r5
 801390c:	b280      	uxth	r0, r0
        p2.y   = h - y_tmp + y_ofs;
 801390e:	1ac3      	subs	r3, r0, r3
 8013910:	900e      	str	r0, [sp, #56]	; 0x38
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013912:	a83a      	add	r0, sp, #232	; 0xe8
        p2.y   = h - y_tmp + y_ofs;
 8013914:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013918:	f7f0 ff1e 	bl	8004758 <lv_obj_draw_dsc_init>
        dsc.part = LV_PART_ITEMS;
 801391c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
        lv_coord_t y_min = p2.y;
 8013920:	f9bd 605a 	ldrsh.w	r6, [sp, #90]	; 0x5a
        lv_coord_t p_act = start_point;
 8013924:	9807      	ldr	r0, [sp, #28]
        dsc.part = LV_PART_ITEMS;
 8013926:	9347      	str	r3, [sp, #284]	; 0x11c
        dsc.line_dsc = &line_dsc_default;
 8013928:	ab20      	add	r3, sp, #128	; 0x80
        dsc.sub_part_ptr = ser;
 801392a:	944b      	str	r4, [sp, #300]	; 0x12c
        dsc.line_dsc = &line_dsc_default;
 801392c:	933e      	str	r3, [sp, #248]	; 0xf8
        dsc.rect_dsc = &point_dsc_default;
 801392e:	ab2d      	add	r3, sp, #180	; 0xb4
        lv_coord_t y_min = p2.y;
 8013930:	9604      	str	r6, [sp, #16]
        dsc.rect_dsc = &point_dsc_default;
 8013932:	933c      	str	r3, [sp, #240]	; 0xf0
        for(i = 0; i < chart->point_cnt; i++) {
 8013934:	2300      	movs	r3, #0
 8013936:	9305      	str	r3, [sp, #20]
                    point_area.x1 = p1.x - point_w;
 8013938:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801393c:	930f      	str	r3, [sp, #60]	; 0x3c
 801393e:	f8bd b014 	ldrh.w	fp, [sp, #20]
        for(i = 0; i < chart->point_cnt; i++) {
 8013942:	f8b8 5082 	ldrh.w	r5, [r8, #130]	; 0x82
 8013946:	455d      	cmp	r5, fp
 8013948:	d839      	bhi.n	80139be <lv_chart_event+0x85a>
        if(!crowded_mode && i == chart->point_cnt) {
 801394a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801394c:	9a08      	ldr	r2, [sp, #32]
 801394e:	4293      	cmp	r3, r2
 8013950:	daab      	bge.n	80138aa <lv_chart_event+0x746>
 8013952:	455d      	cmp	r5, fp
 8013954:	d1a9      	bne.n	80138aa <lv_chart_event+0x746>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013956:	6862      	ldr	r2, [r4, #4]
 8013958:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
 801395c:	454b      	cmp	r3, r9
 801395e:	d0a4      	beq.n	80138aa <lv_chart_event+0x746>
                point_area.x1 = p2.x - point_w;
 8013960:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8013964:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8013968:	1a5d      	subs	r5, r3, r1
                point_area.x2 = p2.x + point_w;
 801396a:	440b      	add	r3, r1
                point_area.y1 = p2.y - point_h;
 801396c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
                point_area.x2 = p2.x + point_w;
 8013970:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p2.y - point_h;
 8013974:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                point_area.x1 = p2.x - point_w;
 8013978:	f8ad 5074 	strh.w	r5, [sp, #116]	; 0x74
                point_area.y1 = p2.y - point_h;
 801397c:	1a5d      	subs	r5, r3, r1
                point_area.y2 = p2.y + point_h;
 801397e:	440b      	add	r3, r1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013980:	211a      	movs	r1, #26
                point_area.y2 = p2.y + point_h;
 8013982:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.id = i - 1;
 8013986:	f10b 33ff 	add.w	r3, fp, #4294967295
                point_area.y1 = p2.y - point_h;
 801398a:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
                dsc.draw_area = &point_area;
 801398e:	ad1d      	add	r5, sp, #116	; 0x74
                dsc.id = i - 1;
 8013990:	9348      	str	r3, [sp, #288]	; 0x120
                dsc.p1 = NULL;
 8013992:	2300      	movs	r3, #0
                dsc.draw_area = &point_area;
 8013994:	953b      	str	r5, [sp, #236]	; 0xec
                dsc.p2 = NULL;
 8013996:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
                dsc.value = ser->y_points[p_act];
 801399a:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801399e:	aa3a      	add	r2, sp, #232	; 0xe8
 80139a0:	4640      	mov	r0, r8
                dsc.value = ser->y_points[p_act];
 80139a2:	934a      	str	r3, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80139a4:	f7ee f8a8 	bl	8001af8 <lv_event_send>
                lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 80139a8:	aa2d      	add	r2, sp, #180	; 0xb4
 80139aa:	a91a      	add	r1, sp, #104	; 0x68
 80139ac:	4628      	mov	r0, r5
 80139ae:	f7f8 fea5 	bl	800c6fc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80139b2:	aa3a      	add	r2, sp, #232	; 0xe8
 80139b4:	211b      	movs	r1, #27
 80139b6:	4640      	mov	r0, r8
 80139b8:	f7ee f89e 	bl	8001af8 <lv_event_send>
 80139bc:	e775      	b.n	80138aa <lv_chart_event+0x746>
            p1.y = p2.y;
 80139be:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            if(p1.x > clip_area->x2 + point_w + 1) break;
 80139c2:	9f03      	ldr	r7, [sp, #12]
            p1.y = p2.y;
 80139c4:	930c      	str	r3, [sp, #48]	; 0x30
 80139c6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(p1.x > clip_area->x2 + point_w + 1) break;
 80139ca:	ee18 3a10 	vmov	r3, s16
            p1.x = p2.x;
 80139ce:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
            if(p1.x > clip_area->x2 + point_w + 1) break;
 80139d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            p1.x = p2.x;
 80139d6:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            if(p1.x > clip_area->x2 + point_w + 1) break;
 80139da:	443b      	add	r3, r7
 80139dc:	3301      	adds	r3, #1
 80139de:	429a      	cmp	r2, r3
 80139e0:	f73f af63 	bgt.w	80138aa <lv_chart_event+0x746>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 80139e4:	f8bd e014 	ldrh.w	lr, [sp, #20]
 80139e8:	1e6f      	subs	r7, r5, #1
 80139ea:	9b08      	ldr	r3, [sp, #32]
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 80139ec:	f8d4 c004 	ldr.w	ip, [r4, #4]
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 80139f0:	fb0e f303 	mul.w	r3, lr, r3
 80139f4:	fb93 f3f7 	sdiv	r3, r3, r7
 80139f8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80139fa:	443b      	add	r3, r7
 80139fc:	b29f      	uxth	r7, r3
 80139fe:	b21b      	sxth	r3, r3
 8013a00:	9713      	str	r7, [sp, #76]	; 0x4c
            p_act = (start_point + i) % chart->point_cnt;
 8013a02:	9f07      	ldr	r7, [sp, #28]
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013a04:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p_act = (start_point + i) % chart->point_cnt;
 8013a08:	4477      	add	r7, lr
 8013a0a:	fb97 faf5 	sdiv	sl, r7, r5
 8013a0e:	fb05 7a1a 	mls	sl, r5, sl, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013a12:	7b27      	ldrb	r7, [r4, #12]
 8013a14:	f3c7 1700 	ubfx	r7, r7, #4, #1
            p_act = (start_point + i) % chart->point_cnt;
 8013a18:	fa0f fa8a 	sxth.w	sl, sl
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013a1c:	eb08 0747 	add.w	r7, r8, r7, lsl #1
 8013a20:	f9b7 506c 	ldrsh.w	r5, [r7, #108]	; 0x6c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013a24:	f9b7 7070 	ldrsh.w	r7, [r7, #112]	; 0x70
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013a28:	950d      	str	r5, [sp, #52]	; 0x34
 8013a2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013a2c:	f93c 501a 	ldrsh.w	r5, [ip, sl, lsl #1]
 8013a30:	1a6d      	subs	r5, r5, r1
 8013a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a34:	434d      	muls	r5, r1
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013a36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013a38:	1a7f      	subs	r7, r7, r1
            p2.y  = h - y_tmp + y_ofs;
 8013a3a:	990e      	ldr	r1, [sp, #56]	; 0x38
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013a3c:	fb95 f5f7 	sdiv	r5, r5, r7
            p2.y  = h - y_tmp + y_ofs;
 8013a40:	1b4d      	subs	r5, r1, r5
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013a42:	ee18 1a10 	vmov	r1, s16
 8013a46:	f9b1 7000 	ldrsh.w	r7, [r1]
            p2.y  = h - y_tmp + y_ofs;
 8013a4a:	b22d      	sxth	r5, r5
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013a4c:	9903      	ldr	r1, [sp, #12]
            p2.y  = h - y_tmp + y_ofs;
 8013a4e:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013a52:	1a7f      	subs	r7, r7, r1
 8013a54:	3f01      	subs	r7, #1
 8013a56:	42bb      	cmp	r3, r7
 8013a58:	db37      	blt.n	8013aca <lv_chart_event+0x966>
            if(i != 0) {
 8013a5a:	f1bb 0f00 	cmp.w	fp, #0
 8013a5e:	d034      	beq.n	8013aca <lv_chart_event+0x966>
                if(crowded_mode) {
 8013a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a62:	0047      	lsls	r7, r0, #1
 8013a64:	468b      	mov	fp, r1
 8013a66:	9908      	ldr	r1, [sp, #32]
 8013a68:	458b      	cmp	fp, r1
 8013a6a:	db33      	blt.n	8013ad4 <lv_chart_event+0x970>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013a6c:	f93c 1010 	ldrsh.w	r1, [ip, r0, lsl #1]
 8013a70:	4549      	cmp	r1, r9
 8013a72:	d02a      	beq.n	8013aca <lv_chart_event+0x966>
 8013a74:	f93c 101a 	ldrsh.w	r1, [ip, sl, lsl #1]
 8013a78:	4549      	cmp	r1, r9
 8013a7a:	d026      	beq.n	8013aca <lv_chart_event+0x966>
                        y_min = LV_MIN(y_min, p2.y);
 8013a7c:	9904      	ldr	r1, [sp, #16]
                        y_max = LV_MAX(y_max, p2.y);
 8013a7e:	42ae      	cmp	r6, r5
 8013a80:	bfb8      	it	lt
 8013a82:	462e      	movlt	r6, r5
                        y_min = LV_MIN(y_min, p2.y);
 8013a84:	42a9      	cmp	r1, r5
 8013a86:	bfa8      	it	ge
 8013a88:	4629      	movge	r1, r5
                        if(p1.x != p2.x) {
 8013a8a:	429a      	cmp	r2, r3
                        y_min = LV_MIN(y_min, p2.y);
 8013a8c:	9104      	str	r1, [sp, #16]
                        if(p1.x != p2.x) {
 8013a8e:	d01c      	beq.n	8013aca <lv_chart_event+0x966>
                            p2.x--;         /*It's already on the next x value*/
 8013a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013a92:	428e      	cmp	r6, r1
                            p1.y = y_min;
 8013a94:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013a98:	aa1a      	add	r2, sp, #104	; 0x68
                            p2.x--;         /*It's already on the next x value*/
 8013a9a:	f103 3bff 	add.w	fp, r3, #4294967295
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013a9e:	bf08      	it	eq
 8013aa0:	3601      	addeq	r6, #1
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013aa2:	ab20      	add	r3, sp, #128	; 0x80
 8013aa4:	a916      	add	r1, sp, #88	; 0x58
                            p2.x--;         /*It's already on the next x value*/
 8013aa6:	fa0f fb8b 	sxth.w	fp, fp
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013aaa:	a815      	add	r0, sp, #84	; 0x54
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013aac:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                            y_max = y_cur;
 8013ab0:	462e      	mov	r6, r5
                            p2.x--;         /*It's already on the next x value*/
 8013ab2:	f8ad b058 	strh.w	fp, [sp, #88]	; 0x58
                            p1.x = p2.x;
 8013ab6:	f8ad b054 	strh.w	fp, [sp, #84]	; 0x54
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013aba:	f7f6 ffcf 	bl	800aa5c <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 8013abe:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 8013ac2:	9504      	str	r5, [sp, #16]
                            p2.x++;         /*Compensate the previous x--*/
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        for(i = 0; i < chart->point_cnt; i++) {
 8013aca:	9b05      	ldr	r3, [sp, #20]
            p_act = (start_point + i) % chart->point_cnt;
 8013acc:	4650      	mov	r0, sl
 8013ace:	3301      	adds	r3, #1
 8013ad0:	9305      	str	r3, [sp, #20]
 8013ad2:	e734      	b.n	801393e <lv_chart_event+0x7da>
                    point_area.x1 = p1.x - point_w;
 8013ad4:	b292      	uxth	r2, r2
 8013ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    point_area.y1 = p1.y - point_h;
 8013ad8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
                    point_area.x1 = p1.x - point_w;
 8013adc:	1ad3      	subs	r3, r2, r3
 8013ade:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    point_area.x2 = p1.x + point_w;
 8013ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ae4:	441a      	add	r2, r3
                    point_area.y1 = p1.y - point_h;
 8013ae6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
                    point_area.x2 = p1.x + point_w;
 8013aea:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
                    point_area.y1 = p1.y - point_h;
 8013aee:	1aca      	subs	r2, r1, r3
                    point_area.y2 = p1.y + point_h;
 8013af0:	4419      	add	r1, r3
                    dsc.id = i - 1;
 8013af2:	f10e 33ff 	add.w	r3, lr, #4294967295
                    point_area.y1 = p1.y - point_h;
 8013af6:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
                    point_area.y2 = p1.y + point_h;
 8013afa:	f8ad 107a 	strh.w	r1, [sp, #122]	; 0x7a
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013afe:	f647 71ff 	movw	r1, #32767	; 0x7fff
                    dsc.id = i - 1;
 8013b02:	9348      	str	r3, [sp, #288]	; 0x120
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8013b04:	f93c 3010 	ldrsh.w	r3, [ip, r0, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b08:	4640      	mov	r0, r8
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8013b0a:	454b      	cmp	r3, r9
 8013b0c:	bf0c      	ite	eq
 8013b0e:	2200      	moveq	r2, #0
 8013b10:	aa15      	addne	r2, sp, #84	; 0x54
 8013b12:	9241      	str	r2, [sp, #260]	; 0x104
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013b14:	f93c 201a 	ldrsh.w	r2, [ip, sl, lsl #1]
                    dsc.value = ser->y_points[p_prev];
 8013b18:	934a      	str	r3, [sp, #296]	; 0x128
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013b1a:	428a      	cmp	r2, r1
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b1c:	f04f 011a 	mov.w	r1, #26
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8013b20:	bf0c      	ite	eq
 8013b22:	2200      	moveq	r2, #0
 8013b24:	aa16      	addne	r2, sp, #88	; 0x58
 8013b26:	9242      	str	r2, [sp, #264]	; 0x108
                    dsc.draw_area = &point_area;
 8013b28:	aa1d      	add	r2, sp, #116	; 0x74
 8013b2a:	923b      	str	r2, [sp, #236]	; 0xec
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b2c:	aa3a      	add	r2, sp, #232	; 0xe8
 8013b2e:	f7ed ffe3 	bl	8001af8 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013b32:	6863      	ldr	r3, [r4, #4]
 8013b34:	5fda      	ldrsh	r2, [r3, r7]
 8013b36:	454a      	cmp	r2, r9
 8013b38:	d009      	beq.n	8013b4e <lv_chart_event+0x9ea>
 8013b3a:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 8013b3e:	454b      	cmp	r3, r9
 8013b40:	d005      	beq.n	8013b4e <lv_chart_event+0x9ea>
                        lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013b42:	ab20      	add	r3, sp, #128	; 0x80
 8013b44:	aa1a      	add	r2, sp, #104	; 0x68
 8013b46:	a916      	add	r1, sp, #88	; 0x58
 8013b48:	a815      	add	r0, sp, #84	; 0x54
 8013b4a:	f7f6 ff87 	bl	800aa5c <lv_draw_line>
                    if(point_w && point_h && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013b4e:	9b03      	ldr	r3, [sp, #12]
 8013b50:	b15b      	cbz	r3, 8013b6a <lv_chart_event+0xa06>
 8013b52:	9b06      	ldr	r3, [sp, #24]
 8013b54:	b14b      	cbz	r3, 8013b6a <lv_chart_event+0xa06>
 8013b56:	6863      	ldr	r3, [r4, #4]
 8013b58:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 8013b5c:	454b      	cmp	r3, r9
 8013b5e:	d004      	beq.n	8013b6a <lv_chart_event+0xa06>
                        lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8013b60:	aa2d      	add	r2, sp, #180	; 0xb4
 8013b62:	a91a      	add	r1, sp, #104	; 0x68
 8013b64:	a81d      	add	r0, sp, #116	; 0x74
 8013b66:	f7f8 fdc9 	bl	800c6fc <lv_draw_rect>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013b6a:	aa3a      	add	r2, sp, #232	; 0xe8
 8013b6c:	211b      	movs	r1, #27
 8013b6e:	4640      	mov	r0, r8
 8013b70:	f7ed ffc2 	bl	8001af8 <lv_event_send>
 8013b74:	e7a9      	b.n	8013aca <lv_chart_event+0x966>
        else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, clip_area);
 8013b76:	2b02      	cmp	r3, #2
 8013b78:	f040 8124 	bne.w	8013dc4 <lv_chart_event+0xc60>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 8013b7c:	ee18 2a10 	vmov	r2, s16
 8013b80:	ee18 1a90 	vmov	r1, s17
 8013b84:	a81a      	add	r0, sp, #104	; 0x68
 8013b86:	f002 ffae 	bl	8016ae6 <_lv_area_intersect>
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	f43f ac7c 	beq.w	8013488 <lv_chart_event+0x324>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013b90:	2100      	movs	r1, #0
 8013b92:	4640      	mov	r0, r8
 8013b94:	f7fe fe18 	bl	80127c8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013b98:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013b9a:	9007      	str	r0, [sp, #28]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013b9c:	4640      	mov	r0, r8
 8013b9e:	f7fe fe28 	bl	80127f2 <lv_obj_get_style_pad_top>
 8013ba2:	9008      	str	r0, [sp, #32]
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013ba4:	4640      	mov	r0, r8
 8013ba6:	f7f0 ff86 	bl	8004ab6 <lv_obj_get_content_width>
 8013baa:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013bac:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013bae:	f8b8 b084 	ldrh.w	fp, [r8, #132]	; 0x84
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013bb2:	f7f0 ff9a 	bl	8004aea <lv_obj_get_content_height>
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013bb6:	f108 0324 	add.w	r3, r8, #36	; 0x24
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013bba:	4681      	mov	r9, r0
 8013bbc:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	ee09 3a10 	vmov	s18, r3
 8013bc6:	f003 fae7 	bl	8017198 <_lv_ll_get_len>
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013bca:	2100      	movs	r1, #0
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013bcc:	9005      	str	r0, [sp, #20]
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013bce:	4640      	mov	r0, r8
 8013bd0:	f7fe fe08 	bl	80127e4 <lv_obj_get_style_pad_column>
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013bd4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013bd8:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013bda:	4640      	mov	r0, r8
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013bdc:	f8b8 4084 	ldrh.w	r4, [r8, #132]	; 0x84
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013be0:	f8b8 a082 	ldrh.w	sl, [r8, #130]	; 0x82
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013be4:	f7fe fdfe 	bl	80127e4 <lv_obj_get_style_pad_column>
 8013be8:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013bec:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8013bee:	4640      	mov	r0, r8
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013bf0:	9306      	str	r3, [sp, #24]
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8013bf2:	f7f1 fffd 	bl	8005bf0 <lv_obj_get_scroll_left>
 8013bf6:	4607      	mov	r7, r0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 8013bf8:	4640      	mov	r0, r8
 8013bfa:	f7f1 ffa3 	bl	8005b44 <lv_obj_get_scroll_top>
 8013bfe:	4606      	mov	r6, r0
    lv_draw_rect_dsc_init(&col_dsc);
 8013c00:	a82d      	add	r0, sp, #180	; 0xb4
 8013c02:	f7f8 fd59 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 8013c06:	aa2d      	add	r2, sp, #180	; 0xb4
 8013c08:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013c0c:	4640      	mov	r0, r8
 8013c0e:	f7f0 fabf 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_opa = LV_OPA_COVER;
 8013c12:	f8bd 20be 	ldrh.w	r2, [sp, #190]	; 0xbe
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8013c16:	f8bd 10b4 	ldrh.w	r1, [sp, #180]	; 0xb4
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013c1a:	a820      	add	r0, sp, #128	; 0x80
    col_dsc.bg_opa = LV_OPA_COVER;
 8013c1c:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8013c20:	f022 0207 	bic.w	r2, r2, #7
 8013c24:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8013c28:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8013c2c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8013c30:	440a      	add	r2, r1
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013c32:	ee18 1a90 	vmov	r1, s17
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8013c36:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013c3a:	ee18 2a10 	vmov	r2, s16
 8013c3e:	f002 ff52 	bl	8016ae6 <_lv_area_intersect>
    if(mask_ret == false) return;
 8013c42:	2800      	cmp	r0, #0
 8013c44:	f43f ac20 	beq.w	8013488 <lv_chart_event+0x324>
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013c48:	fb05 f509 	mul.w	r5, r5, r9
    lv_obj_draw_dsc_init(&dsc, &series_mask);
 8013c4c:	a920      	add	r1, sp, #128	; 0x80
 8013c4e:	a83a      	add	r0, sp, #232	; 0xe8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013c50:	122b      	asrs	r3, r5, #8
 8013c52:	9303      	str	r3, [sp, #12]
 8013c54:	f345 230f 	sbfx	r3, r5, #8, #16
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013c58:	9d06      	ldr	r5, [sp, #24]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013c5a:	9304      	str	r3, [sp, #16]
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5e:	435c      	muls	r4, r3
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c62:	fb0b fb03 	mul.w	fp, fp, r3
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013c66:	1224      	asrs	r4, r4, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013c68:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013c6c:	f34b 2b0f 	sbfx	fp, fp, #8, #16
 8013c70:	fb04 b313 	mls	r3, r4, r3, fp
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8013c74:	44a3      	add	fp, r4
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013c76:	fb93 fafa 	sdiv	sl, r3, sl
    lv_coord_t col_w = block_w / ser_cnt;
 8013c7a:	9b05      	ldr	r3, [sp, #20]
 8013c7c:	fa0f fa8a 	sxth.w	sl, sl
 8013c80:	fbba f3f3 	udiv	r3, sl, r3
 8013c84:	9305      	str	r3, [sp, #20]
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c88:	435d      	muls	r5, r3
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8013c8a:	9b07      	ldr	r3, [sp, #28]
 8013c8c:	1bdf      	subs	r7, r3, r7
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013c8e:	122d      	asrs	r5, r5, #8
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8013c90:	b2bb      	uxth	r3, r7
 8013c92:	9306      	str	r3, [sp, #24]
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 8013c94:	9b08      	ldr	r3, [sp, #32]
 8013c96:	1b9e      	subs	r6, r3, r6
 8013c98:	b2b3      	uxth	r3, r6
    for(i = 0; i < chart->point_cnt; i++) {
 8013c9a:	2600      	movs	r6, #0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 8013c9c:	9307      	str	r3, [sp, #28]
    lv_obj_draw_dsc_init(&dsc, &series_mask);
 8013c9e:	f7f0 fd5b 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 8013ca2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8013ca6:	9347      	str	r3, [sp, #284]	; 0x11c
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8013ca8:	43eb      	mvns	r3, r5
 8013caa:	9308      	str	r3, [sp, #32]
    for(i = 0; i < chart->point_cnt; i++) {
 8013cac:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8013cb0:	b2b2      	uxth	r2, r6
 8013cb2:	4293      	cmp	r3, r2
 8013cb4:	f67f abe8 	bls.w	8013488 <lv_chart_event+0x324>
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8013cb8:	b2b7      	uxth	r7, r6
 8013cba:	9a06      	ldr	r2, [sp, #24]
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013cbc:	ee19 0a10 	vmov	r0, s18
                dsc.draw_area = &col_a;
 8013cc0:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8013cc4:	fb07 f90b 	mul.w	r9, r7, fp
 8013cc8:	fb99 f9f3 	sdiv	r9, r9, r3
 8013ccc:	f8b8 3014 	ldrh.w	r3, [r8, #20]
        dsc.id = i;
 8013cd0:	9748      	str	r7, [sp, #288]	; 0x120
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8013cd2:	4413      	add	r3, r2
 8013cd4:	4499      	add	r9, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013cd6:	f003 fa55 	bl	8017184 <_lv_ll_get_tail>
 8013cda:	4604      	mov	r4, r0
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8013cdc:	fa0f f989 	sxth.w	r9, r9
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013ce0:	b1fc      	cbz	r4, 8013d22 <lv_chart_event+0xbbe>
            if (ser->hidden) continue;
 8013ce2:	7b23      	ldrb	r3, [r4, #12]
 8013ce4:	f013 0301 	ands.w	r3, r3, #1
 8013ce8:	d16a      	bne.n	8013dc0 <lv_chart_event+0xc5c>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013cea:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
            if(col_a.x2 < series_mask.x1) continue;
 8013cee:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013cf2:	0712      	lsls	r2, r2, #28
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8013cf4:	9a05      	ldr	r2, [sp, #20]
 8013cf6:	eb09 0502 	add.w	r5, r9, r2
 8013cfa:	9a08      	ldr	r2, [sp, #32]
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013cfc:	bf58      	it	pl
 8013cfe:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8013d02:	fa12 f285 	uxtah	r2, r2, r5
            col_a.x1 = x_act;
 8013d06:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
            x_act += col_w;
 8013d0a:	b22d      	sxth	r5, r5
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8013d0c:	b212      	sxth	r2, r2
            if(col_a.x2 < series_mask.x1) continue;
 8013d0e:	4291      	cmp	r1, r2
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8013d10:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            if(col_a.x2 < series_mask.x1) continue;
 8013d14:	dc4c      	bgt.n	8013db0 <lv_chart_event+0xc4c>
            if(col_a.x1 > series_mask.x2) break;
 8013d16:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 8013d1a:	f8b8 2082 	ldrh.w	r2, [r8, #130]	; 0x82
 8013d1e:	4549      	cmp	r1, r9
 8013d20:	da01      	bge.n	8013d26 <lv_chart_event+0xbc2>
    for(i = 0; i < chart->point_cnt; i++) {
 8013d22:	3601      	adds	r6, #1
 8013d24:	e7c2      	b.n	8013cac <lv_chart_event+0xb48>
            col_dsc.bg_color = ser->color;
 8013d26:	8921      	ldrh	r1, [r4, #8]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 8013d28:	443b      	add	r3, r7
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013d2a:	7b20      	ldrb	r0, [r4, #12]
            col_dsc.bg_color = ser->color;
 8013d2c:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013d30:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8013d34:	f8d4 c004 	ldr.w	ip, [r4, #4]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 8013d38:	fb93 f1f2 	sdiv	r1, r3, r2
 8013d3c:	fb02 3111 	mls	r1, r2, r1, r3
 8013d40:	eb08 0040 	add.w	r0, r8, r0, lsl #1
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013d44:	9b04      	ldr	r3, [sp, #16]
 8013d46:	b209      	sxth	r1, r1
 8013d48:	f9b0 e06c 	ldrsh.w	lr, [r0, #108]	; 0x6c
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013d4c:	f9b0 0070 	ldrsh.w	r0, [r0, #112]	; 0x70
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013d50:	f93c 2011 	ldrsh.w	r2, [ip, r1, lsl #1]
 8013d54:	eba2 020e 	sub.w	r2, r2, lr
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013d58:	eba0 0e0e 	sub.w	lr, r0, lr
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013d5c:	fb03 f902 	mul.w	r9, r3, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8013d60:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8013d64:	9a07      	ldr	r2, [sp, #28]
 8013d66:	4413      	add	r3, r2
 8013d68:	9a03      	ldr	r2, [sp, #12]
 8013d6a:	4413      	add	r3, r2
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013d6c:	fb99 f2fe 	sdiv	r2, r9, lr
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8013d70:	1a9b      	subs	r3, r3, r2
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013d72:	f647 72ff 	movw	r2, #32767	; 0x7fff
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8013d76:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013d7a:	f93c 3011 	ldrsh.w	r3, [ip, r1, lsl #1]
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d016      	beq.n	8013db0 <lv_chart_event+0xc4c>
                dsc.rect_dsc = &col_dsc;
 8013d82:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013d86:	aa3a      	add	r2, sp, #232	; 0xe8
 8013d88:	211a      	movs	r1, #26
 8013d8a:	4640      	mov	r0, r8
                dsc.draw_area = &col_a;
 8013d8c:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
                dsc.rect_dsc = &col_dsc;
 8013d90:	f8cd 90f0 	str.w	r9, [sp, #240]	; 0xf0
                dsc.value = ser->y_points[p_act];
 8013d94:	e9cd 344a 	strd	r3, r4, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013d98:	f7ed feae 	bl	8001af8 <lv_event_send>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
 8013d9c:	464a      	mov	r2, r9
 8013d9e:	a920      	add	r1, sp, #128	; 0x80
 8013da0:	4650      	mov	r0, sl
 8013da2:	f7f8 fcab 	bl	800c6fc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013da6:	aa3a      	add	r2, sp, #232	; 0xe8
 8013da8:	211b      	movs	r1, #27
 8013daa:	4640      	mov	r0, r8
 8013dac:	f7ed fea4 	bl	8001af8 <lv_event_send>
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013db0:	4621      	mov	r1, r4
 8013db2:	ee19 0a10 	vmov	r0, s18
 8013db6:	f003 f9ec 	bl	8017192 <_lv_ll_get_prev>
 8013dba:	46a9      	mov	r9, r5
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	e78f      	b.n	8013ce0 <lv_chart_event+0xb7c>
 8013dc0:	464d      	mov	r5, r9
 8013dc2:	e7f5      	b.n	8013db0 <lv_chart_event+0xc4c>
        else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, clip_area);
 8013dc4:	2b03      	cmp	r3, #3
 8013dc6:	f47f ab5f 	bne.w	8013488 <lv_chart_event+0x324>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 8013dca:	ee18 2a10 	vmov	r2, s16
 8013dce:	ee18 1a90 	vmov	r1, s17
 8013dd2:	a818      	add	r0, sp, #96	; 0x60
 8013dd4:	f002 fe87 	bl	8016ae6 <_lv_area_intersect>
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	f43f ab55 	beq.w	8013488 <lv_chart_event+0x324>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013dde:	4640      	mov	r0, r8
 8013de0:	f7fe fe01 	bl	80129e6 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013de4:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013de6:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013de8:	4640      	mov	r0, r8
 8013dea:	f7fe fced 	bl	80127c8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013dee:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8013df0:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013df2:	4640      	mov	r0, r8
 8013df4:	f7fe fcfd 	bl	80127f2 <lv_obj_get_style_pad_top>
 8013df8:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013dfa:	4640      	mov	r0, r8
 8013dfc:	f7f0 fe5b 	bl	8004ab6 <lv_obj_get_content_width>
 8013e00:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013e04:	4681      	mov	r9, r0
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013e06:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013e08:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013e0a:	f7f0 fe6e 	bl	8004aea <lv_obj_get_content_height>
 8013e0e:	4607      	mov	r7, r0
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013e10:	4640      	mov	r0, r8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013e12:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013e16:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 8013e1a:	f7f1 fee9 	bl	8005bf0 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8013e1e:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013e22:	9008      	str	r0, [sp, #32]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8013e24:	4640      	mov	r0, r8
 8013e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e28:	f7f1 fe8c 	bl	8005b44 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013e2c:	ee18 2a10 	vmov	r2, s16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8013e30:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013e32:	ee18 1a90 	vmov	r1, s17
 8013e36:	a81a      	add	r0, sp, #104	; 0x68
 8013e38:	f002 fe55 	bl	8016ae6 <_lv_area_intersect>
    if(mask_ret == false) return;
 8013e3c:	2800      	cmp	r0, #0
 8013e3e:	f43f ab23 	beq.w	8013488 <lv_chart_event+0x324>
    lv_draw_line_dsc_init(&line_dsc_default);
 8013e42:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013e44:	437e      	muls	r6, r7
    lv_draw_line_dsc_init(&line_dsc_default);
 8013e46:	f7f6 fdfd 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 8013e4a:	aa20      	add	r2, sp, #128	; 0x80
 8013e4c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8013e50:	4640      	mov	r0, r8
 8013e52:	f7f0 fb81 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 8013e56:	a82d      	add	r0, sp, #180	; 0xb4
 8013e58:	f7f8 fc2e 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 8013e5c:	aa2d      	add	r2, sp, #180	; 0xb4
 8013e5e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013e62:	4640      	mov	r0, r8
 8013e64:	f7f0 f994 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8013e68:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8013e6c:	4640      	mov	r0, r8
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013e6e:	fa15 f584 	uxtah	r5, r5, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8013e72:	f7fe fcb0 	bl	80127d6 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8013e76:	f241 0204 	movw	r2, #4100	; 0x1004
 8013e7a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8013e7e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013e82:	44ab      	add	fp, r5
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8013e84:	f340 034f 	sbfx	r3, r0, #1, #16
 8013e88:	4640      	mov	r0, r8
 8013e8a:	9303      	str	r3, [sp, #12]
 8013e8c:	f7f3 f884 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8013e90:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8013e94:	fa03 f080 	sxtah	r0, r3, r0
 8013e98:	1043      	asrs	r3, r0, #1
 8013e9a:	9304      	str	r3, [sp, #16]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 8013e9c:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 8013ea0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8013ea4:	428a      	cmp	r2, r1
 8013ea6:	bfa8      	it	ge
 8013ea8:	460a      	movge	r2, r1
 8013eaa:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8013eae:	b212      	sxth	r2, r2
 8013eb0:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 8013eb4:	bfc2      	ittt	gt
 8013eb6:	f89d 2089 	ldrbgt.w	r2, [sp, #137]	; 0x89
 8013eba:	f042 0210 	orrgt.w	r2, r2, #16
 8013ebe:	f88d 2089 	strbgt.w	r2, [sp, #137]	; 0x89
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	bf02      	ittt	eq
 8013ec6:	f89d 3089 	ldrbeq.w	r3, [sp, #137]	; 0x89
 8013eca:	f043 0310 	orreq.w	r3, r3, #16
 8013ece:	f88d 3089 	strbeq.w	r3, [sp, #137]	; 0x89
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013ed2:	9b05      	ldr	r3, [sp, #20]
 8013ed4:	fb03 f309 	mul.w	r3, r3, r9
 8013ed8:	f343 230f 	sbfx	r3, r3, #8, #16
 8013edc:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013ede:	1233      	asrs	r3, r6, #8
 8013ee0:	9306      	str	r3, [sp, #24]
 8013ee2:	f346 230f 	sbfx	r3, r6, #8, #16
 8013ee6:	9307      	str	r3, [sp, #28]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013ee8:	9b08      	ldr	r3, [sp, #32]
 8013eea:	ebab 0b03 	sub.w	fp, fp, r3
 8013eee:	fa1f f38b 	uxth.w	r3, fp
 8013ef2:	9308      	str	r3, [sp, #32]
 8013ef4:	fa0f f38b 	sxth.w	r3, fp
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013ef8:	f647 7bff 	movw	fp, #32767	; 0x7fff
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8013efc:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8013efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f00:	fa13 f484 	uxtah	r4, r3, r4
 8013f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f06:	441c      	add	r4, r3
 8013f08:	eba4 0a0a 	sub.w	sl, r4, sl
 8013f0c:	fa1f f38a 	uxth.w	r3, sl
 8013f10:	930a      	str	r3, [sp, #40]	; 0x28
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013f12:	f108 0324 	add.w	r3, r8, #36	; 0x24
 8013f16:	4618      	mov	r0, r3
 8013f18:	ee09 3a10 	vmov	s18, r3
 8013f1c:	f003 f932 	bl	8017184 <_lv_ll_get_tail>
 8013f20:	4604      	mov	r4, r0
 8013f22:	2c00      	cmp	r4, #0
 8013f24:	f43f aab0 	beq.w	8013488 <lv_chart_event+0x324>
        if (ser->hidden) continue;
 8013f28:	7b25      	ldrb	r5, [r4, #12]
 8013f2a:	f015 0501 	ands.w	r5, r5, #1
 8013f2e:	d006      	beq.n	8013f3e <lv_chart_event+0xdda>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013f30:	4621      	mov	r1, r4
 8013f32:	ee19 0a10 	vmov	r0, s18
 8013f36:	f003 f92c 	bl	8017192 <_lv_ll_get_prev>
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	e7f1      	b.n	8013f22 <lv_chart_event+0xdbe>
        line_dsc_default.color = ser->color;
 8013f3e:	8923      	ldrh	r3, [r4, #8]
 8013f40:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        point_dsc_default.bg_color = ser->color;
 8013f44:	8923      	ldrh	r3, [r4, #8]
 8013f46:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013f4a:	f898 3088 	ldrb.w	r3, [r8, #136]	; 0x88
 8013f4e:	071e      	lsls	r6, r3, #28
        p1.x = x_ofs;
 8013f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013f52:	bf58      	it	pl
 8013f54:	f9b4 500a 	ldrshpl.w	r5, [r4, #10]
        p1.x = x_ofs;
 8013f58:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        p2.x = x_ofs;
 8013f5c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 8013f60:	6863      	ldr	r3, [r4, #4]
 8013f62:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 8013f66:	2b0a      	cmp	r3, #10
 8013f68:	d079      	beq.n	801405e <lv_chart_event+0xefa>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8013f6a:	7b23      	ldrb	r3, [r4, #12]
 8013f6c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8013f70:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8013f74:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 8013f78:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 8013f7c:	6823      	ldr	r3, [r4, #0]
 8013f7e:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 8013f82:	9b05      	ldr	r3, [sp, #20]
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	2300      	movs	r3, #0
 8013f88:	f003 f9cd 	bl	8017326 <lv_map>
            p2.x += x_ofs;
 8013f8c:	9b08      	ldr	r3, [sp, #32]
 8013f8e:	4418      	add	r0, r3
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 8013f90:	7b23      	ldrb	r3, [r4, #12]
 8013f92:	f3c3 1300 	ubfx	r3, r3, #4, #1
            p2.x += x_ofs;
 8013f96:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 8013f9a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8013f9e:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 8013fa2:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 8013fa6:	6863      	ldr	r3, [r4, #4]
 8013fa8:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 8013fac:	9b07      	ldr	r3, [sp, #28]
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	f003 f9b8 	bl	8017326 <lv_map>
            p2.y += y_ofs;
 8013fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fb8:	9a06      	ldr	r2, [sp, #24]
 8013fba:	4413      	add	r3, r2
 8013fbc:	1a18      	subs	r0, r3, r0
 8013fbe:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013fc2:	ee18 1a10 	vmov	r1, s16
 8013fc6:	a83a      	add	r0, sp, #232	; 0xe8
 8013fc8:	f7f0 fbc6 	bl	8004758 <lv_obj_draw_dsc_init>
        dsc.part = LV_PART_ITEMS;
 8013fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
                p2.y += y_ofs;
 8013fd0:	9a06      	ldr	r2, [sp, #24]
        lv_coord_t p_act = start_point;
 8013fd2:	46aa      	mov	sl, r5
        dsc.part = LV_PART_ITEMS;
 8013fd4:	9347      	str	r3, [sp, #284]	; 0x11c
        dsc.line_dsc = &line_dsc_default;
 8013fd6:	ab20      	add	r3, sp, #128	; 0x80
        for(i = 0; i < chart->point_cnt; i++) {
 8013fd8:	2600      	movs	r6, #0
        dsc.sub_part_ptr = ser;
 8013fda:	944b      	str	r4, [sp, #300]	; 0x12c
        dsc.line_dsc = &line_dsc_default;
 8013fdc:	933e      	str	r3, [sp, #248]	; 0xf8
        dsc.rect_dsc = &point_dsc_default;
 8013fde:	ab2d      	add	r3, sp, #180	; 0xb4
 8013fe0:	933c      	str	r3, [sp, #240]	; 0xf0
                p2.y += y_ofs;
 8013fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fe4:	4413      	add	r3, r2
 8013fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8013fe8:	fa1f f986 	uxth.w	r9, r6
        for(i = 0; i < chart->point_cnt; i++) {
 8013fec:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8013ff0:	4599      	cmp	r9, r3
 8013ff2:	d338      	bcc.n	8014066 <lv_chart_event+0xf02>
        if(i == chart->point_cnt) {
 8013ff4:	d19c      	bne.n	8013f30 <lv_chart_event+0xdcc>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013ff6:	6862      	ldr	r2, [r4, #4]
 8013ff8:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
 8013ffc:	455b      	cmp	r3, fp
 8013ffe:	d097      	beq.n	8013f30 <lv_chart_event+0xdcc>
                point_area.x1 = p2.x - point_w;
 8014000:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                dsc.draw_area = &point_area;
 8014004:	ad1d      	add	r5, sp, #116	; 0x74
                point_area.x1 = p2.x - point_w;
 8014006:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                dsc.id = i - 1;
 801400a:	f109 36ff 	add.w	r6, r9, #4294967295
                dsc.draw_area = &point_area;
 801400e:	953b      	str	r5, [sp, #236]	; 0xec
                point_area.x1 = p2.x - point_w;
 8014010:	1a58      	subs	r0, r3, r1
                point_area.x2 = p2.x + point_w;
 8014012:	440b      	add	r3, r1
                point_area.y1 = p2.y - point_h;
 8014014:	f8bd 1010 	ldrh.w	r1, [sp, #16]
                point_area.x2 = p2.x + point_w;
 8014018:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p2.y - point_h;
 801401c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                point_area.x1 = p2.x - point_w;
 8014020:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
                point_area.y1 = p2.y - point_h;
 8014024:	1a58      	subs	r0, r3, r1
                point_area.y2 = p2.y + point_h;
 8014026:	440b      	add	r3, r1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014028:	211a      	movs	r1, #26
                dsc.id = i - 1;
 801402a:	9648      	str	r6, [sp, #288]	; 0x120
                point_area.y2 = p2.y + point_h;
 801402c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.p1 = NULL;
 8014030:	2300      	movs	r3, #0
                point_area.y1 = p2.y - point_h;
 8014032:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014036:	4640      	mov	r0, r8
                dsc.p2 = NULL;
 8014038:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
                dsc.value = ser->y_points[p_act];
 801403c:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014040:	aa3a      	add	r2, sp, #232	; 0xe8
                dsc.value = ser->y_points[p_act];
 8014042:	934a      	str	r3, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014044:	f7ed fd58 	bl	8001af8 <lv_event_send>
                lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014048:	aa2d      	add	r2, sp, #180	; 0xb4
 801404a:	a91a      	add	r1, sp, #104	; 0x68
 801404c:	4628      	mov	r0, r5
 801404e:	f7f8 fb55 	bl	800c6fc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8014052:	aa3a      	add	r2, sp, #232	; 0xe8
 8014054:	211b      	movs	r1, #27
 8014056:	4640      	mov	r0, r8
 8014058:	f7ed fd4e 	bl	8001af8 <lv_event_send>
 801405c:	e768      	b.n	8013f30 <lv_chart_event+0xdcc>
            p2.x = LV_COORD_MIN;
 801405e:	f04f 23a0 	mov.w	r3, #2684395520	; 0xa000a000
 8014062:	9316      	str	r3, [sp, #88]	; 0x58
 8014064:	e7ad      	b.n	8013fc2 <lv_chart_event+0xe5e>
            p1.x = p2.x;
 8014066:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014068:	9215      	str	r2, [sp, #84]	; 0x54
            p_act = (start_point + i) % chart->point_cnt;
 801406a:	b2b2      	uxth	r2, r6
 801406c:	920b      	str	r2, [sp, #44]	; 0x2c
 801406e:	fa15 f286 	uxtah	r2, r5, r6
 8014072:	fb92 f7f3 	sdiv	r7, r2, r3
 8014076:	fb03 2717 	mls	r7, r3, r7, r2
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801407a:	6863      	ldr	r3, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 801407c:	b23f      	sxth	r7, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801407e:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 8014082:	4558      	cmp	r0, fp
 8014084:	d079      	beq.n	801417a <lv_chart_event+0x1016>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 8014086:	7b23      	ldrb	r3, [r4, #12]
 8014088:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801408c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8014090:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 8014094:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 8014098:	9b07      	ldr	r3, [sp, #28]
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	2300      	movs	r3, #0
 801409e:	f003 f942 	bl	8017326 <lv_map>
                p2.y += y_ofs;
 80140a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140a4:	1a18      	subs	r0, r3, r0
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80140a6:	7b23      	ldrb	r3, [r4, #12]
 80140a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
                p2.y += y_ofs;
 80140ac:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80140b0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80140b4:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 80140b8:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 80140bc:	6823      	ldr	r3, [r4, #0]
 80140be:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 80140c2:	9b05      	ldr	r3, [sp, #20]
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	2300      	movs	r3, #0
 80140c8:	f003 f92d 	bl	8017326 <lv_map>
                p2.x += x_ofs;
 80140cc:	9b08      	ldr	r3, [sp, #32]
 80140ce:	4418      	add	r0, r3
 80140d0:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
            if(i != 0) {
 80140d4:	f1b9 0f00 	cmp.w	r9, #0
 80140d8:	d04f      	beq.n	801417a <lv_chart_event+0x1016>
                point_area.x1 = p1.x - point_w;
 80140da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 80140de:	ea4f 094a 	mov.w	r9, sl, lsl #1
                point_area.x1 = p1.x - point_w;
 80140e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80140e6:	4640      	mov	r0, r8
                point_area.x1 = p1.x - point_w;
 80140e8:	1a99      	subs	r1, r3, r2
                point_area.x2 = p1.x + point_w;
 80140ea:	4413      	add	r3, r2
                point_area.y1 = p1.y - point_h;
 80140ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p1.x + point_w;
 80140f0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p1.y - point_h;
 80140f4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
                point_area.x1 = p1.x - point_w;
 80140f8:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
                point_area.y1 = p1.y - point_h;
 80140fc:	1a99      	subs	r1, r3, r2
                point_area.y2 = p1.y + point_h;
 80140fe:	4413      	add	r3, r2
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014100:	6862      	ldr	r2, [r4, #4]
                point_area.y2 = p1.y + point_h;
 8014102:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.id = i - 1;
 8014106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                point_area.y1 = p1.y - point_h;
 8014108:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
                dsc.id = i - 1;
 801410c:	3b01      	subs	r3, #1
 801410e:	9348      	str	r3, [sp, #288]	; 0x120
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014110:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
                dsc.draw_area = &point_area;
 8014114:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014118:	f932 2017 	ldrsh.w	r2, [r2, r7, lsl #1]
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801411c:	455b      	cmp	r3, fp
                dsc.value = ser->y_points[p_prev];
 801411e:	934a      	str	r3, [sp, #296]	; 0x128
                dsc.draw_area = &point_area;
 8014120:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014124:	bf0c      	ite	eq
 8014126:	2100      	moveq	r1, #0
 8014128:	a915      	addne	r1, sp, #84	; 0x54
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801412a:	455a      	cmp	r2, fp
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801412c:	9141      	str	r1, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801412e:	f04f 011a 	mov.w	r1, #26
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014132:	bf0c      	ite	eq
 8014134:	2200      	moveq	r2, #0
 8014136:	aa16      	addne	r2, sp, #88	; 0x58
 8014138:	9242      	str	r2, [sp, #264]	; 0x108
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801413a:	aa3a      	add	r2, sp, #232	; 0xe8
 801413c:	f7ed fcdc 	bl	8001af8 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014140:	6863      	ldr	r3, [r4, #4]
 8014142:	f933 2009 	ldrsh.w	r2, [r3, r9]
 8014146:	455a      	cmp	r2, fp
 8014148:	d012      	beq.n	8014170 <lv_chart_event+0x100c>
 801414a:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 801414e:	455b      	cmp	r3, fp
 8014150:	d00e      	beq.n	8014170 <lv_chart_event+0x100c>
                    lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8014152:	ab20      	add	r3, sp, #128	; 0x80
 8014154:	aa1a      	add	r2, sp, #104	; 0x68
 8014156:	a916      	add	r1, sp, #88	; 0x58
 8014158:	a815      	add	r0, sp, #84	; 0x54
 801415a:	f7f6 fc7f 	bl	800aa5c <lv_draw_line>
                    if(point_w && point_h) {
 801415e:	9b03      	ldr	r3, [sp, #12]
 8014160:	b133      	cbz	r3, 8014170 <lv_chart_event+0x100c>
 8014162:	9b04      	ldr	r3, [sp, #16]
 8014164:	b123      	cbz	r3, 8014170 <lv_chart_event+0x100c>
                        lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014166:	aa2d      	add	r2, sp, #180	; 0xb4
 8014168:	a91a      	add	r1, sp, #104	; 0x68
 801416a:	4650      	mov	r0, sl
 801416c:	f7f8 fac6 	bl	800c6fc <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8014170:	aa3a      	add	r2, sp, #232	; 0xe8
 8014172:	211b      	movs	r1, #27
 8014174:	4640      	mov	r0, r8
 8014176:	f7ed fcbf 	bl	8001af8 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 801417a:	3601      	adds	r6, #1
            p_act = (start_point + i) % chart->point_cnt;
 801417c:	46ba      	mov	sl, r7
 801417e:	e733      	b.n	8013fe8 <lv_chart_event+0xe84>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 8014180:	88a2      	ldrh	r2, [r4, #4]
 8014182:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014186:	429a      	cmp	r2, r3
 8014188:	f43f aa69 	beq.w	801365e <lv_chart_event+0x4fa>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 801418c:	ab18      	add	r3, sp, #96	; 0x60
 801418e:	68a1      	ldr	r1, [r4, #8]
 8014190:	4640      	mov	r0, r8
 8014192:	f7fe fc30 	bl	80129f6 <lv_chart_get_point_pos_by_id>
            cx = p.x;
 8014196:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
            cy = p.y;
 801419a:	f9bd 5062 	ldrsh.w	r5, [sp, #98]	; 0x62
 801419e:	f7ff b9dd 	b.w	801355c <lv_chart_event+0x3f8>
 80141a2:	bf00      	nop

080141a4 <fast_hsv2rgb.part.0>:
 * We fold all symmetry by swapping the R, G, B pointers so that the code is the same for all sextants.
 * We replace division by 255 by a division by 256, a.k.a a shift right by 8 bits.
 * This is wrong, but since this is only used to compute the pixels on the screen and not the final color, it's ok.
 */
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b);
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
 80141a4:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if (!s) { *r = *g = *b = v; return; }

    uint8_t sextant = h >> 8;
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80141a6:	0587      	lsls	r7, r0, #22
    uint8_t sextant = h >> 8;
 80141a8:	ea4f 2510 	mov.w	r5, r0, lsr #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80141ac:	bf48      	it	mi
 80141ae:	461f      	movmi	r7, r3
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
 80141b0:	e9dd 4605 	ldrd	r4, r6, [sp, #20]
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80141b4:	bf44      	itt	mi
 80141b6:	4633      	movmi	r3, r6
 80141b8:	463e      	movmi	r6, r7
 80141ba:	076f      	lsls	r7, r5, #29
 80141bc:	bf42      	ittt	mi
 80141be:	4627      	movmi	r7, r4
 80141c0:	4634      	movmi	r4, r6
 80141c2:	463e      	movmi	r6, r7
 80141c4:	f015 0f06 	tst.w	r5, #6
 80141c8:	f005 0701 	and.w	r7, r5, #1
 80141cc:	d104      	bne.n	80141d8 <fast_hsv2rgb.part.0+0x34>
 80141ce:	b92f      	cbnz	r7, 80141dc <fast_hsv2rgb.part.0+0x38>
 80141d0:	461d      	mov	r5, r3
 80141d2:	4623      	mov	r3, r4
 80141d4:	462c      	mov	r4, r5
 80141d6:	e001      	b.n	80141dc <fast_hsv2rgb.part.0+0x38>
 80141d8:	2f00      	cmp	r7, #0
 80141da:	d1f9      	bne.n	80141d0 <fast_hsv2rgb.part.0+0x2c>

    *g = v;
 80141dc:	7022      	strb	r2, [r4, #0]

    uint8_t bb = ~s;
 80141de:	43cc      	mvns	r4, r1
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 80141e0:	b295      	uxth	r5, r2
 80141e2:	b2e4      	uxtb	r4, r4
 80141e4:	b289      	uxth	r1, r1
    *b = ww >> 8;
 80141e6:	4362      	muls	r2, r4
 80141e8:	b2c0      	uxtb	r0, r0
 80141ea:	0a12      	lsrs	r2, r2, #8
 80141ec:	7032      	strb	r2, [r6, #0]

    uint8_t h_frac = h & 0xff;

    if(!(sextant & 1)) {
 80141ee:	b957      	cbnz	r7, 8014206 <fast_hsv2rgb.part.0+0x62>
        /*Up slope*/
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 80141f0:	b938      	cbnz	r0, 8014202 <fast_hsv2rgb.part.0+0x5e>
 80141f2:	0209      	lsls	r1, r1, #8
    } else {
        /*Down slope*/
        ww = s * h_frac;
    }
    bb = ww >> 8;
    bb = ~bb;
 80141f4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
    ww = v * bb;
 80141f8:	b2c9      	uxtb	r1, r1
    *r = ww >> 8;
 80141fa:	4369      	muls	r1, r5
 80141fc:	0a09      	lsrs	r1, r1, #8
 80141fe:	7019      	strb	r1, [r3, #0]
}
 8014200:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8014202:	4240      	negs	r0, r0
 8014204:	b2c0      	uxtb	r0, r0
        ww = s * h_frac;
 8014206:	4341      	muls	r1, r0
 8014208:	e7f4      	b.n	80141f4 <fast_hsv2rgb.part.0+0x50>

0801420a <get_knob_area>:
{
 801420a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801420e:	460d      	mov	r5, r1
 8014210:	4606      	mov	r6, r0
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014212:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014216:	2100      	movs	r1, #0
 8014218:	4628      	mov	r0, r5
 801421a:	f7f2 febd 	bl	8006f98 <lv_obj_get_style_prop>
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 801421e:	f3c0 34c0 	ubfx	r4, r0, #15, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014222:	f241 0212 	movw	r2, #4114	; 0x1012
 8014226:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801422a:	fa04 f080 	sxtah	r0, r4, r0
 801422e:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8014232:	4628      	mov	r0, r5
 8014234:	f7f2 feb0 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014238:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801423c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801423e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014242:	4628      	mov	r0, r5
 8014244:	f7f2 fea8 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014248:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801424c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801424e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014252:	4628      	mov	r0, r5
 8014254:	f7f2 fea0 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014258:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801425c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801425e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014262:	4628      	mov	r0, r5
 8014264:	f7f2 fe98 	bl	8006f98 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014268:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801426a:	8aaa      	ldrh	r2, [r5, #20]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 801426c:	4427      	add	r7, r4
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801426e:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014270:	441a      	add	r2, r3
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8014272:	8aeb      	ldrh	r3, [r5, #22]
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014274:	eb04 0509 	add.w	r5, r4, r9
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8014278:	440b      	add	r3, r1
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 801427a:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801427c:	eb04 0108 	add.w	r1, r4, r8
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 8014280:	4404      	add	r4, r0
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8014282:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014284:	1b55      	subs	r5, r2, r5
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 8014286:	443a      	add	r2, r7
}
 8014288:	4630      	mov	r0, r6
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801428a:	1a59      	subs	r1, r3, r1
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 801428c:	441c      	add	r4, r3
    return knob_area;
 801428e:	8035      	strh	r5, [r6, #0]
 8014290:	8071      	strh	r1, [r6, #2]
 8014292:	80b2      	strh	r2, [r6, #4]
 8014294:	80f4      	strh	r4, [r6, #6]
}
 8014296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801429a <refr_knob_pos>:
{
 801429a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801429c:	4605      	mov	r5, r0
    lv_area_t knob_area = get_knob_area(obj);
 801429e:	4601      	mov	r1, r0
 80142a0:	4668      	mov	r0, sp
 80142a2:	f7ff ffb2 	bl	801420a <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 80142a6:	4669      	mov	r1, sp
 80142a8:	4628      	mov	r0, r5
 80142aa:	f7f0 fd33 	bl	8004d14 <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 80142ae:	4628      	mov	r0, r5
 80142b0:	f7f0 fbf5 	bl	8004a9e <lv_obj_get_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80142b4:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80142b8:	4607      	mov	r7, r0
 80142ba:	2100      	movs	r1, #0
 80142bc:	4628      	mov	r0, r5
 80142be:	f7f2 fe6b 	bl	8006f98 <lv_obj_get_style_prop>

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 80142c2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)v.num;
 80142c6:	b200      	sxth	r0, r0
 80142c8:	f003 0303 	and.w	r3, r3, #3
    lv_coord_t r = (w - scale_w) / 2;
 80142cc:	1a3e      	subs	r6, r7, r0
    switch(colorwheel->mode) {
 80142ce:	2b01      	cmp	r3, #1
    lv_coord_t r = (w - scale_w) / 2;
 80142d0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80142d4:	ea4f 0666 	mov.w	r6, r6, asr #1
    switch(colorwheel->mode) {
 80142d8:	d021      	beq.n	801431e <refr_knob_pos+0x84>
 80142da:	2b02      	cmp	r3, #2
 80142dc:	d029      	beq.n	8014332 <refr_knob_pos+0x98>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 80142de:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80142e0:	b220      	sxth	r0, r4
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 80142e2:	345a      	adds	r4, #90	; 0x5a
 80142e4:	f002 ff72 	bl	80171cc <lv_trigo_sin>
 80142e8:	4370      	muls	r0, r6
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80142ea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80142ee:	13c0      	asrs	r0, r0, #15
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80142f0:	f3c7 074f 	ubfx	r7, r7, #1, #16
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 80142f4:	8528      	strh	r0, [r5, #40]	; 0x28
 80142f6:	b220      	sxth	r0, r4
 80142f8:	f002 ff68 	bl	80171cc <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 80142fc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 80142fe:	4370      	muls	r0, r6
    lv_area_t knob_area = get_knob_area(obj);
 8014300:	4629      	mov	r1, r5
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8014302:	443b      	add	r3, r7
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 8014304:	eb07 37e0 	add.w	r7, r7, r0, asr #15
    lv_area_t knob_area = get_knob_area(obj);
 8014308:	4668      	mov	r0, sp
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 801430a:	852b      	strh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 801430c:	856f      	strh	r7, [r5, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 801430e:	f7ff ff7c 	bl	801420a <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 8014312:	4669      	mov	r1, sp
 8014314:	4628      	mov	r0, r5
 8014316:	f7f0 fcfd 	bl	8004d14 <lv_obj_invalidate_area>
}
 801431a:	b003      	add	sp, #12
 801431c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 801431e:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
            break;
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 8014322:	f44f 74b4 	mov.w	r4, #360	; 0x168
 8014326:	4344      	muls	r4, r0
 8014328:	2064      	movs	r0, #100	; 0x64
 801432a:	fbb4 f4f0 	udiv	r4, r4, r0
 801432e:	b2a4      	uxth	r4, r4
            break;
 8014330:	e7d6      	b.n	80142e0 <refr_knob_pos+0x46>
            angle = (colorwheel->hsv.v * 360) / 100 ;
 8014332:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8014336:	e7f4      	b.n	8014322 <refr_knob_pos+0x88>

08014338 <lv_colorwheel_constructor>:
    colorwheel->hsv.h = 0;
 8014338:	4b0f      	ldr	r3, [pc, #60]	; (8014378 <lv_colorwheel_constructor+0x40>)
    colorwheel->knob.recolor = create_knob_recolor;
 801433a:	4a10      	ldr	r2, [pc, #64]	; (801437c <lv_colorwheel_constructor+0x44>)
{
 801433c:	b510      	push	{r4, lr}
    colorwheel->hsv.h = 0;
 801433e:	624b      	str	r3, [r1, #36]	; 0x24
{
 8014340:	460c      	mov	r4, r1
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 8014342:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    colorwheel->knob.recolor = create_knob_recolor;
 8014346:	7812      	ldrb	r2, [r2, #0]
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014348:	4620      	mov	r0, r4
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 801434a:	f023 0307 	bic.w	r3, r3, #7
 801434e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 8014352:	2300      	movs	r3, #0
    colorwheel->last_change_time = 0;
 8014354:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    colorwheel->knob.recolor = create_knob_recolor;
 8014358:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801435c:	f362 0300 	bfi	r3, r2, #0, #1
 8014360:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014368:	f7ef fae6 	bl	8003938 <lv_obj_add_flag>
    refr_knob_pos(obj);
 801436c:	4620      	mov	r0, r4
}
 801436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    refr_knob_pos(obj);
 8014372:	f7ff bf92 	b.w	801429a <refr_knob_pos>
 8014376:	bf00      	nop
 8014378:	64640000 	.word	0x64640000
 801437c:	200031e8 	.word	0x200031e8

08014380 <lv_colorwheel_set_hsv>:
{
 8014380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014382:	0e0b      	lsrs	r3, r1, #24
 8014384:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8014388:	9101      	str	r1, [sp, #4]
 801438a:	b289      	uxth	r1, r1
 801438c:	4604      	mov	r4, r0
    if(hsv.h > 360) hsv.h %= 360;
 801438e:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8014392:	bf82      	ittt	hi
 8014394:	f44f 70b4 	movhi.w	r0, #360	; 0x168
 8014398:	fbb1 f5f0 	udivhi	r5, r1, r0
 801439c:	fb00 1115 	mlshi	r1, r0, r5, r1
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80143a0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    if(hsv.h > 360) hsv.h %= 360;
 80143a2:	bf88      	it	hi
 80143a4:	b289      	uxthhi	r1, r1
    if(hsv.s > 100) hsv.s = 100;
 80143a6:	2a64      	cmp	r2, #100	; 0x64
 80143a8:	bf28      	it	cs
 80143aa:	2264      	movcs	r2, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 80143ac:	2b64      	cmp	r3, #100	; 0x64
 80143ae:	bf28      	it	cs
 80143b0:	2364      	movcs	r3, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80143b2:	4288      	cmp	r0, r1
 80143b4:	d00d      	beq.n	80143d2 <lv_colorwheel_set_hsv+0x52>
    refr_knob_pos(obj);
 80143b6:	4620      	mov	r0, r4
    colorwheel->hsv = hsv;
 80143b8:	84a1      	strh	r1, [r4, #36]	; 0x24
 80143ba:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 80143be:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 80143c2:	f7ff ff6a 	bl	801429a <refr_knob_pos>
    lv_obj_invalidate(obj);
 80143c6:	4620      	mov	r0, r4
 80143c8:	f7f0 fcbe 	bl	8004d48 <lv_obj_invalidate>
    return true;
 80143cc:	2001      	movs	r0, #1
}
 80143ce:	b003      	add	sp, #12
 80143d0:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80143d2:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80143d4:	f88d 2006 	strb.w	r2, [sp, #6]
 80143d8:	f88d 3007 	strb.w	r3, [sp, #7]
 80143dc:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80143e0:	4285      	cmp	r5, r0
 80143e2:	d1e8      	bne.n	80143b6 <lv_colorwheel_set_hsv+0x36>
 80143e4:	2000      	movs	r0, #0
 80143e6:	e7f2      	b.n	80143ce <lv_colorwheel_set_hsv+0x4e>

080143e8 <lv_colorwheel_get_rgb>:
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 80143e8:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 80143ec:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 80143f0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80143f2:	f002 bd11 	b.w	8016e18 <lv_color_hsv_to_rgb>
	...

080143f8 <lv_colorwheel_event>:
{
 80143f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80143fc:	488a      	ldr	r0, [pc, #552]	; (8014628 <lv_colorwheel_event+0x230>)
{
 80143fe:	460d      	mov	r5, r1
 8014400:	ed2d 8b04 	vpush	{d8-d9}
 8014404:	b0a7      	sub	sp, #156	; 0x9c
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8014406:	f7ed fb00 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801440a:	2801      	cmp	r0, #1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801440c:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return;
 801440e:	d13e      	bne.n	801448e <lv_colorwheel_event+0x96>
    lv_event_code_t code = lv_event_get_code(e);
 8014410:	4628      	mov	r0, r5
 8014412:	f7ed fb93 	bl	8001b3c <lv_event_get_code>
 8014416:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8014418:	4628      	mov	r0, r5
 801441a:	f7ed fb8d 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801441e:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8014420:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8014422:	d139      	bne.n	8014498 <lv_colorwheel_event+0xa0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014424:	f241 0212 	movw	r2, #4114	; 0x1012
 8014428:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801442c:	f7f2 fdb4 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014430:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 8014434:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014438:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801443c:	4620      	mov	r0, r4
 801443e:	f7f2 fdab 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014442:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 8014446:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014448:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801444c:	4620      	mov	r0, r4
 801444e:	f7f2 fda3 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014452:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 8014456:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014458:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801445c:	4620      	mov	r0, r4
 801445e:	f7f2 fd9b 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014462:	b204      	sxth	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 8014464:	4628      	mov	r0, r5
 8014466:	f7ed fb6b 	bl	8001b40 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 801446a:	4546      	cmp	r6, r8
 801446c:	4633      	mov	r3, r6
        *s = LV_MAX(*s, knob_pad);
 801446e:	f9b0 2000 	ldrsh.w	r2, [r0]
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 8014472:	bfb8      	it	lt
 8014474:	4643      	movlt	r3, r8
 8014476:	42bb      	cmp	r3, r7
 8014478:	bfb8      	it	lt
 801447a:	463b      	movlt	r3, r7
 801447c:	42a3      	cmp	r3, r4
 801447e:	bfb8      	it	lt
 8014480:	4623      	movlt	r3, r4
 8014482:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 8014484:	b21b      	sxth	r3, r3
 8014486:	4293      	cmp	r3, r2
 8014488:	bfb8      	it	lt
 801448a:	4613      	movlt	r3, r2
 801448c:	8003      	strh	r3, [r0, #0]
}
 801448e:	b027      	add	sp, #156	; 0x9c
 8014490:	ecbd 8b04 	vpop	{d8-d9}
 8014494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8014498:	2e23      	cmp	r6, #35	; 0x23
 801449a:	d11c      	bne.n	80144d6 <lv_colorwheel_event+0xde>
        void * param = lv_event_get_param(e);
 801449c:	4628      	mov	r0, r5
 801449e:	f7ed fb4f 	bl	8001b40 <lv_event_get_param>
 80144a2:	4605      	mov	r5, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80144a4:	4620      	mov	r0, r4
 80144a6:	f7f0 fafa 	bl	8004a9e <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80144aa:	88ab      	ldrh	r3, [r5, #4]
 80144ac:	882a      	ldrh	r2, [r5, #0]
 80144ae:	3301      	adds	r3, #1
 80144b0:	1a9b      	subs	r3, r3, r2
 80144b2:	b21b      	sxth	r3, r3
 80144b4:	4298      	cmp	r0, r3
 80144b6:	d003      	beq.n	80144c0 <lv_colorwheel_event+0xc8>
            refr_knob_pos(obj);
 80144b8:	4620      	mov	r0, r4
        refr_knob_pos(obj);
 80144ba:	f7ff feee 	bl	801429a <refr_knob_pos>
 80144be:	e7e6      	b.n	801448e <lv_colorwheel_event+0x96>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 80144c0:	4620      	mov	r0, r4
 80144c2:	f7f0 faf2 	bl	8004aaa <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80144c6:	88eb      	ldrh	r3, [r5, #6]
 80144c8:	886a      	ldrh	r2, [r5, #2]
 80144ca:	3301      	adds	r3, #1
 80144cc:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80144ce:	b21b      	sxth	r3, r3
 80144d0:	4298      	cmp	r0, r3
 80144d2:	d1f1      	bne.n	80144b8 <lv_colorwheel_event+0xc0>
 80144d4:	e7db      	b.n	801448e <lv_colorwheel_event+0x96>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80144d6:	2e24      	cmp	r6, #36	; 0x24
 80144d8:	d0ef      	beq.n	80144ba <lv_colorwheel_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 80144da:	2e0d      	cmp	r6, #13
 80144dc:	d166      	bne.n	80145ac <lv_colorwheel_event+0x1b4>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 80144de:	4628      	mov	r0, r5
 80144e0:	f7ed fb2e 	bl	8001b40 <lv_event_get_param>
 80144e4:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80144e6:	f023 0202 	bic.w	r2, r3, #2
 80144ea:	2a11      	cmp	r2, #17
 80144ec:	d136      	bne.n	801455c <lv_colorwheel_event+0x164>
            hsv_cur = colorwheel->hsv;
 80144ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144f0:	9319      	str	r3, [sp, #100]	; 0x64
            switch(colorwheel->mode) {
 80144f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80144f6:	f003 0303 	and.w	r3, r3, #3
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d018      	beq.n	8014530 <lv_colorwheel_event+0x138>
 80144fe:	2b02      	cmp	r3, #2
 8014500:	d021      	beq.n	8014546 <lv_colorwheel_event+0x14e>
 8014502:	b94b      	cbnz	r3, 8014518 <lv_colorwheel_event+0x120>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 8014504:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8014506:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801450a:	3301      	adds	r3, #1
 801450c:	fbb3 f2f1 	udiv	r2, r3, r1
 8014510:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 8014514:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 8014518:	9919      	ldr	r1, [sp, #100]	; 0x64
 801451a:	4620      	mov	r0, r4
 801451c:	f7ff ff30 	bl	8014380 <lv_colorwheel_set_hsv>
 8014520:	2800      	cmp	r0, #0
 8014522:	d0b4      	beq.n	801448e <lv_colorwheel_event+0x96>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8014524:	2200      	movs	r2, #0
 8014526:	211c      	movs	r1, #28
 8014528:	4620      	mov	r0, r4
 801452a:	f7ed fae5 	bl	8001af8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801452e:	e7ae      	b.n	801448e <lv_colorwheel_event+0x96>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 8014530:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014534:	2164      	movs	r1, #100	; 0x64
 8014536:	3301      	adds	r3, #1
 8014538:	fbb3 f2f1 	udiv	r2, r3, r1
 801453c:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 8014540:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    break;
 8014544:	e7e8      	b.n	8014518 <lv_colorwheel_event+0x120>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 8014546:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801454a:	2164      	movs	r1, #100	; 0x64
 801454c:	3301      	adds	r3, #1
 801454e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014552:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 8014556:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    break;
 801455a:	e7dd      	b.n	8014518 <lv_colorwheel_event+0x120>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801455c:	2b14      	cmp	r3, #20
 801455e:	d001      	beq.n	8014564 <lv_colorwheel_event+0x16c>
 8014560:	2b12      	cmp	r3, #18
 8014562:	d194      	bne.n	801448e <lv_colorwheel_event+0x96>
            hsv_cur = colorwheel->hsv;
 8014564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014566:	9319      	str	r3, [sp, #100]	; 0x64
            switch(colorwheel->mode) {
 8014568:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801456c:	f003 0303 	and.w	r3, r3, #3
 8014570:	2b01      	cmp	r3, #1
 8014572:	d00b      	beq.n	801458c <lv_colorwheel_event+0x194>
 8014574:	2b02      	cmp	r3, #2
 8014576:	d011      	beq.n	801459c <lv_colorwheel_event+0x1a4>
 8014578:	2b00      	cmp	r3, #0
 801457a:	d1cd      	bne.n	8014518 <lv_colorwheel_event+0x120>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801457c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801457e:	b113      	cbz	r3, 8014586 <lv_colorwheel_event+0x18e>
 8014580:	3b01      	subs	r3, #1
 8014582:	b29b      	uxth	r3, r3
 8014584:	e7c6      	b.n	8014514 <lv_colorwheel_event+0x11c>
 8014586:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801458a:	e7c3      	b.n	8014514 <lv_colorwheel_event+0x11c>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801458c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014590:	b113      	cbz	r3, 8014598 <lv_colorwheel_event+0x1a0>
 8014592:	3b01      	subs	r3, #1
 8014594:	b2db      	uxtb	r3, r3
 8014596:	e7d3      	b.n	8014540 <lv_colorwheel_event+0x148>
 8014598:	2364      	movs	r3, #100	; 0x64
 801459a:	e7d1      	b.n	8014540 <lv_colorwheel_event+0x148>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 801459c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80145a0:	b113      	cbz	r3, 80145a8 <lv_colorwheel_event+0x1b0>
 80145a2:	3b01      	subs	r3, #1
 80145a4:	b2db      	uxtb	r3, r3
 80145a6:	e7d6      	b.n	8014556 <lv_colorwheel_event+0x15e>
 80145a8:	2364      	movs	r3, #100	; 0x64
 80145aa:	e7d4      	b.n	8014556 <lv_colorwheel_event+0x15e>
    else if(code == LV_EVENT_PRESSED) {
 80145ac:	2e01      	cmp	r6, #1
 80145ae:	d13d      	bne.n	801462c <lv_colorwheel_event+0x234>
        colorwheel->last_change_time = lv_tick_get();
 80145b0:	f002 f856 	bl	8016660 <lv_tick_get>
 80145b4:	6360      	str	r0, [r4, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 80145b6:	f7ed fd35 	bl	8002024 <lv_indev_get_act>
 80145ba:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80145be:	f7ed fd92 	bl	80020e6 <lv_indev_get_point>
    lv_indev_t * indev = lv_indev_get_act();
 80145c2:	f7ed fd2f 	bl	8002024 <lv_indev_get_act>
 80145c6:	4605      	mov	r5, r0
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 80145c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80145ca:	f002 f857 	bl	801667c <lv_tick_elaps>
 80145ce:	682b      	ldr	r3, [r5, #0]
 80145d0:	8b9b      	ldrh	r3, [r3, #28]
 80145d2:	4298      	cmp	r0, r3
 80145d4:	d21c      	bcs.n	8014610 <lv_colorwheel_event+0x218>
        hsv_cur = colorwheel->hsv;
 80145d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145d8:	9319      	str	r3, [sp, #100]	; 0x64
        switch(colorwheel->mode) {
 80145da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80145de:	f003 0303 	and.w	r3, r3, #3
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d018      	beq.n	8014618 <lv_colorwheel_event+0x220>
 80145e6:	2b02      	cmp	r3, #2
 80145e8:	d01a      	beq.n	8014620 <lv_colorwheel_event+0x228>
 80145ea:	b90b      	cbnz	r3, 80145f0 <lv_colorwheel_event+0x1f8>
                hsv_cur.h = 0;
 80145ec:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        lv_indev_wait_release(indev);
 80145f0:	4628      	mov	r0, r5
 80145f2:	f7ed fdb7 	bl	8002164 <lv_indev_wait_release>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 80145f6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80145f8:	4620      	mov	r0, r4
 80145fa:	f7ff fec1 	bl	8014380 <lv_colorwheel_set_hsv>
 80145fe:	b138      	cbz	r0, 8014610 <lv_colorwheel_event+0x218>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8014600:	2200      	movs	r2, #0
 8014602:	211c      	movs	r1, #28
 8014604:	4620      	mov	r0, r4
 8014606:	f7ed fa77 	bl	8001af8 <lv_event_send>
            if(res != LV_RES_OK) return res;
 801460a:	2801      	cmp	r0, #1
 801460c:	f47f af3f 	bne.w	801448e <lv_colorwheel_event+0x96>
    colorwheel->last_click_time = lv_tick_get();
 8014610:	f002 f826 	bl	8016660 <lv_tick_get>
 8014614:	6320      	str	r0, [r4, #48]	; 0x30
    return LV_RES_OK;
 8014616:	e73a      	b.n	801448e <lv_colorwheel_event+0x96>
                hsv_cur.s = 100;
 8014618:	2364      	movs	r3, #100	; 0x64
 801461a:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                break;
 801461e:	e7e7      	b.n	80145f0 <lv_colorwheel_event+0x1f8>
                hsv_cur.v = 100;
 8014620:	2364      	movs	r3, #100	; 0x64
 8014622:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                break;
 8014626:	e7e3      	b.n	80145f0 <lv_colorwheel_event+0x1f8>
 8014628:	08025cb8 	.word	0x08025cb8
    else if(code == LV_EVENT_PRESSING) {
 801462c:	2e02      	cmp	r6, #2
 801462e:	f040 80cb 	bne.w	80147c8 <lv_colorwheel_event+0x3d0>
        lv_indev_t * indev = lv_indev_get_act();
 8014632:	f7ed fcf7 	bl	8002024 <lv_indev_get_act>
        if(indev == NULL) return;
 8014636:	4606      	mov	r6, r0
 8014638:	2800      	cmp	r0, #0
 801463a:	f43f af28 	beq.w	801448e <lv_colorwheel_event+0x96>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801463e:	f7ed fcf7 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8014642:	2804      	cmp	r0, #4
 8014644:	d002      	beq.n	801464c <lv_colorwheel_event+0x254>
 8014646:	2802      	cmp	r0, #2
 8014648:	f040 808e 	bne.w	8014768 <lv_colorwheel_event+0x370>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 801464c:	4620      	mov	r0, r4
 801464e:	8aa5      	ldrh	r5, [r4, #20]
 8014650:	f7f0 fa25 	bl	8004a9e <lv_obj_get_width>
 8014654:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014658:	eb05 0060 	add.w	r0, r5, r0, asr #1
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 801465c:	8ae5      	ldrh	r5, [r4, #22]
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 801465e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8014662:	4620      	mov	r0, r4
 8014664:	f7f0 fa21 	bl	8004aaa <lv_obj_get_height>
 8014668:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801466c:	eb05 0060 	add.w	r0, r5, r0, asr #1
 8014670:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 8014674:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8014676:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 801467a:	7e1a      	ldrb	r2, [r3, #24]
 801467c:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8014680:	1a5b      	subs	r3, r3, r1
 8014682:	2b00      	cmp	r3, #0
 8014684:	bfb8      	it	lt
 8014686:	425b      	neglt	r3, r3
 8014688:	4293      	cmp	r3, r2
 801468a:	dc09      	bgt.n	80146a0 <lv_colorwheel_event+0x2a8>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 801468c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8014690:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 8014694:	1a5b      	subs	r3, r3, r1
 8014696:	2b00      	cmp	r3, #0
 8014698:	bfb8      	it	lt
 801469a:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 801469c:	429a      	cmp	r2, r3
 801469e:	da04      	bge.n	80146aa <lv_colorwheel_event+0x2b2>
            colorwheel->last_change_time = lv_tick_get();
 80146a0:	f001 ffde 	bl	8016660 <lv_tick_get>
            colorwheel->last_press_point.x = p.x;
 80146a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
            colorwheel->last_change_time = lv_tick_get();
 80146a6:	6360      	str	r0, [r4, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 80146a8:	63a3      	str	r3, [r4, #56]	; 0x38
        p.x -= obj->coords.x1;
 80146aa:	8aa2      	ldrh	r2, [r4, #20]
        uint16_t w = lv_obj_get_width(obj);
 80146ac:	4620      	mov	r0, r4
        p.x -= obj->coords.x1;
 80146ae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80146b2:	1a9b      	subs	r3, r3, r2
        p.y -= obj->coords.y1;
 80146b4:	8ae2      	ldrh	r2, [r4, #22]
        p.x -= obj->coords.x1;
 80146b6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 80146ba:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 80146be:	1a9b      	subs	r3, r3, r2
 80146c0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 80146c4:	f7f0 f9eb 	bl	8004a9e <lv_obj_get_width>
 80146c8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80146ca:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80146ce:	2100      	movs	r1, #0
 80146d0:	4620      	mov	r0, r4
 80146d2:	f7f2 fc61 	bl	8006f98 <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 80146d6:	f3c5 034e 	ubfx	r3, r5, #1, #15
        p.x -= r_in;
 80146da:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 80146de:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
        p.x -= r_in;
 80146e2:	1ad2      	subs	r2, r2, r3
        p.y -= r_in;
 80146e4:	1ac9      	subs	r1, r1, r3
        r_in -= cir_w;
 80146e6:	1a1b      	subs	r3, r3, r0
        p.x -= r_in;
 80146e8:	b212      	sxth	r2, r2
        r_in -= cir_w;
 80146ea:	b29d      	uxth	r5, r3
 80146ec:	b21b      	sxth	r3, r3
        p.x -= r_in;
 80146ee:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 80146f2:	b209      	sxth	r1, r1
        if(r_in > LV_DPI_DEF / 2) {
 80146f4:	2b41      	cmp	r3, #65	; 0x41
        p.y -= r_in;
 80146f6:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        if(r_in > LV_DPI_DEF / 2) {
 80146fa:	dd09      	ble.n	8014710 <lv_colorwheel_event+0x318>
            lv_coord_t inner = cir_w / 2;
 80146fc:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8014700:	fa03 f080 	sxtah	r0, r3, r0
            r_in -= inner;
 8014704:	eba5 0360 	sub.w	r3, r5, r0, asr #1
 8014708:	b21b      	sxth	r3, r3
 801470a:	2b41      	cmp	r3, #65	; 0x41
 801470c:	bfb8      	it	lt
 801470e:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8014710:	4349      	muls	r1, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8014712:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8014714:	fb03 f503 	mul.w	r5, r3, r3
 8014718:	fb02 1702 	mla	r7, r2, r2, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 801471c:	f001 ffae 	bl	801667c <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 8014720:	42af      	cmp	r7, r5
 8014722:	da26      	bge.n	8014772 <lv_colorwheel_event+0x37a>
 8014724:	6833      	ldr	r3, [r6, #0]
 8014726:	8b9b      	ldrh	r3, [r3, #28]
 8014728:	4298      	cmp	r0, r3
 801472a:	f67f aeb0 	bls.w	801448e <lv_colorwheel_event+0x96>
 801472e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014732:	075a      	lsls	r2, r3, #29
 8014734:	f53f aeab 	bmi.w	801448e <lv_colorwheel_event+0x96>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8014738:	f003 0203 	and.w	r2, r3, #3
 801473c:	2103      	movs	r1, #3
    refr_knob_pos(obj);
 801473e:	4620      	mov	r0, r4
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8014740:	3201      	adds	r2, #1
 8014742:	fbb2 f1f1 	udiv	r1, r2, r1
 8014746:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801474a:	1a52      	subs	r2, r2, r1
 801474c:	f362 0301 	bfi	r3, r2, #0, #2
 8014750:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    refr_knob_pos(obj);
 8014754:	f7ff fda1 	bl	801429a <refr_knob_pos>
    lv_obj_invalidate(obj);
 8014758:	4620      	mov	r0, r4
 801475a:	f7f0 faf5 	bl	8004d48 <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 801475e:	f7ed fc61 	bl	8002024 <lv_indev_get_act>
 8014762:	f7ed fcff 	bl	8002164 <lv_indev_wait_release>
            return;
 8014766:	e692      	b.n	801448e <lv_colorwheel_event+0x96>
            lv_indev_get_point(indev, &p);
 8014768:	a912      	add	r1, sp, #72	; 0x48
 801476a:	4630      	mov	r0, r6
 801476c:	f7ed fcbb 	bl	80020e6 <lv_indev_get_point>
 8014770:	e780      	b.n	8014674 <lv_colorwheel_event+0x27c>
        angle = lv_atan2(p.x, p.y) % 360;
 8014772:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8014776:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 801477a:	f002 fd88 	bl	801728e <lv_atan2>
 801477e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014782:	fbb0 f3f2 	udiv	r3, r0, r2
 8014786:	fb03 0012 	mls	r0, r3, r2, r0
        hsv_cur = colorwheel->hsv;
 801478a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801478c:	9319      	str	r3, [sp, #100]	; 0x64
        angle = lv_atan2(p.x, p.y) % 360;
 801478e:	b280      	uxth	r0, r0
        switch(colorwheel->mode) {
 8014790:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014794:	f003 0303 	and.w	r3, r3, #3
 8014798:	2b01      	cmp	r3, #1
 801479a:	d007      	beq.n	80147ac <lv_colorwheel_event+0x3b4>
 801479c:	2b02      	cmp	r3, #2
 801479e:	d00c      	beq.n	80147ba <lv_colorwheel_event+0x3c2>
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	f47f aeb9 	bne.w	8014518 <lv_colorwheel_event+0x120>
                hsv_cur.h = angle;
 80147a6:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
                break;
 80147aa:	e6b5      	b.n	8014518 <lv_colorwheel_event+0x120>
                hsv_cur.s = (angle * 100) / 360;
 80147ac:	2364      	movs	r3, #100	; 0x64
 80147ae:	4358      	muls	r0, r3
 80147b0:	fbb0 f0f2 	udiv	r0, r0, r2
 80147b4:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
                break;
 80147b8:	e6ae      	b.n	8014518 <lv_colorwheel_event+0x120>
                hsv_cur.v = (angle * 100) / 360;
 80147ba:	2364      	movs	r3, #100	; 0x64
 80147bc:	4358      	muls	r0, r3
 80147be:	fbb0 f0f2 	udiv	r0, r0, r2
 80147c2:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
                break;
 80147c6:	e6a7      	b.n	8014518 <lv_colorwheel_event+0x120>
    else if(code == LV_EVENT_HIT_TEST) {
 80147c8:	2e11      	cmp	r6, #17
 80147ca:	d10c      	bne.n	80147e6 <lv_colorwheel_event+0x3ee>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 80147cc:	4628      	mov	r0, r5
 80147ce:	f7ed f9b7 	bl	8001b40 <lv_event_get_param>
 80147d2:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 80147d4:	6801      	ldr	r1, [r0, #0]
 80147d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80147da:	f104 0014 	add.w	r0, r4, #20
 80147de:	f002 f9ce 	bl	8016b7e <_lv_area_is_point_on>
 80147e2:	7128      	strb	r0, [r5, #4]
 80147e4:	e653      	b.n	801448e <lv_colorwheel_event+0x96>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80147e6:	2e15      	cmp	r6, #21
 80147e8:	f040 8192 	bne.w	8014b10 <lv_colorwheel_event+0x718>
    lv_obj_t * obj = lv_event_get_target(e);
 80147ec:	4628      	mov	r0, r5
 80147ee:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8014b2c <lv_colorwheel_event+0x734>
 80147f2:	f7ed f9a1 	bl	8001b38 <lv_event_get_target>
 80147f6:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 80147f8:	4628      	mov	r0, r5
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 80147fa:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8014b30 <lv_colorwheel_event+0x738>
    const lv_area_t * clip_area = lv_event_get_param(e);
 80147fe:	f7ed f99f 	bl	8001b40 <lv_event_get_param>
 8014802:	ee08 0a10 	vmov	s16, r0
    lv_coord_t w = lv_obj_get_width(obj);
 8014806:	4620      	mov	r0, r4
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014808:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8014b34 <lv_colorwheel_event+0x73c>
    lv_coord_t w = lv_obj_get_width(obj);
 801480c:	f7f0 f947 	bl	8004a9e <lv_obj_get_width>
 8014810:	4606      	mov	r6, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8014812:	4620      	mov	r0, r4
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014814:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_coord_t h = lv_obj_get_height(obj);
 8014818:	f7f0 f947 	bl	8004aaa <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 801481c:	8aa3      	ldrh	r3, [r4, #20]
 801481e:	f346 0a4f 	sbfx	sl, r6, #1, #16
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014822:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014826:	4453      	add	r3, sl
 8014828:	b29b      	uxth	r3, r3
 801482a:	9303      	str	r3, [sp, #12]
    lv_coord_t cy = obj->coords.y1 + h / 2;
 801482c:	8ae3      	ldrh	r3, [r4, #22]
 801482e:	eb03 0060 	add.w	r0, r3, r0, asr #1
 8014832:	b283      	uxth	r3, r0
    lv_draw_line_dsc_init(&line_dsc);
 8014834:	a80f      	add	r0, sp, #60	; 0x3c
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014836:	9304      	str	r3, [sp, #16]
    lv_draw_line_dsc_init(&line_dsc);
 8014838:	f7f6 f904 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801483c:	aa0f      	add	r2, sp, #60	; 0x3c
 801483e:	2100      	movs	r1, #0
 8014840:	4620      	mov	r0, r4
 8014842:	f7ef fe89 	bl	8004558 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 8014846:	f44f 731d 	mov.w	r3, #628	; 0x274
 801484a:	f242 1234 	movw	r2, #8500	; 0x2134
 801484e:	2100      	movs	r1, #0
 8014850:	fb1a f303 	smulbb	r3, sl, r3
 8014854:	4620      	mov	r0, r4
 8014856:	fb93 f3f2 	sdiv	r3, r3, r2
    line_dsc.width += 2;
 801485a:	3302      	adds	r3, #2
 801485c:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014860:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014864:	f7f2 fb98 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014868:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801486a:	4606      	mov	r6, r0
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 801486c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014870:	f104 0114 	add.w	r1, r4, #20
 8014874:	a812      	add	r0, sp, #72	; 0x48
    return (lv_coord_t)v.num;
 8014876:	9306      	str	r3, [sp, #24]
 8014878:	2300      	movs	r3, #0
 801487a:	f7f7 fb7f 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 801487e:	2100      	movs	r1, #0
 8014880:	a812      	add	r0, sp, #72	; 0x48
 8014882:	f7f7 fa15 	bl	800bcb0 <lv_draw_mask_add>
    dest->y1 = src->y1;
 8014886:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    mask_area.x1 += cir_w;
 801488a:	b2b2      	uxth	r2, r6
    dest->y2 = src->y2;
 801488c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 8014890:	ee08 0a90 	vmov	s17, r0
    dest->x2 = src->x2;
 8014894:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    mask_area.x1 += cir_w;
 8014898:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    mask_area.y1 += cir_w;
 801489c:	4411      	add	r1, r2
    mask_area.x2 -= cir_w;
 801489e:	1a80      	subs	r0, r0, r2
    mask_area.y2 -= cir_w;
 80148a0:	1a9b      	subs	r3, r3, r2
    mask_area.x1 += cir_w;
 80148a2:	fa1c f686 	uxtah	r6, ip, r6
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80148a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
    mask_area.x2 -= cir_w;
 80148aa:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80148ae:	a819      	add	r0, sp, #100	; 0x64
    mask_area.y1 += cir_w;
 80148b0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80148b4:	a90b      	add	r1, sp, #44	; 0x2c
    mask_area.y2 -= cir_w;
 80148b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80148ba:	463b      	mov	r3, r7
    mask_area.x1 += cir_w;
 80148bc:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 80148c0:	f7f7 fb5c 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 80148c4:	2100      	movs	r1, #0
 80148c6:	a819      	add	r0, sp, #100	; 0x64
 80148c8:	f7f7 f9f2 	bl	800bcb0 <lv_draw_mask_add>
    lv_coord_t cir_w_extra = line_dsc.width;
 80148cc:	2600      	movs	r6, #0
 80148ce:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 80148d2:	ee09 0a10 	vmov	s18, r0
    lv_coord_t cir_w_extra = line_dsc.width;
 80148d6:	9305      	str	r3, [sp, #20]
    uint8_t r = 0, g = 0, b = 0;
 80148d8:	2300      	movs	r3, #0
 80148da:	f44f 6787 	mov.w	r7, #1080	; 0x438
 80148de:	f89b 1000 	ldrb.w	r1, [fp]
 80148e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80148e6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80148ea:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    switch(ext->mode) {
 80148ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80148f2:	4377      	muls	r7, r6
 80148f4:	f3c3 0201 	ubfx	r2, r3, #0, #2
 80148f8:	f003 0303 	and.w	r3, r3, #3
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	f000 80bb 	beq.w	8014a78 <lv_colorwheel_event+0x680>
 8014902:	2b02      	cmp	r3, #2
 8014904:	f000 80e3 	beq.w	8014ace <lv_colorwheel_event+0x6d6>
            if (m != ext->mode) {
 8014908:	428b      	cmp	r3, r1
 801490a:	d016      	beq.n	801493a <lv_colorwheel_event+0x542>
              s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 801490c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014910:	2014      	movs	r0, #20
              m = ext->mode;
 8014912:	f88b 2000 	strb.w	r2, [fp]
              s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014916:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801491a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801491e:	fbb3 f1f0 	udiv	r1, r3, r0
 8014922:	4b81      	ldr	r3, [pc, #516]	; (8014b28 <lv_colorwheel_event+0x730>)
 8014924:	7019      	strb	r1, [r3, #0]
 8014926:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801492a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801492e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014932:	fbb3 f3f0 	udiv	r3, r3, r0
 8014936:	f888 3000 	strb.w	r3, [r8]
            fast_hsv2rgb(angle * 6, s, v, &r, &g, &b); /*A smart compiler will replace x * 6 by (x << 2) + (x << 1) if it's more efficient*/
 801493a:	4b7b      	ldr	r3, [pc, #492]	; (8014b28 <lv_colorwheel_event+0x730>)
 801493c:	f898 2000 	ldrb.w	r2, [r8]
 8014940:	7819      	ldrb	r1, [r3, #0]
    if (!s) { *r = *g = *b = v; return; }
 8014942:	2900      	cmp	r1, #0
 8014944:	f040 808a 	bne.w	8014a5c <lv_colorwheel_event+0x664>
 8014948:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801494c:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8014950:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8014954:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8014958:	3601      	adds	r6, #1
 801495a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801495e:	089b      	lsrs	r3, r3, #2
 8014960:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8014964:	015b      	lsls	r3, r3, #5
 8014966:	08d2      	lsrs	r2, r2, #3
 8014968:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801496c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014970:	f347 220f 	sbfx	r2, r7, #8, #16
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8014974:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8014978:	0a3b      	lsrs	r3, r7, #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801497a:	4610      	mov	r0, r2
 801497c:	9208      	str	r2, [sp, #32]
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 801497e:	9309      	str	r3, [sp, #36]	; 0x24
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014980:	9b05      	ldr	r3, [sp, #20]
 8014982:	eb0a 0103 	add.w	r1, sl, r3
 8014986:	9107      	str	r1, [sp, #28]
 8014988:	f002 fc20 	bl	80171cc <lv_trigo_sin>
 801498c:	9907      	ldr	r1, [sp, #28]
 801498e:	9b03      	ldr	r3, [sp, #12]
 8014990:	4348      	muls	r0, r1
 8014992:	460f      	mov	r7, r1
 8014994:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8014998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801499a:	335a      	adds	r3, #90	; 0x5a
 801499c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80149a0:	b21b      	sxth	r3, r3
 80149a2:	4618      	mov	r0, r3
 80149a4:	9307      	str	r3, [sp, #28]
 80149a6:	f002 fc11 	bl	80171cc <lv_trigo_sin>
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80149aa:	9b04      	ldr	r3, [sp, #16]
 80149ac:	4378      	muls	r0, r7
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80149ae:	9a08      	ldr	r2, [sp, #32]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80149b0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80149b4:	9b06      	ldr	r3, [sp, #24]
 80149b6:	ebaa 0703 	sub.w	r7, sl, r3
 80149ba:	9b05      	ldr	r3, [sp, #20]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80149bc:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 80149c0:	4610      	mov	r0, r2
 80149c2:	1aff      	subs	r7, r7, r3
 80149c4:	f002 fc02 	bl	80171cc <lv_trigo_sin>
 80149c8:	9b03      	ldr	r3, [sp, #12]
 80149ca:	4378      	muls	r0, r7
 80149cc:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80149d0:	9b07      	ldr	r3, [sp, #28]
 80149d2:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80149d6:	4618      	mov	r0, r3
 80149d8:	f002 fbf8 	bl	80171cc <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80149dc:	9b04      	ldr	r3, [sp, #16]
 80149de:	4378      	muls	r0, r7
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 80149e0:	ee18 2a10 	vmov	r2, s16
 80149e4:	a90e      	add	r1, sp, #56	; 0x38
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80149e6:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 80149ea:	ab0f      	add	r3, sp, #60	; 0x3c
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 80149ec:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 80149f0:	a80d      	add	r0, sp, #52	; 0x34
 80149f2:	f7f6 f833 	bl	800aa5c <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 80149f6:	2e56      	cmp	r6, #86	; 0x56
 80149f8:	f47f af6e 	bne.w	80148d8 <lv_colorwheel_event+0x4e0>
    lv_draw_mask_remove_id(mask_out_id);
 80149fc:	ee18 0a90 	vmov	r0, s17
 8014a00:	f7f7 f98e 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8014a04:	ee19 0a10 	vmov	r0, s18
 8014a08:	f7f7 f98a 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 8014a0c:	4628      	mov	r0, r5
 8014a0e:	f7ed f893 	bl	8001b38 <lv_event_get_target>
 8014a12:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7ed f893 	bl	8001b40 <lv_event_get_param>
 8014a1a:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 8014a1c:	a819      	add	r0, sp, #100	; 0x64
 8014a1e:	f7f7 fe4b 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 8014a22:	aa19      	add	r2, sp, #100	; 0x64
 8014a24:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f7ef fbb1 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 8014a2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014a32:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    if(colorwheel->knob.recolor) {
 8014a36:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014a3a:	07db      	lsls	r3, r3, #31
 8014a3c:	d504      	bpl.n	8014a48 <lv_colorwheel_event+0x650>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f7ff fcd2 	bl	80143e8 <lv_colorwheel_get_rgb>
 8014a44:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
    lv_area_t knob_area = get_knob_area(obj);
 8014a48:	4621      	mov	r1, r4
 8014a4a:	a812      	add	r0, sp, #72	; 0x48
 8014a4c:	f7ff fbdd 	bl	801420a <get_knob_area>
    lv_draw_rect(&knob_area, clip_area, &cir_dsc);
 8014a50:	aa19      	add	r2, sp, #100	; 0x64
 8014a52:	4629      	mov	r1, r5
 8014a54:	a812      	add	r0, sp, #72	; 0x48
 8014a56:	f7f7 fe51 	bl	800c6fc <lv_draw_rect>
}
 8014a5a:	e518      	b.n	801448e <lv_colorwheel_event+0x96>
 8014a5c:	ab0d      	add	r3, sp, #52	; 0x34
 8014a5e:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8014a62:	9301      	str	r3, [sp, #4]
 8014a64:	0040      	lsls	r0, r0, #1
 8014a66:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8014a6a:	b280      	uxth	r0, r0
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014a72:	f7ff fb97 	bl	80141a4 <fast_hsv2rgb.part.0>
 8014a76:	e76d      	b.n	8014954 <lv_colorwheel_event+0x55c>
            if (m != ext->mode) {
 8014a78:	2901      	cmp	r1, #1
 8014a7a:	d016      	beq.n	8014aaa <lv_colorwheel_event+0x6b2>
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014a7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8014a7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
              m = ext->mode;
 8014a82:	f88b 2000 	strb.w	r2, [fp]
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014a86:	434b      	muls	r3, r1
 8014a88:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014a8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a90:	f8a9 3000 	strh.w	r3, [r9]
 8014a94:	2114      	movs	r1, #20
 8014a96:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014a9e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014aa6:	f888 3000 	strb.w	r3, [r8]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014aaa:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014aae:	f898 2000 	ldrb.w	r2, [r8]
    if (!s) { *r = *g = *b = v; return; }
 8014ab2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8014ab6:	f43f af47 	beq.w	8014948 <lv_colorwheel_event+0x550>
 8014aba:	ab0d      	add	r3, sp, #52	; 0x34
 8014abc:	f8b9 0000 	ldrh.w	r0, [r9]
 8014ac0:	9301      	str	r3, [sp, #4]
 8014ac2:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8014ac6:	9300      	str	r3, [sp, #0]
 8014ac8:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014acc:	e7d1      	b.n	8014a72 <lv_colorwheel_event+0x67a>
            if (m != ext->mode) {
 8014ace:	2902      	cmp	r1, #2
 8014ad0:	d016      	beq.n	8014b00 <lv_colorwheel_event+0x708>
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8014ad2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8014ad4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
              m = ext->mode;
 8014ad8:	f88b 2000 	strb.w	r2, [fp]
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8014adc:	434b      	muls	r3, r1
 8014ade:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ae6:	f8a9 3000 	strh.w	r3, [r9]
 8014aea:	2114      	movs	r1, #20
 8014aec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014af4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014afc:	490a      	ldr	r1, [pc, #40]	; (8014b28 <lv_colorwheel_event+0x730>)
 8014afe:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 8014b00:	4b09      	ldr	r3, [pc, #36]	; (8014b28 <lv_colorwheel_event+0x730>)
 8014b02:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8014b06:	7819      	ldrb	r1, [r3, #0]
 8014b08:	b2d2      	uxtb	r2, r2
    if (!s) { *r = *g = *b = v; return; }
 8014b0a:	2900      	cmp	r1, #0
 8014b0c:	d1d5      	bne.n	8014aba <lv_colorwheel_event+0x6c2>
 8014b0e:	e71b      	b.n	8014948 <lv_colorwheel_event+0x550>
    else if(code == LV_EVENT_COVER_CHECK) {
 8014b10:	2e12      	cmp	r6, #18
 8014b12:	f47f acbc 	bne.w	801448e <lv_colorwheel_event+0x96>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8014b16:	4628      	mov	r0, r5
 8014b18:	f7ed f812 	bl	8001b40 <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 8014b1c:	7803      	ldrb	r3, [r0, #0]
 8014b1e:	2b02      	cmp	r3, #2
 8014b20:	bf1c      	itt	ne
 8014b22:	2301      	movne	r3, #1
 8014b24:	7003      	strbne	r3, [r0, #0]
 8014b26:	e4b2      	b.n	801448e <lv_colorwheel_event+0x96>
 8014b28:	200031ec 	.word	0x200031ec
 8014b2c:	20000005 	.word	0x20000005
 8014b30:	200031ed 	.word	0x200031ed
 8014b34:	200031ea 	.word	0x200031ea

08014b38 <lv_keyboard_def_event_cb>:
 * button clicks
 * @param kb pointer to a  keyboard
 * @param event the triggering event
 */
void lv_keyboard_def_event_cb(lv_event_t * e)
{
 8014b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 8014b3a:	f7ec fffd 	bl	8001b38 <lv_event_get_target>
 8014b3e:	4604      	mov	r4, r0

    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 8014b40:	f006 fb0c 	bl	801b15c <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 8014b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b48:	4298      	cmp	r0, r3
 8014b4a:	f000 80df 	beq.w	8014d0c <lv_keyboard_def_event_cb+0x1d4>

    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f006 fb04 	bl	801b15c <lv_btnmatrix_get_selected_btn>
 8014b54:	4601      	mov	r1, r0
 8014b56:	4620      	mov	r0, r4
 8014b58:	f006 fb02 	bl	801b160 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	f000 80d4 	beq.w	8014d0c <lv_keyboard_def_event_cb+0x1d4>

    if(strcmp(txt, "abc") == 0) {
 8014b64:	496a      	ldr	r1, [pc, #424]	; (8014d10 <lv_keyboard_def_event_cb+0x1d8>)
 8014b66:	f7eb fb53 	bl	8000210 <strcmp>
 8014b6a:	b968      	cbnz	r0, 8014b88 <lv_keyboard_def_event_cb+0x50>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014b6c:	4b69      	ldr	r3, [pc, #420]	; (8014d14 <lv_keyboard_def_event_cb+0x1dc>)
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 8014b6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014b72:	4620      	mov	r0, r4
 8014b74:	6819      	ldr	r1, [r3, #0]
 8014b76:	f006 fa95 	bl	801b0a4 <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014b7a:	4b67      	ldr	r3, [pc, #412]	; (8014d18 <lv_keyboard_def_event_cb+0x1e0>)
 8014b7c:	6819      	ldr	r1, [r3, #0]
        return;
    }
    else if(strcmp(txt, "ABC") == 0) {
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014b7e:	4620      	mov	r0, r4
        }
    }
    else {
        lv_textarea_add_text(keyboard->ta, txt);
    }
}
 8014b80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014b84:	f006 ba92 	b.w	801b0ac <lv_btnmatrix_set_ctrl_map>
    else if(strcmp(txt, "ABC") == 0) {
 8014b88:	4964      	ldr	r1, [pc, #400]	; (8014d1c <lv_keyboard_def_event_cb+0x1e4>)
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	f7eb fb40 	bl	8000210 <strcmp>
 8014b90:	b950      	cbnz	r0, 8014ba8 <lv_keyboard_def_event_cb+0x70>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 8014b92:	2301      	movs	r3, #1
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014b94:	4620      	mov	r0, r4
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 8014b96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014b9a:	4b5e      	ldr	r3, [pc, #376]	; (8014d14 <lv_keyboard_def_event_cb+0x1dc>)
 8014b9c:	6859      	ldr	r1, [r3, #4]
 8014b9e:	f006 fa81 	bl	801b0a4 <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014ba2:	4b5d      	ldr	r3, [pc, #372]	; (8014d18 <lv_keyboard_def_event_cb+0x1e0>)
 8014ba4:	6859      	ldr	r1, [r3, #4]
 8014ba6:	e7ea      	b.n	8014b7e <lv_keyboard_def_event_cb+0x46>
    else if(strcmp(txt, "1#") == 0) {
 8014ba8:	495d      	ldr	r1, [pc, #372]	; (8014d20 <lv_keyboard_def_event_cb+0x1e8>)
 8014baa:	4628      	mov	r0, r5
 8014bac:	f7eb fb30 	bl	8000210 <strcmp>
 8014bb0:	b950      	cbnz	r0, 8014bc8 <lv_keyboard_def_event_cb+0x90>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 8014bb2:	2302      	movs	r3, #2
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 8014bb4:	4620      	mov	r0, r4
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 8014bb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 8014bba:	4b56      	ldr	r3, [pc, #344]	; (8014d14 <lv_keyboard_def_event_cb+0x1dc>)
 8014bbc:	6899      	ldr	r1, [r3, #8]
 8014bbe:	f006 fa71 	bl	801b0a4 <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_SPECIAL]);
 8014bc2:	4b55      	ldr	r3, [pc, #340]	; (8014d18 <lv_keyboard_def_event_cb+0x1e0>)
 8014bc4:	6899      	ldr	r1, [r3, #8]
 8014bc6:	e7da      	b.n	8014b7e <lv_keyboard_def_event_cb+0x46>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 8014bc8:	4956      	ldr	r1, [pc, #344]	; (8014d24 <lv_keyboard_def_event_cb+0x1ec>)
 8014bca:	4628      	mov	r0, r5
 8014bcc:	f7eb fb20 	bl	8000210 <strcmp>
 8014bd0:	b120      	cbz	r0, 8014bdc <lv_keyboard_def_event_cb+0xa4>
 8014bd2:	4955      	ldr	r1, [pc, #340]	; (8014d28 <lv_keyboard_def_event_cb+0x1f0>)
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	f7eb fb1b 	bl	8000210 <strcmp>
 8014bda:	b988      	cbnz	r0, 8014c00 <lv_keyboard_def_event_cb+0xc8>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8014bdc:	2200      	movs	r2, #0
 8014bde:	2120      	movs	r1, #32
 8014be0:	4620      	mov	r0, r4
 8014be2:	f7ec ff89 	bl	8001af8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8014be6:	2801      	cmp	r0, #1
 8014be8:	f040 8090 	bne.w	8014d0c <lv_keyboard_def_event_cb+0x1d4>
        if(keyboard->ta) {
 8014bec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	f000 808c 	beq.w	8014d0c <lv_keyboard_def_event_cb+0x1d4>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	2120      	movs	r1, #32
}
 8014bf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014bfc:	f7ec bf7c 	b.w	8001af8 <lv_event_send>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8014c00:	494a      	ldr	r1, [pc, #296]	; (8014d2c <lv_keyboard_def_event_cb+0x1f4>)
 8014c02:	4628      	mov	r0, r5
 8014c04:	f7eb fb04 	bl	8000210 <strcmp>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	b958      	cbnz	r0, 8014c24 <lv_keyboard_def_event_cb+0xec>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 8014c0c:	211f      	movs	r1, #31
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f7ec ff72 	bl	8001af8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8014c14:	2801      	cmp	r0, #1
 8014c16:	d179      	bne.n	8014d0c <lv_keyboard_def_event_cb+0x1d4>
        if(keyboard->ta) {
 8014c18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014c1a:	2800      	cmp	r0, #0
 8014c1c:	d076      	beq.n	8014d0c <lv_keyboard_def_event_cb+0x1d4>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014c1e:	2200      	movs	r2, #0
 8014c20:	211f      	movs	r1, #31
 8014c22:	e7e9      	b.n	8014bf8 <lv_keyboard_def_event_cb+0xc0>
    if(keyboard->ta == NULL) return;
 8014c24:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014c26:	2e00      	cmp	r6, #0
 8014c28:	d070      	beq.n	8014d0c <lv_keyboard_def_event_cb+0x1d4>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 8014c2a:	4941      	ldr	r1, [pc, #260]	; (8014d30 <lv_keyboard_def_event_cb+0x1f8>)
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	f7eb faef 	bl	8000210 <strcmp>
 8014c32:	b120      	cbz	r0, 8014c3e <lv_keyboard_def_event_cb+0x106>
 8014c34:	493f      	ldr	r1, [pc, #252]	; (8014d34 <lv_keyboard_def_event_cb+0x1fc>)
 8014c36:	4628      	mov	r0, r5
 8014c38:	f7eb faea 	bl	8000210 <strcmp>
 8014c3c:	b960      	cbnz	r0, 8014c58 <lv_keyboard_def_event_cb+0x120>
        lv_textarea_add_char(keyboard->ta, '\n');
 8014c3e:	4630      	mov	r0, r6
 8014c40:	210a      	movs	r1, #10
 8014c42:	f00a ff49 	bl	801fad8 <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 8014c46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014c48:	f00a fe7d 	bl	801f946 <lv_textarea_get_one_line>
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	d05d      	beq.n	8014d0c <lv_keyboard_def_event_cb+0x1d4>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014c50:	2200      	movs	r2, #0
 8014c52:	211f      	movs	r1, #31
 8014c54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014c56:	e7cf      	b.n	8014bf8 <lv_keyboard_def_event_cb+0xc0>
    } else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 8014c58:	4937      	ldr	r1, [pc, #220]	; (8014d38 <lv_keyboard_def_event_cb+0x200>)
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f7eb fad8 	bl	8000210 <strcmp>
 8014c60:	b920      	cbnz	r0, 8014c6c <lv_keyboard_def_event_cb+0x134>
        lv_textarea_cursor_left(keyboard->ta);
 8014c62:	4630      	mov	r0, r6
}
 8014c64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_cursor_left(keyboard->ta);
 8014c68:	f00b b8c2 	b.w	801fdf0 <lv_textarea_cursor_left>
    } else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 8014c6c:	4933      	ldr	r1, [pc, #204]	; (8014d3c <lv_keyboard_def_event_cb+0x204>)
 8014c6e:	4628      	mov	r0, r5
 8014c70:	f7eb face 	bl	8000210 <strcmp>
 8014c74:	b920      	cbnz	r0, 8014c80 <lv_keyboard_def_event_cb+0x148>
        lv_textarea_cursor_right(keyboard->ta);
 8014c76:	4630      	mov	r0, r6
}
 8014c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_cursor_right(keyboard->ta);
 8014c7c:	f00b b8b4 	b.w	801fde8 <lv_textarea_cursor_right>
    } else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 8014c80:	492f      	ldr	r1, [pc, #188]	; (8014d40 <lv_keyboard_def_event_cb+0x208>)
 8014c82:	4628      	mov	r0, r5
 8014c84:	f7eb fac4 	bl	8000210 <strcmp>
 8014c88:	b920      	cbnz	r0, 8014c94 <lv_keyboard_def_event_cb+0x15c>
        lv_textarea_del_char(keyboard->ta);
 8014c8a:	4630      	mov	r0, r6
}
 8014c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_del_char(keyboard->ta);
 8014c90:	f00a bfbe 	b.w	801fc10 <lv_textarea_del_char>
    } else if(strcmp(txt, "+/-") == 0) {
 8014c94:	492b      	ldr	r1, [pc, #172]	; (8014d44 <lv_keyboard_def_event_cb+0x20c>)
 8014c96:	4628      	mov	r0, r5
 8014c98:	f7eb faba 	bl	8000210 <strcmp>
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	bb78      	cbnz	r0, 8014d00 <lv_keyboard_def_event_cb+0x1c8>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 8014ca0:	4630      	mov	r0, r6
 8014ca2:	f00a fe4e 	bl	801f942 <lv_textarea_get_cursor_pos>
 8014ca6:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 8014ca8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014caa:	f00a fe41 	bl	801f930 <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 8014cae:	7803      	ldrb	r3, [r0, #0]
 8014cb0:	b2ad      	uxth	r5, r5
 8014cb2:	2b2d      	cmp	r3, #45	; 0x2d
 8014cb4:	d110      	bne.n	8014cd8 <lv_keyboard_def_event_cb+0x1a0>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8014cb6:	2101      	movs	r1, #1
 8014cb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014cba:	f00a fd67 	bl	801f78c <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8014cbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014cc0:	f00a ffa6 	bl	801fc10 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 8014cc4:	212b      	movs	r1, #43	; 0x2b
            lv_textarea_add_char(keyboard->ta, '-');
 8014cc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014cc8:	f00a ff06 	bl	801fad8 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 8014ccc:	4629      	mov	r1, r5
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8014cce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8014cd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8014cd4:	f00a bd5a 	b.w	801f78c <lv_textarea_set_cursor_pos>
        else if(ta_txt[0] == '+') {
 8014cd8:	2b2b      	cmp	r3, #43	; 0x2b
 8014cda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014cdc:	d107      	bne.n	8014cee <lv_keyboard_def_event_cb+0x1b6>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8014cde:	2101      	movs	r1, #1
 8014ce0:	f00a fd54 	bl	801f78c <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8014ce4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014ce6:	f00a ff93 	bl	801fc10 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 8014cea:	212d      	movs	r1, #45	; 0x2d
 8014cec:	e7eb      	b.n	8014cc6 <lv_keyboard_def_event_cb+0x18e>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 8014cee:	4639      	mov	r1, r7
 8014cf0:	f00a fd4c 	bl	801f78c <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 8014cf4:	212d      	movs	r1, #45	; 0x2d
 8014cf6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8014cf8:	f00a feee 	bl	801fad8 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8014cfc:	1c69      	adds	r1, r5, #1
 8014cfe:	e7e6      	b.n	8014cce <lv_keyboard_def_event_cb+0x196>
        lv_textarea_add_text(keyboard->ta, txt);
 8014d00:	4629      	mov	r1, r5
 8014d02:	4630      	mov	r0, r6
}
 8014d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_add_text(keyboard->ta, txt);
 8014d08:	f00a be3e 	b.w	801f988 <lv_textarea_add_text>
}
 8014d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d0e:	bf00      	nop
 8014d10:	08025cd4 	.word	0x08025cd4
 8014d14:	2000001c 	.word	0x2000001c
 8014d18:	20000008 	.word	0x20000008
 8014d1c:	08025cd8 	.word	0x08025cd8
 8014d20:	08025cdc 	.word	0x08025cdc
 8014d24:	08025cdf 	.word	0x08025cdf
 8014d28:	08025ce3 	.word	0x08025ce3
 8014d2c:	08025c32 	.word	0x08025c32
 8014d30:	08025ce7 	.word	0x08025ce7
 8014d34:	08025ced 	.word	0x08025ced
 8014d38:	08025cf1 	.word	0x08025cf1
 8014d3c:	08025cf5 	.word	0x08025cf5
 8014d40:	08025cf9 	.word	0x08025cf9
 8014d44:	08025cfd 	.word	0x08025cfd

08014d48 <lv_keyboard_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_keyboard_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8014d48:	b538      	push	{r3, r4, r5, lr}
 8014d4a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);

    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;
    keyboard->ta         = NULL;
 8014d4c:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8014d4e:	2104      	movs	r1, #4
 8014d50:	4620      	mov	r0, r4
 8014d52:	f7ee fe14 	bl	800397e <lv_obj_clear_flag>
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;

    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8014d56:	462b      	mov	r3, r5
 8014d58:	462a      	mov	r2, r5
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	2105      	movs	r1, #5
    keyboard->ta         = NULL;
 8014d5e:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 8014d60:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8014d64:	f7ef fe3a 	bl	80049dc <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8014d68:	462b      	mov	r3, r5
 8014d6a:	221c      	movs	r2, #28
 8014d6c:	490e      	ldr	r1, [pc, #56]	; (8014da8 <lv_keyboard_constructor+0x60>)
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7ec fefa 	bl	8001b68 <lv_obj_add_event_cb>
static inline void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 8014d74:	462b      	mov	r3, r5
 8014d76:	462a      	mov	r2, r5
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f241 416a 	movw	r1, #5226	; 0x146a
 8014d7e:	f7f2 f9ef 	bl	8007160 <lv_obj_set_local_style_prop>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);

    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 8014d82:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8014d86:	4b09      	ldr	r3, [pc, #36]	; (8014dac <lv_keyboard_constructor+0x64>)
 8014d88:	4620      	mov	r0, r4
 8014d8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d8e:	f006 f989 	bl	801b0a4 <lv_btnmatrix_set_map>
    lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8014d92:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8014d96:	4b06      	ldr	r3, [pc, #24]	; (8014db0 <lv_keyboard_constructor+0x68>)
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
}
 8014d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8014da2:	f006 b983 	b.w	801b0ac <lv_btnmatrix_set_ctrl_map>
 8014da6:	bf00      	nop
 8014da8:	08014b39 	.word	0x08014b39
 8014dac:	2000001c 	.word	0x2000001c
 8014db0:	20000008 	.word	0x20000008

08014db4 <lv_color_to32>:
     *       5         129     33        1       255
     *       6         259      3        0       255
     */

    lv_color32_t ret;
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8014db4:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 8014db8:	f240 1307 	movw	r3, #263	; 0x107
 8014dbc:	2100      	movs	r1, #0
 8014dbe:	435a      	muls	r2, r3
 8014dc0:	3207      	adds	r2, #7
 8014dc2:	1152      	asrs	r2, r2, #5
{
 8014dc4:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8014dc6:	f362 4117 	bfi	r1, r2, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8014dca:	f3c0 1445 	ubfx	r4, r0, #5, #6
 8014dce:	f240 1203 	movw	r2, #259	; 0x103
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8014dd2:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8014dd6:	4362      	muls	r2, r4
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8014dd8:	4343      	muls	r3, r0
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8014dda:	3203      	adds	r2, #3
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8014ddc:	3307      	adds	r3, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8014dde:	1192      	asrs	r2, r2, #6
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8014de0:	115b      	asrs	r3, r3, #5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8014de2:	f362 210f 	bfi	r1, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8014de6:	f363 0107 	bfi	r1, r3, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
    return ret.full;
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}
 8014dea:	f041 407f 	orr.w	r0, r1, #4278190080	; 0xff000000
 8014dee:	bd10      	pop	{r4, pc}

08014df0 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8014df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014df2:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014df6:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8014dfa:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8014dfe:	f248 0681 	movw	r6, #32897	; 0x8081
 8014e02:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014e04:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e08:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014e0c:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014e10:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014e12:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e14:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8014e16:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8014e18:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014e1c:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e20:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014e24:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e28:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014e2c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e2e:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8014e30:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e32:	4372      	muls	r2, r6
    return ret;
 8014e34:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8014e38:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8014e3a:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8014e3e:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8014e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e44 <lv_color_black>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 8014e44:	f04f 0000 	mov.w	r0, #0
 8014e48:	4770      	bx	lr

08014e4a <lv_led_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_led_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8014e4a:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_led_t * led = (lv_led_t *)obj;
    led->color = lv_theme_get_color_primary(obj);
 8014e4c:	4608      	mov	r0, r1
{
 8014e4e:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 8014e50:	f7f3 faac 	bl	80083ac <lv_theme_get_color_primary>
    led->bright = LV_LED_BRIGHT_MAX;
 8014e54:	23ff      	movs	r3, #255	; 0xff
    led->color = lv_theme_get_color_primary(obj);
 8014e56:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 8014e58:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 8014e5c:	bd10      	pop	{r4, pc}
	...

08014e60 <lv_led_event>:

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8014e60:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    res = lv_obj_event_base(MY_CLASS, e);
 8014e62:	4878      	ldr	r0, [pc, #480]	; (8015044 <lv_led_event+0x1e4>)
{
 8014e64:	b090      	sub	sp, #64	; 0x40
 8014e66:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8014e68:	f7ec fdcf 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8014e6c:	2801      	cmp	r0, #1
 8014e6e:	f040 80e7 	bne.w	8015040 <lv_led_event+0x1e0>

    lv_event_code_t code = lv_event_get_code(e);
 8014e72:	4628      	mov	r0, r5
 8014e74:	f7ec fe62 	bl	8001b3c <lv_event_get_code>
 8014e78:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8014e7a:	4628      	mov	r0, r5
 8014e7c:	f7ec fe5c 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8014e80:	2e15      	cmp	r6, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8014e82:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8014e84:	f040 80dc 	bne.w	8015040 <lv_led_event+0x1e0>
        /*Make darker colors in a temporary style according to the brightness*/
        lv_led_t * led = (lv_led_t *)obj;

        lv_draw_rect_dsc_t rect_dsc;
        lv_draw_rect_dsc_init(&rect_dsc);
 8014e88:	a803      	add	r0, sp, #12
 8014e8a:	f7f7 fc15 	bl	800c6b8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 8014e8e:	aa03      	add	r2, sp, #12
 8014e90:	2100      	movs	r1, #0
 8014e92:	4620      	mov	r0, r4
 8014e94:	f7ef f97c 	bl	8004190 <lv_obj_init_draw_rect_dsc>

        /*Use the original colors brightness to modify color->led*/
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 8014e98:	f7ff ffd4 	bl	8014e44 <lv_color_black>
 8014e9c:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8014e9e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8014ea2:	9101      	str	r1, [sp, #4]
 8014ea4:	f7ff ff86 	bl	8014db4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8014ea8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014eac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014eb0:	9901      	ldr	r1, [sp, #4]
 8014eb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014eb6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014eba:	fa52 f280 	uxtab	r2, r2, r0
 8014ebe:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8014ec0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8014ec4:	f7ff ff94 	bl	8014df0 <lv_color_mix>
 8014ec8:	f8ad 0010 	strh.w	r0, [sp, #16]
        rect_dsc.bg_grad_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_grad_color));
 8014ecc:	f7ff ffba 	bl	8014e44 <lv_color_black>
 8014ed0:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8014ed2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8014ed6:	9101      	str	r1, [sp, #4]
 8014ed8:	f7ff ff6c 	bl	8014db4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8014edc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014ee0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014ee4:	9901      	ldr	r1, [sp, #4]
 8014ee6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014eea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014eee:	fa52 f280 	uxtab	r2, r2, r0
 8014ef2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8014ef4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8014ef8:	f7ff ff7a 	bl	8014df0 <lv_color_mix>
 8014efc:	f8ad 0012 	strh.w	r0, [sp, #18]
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 8014f00:	f7ff ffa0 	bl	8014e44 <lv_color_black>
 8014f04:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8014f06:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8014f0a:	9101      	str	r1, [sp, #4]
 8014f0c:	f7ff ff52 	bl	8014db4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8014f10:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014f14:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014f18:	9901      	ldr	r1, [sp, #4]
 8014f1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014f1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014f22:	fa52 f280 	uxtab	r2, r2, r0
 8014f26:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8014f28:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8014f2c:	f7ff ff60 	bl	8014df0 <lv_color_mix>
 8014f30:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8014f34:	f7ff ff86 	bl	8014e44 <lv_color_black>
 8014f38:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8014f3a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8014f3e:	9101      	str	r1, [sp, #4]
 8014f40:	f7ff ff38 	bl	8014db4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8014f44:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014f48:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014f4c:	9901      	ldr	r1, [sp, #4]
 8014f4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014f52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014f56:	fa52 f280 	uxtab	r2, r2, r0
 8014f5a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8014f5c:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8014f60:	f7ff ff46 	bl	8014df0 <lv_color_mix>
 8014f64:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 8014f68:	f7ff ff6c 	bl	8014e44 <lv_color_black>
 8014f6c:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8014f6e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8014f72:	9101      	str	r1, [sp, #4]
 8014f74:	f7ff ff1e 	bl	8014db4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8014f78:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8014f7c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014f80:	9901      	ldr	r1, [sp, #4]
 8014f82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014f86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014f8a:	fa52 f280 	uxtab	r2, r2, r0
 8014f8e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8014f90:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8014f94:	f7ff ff2c 	bl	8014df0 <lv_color_mix>
 8014f98:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

        /*Mix. the color with black proportionally with brightness*/
        rect_dsc.bg_color   = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 8014f9c:	f7ff ff52 	bl	8014e44 <lv_color_black>
 8014fa0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8014fa4:	4601      	mov	r1, r0
 8014fa6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8014faa:	f7ff ff21 	bl	8014df0 <lv_color_mix>
 8014fae:	f8ad 0010 	strh.w	r0, [sp, #16]
        rect_dsc.bg_grad_color   = lv_color_mix(rect_dsc.bg_grad_color, lv_color_black(), led->bright);
 8014fb2:	f7ff ff47 	bl	8014e44 <lv_color_black>
 8014fb6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8014fba:	4601      	mov	r1, r0
 8014fbc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8014fc0:	f7ff ff16 	bl	8014df0 <lv_color_mix>
 8014fc4:	f8ad 0012 	strh.w	r0, [sp, #18]
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8014fc8:	f7ff ff3c 	bl	8014e44 <lv_color_black>
 8014fcc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8014fd0:	4601      	mov	r1, r0
 8014fd2:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8014fd6:	f7ff ff0b 	bl	8014df0 <lv_color_mix>
 8014fda:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 8014fde:	f7ff ff31 	bl	8014e44 <lv_color_black>
 8014fe2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8014fe6:	4601      	mov	r1, r0
 8014fe8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8014fec:	f7ff ff00 	bl	8014df0 <lv_color_mix>
 8014ff0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8014ff4:	f7ff ff26 	bl	8014e44 <lv_color_black>
 8014ff8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8014ffc:	4601      	mov	r1, r0
 8014ffe:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8015002:	f7ff fef5 	bl	8014df0 <lv_color_mix>

        /*Set the current shadow width according to brightness proportionally between LV_LED_BRIGHT_OFF
         * and LV_LED_BRIGHT_ON*/
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8015006:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801500a:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 801500e:	21af      	movs	r1, #175	; 0xaf
 8015010:	3b50      	subs	r3, #80	; 0x50
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8015012:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);

        const lv_area_t * clip_area = lv_event_get_param(e);
 8015016:	4628      	mov	r0, r5
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8015018:	435a      	muls	r2, r3
 801501a:	fb92 f2f1 	sdiv	r2, r2, r1
 801501e:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8015022:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8015026:	4353      	muls	r3, r2
 8015028:	fb93 f3f1 	sdiv	r3, r3, r1
 801502c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015030:	f7ec fd86 	bl	8001b40 <lv_event_get_param>
        lv_draw_rect(&obj->coords, clip_area, &rect_dsc);
 8015034:	aa03      	add	r2, sp, #12
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015036:	4601      	mov	r1, r0
        lv_draw_rect(&obj->coords, clip_area, &rect_dsc);
 8015038:	f104 0014 	add.w	r0, r4, #20
 801503c:	f7f7 fb5e 	bl	800c6fc <lv_draw_rect>
    }
}
 8015040:	b010      	add	sp, #64	; 0x40
 8015042:	bd70      	pop	{r4, r5, r6, pc}
 8015044:	08026110 	.word	0x08026110

08015048 <lv_list_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_list_create(lv_obj_t * parent)
{
 8015048:	b510      	push	{r4, lr}
 801504a:	4601      	mov	r1, r0
    LV_LOG_INFO("begin")
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_list_class, parent);
 801504c:	4805      	ldr	r0, [pc, #20]	; (8015064 <lv_list_create+0x1c>)
 801504e:	f7ee ffd1 	bl	8003ff4 <lv_obj_class_create_obj>
 8015052:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8015054:	f7ef f85b 	bl	800410e <lv_obj_class_init_obj>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8015058:	2101      	movs	r1, #1
 801505a:	4620      	mov	r0, r4
 801505c:	f7fa fca0 	bl	800f9a0 <lv_obj_set_flex_flow>
    return obj;
}
 8015060:	4620      	mov	r0, r4
 8015062:	bd10      	pop	{r4, pc}
 8015064:	08026148 	.word	0x08026148

08015068 <lv_meter_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_meter_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8015068:	b510      	push	{r4, lr}
 801506a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_meter_t * meter = (lv_meter_t *)obj;
    _lv_ll_clear(&meter->indicator_ll);
 801506c:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8015070:	f002 f873 	bl	801715a <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 8015074:	f104 0024 	add.w	r0, r4, #36	; 0x24

}
 8015078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_clear(&meter->scale_ll);
 801507c:	f002 b86d 	b.w	801715a <_lv_ll_clear>

08015080 <lv_meter_constructor>:
{
 8015080:	b510      	push	{r4, lr}
 8015082:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 8015084:	2124      	movs	r1, #36	; 0x24
 8015086:	1860      	adds	r0, r4, r1
 8015088:	f001 ffff 	bl	801708a <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 801508c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015090:	211c      	movs	r1, #28
}
 8015092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8015096:	f001 bff8 	b.w	801708a <_lv_ll_init>
	...

0801509c <lv_meter_event>:

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80150a0:	48b4      	ldr	r0, [pc, #720]	; (8015374 <lv_meter_event+0x2d8>)
{
 80150a2:	460c      	mov	r4, r1
 80150a4:	ed2d 8b04 	vpush	{d8-d9}
 80150a8:	b0df      	sub	sp, #380	; 0x17c
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80150aa:	f7ec fcae 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80150ae:	2801      	cmp	r0, #1
 80150b0:	f040 811d 	bne.w	80152ee <lv_meter_event+0x252>

    lv_event_code_t code = lv_event_get_code(e);
 80150b4:	4620      	mov	r0, r4
 80150b6:	f7ec fd41 	bl	8001b3c <lv_event_get_code>
 80150ba:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80150bc:	4620      	mov	r0, r4
 80150be:	f7ec fd3b 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 80150c2:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 80150c4:	4683      	mov	fp, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 80150c6:	f040 8112 	bne.w	80152ee <lv_meter_event+0x252>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80150ca:	4620      	mov	r0, r4
static void draw_arcs(lv_obj_t * obj, const lv_area_t * clip_area, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 80150cc:	ae4c      	add	r6, sp, #304	; 0x130
        const lv_area_t * clip_area = lv_event_get_param(e);
 80150ce:	f7ec fd37 	bl	8001b40 <lv_event_get_param>
        lv_obj_get_content_coords(obj, &scale_area);
 80150d2:	a91a      	add	r1, sp, #104	; 0x68
        const lv_area_t * clip_area = lv_event_get_param(e);
 80150d4:	ee08 0a10 	vmov	s16, r0
        lv_obj_get_content_coords(obj, &scale_area);
 80150d8:	4658      	mov	r0, fp
 80150da:	f7ef fd20 	bl	8004b1e <lv_obj_get_content_coords>
    lv_draw_arc_dsc_init(&arc_dsc);
 80150de:	4630      	mov	r0, r6
 80150e0:	f7f3 f9b3 	bl	800844a <lv_draw_arc_dsc_init>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 80150e4:	2251      	movs	r2, #81	; 0x51
 80150e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80150ea:	4658      	mov	r0, fp
 80150ec:	f7f1 ff54 	bl	8006f98 <lv_obj_get_style_prop>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80150f0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 80150f4:	f89d 3139 	ldrb.w	r3, [sp, #313]	; 0x139
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80150f8:	f240 4262 	movw	r2, #1122	; 0x462
 80150fc:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8015100:	3501      	adds	r5, #1
 8015102:	f360 0382 	bfi	r3, r0, #2, #1

    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_out;
    scale_center.y = scale_area->y1 + r_out;
 8015106:	f8bd 806a 	ldrh.w	r8, [sp, #106]	; 0x6a
 801510a:	1bed      	subs	r5, r5, r7
 801510c:	2100      	movs	r1, #0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 801510e:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
 8015112:	4658      	mov	r0, fp
    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 8015114:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 8015118:	fa03 f585 	sxtah	r5, r3, r5
 801511c:	f7f1 ff3c 	bl	8006f98 <lv_obj_get_style_prop>

    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);
    lv_meter_indicator_t * indic;
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015120:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8015124:	4681      	mov	r9, r0
    scale_center.x = scale_area->x1 + r_out;
 8015126:	f3c5 054f 	ubfx	r5, r5, #1, #16
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801512a:	4618      	mov	r0, r3
 801512c:	ee08 3a90 	vmov	s17, r3
    scale_center.x = scale_area->x1 + r_out;
 8015130:	442f      	add	r7, r5
    scale_center.y = scale_area->y1 + r_out;
 8015132:	44a8      	add	r8, r5
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015134:	f002 f826 	bl	8017184 <_lv_ll_get_tail>
 8015138:	4604      	mov	r4, r0
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;

        arc_dsc.color = indic->type_data.arc.color;
        arc_dsc.width = indic->type_data.arc.width;
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801513a:	fa5f f389 	uxtb.w	r3, r9

        lv_meter_scale_t * scale = indic->scale;

        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
        lv_draw_arc(scale_center.x, scale_center.y, r_out + indic->type_data.arc.r_mod, start_angle, end_angle, clip_area, &arc_dsc);
 801513e:	9605      	str	r6, [sp, #20]
    scale_center.x = scale_area->x1 + r_out;
 8015140:	b23f      	sxth	r7, r7
    scale_center.y = scale_area->y1 + r_out;
 8015142:	fa0f f888 	sxth.w	r8, r8
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015146:	9306      	str	r3, [sp, #24]
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015148:	2c00      	cmp	r4, #0
 801514a:	f040 80d5 	bne.w	80152f8 <lv_meter_event+0x25c>
 801514e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8015152:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8015156:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015158:	f8bd 006a 	ldrh.w	r0, [sp, #106]	; 0x6a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801515c:	1a52      	subs	r2, r2, r1
static void draw_ticks_and_labels(lv_obj_t * obj, const lv_area_t * clip_area, const lv_area_t * scale_area)
{
    lv_meter_t * meter    = (lv_meter_t *)obj;

    lv_point_t p_center;
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 801515e:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8015162:	fa03 f382 	sxtah	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015166:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 801516a:	3201      	adds	r2, #1
    p_center.x = scale_area->x1 + r_edge;
 801516c:	105b      	asrs	r3, r3, #1
 801516e:	1a12      	subs	r2, r2, r0
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 8015170:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8015174:	fa04 f282 	sxtah	r2, r4, r2
    p_center.x = scale_area->x1 + r_edge;
 8015178:	1052      	asrs	r2, r2, #1
 801517a:	4293      	cmp	r3, r2
 801517c:	bfa8      	it	ge
 801517e:	4613      	movge	r3, r2
 8015180:	b29a      	uxth	r2, r3
 8015182:	fa11 f183 	uxtah	r1, r1, r3
    p_center.y = scale_area->y1 + r_edge;
 8015186:	fa10 f383 	uxtah	r3, r0, r3

    uint8_t i;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801518a:	a824      	add	r0, sp, #144	; 0x90
    p_center.x = scale_area->x1 + r_edge;
 801518c:	9211      	str	r2, [sp, #68]	; 0x44
    p_center.y = scale_area->y1 + r_edge;
 801518e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    p_center.x = scale_area->x1 + r_edge;
 8015192:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    lv_draw_line_dsc_init(&line_dsc);
 8015196:	f7f5 fc55 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801519a:	aa24      	add	r2, sp, #144	; 0x90
 801519c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80151a0:	4658      	mov	r0, fp
 80151a2:	f7ef f9d9 	bl	8004558 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 80151a6:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80151aa:	a83c      	add	r0, sp, #240	; 0xf0
    line_dsc.raw_end = 1;
 80151ac:	f043 0310 	orr.w	r3, r3, #16
 80151b0:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
    lv_draw_label_dsc_init(&label_dsc);
 80151b4:	f7f4 ffcc 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 80151b8:	aa3c      	add	r2, sp, #240	; 0xf0
 80151ba:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80151be:	4658      	mov	r0, fp
 80151c0:	f7ef f922 	bl	8004408 <lv_obj_init_draw_label_dsc>

    lv_meter_scale_t * scale;

    lv_obj_draw_part_dsc_t dsc;
    lv_obj_draw_dsc_init(&dsc, clip_area);
 80151c4:	a84c      	add	r0, sp, #304	; 0x130
 80151c6:	ee18 1a10 	vmov	r1, s16
 80151ca:	f7ef fac5 	bl	8004758 <lv_obj_draw_dsc_init>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;
#endif

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 80151ce:	f10b 0324 	add.w	r3, fp, #36	; 0x24
 80151d2:	4618      	mov	r0, r3
 80151d4:	ee09 3a10 	vmov	s18, r3
 80151d8:	f001 ffd4 	bl	8017184 <_lv_ll_get_tail>
 80151dc:	4604      	mov	r4, r0
 80151de:	2800      	cmp	r0, #0
 80151e0:	f040 80ca 	bne.w	8015378 <lv_meter_event+0x2dc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80151e4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
    lv_obj_init_draw_line_dsc(obj, LV_PART_INDICATOR, &line_dsc);

    lv_draw_img_dsc_t img_dsc;
    lv_draw_img_dsc_init(&img_dsc);
 80151e8:	af4c      	add	r7, sp, #304	; 0x130
 80151ea:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    lv_draw_line_dsc_init(&line_dsc);
 80151ee:	a844      	add	r0, sp, #272	; 0x110
 80151f0:	3601      	adds	r6, #1
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
            if(angle > 3600) angle -= 3600;
            img_dsc.angle = angle;
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 80151f2:	46ba      	mov	sl, r7
 80151f4:	1af6      	subs	r6, r6, r3
    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 80151f6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 80151fa:	fa02 f686 	sxtah	r6, r2, r6
    scale_center.x = scale_area->x1 + r_edge;
 80151fe:	f3c6 064f 	ubfx	r6, r6, #1, #16
 8015202:	4433      	add	r3, r6
 8015204:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    scale_center.y = scale_area->y1 + r_edge;
 8015208:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801520c:	4433      	add	r3, r6
 801520e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    lv_draw_line_dsc_init(&line_dsc);
 8015212:	f7f5 fc17 	bl	800aa44 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_INDICATOR, &line_dsc);
 8015216:	aa44      	add	r2, sp, #272	; 0x110
 8015218:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801521c:	4658      	mov	r0, fp
 801521e:	f7ef f99b 	bl	8004558 <lv_obj_init_draw_line_dsc>
    lv_draw_img_dsc_init(&img_dsc);
 8015222:	4638      	mov	r0, r7
 8015224:	f7f4 fe50 	bl	8009ec8 <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 8015228:	463a      	mov	r2, r7
 801522a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801522e:	4658      	mov	r0, fp
 8015230:	f7ef f94a 	bl	80044c8 <lv_obj_init_draw_img_dsc>
    img_dsc.antialias = 1;
 8015234:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 8015238:	4621      	mov	r1, r4
 801523a:	f240 4262 	movw	r2, #1122	; 0x462
 801523e:	f043 0301 	orr.w	r3, r3, #1
 8015242:	4658      	mov	r0, fp
 8015244:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
 8015248:	f7f1 fea6 	bl	8006f98 <lv_obj_get_style_prop>
 801524c:	4680      	mov	r8, r0
    return (lv_opa_t)v.num;
 801524e:	fa5f f980 	uxtb.w	r9, r0
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015252:	ee18 0a90 	vmov	r0, s17
 8015256:	f001 ff95 	bl	8017184 <_lv_ll_get_tail>
 801525a:	4604      	mov	r4, r0
 801525c:	2c00      	cmp	r4, #0
 801525e:	f040 82b0 	bne.w	80157c2 <lv_meter_event+0x726>
 8015262:	f8bd 406c 	ldrh.w	r4, [sp, #108]	; 0x6c
        lv_draw_rect_dsc_init(&mid_dsc);
 8015266:	4638      	mov	r0, r7
 8015268:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801526c:	3401      	adds	r4, #1
 801526e:	1b64      	subs	r4, r4, r5
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 8015270:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8015274:	fa03 f484 	sxtah	r4, r3, r4
        scale_center.y = scale_area.y1 + r_edge;
 8015278:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
        scale_center.x = scale_area.x1 + r_edge;
 801527c:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8015280:	4425      	add	r5, r4
        scale_center.y = scale_area.y1 + r_edge;
 8015282:	441c      	add	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 8015284:	f7f7 fa18 	bl	800c6b8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 8015288:	463a      	mov	r2, r7
 801528a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801528e:	4658      	mov	r0, fp
 8015290:	f7ee ff7e 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015294:	f241 0201 	movw	r2, #4097	; 0x1001
 8015298:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801529c:	4658      	mov	r0, fp
 801529e:	f7f1 fe7b 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80152a2:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 80152a6:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80152a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        scale_center.x = scale_area.x1 + r_edge;
 80152ac:	b2ad      	uxth	r5, r5
 80152ae:	4658      	mov	r0, fp
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80152b0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80152b4:	f7f1 fe70 	bl	8006f98 <lv_obj_get_style_prop>
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 80152b8:	463a      	mov	r2, r7
        nm_cord.x1 = scale_center.x - w;
 80152ba:	f3c6 064f 	ubfx	r6, r6, #1, #16
        scale_center.y = scale_area.y1 + r_edge;
 80152be:	b2a4      	uxth	r4, r4
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 80152c0:	ee18 1a10 	vmov	r1, s16
        nm_cord.x1 = scale_center.x - w;
 80152c4:	1bab      	subs	r3, r5, r6
        nm_cord.x2 = scale_center.x + w;
 80152c6:	442e      	add	r6, r5
        nm_cord.x1 = scale_center.x - w;
 80152c8:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80152cc:	f3c0 33c0 	ubfx	r3, r0, #15, #1
        nm_cord.x2 = scale_center.x + w;
 80152d0:	f8ad 6114 	strh.w	r6, [sp, #276]	; 0x114
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80152d4:	fa03 f080 	sxtah	r0, r3, r0
        nm_cord.y1 = scale_center.y - h;
 80152d8:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80152dc:	1a23      	subs	r3, r4, r0
        nm_cord.y2 = scale_center.y + h;
 80152de:	4404      	add	r4, r0
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 80152e0:	a844      	add	r0, sp, #272	; 0x110
        nm_cord.y1 = scale_center.y - h;
 80152e2:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        nm_cord.y2 = scale_center.y + h;
 80152e6:	f8ad 4116 	strh.w	r4, [sp, #278]	; 0x116
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 80152ea:	f7f7 fa07 	bl	800c6fc <lv_draw_rect>
}
 80152ee:	b05f      	add	sp, #380	; 0x17c
 80152f0:	ecbd 8b04 	vpop	{d8-d9}
 80152f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 80152f8:	7923      	ldrb	r3, [r4, #4]
 80152fa:	2b03      	cmp	r3, #3
 80152fc:	d133      	bne.n	8015366 <lv_meter_event+0x2ca>
        arc_dsc.color = indic->type_data.arc.color;
 80152fe:	8b23      	ldrh	r3, [r4, #24]
 8015300:	f8ad 3130 	strh.w	r3, [sp, #304]	; 0x130
        arc_dsc.width = indic->type_data.arc.width;
 8015304:	8a23      	ldrh	r3, [r4, #16]
 8015306:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801530a:	7963      	ldrb	r3, [r4, #5]
 801530c:	2bfd      	cmp	r3, #253	; 0xfd
 801530e:	bf97      	itett	ls
 8015310:	9a06      	ldrls	r2, [sp, #24]
 8015312:	464b      	movhi	r3, r9
 8015314:	4353      	mulls	r3, r2
 8015316:	121b      	asrls	r3, r3, #8
 8015318:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
        lv_meter_scale_t * scale = indic->scale;
 801531c:	6826      	ldr	r6, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801531e:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 8015322:	8bf2      	ldrh	r2, [r6, #30]
 8015324:	441a      	add	r2, r3
 8015326:	9200      	str	r2, [sp, #0]
 8015328:	68a0      	ldr	r0, [r4, #8]
 801532a:	e9d6 1205 	ldrd	r1, r2, [r6, #20]
 801532e:	f001 fffa 	bl	8017326 <lv_map>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015332:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 8015336:	8bf2      	ldrh	r2, [r6, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015338:	4682      	mov	sl, r0
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801533a:	441a      	add	r2, r3
 801533c:	9200      	str	r2, [sp, #0]
 801533e:	68e0      	ldr	r0, [r4, #12]
 8015340:	e9d6 1205 	ldrd	r1, r2, [r6, #20]
 8015344:	f001 ffef 	bl	8017326 <lv_map>
        lv_draw_arc(scale_center.x, scale_center.y, r_out + indic->type_data.arc.r_mod, start_angle, end_angle, clip_area, &arc_dsc);
 8015348:	8b62      	ldrh	r2, [r4, #26]
 801534a:	9b05      	ldr	r3, [sp, #20]
 801534c:	b280      	uxth	r0, r0
 801534e:	442a      	add	r2, r5
 8015350:	4641      	mov	r1, r8
 8015352:	9302      	str	r3, [sp, #8]
 8015354:	fa1f f38a 	uxth.w	r3, sl
 8015358:	9000      	str	r0, [sp, #0]
 801535a:	b292      	uxth	r2, r2
 801535c:	4638      	mov	r0, r7
 801535e:	ed8d 8a01 	vstr	s16, [sp, #4]
 8015362:	f7f3 f87d 	bl	8008460 <lv_draw_arc>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015366:	4621      	mov	r1, r4
 8015368:	ee18 0a90 	vmov	r0, s17
 801536c:	f001 ff11 	bl	8017192 <_lv_ll_get_prev>
 8015370:	4604      	mov	r4, r0
 8015372:	e6e9      	b.n	8015148 <lv_meter_event+0xac>
 8015374:	08026180 	.word	0x08026180
        lv_coord_t r_out = r_edge + scale->r_mod;
 8015378:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801537a:	8ba3      	ldrh	r3, [r4, #28]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801537c:	89a6      	ldrh	r6, [r4, #12]
        lv_coord_t r_out = r_edge + scale->r_mod;
 801537e:	4413      	add	r3, r2
 8015380:	b29d      	uxth	r5, r3
 8015382:	b21b      	sxth	r3, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8015384:	1ba9      	subs	r1, r5, r6
 8015386:	1b76      	subs	r6, r6, r5
        lv_coord_t r_out = r_edge + scale->r_mod;
 8015388:	9312      	str	r3, [sp, #72]	; 0x48
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801538a:	b28f      	uxth	r7, r1
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 801538c:	88a3      	ldrh	r3, [r4, #4]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801538e:	b209      	sxth	r1, r1
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 8015390:	1aea      	subs	r2, r5, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8015392:	1b5b      	subs	r3, r3, r5
 8015394:	9113      	str	r1, [sp, #76]	; 0x4c
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8015396:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801539a:	fa11 f083 	uxtah	r0, r1, r3
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801539e:	fa11 f182 	uxtah	r1, r1, r2
        area_inner_minor.x1 = p_center.x - r_in_minor;
 80153a2:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
        area_inner_minor.y1 = p_center.y - r_in_minor;
 80153a6:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
        area_inner_minor.x2 = p_center.x + r_in_minor;
 80153aa:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80153ae:	a91c      	add	r1, sp, #112	; 0x70
        area_inner_minor.y1 = p_center.y - r_in_minor;
 80153b0:	fa10 f383 	uxtah	r3, r0, r3
        area_inner_minor.y2 = p_center.y + r_in_minor;
 80153b4:	fa10 f282 	uxtah	r2, r0, r2
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80153b8:	a827      	add	r0, sp, #156	; 0x9c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 80153ba:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80153be:	2301      	movs	r3, #1
        area_inner_minor.y2 = p_center.y + r_in_minor;
 80153c0:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 80153c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80153c8:	f7f6 fdd8 	bl	800bf7c <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 80153cc:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80153d0:	a91e      	add	r1, sp, #120	; 0x78
 80153d2:	a82e      	add	r0, sp, #184	; 0xb8
        area_inner_major.x1 = p_center.x - r_in_major;
 80153d4:	fa13 f286 	uxtah	r2, r3, r6
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 80153d8:	3b01      	subs	r3, #1
        area_inner_major.x1 = p_center.x - r_in_major;
 80153da:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 80153de:	443b      	add	r3, r7
        area_inner_major.y1 = p_center.y - r_in_major;
 80153e0:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 80153e4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80153e8:	2301      	movs	r3, #1
        area_inner_major.y1 = p_center.y - r_in_major;
 80153ea:	fa12 f686 	uxtah	r6, r2, r6
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 80153ee:	3a01      	subs	r2, #1
 80153f0:	4417      	add	r7, r2
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80153f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_major.y1 = p_center.y - r_in_major;
 80153f6:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 80153fa:	f8ad 707e 	strh.w	r7, [sp, #126]	; 0x7e
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 80153fe:	f7f6 fdbd 	bl	800bf7c <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 8015402:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8015406:	a835      	add	r0, sp, #212	; 0xd4
        area_outer.x1 = p_center.x - r_out;
 8015408:	1b5a      	subs	r2, r3, r5
        area_outer.x2 = p_center.x + r_out - 1;
 801540a:	3b01      	subs	r3, #1
        area_outer.x1 = p_center.x - r_out;
 801540c:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        area_outer.x2 = p_center.x + r_out - 1;
 8015410:	442b      	add	r3, r5
        area_outer.y1 = p_center.y - r_out;
 8015412:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
        area_outer.x2 = p_center.x + r_out - 1;
 8015416:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 801541a:	2300      	movs	r3, #0
        area_outer.y1 = p_center.y - r_out;
 801541c:	1b51      	subs	r1, r2, r5
        area_outer.y2 = p_center.y + r_out - 1;
 801541e:	3a01      	subs	r2, #1
 8015420:	4415      	add	r5, r2
        area_outer.y1 = p_center.y - r_out;
 8015422:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8015426:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801542a:	a920      	add	r1, sp, #128	; 0x80
        area_outer.y2 = p_center.y + r_out - 1;
 801542c:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8015430:	f7f6 fda4 	bl	800bf7c <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 8015434:	2100      	movs	r1, #0
 8015436:	a835      	add	r0, sp, #212	; 0xd4
 8015438:	f7f6 fc3a 	bl	800bcb0 <lv_draw_mask_add>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 801543c:	8963      	ldrh	r3, [r4, #10]
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801543e:	4680      	mov	r8, r0
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 8015440:	b18b      	cbz	r3, 8015466 <lv_meter_event+0x3ca>
 8015442:	3b01      	subs	r3, #1
 8015444:	9305      	str	r3, [sp, #20]
            lv_coord_t line_width = line_width_ori;
 8015446:	2300      	movs	r3, #0
        for(i = 0; i < scale->tick_cnt; i++) {
 8015448:	8862      	ldrh	r2, [r4, #2]
 801544a:	9306      	str	r3, [sp, #24]
 801544c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8015450:	4293      	cmp	r3, r2
 8015452:	d30b      	bcc.n	801546c <lv_meter_event+0x3d0>
        lv_draw_mask_remove_id(outer_mask_id);
 8015454:	4640      	mov	r0, r8
 8015456:	f7f6 fc63 	bl	800bd20 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801545a:	4621      	mov	r1, r4
 801545c:	ee19 0a10 	vmov	r0, s18
 8015460:	f001 fe97 	bl	8017192 <_lv_ll_get_prev>
 8015464:	e6ba      	b.n	80151dc <lv_meter_event+0x140>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 8015466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801546a:	e7eb      	b.n	8015444 <lv_meter_event+0x3a8>
            minor_cnt++;
 801546c:	9b05      	ldr	r3, [sp, #20]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801546e:	2100      	movs	r1, #0
            minor_cnt++;
 8015470:	3301      	adds	r3, #1
 8015472:	9305      	str	r3, [sp, #20]
            if(minor_cnt == scale->tick_major_nth) {
 8015474:	9a05      	ldr	r2, [sp, #20]
 8015476:	8963      	ldrh	r3, [r4, #10]
 8015478:	429a      	cmp	r2, r3
                major = true;
 801547a:	bf0b      	itete	eq
 801547c:	2301      	moveq	r3, #1
            bool major = false;
 801547e:	2300      	movne	r3, #0
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015480:	a82e      	addeq	r0, sp, #184	; 0xb8
 8015482:	a827      	addne	r0, sp, #156	; 0x9c
                major = true;
 8015484:	bf05      	ittet	eq
 8015486:	9309      	streq	r3, [sp, #36]	; 0x24
                minor_cnt = 0;
 8015488:	2300      	moveq	r3, #0
            bool major = false;
 801548a:	9309      	strne	r3, [sp, #36]	; 0x24
                minor_cnt = 0;
 801548c:	9305      	streq	r3, [sp, #20]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801548e:	f7f6 fc0f 	bl	800bcb0 <lv_draw_mask_add>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8015492:	f89d 3018 	ldrb.w	r3, [sp, #24]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015496:	ee09 0a90 	vmov	s19, r0
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801549a:	8862      	ldrh	r2, [r4, #2]
 801549c:	2100      	movs	r1, #0
 801549e:	9308      	str	r3, [sp, #32]
 80154a0:	69a3      	ldr	r3, [r4, #24]
 80154a2:	3a01      	subs	r2, #1
 80154a4:	9808      	ldr	r0, [sp, #32]
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	6963      	ldr	r3, [r4, #20]
 80154aa:	f001 ff3c 	bl	8017326 <lv_map>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 80154ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 80154b0:	4681      	mov	r9, r0
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	f000 811c 	beq.w	80156f0 <lv_meter_event+0x654>
 80154b8:	7a23      	ldrb	r3, [r4, #8]
 80154ba:	f003 031f 	and.w	r3, r3, #31
 80154be:	930e      	str	r3, [sp, #56]	; 0x38
 80154c0:	8923      	ldrh	r3, [r4, #8]
 80154c2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80154c6:	930d      	str	r3, [sp, #52]	; 0x34
 80154c8:	7a63      	ldrb	r3, [r4, #9]
 80154ca:	08db      	lsrs	r3, r3, #3
 80154cc:	930f      	str	r3, [sp, #60]	; 0x3c
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 80154ce:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154d2:	ee18 0a90 	vmov	r0, s17
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 80154d6:	930c      	str	r3, [sp, #48]	; 0x30
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154d8:	f001 fe54 	bl	8017184 <_lv_ll_get_tail>
 80154dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154de:	4605      	mov	r5, r0
 80154e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80154e2:	9307      	str	r3, [sp, #28]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80154e4:	f248 0781 	movw	r7, #32897	; 0x8081
 80154e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            lv_coord_t line_width = line_width_ori;
 80154ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80154ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80154f0:	2d00      	cmp	r5, #0
 80154f2:	f040 810b 	bne.w	801570c <lv_meter_event+0x670>
            int32_t angle_upscale = ((i * scale->angle_range) << 8) / (scale->tick_cnt - 1);
 80154f6:	9b08      	ldr	r3, [sp, #32]
 80154f8:	8be7      	ldrh	r7, [r4, #30]
 80154fa:	8860      	ldrh	r0, [r4, #2]
 80154fc:	435f      	muls	r7, r3
 80154fe:	3801      	subs	r0, #1
 8015500:	023f      	lsls	r7, r7, #8
 8015502:	fb97 f7f0 	sdiv	r7, r7, r0
            int32_t angle_low = (angle_upscale >> 8);
 8015506:	123b      	asrs	r3, r7, #8
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 8015508:	8c20      	ldrh	r0, [r4, #32]
            int32_t angle_low = (angle_upscale >> 8);
 801550a:	9314      	str	r3, [sp, #80]	; 0x50
            int32_t angle_rem = angle_upscale & 0xFF;
 801550c:	b2fb      	uxtb	r3, r7
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 801550e:	f3c7 270f 	ubfx	r7, r7, #8, #16
            int32_t angle_rem = angle_upscale & 0xFF;
 8015512:	930a      	str	r3, [sp, #40]	; 0x28
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 8015514:	4438      	add	r0, r7
 8015516:	b200      	sxth	r0, r0
 8015518:	f001 fe58 	bl	80171cc <lv_trigo_sin>
            int32_t angle_high = angle_low + 1;
 801551c:	9b14      	ldr	r3, [sp, #80]	; 0x50
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 801551e:	9010      	str	r0, [sp, #64]	; 0x40
            int32_t angle_high = angle_low + 1;
 8015520:	1c58      	adds	r0, r3, #1
            int32_t sin_high = lv_trigo_sin(angle_high + scale->rotation);
 8015522:	8c23      	ldrh	r3, [r4, #32]
 8015524:	b282      	uxth	r2, r0
 8015526:	fa13 f080 	uxtah	r0, r3, r0
 801552a:	b200      	sxth	r0, r0
 801552c:	9215      	str	r2, [sp, #84]	; 0x54
 801552e:	f001 fe4d 	bl	80171cc <lv_trigo_sin>
            int32_t sin_mid = (sin_low * (256 - angle_rem) + sin_high * angle_rem) >> 8;
 8015532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015536:	4350      	muls	r0, r2
 8015538:	9910      	ldr	r1, [sp, #64]	; 0x40
 801553a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801553e:	fb03 0101 	mla	r1, r3, r1, r0
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 8015542:	8c20      	ldrh	r0, [r4, #32]
 8015544:	9314      	str	r3, [sp, #80]	; 0x50
 8015546:	305a      	adds	r0, #90	; 0x5a
 8015548:	120b      	asrs	r3, r1, #8
 801554a:	4438      	add	r0, r7
 801554c:	9310      	str	r3, [sp, #64]	; 0x40
 801554e:	b200      	sxth	r0, r0
 8015550:	f001 fe3c 	bl	80171cc <lv_trigo_sin>
 8015554:	4607      	mov	r7, r0
 8015556:	8c20      	ldrh	r0, [r4, #32]
 8015558:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801555a:	305a      	adds	r0, #90	; 0x5a
 801555c:	4410      	add	r0, r2
 801555e:	b200      	sxth	r0, r0
 8015560:	f001 fe34 	bl	80171cc <lv_trigo_sin>
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            line_dsc.color = line_color;
 8015566:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015568:	4358      	muls	r0, r3
 801556a:	9b14      	ldr	r3, [sp, #80]	; 0x50
            line_dsc.width = line_width;
 801556c:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015570:	fb03 0707 	mla	r7, r3, r7, r0
            line_dsc.color = line_color;
 8015574:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015578:	a818      	add	r0, sp, #96	; 0x60
            line_dsc.color = line_color;
 801557a:	f366 0304 	bfi	r3, r6, #0, #5
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 801557e:	123f      	asrs	r7, r7, #8
            line_dsc.color = line_color;
 8015580:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8015584:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8015588:	f362 134a 	bfi	r3, r2, #5, #6
 801558c:	9a07      	ldr	r2, [sp, #28]
 801558e:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 8015592:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015596:	f362 03c7 	bfi	r3, r2, #3, #5
 801559a:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
            p_outer.x = (int32_t)(((int32_t)cos_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.x;
 801559e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155a0:	4453      	add	r3, sl
 80155a2:	fb03 f207 	mul.w	r2, r3, r7
 80155a6:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 80155aa:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80155ae:	eb02 32e1 	add.w	r2, r2, r1, asr #15
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 80155b2:	a917      	add	r1, sp, #92	; 0x5c
            p_outer.x = (int32_t)(((int32_t)cos_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.x;
 80155b4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p_outer.y = (int32_t)(((int32_t)sin_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.y;
 80155b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80155ba:	4353      	muls	r3, r2
 80155bc:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 80155c0:	337f      	adds	r3, #127	; 0x7f
 80155c2:	eb02 33e3 	add.w	r3, r2, r3, asr #15
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 80155c6:	ee18 2a10 	vmov	r2, s16
            p_outer.y = (int32_t)(((int32_t)sin_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.y;
 80155ca:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 80155ce:	ab24      	add	r3, sp, #144	; 0x90
 80155d0:	f7f5 fa44 	bl	800aa5c <lv_draw_line>
            line_dsc.color = line_color_ori;
 80155d4:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 80155d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            lv_draw_mask_remove_id(inner_act_mask_id);
 80155da:	ee19 0a90 	vmov	r0, s19
            line_dsc.color = line_color_ori;
 80155de:	f362 0304 	bfi	r3, r2, #0, #5
 80155e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155e4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80155e8:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80155ec:	f362 134a 	bfi	r3, r2, #5, #6
 80155f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80155f2:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 80155f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80155fa:	f362 03c7 	bfi	r3, r2, #3, #5
 80155fe:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
            line_dsc.width = line_width_ori;
 8015602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015604:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            lv_draw_mask_remove_id(inner_act_mask_id);
 8015608:	f7f6 fb8a 	bl	800bd20 <lv_draw_mask_remove_id>
            if(major) {
 801560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801560e:	2b00      	cmp	r3, #0
 8015610:	d06b      	beq.n	80156ea <lv_meter_event+0x64e>
                lv_draw_mask_remove_id(outer_mask_id);
 8015612:	4640      	mov	r0, r8
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8015614:	ae44      	add	r6, sp, #272	; 0x110
                lv_draw_mask_remove_id(outer_mask_id);
 8015616:	f7f6 fb83 	bl	800bd20 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 801561a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801561c:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8015620:	2220      	movs	r2, #32
 8015622:	a93c      	add	r1, sp, #240	; 0xf0
 8015624:	4630      	mov	r0, r6
                uint32_t r_text = r_in_major - scale->label_gap;
 8015626:	eba3 0a0a 	sub.w	sl, r3, sl
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 801562a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 801562e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015632:	9307      	str	r3, [sp, #28]
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8015634:	f001 fee0 	bl	80173f8 <lv_memcpy>
                dsc.id = i / scale->tick_major_nth;
 8015638:	8963      	ldrh	r3, [r4, #10]
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 801563a:	2110      	movs	r1, #16
                dsc.id = i / scale->tick_major_nth;
 801563c:	9a08      	ldr	r2, [sp, #32]
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 801563e:	a855      	add	r0, sp, #340	; 0x154
                dsc.label_dsc = &label_dsc_tmp;
 8015640:	964f      	str	r6, [sp, #316]	; 0x13c
                dsc.value = value_of_line;
 8015642:	f8cd 9170 	str.w	r9, [sp, #368]	; 0x170
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 8015646:	fb0a f707 	mul.w	r7, sl, r7
                dsc.id = i / scale->tick_major_nth;
 801564a:	fbb2 f3f3 	udiv	r3, r2, r3
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 801564e:	4ab0      	ldr	r2, [pc, #704]	; (8015910 <lv_meter_event+0x874>)
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 8015650:	377f      	adds	r7, #127	; 0x7f
                dsc.id = i / scale->tick_major_nth;
 8015652:	935a      	str	r3, [sp, #360]	; 0x168
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 8015654:	464b      	mov	r3, r9
 8015656:	f002 fc9f 	bl	8017f98 <lv_snprintf>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801565a:	aa4c      	add	r2, sp, #304	; 0x130
 801565c:	211a      	movs	r1, #26
 801565e:	4658      	mov	r0, fp
 8015660:	f7ec fa4a 	bl	8001af8 <lv_event_send>
                lv_txt_get_size(&label_size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8015664:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015668:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 801566a:	a955      	add	r1, sp, #340	; 0x154
 801566c:	9301      	str	r3, [sp, #4]
 801566e:	a819      	add	r0, sp, #100	; 0x64
 8015670:	f9bd 3102 	ldrsh.w	r3, [sp, #258]	; 0x102
 8015674:	9502      	str	r5, [sp, #8]
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	f9bd 3104 	ldrsh.w	r3, [sp, #260]	; 0x104
 801567c:	f003 fd93 	bl	80191a6 <lv_txt_get_size>
                label_cord.x1 = p.x - label_size.x / 2;
 8015680:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015684:	9910      	ldr	r1, [sp, #64]	; 0x40
                label_cord.x1 = p.x - label_size.x / 2;
 8015686:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
                label_cord.y1 = p.y - label_size.y / 2;
 801568a:	9807      	ldr	r0, [sp, #28]
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 801568c:	fb0a fa01 	mul.w	sl, sl, r1
                label_cord.x1 = p.x - label_size.x / 2;
 8015690:	eba8 0863 	sub.w	r8, r8, r3, asr #1
                label_cord.y1 = p.y - label_size.y / 2;
 8015694:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015698:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 801569c:	9500      	str	r5, [sp, #0]
                label_cord.y1 = p.y - label_size.y / 2;
 801569e:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
                label_cord.x1 = p.x - label_size.x / 2;
 80156a2:	eb08 38e7 	add.w	r8, r8, r7, asr #15
                label_cord.y1 = p.y - label_size.y / 2;
 80156a6:	eba0 0661 	sub.w	r6, r0, r1, asr #1
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 80156aa:	ee18 1a10 	vmov	r1, s16
                label_cord.x1 = p.x - label_size.x / 2;
 80156ae:	fa1f f888 	uxth.w	r8, r8
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 80156b2:	a822      	add	r0, sp, #136	; 0x88
                label_cord.y1 = p.y - label_size.y / 2;
 80156b4:	eb06 36ea 	add.w	r6, r6, sl, asr #15
                label_cord.x1 = p.x - label_size.x / 2;
 80156b8:	f8ad 8088 	strh.w	r8, [sp, #136]	; 0x88
                label_cord.x2 = label_cord.x1 + label_size.x;
 80156bc:	4490      	add	r8, r2
                label_cord.y1 = p.y - label_size.y / 2;
 80156be:	b2b6      	uxth	r6, r6
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 80156c0:	aa3c      	add	r2, sp, #240	; 0xf0
                label_cord.x2 = label_cord.x1 + label_size.x;
 80156c2:	f8ad 808c 	strh.w	r8, [sp, #140]	; 0x8c
                label_cord.y1 = p.y - label_size.y / 2;
 80156c6:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
                label_cord.y2 = label_cord.y1 + label_size.y;
 80156ca:	441e      	add	r6, r3
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 80156cc:	ab55      	add	r3, sp, #340	; 0x154
                label_cord.y2 = label_cord.y1 + label_size.y;
 80156ce:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 80156d2:	f7f4 ff15 	bl	800a500 <lv_draw_label>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80156d6:	aa4c      	add	r2, sp, #304	; 0x130
 80156d8:	211b      	movs	r1, #27
 80156da:	4658      	mov	r0, fp
 80156dc:	f7ec fa0c 	bl	8001af8 <lv_event_send>
                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80156e0:	4629      	mov	r1, r5
 80156e2:	a835      	add	r0, sp, #212	; 0xd4
 80156e4:	f7f6 fae4 	bl	800bcb0 <lv_draw_mask_add>
 80156e8:	4680      	mov	r8, r0
        for(i = 0; i < scale->tick_cnt; i++) {
 80156ea:	9b06      	ldr	r3, [sp, #24]
 80156ec:	3301      	adds	r3, #1
 80156ee:	e6ab      	b.n	8015448 <lv_meter_event+0x3ac>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 80156f0:	7823      	ldrb	r3, [r4, #0]
 80156f2:	f003 031f 	and.w	r3, r3, #31
 80156f6:	930e      	str	r3, [sp, #56]	; 0x38
 80156f8:	8823      	ldrh	r3, [r4, #0]
 80156fa:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80156fe:	930d      	str	r3, [sp, #52]	; 0x34
 8015700:	7863      	ldrb	r3, [r4, #1]
 8015702:	08db      	lsrs	r3, r3, #3
 8015704:	930f      	str	r3, [sp, #60]	; 0x3c
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8015706:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801570a:	e6e2      	b.n	80154d2 <lv_meter_event+0x436>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 801570c:	792b      	ldrb	r3, [r5, #4]
 801570e:	2b02      	cmp	r3, #2
 8015710:	d116      	bne.n	8015740 <lv_meter_event+0x6a4>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 8015712:	68a9      	ldr	r1, [r5, #8]
 8015714:	4589      	cmp	r9, r1
 8015716:	db13      	blt.n	8015740 <lv_meter_event+0x6a4>
 8015718:	68ea      	ldr	r2, [r5, #12]
 801571a:	4591      	cmp	r9, r2
 801571c:	dc10      	bgt.n	8015740 <lv_meter_event+0x6a4>
                    line_width += indic->type_data.scale_lines.width_mod;
 801571e:	8a2b      	ldrh	r3, [r5, #16]
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8015720:	8aa8      	ldrh	r0, [r5, #20]
                    line_width += indic->type_data.scale_lines.width_mod;
 8015722:	4453      	add	r3, sl
 8015724:	fa0f fa83 	sxth.w	sl, r3
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8015728:	8a6b      	ldrh	r3, [r5, #18]
 801572a:	4283      	cmp	r3, r0
 801572c:	d10f      	bne.n	801574e <lv_meter_event+0x6b2>
                        line_color = indic->type_data.scale_lines.color_start;
 801572e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015732:	7cae      	ldrb	r6, [r5, #18]
 8015734:	930b      	str	r3, [sp, #44]	; 0x2c
 8015736:	f006 061f 	and.w	r6, r6, #31
 801573a:	7ceb      	ldrb	r3, [r5, #19]
 801573c:	08db      	lsrs	r3, r3, #3
 801573e:	9307      	str	r3, [sp, #28]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015740:	4629      	mov	r1, r5
 8015742:	ee18 0a90 	vmov	r0, s17
 8015746:	f001 fd24 	bl	8017192 <_lv_ll_get_prev>
 801574a:	4605      	mov	r5, r0
 801574c:	e6d0      	b.n	80154f0 <lv_meter_event+0x454>
                        if(indic->type_data.scale_lines.local_grad) {
 801574e:	7dab      	ldrb	r3, [r5, #22]
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015750:	4648      	mov	r0, r9
                        if(indic->type_data.scale_lines.local_grad) {
 8015752:	f013 0301 	ands.w	r3, r3, #1
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 8015756:	bf17      	itett	ne
 8015758:	23ff      	movne	r3, #255	; 0xff
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 801575a:	22ff      	moveq	r2, #255	; 0xff
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 801575c:	9300      	strne	r3, [sp, #0]
 801575e:	2300      	movne	r3, #0
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015760:	bf04      	itt	eq
 8015762:	9200      	streq	r2, [sp, #0]
 8015764:	e9d4 1205 	ldrdeq	r1, r2, [r4, #20]
 8015768:	f001 fddd 	bl	8017326 <lv_map>
 801576c:	7ce9      	ldrb	r1, [r5, #19]
 801576e:	b2c0      	uxtb	r0, r0
 8015770:	7d6b      	ldrb	r3, [r5, #21]
 8015772:	08c9      	lsrs	r1, r1, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015774:	7d2e      	ldrb	r6, [r5, #20]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015776:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
 801577a:	08db      	lsrs	r3, r3, #3
 801577c:	4351      	muls	r1, r2
 801577e:	fb03 1300 	mla	r3, r3, r0, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015782:	8a69      	ldrh	r1, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015784:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015786:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801578a:	437b      	muls	r3, r7
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801578c:	4351      	muls	r1, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801578e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8015792:	9307      	str	r3, [sp, #28]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015794:	8aab      	ldrh	r3, [r5, #20]
 8015796:	f3c3 1345 	ubfx	r3, r3, #5, #6
 801579a:	fb03 1300 	mla	r3, r3, r0, r1
 801579e:	3380      	adds	r3, #128	; 0x80
 80157a0:	437b      	muls	r3, r7
 80157a2:	f3c3 53c5 	ubfx	r3, r3, #23, #6
 80157a6:	930b      	str	r3, [sp, #44]	; 0x2c
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80157a8:	f006 031f 	and.w	r3, r6, #31
 80157ac:	7cae      	ldrb	r6, [r5, #18]
 80157ae:	f006 061f 	and.w	r6, r6, #31
 80157b2:	4356      	muls	r6, r2
 80157b4:	fb03 6600 	mla	r6, r3, r0, r6
 80157b8:	3680      	adds	r6, #128	; 0x80
 80157ba:	437e      	muls	r6, r7
 80157bc:	f3c6 56c4 	ubfx	r6, r6, #23, #5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 80157c0:	e7be      	b.n	8015740 <lv_meter_event+0x6a4>
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 80157c2:	7923      	ldrb	r3, [r4, #4]
        lv_meter_scale_t * scale = indic->scale;
 80157c4:	6825      	ldr	r5, [r4, #0]
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d14d      	bne.n	8015866 <lv_meter_event+0x7ca>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80157ca:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 80157ce:	8bea      	ldrh	r2, [r5, #30]
 80157d0:	441a      	add	r2, r3
 80157d2:	9200      	str	r2, [sp, #0]
 80157d4:	68e0      	ldr	r0, [r4, #12]
 80157d6:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 80157da:	f001 fda4 	bl	8017326 <lv_map>
 80157de:	4601      	mov	r1, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80157e0:	8a60      	ldrh	r0, [r4, #18]
 80157e2:	8bad      	ldrh	r5, [r5, #28]
 80157e4:	4430      	add	r0, r6
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80157e6:	9105      	str	r1, [sp, #20]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80157e8:	4405      	add	r5, r0
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80157ea:	b208      	sxth	r0, r1
 80157ec:	f001 fcee 	bl	80171cc <lv_trigo_sin>
 80157f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 80157f4:	b22d      	sxth	r5, r5
 80157f6:	9905      	ldr	r1, [sp, #20]
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 80157f8:	fb00 f305 	mul.w	r3, r0, r5
 80157fc:	f8bd 00ba 	ldrh.w	r0, [sp, #186]	; 0xba
 8015800:	fb93 f3f2 	sdiv	r3, r3, r2
 8015804:	4403      	add	r3, r0
 8015806:	f101 005a 	add.w	r0, r1, #90	; 0x5a
 801580a:	b200      	sxth	r0, r0
 801580c:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
 8015810:	f001 fcdc 	bl	80171cc <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015814:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015818:	4345      	muls	r5, r0
 801581a:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 801581e:	a93c      	add	r1, sp, #240	; 0xf0
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015820:	fb95 f5f2 	sdiv	r5, r5, r2
 8015824:	4405      	add	r5, r0
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015826:	a82e      	add	r0, sp, #184	; 0xb8
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015828:	f8ad 50f0 	strh.w	r5, [sp, #240]	; 0xf0
            line_dsc.color = indic->type_data.needle_line.color;
 801582c:	8aa3      	ldrh	r3, [r4, #20]
 801582e:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
            line_dsc.width = indic->type_data.needle_line.width;
 8015832:	8a23      	ldrh	r3, [r4, #16]
 8015834:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015838:	7963      	ldrb	r3, [r4, #5]
 801583a:	2bfd      	cmp	r3, #253	; 0xfd
 801583c:	bf96      	itet	ls
 801583e:	fa5f f288 	uxtbls.w	r2, r8
 8015842:	464b      	movhi	r3, r9
 8015844:	4353      	mulls	r3, r2
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015846:	ee18 2a10 	vmov	r2, s16
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801584a:	bf98      	it	ls
 801584c:	0a1b      	lsrls	r3, r3, #8
 801584e:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015852:	ab44      	add	r3, sp, #272	; 0x110
 8015854:	f7f5 f902 	bl	800aa5c <lv_draw_line>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015858:	4621      	mov	r1, r4
 801585a:	ee18 0a90 	vmov	r0, s17
 801585e:	f001 fc98 	bl	8017192 <_lv_ll_get_prev>
 8015862:	4604      	mov	r4, r0
 8015864:	e4fa      	b.n	801525c <lv_meter_event+0x1c0>
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 8015866:	2b00      	cmp	r3, #0
 8015868:	d1f6      	bne.n	8015858 <lv_meter_event+0x7bc>
            if(indic->type_data.needle_img.src == NULL) continue;
 801586a:	6923      	ldr	r3, [r4, #16]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d0f3      	beq.n	8015858 <lv_meter_event+0x7bc>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015870:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8015874:	8bea      	ldrh	r2, [r5, #30]
 8015876:	441a      	add	r2, r3
 8015878:	9200      	str	r2, [sp, #0]
 801587a:	68e0      	ldr	r0, [r4, #12]
 801587c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 8015880:	f001 fd51 	bl	8017326 <lv_map>
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8015884:	a935      	add	r1, sp, #212	; 0xd4
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015886:	4605      	mov	r5, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8015888:	6920      	ldr	r0, [r4, #16]
 801588a:	f7f9 fa9f 	bl	800edcc <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801588e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8015892:	f8bd c0b8 	ldrh.w	ip, [sp, #184]	; 0xb8
            a.x2 = a.x1 + info.w - 1;
 8015896:	9b35      	ldr	r3, [sp, #212]	; 0xd4
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015898:	ebac 0c01 	sub.w	ip, ip, r1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 801589c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            a.x2 = a.x1 + info.w - 1;
 80158a0:	f3c3 238a 	ubfx	r3, r3, #10, #11
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80158a4:	f8bd 00ba 	ldrh.w	r0, [sp, #186]	; 0xba
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 80158a8:	fa1f fc8c 	uxth.w	ip, ip
            a.x2 = a.x1 + info.w - 1;
 80158ac:	3b01      	subs	r3, #1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80158ae:	1a80      	subs	r0, r0, r2
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 80158b0:	f8ad c0f0 	strh.w	ip, [sp, #240]	; 0xf0
            a.x2 = a.x1 + info.w - 1;
 80158b4:	4463      	add	r3, ip
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80158b6:	b280      	uxth	r0, r0
            a.x2 = a.x1 + info.w - 1;
 80158b8:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
            a.y2 = a.y1 + info.h - 1;
 80158bc:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 80158c0:	f8ad 00f2 	strh.w	r0, [sp, #242]	; 0xf2
            a.y2 = a.y1 + info.h - 1;
 80158c4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 80158c8:	3b01      	subs	r3, #1
 80158ca:	4418      	add	r0, r3
 80158cc:	f8ad 00f6 	strh.w	r0, [sp, #246]	; 0xf6
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80158d0:	7963      	ldrb	r3, [r4, #5]
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 80158d2:	f8ad 1134 	strh.w	r1, [sp, #308]	; 0x134
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 80158d6:	ee18 1a10 	vmov	r1, s16
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80158da:	2bfd      	cmp	r3, #253	; 0xfd
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 80158dc:	f8ad 2136 	strh.w	r2, [sp, #310]	; 0x136
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80158e0:	bf96      	itet	ls
 80158e2:	fa5f f088 	uxtbls.w	r0, r8
 80158e6:	464b      	movhi	r3, r9
 80158e8:	4343      	mulls	r3, r0
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 80158ea:	a83c      	add	r0, sp, #240	; 0xf0
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80158ec:	bf98      	it	ls
 80158ee:	0a1b      	lsrls	r3, r3, #8
 80158f0:	f88d 313b 	strb.w	r3, [sp, #315]	; 0x13b
            angle = angle * 10;
 80158f4:	230a      	movs	r3, #10
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 80158f6:	6922      	ldr	r2, [r4, #16]
            angle = angle * 10;
 80158f8:	435d      	muls	r5, r3
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 80158fa:	4653      	mov	r3, sl
            if(angle > 3600) angle -= 3600;
 80158fc:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 8015900:	bfc8      	it	gt
 8015902:	f5a5 6561 	subgt.w	r5, r5, #3600	; 0xe10
            img_dsc.angle = angle;
 8015906:	f8ad 5130 	strh.w	r5, [sp, #304]	; 0x130
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 801590a:	f7f4 fb11 	bl	8009f30 <lv_draw_img>
 801590e:	e7a3      	b.n	8015858 <lv_meter_event+0x7bc>
 8015910:	08025c4c 	.word	0x08025c4c

08015914 <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 8015914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015918:	b08b      	sub	sp, #44	; 0x2c
 801591a:	4604      	mov	r4, r0
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 801591c:	2112      	movs	r1, #18
 801591e:	a805      	add	r0, sp, #20
 8015920:	f001 ff30 	bl	8017784 <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 8015924:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015926:	2b00      	cmp	r3, #0
 8015928:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801592a:	da53      	bge.n	80159d4 <lv_spinbox_updatevalue+0xc0>
        /*Add the sign*/
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 801592c:	2b00      	cmp	r3, #0
    uint8_t cur_shift_left = 0;
 801592e:	f04f 0500 	mov.w	r5, #0
        buf_p++;
 8015932:	f10d 0615 	add.w	r6, sp, #21
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8015936:	bfac      	ite	ge
 8015938:	222b      	movge	r2, #43	; 0x2b
 801593a:	222d      	movlt	r2, #45	; 0x2d
 801593c:	f88d 2014 	strb.w	r2, [sp, #20]
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%d", LV_ABS(spinbox->value));
 8015940:	2b00      	cmp	r3, #0
 8015942:	af01      	add	r7, sp, #4
 8015944:	f04f 010e 	mov.w	r1, #14
 8015948:	4a2e      	ldr	r2, [pc, #184]	; (8015a04 <lv_spinbox_updatevalue+0xf0>)
 801594a:	bfb8      	it	lt
 801594c:	425b      	neglt	r3, r3
 801594e:	4638      	mov	r0, r7
 8015950:	f002 fb22 	bl	8017f98 <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 8015954:	f894 8070 	ldrb.w	r8, [r4, #112]	; 0x70
 8015958:	4638      	mov	r0, r7
 801595a:	f008 090f 	and.w	r9, r8, #15
 801595e:	f7ea fc61 	bl	8000224 <strlen>
 8015962:	eba9 0100 	sub.w	r1, r9, r0
    if(lz_cnt > 0) {
 8015966:	2900      	cmp	r1, #0
 8015968:	dd0d      	ble.n	8015986 <lv_spinbox_updatevalue+0x72>
 801596a:	3001      	adds	r0, #1
 801596c:	183b      	adds	r3, r7, r0
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
 801596e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8015972:	429f      	cmp	r7, r3
            digits[i + lz_cnt] = digits[i];
 8015974:	545a      	strb	r2, [r3, r1]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8015976:	d1fa      	bne.n	801596e <lv_spinbox_updatevalue+0x5a>
        }
        for(i = 0; i < lz_cnt; i++) {
 8015978:	2200      	movs	r2, #0
            digits[i] = '0';
 801597a:	2030      	movs	r0, #48	; 0x30
        for(i = 0; i < lz_cnt; i++) {
 801597c:	3201      	adds	r2, #1
            digits[i] = '0';
 801597e:	f803 0b01 	strb.w	r0, [r3], #1
        for(i = 0; i < lz_cnt; i++) {
 8015982:	4291      	cmp	r1, r2
 8015984:	d1fa      	bne.n	801597c <lv_spinbox_updatevalue+0x68>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8015986:	f018 00f0 	ands.w	r0, r8, #240	; 0xf0
 801598a:	4639      	mov	r1, r7

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801598c:	f04f 0300 	mov.w	r3, #0
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8015990:	bf14      	ite	ne
 8015992:	ea4f 1818 	movne.w	r8, r8, lsr #4
 8015996:	46c8      	moveq	r8, r9
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015998:	4543      	cmp	r3, r8
 801599a:	d002      	beq.n	80159a2 <lv_spinbox_updatevalue+0x8e>
 801599c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159a0:	b9da      	cbnz	r2, 80159da <lv_spinbox_updatevalue+0xc6>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 80159a2:	b9f0      	cbnz	r0, 80159e2 <lv_spinbox_updatevalue+0xce>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 80159a4:	a905      	add	r1, sp, #20
 80159a6:	4620      	mov	r0, r4
 80159a8:	f00a f99c 	bl	801fce4 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 80159ac:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
    int32_t step    = spinbox->step;
 80159b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    while(step >= 10) {
        step /= 10;
 80159b2:	220a      	movs	r2, #10
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 80159b4:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 80159b8:	2b09      	cmp	r3, #9
 80159ba:	dc1e      	bgt.n	80159fa <lv_spinbox_updatevalue+0xe6>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 80159bc:	4541      	cmp	r1, r8

    cur_pos -= cur_shift_left;

    lv_textarea_set_cursor_pos(obj, cur_pos);
 80159be:	4620      	mov	r0, r4
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 80159c0:	bfc4      	itt	gt
 80159c2:	3101      	addgt	r1, #1
 80159c4:	b2c9      	uxtbgt	r1, r1
    cur_pos -= cur_shift_left;
 80159c6:	1b49      	subs	r1, r1, r5
    lv_textarea_set_cursor_pos(obj, cur_pos);
 80159c8:	b2c9      	uxtb	r1, r1
 80159ca:	f009 fedf 	bl	801f78c <lv_textarea_set_cursor_pos>
}
 80159ce:	b00b      	add	sp, #44	; 0x2c
 80159d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cur_shift_left++;
 80159d4:	2501      	movs	r5, #1
    char * buf_p = buf;
 80159d6:	ae05      	add	r6, sp, #20
 80159d8:	e7b2      	b.n	8015940 <lv_spinbox_updatevalue+0x2c>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80159da:	3301      	adds	r3, #1
        (*buf_p) = digits[i];
 80159dc:	f806 2b01 	strb.w	r2, [r6], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80159e0:	e7da      	b.n	8015998 <lv_spinbox_updatevalue+0x84>
        (*buf_p) = '.';
 80159e2:	222e      	movs	r2, #46	; 0x2e
 80159e4:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 80159e8:	4599      	cmp	r9, r3
 80159ea:	dddb      	ble.n	80159a4 <lv_spinbox_updatevalue+0x90>
 80159ec:	5cfa      	ldrb	r2, [r7, r3]
 80159ee:	2a00      	cmp	r2, #0
 80159f0:	d0d8      	beq.n	80159a4 <lv_spinbox_updatevalue+0x90>
 80159f2:	3301      	adds	r3, #1
            (*buf_p) = digits[i];
 80159f4:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 80159f8:	e7f6      	b.n	80159e8 <lv_spinbox_updatevalue+0xd4>
        cur_pos--;
 80159fa:	3901      	subs	r1, #1
        step /= 10;
 80159fc:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
 8015a00:	b2c9      	uxtb	r1, r1
 8015a02:	e7d9      	b.n	80159b8 <lv_spinbox_updatevalue+0xa4>
 8015a04:	08025c4c 	.word	0x08025c4c

08015a08 <lv_spinbox_constructor>:
    spinbox->range_max          = 99999;
 8015a08:	2200      	movs	r2, #0
 8015a0a:	4b11      	ldr	r3, [pc, #68]	; (8015a50 <lv_spinbox_constructor+0x48>)
{
 8015a0c:	b510      	push	{r4, lr}
 8015a0e:	460c      	mov	r4, r1
    spinbox->range_max          = 99999;
 8015a10:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    spinbox->step               = 1;
 8015a14:	2101      	movs	r1, #1
 8015a16:	4b0f      	ldr	r3, [pc, #60]	; (8015a54 <lv_spinbox_constructor+0x4c>)
    lv_textarea_set_one_line(obj, true);
 8015a18:	4620      	mov	r0, r4
    spinbox->step               = 1;
 8015a1a:	e9c4 311a 	strd	r3, r1, [r4, #104]	; 0x68
    spinbox->digit_count        = 5;
 8015a1e:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8015a22:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8015a26:	f023 0301 	bic.w	r3, r3, #1
 8015a2a:	f043 0305 	orr.w	r3, r3, #5
 8015a2e:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    lv_textarea_set_one_line(obj, true);
 8015a32:	f009 ff4a 	bl	801f8ca <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 8015a36:	4620      	mov	r0, r4
 8015a38:	2101      	movs	r1, #1
 8015a3a:	f009 ff3f 	bl	801f8bc <lv_textarea_set_cursor_click_pos>
    lv_obj_set_width(obj, LV_DPI_DEF);
 8015a3e:	4620      	mov	r0, r4
 8015a40:	2182      	movs	r1, #130	; 0x82
 8015a42:	f7ee fedb 	bl	80047fc <lv_obj_set_width>
    lv_spinbox_updatevalue(obj);
 8015a46:	4620      	mov	r0, r4
}
 8015a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_spinbox_updatevalue(obj);
 8015a4c:	f7ff bf62 	b.w	8015914 <lv_spinbox_updatevalue>
 8015a50:	0001869f 	.word	0x0001869f
 8015a54:	fffe7961 	.word	0xfffe7961

08015a58 <lv_spinbox_step_next>:
    int32_t new_step = spinbox->step / 10;
 8015a58:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    if((new_step) > 0)
 8015a5a:	2b09      	cmp	r3, #9
    int32_t new_step = spinbox->step / 10;
 8015a5c:	bfca      	itet	gt
 8015a5e:	220a      	movgt	r2, #10
        spinbox->step = 1;
 8015a60:	2301      	movle	r3, #1
    int32_t new_step = spinbox->step / 10;
 8015a62:	fb93 f3f2 	sdivgt	r3, r3, r2
 8015a66:	66c3      	str	r3, [r0, #108]	; 0x6c
    lv_spinbox_updatevalue(obj);
 8015a68:	f7ff bf54 	b.w	8015914 <lv_spinbox_updatevalue>

08015a6c <lv_spinbox_step_prev>:
    int32_t new_step = spinbox->step * 10;
 8015a6c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8015a6e:	220a      	movs	r2, #10
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8015a70:	6e41      	ldr	r1, [r0, #100]	; 0x64
    int32_t new_step = spinbox->step * 10;
 8015a72:	435a      	muls	r2, r3
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8015a74:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	bfb8      	it	lt
 8015a7a:	425b      	neglt	r3, r3
 8015a7c:	428b      	cmp	r3, r1
 8015a7e:	bfb8      	it	lt
 8015a80:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 8015a82:	4293      	cmp	r3, r2
 8015a84:	bfa8      	it	ge
 8015a86:	66c2      	strge	r2, [r0, #108]	; 0x6c
    lv_spinbox_updatevalue(obj);
 8015a88:	f7ff bf44 	b.w	8015914 <lv_spinbox_updatevalue>

08015a8c <lv_spinbox_increment>:
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8015a8c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015a8e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8015a90:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8015a92:	b410      	push	{r4}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8015a94:	185c      	adds	r4, r3, r1
 8015a96:	4294      	cmp	r4, r2
 8015a98:	dc0c      	bgt.n	8015ab4 <lv_spinbox_increment+0x28>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8015a9a:	2c00      	cmp	r4, #0
 8015a9c:	dd03      	ble.n	8015aa6 <lv_spinbox_increment+0x1a>
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	bfbc      	itt	lt
 8015aa2:	425b      	neglt	r3, r3
 8015aa4:	6603      	strlt	r3, [r0, #96]	; 0x60
        spinbox->value += spinbox->step;
 8015aa6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015aa8:	440b      	add	r3, r1
            spinbox->value = spinbox->range_min;
 8015aaa:	6603      	str	r3, [r0, #96]	; 0x60
}
 8015aac:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8015ab0:	f7ff bf30 	b.w	8015914 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8015ab4:	f890 1071 	ldrb.w	r1, [r0, #113]	; 0x71
 8015ab8:	07c9      	lsls	r1, r1, #31
 8015aba:	d503      	bpl.n	8015ac4 <lv_spinbox_increment+0x38>
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d101      	bne.n	8015ac4 <lv_spinbox_increment+0x38>
            spinbox->value = spinbox->range_min;
 8015ac0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8015ac2:	e7f2      	b.n	8015aaa <lv_spinbox_increment+0x1e>
            spinbox->value = spinbox->range_max;
 8015ac4:	6602      	str	r2, [r0, #96]	; 0x60
 8015ac6:	e7f1      	b.n	8015aac <lv_spinbox_increment+0x20>

08015ac8 <lv_spinbox_decrement>:
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8015ac8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015aca:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8015acc:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 8015ace:	b410      	push	{r4}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8015ad0:	1a5c      	subs	r4, r3, r1
 8015ad2:	4294      	cmp	r4, r2
 8015ad4:	db0c      	blt.n	8015af0 <lv_spinbox_decrement+0x28>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8015ad6:	2c00      	cmp	r4, #0
 8015ad8:	da03      	bge.n	8015ae2 <lv_spinbox_decrement+0x1a>
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	bfc4      	itt	gt
 8015ade:	425b      	neggt	r3, r3
 8015ae0:	6603      	strgt	r3, [r0, #96]	; 0x60
        spinbox->value -= spinbox->step;
 8015ae2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8015ae4:	1a5b      	subs	r3, r3, r1
            spinbox->value = spinbox->range_max;
 8015ae6:	6603      	str	r3, [r0, #96]	; 0x60
}
 8015ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8015aec:	f7ff bf12 	b.w	8015914 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8015af0:	f890 1071 	ldrb.w	r1, [r0, #113]	; 0x71
 8015af4:	07c9      	lsls	r1, r1, #31
 8015af6:	d503      	bpl.n	8015b00 <lv_spinbox_decrement+0x38>
 8015af8:	4293      	cmp	r3, r2
 8015afa:	d101      	bne.n	8015b00 <lv_spinbox_decrement+0x38>
            spinbox->value = spinbox->range_max;
 8015afc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8015afe:	e7f2      	b.n	8015ae6 <lv_spinbox_decrement+0x1e>
            spinbox->value = spinbox->range_min;
 8015b00:	6602      	str	r2, [r0, #96]	; 0x60
 8015b02:	e7f1      	b.n	8015ae8 <lv_spinbox_decrement+0x20>

08015b04 <lv_spinbox_event>:
{
 8015b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8015b06:	484e      	ldr	r0, [pc, #312]	; (8015c40 <lv_spinbox_event+0x13c>)
{
 8015b08:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015b0a:	f7eb ff7e 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015b0e:	2801      	cmp	r0, #1
    res = lv_obj_event_base(MY_CLASS, e);
 8015b10:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return;
 8015b12:	d15c      	bne.n	8015bce <lv_spinbox_event+0xca>
    lv_event_code_t code = lv_event_get_code(e);
 8015b14:	4628      	mov	r0, r5
 8015b16:	f7ec f811 	bl	8001b3c <lv_event_get_code>
 8015b1a:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	f7ec f80b 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 8015b22:	2f08      	cmp	r7, #8
    lv_obj_t * obj = lv_event_get_target(e);
 8015b24:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 8015b26:	d167      	bne.n	8015bf8 <lv_spinbox_event+0xf4>
        lv_indev_t * indev = lv_indev_get_act();
 8015b28:	f7ec fa7c 	bl	8002024 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8015b2c:	f7ec fa80 	bl	8002030 <lv_indev_get_type>
 8015b30:	2804      	cmp	r0, #4
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8015b32:	4620      	mov	r0, r4
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8015b34:	d123      	bne.n	8015b7e <lv_spinbox_event+0x7a>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8015b36:	f7ed ff6b 	bl	8003a10 <lv_obj_get_group>
 8015b3a:	f7ec f9ff 	bl	8001f3c <lv_group_get_editing>
 8015b3e:	2800      	cmp	r0, #0
 8015b40:	d045      	beq.n	8015bce <lv_spinbox_event+0xca>
                if(spinbox->step > 1) {
 8015b42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	dd04      	ble.n	8015b52 <lv_spinbox_event+0x4e>
                    lv_spinbox_step_next(obj);
 8015b48:	4620      	mov	r0, r4
}
 8015b4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_next(obj);
 8015b4e:	f7ff bf83 	b.w	8015a58 <lv_spinbox_step_next>
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015b52:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8015b56:	2100      	movs	r1, #0
                        int32_t new_step = spinbox->step * 10;
 8015b58:	200a      	movs	r0, #10
                    spinbox->step = 1;
 8015b5a:	66e6      	str	r6, [r4, #108]	; 0x6c
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015b5c:	f002 020f 	and.w	r2, r2, #15
 8015b60:	4291      	cmp	r1, r2
 8015b62:	d304      	bcc.n	8015b6e <lv_spinbox_event+0x6a>
                    lv_spinbox_step_prev(obj);
 8015b64:	4620      	mov	r0, r4
}
 8015b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_prev(obj);
 8015b6a:	f7ff bf7f 	b.w	8015a6c <lv_spinbox_step_prev>
                        int32_t new_step = spinbox->step * 10;
 8015b6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                        if(new_step >= spinbox->range_max) break;
 8015b70:	6e65      	ldr	r5, [r4, #100]	; 0x64
                        int32_t new_step = spinbox->step * 10;
 8015b72:	4343      	muls	r3, r0
                        if(new_step >= spinbox->range_max) break;
 8015b74:	42ab      	cmp	r3, r5
 8015b76:	daf5      	bge.n	8015b64 <lv_spinbox_event+0x60>
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015b78:	3101      	adds	r1, #1
                        spinbox->step = new_step;
 8015b7a:	66e3      	str	r3, [r4, #108]	; 0x6c
                    for(i = 0; i < spinbox->digit_count; i++) {
 8015b7c:	e7f0      	b.n	8015b60 <lv_spinbox_event+0x5c>
            const char * txt = lv_textarea_get_text(obj);
 8015b7e:	f009 fed7 	bl	801f930 <lv_textarea_get_text>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8015b82:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8015b84:	5d43      	ldrb	r3, [r0, r5]
 8015b86:	2b2e      	cmp	r3, #46	; 0x2e
 8015b88:	d122      	bne.n	8015bd0 <lv_spinbox_event+0xcc>
                lv_textarea_cursor_left(obj);
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f00a f930 	bl	801fdf0 <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 8015b90:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
            uint16_t cp = spinbox->ta.cursor.pos;
 8015b94:	6c20      	ldr	r0, [r4, #64]	; 0x40
            size_t len = spinbox->digit_count - 1;
 8015b96:	f001 030f 	and.w	r3, r1, #15
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8015b9a:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
            size_t len = spinbox->digit_count - 1;
 8015b9e:	f103 33ff 	add.w	r3, r3, #4294967295
            uint16_t cp = spinbox->ta.cursor.pos;
 8015ba2:	b282      	uxth	r2, r0
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8015ba4:	d905      	bls.n	8015bb2 <lv_spinbox_event+0xae>
 8015ba6:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8015baa:	bf1c      	itt	ne
 8015bac:	f102 32ff 	addne.w	r2, r2, #4294967295
 8015bb0:	b292      	uxthne	r2, r2
            uint32_t pos = len - cp;
 8015bb2:	1a9b      	subs	r3, r3, r2
            if(spinbox->range_min < 0) pos++;
 8015bb4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8015bb6:	200a      	movs	r0, #10
            if(spinbox->range_min < 0) pos++;
 8015bb8:	2a00      	cmp	r2, #0
            spinbox->step = 1;
 8015bba:	f04f 0201 	mov.w	r2, #1
            if(spinbox->range_min < 0) pos++;
 8015bbe:	bfb8      	it	lt
 8015bc0:	3301      	addlt	r3, #1
            spinbox->step = 1;
 8015bc2:	66e2      	str	r2, [r4, #108]	; 0x6c
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	b291      	uxth	r1, r2
 8015bc8:	3201      	adds	r2, #1
 8015bca:	428b      	cmp	r3, r1
 8015bcc:	d810      	bhi.n	8015bf0 <lv_spinbox_event+0xec>
}
 8015bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            size_t txt_len = strlen(txt);
 8015bd0:	f7ea fb28 	bl	8000224 <strlen>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 8015bd4:	42a8      	cmp	r0, r5
 8015bd6:	d104      	bne.n	8015be2 <lv_spinbox_event+0xde>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 8015bd8:	1e41      	subs	r1, r0, #1
                lv_textarea_set_cursor_pos(obj, 1);
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f009 fdd6 	bl	801f78c <lv_textarea_set_cursor_pos>
 8015be0:	e7d6      	b.n	8015b90 <lv_spinbox_event+0x8c>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 8015be2:	2d00      	cmp	r5, #0
 8015be4:	d1d4      	bne.n	8015b90 <lv_spinbox_event+0x8c>
 8015be6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	dad1      	bge.n	8015b90 <lv_spinbox_event+0x8c>
                lv_textarea_set_cursor_pos(obj, 1);
 8015bec:	4631      	mov	r1, r6
 8015bee:	e7f4      	b.n	8015bda <lv_spinbox_event+0xd6>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8015bf0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8015bf2:	4341      	muls	r1, r0
 8015bf4:	66e1      	str	r1, [r4, #108]	; 0x6c
 8015bf6:	e7e6      	b.n	8015bc6 <lv_spinbox_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 8015bf8:	2f0d      	cmp	r7, #13
 8015bfa:	d1e8      	bne.n	8015bce <lv_spinbox_event+0xca>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8015bfc:	f7ec fa12 	bl	8002024 <lv_indev_get_act>
 8015c00:	f7ec fa16 	bl	8002030 <lv_indev_get_type>
 8015c04:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8015c06:	4628      	mov	r0, r5
 8015c08:	f7eb ff9a 	bl	8001b40 <lv_event_get_param>
 8015c0c:	6801      	ldr	r1, [r0, #0]
                lv_spinbox_increment(obj);
 8015c0e:	4620      	mov	r0, r4
        if(c == LV_KEY_RIGHT) {
 8015c10:	2913      	cmp	r1, #19
 8015c12:	d105      	bne.n	8015c20 <lv_spinbox_event+0x11c>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8015c14:	2e04      	cmp	r6, #4
 8015c16:	d198      	bne.n	8015b4a <lv_spinbox_event+0x46>
}
 8015c18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_increment(obj);
 8015c1c:	f7ff bf36 	b.w	8015a8c <lv_spinbox_increment>
        else if(c == LV_KEY_LEFT) {
 8015c20:	2914      	cmp	r1, #20
 8015c22:	d105      	bne.n	8015c30 <lv_spinbox_event+0x12c>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8015c24:	2e04      	cmp	r6, #4
 8015c26:	d19e      	bne.n	8015b66 <lv_spinbox_event+0x62>
}
 8015c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_decrement(obj);
 8015c2c:	f7ff bf4c 	b.w	8015ac8 <lv_spinbox_decrement>
        else if(c == LV_KEY_UP) {
 8015c30:	2911      	cmp	r1, #17
 8015c32:	d0f1      	beq.n	8015c18 <lv_spinbox_event+0x114>
        else if(c == LV_KEY_DOWN) {
 8015c34:	2912      	cmp	r1, #18
 8015c36:	d0f7      	beq.n	8015c28 <lv_spinbox_event+0x124>
}
 8015c38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_textarea_add_char(obj, c);
 8015c3c:	f009 bf4c 	b.w	801fad8 <lv_textarea_add_char>
 8015c40:	080261b8 	.word	0x080261b8

08015c44 <lv_tabview_destructor>:
{
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    uint32_t i;
    if(tabview->tab_pos & LV_DIR_VER) {
 8015c44:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8015c48:	f013 0f0c 	tst.w	r3, #12
{
 8015c4c:	b570      	push	{r4, r5, r6, lr}
 8015c4e:	460c      	mov	r4, r1
    if(tabview->tab_pos & LV_DIR_VER) {
 8015c50:	d112      	bne.n	8015c78 <lv_tabview_destructor+0x34>
            tabview->map[i] = NULL;
        }
    }


    lv_mem_free(tabview->map);
 8015c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015c54:	f001 fb96 	bl	8017384 <lv_mem_free>
    tabview->map = NULL;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	6263      	str	r3, [r4, #36]	; 0x24
}
 8015c5c:	bd70      	pop	{r4, r5, r6, pc}
            lv_mem_free(tabview->map[i]);
 8015c5e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015c62:	f001 fb8f 	bl	8017384 <lv_mem_free>
            tabview->map[i] = NULL;
 8015c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c68:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 8015c6c:	3501      	adds	r5, #1
 8015c6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8015c70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015c72:	42ab      	cmp	r3, r5
 8015c74:	d8f3      	bhi.n	8015c5e <lv_tabview_destructor+0x1a>
 8015c76:	e7ec      	b.n	8015c52 <lv_tabview_destructor+0xe>
 8015c78:	2500      	movs	r5, #0
            tabview->map[i] = NULL;
 8015c7a:	462e      	mov	r6, r5
 8015c7c:	e7f7      	b.n	8015c6e <lv_tabview_destructor+0x2a>
	...

08015c80 <lv_tabview_constructor>:
    tabview->tab_pos = tabpos_create;
 8015c80:	4b46      	ldr	r3, [pc, #280]	; (8015d9c <lv_tabview_constructor+0x11c>)
{
 8015c82:	b570      	push	{r4, r5, r6, lr}
    tabview->tab_pos = tabpos_create;
 8015c84:	781b      	ldrb	r3, [r3, #0]
{
 8015c86:	460d      	mov	r5, r1
    tabview->tab_pos = tabpos_create;
 8015c88:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    switch(tabview->tab_pos) {
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	2b07      	cmp	r3, #7
 8015c90:	d809      	bhi.n	8015ca6 <lv_tabview_constructor+0x26>
 8015c92:	e8df f003 	tbb	[pc, r3]
 8015c96:	5e5c      	.short	0x5e5c
 8015c98:	08080408 	.word	0x08080408
 8015c9c:	5a08      	.short	0x5a08
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8015c9e:	2101      	movs	r1, #1
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	f7f9 fe7d 	bl	800f9a0 <lv_obj_set_flex_flow>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8015ca6:	f242 0264 	movw	r2, #8292	; 0x2064
 8015caa:	4628      	mov	r0, r5
 8015cac:	4611      	mov	r1, r2
 8015cae:	f7ee fdd9 	bl	8004864 <lv_obj_set_size>
    btnm = lv_btnmatrix_create(obj);
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	f005 f9ea 	bl	801b08c <lv_btnmatrix_create>
 8015cb8:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 8015cba:	4628      	mov	r0, r5
 8015cbc:	f7ed fe30 	bl	8003920 <lv_obj_create>
    lv_btnmatrix_set_one_checked(btnm, true);
 8015cc0:	2101      	movs	r1, #1
    cont = lv_obj_create(obj);
 8015cc2:	4604      	mov	r4, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	f005 fcc3 	bl	801b650 <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8015cca:	2004      	movs	r0, #4
 8015ccc:	f001 fcdc 	bl	8017688 <lv_mem_alloc>
    tabview->map[0] = "";
 8015cd0:	4b33      	ldr	r3, [pc, #204]	; (8015da0 <lv_tabview_constructor+0x120>)
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8015cd2:	4601      	mov	r1, r0
 8015cd4:	6268      	str	r0, [r5, #36]	; 0x24
    tabview->map[0] = "";
 8015cd6:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8015cd8:	4630      	mov	r0, r6
 8015cda:	f005 f9e3 	bl	801b0a4 <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8015cde:	2300      	movs	r3, #0
 8015ce0:	221c      	movs	r2, #28
 8015ce2:	4930      	ldr	r1, [pc, #192]	; (8015da4 <lv_tabview_constructor+0x124>)
 8015ce4:	4630      	mov	r0, r6
 8015ce6:	f7eb ff3f 	bl	8001b68 <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 8015cea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015cee:	4630      	mov	r0, r6
 8015cf0:	f7ed fe22 	bl	8003938 <lv_obj_add_flag>
    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	492c      	ldr	r1, [pc, #176]	; (8015da8 <lv_tabview_constructor+0x128>)
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	f7eb ff34 	bl	8001b68 <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 8015d00:	2100      	movs	r1, #0
 8015d02:	4620      	mov	r0, r4
 8015d04:	f7ef fea5 	bl	8005a52 <lv_obj_set_scrollbar_mode>
    switch(tabview->tab_pos) {
 8015d08:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8015d0c:	2b04      	cmp	r3, #4
 8015d0e:	d024      	beq.n	8015d5a <lv_tabview_constructor+0xda>
 8015d10:	d821      	bhi.n	8015d56 <lv_tabview_constructor+0xd6>
 8015d12:	3b01      	subs	r3, #1
 8015d14:	2b01      	cmp	r3, #1
 8015d16:	d932      	bls.n	8015d7e <lv_tabview_constructor+0xfe>
    lv_group_t * g = lv_group_get_default();
 8015d18:	f7eb ffea 	bl	8001cf0 <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 8015d1c:	b110      	cbz	r0, 8015d24 <lv_tabview_constructor+0xa4>
 8015d1e:	4631      	mov	r1, r6
 8015d20:	f7ec f818 	bl	8001d54 <lv_group_add_obj>
    lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 8015d24:	4620      	mov	r0, r4
 8015d26:	2100      	movs	r1, #0
 8015d28:	f7f9 fe3a 	bl	800f9a0 <lv_obj_set_flex_flow>
    lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	2103      	movs	r1, #3
 8015d30:	f7ef feb2 	bl	8005a98 <lv_obj_set_scroll_snap_x>
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 8015d34:	4620      	mov	r0, r4
 8015d36:	2180      	movs	r1, #128	; 0x80
 8015d38:	f7ed fdfe 	bl	8003938 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8015d3c:	4620      	mov	r0, r4
 8015d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 8015d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8015d46:	f7ed be1a 	b.w	800397e <lv_obj_clear_flag>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 8015d4a:	2109      	movs	r1, #9
 8015d4c:	e7a8      	b.n	8015ca0 <lv_tabview_constructor+0x20>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8015d4e:	2100      	movs	r1, #0
 8015d50:	e7a6      	b.n	8015ca0 <lv_tabview_constructor+0x20>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8015d52:	2108      	movs	r1, #8
 8015d54:	e7a4      	b.n	8015ca0 <lv_tabview_constructor+0x20>
    switch(tabview->tab_pos) {
 8015d56:	2b08      	cmp	r3, #8
 8015d58:	d1de      	bne.n	8015d18 <lv_tabview_constructor+0x98>
         lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 8015d5a:	4b14      	ldr	r3, [pc, #80]	; (8015dac <lv_tabview_constructor+0x12c>)
 8015d5c:	f242 0164 	movw	r1, #8292	; 0x2064
 8015d60:	4630      	mov	r0, r6
 8015d62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015d66:	f7ee fd7d 	bl	8004864 <lv_obj_set_size>
         lv_obj_set_width(cont, LV_PCT(100));
 8015d6a:	f242 0164 	movw	r1, #8292	; 0x2064
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f7ee fd44 	bl	80047fc <lv_obj_set_width>
         lv_obj_set_flex_grow(cont, 1);
 8015d74:	2101      	movs	r1, #1
 8015d76:	4620      	mov	r0, r4
 8015d78:	f7f9 fe52 	bl	800fa20 <lv_obj_set_flex_grow>
         break;
 8015d7c:	e7cc      	b.n	8015d18 <lv_tabview_constructor+0x98>
         lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 8015d7e:	4b0b      	ldr	r3, [pc, #44]	; (8015dac <lv_tabview_constructor+0x12c>)
 8015d80:	4630      	mov	r0, r6
 8015d82:	f242 0264 	movw	r2, #8292	; 0x2064
 8015d86:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015d8a:	f7ee fd6b 	bl	8004864 <lv_obj_set_size>
         lv_obj_set_height(cont, LV_PCT(100));
 8015d8e:	f242 0164 	movw	r1, #8292	; 0x2064
 8015d92:	4620      	mov	r0, r4
 8015d94:	f7ee fd4c 	bl	8004830 <lv_obj_set_height>
 8015d98:	e7ec      	b.n	8015d74 <lv_tabview_constructor+0xf4>
 8015d9a:	bf00      	nop
 8015d9c:	200031ee 	.word	0x200031ee
 8015da0:	0802a5e7 	.word	0x0802a5e7
 8015da4:	08015efb 	.word	0x08015efb
 8015da8:	08015e71 	.word	0x08015e71
 8015dac:	200031f0 	.word	0x200031f0

08015db0 <lv_tabview_get_content>:
    return lv_obj_get_child(tv, 1);
 8015db0:	2101      	movs	r1, #1
 8015db2:	f7f1 bc3e 	b.w	8007632 <lv_obj_get_child>

08015db6 <lv_tabview_get_tab_btns>:
    return lv_obj_get_child(tv, 0);
 8015db6:	2100      	movs	r1, #0
 8015db8:	f7f1 bc3b 	b.w	8007632 <lv_obj_get_child>

08015dbc <lv_tabview_set_act>:
    if(id >= tabview->tab_cnt) {
 8015dbc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8015dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(id >= tabview->tab_cnt) {
 8015dc2:	428b      	cmp	r3, r1
{
 8015dc4:	4605      	mov	r5, r0
 8015dc6:	4689      	mov	r9, r1
 8015dc8:	4617      	mov	r7, r2
        id = tabview->tab_cnt - 1;
 8015dca:	bf98      	it	ls
 8015dcc:	f103 39ff 	addls.w	r9, r3, #4294967295
    lv_obj_update_layout(obj);
 8015dd0:	f7ef fc22 	bl	8005618 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	f7ff ffeb 	bl	8015db0 <lv_tabview_get_content>
    if(cont == NULL) return;
 8015dda:	4606      	mov	r6, r0
 8015ddc:	b358      	cbz	r0, 8015e36 <lv_tabview_set_act+0x7a>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8015dde:	f241 0215 	movw	r2, #4117	; 0x1015
 8015de2:	2100      	movs	r1, #0
 8015de4:	f7f1 f8d8 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015de8:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_content_width(obj);
 8015dec:	4628      	mov	r0, r5
 8015dee:	f7ee fe62 	bl	8004ab6 <lv_obj_get_content_width>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8015df2:	2100      	movs	r1, #0
 8015df4:	4604      	mov	r4, r0
 8015df6:	f241 426a 	movw	r2, #5226	; 0x146a
 8015dfa:	4628      	mov	r0, r5
 8015dfc:	fa1f f889 	uxth.w	r8, r9
 8015e00:	f7f1 f8ca 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8015e04:	eb04 030a 	add.w	r3, r4, sl
 8015e08:	b2c0      	uxtb	r0, r0
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8015e0a:	463a      	mov	r2, r7
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8015e0c:	2801      	cmp	r0, #1
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8015e0e:	4630      	mov	r0, r6
        lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 8015e10:	bf12      	itee	ne
 8015e12:	fb13 f108 	smulbbne	r1, r3, r8
        int32_t id_rtl = -(int32_t)id;
 8015e16:	f1c9 0100 	rsbeq	r1, r9, #0
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 8015e1a:	fb13 f101 	smulbbeq	r1, r3, r1
 8015e1e:	b209      	sxth	r1, r1
 8015e20:	f7f0 f992 	bl	8006148 <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 8015e24:	4628      	mov	r0, r5
 8015e26:	f7ff ffc6 	bl	8015db6 <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 8015e2a:	2280      	movs	r2, #128	; 0x80
 8015e2c:	4641      	mov	r1, r8
 8015e2e:	f005 f969 	bl	801b104 <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 8015e32:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
}
 8015e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08015e3c <lv_tabview_event>:

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8015e3c:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8015e3e:	480b      	ldr	r0, [pc, #44]	; (8015e6c <lv_tabview_event+0x30>)
{
 8015e40:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8015e42:	f7eb fde2 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015e46:	2801      	cmp	r0, #1
 8015e48:	d10e      	bne.n	8015e68 <lv_tabview_event+0x2c>

    lv_event_code_t code = lv_event_get_code(e);
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	f7eb fe76 	bl	8001b3c <lv_event_get_code>
 8015e50:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8015e52:	4620      	mov	r0, r4
 8015e54:	f7eb fe70 	bl	8001b38 <lv_event_get_target>

    if(code == LV_EVENT_SIZE_CHANGED) {
 8015e58:	2d23      	cmp	r5, #35	; 0x23
 8015e5a:	d105      	bne.n	8015e68 <lv_tabview_event+0x2c>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    }
}
 8015e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8015e64:	f7ff bfaa 	b.w	8015dbc <lv_tabview_set_act>
}
 8015e68:	bd38      	pop	{r3, r4, r5, pc}
 8015e6a:	bf00      	nop
 8015e6c:	080261d4 	.word	0x080261d4

08015e70 <cont_scroll_end_event_cb>:

    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 8015e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e72:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 8015e74:	f7eb fe60 	bl	8001b38 <lv_event_get_target>
 8015e78:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f7eb fe5e 	bl	8001b3c <lv_event_get_code>
 8015e80:	4606      	mov	r6, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8015e82:	4628      	mov	r0, r5
 8015e84:	f7f1 fbd2 	bl	800762c <lv_obj_get_parent>
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8015e88:	2e25      	cmp	r6, #37	; 0x25
    lv_obj_t * tv = lv_obj_get_parent(cont);
 8015e8a:	4604      	mov	r4, r0
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8015e8c:	d105      	bne.n	8015e9a <cont_scroll_end_event_cb+0x2a>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 8015e8e:	2200      	movs	r2, #0
 8015e90:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8015e92:	f7ff ff93 	bl	8015dbc <lv_tabview_set_act>

        if(t < 0) t = 0;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
        lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8015e96:	b002      	add	sp, #8
 8015e98:	bd70      	pop	{r4, r5, r6, pc}
    else if(code == LV_EVENT_SCROLL_END) {
 8015e9a:	2e0a      	cmp	r6, #10
 8015e9c:	d1fb      	bne.n	8015e96 <cont_scroll_end_event_cb+0x26>
        lv_obj_get_scroll_end(cont, &p);
 8015e9e:	a901      	add	r1, sp, #4
 8015ea0:	4628      	mov	r0, r5
 8015ea2:	f7ef ff73 	bl	8005d8c <lv_obj_get_scroll_end>
        lv_coord_t w = lv_obj_get_content_width(cont);
 8015ea6:	4628      	mov	r0, r5
 8015ea8:	f7ee fe05 	bl	8004ab6 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8015eac:	f241 426a 	movw	r2, #5226	; 0x146a
 8015eb0:	4606      	mov	r6, r0
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f7f1 f86f 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8015eba:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8015ebe:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8015ec0:	0ff3      	lsrs	r3, r6, #31
 8015ec2:	2801      	cmp	r0, #1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8015ec4:	4620      	mov	r0, r4
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8015ec6:	bf0b      	itete	eq
 8015ec8:	199a      	addeq	r2, r3, r6
        else t = (p.x + w/ 2) / w;
 8015eca:	199b      	addne	r3, r3, r6
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8015ecc:	f342 024f 	sbfxeq	r2, r2, #1, #16
        else t = (p.x + w/ 2) / w;
 8015ed0:	f343 034f 	sbfxne	r3, r3, #1, #16
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8015ed4:	bf0b      	itete	eq
 8015ed6:	1b52      	subeq	r2, r2, r5
        else t = (p.x + w/ 2) / w;
 8015ed8:	18e9      	addne	r1, r5, r3
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8015eda:	fb92 f1f6 	sdiveq	r1, r2, r6
        else t = (p.x + w/ 2) / w;
 8015ede:	fb91 f1f6 	sdivne	r1, r1, r6
 8015ee2:	b209      	sxth	r1, r1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8015eea:	f7ff ff67 	bl	8015dbc <lv_tabview_set_act>
        lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 8015eee:	2200      	movs	r2, #0
 8015ef0:	211c      	movs	r1, #28
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	f7eb fe00 	bl	8001af8 <lv_event_send>
}
 8015ef8:	e7cd      	b.n	8015e96 <cont_scroll_end_event_cb+0x26>

08015efa <btns_value_changed_event_cb>:
{
 8015efa:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 8015efc:	f7eb fe1c 	bl	8001b38 <lv_event_get_target>
 8015f00:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 8015f02:	f7f1 fb93 	bl	800762c <lv_obj_get_parent>
 8015f06:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8015f08:	4628      	mov	r0, r5
 8015f0a:	f005 f927 	bl	801b15c <lv_btnmatrix_get_selected_btn>
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8015f0e:	2201      	movs	r2, #1
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8015f10:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8015f12:	4620      	mov	r0, r4
 8015f14:	f7ff ff52 	bl	8015dbc <lv_tabview_set_act>
    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 8015f18:	4620      	mov	r0, r4
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	211c      	movs	r1, #28
}
 8015f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 8015f22:	f7eb bde9 	b.w	8001af8 <lv_event_send>
	...

08015f28 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8015f28:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8015f2a:	f242 0264 	movw	r2, #8292	; 0x2064
{
 8015f2e:	460c      	mov	r4, r1
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8015f30:	4611      	mov	r1, r2
 8015f32:	4620      	mov	r0, r4
 8015f34:	f7ee fc96 	bl	8004864 <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 8015f38:	2300      	movs	r3, #0
 8015f3a:	4909      	ldr	r1, [pc, #36]	; (8015f60 <lv_tileview_constructor+0x38>)
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	461a      	mov	r2, r3
 8015f40:	f7eb fe12 	bl	8001b68 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 8015f44:	4620      	mov	r0, r4
 8015f46:	2180      	movs	r1, #128	; 0x80
 8015f48:	f7ed fcf6 	bl	8003938 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	2103      	movs	r1, #3
 8015f50:	f7ef fda2 	bl	8005a98 <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8015f54:	4620      	mov	r0, r4
 8015f56:	2103      	movs	r1, #3

}
 8015f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8015f5c:	f7ef bda7 	b.w	8005aae <lv_obj_set_scroll_snap_y>
 8015f60:	08015f65 	.word	0x08015f65

08015f64 <tileview_event_cb>:
        lv_obj_set_scroll_dir(parent, create_dir);
    }
}

static void tileview_event_cb(lv_event_t * e)
{
 8015f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f68:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 8015f6a:	f7eb fde7 	bl	8001b3c <lv_event_get_code>
 8015f6e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015f70:	4620      	mov	r0, r4
 8015f72:	f7eb fde1 	bl	8001b38 <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 8015f76:	2d0a      	cmp	r5, #10
    lv_obj_t * obj = lv_event_get_target(e);
 8015f78:	4604      	mov	r4, r0
    if(code == LV_EVENT_SCROLL_END) {
 8015f7a:	d146      	bne.n	801600a <tileview_event_cb+0xa6>
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015f7c:	f7ee fd9b 	bl	8004ab6 <lv_obj_get_content_width>
 8015f80:	4605      	mov	r5, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8015f82:	4620      	mov	r0, r4
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
        lv_coord_t ty = ((top + (h / 2)) / h) * h;

        lv_dir_t dir = LV_DIR_ALL;
        uint32_t i;
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8015f84:	f04f 0800 	mov.w	r8, #0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8015f88:	f7ee fdaf 	bl	8004aea <lv_obj_get_content_height>
        lv_obj_get_scroll_end(obj, &scroll_end);
 8015f8c:	a901      	add	r1, sp, #4
        lv_coord_t h = lv_obj_get_content_height(obj);
 8015f8e:	4606      	mov	r6, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 8015f90:	4620      	mov	r0, r4
 8015f92:	f7ef fefb 	bl	8005d8c <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8015f96:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015f9a:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
 8015f9e:	f342 024f 	sbfx	r2, r2, #1, #16
 8015fa2:	4413      	add	r3, r2
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8015fa4:	eb06 72d6 	add.w	r2, r6, r6, lsr #31
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8015fa8:	fb93 f3f5 	sdiv	r3, r3, r5
 8015fac:	fb13 f505 	smulbb	r5, r3, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8015fb0:	f342 024f 	sbfx	r2, r2, #1, #16
 8015fb4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8015fb8:	b22d      	sxth	r5, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8015fba:	4413      	add	r3, r2
 8015fbc:	fb93 f3f6 	sdiv	r3, r3, r6
 8015fc0:	fb13 f606 	smulbb	r6, r3, r6
 8015fc4:	b236      	sxth	r6, r6
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f7f1 fb42 	bl	8007650 <lv_obj_get_child_cnt>
 8015fcc:	4540      	cmp	r0, r8
 8015fce:	d801      	bhi.n	8015fd4 <tileview_event_cb+0x70>
        lv_dir_t dir = LV_DIR_ALL;
 8015fd0:	250f      	movs	r5, #15
 8015fd2:	e016      	b.n	8016002 <tileview_event_cb+0x9e>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8015fd4:	4641      	mov	r1, r8
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	f7f1 fb2b 	bl	8007632 <lv_obj_get_child>
 8015fdc:	4607      	mov	r7, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 8015fde:	f7ee fd1b 	bl	8004a18 <lv_obj_get_x>
 8015fe2:	4681      	mov	r9, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8015fe4:	4638      	mov	r0, r7
 8015fe6:	f7ee fd33 	bl	8004a50 <lv_obj_get_y>
            if(x == tx && y == ty) {
 8015fea:	454d      	cmp	r5, r9
 8015fec:	d110      	bne.n	8016010 <tileview_event_cb+0xac>
 8015fee:	4286      	cmp	r6, r0
 8015ff0:	d10e      	bne.n	8016010 <tileview_event_cb+0xac>
                lv_tileview_tile_t * tile = (lv_tileview_tile_t *)tile_obj;
                tv->tile_act = (lv_obj_t *)tile;
 8015ff2:	6267      	str	r7, [r4, #36]	; 0x24
                dir = tile->dir;
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	211c      	movs	r1, #28
 8015ff8:	4620      	mov	r0, r4
                dir = tile->dir;
 8015ffa:	f897 5024 	ldrb.w	r5, [r7, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8015ffe:	f7eb fd7b 	bl	8001af8 <lv_event_send>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
 8016002:	4629      	mov	r1, r5
 8016004:	4620      	mov	r0, r4
 8016006:	f7ef fd38 	bl	8005a7a <lv_obj_set_scroll_dir>
    }
}
 801600a:	b003      	add	sp, #12
 801600c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8016010:	f108 0801 	add.w	r8, r8, #1
 8016014:	e7d7      	b.n	8015fc6 <tileview_event_cb+0x62>
	...

08016018 <lv_tileview_tile_constructor>:
{
 8016018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801601a:	4608      	mov	r0, r1
{
 801601c:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801601e:	f7f1 fb05 	bl	800762c <lv_obj_get_parent>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8016022:	f242 0264 	movw	r2, #8292	; 0x2064
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8016026:	4605      	mov	r5, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8016028:	4620      	mov	r0, r4
 801602a:	4611      	mov	r1, r2
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),  create_row_id * lv_obj_get_content_height(parent));
 801602c:	4e14      	ldr	r6, [pc, #80]	; (8016080 <lv_tileview_tile_constructor+0x68>)
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 801602e:	f7ee fc19 	bl	8004864 <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 8016032:	4620      	mov	r0, r4
 8016034:	f7ef faf0 	bl	8005618 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),  create_row_id * lv_obj_get_content_height(parent));
 8016038:	4628      	mov	r0, r5
 801603a:	f7ee fd3c 	bl	8004ab6 <lv_obj_get_content_width>
 801603e:	6833      	ldr	r3, [r6, #0]
 8016040:	4f10      	ldr	r7, [pc, #64]	; (8016084 <lv_tileview_tile_constructor+0x6c>)
 8016042:	fb13 f000 	smulbb	r0, r3, r0
 8016046:	b201      	sxth	r1, r0
 8016048:	4628      	mov	r0, r5
 801604a:	9101      	str	r1, [sp, #4]
 801604c:	f7ee fd4d 	bl	8004aea <lv_obj_get_content_height>
 8016050:	683b      	ldr	r3, [r7, #0]
 8016052:	9901      	ldr	r1, [sp, #4]
 8016054:	fb13 f000 	smulbb	r0, r3, r0
 8016058:	b202      	sxth	r2, r0
 801605a:	4620      	mov	r0, r4
 801605c:	f7ee fc7e 	bl	800495c <lv_obj_set_pos>
    tile->dir = create_dir;
 8016060:	4b09      	ldr	r3, [pc, #36]	; (8016088 <lv_tileview_tile_constructor+0x70>)
    if(create_col_id == 0 && create_row_id == 0) {
 8016062:	6832      	ldr	r2, [r6, #0]
    tile->dir = create_dir;
 8016064:	7819      	ldrb	r1, [r3, #0]
    if(create_col_id == 0 && create_row_id == 0) {
 8016066:	683b      	ldr	r3, [r7, #0]
    tile->dir = create_dir;
 8016068:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 801606c:	4313      	orrs	r3, r2
 801606e:	d105      	bne.n	801607c <lv_tileview_tile_constructor+0x64>
        lv_obj_set_scroll_dir(parent, create_dir);
 8016070:	4628      	mov	r0, r5
}
 8016072:	b003      	add	sp, #12
 8016074:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_set_scroll_dir(parent, create_dir);
 8016078:	f7ef bcff 	b.w	8005a7a <lv_obj_set_scroll_dir>
}
 801607c:	b003      	add	sp, #12
 801607e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016080:	200031f4 	.word	0x200031f4
 8016084:	200031fc 	.word	0x200031fc
 8016088:	200031f8 	.word	0x200031f8

0801608c <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801608c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801608e:	4608      	mov	r0, r1
{
 8016090:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8016092:	f7f1 facb 	bl	800762c <lv_obj_get_parent>
 8016096:	4605      	mov	r5, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 8016098:	f7ee fd01 	bl	8004a9e <lv_obj_get_width>
 801609c:	9001      	str	r0, [sp, #4]
 801609e:	4628      	mov	r0, r5
 80160a0:	f7ee fd03 	bl	8004aaa <lv_obj_get_height>
 80160a4:	9901      	ldr	r1, [sp, #4]
 80160a6:	4602      	mov	r2, r0
 80160a8:	4620      	mov	r0, r4
 80160aa:	f7ee fbdb 	bl	8004864 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 80160ae:	2101      	movs	r1, #1
 80160b0:	4620      	mov	r0, r4
 80160b2:	f7f9 fc75 	bl	800f9a0 <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 80160b6:	4620      	mov	r0, r4
 80160b8:	f7ed fc32 	bl	8003920 <lv_obj_create>
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 80160bc:	4b10      	ldr	r3, [pc, #64]	; (8016100 <lv_win_constructor+0x74>)
    lv_obj_t * header = lv_obj_create(obj);
 80160be:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 80160c0:	f242 0164 	movw	r1, #8292	; 0x2064
 80160c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80160c8:	f7ee fbcc 	bl	8004864 <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 80160cc:	4628      	mov	r0, r5
 80160ce:	2100      	movs	r1, #0
 80160d0:	f7f9 fc66 	bl	800f9a0 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 80160d4:	2302      	movs	r3, #2
 80160d6:	2100      	movs	r1, #0
 80160d8:	4628      	mov	r0, r5
 80160da:	461a      	mov	r2, r3
 80160dc:	f7f9 fc76 	bl	800f9cc <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 80160e0:	4620      	mov	r0, r4
 80160e2:	f7ed fc1d 	bl	8003920 <lv_obj_create>
 80160e6:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 80160e8:	2101      	movs	r1, #1
 80160ea:	f7f9 fc99 	bl	800fa20 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 80160ee:	f242 0164 	movw	r1, #8292	; 0x2064
 80160f2:	4620      	mov	r0, r4
}
 80160f4:	b003      	add	sp, #12
 80160f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_set_width(cont, LV_PCT(100));
 80160fa:	f7ee bb7f 	b.w	80047fc <lv_obj_set_width>
 80160fe:	bf00      	nop
 8016100:	20003200 	.word	0x20003200

08016104 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 8016104:	6843      	ldr	r3, [r0, #4]
 8016106:	4718      	bx	r3

08016108 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8016108:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 801610a:	6804      	ldr	r4, [r0, #0]
 801610c:	46a4      	mov	ip, r4
}
 801610e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 8016112:	4760      	bx	ip

08016114 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8016114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016116:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8016118:	460a      	mov	r2, r1
 801611a:	a901      	add	r1, sp, #4
 801611c:	f7ff fff4 	bl	8016108 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 8016120:	b108      	cbz	r0, 8016126 <lv_font_get_glyph_width+0x12>
 8016122:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 8016126:	b005      	add	sp, #20
 8016128:	f85d fb04 	ldr.w	pc, [sp], #4

0801612c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801612c:	7803      	ldrb	r3, [r0, #0]
 801612e:	780a      	ldrb	r2, [r1, #0]
 8016130:	4293      	cmp	r3, r2
 8016132:	bf11      	iteee	ne
 8016134:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8016136:	784b      	ldrbeq	r3, [r1, #1]
 8016138:	7840      	ldrbeq	r0, [r0, #1]
 801613a:	1ac0      	subeq	r0, r0, r3

}
 801613c:	4770      	bx	lr

0801613e <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801613e:	8803      	ldrh	r3, [r0, #0]
 8016140:	880a      	ldrh	r2, [r1, #0]
 8016142:	4293      	cmp	r3, r2
 8016144:	bf11      	iteee	ne
 8016146:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8016148:	884b      	ldrheq	r3, [r1, #2]
 801614a:	8840      	ldrheq	r0, [r0, #2]
 801614c:	1ac0      	subeq	r0, r0, r3
}
 801614e:	4770      	bx	lr

08016150 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8016150:	8800      	ldrh	r0, [r0, #0]
 8016152:	880b      	ldrh	r3, [r1, #0]
}
 8016154:	1ac0      	subs	r0, r0, r3
 8016156:	4770      	bx	lr

08016158 <get_glyph_dsc_id.isra.0.part.0>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 8016158:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801615a:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 801615c:	b085      	sub	sp, #20
 801615e:	460c      	mov	r4, r1
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8016160:	6968      	ldr	r0, [r5, #20]
 8016162:	b970      	cbnz	r0, 8016182 <get_glyph_dsc_id.isra.0.part.0+0x2a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8016164:	8a6f      	ldrh	r7, [r5, #18]
 8016166:	2200      	movs	r2, #0
 8016168:	f04f 0c14 	mov.w	ip, #20
 801616c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8016170:	b293      	uxth	r3, r2
 8016172:	429f      	cmp	r7, r3
 8016174:	d80b      	bhi.n	801618e <get_glyph_dsc_id.isra.0.part.0+0x36>
    if(fdsc->cache) {
 8016176:	2300      	movs	r3, #0
 8016178:	b138      	cbz	r0, 801618a <get_glyph_dsc_id.isra.0.part.0+0x32>
        fdsc->cache->last_glyph_id = 0;
 801617a:	e9c0 4300 	strd	r4, r3, [r0]
    return 0;
 801617e:	4618      	mov	r0, r3
 8016180:	e003      	b.n	801618a <get_glyph_dsc_id.isra.0.part.0+0x32>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	428b      	cmp	r3, r1
 8016186:	d1ed      	bne.n	8016164 <get_glyph_dsc_id.isra.0.part.0+0xc>
 8016188:	6840      	ldr	r0, [r0, #4]
}
 801618a:	b005      	add	sp, #20
 801618c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801618e:	fb0c f602 	mul.w	r6, ip, r2
 8016192:	68ab      	ldr	r3, [r5, #8]
 8016194:	3201      	adds	r2, #1
 8016196:	1999      	adds	r1, r3, r6
 8016198:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801619a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801619e:	1ae3      	subs	r3, r4, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80161a0:	4573      	cmp	r3, lr
 80161a2:	d8e5      	bhi.n	8016170 <get_glyph_dsc_id.isra.0.part.0+0x18>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80161a4:	7c8a      	ldrb	r2, [r1, #18]
 80161a6:	2a02      	cmp	r2, #2
 80161a8:	d102      	bne.n	80161b0 <get_glyph_dsc_id.isra.0.part.0+0x58>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 80161aa:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80161ac:	4418      	add	r0, r3
 80161ae:	e019      	b.n	80161e4 <get_glyph_dsc_id.isra.0.part.0+0x8c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 80161b0:	b91a      	cbnz	r2, 80161ba <get_glyph_dsc_id.isra.0.part.0+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80161b2:	68ca      	ldr	r2, [r1, #12]
 80161b4:	5cd0      	ldrb	r0, [r2, r3]
 80161b6:	88cb      	ldrh	r3, [r1, #6]
 80161b8:	e7f8      	b.n	80161ac <get_glyph_dsc_id.isra.0.part.0+0x54>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80161ba:	2a03      	cmp	r2, #3
 80161bc:	d118      	bne.n	80161f0 <get_glyph_dsc_id.isra.0.part.0+0x98>
            uint16_t key = rcp;
 80161be:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80161c2:	f10d 000e 	add.w	r0, sp, #14
 80161c6:	4b17      	ldr	r3, [pc, #92]	; (8016224 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 80161c8:	8a0a      	ldrh	r2, [r1, #16]
 80161ca:	9300      	str	r3, [sp, #0]
 80161cc:	2302      	movs	r3, #2
 80161ce:	6889      	ldr	r1, [r1, #8]
 80161d0:	f003 f843 	bl	801925a <_lv_utils_bsearch>
            if(p) {
 80161d4:	b130      	cbz	r0, 80161e4 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80161d6:	68ab      	ldr	r3, [r5, #8]
 80161d8:	441e      	add	r6, r3
 80161da:	68b3      	ldr	r3, [r6, #8]
 80161dc:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80161de:	88f3      	ldrh	r3, [r6, #6]
 80161e0:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 80161e4:	696b      	ldr	r3, [r5, #20]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d0cf      	beq.n	801618a <get_glyph_dsc_id.isra.0.part.0+0x32>
            fdsc->cache->last_glyph_id = glyph_id;
 80161ea:	e9c3 4000 	strd	r4, r0, [r3]
 80161ee:	e7cc      	b.n	801618a <get_glyph_dsc_id.isra.0.part.0+0x32>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80161f0:	2a01      	cmp	r2, #1
 80161f2:	d114      	bne.n	801621e <get_glyph_dsc_id.isra.0.part.0+0xc6>
            uint16_t key = rcp;
 80161f4:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80161f8:	f10d 000e 	add.w	r0, sp, #14
 80161fc:	4b09      	ldr	r3, [pc, #36]	; (8016224 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 80161fe:	8a0a      	ldrh	r2, [r1, #16]
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	2302      	movs	r3, #2
 8016204:	6889      	ldr	r1, [r1, #8]
 8016206:	f003 f828 	bl	801925a <_lv_utils_bsearch>
            if(p) {
 801620a:	2800      	cmp	r0, #0
 801620c:	d0ea      	beq.n	80161e4 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801620e:	68ab      	ldr	r3, [r5, #8]
 8016210:	441e      	add	r6, r3
 8016212:	68b3      	ldr	r3, [r6, #8]
 8016214:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8016216:	68f3      	ldr	r3, [r6, #12]
 8016218:	5a18      	ldrh	r0, [r3, r0]
 801621a:	88f3      	ldrh	r3, [r6, #6]
 801621c:	e7c6      	b.n	80161ac <get_glyph_dsc_id.isra.0.part.0+0x54>
        uint32_t glyph_id = 0;
 801621e:	2000      	movs	r0, #0
 8016220:	e7e0      	b.n	80161e4 <get_glyph_dsc_id.isra.0.part.0+0x8c>
 8016222:	bf00      	nop
 8016224:	08016151 	.word	0x08016151

08016228 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 8016228:	2909      	cmp	r1, #9
{
 801622a:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 801622c:	d002      	beq.n	8016234 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
 801622e:	b911      	cbnz	r1, 8016236 <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
 8016230:	2000      	movs	r0, #0
}
 8016232:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8016234:	2120      	movs	r1, #32
 8016236:	f850 4f10 	ldr.w	r4, [r0, #16]!
 801623a:	f7ff ff8d 	bl	8016158 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
 801623e:	2800      	cmp	r0, #0
 8016240:	d0f6      	beq.n	8016230 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8016242:	7ce3      	ldrb	r3, [r4, #19]
 8016244:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8016248:	d1f2      	bne.n	8016230 <lv_font_get_bitmap_fmt_txt+0x8>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801624a:	6863      	ldr	r3, [r4, #4]
 801624c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8016250:	6820      	ldr	r0, [r4, #0]
 8016252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016256:	4418      	add	r0, r3
 8016258:	e7eb      	b.n	8016232 <lv_font_get_bitmap_fmt_txt+0xa>
	...

0801625c <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 801625c:	2a09      	cmp	r2, #9
{
 801625e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016262:	460c      	mov	r4, r1
 8016264:	4680      	mov	r8, r0
 8016266:	4611      	mov	r1, r2
 8016268:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 801626a:	d006      	beq.n	801627a <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
 801626c:	2a00      	cmp	r2, #0
 801626e:	d136      	bne.n	80162de <lv_font_get_glyph_dsc_fmt_txt+0x82>
    if(!gid) return false;
 8016270:	2600      	movs	r6, #0
}
 8016272:	4630      	mov	r0, r6
 8016274:	b004      	add	sp, #16
 8016276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
 801627a:	2601      	movs	r6, #1
        unicode_letter = ' ';
 801627c:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801627e:	46c1      	mov	r9, r8
 8016280:	f859 7f10 	ldr.w	r7, [r9, #16]!
 8016284:	4648      	mov	r0, r9
 8016286:	f7ff ff67 	bl	8016158 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
 801628a:	4605      	mov	r5, r0
 801628c:	2800      	cmp	r0, #0
 801628e:	d0ef      	beq.n	8016270 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	bb33      	cbnz	r3, 80162e2 <lv_font_get_glyph_dsc_fmt_txt+0x86>
    int8_t kvalue = 0;
 8016294:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801629c:	8a38      	ldrh	r0, [r7, #16]
    uint32_t adv_w = gdsc->adv_w;
 801629e:	886a      	ldrh	r2, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80162a0:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
 80162a2:	f3c2 110b 	ubfx	r1, r2, #4, #12
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80162a6:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 80162a8:	460a      	mov	r2, r1
    if(is_tab) adv_w *= 2;
 80162aa:	b10e      	cbz	r6, 80162b0 <lv_font_get_glyph_dsc_fmt_txt+0x54>
 80162ac:	b20a      	sxth	r2, r1
 80162ae:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 80162b0:	3308      	adds	r3, #8
 80162b2:	4413      	add	r3, r2
 80162b4:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 80162b6:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 80162b8:	796b      	ldrb	r3, [r5, #5]
 80162ba:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
 80162bc:	792b      	ldrb	r3, [r5, #4]
 80162be:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 80162c0:	f995 2006 	ldrsb.w	r2, [r5, #6]
 80162c4:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 80162c6:	f995 2007 	ldrsb.w	r2, [r5, #7]
 80162ca:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80162cc:	7cfa      	ldrb	r2, [r7, #19]
 80162ce:	f3c2 0243 	ubfx	r2, r2, #1, #4
 80162d2:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80162d4:	2e00      	cmp	r6, #0
 80162d6:	d062      	beq.n	801639e <lv_font_get_glyph_dsc_fmt_txt+0x142>
 80162d8:	005b      	lsls	r3, r3, #1
 80162da:	8063      	strh	r3, [r4, #2]
 80162dc:	e7c9      	b.n	8016272 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
 80162de:	2600      	movs	r6, #0
 80162e0:	e7cd      	b.n	801627e <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
 80162e2:	f1ba 0f00 	cmp.w	sl, #0
 80162e6:	d0d5      	beq.n	8016294 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 80162e8:	4651      	mov	r1, sl
 80162ea:	4648      	mov	r0, r9
 80162ec:	f7ff ff34 	bl	8016158 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
 80162f0:	2800      	cmp	r0, #0
 80162f2:	d0cf      	beq.n	8016294 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 80162f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if(fdsc->kern_classes == 0) {
 80162f8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80162fc:	7cdb      	ldrb	r3, [r3, #19]
 80162fe:	069b      	lsls	r3, r3, #26
 8016300:	d438      	bmi.n	8016374 <lv_font_get_glyph_dsc_fmt_txt+0x118>
        if(kdsc->glyph_ids_size == 0) {
 8016302:	f898 300b 	ldrb.w	r3, [r8, #11]
 8016306:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 801630a:	d11a      	bne.n	8016342 <lv_font_get_glyph_dsc_fmt_txt+0xe6>
            const uint16_t * g_ids = kdsc->glyph_ids;
 801630c:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8016310:	eb05 2000 	add.w	r0, r5, r0, lsl #8
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8016314:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016318:	4b22      	ldr	r3, [pc, #136]	; (80163a4 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 801631a:	4649      	mov	r1, r9
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801631c:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8016320:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8016324:	9300      	str	r3, [sp, #0]
 8016326:	a803      	add	r0, sp, #12
 8016328:	2302      	movs	r3, #2
 801632a:	f002 ff96 	bl	801925a <_lv_utils_bsearch>
            if(kid_p) {
 801632e:	4603      	mov	r3, r0
 8016330:	2800      	cmp	r0, #0
 8016332:	d0b0      	beq.n	8016296 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 8016334:	eba0 0309 	sub.w	r3, r0, r9
 8016338:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 801633a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801633e:	56d3      	ldrsb	r3, [r2, r3]
 8016340:	e7a9      	b.n	8016296 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 8016342:	2b40      	cmp	r3, #64	; 0x40
 8016344:	d1a6      	bne.n	8016294 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint32_t * g_ids = kdsc->glyph_ids;
 8016346:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801634a:	eb05 4000 	add.w	r0, r5, r0, lsl #16
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801634e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016352:	4b15      	ldr	r3, [pc, #84]	; (80163a8 <lv_font_get_glyph_dsc_fmt_txt+0x14c>)
 8016354:	4649      	mov	r1, r9
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8016356:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8016358:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 801635c:	9300      	str	r3, [sp, #0]
 801635e:	a803      	add	r0, sp, #12
 8016360:	2304      	movs	r3, #4
 8016362:	f002 ff7a 	bl	801925a <_lv_utils_bsearch>
            if(kid_p) {
 8016366:	4603      	mov	r3, r0
 8016368:	2800      	cmp	r0, #0
 801636a:	d094      	beq.n	8016296 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 801636c:	eba0 0309 	sub.w	r3, r0, r9
 8016370:	109b      	asrs	r3, r3, #2
 8016372:	e7e2      	b.n	801633a <lv_font_get_glyph_dsc_fmt_txt+0xde>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8016374:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016378:	5d5b      	ldrb	r3, [r3, r5]
        if(left_class > 0 && right_class > 0) {
 801637a:	2b00      	cmp	r3, #0
 801637c:	d08a      	beq.n	8016294 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801637e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016382:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 8016384:	2900      	cmp	r1, #0
 8016386:	d085      	beq.n	8016294 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8016388:	f8d8 2000 	ldr.w	r2, [r8]
 801638c:	3b01      	subs	r3, #1
 801638e:	f898 000d 	ldrb.w	r0, [r8, #13]
 8016392:	440a      	add	r2, r1
 8016394:	fb00 2303 	mla	r3, r0, r3, r2
 8016398:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 801639c:	e77b      	b.n	8016296 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 801639e:	2601      	movs	r6, #1
 80163a0:	e767      	b.n	8016272 <lv_font_get_glyph_dsc_fmt_txt+0x16>
 80163a2:	bf00      	nop
 80163a4:	0801612d 	.word	0x0801612d
 80163a8:	0801613f 	.word	0x0801613f

080163ac <_lv_font_clean_up_fmt_txt>:
}
 80163ac:	4770      	bx	lr
	...

080163b0 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80163b0:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80163b2:	2138      	movs	r1, #56	; 0x38
{
 80163b4:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80163b6:	f001 f9e5 	bl	8017784 <lv_memset_00>

    driver->hor_res          = 320;
 80163ba:	4b07      	ldr	r3, [pc, #28]	; (80163d8 <lv_disp_drv_init+0x28>)
 80163bc:	6023      	str	r3, [r4, #0]
    driver->ver_res          = 240;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1: 0;
 80163be:	8923      	ldrh	r3, [r4, #8]
 80163c0:	f003 031b 	and.w	r3, r3, #27
 80163c4:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 80163c8:	f043 0304 	orr.w	r3, r3, #4
 80163cc:	8123      	strh	r3, [r4, #8]
    driver->screen_transp    = LV_COLOR_SCREEN_TRANSP;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 80163ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80163d2:	8623      	strh	r3, [r4, #48]	; 0x30
}
 80163d4:	bd10      	pop	{r4, pc}
 80163d6:	bf00      	nop
 80163d8:	00f00140 	.word	0x00f00140

080163dc <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 80163dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163de:	4604      	mov	r4, r0
 80163e0:	460d      	mov	r5, r1
 80163e2:	4617      	mov	r7, r2
 80163e4:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 80163e6:	2124      	movs	r1, #36	; 0x24
 80163e8:	f001 f9cc 	bl	8017784 <lv_memset_00>

    draw_buf->buf1    = buf1;
    draw_buf->buf2    = buf2;
 80163ec:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->buf_act = draw_buf->buf1;
    draw_buf->size    = size_in_px_cnt;
 80163f0:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 80163f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080163f8 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 80163f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163fa:	4605      	mov	r5, r0
 80163fc:	b085      	sub	sp, #20
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 80163fe:	4839      	ldr	r0, [pc, #228]	; (80164e4 <lv_disp_drv_register+0xec>)
 8016400:	f000 fe4b 	bl	801709a <_lv_ll_ins_head>
    if(!disp) {
 8016404:	4604      	mov	r4, r0
 8016406:	b900      	cbnz	r0, 801640a <lv_disp_drv_register+0x12>
        LV_ASSERT_MALLOC(disp);
 8016408:	e7fe      	b.n	8016408 <lv_disp_drv_register+0x10>
        return NULL;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801640a:	f44f 71ac 	mov.w	r1, #344	; 0x158

    disp->driver = driver;

    lv_disp_t * disp_def_tmp = disp_def;
 801640e:	4e36      	ldr	r6, [pc, #216]	; (80164e8 <lv_disp_drv_register+0xf0>)
    lv_memset_00(disp, sizeof(lv_disp_t));
 8016410:	f001 f9b8 	bl	8017784 <lv_memset_00>
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8016414:	4622      	mov	r2, r4
 8016416:	211e      	movs	r1, #30
 8016418:	4834      	ldr	r0, [pc, #208]	; (80164ec <lv_disp_drv_register+0xf4>)
    disp->driver = driver;
 801641a:	6025      	str	r5, [r4, #0]
    lv_disp_t * disp_def_tmp = disp_def;
 801641c:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 801641e:	6034      	str	r4, [r6, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8016420:	f001 ff6a 	bl	80182f8 <lv_timer_create>
 8016424:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 8016426:	b900      	cbnz	r0, 801642a <lv_disp_drv_register+0x32>
 8016428:	e7fe      	b.n	8016428 <lv_disp_drv_register+0x30>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801642a:	7a2b      	ldrb	r3, [r5, #8]
 801642c:	07da      	lsls	r2, r3, #31
 801642e:	d50a      	bpl.n	8016446 <lv_disp_drv_register+0x4e>
 8016430:	6869      	ldr	r1, [r5, #4]
 8016432:	882a      	ldrh	r2, [r5, #0]
 8016434:	8868      	ldrh	r0, [r5, #2]
 8016436:	68c9      	ldr	r1, [r1, #12]
 8016438:	fb12 f200 	smulbb	r2, r2, r0
 801643c:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 801643e:	bf3c      	itt	cc
 8016440:	f36f 0300 	bfccc	r3, #0, #1
 8016444:	722b      	strbcc	r3, [r5, #8]

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 8016446:	23ff      	movs	r3, #255	; 0xff
 8016448:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    disp->bg_color = lv_color_white();
 801644c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016450:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 8016452:	f7fb ffe5 	bl	8012420 <lv_theme_default_is_inited>
 8016456:	4605      	mov	r5, r0
 8016458:	b980      	cbnz	r0, 801647c <lv_disp_drv_register+0x84>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), LV_THEME_DEFAULT_DARK, LV_FONT_DEFAULT);
 801645a:	2005      	movs	r0, #5
 801645c:	f000 fd46 	bl	8016eec <lv_palette_main>
 8016460:	4601      	mov	r1, r0
 8016462:	4628      	mov	r0, r5
 8016464:	9103      	str	r1, [sp, #12]
 8016466:	f000 fd41 	bl	8016eec <lv_palette_main>
 801646a:	4b21      	ldr	r3, [pc, #132]	; (80164f0 <lv_disp_drv_register+0xf8>)
 801646c:	4602      	mov	r2, r0
 801646e:	9903      	ldr	r1, [sp, #12]
 8016470:	4620      	mov	r0, r4
 8016472:	9300      	str	r3, [sp, #0]
 8016474:	462b      	mov	r3, r5
 8016476:	f7fa fecb 	bl	8011210 <lv_theme_default_init>
 801647a:	60a0      	str	r0, [r4, #8]
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 801647c:	2000      	movs	r0, #0
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);

    lv_obj_invalidate(disp->act_scr);

    disp_def = disp_def_tmp; /*Revert the default display*/
 801647e:	2f00      	cmp	r7, #0
 8016480:	bf08      	it	eq
 8016482:	4627      	moveq	r7, r4
    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8016484:	f7ed fa4c 	bl	8003920 <lv_obj_create>
 8016488:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 801648a:	2000      	movs	r0, #0
 801648c:	f7ed fa48 	bl	8003920 <lv_obj_create>
 8016490:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8016492:	2000      	movs	r0, #0
 8016494:	f7ed fa44 	bl	8003920 <lv_obj_create>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8016498:	4a16      	ldr	r2, [pc, #88]	; (80164f4 <lv_disp_drv_register+0xfc>)
 801649a:	6220      	str	r0, [r4, #32]
 801649c:	2100      	movs	r1, #0
 801649e:	69e0      	ldr	r0, [r4, #28]
 80164a0:	f7f0 fc9e 	bl	8006de0 <lv_obj_remove_style>
 80164a4:	4a13      	ldr	r2, [pc, #76]	; (80164f4 <lv_disp_drv_register+0xfc>)
 80164a6:	6a20      	ldr	r0, [r4, #32]
 80164a8:	2100      	movs	r1, #0
 80164aa:	f7f0 fc99 	bl	8006de0 <lv_obj_remove_style>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 80164ae:	69e0      	ldr	r0, [r4, #28]
 80164b0:	2102      	movs	r1, #2
 80164b2:	f7ed fa64 	bl	800397e <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 80164b6:	6a20      	ldr	r0, [r4, #32]
 80164b8:	2102      	movs	r1, #2
 80164ba:	f7ed fa60 	bl	800397e <lv_obj_clear_flag>
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 80164be:	69e0      	ldr	r0, [r4, #28]
 80164c0:	2100      	movs	r1, #0
 80164c2:	f7ef fac6 	bl	8005a52 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 80164c6:	2100      	movs	r1, #0
 80164c8:	6a20      	ldr	r0, [r4, #32]
 80164ca:	f7ef fac2 	bl	8005a52 <lv_obj_set_scrollbar_mode>
    lv_obj_invalidate(disp->act_scr);
 80164ce:	6920      	ldr	r0, [r4, #16]
 80164d0:	f7ee fc3a 	bl	8004d48 <lv_obj_invalidate>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 80164d4:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 80164d6:	6037      	str	r7, [r6, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 80164d8:	f001 fffe 	bl	80184d8 <lv_timer_ready>

    return disp;
}
 80164dc:	4620      	mov	r0, r4
 80164de:	b005      	add	sp, #20
 80164e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164e2:	bf00      	nop
 80164e4:	2000b4e8 	.word	0x2000b4e8
 80164e8:	2000320c 	.word	0x2000320c
 80164ec:	08007fb5 	.word	0x08007fb5
 80164f0:	080296f0 	.word	0x080296f0
 80164f4:	000fffff 	.word	0x000fffff

080164f8 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80164f8:	4b01      	ldr	r3, [pc, #4]	; (8016500 <lv_disp_get_default+0x8>)
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop
 8016500:	2000320c 	.word	0x2000320c

08016504 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8016504:	b910      	cbnz	r0, 801650c <lv_disp_get_hor_res+0x8>
    return disp_def;
 8016506:	4b06      	ldr	r3, [pc, #24]	; (8016520 <lv_disp_get_hor_res+0x1c>)
 8016508:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 801650a:	b140      	cbz	r0, 801651e <lv_disp_get_hor_res+0x1a>
        return 0;
    } else {
        switch(disp->driver->rotated) {
 801650c:	6803      	ldr	r3, [r0, #0]
 801650e:	7a1a      	ldrb	r2, [r3, #8]
 8016510:	0712      	lsls	r2, r2, #28
 8016512:	d502      	bpl.n	801651a <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 8016514:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8016518:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 801651a:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 801651e:	4770      	bx	lr
 8016520:	2000320c 	.word	0x2000320c

08016524 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8016524:	b910      	cbnz	r0, 801652c <lv_disp_get_ver_res+0x8>
    return disp_def;
 8016526:	4b06      	ldr	r3, [pc, #24]	; (8016540 <lv_disp_get_ver_res+0x1c>)
 8016528:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 801652a:	b140      	cbz	r0, 801653e <lv_disp_get_ver_res+0x1a>
        return 0;
    } else {
        switch(disp->driver->rotated) {
 801652c:	6803      	ldr	r3, [r0, #0]
 801652e:	7a1a      	ldrb	r2, [r3, #8]
 8016530:	0712      	lsls	r2, r2, #28
 8016532:	d502      	bpl.n	801653a <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 8016534:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016538:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 801653a:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 801653e:	4770      	bx	lr
 8016540:	2000320c 	.word	0x2000320c

08016544 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8016544:	b910      	cbnz	r0, 801654c <lv_disp_get_dpi+0x8>
    return disp_def;
 8016546:	4b05      	ldr	r3, [pc, #20]	; (801655c <lv_disp_get_dpi+0x18>)
 8016548:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 801654a:	b120      	cbz	r0, 8016556 <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	8918      	ldrh	r0, [r3, #8]
 8016550:	f3c0 1089 	ubfx	r0, r0, #6, #10
 8016554:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8016556:	2082      	movs	r0, #130	; 0x82
}
 8016558:	4770      	bx	lr
 801655a:	bf00      	nop
 801655c:	2000320c 	.word	0x2000320c

08016560 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        lv_memset_00(disp_drv->draw_buf->buf_act, disp_drv->draw_buf->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->draw_buf->flushing = 0;
 8016560:	6843      	ldr	r3, [r0, #4]
 8016562:	2200      	movs	r2, #0
 8016564:	619a      	str	r2, [r3, #24]
    disp_drv->draw_buf->flushing_last = 0;
 8016566:	61da      	str	r2, [r3, #28]
}
 8016568:	4770      	bx	lr
	...

0801656c <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 801656c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 801656e:	4803      	ldr	r0, [pc, #12]	; (801657c <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8016570:	b909      	cbnz	r1, 8016576 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8016572:	f000 be04 	b.w	801717e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8016576:	f000 be08 	b.w	801718a <_lv_ll_get_next>
 801657a:	bf00      	nop
 801657c:	2000b4e8 	.word	0x2000b4e8

08016580 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8016580:	6803      	ldr	r3, [r0, #0]
}
 8016582:	6858      	ldr	r0, [r3, #4]
 8016584:	4770      	bx	lr
	...

08016588 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8016588:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801658a:	2120      	movs	r1, #32
{
 801658c:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 801658e:	f001 f8f9 	bl	8017784 <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8016592:	2300      	movs	r3, #0
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8016594:	4a02      	ldr	r2, [pc, #8]	; (80165a0 <lv_indev_drv_init+0x18>)
    driver->type                 = LV_INDEV_TYPE_NONE;
 8016596:	7023      	strb	r3, [r4, #0]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8016598:	4b02      	ldr	r3, [pc, #8]	; (80165a4 <lv_indev_drv_init+0x1c>)
 801659a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 801659e:	bd10      	pop	{r4, pc}
 80165a0:	32030a0a 	.word	0x32030a0a
 80165a4:	00640190 	.word	0x00640190

080165a8 <lv_indev_drv_register>:
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable.
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 80165a8:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 80165aa:	6903      	ldr	r3, [r0, #16]
{
 80165ac:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 80165ae:	b12b      	cbz	r3, 80165bc <lv_indev_drv_register+0x14>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 80165b0:	480e      	ldr	r0, [pc, #56]	; (80165ec <lv_indev_drv_register+0x44>)
 80165b2:	f000 fd72 	bl	801709a <_lv_ll_ins_head>
    if(!indev) {
 80165b6:	4604      	mov	r4, r0
 80165b8:	b940      	cbnz	r0, 80165cc <lv_indev_drv_register+0x24>
        LV_ASSERT_MALLOC(indev);
 80165ba:	e7fe      	b.n	80165ba <lv_indev_drv_register+0x12>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 80165bc:	f7ff ff9c 	bl	80164f8 <lv_disp_get_default>
 80165c0:	4604      	mov	r4, r0
 80165c2:	6128      	str	r0, [r5, #16]
    if(driver->disp == NULL) {
 80165c4:	2800      	cmp	r0, #0
 80165c6:	d1f3      	bne.n	80165b0 <lv_indev_drv_register+0x8>

    indev->proc.reset_query  = 1;
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);

    return indev;
}
 80165c8:	4620      	mov	r0, r4
 80165ca:	bd38      	pop	{r3, r4, r5, pc}
    lv_memset_00(indev, sizeof(lv_indev_t));
 80165cc:	2158      	movs	r1, #88	; 0x58
 80165ce:	f001 f8d9 	bl	8017784 <lv_memset_00>
    indev->proc.reset_query  = 1;
 80165d2:	7963      	ldrb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 80165d4:	4622      	mov	r2, r4
 80165d6:	211e      	movs	r1, #30
    indev->proc.reset_query  = 1;
 80165d8:	f043 0302 	orr.w	r3, r3, #2
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 80165dc:	4804      	ldr	r0, [pc, #16]	; (80165f0 <lv_indev_drv_register+0x48>)
    indev->driver = driver;
 80165de:	6025      	str	r5, [r4, #0]
    indev->proc.reset_query  = 1;
 80165e0:	7163      	strb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 80165e2:	f001 fe89 	bl	80182f8 <lv_timer_create>
 80165e6:	6168      	str	r0, [r5, #20]
    return indev;
 80165e8:	e7ee      	b.n	80165c8 <lv_indev_drv_register+0x20>
 80165ea:	bf00      	nop
 80165ec:	2000b4d0 	.word	0x2000b4d0
 80165f0:	08002551 	.word	0x08002551

080165f4 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 80165f4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80165f6:	4803      	ldr	r0, [pc, #12]	; (8016604 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 80165f8:	b909      	cbnz	r1, 80165fe <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80165fa:	f000 bdc0 	b.w	801717e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 80165fe:	f000 bdc4 	b.w	801718a <_lv_ll_get_next>
 8016602:	bf00      	nop
 8016604:	2000b4d0 	.word	0x2000b4d0

08016608 <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8016608:	b570      	push	{r4, r5, r6, lr}
 801660a:	460c      	mov	r4, r1
 801660c:	4605      	mov	r5, r0
    lv_memset_00(data, sizeof(lv_indev_data_t));
 801660e:	2110      	movs	r1, #16
 8016610:	4620      	mov	r0, r4
 8016612:	f001 f8b7 	bl	8017784 <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 8016616:	6828      	ldr	r0, [r5, #0]
 8016618:	7803      	ldrb	r3, [r0, #0]
 801661a:	2b01      	cmp	r3, #1
 801661c:	d109      	bne.n	8016632 <_lv_indev_read+0x2a>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 801661e:	8a2b      	ldrh	r3, [r5, #16]
 8016620:	8023      	strh	r3, [r4, #0]
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
 8016622:	8a6b      	ldrh	r3, [r5, #18]
 8016624:	8063      	strh	r3, [r4, #2]
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
        data->key = LV_KEY_ENTER;
    }

    if(indev->driver->read_cb) {
 8016626:	6843      	ldr	r3, [r0, #4]
 8016628:	b163      	cbz	r3, 8016644 <_lv_indev_read+0x3c>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 801662a:	4621      	mov	r1, r4
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 801662c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        indev->driver->read_cb(indev->driver, data);
 8016630:	4718      	bx	r3
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8016632:	2b02      	cmp	r3, #2
 8016634:	d102      	bne.n	801663c <_lv_indev_read+0x34>
        data->key = indev->proc.types.keypad.last_key;
 8016636:	68eb      	ldr	r3, [r5, #12]
        data->key = LV_KEY_ENTER;
 8016638:	6063      	str	r3, [r4, #4]
 801663a:	e7f4      	b.n	8016626 <_lv_indev_read+0x1e>
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 801663c:	2b04      	cmp	r3, #4
 801663e:	d1f2      	bne.n	8016626 <_lv_indev_read+0x1e>
        data->key = LV_KEY_ENTER;
 8016640:	230a      	movs	r3, #10
 8016642:	e7f9      	b.n	8016638 <_lv_indev_read+0x30>
}
 8016644:	bd70      	pop	{r4, r5, r6, pc}
	...

08016648 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8016648:	4b03      	ldr	r3, [pc, #12]	; (8016658 <lv_tick_inc+0x10>)
 801664a:	2200      	movs	r2, #0
 801664c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801664e:	4a03      	ldr	r2, [pc, #12]	; (801665c <lv_tick_inc+0x14>)
 8016650:	6813      	ldr	r3, [r2, #0]
 8016652:	4418      	add	r0, r3
 8016654:	6010      	str	r0, [r2, #0]
}
 8016656:	4770      	bx	lr
 8016658:	20003214 	.word	0x20003214
 801665c:	20003210 	.word	0x20003210

08016660 <lv_tick_get>:
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
 8016660:	4b04      	ldr	r3, [pc, #16]	; (8016674 <lv_tick_get+0x14>)
        tick_irq_flag = 1;
 8016662:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
 8016666:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 8016668:	4b03      	ldr	r3, [pc, #12]	; (8016678 <lv_tick_get+0x18>)
 801666a:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 801666c:	781a      	ldrb	r2, [r3, #0]
 801666e:	2a00      	cmp	r2, #0
 8016670:	d0fb      	beq.n	801666a <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8016672:	4770      	bx	lr
 8016674:	20003210 	.word	0x20003210
 8016678:	20003214 	.word	0x20003214

0801667c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801667c:	b510      	push	{r4, lr}
 801667e:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8016680:	f7ff ffee 	bl	8016660 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8016684:	1b00      	subs	r0, r0, r4
 8016686:	bd10      	pop	{r4, pc}

08016688 <lv_anim_path_linear>:
 * @return the current value to set
 */
int32_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016688:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 801668c:	b513      	push	{r0, r1, r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 801668e:	9300      	str	r3, [sp, #0]
 8016690:	2300      	movs	r3, #0
{
 8016692:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016694:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016696:	4619      	mov	r1, r3
 8016698:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801669a:	f000 fe44 	bl	8017326 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 801669e:	69e2      	ldr	r2, [r4, #28]
 80166a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166a2:	1a9b      	subs	r3, r3, r2
 80166a4:	4358      	muls	r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start_value;

    return new_value;
}
 80166a6:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 80166aa:	b002      	add	sp, #8
 80166ac:	bd10      	pop	{r4, pc}
	...

080166b0 <anim_mark_list_change>:
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
        }
    }
}
static void anim_mark_list_change(void)
{
 80166b0:	b508      	push	{r3, lr}
    anim_list_changed = true;
 80166b2:	2201      	movs	r2, #1
 80166b4:	4b08      	ldr	r3, [pc, #32]	; (80166d8 <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80166b6:	4809      	ldr	r0, [pc, #36]	; (80166dc <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 80166b8:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80166ba:	f000 fd60 	bl	801717e <_lv_ll_get_head>
 80166be:	4b08      	ldr	r3, [pc, #32]	; (80166e0 <anim_mark_list_change+0x30>)
 80166c0:	b920      	cbnz	r0, 80166cc <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 80166c2:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 80166c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 80166c8:	f001 befc 	b.w	80184c4 <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 80166cc:	6818      	ldr	r0, [r3, #0]
}
 80166ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 80166d2:	f001 befc 	b.w	80184ce <lv_timer_resume>
 80166d6:	bf00      	nop
 80166d8:	2000321c 	.word	0x2000321c
 80166dc:	2000b540 	.word	0x2000b540
 80166e0:	20003218 	.word	0x20003218

080166e4 <anim_timer>:
{
 80166e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80166e8:	4e57      	ldr	r6, [pc, #348]	; (8016848 <anim_timer+0x164>)
{
 80166ea:	b093      	sub	sp, #76	; 0x4c
    anim_run_round = anim_run_round ? false : true;
 80166ec:	4d57      	ldr	r5, [pc, #348]	; (801684c <anim_timer+0x168>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80166ee:	6830      	ldr	r0, [r6, #0]
 80166f0:	f7ff ffc4 	bl	801667c <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 80166f4:	782b      	ldrb	r3, [r5, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80166f6:	4607      	mov	r7, r0
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80166f8:	4855      	ldr	r0, [pc, #340]	; (8016850 <anim_timer+0x16c>)
    anim_run_round = anim_run_round ? false : true;
 80166fa:	f083 0301 	eor.w	r3, r3, #1
        anim_list_changed = false;
 80166fe:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8016854 <anim_timer+0x170>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016702:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8016850 <anim_timer+0x16c>
    anim_run_round = anim_run_round ? false : true;
 8016706:	702b      	strb	r3, [r5, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016708:	f000 fd39 	bl	801717e <_lv_ll_get_head>
 801670c:	4604      	mov	r4, r0
    while(a != NULL) {
 801670e:	b92c      	cbnz	r4, 801671c <anim_timer+0x38>
    last_timer_run = lv_tick_get();
 8016710:	f7ff ffa6 	bl	8016660 <lv_tick_get>
 8016714:	6030      	str	r0, [r6, #0]
}
 8016716:	b013      	add	sp, #76	; 0x4c
 8016718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 801671c:	2300      	movs	r3, #0
        if(a->run_round != anim_run_round) {
 801671e:	782a      	ldrb	r2, [r5, #0]
        anim_list_changed = false;
 8016720:	f889 3000 	strb.w	r3, [r9]
        if(a->run_round != anim_run_round) {
 8016724:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016728:	f3c3 0180 	ubfx	r1, r3, #2, #1
 801672c:	4291      	cmp	r1, r2
 801672e:	f000 8086 	beq.w	801683e <anim_timer+0x15a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8016732:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016736:	0719      	lsls	r1, r3, #28
 8016738:	b2da      	uxtb	r2, r3
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 801673a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 801673e:	d41a      	bmi.n	8016776 <anim_timer+0x92>
            int32_t new_act_time = a->act_time + elaps;
 8016740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016742:	2b00      	cmp	r3, #0
 8016744:	dc17      	bgt.n	8016776 <anim_timer+0x92>
 8016746:	42fb      	cmn	r3, r7
 8016748:	d415      	bmi.n	8016776 <anim_timer+0x92>
                if(a->early_apply == 0 && a->get_value_cb) {
 801674a:	07d2      	lsls	r2, r2, #31
 801674c:	d409      	bmi.n	8016762 <anim_timer+0x7e>
 801674e:	6923      	ldr	r3, [r4, #16]
 8016750:	b13b      	cbz	r3, 8016762 <anim_timer+0x7e>
                    int32_t v_ofs  = a->get_value_cb(a);
 8016752:	4620      	mov	r0, r4
 8016754:	4798      	blx	r3
                    a->start_value += v_ofs;
 8016756:	69e3      	ldr	r3, [r4, #28]
 8016758:	4403      	add	r3, r0
 801675a:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 801675c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801675e:	4418      	add	r0, r3
 8016760:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 8016762:	68a3      	ldr	r3, [r4, #8]
 8016764:	b10b      	cbz	r3, 801676a <anim_timer+0x86>
 8016766:	4620      	mov	r0, r4
 8016768:	4798      	blx	r3
                a->start_cb_called = 1;
 801676a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 801676e:	f043 0308 	orr.w	r3, r3, #8
 8016772:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            a->act_time += elaps;
 8016776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016778:	443b      	add	r3, r7
            if(a->act_time >= 0) {
 801677a:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 801677c:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 801677e:	db2f      	blt.n	80167e0 <anim_timer+0xfc>
                if(a->act_time > a->time) a->act_time = a->time;
 8016780:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                new_value = a->path_cb(a);
 8016782:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 8016784:	4293      	cmp	r3, r2
                new_value = a->path_cb(a);
 8016786:	69a3      	ldr	r3, [r4, #24]
                if(a->act_time > a->time) a->act_time = a->time;
 8016788:	bfc8      	it	gt
 801678a:	62e2      	strgt	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 801678c:	4798      	blx	r3
                if(new_value != a->current_value) {
 801678e:	6a23      	ldr	r3, [r4, #32]
                new_value = a->path_cb(a);
 8016790:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 8016792:	4283      	cmp	r3, r0
 8016794:	d004      	beq.n	80167a0 <anim_timer+0xbc>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8016796:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8016798:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801679a:	b10b      	cbz	r3, 80167a0 <anim_timer+0xbc>
 801679c:	6820      	ldr	r0, [r4, #0]
 801679e:	4798      	blx	r3
                if(a->act_time >= a->time) {
 80167a0:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 80167a4:	429a      	cmp	r2, r3
 80167a6:	db1b      	blt.n	80167e0 <anim_timer+0xfc>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 80167a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80167ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80167ae:	f013 0302 	ands.w	r3, r3, #2
 80167b2:	d123      	bne.n	80167fc <anim_timer+0x118>
 80167b4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80167b6:	b9d9      	cbnz	r1, 80167f0 <anim_timer+0x10c>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 80167b8:	2a00      	cmp	r2, #0
 80167ba:	d13d      	bne.n	8016838 <anim_timer+0x154>
        lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 80167bc:	2244      	movs	r2, #68	; 0x44
 80167be:	4621      	mov	r1, r4
 80167c0:	a801      	add	r0, sp, #4
 80167c2:	f000 fe19 	bl	80173f8 <lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80167c6:	4621      	mov	r1, r4
 80167c8:	4640      	mov	r0, r8
 80167ca:	f000 fc9d 	bl	8017108 <_lv_ll_remove>
        lv_mem_free(a);
 80167ce:	4620      	mov	r0, r4
 80167d0:	f000 fdd8 	bl	8017384 <lv_mem_free>
        anim_mark_list_change();
 80167d4:	f7ff ff6c 	bl	80166b0 <anim_mark_list_change>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 80167d8:	9b04      	ldr	r3, [sp, #16]
 80167da:	b10b      	cbz	r3, 80167e0 <anim_timer+0xfc>
 80167dc:	a801      	add	r0, sp, #4
 80167de:	4798      	blx	r3
        if(anim_list_changed)
 80167e0:	f899 3000 	ldrb.w	r3, [r9]
 80167e4:	b35b      	cbz	r3, 801683e <anim_timer+0x15a>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80167e6:	4640      	mov	r0, r8
 80167e8:	f000 fcc9 	bl	801717e <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80167ec:	4604      	mov	r4, r0
 80167ee:	e78e      	b.n	801670e <anim_timer+0x2a>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 80167f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80167f4:	4281      	cmp	r1, r0
 80167f6:	d004      	beq.n	8016802 <anim_timer+0x11e>
        a->repeat_cnt--;
 80167f8:	3901      	subs	r1, #1
 80167fa:	87a1      	strh	r1, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 80167fc:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80167fe:	2900      	cmp	r1, #0
 8016800:	d0da      	beq.n	80167b8 <anim_timer+0xd4>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8016802:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016804:	4249      	negs	r1, r1
 8016806:	62e1      	str	r1, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8016808:	2a00      	cmp	r2, #0
 801680a:	d0e9      	beq.n	80167e0 <anim_timer+0xfc>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801680c:	b913      	cbnz	r3, 8016814 <anim_timer+0x130>
 801680e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016810:	4249      	negs	r1, r1
 8016812:	62e1      	str	r1, [r4, #44]	; 0x2c
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016814:	fab3 f383 	clz	r3, r3
 8016818:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
            tmp      = a->start_value;
 801681c:	69e0      	ldr	r0, [r4, #28]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801681e:	095b      	lsrs	r3, r3, #5
 8016820:	f363 0141 	bfi	r1, r3, #1, #1
            a->start_value = a->end_value;
 8016824:	6a63      	ldr	r3, [r4, #36]	; 0x24
            a->end_value   = tmp;
 8016826:	6260      	str	r0, [r4, #36]	; 0x24
            a->start_value = a->end_value;
 8016828:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 801682a:	078b      	lsls	r3, r1, #30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801682c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8016830:	bf58      	it	pl
 8016832:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8016834:	62a2      	str	r2, [r4, #40]	; 0x28
 8016836:	e7d3      	b.n	80167e0 <anim_timer+0xfc>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016838:	2b00      	cmp	r3, #0
 801683a:	d0e2      	beq.n	8016802 <anim_timer+0x11e>
 801683c:	e7be      	b.n	80167bc <anim_timer+0xd8>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801683e:	4621      	mov	r1, r4
 8016840:	4640      	mov	r0, r8
 8016842:	f000 fca2 	bl	801718a <_lv_ll_get_next>
 8016846:	e7d1      	b.n	80167ec <anim_timer+0x108>
 8016848:	20003220 	.word	0x20003220
 801684c:	2000321d 	.word	0x2000321d
 8016850:	2000b540 	.word	0x2000b540
 8016854:	2000321c 	.word	0x2000321c

08016858 <_lv_anim_core_init>:
{
 8016858:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 801685a:	2144      	movs	r1, #68	; 0x44
 801685c:	4807      	ldr	r0, [pc, #28]	; (801687c <_lv_anim_core_init+0x24>)
 801685e:	f000 fc14 	bl	801708a <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8016862:	2200      	movs	r2, #0
 8016864:	211e      	movs	r1, #30
 8016866:	4806      	ldr	r0, [pc, #24]	; (8016880 <_lv_anim_core_init+0x28>)
 8016868:	f001 fd46 	bl	80182f8 <lv_timer_create>
 801686c:	4b05      	ldr	r3, [pc, #20]	; (8016884 <_lv_anim_core_init+0x2c>)
 801686e:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 8016870:	f7ff ff1e 	bl	80166b0 <anim_mark_list_change>
    anim_list_changed = false;
 8016874:	4b04      	ldr	r3, [pc, #16]	; (8016888 <_lv_anim_core_init+0x30>)
 8016876:	2200      	movs	r2, #0
 8016878:	701a      	strb	r2, [r3, #0]
}
 801687a:	bd08      	pop	{r3, pc}
 801687c:	2000b540 	.word	0x2000b540
 8016880:	080166e5 	.word	0x080166e5
 8016884:	20003218 	.word	0x20003218
 8016888:	2000321c 	.word	0x2000321c

0801688c <lv_anim_init>:
{
 801688c:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 801688e:	2144      	movs	r1, #68	; 0x44
{
 8016890:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8016892:	f000 ff77 	bl	8017784 <lv_memset_00>
    a->time    = 500;
 8016896:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801689a:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value   = 0;
 801689c:	2300      	movs	r3, #0
 801689e:	61e3      	str	r3, [r4, #28]
    a->end_value     = 100;
 80168a0:	2364      	movs	r3, #100	; 0x64
 80168a2:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 80168a4:	2301      	movs	r3, #1
 80168a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 80168a8:	4b04      	ldr	r3, [pc, #16]	; (80168bc <lv_anim_init+0x30>)
 80168aa:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 80168ac:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80168b0:	f043 0301 	orr.w	r3, r3, #1
 80168b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80168b8:	bd10      	pop	{r4, pc}
 80168ba:	bf00      	nop
 80168bc:	08016689 	.word	0x08016689

080168c0 <lv_anim_del>:
{
 80168c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168c4:	4606      	mov	r6, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80168c6:	4813      	ldr	r0, [pc, #76]	; (8016914 <lv_anim_del+0x54>)
{
 80168c8:	460d      	mov	r5, r1
    bool del = false;
 80168ca:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80168ce:	f000 fc56 	bl	801717e <_lv_ll_get_head>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80168d2:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8016914 <lv_anim_del+0x54>
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80168d6:	4604      	mov	r4, r0
    while(a != NULL) {
 80168d8:	b914      	cbnz	r4, 80168e0 <lv_anim_del+0x20>
}
 80168da:	4640      	mov	r0, r8
 80168dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80168e0:	4621      	mov	r1, r4
 80168e2:	4648      	mov	r0, r9
 80168e4:	f000 fc51 	bl	801718a <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80168e8:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80168ea:	4607      	mov	r7, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80168ec:	42b3      	cmp	r3, r6
 80168ee:	d10e      	bne.n	801690e <lv_anim_del+0x4e>
 80168f0:	6863      	ldr	r3, [r4, #4]
 80168f2:	42ab      	cmp	r3, r5
 80168f4:	d000      	beq.n	80168f8 <lv_anim_del+0x38>
 80168f6:	b955      	cbnz	r5, 801690e <lv_anim_del+0x4e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80168f8:	4621      	mov	r1, r4
 80168fa:	4648      	mov	r0, r9
            del = true;
 80168fc:	f04f 0801 	mov.w	r8, #1
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016900:	f000 fc02 	bl	8017108 <_lv_ll_remove>
            lv_mem_free(a);
 8016904:	4620      	mov	r0, r4
 8016906:	f000 fd3d 	bl	8017384 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 801690a:	f7ff fed1 	bl	80166b0 <anim_mark_list_change>
            del = true;
 801690e:	463c      	mov	r4, r7
 8016910:	e7e2      	b.n	80168d8 <lv_anim_del+0x18>
 8016912:	bf00      	nop
 8016914:	2000b540 	.word	0x2000b540

08016918 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8016918:	6841      	ldr	r1, [r0, #4]
{
 801691a:	b538      	push	{r3, r4, r5, lr}
 801691c:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 801691e:	b111      	cbz	r1, 8016926 <lv_anim_start+0xe>
 8016920:	6800      	ldr	r0, [r0, #0]
 8016922:	f7ff ffcd 	bl	80168c0 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8016926:	481c      	ldr	r0, [pc, #112]	; (8016998 <lv_anim_start+0x80>)
 8016928:	f000 fc43 	bl	80171b2 <_lv_ll_is_empty>
 801692c:	b118      	cbz	r0, 8016936 <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 801692e:	f7ff fe97 	bl	8016660 <lv_tick_get>
 8016932:	4b1a      	ldr	r3, [pc, #104]	; (801699c <lv_anim_start+0x84>)
 8016934:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8016936:	4818      	ldr	r0, [pc, #96]	; (8016998 <lv_anim_start+0x80>)
 8016938:	f000 fbaf 	bl	801709a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 801693c:	4604      	mov	r4, r0
 801693e:	b900      	cbnz	r0, 8016942 <lv_anim_start+0x2a>
 8016940:	e7fe      	b.n	8016940 <lv_anim_start+0x28>
    a->time_orig = a->time;
 8016942:	6aab      	ldr	r3, [r5, #40]	; 0x28
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016944:	4629      	mov	r1, r5
    a->run_round = anim_run_round;
 8016946:	4a16      	ldr	r2, [pc, #88]	; (80169a0 <lv_anim_start+0x88>)
    a->time_orig = a->time;
 8016948:	642b      	str	r3, [r5, #64]	; 0x40
    a->run_round = anim_run_round;
 801694a:	7812      	ldrb	r2, [r2, #0]
 801694c:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8016950:	f362 0382 	bfi	r3, r2, #2, #1
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016954:	2244      	movs	r2, #68	; 0x44
    a->run_round = anim_run_round;
 8016956:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 801695a:	f000 fd4d 	bl	80173f8 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 801695e:	682b      	ldr	r3, [r5, #0]
 8016960:	42ab      	cmp	r3, r5
    if(new_anim->early_apply) {
 8016962:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    if(a->var == a) new_anim->var = new_anim;
 8016966:	bf08      	it	eq
 8016968:	6024      	streq	r4, [r4, #0]
    if(new_anim->early_apply) {
 801696a:	07db      	lsls	r3, r3, #31
 801696c:	d50f      	bpl.n	801698e <lv_anim_start+0x76>
        if(new_anim->get_value_cb) {
 801696e:	6923      	ldr	r3, [r4, #16]
 8016970:	b13b      	cbz	r3, 8016982 <lv_anim_start+0x6a>
            int32_t v_ofs  = new_anim->get_value_cb(a);
 8016972:	4628      	mov	r0, r5
 8016974:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 8016976:	69e3      	ldr	r3, [r4, #28]
 8016978:	4403      	add	r3, r0
 801697a:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
 801697c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801697e:	4418      	add	r0, r3
 8016980:	6260      	str	r0, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8016982:	6863      	ldr	r3, [r4, #4]
 8016984:	b11b      	cbz	r3, 801698e <lv_anim_start+0x76>
 8016986:	6820      	ldr	r0, [r4, #0]
 8016988:	b108      	cbz	r0, 801698e <lv_anim_start+0x76>
 801698a:	69e1      	ldr	r1, [r4, #28]
 801698c:	4798      	blx	r3
}
 801698e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    anim_mark_list_change();
 8016992:	f7ff be8d 	b.w	80166b0 <anim_mark_list_change>
 8016996:	bf00      	nop
 8016998:	2000b540 	.word	0x2000b540
 801699c:	20003220 	.word	0x20003220
 80169a0:	2000321d 	.word	0x2000321d

080169a4 <lv_anim_get>:
{
 80169a4:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80169a6:	4e09      	ldr	r6, [pc, #36]	; (80169cc <lv_anim_get+0x28>)
{
 80169a8:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80169aa:	4808      	ldr	r0, [pc, #32]	; (80169cc <lv_anim_get+0x28>)
{
 80169ac:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80169ae:	f000 fbe6 	bl	801717e <_lv_ll_get_head>
 80169b2:	b900      	cbnz	r0, 80169b6 <lv_anim_get+0x12>
}
 80169b4:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && a->exec_cb == exec_cb) {
 80169b6:	6803      	ldr	r3, [r0, #0]
 80169b8:	42a3      	cmp	r3, r4
 80169ba:	d102      	bne.n	80169c2 <lv_anim_get+0x1e>
 80169bc:	6843      	ldr	r3, [r0, #4]
 80169be:	42ab      	cmp	r3, r5
 80169c0:	d0f8      	beq.n	80169b4 <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80169c2:	4601      	mov	r1, r0
 80169c4:	4630      	mov	r0, r6
 80169c6:	f000 fbe0 	bl	801718a <_lv_ll_get_next>
 80169ca:	e7f2      	b.n	80169b2 <lv_anim_get+0xe>
 80169cc:	2000b540 	.word	0x2000b540

080169d0 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 80169d0:	1a8a      	subs	r2, r1, r2
    uint32_t time = (d * 1000) / speed;
 80169d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint32_t d    = LV_ABS(start - end);
 80169d6:	2a00      	cmp	r2, #0
 80169d8:	bfb8      	it	lt
 80169da:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 80169dc:	434a      	muls	r2, r1
 80169de:	fbb2 f3f0 	udiv	r3, r2, r0
    if(time == 0) {
 80169e2:	4282      	cmp	r2, r0
        time++;
 80169e4:	bf38      	it	cc
 80169e6:	3301      	addcc	r3, #1
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	4770      	bx	lr

080169ec <lv_anim_path_ease_out>:
{
 80169ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
 80169ee:	2300      	movs	r3, #0
 80169f0:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 80169f4:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
 80169f6:	9500      	str	r5, [sp, #0]
 80169f8:	4619      	mov	r1, r3
 80169fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80169fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80169fe:	f000 fc92 	bl	8017326 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, 1024);
 8016a02:	f240 33b6 	movw	r3, #950	; 0x3b6
 8016a06:	f44f 7261 	mov.w	r2, #900	; 0x384
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	9500      	str	r5, [sp, #0]
 8016a0e:	f000 fc09 	bl	8017224 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 8016a12:	69e2      	ldr	r2, [r4, #28]
 8016a14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	4358      	muls	r0, r3
}
 8016a1a:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8016a1e:	b003      	add	sp, #12
 8016a20:	bd30      	pop	{r4, r5, pc}

08016a22 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 8016a22:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8016a26:	429a      	cmp	r2, r3
        return a->end_value;
 8016a28:	bfac      	ite	ge
 8016a2a:	6a40      	ldrge	r0, [r0, #36]	; 0x24
        return a->start_value;
 8016a2c:	69c0      	ldrlt	r0, [r0, #28]
}
 8016a2e:	4770      	bx	lr

08016a30 <lv_point_within_circle>:
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016a30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 8016a34:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
 8016a36:	8849      	ldrh	r1, [r1, #2]
{
 8016a38:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016a3a:	f9b0 5000 	ldrsh.w	r5, [r0]
    lv_coord_t py = p->y - cy;
 8016a3e:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016a40:	1b5b      	subs	r3, r3, r5
    lv_coord_t px = p->x - cx;
 8016a42:	1b52      	subs	r2, r2, r5
    lv_coord_t py = p->y - cy;
 8016a44:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016a46:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016a4a:	105c      	asrs	r4, r3, #1
    lv_coord_t cx = area->x1 + r;
 8016a4c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
 8016a50:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
 8016a52:	1acb      	subs	r3, r1, r3

    uint32_t r_sqrd = r * r;
 8016a54:	4364      	muls	r4, r4
    uint32_t dist = (px * px) + (py * py);
 8016a56:	fb13 f303 	smulbb	r3, r3, r3
 8016a5a:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 8016a5e:	4294      	cmp	r4, r2
 8016a60:	bf34      	ite	cc
 8016a62:	2000      	movcc	r0, #0
 8016a64:	2001      	movcs	r0, #1
 8016a66:	bd30      	pop	{r4, r5, pc}

08016a68 <lv_area_set>:
    area_p->x2 = x2;
 8016a68:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 8016a6a:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 8016a6e:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8016a70:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 8016a72:	80c3      	strh	r3, [r0, #6]
}
 8016a74:	4770      	bx	lr

08016a76 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8016a76:	3901      	subs	r1, #1
 8016a78:	8803      	ldrh	r3, [r0, #0]
 8016a7a:	4419      	add	r1, r3
 8016a7c:	8081      	strh	r1, [r0, #4]
}
 8016a7e:	4770      	bx	lr

08016a80 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 8016a80:	3901      	subs	r1, #1
 8016a82:	8843      	ldrh	r3, [r0, #2]
 8016a84:	4419      	add	r1, r3
 8016a86:	80c1      	strh	r1, [r0, #6]
}
 8016a88:	4770      	bx	lr

08016a8a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8016a8a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016a8e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016a92:	1ad2      	subs	r2, r2, r3
 8016a94:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016a98:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8016a9c:	1a18      	subs	r0, r3, r0
 8016a9e:	3001      	adds	r0, #1
}
 8016aa0:	fb02 0000 	mla	r0, r2, r0, r0
 8016aa4:	4770      	bx	lr

08016aa6 <lv_area_increase>:
    area->x1 -= w_extra;
 8016aa6:	b289      	uxth	r1, r1
 8016aa8:	8803      	ldrh	r3, [r0, #0]
    area->y1 -= h_extra;
 8016aaa:	b292      	uxth	r2, r2
    area->x1 -= w_extra;
 8016aac:	1a5b      	subs	r3, r3, r1
 8016aae:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 8016ab0:	8883      	ldrh	r3, [r0, #4]
 8016ab2:	4419      	add	r1, r3
    area->y1 -= h_extra;
 8016ab4:	8843      	ldrh	r3, [r0, #2]
 8016ab6:	1a9b      	subs	r3, r3, r2
    area->x2 += w_extra;
 8016ab8:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 8016aba:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 8016abc:	88c3      	ldrh	r3, [r0, #6]
 8016abe:	441a      	add	r2, r3
 8016ac0:	80c2      	strh	r2, [r0, #6]
}
 8016ac2:	4770      	bx	lr

08016ac4 <lv_area_move>:
    area->x1 += x_ofs;
 8016ac4:	8803      	ldrh	r3, [r0, #0]
 8016ac6:	fa13 f381 	uxtah	r3, r3, r1
 8016aca:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 8016acc:	8883      	ldrh	r3, [r0, #4]
 8016ace:	fa13 f181 	uxtah	r1, r3, r1
    area->y1 += y_ofs;
 8016ad2:	8843      	ldrh	r3, [r0, #2]
 8016ad4:	fa13 f382 	uxtah	r3, r3, r2
    area->x2 += x_ofs;
 8016ad8:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 8016ada:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 8016adc:	88c3      	ldrh	r3, [r0, #6]
 8016ade:	fa13 f282 	uxtah	r2, r3, r2
 8016ae2:	80c2      	strh	r2, [r0, #6]
}
 8016ae4:	4770      	bx	lr

08016ae6 <_lv_area_intersect>:
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016ae6:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8016aea:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016aec:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016af0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016af4:	429d      	cmp	r5, r3
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016af6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016afa:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016afe:	bfb8      	it	lt
 8016b00:	461d      	movlt	r5, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016b02:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016b06:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8016b08:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016b0a:	bfb8      	it	lt
 8016b0c:	4623      	movlt	r3, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016b0e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016b12:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016b16:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8016b18:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016b1a:	bfa8      	it	ge
 8016b1c:	4634      	movge	r4, r6
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016b1e:	428a      	cmp	r2, r1
 8016b20:	bfa8      	it	ge
 8016b22:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8016b24:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8016b26:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8016b28:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8016b2a:	dc04      	bgt.n	8016b36 <_lv_area_intersect+0x50>
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	bfcc      	ite	gt
 8016b30:	2000      	movgt	r0, #0
 8016b32:	2001      	movle	r0, #1
}
 8016b34:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 8016b36:	2000      	movs	r0, #0
 8016b38:	e7fc      	b.n	8016b34 <_lv_area_intersect+0x4e>

08016b3a <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8016b3a:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 8016b3e:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8016b40:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016b44:	42a3      	cmp	r3, r4
 8016b46:	bfa8      	it	ge
 8016b48:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8016b4a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8016b4e:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8016b50:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8016b54:	42a3      	cmp	r3, r4
 8016b56:	bfa8      	it	ge
 8016b58:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8016b5a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8016b5e:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8016b60:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8016b64:	42a3      	cmp	r3, r4
 8016b66:	bfb8      	it	lt
 8016b68:	4623      	movlt	r3, r4
 8016b6a:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8016b6c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8016b70:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8016b74:	4293      	cmp	r3, r2
 8016b76:	bfb8      	it	lt
 8016b78:	4613      	movlt	r3, r2
 8016b7a:	80c3      	strh	r3, [r0, #6]
}
 8016b7c:	bd10      	pop	{r4, pc}

08016b7e <_lv_area_is_point_on>:
{
 8016b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016b82:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8016b86:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016b88:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8016b8c:	4689      	mov	r9, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8016b8e:	42ab      	cmp	r3, r5
 8016b90:	f2c0 8089 	blt.w	8016ca6 <_lv_area_is_point_on+0x128>
 8016b94:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 8016b98:	455b      	cmp	r3, fp
 8016b9a:	f300 8084 	bgt.w	8016ca6 <_lv_area_is_point_on+0x128>
 8016b9e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8016ba2:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8016ba6:	4554      	cmp	r4, sl
 8016ba8:	db7d      	blt.n	8016ca6 <_lv_area_is_point_on+0x128>
 8016baa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016bae:	429c      	cmp	r4, r3
 8016bb0:	dc79      	bgt.n	8016ca6 <_lv_area_is_point_on+0x128>
    if(radius <= 0) {
 8016bb2:	2a00      	cmp	r2, #0
 8016bb4:	dc03      	bgt.n	8016bbe <_lv_area_is_point_on+0x40>
        return true;
 8016bb6:	2001      	movs	r0, #1
}
 8016bb8:	b005      	add	sp, #20
 8016bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016bbe:	fa1f f68b 	uxth.w	r6, fp
    corner_area.x1 = a_p->x1;
 8016bc2:	f8ad 5008 	strh.w	r5, [sp, #8]
 8016bc6:	fa1f f885 	uxth.w	r8, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016bca:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016bcc:	1c70      	adds	r0, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016bce:	b29f      	uxth	r7, r3
 8016bd0:	fa1f f48a 	uxth.w	r4, sl
    corner_area.y1 = a_p->y1;
 8016bd4:	f8ad a00a 	strh.w	sl, [sp, #10]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016bd8:	eba0 0008 	sub.w	r0, r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016bdc:	46a4      	mov	ip, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8016bde:	f3c0 35c0 	ubfx	r5, r0, #15, #1
 8016be2:	fa05 f580 	sxtah	r5, r5, r0
 8016be6:	1c78      	adds	r0, r7, #1
 8016be8:	1b00      	subs	r0, r0, r4
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8016bea:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8016bee:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MIN(w, h);
 8016bf2:	106c      	asrs	r4, r5, #1
 8016bf4:	1040      	asrs	r0, r0, #1
    corner_area.x2 = a_p->x1 + radius;
 8016bf6:	4284      	cmp	r4, r0
 8016bf8:	bfa8      	it	ge
 8016bfa:	4604      	movge	r4, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016bfc:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x1 + radius;
 8016bfe:	42a2      	cmp	r2, r4
 8016c00:	bfa8      	it	ge
 8016c02:	4622      	movge	r2, r4
    corner_area.y2 = a_p->y1 + radius;
 8016c04:	fa1c f482 	uxtah	r4, ip, r2
    corner_area.x2 = a_p->x1 + radius;
 8016c08:	fa18 f882 	uxtah	r8, r8, r2
 8016c0c:	b295      	uxth	r5, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c0e:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 8016c10:	b2a3      	uxth	r3, r4
    corner_area.x2 = a_p->x1 + radius;
 8016c12:	fa1f f888 	uxth.w	r8, r8
    corner_area.y2 = a_p->y1 + radius;
 8016c16:	b224      	sxth	r4, r4
 8016c18:	9300      	str	r3, [sp, #0]
    corner_area.x2 = a_p->x1 + radius;
 8016c1a:	f8ad 800c 	strh.w	r8, [sp, #12]
    corner_area.y2 = a_p->y1 + radius;
 8016c1e:	f8ad 400e 	strh.w	r4, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c22:	f7ff ffac 	bl	8016b7e <_lv_area_is_point_on>
 8016c26:	9b01      	ldr	r3, [sp, #4]
 8016c28:	4602      	mov	r2, r0
 8016c2a:	b138      	cbz	r0, 8016c3c <_lv_area_is_point_on+0xbe>
        corner_area.x2 += radius;
 8016c2c:	44a8      	add	r8, r5
 8016c2e:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y2 += radius;
 8016c32:	9b00      	ldr	r3, [sp, #0]
 8016c34:	441d      	add	r5, r3
 8016c36:	f8ad 500e 	strh.w	r5, [sp, #14]
 8016c3a:	e011      	b.n	8016c60 <_lv_area_is_point_on+0xe2>
    corner_area.y1 = a_p->y2 - radius;
 8016c3c:	1b7f      	subs	r7, r7, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c3e:	4649      	mov	r1, r9
 8016c40:	a802      	add	r0, sp, #8
    corner_area.y2 = a_p->y2;
 8016c42:	f8ad 300e 	strh.w	r3, [sp, #14]
    corner_area.y1 = a_p->y2 - radius;
 8016c46:	b2bf      	uxth	r7, r7
 8016c48:	f8ad 700a 	strh.w	r7, [sp, #10]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c4c:	f7ff ff97 	bl	8016b7e <_lv_area_is_point_on>
 8016c50:	4602      	mov	r2, r0
 8016c52:	b150      	cbz	r0, 8016c6a <_lv_area_is_point_on+0xec>
        corner_area.x2 += radius;
 8016c54:	44a8      	add	r8, r5
 8016c56:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y1 -= radius;
 8016c5a:	1b7d      	subs	r5, r7, r5
 8016c5c:	f8ad 500a 	strh.w	r5, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 8016c60:	4649      	mov	r1, r9
 8016c62:	a802      	add	r0, sp, #8
 8016c64:	f7ff fee4 	bl	8016a30 <lv_point_within_circle>
 8016c68:	e7a6      	b.n	8016bb8 <_lv_area_is_point_on+0x3a>
    corner_area.x1 = a_p->x2 - radius;
 8016c6a:	1b76      	subs	r6, r6, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c6c:	4649      	mov	r1, r9
 8016c6e:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x2;
 8016c70:	f8ad b00c 	strh.w	fp, [sp, #12]
    corner_area.x1 = a_p->x2 - radius;
 8016c74:	b2b6      	uxth	r6, r6
 8016c76:	f8ad 6008 	strh.w	r6, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c7a:	f7ff ff80 	bl	8016b7e <_lv_area_is_point_on>
 8016c7e:	4602      	mov	r2, r0
 8016c80:	b118      	cbz	r0, 8016c8a <_lv_area_is_point_on+0x10c>
        corner_area.x1 -= radius;
 8016c82:	1b76      	subs	r6, r6, r5
 8016c84:	f8ad 6008 	strh.w	r6, [sp, #8]
 8016c88:	e7e7      	b.n	8016c5a <_lv_area_is_point_on+0xdc>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c8a:	4649      	mov	r1, r9
 8016c8c:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y1;
 8016c8e:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 8016c92:	f8ad 400e 	strh.w	r4, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8016c96:	f7ff ff72 	bl	8016b7e <_lv_area_is_point_on>
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	d08b      	beq.n	8016bb6 <_lv_area_is_point_on+0x38>
        corner_area.x1 -= radius;
 8016c9e:	1b76      	subs	r6, r6, r5
 8016ca0:	f8ad 6008 	strh.w	r6, [sp, #8]
 8016ca4:	e7c5      	b.n	8016c32 <_lv_area_is_point_on+0xb4>
        return false;
 8016ca6:	2000      	movs	r0, #0
 8016ca8:	e786      	b.n	8016bb8 <_lv_area_is_point_on+0x3a>

08016caa <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8016caa:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016cae:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	dc14      	bgt.n	8016ce0 <_lv_area_is_on+0x36>
 8016cb6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016cba:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	db0e      	blt.n	8016ce0 <_lv_area_is_on+0x36>
 8016cc2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016cc6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	dc08      	bgt.n	8016ce0 <_lv_area_is_on+0x36>
 8016cce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016cd2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016cd6:	4298      	cmp	r0, r3
 8016cd8:	bfb4      	ite	lt
 8016cda:	2000      	movlt	r0, #0
 8016cdc:	2001      	movge	r0, #1
 8016cde:	4770      	bx	lr
        return false;
 8016ce0:	2000      	movs	r0, #0
}
 8016ce2:	4770      	bx	lr

08016ce4 <_lv_area_is_in>:
{
 8016ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8016ce8:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8016cec:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8016cee:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 8016cf2:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8016cf4:	42bb      	cmp	r3, r7
 8016cf6:	dd03      	ble.n	8016d00 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 8016cf8:	2000      	movs	r0, #0
}
 8016cfa:	b002      	add	sp, #8
 8016cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8016d00:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016d04:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016d08:	4299      	cmp	r1, r3
 8016d0a:	dcf5      	bgt.n	8016cf8 <_lv_area_is_in+0x14>
 8016d0c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8016d10:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016d14:	42b1      	cmp	r1, r6
 8016d16:	dbef      	blt.n	8016cf8 <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 8016d18:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8016d1c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016d20:	4541      	cmp	r1, r8
 8016d22:	dbe9      	blt.n	8016cf8 <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 8016d24:	b32a      	cbz	r2, 8016d72 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d26:	a901      	add	r1, sp, #4
 8016d28:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8016d2a:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 8016d2e:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d32:	f7ff ff24 	bl	8016b7e <_lv_area_is_point_on>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d0de      	beq.n	8016cf8 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d3a:	462a      	mov	r2, r5
 8016d3c:	a901      	add	r1, sp, #4
 8016d3e:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8016d40:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d44:	f7ff ff1b 	bl	8016b7e <_lv_area_is_point_on>
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	d0d5      	beq.n	8016cf8 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d4c:	462a      	mov	r2, r5
 8016d4e:	a901      	add	r1, sp, #4
 8016d50:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 8016d52:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 8016d56:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d5a:	f7ff ff10 	bl	8016b7e <_lv_area_is_point_on>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d0ca      	beq.n	8016cf8 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d62:	462a      	mov	r2, r5
 8016d64:	a901      	add	r1, sp, #4
 8016d66:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 8016d68:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8016d6c:	f7ff ff07 	bl	8016b7e <_lv_area_is_point_on>
 8016d70:	e7c3      	b.n	8016cfa <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 8016d72:	2001      	movs	r0, #1
 8016d74:	e7c1      	b.n	8016cfa <_lv_area_is_in+0x16>

08016d76 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8016d76:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016d78:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016d7c:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8016d80:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8016d84:	f248 0681 	movw	r6, #32897	; 0x8081
 8016d88:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016d8a:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016d8e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016d92:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016d96:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016d98:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016d9a:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8016d9c:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8016d9e:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016da2:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016da6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016daa:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016dae:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016db2:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016db4:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8016db6:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016db8:	4372      	muls	r2, r6
    return ret;
 8016dba:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8016dbe:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8016dc0:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8016dc4:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8016dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016dca <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 8016dca:	0783      	lsls	r3, r0, #30
{
 8016dcc:	b510      	push	{r4, lr}
 8016dce:	b28c      	uxth	r4, r1
        *buf = color;
        buf++;
        px_num--;
 8016dd0:	bf1c      	itt	ne
 8016dd2:	f102 32ff 	addne.w	r2, r2, #4294967295
        *buf = color;
 8016dd6:	f820 1b02 	strhne.w	r1, [r0], #2
    }

    uint32_t c32 = color.full + (color.full << 16);
 8016dda:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 8016dde:	2a10      	cmp	r2, #16
 8016de0:	4601      	mov	r1, r0
 8016de2:	f100 0020 	add.w	r0, r0, #32
 8016de6:	d804      	bhi.n	8016df2 <lv_color_fill+0x28>
 8016de8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 8016dec:	4291      	cmp	r1, r2
 8016dee:	d10a      	bne.n	8016e06 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 8016df0:	bd10      	pop	{r4, pc}
        px_num -= 16;
 8016df2:	3a10      	subs	r2, #16
        *buf32 = c32;
 8016df4:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
 8016df8:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
 8016dfc:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
 8016e00:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
 8016e04:	e7eb      	b.n	8016dde <lv_color_fill+0x14>
        *buf = color;
 8016e06:	f821 4b02 	strh.w	r4, [r1], #2
        px_num --;
 8016e0a:	e7ef      	b.n	8016dec <lv_color_fill+0x22>

08016e0c <lv_color_darken>:
{
    return lv_color_mix(lv_color_white(), c, lvl);
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 8016e0c:	460a      	mov	r2, r1
    return lv_color_mix(lv_color_black(), c, lvl);
 8016e0e:	4601      	mov	r1, r0
 8016e10:	f04f 0000 	mov.w	r0, #0
 8016e14:	f7ff bfaf 	b.w	8016d76 <lv_color_mix>

08016e18 <lv_color_hsv_to_rgb>:
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
    h = (uint32_t)((uint32_t)h * 255) / 360;
    s = (uint16_t)((uint16_t)s * 255) / 100;
 8016e18:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8016e1c:	2364      	movs	r3, #100	; 0x64
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8016e1e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
{
 8016e22:	b530      	push	{r4, r5, lr}
    s = (uint16_t)((uint16_t)s * 255) / 100;
 8016e24:	b28c      	uxth	r4, r1
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8016e26:	b291      	uxth	r1, r2
    s = (uint16_t)((uint16_t)s * 255) / 100;
 8016e28:	fbb4 f4f3 	udiv	r4, r4, r3
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8016e2c:	fbb1 f1f3 	udiv	r1, r1, r3

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
 8016e30:	f014 02ff 	ands.w	r2, r4, #255	; 0xff
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8016e34:	b2c9      	uxtb	r1, r1
    if(s == 0) {
 8016e36:	d10a      	bne.n	8016e4e <lv_color_hsv_to_rgb+0x36>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016e38:	08ca      	lsrs	r2, r1, #3
 8016e3a:	f04f 0000 	mov.w	r0, #0
 8016e3e:	0889      	lsrs	r1, r1, #2
 8016e40:	f362 0004 	bfi	r0, r2, #0, #5
 8016e44:	f361 104a 	bfi	r0, r1, #5, #6
 8016e48:	f362 20cf 	bfi	r0, r2, #11, #5
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
}
 8016e4c:	bd30      	pop	{r4, r5, pc}
    h = (uint32_t)((uint32_t)h * 255) / 360;
 8016e4e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016e52:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8016e56:	fbb0 f0f3 	udiv	r0, r0, r3
    region    = h / 43;
 8016e5a:	232b      	movs	r3, #43	; 0x2b
 8016e5c:	b284      	uxth	r4, r0
 8016e5e:	fbb4 f4f3 	udiv	r4, r4, r3
    remainder = (h - (region * 43)) * 6;
 8016e62:	f06f 032a 	mvn.w	r3, #42	; 0x2a
    region    = h / 43;
 8016e66:	b2e4      	uxtb	r4, r4
    remainder = (h - (region * 43)) * 6;
 8016e68:	fb03 0304 	mla	r3, r3, r4, r0
    p = (v * (255 - s)) >> 8;
 8016e6c:	f1c2 00ff 	rsb	r0, r2, #255	; 0xff
    remainder = (h - (region * 43)) * 6;
 8016e70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    p = (v * (255 - s)) >> 8;
 8016e74:	4348      	muls	r0, r1
    remainder = (h - (region * 43)) * 6;
 8016e76:	005b      	lsls	r3, r3, #1
    p = (v * (255 - s)) >> 8;
 8016e78:	f3c0 2007 	ubfx	r0, r0, #8, #8
    remainder = (h - (region * 43)) * 6;
 8016e7c:	b2db      	uxtb	r3, r3
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8016e7e:	fb12 f503 	smulbb	r5, r2, r3
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8016e82:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016e86:	4353      	muls	r3, r2
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8016e88:	122d      	asrs	r5, r5, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8016e8a:	121b      	asrs	r3, r3, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8016e8c:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8016e90:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8016e94:	434d      	muls	r5, r1
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8016e96:	434b      	muls	r3, r1
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8016e98:	f3c5 2507 	ubfx	r5, r5, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8016e9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    switch(region) {
 8016ea0:	2c04      	cmp	r4, #4
 8016ea2:	d81f      	bhi.n	8016ee4 <lv_color_hsv_to_rgb+0xcc>
 8016ea4:	e8df f004 	tbb	[pc, r4]
 8016ea8:	15100305 	.word	0x15100305
 8016eac:	1a          	.byte	0x1a
 8016ead:	00          	.byte	0x00
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8016eae:	460b      	mov	r3, r1
 8016eb0:	4629      	mov	r1, r5
    return result;
 8016eb2:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8016eb6:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8016eba:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 8016ebe:	f3c1 00c7 	ubfx	r0, r1, #3, #8
 8016ec2:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8016ec6:	e7c1      	b.n	8016e4c <lv_color_hsv_to_rgb+0x34>
            break;
 8016ec8:	460a      	mov	r2, r1
            r = p;
 8016eca:	4601      	mov	r1, r0
            b = t;
 8016ecc:	4618      	mov	r0, r3
            g = v;
 8016ece:	4613      	mov	r3, r2
            break;
 8016ed0:	e7ef      	b.n	8016eb2 <lv_color_hsv_to_rgb+0x9a>
            break;
 8016ed2:	460a      	mov	r2, r1
            g = q;
 8016ed4:	462b      	mov	r3, r5
            r = p;
 8016ed6:	4601      	mov	r1, r0
            b = v;
 8016ed8:	4610      	mov	r0, r2
            break;
 8016eda:	e7ea      	b.n	8016eb2 <lv_color_hsv_to_rgb+0x9a>
 8016edc:	460a      	mov	r2, r1
            r = t;
 8016ede:	4619      	mov	r1, r3
            g = p;
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	e7f9      	b.n	8016ed8 <lv_color_hsv_to_rgb+0xc0>
            g = p;
 8016ee4:	4603      	mov	r3, r0
            b = q;
 8016ee6:	4628      	mov	r0, r5
            break;
 8016ee8:	e7e3      	b.n	8016eb2 <lv_color_hsv_to_rgb+0x9a>
	...

08016eec <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 8016eec:	2812      	cmp	r0, #18
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 8016eee:	bf96      	itet	ls
 8016ef0:	4b02      	ldrls	r3, [pc, #8]	; (8016efc <lv_palette_main+0x10>)
 8016ef2:	2000      	movhi	r0, #0
 8016ef4:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 8016ef8:	4770      	bx	lr
 8016efa:	bf00      	nop
 8016efc:	08029784 	.word	0x08029784

08016f00 <lv_palette_lighten>:
            {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
            {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
            {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

     if(p >= _LV_PALETTE_LAST) {
 8016f00:	2812      	cmp	r0, #18
 8016f02:	d902      	bls.n	8016f0a <lv_palette_lighten+0xa>
 8016f04:	f04f 0000 	mov.w	r0, #0
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 8016f08:	4770      	bx	lr
         LV_LOG_WARN("Invalid palette: %d", p);
         return lv_color_black();
     }

     if(lvl == 0 || lvl > 5) {
 8016f0a:	3901      	subs	r1, #1
 8016f0c:	b2c9      	uxtb	r1, r1
 8016f0e:	2904      	cmp	r1, #4
 8016f10:	d8f8      	bhi.n	8016f04 <lv_palette_lighten+0x4>
         return lv_color_black();
     }

     lvl--;

     return colors[p][lvl];
 8016f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016f16:	4b02      	ldr	r3, [pc, #8]	; (8016f20 <lv_palette_lighten+0x20>)
 8016f18:	4408      	add	r0, r1
 8016f1a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8016f1e:	4770      	bx	lr
 8016f20:	080297aa 	.word	0x080297aa

08016f24 <lv_palette_darken>:
            {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
            {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
            {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

     if(p >= _LV_PALETTE_LAST) {
 8016f24:	2812      	cmp	r0, #18
 8016f26:	d902      	bls.n	8016f2e <lv_palette_darken+0xa>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016f28:	f04f 0000 	mov.w	r0, #0
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 8016f2c:	4770      	bx	lr
         LV_LOG_WARN("Invalid palette: %d", p);
         return lv_color_black();
     }

     if(lvl == 0 || lvl > 4) {
 8016f2e:	3901      	subs	r1, #1
 8016f30:	b2c9      	uxtb	r1, r1
 8016f32:	2903      	cmp	r1, #3
 8016f34:	d8f8      	bhi.n	8016f28 <lv_palette_darken+0x4>
         return lv_color_black();
     }

     lvl--;

     return colors[p][lvl];
 8016f36:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8016f3a:	4b02      	ldr	r3, [pc, #8]	; (8016f44 <lv_palette_darken+0x20>)
 8016f3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8016f40:	4770      	bx	lr
 8016f42:	bf00      	nop
 8016f44:	08029868 	.word	0x08029868

08016f48 <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8016f48:	2104      	movs	r1, #4
 8016f4a:	4801      	ldr	r0, [pc, #4]	; (8016f50 <_lv_fs_init+0x8>)
 8016f4c:	f000 b89d 	b.w	801708a <_lv_ll_init>
 8016f50:	2000b5cc 	.word	0x2000b5cc

08016f54 <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8016f54:	b510      	push	{r4, lr}
 8016f56:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8016f58:	6840      	ldr	r0, [r0, #4]
 8016f5a:	b138      	cbz	r0, 8016f6c <lv_fs_close+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 8016f5c:	68c3      	ldr	r3, [r0, #12]
 8016f5e:	b13b      	cbz	r3, 8016f70 <lv_fs_close+0x1c>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8016f60:	6821      	ldr	r1, [r4, #0]
 8016f62:	4798      	blx	r3

    file_p->file_d = NULL;
 8016f64:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 8016f66:	e9c4 3300 	strd	r3, r3, [r4]

    return res;
}
 8016f6a:	bd10      	pop	{r4, pc}
        return LV_FS_RES_INV_PARAM;
 8016f6c:	200b      	movs	r0, #11
 8016f6e:	e7fc      	b.n	8016f6a <lv_fs_close+0x16>
        return LV_FS_RES_NOT_IMP;
 8016f70:	2009      	movs	r0, #9
 8016f72:	e7fa      	b.n	8016f6a <lv_fs_close+0x16>

08016f74 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8016f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(br != NULL) *br = 0;
 8016f76:	461c      	mov	r4, r3
 8016f78:	b10b      	cbz	r3, 8016f7e <lv_fs_read+0xa>
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8016f7e:	6845      	ldr	r5, [r0, #4]
 8016f80:	b17d      	cbz	r5, 8016fa2 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8016f82:	692e      	ldr	r6, [r5, #16]
 8016f84:	b17e      	cbz	r6, 8016fa6 <lv_fs_read+0x32>

    uint32_t br_tmp = 0;
 8016f86:	2300      	movs	r3, #0
 8016f88:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8016f8a:	ab03      	add	r3, sp, #12
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	4613      	mov	r3, r2
 8016f90:	460a      	mov	r2, r1
 8016f92:	6801      	ldr	r1, [r0, #0]
 8016f94:	4628      	mov	r0, r5
 8016f96:	47b0      	blx	r6
    if(br != NULL) *br = br_tmp;
 8016f98:	b10c      	cbz	r4, 8016f9e <lv_fs_read+0x2a>
 8016f9a:	9b03      	ldr	r3, [sp, #12]
 8016f9c:	6023      	str	r3, [r4, #0]

    return res;
}
 8016f9e:	b004      	add	sp, #16
 8016fa0:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8016fa2:	200b      	movs	r0, #11
 8016fa4:	e7fb      	b.n	8016f9e <lv_fs_read+0x2a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8016fa6:	2009      	movs	r0, #9
 8016fa8:	e7f9      	b.n	8016f9e <lv_fs_read+0x2a>

08016faa <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8016faa:	b430      	push	{r4, r5}
    if(file_p->drv == NULL) {
 8016fac:	6844      	ldr	r4, [r0, #4]
{
 8016fae:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 8016fb0:	b13c      	cbz	r4, 8016fc2 <lv_fs_seek+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 8016fb2:	69a5      	ldr	r5, [r4, #24]
 8016fb4:	b145      	cbz	r5, 8016fc8 <lv_fs_seek+0x1e>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8016fb6:	460a      	mov	r2, r1
 8016fb8:	46ac      	mov	ip, r5
 8016fba:	6801      	ldr	r1, [r0, #0]
 8016fbc:	4620      	mov	r0, r4

    return res;
}
 8016fbe:	bc30      	pop	{r4, r5}
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8016fc0:	4760      	bx	ip
        return LV_FS_RES_INV_PARAM;
 8016fc2:	200b      	movs	r0, #11
}
 8016fc4:	bc30      	pop	{r4, r5}
 8016fc6:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 8016fc8:	2009      	movs	r0, #9
 8016fca:	e7fb      	b.n	8016fc4 <lv_fs_seek+0x1a>

08016fcc <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 8016fcc:	b538      	push	{r3, r4, r5, lr}
 8016fce:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8016fd0:	4808      	ldr	r0, [pc, #32]	; (8016ff4 <lv_fs_get_drv+0x28>)
 8016fd2:	f000 f8d4 	bl	801717e <_lv_ll_get_head>
 8016fd6:	4d07      	ldr	r5, [pc, #28]	; (8016ff4 <lv_fs_get_drv+0x28>)
 8016fd8:	4601      	mov	r1, r0
 8016fda:	b909      	cbnz	r1, 8016fe0 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 8016fdc:	4608      	mov	r0, r1
}
 8016fde:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 8016fe0:	6808      	ldr	r0, [r1, #0]
 8016fe2:	7803      	ldrb	r3, [r0, #0]
 8016fe4:	42a3      	cmp	r3, r4
 8016fe6:	d0fa      	beq.n	8016fde <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8016fe8:	4628      	mov	r0, r5
 8016fea:	f000 f8ce 	bl	801718a <_lv_ll_get_next>
 8016fee:	4601      	mov	r1, r0
 8016ff0:	e7f3      	b.n	8016fda <lv_fs_get_drv+0xe>
 8016ff2:	bf00      	nop
 8016ff4:	2000b5cc 	.word	0x2000b5cc

08016ff8 <lv_fs_open>:
{
 8016ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ffa:	4606      	mov	r6, r0
 8016ffc:	4617      	mov	r7, r2
    if(path == NULL) {
 8016ffe:	460c      	mov	r4, r1
 8017000:	b1f1      	cbz	r1, 8017040 <lv_fs_open+0x48>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8017002:	7808      	ldrb	r0, [r1, #0]
 8017004:	f7ff ffe2 	bl	8016fcc <lv_fs_get_drv>
    if(drv == NULL) {
 8017008:	4605      	mov	r5, r0
 801700a:	b1d8      	cbz	r0, 8017044 <lv_fs_open+0x4c>
    if(drv->ready_cb) {
 801700c:	6843      	ldr	r3, [r0, #4]
 801700e:	b91b      	cbnz	r3, 8017018 <lv_fs_open+0x20>
    if(drv->open_cb == NULL) {
 8017010:	68ab      	ldr	r3, [r5, #8]
 8017012:	b933      	cbnz	r3, 8017022 <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_IMP;
 8017014:	2009      	movs	r0, #9
 8017016:	e003      	b.n	8017020 <lv_fs_open+0x28>
        if(drv->ready_cb(drv) == false) {
 8017018:	4798      	blx	r3
 801701a:	2800      	cmp	r0, #0
 801701c:	d1f8      	bne.n	8017010 <lv_fs_open+0x18>
            return LV_FS_RES_HW_ERR;
 801701e:	2001      	movs	r0, #1
}
 8017020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 8017022:	7862      	ldrb	r2, [r4, #1]
    void *file_d = drv->open_cb(drv, real_path, mode);
 8017024:	4628      	mov	r0, r5
    if(*path == ':') path++;
 8017026:	2a3a      	cmp	r2, #58	; 0x3a
    void *file_d = drv->open_cb(drv, real_path, mode);
 8017028:	463a      	mov	r2, r7
    path++; /*Ignore the driver letter*/
 801702a:	bf14      	ite	ne
 801702c:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 801702e:	1ca1      	addeq	r1, r4, #2
    void *file_d = drv->open_cb(drv, real_path, mode);
 8017030:	4798      	blx	r3
    if(file_d == NULL || file_d == (void*)(-1)) {
 8017032:	1e43      	subs	r3, r0, #1
 8017034:	3303      	adds	r3, #3
 8017036:	d807      	bhi.n	8017048 <lv_fs_open+0x50>
    file_p->file_d = file_d;
 8017038:	e9c6 0500 	strd	r0, r5, [r6]
    return LV_FS_RES_OK;
 801703c:	2000      	movs	r0, #0
 801703e:	e7ef      	b.n	8017020 <lv_fs_open+0x28>
        return LV_FS_RES_INV_PARAM;
 8017040:	200b      	movs	r0, #11
 8017042:	e7ed      	b.n	8017020 <lv_fs_open+0x28>
        return LV_FS_RES_NOT_EX;
 8017044:	2003      	movs	r0, #3
 8017046:	e7eb      	b.n	8017020 <lv_fs_open+0x28>
        return LV_FS_RES_UNKNOWN;
 8017048:	200c      	movs	r0, #12
 801704a:	e7e9      	b.n	8017020 <lv_fs_open+0x28>

0801704c <lv_fs_get_ext>:
{
 801704c:	b510      	push	{r4, lr}
 801704e:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8017050:	f7e9 f8e8 	bl	8000224 <strlen>
 8017054:	b908      	cbnz	r0, 801705a <lv_fs_get_ext+0xe>
            return ""; /*No extension if a '\' or '/' found*/
 8017056:	4807      	ldr	r0, [pc, #28]	; (8017074 <lv_fs_get_ext+0x28>)
 8017058:	e004      	b.n	8017064 <lv_fs_get_ext+0x18>
        if(fn[i] == '.') {
 801705a:	5c23      	ldrb	r3, [r4, r0]
 801705c:	2b2e      	cmp	r3, #46	; 0x2e
 801705e:	d102      	bne.n	8017066 <lv_fs_get_ext+0x1a>
            return &fn[i + 1];
 8017060:	3001      	adds	r0, #1
 8017062:	4420      	add	r0, r4
}
 8017064:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 8017066:	2b2f      	cmp	r3, #47	; 0x2f
 8017068:	d0f5      	beq.n	8017056 <lv_fs_get_ext+0xa>
 801706a:	2b5c      	cmp	r3, #92	; 0x5c
 801706c:	d0f3      	beq.n	8017056 <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 801706e:	3801      	subs	r0, #1
 8017070:	e7f0      	b.n	8017054 <lv_fs_get_ext+0x8>
 8017072:	bf00      	nop
 8017074:	0802a5e7 	.word	0x0802a5e7

08017078 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8017078:	b109      	cbz	r1, 801707e <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 801707a:	6803      	ldr	r3, [r0, #0]
 801707c:	50ca      	str	r2, [r1, r3]
}
 801707e:	4770      	bx	lr

08017080 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8017080:	b111      	cbz	r1, 8017088 <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8017082:	6803      	ldr	r3, [r0, #0]
 8017084:	4419      	add	r1, r3
 8017086:	604a      	str	r2, [r1, #4]
}
 8017088:	4770      	bx	lr

0801708a <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 801708a:	3103      	adds	r1, #3
    ll_p->head = NULL;
 801708c:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 801708e:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 8017092:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 8017096:	6001      	str	r1, [r0, #0]
}
 8017098:	4770      	bx	lr

0801709a <_lv_ll_ins_head>:
{
 801709a:	b538      	push	{r3, r4, r5, lr}
 801709c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801709e:	6800      	ldr	r0, [r0, #0]
 80170a0:	3008      	adds	r0, #8
 80170a2:	f000 faf1 	bl	8017688 <lv_mem_alloc>
    if(n_new != NULL) {
 80170a6:	4605      	mov	r5, r0
 80170a8:	b180      	cbz	r0, 80170cc <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 80170aa:	4601      	mov	r1, r0
 80170ac:	2200      	movs	r2, #0
 80170ae:	4620      	mov	r0, r4
 80170b0:	f7ff ffe2 	bl	8017078 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 80170b4:	6862      	ldr	r2, [r4, #4]
 80170b6:	f7ff ffe3 	bl	8017080 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 80170ba:	6861      	ldr	r1, [r4, #4]
 80170bc:	b111      	cbz	r1, 80170c4 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 80170be:	462a      	mov	r2, r5
 80170c0:	f7ff ffda 	bl	8017078 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80170c4:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 80170c6:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 80170c8:	b903      	cbnz	r3, 80170cc <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 80170ca:	60a5      	str	r5, [r4, #8]
}
 80170cc:	4628      	mov	r0, r5
 80170ce:	bd38      	pop	{r3, r4, r5, pc}

080170d0 <_lv_ll_ins_tail>:
{
 80170d0:	b538      	push	{r3, r4, r5, lr}
 80170d2:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80170d4:	6800      	ldr	r0, [r0, #0]
 80170d6:	3008      	adds	r0, #8
 80170d8:	f000 fad6 	bl	8017688 <lv_mem_alloc>
    if(n_new != NULL) {
 80170dc:	4605      	mov	r5, r0
 80170de:	b188      	cbz	r0, 8017104 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 80170e0:	4601      	mov	r1, r0
 80170e2:	2200      	movs	r2, #0
 80170e4:	4620      	mov	r0, r4
 80170e6:	f7ff ffcb 	bl	8017080 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 80170ea:	4629      	mov	r1, r5
 80170ec:	68a2      	ldr	r2, [r4, #8]
 80170ee:	f7ff ffc3 	bl	8017078 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 80170f2:	68a1      	ldr	r1, [r4, #8]
 80170f4:	b111      	cbz	r1, 80170fc <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 80170f6:	462a      	mov	r2, r5
 80170f8:	f7ff ffc2 	bl	8017080 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 80170fc:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 80170fe:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8017100:	b903      	cbnz	r3, 8017104 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 8017102:	6065      	str	r5, [r4, #4]
}
 8017104:	4628      	mov	r0, r5
 8017106:	bd38      	pop	{r3, r4, r5, pc}

08017108 <_lv_ll_remove>:
{
 8017108:	460b      	mov	r3, r1
 801710a:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return;
 801710c:	b140      	cbz	r0, 8017120 <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 801710e:	e9d0 1200 	ldrd	r1, r2, [r0]
 8017112:	4293      	cmp	r3, r2
 8017114:	d10a      	bne.n	801712c <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 8017116:	440b      	add	r3, r1
 8017118:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801711a:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 801711c:	b909      	cbnz	r1, 8017122 <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 801711e:	6081      	str	r1, [r0, #8]
}
 8017120:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 8017122:	2200      	movs	r2, #0
}
 8017124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 8017128:	f7ff bfa6 	b.w	8017078 <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801712c:	6882      	ldr	r2, [r0, #8]
 801712e:	585d      	ldr	r5, [r3, r1]
 8017130:	4293      	cmp	r3, r2
 8017132:	d109      	bne.n	8017148 <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8017134:	6085      	str	r5, [r0, #8]
        if(ll_p->tail == NULL) {
 8017136:	b90d      	cbnz	r5, 801713c <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 8017138:	6045      	str	r5, [r0, #4]
 801713a:	e7f1      	b.n	8017120 <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 801713c:	4629      	mov	r1, r5
 801713e:	2200      	movs	r2, #0
}
 8017140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 8017144:	f7ff bf9c 	b.w	8017080 <node_set_next.isra.0>
    return *((lv_ll_node_t **)n_act_d);
 8017148:	440b      	add	r3, r1
        node_set_next(ll_p, n_prev, n_next);
 801714a:	4629      	mov	r1, r5
    return *((lv_ll_node_t **)n_act_d);
 801714c:	685e      	ldr	r6, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 801714e:	4632      	mov	r2, r6
 8017150:	f7ff ff96 	bl	8017080 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 8017154:	462a      	mov	r2, r5
 8017156:	4631      	mov	r1, r6
 8017158:	e7e4      	b.n	8017124 <_lv_ll_remove+0x1c>

0801715a <_lv_ll_clear>:
{
 801715a:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return NULL;
 801715c:	4604      	mov	r4, r0
 801715e:	b108      	cbz	r0, 8017164 <_lv_ll_clear+0xa>
    return ll_p->head;
 8017160:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
 8017162:	b905      	cbnz	r5, 8017166 <_lv_ll_clear+0xc>
}
 8017164:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 8017166:	6823      	ldr	r3, [r4, #0]
        _lv_ll_remove(ll_p, i);
 8017168:	4629      	mov	r1, r5
 801716a:	4620      	mov	r0, r4
    return *((lv_ll_node_t **)n_act_d);
 801716c:	442b      	add	r3, r5
 801716e:	685e      	ldr	r6, [r3, #4]
        _lv_ll_remove(ll_p, i);
 8017170:	f7ff ffca 	bl	8017108 <_lv_ll_remove>
        lv_mem_free(i);
 8017174:	4628      	mov	r0, r5
 8017176:	f000 f905 	bl	8017384 <lv_mem_free>
        i = i_next;
 801717a:	4635      	mov	r5, r6
 801717c:	e7f1      	b.n	8017162 <_lv_ll_clear+0x8>

0801717e <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 801717e:	b100      	cbz	r0, 8017182 <_lv_ll_get_head+0x4>
    return ll_p->head;
 8017180:	6840      	ldr	r0, [r0, #4]
}
 8017182:	4770      	bx	lr

08017184 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8017184:	b100      	cbz	r0, 8017188 <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 8017186:	6880      	ldr	r0, [r0, #8]
}
 8017188:	4770      	bx	lr

0801718a <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 801718a:	6803      	ldr	r3, [r0, #0]
 801718c:	4419      	add	r1, r3
}
 801718e:	6848      	ldr	r0, [r1, #4]
 8017190:	4770      	bx	lr

08017192 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8017192:	6803      	ldr	r3, [r0, #0]
}
 8017194:	58c8      	ldr	r0, [r1, r3]
 8017196:	4770      	bx	lr

08017198 <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8017198:	b148      	cbz	r0, 80171ae <_lv_ll_get_len+0x16>
    return ll_p->head;
 801719a:	6843      	ldr	r3, [r0, #4]
 801719c:	2200      	movs	r2, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801719e:	b90b      	cbnz	r3, 80171a4 <_lv_ll_get_len+0xc>
}
 80171a0:	4610      	mov	r0, r2
 80171a2:	4770      	bx	lr
    return *((lv_ll_node_t **)n_act_d);
 80171a4:	6801      	ldr	r1, [r0, #0]
        len++;
 80171a6:	3201      	adds	r2, #1
    return *((lv_ll_node_t **)n_act_d);
 80171a8:	440b      	add	r3, r1
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	e7f7      	b.n	801719e <_lv_ll_get_len+0x6>
 80171ae:	4602      	mov	r2, r0
    return len;
 80171b0:	e7f6      	b.n	80171a0 <_lv_ll_get_len+0x8>

080171b2 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 80171b2:	b130      	cbz	r0, 80171c2 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80171b4:	6843      	ldr	r3, [r0, #4]
 80171b6:	b933      	cbnz	r3, 80171c6 <_lv_ll_is_empty+0x14>
 80171b8:	6880      	ldr	r0, [r0, #8]
 80171ba:	fab0 f080 	clz	r0, r0
 80171be:	0940      	lsrs	r0, r0, #5
 80171c0:	4770      	bx	lr
    if(ll_p == NULL) return true;
 80171c2:	2001      	movs	r0, #1
 80171c4:	4770      	bx	lr
    return false;
 80171c6:	2000      	movs	r0, #0
}
 80171c8:	4770      	bx	lr
	...

080171cc <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 80171cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80171d0:	fb90 f2f3 	sdiv	r2, r0, r3
 80171d4:	fb02 0013 	mls	r0, r2, r3, r0
 80171d8:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 80171da:	2800      	cmp	r0, #0
 80171dc:	bfb8      	it	lt
 80171de:	18c0      	addlt	r0, r0, r3
 80171e0:	4b0f      	ldr	r3, [pc, #60]	; (8017220 <lv_trigo_sin+0x54>)
 80171e2:	bfb8      	it	lt
 80171e4:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 80171e6:	2859      	cmp	r0, #89	; 0x59
 80171e8:	dc02      	bgt.n	80171f0 <lv_trigo_sin+0x24>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 80171ea:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80171ee:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 80171f0:	b280      	uxth	r0, r0
 80171f2:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 80171f6:	2a59      	cmp	r2, #89	; 0x59
 80171f8:	d803      	bhi.n	8017202 <lv_trigo_sin+0x36>
        angle = 180 - angle;
 80171fa:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 80171fe:	b280      	uxth	r0, r0
 8017200:	e7f3      	b.n	80171ea <lv_trigo_sin+0x1e>
    }
    else if(angle >= 180 && angle < 270) {
 8017202:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 8017206:	b292      	uxth	r2, r2
 8017208:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801720a:	bf89      	itett	hi
 801720c:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 8017210:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 8017214:	b280      	uxthhi	r0, r0
 8017216:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 801721a:	4240      	negs	r0, r0
 801721c:	b200      	sxth	r0, r0
    }

    return ret;
}
 801721e:	4770      	bx	lr
 8017220:	08029900 	.word	0x08029900

08017224 <lv_bezier3>:
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
    uint32_t t_rem  = 1024 - t;
 8017224:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
{
 8017228:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 801722a:	fb0c f70c 	mul.w	r7, ip, ip
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 801722e:	fb02 f400 	mul.w	r4, r2, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8017232:	0abf      	lsrs	r7, r7, #10
    uint32_t t2     = (t * t) >> 10;
 8017234:	fb00 f600 	mul.w	r6, r0, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8017238:	fb03 f30c 	mul.w	r3, r3, ip
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 801723c:	437c      	muls	r4, r7
    uint32_t t2     = (t * t) >> 10;
 801723e:	0ab6      	lsrs	r6, r6, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8017240:	fb07 f70c 	mul.w	r7, r7, ip
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8017244:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    uint32_t t3     = (t2 * t) >> 10;
 8017248:	fb06 f400 	mul.w	r4, r6, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 801724c:	435e      	muls	r6, r3
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 801724e:	0ab8      	lsrs	r0, r7, #10
    uint32_t t3     = (t2 * t) >> 10;
 8017250:	0aa5      	lsrs	r5, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 8017252:	9c05      	ldr	r4, [sp, #20]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8017254:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8017258:	4348      	muls	r0, r1
    uint32_t v4 = (t3 * u3) >> 10;
 801725a:	436c      	muls	r4, r5
 801725c:	0aa4      	lsrs	r4, r4, #10

    return v1 + v2 + v3 + v4;
 801725e:	eb04 5412 	add.w	r4, r4, r2, lsr #20
 8017262:	eb04 5416 	add.w	r4, r4, r6, lsr #20
}
 8017266:	eb04 2090 	add.w	r0, r4, r0, lsr #10
 801726a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801726c <lv_sqrt>:
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 801726c:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
 801726e:	2300      	movs	r3, #0
{
 8017270:	b530      	push	{r4, r5, lr}
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 8017272:	18d4      	adds	r4, r2, r3
        if(trial * trial <= x) root = trial;
 8017274:	fb04 f504 	mul.w	r5, r4, r4
 8017278:	4285      	cmp	r5, r0
 801727a:	bf98      	it	ls
 801727c:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
 801727e:	0852      	lsrs	r2, r2, #1
 8017280:	d1f7      	bne.n	8017272 <lv_sqrt+0x6>

    q->i = root >> 4;
 8017282:	091a      	lsrs	r2, r3, #4
    q->f = (root & 0xf) << 4;
 8017284:	011b      	lsls	r3, r3, #4
    q->i = root >> 4;
 8017286:	800a      	strh	r2, [r1, #0]
    q->f = (root & 0xf) << 4;
 8017288:	b2db      	uxtb	r3, r3
 801728a:	804b      	strh	r3, [r1, #2]
}
 801728c:	bd30      	pop	{r4, r5, pc}

0801728e <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 801728e:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8017290:	f04f 022d 	mov.w	r2, #45	; 0x2d
        negflag += 0x01;    // x flag bit
 8017294:	bfba      	itte	lt
 8017296:	2301      	movlt	r3, #1
        x = (0 - x);        // is now +
 8017298:	4240      	neglt	r0, r0
    negflag = 0;
 801729a:	2300      	movge	r3, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 801729c:	2900      	cmp	r1, #0
        negflag += 0x02;    // y flag bit
        y = (0 - y);        // is now +
 801729e:	bfbe      	ittt	lt
 80172a0:	4249      	neglt	r1, r1
        negflag += 0x02;    // y flag bit
 80172a2:	3302      	addlt	r3, #2
 80172a4:	b2db      	uxtblt	r3, r3
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 80172a6:	4288      	cmp	r0, r1
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 80172a8:	bf85      	ittet	hi
 80172aa:	4351      	mulhi	r1, r2
        negflag += 0x10;    // octant flag bit
 80172ac:	3310      	addhi	r3, #16
    }
    else {
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 80172ae:	4342      	mulls	r2, r0
        negflag += 0x10;    // octant flag bit
 80172b0:	b2db      	uxtbhi	r3, r3
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 80172b2:	bf8c      	ite	hi
 80172b4:	fbb1 f1f0 	udivhi	r1, r1, r0
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 80172b8:	fbb2 f1f1 	udivls	r1, r2, r1
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 80172bc:	b2ca      	uxtb	r2, r1
    if(tempdegree > 22) {    // if top half of range
 80172be:	2a16      	cmp	r2, #22
 80172c0:	d90f      	bls.n	80172e2 <lv_atan2+0x54>
        if(tempdegree <= 44) comp++;
 80172c2:	2a2c      	cmp	r2, #44	; 0x2c
 80172c4:	bf94      	ite	ls
 80172c6:	2001      	movls	r0, #1
 80172c8:	2000      	movhi	r0, #0
        if(tempdegree <= 41) comp++;
 80172ca:	2a29      	cmp	r2, #41	; 0x29
 80172cc:	bf98      	it	ls
 80172ce:	3001      	addls	r0, #1
        if(tempdegree <= 37) comp++;
 80172d0:	2a25      	cmp	r2, #37	; 0x25
 80172d2:	bf9c      	itt	ls
 80172d4:	3001      	addls	r0, #1
 80172d6:	b2c0      	uxtbls	r0, r0
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 80172d8:	2a20      	cmp	r2, #32
 80172da:	d80f      	bhi.n	80172fc <lv_atan2+0x6e>
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
        if(tempdegree >= 6) comp++;
        if(tempdegree >= 10) comp++;
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 80172dc:	3001      	adds	r0, #1
 80172de:	b2c0      	uxtb	r0, r0
 80172e0:	e00c      	b.n	80172fc <lv_atan2+0x6e>
        if(tempdegree >= 2) comp++;
 80172e2:	2a01      	cmp	r2, #1
 80172e4:	bf8c      	ite	hi
 80172e6:	2001      	movhi	r0, #1
 80172e8:	2000      	movls	r0, #0
        if(tempdegree >= 6) comp++;
 80172ea:	2a05      	cmp	r2, #5
 80172ec:	bf88      	it	hi
 80172ee:	3001      	addhi	r0, #1
        if(tempdegree >= 10) comp++;
 80172f0:	2a09      	cmp	r2, #9
 80172f2:	bf84      	itt	hi
 80172f4:	3001      	addhi	r0, #1
 80172f6:	b2c0      	uxtbhi	r0, r0
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 80172f8:	2a0e      	cmp	r2, #14
 80172fa:	d8ef      	bhi.n	80172dc <lv_atan2+0x4e>
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 80172fc:	06da      	lsls	r2, r3, #27
    degree += comp;   // degree is now accurate to +/- 1 degree!
 80172fe:	4408      	add	r0, r1
    if(negflag & 0x10) degree = (90 - degree);
 8017300:	f003 0201 	and.w	r2, r3, #1
 8017304:	bf48      	it	mi
 8017306:	f1c0 005a 	rsbmi	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 801730a:	079b      	lsls	r3, r3, #30
 801730c:	d506      	bpl.n	801731c <lv_atan2+0x8e>
        if(negflag & 0x01)   // if -Y -X
 801730e:	b112      	cbz	r2, 8017316 <lv_atan2+0x88>
            degree = (180 + degree);
 8017310:	30b4      	adds	r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 8017312:	b280      	uxth	r0, r0
 8017314:	4770      	bx	lr
            degree = (180 - degree);
 8017316:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801731a:	e7fa      	b.n	8017312 <lv_atan2+0x84>
        if(negflag & 0x01)   // if +Y -X
 801731c:	2a00      	cmp	r2, #0
 801731e:	d0f8      	beq.n	8017312 <lv_atan2+0x84>
            degree = (360 - degree);
 8017320:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 8017324:	e7f5      	b.n	8017312 <lv_atan2+0x84>

08017326 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8017326:	b530      	push	{r4, r5, lr}
 8017328:	4604      	mov	r4, r0
 801732a:	9803      	ldr	r0, [sp, #12]
    if(x >= max_in) return max_out;
 801732c:	4294      	cmp	r4, r2
 801732e:	da0a      	bge.n	8017346 <lv_map+0x20>
    if(x <= min_in) return min_out;
 8017330:	428c      	cmp	r4, r1
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8017332:	bfc3      	ittte	gt
 8017334:	1a65      	subgt	r5, r4, r1
    int32_t delta_out = max_out - min_out;
 8017336:	1ac4      	subgt	r4, r0, r3
    int32_t delta_in = max_in - min_in;
 8017338:	1a50      	subgt	r0, r2, r1
    if(x <= min_in) return min_out;
 801733a:	4618      	movle	r0, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 801733c:	bfc2      	ittt	gt
 801733e:	436c      	mulgt	r4, r5
 8017340:	fb94 f0f0 	sdivgt	r0, r4, r0
 8017344:	18c0      	addgt	r0, r0, r3
}
 8017346:	bd30      	pop	{r4, r5, pc}

08017348 <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
 8017348:	b11a      	cbz	r2, 8017352 <lv_mem_walker+0xa>
        mon_p->used_cnt++;
 801734a:	691a      	ldr	r2, [r3, #16]
 801734c:	3201      	adds	r2, #1
 801734e:	611a      	str	r2, [r3, #16]
 8017350:	4770      	bx	lr
    }
    else {
        mon_p->free_cnt++;
 8017352:	685a      	ldr	r2, [r3, #4]
 8017354:	3201      	adds	r2, #1
 8017356:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
 8017358:	689a      	ldr	r2, [r3, #8]
 801735a:	440a      	add	r2, r1
 801735c:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
 801735e:	68da      	ldr	r2, [r3, #12]
 8017360:	4291      	cmp	r1, r2
            mon_p->free_biggest_size = size;
 8017362:	bf88      	it	hi
 8017364:	60d9      	strhi	r1, [r3, #12]
    }
}
 8017366:	4770      	bx	lr

08017368 <lv_mem_init>:
{
 8017368:	b508      	push	{r3, lr}
    tlsf = tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 801736a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801736e:	4803      	ldr	r0, [pc, #12]	; (801737c <lv_mem_init+0x14>)
 8017370:	f001 fb2e 	bl	80189d0 <tlsf_create_with_pool>
 8017374:	4b02      	ldr	r3, [pc, #8]	; (8017380 <lv_mem_init+0x18>)
 8017376:	6018      	str	r0, [r3, #0]
}
 8017378:	bd08      	pop	{r3, pc}
 801737a:	bf00      	nop
 801737c:	20003228 	.word	0x20003228
 8017380:	20003224 	.word	0x20003224

08017384 <lv_mem_free>:
    if(data == &zero_mem) return;
 8017384:	4b04      	ldr	r3, [pc, #16]	; (8017398 <lv_mem_free+0x14>)
{
 8017386:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 8017388:	4298      	cmp	r0, r3
 801738a:	d004      	beq.n	8017396 <lv_mem_free+0x12>
    if(data == NULL) return;
 801738c:	b118      	cbz	r0, 8017396 <lv_mem_free+0x12>
    tlsf_free(tlsf, data);
 801738e:	4b03      	ldr	r3, [pc, #12]	; (801739c <lv_mem_free+0x18>)
 8017390:	6818      	ldr	r0, [r3, #0]
 8017392:	f001 bb51 	b.w	8018a38 <tlsf_free>
}
 8017396:	4770      	bx	lr
 8017398:	20000030 	.word	0x20000030
 801739c:	20003224 	.word	0x20003224

080173a0 <lv_mem_buf_release>:
{
 80173a0:	2300      	movs	r3, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80173a2:	4a08      	ldr	r2, [pc, #32]	; (80173c4 <lv_mem_buf_release+0x24>)
{
 80173a4:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80173a6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80173aa:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80173ae:	4284      	cmp	r4, r0
 80173b0:	d104      	bne.n	80173bc <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80173b2:	798b      	ldrb	r3, [r1, #6]
 80173b4:	f36f 0300 	bfc	r3, #0, #1
 80173b8:	718b      	strb	r3, [r1, #6]
}
 80173ba:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80173bc:	3301      	adds	r3, #1
 80173be:	2b10      	cmp	r3, #16
 80173c0:	d1f1      	bne.n	80173a6 <lv_mem_buf_release+0x6>
 80173c2:	e7fa      	b.n	80173ba <lv_mem_buf_release+0x1a>
 80173c4:	2000b5e4 	.word	0x2000b5e4

080173c8 <lv_mem_buf_free_all>:
{
 80173c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ca:	4c0a      	ldr	r4, [pc, #40]	; (80173f4 <lv_mem_buf_free_all+0x2c>)
 80173cc:	2500      	movs	r5, #0
 80173ce:	4627      	mov	r7, r4
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80173d0:	462e      	mov	r6, r5
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80173d2:	6820      	ldr	r0, [r4, #0]
 80173d4:	b148      	cbz	r0, 80173ea <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 80173d6:	f7ff ffd5 	bl	8017384 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80173da:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80173dc:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80173e0:	799a      	ldrb	r2, [r3, #6]
 80173e2:	f366 0200 	bfi	r2, r6, #0, #1
 80173e6:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80173e8:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80173ea:	3501      	adds	r5, #1
 80173ec:	3408      	adds	r4, #8
 80173ee:	2d10      	cmp	r5, #16
 80173f0:	d1ef      	bne.n	80173d2 <lv_mem_buf_free_all+0xa>
}
 80173f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173f4:	2000b5e4 	.word	0x2000b5e4

080173f8 <lv_memcpy>:
{
 80173f8:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80173fa:	f000 0507 	and.w	r5, r0, #7
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80173fe:	f001 0607 	and.w	r6, r1, #7
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8017402:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8017404:	460b      	mov	r3, r1
    if(s_align != d_align) {
 8017406:	42b5      	cmp	r5, r6
 8017408:	f040 8098 	bne.w	801753c <lv_memcpy+0x144>
    if(d_align) {
 801740c:	2d00      	cmp	r5, #0
 801740e:	f040 80a8 	bne.w	8017562 <lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 8017412:	4605      	mov	r5, r0
 8017414:	462b      	mov	r3, r5
    while(len > 32) {
 8017416:	2a20      	cmp	r2, #32
 8017418:	461c      	mov	r4, r3
 801741a:	f101 0520 	add.w	r5, r1, #32
 801741e:	f103 0320 	add.w	r3, r3, #32
 8017422:	f200 80af 	bhi.w	8017584 <lv_memcpy+0x18c>
    while(len > 4) {
 8017426:	2a04      	cmp	r2, #4
 8017428:	460e      	mov	r6, r1
 801742a:	f240 809f 	bls.w	801756c <lv_memcpy+0x174>
        COPY32;
 801742e:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
 8017432:	3a04      	subs	r2, #4
        COPY32;
 8017434:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 8017438:	e7f5      	b.n	8017426 <lv_memcpy+0x2e>
            REPEAT8(COPY8);
 801743a:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
 801743e:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 8017440:	f804 1c20 	strb.w	r1, [r4, #-32]
 8017444:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 8017448:	f804 1c1f 	strb.w	r1, [r4, #-31]
 801744c:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 8017450:	f804 1c1e 	strb.w	r1, [r4, #-30]
 8017454:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 8017458:	f804 1c1d 	strb.w	r1, [r4, #-29]
 801745c:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017460:	f804 1c1c 	strb.w	r1, [r4, #-28]
 8017464:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 8017468:	f804 1c1b 	strb.w	r1, [r4, #-27]
 801746c:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 8017470:	f804 1c1a 	strb.w	r1, [r4, #-26]
 8017474:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 8017478:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 801747c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8017480:	f804 1c18 	strb.w	r1, [r4, #-24]
 8017484:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 8017488:	f804 1c17 	strb.w	r1, [r4, #-23]
 801748c:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 8017490:	f804 1c16 	strb.w	r1, [r4, #-22]
 8017494:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 8017498:	f804 1c15 	strb.w	r1, [r4, #-21]
 801749c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 80174a0:	f804 1c14 	strb.w	r1, [r4, #-20]
 80174a4:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 80174a8:	f804 1c13 	strb.w	r1, [r4, #-19]
 80174ac:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 80174b0:	f804 1c12 	strb.w	r1, [r4, #-18]
 80174b4:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 80174b8:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 80174bc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80174c0:	f804 1c10 	strb.w	r1, [r4, #-16]
 80174c4:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 80174c8:	f804 1c0f 	strb.w	r1, [r4, #-15]
 80174cc:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80174d0:	f804 1c0e 	strb.w	r1, [r4, #-14]
 80174d4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80174d8:	f804 1c0d 	strb.w	r1, [r4, #-13]
 80174dc:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80174e0:	f804 1c0c 	strb.w	r1, [r4, #-12]
 80174e4:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80174e8:	f804 1c0b 	strb.w	r1, [r4, #-11]
 80174ec:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80174f0:	f804 1c0a 	strb.w	r1, [r4, #-10]
 80174f4:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 80174f8:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 80174fc:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8017500:	f804 1c08 	strb.w	r1, [r4, #-8]
 8017504:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8017508:	f804 1c07 	strb.w	r1, [r4, #-7]
 801750c:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8017510:	f804 1c06 	strb.w	r1, [r4, #-6]
 8017514:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 8017518:	f804 1c05 	strb.w	r1, [r4, #-5]
 801751c:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8017520:	f804 1c04 	strb.w	r1, [r4, #-4]
 8017524:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 8017528:	f804 1c03 	strb.w	r1, [r4, #-3]
 801752c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8017530:	f804 1c02 	strb.w	r1, [r4, #-2]
 8017534:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017538:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
 801753c:	2a20      	cmp	r2, #32
 801753e:	461d      	mov	r5, r3
 8017540:	4621      	mov	r1, r4
 8017542:	f103 0320 	add.w	r3, r3, #32
 8017546:	f104 0420 	add.w	r4, r4, #32
 801754a:	f63f af76 	bhi.w	801743a <lv_memcpy+0x42>
 801754e:	1e6b      	subs	r3, r5, #1
 8017550:	440a      	add	r2, r1
        while(len) {
 8017552:	4291      	cmp	r1, r2
 8017554:	d100      	bne.n	8017558 <lv_memcpy+0x160>
}
 8017556:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 8017558:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 801755c:	f801 4b01 	strb.w	r4, [r1], #1
            len--;
 8017560:	e7f7      	b.n	8017552 <lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 8017562:	f1c5 0508 	rsb	r5, r5, #8
 8017566:	4405      	add	r5, r0
 8017568:	461e      	mov	r6, r3
        while(d_align && len) {
 801756a:	b912      	cbnz	r2, 8017572 <lv_memcpy+0x17a>
 801756c:	1e73      	subs	r3, r6, #1
 801756e:	4422      	add	r2, r4
 8017570:	e02f      	b.n	80175d2 <lv_memcpy+0x1da>
            COPY8;
 8017572:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
 8017576:	3a01      	subs	r2, #1
            COPY8;
 8017578:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 801757c:	42ac      	cmp	r4, r5
            COPY8;
 801757e:	4619      	mov	r1, r3
        while(d_align && len) {
 8017580:	d1f2      	bne.n	8017568 <lv_memcpy+0x170>
 8017582:	e747      	b.n	8017414 <lv_memcpy+0x1c>
        REPEAT8(COPY32)
 8017584:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
 8017588:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 801758a:	f843 1c20 	str.w	r1, [r3, #-32]
 801758e:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 8017592:	f843 1c1c 	str.w	r1, [r3, #-28]
 8017596:	f855 1c18 	ldr.w	r1, [r5, #-24]
 801759a:	f843 1c18 	str.w	r1, [r3, #-24]
 801759e:	f855 1c14 	ldr.w	r1, [r5, #-20]
 80175a2:	f843 1c14 	str.w	r1, [r3, #-20]
 80175a6:	f855 1c10 	ldr.w	r1, [r5, #-16]
 80175aa:	f843 1c10 	str.w	r1, [r3, #-16]
 80175ae:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80175b2:	f843 1c0c 	str.w	r1, [r3, #-12]
 80175b6:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80175ba:	f843 1c08 	str.w	r1, [r3, #-8]
 80175be:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80175c2:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 80175c6:	4629      	mov	r1, r5
 80175c8:	e725      	b.n	8017416 <lv_memcpy+0x1e>
        COPY8
 80175ca:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80175ce:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 80175d2:	4294      	cmp	r4, r2
 80175d4:	d1f9      	bne.n	80175ca <lv_memcpy+0x1d2>
 80175d6:	e7be      	b.n	8017556 <lv_memcpy+0x15e>

080175d8 <lv_memset>:
    if(d_align) {
 80175d8:	f010 0307 	ands.w	r3, r0, #7
{
 80175dc:	b510      	push	{r4, lr}
    if(d_align) {
 80175de:	d009      	beq.n	80175f4 <lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 80175e0:	f1c3 0308 	rsb	r3, r3, #8
 80175e4:	4403      	add	r3, r0
        while(d_align && len) {
 80175e6:	b12a      	cbz	r2, 80175f4 <lv_memset+0x1c>
            SET8(v);
 80175e8:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 80175ec:	4298      	cmp	r0, r3
            len--;
 80175ee:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 80175f2:	d1f8      	bne.n	80175e6 <lv_memset+0xe>
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 80175f4:	040b      	lsls	r3, r1, #16
 80175f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80175fa:	440b      	add	r3, r1
 80175fc:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 8017600:	2a20      	cmp	r2, #32
 8017602:	4604      	mov	r4, r0
 8017604:	f100 0020 	add.w	r0, r0, #32
 8017608:	d805      	bhi.n	8017616 <lv_memset+0x3e>
    while(len > 4) {
 801760a:	2a04      	cmp	r2, #4
 801760c:	d80d      	bhi.n	801762a <lv_memset+0x52>
 801760e:	4422      	add	r2, r4
    while(len) {
 8017610:	42a2      	cmp	r2, r4
 8017612:	d10e      	bne.n	8017632 <lv_memset+0x5a>
}
 8017614:	bd10      	pop	{r4, pc}
        len -= 32;
 8017616:	3a20      	subs	r2, #32
        REPEAT8(SET32(v32));
 8017618:	e940 3308 	strd	r3, r3, [r0, #-32]
 801761c:	e940 3306 	strd	r3, r3, [r0, #-24]
 8017620:	e940 3304 	strd	r3, r3, [r0, #-16]
 8017624:	e940 3302 	strd	r3, r3, [r0, #-8]
        len -= 32;
 8017628:	e7ea      	b.n	8017600 <lv_memset+0x28>
        len -= 4;
 801762a:	3a04      	subs	r2, #4
        SET32(v32);
 801762c:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 8017630:	e7eb      	b.n	801760a <lv_memset+0x32>
        SET8(v);
 8017632:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
 8017636:	e7eb      	b.n	8017610 <lv_memset+0x38>

08017638 <lv_mem_monitor>:
{
 8017638:	b510      	push	{r4, lr}
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 801763a:	221c      	movs	r2, #28
 801763c:	2100      	movs	r1, #0
{
 801763e:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8017640:	f7ff ffca 	bl	80175d8 <lv_memset>
    tlsf_walk_pool(tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
 8017644:	4b0e      	ldr	r3, [pc, #56]	; (8017680 <lv_mem_monitor+0x48>)
 8017646:	6818      	ldr	r0, [r3, #0]
 8017648:	f001 f9d0 	bl	80189ec <tlsf_get_pool>
 801764c:	4622      	mov	r2, r4
 801764e:	490d      	ldr	r1, [pc, #52]	; (8017684 <lv_mem_monitor+0x4c>)
 8017650:	f001 f966 	bl	8018920 <tlsf_walk_pool>
    mon_p->total_size = LV_MEM_SIZE;
 8017654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8017658:	68a2      	ldr	r2, [r4, #8]
    mon_p->total_size = LV_MEM_SIZE;
 801765a:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 801765c:	2364      	movs	r3, #100	; 0x64
 801765e:	fb03 f102 	mul.w	r1, r3, r2
 8017662:	0bc9      	lsrs	r1, r1, #15
 8017664:	1a59      	subs	r1, r3, r1
 8017666:	7621      	strb	r1, [r4, #24]
    if(mon_p->free_size > 0) {
 8017668:	b142      	cbz	r2, 801767c <lv_mem_monitor+0x44>
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
 801766a:	68e1      	ldr	r1, [r4, #12]
 801766c:	434b      	muls	r3, r1
 801766e:	fbb3 f3f2 	udiv	r3, r3, r2
        mon_p->frag_pct = 100 - mon_p->frag_pct;
 8017672:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8017676:	b2db      	uxtb	r3, r3
 8017678:	7663      	strb	r3, [r4, #25]
}
 801767a:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
 801767c:	4613      	mov	r3, r2
 801767e:	e7fb      	b.n	8017678 <lv_mem_monitor+0x40>
 8017680:	20003224 	.word	0x20003224
 8017684:	08017349 	.word	0x08017349

08017688 <lv_mem_alloc>:
{
 8017688:	b510      	push	{r4, lr}
    if(size == 0) {
 801768a:	4601      	mov	r1, r0
{
 801768c:	b088      	sub	sp, #32
    if(size == 0) {
 801768e:	b158      	cbz	r0, 80176a8 <lv_mem_alloc+0x20>
    void * alloc = tlsf_malloc(tlsf, size);
 8017690:	4b06      	ldr	r3, [pc, #24]	; (80176ac <lv_mem_alloc+0x24>)
 8017692:	6818      	ldr	r0, [r3, #0]
 8017694:	f001 f9ad 	bl	80189f2 <tlsf_malloc>
    if(alloc == NULL) {
 8017698:	4604      	mov	r4, r0
 801769a:	b910      	cbnz	r0, 80176a2 <lv_mem_alloc+0x1a>
        lv_mem_monitor(&mon);
 801769c:	a801      	add	r0, sp, #4
 801769e:	f7ff ffcb 	bl	8017638 <lv_mem_monitor>
}
 80176a2:	4620      	mov	r0, r4
 80176a4:	b008      	add	sp, #32
 80176a6:	bd10      	pop	{r4, pc}
        return &zero_mem;
 80176a8:	4c01      	ldr	r4, [pc, #4]	; (80176b0 <lv_mem_alloc+0x28>)
 80176aa:	e7fa      	b.n	80176a2 <lv_mem_alloc+0x1a>
 80176ac:	20003224 	.word	0x20003224
 80176b0:	20000030 	.word	0x20000030

080176b4 <lv_mem_realloc>:
    if(new_size == 0) {
 80176b4:	460a      	mov	r2, r1
{
 80176b6:	b508      	push	{r3, lr}
    if(new_size == 0) {
 80176b8:	b171      	cbz	r1, 80176d8 <lv_mem_realloc+0x24>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80176ba:	4909      	ldr	r1, [pc, #36]	; (80176e0 <lv_mem_realloc+0x2c>)
 80176bc:	4288      	cmp	r0, r1
 80176be:	d104      	bne.n	80176ca <lv_mem_realloc+0x16>
 80176c0:	4610      	mov	r0, r2
}
 80176c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80176c6:	f7ff bfdf 	b.w	8017688 <lv_mem_alloc>
    void * new_p = tlsf_realloc(tlsf, data_p, new_size);
 80176ca:	4b06      	ldr	r3, [pc, #24]	; (80176e4 <lv_mem_realloc+0x30>)
 80176cc:	4601      	mov	r1, r0
 80176ce:	6818      	ldr	r0, [r3, #0]
}
 80176d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = tlsf_realloc(tlsf, data_p, new_size);
 80176d4:	f001 ba0c 	b.w	8018af0 <tlsf_realloc>
        lv_mem_free(data_p);
 80176d8:	f7ff fe54 	bl	8017384 <lv_mem_free>
}
 80176dc:	4800      	ldr	r0, [pc, #0]	; (80176e0 <lv_mem_realloc+0x2c>)
 80176de:	bd08      	pop	{r3, pc}
 80176e0:	20000030 	.word	0x20000030
 80176e4:	20003224 	.word	0x20003224

080176e8 <lv_mem_buf_get>:
{
 80176e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 80176ea:	4604      	mov	r4, r0
 80176ec:	b1b0      	cbz	r0, 801771c <lv_mem_buf_get+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80176ee:	4924      	ldr	r1, [pc, #144]	; (8017780 <lv_mem_buf_get+0x98>)
 80176f0:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 80176f2:	f04f 32ff 	mov.w	r2, #4294967295
 80176f6:	460e      	mov	r6, r1
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80176f8:	f101 0c04 	add.w	ip, r1, #4
 80176fc:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
 8017700:	79bd      	ldrb	r5, [r7, #6]
 8017702:	4628      	mov	r0, r5
 8017704:	07ed      	lsls	r5, r5, #31
 8017706:	d413      	bmi.n	8017730 <lv_mem_buf_get+0x48>
 8017708:	f83c 5033 	ldrh.w	r5, [ip, r3, lsl #3]
 801770c:	42a5      	cmp	r5, r4
 801770e:	d30f      	bcc.n	8017730 <lv_mem_buf_get+0x48>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8017710:	d105      	bne.n	801771e <lv_mem_buf_get+0x36>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017712:	f040 0001 	orr.w	r0, r0, #1
 8017716:	71b8      	strb	r0, [r7, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8017718:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
}
 801771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 801771e:	1c50      	adds	r0, r2, #1
 8017720:	d101      	bne.n	8017726 <lv_mem_buf_get+0x3e>
                i_guess = i;
 8017722:	b25a      	sxtb	r2, r3
 8017724:	e004      	b.n	8017730 <lv_mem_buf_get+0x48>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8017726:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 801772a:	8880      	ldrh	r0, [r0, #4]
 801772c:	42a8      	cmp	r0, r5
 801772e:	d8f8      	bhi.n	8017722 <lv_mem_buf_get+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8017730:	3301      	adds	r3, #1
 8017732:	2b10      	cmp	r3, #16
 8017734:	d1e2      	bne.n	80176fc <lv_mem_buf_get+0x14>
    if(i_guess >= 0) {
 8017736:	1c51      	adds	r1, r2, #1
 8017738:	d008      	beq.n	801774c <lv_mem_buf_get+0x64>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 801773a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 801773e:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8017742:	798b      	ldrb	r3, [r1, #6]
 8017744:	f043 0301 	orr.w	r3, r3, #1
 8017748:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 801774a:	e7e7      	b.n	801771c <lv_mem_buf_get+0x34>
 801774c:	2500      	movs	r5, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 801774e:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
 8017752:	79bb      	ldrb	r3, [r7, #6]
 8017754:	07db      	lsls	r3, r3, #31
 8017756:	d40e      	bmi.n	8017776 <lv_mem_buf_get+0x8e>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8017758:	4621      	mov	r1, r4
 801775a:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 801775e:	f7ff ffa9 	bl	80176b4 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8017762:	b900      	cbnz	r0, 8017766 <lv_mem_buf_get+0x7e>
 8017764:	e7fe      	b.n	8017764 <lv_mem_buf_get+0x7c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017766:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8017768:	80bc      	strh	r4, [r7, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 801776a:	f043 0301 	orr.w	r3, r3, #1
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 801776e:	f846 0035 	str.w	r0, [r6, r5, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017772:	71bb      	strb	r3, [r7, #6]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8017774:	e7d2      	b.n	801771c <lv_mem_buf_get+0x34>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8017776:	3501      	adds	r5, #1
 8017778:	2d10      	cmp	r5, #16
 801777a:	d1e8      	bne.n	801774e <lv_mem_buf_get+0x66>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 801777c:	e7fe      	b.n	801777c <lv_mem_buf_get+0x94>
 801777e:	bf00      	nop
 8017780:	2000b5e4 	.word	0x2000b5e4

08017784 <lv_memset_00>:
    if(d_align) {
 8017784:	f010 0307 	ands.w	r3, r0, #7
 8017788:	d10d      	bne.n	80177a6 <lv_memset_00+0x22>
 801778a:	4603      	mov	r3, r0
        REPEAT8(SET32(0));
 801778c:	2200      	movs	r2, #0
    while(len > 32) {
 801778e:	2920      	cmp	r1, #32
 8017790:	4618      	mov	r0, r3
 8017792:	f103 0320 	add.w	r3, r3, #32
 8017796:	d815      	bhi.n	80177c4 <lv_memset_00+0x40>
        SET32(0);
 8017798:	2300      	movs	r3, #0
    while(len > 4) {
 801779a:	2904      	cmp	r1, #4
 801779c:	d908      	bls.n	80177b0 <lv_memset_00+0x2c>
        len -= 4;
 801779e:	3904      	subs	r1, #4
        SET32(0);
 80177a0:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 80177a4:	e7f9      	b.n	801779a <lv_memset_00+0x16>
        d_align = ALIGN_MASK + 1 - d_align;
 80177a6:	f1c3 0308 	rsb	r3, r3, #8
            SET8(0);
 80177aa:	2200      	movs	r2, #0
 80177ac:	4403      	add	r3, r0
        while(d_align && len) {
 80177ae:	b911      	cbnz	r1, 80177b6 <lv_memset_00+0x32>
 80177b0:	4401      	add	r1, r0
        SET8(0);
 80177b2:	2300      	movs	r3, #0
 80177b4:	e012      	b.n	80177dc <lv_memset_00+0x58>
            SET8(0);
 80177b6:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 80177ba:	4298      	cmp	r0, r3
            len--;
 80177bc:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 80177c0:	d1f5      	bne.n	80177ae <lv_memset_00+0x2a>
 80177c2:	e7e2      	b.n	801778a <lv_memset_00+0x6>
        len -= 32;
 80177c4:	3920      	subs	r1, #32
        REPEAT8(SET32(0));
 80177c6:	e943 2208 	strd	r2, r2, [r3, #-32]
 80177ca:	e943 2206 	strd	r2, r2, [r3, #-24]
 80177ce:	e943 2204 	strd	r2, r2, [r3, #-16]
 80177d2:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 80177d6:	e7da      	b.n	801778e <lv_memset_00+0xa>
        SET8(0);
 80177d8:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 80177dc:	4288      	cmp	r0, r1
 80177de:	d1fb      	bne.n	80177d8 <lv_memset_00+0x54>
}
 80177e0:	4770      	bx	lr

080177e2 <lv_memset_ff>:
    if(d_align) {
 80177e2:	f010 0307 	ands.w	r3, r0, #7
 80177e6:	d10f      	bne.n	8017808 <lv_memset_ff+0x26>
 80177e8:	4603      	mov	r3, r0
        REPEAT8(SET32(0xFFFFFFFF));
 80177ea:	f04f 32ff 	mov.w	r2, #4294967295
    while(len > 32) {
 80177ee:	2920      	cmp	r1, #32
 80177f0:	4618      	mov	r0, r3
 80177f2:	f103 0320 	add.w	r3, r3, #32
 80177f6:	d816      	bhi.n	8017826 <lv_memset_ff+0x44>
        SET32(0xFFFFFFFF);
 80177f8:	f04f 33ff 	mov.w	r3, #4294967295
    while(len > 4) {
 80177fc:	2904      	cmp	r1, #4
 80177fe:	d908      	bls.n	8017812 <lv_memset_ff+0x30>
        len -= 4;
 8017800:	3904      	subs	r1, #4
        SET32(0xFFFFFFFF);
 8017802:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8017806:	e7f9      	b.n	80177fc <lv_memset_ff+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 8017808:	f1c3 0308 	rsb	r3, r3, #8
            SET8(0xFF);
 801780c:	22ff      	movs	r2, #255	; 0xff
 801780e:	4403      	add	r3, r0
        while(d_align && len) {
 8017810:	b911      	cbnz	r1, 8017818 <lv_memset_ff+0x36>
 8017812:	4401      	add	r1, r0
        SET8(0xFF);
 8017814:	23ff      	movs	r3, #255	; 0xff
 8017816:	e012      	b.n	801783e <lv_memset_ff+0x5c>
            SET8(0xFF);
 8017818:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 801781c:	4298      	cmp	r0, r3
            len--;
 801781e:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8017822:	d1f5      	bne.n	8017810 <lv_memset_ff+0x2e>
 8017824:	e7e0      	b.n	80177e8 <lv_memset_ff+0x6>
        len -= 32;
 8017826:	3920      	subs	r1, #32
        REPEAT8(SET32(0xFFFFFFFF));
 8017828:	e943 2208 	strd	r2, r2, [r3, #-32]
 801782c:	e943 2206 	strd	r2, r2, [r3, #-24]
 8017830:	e943 2204 	strd	r2, r2, [r3, #-16]
 8017834:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8017838:	e7d9      	b.n	80177ee <lv_memset_ff+0xc>
        SET8(0xFF);
 801783a:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 801783e:	4288      	cmp	r0, r1
 8017840:	d1fb      	bne.n	801783a <lv_memset_ff+0x58>
}
 8017842:	4770      	bx	lr

08017844 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 8017844:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 8017846:	bf38      	it	cc
 8017848:	5488      	strbcc	r0, [r1, r2]
    }
}
 801784a:	4770      	bx	lr

0801784c <_out_null>:
{
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 801784c:	4770      	bx	lr

0801784e <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801784e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017852:	4617      	mov	r7, r2
 8017854:	4680      	mov	r8, r0
 8017856:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 801785a:	e9dd 6211 	ldrd	r6, r2, [sp, #68]	; 0x44
 801785e:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 8017862:	f012 0a02 	ands.w	sl, r2, #2
{
 8017866:	e9dd 0c0f 	ldrd	r0, ip, [sp, #60]	; 0x3c
    if(!(flags & FLAGS_LEFT)) {
 801786a:	d11f      	bne.n	80178ac <_ntoa_format+0x5e>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 801786c:	f002 0901 	and.w	r9, r2, #1
 8017870:	b14e      	cbz	r6, 8017886 <_ntoa_format+0x38>
 8017872:	f1b9 0f00 	cmp.w	r9, #0
 8017876:	d006      	beq.n	8017886 <_ntoa_format+0x38>
 8017878:	f1be 0f00 	cmp.w	lr, #0
 801787c:	d102      	bne.n	8017884 <_ntoa_format+0x36>
 801787e:	f012 0f0c 	tst.w	r2, #12
 8017882:	d000      	beq.n	8017886 <_ntoa_format+0x38>
            width--;
 8017884:	3e01      	subs	r6, #1
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8017886:	f04f 0b30 	mov.w	fp, #48	; 0x30
 801788a:	e002      	b.n	8017892 <_ntoa_format+0x44>
 801788c:	f805 b004 	strb.w	fp, [r5, r4]
 8017890:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017892:	45a4      	cmp	ip, r4
 8017894:	d901      	bls.n	801789a <_ntoa_format+0x4c>
 8017896:	2c20      	cmp	r4, #32
 8017898:	d1f8      	bne.n	801788c <_ntoa_format+0x3e>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 801789a:	f04f 0b30 	mov.w	fp, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801789e:	f1b9 0f00 	cmp.w	r9, #0
 80178a2:	d003      	beq.n	80178ac <_ntoa_format+0x5e>
 80178a4:	42a6      	cmp	r6, r4
 80178a6:	d901      	bls.n	80178ac <_ntoa_format+0x5e>
 80178a8:	2c20      	cmp	r4, #32
 80178aa:	d13e      	bne.n	801792a <_ntoa_format+0xdc>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 80178ac:	f012 0f10 	tst.w	r2, #16
 80178b0:	d01a      	beq.n	80178e8 <_ntoa_format+0x9a>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80178b2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80178b6:	d13d      	bne.n	8017934 <_ntoa_format+0xe6>
 80178b8:	2c00      	cmp	r4, #0
 80178ba:	d03b      	beq.n	8017934 <_ntoa_format+0xe6>
 80178bc:	4564      	cmp	r4, ip
 80178be:	d001      	beq.n	80178c4 <_ntoa_format+0x76>
 80178c0:	42b4      	cmp	r4, r6
 80178c2:	d137      	bne.n	8017934 <_ntoa_format+0xe6>
            len--;
            if(len && (base == 16U)) {
 80178c4:	f1b4 0c01 	subs.w	ip, r4, #1
 80178c8:	d033      	beq.n	8017932 <_ntoa_format+0xe4>
 80178ca:	2810      	cmp	r0, #16
 80178cc:	d16f      	bne.n	80179ae <_ntoa_format+0x160>
                len--;
 80178ce:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80178d0:	0690      	lsls	r0, r2, #26
 80178d2:	d437      	bmi.n	8017944 <_ntoa_format+0xf6>
 80178d4:	2c1f      	cmp	r4, #31
 80178d6:	d80f      	bhi.n	80178f8 <_ntoa_format+0xaa>
            buf[len++] = 'x';
 80178d8:	2078      	movs	r0, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 80178da:	5528      	strb	r0, [r5, r4]
 80178dc:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 80178de:	2c1f      	cmp	r4, #31
 80178e0:	d80a      	bhi.n	80178f8 <_ntoa_format+0xaa>
            buf[len++] = '0';
 80178e2:	2030      	movs	r0, #48	; 0x30
 80178e4:	5528      	strb	r0, [r5, r4]
 80178e6:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 80178e8:	2c20      	cmp	r4, #32
 80178ea:	d005      	beq.n	80178f8 <_ntoa_format+0xaa>
        if(negative) {
 80178ec:	f1be 0f00 	cmp.w	lr, #0
 80178f0:	d02c      	beq.n	801794c <_ntoa_format+0xfe>
            buf[len++] = '-';
 80178f2:	202d      	movs	r0, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 80178f4:	5528      	strb	r0, [r5, r4]
 80178f6:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80178f8:	0792      	lsls	r2, r2, #30
 80178fa:	d041      	beq.n	8017980 <_ntoa_format+0x132>
 80178fc:	463a      	mov	r2, r7
 80178fe:	4425      	add	r5, r4
 8017900:	4414      	add	r4, r2
    while(len) {
 8017902:	42a2      	cmp	r2, r4
 8017904:	d140      	bne.n	8017988 <_ntoa_format+0x13a>
    if(flags & FLAGS_LEFT) {
 8017906:	f1ba 0f00 	cmp.w	sl, #0
 801790a:	d00a      	beq.n	8017922 <_ntoa_format+0xd4>
 801790c:	eba4 0907 	sub.w	r9, r4, r7
 8017910:	464d      	mov	r5, r9
        while(idx - start_idx < width) {
 8017912:	42b5      	cmp	r5, r6
 8017914:	eb05 0207 	add.w	r2, r5, r7
 8017918:	d341      	bcc.n	801799e <_ntoa_format+0x150>
 801791a:	4437      	add	r7, r6
 801791c:	454e      	cmp	r6, r9
 801791e:	bf28      	it	cs
 8017920:	463c      	movcs	r4, r7
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8017922:	4620      	mov	r0, r4
 8017924:	b003      	add	sp, #12
 8017926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 801792a:	f805 b004 	strb.w	fp, [r5, r4]
 801792e:	3401      	adds	r4, #1
 8017930:	e7b5      	b.n	801789e <_ntoa_format+0x50>
 8017932:	4664      	mov	r4, ip
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017934:	2810      	cmp	r0, #16
 8017936:	d0cb      	beq.n	80178d0 <_ntoa_format+0x82>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017938:	2802      	cmp	r0, #2
 801793a:	d1d0      	bne.n	80178de <_ntoa_format+0x90>
 801793c:	2c1f      	cmp	r4, #31
 801793e:	d8db      	bhi.n	80178f8 <_ntoa_format+0xaa>
            buf[len++] = 'b';
 8017940:	2062      	movs	r0, #98	; 0x62
 8017942:	e7ca      	b.n	80178da <_ntoa_format+0x8c>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017944:	2c1f      	cmp	r4, #31
 8017946:	d8d7      	bhi.n	80178f8 <_ntoa_format+0xaa>
            buf[len++] = 'X';
 8017948:	2058      	movs	r0, #88	; 0x58
 801794a:	e7c6      	b.n	80178da <_ntoa_format+0x8c>
        else if(flags & FLAGS_PLUS) {
 801794c:	0750      	lsls	r0, r2, #29
 801794e:	d501      	bpl.n	8017954 <_ntoa_format+0x106>
            buf[len++] = '+';  // ignore the space if the '+' exists
 8017950:	202b      	movs	r0, #43	; 0x2b
 8017952:	e7cf      	b.n	80178f4 <_ntoa_format+0xa6>
        else if(flags & FLAGS_SPACE) {
 8017954:	0710      	lsls	r0, r2, #28
 8017956:	d5cf      	bpl.n	80178f8 <_ntoa_format+0xaa>
            buf[len++] = ' ';
 8017958:	2020      	movs	r0, #32
 801795a:	e7cb      	b.n	80178f4 <_ntoa_format+0xa6>
            out(' ', buffer, idx++, maxlen);
 801795c:	2020      	movs	r0, #32
        for(i = len; i < width; i++) {
 801795e:	f109 0901 	add.w	r9, r9, #1
            out(' ', buffer, idx++, maxlen);
 8017962:	e9cd 1300 	strd	r1, r3, [sp]
 8017966:	47c0      	blx	r8
        for(i = len; i < width; i++) {
 8017968:	e9dd 1300 	ldrd	r1, r3, [sp]
 801796c:	454e      	cmp	r6, r9
 801796e:	eb0b 0209 	add.w	r2, fp, r9
 8017972:	d8f3      	bhi.n	801795c <_ntoa_format+0x10e>
 8017974:	1b32      	subs	r2, r6, r4
 8017976:	42b4      	cmp	r4, r6
 8017978:	bf88      	it	hi
 801797a:	2200      	movhi	r2, #0
 801797c:	443a      	add	r2, r7
 801797e:	e7be      	b.n	80178fe <_ntoa_format+0xb0>
 8017980:	46a1      	mov	r9, r4
 8017982:	eba7 0b04 	sub.w	fp, r7, r4
 8017986:	e7f1      	b.n	801796c <_ntoa_format+0x11e>
        out(buf[--len], buffer, idx++, maxlen);
 8017988:	f102 0901 	add.w	r9, r2, #1
 801798c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8017990:	e9cd 1300 	strd	r1, r3, [sp]
 8017994:	47c0      	blx	r8
 8017996:	464a      	mov	r2, r9
 8017998:	e9dd 1300 	ldrd	r1, r3, [sp]
 801799c:	e7b1      	b.n	8017902 <_ntoa_format+0xb4>
            out(' ', buffer, idx++, maxlen);
 801799e:	2020      	movs	r0, #32
 80179a0:	3501      	adds	r5, #1
 80179a2:	e9cd 1300 	strd	r1, r3, [sp]
 80179a6:	47c0      	blx	r8
 80179a8:	e9dd 1300 	ldrd	r1, r3, [sp]
 80179ac:	e7b1      	b.n	8017912 <_ntoa_format+0xc4>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80179ae:	2802      	cmp	r0, #2
 80179b0:	4664      	mov	r4, ip
 80179b2:	d194      	bne.n	80178de <_ntoa_format+0x90>
 80179b4:	e7c4      	b.n	8017940 <_ntoa_format+0xf2>

080179b6 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80179b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179ba:	b091      	sub	sp, #68	; 0x44
 80179bc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80179be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80179c0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 80179c2:	b90d      	cbnz	r5, 80179c8 <_ntoa_long+0x12>
        flags &= ~FLAGS_HASH;
 80179c4:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 80179c8:	057c      	lsls	r4, r7, #21
 80179ca:	d500      	bpl.n	80179ce <_ntoa_long+0x18>
 80179cc:	b305      	cbz	r5, 8017a10 <_ntoa_long+0x5a>
 80179ce:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80179d2:	46ac      	mov	ip, r5
 80179d4:	f10d 0e20 	add.w	lr, sp, #32
 80179d8:	f04f 0500 	mov.w	r5, #0
 80179dc:	bf14      	ite	ne
 80179de:	f04f 0837 	movne.w	r8, #55	; 0x37
 80179e2:	f04f 0857 	moveq.w	r8, #87	; 0x57
 80179e6:	3501      	adds	r5, #1
            const char digit = (char)(value % base);
 80179e8:	fbbc f9f6 	udiv	r9, ip, r6
 80179ec:	fb06 c919 	mls	r9, r6, r9, ip
 80179f0:	fa5f f489 	uxtb.w	r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80179f4:	f1b9 0f09 	cmp.w	r9, #9
 80179f8:	bf94      	ite	ls
 80179fa:	3430      	addls	r4, #48	; 0x30
 80179fc:	4444      	addhi	r4, r8
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80179fe:	45b4      	cmp	ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017a00:	b2e4      	uxtb	r4, r4
 8017a02:	f80e 4b01 	strb.w	r4, [lr], #1
            value /= base;
 8017a06:	fbbc f4f6 	udiv	r4, ip, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017a0a:	d301      	bcc.n	8017a10 <_ntoa_long+0x5a>
 8017a0c:	2d20      	cmp	r5, #32
 8017a0e:	d110      	bne.n	8017a32 <_ntoa_long+0x7c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8017a10:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017a12:	9706      	str	r7, [sp, #24]
 8017a14:	9405      	str	r4, [sp, #20]
 8017a16:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8017a18:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8017a1c:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8017a20:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8017a24:	ac08      	add	r4, sp, #32
 8017a26:	9400      	str	r4, [sp, #0]
 8017a28:	f7ff ff11 	bl	801784e <_ntoa_format>
}
 8017a2c:	b011      	add	sp, #68	; 0x44
 8017a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            value /= base;
 8017a32:	46a4      	mov	ip, r4
 8017a34:	e7d7      	b.n	80179e6 <_ntoa_long+0x30>

08017a36 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017a36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a3a:	b093      	sub	sp, #76	; 0x4c
 8017a3c:	4699      	mov	r9, r3
 8017a3e:	4606      	mov	r6, r0
 8017a40:	460f      	mov	r7, r1
 8017a42:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8017a44:	4690      	mov	r8, r2
 8017a46:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8017a4a:	ea5a 030b 	orrs.w	r3, sl, fp
        flags &= ~FLAGS_HASH;
 8017a4e:	bf08      	it	eq
 8017a50:	f025 0510 	biceq.w	r5, r5, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8017a54:	056b      	lsls	r3, r5, #21
 8017a56:	d502      	bpl.n	8017a5e <_ntoa_long_long+0x28>
 8017a58:	ea5a 030b 	orrs.w	r3, sl, fp
 8017a5c:	d03c      	beq.n	8017ad8 <_ntoa_long_long+0xa2>
 8017a5e:	ab0a      	add	r3, sp, #40	; 0x28
 8017a60:	f015 0f20 	tst.w	r5, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017a64:	f04f 0400 	mov.w	r4, #0
 8017a68:	9308      	str	r3, [sp, #32]
 8017a6a:	bf14      	ite	ne
 8017a6c:	2337      	movne	r3, #55	; 0x37
 8017a6e:	2357      	moveq	r3, #87	; 0x57
 8017a70:	9309      	str	r3, [sp, #36]	; 0x24
            const char digit = (char)(value % base);
 8017a72:	4650      	mov	r0, sl
 8017a74:	4659      	mov	r1, fp
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017a76:	3401      	adds	r4, #1
 8017a78:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8017a7c:	f7e8 fc30 	bl	80002e0 <__aeabi_uldivmod>
            const char digit = (char)(value % base);
 8017a80:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017a82:	2a09      	cmp	r2, #9
 8017a84:	bf8a      	itet	hi
 8017a86:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 8017a88:	3230      	addls	r2, #48	; 0x30
 8017a8a:	18d2      	addhi	r2, r2, r3
 8017a8c:	9b08      	ldr	r3, [sp, #32]
 8017a8e:	b2d2      	uxtb	r2, r2
 8017a90:	f803 2b01 	strb.w	r2, [r3], #1
 8017a94:	9308      	str	r3, [sp, #32]
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017a96:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8017a9a:	459b      	cmp	fp, r3
 8017a9c:	bf08      	it	eq
 8017a9e:	4592      	cmpeq	sl, r2
 8017aa0:	d301      	bcc.n	8017aa6 <_ntoa_long_long+0x70>
 8017aa2:	2c20      	cmp	r4, #32
 8017aa4:	d115      	bne.n	8017ad2 <_ntoa_long_long+0x9c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8017aa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017aa8:	4642      	mov	r2, r8
 8017aaa:	4639      	mov	r1, r7
 8017aac:	4630      	mov	r0, r6
 8017aae:	9305      	str	r3, [sp, #20]
 8017ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017ab2:	9506      	str	r5, [sp, #24]
 8017ab4:	9304      	str	r3, [sp, #16]
 8017ab6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017ab8:	9303      	str	r3, [sp, #12]
 8017aba:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8017abe:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8017ac2:	ab0a      	add	r3, sp, #40	; 0x28
 8017ac4:	9300      	str	r3, [sp, #0]
 8017ac6:	464b      	mov	r3, r9
 8017ac8:	f7ff fec1 	bl	801784e <_ntoa_format>
}
 8017acc:	b013      	add	sp, #76	; 0x4c
 8017ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            value /= base;
 8017ad2:	4682      	mov	sl, r0
 8017ad4:	468b      	mov	fp, r1
 8017ad6:	e7cc      	b.n	8017a72 <_ntoa_long_long+0x3c>
    size_t len = 0U;
 8017ad8:	2400      	movs	r4, #0
 8017ada:	e7e4      	b.n	8017aa6 <_ntoa_long_long+0x70>

08017adc <_vsnprintf.constprop.0>:
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8017adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae0:	4689      	mov	r9, r1
 8017ae2:	4690      	mov	r8, r2
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 8017ae4:	1e01      	subs	r1, r0, #0
 8017ae6:	4abf      	ldr	r2, [pc, #764]	; (8017de4 <_vsnprintf.constprop.0+0x308>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8017ae8:	b093      	sub	sp, #76	; 0x4c
 8017aea:	461e      	mov	r6, r3
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 8017aec:	f04f 0500 	mov.w	r5, #0
        out = _out_null;
 8017af0:	4bbd      	ldr	r3, [pc, #756]	; (8017de8 <_vsnprintf.constprop.0+0x30c>)
 8017af2:	bf18      	it	ne
 8017af4:	4613      	movne	r3, r2
 8017af6:	930b      	str	r3, [sp, #44]	; 0x2c
    while(*format) {
 8017af8:	f898 0000 	ldrb.w	r0, [r8]
 8017afc:	b968      	cbnz	r0, 8017b1a <_vsnprintf.constprop.0+0x3e>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8017afe:	454d      	cmp	r5, r9
 8017b00:	464b      	mov	r3, r9
 8017b02:	f04f 0000 	mov.w	r0, #0
 8017b06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017b08:	bf2c      	ite	cs
 8017b0a:	f109 32ff 	addcs.w	r2, r9, #4294967295
 8017b0e:	462a      	movcc	r2, r5
 8017b10:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
}
 8017b12:	4628      	mov	r0, r5
 8017b14:	b013      	add	sp, #76	; 0x4c
 8017b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
 8017b1a:	2825      	cmp	r0, #37	; 0x25
 8017b1c:	f108 0801 	add.w	r8, r8, #1
 8017b20:	d008      	beq.n	8017b34 <_vsnprintf.constprop.0+0x58>
                out(*format, buffer, idx++, maxlen);
 8017b22:	1c6c      	adds	r4, r5, #1
 8017b24:	462a      	mov	r2, r5
 8017b26:	910c      	str	r1, [sp, #48]	; 0x30
 8017b28:	464b      	mov	r3, r9
 8017b2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017b2c:	47a8      	blx	r5
 8017b2e:	4625      	mov	r5, r4
 8017b30:	990c      	ldr	r1, [sp, #48]	; 0x30
                break;
 8017b32:	e7e1      	b.n	8017af8 <_vsnprintf.constprop.0+0x1c>
        flags = 0U;
 8017b34:	2200      	movs	r2, #0
 8017b36:	e006      	b.n	8017b46 <_vsnprintf.constprop.0+0x6a>
            switch(*format) {
 8017b38:	2b2d      	cmp	r3, #45	; 0x2d
 8017b3a:	d014      	beq.n	8017b66 <_vsnprintf.constprop.0+0x8a>
 8017b3c:	2b30      	cmp	r3, #48	; 0x30
 8017b3e:	d10c      	bne.n	8017b5a <_vsnprintf.constprop.0+0x7e>
                    flags |= FLAGS_ZEROPAD;
 8017b40:	f042 0201 	orr.w	r2, r2, #1
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8017b44:	4680      	mov	r8, r0
            switch(*format) {
 8017b46:	4640      	mov	r0, r8
 8017b48:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8017b4e:	d00d      	beq.n	8017b6c <_vsnprintf.constprop.0+0x90>
 8017b50:	d8f2      	bhi.n	8017b38 <_vsnprintf.constprop.0+0x5c>
 8017b52:	2b20      	cmp	r3, #32
 8017b54:	d00d      	beq.n	8017b72 <_vsnprintf.constprop.0+0x96>
 8017b56:	2b23      	cmp	r3, #35	; 0x23
 8017b58:	d00e      	beq.n	8017b78 <_vsnprintf.constprop.0+0x9c>
        if(_is_digit(*format)) {
 8017b5a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8017b5e:	2c09      	cmp	r4, #9
 8017b60:	d829      	bhi.n	8017bb6 <_vsnprintf.constprop.0+0xda>
    unsigned int i = 0U;
 8017b62:	2700      	movs	r7, #0
 8017b64:	e010      	b.n	8017b88 <_vsnprintf.constprop.0+0xac>
                    flags |= FLAGS_LEFT;
 8017b66:	f042 0202 	orr.w	r2, r2, #2
        } while(n);
 8017b6a:	e7eb      	b.n	8017b44 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_PLUS;
 8017b6c:	f042 0204 	orr.w	r2, r2, #4
        } while(n);
 8017b70:	e7e8      	b.n	8017b44 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_SPACE;
 8017b72:	f042 0208 	orr.w	r2, r2, #8
        } while(n);
 8017b76:	e7e5      	b.n	8017b44 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_HASH;
 8017b78:	f042 0210 	orr.w	r2, r2, #16
        } while(n);
 8017b7c:	e7e2      	b.n	8017b44 <_vsnprintf.constprop.0+0x68>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8017b7e:	240a      	movs	r4, #10
 8017b80:	4680      	mov	r8, r0
 8017b82:	fb04 3707 	mla	r7, r4, r7, r3
 8017b86:	3f30      	subs	r7, #48	; 0x30
    while(_is_digit(**str)) {
 8017b88:	4640      	mov	r0, r8
 8017b8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017b8e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8017b92:	2c09      	cmp	r4, #9
 8017b94:	d9f3      	bls.n	8017b7e <_vsnprintf.constprop.0+0xa2>
        if(*format == '.') {
 8017b96:	f898 3000 	ldrb.w	r3, [r8]
 8017b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8017b9c:	d156      	bne.n	8017c4c <_vsnprintf.constprop.0+0x170>
            if(_is_digit(*format)) {
 8017b9e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017ba2:	f108 0301 	add.w	r3, r8, #1
            flags |= FLAGS_PRECISION;
 8017ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
            if(_is_digit(*format)) {
 8017baa:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 8017bae:	2c09      	cmp	r4, #9
 8017bb0:	d842      	bhi.n	8017c38 <_vsnprintf.constprop.0+0x15c>
    unsigned int i = 0U;
 8017bb2:	2400      	movs	r4, #0
 8017bb4:	e011      	b.n	8017bda <_vsnprintf.constprop.0+0xfe>
        else if(*format == '*') {
 8017bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8017bb8:	d108      	bne.n	8017bcc <_vsnprintf.constprop.0+0xf0>
            const int w = va_arg(va, int);
 8017bba:	f856 7b04 	ldr.w	r7, [r6], #4
 8017bbe:	4680      	mov	r8, r0
            if(w < 0) {
 8017bc0:	2f00      	cmp	r7, #0
                flags |= FLAGS_LEFT;    // reverse padding
 8017bc2:	bfbc      	itt	lt
 8017bc4:	f042 0202 	orrlt.w	r2, r2, #2
                width = (unsigned int) - w;
 8017bc8:	427f      	neglt	r7, r7
            format++;
 8017bca:	e7e4      	b.n	8017b96 <_vsnprintf.constprop.0+0xba>
        width = 0U;
 8017bcc:	2700      	movs	r7, #0
 8017bce:	e7e2      	b.n	8017b96 <_vsnprintf.constprop.0+0xba>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8017bd0:	230a      	movs	r3, #10
 8017bd2:	fb03 0404 	mla	r4, r3, r4, r0
 8017bd6:	4663      	mov	r3, ip
 8017bd8:	3c30      	subs	r4, #48	; 0x30
    while(_is_digit(**str)) {
 8017bda:	469c      	mov	ip, r3
 8017bdc:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8017be0:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
 8017be4:	f1be 0f09 	cmp.w	lr, #9
 8017be8:	d9f2      	bls.n	8017bd0 <_vsnprintf.constprop.0+0xf4>
 8017bea:	4698      	mov	r8, r3
        switch(*format) {
 8017bec:	4643      	mov	r3, r8
 8017bee:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017bf2:	286c      	cmp	r0, #108	; 0x6c
 8017bf4:	d033      	beq.n	8017c5e <_vsnprintf.constprop.0+0x182>
 8017bf6:	d82b      	bhi.n	8017c50 <_vsnprintf.constprop.0+0x174>
 8017bf8:	2868      	cmp	r0, #104	; 0x68
 8017bfa:	d039      	beq.n	8017c70 <_vsnprintf.constprop.0+0x194>
 8017bfc:	286a      	cmp	r0, #106	; 0x6a
 8017bfe:	d041      	beq.n	8017c84 <_vsnprintf.constprop.0+0x1a8>
 8017c00:	4643      	mov	r3, r8
        switch(*format) {
 8017c02:	4698      	mov	r8, r3
 8017c04:	f818 0b01 	ldrb.w	r0, [r8], #1
 8017c08:	2878      	cmp	r0, #120	; 0x78
 8017c0a:	d88a      	bhi.n	8017b22 <_vsnprintf.constprop.0+0x46>
 8017c0c:	2861      	cmp	r0, #97	; 0x61
 8017c0e:	d83c      	bhi.n	8017c8a <_vsnprintf.constprop.0+0x1ae>
 8017c10:	2825      	cmp	r0, #37	; 0x25
 8017c12:	d086      	beq.n	8017b22 <_vsnprintf.constprop.0+0x46>
 8017c14:	2824      	cmp	r0, #36	; 0x24
 8017c16:	d984      	bls.n	8017b22 <_vsnprintf.constprop.0+0x46>
 8017c18:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
 8017c1c:	2b50      	cmp	r3, #80	; 0x50
 8017c1e:	d180      	bne.n	8017b22 <_vsnprintf.constprop.0+0x46>
                    if(*format == 'x' || *format == 'X') {
 8017c20:	2858      	cmp	r0, #88	; 0x58
 8017c22:	d077      	beq.n	8017d14 <_vsnprintf.constprop.0+0x238>
                    else if(*format == 'p' || *format == 'P') {
 8017c24:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8017c28:	2b50      	cmp	r3, #80	; 0x50
 8017c2a:	d169      	bne.n	8017d00 <_vsnprintf.constprop.0+0x224>
                            flags |= FLAGS_LONG;
 8017c2c:	f442 7288 	orr.w	r2, r2, #272	; 0x110
                        base = 16U;
 8017c30:	2310      	movs	r3, #16
                    if(*format == 'X' || *format == 'P') {
 8017c32:	2850      	cmp	r0, #80	; 0x50
 8017c34:	d06f      	beq.n	8017d16 <_vsnprintf.constprop.0+0x23a>
 8017c36:	e070      	b.n	8017d1a <_vsnprintf.constprop.0+0x23e>
            else if(*format == '*') {
 8017c38:	282a      	cmp	r0, #42	; 0x2a
 8017c3a:	d106      	bne.n	8017c4a <_vsnprintf.constprop.0+0x16e>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8017c3c:	f856 4b04 	ldr.w	r4, [r6], #4
                format++;
 8017c40:	f108 0802 	add.w	r8, r8, #2
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8017c44:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
 8017c48:	e7d0      	b.n	8017bec <_vsnprintf.constprop.0+0x110>
            format++;
 8017c4a:	4698      	mov	r8, r3
        precision = 0U;
 8017c4c:	2400      	movs	r4, #0
 8017c4e:	e7cd      	b.n	8017bec <_vsnprintf.constprop.0+0x110>
        switch(*format) {
 8017c50:	2874      	cmp	r0, #116	; 0x74
 8017c52:	d001      	beq.n	8017c58 <_vsnprintf.constprop.0+0x17c>
 8017c54:	287a      	cmp	r0, #122	; 0x7a
 8017c56:	d1d3      	bne.n	8017c00 <_vsnprintf.constprop.0+0x124>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8017c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
                break;
 8017c5c:	e7d1      	b.n	8017c02 <_vsnprintf.constprop.0+0x126>
                if(*format == 'l') {
 8017c5e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017c62:	286c      	cmp	r0, #108	; 0x6c
 8017c64:	d1f8      	bne.n	8017c58 <_vsnprintf.constprop.0+0x17c>
                    flags |= FLAGS_LONG_LONG;
 8017c66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
                    format++;
 8017c6a:	f108 0302 	add.w	r3, r8, #2
 8017c6e:	e7c8      	b.n	8017c02 <_vsnprintf.constprop.0+0x126>
                if(*format == 'h') {
 8017c70:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017c74:	2868      	cmp	r0, #104	; 0x68
 8017c76:	d002      	beq.n	8017c7e <_vsnprintf.constprop.0+0x1a2>
                flags |= FLAGS_SHORT;
 8017c78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017c7c:	e7c1      	b.n	8017c02 <_vsnprintf.constprop.0+0x126>
                    flags |= FLAGS_CHAR;
 8017c7e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8017c82:	e7f2      	b.n	8017c6a <_vsnprintf.constprop.0+0x18e>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8017c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
                break;
 8017c88:	e7bb      	b.n	8017c02 <_vsnprintf.constprop.0+0x126>
 8017c8a:	f1a0 0362 	sub.w	r3, r0, #98	; 0x62
 8017c8e:	2b16      	cmp	r3, #22
 8017c90:	f63f af47 	bhi.w	8017b22 <_vsnprintf.constprop.0+0x46>
 8017c94:	f20f 0c04 	addw	ip, pc, #4
 8017c98:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 8017c9c:	08017cf9 	.word	0x08017cf9
 8017ca0:	08017e33 	.word	0x08017e33
 8017ca4:	08017cf9 	.word	0x08017cf9
 8017ca8:	08017b23 	.word	0x08017b23
 8017cac:	08017b23 	.word	0x08017b23
 8017cb0:	08017b23 	.word	0x08017b23
 8017cb4:	08017b23 	.word	0x08017b23
 8017cb8:	08017cf9 	.word	0x08017cf9
 8017cbc:	08017b23 	.word	0x08017b23
 8017cc0:	08017b23 	.word	0x08017b23
 8017cc4:	08017b23 	.word	0x08017b23
 8017cc8:	08017b23 	.word	0x08017b23
 8017ccc:	08017b23 	.word	0x08017b23
 8017cd0:	08017cf9 	.word	0x08017cf9
 8017cd4:	08017cf9 	.word	0x08017cf9
 8017cd8:	08017b23 	.word	0x08017b23
 8017cdc:	08017b23 	.word	0x08017b23
 8017ce0:	08017ebb 	.word	0x08017ebb
 8017ce4:	08017b23 	.word	0x08017b23
 8017ce8:	08017cf9 	.word	0x08017cf9
 8017cec:	08017b23 	.word	0x08017b23
 8017cf0:	08017b23 	.word	0x08017b23
 8017cf4:	08017cf9 	.word	0x08017cf9
                    if(*format == 'x' || *format == 'X') {
 8017cf8:	2878      	cmp	r0, #120	; 0x78
 8017cfa:	d191      	bne.n	8017c20 <_vsnprintf.constprop.0+0x144>
                        base = 16U;
 8017cfc:	2310      	movs	r3, #16
 8017cfe:	e010      	b.n	8017d22 <_vsnprintf.constprop.0+0x246>
                    else if(*format == 'o') {
 8017d00:	286f      	cmp	r0, #111	; 0x6f
 8017d02:	f000 8145 	beq.w	8017f90 <_vsnprintf.constprop.0+0x4b4>
                    else if(*format == 'b') {
 8017d06:	2862      	cmp	r0, #98	; 0x62
 8017d08:	f000 8144 	beq.w	8017f94 <_vsnprintf.constprop.0+0x4b8>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 8017d0c:	f022 0210 	bic.w	r2, r2, #16
                        base = 10U;
 8017d10:	230a      	movs	r3, #10
 8017d12:	e78e      	b.n	8017c32 <_vsnprintf.constprop.0+0x156>
                        base = 16U;
 8017d14:	2310      	movs	r3, #16
                        flags |= FLAGS_UPPERCASE;
 8017d16:	f042 0220 	orr.w	r2, r2, #32
                    if((*format != 'i') && (*format != 'd')) {
 8017d1a:	2869      	cmp	r0, #105	; 0x69
 8017d1c:	d003      	beq.n	8017d26 <_vsnprintf.constprop.0+0x24a>
 8017d1e:	2864      	cmp	r0, #100	; 0x64
 8017d20:	d001      	beq.n	8017d26 <_vsnprintf.constprop.0+0x24a>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8017d22:	f022 020c 	bic.w	r2, r2, #12
                    if(flags & FLAGS_PRECISION) {
 8017d26:	f412 6f80 	tst.w	r2, #1024	; 0x400
                        flags &= ~FLAGS_ZEROPAD;
 8017d2a:	bf18      	it	ne
 8017d2c:	f022 0201 	bicne.w	r2, r2, #1
                    if((*format == 'i') || (*format == 'd')) {
 8017d30:	2869      	cmp	r0, #105	; 0x69
 8017d32:	f402 7c00 	and.w	ip, r2, #512	; 0x200
 8017d36:	d001      	beq.n	8017d3c <_vsnprintf.constprop.0+0x260>
 8017d38:	2864      	cmp	r0, #100	; 0x64
 8017d3a:	d142      	bne.n	8017dc2 <_vsnprintf.constprop.0+0x2e6>
                        if(flags & FLAGS_LONG_LONG) {
 8017d3c:	f1bc 0f00 	cmp.w	ip, #0
 8017d40:	d024      	beq.n	8017d8c <_vsnprintf.constprop.0+0x2b0>
                            const long long value = va_arg(va, long long);
 8017d42:	3607      	adds	r6, #7
 8017d44:	f026 0007 	bic.w	r0, r6, #7
 8017d48:	4682      	mov	sl, r0
 8017d4a:	6840      	ldr	r0, [r0, #4]
 8017d4c:	f85a 6b08 	ldr.w	r6, [sl], #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8017d50:	9304      	str	r3, [sp, #16]
 8017d52:	2300      	movs	r3, #0
 8017d54:	2e00      	cmp	r6, #0
 8017d56:	9406      	str	r4, [sp, #24]
 8017d58:	9305      	str	r3, [sp, #20]
 8017d5a:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 8017d5e:	9302      	str	r3, [sp, #8]
 8017d60:	4603      	mov	r3, r0
 8017d62:	f173 0000 	sbcs.w	r0, r3, #0
 8017d66:	e9cd 7207 	strd	r7, r2, [sp, #28]
 8017d6a:	4632      	mov	r2, r6
 8017d6c:	da02      	bge.n	8017d74 <_vsnprintf.constprop.0+0x298>
 8017d6e:	4272      	negs	r2, r6
 8017d70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8017d74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017d76:	910c      	str	r1, [sp, #48]	; 0x30
 8017d78:	e9cd 2300 	strd	r2, r3, [sp]
 8017d7c:	464b      	mov	r3, r9
 8017d7e:	462a      	mov	r2, r5
 8017d80:	f7ff fe59 	bl	8017a36 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8017d84:	4605      	mov	r5, r0
 8017d86:	990c      	ldr	r1, [sp, #48]	; 0x30
                    break;
 8017d88:	4656      	mov	r6, sl
 8017d8a:	e6b5      	b.n	8017af8 <_vsnprintf.constprop.0+0x1c>
                        else if(flags & FLAGS_LONG) {
 8017d8c:	05d0      	lsls	r0, r2, #23
 8017d8e:	f106 0a04 	add.w	sl, r6, #4
 8017d92:	d50c      	bpl.n	8017dae <_vsnprintf.constprop.0+0x2d2>
                            const long value = va_arg(va, long);
 8017d94:	6830      	ldr	r0, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8017d96:	2800      	cmp	r0, #0
 8017d98:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017d9c:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 8017da0:	bfb8      	it	lt
 8017da2:	4240      	neglt	r0, r0
 8017da4:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8017da8:	9301      	str	r3, [sp, #4]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8017daa:	9000      	str	r0, [sp, #0]
 8017dac:	e02a      	b.n	8017e04 <_vsnprintf.constprop.0+0x328>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 8017dae:	f012 0f40 	tst.w	r2, #64	; 0x40
 8017db2:	6830      	ldr	r0, [r6, #0]
 8017db4:	d001      	beq.n	8017dba <_vsnprintf.constprop.0+0x2de>
 8017db6:	b2c0      	uxtb	r0, r0
 8017db8:	e7ed      	b.n	8017d96 <_vsnprintf.constprop.0+0x2ba>
                                                                                                                                       int) : va_arg(va, int);
 8017dba:	0616      	lsls	r6, r2, #24
 8017dbc:	bf48      	it	mi
 8017dbe:	b200      	sxthmi	r0, r0
 8017dc0:	e7e9      	b.n	8017d96 <_vsnprintf.constprop.0+0x2ba>
                        if(flags & FLAGS_LONG_LONG) {
 8017dc2:	f1bc 0f00 	cmp.w	ip, #0
 8017dc6:	d011      	beq.n	8017dec <_vsnprintf.constprop.0+0x310>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8017dc8:	3607      	adds	r6, #7
 8017dca:	9304      	str	r3, [sp, #16]
 8017dcc:	2300      	movs	r3, #0
 8017dce:	9406      	str	r4, [sp, #24]
 8017dd0:	f026 0a07 	bic.w	sl, r6, #7
 8017dd4:	9305      	str	r3, [sp, #20]
 8017dd6:	9302      	str	r3, [sp, #8]
 8017dd8:	e9cd 7207 	strd	r7, r2, [sp, #28]
 8017ddc:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8017de0:	e7c8      	b.n	8017d74 <_vsnprintf.constprop.0+0x298>
 8017de2:	bf00      	nop
 8017de4:	08017845 	.word	0x08017845
 8017de8:	0801784d 	.word	0x0801784d
                        else if(flags & FLAGS_LONG) {
 8017dec:	05d0      	lsls	r0, r2, #23
 8017dee:	f106 0a04 	add.w	sl, r6, #4
 8017df2:	d50e      	bpl.n	8017e12 <_vsnprintf.constprop.0+0x336>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8017df4:	f8cd c004 	str.w	ip, [sp, #4]
 8017df8:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8017dfc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017e00:	6833      	ldr	r3, [r6, #0]
 8017e02:	9300      	str	r3, [sp, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8017e04:	464b      	mov	r3, r9
 8017e06:	462a      	mov	r2, r5
 8017e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017e0a:	910c      	str	r1, [sp, #48]	; 0x30
 8017e0c:	f7ff fdd3 	bl	80179b6 <_ntoa_long>
 8017e10:	e7b8      	b.n	8017d84 <_vsnprintf.constprop.0+0x2a8>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8017e12:	f012 0f40 	tst.w	r2, #64	; 0x40
 8017e16:	6830      	ldr	r0, [r6, #0]
 8017e18:	d007      	beq.n	8017e2a <_vsnprintf.constprop.0+0x34e>
 8017e1a:	b2c0      	uxtb	r0, r0
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8017e1c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017e20:	2300      	movs	r3, #0
 8017e22:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8017e26:	9301      	str	r3, [sp, #4]
 8017e28:	e7bf      	b.n	8017daa <_vsnprintf.constprop.0+0x2ce>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8017e2a:	0616      	lsls	r6, r2, #24
 8017e2c:	bf48      	it	mi
 8017e2e:	b280      	uxthmi	r0, r0
 8017e30:	e7f4      	b.n	8017e1c <_vsnprintf.constprop.0+0x340>
                    if(!(flags & FLAGS_LEFT)) {
 8017e32:	f012 0302 	ands.w	r3, r2, #2
 8017e36:	930c      	str	r3, [sp, #48]	; 0x30
 8017e38:	d028      	beq.n	8017e8c <_vsnprintf.constprop.0+0x3b0>
                    unsigned int l = 1U;
 8017e3a:	f04f 0a01 	mov.w	sl, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8017e3e:	f856 0b04 	ldr.w	r0, [r6], #4
 8017e42:	464b      	mov	r3, r9
 8017e44:	910d      	str	r1, [sp, #52]	; 0x34
 8017e46:	462a      	mov	r2, r5
 8017e48:	b2c0      	uxtb	r0, r0
 8017e4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017e4c:	47a0      	blx	r4
 8017e4e:	f105 0b01 	add.w	fp, r5, #1
                    if(flags & FLAGS_LEFT) {
 8017e52:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8017e56:	b373      	cbz	r3, 8017eb6 <_vsnprintf.constprop.0+0x3da>
 8017e58:	4654      	mov	r4, sl
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8017e5a:	465a      	mov	r2, fp
 8017e5c:	e023      	b.n	8017ea6 <_vsnprintf.constprop.0+0x3ca>
                            out(' ', buffer, idx++, maxlen);
 8017e5e:	910d      	str	r1, [sp, #52]	; 0x34
 8017e60:	464b      	mov	r3, r9
 8017e62:	2020      	movs	r0, #32
 8017e64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017e66:	47a0      	blx	r4
 8017e68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017e6a:	eb05 020a 	add.w	r2, r5, sl
                        while(l++ < width) {
 8017e6e:	f10a 0a01 	add.w	sl, sl, #1
 8017e72:	4557      	cmp	r7, sl
 8017e74:	d8f3      	bhi.n	8017e5e <_vsnprintf.constprop.0+0x382>
 8017e76:	2f00      	cmp	r7, #0
 8017e78:	f107 33ff 	add.w	r3, r7, #4294967295
 8017e7c:	f107 0a01 	add.w	sl, r7, #1
 8017e80:	bf04      	itt	eq
 8017e82:	2300      	moveq	r3, #0
 8017e84:	f04f 0a02 	moveq.w	sl, #2
 8017e88:	441d      	add	r5, r3
 8017e8a:	e7d8      	b.n	8017e3e <_vsnprintf.constprop.0+0x362>
 8017e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017e90:	e7eb      	b.n	8017e6a <_vsnprintf.constprop.0+0x38e>
                            out(' ', buffer, idx++, maxlen);
 8017e92:	1c53      	adds	r3, r2, #1
 8017e94:	910d      	str	r1, [sp, #52]	; 0x34
 8017e96:	2020      	movs	r0, #32
 8017e98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017e9a:	930c      	str	r3, [sp, #48]	; 0x30
 8017e9c:	464b      	mov	r3, r9
 8017e9e:	47a8      	blx	r5
 8017ea0:	3401      	adds	r4, #1
 8017ea2:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
                        while(l++ < width) {
 8017ea6:	42a7      	cmp	r7, r4
 8017ea8:	d8f3      	bhi.n	8017e92 <_vsnprintf.constprop.0+0x3b6>
 8017eaa:	eba7 030a 	sub.w	r3, r7, sl
 8017eae:	4557      	cmp	r7, sl
 8017eb0:	bf38      	it	cc
 8017eb2:	2300      	movcc	r3, #0
 8017eb4:	449b      	add	fp, r3
                    break;
 8017eb6:	465d      	mov	r5, fp
 8017eb8:	e61e      	b.n	8017af8 <_vsnprintf.constprop.0+0x1c>
                    const char * p = va_arg(va, char *);
 8017eba:	4633      	mov	r3, r6
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8017ebc:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 8017ebe:	f853 ab04 	ldr.w	sl, [r3], #4
 8017ec2:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8017ec4:	bf14      	ite	ne
 8017ec6:	4623      	movne	r3, r4
 8017ec8:	f04f 33ff 	moveq.w	r3, #4294967295
 8017ecc:	46d3      	mov	fp, sl
 8017ece:	4453      	add	r3, sl
    for(s = str; *s && maxsize--; ++s);
 8017ed0:	f89b 0000 	ldrb.w	r0, [fp]
 8017ed4:	b108      	cbz	r0, 8017eda <_vsnprintf.constprop.0+0x3fe>
 8017ed6:	455b      	cmp	r3, fp
 8017ed8:	d111      	bne.n	8017efe <_vsnprintf.constprop.0+0x422>
                    if(flags & FLAGS_PRECISION) {
 8017eda:	f412 6380 	ands.w	r3, r2, #1024	; 0x400
    return (unsigned int)(s - str);
 8017ede:	ebab 0b0a 	sub.w	fp, fp, sl
                    if(flags & FLAGS_PRECISION) {
 8017ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8017ee4:	d002      	beq.n	8017eec <_vsnprintf.constprop.0+0x410>
                        l = (l < precision ? l : precision);
 8017ee6:	45a3      	cmp	fp, r4
 8017ee8:	bf28      	it	cs
 8017eea:	46a3      	movcs	fp, r4
                    if(!(flags & FLAGS_LEFT)) {
 8017eec:	f012 0302 	ands.w	r3, r2, #2
 8017ef0:	930e      	str	r3, [sp, #56]	; 0x38
 8017ef2:	d11d      	bne.n	8017f30 <_vsnprintf.constprop.0+0x454>
 8017ef4:	ebab 0305 	sub.w	r3, fp, r5
 8017ef8:	462a      	mov	r2, r5
 8017efa:	9310      	str	r3, [sp, #64]	; 0x40
 8017efc:	e00b      	b.n	8017f16 <_vsnprintf.constprop.0+0x43a>
    for(s = str; *s && maxsize--; ++s);
 8017efe:	f10b 0b01 	add.w	fp, fp, #1
 8017f02:	e7e5      	b.n	8017ed0 <_vsnprintf.constprop.0+0x3f4>
                            out(' ', buffer, idx++, maxlen);
 8017f04:	1c53      	adds	r3, r2, #1
 8017f06:	9111      	str	r1, [sp, #68]	; 0x44
 8017f08:	2020      	movs	r0, #32
 8017f0a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8017f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017f0e:	464b      	mov	r3, r9
 8017f10:	47b0      	blx	r6
 8017f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f14:	9911      	ldr	r1, [sp, #68]	; 0x44
                        while(l++ < width) {
 8017f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f18:	18d3      	adds	r3, r2, r3
 8017f1a:	429f      	cmp	r7, r3
 8017f1c:	d8f2      	bhi.n	8017f04 <_vsnprintf.constprop.0+0x428>
 8017f1e:	eba7 030b 	sub.w	r3, r7, fp
 8017f22:	455f      	cmp	r7, fp
 8017f24:	bf38      	it	cc
 8017f26:	2300      	movcc	r3, #0
 8017f28:	f10b 0b01 	add.w	fp, fp, #1
 8017f2c:	441d      	add	r5, r3
 8017f2e:	449b      	add	fp, r3
 8017f30:	4656      	mov	r6, sl
 8017f32:	eba5 0a0a 	sub.w	sl, r5, sl
 8017f36:	e006      	b.n	8017f46 <_vsnprintf.constprop.0+0x46a>
 8017f38:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 8017f3a:	462a      	mov	r2, r5
 8017f3c:	910f      	str	r1, [sp, #60]	; 0x3c
 8017f3e:	464b      	mov	r3, r9
 8017f40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017f42:	47a8      	blx	r5
 8017f44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017f46:	eb0a 0506 	add.w	r5, sl, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8017f4a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8017f4e:	b128      	cbz	r0, 8017f5c <_vsnprintf.constprop.0+0x480>
 8017f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d0f1      	beq.n	8017f3a <_vsnprintf.constprop.0+0x45e>
 8017f56:	1e63      	subs	r3, r4, #1
 8017f58:	2c00      	cmp	r4, #0
 8017f5a:	d1ed      	bne.n	8017f38 <_vsnprintf.constprop.0+0x45c>
                    if(flags & FLAGS_LEFT) {
 8017f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f5e:	b1ab      	cbz	r3, 8017f8c <_vsnprintf.constprop.0+0x4b0>
 8017f60:	462a      	mov	r2, r5
 8017f62:	ebab 0a05 	sub.w	sl, fp, r5
 8017f66:	e007      	b.n	8017f78 <_vsnprintf.constprop.0+0x49c>
                            out(' ', buffer, idx++, maxlen);
 8017f68:	1c56      	adds	r6, r2, #1
 8017f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8017f6c:	464b      	mov	r3, r9
 8017f6e:	2020      	movs	r0, #32
 8017f70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017f72:	47a0      	blx	r4
 8017f74:	4632      	mov	r2, r6
 8017f76:	990d      	ldr	r1, [sp, #52]	; 0x34
                        while(l++ < width) {
 8017f78:	eb02 030a 	add.w	r3, r2, sl
 8017f7c:	429f      	cmp	r7, r3
 8017f7e:	d8f3      	bhi.n	8017f68 <_vsnprintf.constprop.0+0x48c>
 8017f80:	eba7 030b 	sub.w	r3, r7, fp
 8017f84:	455f      	cmp	r7, fp
 8017f86:	bf38      	it	cc
 8017f88:	2300      	movcc	r3, #0
 8017f8a:	441d      	add	r5, r3
                    const char * p = va_arg(va, char *);
 8017f8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                    break;
 8017f8e:	e5b3      	b.n	8017af8 <_vsnprintf.constprop.0+0x1c>
                        base =  8U;
 8017f90:	2308      	movs	r3, #8
 8017f92:	e6c6      	b.n	8017d22 <_vsnprintf.constprop.0+0x246>
                        base =  2U;
 8017f94:	2302      	movs	r3, #2
                    if(*format == 'X' || *format == 'P') {
 8017f96:	e6c4      	b.n	8017d22 <_vsnprintf.constprop.0+0x246>

08017f98 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 8017f98:	b40c      	push	{r2, r3}
 8017f9a:	b507      	push	{r0, r1, r2, lr}
 8017f9c:	ab04      	add	r3, sp, #16
 8017f9e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, format);
 8017fa2:	9301      	str	r3, [sp, #4]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8017fa4:	f7ff fd9a 	bl	8017adc <_vsnprintf.constprop.0>
    va_end(va);
    return ret;
}
 8017fa8:	b003      	add	sp, #12
 8017faa:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fae:	b002      	add	sp, #8
 8017fb0:	4770      	bx	lr

08017fb2 <lv_style_init>:
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)")
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8017fb2:	2108      	movs	r1, #8
 8017fb4:	f7ff bbe6 	b.w	8017784 <lv_memset_00>

08017fb8 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8017fb8:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8017fbc:	2b00      	cmp	r3, #0
{
 8017fbe:	b510      	push	{r4, lr}
 8017fc0:	4604      	mov	r4, r0
    if(style->is_const) {
 8017fc2:	db0b      	blt.n	8017fdc <lv_style_reset+0x24>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8017fc4:	79c3      	ldrb	r3, [r0, #7]
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	d902      	bls.n	8017fd0 <lv_style_reset+0x18>
 8017fca:	6800      	ldr	r0, [r0, #0]
 8017fcc:	f7ff f9da 	bl	8017384 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	2108      	movs	r1, #8
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif

}
 8017fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8017fd8:	f7ff bbd4 	b.w	8017784 <lv_memset_00>
}
 8017fdc:	bd10      	pop	{r4, pc}
	...

08017fe0 <lv_style_register_prop>:

lv_style_prop_t lv_style_register_prop(void)
{
    static uint16_t act_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
    act_id++;
 8017fe0:	4b02      	ldr	r3, [pc, #8]	; (8017fec <lv_style_register_prop+0xc>)
 8017fe2:	8818      	ldrh	r0, [r3, #0]
 8017fe4:	3001      	adds	r0, #1
 8017fe6:	b280      	uxth	r0, r0
 8017fe8:	8018      	strh	r0, [r3, #0]
    return act_id;
}
 8017fea:	4770      	bx	lr
 8017fec:	20000034 	.word	0x20000034

08017ff0 <lv_style_remove_prop>:

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8017ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8017ff2:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	460e      	mov	r6, r1
    if(style->is_const) {
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	db57      	blt.n	80180ae <lv_style_remove_prop+0xbe>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
 8017ffe:	79c0      	ldrb	r0, [r0, #7]
 8018000:	2800      	cmp	r0, #0
 8018002:	d054      	beq.n	80180ae <lv_style_remove_prop+0xbe>

    if(style->prop_cnt == 1) {
 8018004:	2801      	cmp	r0, #1
 8018006:	d10a      	bne.n	801801e <lv_style_remove_prop+0x2e>
        if(style->prop1 == prop) {
 8018008:	88a3      	ldrh	r3, [r4, #4]
 801800a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801800e:	428a      	cmp	r2, r1
 8018010:	d14d      	bne.n	80180ae <lv_style_remove_prop+0xbe>
            style->prop1 = LV_STYLE_PROP_INV;
 8018012:	f36f 030e 	bfc	r3, #0, #15
 8018016:	80a3      	strh	r3, [r4, #4]
            style->prop_cnt = 0;
 8018018:	2300      	movs	r3, #0
 801801a:	71e3      	strb	r3, [r4, #7]
            return true;
        }
    }

    return false;
}
 801801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801801e:	6825      	ldr	r5, [r4, #0]
 8018020:	b202      	sxth	r2, r0
    for(i = 0; i < style->prop_cnt; i++) {
 8018022:	2300      	movs	r3, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018024:	eb05 0780 	add.w	r7, r5, r0, lsl #2
        if(old_props[i] == prop) {
 8018028:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 801802c:	42b1      	cmp	r1, r6
 801802e:	d13b      	bne.n	80180a8 <lv_style_remove_prop+0xb8>
            if(style->prop_cnt == 2) {
 8018030:	2802      	cmp	r0, #2
 8018032:	d116      	bne.n	8018062 <lv_style_remove_prop+0x72>
                style->prop_cnt = 1;
 8018034:	2101      	movs	r1, #1
 8018036:	71e1      	strb	r1, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8018038:	b973      	cbnz	r3, 8018058 <lv_style_remove_prop+0x68>
 801803a:	887a      	ldrh	r2, [r7, #2]
 801803c:	88a1      	ldrh	r1, [r4, #4]
 801803e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8018042:	f362 010e 	bfi	r1, r2, #0, #15
 8018046:	80a1      	strh	r1, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8018048:	b94b      	cbnz	r3, 801805e <lv_style_remove_prop+0x6e>
 801804a:	686b      	ldr	r3, [r5, #4]
 801804c:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 801804e:	4628      	mov	r0, r5
 8018050:	f7ff f998 	bl	8017384 <lv_mem_free>
            return true;
 8018054:	2001      	movs	r0, #1
 8018056:	e7e1      	b.n	801801c <lv_style_remove_prop+0x2c>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8018058:	f835 2022 	ldrh.w	r2, [r5, r2, lsl #2]
 801805c:	e7ee      	b.n	801803c <lv_style_remove_prop+0x4c>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 801805e:	682b      	ldr	r3, [r5, #0]
 8018060:	e7f4      	b.n	801804c <lv_style_remove_prop+0x5c>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8018062:	3801      	subs	r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8018064:	2306      	movs	r3, #6
 8018066:	4358      	muls	r0, r3
 8018068:	f7ff fb0e 	bl	8017688 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 801806c:	b1f8      	cbz	r0, 80180ae <lv_style_remove_prop+0xbe>
                style->prop_cnt--;
 801806e:	79e3      	ldrb	r3, [r4, #7]
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8018070:	2200      	movs	r2, #0
                style->v_p.values_and_props = new_values_and_props;
 8018072:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8018074:	3b01      	subs	r3, #1
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8018076:	4694      	mov	ip, r2
                style->prop_cnt--;
 8018078:	b2db      	uxtb	r3, r3
 801807a:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801807c:	009b      	lsls	r3, r3, #2
                    if(old_props[j] != prop) {
 801807e:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8018082:	42b1      	cmp	r1, r6
 8018084:	d00b      	beq.n	801809e <lv_style_remove_prop+0xae>
                        new_values[i] = old_values[j];
 8018086:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 801808a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
                        new_props[i++] = old_props[j];
 801808e:	eb00 014c 	add.w	r1, r0, ip, lsl #1
 8018092:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8018096:	f10c 0c01 	add.w	ip, ip, #1
 801809a:	f821 e003 	strh.w	lr, [r1, r3]
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 801809e:	3201      	adds	r2, #1
 80180a0:	79e1      	ldrb	r1, [r4, #7]
 80180a2:	4291      	cmp	r1, r2
 80180a4:	d2eb      	bcs.n	801807e <lv_style_remove_prop+0x8e>
 80180a6:	e7d2      	b.n	801804e <lv_style_remove_prop+0x5e>
    for(i = 0; i < style->prop_cnt; i++) {
 80180a8:	3301      	adds	r3, #1
 80180aa:	4298      	cmp	r0, r3
 80180ac:	d8bc      	bhi.n	8018028 <lv_style_remove_prop+0x38>
        return false;
 80180ae:	2000      	movs	r0, #0
 80180b0:	e7b4      	b.n	801801c <lv_style_remove_prop+0x2c>

080180b2 <lv_style_get_prop>:
    uint8_t group = _lv_style_get_prop_group(prop);
    style->has_group |= 1 << group;
}

lv_res_t lv_style_get_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 80180b2:	4603      	mov	r3, r0
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
 80180b4:	f990 0005 	ldrsb.w	r0, [r0, #5]
 80180b8:	2800      	cmp	r0, #0
 80180ba:	b570      	push	{r4, r5, r6, lr}
 80180bc:	da0b      	bge.n	80180d6 <lv_style_get_prop+0x24>
        const lv_style_const_prop_t *const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	8818      	ldrh	r0, [r3, #0]
 80180c2:	b900      	cbnz	r0, 80180c6 <lv_style_get_prop+0x14>
   return lv_style_get_prop_inlined(style, prop, value);
}
 80180c4:	bd70      	pop	{r4, r5, r6, pc}
            if(const_prop->prop == prop) {
 80180c6:	4281      	cmp	r1, r0
 80180c8:	d103      	bne.n	80180d2 <lv_style_get_prop+0x20>
                *value = const_prop->value;
 80180ca:	685b      	ldr	r3, [r3, #4]
                return LV_RES_OK;
            }
        }
    } else if(style->prop1 == prop) {
        *value = style->v_p.value1;
        return LV_RES_OK;
 80180cc:	2001      	movs	r0, #1
        *value = style->v_p.value1;
 80180ce:	6013      	str	r3, [r2, #0]
        return LV_RES_OK;
 80180d0:	e7f8      	b.n	80180c4 <lv_style_get_prop+0x12>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 80180d2:	3308      	adds	r3, #8
 80180d4:	e7f4      	b.n	80180c0 <lv_style_get_prop+0xe>
    if(style->prop_cnt == 0) return LV_RES_INV;
 80180d6:	79d8      	ldrb	r0, [r3, #7]
 80180d8:	2800      	cmp	r0, #0
 80180da:	d0f3      	beq.n	80180c4 <lv_style_get_prop+0x12>
    if(style->prop_cnt > 1) {
 80180dc:	2801      	cmp	r0, #1
 80180de:	d90f      	bls.n	8018100 <lv_style_get_prop+0x4e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80180e0:	681c      	ldr	r4, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 80180e2:	2300      	movs	r3, #0
 80180e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
            if(props[i] == prop) {
 80180e8:	f835 6b02 	ldrh.w	r6, [r5], #2
 80180ec:	42b1      	cmp	r1, r6
 80180ee:	d102      	bne.n	80180f6 <lv_style_get_prop+0x44>
                *value = values[i];
 80180f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80180f4:	e7ea      	b.n	80180cc <lv_style_get_prop+0x1a>
        for(i = 0; i < style->prop_cnt; i++) {
 80180f6:	3301      	adds	r3, #1
 80180f8:	4298      	cmp	r0, r3
 80180fa:	d8f5      	bhi.n	80180e8 <lv_style_get_prop+0x36>
        return LV_RES_INV;
 80180fc:	2000      	movs	r0, #0
 80180fe:	e7e1      	b.n	80180c4 <lv_style_get_prop+0x12>
    } else if(style->prop1 == prop) {
 8018100:	8898      	ldrh	r0, [r3, #4]
 8018102:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018106:	4288      	cmp	r0, r1
 8018108:	d1f8      	bne.n	80180fc <lv_style_get_prop+0x4a>
        *value = style->v_p.value1;
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	e7de      	b.n	80180cc <lv_style_get_prop+0x1a>
	...

08018110 <lv_style_transition_dsc_init>:

void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[], lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * user_data)
{
 8018110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018112:	460f      	mov	r7, r1
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 8018114:	2114      	movs	r1, #20
{
 8018116:	4604      	mov	r4, r0
 8018118:	461e      	mov	r6, r3
 801811a:	4615      	mov	r5, r2
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 801811c:	f7ff fb32 	bl	8017784 <lv_memset_00>
    tr->props = props;
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 8018120:	4b05      	ldr	r3, [pc, #20]	; (8018138 <lv_style_transition_dsc_init+0x28>)
    tr->props = props;
 8018122:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 8018124:	2d00      	cmp	r5, #0
 8018126:	bf08      	it	eq
 8018128:	461d      	moveq	r5, r3
    tr->time = time;
    tr->delay = delay;
 801812a:	9b06      	ldr	r3, [sp, #24]
 801812c:	6123      	str	r3, [r4, #16]
#if LV_USE_USER_DATA
    tr->user_data = user_data;
 801812e:	9b07      	ldr	r3, [sp, #28]
    tr->time = time;
 8018130:	e9c4 5602 	strd	r5, r6, [r4, #8]
    tr->user_data = user_data;
 8018134:	6063      	str	r3, [r4, #4]
#else
    LV_UNUSED(user_data);
#endif
}
 8018136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018138:	08016689 	.word	0x08016689

0801813c <lv_style_prop_get_default>:

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 801813c:	f240 4362 	movw	r3, #1122	; 0x462
 8018140:	4298      	cmp	r0, r3
 8018142:	d017      	beq.n	8018174 <lv_style_prop_get_default+0x38>
 8018144:	d821      	bhi.n	801818a <lv_style_prop_get_default+0x4e>
 8018146:	2833      	cmp	r0, #51	; 0x33
 8018148:	d047      	beq.n	80181da <lv_style_prop_get_default+0x9e>
 801814a:	d815      	bhi.n	8018178 <lv_style_prop_get_default+0x3c>
 801814c:	2820      	cmp	r0, #32
 801814e:	d03e      	beq.n	80181ce <lv_style_prop_get_default+0x92>
 8018150:	281f      	cmp	r0, #31
 8018152:	d915      	bls.n	8018180 <lv_style_prop_get_default+0x44>
 8018154:	2831      	cmp	r0, #49	; 0x31
 8018156:	d00d      	beq.n	8018174 <lv_style_prop_get_default+0x38>
 8018158:	f020 0002 	bic.w	r0, r0, #2
 801815c:	2825      	cmp	r0, #37	; 0x25
 801815e:	d009      	beq.n	8018174 <lv_style_prop_get_default+0x38>
 8018160:	e00e      	b.n	8018180 <lv_style_prop_get_default+0x44>
 8018162:	3846      	subs	r0, #70	; 0x46
 8018164:	2301      	movs	r3, #1
 8018166:	b280      	uxth	r0, r0
 8018168:	fa03 f000 	lsl.w	r0, r3, r0
 801816c:	f242 1301 	movw	r3, #8449	; 0x2101
 8018170:	4218      	tst	r0, r3
 8018172:	d005      	beq.n	8018180 <lv_style_prop_get_default+0x44>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8018174:	20ff      	movs	r0, #255	; 0xff
            break;
 8018176:	4770      	bx	lr
    switch(prop) {
 8018178:	2853      	cmp	r0, #83	; 0x53
 801817a:	d803      	bhi.n	8018184 <lv_style_prop_get_default+0x48>
 801817c:	2845      	cmp	r0, #69	; 0x45
 801817e:	d8f0      	bhi.n	8018162 <lv_style_prop_get_default+0x26>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
 8018180:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 8018182:	4770      	bx	lr
    switch(prop) {
 8018184:	f5b0 6f8b 	cmp.w	r0, #1112	; 0x458
 8018188:	e7e9      	b.n	801815e <lv_style_prop_get_default+0x22>
 801818a:	f241 0303 	movw	r3, #4099	; 0x1003
 801818e:	4298      	cmp	r0, r3
 8018190:	d025      	beq.n	80181de <lv_style_prop_get_default+0xa2>
 8018192:	d80f      	bhi.n	80181b4 <lv_style_prop_get_default+0x78>
 8018194:	f640 030e 	movw	r3, #2062	; 0x80e
 8018198:	4298      	cmp	r0, r3
 801819a:	d015      	beq.n	80181c8 <lv_style_prop_get_default+0x8c>
 801819c:	f640 030d 	movw	r3, #2061	; 0x80d
 80181a0:	4298      	cmp	r0, r3
 80181a2:	d9ed      	bls.n	8018180 <lv_style_prop_get_default+0x44>
 80181a4:	f640 033c 	movw	r3, #2108	; 0x83c
 80181a8:	4298      	cmp	r0, r3
 80181aa:	d0e3      	beq.n	8018174 <lv_style_prop_get_default+0x38>
 80181ac:	f640 0345 	movw	r3, #2117	; 0x845
 80181b0:	4298      	cmp	r0, r3
 80181b2:	e7d4      	b.n	801815e <lv_style_prop_get_default+0x22>
 80181b4:	f241 0306 	movw	r3, #4102	; 0x1006
 80181b8:	4298      	cmp	r0, r3
 80181ba:	d010      	beq.n	80181de <lv_style_prop_get_default+0xa2>
 80181bc:	f241 4359 	movw	r3, #5209	; 0x1459
 80181c0:	4298      	cmp	r0, r3
 80181c2:	d1dd      	bne.n	8018180 <lv_style_prop_get_default+0x44>
            value.ptr = LV_FONT_DEFAULT;
 80181c4:	4807      	ldr	r0, [pc, #28]	; (80181e4 <lv_style_prop_get_default+0xa8>)
            break;
 80181c6:	4770      	bx	lr
            value.num = LV_IMG_ZOOM_NONE;
 80181c8:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 80181cc:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80181ce:	f04f 33ff 	mov.w	r3, #4294967295
 80181d2:	2000      	movs	r0, #0
 80181d4:	f363 000f 	bfi	r0, r3, #0, #16
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
 80181d8:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 80181da:	200f      	movs	r0, #15
            break;
 80181dc:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 80181de:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
            break;
 80181e2:	4770      	bx	lr
 80181e4:	080296f0 	.word	0x080296f0

080181e8 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    return style->prop_cnt == 0 ? true : false;
 80181e8:	79c0      	ldrb	r0, [r0, #7]
}
 80181ea:	fab0 f080 	clz	r0, r0
 80181ee:	0940      	lsrs	r0, r0, #5
 80181f0:	4770      	bx	lr

080181f2 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
    uint16_t group = (prop & 0x1FF) >> 4;
 80181f2:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80181f4:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 80181f8:	bf0c      	ite	eq
 80181fa:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80181fe:	2007      	movne	r0, #7
    return (uint8_t)group;
}
 8018200:	4770      	bx	lr

08018202 <lv_style_set_prop>:
{
 8018202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->is_const) {
 8018204:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8018208:	4604      	mov	r4, r0
 801820a:	460d      	mov	r5, r1
 801820c:	4616      	mov	r6, r2
    if(style->is_const) {
 801820e:	2b00      	cmp	r3, #0
 8018210:	db0c      	blt.n	801822c <lv_style_set_prop+0x2a>
    if(style->prop_cnt > 1) {
 8018212:	79c2      	ldrb	r2, [r0, #7]
 8018214:	2a01      	cmp	r2, #1
 8018216:	d93a      	bls.n	801828e <lv_style_set_prop+0x8c>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018218:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801821a:	1e53      	subs	r3, r2, #1
            if(props[i] == prop) {
 801821c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8018220:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
 8018224:	42af      	cmp	r7, r5
 8018226:	d102      	bne.n	801822e <lv_style_set_prop+0x2c>
                values[i] = value;
 8018228:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
}
 801822c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801822e:	3b01      	subs	r3, #1
 8018230:	d2f6      	bcs.n	8018220 <lv_style_set_prop+0x1e>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8018232:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8018234:	fb02 1101 	mla	r1, r2, r1, r1
 8018238:	f7ff fa3c 	bl	80176b4 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 801823c:	2800      	cmp	r0, #0
 801823e:	d0f5      	beq.n	801822c <lv_style_set_prop+0x2a>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018240:	79e3      	ldrb	r3, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 8018242:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018244:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            props[i + sizeof(lv_style_value_t) /sizeof(uint16_t)] = props[i];
 8018248:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801824a:	3b01      	subs	r3, #1
 801824c:	d21a      	bcs.n	8018284 <lv_style_set_prop+0x82>
        style->prop_cnt++;
 801824e:	79e3      	ldrb	r3, [r4, #7]
 8018250:	3301      	adds	r3, #1
 8018252:	b2da      	uxtb	r2, r3
        props[style->prop_cnt - 1] = prop;
 8018254:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
        style->prop_cnt++;
 8018258:	71e2      	strb	r2, [r4, #7]
        props[style->prop_cnt - 1] = prop;
 801825a:	3b01      	subs	r3, #1
 801825c:	005b      	lsls	r3, r3, #1
 801825e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018262:	52c5      	strh	r5, [r0, r3]
        values[style->prop_cnt - 1] = value;
 8018264:	79e3      	ldrb	r3, [r4, #7]
 8018266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801826a:	3b01      	subs	r3, #1
 801826c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    uint8_t group = _lv_style_get_prop_group(prop);
 8018270:	4628      	mov	r0, r5
 8018272:	f7ff ffbe 	bl	80181f2 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8018276:	2301      	movs	r3, #1
 8018278:	fa03 f000 	lsl.w	r0, r3, r0
 801827c:	79a3      	ldrb	r3, [r4, #6]
 801827e:	4318      	orrs	r0, r3
 8018280:	71a0      	strb	r0, [r4, #6]
 8018282:	e7d3      	b.n	801822c <lv_style_set_prop+0x2a>
            props[i + sizeof(lv_style_value_t) /sizeof(uint16_t)] = props[i];
 8018284:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8018288:	f821 7013 	strh.w	r7, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801828c:	e7dd      	b.n	801824a <lv_style_set_prop+0x48>
    } else if(style->prop_cnt == 1) {
 801828e:	d11c      	bne.n	80182ca <lv_style_set_prop+0xc8>
        if(style->prop1 == prop) {
 8018290:	8883      	ldrh	r3, [r0, #4]
 8018292:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018296:	428b      	cmp	r3, r1
 8018298:	d101      	bne.n	801829e <lv_style_set_prop+0x9c>
            style->v_p.value1 = value;
 801829a:	6006      	str	r6, [r0, #0]
            return;
 801829c:	e7c6      	b.n	801822c <lv_style_set_prop+0x2a>
        uint8_t * values_and_props = lv_mem_alloc(size);
 801829e:	200c      	movs	r0, #12
 80182a0:	f7ff f9f2 	bl	8017688 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 80182a4:	2800      	cmp	r0, #0
 80182a6:	d0c1      	beq.n	801822c <lv_style_set_prop+0x2a>
        style->prop_cnt++;
 80182a8:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 80182aa:	88a2      	ldrh	r2, [r4, #4]
        style->prop_cnt++;
 80182ac:	3301      	adds	r3, #1
        lv_style_value_t value_tmp = style->v_p.value1;
 80182ae:	6821      	ldr	r1, [r4, #0]
        props[0] = style->prop1;
 80182b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
        style->v_p.values_and_props = values_and_props;
 80182b4:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 80182b6:	b2db      	uxtb	r3, r3
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80182b8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
        style->prop_cnt++;
 80182bc:	71e3      	strb	r3, [r4, #7]
        props[0] = style->prop1;
 80182be:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        props[1] = prop;
 80182c2:	807d      	strh	r5, [r7, #2]
        values[1] = value;
 80182c4:	e9c0 1600 	strd	r1, r6, [r0]
 80182c8:	e7d2      	b.n	8018270 <lv_style_set_prop+0x6e>
        style->prop_cnt = 1;
 80182ca:	2301      	movs	r3, #1
        style->v_p.value1 = value;
 80182cc:	6006      	str	r6, [r0, #0]
        style->prop_cnt = 1;
 80182ce:	71c3      	strb	r3, [r0, #7]
        style->prop1 = prop;
 80182d0:	8883      	ldrh	r3, [r0, #4]
 80182d2:	f361 030e 	bfi	r3, r1, #0, #15
 80182d6:	8083      	strh	r3, [r0, #4]
        style->v_p.value1 = value;
 80182d8:	e7ca      	b.n	8018270 <lv_style_set_prop+0x6e>
	...

080182dc <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 80182dc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 80182de:	2118      	movs	r1, #24
 80182e0:	4803      	ldr	r0, [pc, #12]	; (80182f0 <_lv_timer_core_init+0x14>)
 80182e2:	f7fe fed2 	bl	801708a <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 80182e6:	4b03      	ldr	r3, [pc, #12]	; (80182f4 <_lv_timer_core_init+0x18>)
 80182e8:	2201      	movs	r2, #1
 80182ea:	701a      	strb	r2, [r3, #0]
}
 80182ec:	bd08      	pop	{r3, pc}
 80182ee:	bf00      	nop
 80182f0:	2000b4dc 	.word	0x2000b4dc
 80182f4:	2000b238 	.word	0x2000b238

080182f8 <lv_timer_create>:
{
 80182f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182fa:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80182fc:	480c      	ldr	r0, [pc, #48]	; (8018330 <lv_timer_create+0x38>)
{
 80182fe:	460f      	mov	r7, r1
 8018300:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8018302:	f7fe feca 	bl	801709a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8018306:	4604      	mov	r4, r0
 8018308:	b900      	cbnz	r0, 801830c <lv_timer_create+0x14>
 801830a:	e7fe      	b.n	801830a <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 801830c:	f04f 33ff 	mov.w	r3, #4294967295
    new_timer->period  = period;
 8018310:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 8018312:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 8018314:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8018316:	7d03      	ldrb	r3, [r0, #20]
 8018318:	f36f 0300 	bfc	r3, #0, #1
 801831c:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 801831e:	f7fe f99f 	bl	8016660 <lv_tick_get>
    timer_created = true;
 8018322:	4b04      	ldr	r3, [pc, #16]	; (8018334 <lv_timer_create+0x3c>)
 8018324:	2201      	movs	r2, #1
    new_timer->last_run = lv_tick_get();
 8018326:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8018328:	60e5      	str	r5, [r4, #12]
}
 801832a:	4620      	mov	r0, r4
    timer_created = true;
 801832c:	701a      	strb	r2, [r3, #0]
}
 801832e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018330:	2000b4dc 	.word	0x2000b4dc
 8018334:	2000b239 	.word	0x2000b239

08018338 <lv_timer_del>:
{
 8018338:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 801833a:	4601      	mov	r1, r0
{
 801833c:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 801833e:	4805      	ldr	r0, [pc, #20]	; (8018354 <lv_timer_del+0x1c>)
 8018340:	f7fe fee2 	bl	8017108 <_lv_ll_remove>
    timer_deleted = true;
 8018344:	4b04      	ldr	r3, [pc, #16]	; (8018358 <lv_timer_del+0x20>)
 8018346:	2201      	movs	r2, #1
    lv_mem_free(timer);
 8018348:	4620      	mov	r0, r4
}
 801834a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timer_deleted = true;
 801834e:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8018350:	f7ff b818 	b.w	8017384 <lv_mem_free>
 8018354:	2000b4dc 	.word	0x2000b4dc
 8018358:	2000b23a 	.word	0x2000b23a

0801835c <lv_timer_handler>:
    if(already_running) return 1;
 801835c:	4b50      	ldr	r3, [pc, #320]	; (80184a0 <lv_timer_handler+0x144>)
{
 801835e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
 8018362:	781a      	ldrb	r2, [r3, #0]
 8018364:	2601      	movs	r6, #1
 8018366:	b922      	cbnz	r2, 8018372 <lv_timer_handler+0x16>
    if(lv_timer_run == false) {
 8018368:	4a4e      	ldr	r2, [pc, #312]	; (80184a4 <lv_timer_handler+0x148>)
    already_running = true;
 801836a:	701e      	strb	r6, [r3, #0]
    if(lv_timer_run == false) {
 801836c:	7812      	ldrb	r2, [r2, #0]
 801836e:	b922      	cbnz	r2, 801837a <lv_timer_handler+0x1e>
        already_running = false; /*Release mutex*/
 8018370:	701a      	strb	r2, [r3, #0]
}
 8018372:	4630      	mov	r0, r6
 8018374:	b003      	add	sp, #12
 8018376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        timer_deleted             = false;
 801837a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80184c0 <lv_timer_handler+0x164>
    uint32_t handler_start = lv_tick_get();
 801837e:	f7fe f96f 	bl	8016660 <lv_tick_get>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018382:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80184b0 <lv_timer_handler+0x154>
    uint32_t handler_start = lv_tick_get();
 8018386:	4605      	mov	r5, r0
 8018388:	46ca      	mov	sl, r9
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801838a:	4e47      	ldr	r6, [pc, #284]	; (80184a8 <lv_timer_handler+0x14c>)
        timer_deleted             = false;
 801838c:	2300      	movs	r3, #0
        timer_created             = false;
 801838e:	4c47      	ldr	r4, [pc, #284]	; (80184ac <lv_timer_handler+0x150>)
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018390:	4658      	mov	r0, fp
 8018392:	4637      	mov	r7, r6
        timer_deleted             = false;
 8018394:	f889 3000 	strb.w	r3, [r9]
        timer_created             = false;
 8018398:	7023      	strb	r3, [r4, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801839a:	f7fe fef0 	bl	801717e <_lv_ll_get_head>
 801839e:	9400      	str	r4, [sp, #0]
 80183a0:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80183a2:	6839      	ldr	r1, [r7, #0]
 80183a4:	bb69      	cbnz	r1, 8018402 <lv_timer_handler+0xa6>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80183a6:	4842      	ldr	r0, [pc, #264]	; (80184b0 <lv_timer_handler+0x154>)
    uint32_t time_till_next = LV_NO_TIMER_READY;
 80183a8:	f04f 36ff 	mov.w	r6, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80183ac:	f7fe fee7 	bl	801717e <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 80183b0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80184b0 <lv_timer_handler+0x154>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80183b4:	4604      	mov	r4, r0
    while(next) {
 80183b6:	2c00      	cmp	r4, #0
 80183b8:	d15c      	bne.n	8018474 <lv_timer_handler+0x118>
    busy_time += lv_tick_elaps(handler_start);
 80183ba:	4628      	mov	r0, r5
 80183bc:	4d3d      	ldr	r5, [pc, #244]	; (80184b4 <lv_timer_handler+0x158>)
 80183be:	f7fe f95d 	bl	801667c <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80183c2:	4f3d      	ldr	r7, [pc, #244]	; (80184b8 <lv_timer_handler+0x15c>)
    busy_time += lv_tick_elaps(handler_start);
 80183c4:	682b      	ldr	r3, [r5, #0]
 80183c6:	4418      	add	r0, r3
 80183c8:	6028      	str	r0, [r5, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80183ca:	6838      	ldr	r0, [r7, #0]
 80183cc:	f7fe f956 	bl	801667c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 80183d0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80183d4:	d311      	bcc.n	80183fa <lv_timer_handler+0x9e>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 80183d6:	682a      	ldr	r2, [r5, #0]
 80183d8:	2364      	movs	r3, #100	; 0x64
 80183da:	4353      	muls	r3, r2
 80183dc:	fbb3 f0f0 	udiv	r0, r3, r0
 80183e0:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 80183e2:	4b36      	ldr	r3, [pc, #216]	; (80184bc <lv_timer_handler+0x160>)
 80183e4:	2864      	cmp	r0, #100	; 0x64
 80183e6:	bf9c      	itt	ls
 80183e8:	f1c0 0464 	rsbls	r4, r0, #100	; 0x64
 80183ec:	b2e4      	uxtbls	r4, r4
 80183ee:	701c      	strb	r4, [r3, #0]
        busy_time         = 0;
 80183f0:	2300      	movs	r3, #0
 80183f2:	602b      	str	r3, [r5, #0]
        idle_period_start = lv_tick_get();
 80183f4:	f7fe f934 	bl	8016660 <lv_tick_get>
 80183f8:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 80183fa:	2300      	movs	r3, #0
 80183fc:	4a28      	ldr	r2, [pc, #160]	; (80184a0 <lv_timer_handler+0x144>)
 80183fe:	7013      	strb	r3, [r2, #0]
    return time_till_next;
 8018400:	e7b7      	b.n	8018372 <lv_timer_handler+0x16>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8018402:	4658      	mov	r0, fp
 8018404:	f7fe fec1 	bl	801718a <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8018408:	683c      	ldr	r4, [r7, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 801840a:	4680      	mov	r8, r0
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 801840c:	7d22      	ldrb	r2, [r4, #20]
 801840e:	07d3      	lsls	r3, r2, #31
 8018410:	d404      	bmi.n	801841c <lv_timer_handler+0xc0>

    if(timer->repeat_count == 0) {
 8018412:	6922      	ldr	r2, [r4, #16]
 8018414:	b92a      	cbnz	r2, 8018422 <lv_timer_handler+0xc6>
        TIMER_TRACE("deleting timer with %p callback because the repeat count is over", timer->timer_cb);
        lv_timer_del(timer);
 8018416:	4620      	mov	r0, r4
 8018418:	f7ff ff8e 	bl	8018338 <lv_timer_del>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 801841c:	f8c7 8000 	str.w	r8, [r7]
 8018420:	e7bf      	b.n	80183a2 <lv_timer_handler+0x46>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8018422:	6860      	ldr	r0, [r4, #4]
 8018424:	f7fe f92a 	bl	801667c <lv_tick_elaps>
    if(elp >= timer->period)
 8018428:	6822      	ldr	r2, [r4, #0]
 801842a:	4290      	cmp	r0, r2
 801842c:	d3f6      	bcc.n	801841c <lv_timer_handler+0xc0>
        int32_t original_repeat_count = timer->repeat_count;
 801842e:	6922      	ldr	r2, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8018430:	2a00      	cmp	r2, #0
 8018432:	9201      	str	r2, [sp, #4]
 8018434:	bfc4      	itt	gt
 8018436:	f102 31ff 	addgt.w	r1, r2, #4294967295
 801843a:	6121      	strgt	r1, [r4, #16]
        timer->last_run = lv_tick_get();
 801843c:	f7fe f910 	bl	8016660 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8018440:	68a1      	ldr	r1, [r4, #8]
        timer->last_run = lv_tick_get();
 8018442:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8018444:	b119      	cbz	r1, 801844e <lv_timer_handler+0xf2>
 8018446:	9a01      	ldr	r2, [sp, #4]
 8018448:	b10a      	cbz	r2, 801844e <lv_timer_handler+0xf2>
 801844a:	4620      	mov	r0, r4
 801844c:	4788      	blx	r1
        if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 801844e:	f89a 2000 	ldrb.w	r2, [sl]
 8018452:	b922      	cbnz	r2, 801845e <lv_timer_handler+0x102>
            if(timer->repeat_count == 0) {
 8018454:	6922      	ldr	r2, [r4, #16]
 8018456:	b912      	cbnz	r2, 801845e <lv_timer_handler+0x102>
                lv_timer_del(timer);
 8018458:	4620      	mov	r0, r4
 801845a:	f7ff ff6d 	bl	8018338 <lv_timer_del>
                if(timer_created || timer_deleted) {
 801845e:	9b00      	ldr	r3, [sp, #0]
 8018460:	781b      	ldrb	r3, [r3, #0]
 8018462:	b91b      	cbnz	r3, 801846c <lv_timer_handler+0x110>
 8018464:	f89a 3000 	ldrb.w	r3, [sl]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d0d7      	beq.n	801841c <lv_timer_handler+0xc0>
    } while(LV_GC_ROOT(_lv_timer_act));
 801846c:	6833      	ldr	r3, [r6, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d18b      	bne.n	801838a <lv_timer_handler+0x2e>
 8018472:	e798      	b.n	80183a6 <lv_timer_handler+0x4a>
        if(!next->paused) {
 8018474:	7d20      	ldrb	r0, [r4, #20]
 8018476:	f010 0701 	ands.w	r7, r0, #1
 801847a:	d10a      	bne.n	8018492 <lv_timer_handler+0x136>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 801847c:	6860      	ldr	r0, [r4, #4]
 801847e:	f7fe f8fd 	bl	801667c <lv_tick_elaps>
    if(elp >= timer->period)
 8018482:	6823      	ldr	r3, [r4, #0]
 8018484:	4298      	cmp	r0, r3
        return 0;
 8018486:	bf2c      	ite	cs
 8018488:	4638      	movcs	r0, r7
    return timer->period - elp;
 801848a:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
 801848c:	4286      	cmp	r6, r0
 801848e:	bf28      	it	cs
 8018490:	4606      	movcs	r6, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8018492:	4621      	mov	r1, r4
 8018494:	4640      	mov	r0, r8
 8018496:	f7fe fe78 	bl	801718a <_lv_ll_get_next>
 801849a:	4604      	mov	r4, r0
 801849c:	e78b      	b.n	80183b6 <lv_timer_handler+0x5a>
 801849e:	bf00      	nop
 80184a0:	2000b228 	.word	0x2000b228
 80184a4:	2000b238 	.word	0x2000b238
 80184a8:	2000b4cc 	.word	0x2000b4cc
 80184ac:	2000b239 	.word	0x2000b239
 80184b0:	2000b4dc 	.word	0x2000b4dc
 80184b4:	2000b22c 	.word	0x2000b22c
 80184b8:	2000b234 	.word	0x2000b234
 80184bc:	2000b230 	.word	0x2000b230
 80184c0:	2000b23a 	.word	0x2000b23a

080184c4 <lv_timer_pause>:
    timer->paused = true;
 80184c4:	7d03      	ldrb	r3, [r0, #20]
 80184c6:	f043 0301 	orr.w	r3, r3, #1
 80184ca:	7503      	strb	r3, [r0, #20]
}
 80184cc:	4770      	bx	lr

080184ce <lv_timer_resume>:
    timer->paused = false;
 80184ce:	7d03      	ldrb	r3, [r0, #20]
 80184d0:	f36f 0300 	bfc	r3, #0, #1
 80184d4:	7503      	strb	r3, [r0, #20]
}
 80184d6:	4770      	bx	lr

080184d8 <lv_timer_ready>:
{
 80184d8:	b510      	push	{r4, lr}
 80184da:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 80184dc:	f7fe f8c0 	bl	8016660 <lv_tick_get>
 80184e0:	6823      	ldr	r3, [r4, #0]
 80184e2:	43db      	mvns	r3, r3
 80184e4:	4403      	add	r3, r0
 80184e6:	6063      	str	r3, [r4, #4]
}
 80184e8:	bd10      	pop	{r4, pc}

080184ea <default_walker>:

static void default_walker(void* ptr, size_t size, int used, void* user)
{
	(void)user;
	printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void*)block_from_ptr(ptr));
}
 80184ea:	4770      	bx	lr

080184ec <block_next>:
{
 80184ec:	b508      	push	{r3, lr}
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80184ee:	6843      	ldr	r3, [r0, #4]
 80184f0:	f023 0303 	bic.w	r3, r3, #3
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 80184f4:	4418      	add	r0, r3
 80184f6:	3004      	adds	r0, #4
	tlsf_assert(!block_is_last(block));
 80184f8:	b933      	cbnz	r3, 8018508 <block_next+0x1c>
 80184fa:	4b04      	ldr	r3, [pc, #16]	; (801850c <block_next+0x20>)
 80184fc:	f240 11cd 	movw	r1, #461	; 0x1cd
 8018500:	4a03      	ldr	r2, [pc, #12]	; (8018510 <block_next+0x24>)
 8018502:	4804      	ldr	r0, [pc, #16]	; (8018514 <block_next+0x28>)
 8018504:	f00c faa6 	bl	8024a54 <__assert_func>
}
 8018508:	bd08      	pop	{r3, pc}
 801850a:	bf00      	nop
 801850c:	080299b6 	.word	0x080299b6
 8018510:	08029e21 	.word	0x08029e21
 8018514:	080299cc 	.word	0x080299cc

08018518 <block_link_next>:
{
 8018518:	b510      	push	{r4, lr}
 801851a:	4604      	mov	r4, r0
	block_header_t* next = block_next(block);
 801851c:	f7ff ffe6 	bl	80184ec <block_next>
	next->prev_phys_block = block;
 8018520:	6004      	str	r4, [r0, #0]
}
 8018522:	bd10      	pop	{r4, pc}

08018524 <block_split>:
{
 8018524:	b570      	push	{r4, r5, r6, lr}
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018526:	6846      	ldr	r6, [r0, #4]
	return tlsf_cast(void*,
 8018528:	1842      	adds	r2, r0, r1
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801852a:	f026 0603 	bic.w	r6, r6, #3
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 801852e:	1d14      	adds	r4, r2, #4
	const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8018530:	1a73      	subs	r3, r6, r1
 8018532:	1f1d      	subs	r5, r3, #4
	return tlsf_cast(void*,
 8018534:	f102 030c 	add.w	r3, r2, #12
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8018538:	320f      	adds	r2, #15
 801853a:	f022 0203 	bic.w	r2, r2, #3
	tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 801853e:	4293      	cmp	r3, r2
 8018540:	d006      	beq.n	8018550 <block_split+0x2c>
 8018542:	4b18      	ldr	r3, [pc, #96]	; (80185a4 <block_split+0x80>)
 8018544:	f240 21a3 	movw	r1, #675	; 0x2a3
 8018548:	4a17      	ldr	r2, [pc, #92]	; (80185a8 <block_split+0x84>)
	tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 801854a:	4818      	ldr	r0, [pc, #96]	; (80185ac <block_split+0x88>)
 801854c:	f00c fa82 	bl	8024a54 <__assert_func>
 8018550:	1d0b      	adds	r3, r1, #4
 8018552:	442b      	add	r3, r5
 8018554:	42b3      	cmp	r3, r6
 8018556:	d004      	beq.n	8018562 <block_split+0x3e>
 8018558:	4b15      	ldr	r3, [pc, #84]	; (80185b0 <block_split+0x8c>)
 801855a:	f240 21a6 	movw	r1, #678	; 0x2a6
 801855e:	4a12      	ldr	r2, [pc, #72]	; (80185a8 <block_split+0x84>)
 8018560:	e7f3      	b.n	801854a <block_split+0x26>
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8018562:	6863      	ldr	r3, [r4, #4]
 8018564:	f003 0303 	and.w	r3, r3, #3
 8018568:	432b      	orrs	r3, r5
 801856a:	6063      	str	r3, [r4, #4]
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801856c:	f023 0303 	bic.w	r3, r3, #3
	tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8018570:	2b0b      	cmp	r3, #11
 8018572:	d804      	bhi.n	801857e <block_split+0x5a>
 8018574:	4b0f      	ldr	r3, [pc, #60]	; (80185b4 <block_split+0x90>)
 8018576:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 801857a:	4a0b      	ldr	r2, [pc, #44]	; (80185a8 <block_split+0x84>)
 801857c:	e7e5      	b.n	801854a <block_split+0x26>
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 801857e:	6843      	ldr	r3, [r0, #4]
 8018580:	f003 0303 	and.w	r3, r3, #3
 8018584:	4319      	orrs	r1, r3
 8018586:	6041      	str	r1, [r0, #4]
	block_header_t* next = block_link_next(block);
 8018588:	4620      	mov	r0, r4
 801858a:	f7ff ffc5 	bl	8018518 <block_link_next>
	block->size |= block_header_prev_free_bit;
 801858e:	6843      	ldr	r3, [r0, #4]
 8018590:	f043 0302 	orr.w	r3, r3, #2
 8018594:	6043      	str	r3, [r0, #4]
}
 8018596:	4620      	mov	r0, r4
	block->size |= block_header_free_bit;
 8018598:	6863      	ldr	r3, [r4, #4]
 801859a:	f043 0301 	orr.w	r3, r3, #1
 801859e:	6063      	str	r3, [r4, #4]
}
 80185a0:	bd70      	pop	{r4, r5, r6, pc}
 80185a2:	bf00      	nop
 80185a4:	080299ec 	.word	0x080299ec
 80185a8:	08029e6f 	.word	0x08029e6f
 80185ac:	080299cc 	.word	0x080299cc
 80185b0:	08029a60 	.word	0x08029a60
 80185b4:	08029aa0 	.word	0x08029aa0

080185b8 <block_mark_as_used>:
{
 80185b8:	b510      	push	{r4, lr}
 80185ba:	4604      	mov	r4, r0
	block_header_t* next = block_next(block);
 80185bc:	f7ff ff96 	bl	80184ec <block_next>
	block->size &= ~block_header_prev_free_bit;
 80185c0:	6843      	ldr	r3, [r0, #4]
 80185c2:	f023 0302 	bic.w	r3, r3, #2
 80185c6:	6043      	str	r3, [r0, #4]
	block->size &= ~block_header_free_bit;
 80185c8:	6863      	ldr	r3, [r4, #4]
 80185ca:	f023 0301 	bic.w	r3, r3, #1
 80185ce:	6063      	str	r3, [r4, #4]
}
 80185d0:	bd10      	pop	{r4, pc}
	...

080185d4 <remove_free_block>:
{
 80185d4:	b570      	push	{r4, r5, r6, lr}
	block_header_t* next = block->next_free;
 80185d6:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
	tlsf_assert(prev && "prev_free field can not be null");
 80185da:	b935      	cbnz	r5, 80185ea <remove_free_block+0x16>
 80185dc:	4b14      	ldr	r3, [pc, #80]	; (8018630 <remove_free_block+0x5c>)
 80185de:	f44f 7116 	mov.w	r1, #600	; 0x258
 80185e2:	4a14      	ldr	r2, [pc, #80]	; (8018634 <remove_free_block+0x60>)
	tlsf_assert(next && "next_free field can not be null");
 80185e4:	4814      	ldr	r0, [pc, #80]	; (8018638 <remove_free_block+0x64>)
 80185e6:	f00c fa35 	bl	8024a54 <__assert_func>
 80185ea:	b924      	cbnz	r4, 80185f6 <remove_free_block+0x22>
 80185ec:	4b13      	ldr	r3, [pc, #76]	; (801863c <remove_free_block+0x68>)
 80185ee:	f240 2159 	movw	r1, #601	; 0x259
 80185f2:	4a10      	ldr	r2, [pc, #64]	; (8018634 <remove_free_block+0x60>)
 80185f4:	e7f6      	b.n	80185e4 <remove_free_block+0x10>
	next->prev_free = prev;
 80185f6:	60e5      	str	r5, [r4, #12]
	prev->next_free = next;
 80185f8:	60ac      	str	r4, [r5, #8]
	if (control->blocks[fl][sl] == block)
 80185fa:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 80185fe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8018602:	6bae      	ldr	r6, [r5, #56]	; 0x38
 8018604:	428e      	cmp	r6, r1
 8018606:	d112      	bne.n	801862e <remove_free_block+0x5a>
		if (next == &control->block_null)
 8018608:	42a0      	cmp	r0, r4
		control->blocks[fl][sl] = next;
 801860a:	63ac      	str	r4, [r5, #56]	; 0x38
		if (next == &control->block_null)
 801860c:	d10f      	bne.n	801862e <remove_free_block+0x5a>
			control->sl_bitmap[fl] &= ~(1U << sl);
 801860e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8018612:	2101      	movs	r1, #1
 8018614:	696c      	ldr	r4, [r5, #20]
 8018616:	fa01 f303 	lsl.w	r3, r1, r3
 801861a:	ea24 0303 	bic.w	r3, r4, r3
 801861e:	616b      	str	r3, [r5, #20]
			if (!control->sl_bitmap[fl])
 8018620:	b92b      	cbnz	r3, 801862e <remove_free_block+0x5a>
				control->fl_bitmap &= ~(1U << fl);
 8018622:	fa01 f202 	lsl.w	r2, r1, r2
 8018626:	6901      	ldr	r1, [r0, #16]
 8018628:	ea21 0202 	bic.w	r2, r1, r2
 801862c:	6102      	str	r2, [r0, #16]
}
 801862e:	bd70      	pop	{r4, r5, r6, pc}
 8018630:	08029b28 	.word	0x08029b28
 8018634:	08029e4b 	.word	0x08029e4b
 8018638:	080299cc 	.word	0x080299cc
 801863c:	08029b52 	.word	0x08029b52

08018640 <block_absorb.part.0>:
static block_header_t* block_absorb(block_header_t* prev, block_header_t* block)
 8018640:	b508      	push	{r3, lr}
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8018642:	4a03      	ldr	r2, [pc, #12]	; (8018650 <block_absorb.part.0+0x10>)
 8018644:	f240 21b3 	movw	r1, #691	; 0x2b3
 8018648:	4b02      	ldr	r3, [pc, #8]	; (8018654 <block_absorb.part.0+0x14>)
 801864a:	4803      	ldr	r0, [pc, #12]	; (8018658 <block_absorb.part.0+0x18>)
 801864c:	f00c fa02 	bl	8024a54 <__assert_func>
 8018650:	08029e7b 	.word	0x08029e7b
 8018654:	08029b7c 	.word	0x08029b7c
 8018658:	080299cc 	.word	0x080299cc

0801865c <block_prepare_used.part.0>:
static void* block_prepare_used(control_t* control, block_header_t* block, size_t size)
 801865c:	b508      	push	{r3, lr}
		tlsf_assert(size && "size must be non-zero");
 801865e:	4a03      	ldr	r2, [pc, #12]	; (801866c <block_prepare_used.part.0+0x10>)
 8018660:	f44f 714a 	mov.w	r1, #808	; 0x328
 8018664:	4b02      	ldr	r3, [pc, #8]	; (8018670 <block_prepare_used.part.0+0x14>)
 8018666:	4803      	ldr	r0, [pc, #12]	; (8018674 <block_prepare_used.part.0+0x18>)
 8018668:	f00c f9f4 	bl	8024a54 <__assert_func>
 801866c:	08029edc 	.word	0x08029edc
 8018670:	08029bb3 	.word	0x08029bb3
 8018674:	080299cc 	.word	0x080299cc

08018678 <mapping_insert>:
	if (size < SMALL_BLOCK_SIZE)
 8018678:	287f      	cmp	r0, #127	; 0x7f
	const int bit = word ? 32 - __builtin_clz(word) : 0;
 801867a:	bf8e      	itee	hi
 801867c:	fab0 f380 	clzhi	r3, r0
		sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8018680:	1080      	asrls	r0, r0, #2
		fl = 0;
 8018682:	2300      	movls	r3, #0
{
 8018684:	b510      	push	{r4, lr}
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018686:	bf82      	ittt	hi
 8018688:	f1c3 041a 	rsbhi	r4, r3, #26
		fl -= (FL_INDEX_SHIFT - 1);
 801868c:	f1c3 0319 	rsbhi	r3, r3, #25
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018690:	40e0      	lsrhi	r0, r4
	*fli = fl;
 8018692:	600b      	str	r3, [r1, #0]
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018694:	bf88      	it	hi
 8018696:	f080 0020 	eorhi.w	r0, r0, #32
	*sli = sl;
 801869a:	6010      	str	r0, [r2, #0]
}
 801869c:	bd10      	pop	{r4, pc}
	...

080186a0 <block_insert>:
{
 80186a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186a2:	4604      	mov	r4, r0
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80186a4:	6848      	ldr	r0, [r1, #4]
	mapping_insert(block_size(block), &fl, &sl);
 80186a6:	aa01      	add	r2, sp, #4
{
 80186a8:	460d      	mov	r5, r1
	mapping_insert(block_size(block), &fl, &sl);
 80186aa:	f020 0003 	bic.w	r0, r0, #3
 80186ae:	4669      	mov	r1, sp
 80186b0:	f7ff ffe2 	bl	8018678 <mapping_insert>
	insert_free_block(control, block, fl, sl);
 80186b4:	e9dd 0700 	ldrd	r0, r7, [sp]
	block_header_t* current = control->blocks[fl][sl];
 80186b8:	eb07 1240 	add.w	r2, r7, r0, lsl #5
 80186bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80186c0:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tlsf_assert(current && "free list cannot have a null entry");
 80186c2:	b933      	cbnz	r3, 80186d2 <block_insert+0x32>
 80186c4:	4b12      	ldr	r3, [pc, #72]	; (8018710 <block_insert+0x70>)
 80186c6:	f44f 711d 	mov.w	r1, #628	; 0x274
 80186ca:	4a12      	ldr	r2, [pc, #72]	; (8018714 <block_insert+0x74>)
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80186cc:	4812      	ldr	r0, [pc, #72]	; (8018718 <block_insert+0x78>)
 80186ce:	f00c f9c1 	bl	8024a54 <__assert_func>
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80186d2:	f105 010b 	add.w	r1, r5, #11
	return tlsf_cast(void*,
 80186d6:	f105 0608 	add.w	r6, r5, #8
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80186da:	f021 0103 	bic.w	r1, r1, #3
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80186de:	428e      	cmp	r6, r1
	block->prev_free = &control->block_null;
 80186e0:	e9c5 3402 	strd	r3, r4, [r5, #8]
	current->prev_free = block;
 80186e4:	60dd      	str	r5, [r3, #12]
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80186e6:	d004      	beq.n	80186f2 <block_insert+0x52>
 80186e8:	4b0c      	ldr	r3, [pc, #48]	; (801871c <block_insert+0x7c>)
 80186ea:	f240 217a 	movw	r1, #634	; 0x27a
 80186ee:	4a09      	ldr	r2, [pc, #36]	; (8018714 <block_insert+0x74>)
 80186f0:	e7ec      	b.n	80186cc <block_insert+0x2c>
	control->fl_bitmap |= (1U << fl);
 80186f2:	2301      	movs	r3, #1
	control->blocks[fl][sl] = block;
 80186f4:	6395      	str	r5, [r2, #56]	; 0x38
	control->fl_bitmap |= (1U << fl);
 80186f6:	6922      	ldr	r2, [r4, #16]
 80186f8:	fa03 f100 	lsl.w	r1, r3, r0
	control->sl_bitmap[fl] |= (1U << sl);
 80186fc:	40bb      	lsls	r3, r7
	control->fl_bitmap |= (1U << fl);
 80186fe:	430a      	orrs	r2, r1
 8018700:	6122      	str	r2, [r4, #16]
	control->sl_bitmap[fl] |= (1U << sl);
 8018702:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8018706:	6962      	ldr	r2, [r4, #20]
 8018708:	4313      	orrs	r3, r2
 801870a:	6163      	str	r3, [r4, #20]
}
 801870c:	b003      	add	sp, #12
 801870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018710:	08029bd3 	.word	0x08029bd3
 8018714:	08029e5d 	.word	0x08029e5d
 8018718:	080299cc 	.word	0x080299cc
 801871c:	08029c03 	.word	0x08029c03

08018720 <block_trim_free>:
	tlsf_assert(block_is_free(block) && "block must be free");
 8018720:	684b      	ldr	r3, [r1, #4]
{
 8018722:	b570      	push	{r4, r5, r6, lr}
 8018724:	460d      	mov	r5, r1
	tlsf_assert(block_is_free(block) && "block must be free");
 8018726:	07d9      	lsls	r1, r3, #31
{
 8018728:	4606      	mov	r6, r0
	tlsf_assert(block_is_free(block) && "block must be free");
 801872a:	d406      	bmi.n	801873a <block_trim_free+0x1a>
 801872c:	4b0f      	ldr	r3, [pc, #60]	; (801876c <block_trim_free+0x4c>)
 801872e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8018732:	4a0f      	ldr	r2, [pc, #60]	; (8018770 <block_trim_free+0x50>)
 8018734:	480f      	ldr	r0, [pc, #60]	; (8018774 <block_trim_free+0x54>)
 8018736:	f00c f98d 	bl	8024a54 <__assert_func>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801873a:	f023 0303 	bic.w	r3, r3, #3
	return block_size(block) >= sizeof(block_header_t) + size;
 801873e:	f102 0110 	add.w	r1, r2, #16
	if (block_can_split(block, size))
 8018742:	428b      	cmp	r3, r1
 8018744:	d311      	bcc.n	801876a <block_trim_free+0x4a>
		block_header_t* remaining_block = block_split(block, size);
 8018746:	4611      	mov	r1, r2
 8018748:	4628      	mov	r0, r5
 801874a:	f7ff feeb 	bl	8018524 <block_split>
 801874e:	4604      	mov	r4, r0
		block_link_next(block);
 8018750:	4628      	mov	r0, r5
 8018752:	f7ff fee1 	bl	8018518 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018756:	6863      	ldr	r3, [r4, #4]
		block_insert(control, remaining_block);
 8018758:	4621      	mov	r1, r4
 801875a:	4630      	mov	r0, r6
	block->size |= block_header_prev_free_bit;
 801875c:	f043 0302 	orr.w	r3, r3, #2
 8018760:	6063      	str	r3, [r4, #4]
}
 8018762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		block_insert(control, remaining_block);
 8018766:	f7ff bf9b 	b.w	80186a0 <block_insert>
}
 801876a:	bd70      	pop	{r4, r5, r6, pc}
 801876c:	08029c65 	.word	0x08029c65
 8018770:	08029eaa 	.word	0x08029eaa
 8018774:	080299cc 	.word	0x080299cc

08018778 <block_remove>:
{
 8018778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801877a:	4605      	mov	r5, r0
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801877c:	6848      	ldr	r0, [r1, #4]
{
 801877e:	460c      	mov	r4, r1
	mapping_insert(block_size(block), &fl, &sl);
 8018780:	aa01      	add	r2, sp, #4
 8018782:	4669      	mov	r1, sp
 8018784:	f020 0003 	bic.w	r0, r0, #3
 8018788:	f7ff ff76 	bl	8018678 <mapping_insert>
	remove_free_block(control, block, fl, sl);
 801878c:	4621      	mov	r1, r4
 801878e:	4628      	mov	r0, r5
 8018790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018794:	f7ff ff1e 	bl	80185d4 <remove_free_block>
}
 8018798:	b003      	add	sp, #12
 801879a:	bd30      	pop	{r4, r5, pc}

0801879c <block_locate_free>:
	int fl = 0, sl = 0;
 801879c:	2300      	movs	r3, #0
{
 801879e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80187a0:	4605      	mov	r5, r0
	if (size)
 80187a2:	460e      	mov	r6, r1
	int fl = 0, sl = 0;
 80187a4:	e9cd 3300 	strd	r3, r3, [sp]
	if (size)
 80187a8:	b919      	cbnz	r1, 80187b2 <block_locate_free+0x16>
	block_header_t* block = 0;
 80187aa:	2400      	movs	r4, #0
}
 80187ac:	4620      	mov	r0, r4
 80187ae:	b002      	add	sp, #8
 80187b0:	bd70      	pop	{r4, r5, r6, pc}
	if (size >= SMALL_BLOCK_SIZE)
 80187b2:	297f      	cmp	r1, #127	; 0x7f
	mapping_insert(size, fli, sli);
 80187b4:	aa01      	add	r2, sp, #4
	const int bit = word ? 32 - __builtin_clz(word) : 0;
 80187b6:	bf89      	itett	hi
 80187b8:	fab1 f081 	clzhi	r0, r1
		size += round;
 80187bc:	4608      	movls	r0, r1
		const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 80187be:	f1c0 031a 	rsbhi	r3, r0, #26
 80187c2:	2001      	movhi	r0, #1
 80187c4:	bf82      	ittt	hi
 80187c6:	4098      	lslhi	r0, r3
 80187c8:	f100 30ff 	addhi.w	r0, r0, #4294967295
		size += round;
 80187cc:	1840      	addhi	r0, r0, r1
	mapping_insert(size, fli, sli);
 80187ce:	4669      	mov	r1, sp
 80187d0:	f7ff ff52 	bl	8018678 <mapping_insert>
		if (fl < FL_INDEX_COUNT)
 80187d4:	9a00      	ldr	r2, [sp, #0]
 80187d6:	2a08      	cmp	r2, #8
 80187d8:	dce7      	bgt.n	80187aa <block_locate_free+0xe>
	unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 80187da:	f04f 33ff 	mov.w	r3, #4294967295
 80187de:	9c01      	ldr	r4, [sp, #4]
 80187e0:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80187e4:	fa03 f404 	lsl.w	r4, r3, r4
 80187e8:	6949      	ldr	r1, [r1, #20]
	if (!sl_map)
 80187ea:	400c      	ands	r4, r1
 80187ec:	d114      	bne.n	8018818 <block_locate_free+0x7c>
		const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 80187ee:	3201      	adds	r2, #1
 80187f0:	4093      	lsls	r3, r2
 80187f2:	692a      	ldr	r2, [r5, #16]
		if (!fl_map)
 80187f4:	401a      	ands	r2, r3
 80187f6:	d0d8      	beq.n	80187aa <block_locate_free+0xe>
	return __builtin_ffs(word) - 1;
 80187f8:	fa92 f2a2 	rbit	r2, r2
 80187fc:	fab2 f282 	clz	r2, r2
		sl_map = control->sl_bitmap[fl];
 8018800:	eb05 0382 	add.w	r3, r5, r2, lsl #2
		*fli = fl;
 8018804:	9200      	str	r2, [sp, #0]
		sl_map = control->sl_bitmap[fl];
 8018806:	695c      	ldr	r4, [r3, #20]
	tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8018808:	b934      	cbnz	r4, 8018818 <block_locate_free+0x7c>
 801880a:	4b13      	ldr	r3, [pc, #76]	; (8018858 <block_locate_free+0xbc>)
 801880c:	f240 214b 	movw	r1, #587	; 0x24b
 8018810:	4a12      	ldr	r2, [pc, #72]	; (801885c <block_locate_free+0xc0>)
		tlsf_assert(block_size(block) >= size);
 8018812:	4813      	ldr	r0, [pc, #76]	; (8018860 <block_locate_free+0xc4>)
 8018814:	f00c f91e 	bl	8024a54 <__assert_func>
	return __builtin_ffs(word) - 1;
 8018818:	fa94 f3a4 	rbit	r3, r4
 801881c:	2c00      	cmp	r4, #0
 801881e:	fab3 f383 	clz	r3, r3
 8018822:	bf08      	it	eq
 8018824:	f04f 33ff 	moveq.w	r3, #4294967295
	return control->blocks[fl][sl];
 8018828:	eb03 1242 	add.w	r2, r3, r2, lsl #5
	*sli = sl;
 801882c:	9301      	str	r3, [sp, #4]
	return control->blocks[fl][sl];
 801882e:	320e      	adds	r2, #14
 8018830:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
	if (block)
 8018834:	2c00      	cmp	r4, #0
 8018836:	d0b8      	beq.n	80187aa <block_locate_free+0xe>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018838:	6862      	ldr	r2, [r4, #4]
 801883a:	f022 0203 	bic.w	r2, r2, #3
		tlsf_assert(block_size(block) >= size);
 801883e:	4296      	cmp	r6, r2
 8018840:	d904      	bls.n	801884c <block_locate_free+0xb0>
 8018842:	4b08      	ldr	r3, [pc, #32]	; (8018864 <block_locate_free+0xc8>)
 8018844:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8018848:	4a07      	ldr	r2, [pc, #28]	; (8018868 <block_locate_free+0xcc>)
 801884a:	e7e2      	b.n	8018812 <block_locate_free+0x76>
		remove_free_block(control, block, fl, sl);
 801884c:	9a00      	ldr	r2, [sp, #0]
 801884e:	4621      	mov	r1, r4
 8018850:	4628      	mov	r0, r5
 8018852:	f7ff febf 	bl	80185d4 <remove_free_block>
	return block;
 8018856:	e7a9      	b.n	80187ac <block_locate_free+0x10>
 8018858:	08029c92 	.word	0x08029c92
 801885c:	08029e35 	.word	0x08029e35
 8018860:	080299cc 	.word	0x080299cc
 8018864:	08029ccb 	.word	0x08029ccb
 8018868:	08029eca 	.word	0x08029eca

0801886c <adjust_request_size>:
{
 801886c:	b508      	push	{r3, lr}
	if (size)
 801886e:	b1b0      	cbz	r0, 801889e <adjust_request_size+0x32>
	tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8018870:	1e4b      	subs	r3, r1, #1
 8018872:	ea11 0203 	ands.w	r2, r1, r3
 8018876:	d006      	beq.n	8018886 <adjust_request_size+0x1a>
 8018878:	4b0a      	ldr	r3, [pc, #40]	; (80188a4 <adjust_request_size+0x38>)
 801887a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 801887e:	4a0a      	ldr	r2, [pc, #40]	; (80188a8 <adjust_request_size+0x3c>)
 8018880:	480a      	ldr	r0, [pc, #40]	; (80188ac <adjust_request_size+0x40>)
 8018882:	f00c f8e7 	bl	8024a54 <__assert_func>
	return (x + (align - 1)) & ~(align - 1);
 8018886:	4403      	add	r3, r0
 8018888:	4249      	negs	r1, r1
 801888a:	4019      	ands	r1, r3
		if (aligned < block_size_max) 
 801888c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8018890:	d203      	bcs.n	801889a <adjust_request_size+0x2e>
			adjust = tlsf_max(aligned, block_size_min);
 8018892:	290c      	cmp	r1, #12
 8018894:	460a      	mov	r2, r1
 8018896:	bf38      	it	cc
 8018898:	220c      	movcc	r2, #12
}
 801889a:	4610      	mov	r0, r2
 801889c:	bd08      	pop	{r3, pc}
	size_t adjust = 0;
 801889e:	4602      	mov	r2, r0
	return adjust;
 80188a0:	e7fb      	b.n	801889a <adjust_request_size+0x2e>
 80188a2:	bf00      	nop
 80188a4:	08029aeb 	.word	0x08029aeb
 80188a8:	08029e2c 	.word	0x08029e2c
 80188ac:	080299cc 	.word	0x080299cc

080188b0 <block_merge_next>:
{
 80188b0:	b570      	push	{r4, r5, r6, lr}
 80188b2:	4606      	mov	r6, r0
	block_header_t* next = block_next(block);
 80188b4:	4608      	mov	r0, r1
{
 80188b6:	460c      	mov	r4, r1
	block_header_t* next = block_next(block);
 80188b8:	f7ff fe18 	bl	80184ec <block_next>
	tlsf_assert(next && "next physical block can't be null");
 80188bc:	4605      	mov	r5, r0
 80188be:	b930      	cbnz	r0, 80188ce <block_merge_next+0x1e>
 80188c0:	4b13      	ldr	r3, [pc, #76]	; (8018910 <block_merge_next+0x60>)
 80188c2:	f240 21cd 	movw	r1, #717	; 0x2cd
 80188c6:	4a13      	ldr	r2, [pc, #76]	; (8018914 <block_merge_next+0x64>)
		tlsf_assert(!block_is_last(block) && "previous block can't be last");
 80188c8:	4813      	ldr	r0, [pc, #76]	; (8018918 <block_merge_next+0x68>)
 80188ca:	f00c f8c3 	bl	8024a54 <__assert_func>
	return tlsf_cast(int, block->size & block_header_free_bit);
 80188ce:	6843      	ldr	r3, [r0, #4]
	if (block_is_free(next))
 80188d0:	07db      	lsls	r3, r3, #31
 80188d2:	d51b      	bpl.n	801890c <block_merge_next+0x5c>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80188d4:	6863      	ldr	r3, [r4, #4]
		tlsf_assert(!block_is_last(block) && "previous block can't be last");
 80188d6:	f033 0303 	bics.w	r3, r3, #3
 80188da:	d104      	bne.n	80188e6 <block_merge_next+0x36>
 80188dc:	4b0f      	ldr	r3, [pc, #60]	; (801891c <block_merge_next+0x6c>)
 80188de:	f240 21d1 	movw	r1, #721	; 0x2d1
 80188e2:	4a0c      	ldr	r2, [pc, #48]	; (8018914 <block_merge_next+0x64>)
 80188e4:	e7f0      	b.n	80188c8 <block_merge_next+0x18>
		block_remove(control, next);
 80188e6:	4601      	mov	r1, r0
 80188e8:	4630      	mov	r0, r6
 80188ea:	f7ff ff45 	bl	8018778 <block_remove>
	return block_size(block) == 0;
 80188ee:	6862      	ldr	r2, [r4, #4]
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80188f0:	f032 0303 	bics.w	r3, r2, #3
 80188f4:	d101      	bne.n	80188fa <block_merge_next+0x4a>
 80188f6:	f7ff fea3 	bl	8018640 <block_absorb.part.0>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80188fa:	686b      	ldr	r3, [r5, #4]
	prev->size += block_size(block) + block_header_overhead;
 80188fc:	3204      	adds	r2, #4
	block_link_next(prev);
 80188fe:	4620      	mov	r0, r4
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018900:	f023 0303 	bic.w	r3, r3, #3
	prev->size += block_size(block) + block_header_overhead;
 8018904:	4413      	add	r3, r2
 8018906:	6063      	str	r3, [r4, #4]
	block_link_next(prev);
 8018908:	f7ff fe06 	bl	8018518 <block_link_next>
}
 801890c:	4620      	mov	r0, r4
 801890e:	bd70      	pop	{r4, r5, r6, pc}
 8018910:	08029ce5 	.word	0x08029ce5
 8018914:	08029e99 	.word	0x08029e99
 8018918:	080299cc 	.word	0x080299cc
 801891c:	08029d11 	.word	0x08029d11

08018920 <tlsf_walk_pool>:

void tlsf_walk_pool(pool_t pool, tlsf_walker walker, void* user)
{
 8018920:	b570      	push	{r4, r5, r6, lr}
	tlsf_walker pool_walker = walker ? walker : default_walker;
 8018922:	4d0c      	ldr	r5, [pc, #48]	; (8018954 <tlsf_walk_pool+0x34>)
{
 8018924:	4616      	mov	r6, r2
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018926:	1f04      	subs	r4, r0, #4
	tlsf_walker pool_walker = walker ? walker : default_walker;
 8018928:	2900      	cmp	r1, #0
 801892a:	bf18      	it	ne
 801892c:	460d      	movne	r5, r1
	block_header_t* block =
		offset_to_block(pool, -(int)block_header_overhead);

	while (block && !block_is_last(block))
 801892e:	b11c      	cbz	r4, 8018938 <tlsf_walk_pool+0x18>
	return block_size(block) == 0;
 8018930:	6860      	ldr	r0, [r4, #4]
	while (block && !block_is_last(block))
 8018932:	f030 0103 	bics.w	r1, r0, #3
 8018936:	d100      	bne.n	801893a <tlsf_walk_pool+0x1a>
			block_size(block),
			!block_is_free(block),
			user);
		block = block_next(block);
	}
}
 8018938:	bd70      	pop	{r4, r5, r6, pc}
		pool_walker(
 801893a:	43c0      	mvns	r0, r0
 801893c:	4633      	mov	r3, r6
 801893e:	f000 0201 	and.w	r2, r0, #1
 8018942:	f104 0008 	add.w	r0, r4, #8
 8018946:	47a8      	blx	r5
		block = block_next(block);
 8018948:	4620      	mov	r0, r4
 801894a:	f7ff fdcf 	bl	80184ec <block_next>
 801894e:	4604      	mov	r4, r0
 8018950:	e7ed      	b.n	801892e <tlsf_walk_pool+0xe>
 8018952:	bf00      	nop
 8018954:	080184eb 	.word	0x080184eb

08018958 <tlsf_add_pool>:
{
	return block_header_overhead;
}

pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes)
{
 8018958:	b538      	push	{r3, r4, r5, lr}
	block_header_t* block;
	block_header_t* next;

	const size_t pool_overhead = tlsf_pool_overhead();
	const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 801895a:	3a08      	subs	r2, #8

	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
 801895c:	f011 0303 	ands.w	r3, r1, #3
{
 8018960:	460c      	mov	r4, r1
	return x - (x & (align - 1));
 8018962:	f022 0203 	bic.w	r2, r2, #3
	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
 8018966:	d115      	bne.n	8018994 <tlsf_add_pool+0x3c>
		printf("tlsf_add_pool: Memory must be aligned by %u bytes.\n",
			(unsigned int)ALIGN_SIZE);
		return 0;
	}

	if (pool_bytes < block_size_min || pool_bytes > block_size_max)
 8018968:	f1a2 050c 	sub.w	r5, r2, #12
 801896c:	f647 71f4 	movw	r1, #32756	; 0x7ff4
 8018970:	428d      	cmp	r5, r1
 8018972:	d811      	bhi.n	8018998 <tlsf_add_pool+0x40>
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018974:	4625      	mov	r5, r4
	block->size &= ~block_header_prev_free_bit;
 8018976:	f042 0201 	orr.w	r2, r2, #1
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 801897a:	f855 3904 	ldr.w	r3, [r5], #-4
	*/
	block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
	block_set_size(block, pool_bytes);
	block_set_free(block);
	block_set_prev_used(block);
	block_insert(tlsf_cast(control_t*, tlsf), block);
 801897e:	4629      	mov	r1, r5
	block->size &= ~block_header_prev_free_bit;
 8018980:	606a      	str	r2, [r5, #4]
	block_insert(tlsf_cast(control_t*, tlsf), block);
 8018982:	f7ff fe8d 	bl	80186a0 <block_insert>

	/* Split the block to create a zero-size sentinel block. */
	next = block_link_next(block);
 8018986:	4628      	mov	r0, r5
 8018988:	f7ff fdc6 	bl	8018518 <block_link_next>
	block->size |= block_header_prev_free_bit;
 801898c:	2302      	movs	r3, #2
 801898e:	6043      	str	r3, [r0, #4]
	block_set_size(next, 0);
	block_set_used(next);
	block_set_prev_free(next);

	return mem;
}
 8018990:	4620      	mov	r0, r4
 8018992:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8018994:	2400      	movs	r4, #0
 8018996:	e7fb      	b.n	8018990 <tlsf_add_pool+0x38>
 8018998:	461c      	mov	r4, r3
 801899a:	e7f9      	b.n	8018990 <tlsf_add_pool+0x38>

0801899c <tlsf_create>:
	{
		return 0;
	}
#endif

	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
 801899c:	f010 0203 	ands.w	r2, r0, #3
{
 80189a0:	b530      	push	{r4, r5, lr}
	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
 80189a2:	d113      	bne.n	80189cc <tlsf_create+0x30>
	control->block_null.next_free = &control->block_null;
 80189a4:	f100 0114 	add.w	r1, r0, #20
 80189a8:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80189ac:	f500 6497 	add.w	r4, r0, #1208	; 0x4b8
	control->fl_bitmap = 0;
 80189b0:	6102      	str	r2, [r0, #16]
	control->block_null.prev_free = &control->block_null;
 80189b2:	e9c0 0002 	strd	r0, r0, [r0, #8]
		control->sl_bitmap[i] = 0;
 80189b6:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80189ba:	f841 2b04 	str.w	r2, [r1], #4
			control->blocks[i][j] = &control->block_null;
 80189be:	f843 0b04 	str.w	r0, [r3], #4
		for (j = 0; j < SL_INDEX_COUNT; ++j)
 80189c2:	42ab      	cmp	r3, r5
 80189c4:	d1fb      	bne.n	80189be <tlsf_create+0x22>
	for (i = 0; i < FL_INDEX_COUNT; ++i)
 80189c6:	429c      	cmp	r4, r3
 80189c8:	d1f5      	bne.n	80189b6 <tlsf_create+0x1a>
	}

	control_constructor(tlsf_cast(control_t*, mem));

	return tlsf_cast(tlsf_t, mem);
}
 80189ca:	bd30      	pop	{r4, r5, pc}
		return 0;
 80189cc:	2000      	movs	r0, #0
 80189ce:	e7fc      	b.n	80189ca <tlsf_create+0x2e>

080189d0 <tlsf_create_with_pool>:

tlsf_t tlsf_create_with_pool(void* mem, size_t bytes)
{
 80189d0:	b570      	push	{r4, r5, r6, lr}
 80189d2:	460e      	mov	r6, r1
 80189d4:	4605      	mov	r5, r0
	tlsf_t tlsf = tlsf_create(mem);
 80189d6:	f7ff ffe1 	bl	801899c <tlsf_create>
 80189da:	4604      	mov	r4, r0
	tlsf_add_pool(tlsf, (char*)mem + tlsf_size(), bytes - tlsf_size());
 80189dc:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
 80189e0:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
 80189e4:	f7ff ffb8 	bl	8018958 <tlsf_add_pool>
	return tlsf;
}
 80189e8:	4620      	mov	r0, r4
 80189ea:	bd70      	pop	{r4, r5, r6, pc}

080189ec <tlsf_get_pool>:
}

pool_t tlsf_get_pool(tlsf_t tlsf)
{
	return tlsf_cast(pool_t, (char*)tlsf + tlsf_size());
}
 80189ec:	f500 6097 	add.w	r0, r0, #1208	; 0x4b8
 80189f0:	4770      	bx	lr

080189f2 <tlsf_malloc>:

void* tlsf_malloc(tlsf_t tlsf, size_t size)
{
 80189f2:	b570      	push	{r4, r5, r6, lr}
 80189f4:	4606      	mov	r6, r0
	if (size)
 80189f6:	460c      	mov	r4, r1
 80189f8:	b141      	cbz	r1, 8018a0c <tlsf_malloc+0x1a>
	return (x + (align - 1)) & ~(align - 1);
 80189fa:	3403      	adds	r4, #3
 80189fc:	f024 0403 	bic.w	r4, r4, #3
		if (aligned < block_size_max) 
 8018a00:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8018a04:	d20b      	bcs.n	8018a1e <tlsf_malloc+0x2c>
			adjust = tlsf_max(aligned, block_size_min);
 8018a06:	2c0c      	cmp	r4, #12
 8018a08:	bf38      	it	cc
 8018a0a:	240c      	movcc	r4, #12
	control_t* control = tlsf_cast(control_t*, tlsf);
	const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
	block_header_t* block = block_locate_free(control, adjust);
 8018a0c:	4621      	mov	r1, r4
 8018a0e:	4630      	mov	r0, r6
 8018a10:	f7ff fec4 	bl	801879c <block_locate_free>
	if (block)
 8018a14:	4605      	mov	r5, r0
 8018a16:	b168      	cbz	r0, 8018a34 <tlsf_malloc+0x42>
		tlsf_assert(size && "size must be non-zero");
 8018a18:	b91c      	cbnz	r4, 8018a22 <tlsf_malloc+0x30>
 8018a1a:	f7ff fe1f 	bl	801865c <block_prepare_used.part.0>
	size_t adjust = 0;
 8018a1e:	2400      	movs	r4, #0
 8018a20:	e7f4      	b.n	8018a0c <tlsf_malloc+0x1a>
		block_trim_free(control, block, size);
 8018a22:	4601      	mov	r1, r0
 8018a24:	4622      	mov	r2, r4
 8018a26:	4630      	mov	r0, r6
 8018a28:	f7ff fe7a 	bl	8018720 <block_trim_free>
		block_mark_as_used(block);
 8018a2c:	4628      	mov	r0, r5
	return tlsf_cast(void*,
 8018a2e:	3508      	adds	r5, #8
		block_mark_as_used(block);
 8018a30:	f7ff fdc2 	bl	80185b8 <block_mark_as_used>
	return block_prepare_used(control, block, adjust);
}
 8018a34:	4628      	mov	r0, r5
 8018a36:	bd70      	pop	{r4, r5, r6, pc}

08018a38 <tlsf_free>:

	return block_prepare_used(control, block, adjust);
}

void tlsf_free(tlsf_t tlsf, void* ptr)
{
 8018a38:	b570      	push	{r4, r5, r6, lr}
 8018a3a:	4606      	mov	r6, r0
	/* Don't attempt to free a NULL pointer. */
	if (ptr)
 8018a3c:	460d      	mov	r5, r1
 8018a3e:	2900      	cmp	r1, #0
 8018a40:	d049      	beq.n	8018ad6 <tlsf_free+0x9e>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
	return tlsf_cast(block_header_t*,
 8018a46:	f1a1 0408 	sub.w	r4, r1, #8
	{
		control_t* control = tlsf_cast(control_t*, tlsf);
		block_header_t* block = block_from_ptr(ptr);
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018a4a:	07d9      	lsls	r1, r3, #31
 8018a4c:	d506      	bpl.n	8018a5c <tlsf_free+0x24>
 8018a4e:	4b22      	ldr	r3, [pc, #136]	; (8018ad8 <tlsf_free+0xa0>)
 8018a50:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8018a54:	4a21      	ldr	r2, [pc, #132]	; (8018adc <tlsf_free+0xa4>)
		tlsf_assert(prev && "prev physical block can't be null");
 8018a56:	4822      	ldr	r0, [pc, #136]	; (8018ae0 <tlsf_free+0xa8>)
 8018a58:	f00b fffc 	bl	8024a54 <__assert_func>
	block_header_t* next = block_link_next(block);
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	f7ff fd5b 	bl	8018518 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018a62:	6843      	ldr	r3, [r0, #4]
 8018a64:	f043 0302 	orr.w	r3, r3, #2
 8018a68:	6043      	str	r3, [r0, #4]
	block->size |= block_header_free_bit;
 8018a6a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8018a6e:	f043 0301 	orr.w	r3, r3, #1
	if (block_is_prev_free(block))
 8018a72:	079a      	lsls	r2, r3, #30
	block->size |= block_header_free_bit;
 8018a74:	f845 3c04 	str.w	r3, [r5, #-4]
	if (block_is_prev_free(block))
 8018a78:	d523      	bpl.n	8018ac2 <tlsf_free+0x8a>
	return block->prev_phys_block;
 8018a7a:	f855 4c08 	ldr.w	r4, [r5, #-8]
		tlsf_assert(prev && "prev physical block can't be null");
 8018a7e:	b924      	cbnz	r4, 8018a8a <tlsf_free+0x52>
 8018a80:	4b18      	ldr	r3, [pc, #96]	; (8018ae4 <tlsf_free+0xac>)
 8018a82:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8018a86:	4a18      	ldr	r2, [pc, #96]	; (8018ae8 <tlsf_free+0xb0>)
 8018a88:	e7e5      	b.n	8018a56 <tlsf_free+0x1e>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018a8a:	6863      	ldr	r3, [r4, #4]
		tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8018a8c:	07db      	lsls	r3, r3, #31
 8018a8e:	d404      	bmi.n	8018a9a <tlsf_free+0x62>
 8018a90:	4b16      	ldr	r3, [pc, #88]	; (8018aec <tlsf_free+0xb4>)
 8018a92:	f240 21c1 	movw	r1, #705	; 0x2c1
 8018a96:	4a14      	ldr	r2, [pc, #80]	; (8018ae8 <tlsf_free+0xb0>)
 8018a98:	e7dd      	b.n	8018a56 <tlsf_free+0x1e>
		block_remove(control, prev);
 8018a9a:	4621      	mov	r1, r4
 8018a9c:	4630      	mov	r0, r6
 8018a9e:	f7ff fe6b 	bl	8018778 <block_remove>
	return block_size(block) == 0;
 8018aa2:	6862      	ldr	r2, [r4, #4]
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8018aa4:	f032 0303 	bics.w	r3, r2, #3
 8018aa8:	d101      	bne.n	8018aae <tlsf_free+0x76>
 8018aaa:	f7ff fdc9 	bl	8018640 <block_absorb.part.0>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018aae:	f855 3c04 	ldr.w	r3, [r5, #-4]
	block_link_next(prev);
 8018ab2:	4620      	mov	r0, r4
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018ab4:	f023 0303 	bic.w	r3, r3, #3
	prev->size += block_size(block) + block_header_overhead;
 8018ab8:	4413      	add	r3, r2
 8018aba:	3304      	adds	r3, #4
 8018abc:	6063      	str	r3, [r4, #4]
	block_link_next(prev);
 8018abe:	f7ff fd2b 	bl	8018518 <block_link_next>
		block_mark_as_free(block);
		block = block_merge_prev(control, block);
		block = block_merge_next(control, block);
 8018ac2:	4621      	mov	r1, r4
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	f7ff fef3 	bl	80188b0 <block_merge_next>
 8018aca:	4601      	mov	r1, r0
		block_insert(control, block);
 8018acc:	4630      	mov	r0, r6
	}
}
 8018ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		block_insert(control, block);
 8018ad2:	f7ff bde5 	b.w	80186a0 <block_insert>
}
 8018ad6:	bd70      	pop	{r4, r5, r6, pc}
 8018ad8:	08029d49 	.word	0x08029d49
 8018adc:	08029eef 	.word	0x08029eef
 8018ae0:	080299cc 	.word	0x080299cc
 8018ae4:	08029d81 	.word	0x08029d81
 8018ae8:	08029e88 	.word	0x08029e88
 8018aec:	08029dad 	.word	0x08029dad

08018af0 <tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void* tlsf_realloc(tlsf_t tlsf, void* ptr, size_t size)
{
 8018af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af4:	4607      	mov	r7, r0
 8018af6:	4615      	mov	r5, r2
	control_t* control = tlsf_cast(control_t*, tlsf);
	void* p = 0;

	/* Zero-size requests are treated as free. */
	if (ptr && size == 0)
 8018af8:	460c      	mov	r4, r1
 8018afa:	b131      	cbz	r1, 8018b0a <tlsf_realloc+0x1a>
 8018afc:	b952      	cbnz	r2, 8018b14 <tlsf_realloc+0x24>
	void* p = 0;
 8018afe:	462e      	mov	r6, r5
	{
		tlsf_free(tlsf, ptr);
 8018b00:	f7ff ff9a 	bl	8018a38 <tlsf_free>
			p = ptr;
		}
	}

	return p;
}
 8018b04:	4630      	mov	r0, r6
 8018b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		p = tlsf_malloc(tlsf, size);
 8018b0a:	4611      	mov	r1, r2
}
 8018b0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		p = tlsf_malloc(tlsf, size);
 8018b10:	f7ff bf6f 	b.w	80189f2 <tlsf_malloc>
	return tlsf_cast(block_header_t*,
 8018b14:	f1a1 0908 	sub.w	r9, r1, #8
		block_header_t* next = block_next(block);
 8018b18:	4648      	mov	r0, r9
 8018b1a:	f7ff fce7 	bl	80184ec <block_next>
		const size_t cursize = block_size(block);
 8018b1e:	f854 bc04 	ldr.w	fp, [r4, #-4]
		block_header_t* next = block_next(block);
 8018b22:	4682      	mov	sl, r0
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8018b24:	2104      	movs	r1, #4
 8018b26:	4628      	mov	r0, r5
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018b28:	f02b 0803 	bic.w	r8, fp, #3
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8018b2c:	f7ff fe9e 	bl	801886c <adjust_request_size>
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018b30:	f01b 0f01 	tst.w	fp, #1
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8018b34:	4606      	mov	r6, r0
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018b36:	d006      	beq.n	8018b46 <tlsf_realloc+0x56>
 8018b38:	4b27      	ldr	r3, [pc, #156]	; (8018bd8 <tlsf_realloc+0xe8>)
 8018b3a:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8018b3e:	4a27      	ldr	r2, [pc, #156]	; (8018bdc <tlsf_realloc+0xec>)
	tlsf_assert(!block_is_free(block) && "block must be used");
 8018b40:	4827      	ldr	r0, [pc, #156]	; (8018be0 <tlsf_realloc+0xf0>)
 8018b42:	f00b ff87 	bl	8024a54 <__assert_func>
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 8018b46:	4580      	cmp	r8, r0
 8018b48:	d224      	bcs.n	8018b94 <tlsf_realloc+0xa4>
		const size_t combined = cursize + block_size(next) + block_header_overhead;
 8018b4a:	f8da 3004 	ldr.w	r3, [sl, #4]
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 8018b4e:	07d9      	lsls	r1, r3, #31
 8018b50:	d506      	bpl.n	8018b60 <tlsf_realloc+0x70>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018b52:	f023 0303 	bic.w	r3, r3, #3
		const size_t combined = cursize + block_size(next) + block_header_overhead;
 8018b56:	f108 0204 	add.w	r2, r8, #4
 8018b5a:	4413      	add	r3, r2
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 8018b5c:	4283      	cmp	r3, r0
 8018b5e:	d212      	bcs.n	8018b86 <tlsf_realloc+0x96>
			p = tlsf_malloc(tlsf, size);
 8018b60:	4629      	mov	r1, r5
 8018b62:	4638      	mov	r0, r7
 8018b64:	f7ff ff45 	bl	80189f2 <tlsf_malloc>
			if (p)
 8018b68:	4606      	mov	r6, r0
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d0ca      	beq.n	8018b04 <tlsf_realloc+0x14>
				lv_memcpy(p, ptr, minsize);
 8018b6e:	4545      	cmp	r5, r8
 8018b70:	462a      	mov	r2, r5
 8018b72:	4621      	mov	r1, r4
 8018b74:	bf28      	it	cs
 8018b76:	4642      	movcs	r2, r8
 8018b78:	f7fe fc3e 	bl	80173f8 <lv_memcpy>
				tlsf_free(tlsf, ptr);
 8018b7c:	4621      	mov	r1, r4
 8018b7e:	4638      	mov	r0, r7
 8018b80:	f7ff ff5a 	bl	8018a38 <tlsf_free>
 8018b84:	e7be      	b.n	8018b04 <tlsf_realloc+0x14>
				block_merge_next(control, block);
 8018b86:	4649      	mov	r1, r9
 8018b88:	4638      	mov	r0, r7
 8018b8a:	f7ff fe91 	bl	80188b0 <block_merge_next>
				block_mark_as_used(block);
 8018b8e:	4648      	mov	r0, r9
 8018b90:	f7ff fd12 	bl	80185b8 <block_mark_as_used>
	tlsf_assert(!block_is_free(block) && "block must be used");
 8018b94:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018b98:	07da      	lsls	r2, r3, #31
 8018b9a:	d504      	bpl.n	8018ba6 <tlsf_realloc+0xb6>
 8018b9c:	4b11      	ldr	r3, [pc, #68]	; (8018be4 <tlsf_realloc+0xf4>)
 8018b9e:	f240 21e9 	movw	r1, #745	; 0x2e9
 8018ba2:	4a11      	ldr	r2, [pc, #68]	; (8018be8 <tlsf_realloc+0xf8>)
 8018ba4:	e7cc      	b.n	8018b40 <tlsf_realloc+0x50>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018ba6:	f023 0303 	bic.w	r3, r3, #3
	return block_size(block) >= sizeof(block_header_t) + size;
 8018baa:	f106 0210 	add.w	r2, r6, #16
	if (block_can_split(block, size))
 8018bae:	4293      	cmp	r3, r2
 8018bb0:	d30f      	bcc.n	8018bd2 <tlsf_realloc+0xe2>
		block_header_t* remaining_block = block_split(block, size);
 8018bb2:	4631      	mov	r1, r6
 8018bb4:	4648      	mov	r0, r9
 8018bb6:	f7ff fcb5 	bl	8018524 <block_split>
	block->size &= ~block_header_prev_free_bit;
 8018bba:	6843      	ldr	r3, [r0, #4]
		block_header_t* remaining_block = block_split(block, size);
 8018bbc:	4601      	mov	r1, r0
	block->size &= ~block_header_prev_free_bit;
 8018bbe:	f023 0302 	bic.w	r3, r3, #2
 8018bc2:	6043      	str	r3, [r0, #4]
		remaining_block = block_merge_next(control, remaining_block);
 8018bc4:	4638      	mov	r0, r7
 8018bc6:	f7ff fe73 	bl	80188b0 <block_merge_next>
 8018bca:	4601      	mov	r1, r0
		block_insert(control, remaining_block);
 8018bcc:	4638      	mov	r0, r7
 8018bce:	f7ff fd67 	bl	80186a0 <block_insert>
 8018bd2:	4626      	mov	r6, r4
	return p;
 8018bd4:	e796      	b.n	8018b04 <tlsf_realloc+0x14>
 8018bd6:	bf00      	nop
 8018bd8:	08029d49 	.word	0x08029d49
 8018bdc:	08029ef9 	.word	0x08029ef9
 8018be0:	080299cc 	.word	0x080299cc
 8018be4:	08029df3 	.word	0x08029df3
 8018be8:	08029eba 	.word	0x08029eba

08018bec <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 8018bec:	f990 2000 	ldrsb.w	r2, [r0]
 8018bf0:	7803      	ldrb	r3, [r0, #0]
 8018bf2:	2a00      	cmp	r2, #0
 8018bf4:	da0e      	bge.n	8018c14 <lv_txt_utf8_size+0x28>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 8018bf6:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8018bfa:	2ac0      	cmp	r2, #192	; 0xc0
 8018bfc:	d00c      	beq.n	8018c18 <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 8018bfe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8018c02:	2ae0      	cmp	r2, #224	; 0xe0
 8018c04:	d00a      	beq.n	8018c1c <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 8018c06:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8018c0a:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 8018c0c:	bf14      	ite	ne
 8018c0e:	2000      	movne	r0, #0
 8018c10:	2004      	moveq	r0, #4
 8018c12:	4770      	bx	lr
        return 1;
 8018c14:	2001      	movs	r0, #1
 8018c16:	4770      	bx	lr
        return 2;
 8018c18:	2002      	movs	r0, #2
 8018c1a:	4770      	bx	lr
        return 3;
 8018c1c:	2003      	movs	r0, #3
    return 0; /*If the char was invalid tell it's 1 byte long*/
}
 8018c1e:	4770      	bx	lr

08018c20 <lv_txt_utf8_next>:
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8018c20:	2300      	movs	r3, #0
{
 8018c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 8018c24:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8018c26:	b901      	cbnz	r1, 8018c2a <lv_txt_utf8_next+0xa>
 8018c28:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8018c2a:	680a      	ldr	r2, [r1, #0]
 8018c2c:	5685      	ldrsb	r5, [r0, r2]
 8018c2e:	1c54      	adds	r4, r2, #1
 8018c30:	5c83      	ldrb	r3, [r0, r2]
 8018c32:	2d00      	cmp	r5, #0
 8018c34:	db03      	blt.n	8018c3e <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 8018c36:	4618      	mov	r0, r3
        (*i)++;
 8018c38:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8018c3a:	b002      	add	sp, #8
 8018c3c:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 8018c3e:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 8018c42:	2dc0      	cmp	r5, #192	; 0xc0
 8018c44:	d110      	bne.n	8018c68 <lv_txt_utf8_next+0x48>
            (*i)++;
 8018c46:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018c48:	5d00      	ldrb	r0, [r0, r4]
 8018c4a:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8018c4e:	2c80      	cmp	r4, #128	; 0x80
 8018c50:	d001      	beq.n	8018c56 <lv_txt_utf8_next+0x36>
    uint32_t result = 0;
 8018c52:	2000      	movs	r0, #0
 8018c54:	e7f1      	b.n	8018c3a <lv_txt_utf8_next+0x1a>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8018c56:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 8018c58:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 8018c5c:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8018c5e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8018c62:	4418      	add	r0, r3
            (*i)++;
 8018c64:	600a      	str	r2, [r1, #0]
 8018c66:	e7e8      	b.n	8018c3a <lv_txt_utf8_next+0x1a>
        else if((txt[*i] & 0xF0) == 0xE0) {
 8018c68:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 8018c6c:	2de0      	cmp	r5, #224	; 0xe0
 8018c6e:	d117      	bne.n	8018ca0 <lv_txt_utf8_next+0x80>
            (*i)++;
 8018c70:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018c72:	5d04      	ldrb	r4, [r0, r4]
 8018c74:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8018c78:	2d80      	cmp	r5, #128	; 0x80
 8018c7a:	d1ea      	bne.n	8018c52 <lv_txt_utf8_next+0x32>
            (*i)++;
 8018c7c:	1c95      	adds	r5, r2, #2
 8018c7e:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018c80:	5d45      	ldrb	r5, [r0, r5]
 8018c82:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8018c86:	2880      	cmp	r0, #128	; 0x80
 8018c88:	d1e3      	bne.n	8018c52 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8018c8a:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
 8018c8c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8018c90:	01a3      	lsls	r3, r4, #6
            (*i)++;
 8018c92:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8018c94:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8018c96:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8018c9a:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
 8018c9c:	4418      	add	r0, r3
            (*i)++;
 8018c9e:	e7e1      	b.n	8018c64 <lv_txt_utf8_next+0x44>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8018ca0:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
 8018ca4:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 8018ca6:	2df0      	cmp	r5, #240	; 0xf0
 8018ca8:	d1d3      	bne.n	8018c52 <lv_txt_utf8_next+0x32>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018caa:	5d04      	ldrb	r4, [r0, r4]
 8018cac:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8018cb0:	2d80      	cmp	r5, #128	; 0x80
 8018cb2:	d1ce      	bne.n	8018c52 <lv_txt_utf8_next+0x32>
            (*i)++;
 8018cb4:	1c95      	adds	r5, r2, #2
 8018cb6:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018cb8:	5d45      	ldrb	r5, [r0, r5]
 8018cba:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8018cbe:	2e80      	cmp	r6, #128	; 0x80
 8018cc0:	d1c7      	bne.n	8018c52 <lv_txt_utf8_next+0x32>
            (*i)++;
 8018cc2:	1cd6      	adds	r6, r2, #3
 8018cc4:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8018cc6:	5d86      	ldrb	r6, [r0, r6]
 8018cc8:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 8018ccc:	2880      	cmp	r0, #128	; 0x80
 8018cce:	d1c0      	bne.n	8018c52 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8018cd0:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
 8018cd2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8018cd6:	0320      	lsls	r0, r4, #12
            (*i)++;
 8018cd8:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8018cda:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8018cde:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
 8018ce2:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8018ce4:	01a8      	lsls	r0, r5, #6
 8018ce6:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8018cea:	4430      	add	r0, r6
 8018cec:	4418      	add	r0, r3
            (*i)++;
 8018cee:	e7b9      	b.n	8018c64 <lv_txt_utf8_next+0x44>

08018cf0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8018cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8018cf4:	2400      	movs	r4, #0
{
 8018cf6:	4605      	mov	r5, r0
 8018cf8:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8018cfa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8018d24 <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8018cfe:	4626      	mov	r6, r4
 8018d00:	42be      	cmp	r6, r7
 8018d02:	d002      	beq.n	8018d0a <lv_txt_utf8_get_byte_id+0x1a>
 8018d04:	5d2b      	ldrb	r3, [r5, r4]
 8018d06:	1928      	adds	r0, r5, r4
 8018d08:	b913      	cbnz	r3, 8018d10 <lv_txt_utf8_get_byte_id+0x20>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8018d10:	f8d8 3000 	ldr.w	r3, [r8]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8018d14:	3601      	adds	r6, #1
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8018d16:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
 8018d18:	2801      	cmp	r0, #1
 8018d1a:	bf38      	it	cc
 8018d1c:	2001      	movcc	r0, #1
 8018d1e:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8018d22:	e7ed      	b.n	8018d00 <lv_txt_utf8_get_byte_id+0x10>
 8018d24:	20000048 	.word	0x20000048

08018d28 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8018d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 8018d2a:	2400      	movs	r4, #0
{
 8018d2c:	4606      	mov	r6, r0
 8018d2e:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8018d30:	4f06      	ldr	r7, [pc, #24]	; (8018d4c <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 8018d32:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 8018d34:	9b01      	ldr	r3, [sp, #4]
 8018d36:	42ab      	cmp	r3, r5
 8018d38:	d302      	bcc.n	8018d40 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	b003      	add	sp, #12
 8018d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	a901      	add	r1, sp, #4
 8018d44:	4630      	mov	r0, r6
        char_cnt++;
 8018d46:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8018d48:	4798      	blx	r3
        char_cnt++;
 8018d4a:	e7f3      	b.n	8018d34 <lv_txt_utf8_get_char_id+0xc>
 8018d4c:	20000040 	.word	0x20000040

08018d50 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8018d50:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 8018d52:	2400      	movs	r4, #0
{
 8018d54:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 8018d56:	4e07      	ldr	r6, [pc, #28]	; (8018d74 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 8018d58:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 8018d5a:	9b01      	ldr	r3, [sp, #4]
 8018d5c:	5ceb      	ldrb	r3, [r5, r3]
 8018d5e:	b913      	cbnz	r3, 8018d66 <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 8018d60:	4620      	mov	r0, r4
 8018d62:	b002      	add	sp, #8
 8018d64:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 8018d66:	6833      	ldr	r3, [r6, #0]
 8018d68:	a901      	add	r1, sp, #4
 8018d6a:	4628      	mov	r0, r5
        len++;
 8018d6c:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
 8018d6e:	4798      	blx	r3
        len++;
 8018d70:	e7f3      	b.n	8018d5a <lv_txt_utf8_get_length+0xa>
 8018d72:	bf00      	nop
 8018d74:	20000040 	.word	0x20000040

08018d78 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8018d78:	287f      	cmp	r0, #127	; 0x7f
{
 8018d7a:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 8018d7c:	d911      	bls.n	8018da2 <lv_txt_unicode_to_utf8+0x2a>
    if(letter_uni < 0x0800) {
 8018d7e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8018d82:	d210      	bcs.n	8018da6 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8018d84:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018d86:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8018d8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018d8e:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8018d92:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
 8018d96:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018d98:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 8018d9c:	f8ad 3006 	strh.w	r3, [sp, #6]
    return *res_p;
 8018da0:	9801      	ldr	r0, [sp, #4]
}
 8018da2:	b002      	add	sp, #8
 8018da4:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8018da6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8018daa:	d214      	bcs.n	8018dd6 <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8018dac:	0b03      	lsrs	r3, r0, #12
 8018dae:	f063 031f 	orn	r3, r3, #31
 8018db2:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8018db6:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018dba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8018dbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018dc2:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8018dc6:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
 8018dca:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018dcc:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8018dd0:	f88d 3007 	strb.w	r3, [sp, #7]
 8018dd4:	e7e4      	b.n	8018da0 <lv_txt_unicode_to_utf8+0x28>
    else if(letter_uni < 0x110000) {
 8018dd6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8018dda:	d2e1      	bcs.n	8018da0 <lv_txt_unicode_to_utf8+0x28>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8018ddc:	0c83      	lsrs	r3, r0, #18
 8018dde:	f063 030f 	orn	r3, r3, #15
 8018de2:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8018de6:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8018dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018dee:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8018df2:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018df6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8018dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018dfe:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8018e02:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8018e06:	f88d 0007 	strb.w	r0, [sp, #7]
 8018e0a:	e7c9      	b.n	8018da0 <lv_txt_unicode_to_utf8+0x28>

08018e0c <lv_txt_utf8_prev>:
    (*i)--;
 8018e0c:	680b      	ldr	r3, [r1, #0]
{
 8018e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 8018e10:	3b01      	subs	r3, #1
{
 8018e12:	4606      	mov	r6, r0
 8018e14:	460c      	mov	r4, r1
    (*i)--;
 8018e16:	2504      	movs	r5, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8018e18:	4f0c      	ldr	r7, [pc, #48]	; (8018e4c <lv_txt_utf8_prev+0x40>)
    (*i)--;
 8018e1a:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8018e1c:	6820      	ldr	r0, [r4, #0]
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	4430      	add	r0, r6
 8018e22:	4798      	blx	r3
        if(c_size == 0) {
 8018e24:	6823      	ldr	r3, [r4, #0]
 8018e26:	b948      	cbnz	r0, 8018e3c <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 8018e28:	b12b      	cbz	r3, 8018e36 <lv_txt_utf8_prev+0x2a>
                (*i)--;
 8018e2a:	3d01      	subs	r5, #1
 8018e2c:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8018e2e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 8018e32:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8018e34:	d1f2      	bne.n	8018e1c <lv_txt_utf8_prev+0x10>
 8018e36:	2000      	movs	r0, #0
}
 8018e38:	b003      	add	sp, #12
 8018e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8018e3c:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8018e3e:	a901      	add	r1, sp, #4
 8018e40:	4b03      	ldr	r3, [pc, #12]	; (8018e50 <lv_txt_utf8_prev+0x44>)
 8018e42:	4630      	mov	r0, r6
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	4798      	blx	r3
    return letter;
 8018e48:	e7f6      	b.n	8018e38 <lv_txt_utf8_prev+0x2c>
 8018e4a:	bf00      	nop
 8018e4c:	20000048 	.word	0x20000048
 8018e50:	20000040 	.word	0x20000040

08018e54 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8018e54:	2923      	cmp	r1, #35	; 0x23
{
 8018e56:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8018e58:	d117      	bne.n	8018e8a <_lv_txt_is_cmd+0x36>
 8018e5a:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8018e5c:	b91b      	cbnz	r3, 8018e66 <_lv_txt_is_cmd+0x12>
            *state = LV_TEXT_CMD_STATE_PAR;
 8018e5e:	2301      	movs	r3, #1
 8018e60:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8018e62:	2001      	movs	r0, #1
 8018e64:	e004      	b.n	8018e70 <_lv_txt_is_cmd+0x1c>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	f04f 0000 	mov.w	r0, #0
 8018e6c:	d109      	bne.n	8018e82 <_lv_txt_is_cmd+0x2e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8018e6e:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8018e70:	7813      	ldrb	r3, [r2, #0]
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	d104      	bne.n	8018e80 <_lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8018e76:	2920      	cmp	r1, #32
        ret = true;
 8018e78:	4618      	mov	r0, r3
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8018e7a:	bf04      	itt	eq
 8018e7c:	2102      	moveq	r1, #2
 8018e7e:	7011      	strbeq	r1, [r2, #0]
}
 8018e80:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8018e82:	2b02      	cmp	r3, #2
 8018e84:	d1f4      	bne.n	8018e70 <_lv_txt_is_cmd+0x1c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8018e86:	7010      	strb	r0, [r2, #0]
 8018e88:	e7eb      	b.n	8018e62 <_lv_txt_is_cmd+0xe>
    bool ret = false;
 8018e8a:	2000      	movs	r0, #0
 8018e8c:	e7f0      	b.n	8018e70 <_lv_txt_is_cmd+0x1c>
	...

08018e90 <_lv_txt_get_next_line>:
{
 8018e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e94:	b08f      	sub	sp, #60	; 0x3c
 8018e96:	4699      	mov	r9, r3
    if(txt == NULL) return 0;
 8018e98:	4607      	mov	r7, r0
{
 8018e9a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8018e9e:	9102      	str	r1, [sp, #8]
 8018ea0:	9204      	str	r2, [sp, #16]
 8018ea2:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 8018ea4:	b190      	cbz	r0, 8018ecc <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
 8018ea6:	2900      	cmp	r1, #0
 8018ea8:	f000 80cb 	beq.w	8019042 <_lv_txt_get_next_line+0x1b2>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8018eac:	9b03      	ldr	r3, [sp, #12]
 8018eae:	f013 0306 	ands.w	r3, r3, #6
 8018eb2:	d00e      	beq.n	8018ed2 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	e000      	b.n	8018eba <_lv_txt_get_next_line+0x2a>
 8018eb8:	3001      	adds	r0, #1
 8018eba:	5c3b      	ldrb	r3, [r7, r0]
 8018ebc:	2b0a      	cmp	r3, #10
 8018ebe:	f000 80c2 	beq.w	8019046 <_lv_txt_get_next_line+0x1b6>
 8018ec2:	2b0d      	cmp	r3, #13
 8018ec4:	f000 80bf 	beq.w	8019046 <_lv_txt_get_next_line+0x1b6>
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d1f5      	bne.n	8018eb8 <_lv_txt_get_next_line+0x28>
}
 8018ecc:	b00f      	add	sp, #60	; 0x3c
 8018ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8018ed2:	9a03      	ldr	r2, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8018ed4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8018ed8:	f012 0202 	ands.w	r2, r2, #2
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8018edc:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8018ede:	bf18      	it	ne
 8018ee0:	f44f 49c0 	movne.w	r9, #24576	; 0x6000
 8018ee4:	9205      	str	r2, [sp, #20]
    while(txt[i] != '\0' && max_width > 0) {
 8018ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ee8:	eb07 0a03 	add.w	sl, r7, r3
 8018eec:	9300      	str	r3, [sp, #0]
 8018eee:	5cfb      	ldrb	r3, [r7, r3]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f000 808d 	beq.w	8019010 <_lv_txt_get_next_line+0x180>
 8018ef6:	f1b9 0f00 	cmp.w	r9, #0
 8018efa:	f340 8089 	ble.w	8019010 <_lv_txt_get_next_line+0x180>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8018efe:	9b05      	ldr	r3, [sp, #20]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8018f00:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 8018f02:	a90c      	add	r1, sp, #48	; 0x30
 8018f04:	4650      	mov	r0, sl
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8018f06:	2b00      	cmp	r3, #0
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8018f08:	f04f 3bff 	mov.w	fp, #4294967295
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8018f0c:	4625      	mov	r5, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8018f0e:	4626      	mov	r6, r4
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8018f10:	bf0c      	ite	eq
 8018f12:	464b      	moveq	r3, r9
 8018f14:	f44f 43c0 	movne.w	r3, #24576	; 0x6000
 8018f18:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8018f1a:	4b4c      	ldr	r3, [pc, #304]	; (801904c <_lv_txt_get_next_line+0x1bc>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8018f1c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 8018f20:	681a      	ldr	r2, [r3, #0]
 8018f22:	4790      	blx	r2
    i_next_next = i_next;
 8018f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 8018f26:	4680      	mov	r8, r0
    uint32_t letter_next = 0; /*Letter at i_next*/
 8018f28:	4622      	mov	r2, r4
    i_next_next = i_next;
 8018f2a:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8018f2c:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8018f2e:	9401      	str	r4, [sp, #4]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8018f30:	f003 0301 	and.w	r3, r3, #1
 8018f34:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
 8018f36:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8018f3a:	b949      	cbnz	r1, 8018f50 <_lv_txt_get_next_line+0xc0>
    if(break_index == NO_BREAK_FOUND) {
 8018f3c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8018f40:	d052      	beq.n	8018fe8 <_lv_txt_get_next_line+0x158>
    if(force) return break_index;
 8018f42:	9b00      	ldr	r3, [sp, #0]
 8018f44:	465e      	mov	r6, fp
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d056      	beq.n	8018ff8 <_lv_txt_get_next_line+0x168>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8018f4a:	2400      	movs	r4, #0
    return 0;
 8018f4c:	4626      	mov	r6, r4
 8018f4e:	e053      	b.n	8018ff8 <_lv_txt_get_next_line+0x168>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8018f50:	4b3e      	ldr	r3, [pc, #248]	; (801904c <_lv_txt_get_next_line+0x1bc>)
 8018f52:	a90d      	add	r1, sp, #52	; 0x34
 8018f54:	4650      	mov	r0, sl
 8018f56:	681a      	ldr	r2, [r3, #0]
 8018f58:	4790      	blx	r2
        word_len++;
 8018f5a:	9b01      	ldr	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8018f5c:	4602      	mov	r2, r0
        word_len++;
 8018f5e:	3301      	adds	r3, #1
 8018f60:	9306      	str	r3, [sp, #24]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8018f62:	9b08      	ldr	r3, [sp, #32]
 8018f64:	b173      	cbz	r3, 8018f84 <_lv_txt_get_next_line+0xf4>
 8018f66:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8018f68:	4641      	mov	r1, r8
 8018f6a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 8018f6e:	f7ff ff71 	bl	8018e54 <_lv_txt_is_cmd>
 8018f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f74:	b130      	cbz	r0, 8018f84 <_lv_txt_get_next_line+0xf4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8018f76:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8018f78:	4690      	mov	r8, r2
        i_next = i_next_next;
 8018f7a:	e9dd 610c 	ldrd	r6, r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8018f7e:	9301      	str	r3, [sp, #4]
        i_next = i_next_next;
 8018f80:	910c      	str	r1, [sp, #48]	; 0x30
        letter = letter_next;
 8018f82:	e7d8      	b.n	8018f36 <_lv_txt_get_next_line+0xa6>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8018f84:	4641      	mov	r1, r8
 8018f86:	9802      	ldr	r0, [sp, #8]
 8018f88:	9209      	str	r2, [sp, #36]	; 0x24
 8018f8a:	f7fd f8c3 	bl	8016114 <lv_font_get_glyph_width>
        cur_w += letter_w;
 8018f8e:	4405      	add	r5, r0
        if(letter_w > 0) {
 8018f90:	b200      	sxth	r0, r0
 8018f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f94:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8018f96:	b2ad      	uxth	r5, r5
            cur_w += letter_space;
 8018f98:	bfc2      	ittt	gt
 8018f9a:	9b04      	ldrgt	r3, [sp, #16]
 8018f9c:	18ed      	addgt	r5, r5, r3
 8018f9e:	b2ad      	uxthgt	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8018fa0:	f1bb 3fff 	cmp.w	fp, #4294967295
 8018fa4:	b22d      	sxth	r5, r5
 8018fa6:	d105      	bne.n	8018fb4 <_lv_txt_get_next_line+0x124>
 8018fa8:	9b04      	ldr	r3, [sp, #16]
 8018faa:	1ae9      	subs	r1, r5, r3
 8018fac:	9b07      	ldr	r3, [sp, #28]
 8018fae:	4299      	cmp	r1, r3
 8018fb0:	bfc8      	it	gt
 8018fb2:	46b3      	movgt	fp, r6
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8018fb4:	f1b8 0f0a 	cmp.w	r8, #10
 8018fb8:	d010      	beq.n	8018fdc <_lv_txt_get_next_line+0x14c>
 8018fba:	f1b8 0f0d 	cmp.w	r8, #13
 8018fbe:	d00d      	beq.n	8018fdc <_lv_txt_get_next_line+0x14c>
 8018fc0:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8018fc2:	b2c8      	uxtb	r0, r1
 8018fc4:	4b22      	ldr	r3, [pc, #136]	; (8019050 <_lv_txt_get_next_line+0x1c0>)
 8018fc6:	5c18      	ldrb	r0, [r3, r0]
 8018fc8:	b920      	cbnz	r0, 8018fd4 <_lv_txt_get_next_line+0x144>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8018fca:	f1bb 3fff 	cmp.w	fp, #4294967295
 8018fce:	bf08      	it	eq
 8018fd0:	462c      	moveq	r4, r5
 8018fd2:	e7d0      	b.n	8018f76 <_lv_txt_get_next_line+0xe6>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8018fd4:	4580      	cmp	r8, r0
 8018fd6:	f101 0101 	add.w	r1, r1, #1
 8018fda:	d1f2      	bne.n	8018fc2 <_lv_txt_get_next_line+0x132>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8018fdc:	2e00      	cmp	r6, #0
 8018fde:	d1ad      	bne.n	8018f3c <_lv_txt_get_next_line+0xac>
 8018fe0:	f1bb 3fff 	cmp.w	fp, #4294967295
 8018fe4:	d1ad      	bne.n	8018f42 <_lv_txt_get_next_line+0xb2>
 8018fe6:	462c      	mov	r4, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8018fe8:	9b01      	ldr	r3, [sp, #4]
 8018fea:	b123      	cbz	r3, 8018ff6 <_lv_txt_get_next_line+0x166>
 8018fec:	f1b8 0f0d 	cmp.w	r8, #13
 8018ff0:	d102      	bne.n	8018ff8 <_lv_txt_get_next_line+0x168>
 8018ff2:	2a0a      	cmp	r2, #10
 8018ff4:	d100      	bne.n	8018ff8 <_lv_txt_get_next_line+0x168>
 8018ff6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        max_width -= word_w;
 8018ff8:	eba9 0904 	sub.w	r9, r9, r4
 8018ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ffe:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
 8019002:	b976      	cbnz	r6, 8019022 <_lv_txt_get_next_line+0x192>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 8019004:	b95b      	cbnz	r3, 801901e <_lv_txt_get_next_line+0x18e>
 8019006:	4b11      	ldr	r3, [pc, #68]	; (801904c <_lv_txt_get_next_line+0x1bc>)
 8019008:	a90b      	add	r1, sp, #44	; 0x2c
 801900a:	4638      	mov	r0, r7
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	4798      	blx	r3
    if(i == 0) {
 8019010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019012:	b923      	cbnz	r3, 801901e <_lv_txt_get_next_line+0x18e>
        _lv_txt_encoded_next(txt, &i);
 8019014:	4b0d      	ldr	r3, [pc, #52]	; (801904c <_lv_txt_get_next_line+0x1bc>)
 8019016:	a90b      	add	r1, sp, #44	; 0x2c
 8019018:	4638      	mov	r0, r7
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	4798      	blx	r3
    return i;
 801901e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019020:	e754      	b.n	8018ecc <_lv_txt_get_next_line+0x3c>
        i += advance;
 8019022:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8019024:	783b      	ldrb	r3, [r7, #0]
 8019026:	2b0a      	cmp	r3, #10
        i += advance;
 8019028:	960b      	str	r6, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 801902a:	d0f1      	beq.n	8019010 <_lv_txt_get_next_line+0x180>
 801902c:	2b0d      	cmp	r3, #13
 801902e:	d0ef      	beq.n	8019010 <_lv_txt_get_next_line+0x180>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8019030:	5dbb      	ldrb	r3, [r7, r6]
 8019032:	2b0a      	cmp	r3, #10
 8019034:	d002      	beq.n	801903c <_lv_txt_get_next_line+0x1ac>
 8019036:	2b0d      	cmp	r3, #13
 8019038:	f47f af55 	bne.w	8018ee6 <_lv_txt_get_next_line+0x56>
            i++;  /*Include the following newline in the current line*/
 801903c:	3601      	adds	r6, #1
 801903e:	960b      	str	r6, [sp, #44]	; 0x2c
            break;
 8019040:	e7e6      	b.n	8019010 <_lv_txt_get_next_line+0x180>
    if(txt == NULL) return 0;
 8019042:	9802      	ldr	r0, [sp, #8]
 8019044:	e742      	b.n	8018ecc <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8019046:	3001      	adds	r0, #1
 8019048:	e740      	b.n	8018ecc <_lv_txt_get_next_line+0x3c>
 801904a:	bf00      	nop
 801904c:	20000040 	.word	0x20000040
 8019050:	08029f06 	.word	0x08029f06

08019054 <_lv_txt_ins>:
{
 8019054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019058:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
 801905a:	4610      	mov	r0, r2
{
 801905c:	4688      	mov	r8, r1
 801905e:	4616      	mov	r6, r2
    size_t ins_len = strlen(ins_txt);
 8019060:	f7e7 f8e0 	bl	8000224 <strlen>
    if(ins_len == 0) return;
 8019064:	4605      	mov	r5, r0
 8019066:	b1a8      	cbz	r0, 8019094 <_lv_txt_ins+0x40>
    size_t old_len = strlen(txt_buf);
 8019068:	4620      	mov	r0, r4
 801906a:	f7e7 f8db 	bl	8000224 <strlen>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 801906e:	4b0c      	ldr	r3, [pc, #48]	; (80190a0 <_lv_txt_ins+0x4c>)
    size_t new_len = ins_len + old_len;
 8019070:	1947      	adds	r7, r0, r5
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8019072:	4641      	mov	r1, r8
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	4620      	mov	r0, r4
 8019078:	4798      	blx	r3
        txt_buf[i] = txt_buf[i - ins_len];
 801907a:	1b62      	subs	r2, r4, r5
    for(i = new_len; i >= pos + ins_len; i--) {
 801907c:	182b      	adds	r3, r5, r0
 801907e:	42bb      	cmp	r3, r7
 8019080:	d90a      	bls.n	8019098 <_lv_txt_ins+0x44>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 8019082:	4404      	add	r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 8019084:	3e01      	subs	r6, #1
 8019086:	4425      	add	r5, r4
        *d8 = *s8;
 8019088:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801908c:	f804 3b01 	strb.w	r3, [r4], #1
    while(len) {
 8019090:	42ac      	cmp	r4, r5
 8019092:	d1f9      	bne.n	8019088 <_lv_txt_ins+0x34>
}
 8019094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt_buf[i] = txt_buf[i - ins_len];
 8019098:	5dd1      	ldrb	r1, [r2, r7]
 801909a:	55e1      	strb	r1, [r4, r7]
    for(i = new_len; i >= pos + ins_len; i--) {
 801909c:	3f01      	subs	r7, #1
 801909e:	e7ee      	b.n	801907e <_lv_txt_ins+0x2a>
 80190a0:	20000038 	.word	0x20000038

080190a4 <_lv_txt_cut>:
{
 80190a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80190a8:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 80190aa:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80190e8 <_lv_txt_cut+0x44>
{
 80190ae:	4617      	mov	r7, r2
 80190b0:	9101      	str	r1, [sp, #4]
    size_t old_len = strlen(txt);
 80190b2:	f7e7 f8b7 	bl	8000224 <strlen>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 80190b6:	f8d8 3000 	ldr.w	r3, [r8]
    size_t old_len = strlen(txt);
 80190ba:	4605      	mov	r5, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 80190bc:	9901      	ldr	r1, [sp, #4]
 80190be:	4630      	mov	r0, r6
 80190c0:	4798      	blx	r3
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 80190c2:	1834      	adds	r4, r6, r0
 80190c4:	f8d8 3000 	ldr.w	r3, [r8]
 80190c8:	4639      	mov	r1, r7
 80190ca:	4620      	mov	r0, r4
 80190cc:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 80190ce:	4623      	mov	r3, r4
 80190d0:	1a2d      	subs	r5, r5, r0
 80190d2:	1b9a      	subs	r2, r3, r6
 80190d4:	4295      	cmp	r5, r2
 80190d6:	d202      	bcs.n	80190de <_lv_txt_cut+0x3a>
}
 80190d8:	b002      	add	sp, #8
 80190da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 80190de:	5c1a      	ldrb	r2, [r3, r0]
 80190e0:	f803 2b01 	strb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 80190e4:	e7f5      	b.n	80190d2 <_lv_txt_cut+0x2e>
 80190e6:	bf00      	nop
 80190e8:	20000038 	.word	0x20000038

080190ec <_lv_txt_encoded_letter_next_2>:
{
 80190ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190f0:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 80190f2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 801911c <_lv_txt_encoded_letter_next_2+0x30>
{
 80190f6:	460f      	mov	r7, r1
 80190f8:	4606      	mov	r6, r0
    *letter = _lv_txt_encoded_next(txt, ofs);
 80190fa:	f8d8 3000 	ldr.w	r3, [r8]
 80190fe:	4621      	mov	r1, r4
{
 8019100:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8019102:	4798      	blx	r3
 8019104:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8019106:	b128      	cbz	r0, 8019114 <_lv_txt_encoded_letter_next_2+0x28>
 8019108:	6820      	ldr	r0, [r4, #0]
 801910a:	2100      	movs	r1, #0
 801910c:	f8d8 3000 	ldr.w	r3, [r8]
 8019110:	4430      	add	r0, r6
 8019112:	4798      	blx	r3
 8019114:	6028      	str	r0, [r5, #0]
}
 8019116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801911a:	bf00      	nop
 801911c:	20000040 	.word	0x20000040

08019120 <lv_txt_get_width>:
{
 8019120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019124:	4688      	mov	r8, r1
 8019126:	b085      	sub	sp, #20
 8019128:	4617      	mov	r7, r2
 801912a:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 801912c:	4605      	mov	r5, r0
 801912e:	2800      	cmp	r0, #0
 8019130:	d035      	beq.n	801919e <lv_txt_get_width+0x7e>
    if(font == NULL) return 0;
 8019132:	2a00      	cmp	r2, #0
 8019134:	d035      	beq.n	80191a2 <lv_txt_get_width+0x82>
    if(txt[0] == '\0') return 0;
 8019136:	7804      	ldrb	r4, [r0, #0]
 8019138:	2300      	movs	r3, #0
 801913a:	b124      	cbz	r4, 8019146 <lv_txt_get_width+0x26>
    uint32_t i                   = 0;
 801913c:	9301      	str	r3, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801913e:	f88d 3003 	strb.w	r3, [sp, #3]
    if(length != 0) {
 8019142:	bb31      	cbnz	r1, 8019192 <lv_txt_get_width+0x72>
    lv_coord_t width             = 0;
 8019144:	460c      	mov	r4, r1
}
 8019146:	4620      	mov	r0, r4
 8019148:	b005      	add	sp, #20
 801914a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 801914e:	ab01      	add	r3, sp, #4
 8019150:	aa03      	add	r2, sp, #12
 8019152:	a902      	add	r1, sp, #8
 8019154:	4628      	mov	r0, r5
 8019156:	f7ff ffc9 	bl	80190ec <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801915a:	f1b9 0f00 	cmp.w	r9, #0
 801915e:	d005      	beq.n	801916c <lv_txt_get_width+0x4c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8019160:	9902      	ldr	r1, [sp, #8]
 8019162:	f10d 0003 	add.w	r0, sp, #3
 8019166:	f7ff fe75 	bl	8018e54 <_lv_txt_is_cmd>
 801916a:	b950      	cbnz	r0, 8019182 <lv_txt_get_width+0x62>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801916c:	4638      	mov	r0, r7
 801916e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019172:	f7fc ffcf 	bl	8016114 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8019176:	b203      	sxth	r3, r0
 8019178:	2b00      	cmp	r3, #0
 801917a:	dd02      	ble.n	8019182 <lv_txt_get_width+0x62>
                width += letter_space;
 801917c:	4434      	add	r4, r6
 801917e:	4404      	add	r4, r0
 8019180:	b224      	sxth	r4, r4
        while(i < length) {
 8019182:	9b01      	ldr	r3, [sp, #4]
 8019184:	4598      	cmp	r8, r3
 8019186:	d8e2      	bhi.n	801914e <lv_txt_get_width+0x2e>
        if(width > 0) {
 8019188:	2c00      	cmp	r4, #0
 801918a:	dddc      	ble.n	8019146 <lv_txt_get_width+0x26>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801918c:	1ba4      	subs	r4, r4, r6
 801918e:	b224      	sxth	r4, r4
 8019190:	e7d9      	b.n	8019146 <lv_txt_get_width+0x26>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019192:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    lv_coord_t width             = 0;
 8019196:	461c      	mov	r4, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019198:	f009 0901 	and.w	r9, r9, #1
 801919c:	e7f1      	b.n	8019182 <lv_txt_get_width+0x62>
    if(txt == NULL) return 0;
 801919e:	4604      	mov	r4, r0
 80191a0:	e7d1      	b.n	8019146 <lv_txt_get_width+0x26>
 80191a2:	4614      	mov	r4, r2
 80191a4:	e7cf      	b.n	8019146 <lv_txt_get_width+0x26>

080191a6 <lv_txt_get_size>:
{
 80191a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191aa:	b087      	sub	sp, #28
    size_res->x = 0;
 80191ac:	2500      	movs	r5, #0
{
 80191ae:	4698      	mov	r8, r3
 80191b0:	4604      	mov	r4, r0
 80191b2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80191b6:	4616      	mov	r6, r2
 80191b8:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
    if(text == NULL) return;
 80191bc:	460f      	mov	r7, r1
{
 80191be:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 80191c2:	9302      	str	r3, [sp, #8]
    size_res->x = 0;
 80191c4:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 80191c6:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 80191c8:	b309      	cbz	r1, 801920e <lv_txt_get_size+0x68>
    if(font == NULL) return;
 80191ca:	b302      	cbz	r2, 801920e <lv_txt_get_size+0x68>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80191cc:	f013 0f02 	tst.w	r3, #2
    uint16_t letter_height = lv_font_get_line_height(font);
 80191d0:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80191d4:	9304      	str	r3, [sp, #16]
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80191d6:	bf18      	it	ne
 80191d8:	f44f 4ac0 	movne.w	sl, #24576	; 0x6000
    uint16_t letter_height = lv_font_get_line_height(font);
 80191dc:	8913      	ldrh	r3, [r2, #8]
 80191de:	9303      	str	r3, [sp, #12]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80191e0:	445b      	add	r3, fp
 80191e2:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 80191e4:	5d7b      	ldrb	r3, [r7, r5]
 80191e6:	eb07 0905 	add.w	r9, r7, r5
 80191ea:	b99b      	cbnz	r3, 8019214 <lv_txt_get_size+0x6e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80191ec:	b155      	cbz	r5, 8019204 <lv_txt_get_size+0x5e>
 80191ee:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 80191f2:	2b0a      	cmp	r3, #10
 80191f4:	d001      	beq.n	80191fa <lv_txt_get_size+0x54>
 80191f6:	2b0d      	cmp	r3, #13
 80191f8:	d104      	bne.n	8019204 <lv_txt_get_size+0x5e>
        size_res->y += letter_height + line_space;
 80191fa:	9b03      	ldr	r3, [sp, #12]
 80191fc:	8862      	ldrh	r2, [r4, #2]
 80191fe:	445b      	add	r3, fp
 8019200:	4413      	add	r3, r2
 8019202:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 8019204:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019208:	bb23      	cbnz	r3, 8019254 <lv_txt_get_size+0xae>
        size_res->y = letter_height;
 801920a:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 801920c:	8063      	strh	r3, [r4, #2]
}
 801920e:	b007      	add	sp, #28
 8019210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8019214:	9b02      	ldr	r3, [sp, #8]
 8019216:	4642      	mov	r2, r8
 8019218:	4631      	mov	r1, r6
 801921a:	4648      	mov	r0, r9
 801921c:	9300      	str	r3, [sp, #0]
 801921e:	4653      	mov	r3, sl
 8019220:	f7ff fe36 	bl	8018e90 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8019224:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019228:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 801922a:	4601      	mov	r1, r0
 801922c:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 801922e:	4413      	add	r3, r2
 8019230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019234:	d2eb      	bcs.n	801920e <lv_txt_get_size+0x68>
            size_res->y += line_space;
 8019236:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8019238:	4632      	mov	r2, r6
 801923a:	9b02      	ldr	r3, [sp, #8]
 801923c:	4648      	mov	r0, r9
 801923e:	9300      	str	r3, [sp, #0]
 8019240:	4643      	mov	r3, r8
 8019242:	f7ff ff6d 	bl	8019120 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8019246:	f9b4 3000 	ldrsh.w	r3, [r4]
 801924a:	4298      	cmp	r0, r3
 801924c:	bfb8      	it	lt
 801924e:	4618      	movlt	r0, r3
 8019250:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
 8019252:	e7c7      	b.n	80191e4 <lv_txt_get_size+0x3e>
        size_res->y -= line_space;
 8019254:	eba3 030b 	sub.w	r3, r3, fp
 8019258:	e7d8      	b.n	801920c <lv_txt_get_size+0x66>

0801925a <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801925a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801925e:	9d08      	ldr	r5, [sp, #32]
 8019260:	4680      	mov	r8, r0
 8019262:	460f      	mov	r7, r1
 8019264:	4614      	mov	r4, r2
 8019266:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8019268:	b90c      	cbnz	r4, 801926e <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 801926a:	4626      	mov	r6, r4
 801926c:	e012      	b.n	8019294 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 801926e:	ea4f 0a54 	mov.w	sl, r4, lsr #1
        if((c = (*cmp)(key, middle)) > 0) {
 8019272:	4640      	mov	r0, r8
        middle += (n / 2) * size;
 8019274:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8019278:	4631      	mov	r1, r6
 801927a:	47a8      	blx	r5
 801927c:	2800      	cmp	r0, #0
 801927e:	dd08      	ble.n	8019292 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 8019280:	43e4      	mvns	r4, r4
            base = (middle += size);
 8019282:	eb06 0709 	add.w	r7, r6, r9
 8019286:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 801928a:	ebaa 0a04 	sub.w	sl, sl, r4
{
 801928e:	4654      	mov	r4, sl
 8019290:	e7ea      	b.n	8019268 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8019292:	d1fc      	bne.n	801928e <_lv_utils_bsearch+0x34>
}
 8019294:	4630      	mov	r0, r6
 8019296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801929a <lv_obj_get_style_pad_left>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801929a:	f241 0212 	movw	r2, #4114	; 0x1012
{
 801929e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80192a0:	f7ed fe7a 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 80192a4:	b200      	sxth	r0, r0
 80192a6:	bd08      	pop	{r3, pc}

080192a8 <lv_obj_get_style_pad_right>:

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80192a8:	f241 0213 	movw	r2, #4115	; 0x1013
{
 80192ac:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80192ae:	f7ed fe73 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 80192b2:	b200      	sxth	r0, r0
 80192b4:	bd08      	pop	{r3, pc}

080192b6 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80192b6:	f241 0210 	movw	r2, #4112	; 0x1010
{
 80192ba:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80192bc:	f7ed fe6c 	bl	8006f98 <lv_obj_get_style_prop>
}
 80192c0:	b200      	sxth	r0, r0
 80192c2:	bd08      	pop	{r3, pc}

080192c4 <lv_obj_get_style_pad_bottom>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80192c4:	f241 0211 	movw	r2, #4113	; 0x1011
{
 80192c8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80192ca:	f7ed fe65 	bl	8006f98 <lv_obj_get_style_prop>
}
 80192ce:	b200      	sxth	r0, r0
 80192d0:	bd08      	pop	{r3, pc}
	...

080192d4 <lv_arc_constructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_arc_t * arc = (lv_arc_t *)obj;

   /*Initialize the allocated 'ext'*/
   arc->rotation = 0;
 80192d4:	f44f 0307 	mov.w	r3, #8847360	; 0x870000
   arc->indic_angle_start = 135;
   arc->indic_angle_end   = 270;
   arc->type = LV_ARC_MODE_NORMAL;
   arc->value = VALUE_UNSET;
   arc->min_close = 1;
   arc->min_value = 0;
 80192d8:	4a12      	ldr	r2, [pc, #72]	; (8019324 <lv_arc_constructor+0x50>)
{
 80192da:	b510      	push	{r4, lr}
   arc->rotation = 0;
 80192dc:	624b      	str	r3, [r1, #36]	; 0x24
   arc->indic_angle_end   = 270;
 80192de:	f503 7387 	add.w	r3, r3, #270	; 0x10e
{
 80192e2:	460c      	mov	r4, r1
   arc->indic_angle_end   = 270;
 80192e4:	628b      	str	r3, [r1, #40]	; 0x28
   arc->min_value = 0;
 80192e6:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80192ea:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
   arc->max_value = 100;
   arc->dragging = false;
 80192ee:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 80192f2:	f023 030f 	bic.w	r3, r3, #15
 80192f6:	f043 0308 	orr.w	r3, r3, #8
 80192fa:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
   arc->chg_rate = 720;
 80192fe:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8019302:	86cb      	strh	r3, [r1, #54]	; 0x36
   arc->last_tick = lv_tick_get();
 8019304:	f7fd f9ac 	bl	8016660 <lv_tick_get>
   arc->last_angle =arc->indic_angle_end;
 8019308:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   arc->last_tick = lv_tick_get();
 801930a:	63a0      	str	r0, [r4, #56]	; 0x38

   lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801930c:	2102      	movs	r1, #2
 801930e:	4620      	mov	r0, r4
   arc->last_angle =arc->indic_angle_end;
 8019310:	87a3      	strh	r3, [r4, #60]	; 0x3c
   lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8019312:	f7ea fb11 	bl	8003938 <lv_obj_add_flag>
   lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8019316:	4620      	mov	r0, r4
 8019318:	210d      	movs	r1, #13


    LV_TRACE_OBJ_CREATE("finished");
}
 801931a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 801931e:	f7eb bf15 	b.w	800514c <lv_obj_set_ext_click_area>
 8019322:	bf00      	nop
 8019324:	8000002d 	.word	0x8000002d

08019328 <get_center>:
        lv_obj_invalidate(obj);
    }
}

static void get_center(lv_obj_t * obj, lv_point_t * center, lv_coord_t * arc_r)
{
 8019328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801932c:	4604      	mov	r4, r0
 801932e:	460f      	mov	r7, r1
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019330:	2100      	movs	r1, #0
{
 8019332:	4690      	mov	r8, r2
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019334:	f7ff ffb1 	bl	801929a <lv_obj_get_style_pad_left>
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019338:	2100      	movs	r1, #0
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801933a:	4605      	mov	r5, r0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801933c:	4620      	mov	r0, r4
 801933e:	f7ff ffb3 	bl	80192a8 <lv_obj_get_style_pad_right>
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019342:	2100      	movs	r1, #0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019344:	4682      	mov	sl, r0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019346:	4620      	mov	r0, r4
 8019348:	f7ff ffb5 	bl	80192b6 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801934c:	2100      	movs	r1, #0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801934e:	4606      	mov	r6, r0
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8019350:	4620      	mov	r0, r4
 8019352:	f7ff ffb7 	bl	80192c4 <lv_obj_get_style_pad_bottom>
 8019356:	4681      	mov	r9, r0

    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8019358:	4620      	mov	r0, r4
 801935a:	f7eb fba0 	bl	8004a9e <lv_obj_get_width>
 801935e:	1b40      	subs	r0, r0, r5
 8019360:	eba0 0b0a 	sub.w	fp, r0, sl
 8019364:	4620      	mov	r0, r4
 8019366:	f7eb fba0 	bl	8004aaa <lv_obj_get_height>
 801936a:	1b80      	subs	r0, r0, r6
 801936c:	eba0 0009 	sub.w	r0, r0, r9
 8019370:	4583      	cmp	fp, r0
 8019372:	4620      	mov	r0, r4
 8019374:	da1d      	bge.n	80193b2 <get_center+0x8a>
 8019376:	f7eb fb92 	bl	8004a9e <lv_obj_get_width>
 801937a:	1b42      	subs	r2, r0, r5
 801937c:	eba2 030a 	sub.w	r3, r2, sl
                                lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8019380:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019384:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019388:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 801938c:	f343 034f 	sbfx	r3, r3, #1, #16

    *arc_r = r;
 8019390:	f8a8 3000 	strh.w	r3, [r8]
    center->x = obj->coords.x1 + r + left_bg;
 8019394:	8aa0      	ldrh	r0, [r4, #20]
 8019396:	4405      	add	r5, r0
    center->y = obj->coords.y1 + r + top_bg;
 8019398:	8ae0      	ldrh	r0, [r4, #22]
 801939a:	4406      	add	r6, r0
    center->x = obj->coords.x1 + r + left_bg;
 801939c:	fa15 f583 	uxtah	r5, r5, r3
 80193a0:	4620      	mov	r0, r4
    center->y = obj->coords.y1 + r + top_bg;
 80193a2:	fa16 f383 	uxtah	r3, r6, r3
    center->x = obj->coords.x1 + r + left_bg;
 80193a6:	803d      	strh	r5, [r7, #0]
    center->y = obj->coords.y1 + r + top_bg;
 80193a8:	807b      	strh	r3, [r7, #2]

    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
    r -= indic_width;
}
 80193aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ae:	f7ed bdf3 	b.w	8006f98 <lv_obj_get_style_prop>
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80193b2:	f7eb fb7a 	bl	8004aaa <lv_obj_get_height>
 80193b6:	1b82      	subs	r2, r0, r6
 80193b8:	eba2 0309 	sub.w	r3, r2, r9
 80193bc:	e7e0      	b.n	8019380 <get_center+0x58>

080193be <inv_arc_area>:
{
 80193be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c2:	b08d      	sub	sp, #52	; 0x34
 80193c4:	4681      	mov	r9, r0
 80193c6:	460f      	mov	r7, r1
 80193c8:	4615      	mov	r5, r2
 80193ca:	469b      	mov	fp, r3
    if(lv_obj_is_visible(obj) == false) return;
 80193cc:	f7eb fea0 	bl	8005110 <lv_obj_is_visible>
 80193d0:	2800      	cmp	r0, #0
 80193d2:	f000 80f4 	beq.w	80195be <inv_arc_area+0x200>
    start_angle +=arc->rotation;
 80193d6:	f8b9 0024 	ldrh.w	r0, [r9, #36]	; 0x24
    uint8_t start_quarter = start_angle / 90;
 80193da:	225a      	movs	r2, #90	; 0x5a
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80193dc:	2100      	movs	r1, #0
    start_angle +=arc->rotation;
 80193de:	4407      	add	r7, r0
    end_angle +=arc->rotation;
 80193e0:	4405      	add	r5, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80193e2:	4648      	mov	r0, r9
    start_angle +=arc->rotation;
 80193e4:	b2bf      	uxth	r7, r7
    end_angle +=arc->rotation;
 80193e6:	b2ad      	uxth	r5, r5
    if(start_angle >= 360) start_angle -= 360;
 80193e8:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 80193ec:	bf24      	itt	cs
 80193ee:	f5a7 77b4 	subcs.w	r7, r7, #360	; 0x168
 80193f2:	b2bf      	uxthcs	r7, r7
    if(end_angle >= 360) end_angle -= 360;
 80193f4:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 80193f8:	bf28      	it	cs
 80193fa:	f5a5 75b4 	subcs.w	r5, r5, #360	; 0x168
    uint8_t start_quarter = start_angle / 90;
 80193fe:	fbb7 f3f2 	udiv	r3, r7, r2
    if(end_angle >= 360) end_angle -= 360;
 8019402:	bf28      	it	cs
 8019404:	b2ad      	uxthcs	r5, r5
    uint8_t start_quarter = start_angle / 90;
 8019406:	b2db      	uxtb	r3, r3
    uint8_t end_quarter = end_angle / 90;
 8019408:	fbb5 f2f2 	udiv	r2, r5, r2
    uint8_t start_quarter = start_angle / 90;
 801940c:	9301      	str	r3, [sp, #4]
    uint8_t end_quarter = end_angle / 90;
 801940e:	b2d3      	uxtb	r3, r2
 8019410:	9302      	str	r3, [sp, #8]
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019412:	f7ff ff42 	bl	801929a <lv_obj_get_style_pad_left>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019416:	2100      	movs	r1, #0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019418:	4604      	mov	r4, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801941a:	4648      	mov	r0, r9
 801941c:	f7ff ff44 	bl	80192a8 <lv_obj_get_style_pad_right>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019420:	2100      	movs	r1, #0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019422:	4606      	mov	r6, r0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019424:	4648      	mov	r0, r9
 8019426:	f7ff ff46 	bl	80192b6 <lv_obj_get_style_pad_top>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801942a:	2100      	movs	r1, #0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801942c:	4682      	mov	sl, r0
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801942e:	4648      	mov	r0, r9
 8019430:	f7ff ff48 	bl	80192c4 <lv_obj_get_style_pad_bottom>
 8019434:	4680      	mov	r8, r0
    lv_coord_t rout       = (LV_MIN(lv_obj_get_width(obj) - left - right, lv_obj_get_height(obj) - top - bottom)) / 2;
 8019436:	4648      	mov	r0, r9
 8019438:	f7eb fb31 	bl	8004a9e <lv_obj_get_width>
 801943c:	1b00      	subs	r0, r0, r4
 801943e:	1b82      	subs	r2, r0, r6
 8019440:	4648      	mov	r0, r9
 8019442:	9200      	str	r2, [sp, #0]
 8019444:	f7eb fb31 	bl	8004aaa <lv_obj_get_height>
 8019448:	eba0 000a 	sub.w	r0, r0, sl
 801944c:	9a00      	ldr	r2, [sp, #0]
 801944e:	eba0 0008 	sub.w	r0, r0, r8
 8019452:	4282      	cmp	r2, r0
 8019454:	4648      	mov	r0, r9
 8019456:	f280 80b5 	bge.w	80195c4 <inv_arc_area+0x206>
 801945a:	f7eb fb20 	bl	8004a9e <lv_obj_get_width>
 801945e:	1b00      	subs	r0, r0, r4
 8019460:	1b86      	subs	r6, r0, r6
 8019462:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8019466:	f346 064f 	sbfx	r6, r6, #1, #16
    lv_coord_t x       = obj->coords.x1 + rout + left;
 801946a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
 801946e:	b2b3      	uxth	r3, r6
 8019470:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019474:	4659      	mov	r1, fp
 8019476:	4404      	add	r4, r0
 8019478:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 801947c:	9303      	str	r3, [sp, #12]
 801947e:	4482      	add	sl, r0
 8019480:	b2a3      	uxth	r3, r4
 8019482:	4648      	mov	r0, r9
 8019484:	fa13 f886 	uxtah	r8, r3, r6
 8019488:	9305      	str	r3, [sp, #20]
 801948a:	fa1f f38a 	uxth.w	r3, sl
 801948e:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t y       = obj->coords.y1 + rout + top;
 8019492:	fa13 f486 	uxtah	r4, r3, r6
 8019496:	9304      	str	r3, [sp, #16]
 8019498:	b2a3      	uxth	r3, r4
 801949a:	9300      	str	r3, [sp, #0]
 801949c:	f7ed fd7c 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80194a0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80194a2:	4682      	mov	sl, r0
}

static inline lv_coord_t lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 80194a4:	2251      	movs	r2, #81	; 0x51
 80194a6:	4659      	mov	r1, fp
 80194a8:	4648      	mov	r0, r9
    return (lv_coord_t)v.num;
 80194aa:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 80194ac:	f7ed fd74 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t rin       = rout - w;
 80194b0:	9b03      	ldr	r3, [sp, #12]
    return (lv_coord_t)v.num;
 80194b2:	b204      	sxth	r4, r0
 80194b4:	eba3 0a0a 	sub.w	sl, r3, sl
    extra_area = rounded ? w / 2 + 2 : 0;
 80194b8:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t rin       = rout - w;
 80194ba:	fa0f fa8a 	sxth.w	sl, sl
    extra_area = rounded ? w / 2 + 2 : 0;
 80194be:	b124      	cbz	r4, 80194ca <inv_arc_area+0x10c>
 80194c0:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
 80194c4:	1064      	asrs	r4, r4, #1
 80194c6:	3402      	adds	r4, #2
 80194c8:	b224      	sxth	r4, r4
    if(part == LV_PART_INDICATOR) {
 80194ca:	f5bb 3f00 	cmp.w	fp, #131072	; 0x20000
 80194ce:	d139      	bne.n	8019544 <inv_arc_area+0x186>
        lv_coord_t knob_extra_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80194d0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80194d4:	4648      	mov	r0, r9
 80194d6:	9309      	str	r3, [sp, #36]	; 0x24
 80194d8:	f7eb f8cd 	bl	8004676 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 80194dc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_extra_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80194e0:	9006      	str	r0, [sp, #24]
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 80194e2:	4648      	mov	r0, r9
 80194e4:	f7ff fed9 	bl	801929a <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80194e8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 80194ec:	9007      	str	r0, [sp, #28]
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80194ee:	4648      	mov	r0, r9
 80194f0:	f7ff feda 	bl	80192a8 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80194f4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 80194f8:	9008      	str	r0, [sp, #32]
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 80194fa:	4648      	mov	r0, r9
 80194fc:	f7ff fedb 	bl	80192b6 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019500:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019504:	4683      	mov	fp, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019506:	4648      	mov	r0, r9
 8019508:	f7ff fedc 	bl	80192c4 <lv_obj_get_style_pad_bottom>
        knob_extra_size += LV_MAX4(knob_left, knob_right, knob_top, knob_bottom);
 801950c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019510:	4293      	cmp	r3, r2
 8019512:	bfb8      	it	lt
 8019514:	4613      	movlt	r3, r2
 8019516:	b21a      	sxth	r2, r3
 8019518:	9b06      	ldr	r3, [sp, #24]
 801951a:	4593      	cmp	fp, r2
 801951c:	bfb8      	it	lt
 801951e:	4693      	movlt	fp, r2
 8019520:	fa0f fb8b 	sxth.w	fp, fp
 8019524:	4583      	cmp	fp, r0
 8019526:	bfac      	ite	ge
 8019528:	445b      	addge	r3, fp
 801952a:	181b      	addlt	r3, r3, r0
 801952c:	4618      	mov	r0, r3
        extra_area = LV_MAX(extra_area, w / 2 + 2 + knob_extra_size);
 801952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019530:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8019534:	1052      	asrs	r2, r2, #1
 8019536:	3202      	adds	r2, #2
 8019538:	fa02 f280 	sxtah	r2, r2, r0
 801953c:	4294      	cmp	r4, r2
 801953e:	bfb8      	it	lt
 8019540:	4614      	movlt	r4, r2
 8019542:	b224      	sxth	r4, r4
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8019544:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8019548:	4293      	cmp	r3, r2
 801954a:	f040 80de 	bne.w	801970a <inv_arc_area+0x34c>
 801954e:	42af      	cmp	r7, r5
 8019550:	f200 80db 	bhi.w	801970a <inv_arc_area+0x34c>
        if(start_quarter == 0) {
 8019554:	2b00      	cmp	r3, #0
 8019556:	d140      	bne.n	80195da <inv_arc_area+0x21c>
            inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019558:	b238      	sxth	r0, r7
 801955a:	b2a4      	uxth	r4, r4
 801955c:	f7fd fe36 	bl	80171cc <lv_trigo_sin>
 8019560:	9b00      	ldr	r3, [sp, #0]
 8019562:	fb00 f00a 	mul.w	r0, r0, sl
 8019566:	1b1b      	subs	r3, r3, r4
 8019568:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 801956c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019570:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019574:	b200      	sxth	r0, r0
 8019576:	f7fd fe29 	bl	80171cc <lv_trigo_sin>
 801957a:	eb08 0304 	add.w	r3, r8, r4
 801957e:	4370      	muls	r0, r6
 8019580:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019584:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019588:	b228      	sxth	r0, r5
 801958a:	f7fd fe1f 	bl	80171cc <lv_trigo_sin>
 801958e:	9b00      	ldr	r3, [sp, #0]
 8019590:	4370      	muls	r0, r6
 8019592:	191e      	adds	r6, r3, r4
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019594:	eba8 0404 	sub.w	r4, r8, r4
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019598:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 801959c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80195a0:	b200      	sxth	r0, r0
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80195a2:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80195a6:	f7fd fe11 	bl	80171cc <lv_trigo_sin>
 80195aa:	fb0a f000 	mul.w	r0, sl, r0
 80195ae:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 80195b2:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
        lv_obj_invalidate_area(obj, &inv_area);
 80195b6:	a90a      	add	r1, sp, #40	; 0x28
 80195b8:	4648      	mov	r0, r9
 80195ba:	f7eb fbab 	bl	8004d14 <lv_obj_invalidate_area>
}
 80195be:	b00d      	add	sp, #52	; 0x34
 80195c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t rout       = (LV_MIN(lv_obj_get_width(obj) - left - right, lv_obj_get_height(obj) - top - bottom)) / 2;
 80195c4:	f7eb fa71 	bl	8004aaa <lv_obj_get_height>
 80195c8:	eba0 000a 	sub.w	r0, r0, sl
 80195cc:	eba0 0808 	sub.w	r8, r0, r8
 80195d0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80195d4:	f348 064f 	sbfx	r6, r8, #1, #16
 80195d8:	e747      	b.n	801946a <inv_arc_area+0xac>
        else if(start_quarter == 1) {
 80195da:	9b01      	ldr	r3, [sp, #4]
 80195dc:	2b01      	cmp	r3, #1
 80195de:	d132      	bne.n	8019646 <inv_arc_area+0x288>
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80195e0:	b238      	sxth	r0, r7
 80195e2:	f7fd fdf3 	bl	80171cc <lv_trigo_sin>
 80195e6:	9b00      	ldr	r3, [sp, #0]
 80195e8:	fa1f fb84 	uxth.w	fp, r4
 80195ec:	4370      	muls	r0, r6
 80195ee:	fa13 f484 	uxtah	r4, r3, r4
 80195f2:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80195f6:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 80195fa:	b200      	sxth	r0, r0
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80195fc:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019600:	f7fd fde4 	bl	80171cc <lv_trigo_sin>
 8019604:	eb08 030b 	add.w	r3, r8, fp
 8019608:	fb00 f00a 	mul.w	r0, r0, sl
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 801960c:	eba8 080b 	sub.w	r8, r8, fp
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019610:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019614:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019618:	b228      	sxth	r0, r5
 801961a:	f7fd fdd7 	bl	80171cc <lv_trigo_sin>
 801961e:	9b00      	ldr	r3, [sp, #0]
 8019620:	fb0a f000 	mul.w	r0, sl, r0
 8019624:	eba3 0a0b 	sub.w	sl, r3, fp
 8019628:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 801962c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019630:	b200      	sxth	r0, r0
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019632:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019636:	f7fd fdc9 	bl	80171cc <lv_trigo_sin>
 801963a:	4370      	muls	r0, r6
 801963c:	eb08 38e0 	add.w	r8, r8, r0, asr #15
 8019640:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
            lv_obj_invalidate_area(obj, &inv_area);
 8019644:	e7b7      	b.n	80195b6 <inv_arc_area+0x1f8>
        else if(start_quarter == 2) {
 8019646:	9b01      	ldr	r3, [sp, #4]
 8019648:	2b02      	cmp	r3, #2
 801964a:	d12e      	bne.n	80196aa <inv_arc_area+0x2ec>
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 801964c:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019650:	b2a4      	uxth	r4, r4
 8019652:	b200      	sxth	r0, r0
 8019654:	f7fd fdba 	bl	80171cc <lv_trigo_sin>
 8019658:	eba8 0304 	sub.w	r3, r8, r4
 801965c:	4370      	muls	r0, r6
 801965e:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019662:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019666:	b238      	sxth	r0, r7
 8019668:	f7fd fdb0 	bl	80171cc <lv_trigo_sin>
 801966c:	9b00      	ldr	r3, [sp, #0]
 801966e:	fb00 f00a 	mul.w	r0, r0, sl
 8019672:	4423      	add	r3, r4
 8019674:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019678:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 801967c:	b228      	sxth	r0, r5
 801967e:	f7fd fda5 	bl	80171cc <lv_trigo_sin>
 8019682:	9b00      	ldr	r3, [sp, #0]
 8019684:	4370      	muls	r0, r6
 8019686:	1b1e      	subs	r6, r3, r4
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019688:	4444      	add	r4, r8
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 801968a:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 801968e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019692:	b200      	sxth	r0, r0
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019694:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019698:	f7fd fd98 	bl	80171cc <lv_trigo_sin>
 801969c:	fb0a f000 	mul.w	r0, sl, r0
 80196a0:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 80196a4:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
            lv_obj_invalidate_area(obj, &inv_area);
 80196a8:	e785      	b.n	80195b6 <inv_arc_area+0x1f8>
        else if(start_quarter == 3) {
 80196aa:	9b01      	ldr	r3, [sp, #4]
 80196ac:	2b03      	cmp	r3, #3
 80196ae:	d186      	bne.n	80195be <inv_arc_area+0x200>
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80196b0:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 80196b4:	b2a4      	uxth	r4, r4
 80196b6:	b200      	sxth	r0, r0
 80196b8:	f7fd fd88 	bl	80171cc <lv_trigo_sin>
 80196bc:	eba8 0304 	sub.w	r3, r8, r4
 80196c0:	fb00 f00a 	mul.w	r0, r0, sl
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80196c4:	44a0      	add	r8, r4
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80196c6:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80196ca:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80196ce:	b238      	sxth	r0, r7
 80196d0:	f7fd fd7c 	bl	80171cc <lv_trigo_sin>
 80196d4:	9b00      	ldr	r3, [sp, #0]
 80196d6:	4370      	muls	r0, r6
 80196d8:	1b1b      	subs	r3, r3, r4
 80196da:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80196de:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80196e2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80196e6:	b200      	sxth	r0, r0
 80196e8:	f7fd fd70 	bl	80171cc <lv_trigo_sin>
 80196ec:	4370      	muls	r0, r6
 80196ee:	eb08 38e0 	add.w	r8, r8, r0, asr #15
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80196f2:	b228      	sxth	r0, r5
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80196f4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80196f8:	f7fd fd68 	bl	80171cc <lv_trigo_sin>
 80196fc:	9b00      	ldr	r3, [sp, #0]
 80196fe:	fb0a f000 	mul.w	r0, sl, r0
 8019702:	441c      	add	r4, r3
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019704:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019708:	e03c      	b.n	8019784 <inv_arc_area+0x3c6>
    else if(start_quarter == 0 && end_quarter == 1) {
 801970a:	9b01      	ldr	r3, [sp, #4]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d13c      	bne.n	801978a <inv_arc_area+0x3cc>
 8019710:	9b02      	ldr	r3, [sp, #8]
 8019712:	2b01      	cmp	r3, #1
 8019714:	f040 80f1 	bne.w	80198fa <inv_arc_area+0x53c>
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019718:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801971c:	b2a4      	uxth	r4, r4
 801971e:	b200      	sxth	r0, r0
 8019720:	f7fd fd54 	bl	80171cc <lv_trigo_sin>
 8019724:	eba8 0304 	sub.w	r3, r8, r4
 8019728:	4370      	muls	r0, r6
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 801972a:	b22a      	sxth	r2, r5
 801972c:	b23d      	sxth	r5, r7
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 801972e:	44a0      	add	r8, r4
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019730:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019734:	9201      	str	r2, [sp, #4]
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019736:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 801973a:	4610      	mov	r0, r2
 801973c:	f7fd fd46 	bl	80171cc <lv_trigo_sin>
 8019740:	4683      	mov	fp, r0
 8019742:	4628      	mov	r0, r5
 8019744:	f7fd fd42 	bl	80171cc <lv_trigo_sin>
 8019748:	4583      	cmp	fp, r0
 801974a:	bfb6      	itet	lt
 801974c:	9a01      	ldrlt	r2, [sp, #4]
 801974e:	4628      	movge	r0, r5
 8019750:	4610      	movlt	r0, r2
 8019752:	f7fd fd3b 	bl	80171cc <lv_trigo_sin>
                                        lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019756:	9b00      	ldr	r3, [sp, #0]
 8019758:	fb00 f00a 	mul.w	r0, r0, sl
 801975c:	eba3 0a04 	sub.w	sl, r3, r4
 8019760:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019764:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019768:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801976c:	b200      	sxth	r0, r0
 801976e:	f7fd fd2d 	bl	80171cc <lv_trigo_sin>
        inv_area.y2 = y + rout + extra_area;
 8019772:	9b03      	ldr	r3, [sp, #12]
 8019774:	9a00      	ldr	r2, [sp, #0]
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019776:	4370      	muls	r0, r6
        inv_area.y2 = y + rout + extra_area;
 8019778:	4413      	add	r3, r2
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 801977a:	eb08 38e0 	add.w	r8, r8, r0, asr #15
        inv_area.y2 = y + rout + extra_area;
 801977e:	441c      	add	r4, r3
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019780:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019784:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        lv_obj_invalidate_area(obj, &inv_area);
 8019788:	e715      	b.n	80195b6 <inv_arc_area+0x1f8>
    else if(start_quarter == 1 && end_quarter == 2) {
 801978a:	9b01      	ldr	r3, [sp, #4]
 801978c:	2b01      	cmp	r3, #1
 801978e:	d135      	bne.n	80197fc <inv_arc_area+0x43e>
 8019790:	9b02      	ldr	r3, [sp, #8]
 8019792:	2b02      	cmp	r3, #2
 8019794:	f040 80b1 	bne.w	80198fa <inv_arc_area+0x53c>
        inv_area.x1 = x - rout - extra_area;
 8019798:	b2a4      	uxth	r4, r4
 801979a:	9b05      	ldr	r3, [sp, #20]
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 801979c:	f107 0b5a 	add.w	fp, r7, #90	; 0x5a
        inv_area.x1 = x - rout - extra_area;
 80197a0:	1b18      	subs	r0, r3, r4
                                        lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80197a2:	44a0      	add	r8, r4
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80197a4:	fa0f fb8b 	sxth.w	fp, fp
        inv_area.x1 = x - rout - extra_area;
 80197a8:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80197ac:	b228      	sxth	r0, r5
 80197ae:	f7fd fd0d 	bl	80171cc <lv_trigo_sin>
 80197b2:	9b00      	ldr	r3, [sp, #0]
 80197b4:	4370      	muls	r0, r6
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80197b6:	355a      	adds	r5, #90	; 0x5a
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80197b8:	1b1b      	subs	r3, r3, r4
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80197ba:	b22d      	sxth	r5, r5
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80197bc:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 80197c0:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80197c4:	4658      	mov	r0, fp
 80197c6:	f7fd fd01 	bl	80171cc <lv_trigo_sin>
 80197ca:	9001      	str	r0, [sp, #4]
 80197cc:	4628      	mov	r0, r5
 80197ce:	f7fd fcfd 	bl	80171cc <lv_trigo_sin>
 80197d2:	9b01      	ldr	r3, [sp, #4]
 80197d4:	4283      	cmp	r3, r0
 80197d6:	bfcc      	ite	gt
 80197d8:	4658      	movgt	r0, fp
 80197da:	4628      	movle	r0, r5
 80197dc:	f7fd fcf6 	bl	80171cc <lv_trigo_sin>
                                        lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80197e0:	fb00 f00a 	mul.w	r0, r0, sl
 80197e4:	eb08 30e0 	add.w	r0, r8, r0, asr #15
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 80197e8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80197ec:	b238      	sxth	r0, r7
 80197ee:	f7fd fced 	bl	80171cc <lv_trigo_sin>
 80197f2:	9b00      	ldr	r3, [sp, #0]
 80197f4:	4370      	muls	r0, r6
 80197f6:	4423      	add	r3, r4
 80197f8:	461c      	mov	r4, r3
 80197fa:	e783      	b.n	8019704 <inv_arc_area+0x346>
    else if(start_quarter == 2 && end_quarter == 3) {
 80197fc:	9b01      	ldr	r3, [sp, #4]
 80197fe:	2b02      	cmp	r3, #2
 8019800:	d13a      	bne.n	8019878 <inv_arc_area+0x4ba>
 8019802:	9b02      	ldr	r3, [sp, #8]
 8019804:	2b03      	cmp	r3, #3
 8019806:	d178      	bne.n	80198fa <inv_arc_area+0x53c>
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019808:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801980c:	b2a4      	uxth	r4, r4
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 801980e:	b23f      	sxth	r7, r7
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019810:	b200      	sxth	r0, r0
 8019812:	f7fd fcdb 	bl	80171cc <lv_trigo_sin>
 8019816:	eba8 0304 	sub.w	r3, r8, r4
 801981a:	4370      	muls	r0, r6
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 801981c:	44a0      	add	r8, r4
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 801981e:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.y1 = y - rout - extra_area;
 8019822:	9b04      	ldr	r3, [sp, #16]
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019824:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y - rout - extra_area;
 8019828:	1b18      	subs	r0, r3, r4
 801982a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 801982e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019832:	b22d      	sxth	r5, r5
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019834:	b200      	sxth	r0, r0
 8019836:	f7fd fcc9 	bl	80171cc <lv_trigo_sin>
 801983a:	4370      	muls	r0, r6
 801983c:	eb08 38e0 	add.w	r8, r8, r0, asr #15
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019840:	4628      	mov	r0, r5
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019842:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019846:	f7fd fcc1 	bl	80171cc <lv_trigo_sin>
 801984a:	fb00 f60a 	mul.w	r6, r0, sl
 801984e:	4638      	mov	r0, r7
 8019850:	f7fd fcbc 	bl	80171cc <lv_trigo_sin>
 8019854:	fb0a f000 	mul.w	r0, sl, r0
 8019858:	4286      	cmp	r6, r0
 801985a:	bfcc      	ite	gt
 801985c:	4628      	movgt	r0, r5
 801985e:	4638      	movle	r0, r7
 8019860:	f7fd fcb4 	bl	80171cc <lv_trigo_sin>
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019864:	9b00      	ldr	r3, [sp, #0]
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019866:	fb0a f000 	mul.w	r0, sl, r0
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 801986a:	4423      	add	r3, r4
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 801986c:	f3c0 3acf 	ubfx	sl, r0, #15, #16
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019870:	449a      	add	sl, r3
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019872:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
        lv_obj_invalidate_area(obj, &inv_area);
 8019876:	e69e      	b.n	80195b6 <inv_arc_area+0x1f8>
    else if(start_quarter == 3 && end_quarter == 0) {
 8019878:	9b01      	ldr	r3, [sp, #4]
 801987a:	2b03      	cmp	r3, #3
 801987c:	d13d      	bne.n	80198fa <inv_arc_area+0x53c>
 801987e:	9b02      	ldr	r3, [sp, #8]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d13a      	bne.n	80198fa <inv_arc_area+0x53c>
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019884:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 8019888:	f107 0b5a 	add.w	fp, r7, #90	; 0x5a
                                        lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 801988c:	b2a4      	uxth	r4, r4
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 801988e:	b21b      	sxth	r3, r3
 8019890:	fa0f fb8b 	sxth.w	fp, fp
 8019894:	4618      	mov	r0, r3
 8019896:	9302      	str	r3, [sp, #8]
 8019898:	f7fd fc98 	bl	80171cc <lv_trigo_sin>
 801989c:	9001      	str	r0, [sp, #4]
 801989e:	4658      	mov	r0, fp
 80198a0:	f7fd fc94 	bl	80171cc <lv_trigo_sin>
 80198a4:	9a01      	ldr	r2, [sp, #4]
 80198a6:	4282      	cmp	r2, r0
 80198a8:	bfb6      	itet	lt
 80198aa:	9b02      	ldrlt	r3, [sp, #8]
 80198ac:	4658      	movge	r0, fp
 80198ae:	4618      	movlt	r0, r3
 80198b0:	f7fd fc8c 	bl	80171cc <lv_trigo_sin>
                                        lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80198b4:	fb00 f00a 	mul.w	r0, r0, sl
 80198b8:	eba8 0a04 	sub.w	sl, r8, r4
 80198bc:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 80198c0:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80198c4:	b238      	sxth	r0, r7
 80198c6:	f7fd fc81 	bl	80171cc <lv_trigo_sin>
 80198ca:	9b00      	ldr	r3, [sp, #0]
 80198cc:	4370      	muls	r0, r6
 80198ce:	1b1b      	subs	r3, r3, r4
 80198d0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.x2 = x + rout + extra_area;
 80198d4:	9b03      	ldr	r3, [sp, #12]
 80198d6:	4443      	add	r3, r8
        inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80198d8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80198dc:	b228      	sxth	r0, r5
        inv_area.x2 = x + rout + extra_area;
 80198de:	4698      	mov	r8, r3
 80198e0:	44a0      	add	r8, r4
 80198e2:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80198e6:	f7fd fc71 	bl	80171cc <lv_trigo_sin>
 80198ea:	9b00      	ldr	r3, [sp, #0]
 80198ec:	4370      	muls	r0, r6
 80198ee:	191e      	adds	r6, r3, r4
 80198f0:	eb06 30e0 	add.w	r0, r6, r0, asr #15
 80198f4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80198f8:	e65d      	b.n	80195b6 <inv_arc_area+0x1f8>
        lv_obj_invalidate(obj);
 80198fa:	4648      	mov	r0, r9
 80198fc:	f7eb fa24 	bl	8004d48 <lv_obj_invalidate>
 8019900:	e65d      	b.n	80195be <inv_arc_area+0x200>

08019902 <lv_arc_set_start_angle>:
    if(start > 360) start -= 360;
 8019902:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8019906:	b538      	push	{r3, r4, r5, lr}
 8019908:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 801990a:	bf88      	it	hi
 801990c:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    if(LV_ABS(start -arc->indic_angle_start) >= 180) {
 8019910:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
{
 8019912:	4605      	mov	r5, r0
    if(start > 360) start -= 360;
 8019914:	bf88      	it	hi
 8019916:	b2a4      	uxthhi	r4, r4
    if(LV_ABS(start -arc->indic_angle_start) >= 180) {
 8019918:	1a63      	subs	r3, r4, r1
 801991a:	2b00      	cmp	r3, #0
 801991c:	bfb8      	it	lt
 801991e:	425b      	neglt	r3, r3
 8019920:	2bb3      	cmp	r3, #179	; 0xb3
 8019922:	dd04      	ble.n	801992e <lv_arc_set_start_angle+0x2c>
        lv_obj_invalidate(obj);
 8019924:	4628      	mov	r0, r5
 8019926:	f7eb fa0f 	bl	8004d48 <lv_obj_invalidate>
   arc->indic_angle_start = start;
 801992a:	84ec      	strh	r4, [r5, #38]	; 0x26
}
 801992c:	bd38      	pop	{r3, r4, r5, pc}
    else if(arc->indic_angle_start >arc->indic_angle_end && start >arc->indic_angle_end) {
 801992e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8019930:	4299      	cmp	r1, r3
 8019932:	d90e      	bls.n	8019952 <lv_arc_set_start_angle+0x50>
 8019934:	42a3      	cmp	r3, r4
 8019936:	d20c      	bcs.n	8019952 <lv_arc_set_start_angle+0x50>
        inv_arc_area(obj, LV_MIN(arc->indic_angle_start, start), LV_MAX(arc->indic_angle_start, start),
 8019938:	42a1      	cmp	r1, r4
 801993a:	460a      	mov	r2, r1
 801993c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019940:	4628      	mov	r0, r5
 8019942:	bf38      	it	cc
 8019944:	4622      	movcc	r2, r4
 8019946:	42a1      	cmp	r1, r4
 8019948:	bf28      	it	cs
 801994a:	4621      	movcs	r1, r4
 801994c:	f7ff fd37 	bl	80193be <inv_arc_area>
 8019950:	e7eb      	b.n	801992a <lv_arc_set_start_angle+0x28>
    else  if(arc->indic_angle_start <arc->indic_angle_end && start <arc->indic_angle_end) {
 8019952:	4299      	cmp	r1, r3
 8019954:	d2e6      	bcs.n	8019924 <lv_arc_set_start_angle+0x22>
 8019956:	42a3      	cmp	r3, r4
 8019958:	d9e4      	bls.n	8019924 <lv_arc_set_start_angle+0x22>
 801995a:	e7ed      	b.n	8019938 <lv_arc_set_start_angle+0x36>

0801995c <lv_arc_set_end_angle>:
{
 801995c:	b538      	push	{r3, r4, r5, lr}
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 801995e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
{
 8019960:	460c      	mov	r4, r1
 8019962:	4605      	mov	r5, r0
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019964:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8019968:	4291      	cmp	r1, r2
    if(LV_ABS(end -arc->indic_angle_end) >= 180) {
 801996a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 801996c:	bfc8      	it	gt
 801996e:	b294      	uxthgt	r4, r2
    if(LV_ABS(end -arc->indic_angle_end) >= 180) {
 8019970:	1a62      	subs	r2, r4, r1
 8019972:	2a00      	cmp	r2, #0
 8019974:	bfb8      	it	lt
 8019976:	4252      	neglt	r2, r2
 8019978:	2ab3      	cmp	r2, #179	; 0xb3
 801997a:	dd04      	ble.n	8019986 <lv_arc_set_end_angle+0x2a>
        lv_obj_invalidate(obj);
 801997c:	4628      	mov	r0, r5
 801997e:	f7eb f9e3 	bl	8004d48 <lv_obj_invalidate>
   arc->indic_angle_end = end;
 8019982:	852c      	strh	r4, [r5, #40]	; 0x28
}
 8019984:	bd38      	pop	{r3, r4, r5, pc}
    else if(arc->indic_angle_end >arc->indic_angle_start && end >arc->indic_angle_start) {
 8019986:	428b      	cmp	r3, r1
 8019988:	d20e      	bcs.n	80199a8 <lv_arc_set_end_angle+0x4c>
 801998a:	42a3      	cmp	r3, r4
 801998c:	d20c      	bcs.n	80199a8 <lv_arc_set_end_angle+0x4c>
        inv_arc_area(obj, LV_MIN(arc->indic_angle_end, end), LV_MAX(arc->indic_angle_end, end), LV_PART_INDICATOR);
 801998e:	42a1      	cmp	r1, r4
 8019990:	460a      	mov	r2, r1
 8019992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019996:	4628      	mov	r0, r5
 8019998:	bf38      	it	cc
 801999a:	4622      	movcc	r2, r4
 801999c:	42a1      	cmp	r1, r4
 801999e:	bf28      	it	cs
 80199a0:	4621      	movcs	r1, r4
 80199a2:	f7ff fd0c 	bl	80193be <inv_arc_area>
 80199a6:	e7ec      	b.n	8019982 <lv_arc_set_end_angle+0x26>
    else  if(arc->indic_angle_end <arc->indic_angle_start && end <arc->indic_angle_start) {
 80199a8:	428b      	cmp	r3, r1
 80199aa:	d9e7      	bls.n	801997c <lv_arc_set_end_angle+0x20>
 80199ac:	42a3      	cmp	r3, r4
 80199ae:	d9e5      	bls.n	801997c <lv_arc_set_end_angle+0x20>
 80199b0:	e7ed      	b.n	801998e <lv_arc_set_end_angle+0x32>

080199b2 <value_update>:
/**
 * Used internally to update arc angles after a value change
 * @param arc pointer to a arc object
 */
static void value_update(lv_obj_t * obj)
{
 80199b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199b4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_arc_t * arc = (lv_arc_t *)obj;

    /*If the value is still not set to any value do not update*/
    if(arc->value == VALUE_UNSET) return;
 80199b6:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 80199ba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80199be:	d03c      	beq.n	8019a3a <value_update+0x88>

    int16_t bg_midpoint, range_midpoint, bg_end =arc->bg_angle_end;
 80199c0:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 80199c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a

    int16_t angle;
    switch(arc->type) {
 80199c4:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 80199c8:	429d      	cmp	r5, r3
 80199ca:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    switch(arc->type) {
 80199ce:	f3c6 0641 	ubfx	r6, r6, #1, #2
 80199d2:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 80199d6:	bf3c      	itt	cc
 80199d8:	f505 75b4 	addcc.w	r5, r5, #360	; 0x168
 80199dc:	b2ad      	uxthcc	r5, r5
    switch(arc->type) {
 80199de:	2e01      	cmp	r6, #1
 80199e0:	b22d      	sxth	r5, r5
 80199e2:	d00b      	beq.n	80199fc <value_update+0x4a>
 80199e4:	2e02      	cmp	r6, #2
 80199e6:	d037      	beq.n	8019a58 <value_update+0xa6>
        case LV_ARC_MODE_REVERSE:
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
            lv_arc_set_start_angle(obj, angle);
            break;
        default: /** LV_ARC_TYPE_NORMAL*/
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 80199e8:	9500      	str	r5, [sp, #0]
 80199ea:	f7fd fc9c 	bl	8017326 <lv_map>
            lv_arc_set_end_angle(obj, angle);
 80199ee:	b281      	uxth	r1, r0
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 80199f0:	b205      	sxth	r5, r0
            lv_arc_set_end_angle(obj, angle);
 80199f2:	4620      	mov	r0, r4
 80199f4:	f7ff ffb2 	bl	801995c <lv_arc_set_end_angle>
            lv_arc_set_start_angle(obj,arc->bg_angle_start);
 80199f8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80199fa:	e032      	b.n	8019a62 <value_update+0xb0>
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 80199fc:	188e      	adds	r6, r1, r2
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 80199fe:	18ef      	adds	r7, r5, r3
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019a00:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8019a04:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019a08:	ea4f 0c66 	mov.w	ip, r6, asr #1
            if(arc->value < range_midpoint) {
 8019a0c:	f346 064f 	sbfx	r6, r6, #1, #16
 8019a10:	f347 0e4f 	sbfx	lr, r7, #1, #16
 8019a14:	f3c7 074f 	ubfx	r7, r7, #1, #16
 8019a18:	42b0      	cmp	r0, r6
 8019a1a:	da10      	bge.n	8019a3e <value_update+0x8c>
                angle = lv_map(arc->value,arc->min_value, range_midpoint,arc->bg_angle_start, bg_midpoint);
 8019a1c:	4662      	mov	r2, ip
 8019a1e:	f8cd e000 	str.w	lr, [sp]
 8019a22:	f7fd fc80 	bl	8017326 <lv_map>
                lv_arc_set_start_angle(obj, angle);
 8019a26:	b281      	uxth	r1, r0
                angle = lv_map(arc->value,arc->min_value, range_midpoint,arc->bg_angle_start, bg_midpoint);
 8019a28:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8019a2a:	4620      	mov	r0, r4
 8019a2c:	f7ff ff69 	bl	8019902 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8019a30:	4639      	mov	r1, r7
                lv_arc_set_end_angle(obj, angle);
 8019a32:	4620      	mov	r0, r4
 8019a34:	f7ff ff92 	bl	801995c <lv_arc_set_end_angle>
    }
   arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8019a38:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8019a3a:	b003      	add	sp, #12
 8019a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                angle = lv_map(arc->value, range_midpoint,arc->max_value, bg_midpoint, bg_end);
 8019a3e:	4661      	mov	r1, ip
 8019a40:	4673      	mov	r3, lr
 8019a42:	9500      	str	r5, [sp, #0]
 8019a44:	f7fd fc6f 	bl	8017326 <lv_map>
 8019a48:	4606      	mov	r6, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8019a4a:	4639      	mov	r1, r7
                angle = lv_map(arc->value, range_midpoint,arc->max_value, bg_midpoint, bg_end);
 8019a4c:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f7ff ff57 	bl	8019902 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8019a54:	b2b1      	uxth	r1, r6
 8019a56:	e7ec      	b.n	8019a32 <value_update+0x80>
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019a58:	9500      	str	r5, [sp, #0]
 8019a5a:	f7fd fc64 	bl	8017326 <lv_map>
 8019a5e:	b205      	sxth	r5, r0
            lv_arc_set_start_angle(obj, angle);
 8019a60:	b281      	uxth	r1, r0
            lv_arc_set_start_angle(obj,arc->bg_angle_start);
 8019a62:	4620      	mov	r0, r4
 8019a64:	f7ff ff4d 	bl	8019902 <lv_arc_set_start_angle>
 8019a68:	e7e6      	b.n	8019a38 <value_update+0x86>

08019a6a <lv_arc_set_value>:
{
 8019a6a:	b410      	push	{r4}
    if(arc->value == value) return;
 8019a6c:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8019a70:	428c      	cmp	r4, r1
 8019a72:	d010      	beq.n	8019a96 <lv_arc_set_value+0x2c>
    new_value = value >arc->max_value ?arc->max_value : value;
 8019a74:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8019a78:	428a      	cmp	r2, r1
 8019a7a:	bfa8      	it	ge
 8019a7c:	460a      	movge	r2, r1
    new_value = new_value <arc->min_value ?arc->min_value : new_value;
 8019a7e:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 8019a82:	4291      	cmp	r1, r2
 8019a84:	bfb8      	it	lt
 8019a86:	4611      	movlt	r1, r2
    if(arc->value == new_value) return;
 8019a88:	428c      	cmp	r4, r1
 8019a8a:	d004      	beq.n	8019a96 <lv_arc_set_value+0x2c>
}
 8019a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   arc->value = new_value;
 8019a90:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 8019a92:	f7ff bf8e 	b.w	80199b2 <value_update>
}
 8019a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a9a:	4770      	bx	lr

08019a9c <lv_arc_event>:
{
 8019a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8019aa0:	48cb      	ldr	r0, [pc, #812]	; (8019dd0 <lv_arc_event+0x334>)
{
 8019aa2:	b0ad      	sub	sp, #180	; 0xb4
 8019aa4:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8019aa6:	f7e7 ffb0 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8019aaa:	2801      	cmp	r0, #1
 8019aac:	d138      	bne.n	8019b20 <lv_arc_event+0x84>
    lv_event_code_t code = lv_event_get_code(e);
 8019aae:	4638      	mov	r0, r7
 8019ab0:	f7e8 f844 	bl	8001b3c <lv_event_get_code>
 8019ab4:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8019ab6:	4638      	mov	r0, r7
 8019ab8:	f7e8 f83e 	bl	8001b38 <lv_event_get_target>
 8019abc:	4605      	mov	r5, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8019abe:	4638      	mov	r0, r7
 8019ac0:	f7e8 f83a 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_PRESSING) {
 8019ac4:	2e02      	cmp	r6, #2
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8019ac6:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSING) {
 8019ac8:	f040 80e9 	bne.w	8019c9e <lv_arc_event+0x202>
        lv_indev_t * indev = lv_indev_get_act();
 8019acc:	f7e8 faaa 	bl	8002024 <lv_indev_get_act>
        if(indev == NULL) return;
 8019ad0:	4606      	mov	r6, r0
 8019ad2:	b328      	cbz	r0, 8019b20 <lv_arc_event+0x84>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8019ad4:	f7e8 faac 	bl	8002030 <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8019ad8:	2801      	cmp	r0, #1
 8019ada:	d121      	bne.n	8019b20 <lv_arc_event+0x84>
        lv_indev_get_point(indev, &p);
 8019adc:	a90d      	add	r1, sp, #52	; 0x34
 8019ade:	4630      	mov	r0, r6
 8019ae0:	f7e8 fb01 	bl	80020e6 <lv_indev_get_point>
        get_center(obj, &center, &r);
 8019ae4:	aa0a      	add	r2, sp, #40	; 0x28
 8019ae6:	a91a      	add	r1, sp, #104	; 0x68
 8019ae8:	4628      	mov	r0, r5
 8019aea:	f7ff fc1d 	bl	8019328 <get_center>
        p.x -=  center.x;
 8019aee:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8019af2:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8019af6:	1a9b      	subs	r3, r3, r2
        p.y -=  center.y;
 8019af8:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
        p.x -=  center.x;
 8019afc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        p.y -=  center.y;
 8019b00:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8019b04:	1a9b      	subs	r3, r3, r2
 8019b06:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(arc->dragging == false) {
 8019b0a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019b0e:	07da      	lsls	r2, r3, #31
 8019b10:	d509      	bpl.n	8019b26 <lv_arc_event+0x8a>
        if(p.x == 0 && p.y == 0) return;
 8019b12:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8019b16:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8019b1a:	ea51 0300 	orrs.w	r3, r1, r0
 8019b1e:	d12e      	bne.n	8019b7e <lv_arc_event+0xe2>
}
 8019b20:	b02d      	add	sp, #180	; 0xb4
 8019b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019b26:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019b2a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8019b2e:	4628      	mov	r0, r5
 8019b30:	f7ed fa32 	bl	8006f98 <lv_obj_get_style_prop>
            r -=  indic_width;
 8019b34:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
            if(p.x * p.x + p.y * p.y > r * r) {
 8019b38:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
            r -=  indic_width;
 8019b3c:	1a10      	subs	r0, r2, r0
            if(p.x * p.x + p.y * p.y > r * r) {
 8019b3e:	4349      	muls	r1, r1
            r -= r / 2; /*Add some more sensitive area*/
 8019b40:	f3c0 32c0 	ubfx	r2, r0, #15, #1
            r -=  indic_width;
 8019b44:	b283      	uxth	r3, r0
            r -= r / 2; /*Add some more sensitive area*/
 8019b46:	fa02 f080 	sxtah	r0, r2, r0
            if(p.x * p.x + p.y * p.y > r * r) {
 8019b4a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
            r -= r / 2; /*Add some more sensitive area*/
 8019b4e:	eba3 0360 	sub.w	r3, r3, r0, asr #1
            if(p.x * p.x + p.y * p.y > r * r) {
 8019b52:	fb02 1202 	mla	r2, r2, r2, r1
            r -= r / 2; /*Add some more sensitive area*/
 8019b56:	b21b      	sxth	r3, r3
 8019b58:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            if(p.x * p.x + p.y * p.y > r * r) {
 8019b5c:	435b      	muls	r3, r3
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	dd08      	ble.n	8019b74 <lv_arc_event+0xd8>
               arc->dragging = true;
 8019b62:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019b66:	f043 0301 	orr.w	r3, r3, #1
 8019b6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
               arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 8019b6e:	f7fc fd77 	bl	8016660 <lv_tick_get>
 8019b72:	63a0      	str	r0, [r4, #56]	; 0x38
        if(arc->dragging == false) return;
 8019b74:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019b78:	07db      	lsls	r3, r3, #31
 8019b7a:	d5d1      	bpl.n	8019b20 <lv_arc_event+0x84>
 8019b7c:	e7c9      	b.n	8019b12 <lv_arc_event+0x76>
        int16_t bg_end =arc->bg_angle_end;
 8019b7e:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
        if(arc->bg_angle_end <arc->bg_angle_start) {
 8019b80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019b82:	42b3      	cmp	r3, r6
            bg_end =arc->bg_angle_end + 360;
 8019b84:	bf84      	itt	hi
 8019b86:	f506 76b4 	addhi.w	r6, r6, #360	; 0x168
 8019b8a:	b2b6      	uxthhi	r6, r6
        angle = lv_atan2(p.y, p.x);
 8019b8c:	f7fd fb7f 	bl	801728e <lv_atan2>
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 8019b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019b92:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8019b94:	b237      	sxth	r7, r6
        int16_t deg_range = bg_end -arc->bg_angle_start;
 8019b96:	1af6      	subs	r6, r6, r3
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 8019b98:	441a      	add	r2, r3
        int16_t deg_range = bg_end -arc->bg_angle_start;
 8019b9a:	b236      	sxth	r6, r6
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 8019b9c:	1a80      	subs	r0, r0, r2
 8019b9e:	b282      	uxth	r2, r0
 8019ba0:	b200      	sxth	r0, r0
        if(angle < 0) angle += 360;
 8019ba2:	2800      	cmp	r0, #0
 8019ba4:	bfb8      	it	lt
 8019ba6:	f502 70b4 	addlt.w	r0, r2, #360	; 0x168
        int16_t last_angle_rel =arc->last_angle -arc->bg_angle_start;
 8019baa:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
        if(angle < 0) angle += 360;
 8019bac:	bfb8      	it	lt
 8019bae:	b200      	sxthlt	r0, r0
        int16_t last_angle_rel =arc->last_angle -arc->bg_angle_start;
 8019bb0:	eba2 0803 	sub.w	r8, r2, r3
 8019bb4:	1a9b      	subs	r3, r3, r2
 8019bb6:	fa1f f888 	uxth.w	r8, r8
        int16_t delta_angle = angle - last_angle_rel;
 8019bba:	b29a      	uxth	r2, r3
 8019bbc:	fa10 f383 	uxtah	r3, r0, r3
        if(LV_ABS(delta_angle) > 280) {
 8019bc0:	b21b      	sxth	r3, r3
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	bfb8      	it	lt
 8019bc6:	425b      	neglt	r3, r3
 8019bc8:	b29b      	uxth	r3, r3
 8019bca:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8019bce:	d940      	bls.n	8019c52 <lv_arc_event+0x1b6>
            if(arc->min_close) angle = 0;
 8019bd0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            else angle = deg_range;
 8019bd4:	f013 0f08 	tst.w	r3, #8
 8019bd8:	bf0c      	ite	eq
 8019bda:	4630      	moveq	r0, r6
 8019bdc:	2000      	movne	r0, #0
        delta_angle = angle - last_angle_rel;
 8019bde:	4410      	add	r0, r2
 8019be0:	b206      	sxth	r6, r0
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8019be2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8019be4:	f7fc fd4a 	bl	801667c <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 8019be8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019bea:	4358      	muls	r0, r3
 8019bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8019bf4:	b21a      	sxth	r2, r3
        if(delta_angle > delta_angle_max) {
 8019bf6:	4296      	cmp	r6, r2
 8019bf8:	dc05      	bgt.n	8019c06 <lv_arc_event+0x16a>
        else if(delta_angle < -delta_angle_max) {
 8019bfa:	4250      	negs	r0, r2
 8019bfc:	4286      	cmp	r6, r0
            delta_angle = -delta_angle_max;
 8019bfe:	bfb6      	itet	lt
 8019c00:	425b      	neglt	r3, r3
 8019c02:	4632      	movge	r2, r6
 8019c04:	b21a      	sxthlt	r2, r3
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 8019c06:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8019c08:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8019c0c:	f9b4 c032 	ldrsh.w	ip, [r4, #50]	; 0x32
 8019c10:	1a78      	subs	r0, r7, r1
        int16_t old_value =arc->value;
 8019c12:	f9b4 902e 	ldrsh.w	r9, [r4, #46]	; 0x2e
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 8019c16:	ebac 0603 	sub.w	r6, ip, r3
 8019c1a:	00c0      	lsls	r0, r0, #3
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 8019c1c:	f8cd c000 	str.w	ip, [sp]
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 8019c20:	fb90 f0f6 	sdiv	r0, r0, r6
        round = (round + 4) >> 4;
 8019c24:	1d06      	adds	r6, r0, #4
        angle +=arc->bg_angle_start;   /*Make the angle absolute again*/
 8019c26:	eb08 0001 	add.w	r0, r8, r1
 8019c2a:	eb00 1026 	add.w	r0, r0, r6, asr #4
 8019c2e:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 8019c30:	463a      	mov	r2, r7
 8019c32:	b200      	sxth	r0, r0
 8019c34:	f7fd fb77 	bl	8017326 <lv_map>
        if(new_value != lv_arc_get_value(obj)) {
 8019c38:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 8019c3c:	b206      	sxth	r6, r0
        if(new_value != lv_arc_get_value(obj)) {
 8019c3e:	42b3      	cmp	r3, r6
 8019c40:	d115      	bne.n	8019c6e <lv_arc_event+0x1d2>
        if(new_value ==arc->min_value || new_value ==arc->max_value) {
 8019c42:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8019c46:	42b3      	cmp	r3, r6
 8019c48:	d123      	bne.n	8019c92 <lv_arc_event+0x1f6>
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8019c4a:	f7fc fd09 	bl	8016660 <lv_tick_get>
 8019c4e:	63a0      	str	r0, [r4, #56]	; 0x38
 8019c50:	e766      	b.n	8019b20 <lv_arc_event+0x84>
            if(angle < deg_range / 2)arc->min_close = 1;
 8019c52:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8019c56:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8019c5a:	ebb0 0f66 	cmp.w	r0, r6, asr #1
 8019c5e:	bfb4      	ite	lt
 8019c60:	f043 0308 	orrlt.w	r3, r3, #8
            else arc->min_close = 0;
 8019c64:	f36f 03c3 	bfcge	r3, #3, #1
 8019c68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8019c6c:	e7b7      	b.n	8019bde <lv_arc_event+0x142>
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8019c6e:	f7fc fcf7 	bl	8016660 <lv_tick_get>
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8019c72:	4631      	mov	r1, r6
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8019c74:	63a0      	str	r0, [r4, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8019c76:	4628      	mov	r0, r5
 8019c78:	f7ff fef7 	bl	8019a6a <lv_arc_set_value>
            if(new_value != old_value) {
 8019c7c:	45b1      	cmp	r9, r6
 8019c7e:	d0e0      	beq.n	8019c42 <lv_arc_event+0x1a6>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8019c80:	2200      	movs	r2, #0
 8019c82:	211c      	movs	r1, #28
 8019c84:	4628      	mov	r0, r5
 8019c86:	f7e7 ff37 	bl	8001af8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8019c8a:	2801      	cmp	r0, #1
 8019c8c:	f47f af48 	bne.w	8019b20 <lv_arc_event+0x84>
 8019c90:	e7d7      	b.n	8019c42 <lv_arc_event+0x1a6>
        if(new_value ==arc->min_value || new_value ==arc->max_value) {
 8019c92:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8019c96:	42b3      	cmp	r3, r6
 8019c98:	f47f af42 	bne.w	8019b20 <lv_arc_event+0x84>
 8019c9c:	e7d5      	b.n	8019c4a <lv_arc_event+0x1ae>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8019c9e:	2e08      	cmp	r6, #8
 8019ca0:	d001      	beq.n	8019ca6 <lv_arc_event+0x20a>
 8019ca2:	2e03      	cmp	r6, #3
 8019ca4:	d11b      	bne.n	8019cde <lv_arc_event+0x242>
       arc->dragging = false;
 8019ca6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 8019caa:	4628      	mov	r0, r5
       arc->dragging = false;
 8019cac:	f36f 0300 	bfc	r3, #0, #1
 8019cb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 8019cb4:	f7e9 feac 	bl	8003a10 <lv_obj_get_group>
 8019cb8:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 8019cba:	f7e8 f93f 	bl	8001f3c <lv_group_get_editing>
 8019cbe:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8019cc0:	f7e8 f9b0 	bl	8002024 <lv_indev_get_act>
 8019cc4:	f7e8 f9b4 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019cc8:	2804      	cmp	r0, #4
 8019cca:	f47f af29 	bne.w	8019b20 <lv_arc_event+0x84>
            if(editing) lv_group_set_editing(g, false);
 8019cce:	2d00      	cmp	r5, #0
 8019cd0:	f43f af26 	beq.w	8019b20 <lv_arc_event+0x84>
 8019cd4:	2100      	movs	r1, #0
 8019cd6:	4620      	mov	r0, r4
 8019cd8:	f7e8 f8cc 	bl	8001e74 <lv_group_set_editing>
 8019cdc:	e720      	b.n	8019b20 <lv_arc_event+0x84>
    else if(code == LV_EVENT_KEY) {
 8019cde:	2e0d      	cmp	r6, #13
 8019ce0:	d122      	bne.n	8019d28 <lv_arc_event+0x28c>
        char c = *((char *)lv_event_get_param(e));
 8019ce2:	4638      	mov	r0, r7
 8019ce4:	f7e7 ff2c 	bl	8001b40 <lv_event_get_param>
 8019ce8:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value =arc->value;
 8019cea:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8019cee:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8019cf2:	2a11      	cmp	r2, #17
 8019cf4:	d110      	bne.n	8019d18 <lv_arc_event+0x27c>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 8019cf6:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8019cf8:	3101      	adds	r1, #1
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8019cfa:	b209      	sxth	r1, r1
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	f7ff feb4 	bl	8019a6a <lv_arc_set_value>
        if(old_value !=arc->value) {
 8019d02:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 8019d06:	42b3      	cmp	r3, r6
 8019d08:	f43f af0a 	beq.w	8019b20 <lv_arc_event+0x84>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	211c      	movs	r1, #28
 8019d10:	4628      	mov	r0, r5
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8019d12:	f7e7 fef1 	bl	8001af8 <lv_event_send>
}
 8019d16:	e703      	b.n	8019b20 <lv_arc_event+0x84>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8019d18:	2b14      	cmp	r3, #20
 8019d1a:	d002      	beq.n	8019d22 <lv_arc_event+0x286>
 8019d1c:	2b12      	cmp	r3, #18
 8019d1e:	f47f aeff 	bne.w	8019b20 <lv_arc_event+0x84>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 8019d22:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8019d24:	3901      	subs	r1, #1
 8019d26:	e7e8      	b.n	8019cfa <lv_arc_event+0x25e>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8019d28:	2e13      	cmp	r6, #19
 8019d2a:	d153      	bne.n	8019dd4 <lv_arc_event+0x338>
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019d2c:	2100      	movs	r1, #0
 8019d2e:	4628      	mov	r0, r5
 8019d30:	f7ff fab3 	bl	801929a <lv_obj_get_style_pad_left>
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019d34:	2100      	movs	r1, #0
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019d36:	4604      	mov	r4, r0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019d38:	4628      	mov	r0, r5
 8019d3a:	f7ff fab5 	bl	80192a8 <lv_obj_get_style_pad_right>
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019d3e:	2100      	movs	r1, #0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8019d40:	4681      	mov	r9, r0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019d42:	4628      	mov	r0, r5
 8019d44:	f7ff fab7 	bl	80192b6 <lv_obj_get_style_pad_top>
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8019d48:	2100      	movs	r1, #0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8019d4a:	4680      	mov	r8, r0
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8019d4c:	4628      	mov	r0, r5
 8019d4e:	f7ff fab9 	bl	80192c4 <lv_obj_get_style_pad_bottom>
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8019d52:	454c      	cmp	r4, r9
 8019d54:	4621      	mov	r1, r4
 8019d56:	bfb8      	it	lt
 8019d58:	4649      	movlt	r1, r9
 8019d5a:	b20a      	sxth	r2, r1
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019d5c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8019d60:	4542      	cmp	r2, r8
 8019d62:	bfb8      	it	lt
 8019d64:	4642      	movlt	r2, r8
 8019d66:	b214      	sxth	r4, r2
 8019d68:	42a0      	cmp	r0, r4
 8019d6a:	bfb8      	it	lt
 8019d6c:	4620      	movlt	r0, r4
 8019d6e:	b206      	sxth	r6, r0
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019d70:	4628      	mov	r0, r5
 8019d72:	f7ff fa92 	bl	801929a <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019d76:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019d7a:	4604      	mov	r4, r0
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019d7c:	4628      	mov	r0, r5
 8019d7e:	f7ff fa93 	bl	80192a8 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019d82:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019d86:	4681      	mov	r9, r0
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019d88:	4628      	mov	r0, r5
 8019d8a:	f7ff fa94 	bl	80192b6 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019d8e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019d92:	4680      	mov	r8, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019d94:	4628      	mov	r0, r5
 8019d96:	f7ff fa95 	bl	80192c4 <lv_obj_get_style_pad_bottom>
 8019d9a:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 8019d9c:	4638      	mov	r0, r7
 8019d9e:	f7e7 fecf 	bl	8001b40 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8019da2:	454c      	cmp	r4, r9
        lv_coord_t * s = lv_event_get_param(e);
 8019da4:	4602      	mov	r2, r0
        *s = LV_MAX(*s, knob_pad - bg_pad);
 8019da6:	f9b0 0000 	ldrsh.w	r0, [r0]
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8019daa:	bfb8      	it	lt
 8019dac:	464c      	movlt	r4, r9
 8019dae:	b224      	sxth	r4, r4
 8019db0:	4544      	cmp	r4, r8
 8019db2:	bfb8      	it	lt
 8019db4:	4644      	movlt	r4, r8
 8019db6:	b223      	sxth	r3, r4
 8019db8:	42ab      	cmp	r3, r5
 8019dba:	bfb8      	it	lt
 8019dbc:	462b      	movlt	r3, r5
 8019dbe:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad - bg_pad);
 8019dc0:	b21b      	sxth	r3, r3
 8019dc2:	1b9b      	subs	r3, r3, r6
 8019dc4:	4283      	cmp	r3, r0
 8019dc6:	bfb8      	it	lt
 8019dc8:	4603      	movlt	r3, r0
 8019dca:	8013      	strh	r3, [r2, #0]
 8019dcc:	e6a8      	b.n	8019b20 <lv_arc_event+0x84>
 8019dce:	bf00      	nop
 8019dd0:	08029f10 	.word	0x08029f10
    } else if(code == LV_EVENT_DRAW_MAIN) {
 8019dd4:	2e15      	cmp	r6, #21
 8019dd6:	f47f aea3 	bne.w	8019b20 <lv_arc_event+0x84>
    lv_obj_t * obj = lv_event_get_target(e);
 8019dda:	4638      	mov	r0, r7
    get_center(obj, &center, &arc_r);
 8019ddc:	ae07      	add	r6, sp, #28
    lv_obj_t * obj = lv_event_get_target(e);
 8019dde:	f7e7 feab 	bl	8001b38 <lv_event_get_target>
 8019de2:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8019de4:	4638      	mov	r0, r7
 8019de6:	f7e7 feab 	bl	8001b40 <lv_event_get_param>
 8019dea:	4607      	mov	r7, r0
    get_center(obj, &center, &arc_r);
 8019dec:	f10d 021a 	add.w	r2, sp, #26
 8019df0:	4631      	mov	r1, r6
 8019df2:	4620      	mov	r0, r4
 8019df4:	f7ff fa98 	bl	8019328 <get_center>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 8019df8:	4639      	mov	r1, r7
 8019dfa:	a81a      	add	r0, sp, #104	; 0x68
 8019dfc:	f7ea fcac 	bl	8004758 <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 8019e00:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	dd2d      	ble.n	8019e64 <lv_arc_event+0x3c8>
        lv_draw_arc_dsc_init(&arc_dsc);
 8019e08:	a80a      	add	r0, sp, #40	; 0x28
 8019e0a:	f7ee fb1e 	bl	800844a <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 8019e0e:	aa0a      	add	r2, sp, #40	; 0x28
 8019e10:	2100      	movs	r1, #0
 8019e12:	4620      	mov	r0, r4
 8019e14:	f7ea fbee 	bl	80045f4 <lv_obj_init_draw_arc_dsc>
        obj_draw_dsc.part = LV_PART_MAIN;
 8019e18:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019e1a:	aa1a      	add	r2, sp, #104	; 0x68
 8019e1c:	211a      	movs	r1, #26
        obj_draw_dsc.part = LV_PART_MAIN;
 8019e1e:	9327      	str	r3, [sp, #156]	; 0x9c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019e20:	4620      	mov	r0, r4
        obj_draw_dsc.radius = arc_r;
 8019e22:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        obj_draw_dsc.p1 = &center;
 8019e26:	9621      	str	r6, [sp, #132]	; 0x84
        obj_draw_dsc.radius = arc_r;
 8019e28:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        obj_draw_dsc.arc_dsc = &arc_dsc;
 8019e2c:	ab0a      	add	r3, sp, #40	; 0x28
 8019e2e:	9320      	str	r3, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019e30:	f7e7 fe62 	bl	8001af8 <lv_event_send>
        lv_draw_arc(center.x, center.y, arc_r, arc->bg_angle_start + arc->rotation,
 8019e34:	a90a      	add	r1, sp, #40	; 0x28
 8019e36:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8019e38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019e3a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019e3e:	4413      	add	r3, r2
 8019e40:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019e44:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	440a      	add	r2, r1
 8019e4a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019e4e:	b292      	uxth	r2, r2
 8019e50:	9200      	str	r2, [sp, #0]
 8019e52:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019e56:	f7ee fb03 	bl	8008460 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8019e5a:	aa1a      	add	r2, sp, #104	; 0x68
 8019e5c:	211b      	movs	r1, #27
 8019e5e:	4620      	mov	r0, r4
 8019e60:	f7e7 fe4a 	bl	8001af8 <lv_event_send>
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 8019e64:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8019e68:	4620      	mov	r0, r4
 8019e6a:	f7ff fa16 	bl	801929a <lv_obj_get_style_pad_left>
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8019e6e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 8019e72:	4605      	mov	r5, r0
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8019e74:	4620      	mov	r0, r4
 8019e76:	f7ff fa17 	bl	80192a8 <lv_obj_get_style_pad_right>
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8019e7a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 8019e7e:	4681      	mov	r9, r0
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8019e80:	4620      	mov	r0, r4
 8019e82:	f7ff fa18 	bl	80192b6 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 8019e86:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 8019e8a:	4680      	mov	r8, r0
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 8019e8c:	4620      	mov	r0, r4
 8019e8e:	f7ff fa19 	bl	80192c4 <lv_obj_get_style_pad_bottom>
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 8019e92:	454d      	cmp	r5, r9
 8019e94:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8019e98:	bfb8      	it	lt
 8019e9a:	464d      	movlt	r5, r9
 8019e9c:	b22d      	sxth	r5, r5
 8019e9e:	4545      	cmp	r5, r8
 8019ea0:	bfb8      	it	lt
 8019ea2:	4645      	movlt	r5, r8
 8019ea4:	b22d      	sxth	r5, r5
 8019ea6:	4285      	cmp	r5, r0
 8019ea8:	bfac      	ite	ge
 8019eaa:	1b5d      	subge	r5, r3, r5
 8019eac:	1a1d      	sublt	r5, r3, r0
 8019eae:	fa1f f885 	uxth.w	r8, r5
 8019eb2:	b22d      	sxth	r5, r5
    if(indic_r > 0) {
 8019eb4:	2d00      	cmp	r5, #0
 8019eb6:	dd2c      	ble.n	8019f12 <lv_arc_event+0x476>
        lv_draw_arc_dsc_init(&arc_dsc);
 8019eb8:	a80a      	add	r0, sp, #40	; 0x28
 8019eba:	f7ee fac6 	bl	800844a <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 8019ebe:	aa0a      	add	r2, sp, #40	; 0x28
 8019ec0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f7ea fb95 	bl	80045f4 <lv_obj_init_draw_arc_dsc>
        obj_draw_dsc.part = LV_PART_INDICATOR;
 8019eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019ece:	aa1a      	add	r2, sp, #104	; 0x68
 8019ed0:	211a      	movs	r1, #26
        obj_draw_dsc.part = LV_PART_INDICATOR;
 8019ed2:	9327      	str	r3, [sp, #156]	; 0x9c
        obj_draw_dsc.arc_dsc = &arc_dsc;
 8019ed4:	ab0a      	add	r3, sp, #40	; 0x28
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019ed6:	4620      	mov	r0, r4
        obj_draw_dsc.p1 = &center;
 8019ed8:	9621      	str	r6, [sp, #132]	; 0x84
        obj_draw_dsc.arc_dsc = &arc_dsc;
 8019eda:	9320      	str	r3, [sp, #128]	; 0x80
        obj_draw_dsc.radius = indic_r;
 8019edc:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019ee0:	f7e7 fe0a 	bl	8001af8 <lv_event_send>
        lv_draw_arc(center.x, center.y, indic_r, arc->indic_angle_start +arc->rotation,
 8019ee4:	a90a      	add	r1, sp, #40	; 0x28
 8019ee6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8019ee8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019eea:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8019eee:	4413      	add	r3, r2
 8019ef0:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019ef4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	440a      	add	r2, r1
 8019efa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8019efe:	b292      	uxth	r2, r2
 8019f00:	9200      	str	r2, [sp, #0]
 8019f02:	4642      	mov	r2, r8
 8019f04:	f7ee faac 	bl	8008460 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8019f08:	aa1a      	add	r2, sp, #104	; 0x68
 8019f0a:	211b      	movs	r1, #27
 8019f0c:	4620      	mov	r0, r4
 8019f0e:	f7e7 fdf3 	bl	8001af8 <lv_event_send>
 8019f12:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019f16:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8019f1a:	4620      	mov	r0, r4
    get_knob_area(obj, &center, arc_r, &knob_area);
 8019f1c:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8019f20:	f7ed f83a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t indic_width_half = indic_width / 2;
 8019f24:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    if(arc->type == LV_ARC_MODE_NORMAL) {
 8019f28:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    lv_coord_t indic_width_half = indic_width / 2;
 8019f2c:	fa05 f080 	sxtah	r0, r5, r0
    uint16_t angle =arc->rotation;
 8019f30:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 8019f34:	f013 0306 	ands.w	r3, r3, #6
    r -= indic_width_half;
 8019f38:	f3c0 054f 	ubfx	r5, r0, #1, #16
 8019f3c:	eba6 0605 	sub.w	r6, r6, r5
 8019f40:	b236      	sxth	r6, r6
    if(arc->type == LV_ARC_MODE_NORMAL) {
 8019f42:	d101      	bne.n	8019f48 <lv_arc_event+0x4ac>
        else angle +=arc->indic_angle_end;
 8019f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019f46:	e002      	b.n	8019f4e <lv_arc_event+0x4b2>
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 8019f48:	2b04      	cmp	r3, #4
 8019f4a:	d163      	bne.n	801a014 <lv_arc_event+0x578>
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 8019f4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        else angle +=arc->indic_angle_end;
 8019f4e:	4498      	add	r8, r3
 8019f50:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8019f54:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 8019f58:	b200      	sxth	r0, r0
 8019f5a:	f7fd f937 	bl	80171cc <lv_trigo_sin>
 8019f5e:	9005      	str	r0, [sp, #20]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8019f60:	fa0f f088 	sxth.w	r0, r8
 8019f64:	f7fd f932 	bl	80171cc <lv_trigo_sin>
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019f68:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8019f6c:	4683      	mov	fp, r0
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019f6e:	4620      	mov	r0, r4
 8019f70:	f7ff f993 	bl	801929a <lv_obj_get_style_pad_left>
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019f74:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019f78:	4681      	mov	r9, r0
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f7ff f994 	bl	80192a8 <lv_obj_get_style_pad_right>
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019f80:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019f84:	4682      	mov	sl, r0
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019f86:	4620      	mov	r0, r4
 8019f88:	f7ff f995 	bl	80192b6 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019f8c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019f90:	4680      	mov	r8, r0
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019f92:	4620      	mov	r0, r4
 8019f94:	f7ff f996 	bl	80192c4 <lv_obj_get_style_pad_bottom>
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8019f98:	9b05      	ldr	r3, [sp, #20]
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8019f9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8019f9e:	44a9      	add	r9, r5
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8019fa0:	4373      	muls	r3, r6
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8019fa2:	44aa      	add	sl, r5
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8019fa4:	fb06 f60b 	mul.w	r6, r6, fp
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8019fa8:	44a8      	add	r8, r5
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8019faa:	eb02 32e3 	add.w	r2, r2, r3, asr #15
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8019fae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8019fb2:	4405      	add	r5, r0
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8019fb4:	eb03 33e6 	add.w	r3, r3, r6, asr #15
    obj_draw_dsc.draw_area = &knob_area;
 8019fb8:	ae08      	add	r6, sp, #32
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8019fba:	b292      	uxth	r2, r2
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8019fbc:	b29b      	uxth	r3, r3
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8019fbe:	eba2 0909 	sub.w	r9, r2, r9
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8019fc2:	4452      	add	r2, sl
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8019fc4:	eba3 0808 	sub.w	r8, r3, r8
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8019fc8:	442b      	add	r3, r5
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8019fca:	ad0d      	add	r5, sp, #52	; 0x34
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8019fcc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8019fd0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8019fd4:	4628      	mov	r0, r5
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8019fd6:	f8ad 9020 	strh.w	r9, [sp, #32]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8019fda:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8019fde:	f7f2 fb6b 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8019fe2:	462a      	mov	r2, r5
 8019fe4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8019fe8:	4620      	mov	r0, r4
 8019fea:	f7ea f8d1 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    obj_draw_dsc.part = LV_PART_KNOB;
 8019fee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019ff2:	aa1a      	add	r2, sp, #104	; 0x68
 8019ff4:	211a      	movs	r1, #26
 8019ff6:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_KNOB;
 8019ff8:	9327      	str	r3, [sp, #156]	; 0x9c
    obj_draw_dsc.rect_dsc = &knob_rect_dsc;
 8019ffa:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8019ffe:	f7e7 fd7b 	bl	8001af8 <lv_event_send>
    lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
 801a002:	462a      	mov	r2, r5
 801a004:	4639      	mov	r1, r7
 801a006:	4630      	mov	r0, r6
 801a008:	f7f2 fb78 	bl	800c6fc <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a00c:	aa1a      	add	r2, sp, #104	; 0x68
 801a00e:	211b      	movs	r1, #27
 801a010:	4620      	mov	r0, r4
 801a012:	e67e      	b.n	8019d12 <lv_arc_event+0x276>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 801a014:	2b02      	cmp	r3, #2
 801a016:	d19d      	bne.n	8019f54 <lv_arc_event+0x4b8>
        int32_t range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 801a018:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 801a01c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801a020:	4413      	add	r3, r2
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a022:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
        int32_t range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 801a026:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a02a:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 801a02e:	da89      	bge.n	8019f44 <lv_arc_event+0x4a8>
 801a030:	e78c      	b.n	8019f4c <lv_arc_event+0x4b0>
 801a032:	bf00      	nop

0801a034 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a034:	8883      	ldrh	r3, [r0, #4]
 801a036:	8800      	ldrh	r0, [r0, #0]
 801a038:	3301      	adds	r3, #1
 801a03a:	1a18      	subs	r0, r3, r0
}
 801a03c:	b200      	sxth	r0, r0
 801a03e:	4770      	bx	lr

0801a040 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a040:	88c3      	ldrh	r3, [r0, #6]
 801a042:	8840      	ldrh	r0, [r0, #2]
 801a044:	3301      	adds	r3, #1
 801a046:	1a18      	subs	r0, r3, r0
}
 801a048:	b200      	sxth	r0, r0
 801a04a:	4770      	bx	lr

0801a04c <lv_bar_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_bar_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801a04c:	b510      	push	{r4, lr}
 801a04e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_bar_t * bar = (lv_bar_t *)obj;

    lv_anim_del(&bar->cur_value_anim, NULL);
 801a050:	2100      	movs	r1, #0
 801a052:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801a056:	f7fc fc33 	bl	80168c0 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 801a05a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801a05e:	2100      	movs	r1, #0
}
 801a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_anim_del(&bar->start_value_anim, NULL);
 801a064:	f7fc bc2c 	b.w	80168c0 <lv_anim_del>

0801a068 <lv_bar_anim_ready>:
    lv_obj_invalidate(bar_anim->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
    _lv_bar_anim_t * var = a->var;
 801a068:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
    lv_bar_t * bar = (lv_bar_t *)obj;

    var->anim_state = LV_BAR_ANIM_STATE_INV;
 801a06a:	f04f 32ff 	mov.w	r2, #4294967295
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 801a06e:	6818      	ldr	r0, [r3, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 801a070:	60da      	str	r2, [r3, #12]
    if(var == &bar->cur_value_anim)
 801a072:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 801a076:	4293      	cmp	r3, r2
 801a078:	d103      	bne.n	801a082 <lv_bar_anim_ready+0x1a>
        bar->cur_value = var->anim_end;
 801a07a:	689b      	ldr	r3, [r3, #8]
 801a07c:	6243      	str	r3, [r0, #36]	; 0x24
    else if(var == &bar->start_value_anim)
        bar->start_value = var->anim_end;
    lv_obj_invalidate(var->bar);
 801a07e:	f7ea be63 	b.w	8004d48 <lv_obj_invalidate>
    else if(var == &bar->start_value_anim)
 801a082:	f100 024c 	add.w	r2, r0, #76	; 0x4c
 801a086:	4293      	cmp	r3, r2
        bar->start_value = var->anim_end;
 801a088:	bf04      	itt	eq
 801a08a:	689b      	ldreq	r3, [r3, #8]
 801a08c:	6303      	streq	r3, [r0, #48]	; 0x30
 801a08e:	e7f6      	b.n	801a07e <lv_bar_anim_ready+0x16>

0801a090 <lv_bar_anim>:
    bar_anim->anim_state    = value;
 801a090:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 801a092:	6800      	ldr	r0, [r0, #0]
 801a094:	f7ea be58 	b.w	8004d48 <lv_obj_invalidate>

0801a098 <lv_bar_set_value_with_anim.part.0>:
}

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a098:	b530      	push	{r4, r5, lr}
 801a09a:	b093      	sub	sp, #76	; 0x4c
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_info->anim_start = anim_info->anim_end;
            anim_info->anim_end   = new_value;
        }
        *value_ptr = new_value;
 801a09c:	6011      	str	r1, [r2, #0]
static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a09e:	4605      	mov	r5, r0
        /*Stop the previous animation if it exists*/
        lv_anim_del(anim_info, NULL);
 801a0a0:	2100      	movs	r1, #0
 801a0a2:	4618      	mov	r0, r3
static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a0a4:	461c      	mov	r4, r3
        lv_anim_del(anim_info, NULL);
 801a0a6:	f7fc fc0b 	bl	80168c0 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801a0aa:	a801      	add	r0, sp, #4
 801a0ac:	f7fc fbee 	bl	801688c <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 801a0b0:	4b0a      	ldr	r3, [pc, #40]	; (801a0dc <lv_bar_set_value_with_anim.part.0+0x44>)
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
 801a0b2:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801a0b4:	2265      	movs	r2, #101	; 0x65
    a->exec_cb = exec_cb;
 801a0b6:	9302      	str	r3, [sp, #8]
    a->current_value = start;
    a->end_value = end;
 801a0b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a0bc:	4628      	mov	r0, r5
    a->var = var;
 801a0be:	9401      	str	r4, [sp, #4]
    a->end_value = end;
 801a0c0:	930a      	str	r3, [sp, #40]	; 0x28
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 801a0c2:	4b07      	ldr	r3, [pc, #28]	; (801a0e0 <lv_bar_set_value_with_anim.part.0+0x48>)
    a->current_value = start;
 801a0c4:	e9cd 1108 	strd	r1, r1, [sp, #32]
    a->ready_cb = ready_cb;
 801a0c8:	9304      	str	r3, [sp, #16]
 801a0ca:	f7ec ff65 	bl	8006f98 <lv_obj_get_style_prop>
    a->time = duration;
 801a0ce:	900b      	str	r0, [sp, #44]	; 0x2c
        lv_anim_set_var(&a, anim_info);
        lv_anim_set_exec_cb(&a, lv_bar_anim);
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
 801a0d0:	a801      	add	r0, sp, #4
 801a0d2:	f7fc fc21 	bl	8016918 <lv_anim_start>
    }
}
 801a0d6:	b013      	add	sp, #76	; 0x4c
 801a0d8:	bd30      	pop	{r4, r5, pc}
 801a0da:	bf00      	nop
 801a0dc:	0801a091 	.word	0x0801a091
 801a0e0:	0801a069 	.word	0x0801a069

0801a0e4 <draw_indic>:
{
 801a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e8:	4605      	mov	r5, r0
 801a0ea:	b0bf      	sub	sp, #252	; 0xfc
    lv_obj_t * obj = lv_event_get_target(e);
 801a0ec:	f7e7 fd24 	bl	8001b38 <lv_event_get_target>
 801a0f0:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	f7e7 fd24 	bl	8001b40 <lv_event_get_param>
    lv_obj_get_coords(obj, &bar_coords);
 801a0f8:	a90b      	add	r1, sp, #44	; 0x2c
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a0fa:	4683      	mov	fp, r0
    lv_obj_get_coords(obj, &bar_coords);
 801a0fc:	4620      	mov	r0, r4
 801a0fe:	f7ea fc7e 	bl	80049fe <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a102:	f640 020a 	movw	r2, #2058	; 0x80a
 801a106:	2100      	movs	r1, #0
 801a108:	4620      	mov	r0, r4
 801a10a:	f7ec ff45 	bl	8006f98 <lv_obj_get_style_prop>
 801a10e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a110:	f640 020b 	movw	r2, #2059	; 0x80b
 801a114:	2100      	movs	r1, #0
 801a116:	4620      	mov	r0, r4
    bar_coords.x1 -= transf_w;
 801a118:	b2b6      	uxth	r6, r6
 801a11a:	f7ec ff3d 	bl	8006f98 <lv_obj_get_style_prop>
 801a11e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    bar_coords.y1 -= transf_h;
 801a122:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a126:	b285      	uxth	r5, r0
    bar_coords.x1 -= transf_w;
 801a128:	1bbb      	subs	r3, r7, r6
    bar_coords.x2 += transf_w;
 801a12a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    bar_coords.x1 -= transf_w;
 801a12e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    bar_coords.y1 -= transf_h;
 801a132:	1b4b      	subs	r3, r1, r5
    bar_coords.x2 += transf_w;
 801a134:	4432      	add	r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a136:	3601      	adds	r6, #1
    bar_coords.y1 -= transf_h;
 801a138:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    bar_coords.y2 += transf_h;
 801a13c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    bar_coords.x2 += transf_w;
 801a140:	b292      	uxth	r2, r2
    bar_coords.y2 += transf_h;
 801a142:	442b      	add	r3, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a144:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a146:	4416      	add	r6, r2
    bar_coords.x2 += transf_w;
 801a148:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    bar_coords.y2 += transf_h;
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	1bf6      	subs	r6, r6, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a150:	441d      	add	r5, r3
 801a152:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a156:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a158:	1a6d      	subs	r5, r5, r1
    int32_t range = bar->max_value - bar->min_value;
 801a15a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 801a15e:	b22d      	sxth	r5, r5
 801a160:	1aca      	subs	r2, r1, r3
 801a162:	9202      	str	r2, [sp, #8]
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 801a164:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 801a168:	f002 0203 	and.w	r2, r2, #3
 801a16c:	2a01      	cmp	r2, #1
 801a16e:	f040 81cd 	bne.w	801a50c <draw_indic+0x428>
 801a172:	2b00      	cmp	r3, #0
 801a174:	f280 81ca 	bge.w	801a50c <draw_indic+0x428>
 801a178:	2900      	cmp	r1, #0
 801a17a:	f340 81c7 	ble.w	801a50c <draw_indic+0x428>
 801a17e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a180:	1ad0      	subs	r0, r2, r3
 801a182:	4243      	negs	r3, r0
 801a184:	4143      	adcs	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a186:	f241 0212 	movw	r2, #4114	; 0x1012
 801a18a:	2100      	movs	r1, #0
 801a18c:	4620      	mov	r0, r4
    bool sym = false;
 801a18e:	9303      	str	r3, [sp, #12]
 801a190:	f7ec ff02 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a194:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a198:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a19a:	2100      	movs	r1, #0
 801a19c:	4620      	mov	r0, r4
    lv_area_copy(&bar->indic_area, &bar_coords);
 801a19e:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 801a1a2:	f7ec fef9 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a1a6:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a1aa:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a1ac:	2100      	movs	r1, #0
 801a1ae:	4620      	mov	r0, r4
 801a1b0:	f7ec fef2 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a1b4:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a1b8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a1ba:	2100      	movs	r1, #0
 801a1bc:	4620      	mov	r0, r4
 801a1be:	f7ec feeb 	bl	8006f98 <lv_obj_get_style_prop>
    dest->x2 = src->x2;
 801a1c2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    bar->indic_area.x1 += bg_left;
 801a1c6:	b2ba      	uxth	r2, r7
    dest->y1 = src->y1;
 801a1c8:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    dest->y2 = src->y2;
 801a1cc:	f9bd e032 	ldrsh.w	lr, [sp, #50]	; 0x32
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a1d0:	42b5      	cmp	r5, r6
    bar->indic_area.x1 += bg_left;
 801a1d2:	9206      	str	r2, [sp, #24]
    bar->indic_area.x2 -= bg_right;
 801a1d4:	fa1f f289 	uxth.w	r2, r9
    bar->indic_area.x1 += bg_left;
 801a1d8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
    bar->indic_area.x2 -= bg_right;
 801a1dc:	eba3 0302 	sub.w	r3, r3, r2
 801a1e0:	9204      	str	r2, [sp, #16]
    bar->indic_area.y1 += bg_top;
 801a1e2:	fa1f f288 	uxth.w	r2, r8
    bar->indic_area.x1 += bg_left;
 801a1e6:	fa1c f787 	uxtah	r7, ip, r7
    bar->indic_area.y1 += bg_top;
 801a1ea:	fa11 f888 	uxtah	r8, r1, r8
    bar->indic_area.x2 -= bg_right;
 801a1ee:	b29b      	uxth	r3, r3
    bar->indic_area.y1 += bg_top;
 801a1f0:	9207      	str	r2, [sp, #28]
    bar->indic_area.y2 -= bg_bottom;
 801a1f2:	b282      	uxth	r2, r0
    bar->indic_area.x1 += bg_left;
 801a1f4:	b2bf      	uxth	r7, r7
    bar->indic_area.x2 -= bg_right;
 801a1f6:	8723      	strh	r3, [r4, #56]	; 0x38
    bar->indic_area.y2 -= bg_bottom;
 801a1f8:	9205      	str	r2, [sp, #20]
 801a1fa:	ebae 0202 	sub.w	r2, lr, r2
    bar->indic_area.y1 += bg_top;
 801a1fe:	fa1f f888 	uxth.w	r8, r8
    bar->indic_area.x1 += bg_left;
 801a202:	86a7      	strh	r7, [r4, #52]	; 0x34
    bar->indic_area.y2 -= bg_bottom;
 801a204:	b292      	uxth	r2, r2
    bar->indic_area.y1 += bg_top;
 801a206:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 801a20a:	8762      	strh	r2, [r4, #58]	; 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a20c:	f300 8180 	bgt.w	801a510 <draw_indic+0x42c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a210:	3201      	adds	r2, #1
 801a212:	eba2 0208 	sub.w	r2, r2, r8
 801a216:	b212      	sxth	r2, r2
 801a218:	2a03      	cmp	r2, #3
 801a21a:	dc09      	bgt.n	801a230 <draw_indic+0x14c>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a21c:	8ae2      	ldrh	r2, [r4, #22]
 801a21e:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801a222:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801a226:	b29b      	uxth	r3, r3
 801a228:	1e9a      	subs	r2, r3, #2
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801a22a:	3302      	adds	r3, #2
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a22c:	86e2      	strh	r2, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801a22e:	8763      	strh	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a230:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
    lv_coord_t anim_length = hor ? indicw : indich;
 801a234:	42b5      	cmp	r5, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a236:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a23a:	bfd8      	it	le
 801a23c:	3301      	addle	r3, #1
 801a23e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a242:	bfc8      	it	gt
 801a244:	1c53      	addgt	r3, r2, #1
 801a246:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a24a:	bfd8      	it	le
 801a24c:	1a5b      	suble	r3, r3, r1
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 801a24e:	6da7      	ldr	r7, [r4, #88]	; 0x58
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a250:	bfc8      	it	gt
 801a252:	1a1b      	subgt	r3, r3, r0
    if(hor) {
 801a254:	42b5      	cmp	r5, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a256:	b29b      	uxth	r3, r3
        indic_length_calc = lv_area_get_width;
 801a258:	bfd6      	itet	le
 801a25a:	4abe      	ldrle	r2, [pc, #760]	; (801a554 <draw_indic+0x470>)
        indic_length_calc = lv_area_get_height;
 801a25c:	4abe      	ldrgt	r2, [pc, #760]	; (801a558 <draw_indic+0x474>)
        axis2 = &bar->indic_area.x2;
 801a25e:	f104 0938 	addle.w	r9, r4, #56	; 0x38
 801a262:	b21b      	sxth	r3, r3
        axis2 = &bar->indic_area.y2;
 801a264:	bfc8      	it	gt
 801a266:	f104 093a 	addgt.w	r9, r4, #58	; 0x3a
        indic_length_calc = lv_area_get_height;
 801a26a:	9208      	str	r2, [sp, #32]
 801a26c:	9301      	str	r3, [sp, #4]
        axis1 = &bar->indic_area.x1;
 801a26e:	bfd4      	ite	le
 801a270:	4653      	movle	r3, sl
        axis1 = &bar->indic_area.y1;
 801a272:	f104 0336 	addgt.w	r3, r4, #54	; 0x36
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 801a276:	1c79      	adds	r1, r7, #1
 801a278:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a27a:	f000 815a 	beq.w	801a532 <draw_indic+0x44e>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801a27e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a280:	eba1 0c02 	sub.w	ip, r1, r2
 801a284:	9901      	ldr	r1, [sp, #4]
 801a286:	fb01 fc0c 	mul.w	ip, r1, ip
 801a28a:	9902      	ldr	r1, [sp, #8]
 801a28c:	fb9c fcf1 	sdiv	ip, ip, r1
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 801a290:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a292:	1a88      	subs	r0, r1, r2
 801a294:	9901      	ldr	r1, [sp, #4]
 801a296:	4348      	muls	r0, r1
 801a298:	9902      	ldr	r1, [sp, #8]
 801a29a:	fb90 f0f1 	sdiv	r0, r0, r1
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 801a29e:	fa0f f18c 	sxth.w	r1, ip
 801a2a2:	b200      	sxth	r0, r0
 801a2a4:	1a40      	subs	r0, r0, r1
 801a2a6:	4347      	muls	r7, r0
 801a2a8:	bf48      	it	mi
 801a2aa:	37ff      	addmi	r7, #255	; 0xff
        anim_start_value_x += anim_start_value_start_x;
 801a2ac:	eb0c 2727 	add.w	r7, ip, r7, asr #8
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801a2b0:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801a2b4:	b23f      	sxth	r7, r7
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801a2b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a2ba:	f000 8142 	beq.w	801a542 <draw_indic+0x45e>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801a2be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a2c0:	9901      	ldr	r1, [sp, #4]
 801a2c2:	1a80      	subs	r0, r0, r2
 801a2c4:	4348      	muls	r0, r1
 801a2c6:	9902      	ldr	r1, [sp, #8]
 801a2c8:	fb90 f0f1 	sdiv	r0, r0, r1
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 801a2cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a2ce:	1a89      	subs	r1, r1, r2
 801a2d0:	9a01      	ldr	r2, [sp, #4]
 801a2d2:	4351      	muls	r1, r2
 801a2d4:	9a02      	ldr	r2, [sp, #8]
 801a2d6:	fb91 f2f2 	sdiv	r2, r1, r2
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801a2da:	b211      	sxth	r1, r2
 801a2dc:	b202      	sxth	r2, r0
 801a2de:	1a8a      	subs	r2, r1, r2
                                                      bar->cur_value_anim.anim_state) /
 801a2e0:	4641      	mov	r1, r8
 801a2e2:	4351      	muls	r1, r2
 801a2e4:	460a      	mov	r2, r1
 801a2e6:	bf48      	it	mi
 801a2e8:	32ff      	addmi	r2, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801a2ea:	eb00 2822 	add.w	r8, r0, r2, asr #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a2ee:	f241 426a 	movw	r2, #5226	; 0x146a
 801a2f2:	2100      	movs	r1, #0
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	9309      	str	r3, [sp, #36]	; 0x24
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801a2f8:	fa0f f888 	sxth.w	r8, r8
 801a2fc:	f7ec fe4c 	bl	8006f98 <lv_obj_get_style_prop>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 801a300:	42b5      	cmp	r5, r6
 801a302:	fa1f f188 	uxth.w	r1, r8
 801a306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a308:	b2ba      	uxth	r2, r7
 801a30a:	f300 816f 	bgt.w	801a5ec <draw_indic+0x508>
 801a30e:	b2c0      	uxtb	r0, r0
 801a310:	2801      	cmp	r0, #1
 801a312:	d108      	bne.n	801a326 <draw_indic+0x242>
        anim_start_value_x = -anim_start_value_x;
 801a314:	4257      	negs	r7, r2
        anim_cur_value_x = -anim_cur_value_x;
 801a316:	f1c1 0800 	rsb	r8, r1, #0
        anim_start_value_x = -anim_start_value_x;
 801a31a:	461a      	mov	r2, r3
 801a31c:	464b      	mov	r3, r9
        anim_cur_value_x = -anim_cur_value_x;
 801a31e:	fa0f f888 	sxth.w	r8, r8
        anim_start_value_x = -anim_start_value_x;
 801a322:	b23f      	sxth	r7, r7
 801a324:	4691      	mov	r9, r2
        *axis2 = *axis1 + anim_cur_value_x;
 801a326:	881a      	ldrh	r2, [r3, #0]
 801a328:	4490      	add	r8, r2
 801a32a:	f8a9 8000 	strh.w	r8, [r9]
        *axis1 += anim_start_value_x;
 801a32e:	881a      	ldrh	r2, [r3, #0]
 801a330:	4417      	add	r7, r2
 801a332:	801f      	strh	r7, [r3, #0]
    if(sym) {
 801a334:	9a03      	ldr	r2, [sp, #12]
 801a336:	2a00      	cmp	r2, #0
 801a338:	f000 813c 	beq.w	801a5b4 <draw_indic+0x4d0>
        shift = (-bar->min_value * anim_length) / range;
 801a33c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
        if(hor) {
 801a33e:	42b5      	cmp	r5, r6
        shift = (-bar->min_value * anim_length) / range;
 801a340:	9a01      	ldr	r2, [sp, #4]
 801a342:	f1c0 0100 	rsb	r1, r0, #0
 801a346:	f9b9 7000 	ldrsh.w	r7, [r9]
 801a34a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a34e:	fb02 f201 	mul.w	r2, r2, r1
 801a352:	4611      	mov	r1, r2
 801a354:	9a02      	ldr	r2, [sp, #8]
 801a356:	fb91 f1f2 	sdiv	r1, r1, r2
 801a35a:	b289      	uxth	r1, r1
        if(hor) {
 801a35c:	f300 80fe 	bgt.w	801a55c <draw_indic+0x478>
            zero = *axis1 + shift;
 801a360:	4401      	add	r1, r0
 801a362:	b209      	sxth	r1, r1
            if(*axis2 > zero)
 801a364:	428f      	cmp	r7, r1
                *axis1 = *axis2;
 801a366:	bfd6      	itet	le
 801a368:	801f      	strhle	r7, [r3, #0]
                *axis1 = zero;
 801a36a:	8019      	strhgt	r1, [r3, #0]
                *axis2 = zero;
 801a36c:	f8a9 1000 	strhle.w	r1, [r9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 801a370:	2260      	movs	r2, #96	; 0x60
 801a372:	2100      	movs	r1, #0
 801a374:	4620      	mov	r0, r4
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801a376:	462f      	mov	r7, r5
 801a378:	f7ec fe0e 	bl	8006f98 <lv_obj_get_style_prop>
 801a37c:	42b5      	cmp	r5, r6
    return (lv_coord_t)v.num;
 801a37e:	b200      	sxth	r0, r0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801a380:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801a384:	bfa8      	it	ge
 801a386:	4637      	movge	r7, r6
 801a388:	107f      	asrs	r7, r7, #1
 801a38a:	4287      	cmp	r7, r0
 801a38c:	bfa8      	it	ge
 801a38e:	4607      	movge	r7, r0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801a390:	4640      	mov	r0, r8
 801a392:	f7f2 f991 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 801a396:	4642      	mov	r2, r8
 801a398:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a39c:	4620      	mov	r0, r4
 801a39e:	f7e9 fef7 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a3a2:	4659      	mov	r1, fp
 801a3a4:	a82c      	add	r0, sp, #176	; 0xb0
 801a3a6:	f7ea f9d7 	bl	8004758 <lv_obj_draw_dsc_init>
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801a3aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3ae:	211a      	movs	r1, #26
 801a3b0:	aa2c      	add	r2, sp, #176	; 0xb0
 801a3b2:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801a3b4:	9339      	str	r3, [sp, #228]	; 0xe4
	obj_draw_dsc.draw_area = &bar->indic_area;
 801a3b6:	e9cd a82d 	strd	sl, r8, [sp, #180]	; 0xb4
	lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3ba:	f7e7 fb9d 	bl	8001af8 <lv_event_send>
    if((hor && lv_area_get_width(&bar->indic_area) > bg_radius * 2) ||
 801a3be:	42b5      	cmp	r5, r6
 801a3c0:	ea4f 0247 	mov.w	r2, r7, lsl #1
 801a3c4:	bfd7      	itett	le
 801a3c6:	8f23      	ldrhle	r3, [r4, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a3c8:	8f63      	ldrhgt	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a3ca:	3301      	addle	r3, #1
 801a3cc:	8ea1      	ldrhle	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a3ce:	bfc4      	itt	gt
 801a3d0:	3301      	addgt	r3, #1
 801a3d2:	8ee1      	ldrhgt	r1, [r4, #54]	; 0x36
 801a3d4:	1a5b      	subs	r3, r3, r1
       (!hor && lv_area_get_height(&bar->indic_area) > bg_radius * 2)) {
 801a3d6:	b21b      	sxth	r3, r3
 801a3d8:	4293      	cmp	r3, r2
 801a3da:	dd19      	ble.n	801a410 <draw_indic+0x32c>
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a3dc:	2200      	movs	r2, #0
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 801a3de:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 801a3e2:	f89d 9092 	ldrb.w	r9, [sp, #146]	; 0x92
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a3e6:	4659      	mov	r1, fp
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 801a3e8:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a3ec:	4650      	mov	r0, sl
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a3ee:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 801a3f2:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a3f6:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a3fa:	aa1f      	add	r2, sp, #124	; 0x7c
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 801a3fc:	9301      	str	r3, [sp, #4]
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a3fe:	f7f2 f97d 	bl	800c6fc <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 801a402:	9b01      	ldr	r3, [sp, #4]
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 801a404:	f88d 9092 	strb.w	r9, [sp, #146]	; 0x92
        draw_rect_dsc.bg_opa = bg_opa;
 801a408:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
        draw_rect_dsc.border_opa = border_opa;
 801a40c:	f88d 809a 	strb.w	r8, [sp, #154]	; 0x9a
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a410:	9a06      	ldr	r2, [sp, #24]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a412:	a90d      	add	r1, sp, #52	; 0x34
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a414:	8aa3      	ldrh	r3, [r4, #20]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a416:	a811      	add	r0, sp, #68	; 0x44
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a418:	4413      	add	r3, r2
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a41a:	9a04      	ldr	r2, [sp, #16]
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a41c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a420:	8b23      	ldrh	r3, [r4, #24]
 801a422:	1a9b      	subs	r3, r3, r2
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a424:	9a07      	ldr	r2, [sp, #28]
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a426:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a42a:	8ae3      	ldrh	r3, [r4, #22]
 801a42c:	4413      	add	r3, r2
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a42e:	9a05      	ldr	r2, [sp, #20]
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a430:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a434:	8b63      	ldrh	r3, [r4, #26]
 801a436:	1a9b      	subs	r3, r3, r2
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a438:	463a      	mov	r2, r7
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a43a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a43e:	2300      	movs	r3, #0
 801a440:	f7f1 fd9c 	bl	800bf7c <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801a444:	2100      	movs	r1, #0
 801a446:	a811      	add	r0, sp, #68	; 0x44
 801a448:	f7f1 fc32 	bl	800bcb0 <lv_draw_mask_add>
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a44c:	2300      	movs	r3, #0
    mask_indic_max_area.x1 += bg_left;
 801a44e:	9906      	ldr	r1, [sp, #24]
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801a450:	4607      	mov	r7, r0
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 801a452:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a456:	42b5      	cmp	r5, r6
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a458:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 801a45c:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
    mask_indic_max_area.x1 += bg_left;
 801a460:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    dest->y1 = src->y1;
 801a464:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a468:	440b      	add	r3, r1
    mask_indic_max_area.y1 += bg_top;
 801a46a:	9907      	ldr	r1, [sp, #28]
    dest->x2 = src->x2;
 801a46c:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 801a470:	440a      	add	r2, r1
    mask_indic_max_area.x2 -= bg_right;
 801a472:	9904      	ldr	r1, [sp, #16]
    dest->y2 = src->y2;
 801a474:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
    mask_indic_max_area.x1 += bg_left;
 801a478:	b29b      	uxth	r3, r3
    mask_indic_max_area.x2 -= bg_right;
 801a47a:	eba9 0901 	sub.w	r9, r9, r1
    mask_indic_max_area.y2 -= bg_bottom;
 801a47e:	9905      	ldr	r1, [sp, #20]
    mask_indic_max_area.y1 += bg_top;
 801a480:	b292      	uxth	r2, r2
    mask_indic_max_area.x1 += bg_left;
 801a482:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    mask_indic_max_area.y2 -= bg_bottom;
 801a486:	eba0 0001 	sub.w	r0, r0, r1
    mask_indic_max_area.x2 -= bg_right;
 801a48a:	fa1f f989 	uxth.w	r9, r9
    mask_indic_max_area.y1 += bg_top;
 801a48e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    mask_indic_max_area.y2 -= bg_bottom;
 801a492:	b280      	uxth	r0, r0
    mask_indic_max_area.x2 -= bg_right;
 801a494:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
    mask_indic_max_area.y2 -= bg_bottom;
 801a498:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a49c:	dc74      	bgt.n	801a588 <draw_indic+0x4a4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a49e:	3001      	adds	r0, #1
 801a4a0:	1a80      	subs	r0, r0, r2
 801a4a2:	b200      	sxth	r0, r0
 801a4a4:	2803      	cmp	r0, #3
 801a4a6:	dc0b      	bgt.n	801a4c0 <draw_indic+0x3dc>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a4a8:	8ae3      	ldrh	r3, [r4, #22]
 801a4aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a4ae:	eb03 0565 	add.w	r5, r3, r5, asr #1
 801a4b2:	b2ad      	uxth	r5, r5
 801a4b4:	1eab      	subs	r3, r5, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801a4b6:	3502      	adds	r5, #2
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a4b8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801a4bc:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	f9bd 207c 	ldrsh.w	r2, [sp, #124]	; 0x7c
 801a4c6:	4651      	mov	r1, sl
 801a4c8:	a818      	add	r0, sp, #96	; 0x60
 801a4ca:	f7f1 fd57 	bl	800bf7c <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801a4ce:	2100      	movs	r1, #0
 801a4d0:	a818      	add	r0, sp, #96	; 0x60
 801a4d2:	f7f1 fbed 	bl	800bcb0 <lv_draw_mask_add>
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_rect_dsc);
 801a4d6:	aa1f      	add	r2, sp, #124	; 0x7c
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801a4d8:	4605      	mov	r5, r0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_rect_dsc);
 801a4da:	4659      	mov	r1, fp
 801a4dc:	a80f      	add	r0, sp, #60	; 0x3c
 801a4de:	f7f2 f90d 	bl	800c6fc <lv_draw_rect>
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a4e2:	2300      	movs	r3, #0
    lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a4e4:	aa1f      	add	r2, sp, #124	; 0x7c
 801a4e6:	4659      	mov	r1, fp
 801a4e8:	4650      	mov	r0, sl
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a4ea:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 801a4ee:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 801a4f2:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
    draw_rect_dsc.border_opa = border_opa;
 801a4f6:	f88d 809a 	strb.w	r8, [sp, #154]	; 0x9a
    lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a4fa:	f7f2 f8ff 	bl	800c6fc <lv_draw_rect>
    lv_draw_mask_remove_id(mask_indic_id);
 801a4fe:	4628      	mov	r0, r5
 801a500:	f7f1 fc0e 	bl	800bd20 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 801a504:	4638      	mov	r0, r7
 801a506:	f7f1 fc0b 	bl	800bd20 <lv_draw_mask_remove_id>
 801a50a:	e067      	b.n	801a5dc <draw_indic+0x4f8>
    bool sym = false;
 801a50c:	2300      	movs	r3, #0
 801a50e:	e63a      	b.n	801a186 <draw_indic+0xa2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a510:	3301      	adds	r3, #1
 801a512:	1bdf      	subs	r7, r3, r7
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a514:	b23f      	sxth	r7, r7
 801a516:	2f03      	cmp	r7, #3
 801a518:	f73f ae8a 	bgt.w	801a230 <draw_indic+0x14c>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a51c:	8aa2      	ldrh	r2, [r4, #20]
 801a51e:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 801a522:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801a526:	b29b      	uxth	r3, r3
 801a528:	1e9a      	subs	r2, r3, #2
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801a52a:	3302      	adds	r3, #2
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a52c:	86a2      	strh	r2, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801a52e:	8723      	strh	r3, [r4, #56]	; 0x38
 801a530:	e67e      	b.n	801a230 <draw_indic+0x14c>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801a532:	6b27      	ldr	r7, [r4, #48]	; 0x30
 801a534:	9901      	ldr	r1, [sp, #4]
 801a536:	1abf      	subs	r7, r7, r2
 801a538:	434f      	muls	r7, r1
 801a53a:	9902      	ldr	r1, [sp, #8]
 801a53c:	fb97 f7f1 	sdiv	r7, r7, r1
 801a540:	e6b6      	b.n	801a2b0 <draw_indic+0x1cc>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801a542:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a544:	1a89      	subs	r1, r1, r2
 801a546:	9a01      	ldr	r2, [sp, #4]
 801a548:	fb02 f801 	mul.w	r8, r2, r1
 801a54c:	9a02      	ldr	r2, [sp, #8]
 801a54e:	fb98 f8f2 	sdiv	r8, r8, r2
 801a552:	e6cc      	b.n	801a2ee <draw_indic+0x20a>
 801a554:	0801a035 	.word	0x0801a035
 801a558:	0801a041 	.word	0x0801a041
            zero = *axis2 - shift + 1;
 801a55c:	f1c1 0201 	rsb	r2, r1, #1
 801a560:	443a      	add	r2, r7
 801a562:	b212      	sxth	r2, r2
            if(*axis1 > zero)
 801a564:	4282      	cmp	r2, r0
                *axis2 = *axis1;
 801a566:	bfaa      	itet	ge
 801a568:	f8a9 0000 	strhge.w	r0, [r9]
                *axis2 = zero;
 801a56c:	f8a9 2000 	strhlt.w	r2, [r9]
                *axis1 = zero;
 801a570:	801a      	strhge	r2, [r3, #0]
            if(*axis2 < *axis1) {
 801a572:	f9b9 1000 	ldrsh.w	r1, [r9]
 801a576:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a57a:	4291      	cmp	r1, r2
 801a57c:	f6bf aef8 	bge.w	801a370 <draw_indic+0x28c>
                *axis1 = *axis2;
 801a580:	8019      	strh	r1, [r3, #0]
                *axis2 = zero;
 801a582:	f8a9 2000 	strh.w	r2, [r9]
 801a586:	e6f3      	b.n	801a370 <draw_indic+0x28c>
 801a588:	f109 0901 	add.w	r9, r9, #1
 801a58c:	eba9 0903 	sub.w	r9, r9, r3
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a590:	fa0f f989 	sxth.w	r9, r9
 801a594:	f1b9 0f03 	cmp.w	r9, #3
 801a598:	dc92      	bgt.n	801a4c0 <draw_indic+0x3dc>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a59a:	8aa3      	ldrh	r3, [r4, #20]
 801a59c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801a5a0:	eb03 0666 	add.w	r6, r3, r6, asr #1
 801a5a4:	b2b6      	uxth	r6, r6
 801a5a6:	1eb3      	subs	r3, r6, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801a5a8:	3602      	adds	r6, #2
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801a5aa:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801a5ae:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801a5b2:	e785      	b.n	801a4c0 <draw_indic+0x3dc>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 801a5b4:	4650      	mov	r0, sl
 801a5b6:	9b08      	ldr	r3, [sp, #32]
 801a5b8:	4798      	blx	r3
 801a5ba:	2801      	cmp	r0, #1
 801a5bc:	f73f aed8 	bgt.w	801a370 <draw_indic+0x28c>
        lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a5c0:	4659      	mov	r1, fp
 801a5c2:	a82c      	add	r0, sp, #176	; 0xb0
 801a5c4:	f7ea f8c8 	bl	8004758 <lv_obj_draw_dsc_init>
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a5c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a5cc:	aa2c      	add	r2, sp, #176	; 0xb0
 801a5ce:	211a      	movs	r1, #26
 801a5d0:	4620      	mov	r0, r4
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a5d2:	9339      	str	r3, [sp, #228]	; 0xe4
        obj_draw_dsc.draw_area = &bar->indic_area;
 801a5d4:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a5d8:	f7e7 fa8e 	bl	8001af8 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a5dc:	aa2c      	add	r2, sp, #176	; 0xb0
 801a5de:	211b      	movs	r1, #27
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f7e7 fa89 	bl	8001af8 <lv_event_send>
}
 801a5e6:	b03f      	add	sp, #252	; 0xfc
 801a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *axis1 = *axis2 - anim_cur_value_x + 1;
 801a5ec:	f8b9 8000 	ldrh.w	r8, [r9]
 801a5f0:	f108 0801 	add.w	r8, r8, #1
 801a5f4:	eba8 0801 	sub.w	r8, r8, r1
 801a5f8:	f8a3 8000 	strh.w	r8, [r3]
        *axis2 -= anim_start_value_x;
 801a5fc:	f8b9 7000 	ldrh.w	r7, [r9]
 801a600:	1aba      	subs	r2, r7, r2
 801a602:	f8a9 2000 	strh.w	r2, [r9]
 801a606:	e695      	b.n	801a334 <draw_indic+0x250>

0801a608 <lv_bar_event>:
{
 801a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801a60c:	4831      	ldr	r0, [pc, #196]	; (801a6d4 <lv_bar_event+0xcc>)
{
 801a60e:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801a610:	f7e7 f9fb 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801a614:	2801      	cmp	r0, #1
 801a616:	d148      	bne.n	801a6aa <lv_bar_event+0xa2>
    lv_event_code_t code = lv_event_get_code(e);
 801a618:	4620      	mov	r0, r4
 801a61a:	f7e7 fa8f 	bl	8001b3c <lv_event_get_code>
 801a61e:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801a620:	4620      	mov	r0, r4
 801a622:	f7e7 fa89 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a626:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801a628:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a62a:	d140      	bne.n	801a6ae <lv_bar_event+0xa6>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801a62c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a630:	f7ea f821 	bl	8004676 <lv_obj_calculate_ext_draw_size>
 801a634:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 801a636:	4620      	mov	r0, r4
 801a638:	f7e7 fa82 	bl	8001b40 <lv_event_get_param>
        *s = LV_MAX(*s, indic_size);
 801a63c:	f9b0 3000 	ldrsh.w	r3, [r0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a640:	f241 0212 	movw	r2, #4114	; 0x1012
 801a644:	2100      	movs	r1, #0
 801a646:	42bb      	cmp	r3, r7
        lv_coord_t * s = lv_event_get_param(e);
 801a648:	4606      	mov	r6, r0
        *s = LV_MAX(*s, indic_size);
 801a64a:	bfb8      	it	lt
 801a64c:	463b      	movlt	r3, r7
 801a64e:	8003      	strh	r3, [r0, #0]
 801a650:	4628      	mov	r0, r5
 801a652:	f7ec fca1 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a656:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801a65a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a65e:	2100      	movs	r1, #0
 801a660:	4628      	mov	r0, r5
 801a662:	f7ec fc99 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a666:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801a66a:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a66c:	2100      	movs	r1, #0
 801a66e:	4628      	mov	r0, r5
 801a670:	f7ec fc92 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a674:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801a678:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a67a:	2100      	movs	r1, #0
 801a67c:	4628      	mov	r0, r5
 801a67e:	f7ec fc8b 	bl	8006f98 <lv_obj_get_style_prop>
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 801a682:	4544      	cmp	r4, r8
 801a684:	4623      	mov	r3, r4
    return (lv_coord_t)v.num;
 801a686:	b202      	sxth	r2, r0
 801a688:	bfa8      	it	ge
 801a68a:	4643      	movge	r3, r8
 801a68c:	42bb      	cmp	r3, r7
 801a68e:	bfa8      	it	ge
 801a690:	463b      	movge	r3, r7
 801a692:	4293      	cmp	r3, r2
 801a694:	bfa8      	it	ge
 801a696:	4613      	movge	r3, r2
        if(pad < 0) {
 801a698:	2b00      	cmp	r3, #0
 801a69a:	da06      	bge.n	801a6aa <lv_bar_event+0xa2>
            *s = LV_MAX(*s, -pad);
 801a69c:	425b      	negs	r3, r3
 801a69e:	f9b6 0000 	ldrsh.w	r0, [r6]
 801a6a2:	4283      	cmp	r3, r0
 801a6a4:	bfb8      	it	lt
 801a6a6:	4603      	movlt	r3, r0
 801a6a8:	8033      	strh	r3, [r6, #0]
}
 801a6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801a6ae:	2e01      	cmp	r6, #1
 801a6b0:	d001      	beq.n	801a6b6 <lv_bar_event+0xae>
 801a6b2:	2e08      	cmp	r6, #8
 801a6b4:	d106      	bne.n	801a6c4 <lv_bar_event+0xbc>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801a6b6:	f105 0134 	add.w	r1, r5, #52	; 0x34
 801a6ba:	4628      	mov	r0, r5
}
 801a6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801a6c0:	f7ea bb28 	b.w	8004d14 <lv_obj_invalidate_area>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801a6c4:	2e15      	cmp	r6, #21
 801a6c6:	d1f0      	bne.n	801a6aa <lv_bar_event+0xa2>
        draw_indic(e);
 801a6c8:	4620      	mov	r0, r4
}
 801a6ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        draw_indic(e);
 801a6ce:	f7ff bd09 	b.w	801a0e4 <draw_indic>
 801a6d2:	bf00      	nop
 801a6d4:	08029f2c 	.word	0x08029f2c

0801a6d8 <lv_bar_set_value>:
{
 801a6d8:	b470      	push	{r4, r5, r6}
    if(bar->cur_value == value) return;
 801a6da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a6dc:	428d      	cmp	r5, r1
 801a6de:	d020      	beq.n	801a722 <lv_bar_set_value+0x4a>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801a6e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller then the left value*/
 801a6e2:	6b06      	ldr	r6, [r0, #48]	; 0x30
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801a6e4:	4299      	cmp	r1, r3
 801a6e6:	bfa8      	it	ge
 801a6e8:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller then the left value*/
 801a6ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a6ec:	42b3      	cmp	r3, r6
 801a6ee:	bfb8      	it	lt
 801a6f0:	4633      	movlt	r3, r6
 801a6f2:	4299      	cmp	r1, r3
 801a6f4:	bfb8      	it	lt
 801a6f6:	4619      	movlt	r1, r3
    if(bar->cur_value == value) return;
 801a6f8:	428d      	cmp	r5, r1
 801a6fa:	d012      	beq.n	801a722 <lv_bar_set_value+0x4a>
    if(en == LV_ANIM_OFF) {
 801a6fc:	b91a      	cbnz	r2, 801a706 <lv_bar_set_value+0x2e>
        *value_ptr = new_value;
 801a6fe:	6241      	str	r1, [r0, #36]	; 0x24
}
 801a700:	bc70      	pop	{r4, r5, r6}
        lv_obj_invalidate((lv_obj_t*)obj);
 801a702:	f7ea bb21 	b.w	8004d48 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801a706:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801a708:	f100 0224 	add.w	r2, r0, #36	; 0x24
 801a70c:	3301      	adds	r3, #1
            anim_info->anim_start = anim_info->anim_end;
 801a70e:	bf16      	itet	ne
 801a710:	6c43      	ldrne	r3, [r0, #68]	; 0x44
            anim_info->anim_start = *value_ptr;
 801a712:	6405      	streq	r5, [r0, #64]	; 0x40
            anim_info->anim_start = anim_info->anim_end;
 801a714:	6403      	strne	r3, [r0, #64]	; 0x40
            anim_info->anim_end   = new_value;
 801a716:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 801a71a:	6441      	str	r1, [r0, #68]	; 0x44
}
 801a71c:	bc70      	pop	{r4, r5, r6}
 801a71e:	f7ff bcbb 	b.w	801a098 <lv_bar_set_value_with_anim.part.0>
 801a722:	bc70      	pop	{r4, r5, r6}
 801a724:	4770      	bx	lr

0801a726 <lv_bar_constructor>:
{
 801a726:	b538      	push	{r3, r4, r5, lr}
    bar->max_value = 100;
 801a728:	2500      	movs	r5, #0
 801a72a:	2364      	movs	r3, #100	; 0x64
{
 801a72c:	460c      	mov	r4, r1
    bar->start_value = 0;
 801a72e:	630d      	str	r5, [r1, #48]	; 0x30
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801a730:	4620      	mov	r0, r4
    bar->cur_value = 0;
 801a732:	624d      	str	r5, [r1, #36]	; 0x24

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 801a734:	644d      	str	r5, [r1, #68]	; 0x44
    bar->max_value = 100;
 801a736:	e9c1 530a 	strd	r5, r3, [r1, #40]	; 0x28
    bar->mode         = LV_BAR_MODE_NORMAL;
 801a73a:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 801a73e:	f365 0301 	bfi	r3, r5, #0, #2
 801a742:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801a746:	f04f 33ff 	mov.w	r3, #4294967295
    bar_anim->anim_start = 0;
 801a74a:	e9c1 150f 	strd	r1, r5, [r1, #60]	; 0x3c
    bar_anim->bar = obj;
 801a74e:	e9c1 3112 	strd	r3, r1, [r1, #72]	; 0x48
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801a752:	658b      	str	r3, [r1, #88]	; 0x58
    bar_anim->anim_end = 0;
 801a754:	e9c1 5514 	strd	r5, r5, [r1, #80]	; 0x50
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801a758:	2108      	movs	r1, #8
 801a75a:	f7e9 f910 	bl	800397e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801a75e:	4620      	mov	r0, r4
 801a760:	2110      	movs	r1, #16
 801a762:	f7e9 f90c 	bl	800397e <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 801a766:	462a      	mov	r2, r5
 801a768:	4629      	mov	r1, r5
 801a76a:	4620      	mov	r0, r4
}
 801a76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 801a770:	f7ff bfb2 	b.w	801a6d8 <lv_bar_set_value>

0801a774 <lv_bar_set_start_value>:
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801a774:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a776:	4299      	cmp	r1, r3
 801a778:	bfa8      	it	ge
 801a77a:	4619      	movge	r1, r3
 801a77c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a77e:	4299      	cmp	r1, r3
 801a780:	bfb8      	it	lt
 801a782:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater then the right value*/
 801a784:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a786:	4299      	cmp	r1, r3
 801a788:	bfa8      	it	ge
 801a78a:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 801a78c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a78e:	428b      	cmp	r3, r1
{
 801a790:	b410      	push	{r4}
    if(bar->start_value == value) return;
 801a792:	d013      	beq.n	801a7bc <lv_bar_set_start_value+0x48>
    if(en == LV_ANIM_OFF) {
 801a794:	b922      	cbnz	r2, 801a7a0 <lv_bar_set_start_value+0x2c>
}
 801a796:	f85d 4b04 	ldr.w	r4, [sp], #4
        *value_ptr = new_value;
 801a79a:	6301      	str	r1, [r0, #48]	; 0x30
        lv_obj_invalidate((lv_obj_t*)obj);
 801a79c:	f7ea bad4 	b.w	8004d48 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801a7a0:	6d82      	ldr	r2, [r0, #88]	; 0x58
}
 801a7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801a7a6:	3201      	adds	r2, #1
            anim_info->anim_start = anim_info->anim_end;
 801a7a8:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801a7ac:	bf18      	it	ne
 801a7ae:	6d43      	ldrne	r3, [r0, #84]	; 0x54
            anim_info->anim_end   = new_value;
 801a7b0:	e9c0 3114 	strd	r3, r1, [r0, #80]	; 0x50
 801a7b4:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 801a7b8:	f7ff bc6e 	b.w	801a098 <lv_bar_set_value_with_anim.part.0>
}
 801a7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7c0:	4770      	bx	lr

0801a7c2 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 801a7c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801a7c4:	3301      	adds	r3, #1
 801a7c6:	bf14      	ite	ne
 801a7c8:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 801a7ca:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 801a7cc:	4770      	bx	lr

0801a7ce <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 801a7ce:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801a7d2:	f003 0303 	and.w	r3, r3, #3
 801a7d6:	2b02      	cmp	r3, #2
 801a7d8:	d001      	beq.n	801a7de <lv_bar_get_start_value+0x10>
 801a7da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a7dc:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 801a7de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	bf14      	ite	ne
 801a7e4:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 801a7e6:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 801a7e8:	4770      	bx	lr

0801a7ea <lv_bar_get_mode>:
    return bar->mode;
 801a7ea:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 801a7ee:	f000 0003 	and.w	r0, r0, #3
 801a7f2:	4770      	bx	lr

0801a7f4 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801a7f4:	b507      	push	{r0, r1, r2, lr}
 801a7f6:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801a7f8:	2110      	movs	r1, #16
 801a7fa:	9001      	str	r0, [sp, #4]
 801a7fc:	f7e9 f8bf 	bl	800397e <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801a800:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a804:	9801      	ldr	r0, [sp, #4]

    LV_TRACE_OBJ_CREATE("finished");
}
 801a806:	b003      	add	sp, #12
 801a808:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801a80c:	f7e9 b894 	b.w	8003938 <lv_obj_add_flag>

0801a810 <lv_btnmatrix_destructor>:

    LV_TRACE_OBJ_CREATE("finshed");
}

static void lv_btnmatrix_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801a810:	b510      	push	{r4, lr}
 801a812:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");
    LV_UNUSED(class_p);
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    lv_mem_free(btnm->button_areas);
 801a814:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801a816:	f7fc fdb5 	bl	8017384 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 801a81a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801a81c:	f7fc fdb2 	bl	8017384 <lv_mem_free>
    btnm->button_areas = NULL;
 801a820:	2300      	movs	r3, #0
    btnm->ctrl_bits = NULL;
 801a822:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    LV_TRACE_OBJ_CREATE("finshed");
}
 801a826:	bd10      	pop	{r4, pc}

0801a828 <lv_obj_get_style_pad_column.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801a828:	f241 0215 	movw	r2, #4117	; 0x1015
 801a82c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 801a82e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801a830:	f7ec fbb2 	bl	8006f98 <lv_obj_get_style_prop>
}
 801a834:	b200      	sxth	r0, r0
 801a836:	bd08      	pop	{r3, pc}

0801a838 <draw_main>:
    }

}

static void draw_main(lv_event_t * e)
{
 801a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a83c:	b0cf      	sub	sp, #316	; 0x13c
 801a83e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801a840:	f7e7 f97a 	bl	8001b38 <lv_event_get_target>
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    if(btnm->btn_cnt == 0) return;
 801a844:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    lv_obj_t * obj = lv_event_get_target(e);
 801a846:	4604      	mov	r4, r0
    if(btnm->btn_cnt == 0) return;
 801a848:	2b00      	cmp	r3, #0
 801a84a:	f000 81a7 	beq.w	801ab9c <draw_main+0x364>

    const lv_area_t * clip_area = lv_event_get_param(e);
 801a84e:	4628      	mov	r0, r5
    lv_obj_draw_dsc_init(&dsc, clip_area);
    dsc.part = LV_PART_ITEMS;
    dsc.rect_dsc = &draw_rect_dsc_act;
    dsc.label_dsc = &draw_label_dsc_act;

    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801a850:	f04f 0800 	mov.w	r8, #0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a854:	f7e7 f974 	bl	8001b40 <lv_event_get_param>
    obj->skip_trans = 1;
 801a858:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 801a85c:	a90e      	add	r1, sp, #56	; 0x38
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a85e:	4607      	mov	r7, r0
    obj->skip_trans = 1;
 801a860:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_get_coords(obj, &area_obj);
 801a864:	4620      	mov	r0, r4
    uint16_t txt_i = 0;
 801a866:	4645      	mov	r5, r8
        /*Search the next valid text in the map*/
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801a868:	f8df a33c 	ldr.w	sl, [pc, #828]	; 801aba8 <draw_main+0x370>
    obj->skip_trans = 1;
 801a86c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 801a870:	f7ea f8c5 	bl	80049fe <lv_obj_get_coords>
    obj->state = LV_STATE_DEFAULT;
 801a874:	6a22      	ldr	r2, [r4, #32]
 801a876:	4bcb      	ldr	r3, [pc, #812]	; (801aba4 <draw_main+0x36c>)
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 801a878:	a82f      	add	r0, sp, #188	; 0xbc
    lv_state_t state_ori = obj->state;
 801a87a:	8c26      	ldrh	r6, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801a87c:	4013      	ands	r3, r2
 801a87e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a882:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 801a884:	f7f1 ff18 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 801a888:	a81a      	add	r0, sp, #104	; 0x68
 801a88a:	f7ef fc61 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 801a88e:	aa2f      	add	r2, sp, #188	; 0xbc
 801a890:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801a894:	4620      	mov	r0, r4
 801a896:	f7e9 fc7b 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 801a89a:	aa1a      	add	r2, sp, #104	; 0x68
 801a89c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	f7e9 fdb1 	bl	8004408 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 801a8a6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a8aa:	f241 0210 	movw	r2, #4112	; 0x1010
 801a8ae:	2100      	movs	r1, #0
 801a8b0:	f36f 0382 	bfc	r3, #2, #1
 801a8b4:	4620      	mov	r0, r4
    obj->state = state_ori;
 801a8b6:	8426      	strh	r6, [r4, #32]
    obj->skip_trans = 0;
 801a8b8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801a8bc:	f7ec fb6c 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a8c0:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801a8c4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a8c6:	2100      	movs	r1, #0
 801a8c8:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801a8ca:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a8cc:	f7ec fb64 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a8d0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a8d2:	f241 0212 	movw	r2, #4114	; 0x1012
 801a8d6:	2100      	movs	r1, #0
 801a8d8:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801a8da:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a8dc:	f7ec fb5c 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a8e0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a8e2:	f241 0213 	movw	r2, #4115	; 0x1013
 801a8e6:	2100      	movs	r1, #0
 801a8e8:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801a8ea:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a8ec:	f7ec fb54 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a8f0:	b203      	sxth	r3, r0
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801a8f2:	4639      	mov	r1, r7
 801a8f4:	a83c      	add	r0, sp, #240	; 0xf0
 801a8f6:	9306      	str	r3, [sp, #24]
 801a8f8:	f7e9 ff2e 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 801a8fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801a900:	9349      	str	r3, [sp, #292]	; 0x124
    dsc.rect_dsc = &draw_rect_dsc_act;
 801a902:	ab22      	add	r3, sp, #136	; 0x88
 801a904:	933e      	str	r3, [sp, #248]	; 0xf8
    dsc.label_dsc = &draw_label_dsc_act;
 801a906:	ab12      	add	r3, sp, #72	; 0x48
 801a908:	933f      	str	r3, [sp, #252]	; 0xfc
        /*Get the state of the button*/
        lv_state_t btn_state = LV_STATE_DEFAULT;
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
        if(btn_i == btnm->btn_id_sel) {
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 801a90a:	f006 0320 	and.w	r3, r6, #32
 801a90e:	930a      	str	r3, [sp, #40]	; 0x28
 801a910:	fa1f f988 	uxth.w	r9, r8
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801a914:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a916:	454b      	cmp	r3, r9
 801a918:	f240 813a 	bls.w	801ab90 <draw_main+0x358>
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801a91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a91e:	00aa      	lsls	r2, r5, #2
 801a920:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a924:	3501      	adds	r5, #1
 801a926:	4651      	mov	r1, sl
 801a928:	930b      	str	r3, [sp, #44]	; 0x2c
 801a92a:	9205      	str	r2, [sp, #20]
 801a92c:	b2ad      	uxth	r5, r5
 801a92e:	f7e5 fc6f 	bl	8000210 <strcmp>
 801a932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a934:	2800      	cmp	r0, #0
 801a936:	d0f2      	beq.n	801a91e <draw_main+0xe6>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801a938:	fa1f fb88 	uxth.w	fp, r8
 801a93c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return w != 0 ? w : 1;
}

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801a93e:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801a942:	070b      	lsls	r3, r1, #28
 801a944:	f100 8100 	bmi.w	801ab48 <draw_main+0x310>
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801a948:	0688      	lsls	r0, r1, #26
        lv_state_t btn_state = LV_STATE_DEFAULT;
 801a94a:	f3c1 12c0 	ubfx	r2, r1, #7, #1
        if(btn_i == btnm->btn_id_sel) {
 801a94e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801a950:	bf48      	it	mi
 801a952:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
        if(btn_i == btnm->btn_id_sel) {
 801a956:	4549      	cmp	r1, r9
 801a958:	d10f      	bne.n	801a97a <draw_main+0x142>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 801a95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a95c:	b10b      	cbz	r3, 801a962 <draw_main+0x12a>
 801a95e:	f042 0220 	orr.w	r2, r2, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 801a962:	07b1      	lsls	r1, r6, #30
 801a964:	bf48      	it	mi
 801a966:	f042 0202 	orrmi.w	r2, r2, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 801a96a:	0773      	lsls	r3, r6, #29
 801a96c:	bf48      	it	mi
 801a96e:	f042 0204 	orrmi.w	r2, r2, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801a972:	0730      	lsls	r0, r6, #28
 801a974:	bf48      	it	mi
 801a976:	f042 0208 	orrmi.w	r2, r2, #8
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 801a97a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a97c:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
        btn_area.x1 += area_obj.x1;
 801a980:	f831 103b 	ldrh.w	r1, [r1, fp, lsl #3]
    dest->y1 = src->y1;
 801a984:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
    dest->x2 = src->x2;
 801a988:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
    dest->y2 = src->y2;
 801a98c:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801a990:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801a994:	4401      	add	r1, r0
        btn_area.x2 += area_obj.x1;
 801a996:	4448      	add	r0, r9
        btn_area.x1 += area_obj.x1;
 801a998:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        btn_area.y1 += area_obj.y1;
 801a99c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        btn_area.x2 += area_obj.x1;
 801a9a0:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
        btn_area.y1 += area_obj.y1;
 801a9a4:	448c      	add	ip, r1
        btn_area.y2 += area_obj.y1;
 801a9a6:	4471      	add	r1, lr
        btn_area.y1 += area_obj.y1;
 801a9a8:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
        btn_area.y2 += area_obj.y1;
 801a9ac:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
        if(btn_state == LV_STATE_DEFAULT) {
 801a9b0:	2a00      	cmp	r2, #0
 801a9b2:	f040 80cc 	bne.w	801ab4e <draw_main+0x316>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801a9b6:	2234      	movs	r2, #52	; 0x34
 801a9b8:	a92f      	add	r1, sp, #188	; 0xbc
 801a9ba:	a822      	add	r0, sp, #136	; 0x88
 801a9bc:	f7fc fd1c 	bl	80173f8 <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801a9c0:	2220      	movs	r2, #32
 801a9c2:	a91a      	add	r1, sp, #104	; 0x68
 801a9c4:	a812      	add	r0, sp, #72	; 0x48
 801a9c6:	f7fc fd17 	bl	80173f8 <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 801a9ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        dsc.draw_area = &btn_area;
 801a9cc:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 801a9d0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801a9d4:	4620      	mov	r0, r4
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
 801a9d6:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
        dsc.draw_area = &btn_area;
 801a9da:	f8cd 90f4 	str.w	r9, [sp, #244]	; 0xf4
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801a9de:	04c9      	lsls	r1, r1, #19
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801a9e0:	f04f 011a 	mov.w	r1, #26
        dsc.id = btn_i;
 801a9e4:	f8cd b128 	str.w	fp, [sp, #296]	; 0x128
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801a9e8:	bf4c      	ite	mi
 801a9ea:	f042 0201 	orrmi.w	r2, r2, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 801a9ee:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
 801a9f2:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801a9f6:	aa3c      	add	r2, sp, #240	; 0xf0
 801a9f8:	f7e7 f87e 	bl	8001af8 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 801a9fc:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801aa00:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801aa04:	06d2      	lsls	r2, r2, #27
 801aa06:	d54a      	bpl.n	801aa9e <draw_main+0x266>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801aa08:	220f      	movs	r2, #15
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801aa0a:	9907      	ldr	r1, [sp, #28]
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801aa0c:	f362 0345 	bfi	r3, r2, #1, #5
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801aa10:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801aa14:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801aa18:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801aa1c:	440b      	add	r3, r1
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801aa1e:	9906      	ldr	r1, [sp, #24]
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801aa20:	429a      	cmp	r2, r3
 801aa22:	bf02      	ittt	eq
 801aa24:	f89d 30a7 	ldrbeq.w	r3, [sp, #167]	; 0xa7
 801aa28:	220b      	moveq	r2, #11
 801aa2a:	f362 0345 	bfieq	r3, r2, #1, #5
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801aa2e:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801aa32:	bf08      	it	eq
 801aa34:	f88d 30a7 	strbeq.w	r3, [sp, #167]	; 0xa7
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801aa38:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801aa3c:	1a5b      	subs	r3, r3, r1
 801aa3e:	429a      	cmp	r2, r3
 801aa40:	d109      	bne.n	801aa56 <draw_main+0x21e>
 801aa42:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801aa46:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801aa4a:	f002 0217 	and.w	r2, r2, #23
 801aa4e:	f362 0345 	bfi	r3, r2, #1, #5
 801aa52:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 801aa56:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801aa5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa5c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801aa60:	440b      	add	r3, r1
 801aa62:	429a      	cmp	r2, r3
 801aa64:	d109      	bne.n	801aa7a <draw_main+0x242>
 801aa66:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801aa6a:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801aa6e:	f002 021d 	and.w	r2, r2, #29
 801aa72:	f362 0345 	bfi	r3, r2, #1, #5
 801aa76:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 801aa7a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801aa7e:	9908      	ldr	r1, [sp, #32]
 801aa80:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801aa84:	1a5b      	subs	r3, r3, r1
 801aa86:	429a      	cmp	r2, r3
 801aa88:	d109      	bne.n	801aa9e <draw_main+0x266>
 801aa8a:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801aa8e:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801aa92:	f002 021e 	and.w	r2, r2, #30
 801aa96:	f362 0345 	bfi	r3, r2, #1, #5
 801aa9a:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
        lv_draw_rect(&btn_area, clip_area, &draw_rect_dsc_act);
 801aa9e:	aa22      	add	r2, sp, #136	; 0x88
 801aaa0:	4639      	mov	r1, r7
 801aaa2:	4648      	mov	r0, r9
 801aaa4:	f7f1 fe2a 	bl	800c6fc <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 801aaa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aaaa:	9a05      	ldr	r2, [sp, #20]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801aaac:	a80d      	add	r0, sp, #52	; 0x34
        const char * txt = btnm->map_p[txt_i];
 801aaae:	5899      	ldr	r1, [r3, r2]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801aab0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aab4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801aab8:	9302      	str	r3, [sp, #8]
 801aaba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801aabe:	9105      	str	r1, [sp, #20]
 801aac0:	3301      	adds	r3, #1
 801aac2:	1a9b      	subs	r3, r3, r2
 801aac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aac6:	b21b      	sxth	r3, r3
 801aac8:	9301      	str	r3, [sp, #4]
 801aaca:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801aace:	9300      	str	r3, [sp, #0]
 801aad0:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801aad4:	f7fe fb67 	bl	80191a6 <lv_txt_get_size>
 801aad8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801aadc:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801aae0:	3301      	adds	r3, #1
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 801aae2:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801aae6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aaea:	1a1b      	subs	r3, r3, r0
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801aaec:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801aaf0:	9905      	ldr	r1, [sp, #20]
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 801aaf2:	b21b      	sxth	r3, r3
 801aaf4:	eba3 030e 	sub.w	r3, r3, lr
 801aaf8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801aafc:	eb00 0363 	add.w	r3, r0, r3, asr #1
 801ab00:	b298      	uxth	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ab02:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801ab06:	3301      	adds	r3, #1
 801ab08:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        btn_area.x2 = btn_area.x1 + txt_size.x;
 801ab0c:	4470      	add	r0, lr
 801ab0e:	1a9b      	subs	r3, r3, r2
 801ab10:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801ab14:	4648      	mov	r0, r9
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801ab16:	b21b      	sxth	r3, r3
 801ab18:	eba3 030c 	sub.w	r3, r3, ip
 801ab1c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801ab20:	eb02 0363 	add.w	r3, r2, r3, asr #1
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801ab24:	aa12      	add	r2, sp, #72	; 0x48
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801ab26:	b29b      	uxth	r3, r3
 801ab28:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        btn_area.y2 = btn_area.y1 + txt_size.y;
 801ab2c:	4463      	add	r3, ip
 801ab2e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801ab32:	2300      	movs	r3, #0
 801ab34:	9300      	str	r3, [sp, #0]
 801ab36:	460b      	mov	r3, r1
 801ab38:	4639      	mov	r1, r7
 801ab3a:	f7ef fce1 	bl	800a500 <lv_draw_label>
        lv_event_send(obj,LV_EVENT_DRAW_PART_END, &dsc);
 801ab3e:	aa3c      	add	r2, sp, #240	; 0xf0
 801ab40:	211b      	movs	r1, #27
 801ab42:	4620      	mov	r0, r4
 801ab44:	f7e6 ffd8 	bl	8001af8 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801ab48:	f108 0801 	add.w	r8, r8, #1
 801ab4c:	e6e0      	b.n	801a910 <draw_main+0xd8>
            obj->state = btn_state;
 801ab4e:	8422      	strh	r2, [r4, #32]
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801ab50:	a822      	add	r0, sp, #136	; 0x88
            obj->skip_trans = 1;
 801ab52:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801ab56:	f042 0204 	orr.w	r2, r2, #4
 801ab5a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801ab5e:	f7f1 fdab 	bl	800c6b8 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 801ab62:	a812      	add	r0, sp, #72	; 0x48
 801ab64:	f7ef faf4 	bl	800a150 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 801ab68:	aa22      	add	r2, sp, #136	; 0x88
 801ab6a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ab6e:	4620      	mov	r0, r4
 801ab70:	f7e9 fb0e 	bl	8004190 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 801ab74:	aa12      	add	r2, sp, #72	; 0x48
 801ab76:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ab7a:	4620      	mov	r0, r4
 801ab7c:	f7e9 fc44 	bl	8004408 <lv_obj_init_draw_label_dsc>
            obj->skip_trans = 0;
 801ab80:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
            obj->state = state_ori;
 801ab84:	8426      	strh	r6, [r4, #32]
            obj->skip_trans = 0;
 801ab86:	f36f 0282 	bfc	r2, #2, #1
 801ab8a:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 801ab8e:	e71c      	b.n	801a9ca <draw_main+0x192>
    obj->skip_trans = 0;
 801ab90:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801ab94:	f36f 0382 	bfc	r3, #2, #1
 801ab98:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801ab9c:	b04f      	add	sp, #316	; 0x13c
 801ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aba2:	bf00      	nop
 801aba4:	fffb0000 	.word	0xfffb0000
 801aba8:	0802a5e6 	.word	0x0802a5e6

0801abac <invalidate_button_area>:

    return i;
}

static void invalidate_button_area(const lv_obj_t * obj, uint16_t btn_idx)
{
 801abac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 801abae:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 801abb2:	4604      	mov	r4, r0
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 801abb4:	4299      	cmp	r1, r3
 801abb6:	d041      	beq.n	801ac3c <invalidate_button_area+0x90>

    lv_area_t btn_area;
    lv_area_t obj_area;

    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 801abb8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801abba:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 801abbe:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
    lv_obj_get_coords(obj, &obj_area);
 801abc2:	a902      	add	r1, sp, #8
 801abc4:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 801abc8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801abcc:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 801abd0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 801abd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 801abd8:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 801abdc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801abe0:	f7e9 ff0d 	bl	80049fe <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801abe4:	f241 0214 	movw	r2, #4116	; 0x1014
 801abe8:	2100      	movs	r1, #0
 801abea:	4620      	mov	r0, r4
 801abec:	f7ec f9d4 	bl	8006f98 <lv_obj_get_style_prop>
 801abf0:	4605      	mov	r5, r0

    /*The buttons might have outline and shadow so make the invalidation larger with the gaps between the buttons.
     *It assumes that the outline or shadow is smaller then the gaps*/
    lv_coord_t row_gap = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801abf2:	4620      	mov	r0, r4
 801abf4:	f7ff fe18 	bl	801a828 <lv_obj_get_style_pad_column.constprop.0>

    /*Convert relative coordinates to absolute*/
    btn_area.x1 += obj_area.x1 - row_gap;
 801abf8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801abfc:	f8bd 3000 	ldrh.w	r3, [sp]
 801ac00:	b2a9      	uxth	r1, r5
    btn_area.y1 += obj_area.y1 - col_gap;
 801ac02:	f8bd 600a 	ldrh.w	r6, [sp, #10]
    btn_area.x1 += obj_area.x1 - row_gap;
 801ac06:	4413      	add	r3, r2
    btn_area.y1 += obj_area.y1 - col_gap;
 801ac08:	f8bd 5002 	ldrh.w	r5, [sp, #2]
    btn_area.x2 += obj_area.x1 + row_gap;
 801ac0c:	440a      	add	r2, r1
    btn_area.x1 += obj_area.x1 - row_gap;
 801ac0e:	1a5b      	subs	r3, r3, r1
    btn_area.y1 += obj_area.y1 - col_gap;
 801ac10:	4435      	add	r5, r6
    btn_area.x2 += obj_area.x1 + row_gap;
 801ac12:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    btn_area.x1 += obj_area.x1 - row_gap;
 801ac16:	f8ad 3000 	strh.w	r3, [sp]
    btn_area.y1 += obj_area.y1 - col_gap;
 801ac1a:	b283      	uxth	r3, r0
    btn_area.y2 += obj_area.y1 + col_gap;
 801ac1c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    btn_area.x2 += obj_area.x1 + row_gap;
 801ac20:	440a      	add	r2, r1
    btn_area.y1 += obj_area.y1 - col_gap;
 801ac22:	1aed      	subs	r5, r5, r3

    lv_obj_invalidate_area(obj, &btn_area);
 801ac24:	4669      	mov	r1, sp
    btn_area.y2 += obj_area.y1 + col_gap;
 801ac26:	4406      	add	r6, r0
    lv_obj_invalidate_area(obj, &btn_area);
 801ac28:	4620      	mov	r0, r4
    btn_area.y1 += obj_area.y1 - col_gap;
 801ac2a:	f8ad 5002 	strh.w	r5, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 801ac2e:	4433      	add	r3, r6
    btn_area.x2 += obj_area.x1 + row_gap;
 801ac30:	f8ad 2004 	strh.w	r2, [sp, #4]
    btn_area.y2 += obj_area.y1 + col_gap;
 801ac34:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &btn_area);
 801ac38:	f7ea f86c 	bl	8004d14 <lv_obj_invalidate_area>
}
 801ac3c:	b004      	add	sp, #16
 801ac3e:	bd70      	pop	{r4, r5, r6, pc}

0801ac40 <get_button_from_point>:
{
 801ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac44:	ed2d 8b02 	vpush	{d8}
 801ac48:	b08b      	sub	sp, #44	; 0x2c
 801ac4a:	4605      	mov	r5, r0
 801ac4c:	ee08 1a10 	vmov	s16, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801ac50:	f04f 0b00 	mov.w	fp, #0
    lv_obj_get_coords(obj, &obj_cords);
 801ac54:	a906      	add	r1, sp, #24
 801ac56:	f7e9 fed2 	bl	80049fe <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(obj);
 801ac5a:	4628      	mov	r0, r5
 801ac5c:	f7e9 ff1f 	bl	8004a9e <lv_obj_get_width>
 801ac60:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 801ac62:	4628      	mov	r0, r5
 801ac64:	f7e9 ff21 	bl	8004aaa <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ac68:	f241 0212 	movw	r2, #4114	; 0x1012
 801ac6c:	2100      	movs	r1, #0
 801ac6e:	9003      	str	r0, [sp, #12]
 801ac70:	4628      	mov	r0, r5
 801ac72:	f7ec f991 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ac76:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801ac7a:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ac7e:	2100      	movs	r1, #0
 801ac80:	4628      	mov	r0, r5
 801ac82:	f7ec f989 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ac86:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801ac8a:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ac8c:	2100      	movs	r1, #0
 801ac8e:	4628      	mov	r0, r5
 801ac90:	f7ec f982 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac94:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801ac98:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac9a:	2100      	movs	r1, #0
 801ac9c:	4628      	mov	r0, r5
 801ac9e:	f7ec f97b 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801aca2:	f241 0214 	movw	r2, #4116	; 0x1014
    return (lv_coord_t)v.num;
 801aca6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801acaa:	2100      	movs	r1, #0
 801acac:	4628      	mov	r0, r5
 801acae:	f7ec f973 	bl	8006f98 <lv_obj_get_style_prop>
 801acb2:	4604      	mov	r4, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801acb4:	4628      	mov	r0, r5
 801acb6:	f7ff fdb7 	bl	801a828 <lv_obj_get_style_pad_column.constprop.0>
    prow = (prow / 2) + 1 + (prow & 1);
 801acba:	f004 0301 	and.w	r3, r4, #1
 801acbe:	1c5a      	adds	r2, r3, #1
 801acc0:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801acc4:	fa03 f384 	sxtah	r3, r3, r4
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801acc8:	f000 0401 	and.w	r4, r0, #1
    prow = (prow / 2) + 1 + (prow & 1);
 801accc:	eb02 0363 	add.w	r3, r2, r3, asr #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801acd0:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
    prow = (prow / 2) + 1 + (prow & 1);
 801acd4:	b21b      	sxth	r3, r3
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801acd6:	eb04 0462 	add.w	r4, r4, r2, asr #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801acda:	2b0d      	cmp	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801acdc:	f104 0401 	add.w	r4, r4, #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801ace0:	bfa8      	it	ge
 801ace2:	230d      	movge	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801ace4:	b224      	sxth	r4, r4
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801ace6:	9301      	str	r3, [sp, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801ace8:	4653      	mov	r3, sl
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 801acea:	2c0d      	cmp	r4, #13
 801acec:	bfa8      	it	ge
 801acee:	240d      	movge	r4, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 801acf0:	2e0d      	cmp	r6, #13
 801acf2:	bfa8      	it	ge
 801acf4:	260d      	movge	r6, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801acf6:	2f0d      	cmp	r7, #13
 801acf8:	bfa8      	it	ge
 801acfa:	270d      	movge	r7, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 801acfc:	f1b8 0f0d 	cmp.w	r8, #13
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801ad00:	eba9 0906 	sub.w	r9, r9, r6
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 801ad04:	bfa8      	it	ge
 801ad06:	f04f 080d 	movge.w	r8, #13
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801ad0a:	2b0d      	cmp	r3, #13
 801ad0c:	bfa8      	it	ge
 801ad0e:	230d      	movge	r3, #13
 801ad10:	9304      	str	r3, [sp, #16]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801ad12:	f1a9 0302 	sub.w	r3, r9, #2
 801ad16:	9305      	str	r3, [sp, #20]
 801ad18:	fa1f f98b 	uxth.w	r9, fp
    for(i = 0; i < btnm->btn_cnt; i++) {
 801ad1c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 801ad1e:	454b      	cmp	r3, r9
 801ad20:	d950      	bls.n	801adc4 <get_button_from_point+0x184>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 801ad22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ad24:	fa1f f38b 	uxth.w	r3, fp
 801ad28:	f10b 0b01 	add.w	fp, fp, #1
    dest->x1 = src->x1;
 801ad2c:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
 801ad30:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    dest->y1 = src->y1;
 801ad34:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801ad38:	458a      	cmp	sl, r1
 801ad3a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801ad3e:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801ad42:	bfac      	ite	ge
 801ad44:	9904      	ldrge	r1, [sp, #16]
        else btn_area.x1 += obj_cords.x1 - pcol;
 801ad46:	1b11      	sublt	r1, r2, r4
    dest->x2 = src->x2;
 801ad48:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801ad4c:	bfa8      	it	ge
 801ad4e:	1a51      	subge	r1, r2, r1
    dest->y2 = src->y2;
 801ad50:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801ad54:	4577      	cmp	r7, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 801ad56:	440b      	add	r3, r1
 801ad58:	9002      	str	r0, [sp, #8]
        else btn_area.y1 += obj_cords.y1 - prow;
 801ad5a:	bfb8      	it	lt
 801ad5c:	9801      	ldrlt	r0, [sp, #4]
 801ad5e:	fa1f f18e 	uxth.w	r1, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 801ad62:	b21b      	sxth	r3, r3
 801ad64:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801ad68:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        else btn_area.y1 += obj_cords.y1 - prow;
 801ad6c:	bfb4      	ite	lt
 801ad6e:	eba3 0e00 	sublt.w	lr, r3, r0
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801ad72:	eba3 0e07 	subge.w	lr, r3, r7
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801ad76:	9805      	ldr	r0, [sp, #20]
        else btn_area.y1 += obj_cords.y1 - prow;
 801ad78:	4471      	add	r1, lr
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801ad7a:	4584      	cmp	ip, r0
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801ad7c:	9802      	ldr	r0, [sp, #8]
        else btn_area.y1 += obj_cords.y1 - prow;
 801ad7e:	b209      	sxth	r1, r1
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801ad80:	bfac      	ite	ge
 801ad82:	1992      	addge	r2, r2, r6
        else btn_area.x2 += obj_cords.x1 + pcol;
 801ad84:	1912      	addlt	r2, r2, r4
 801ad86:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801ad8a:	fa1f f18c 	uxth.w	r1, ip
 801ad8e:	440a      	add	r2, r1
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801ad90:	9903      	ldr	r1, [sp, #12]
 801ad92:	eba1 0108 	sub.w	r1, r1, r8
        else btn_area.x2 += obj_cords.x1 + pcol;
 801ad96:	b212      	sxth	r2, r2
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801ad98:	3902      	subs	r1, #2
 801ad9a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801ad9e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ada2:	4288      	cmp	r0, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801ada4:	a808      	add	r0, sp, #32
        else btn_area.y2 += obj_cords.y1 + prow;
 801ada6:	bfb6      	itet	lt
 801ada8:	9901      	ldrlt	r1, [sp, #4]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801adaa:	4443      	addge	r3, r8
        else btn_area.y2 += obj_cords.y1 + prow;
 801adac:	185b      	addlt	r3, r3, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801adae:	ee18 1a10 	vmov	r1, s16
        else btn_area.y2 += obj_cords.y1 + prow;
 801adb2:	4413      	add	r3, r2
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801adb4:	2200      	movs	r2, #0
        else btn_area.y2 += obj_cords.y1 + prow;
 801adb6:	b21b      	sxth	r3, r3
 801adb8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801adbc:	f7fb fedf 	bl	8016b7e <_lv_area_is_point_on>
 801adc0:	2800      	cmp	r0, #0
 801adc2:	d0a9      	beq.n	801ad18 <get_button_from_point+0xd8>
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 801adc4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 801adc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801adca:	454a      	cmp	r2, r9
 801adcc:	bf08      	it	eq
 801adce:	4699      	moveq	r9, r3
}
 801add0:	4648      	mov	r0, r9
 801add2:	b00b      	add	sp, #44	; 0x2c
 801add4:	ecbd 8b02 	vpop	{d8}
 801add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801addc <lv_btnmatrix_set_map.part.0>:
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 801addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while(map[i] && map[i][0] != '\0') {
 801ade0:	2700      	movs	r7, #0
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 801ade2:	b095      	sub	sp, #84	; 0x54
 801ade4:	4604      	mov	r4, r0
 801ade6:	460d      	mov	r5, r1
    uint16_t btn_cnt = 0;
 801ade8:	463e      	mov	r6, r7
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801adea:	f8df 8274 	ldr.w	r8, [pc, #628]	; 801b060 <lv_btnmatrix_set_map.part.0+0x284>
    while(map[i] && map[i][0] != '\0') {
 801adee:	b2bb      	uxth	r3, r7
 801adf0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801adf4:	b108      	cbz	r0, 801adfa <lv_btnmatrix_set_map.part.0+0x1e>
 801adf6:	7803      	ldrb	r3, [r0, #0]
 801adf8:	b9a3      	cbnz	r3, 801ae24 <lv_btnmatrix_set_map.part.0+0x48>
    if(btn_cnt == btnm->btn_cnt) return;
 801adfa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801adfc:	42b3      	cmp	r3, r6
 801adfe:	d027      	beq.n	801ae50 <lv_btnmatrix_set_map.part.0+0x74>
    if(btnm->button_areas != NULL) {
 801ae00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801ae02:	b118      	cbz	r0, 801ae0c <lv_btnmatrix_set_map.part.0+0x30>
        lv_mem_free(btnm->button_areas);
 801ae04:	f7fc fabe 	bl	8017384 <lv_mem_free>
        btnm->button_areas = NULL;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	62a3      	str	r3, [r4, #40]	; 0x28
    if(btnm->ctrl_bits != NULL) {
 801ae0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801ae0e:	b118      	cbz	r0, 801ae18 <lv_btnmatrix_set_map.part.0+0x3c>
        lv_mem_free(btnm->ctrl_bits);
 801ae10:	f7fc fab8 	bl	8017384 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 801ae14:	2300      	movs	r3, #0
 801ae16:	62e3      	str	r3, [r4, #44]	; 0x2c
    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 801ae18:	00f0      	lsls	r0, r6, #3
 801ae1a:	f7fc fc35 	bl	8017688 <lv_mem_alloc>
 801ae1e:	62a0      	str	r0, [r4, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 801ae20:	b940      	cbnz	r0, 801ae34 <lv_btnmatrix_set_map.part.0+0x58>
 801ae22:	e7fe      	b.n	801ae22 <lv_btnmatrix_set_map.part.0+0x46>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801ae24:	4641      	mov	r1, r8
 801ae26:	f7e5 f9f3 	bl	8000210 <strcmp>
 801ae2a:	b108      	cbz	r0, 801ae30 <lv_btnmatrix_set_map.part.0+0x54>
            btn_cnt++;
 801ae2c:	3601      	adds	r6, #1
 801ae2e:	b2b6      	uxth	r6, r6
        i++;
 801ae30:	3701      	adds	r7, #1
 801ae32:	e7dc      	b.n	801adee <lv_btnmatrix_set_map.part.0+0x12>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801ae34:	0070      	lsls	r0, r6, #1
 801ae36:	f7fc fc27 	bl	8017688 <lv_mem_alloc>
 801ae3a:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 801ae3c:	b900      	cbnz	r0, 801ae40 <lv_btnmatrix_set_map.part.0+0x64>
 801ae3e:	e7fe      	b.n	801ae3e <lv_btnmatrix_set_map.part.0+0x62>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 801ae40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	bf08      	it	eq
 801ae46:	2600      	moveq	r6, #0
    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801ae48:	0071      	lsls	r1, r6, #1
 801ae4a:	f7fc fc9b 	bl	8017784 <lv_memset_00>
    btnm->btn_cnt = btn_cnt;
 801ae4e:	8626      	strh	r6, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ae50:	f241 426a 	movw	r2, #5226	; 0x146a
 801ae54:	2100      	movs	r1, #0
 801ae56:	4620      	mov	r0, r4
    btnm->map_p = map;
 801ae58:	6265      	str	r5, [r4, #36]	; 0x24
 801ae5a:	f7ec f89d 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ae5e:	f241 0212 	movw	r2, #4114	; 0x1012
    return (lv_base_dir_t)v.num;
 801ae62:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ae64:	2100      	movs	r1, #0
 801ae66:	4620      	mov	r0, r4
    uint8_t row_cnt = 1;
 801ae68:	f04f 0b01 	mov.w	fp, #1
    return (lv_base_dir_t)v.num;
 801ae6c:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ae6e:	f7ec f893 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ae72:	f241 0210 	movw	r2, #4112	; 0x1010
 801ae76:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ae78:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ae7a:	4620      	mov	r0, r4
 801ae7c:	f7ec f88c 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801ae80:	f241 0214 	movw	r2, #4116	; 0x1014
 801ae84:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ae86:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801ae88:	4620      	mov	r0, r4
 801ae8a:	f7ec f885 	bl	8006f98 <lv_obj_get_style_prop>
 801ae8e:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801ae90:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801ae94:	4620      	mov	r0, r4
 801ae96:	f7ff fcc7 	bl	801a828 <lv_obj_get_style_pad_column.constprop.0>
 801ae9a:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	f7e9 fe0a 	bl	8004ab6 <lv_obj_get_content_width>
 801aea2:	4606      	mov	r6, r0
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 801aea4:	4620      	mov	r0, r4
 801aea6:	f7e9 fe20 	bl	8004aea <lv_obj_get_content_height>
 801aeaa:	1f2a      	subs	r2, r5, #4
 801aeac:	4682      	mov	sl, r0
        if(strcmp(map[i], "\n") == 0) row_cnt++;
 801aeae:	496c      	ldr	r1, [pc, #432]	; (801b060 <lv_btnmatrix_set_map.part.0+0x284>)
    for(i = 0; map[i] && map[i][0] != '\0'; i++) {
 801aeb0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801aeb4:	b108      	cbz	r0, 801aeba <lv_btnmatrix_set_map.part.0+0xde>
 801aeb6:	7803      	ldrb	r3, [r0, #0]
 801aeb8:	bb0b      	cbnz	r3, 801aefe <lv_btnmatrix_set_map.part.0+0x122>
    lv_coord_t max_h_no_gap = max_h - (prow * (row_cnt - 1));
 801aeba:	f10b 30ff 	add.w	r0, fp, #4294967295
 801aebe:	fb10 f909 	smulbb	r9, r0, r9
 801aec2:	ebaa 0a09 	sub.w	sl, sl, r9
 801aec6:	fa0f f38a 	sxth.w	r3, sl
    for(row = 0; row < row_cnt; row++) {
 801aeca:	f04f 0a00 	mov.w	sl, #0
 801aece:	930c      	str	r3, [sp, #48]	; 0x30
 801aed0:	fa1f f388 	uxth.w	r3, r8
 801aed4:	f8cd a018 	str.w	sl, [sp, #24]
 801aed8:	9310      	str	r3, [sp, #64]	; 0x40
 801aeda:	b2bb      	uxth	r3, r7
    uint32_t txt_tot_i = 0; /*Act. index in the str map*/
 801aedc:	f8cd a00c 	str.w	sl, [sp, #12]
 801aee0:	9305      	str	r3, [sp, #20]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801aee2:	b2b3      	uxth	r3, r6
 801aee4:	9308      	str	r3, [sp, #32]
 801aee6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801aeea:	9312      	str	r3, [sp, #72]	; 0x48
    for(row = 0; row < row_cnt; row++) {
 801aeec:	9b06      	ldr	r3, [sp, #24]
 801aeee:	455b      	cmp	r3, fp
 801aef0:	d33f      	bcc.n	801af72 <lv_btnmatrix_set_map.part.0+0x196>
    lv_obj_invalidate(obj);
 801aef2:	4620      	mov	r0, r4
}
 801aef4:	b015      	add	sp, #84	; 0x54
 801aef6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 801aefa:	f7e9 bf25 	b.w	8004d48 <lv_obj_invalidate>
 801aefe:	9203      	str	r2, [sp, #12]
        if(strcmp(map[i], "\n") == 0) row_cnt++;
 801af00:	f7e5 f986 	bl	8000210 <strcmp>
 801af04:	4956      	ldr	r1, [pc, #344]	; (801b060 <lv_btnmatrix_set_map.part.0+0x284>)
 801af06:	9a03      	ldr	r2, [sp, #12]
 801af08:	2800      	cmp	r0, #0
 801af0a:	d1d1      	bne.n	801aeb0 <lv_btnmatrix_set_map.part.0+0xd4>
 801af0c:	f10b 0301 	add.w	r3, fp, #1
 801af10:	fa5f fb83 	uxtb.w	fp, r3
    for(i = 0; map[i] && map[i][0] != '\0'; i++) {
 801af14:	e7cc      	b.n	801aeb0 <lv_btnmatrix_set_map.part.0+0xd4>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801af16:	9b03      	ldr	r3, [sp, #12]
 801af18:	9a04      	ldr	r2, [sp, #16]
 801af1a:	441e      	add	r6, r3
 801af1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801af1e:	f813 3016 	ldrb.w	r3, [r3, r6, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801af22:	f003 0307 	and.w	r3, r3, #7
 801af26:	2b01      	cmp	r3, #1
 801af28:	bf2c      	ite	cs
 801af2a:	18d2      	addcs	r2, r2, r3
 801af2c:	3201      	addcc	r2, #1
 801af2e:	b293      	uxth	r3, r2
 801af30:	9304      	str	r3, [sp, #16]
            btn_cnt++;
 801af32:	fa1f f788 	uxth.w	r7, r8
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 801af36:	f855 9027 	ldr.w	r9, [r5, r7, lsl #2]
 801af3a:	463e      	mov	r6, r7
 801af3c:	f1b9 0f00 	cmp.w	r9, #0
 801af40:	d00a      	beq.n	801af58 <lv_btnmatrix_set_map.part.0+0x17c>
 801af42:	4947      	ldr	r1, [pc, #284]	; (801b060 <lv_btnmatrix_set_map.part.0+0x284>)
 801af44:	4648      	mov	r0, r9
 801af46:	f7e5 f963 	bl	8000210 <strcmp>
 801af4a:	b128      	cbz	r0, 801af58 <lv_btnmatrix_set_map.part.0+0x17c>
 801af4c:	f899 3000 	ldrb.w	r3, [r9]
 801af50:	f108 0801 	add.w	r8, r8, #1
 801af54:	2b00      	cmp	r3, #0
 801af56:	d1de      	bne.n	801af16 <lv_btnmatrix_set_map.part.0+0x13a>
        if(btn_cnt == 0) {
 801af58:	9b06      	ldr	r3, [sp, #24]
 801af5a:	3301      	adds	r3, #1
 801af5c:	9306      	str	r3, [sp, #24]
 801af5e:	b96f      	cbnz	r7, 801af7c <lv_btnmatrix_set_map.part.0+0x1a0>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 801af60:	3504      	adds	r5, #4
    for(row = 0; row < row_cnt; row++) {
 801af62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af66:	449a      	add	sl, r3
 801af68:	9b05      	ldr	r3, [sp, #20]
 801af6a:	4413      	add	r3, r2
 801af6c:	b29b      	uxth	r3, r3
 801af6e:	9305      	str	r3, [sp, #20]
 801af70:	e7bc      	b.n	801aeec <lv_btnmatrix_set_map.part.0+0x110>
 801af72:	f04f 0800 	mov.w	r8, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 801af76:	f8cd 8010 	str.w	r8, [sp, #16]
 801af7a:	e7da      	b.n	801af32 <lv_btnmatrix_set_map.part.0+0x156>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801af7c:	fbba f2fb 	udiv	r2, sl, fp
 801af80:	9b05      	ldr	r3, [sp, #20]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801af82:	3f01      	subs	r7, #1
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801af84:	9905      	ldr	r1, [sp, #20]
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801af86:	441a      	add	r2, r3
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801af88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af8a:	3901      	subs	r1, #1
 801af8c:	4453      	add	r3, sl
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801af8e:	b212      	sxth	r2, r2
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801af90:	fbb3 f3fb 	udiv	r3, r3, fp
 801af94:	440b      	add	r3, r1
 801af96:	b21b      	sxth	r3, r3
 801af98:	930d      	str	r3, [sp, #52]	; 0x34
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801af9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af9c:	fb17 f703 	smulbb	r7, r7, r3
 801afa0:	9b08      	ldr	r3, [sp, #32]
 801afa2:	1bdf      	subs	r7, r3, r7
 801afa4:	b23f      	sxth	r7, r7
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 801afa6:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801afaa:	2700      	movs	r7, #0
 801afac:	930a      	str	r3, [sp, #40]	; 0x28
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 801afae:	46b9      	mov	r9, r7
 801afb0:	9b03      	ldr	r3, [sp, #12]
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 801afb2:	9707      	str	r7, [sp, #28]
 801afb4:	ea4f 0843 	mov.w	r8, r3, lsl #1
            btn_x1 += pleft;
 801afb8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801afbc:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801afbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afc0:	9904      	ldr	r1, [sp, #16]
 801afc2:	fb03 f309 	mul.w	r3, r3, r9
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 801afc6:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801afc8:	fbb3 f3f1 	udiv	r3, r3, r1
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 801afcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801afce:	443b      	add	r3, r7
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801afd0:	f811 1008 	ldrb.w	r1, [r1, r8]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801afd4:	b29b      	uxth	r3, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 801afd6:	f001 0107 	and.w	r1, r1, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801afda:	2901      	cmp	r1, #1
 801afdc:	bf2c      	ite	cs
 801afde:	4489      	addcs	r9, r1
 801afe0:	f109 0901 	addcc.w	r9, r9, #1
 801afe4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801afe6:	fb09 f001 	mul.w	r0, r9, r1
 801afea:	9904      	ldr	r1, [sp, #16]
 801afec:	fbb0 f0f1 	udiv	r0, r0, r1
 801aff0:	1e79      	subs	r1, r7, #1
 801aff2:	4408      	add	r0, r1
            if(base_dir == LV_BASE_DIR_RTL) {
 801aff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801aff6:	2901      	cmp	r1, #1
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801aff8:	b280      	uxth	r0, r0
                btn_x1 = max_w - btn_x1;
 801affa:	bf0d      	iteet	eq
 801affc:	9908      	ldreq	r1, [sp, #32]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801affe:	b219      	sxthne	r1, r3
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b000:	b203      	sxthne	r3, r0
                btn_x1 = max_w - btn_x1;
 801b002:	1a08      	subeq	r0, r1, r0
 801b004:	bf02      	ittt	eq
 801b006:	b201      	sxtheq	r1, r0
                btn_x2 = max_w - btn_x2;
 801b008:	9808      	ldreq	r0, [sp, #32]
 801b00a:	1ac3      	subeq	r3, r0, r3
            btn_x1 += pleft;
 801b00c:	980b      	ldr	r0, [sp, #44]	; 0x2c
                btn_x2 = max_w - btn_x2;
 801b00e:	bf08      	it	eq
 801b010:	b21b      	sxtheq	r3, r3
            btn_x1 += pleft;
 801b012:	4401      	add	r1, r0
            btn_x2 += pleft;
 801b014:	4403      	add	r3, r0
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 801b016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b018:	b209      	sxth	r1, r1
 801b01a:	9011      	str	r0, [sp, #68]	; 0x44
 801b01c:	b21b      	sxth	r3, r3
 801b01e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b020:	9000      	str	r0, [sp, #0]
 801b022:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b024:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801b028:	f108 0802 	add.w	r8, r8, #2
 801b02c:	f7fb fd1c 	bl	8016a68 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 801b030:	9b07      	ldr	r3, [sp, #28]
 801b032:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b034:	3301      	adds	r3, #1
 801b036:	9307      	str	r3, [sp, #28]
 801b038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b03a:	441f      	add	r7, r3
 801b03c:	9b07      	ldr	r3, [sp, #28]
 801b03e:	42b3      	cmp	r3, r6
 801b040:	b2bf      	uxth	r7, r7
 801b042:	d3bc      	bcc.n	801afbe <lv_btnmatrix_set_map.part.0+0x1e2>
 801b044:	2e00      	cmp	r6, #0
 801b046:	9a03      	ldr	r2, [sp, #12]
 801b048:	f106 33ff 	add.w	r3, r6, #4294967295
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 801b04c:	f106 0601 	add.w	r6, r6, #1
 801b050:	bf08      	it	eq
 801b052:	2300      	moveq	r3, #0
 801b054:	3201      	adds	r2, #1
 801b056:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801b05a:	4413      	add	r3, r2
 801b05c:	9303      	str	r3, [sp, #12]
 801b05e:	e780      	b.n	801af62 <lv_btnmatrix_set_map.part.0+0x186>
 801b060:	0802a5e6 	.word	0x0802a5e6

0801b064 <lv_btnmatrix_constructor>:
    btnm->btn_cnt        = 0;
 801b064:	4a07      	ldr	r2, [pc, #28]	; (801b084 <lv_btnmatrix_constructor+0x20>)
    btnm->map_p          = NULL;
 801b066:	2300      	movs	r3, #0
{
 801b068:	4608      	mov	r0, r1
    btnm->btn_cnt        = 0;
 801b06a:	630a      	str	r2, [r1, #48]	; 0x30
    btnm->one_check      = 0;
 801b06c:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    btnm->ctrl_bits      = NULL;
 801b070:	62cb      	str	r3, [r1, #44]	; 0x2c
    btnm->one_check      = 0;
 801b072:	f363 0200 	bfi	r2, r3, #0, #1
    btnm->button_areas   = NULL;
 801b076:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    btnm->one_check      = 0;
 801b07a:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    if(map == NULL) return;
 801b07e:	4902      	ldr	r1, [pc, #8]	; (801b088 <lv_btnmatrix_constructor+0x24>)
 801b080:	f7ff beac 	b.w	801addc <lv_btnmatrix_set_map.part.0>
 801b084:	ffff0000 	.word	0xffff0000
 801b088:	20000054 	.word	0x20000054

0801b08c <lv_btnmatrix_create>:
{
 801b08c:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801b08e:	4804      	ldr	r0, [pc, #16]	; (801b0a0 <lv_btnmatrix_create+0x14>)
{
 801b090:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801b092:	f7e8 ffaf 	bl	8003ff4 <lv_obj_class_create_obj>
 801b096:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801b098:	f7e9 f839 	bl	800410e <lv_obj_class_init_obj>
}
 801b09c:	4620      	mov	r0, r4
 801b09e:	bd10      	pop	{r4, pc}
 801b0a0:	08029f80 	.word	0x08029f80

0801b0a4 <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 801b0a4:	b109      	cbz	r1, 801b0aa <lv_btnmatrix_set_map+0x6>
 801b0a6:	f7ff be99 	b.w	801addc <lv_btnmatrix_set_map.part.0>
}
 801b0aa:	4770      	bx	lr

0801b0ac <lv_btnmatrix_set_ctrl_map>:
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801b0ac:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 801b0ae:	b510      	push	{r4, lr}
 801b0b0:	4604      	mov	r4, r0
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801b0b2:	0052      	lsls	r2, r2, #1
 801b0b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b0b6:	f7fc f99f 	bl	80173f8 <lv_memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 801b0ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b0bc:	4620      	mov	r0, r4
}
 801b0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_btnmatrix_set_map(obj, btnm->map_p);
 801b0c2:	f7ff bfef 	b.w	801b0a4 <lv_btnmatrix_set_map>

0801b0c6 <lv_btnmatrix_clear_btn_ctrl>:
{
 801b0c6:	b430      	push	{r4, r5}
    if(btn_id >= btnm->btn_cnt) return;
 801b0c8:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801b0ca:	428d      	cmp	r5, r1
 801b0cc:	d909      	bls.n	801b0e2 <lv_btnmatrix_clear_btn_ctrl+0x1c>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 801b0ce:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801b0d0:	f835 4011 	ldrh.w	r4, [r5, r1, lsl #1]
 801b0d4:	ea24 0202 	bic.w	r2, r4, r2
 801b0d8:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}
 801b0dc:	bc30      	pop	{r4, r5}
    invalidate_button_area(obj, btn_id);
 801b0de:	f7ff bd65 	b.w	801abac <invalidate_button_area>
}
 801b0e2:	bc30      	pop	{r4, r5}
 801b0e4:	4770      	bx	lr

0801b0e6 <lv_btnmatrix_clear_btn_ctrl_all>:
{
 801b0e6:	b570      	push	{r4, r5, r6, lr}
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b0ec:	2500      	movs	r5, #0
 801b0ee:	b2a9      	uxth	r1, r5
 801b0f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b0f2:	428b      	cmp	r3, r1
 801b0f4:	d800      	bhi.n	801b0f8 <lv_btnmatrix_clear_btn_ctrl_all+0x12>
}
 801b0f6:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 801b0f8:	4632      	mov	r2, r6
 801b0fa:	4620      	mov	r0, r4
 801b0fc:	3501      	adds	r5, #1
 801b0fe:	f7ff ffe2 	bl	801b0c6 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b102:	e7f4      	b.n	801b0ee <lv_btnmatrix_clear_btn_ctrl_all+0x8>

0801b104 <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 801b104:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b106:	428b      	cmp	r3, r1
{
 801b108:	b570      	push	{r4, r5, r6, lr}
 801b10a:	4604      	mov	r4, r0
 801b10c:	460d      	mov	r5, r1
 801b10e:	4616      	mov	r6, r2
    if(btn_id >= btnm->btn_cnt) return;
 801b110:	d914      	bls.n	801b13c <lv_btnmatrix_set_btn_ctrl+0x38>
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 801b112:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801b116:	07da      	lsls	r2, r3, #31
 801b118:	d504      	bpl.n	801b124 <lv_btnmatrix_set_btn_ctrl+0x20>
 801b11a:	0633      	lsls	r3, r6, #24
 801b11c:	d502      	bpl.n	801b124 <lv_btnmatrix_set_btn_ctrl+0x20>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 801b11e:	2180      	movs	r1, #128	; 0x80
 801b120:	f7ff ffe1 	bl	801b0e6 <lv_btnmatrix_clear_btn_ctrl_all>
    btnm->ctrl_bits[btn_id] |= ctrl;
 801b124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    invalidate_button_area(obj, btn_id);
 801b126:	4629      	mov	r1, r5
 801b128:	4620      	mov	r0, r4
    btnm->ctrl_bits[btn_id] |= ctrl;
 801b12a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 801b12e:	4316      	orrs	r6, r2
 801b130:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
}
 801b134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(obj, btn_id);
 801b138:	f7ff bd38 	b.w	801abac <invalidate_button_area>
}
 801b13c:	bd70      	pop	{r4, r5, r6, pc}

0801b13e <lv_btnmatrix_set_btn_ctrl_all>:
{
 801b13e:	b570      	push	{r4, r5, r6, lr}
 801b140:	4604      	mov	r4, r0
 801b142:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b144:	2500      	movs	r5, #0
 801b146:	b2a9      	uxth	r1, r5
 801b148:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b14a:	428b      	cmp	r3, r1
 801b14c:	d800      	bhi.n	801b150 <lv_btnmatrix_set_btn_ctrl_all+0x12>
}
 801b14e:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_set_btn_ctrl(obj, i, ctrl);
 801b150:	4632      	mov	r2, r6
 801b152:	4620      	mov	r0, r4
 801b154:	3501      	adds	r5, #1
 801b156:	f7ff ffd5 	bl	801b104 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b15a:	e7f4      	b.n	801b146 <lv_btnmatrix_set_btn_ctrl_all+0x8>

0801b15c <lv_btnmatrix_get_selected_btn>:
}
 801b15c:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b15e:	4770      	bx	lr

0801b160 <lv_btnmatrix_get_btn_text>:
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b164:	4299      	cmp	r1, r3
{
 801b166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b16a:	4605      	mov	r5, r0
 801b16c:	460f      	mov	r7, r1
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b16e:	d020      	beq.n	801b1b2 <lv_btnmatrix_get_btn_text+0x52>
    if(btn_id > btnm->btn_cnt) return NULL;
 801b170:	f8b0 9030 	ldrh.w	r9, [r0, #48]	; 0x30
 801b174:	4589      	cmp	r9, r1
 801b176:	d31c      	bcc.n	801b1b2 <lv_btnmatrix_get_btn_text+0x52>
 801b178:	2600      	movs	r6, #0
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b17a:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801b1b8 <lv_btnmatrix_get_btn_text+0x58>
    uint16_t txt_i = 0;
 801b17e:	46b0      	mov	r8, r6
    while(btn_i != btn_id) {
 801b180:	42be      	cmp	r6, r7
 801b182:	d106      	bne.n	801b192 <lv_btnmatrix_get_btn_text+0x32>
    if(btn_i == btnm->btn_cnt) return NULL;
 801b184:	45b1      	cmp	r9, r6
 801b186:	d014      	beq.n	801b1b2 <lv_btnmatrix_get_btn_text+0x52>
    return btnm->map_p[txt_i];
 801b188:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b18a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
}
 801b18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        txt_i++;
 801b192:	f108 0401 	add.w	r4, r8, #1
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b198:	4651      	mov	r1, sl
        txt_i++;
 801b19a:	b2a4      	uxth	r4, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b19c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b1a0:	f7e5 f836 	bl	8000210 <strcmp>
 801b1a4:	b910      	cbnz	r0, 801b1ac <lv_btnmatrix_get_btn_text+0x4c>
 801b1a6:	f108 0402 	add.w	r4, r8, #2
 801b1aa:	b2a4      	uxth	r4, r4
 801b1ac:	3601      	adds	r6, #1
{
 801b1ae:	46a0      	mov	r8, r4
 801b1b0:	e7e6      	b.n	801b180 <lv_btnmatrix_get_btn_text+0x20>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b1b2:	2000      	movs	r0, #0
 801b1b4:	e7eb      	b.n	801b18e <lv_btnmatrix_get_btn_text+0x2e>
 801b1b6:	bf00      	nop
 801b1b8:	0802a5e6 	.word	0x0802a5e6

0801b1bc <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 801b1bc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b1be:	428b      	cmp	r3, r1
 801b1c0:	d907      	bls.n	801b1d2 <lv_btnmatrix_has_btn_ctrl+0x16>
    return (btnm->ctrl_bits[btn_id] & ctrl) ? true : false;
 801b1c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b1c4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801b1c8:	421a      	tst	r2, r3
 801b1ca:	bf14      	ite	ne
 801b1cc:	2001      	movne	r0, #1
 801b1ce:	2000      	moveq	r0, #0
 801b1d0:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 801b1d2:	2000      	movs	r0, #0
}
 801b1d4:	4770      	bx	lr

0801b1d6 <make_one_button_checked>:
 * It simply clears the toggle flag on other buttons.
 * @param obj Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_checked(lv_obj_t * obj, uint16_t btn_idx)
{
 801b1d6:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b1d8:	2280      	movs	r2, #128	; 0x80
{
 801b1da:	4604      	mov	r4, r0
 801b1dc:	460d      	mov	r5, r1
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b1de:	f7ff ffed 	bl	801b1bc <lv_btnmatrix_has_btn_ctrl>
 801b1e2:	4606      	mov	r6, r0

    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 801b1e4:	2180      	movs	r1, #128	; 0x80
 801b1e6:	4620      	mov	r0, r4
 801b1e8:	f7ff ff7d 	bl	801b0e6 <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b1ec:	b136      	cbz	r6, 801b1fc <make_one_button_checked+0x26>
 801b1ee:	4629      	mov	r1, r5
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	2280      	movs	r2, #128	; 0x80
}
 801b1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b1f8:	f7ff bf84 	b.w	801b104 <lv_btnmatrix_set_btn_ctrl>
}
 801b1fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b200 <lv_btnmatrix_event>:
{
 801b200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801b204:	48b1      	ldr	r0, [pc, #708]	; (801b4cc <lv_btnmatrix_event+0x2cc>)
{
 801b206:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801b208:	f7e6 fbff 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801b20c:	2801      	cmp	r0, #1
 801b20e:	d10c      	bne.n	801b22a <lv_btnmatrix_event+0x2a>
    lv_event_code_t code = lv_event_get_code(e);
 801b210:	4630      	mov	r0, r6
 801b212:	f7e6 fc93 	bl	8001b3c <lv_event_get_code>
 801b216:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801b218:	4630      	mov	r0, r6
 801b21a:	f7e6 fc8d 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b21e:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801b220:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b222:	d105      	bne.n	801b230 <lv_btnmatrix_event+0x30>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 801b224:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b226:	f7ff ff3d 	bl	801b0a4 <lv_btnmatrix_set_map>
}
 801b22a:	b003      	add	sp, #12
 801b22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801b230:	2d23      	cmp	r5, #35	; 0x23
 801b232:	d0f7      	beq.n	801b224 <lv_btnmatrix_event+0x24>
    else if(code == LV_EVENT_PRESSED) {
 801b234:	2d01      	cmp	r5, #1
 801b236:	d138      	bne.n	801b2aa <lv_btnmatrix_event+0xaa>
        void * param = lv_event_get_param(e);
 801b238:	4630      	mov	r0, r6
 801b23a:	f7e6 fc81 	bl	8001b40 <lv_event_get_param>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b23e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        void * param = lv_event_get_param(e);
 801b240:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b242:	4620      	mov	r0, r4
 801b244:	f7ff fcb2 	bl	801abac <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b248:	f7e6 feec 	bl	8002024 <lv_indev_get_act>
 801b24c:	f7e6 fef0 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b250:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b254:	2801      	cmp	r0, #1
 801b256:	d117      	bne.n	801b288 <lv_btnmatrix_event+0x88>
            lv_indev_get_point(param, &p);
 801b258:	4669      	mov	r1, sp
 801b25a:	4628      	mov	r0, r5
 801b25c:	f7e6 ff43 	bl	80020e6 <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 801b260:	4669      	mov	r1, sp
 801b262:	4620      	mov	r0, r4
 801b264:	f7ff fcec 	bl	801ac40 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801b268:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(obj, &p);
 801b26c:	4601      	mov	r1, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801b26e:	4298      	cmp	r0, r3
 801b270:	d00a      	beq.n	801b288 <lv_btnmatrix_event+0x88>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b274:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b278:	069d      	lsls	r5, r3, #26
 801b27a:	d405      	bmi.n	801b288 <lv_btnmatrix_event+0x88>
 801b27c:	0718      	lsls	r0, r3, #28
 801b27e:	d403      	bmi.n	801b288 <lv_btnmatrix_event+0x88>
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 801b280:	4620      	mov	r0, r4
                    btnm->btn_id_sel = btn_pr;
 801b282:	8661      	strh	r1, [r4, #50]	; 0x32
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 801b284:	f7ff fc92 	bl	801abac <invalidate_button_area>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b288:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b28e:	4293      	cmp	r3, r2
 801b290:	d0cb      	beq.n	801b22a <lv_btnmatrix_event+0x2a>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b294:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b298:	f412 7f80 	tst.w	r2, #256	; 0x100
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b29c:	d1c5      	bne.n	801b22a <lv_btnmatrix_event+0x2a>
 801b29e:	0691      	lsls	r1, r2, #26
 801b2a0:	d4c3      	bmi.n	801b22a <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b2a2:	0712      	lsls	r2, r2, #28
 801b2a4:	d4c1      	bmi.n	801b22a <lv_btnmatrix_event+0x2a>
                uint32_t b = btnm->btn_id_sel;
 801b2a6:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b2a8:	e03a      	b.n	801b320 <lv_btnmatrix_event+0x120>
    else if(code == LV_EVENT_PRESSING) {
 801b2aa:	2d02      	cmp	r5, #2
 801b2ac:	d13e      	bne.n	801b32c <lv_btnmatrix_event+0x12c>
        void * param = lv_event_get_param(e);
 801b2ae:	4630      	mov	r0, r6
 801b2b0:	f7e6 fc46 	bl	8001b40 <lv_event_get_param>
 801b2b4:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 801b2b6:	f7e6 feb5 	bl	8002024 <lv_indev_get_act>
 801b2ba:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b2bc:	f7e6 feb8 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 801b2c0:	2804      	cmp	r0, #4
 801b2c2:	d0b2      	beq.n	801b22a <lv_btnmatrix_event+0x2a>
 801b2c4:	2802      	cmp	r0, #2
 801b2c6:	d0b0      	beq.n	801b22a <lv_btnmatrix_event+0x2a>
        lv_indev_get_point(indev, &p);
 801b2c8:	4628      	mov	r0, r5
 801b2ca:	4669      	mov	r1, sp
 801b2cc:	f7e6 ff0b 	bl	80020e6 <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 801b2d0:	4669      	mov	r1, sp
 801b2d2:	4620      	mov	r0, r4
 801b2d4:	f7ff fcb4 	bl	801ac40 <get_button_from_point>
        if(btn_pr != btnm->btn_id_sel) {
 801b2d8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        btn_pr = get_button_from_point(obj, &p);
 801b2da:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 801b2dc:	4281      	cmp	r1, r0
 801b2de:	d0a4      	beq.n	801b22a <lv_btnmatrix_event+0x2a>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b2e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b2e4:	4299      	cmp	r1, r3
 801b2e6:	d002      	beq.n	801b2ee <lv_btnmatrix_event+0xee>
                invalidate_button_area(obj, btnm->btn_id_sel);
 801b2e8:	4620      	mov	r0, r4
 801b2ea:	f7ff fc5f 	bl	801abac <invalidate_button_area>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801b2ee:	4630      	mov	r0, r6
            btnm->btn_id_sel = btn_pr;
 801b2f0:	8665      	strh	r5, [r4, #50]	; 0x32
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801b2f2:	f7e6 feeb 	bl	80020cc <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801b2f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b2fa:	429d      	cmp	r5, r3
 801b2fc:	d095      	beq.n	801b22a <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b2fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b300:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801b304:	0699      	lsls	r1, r3, #26
 801b306:	d490      	bmi.n	801b22a <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b308:	071a      	lsls	r2, r3, #28
 801b30a:	d48e      	bmi.n	801b22a <lv_btnmatrix_event+0x2a>
                invalidate_button_area(obj, btn_pr);
 801b30c:	4629      	mov	r1, r5
 801b30e:	4620      	mov	r0, r4
 801b310:	f7ff fc4c 	bl	801abac <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false) {
 801b314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b316:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false) {
 801b31a:	05db      	lsls	r3, r3, #23
 801b31c:	d485      	bmi.n	801b22a <lv_btnmatrix_event+0x2a>
                    uint32_t b = btn_pr;
 801b31e:	9501      	str	r5, [sp, #4]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b320:	aa01      	add	r2, sp, #4
 801b322:	211c      	movs	r1, #28
 801b324:	4620      	mov	r0, r4
 801b326:	f7e6 fbe7 	bl	8001af8 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801b32a:	e77e      	b.n	801b22a <lv_btnmatrix_event+0x2a>
    else if(code == LV_EVENT_RELEASED) {
 801b32c:	2d08      	cmp	r5, #8
 801b32e:	d145      	bne.n	801b3bc <lv_btnmatrix_event+0x1bc>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b330:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b336:	429a      	cmp	r2, r3
 801b338:	d02c      	beq.n	801b394 <lv_btnmatrix_event+0x194>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 801b33a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801b33c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 801b340:	065f      	lsls	r7, r3, #25
 801b342:	d514      	bpl.n	801b36e <lv_btnmatrix_event+0x16e>
 801b344:	069e      	lsls	r6, r3, #26
 801b346:	d412      	bmi.n	801b36e <lv_btnmatrix_event+0x16e>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 801b348:	061d      	lsls	r5, r3, #24
 801b34a:	d534      	bpl.n	801b3b6 <lv_btnmatrix_event+0x1b6>
 801b34c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801b350:	07c0      	lsls	r0, r0, #31
 801b352:	d430      	bmi.n	801b3b6 <lv_btnmatrix_event+0x1b6>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 801b354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b358:	b29b      	uxth	r3, r3
 801b35a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 801b35e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801b362:	07df      	lsls	r7, r3, #31
 801b364:	d503      	bpl.n	801b36e <lv_btnmatrix_event+0x16e>
 801b366:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b368:	4620      	mov	r0, r4
 801b36a:	f7ff ff34 	bl	801b1d6 <make_one_button_checked>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true &&
 801b36e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b372:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true &&
 801b376:	05de      	lsls	r6, r3, #23
 801b378:	d50c      	bpl.n	801b394 <lv_btnmatrix_event+0x194>
 801b37a:	069d      	lsls	r5, r3, #26
 801b37c:	d40a      	bmi.n	801b394 <lv_btnmatrix_event+0x194>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b37e:	0718      	lsls	r0, r3, #28
 801b380:	d408      	bmi.n	801b394 <lv_btnmatrix_event+0x194>
                uint32_t b = btnm->btn_id_sel;
 801b382:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b384:	211c      	movs	r1, #28
 801b386:	aa01      	add	r2, sp, #4
 801b388:	4620      	mov	r0, r4
 801b38a:	f7e6 fbb5 	bl	8001af8 <lv_event_send>
                if(res != LV_RES_OK) return;
 801b38e:	2801      	cmp	r0, #1
 801b390:	f47f af4b 	bne.w	801b22a <lv_btnmatrix_event+0x2a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b394:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b396:	4620      	mov	r0, r4
 801b398:	f7ff fc08 	bl	801abac <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b39c:	f7e6 fe42 	bl	8002024 <lv_indev_get_act>
 801b3a0:	f7e6 fe46 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b3a4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b3a8:	2801      	cmp	r0, #1
 801b3aa:	f47f af3e 	bne.w	801b22a <lv_btnmatrix_event+0x2a>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 801b3ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b3b2:	8663      	strh	r3, [r4, #50]	; 0x32
 801b3b4:	e739      	b.n	801b22a <lv_btnmatrix_event+0x2a>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 801b3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b3ba:	e7ce      	b.n	801b35a <lv_btnmatrix_event+0x15a>
    else if(code == LV_EVENT_LONG_PRESSED_REPEAT) {
 801b3bc:	2d06      	cmp	r5, #6
 801b3be:	d10b      	bne.n	801b3d8 <lv_btnmatrix_event+0x1d8>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b3c0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801b3c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b3c6:	4293      	cmp	r3, r2
 801b3c8:	f43f af2f 	beq.w	801b22a <lv_btnmatrix_event+0x2a>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b3cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 801b3ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b3d2:	f012 0f10 	tst.w	r2, #16
 801b3d6:	e761      	b.n	801b29c <lv_btnmatrix_event+0x9c>
    else if(code == LV_EVENT_PRESS_LOST) {
 801b3d8:	2d03      	cmp	r5, #3
 801b3da:	d103      	bne.n	801b3e4 <lv_btnmatrix_event+0x1e4>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b3dc:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b3de:	f7ff fbe5 	bl	801abac <invalidate_button_area>
 801b3e2:	e7e4      	b.n	801b3ae <lv_btnmatrix_event+0x1ae>
    else if(code == LV_EVENT_FOCUSED) {
 801b3e4:	2d0e      	cmp	r5, #14
 801b3e6:	d132      	bne.n	801b44e <lv_btnmatrix_event+0x24e>
        lv_indev_t * indev = lv_event_get_param(e);
 801b3e8:	4630      	mov	r0, r6
 801b3ea:	f7e6 fba9 	bl	8001b40 <lv_event_get_param>
 801b3ee:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b3f0:	f7e6 fe1e 	bl	8002030 <lv_indev_get_type>
 801b3f4:	4605      	mov	r5, r0
        if(indev == NULL) {
 801b3f6:	b92e      	cbnz	r6, 801b404 <lv_btnmatrix_event+0x204>
            indev = lv_indev_get_next(NULL);
 801b3f8:	2000      	movs	r0, #0
 801b3fa:	f7fb f8fb 	bl	80165f4 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 801b3fe:	f7e6 fe17 	bl	8002030 <lv_indev_get_type>
 801b402:	4605      	mov	r5, r0
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 801b404:	4620      	mov	r0, r4
 801b406:	f7e8 fb03 	bl	8003a10 <lv_obj_get_group>
 801b40a:	f7e6 fd97 	bl	8001f3c <lv_group_get_editing>
        if(indev_type == LV_INDEV_TYPE_KEYPAD|| (indev_type == LV_INDEV_TYPE_ENCODER&& editing)) {
 801b40e:	2d02      	cmp	r5, #2
 801b410:	d003      	beq.n	801b41a <lv_btnmatrix_event+0x21a>
 801b412:	2d04      	cmp	r5, #4
 801b414:	d1cb      	bne.n	801b3ae <lv_btnmatrix_event+0x1ae>
 801b416:	2800      	cmp	r0, #0
 801b418:	d0c9      	beq.n	801b3ae <lv_btnmatrix_event+0x1ae>
            if(btnm->one_check) {
 801b41a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801b41e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b420:	f013 0301 	ands.w	r3, r3, #1
 801b424:	d111      	bne.n	801b44a <lv_btnmatrix_event+0x24a>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b426:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 801b42a:	0710      	lsls	r0, r2, #28
 801b42c:	d401      	bmi.n	801b432 <lv_btnmatrix_event+0x232>
 801b42e:	0697      	lsls	r7, r2, #26
 801b430:	d5bf      	bpl.n	801b3b2 <lv_btnmatrix_event+0x1b2>
 801b432:	3301      	adds	r3, #1
 801b434:	e7f7      	b.n	801b426 <lv_btnmatrix_event+0x226>
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) || button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801b436:	3301      	adds	r3, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b438:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) || button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801b43c:	0717      	lsls	r7, r2, #28
 801b43e:	d4fa      	bmi.n	801b436 <lv_btnmatrix_event+0x236>
 801b440:	0696      	lsls	r6, r2, #26
 801b442:	d4f8      	bmi.n	801b436 <lv_btnmatrix_event+0x236>
 801b444:	0615      	lsls	r5, r2, #24
 801b446:	d5f6      	bpl.n	801b436 <lv_btnmatrix_event+0x236>
 801b448:	e7b3      	b.n	801b3b2 <lv_btnmatrix_event+0x1b2>
            uint32_t b = 0;
 801b44a:	2300      	movs	r3, #0
 801b44c:	e7f4      	b.n	801b438 <lv_btnmatrix_event+0x238>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801b44e:	f1a5 030f 	sub.w	r3, r5, #15
 801b452:	b2db      	uxtb	r3, r3
 801b454:	2b01      	cmp	r3, #1
 801b456:	d809      	bhi.n	801b46c <lv_btnmatrix_event+0x26c>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 801b458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b45c:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b45e:	4299      	cmp	r1, r3
 801b460:	461d      	mov	r5, r3
 801b462:	d001      	beq.n	801b468 <lv_btnmatrix_event+0x268>
 801b464:	f7ff fba2 	bl	801abac <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 801b468:	8665      	strh	r5, [r4, #50]	; 0x32
 801b46a:	e6de      	b.n	801b22a <lv_btnmatrix_event+0x2a>
    else if(code == LV_EVENT_KEY) {
 801b46c:	2d0d      	cmp	r5, #13
 801b46e:	f040 80e3 	bne.w	801b638 <lv_btnmatrix_event+0x438>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b472:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b474:	f7ff fb9a 	bl	801abac <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 801b478:	4630      	mov	r0, r6
 801b47a:	f7e6 fb61 	bl	8001b40 <lv_event_get_param>
 801b47e:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 801b480:	2b13      	cmp	r3, #19
 801b482:	d125      	bne.n	801b4d0 <lv_btnmatrix_event+0x2d0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801b484:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b486:	f64f 72ff 	movw	r2, #65535	; 0xffff
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b48a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b48c:	2500      	movs	r5, #0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801b48e:	4293      	cmp	r3, r2
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b490:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            else btnm->btn_id_sel++;
 801b492:	bf16      	itet	ne
 801b494:	3301      	addne	r3, #1
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801b496:	2300      	moveq	r3, #0
            else btnm->btn_id_sel++;
 801b498:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b49a:	4299      	cmp	r1, r3
 801b49c:	8663      	strh	r3, [r4, #50]	; 0x32
 801b49e:	bf9c      	itt	ls
 801b4a0:	2300      	movls	r3, #0
 801b4a2:	8663      	strhls	r3, [r4, #50]	; 0x32
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b4a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b4a6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b4aa:	0716      	lsls	r6, r2, #28
 801b4ac:	d406      	bmi.n	801b4bc <lv_btnmatrix_event+0x2bc>
 801b4ae:	0692      	lsls	r2, r2, #26
 801b4b0:	d404      	bmi.n	801b4bc <lv_btnmatrix_event+0x2bc>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b4b2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b4b4:	4620      	mov	r0, r4
 801b4b6:	f7ff fb79 	bl	801abac <invalidate_button_area>
 801b4ba:	e6b6      	b.n	801b22a <lv_btnmatrix_event+0x2a>
                btnm->btn_id_sel++;
 801b4bc:	3301      	adds	r3, #1
 801b4be:	b29b      	uxth	r3, r3
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b4c0:	4299      	cmp	r1, r3
                btnm->btn_id_sel++;
 801b4c2:	8663      	strh	r3, [r4, #50]	; 0x32
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b4c4:	bf98      	it	ls
 801b4c6:	8665      	strhls	r5, [r4, #50]	; 0x32
 801b4c8:	e7ec      	b.n	801b4a4 <lv_btnmatrix_event+0x2a4>
 801b4ca:	bf00      	nop
 801b4cc:	08029f80 	.word	0x08029f80
        else if(c == LV_KEY_LEFT) {
 801b4d0:	2b14      	cmp	r3, #20
 801b4d2:	d11b      	bne.n	801b50c <lv_btnmatrix_event+0x30c>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 801b4d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b4d8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b4da:	429a      	cmp	r2, r3
 801b4dc:	bf04      	itt	eq
 801b4de:	2300      	moveq	r3, #0
 801b4e0:	8663      	strheq	r3, [r4, #50]	; 0x32
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801b4e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b4e4:	b903      	cbnz	r3, 801b4e8 <lv_btnmatrix_event+0x2e8>
 801b4e6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b4e8:	3b01      	subs	r3, #1
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b4ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801b4ec:	b29b      	uxth	r3, r3
 801b4ee:	8663      	strh	r3, [r4, #50]	; 0x32
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b4f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b4f2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b4f6:	0717      	lsls	r7, r2, #28
 801b4f8:	d401      	bmi.n	801b4fe <lv_btnmatrix_event+0x2fe>
 801b4fa:	0696      	lsls	r6, r2, #26
 801b4fc:	d5d9      	bpl.n	801b4b2 <lv_btnmatrix_event+0x2b2>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 801b4fe:	b11b      	cbz	r3, 801b508 <lv_btnmatrix_event+0x308>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 801b500:	3b01      	subs	r3, #1
 801b502:	b29b      	uxth	r3, r3
 801b504:	8663      	strh	r3, [r4, #50]	; 0x32
 801b506:	e7f3      	b.n	801b4f0 <lv_btnmatrix_event+0x2f0>
 801b508:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b50a:	e7f9      	b.n	801b500 <lv_btnmatrix_event+0x300>
        else if(c == LV_KEY_DOWN) {
 801b50c:	2b12      	cmp	r3, #18
 801b50e:	d149      	bne.n	801b5a4 <lv_btnmatrix_event+0x3a4>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b510:	4620      	mov	r0, r4
 801b512:	f7ff f989 	bl	801a828 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801b516:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b51c:	429a      	cmp	r2, r3
 801b51e:	d112      	bne.n	801b546 <lv_btnmatrix_event+0x346>
                btnm->btn_id_sel = 0;
 801b520:	2300      	movs	r3, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b522:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b524:	461a      	mov	r2, r3
                btnm->btn_id_sel = 0;
 801b526:	8663      	strh	r3, [r4, #50]	; 0x32
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b528:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b52a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b52e:	070d      	lsls	r5, r1, #28
 801b530:	d401      	bmi.n	801b536 <lv_btnmatrix_event+0x336>
 801b532:	0689      	lsls	r1, r1, #26
 801b534:	d5bd      	bpl.n	801b4b2 <lv_btnmatrix_event+0x2b2>
                    btnm->btn_id_sel++;
 801b536:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b538:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801b53a:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b53c:	4299      	cmp	r1, r3
                    btnm->btn_id_sel++;
 801b53e:	8663      	strh	r3, [r4, #50]	; 0x32
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b540:	bf98      	it	ls
 801b542:	8662      	strhls	r2, [r4, #50]	; 0x32
 801b544:	e7f0      	b.n	801b528 <lv_btnmatrix_event+0x328>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b546:	6aa5      	ldr	r5, [r4, #40]	; 0x28
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801b548:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b54c:	eb05 07c2 	add.w	r7, r5, r2, lsl #3
 801b550:	f835 1032 	ldrh.w	r1, [r5, r2, lsl #3]
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b554:	f105 0e02 	add.w	lr, r5, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801b558:	f105 0804 	add.w	r8, r5, #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b55c:	88bb      	ldrh	r3, [r7, #4]
 801b55e:	3301      	adds	r3, #1
 801b560:	1a5b      	subs	r3, r3, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b562:	f343 034e 	sbfx	r3, r3, #1, #15
 801b566:	440b      	add	r3, r1
 801b568:	0051      	lsls	r1, r2, #1
                lv_coord_t pr_center =
 801b56a:	b21b      	sxth	r3, r3
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801b56c:	4594      	cmp	ip, r2
 801b56e:	d9a0      	bls.n	801b4b2 <lv_btnmatrix_event+0x2b2>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b570:	f93e 9021 	ldrsh.w	r9, [lr, r1, lsl #2]
 801b574:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 801b578:	45b1      	cmp	r9, r6
 801b57a:	dd0f      	ble.n	801b59c <lv_btnmatrix_event+0x39c>
 801b57c:	f935 6021 	ldrsh.w	r6, [r5, r1, lsl #2]
 801b580:	429e      	cmp	r6, r3
 801b582:	dc0b      	bgt.n	801b59c <lv_btnmatrix_event+0x39c>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801b584:	f938 6021 	ldrsh.w	r6, [r8, r1, lsl #2]
 801b588:	4406      	add	r6, r0
                       pr_center >= btnm->button_areas[area_below].x1 &&
 801b58a:	42b3      	cmp	r3, r6
 801b58c:	dc06      	bgt.n	801b59c <lv_btnmatrix_event+0x39c>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801b58e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b590:	5a76      	ldrh	r6, [r6, r1]
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801b592:	f016 0f20 	tst.w	r6, #32
 801b596:	d101      	bne.n	801b59c <lv_btnmatrix_event+0x39c>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801b598:	0736      	lsls	r6, r6, #28
 801b59a:	d554      	bpl.n	801b646 <lv_btnmatrix_event+0x446>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801b59c:	3201      	adds	r2, #1
 801b59e:	3102      	adds	r1, #2
 801b5a0:	b292      	uxth	r2, r2
 801b5a2:	e7e3      	b.n	801b56c <lv_btnmatrix_event+0x36c>
        else if(c == LV_KEY_UP) {
 801b5a4:	2b11      	cmp	r3, #17
 801b5a6:	d184      	bne.n	801b4b2 <lv_btnmatrix_event+0x2b2>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b5a8:	4620      	mov	r0, r4
 801b5aa:	f7ff f93d 	bl	801a828 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801b5ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b5b4:	4293      	cmp	r3, r2
 801b5b6:	d113      	bne.n	801b5e0 <lv_btnmatrix_event+0x3e0>
                btnm->btn_id_sel = 0;
 801b5b8:	2300      	movs	r3, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b5ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b5bc:	461a      	mov	r2, r3
                btnm->btn_id_sel = 0;
 801b5be:	8663      	strh	r3, [r4, #50]	; 0x32
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b5c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b5c2:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801b5c6:	070d      	lsls	r5, r1, #28
 801b5c8:	d402      	bmi.n	801b5d0 <lv_btnmatrix_event+0x3d0>
 801b5ca:	0689      	lsls	r1, r1, #26
 801b5cc:	f57f af71 	bpl.w	801b4b2 <lv_btnmatrix_event+0x2b2>
                    btnm->btn_id_sel++;
 801b5d0:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b5d2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801b5d4:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b5d6:	4299      	cmp	r1, r3
                    btnm->btn_id_sel++;
 801b5d8:	8663      	strh	r3, [r4, #50]	; 0x32
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801b5da:	bf98      	it	ls
 801b5dc:	8662      	strhls	r2, [r4, #50]	; 0x32
 801b5de:	e7ef      	b.n	801b5c0 <lv_btnmatrix_event+0x3c0>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b5e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801b5e2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 801b5e6:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b5ea:	1caf      	adds	r7, r5, #2
 801b5ec:	b21b      	sxth	r3, r3
 801b5ee:	88b2      	ldrh	r2, [r6, #4]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801b5f0:	f105 0c04 	add.w	ip, r5, #4
 801b5f4:	3201      	adds	r2, #1
 801b5f6:	1a52      	subs	r2, r2, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801b5f8:	f342 024e 	sbfx	r2, r2, #1, #15
 801b5fc:	440a      	add	r2, r1
                lv_coord_t pr_center =
 801b5fe:	b212      	sxth	r2, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801b600:	0419      	lsls	r1, r3, #16
 801b602:	f53f af56 	bmi.w	801b4b2 <lv_btnmatrix_event+0x2b2>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b606:	f937 e033 	ldrsh.w	lr, [r7, r3, lsl #3]
 801b60a:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 801b60e:	458e      	cmp	lr, r1
 801b610:	da10      	bge.n	801b634 <lv_btnmatrix_event+0x434>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801b612:	f935 1033 	ldrsh.w	r1, [r5, r3, lsl #3]
 801b616:	1a09      	subs	r1, r1, r0
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801b618:	428a      	cmp	r2, r1
 801b61a:	db0b      	blt.n	801b634 <lv_btnmatrix_event+0x434>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801b61c:	f93c 1033 	ldrsh.w	r1, [ip, r3, lsl #3]
 801b620:	4291      	cmp	r1, r2
 801b622:	db07      	blt.n	801b634 <lv_btnmatrix_event+0x434>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801b624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b626:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801b62a:	f011 0f20 	tst.w	r1, #32
 801b62e:	d101      	bne.n	801b634 <lv_btnmatrix_event+0x434>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801b630:	0709      	lsls	r1, r1, #28
 801b632:	d50a      	bpl.n	801b64a <lv_btnmatrix_event+0x44a>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801b634:	3b01      	subs	r3, #1
 801b636:	e7e3      	b.n	801b600 <lv_btnmatrix_event+0x400>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801b638:	2d15      	cmp	r5, #21
 801b63a:	f47f adf6 	bne.w	801b22a <lv_btnmatrix_event+0x2a>
        draw_main(e);
 801b63e:	4630      	mov	r0, r6
 801b640:	f7ff f8fa 	bl	801a838 <draw_main>
 801b644:	e5f1      	b.n	801b22a <lv_btnmatrix_event+0x2a>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 801b646:	8662      	strh	r2, [r4, #50]	; 0x32
 801b648:	e733      	b.n	801b4b2 <lv_btnmatrix_event+0x2b2>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 801b64a:	8663      	strh	r3, [r4, #50]	; 0x32
 801b64c:	e731      	b.n	801b4b2 <lv_btnmatrix_event+0x2b2>
 801b64e:	bf00      	nop

0801b650 <lv_btnmatrix_set_one_checked>:
    btnm->one_check     = en;
 801b650:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 801b654:	f361 0200 	bfi	r2, r1, #0, #1
    make_one_button_checked(obj, 0);
 801b658:	2100      	movs	r1, #0
    btnm->one_check     = en;
 801b65a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    make_one_button_checked(obj, 0);
 801b65e:	f7ff bdba 	b.w	801b1d6 <make_one_button_checked>
	...

0801b664 <lv_checkbox_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    cb->txt = "Check box";
 801b664:	4b0c      	ldr	r3, [pc, #48]	; (801b698 <lv_checkbox_constructor+0x34>)
{
 801b666:	b510      	push	{r4, lr}
    cb->txt = "Check box";
 801b668:	624b      	str	r3, [r1, #36]	; 0x24
{
 801b66a:	460c      	mov	r4, r1
    cb->static_txt = 1;
 801b66c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801b670:	4620      	mov	r0, r4
    cb->static_txt = 1;
 801b672:	f043 0301 	orr.w	r3, r3, #1
 801b676:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801b67a:	2102      	movs	r1, #2
 801b67c:	f7e8 f95c 	bl	8003938 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801b680:	4620      	mov	r0, r4
 801b682:	2108      	movs	r1, #8
 801b684:	f7e8 f958 	bl	8003938 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801b688:	4620      	mov	r0, r4
 801b68a:	f44f 7100 	mov.w	r1, #512	; 0x200

    LV_TRACE_OBJ_CREATE("finished");
}
 801b68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801b692:	f7e8 b951 	b.w	8003938 <lv_obj_add_flag>
 801b696:	bf00      	nop
 801b698:	08029f9c 	.word	0x08029f9c

0801b69c <lv_checkbox_destructor>:

static void lv_checkbox_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801b69c:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;
    if(!cb->static_txt) {
 801b69e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
{
 801b6a2:	460c      	mov	r4, r1
    if(!cb->static_txt) {
 801b6a4:	f013 0501 	ands.w	r5, r3, #1
 801b6a8:	d103      	bne.n	801b6b2 <lv_checkbox_destructor+0x16>
        lv_mem_free(cb->txt);
 801b6aa:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801b6ac:	f7fb fe6a 	bl	8017384 <lv_mem_free>
        cb->txt = NULL;
 801b6b0:	6265      	str	r5, [r4, #36]	; 0x24
    }
    LV_TRACE_OBJ_CREATE("finished");
}
 801b6b2:	bd38      	pop	{r3, r4, r5, pc}

0801b6b4 <lv_checkbox_event>:

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801b6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801b6b8:	48c1      	ldr	r0, [pc, #772]	; (801b9c0 <lv_checkbox_event+0x30c>)
{
 801b6ba:	b0b7      	sub	sp, #220	; 0xdc
 801b6bc:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801b6be:	f7e6 f9a4 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801b6c2:	2801      	cmp	r0, #1
 801b6c4:	d10e      	bne.n	801b6e4 <lv_checkbox_event+0x30>

    lv_event_code_t code = lv_event_get_code(e);
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	f7e6 fa38 	bl	8001b3c <lv_event_get_code>
 801b6cc:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801b6ce:	4628      	mov	r0, r5
 801b6d0:	f7e6 fa32 	bl	8001b38 <lv_event_get_target>

    if (code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801b6d4:	2e01      	cmp	r6, #1
    lv_obj_t * obj = lv_event_get_target(e);
 801b6d6:	4604      	mov	r4, r0
    if (code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801b6d8:	d001      	beq.n	801b6de <lv_checkbox_event+0x2a>
 801b6da:	2e08      	cmp	r6, #8
 801b6dc:	d105      	bne.n	801b6ea <lv_checkbox_event+0x36>
       lv_obj_invalidate(obj);
 801b6de:	4620      	mov	r0, r4
 801b6e0:	f7e9 fb32 	bl	8004d48 <lv_obj_invalidate>

        lv_obj_invalidate(obj);
    } else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 801b6e4:	b037      	add	sp, #220	; 0xdc
 801b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (code == LV_EVENT_GET_SELF_SIZE) {
 801b6ea:	2e26      	cmp	r6, #38	; 0x26
 801b6ec:	d164      	bne.n	801b7b8 <lv_checkbox_event+0x104>
        lv_point_t * p = lv_event_get_param(e);
 801b6ee:	4628      	mov	r0, r5
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801b6f0:	f04f 0900 	mov.w	r9, #0
        lv_point_t * p = lv_event_get_param(e);
 801b6f4:	f7e6 fa24 	bl	8001b40 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801b6f8:	f241 4259 	movw	r2, #5209	; 0x1459
 801b6fc:	4606      	mov	r6, r0
 801b6fe:	2100      	movs	r1, #0
 801b700:	4620      	mov	r0, r4
 801b702:	f7eb fc49 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801b706:	f241 425b 	movw	r2, #5211	; 0x145b
        lv_coord_t font_h = lv_font_get_line_height(font);
 801b70a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801b70e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801b710:	2100      	movs	r1, #0
 801b712:	4620      	mov	r0, r4
 801b714:	f7eb fc40 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801b718:	f241 425a 	movw	r2, #5210	; 0x145a
    return (lv_coord_t)v.num;
 801b71c:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801b720:	2100      	movs	r1, #0
 801b722:	4620      	mov	r0, r4
 801b724:	f7eb fc38 	bl	8006f98 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801b728:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801b72c:	462a      	mov	r2, r5
 801b72e:	f8cd 8000 	str.w	r8, [sp]
 801b732:	e9cd 3901 	strd	r3, r9, [sp, #4]
 801b736:	b203      	sxth	r3, r0
 801b738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b73a:	a824      	add	r0, sp, #144	; 0x90
 801b73c:	f7fd fd33 	bl	80191a6 <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801b740:	4649      	mov	r1, r9
 801b742:	f241 0215 	movw	r2, #4117	; 0x1015
 801b746:	4620      	mov	r0, r4
 801b748:	f7eb fc26 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b74c:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801b750:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b752:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b756:	4620      	mov	r0, r4
 801b758:	f7eb fc1e 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b75c:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b760:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b762:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b766:	4620      	mov	r0, r4
 801b768:	f7eb fc16 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b76c:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b770:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b772:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b776:	4620      	mov	r0, r4
 801b778:	f7eb fc0e 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b77c:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b780:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b782:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b786:	4620      	mov	r0, r4
 801b788:	f7eb fc06 	bl	8006f98 <lv_obj_get_style_prop>
        p->x = marker_size.x + txt_size.x + bg_colp;
 801b78c:	eb05 030a 	add.w	r3, r5, sl
 801b790:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801b794:	442b      	add	r3, r5
 801b796:	eb03 0509 	add.w	r5, r3, r9
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801b79a:	eb08 0300 	add.w	r3, r8, r0
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801b79e:	f9bd 0092 	ldrsh.w	r0, [sp, #146]	; 0x92
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801b7a2:	fa13 f387 	uxtah	r3, r3, r7
        p->x = marker_size.x + txt_size.x + bg_colp;
 801b7a6:	fa15 f587 	uxtah	r5, r5, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801b7aa:	b21b      	sxth	r3, r3
        p->x = marker_size.x + txt_size.x + bg_colp;
 801b7ac:	8035      	strh	r5, [r6, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801b7ae:	4283      	cmp	r3, r0
 801b7b0:	bfb8      	it	lt
 801b7b2:	4603      	movlt	r3, r0
 801b7b4:	8073      	strh	r3, [r6, #2]
 801b7b6:	e795      	b.n	801b6e4 <lv_checkbox_event+0x30>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801b7b8:	2e13      	cmp	r6, #19
 801b7ba:	d10f      	bne.n	801b7dc <lv_checkbox_event+0x128>
        lv_coord_t *s = lv_event_get_param(e);
 801b7bc:	4628      	mov	r0, r5
 801b7be:	f7e6 f9bf 	bl	8001b40 <lv_event_get_param>
 801b7c2:	4605      	mov	r5, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801b7c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f7e8 ff54 	bl	8004676 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 801b7ce:	f9b5 3000 	ldrsh.w	r3, [r5]
 801b7d2:	4298      	cmp	r0, r3
 801b7d4:	bfb8      	it	lt
 801b7d6:	4618      	movlt	r0, r3
 801b7d8:	8028      	strh	r0, [r5, #0]
 801b7da:	e783      	b.n	801b6e4 <lv_checkbox_event+0x30>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801b7dc:	2e15      	cmp	r6, #21
 801b7de:	d181      	bne.n	801b6e4 <lv_checkbox_event+0x30>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801b7e0:	4628      	mov	r0, r5
 801b7e2:	f7e6 f9a9 	bl	8001b38 <lv_event_get_target>
 801b7e6:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    const lv_area_t * clip_area = lv_event_get_param(e);
 801b7e8:	4628      	mov	r0, r5

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 801b7ea:	ad17      	add	r5, sp, #92	; 0x5c
    const lv_area_t * clip_area = lv_event_get_param(e);
 801b7ec:	f7e6 f9a8 	bl	8001b40 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801b7f0:	f241 4259 	movw	r2, #5209	; 0x1459
 801b7f4:	4681      	mov	r9, r0
 801b7f6:	2100      	movs	r1, #0
 801b7f8:	4620      	mov	r0, r4
 801b7fa:	f7eb fbcd 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b7fe:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_coord_t font_h = lv_font_get_line_height(font);
 801b802:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801b806:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b808:	2100      	movs	r1, #0
 801b80a:	4620      	mov	r0, r4
 801b80c:	f7eb fbc4 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b810:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b814:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b816:	2100      	movs	r1, #0
 801b818:	4620      	mov	r0, r4
 801b81a:	f7eb fbbd 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801b81e:	f241 0215 	movw	r2, #4117	; 0x1015
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b822:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801b824:	2100      	movs	r1, #0
 801b826:	4620      	mov	r0, r4
 801b828:	f7eb fbb6 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b82c:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801b830:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b832:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b836:	4620      	mov	r0, r4
 801b838:	f7eb fbae 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b83c:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b840:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b842:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b846:	4620      	mov	r0, r4
 801b848:	f7eb fba6 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b84c:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b850:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b852:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b856:	4620      	mov	r0, r4
 801b858:	f7eb fb9e 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b85c:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b860:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b862:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b866:	4620      	mov	r0, r4
 801b868:	f7eb fb96 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801b86c:	f640 020a 	movw	r2, #2058	; 0x80a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b870:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801b872:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b876:	4620      	mov	r0, r4
 801b878:	f7eb fb8e 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801b87c:	f640 020b 	movw	r2, #2059	; 0x80b
 801b880:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801b884:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801b886:	4620      	mov	r0, r4
 801b888:	f7eb fb86 	bl	8006f98 <lv_obj_get_style_prop>
 801b88c:	9008      	str	r0, [sp, #32]
    lv_draw_rect_dsc_init(&indic_dsc);
 801b88e:	4628      	mov	r0, r5
 801b890:	f7f0 ff12 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 801b894:	462a      	mov	r2, r5
 801b896:	4620      	mov	r0, r4
 801b898:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b89c:	f7e8 fc78 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801b8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801b8a2:	8ae0      	ldrh	r0, [r4, #22]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801b8a4:	19da      	adds	r2, r3, r7
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801b8a6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 801b8aa:	9b04      	ldr	r3, [sp, #16]
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801b8ac:	b2b7      	uxth	r7, r6
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801b8ae:	3a01      	subs	r2, #1
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801b8b0:	fa10 f686 	uxtah	r6, r0, r6
 801b8b4:	9806      	ldr	r0, [sp, #24]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801b8b6:	44c4      	add	ip, r8
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801b8b8:	fa12 f28b 	uxtah	r2, r2, fp
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801b8bc:	b2b6      	uxth	r6, r6
 801b8be:	4403      	add	r3, r0
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 801b8c0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801b8c4:	fa12 f28c 	uxtah	r2, r2, ip
 801b8c8:	1e59      	subs	r1, r3, #1
    marker_area_transf.x1 -= transf_w;
 801b8ca:	ebac 0c00 	sub.w	ip, ip, r0
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801b8ce:	fa1f f882 	uxth.w	r8, r2
    marker_area_transf.x2 += transf_w;
 801b8d2:	fa10 f282 	uxtah	r2, r0, r2
 801b8d6:	fa11 f18b 	uxtah	r1, r1, fp
    marker_area_transf.y1 -= transf_h;
 801b8da:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    marker_area_transf.x2 += transf_w;
 801b8de:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801b8e2:	b28b      	uxth	r3, r1
    marker_area_transf.y2 += transf_h;
 801b8e4:	fa10 f181 	uxtah	r1, r0, r1
    marker_area_transf.y1 -= transf_h;
 801b8e8:	1a32      	subs	r2, r6, r0

    lv_obj_draw_part_dsc_t obj_draw_dsc;
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801b8ea:	a824      	add	r0, sp, #144	; 0x90
    marker_area_transf.y2 += transf_h;
 801b8ec:	440e      	add	r6, r1
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801b8ee:	4649      	mov	r1, r9
    marker_area_transf.x1 -= transf_w;
 801b8f0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b8f4:	9304      	str	r3, [sp, #16]
    marker_area_transf.y1 -= transf_h;
 801b8f6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    marker_area_transf.y2 += transf_h;
 801b8fa:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801b8fe:	f7e8 ff2b 	bl	8004758 <lv_obj_draw_dsc_init>
    obj_draw_dsc.rect_dsc = &indic_dsc;
    obj_draw_dsc.draw_area = &marker_area_transf;
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801b902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    obj_draw_dsc.draw_area = &marker_area_transf;
 801b906:	ae0b      	add	r6, sp, #44	; 0x2c

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801b908:	211a      	movs	r1, #26
 801b90a:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801b90c:	9231      	str	r2, [sp, #196]	; 0xc4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801b90e:	aa24      	add	r2, sp, #144	; 0x90
    obj_draw_dsc.rect_dsc = &indic_dsc;
 801b910:	9526      	str	r5, [sp, #152]	; 0x98
    obj_draw_dsc.draw_area = &marker_area_transf;
 801b912:	9625      	str	r6, [sp, #148]	; 0x94
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801b914:	f7e6 f8f0 	bl	8001af8 <lv_event_send>
    lv_draw_rect(&marker_area_transf, clip_area, &indic_dsc);
 801b918:	462a      	mov	r2, r5
 801b91a:	4649      	mov	r1, r9
 801b91c:	4630      	mov	r0, r6

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801b91e:	2600      	movs	r6, #0
    lv_draw_rect(&marker_area_transf, clip_area, &indic_dsc);
 801b920:	f7f0 feec 	bl	800c6fc <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801b924:	aa24      	add	r2, sp, #144	; 0x90
 801b926:	211b      	movs	r1, #27
 801b928:	4620      	mov	r0, r4
 801b92a:	f7e6 f8e5 	bl	8001af8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801b92e:	f241 425b 	movw	r2, #5211	; 0x145b
 801b932:	2100      	movs	r1, #0
 801b934:	4620      	mov	r0, r4
 801b936:	f7eb fb2f 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801b93a:	f241 425a 	movw	r2, #5210	; 0x145a
    return (lv_coord_t)v.num;
 801b93e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801b940:	2100      	movs	r1, #0
 801b942:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801b944:	461d      	mov	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801b946:	f7eb fb27 	bl	8006f98 <lv_obj_get_style_prop>
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801b94a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801b94e:	4652      	mov	r2, sl
 801b950:	9500      	str	r5, [sp, #0]
 801b952:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801b956:	b203      	sxth	r3, r0
 801b958:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b95a:	a80a      	add	r0, sp, #40	; 0x28
 801b95c:	f7fd fc23 	bl	80191a6 <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 801b960:	a80f      	add	r0, sp, #60	; 0x3c
 801b962:	f7ee fbf5 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 801b966:	aa0f      	add	r2, sp, #60	; 0x3c
 801b968:	4631      	mov	r1, r6
 801b96a:	4620      	mov	r0, r4
 801b96c:	f7e8 fd4c 	bl	8004408 <lv_obj_init_draw_label_dsc>

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 801b970:	9b05      	ldr	r3, [sp, #20]
    txt_area.x2 = txt_area.x1 + txt_size.x;
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
    txt_area.y2 = txt_area.y1 + txt_size.y;

    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801b972:	aa0f      	add	r2, sp, #60	; 0x3c
 801b974:	4649      	mov	r1, r9
    txt_area.x1 = marker_area.x2 + bg_colp;
 801b976:	4498      	add	r8, r3
    txt_area.x2 = txt_area.x1 + txt_size.x;
 801b978:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801b97c:	a80d      	add	r0, sp, #52	; 0x34
    txt_area.x1 = marker_area.x2 + bg_colp;
 801b97e:	fa1f f888 	uxth.w	r8, r8
 801b982:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    txt_area.x2 = txt_area.x1 + txt_size.x;
 801b986:	4498      	add	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b988:	9b04      	ldr	r3, [sp, #16]
 801b98a:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 801b98e:	1c5d      	adds	r5, r3, #1
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801b990:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 801b994:	b22d      	sxth	r5, r5
 801b996:	eba5 0b0b 	sub.w	fp, r5, fp
 801b99a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 801b99e:	eb07 076b 	add.w	r7, r7, fp, asr #1
 801b9a2:	f8b4 b016 	ldrh.w	fp, [r4, #22]
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801b9a6:	9600      	str	r6, [sp, #0]
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 801b9a8:	445f      	add	r7, fp
 801b9aa:	b2bf      	uxth	r7, r7
 801b9ac:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801b9b0:	441f      	add	r7, r3
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801b9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801b9b4:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801b9b8:	f7ee fda2 	bl	800a500 <lv_draw_label>
}
 801b9bc:	e692      	b.n	801b6e4 <lv_checkbox_event+0x30>
 801b9be:	bf00      	nop
 801b9c0:	08029fa8 	.word	0x08029fa8

0801b9c4 <lv_dropdownlist_destructor>:
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 801b9c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 801b9ca:	4770      	bx	lr

0801b9cc <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 801b9cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b9ce:	b110      	cbz	r0, 801b9d6 <get_label+0xa>

    return lv_obj_get_child(dropdown->list, 0);
 801b9d0:	2100      	movs	r1, #0
 801b9d2:	f7eb be2e 	b.w	8007632 <lv_obj_get_child>
}
 801b9d6:	4770      	bx	lr

0801b9d8 <lv_dropdownlist_constructor>:
{
 801b9d8:	b507      	push	{r0, r1, r2, lr}
 801b9da:	4608      	mov	r0, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801b9dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801b9e0:	9001      	str	r0, [sp, #4]
 801b9e2:	f7e7 ffcc 	bl	800397e <lv_obj_clear_flag>
    lv_label_create(obj);
 801b9e6:	9801      	ldr	r0, [sp, #4]
}
 801b9e8:	b003      	add	sp, #12
 801b9ea:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_label_create(obj);
 801b9ee:	f001 bae7 	b.w	801cfc0 <lv_label_create>

0801b9f2 <lv_dropdown_destructor>:
    if(dropdown->list) {
 801b9f2:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 801b9f4:	b538      	push	{r3, r4, r5, lr}
 801b9f6:	460c      	mov	r4, r1
    if(dropdown->list) {
 801b9f8:	b118      	cbz	r0, 801ba02 <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 801b9fa:	f7eb fed9 	bl	80077b0 <lv_obj_del>
        dropdown->list = NULL;
 801b9fe:	2300      	movs	r3, #0
 801ba00:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 801ba02:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801ba06:	f013 0510 	ands.w	r5, r3, #16
 801ba0a:	d103      	bne.n	801ba14 <lv_dropdown_destructor+0x22>
        lv_mem_free(dropdown->options);
 801ba0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ba0e:	f7fb fcb9 	bl	8017384 <lv_mem_free>
        dropdown->options = NULL;
 801ba12:	6325      	str	r5, [r4, #48]	; 0x30
}
 801ba14:	bd38      	pop	{r3, r4, r5, pc}

0801ba16 <get_id_on_point>:
{
 801ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba1a:	4606      	mov	r6, r0
 801ba1c:	460d      	mov	r5, r1
    lv_obj_t * label = get_label(dropdown_obj);
 801ba1e:	f7ff ffd5 	bl	801b9cc <get_label>
    if(label == NULL) return 0;
 801ba22:	4604      	mov	r4, r0
 801ba24:	b308      	cbz	r0, 801ba6a <get_id_on_point+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ba26:	f241 4259 	movw	r2, #5209	; 0x1459
 801ba2a:	2100      	movs	r1, #0
    y -= label->coords.y1;
 801ba2c:	f8b0 8016 	ldrh.w	r8, [r0, #22]
 801ba30:	f7eb fab2 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801ba34:	f241 425b 	movw	r2, #5211	; 0x145b
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801ba38:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801ba3c:	2100      	movs	r1, #0
 801ba3e:	4620      	mov	r0, r4
 801ba40:	f7eb faaa 	bl	8006f98 <lv_obj_get_style_prop>
    y += line_space / 2;
 801ba44:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801ba48:	fa04 f480 	sxtah	r4, r4, r0
    lv_coord_t h = font_h + line_space;
 801ba4c:	4438      	add	r0, r7
    y += line_space / 2;
 801ba4e:	eb05 0464 	add.w	r4, r5, r4, asr #1
    uint16_t opt = y / h;
 801ba52:	b200      	sxth	r0, r0
    y += line_space / 2;
 801ba54:	eba4 0408 	sub.w	r4, r4, r8
    uint16_t opt = y / h;
 801ba58:	b224      	sxth	r4, r4
 801ba5a:	fb94 f4f0 	sdiv	r4, r4, r0
 801ba5e:	b2a0      	uxth	r0, r4
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 801ba60:	8eb4      	ldrh	r4, [r6, #52]	; 0x34
 801ba62:	4284      	cmp	r4, r0
 801ba64:	d801      	bhi.n	801ba6a <get_id_on_point+0x54>
 801ba66:	3c01      	subs	r4, #1
 801ba68:	b2a0      	uxth	r0, r4
}
 801ba6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba6e <draw_box>:
{
 801ba6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba72:	4693      	mov	fp, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 801ba74:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801ba78:	b093      	sub	sp, #76	; 0x4c
 801ba7a:	4606      	mov	r6, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 801ba7c:	4593      	cmp	fp, r2
{
 801ba7e:	460f      	mov	r7, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 801ba80:	d053      	beq.n	801bb2a <draw_box+0xbc>
    lv_obj_t * list_obj = dropdown->list;
 801ba82:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ba84:	f241 4259 	movw	r2, #5209	; 0x1459
 801ba88:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_state_t state_ori = list_obj->state;
 801ba8c:	f8b5 8020 	ldrh.w	r8, [r5, #32]
 801ba90:	4628      	mov	r0, r5
    if(state != list_obj->state) {
 801ba92:	4598      	cmp	r8, r3
        list_obj->state = state;
 801ba94:	bf1f      	itttt	ne
 801ba96:	842b      	strhne	r3, [r5, #32]
        list_obj->skip_trans = 1;
 801ba98:	f895 3022 	ldrbne.w	r3, [r5, #34]	; 0x22
 801ba9c:	f043 0304 	orrne.w	r3, r3, #4
 801baa0:	f885 3022 	strbne.w	r3, [r5, #34]	; 0x22
 801baa4:	f7eb fa78 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801baa8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801baac:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801baae:	f241 425b 	movw	r2, #5211	; 0x145b
 801bab2:	4628      	mov	r0, r5
 801bab4:	f7eb fa70 	bl	8006f98 <lv_obj_get_style_prop>
 801bab8:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801baba:	b203      	sxth	r3, r0
    lv_obj_t * label = get_label(dropdown_obj);
 801babc:	4630      	mov	r0, r6
    lv_coord_t font_h         = lv_font_get_line_height(font);
 801babe:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801bac2:	f109 39ff 	add.w	r9, r9, #4294967295
 801bac6:	9301      	str	r3, [sp, #4]
    lv_obj_t * label = get_label(dropdown_obj);
 801bac8:	f7ff ff80 	bl	801b9cc <get_label>
    rect_area.y1 += id * (font_h + line_space);
 801bacc:	9b01      	ldr	r3, [sp, #4]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801bace:	44d1      	add	r9, sl
    rect_area.y1 += id * (font_h + line_space);
 801bad0:	eb0a 0403 	add.w	r4, sl, r3
    rect_area.y1 -= line_space / 2;
 801bad4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    rect_area.y1 += id * (font_h + line_space);
 801bad8:	fb14 f20b 	smulbb	r2, r4, fp
    rect_area.y1 -= line_space / 2;
 801badc:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 801bae0:	8ac2      	ldrh	r2, [r0, #22]
    lv_draw_rect_dsc_init(&sel_rect);
 801bae2:	a805      	add	r0, sp, #20
    rect_area.y1 -= line_space / 2;
 801bae4:	4413      	add	r3, r2
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	f8ad 300e 	strh.w	r3, [sp, #14]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801baec:	444b      	add	r3, r9
 801baee:	f8ad 3012 	strh.w	r3, [sp, #18]
    rect_area.x1 = dropdown->list->coords.x1;
 801baf2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801baf4:	8a9a      	ldrh	r2, [r3, #20]
    rect_area.x2 = dropdown->list->coords.x2;
 801baf6:	8b1b      	ldrh	r3, [r3, #24]
    rect_area.x1 = dropdown->list->coords.x1;
 801baf8:	f8ad 200c 	strh.w	r2, [sp, #12]
    rect_area.x2 = dropdown->list->coords.x2;
 801bafc:	f8ad 3010 	strh.w	r3, [sp, #16]
    lv_draw_rect_dsc_init(&sel_rect);
 801bb00:	f7f0 fdda 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 801bb04:	aa05      	add	r2, sp, #20
 801bb06:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801bb0a:	4628      	mov	r0, r5
 801bb0c:	f7e8 fb40 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(&rect_area, clip_area, &sel_rect);
 801bb10:	aa05      	add	r2, sp, #20
 801bb12:	4639      	mov	r1, r7
 801bb14:	a803      	add	r0, sp, #12
 801bb16:	f7f0 fdf1 	bl	800c6fc <lv_draw_rect>
    list_obj->skip_trans = 0;
 801bb1a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    list_obj->state = state_ori;
 801bb1e:	f8a5 8020 	strh.w	r8, [r5, #32]
    list_obj->skip_trans = 0;
 801bb22:	f36f 0382 	bfc	r3, #2, #1
 801bb26:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 801bb2a:	b013      	add	sp, #76	; 0x4c
 801bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb30 <draw_box_label>:
{
 801bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb34:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 801bb36:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801bb3a:	b08e      	sub	sp, #56	; 0x38
 801bb3c:	4605      	mov	r5, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 801bb3e:	4590      	cmp	r8, r2
{
 801bb40:	460e      	mov	r6, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 801bb42:	d058      	beq.n	801bbf6 <draw_box_label+0xc6>
    lv_obj_t * list_obj = dropdown->list;
 801bb44:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_draw_label_dsc_init(&label_dsc);
 801bb46:	a806      	add	r0, sp, #24
    lv_state_t state_orig = list_obj->state;
 801bb48:	8c27      	ldrh	r7, [r4, #32]
    if(state != list_obj->state) {
 801bb4a:	429f      	cmp	r7, r3
        list_obj->state =  state;
 801bb4c:	bf1f      	itttt	ne
 801bb4e:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 801bb50:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 801bb54:	f043 0304 	orrne.w	r3, r3, #4
 801bb58:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 801bb5c:	f7ee faf8 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 801bb60:	aa06      	add	r2, sp, #24
 801bb62:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801bb66:	4620      	mov	r0, r4
 801bb68:	f7e8 fc4e 	bl	8004408 <lv_obj_init_draw_label_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bb6c:	f241 425b 	movw	r2, #5211	; 0x145b
 801bb70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801bb74:	4620      	mov	r0, r4
 801bb76:	f7eb fa0f 	bl	8006f98 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj, LV_PART_SELECTED);  /*Line space should come from the list*/
 801bb7a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 801bb7e:	4628      	mov	r0, r5
 801bb80:	f7ff ff24 	bl	801b9cc <get_label>
    if(label == NULL) return;
 801bb84:	4605      	mov	r5, r0
 801bb86:	2800      	cmp	r0, #0
 801bb88:	d035      	beq.n	801bbf6 <draw_box_label+0xc6>
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 801bb8a:	9b06      	ldr	r3, [sp, #24]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801bb8c:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 801bb90:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
    area_sel.y1 -= label_dsc.line_space / 2;
 801bb94:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801bb98:	eb0c 0100 	add.w	r1, ip, r0
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bb9c:	3801      	subs	r0, #1
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801bb9e:	fb11 f208 	smulbb	r2, r1, r8
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bba2:	4460      	add	r0, ip
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bba4:	4631      	mov	r1, r6
    area_sel.y1 -= label_dsc.line_space / 2;
 801bba6:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 801bbaa:	8aea      	ldrh	r2, [r5, #22]
 801bbac:	4413      	add	r3, r2
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bbae:	aa02      	add	r2, sp, #8
    area_sel.y1 -= label_dsc.line_space / 2;
 801bbb0:	b29b      	uxth	r3, r3
 801bbb2:	f8ad 300a 	strh.w	r3, [sp, #10]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bbb6:	4403      	add	r3, r0
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bbb8:	a804      	add	r0, sp, #16
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801bbba:	f8ad 300e 	strh.w	r3, [sp, #14]
    area_sel.x1 = list_obj->coords.x1;
 801bbbe:	8aa3      	ldrh	r3, [r4, #20]
 801bbc0:	f8ad 3008 	strh.w	r3, [sp, #8]
    area_sel.x2 = list_obj->coords.x2;
 801bbc4:	8b23      	ldrh	r3, [r4, #24]
 801bbc6:	f8ad 300c 	strh.w	r3, [sp, #12]
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801bbca:	f7fa ff8c 	bl	8016ae6 <_lv_area_intersect>
    if(area_ok) {
 801bbce:	b158      	cbz	r0, 801bbe8 <draw_box_label+0xb8>
        lv_draw_label(&label->coords, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	f001 fab3 	bl	801d13c <lv_label_get_text>
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	4603      	mov	r3, r0
 801bbda:	a904      	add	r1, sp, #16
 801bbdc:	9200      	str	r2, [sp, #0]
 801bbde:	f105 0014 	add.w	r0, r5, #20
 801bbe2:	aa06      	add	r2, sp, #24
 801bbe4:	f7ee fc8c 	bl	800a500 <lv_draw_label>
    list_obj->skip_trans = 0;
 801bbe8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_orig;
 801bbec:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 801bbee:	f36f 0382 	bfc	r3, #2, #1
 801bbf2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801bbf6:	b00e      	add	sp, #56	; 0x38
 801bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bbfc <position_to_selected>:
{
 801bbfc:	b570      	push	{r4, r5, r6, lr}
 801bbfe:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 801bc00:	f7ff fee4 	bl	801b9cc <get_label>
    if(label == NULL) return;
 801bc04:	4605      	mov	r5, r0
 801bc06:	b318      	cbz	r0, 801bc50 <position_to_selected+0x54>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 801bc08:	f7e8 ff4f 	bl	8004aaa <lv_obj_get_height>
 801bc0c:	4606      	mov	r6, r0
 801bc0e:	4620      	mov	r0, r4
 801bc10:	f7e8 ff6b 	bl	8004aea <lv_obj_get_content_height>
 801bc14:	4286      	cmp	r6, r0
 801bc16:	dd1b      	ble.n	801bc50 <position_to_selected+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bc18:	f241 4259 	movw	r2, #5209	; 0x1459
 801bc1c:	2100      	movs	r1, #0
 801bc1e:	4628      	mov	r0, r5
 801bc20:	f7eb f9ba 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801bc24:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bc28:	f241 425b 	movw	r2, #5211	; 0x145b
 801bc2c:	2100      	movs	r1, #0
 801bc2e:	4628      	mov	r0, r5
 801bc30:	f7eb f9b2 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 801bc34:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    lv_coord_t unit_h = font_h + line_space;
 801bc36:	4430      	add	r0, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 801bc38:	2200      	movs	r2, #0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 801bc3a:	fb11 f100 	smulbb	r1, r1, r0
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 801bc3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bc40:	b209      	sxth	r1, r1
 801bc42:	f7ea fac5 	bl	80061d0 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 801bc46:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
 801bc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(dropdown->list);
 801bc4c:	f7e9 b87c 	b.w	8004d48 <lv_obj_invalidate>
}
 801bc50:	bd70      	pop	{r4, r5, r6, pc}

0801bc52 <lv_dropdown_set_options_static>:
{
 801bc52:	b538      	push	{r3, r4, r5, lr}
 801bc54:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 801bc56:	460d      	mov	r5, r1
 801bc58:	b901      	cbnz	r1, 801bc5c <lv_dropdown_set_options_static+0xa>
 801bc5a:	e7fe      	b.n	801bc5a <lv_dropdown_set_options_static+0x8>
    dropdown->option_cnt = 0;
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	3901      	subs	r1, #1
 801bc60:	8683      	strh	r3, [r0, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801bc62:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bc64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bc68:	3301      	adds	r3, #1
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	b992      	cbnz	r2, 801bc94 <lv_dropdown_set_options_static+0x42>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 801bc6e:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801bc70:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 801bc74:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801bc76:	06db      	lsls	r3, r3, #27
    dropdown->sel_opt_id_orig = 0;
 801bc78:	8722      	strh	r2, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801bc7a:	d403      	bmi.n	801bc84 <lv_dropdown_set_options_static+0x32>
 801bc7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bc7e:	b108      	cbz	r0, 801bc84 <lv_dropdown_set_options_static+0x32>
        lv_mem_free(dropdown->options);
 801bc80:	f7fb fb80 	bl	8017384 <lv_mem_free>
    dropdown->static_txt = 1;
 801bc84:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->options = (char *)options;
 801bc88:	6325      	str	r5, [r4, #48]	; 0x30
    dropdown->static_txt = 1;
 801bc8a:	f043 0310 	orr.w	r3, r3, #16
 801bc8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 801bc92:	bd38      	pop	{r3, r4, r5, pc}
        if(options[i] == '\n') dropdown->option_cnt++;
 801bc94:	2a0a      	cmp	r2, #10
 801bc96:	bf08      	it	eq
 801bc98:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801bc9a:	e7e2      	b.n	801bc62 <lv_dropdown_set_options_static+0x10>

0801bc9c <lv_dropdown_constructor>:
    dropdown->list          = NULL;
 801bc9c:	2300      	movs	r3, #0
    dropdown->symbol         = LV_SYMBOL_DOWN;
 801bc9e:	4a0f      	ldr	r2, [pc, #60]	; (801bcdc <lv_dropdown_constructor+0x40>)
{
 801bca0:	b510      	push	{r4, lr}
    dropdown->list          = NULL;
 801bca2:	624b      	str	r3, [r1, #36]	; 0x24
{
 801bca4:	460c      	mov	r4, r1
    dropdown->text         = NULL;
 801bca6:	e9c1 320a 	strd	r3, r2, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 801bcaa:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    dropdown->sel_opt_id_orig = 0;
 801bcae:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801bcb2:	4620      	mov	r0, r4
    dropdown->sel_opt_id_orig = 0;
 801bcb4:	638b      	str	r3, [r1, #56]	; 0x38
    dropdown->dir = LV_DIR_BOTTOM;
 801bcb6:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 801bcba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801bcbe:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801bcc2:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801bcc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bcca:	f7e7 fe35 	bl	8003938 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801bcce:	4620      	mov	r0, r4
 801bcd0:	4903      	ldr	r1, [pc, #12]	; (801bce0 <lv_dropdown_constructor+0x44>)
}
 801bcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801bcd6:	f7ff bfbc 	b.w	801bc52 <lv_dropdown_set_options_static>
 801bcda:	bf00      	nop
 801bcdc:	08029fc4 	.word	0x08029fc4
 801bce0:	08029fc8 	.word	0x08029fc8

0801bce4 <lv_dropdown_get_selected_str>:
{
 801bce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t txt_len     = strlen(dropdown->options);
 801bce8:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
{
 801bcec:	4605      	mov	r5, r0
 801bcee:	460e      	mov	r6, r1
 801bcf0:	4617      	mov	r7, r2
    size_t txt_len     = strlen(dropdown->options);
 801bcf2:	4640      	mov	r0, r8
 801bcf4:	f7e4 fa96 	bl	8000224 <strlen>
    uint32_t line        = 0;
 801bcf8:	2300      	movs	r3, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801bcfa:	461c      	mov	r4, r3
 801bcfc:	4284      	cmp	r4, r0
 801bcfe:	d01d      	beq.n	801bd3c <lv_dropdown_get_selected_str+0x58>
 801bd00:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 801bd02:	f818 1004 	ldrb.w	r1, [r8, r4]
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d112      	bne.n	801bd30 <lv_dropdown_get_selected_str+0x4c>
 801bd0a:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 801bd0c:	1e79      	subs	r1, r7, #1
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801bd0e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801bd10:	4422      	add	r2, r4
 801bd12:	5cd2      	ldrb	r2, [r2, r3]
 801bd14:	2a0a      	cmp	r2, #10
 801bd16:	d007      	beq.n	801bd28 <lv_dropdown_get_selected_str+0x44>
        if(buf_size && c >= buf_size - 1) {
 801bd18:	b10f      	cbz	r7, 801bd1e <lv_dropdown_get_selected_str+0x3a>
 801bd1a:	4299      	cmp	r1, r3
 801bd1c:	d904      	bls.n	801bd28 <lv_dropdown_get_selected_str+0x44>
        buf[c] = dropdown->options[i];
 801bd1e:	54f2      	strb	r2, [r6, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801bd20:	3301      	adds	r3, #1
 801bd22:	18e2      	adds	r2, r4, r3
 801bd24:	4282      	cmp	r2, r0
 801bd26:	d3f2      	bcc.n	801bd0e <lv_dropdown_get_selected_str+0x2a>
    buf[c] = '\0';
 801bd28:	2200      	movs	r2, #0
 801bd2a:	54f2      	strb	r2, [r6, r3]
}
 801bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dropdown->options[i] == '\n') line++;
 801bd30:	290a      	cmp	r1, #10
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801bd32:	f104 0401 	add.w	r4, r4, #1
        if(dropdown->options[i] == '\n') line++;
 801bd36:	bf08      	it	eq
 801bd38:	3301      	addeq	r3, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801bd3a:	e7df      	b.n	801bcfc <lv_dropdown_get_selected_str+0x18>
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	e7f3      	b.n	801bd28 <lv_dropdown_get_selected_str+0x44>

0801bd40 <lv_dropdown_open>:
{
 801bd40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801bd44:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 801bd46:	2101      	movs	r1, #1
 801bd48:	f7e7 fe41 	bl	80039ce <lv_obj_add_state>
    if(dropdown->list == NULL) {
 801bd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bd4e:	b9bb      	cbnz	r3, 801bd80 <lv_dropdown_open+0x40>
        lv_obj_t * list_obj = lv_dropdown_list_create(lv_obj_get_screen(dropdown_obj));
 801bd50:	4620      	mov	r0, r4
 801bd52:	f7eb fc44 	bl	80075de <lv_obj_get_screen>
 801bd56:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 801bd58:	4890      	ldr	r0, [pc, #576]	; (801bf9c <lv_dropdown_open+0x25c>)
 801bd5a:	f7e8 f94b 	bl	8003ff4 <lv_obj_class_create_obj>
 801bd5e:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 801bd60:	f7e8 f9d5 	bl	800410e <lv_obj_class_init_obj>
        lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801bd64:	2104      	movs	r1, #4
 801bd66:	4628      	mov	r0, r5
        ((lv_dropdown_list_t*) list_obj)->dropdown = dropdown_obj;
 801bd68:	626c      	str	r4, [r5, #36]	; 0x24
        dropdown->list = list_obj;
 801bd6a:	6265      	str	r5, [r4, #36]	; 0x24
        lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801bd6c:	f7e7 fe07 	bl	800397e <lv_obj_clear_flag>
        lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_IGNORE_LAYOUT);
 801bd70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bd72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801bd76:	f7e7 fddf 	bl	8003938 <lv_obj_add_flag>
        lv_obj_update_layout(dropdown->list);
 801bd7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bd7c:	f7e9 fc4c 	bl	8005618 <lv_obj_update_layout>
    lv_obj_t * label = get_label(dropdown_obj);
 801bd80:	4620      	mov	r0, r4
 801bd82:	f7ff fe23 	bl	801b9cc <get_label>
    lv_label_set_text_static(label, dropdown->options);
 801bd86:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lv_obj_t * label = get_label(dropdown_obj);
 801bd88:	4606      	mov	r6, r0
    lv_label_set_text_static(label, dropdown->options);
 801bd8a:	f001 f960 	bl	801d04e <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 801bd8e:	f242 71d1 	movw	r1, #10193	; 0x27d1
 801bd92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bd94:	f7e8 fd32 	bl	80047fc <lv_obj_set_width>
    lv_obj_update_layout(label);
 801bd98:	4630      	mov	r0, r6
 801bd9a:	f7e9 fc3d 	bl	8005618 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 801bd9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bda0:	f7e8 fe7d 	bl	8004a9e <lv_obj_get_width>
 801bda4:	4605      	mov	r5, r0
 801bda6:	4620      	mov	r0, r4
 801bda8:	f7e8 fe79 	bl	8004a9e <lv_obj_get_width>
 801bdac:	4285      	cmp	r5, r0
 801bdae:	dc0f      	bgt.n	801bdd0 <lv_dropdown_open+0x90>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801bdb0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801bdb4:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 801bdb8:	2b04      	cmp	r3, #4
 801bdba:	d001      	beq.n	801bdc0 <lv_dropdown_open+0x80>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801bdbc:	2b08      	cmp	r3, #8
 801bdbe:	d107      	bne.n	801bdd0 <lv_dropdown_open+0x90>
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 801bdc0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bdc2:	4620      	mov	r0, r4
 801bdc4:	f7e8 fe6b 	bl	8004a9e <lv_obj_get_width>
 801bdc8:	4601      	mov	r1, r0
 801bdca:	4628      	mov	r0, r5
 801bdcc:	f7e8 fd16 	bl	80047fc <lv_obj_set_width>
    lv_coord_t label_h = lv_obj_get_height(label);
 801bdd0:	4630      	mov	r0, r6
 801bdd2:	f7e8 fe6a 	bl	8004aaa <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bdd6:	f241 0232 	movw	r2, #4146	; 0x1032
 801bdda:	4680      	mov	r8, r0
 801bddc:	2100      	movs	r1, #0
 801bdde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bde0:	f7eb f8da 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bde4:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bde8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bdea:	2100      	movs	r1, #0
 801bdec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdee:	f7eb f8d3 	bl	8006f98 <lv_obj_get_style_prop>
 801bdf2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bdf4:	f241 0211 	movw	r2, #4113	; 0x1011
 801bdf8:	2100      	movs	r1, #0
 801bdfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdfc:	f7eb f8cc 	bl	8006f98 <lv_obj_get_style_prop>
    lv_dir_t dir = dropdown->dir;
 801be00:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_coord_t list_fit_h = label_h + top + bottom;
 801be04:	4407      	add	r7, r0
 801be06:	eb07 0545 	add.w	r5, r7, r5, lsl #1
    lv_dir_t dir = dropdown->dir;
 801be0a:	f003 070f 	and.w	r7, r3, #15
    lv_coord_t list_fit_h = label_h + top + bottom;
 801be0e:	eb05 0008 	add.w	r0, r5, r8
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801be12:	2f08      	cmp	r7, #8
    lv_coord_t list_fit_h = label_h + top + bottom;
 801be14:	b205      	sxth	r5, r0
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801be16:	d170      	bne.n	801befa <lv_dropdown_open+0x1ba>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 801be18:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 801be1c:	f7fa fb6c 	bl	80164f8 <lv_disp_get_default>
 801be20:	f7fa fb80 	bl	8016524 <lv_disp_get_ver_res>
 801be24:	44a8      	add	r8, r5
 801be26:	4580      	cmp	r8, r0
 801be28:	f340 8084 	ble.w	801bf34 <lv_dropdown_open+0x1f4>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 801be2c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801be30:	f7fa fb62 	bl	80164f8 <lv_disp_get_default>
 801be34:	f7fa fb76 	bl	8016524 <lv_disp_get_ver_res>
 801be38:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801be3c:	1ac0      	subs	r0, r0, r3
 801be3e:	4580      	cmp	r8, r0
 801be40:	dd52      	ble.n	801bee8 <lv_dropdown_open+0x1a8>
                list_h = dropdown_obj->coords.y1 - 1;
 801be42:	8ae1      	ldrh	r1, [r4, #22]
                dir = LV_DIR_TOP;
 801be44:	2704      	movs	r7, #4
                list_h = dropdown_obj->coords.y1 - 1;
 801be46:	3901      	subs	r1, #1
 801be48:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 801be4a:	42a9      	cmp	r1, r5
 801be4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be4e:	bfa8      	it	ge
 801be50:	4629      	movge	r1, r5
 801be52:	f7e8 fced 	bl	8004830 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 801be56:	4620      	mov	r0, r4
 801be58:	f7ff fed0 	bl	801bbfc <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801be5c:	2f08      	cmp	r7, #8
 801be5e:	d16b      	bne.n	801bf38 <lv_dropdown_open+0x1f8>
 801be60:	2300      	movs	r3, #0
 801be62:	220d      	movs	r2, #13
 801be64:	4621      	mov	r1, r4
 801be66:	9300      	str	r3, [sp, #0]
 801be68:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801be6a:	f7e9 fbef 	bl	800564c <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 801be6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be70:	f7e9 fbd2 	bl	8005618 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 801be74:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801be78:	f003 030f 	and.w	r3, r3, #15
 801be7c:	3b01      	subs	r3, #1
 801be7e:	2b01      	cmp	r3, #1
 801be80:	d81a      	bhi.n	801beb8 <lv_dropdown_open+0x178>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 801be82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be84:	f7e8 fde4 	bl	8004a50 <lv_obj_get_y>
 801be88:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 801be8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be8c:	f7e8 fdfc 	bl	8004a88 <lv_obj_get_y2>
 801be90:	4607      	mov	r7, r0
        if(y2 >= LV_VER_RES) {
 801be92:	f7fa fb31 	bl	80164f8 <lv_disp_get_default>
 801be96:	f7fa fb45 	bl	8016524 <lv_disp_get_ver_res>
 801be9a:	42b8      	cmp	r0, r7
 801be9c:	dc0c      	bgt.n	801beb8 <lv_dropdown_open+0x178>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 801be9e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801bea2:	f7fa fb29 	bl	80164f8 <lv_disp_get_default>
 801bea6:	f7fa fb3d 	bl	8016524 <lv_disp_get_ver_res>
 801beaa:	1e6b      	subs	r3, r5, #1
 801beac:	1bdd      	subs	r5, r3, r7
 801beae:	4428      	add	r0, r5
 801beb0:	b201      	sxth	r1, r0
 801beb2:	4640      	mov	r0, r8
 801beb4:	f7e8 fd34 	bl	8004920 <lv_obj_set_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801beb8:	2100      	movs	r1, #0
 801beba:	f241 425d 	movw	r2, #5213	; 0x145d
 801bebe:	4630      	mov	r0, r6
 801bec0:	f7eb f86a 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801bec4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 801bec8:	d14a      	bne.n	801bf60 <lv_dropdown_open+0x220>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801beca:	f241 426a 	movw	r2, #5226	; 0x146a
 801bece:	4630      	mov	r0, r6
 801bed0:	f7eb f862 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801bed4:	b2c0      	uxtb	r0, r0
       if(lv_obj_get_style_base_dir(label, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
 801bed6:	2801      	cmp	r0, #1
    switch(align) {
 801bed8:	d046      	beq.n	801bf68 <lv_dropdown_open+0x228>
        lv_obj_set_x(label, 0);
 801beda:	2100      	movs	r1, #0
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801bedc:	4630      	mov	r0, r6
}
 801bede:	b002      	add	sp, #8
 801bee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801bee4:	f7e8 bcfe 	b.w	80048e4 <lv_obj_set_x>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 801bee8:	f7fa fb06 	bl	80164f8 <lv_disp_get_default>
 801beec:	f7fa fb1a 	bl	8016524 <lv_disp_get_ver_res>
 801bef0:	8b63      	ldrh	r3, [r4, #26]
 801bef2:	43db      	mvns	r3, r3
 801bef4:	4418      	add	r0, r3
 801bef6:	b201      	sxth	r1, r0
 801bef8:	e7a7      	b.n	801be4a <lv_dropdown_open+0x10a>
    else if(dropdown->dir == LV_DIR_TOP) {
 801befa:	2f04      	cmp	r7, #4
 801befc:	d11a      	bne.n	801bf34 <lv_dropdown_open+0x1f4>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 801befe:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801bf02:	eba8 0305 	sub.w	r3, r8, r5
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	da14      	bge.n	801bf34 <lv_dropdown_open+0x1f4>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 801bf0a:	f7fa faf5 	bl	80164f8 <lv_disp_get_default>
 801bf0e:	f7fa fb09 	bl	8016524 <lv_disp_get_ver_res>
 801bf12:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801bf16:	1ac0      	subs	r0, r0, r3
 801bf18:	4580      	cmp	r8, r0
 801bf1a:	da08      	bge.n	801bf2e <lv_dropdown_open+0x1ee>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801bf1c:	f7fa faec 	bl	80164f8 <lv_disp_get_default>
                dir = LV_DIR_BOTTOM;
 801bf20:	2708      	movs	r7, #8
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801bf22:	f7fa faff 	bl	8016524 <lv_disp_get_ver_res>
 801bf26:	8b61      	ldrh	r1, [r4, #26]
 801bf28:	1a41      	subs	r1, r0, r1
 801bf2a:	b209      	sxth	r1, r1
 801bf2c:	e78d      	b.n	801be4a <lv_dropdown_open+0x10a>
                list_h = dropdown_obj->coords.y1;
 801bf2e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801bf32:	e78a      	b.n	801be4a <lv_dropdown_open+0x10a>
    lv_coord_t list_h = list_fit_h;
 801bf34:	4629      	mov	r1, r5
 801bf36:	e788      	b.n	801be4a <lv_dropdown_open+0x10a>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 801bf38:	2f04      	cmp	r7, #4
 801bf3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bf3c:	d104      	bne.n	801bf48 <lv_dropdown_open+0x208>
 801bf3e:	2300      	movs	r3, #0
 801bf40:	220a      	movs	r2, #10
 801bf42:	9300      	str	r3, [sp, #0]
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801bf44:	4621      	mov	r1, r4
 801bf46:	e790      	b.n	801be6a <lv_dropdown_open+0x12a>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 801bf48:	2f01      	cmp	r7, #1
 801bf4a:	d103      	bne.n	801bf54 <lv_dropdown_open+0x214>
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	2210      	movs	r2, #16
 801bf50:	9300      	str	r3, [sp, #0]
 801bf52:	e7f7      	b.n	801bf44 <lv_dropdown_open+0x204>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801bf54:	2f02      	cmp	r7, #2
 801bf56:	d18a      	bne.n	801be6e <lv_dropdown_open+0x12e>
 801bf58:	2300      	movs	r3, #0
 801bf5a:	2213      	movs	r2, #19
 801bf5c:	9300      	str	r3, [sp, #0]
 801bf5e:	e7f1      	b.n	801bf44 <lv_dropdown_open+0x204>
    switch(align) {
 801bf60:	2902      	cmp	r1, #2
 801bf62:	d00b      	beq.n	801bf7c <lv_dropdown_open+0x23c>
 801bf64:	2903      	cmp	r1, #3
 801bf66:	e7b7      	b.n	801bed8 <lv_dropdown_open+0x198>
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) - lv_obj_get_width(label));
 801bf68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bf6a:	f7e8 fda4 	bl	8004ab6 <lv_obj_get_content_width>
 801bf6e:	4604      	mov	r4, r0
 801bf70:	4630      	mov	r0, r6
 801bf72:	f7e8 fd94 	bl	8004a9e <lv_obj_get_width>
 801bf76:	1a20      	subs	r0, r4, r0
 801bf78:	b201      	sxth	r1, r0
 801bf7a:	e7af      	b.n	801bedc <lv_dropdown_open+0x19c>
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801bf7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bf7e:	f7e8 fd9a 	bl	8004ab6 <lv_obj_get_content_width>
 801bf82:	4604      	mov	r4, r0
 801bf84:	4630      	mov	r0, r6
 801bf86:	f7e8 fd8a 	bl	8004a9e <lv_obj_get_width>
 801bf8a:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 801bf8e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 801bf92:	1049      	asrs	r1, r1, #1
 801bf94:	ebc1 0164 	rsb	r1, r1, r4, asr #1
 801bf98:	b209      	sxth	r1, r1
 801bf9a:	e79f      	b.n	801bedc <lv_dropdown_open+0x19c>
 801bf9c:	0802a000 	.word	0x0802a000

0801bfa0 <lv_dropdown_close>:
{
 801bfa0:	b510      	push	{r4, lr}
 801bfa2:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801bfa4:	2101      	movs	r1, #1
 801bfa6:	f7e7 fd1b 	bl	80039e0 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801bfaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if(dropdown->list) lv_obj_del(dropdown->list);
 801bfae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801bfb0:	8763      	strh	r3, [r4, #58]	; 0x3a
    if(dropdown->list) lv_obj_del(dropdown->list);
 801bfb2:	b118      	cbz	r0, 801bfbc <lv_dropdown_close+0x1c>
}
 801bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(dropdown->list) lv_obj_del(dropdown->list);
 801bfb8:	f7eb bbfa 	b.w	80077b0 <lv_obj_del>
}
 801bfbc:	bd10      	pop	{r4, pc}
	...

0801bfc0 <lv_dropdown_event>:
{
 801bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801bfc4:	48bc      	ldr	r0, [pc, #752]	; (801c2b8 <lv_dropdown_event+0x2f8>)
{
 801bfc6:	b09d      	sub	sp, #116	; 0x74
 801bfc8:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801bfca:	f7e5 fd1e 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801bfce:	2801      	cmp	r0, #1
 801bfd0:	d14a      	bne.n	801c068 <lv_dropdown_event+0xa8>
    lv_event_code_t code = lv_event_get_code(e);
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	f7e5 fdb2 	bl	8001b3c <lv_event_get_code>
 801bfd8:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801bfda:	4630      	mov	r0, r6
 801bfdc:	f7e5 fdac 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 801bfe0:	2d0e      	cmp	r5, #14
    lv_obj_t * obj = lv_event_get_target(e);
 801bfe2:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 801bfe4:	d10f      	bne.n	801c006 <lv_dropdown_event+0x46>
        lv_group_t * g             = lv_obj_get_group(obj);
 801bfe6:	f7e7 fd13 	bl	8003a10 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801bfea:	f7e5 ffa7 	bl	8001f3c <lv_group_get_editing>
 801bfee:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801bff0:	f7e6 f818 	bl	8002024 <lv_indev_get_act>
 801bff4:	f7e6 f81c 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801bff8:	2804      	cmp	r0, #4
 801bffa:	d135      	bne.n	801c068 <lv_dropdown_event+0xa8>
            if(editing) lv_dropdown_open(obj);
 801bffc:	4620      	mov	r0, r4
 801bffe:	b13d      	cbz	r5, 801c010 <lv_dropdown_event+0x50>
                lv_dropdown_open(obj);
 801c000:	f7ff fe9e 	bl	801bd40 <lv_dropdown_open>
 801c004:	e030      	b.n	801c068 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801c006:	f1a5 030f 	sub.w	r3, r5, #15
 801c00a:	b2db      	uxtb	r3, r3
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d802      	bhi.n	801c016 <lv_dropdown_event+0x56>
            lv_dropdown_close(obj);
 801c010:	f7ff ffc6 	bl	801bfa0 <lv_dropdown_close>
 801c014:	e028      	b.n	801c068 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_RELEASED) {
 801c016:	2d08      	cmp	r5, #8
 801c018:	d12f      	bne.n	801c07a <lv_dropdown_event+0xba>
        lv_indev_t * indev = lv_indev_get_act();
 801c01a:	f7e6 f803 	bl	8002024 <lv_indev_get_act>
 801c01e:	4605      	mov	r5, r0
        if(lv_indev_get_scroll_obj(indev) == NULL) {
 801c020:	f7e6 f884 	bl	800212c <lv_indev_get_scroll_obj>
 801c024:	bb18      	cbnz	r0, 801c06e <lv_dropdown_event+0xae>
            if(dropdown->list) {
 801c026:	6a63      	ldr	r3, [r4, #36]	; 0x24
                lv_dropdown_close(obj);
 801c028:	4620      	mov	r0, r4
            if(dropdown->list) {
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d0e8      	beq.n	801c000 <lv_dropdown_event+0x40>
                lv_dropdown_close(obj);
 801c02e:	f7ff ffb7 	bl	801bfa0 <lv_dropdown_close>
                if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 801c032:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c034:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801c036:	429a      	cmp	r2, r3
 801c038:	d00b      	beq.n	801c052 <lv_dropdown_event+0x92>
                    dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c03a:	8723      	strh	r3, [r4, #56]	; 0x38
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801c03c:	aa14      	add	r2, sp, #80	; 0x50
 801c03e:	211c      	movs	r1, #28
 801c040:	4620      	mov	r0, r4
                    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c042:	9314      	str	r3, [sp, #80]	; 0x50
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801c044:	f7e5 fd58 	bl	8001af8 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801c048:	2801      	cmp	r0, #1
 801c04a:	d10d      	bne.n	801c068 <lv_dropdown_event+0xa8>
                    lv_obj_invalidate(obj);
 801c04c:	4620      	mov	r0, r4
 801c04e:	f7e8 fe7b 	bl	8004d48 <lv_obj_invalidate>
                lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801c052:	4628      	mov	r0, r5
 801c054:	f7e5 ffec 	bl	8002030 <lv_indev_get_type>
                if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801c058:	2804      	cmp	r0, #4
 801c05a:	d105      	bne.n	801c068 <lv_dropdown_event+0xa8>
                    lv_group_set_editing(lv_obj_get_group(obj), false);
 801c05c:	4620      	mov	r0, r4
 801c05e:	f7e7 fcd7 	bl	8003a10 <lv_obj_get_group>
 801c062:	2100      	movs	r1, #0
 801c064:	f7e5 ff06 	bl	8001e74 <lv_group_set_editing>
}
 801c068:	b01d      	add	sp, #116	; 0x74
 801c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c06e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            lv_obj_invalidate(obj);
 801c070:	4620      	mov	r0, r4
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c072:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801c074:	f7e8 fe68 	bl	8004d48 <lv_obj_invalidate>
 801c078:	e7f6      	b.n	801c068 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801c07a:	2d24      	cmp	r5, #36	; 0x24
 801c07c:	d102      	bne.n	801c084 <lv_dropdown_event+0xc4>
        lv_obj_refresh_self_size(obj);
 801c07e:	f7e8 fd9e 	bl	8004bbe <lv_obj_refresh_self_size>
 801c082:	e7f1      	b.n	801c068 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801c084:	2d23      	cmp	r5, #35	; 0x23
 801c086:	d0fa      	beq.n	801c07e <lv_dropdown_event+0xbe>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801c088:	2d26      	cmp	r5, #38	; 0x26
 801c08a:	d10d      	bne.n	801c0a8 <lv_dropdown_event+0xe8>
        lv_point_t * p = lv_event_get_param(e);
 801c08c:	4630      	mov	r0, r6
 801c08e:	f7e5 fd57 	bl	8001b40 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c092:	f241 4259 	movw	r2, #5209	; 0x1459
 801c096:	4605      	mov	r5, r0
 801c098:	2100      	movs	r1, #0
 801c09a:	4620      	mov	r0, r4
 801c09c:	f7ea ff7c 	bl	8006f98 <lv_obj_get_style_prop>
        p->y = lv_font_get_line_height(font);
 801c0a0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801c0a4:	806b      	strh	r3, [r5, #2]
 801c0a6:	e7df      	b.n	801c068 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_KEY) {
 801c0a8:	2d0d      	cmp	r5, #13
 801c0aa:	d127      	bne.n	801c0fc <lv_dropdown_event+0x13c>
        char c = *((char *)lv_event_get_param(e));
 801c0ac:	4630      	mov	r0, r6
 801c0ae:	f7e5 fd47 	bl	8001b40 <lv_event_get_param>
 801c0b2:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801c0b4:	f1a3 0212 	sub.w	r2, r3, #18
 801c0b8:	2a01      	cmp	r2, #1
 801c0ba:	d80d      	bhi.n	801c0d8 <lv_dropdown_event+0x118>
            if(dropdown->list == NULL) {
 801c0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0be:	b90b      	cbnz	r3, 801c0c4 <lv_dropdown_event+0x104>
                lv_dropdown_open(obj);
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	e79d      	b.n	801c000 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 801c0c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c0c6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c0c8:	3301      	adds	r3, #1
 801c0ca:	4293      	cmp	r3, r2
 801c0cc:	dacc      	bge.n	801c068 <lv_dropdown_event+0xa8>
                position_to_selected(obj);
 801c0ce:	4620      	mov	r0, r4
                dropdown->sel_opt_id--;
 801c0d0:	86e3      	strh	r3, [r4, #54]	; 0x36
                position_to_selected(obj);
 801c0d2:	f7ff fd93 	bl	801bbfc <position_to_selected>
 801c0d6:	e7c7      	b.n	801c068 <lv_dropdown_event+0xa8>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801c0d8:	2b14      	cmp	r3, #20
 801c0da:	d001      	beq.n	801c0e0 <lv_dropdown_event+0x120>
 801c0dc:	2b11      	cmp	r3, #17
 801c0de:	d107      	bne.n	801c0f0 <lv_dropdown_event+0x130>
            if(dropdown->list == NULL) {
 801c0e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d0ec      	beq.n	801c0c0 <lv_dropdown_event+0x100>
            else if(dropdown->sel_opt_id > 0) {
 801c0e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d0bd      	beq.n	801c068 <lv_dropdown_event+0xa8>
                dropdown->sel_opt_id--;
 801c0ec:	3b01      	subs	r3, #1
 801c0ee:	e7ee      	b.n	801c0ce <lv_dropdown_event+0x10e>
        else if(c == LV_KEY_ESC) {
 801c0f0:	2b1b      	cmp	r3, #27
 801c0f2:	d1b9      	bne.n	801c068 <lv_dropdown_event+0xa8>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c0f4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            lv_dropdown_close(obj);
 801c0f6:	4620      	mov	r0, r4
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c0f8:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_dropdown_close(obj);
 801c0fa:	e789      	b.n	801c010 <lv_dropdown_event+0x50>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801c0fc:	2d15      	cmp	r5, #21
 801c0fe:	d1b3      	bne.n	801c068 <lv_dropdown_event+0xa8>
    lv_obj_t * obj = lv_event_get_target(e);
 801c100:	4630      	mov	r0, r6
 801c102:	f7e5 fd19 	bl	8001b38 <lv_event_get_target>
 801c106:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c108:	4630      	mov	r0, r6
 801c10a:	f7e5 fd19 	bl	8001b40 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c10e:	f241 0232 	movw	r2, #4146	; 0x1032
 801c112:	2100      	movs	r1, #0
 801c114:	4682      	mov	sl, r0
 801c116:	4620      	mov	r0, r4
 801c118:	f7ea ff3e 	bl	8006f98 <lv_obj_get_style_prop>
 801c11c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c11e:	f241 0212 	movw	r2, #4114	; 0x1012
 801c122:	2100      	movs	r1, #0
 801c124:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c126:	b2b7      	uxth	r7, r6
 801c128:	f7ea ff36 	bl	8006f98 <lv_obj_get_style_prop>
 801c12c:	fa10 f086 	uxtah	r0, r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c130:	f241 0213 	movw	r2, #4115	; 0x1013
 801c134:	2100      	movs	r1, #0
 801c136:	b283      	uxth	r3, r0
 801c138:	4620      	mov	r0, r4
 801c13a:	9304      	str	r3, [sp, #16]
 801c13c:	f7ea ff2c 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801c140:	4438      	add	r0, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c142:	f241 0210 	movw	r2, #4112	; 0x1010
 801c146:	2100      	movs	r1, #0
 801c148:	fa1f f980 	uxth.w	r9, r0
 801c14c:	4620      	mov	r0, r4
 801c14e:	f7ea ff23 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801c152:	4438      	add	r0, r7
 801c154:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 801c156:	a80c      	add	r0, sp, #48	; 0x30
 801c158:	f7ed fffa 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 801c15c:	aa0c      	add	r2, sp, #48	; 0x30
 801c15e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c162:	4620      	mov	r0, r4
 801c164:	f7e8 f950 	bl	8004408 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 801c168:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801c16a:	b947      	cbnz	r7, 801c17e <lv_dropdown_event+0x1be>
        char * buf = lv_mem_buf_get(128);
 801c16c:	2080      	movs	r0, #128	; 0x80
 801c16e:	f7fb fabb 	bl	80176e8 <lv_mem_buf_get>
        lv_dropdown_get_selected_str(obj, buf, 128);
 801c172:	2280      	movs	r2, #128	; 0x80
        char * buf = lv_mem_buf_get(128);
 801c174:	4607      	mov	r7, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 801c176:	4601      	mov	r1, r0
 801c178:	4620      	mov	r0, r4
 801c17a:	f7ff fdb3 	bl	801bce4 <lv_dropdown_get_selected_str>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c17e:	f241 426a 	movw	r2, #5226	; 0x146a
 801c182:	2100      	movs	r1, #0
 801c184:	4620      	mov	r0, r4
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801c186:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 801c18a:	f7ea ff05 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c18e:	fa5f f880 	uxtb.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 801c192:	f1b8 0f01 	cmp.w	r8, #1
 801c196:	d007      	beq.n	801c1a8 <lv_dropdown_event+0x1e8>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801c198:	f006 080f 	and.w	r8, r6, #15
 801c19c:	f108 33ff 	add.w	r3, r8, #4294967295
 801c1a0:	f1d3 0800 	rsbs	r8, r3, #0
 801c1a4:	eb48 0803 	adc.w	r8, r8, r3
    if(dropdown->symbol) {
 801c1a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c1aa:	2800      	cmp	r0, #0
 801c1ac:	d03b      	beq.n	801c226 <lv_dropdown_event+0x266>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801c1ae:	f7ed ffad 	bl	800a10c <lv_img_src_get_type>
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c1b2:	2802      	cmp	r0, #2
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801c1b4:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c1b6:	d16d      	bne.n	801c294 <lv_dropdown_event+0x2d4>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX, symbol_dsc.flag);
 801c1b8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801c1bc:	a814      	add	r0, sp, #80	; 0x50
 801c1be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c1c0:	9302      	str	r3, [sp, #8]
 801c1c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801c1c6:	9301      	str	r3, [sp, #4]
 801c1c8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c1cc:	9300      	str	r3, [sp, #0]
 801c1ce:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801c1d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c1d4:	f7fc ffe7 	bl	80191a6 <lv_txt_get_size>
            symbol_w = size.x;
 801c1d8:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
            symbol_h = size.y;
 801c1dc:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
        if(symbol_to_left) {
 801c1e0:	b299      	uxth	r1, r3
 801c1e2:	f1b8 0f00 	cmp.w	r8, #0
 801c1e6:	d069      	beq.n	801c2bc <lv_dropdown_event+0x2fc>
            symbol_area.x1 = obj->coords.x1 + left;
 801c1e8:	8aa2      	ldrh	r2, [r4, #20]
 801c1ea:	9804      	ldr	r0, [sp, #16]
 801c1ec:	4402      	add	r2, r0
 801c1ee:	b292      	uxth	r2, r2
 801c1f0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c1f4:	3a01      	subs	r2, #1
 801c1f6:	440a      	add	r2, r1
 801c1f8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c1fc:	f1bb 0f02 	cmp.w	fp, #2
 801c200:	8ae2      	ldrh	r2, [r4, #22]
 801c202:	b2b1      	uxth	r1, r6
 801c204:	d165      	bne.n	801c2d2 <lv_dropdown_event+0x312>
            symbol_area.y1 = obj->coords.y1 + top;
 801c206:	442a      	add	r2, r5
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c208:	2300      	movs	r3, #0
 801c20a:	a80a      	add	r0, sp, #40	; 0x28
            symbol_area.y1 = obj->coords.y1 + top;
 801c20c:	b292      	uxth	r2, r2
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c20e:	9300      	str	r3, [sp, #0]
 801c210:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            symbol_area.y1 = obj->coords.y1 + top;
 801c212:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c216:	3a01      	subs	r2, #1
 801c218:	4411      	add	r1, r2
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c21a:	aa0c      	add	r2, sp, #48	; 0x30
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c21c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c220:	4651      	mov	r1, sl
 801c222:	f7ee f96d 	bl	800a500 <lv_draw_label>
    lv_draw_label_dsc_init(&label_dsc);
 801c226:	a814      	add	r0, sp, #80	; 0x50
 801c228:	f7ed ff92 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 801c22c:	aa14      	add	r2, sp, #80	; 0x50
 801c22e:	2100      	movs	r1, #0
 801c230:	4620      	mov	r0, r4
 801c232:	f7e8 f8e9 	bl	8004408 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, label_dsc.flag);
 801c236:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801c23a:	a809      	add	r0, sp, #36	; 0x24
 801c23c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c23e:	9302      	str	r3, [sp, #8]
 801c240:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801c244:	4639      	mov	r1, r7
 801c246:	9301      	str	r3, [sp, #4]
 801c248:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801c24c:	9300      	str	r3, [sp, #0]
 801c24e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c252:	f7fc ffa8 	bl	80191a6 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 801c256:	8ae0      	ldrh	r0, [r4, #22]
    txt_area.y2 = txt_area.y1 + size.y;
 801c258:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    txt_area.y1 = obj->coords.y1 + top;
 801c25c:	4405      	add	r5, r0
 801c25e:	b2ad      	uxth	r5, r5
 801c260:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    txt_area.y2 = txt_area.y1 + size.y;
 801c264:	441d      	add	r5, r3
    if(dropdown->symbol == NULL) {
 801c266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    txt_area.y2 = txt_area.y1 + size.y;
 801c268:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    if(dropdown->symbol == NULL) {
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d168      	bne.n	801c342 <lv_dropdown_event+0x382>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 801c270:	4620      	mov	r0, r4
 801c272:	8aa5      	ldrh	r5, [r4, #20]
 801c274:	f7e8 fc13 	bl	8004a9e <lv_obj_get_width>
 801c278:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801c27c:	1a80      	subs	r0, r0, r2
 801c27e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801c282:	eb05 0560 	add.w	r5, r5, r0, asr #1
 801c286:	b2ab      	uxth	r3, r5
            txt_area.x1 = obj->coords.x1 + left;
 801c288:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            txt_area.x2 = txt_area.x1 + size.x;
 801c28c:	4413      	add	r3, r2
 801c28e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c292:	e066      	b.n	801c362 <lv_dropdown_event+0x3a2>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 801c294:	a914      	add	r1, sp, #80	; 0x50
 801c296:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c298:	f7f2 fd98 	bl	800edcc <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801c29c:	2801      	cmp	r0, #1
                symbol_w = header.w;
 801c29e:	bf09      	itett	eq
 801c2a0:	9b14      	ldreq	r3, [sp, #80]	; 0x50
                symbol_h = -1;
 801c2a2:	f04f 36ff 	movne.w	r6, #4294967295
                symbol_h = header.h;
 801c2a6:	f8bd 6052 	ldrheq.w	r6, [sp, #82]	; 0x52
                symbol_w = header.w;
 801c2aa:	f3c3 238a 	ubfxeq	r3, r3, #10, #11
                symbol_w = -1;
 801c2ae:	bf14      	ite	ne
 801c2b0:	4633      	movne	r3, r6
                symbol_h = header.h;
 801c2b2:	f3c6 164a 	ubfxeq	r6, r6, #5, #11
 801c2b6:	e793      	b.n	801c1e0 <lv_dropdown_event+0x220>
 801c2b8:	08029fe4 	.word	0x08029fe4
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801c2bc:	8b20      	ldrh	r0, [r4, #24]
 801c2be:	eba0 0009 	sub.w	r0, r0, r9
 801c2c2:	b280      	uxth	r0, r0
 801c2c4:	1a42      	subs	r2, r0, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c2c6:	3801      	subs	r0, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801c2c8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c2cc:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 801c2d0:	e794      	b.n	801c1fc <lv_dropdown_event+0x23c>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	9305      	str	r3, [sp, #20]
 801c2d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801c2da:	f7e8 fbe6 	bl	8004aaa <lv_obj_get_height>
 801c2de:	1b80      	subs	r0, r0, r6
 801c2e0:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.y = symbol_h / 2;
 801c2e2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c2e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c2ea:	9906      	ldr	r1, [sp, #24]
            img_dsc.pivot.y = symbol_h / 2;
 801c2ec:	1076      	asrs	r6, r6, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c2ee:	eb02 0260 	add.w	r2, r2, r0, asr #1
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c2f2:	3901      	subs	r1, #1
            lv_draw_img_dsc_init(&img_dsc);
 801c2f4:	a814      	add	r0, sp, #80	; 0x50
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c2f6:	b292      	uxth	r2, r2
 801c2f8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c2fc:	440a      	add	r2, r1
 801c2fe:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_img_dsc_init(&img_dsc);
 801c302:	f7ed fde1 	bl	8009ec8 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 801c306:	aa14      	add	r2, sp, #80	; 0x50
 801c308:	4620      	mov	r0, r4
 801c30a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c30e:	f7e8 f8db 	bl	80044c8 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 801c312:	9b05      	ldr	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c314:	f640 020f 	movw	r2, #2063	; 0x80f
 801c318:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c31c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c320:	4620      	mov	r0, r4
            img_dsc.pivot.y = symbol_h / 2;
 801c322:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
            img_dsc.pivot.x = symbol_w / 2;
 801c326:	105b      	asrs	r3, r3, #1
 801c328:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 801c32c:	f7ea fe34 	bl	8006f98 <lv_obj_get_style_prop>
            lv_draw_img(&symbol_area, clip_area, dropdown->symbol, &img_dsc);
 801c330:	ab14      	add	r3, sp, #80	; 0x50
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 801c332:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            lv_draw_img(&symbol_area, clip_area, dropdown->symbol, &img_dsc);
 801c336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c338:	4651      	mov	r1, sl
 801c33a:	a80a      	add	r0, sp, #40	; 0x28
 801c33c:	f7ed fdf8 	bl	8009f30 <lv_draw_img>
 801c340:	e771      	b.n	801c226 <lv_dropdown_event+0x266>
        if(symbol_to_left) {
 801c342:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c346:	f1b8 0f00 	cmp.w	r8, #0
 801c34a:	d01a      	beq.n	801c382 <lv_dropdown_event+0x3c2>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801c34c:	8b20      	ldrh	r0, [r4, #24]
 801c34e:	eba0 0909 	sub.w	r9, r0, r9
 801c352:	fa1f f989 	uxth.w	r9, r9
 801c356:	eba9 0302 	sub.w	r3, r9, r2
            txt_area.x2 = txt_area.x1 + size.x;
 801c35a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801c35e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_draw_label(&txt_area, clip_area, &label_dsc, opt_txt, NULL);
 801c362:	2300      	movs	r3, #0
 801c364:	aa14      	add	r2, sp, #80	; 0x50
 801c366:	4651      	mov	r1, sl
 801c368:	a80a      	add	r0, sp, #40	; 0x28
 801c36a:	9300      	str	r3, [sp, #0]
 801c36c:	463b      	mov	r3, r7
 801c36e:	f7ee f8c7 	bl	800a500 <lv_draw_label>
    if(dropdown->text == NULL) {
 801c372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c374:	2b00      	cmp	r3, #0
 801c376:	f47f ae77 	bne.w	801c068 <lv_dropdown_event+0xa8>
        lv_mem_buf_release((char *)opt_txt);
 801c37a:	4638      	mov	r0, r7
 801c37c:	f7fb f810 	bl	80173a0 <lv_mem_buf_release>
}
 801c380:	e672      	b.n	801c068 <lv_dropdown_event+0xa8>
            txt_area.x1 = obj->coords.x1 + left;
 801c382:	8aa3      	ldrh	r3, [r4, #20]
 801c384:	9904      	ldr	r1, [sp, #16]
 801c386:	4419      	add	r1, r3
 801c388:	b28b      	uxth	r3, r1
 801c38a:	e77d      	b.n	801c288 <lv_dropdown_event+0x2c8>

0801c38c <lv_dropdown_list_event>:
{
 801c38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801c38e:	4608      	mov	r0, r1
{
 801c390:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801c392:	f7e5 fbd3 	bl	8001b3c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 801c396:	2818      	cmp	r0, #24
    lv_event_code_t code = lv_event_get_code(e);
 801c398:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 801c39a:	d141      	bne.n	801c420 <lv_dropdown_list_event+0x94>
    lv_obj_t * list = lv_event_get_target(e);
 801c39c:	4628      	mov	r0, r5
 801c39e:	f7e5 fbcb 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 801c3a2:	2c08      	cmp	r4, #8
    lv_obj_t * list = lv_event_get_target(e);
 801c3a4:	4606      	mov	r6, r0
    if(code == LV_EVENT_RELEASED) {
 801c3a6:	d149      	bne.n	801c43c <lv_dropdown_list_event+0xb0>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 801c3a8:	f7e5 fe3c 	bl	8002024 <lv_indev_get_act>
 801c3ac:	f7e5 febe 	bl	800212c <lv_indev_get_scroll_obj>
 801c3b0:	4607      	mov	r7, r0
 801c3b2:	2800      	cmp	r0, #0
 801c3b4:	d13a      	bne.n	801c42c <lv_dropdown_list_event+0xa0>
    lv_obj_t * dropdown_obj = list->dropdown;
 801c3b6:	6a74      	ldr	r4, [r6, #36]	; 0x24
    lv_indev_t * indev = lv_indev_get_act();
 801c3b8:	f7e5 fe34 	bl	8002024 <lv_indev_get_act>
 801c3bc:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801c3be:	f7e5 fe37 	bl	8002030 <lv_indev_get_type>
 801c3c2:	2804      	cmp	r0, #4
 801c3c4:	d10c      	bne.n	801c3e0 <lv_dropdown_list_event+0x54>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c3c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801c3c8:	4620      	mov	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c3ca:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801c3cc:	f7e7 fb20 	bl	8003a10 <lv_obj_get_group>
 801c3d0:	4606      	mov	r6, r0
        if(lv_group_get_editing(g)) {
 801c3d2:	f7e5 fdb3 	bl	8001f3c <lv_group_get_editing>
 801c3d6:	b118      	cbz	r0, 801c3e0 <lv_dropdown_list_event+0x54>
            lv_group_set_editing(g, false);
 801c3d8:	4639      	mov	r1, r7
 801c3da:	4630      	mov	r0, r6
 801c3dc:	f7e5 fd4a 	bl	8001e74 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801c3e0:	4628      	mov	r0, r5
 801c3e2:	f7e5 fe25 	bl	8002030 <lv_indev_get_type>
 801c3e6:	2801      	cmp	r0, #1
 801c3e8:	d122      	bne.n	801c430 <lv_dropdown_list_event+0xa4>
        lv_indev_get_point(indev, &p);
 801c3ea:	4669      	mov	r1, sp
 801c3ec:	4628      	mov	r0, r5
 801c3ee:	f7e5 fe7a 	bl	80020e6 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 801c3f2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	f7ff fb0d 	bl	801ba16 <get_id_on_point>
 801c3fc:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c3fe:	8720      	strh	r0, [r4, #56]	; 0x38
    lv_dropdown_close(dropdown_obj);
 801c400:	4620      	mov	r0, r4
 801c402:	f7ff fdcd 	bl	801bfa0 <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 801c406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c408:	b913      	cbnz	r3, 801c410 <lv_dropdown_list_event+0x84>
 801c40a:	4620      	mov	r0, r4
 801c40c:	f7e8 fc9c 	bl	8004d48 <lv_obj_invalidate>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c410:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801c412:	466a      	mov	r2, sp
 801c414:	211c      	movs	r1, #28
 801c416:	4620      	mov	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c418:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801c41a:	f7e5 fb6d 	bl	8001af8 <lv_event_send>
    if(res != LV_RES_OK) return res;
 801c41e:	e005      	b.n	801c42c <lv_dropdown_list_event+0xa0>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801c420:	4629      	mov	r1, r5
 801c422:	483c      	ldr	r0, [pc, #240]	; (801c514 <lv_dropdown_list_event+0x188>)
 801c424:	f7e5 faf1 	bl	8001a0a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801c428:	2801      	cmp	r0, #1
 801c42a:	d0b7      	beq.n	801c39c <lv_dropdown_list_event+0x10>
}
 801c42c:	b003      	add	sp, #12
 801c42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801c430:	4628      	mov	r0, r5
 801c432:	f7e5 fdfd 	bl	8002030 <lv_indev_get_type>
 801c436:	2803      	cmp	r0, #3
 801c438:	d1e2      	bne.n	801c400 <lv_dropdown_list_event+0x74>
 801c43a:	e7d6      	b.n	801c3ea <lv_dropdown_list_event+0x5e>
    else if(code == LV_EVENT_PRESSED) {
 801c43c:	2c01      	cmp	r4, #1
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 801c43e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    else if(code == LV_EVENT_PRESSED) {
 801c440:	d11c      	bne.n	801c47c <lv_dropdown_list_event+0xf0>
    lv_indev_t * indev = lv_indev_get_act();
 801c442:	f7e5 fdef 	bl	8002024 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 801c446:	4604      	mov	r4, r0
 801c448:	2800      	cmp	r0, #0
 801c44a:	d0ef      	beq.n	801c42c <lv_dropdown_list_event+0xa0>
 801c44c:	f7e5 fdf0 	bl	8002030 <lv_indev_get_type>
 801c450:	2801      	cmp	r0, #1
 801c452:	d10d      	bne.n	801c470 <lv_dropdown_list_event+0xe4>
        lv_indev_get_point(indev, &p);
 801c454:	4669      	mov	r1, sp
 801c456:	4620      	mov	r0, r4
 801c458:	f7e5 fe45 	bl	80020e6 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 801c45c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c460:	4638      	mov	r0, r7
 801c462:	f7ff fad8 	bl	801ba16 <get_id_on_point>
 801c466:	8778      	strh	r0, [r7, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 801c468:	4630      	mov	r0, r6
        lv_obj_invalidate(list);
 801c46a:	f7e8 fc6d 	bl	8004d48 <lv_obj_invalidate>
 801c46e:	e7dd      	b.n	801c42c <lv_dropdown_list_event+0xa0>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 801c470:	4620      	mov	r0, r4
 801c472:	f7e5 fddd 	bl	8002030 <lv_indev_get_type>
 801c476:	2803      	cmp	r0, #3
 801c478:	d1d8      	bne.n	801c42c <lv_dropdown_list_event+0xa0>
 801c47a:	e7eb      	b.n	801c454 <lv_dropdown_list_event+0xc8>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 801c47c:	2c09      	cmp	r4, #9
 801c47e:	d103      	bne.n	801c488 <lv_dropdown_list_event+0xfc>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801c480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c484:	877b      	strh	r3, [r7, #58]	; 0x3a
 801c486:	e7f0      	b.n	801c46a <lv_dropdown_list_event+0xde>
    else if(code == LV_EVENT_DRAW_POST) {
 801c488:	2c18      	cmp	r4, #24
 801c48a:	d1cf      	bne.n	801c42c <lv_dropdown_list_event+0xa0>
    lv_obj_t * list_obj = lv_event_get_target(e);
 801c48c:	4628      	mov	r0, r5
 801c48e:	f7e5 fb53 	bl	8001b38 <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 801c492:	6a44      	ldr	r4, [r0, #36]	; 0x24
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c494:	4628      	mov	r0, r5
 801c496:	f7e5 fb53 	bl	8001b40 <lv_event_get_param>
    if(dropdown->list) {
 801c49a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c49c:	4601      	mov	r1, r0
    if(dropdown->list) {
 801c49e:	b362      	cbz	r2, 801c4fa <lv_dropdown_list_event+0x16e>
        has_common = _lv_area_intersect(&clip_area_core, clip_area, &dropdown->list->coords);
 801c4a0:	3214      	adds	r2, #20
 801c4a2:	4668      	mov	r0, sp
 801c4a4:	f7fa fb1f 	bl	8016ae6 <_lv_area_intersect>
        if(has_common) {
 801c4a8:	b338      	cbz	r0, 801c4fa <lv_dropdown_list_event+0x16e>
            if(dropdown->selected_highlight) {
 801c4aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801c4ae:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801c4b0:	069b      	lsls	r3, r3, #26
 801c4b2:	d527      	bpl.n	801c504 <lv_dropdown_list_event+0x178>
                if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 801c4b4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801c4b6:	4291      	cmp	r1, r2
 801c4b8:	d108      	bne.n	801c4cc <lv_dropdown_list_event+0x140>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801c4ba:	2321      	movs	r3, #33	; 0x21
 801c4bc:	460a      	mov	r2, r1
 801c4be:	4620      	mov	r0, r4
 801c4c0:	4669      	mov	r1, sp
 801c4c2:	f7ff fad4 	bl	801ba6e <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801c4c6:	2321      	movs	r3, #33	; 0x21
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c4c8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801c4ca:	e012      	b.n	801c4f2 <lv_dropdown_list_event+0x166>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c4cc:	2320      	movs	r3, #32
 801c4ce:	4669      	mov	r1, sp
 801c4d0:	4620      	mov	r0, r4
 801c4d2:	f7ff facc 	bl	801ba6e <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c4d6:	2320      	movs	r3, #32
 801c4d8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801c4da:	4669      	mov	r1, sp
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f7ff fb27 	bl	801bb30 <draw_box_label>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->sel_opt_id, LV_STATE_CHECKED);
 801c4e2:	2301      	movs	r3, #1
 801c4e4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c4e6:	4669      	mov	r1, sp
 801c4e8:	4620      	mov	r0, r4
 801c4ea:	f7ff fac0 	bl	801ba6e <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->sel_opt_id, LV_STATE_CHECKED);
 801c4ee:	2301      	movs	r3, #1
 801c4f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c4f2:	4669      	mov	r1, sp
 801c4f4:	4620      	mov	r0, r4
 801c4f6:	f7ff fb1b 	bl	801bb30 <draw_box_label>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801c4fa:	4629      	mov	r1, r5
 801c4fc:	4805      	ldr	r0, [pc, #20]	; (801c514 <lv_dropdown_list_event+0x188>)
 801c4fe:	f7e5 fa84 	bl	8001a0a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801c502:	e793      	b.n	801c42c <lv_dropdown_list_event+0xa0>
                draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c504:	2320      	movs	r3, #32
 801c506:	4669      	mov	r1, sp
 801c508:	4620      	mov	r0, r4
 801c50a:	f7ff fab0 	bl	801ba6e <draw_box>
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801c50e:	2320      	movs	r3, #32
 801c510:	e7da      	b.n	801c4c8 <lv_dropdown_list_event+0x13c>
 801c512:	bf00      	nop
 801c514:	0802a000 	.word	0x0802a000

0801c518 <lv_label_dot_tmp_free>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801c518:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801c51c:	065b      	lsls	r3, r3, #25
{
 801c51e:	b510      	push	{r4, lr}
 801c520:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801c522:	d503      	bpl.n	801c52c <lv_label_dot_tmp_free+0x14>
 801c524:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c526:	b108      	cbz	r0, 801c52c <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 801c528:	f7fa ff2c 	bl	8017384 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 801c52c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c530:	f36f 1386 	bfc	r3, #6, #1
 801c534:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 801c538:	2300      	movs	r3, #0
 801c53a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801c53c:	bd10      	pop	{r4, pc}

0801c53e <lv_label_destructor>:
{
 801c53e:	b510      	push	{r4, lr}
 801c540:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 801c542:	4608      	mov	r0, r1
 801c544:	f7ff ffe8 	bl	801c518 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 801c548:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c54c:	071b      	lsls	r3, r3, #28
 801c54e:	d402      	bmi.n	801c556 <lv_label_destructor+0x18>
 801c550:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c552:	f7fa ff17 	bl	8017384 <lv_mem_free>
    label->text = NULL;
 801c556:	2300      	movs	r3, #0
 801c558:	6263      	str	r3, [r4, #36]	; 0x24
}
 801c55a:	bd10      	pop	{r4, pc}

0801c55c <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 801c55c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 801c560:	f7e8 bbf2 	b.w	8004d48 <lv_obj_invalidate>

0801c564 <set_ofs_x_anim>:
    label->offset.x    = v;
 801c564:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 801c568:	f7e8 bbee 	b.w	8004d48 <lv_obj_invalidate>

0801c56c <lv_label_revert_dots>:
{
 801c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801c56e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801c572:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801c574:	f003 0307 	and.w	r3, r3, #7
 801c578:	2b01      	cmp	r3, #1
 801c57a:	d123      	bne.n	801c5c4 <lv_label_revert_dots+0x58>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 801c57c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801c57e:	1c4a      	adds	r2, r1, #1
 801c580:	d020      	beq.n	801c5c4 <lv_label_revert_dots+0x58>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 801c582:	4b12      	ldr	r3, [pc, #72]	; (801c5cc <lv_label_revert_dots+0x60>)
 801c584:	3903      	subs	r1, #3
 801c586:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 801c58c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801c590:	065b      	lsls	r3, r3, #25
    while(label->text[byte_i + i] != '\0') {
 801c592:	f04f 0300 	mov.w	r3, #0
        return label->dot.tmp_ptr;
 801c596:	bf4c      	ite	mi
 801c598:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
        return label->dot.tmp;
 801c59a:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 801c59e:	fa50 f283 	uxtab	r2, r0, r3
 801c5a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c5a4:	b2dd      	uxtb	r5, r3
 801c5a6:	3301      	adds	r3, #1
 801c5a8:	f811 c002 	ldrb.w	ip, [r1, r2]
 801c5ac:	188f      	adds	r7, r1, r2
 801c5ae:	5d75      	ldrb	r5, [r6, r5]
 801c5b0:	f1bc 0f00 	cmp.w	ip, #0
 801c5b4:	d107      	bne.n	801c5c6 <lv_label_revert_dots+0x5a>
    lv_label_dot_tmp_free(obj);
 801c5b6:	4620      	mov	r0, r4
    label->text[byte_i + i] = dot_tmp[i];
 801c5b8:	703d      	strb	r5, [r7, #0]
    lv_label_dot_tmp_free(obj);
 801c5ba:	f7ff ffad 	bl	801c518 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 801c5be:	f04f 33ff 	mov.w	r3, #4294967295
 801c5c2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 801c5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        label->text[byte_i + i] = dot_tmp[i];
 801c5c6:	548d      	strb	r5, [r1, r2]
        i++;
 801c5c8:	e7e9      	b.n	801c59e <lv_label_revert_dots+0x32>
 801c5ca:	bf00      	nop
 801c5cc:	20000038 	.word	0x20000038

0801c5d0 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c5d0:	f241 425b 	movw	r2, #5211	; 0x145b
 801c5d4:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801c5d6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c5d8:	f7ea fcde 	bl	8006f98 <lv_obj_get_style_prop>
}
 801c5dc:	b200      	sxth	r0, r0
 801c5de:	bd08      	pop	{r3, pc}

0801c5e0 <lv_obj_get_style_text_letter_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801c5e0:	f241 425a 	movw	r2, #5210	; 0x145a
 801c5e4:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 801c5e6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801c5e8:	f7ea fcd6 	bl	8006f98 <lv_obj_get_style_prop>
}
 801c5ec:	b200      	sxth	r0, r0
 801c5ee:	bd08      	pop	{r3, pc}

0801c5f0 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c5f0:	f241 4259 	movw	r2, #5209	; 0x1459
 801c5f4:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 801c5f6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c5f8:	f7ea fcce 	bl	8006f98 <lv_obj_get_style_prop>
}
 801c5fc:	bd08      	pop	{r3, pc}

0801c5fe <lv_obj_get_style_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c5fe:	f241 0201 	movw	r2, #4097	; 0x1001
 801c602:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 801c604:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c606:	f7ea fcc7 	bl	8006f98 <lv_obj_get_style_prop>
}
 801c60a:	b200      	sxth	r0, r0
 801c60c:	bd08      	pop	{r3, pc}
	...

0801c610 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c614:	f9b1 3000 	ldrsh.w	r3, [r1]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801c618:	460c      	mov	r4, r1
 801c61a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c61c:	f241 0212 	movw	r2, #4114	; 0x1012
 801c620:	2100      	movs	r1, #0
 801c622:	ed2d 8b02 	vpush	{d8}
 801c626:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c628:	9304      	str	r3, [sp, #16]
 801c62a:	f7ea fcb5 	bl	8006f98 <lv_obj_get_style_prop>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c62e:	8864      	ldrh	r4, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c630:	f241 0210 	movw	r2, #4112	; 0x1010
 801c634:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c636:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c638:	4630      	mov	r0, r6
 801c63a:	f7ea fcad 	bl	8006f98 <lv_obj_get_style_prop>
 801c63e:	1a20      	subs	r0, r4, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801c640:	a90c      	add	r1, sp, #48	; 0x30
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c642:	b203      	sxth	r3, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801c644:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801c646:	9305      	str	r3, [sp, #20]
    lv_obj_get_content_coords(obj, &txt_coords);
 801c648:	f7e8 fa69 	bl	8004b1e <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c64c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801c650:	4630      	mov	r0, r6
 801c652:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801c656:	3301      	adds	r3, #1
    return label->text;
 801c658:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 801c65c:	1a9b      	subs	r3, r3, r2
 801c65e:	b21b      	sxth	r3, r3
 801c660:	ee08 3a90 	vmov	s17, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801c664:	f7ff ffc4 	bl	801c5f0 <lv_obj_get_style_text_font.constprop.0>
 801c668:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801c66a:	4630      	mov	r0, r6
 801c66c:	f7ff ffb0 	bl	801c5d0 <lv_obj_get_style_text_line_space.constprop.0>
 801c670:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801c672:	4630      	mov	r0, r6
 801c674:	f7ff ffb4 	bl	801c5e0 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801c678:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801c67c:	ee08 0a10 	vmov	s16, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801c680:	4630      	mov	r0, r6
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801c682:	9303      	str	r3, [sp, #12]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801c684:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801c688:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801c68a:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801c68e:	bf48      	it	mi
 801c690:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801c694:	f7ff ffb3 	bl	801c5fe <lv_obj_get_style_width.constprop.0>
 801c698:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801c69c:	4298      	cmp	r0, r3
 801c69e:	d105      	bne.n	801c6ac <lv_label_get_letter_on.part.0+0x9c>
 801c6a0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 801c6a4:	075b      	lsls	r3, r3, #29
 801c6a6:	bf58      	it	pl
 801c6a8:	f047 0704 	orrpl.w	r7, r7, #4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801c6ac:	f241 425d 	movw	r2, #5213	; 0x145d
 801c6b0:	2100      	movs	r1, #0
 801c6b2:	4630      	mov	r0, r6
 801c6b4:	f7ea fc70 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801c6b8:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 801c6bc:	d10a      	bne.n	801c6d4 <lv_label_get_letter_on.part.0+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c6be:	4621      	mov	r1, r4
 801c6c0:	f241 426a 	movw	r2, #5226	; 0x146a
 801c6c4:	4630      	mov	r0, r6
 801c6c6:	f7ea fc67 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c6ca:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801c6cc:	2801      	cmp	r0, #1
 801c6ce:	bf0c      	ite	eq
 801c6d0:	2403      	moveq	r4, #3
 801c6d2:	2401      	movne	r4, #1
        y += letter_height + line_space;
 801c6d4:	9b03      	ldr	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801c6d6:	f04f 0900 	mov.w	r9, #0
        y += letter_height + line_space;
 801c6da:	442b      	add	r3, r5
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801c6dc:	464e      	mov	r6, r9
        y += letter_height + line_space;
 801c6de:	9307      	str	r3, [sp, #28]
 801c6e0:	e07f      	b.n	801c7e2 <lv_label_get_letter_on.part.0+0x1d2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801c6e2:	ee18 3a90 	vmov	r3, s17
 801c6e6:	ee18 2a10 	vmov	r2, s16
 801c6ea:	4641      	mov	r1, r8
 801c6ec:	4650      	mov	r0, sl
 801c6ee:	9700      	str	r7, [sp, #0]
 801c6f0:	f7fc fbce 	bl	8018e90 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 801c6f4:	9b03      	ldr	r3, [sp, #12]
 801c6f6:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801c6f8:	1985      	adds	r5, r0, r6
        if(pos.y <= y + letter_height) {
 801c6fa:	444b      	add	r3, r9
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	dc6b      	bgt.n	801c7d8 <lv_label_get_letter_on.part.0+0x1c8>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801c700:	4b4a      	ldr	r3, [pc, #296]	; (801c82c <lv_label_get_letter_on.part.0+0x21c>)
 801c702:	a90b      	add	r1, sp, #44	; 0x2c
 801c704:	4658      	mov	r0, fp
            uint32_t tmp = new_line_start;
 801c706:	950b      	str	r5, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 801c70c:	280a      	cmp	r0, #10
 801c70e:	d003      	beq.n	801c718 <lv_label_get_letter_on.part.0+0x108>
 801c710:	f81b 3005 	ldrb.w	r3, [fp, r5]
 801c714:	b903      	cbnz	r3, 801c718 <lv_label_get_letter_on.part.0+0x108>
 801c716:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 801c718:	2c02      	cmp	r4, #2
 801c71a:	d16b      	bne.n	801c7f4 <lv_label_get_letter_on.part.0+0x1e4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801c71c:	ee18 3a10 	vmov	r3, s16
 801c720:	4642      	mov	r2, r8
 801c722:	1ba9      	subs	r1, r5, r6
 801c724:	4650      	mov	r0, sl
 801c726:	9700      	str	r7, [sp, #0]
 801c728:	f7fc fcfa 	bl	8019120 <lv_txt_get_width>
 801c72c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801c730:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801c734:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801c738:	3401      	adds	r4, #1
 801c73a:	1ae4      	subs	r4, r4, r3
 801c73c:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801c740:	fa03 f384 	sxtah	r3, r3, r4
 801c744:	1044      	asrs	r4, r0, #1
 801c746:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801c74a:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801c74c:	2300      	movs	r3, #0
 801c74e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
 801c752:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 801c754:	b385      	cbz	r5, 801c7b8 <lv_label_get_letter_on.part.0+0x1a8>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c756:	9a04      	ldr	r2, [sp, #16]
    uint32_t i_act = i;
 801c758:	4699      	mov	r9, r3
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c75a:	9906      	ldr	r1, [sp, #24]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801c75c:	f007 0701 	and.w	r7, r7, #1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c760:	1a52      	subs	r2, r2, r1
 801c762:	b212      	sxth	r2, r2
 801c764:	9203      	str	r2, [sp, #12]
        while(i + line_start < new_line_start) {
 801c766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c768:	4433      	add	r3, r6
 801c76a:	429d      	cmp	r5, r3
 801c76c:	d924      	bls.n	801c7b8 <lv_label_get_letter_on.part.0+0x1a8>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 801c76e:	ab09      	add	r3, sp, #36	; 0x24
 801c770:	aa0b      	add	r2, sp, #44	; 0x2c
 801c772:	a90a      	add	r1, sp, #40	; 0x28
 801c774:	4650      	mov	r0, sl
 801c776:	f7fc fcb9 	bl	80190ec <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801c77a:	b147      	cbz	r7, 801c78e <lv_label_get_letter_on.part.0+0x17e>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 801c77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c77e:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801c782:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801c786:	f7fc fb65 	bl	8018e54 <_lv_txt_is_cmd>
 801c78a:	2800      	cmp	r0, #0
 801c78c:	d1eb      	bne.n	801c766 <lv_label_get_letter_on.part.0+0x156>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 801c78e:	4640      	mov	r0, r8
 801c790:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801c794:	f7f9 fcbe 	bl	8016114 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801c798:	9a03      	ldr	r2, [sp, #12]
 801c79a:	fa04 f380 	sxtah	r3, r4, r0
 801c79e:	429a      	cmp	r2, r3
 801c7a0:	db08      	blt.n	801c7b4 <lv_label_get_letter_on.part.0+0x1a4>
 801c7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7a4:	18f2      	adds	r2, r6, r3
 801c7a6:	4295      	cmp	r5, r2
 801c7a8:	d004      	beq.n	801c7b4 <lv_label_get_letter_on.part.0+0x1a4>
 801c7aa:	eb0b 0206 	add.w	r2, fp, r6
 801c7ae:	f812 2009 	ldrb.w	r2, [r2, r9]
 801c7b2:	bba2      	cbnz	r2, 801c81e <lv_label_get_letter_on.part.0+0x20e>
                i = i_act;
 801c7b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801c7b8:	4d1d      	ldr	r5, [pc, #116]	; (801c830 <lv_label_get_letter_on.part.0+0x220>)
 801c7ba:	4650      	mov	r0, sl
 801c7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c7be:	682b      	ldr	r3, [r5, #0]
 801c7c0:	4798      	blx	r3
 801c7c2:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 801c7c4:	682b      	ldr	r3, [r5, #0]
 801c7c6:	4631      	mov	r1, r6
 801c7c8:	4658      	mov	r0, fp
 801c7ca:	4798      	blx	r3
}
 801c7cc:	4420      	add	r0, r4
 801c7ce:	b00f      	add	sp, #60	; 0x3c
 801c7d0:	ecbd 8b02 	vpop	{d8}
 801c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 801c7d8:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801c7da:	462e      	mov	r6, r5
 801c7dc:	4499      	add	r9, r3
 801c7de:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
 801c7e2:	f81b 3006 	ldrb.w	r3, [fp, r6]
 801c7e6:	eb0b 0a06 	add.w	sl, fp, r6
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	f47f af79 	bne.w	801c6e2 <lv_label_get_letter_on.part.0+0xd2>
 801c7f0:	4635      	mov	r5, r6
 801c7f2:	e791      	b.n	801c718 <lv_label_get_letter_on.part.0+0x108>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801c7f4:	2c03      	cmp	r4, #3
 801c7f6:	d110      	bne.n	801c81a <lv_label_get_letter_on.part.0+0x20a>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801c7f8:	ee18 3a10 	vmov	r3, s16
 801c7fc:	4642      	mov	r2, r8
 801c7fe:	1ba9      	subs	r1, r5, r6
 801c800:	4650      	mov	r0, sl
 801c802:	9700      	str	r7, [sp, #0]
 801c804:	f7fc fc8c 	bl	8019120 <lv_txt_get_width>
 801c808:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c80c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801c810:	3301      	adds	r3, #1
 801c812:	1b1b      	subs	r3, r3, r4
        x += lv_area_get_width(&txt_coords) - line_w;
 801c814:	1a18      	subs	r0, r3, r0
 801c816:	b204      	sxth	r4, r0
 801c818:	e798      	b.n	801c74c <lv_label_get_letter_on.part.0+0x13c>
    lv_coord_t x = 0;
 801c81a:	2400      	movs	r4, #0
 801c81c:	e796      	b.n	801c74c <lv_label_get_letter_on.part.0+0x13c>
            x += letter_space;
 801c81e:	ee18 2a10 	vmov	r2, s16
            i_act = i;
 801c822:	4699      	mov	r9, r3
            x += letter_space;
 801c824:	4414      	add	r4, r2
 801c826:	4404      	add	r4, r0
 801c828:	b224      	sxth	r4, r4
            i_act = i;
 801c82a:	e79c      	b.n	801c766 <lv_label_get_letter_on.part.0+0x156>
 801c82c:	20000044 	.word	0x20000044
 801c830:	2000003c 	.word	0x2000003c

0801c834 <lv_label_refr_text>:
    if(label->text == NULL) return;
 801c834:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 801c836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c83a:	4604      	mov	r4, r0
 801c83c:	b09d      	sub	sp, #116	; 0x74
    if(label->text == NULL) return;
 801c83e:	2b00      	cmp	r3, #0
 801c840:	f000 80df 	beq.w	801ca02 <lv_label_refr_text+0x1ce>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801c844:	f04f 33ff 	mov.w	r3, #4294967295
    lv_obj_get_content_coords(obj, &txt_coords);
 801c848:	a909      	add	r1, sp, #36	; 0x24
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801c84a:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 801c84c:	f7e8 f967 	bl	8004b1e <lv_obj_get_content_coords>
 801c850:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 801c854:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801c858:	4620      	mov	r0, r4
 801c85a:	f109 0901 	add.w	r9, r9, #1
 801c85e:	eba9 0903 	sub.w	r9, r9, r3
 801c862:	f7ff fec5 	bl	801c5f0 <lv_obj_get_style_text_font.constprop.0>
 801c866:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801c868:	4620      	mov	r0, r4
 801c86a:	f7ff feb1 	bl	801c5d0 <lv_obj_get_style_text_line_space.constprop.0>
 801c86e:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801c870:	4620      	mov	r0, r4
 801c872:	fa0f f989 	sxth.w	r9, r9
 801c876:	f7ff feb3 	bl	801c5e0 <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801c87a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801c87e:	4680      	mov	r8, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801c880:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801c882:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801c884:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801c888:	bf48      	it	mi
 801c88a:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801c88e:	f7ff feb6 	bl	801c5fe <lv_obj_get_style_width.constprop.0>
 801c892:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801c896:	4298      	cmp	r0, r3
 801c898:	d105      	bne.n	801c8a6 <lv_label_refr_text+0x72>
 801c89a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801c89e:	075b      	lsls	r3, r3, #29
 801c8a0:	bf58      	it	pl
 801c8a2:	f047 0704 	orrpl.w	r7, r7, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 801c8a6:	4643      	mov	r3, r8
 801c8a8:	4632      	mov	r2, r6
 801c8aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801c8ac:	a807      	add	r0, sp, #28
 801c8ae:	9500      	str	r5, [sp, #0]
 801c8b0:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801c8b4:	f7fc fc77 	bl	80191a6 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	f7e8 f980 	bl	8004bbe <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 801c8be:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
 801c8c2:	f009 0907 	and.w	r9, r9, #7
 801c8c6:	f1b9 0f02 	cmp.w	r9, #2
 801c8ca:	f040 80a8 	bne.w	801ca1e <lv_label_refr_text+0x1ea>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 801c8ce:	2266      	movs	r2, #102	; 0x66
 801c8d0:	2100      	movs	r1, #0
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	f7ea fb60 	bl	8006f98 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801c8d8:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801c8da:	b947      	cbnz	r7, 801c8ee <lv_label_refr_text+0xba>
 801c8dc:	2703      	movs	r7, #3
 801c8de:	4620      	mov	r0, r4
 801c8e0:	f7ea fe84 	bl	80075ec <lv_obj_get_disp>
 801c8e4:	f7f9 fe2e 	bl	8016544 <lv_disp_get_dpi>
 801c8e8:	fb90 f0f7 	sdiv	r0, r0, r7
 801c8ec:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 801c8ee:	a80b      	add	r0, sp, #44	; 0x2c
 801c8f0:	2500      	movs	r5, #0
 801c8f2:	f7f9 ffcb 	bl	801688c <lv_anim_init>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 801c8f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c8fa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c8fe:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a->playback_delay = delay;
 801c902:	f44f 7396 	mov.w	r3, #300	; 0x12c
        if(size.x > lv_area_get_width(&txt_coords)) {
 801c906:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801c90a:	9317      	str	r3, [sp, #92]	; 0x5c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 801c90c:	9319      	str	r3, [sp, #100]	; 0x64
 801c90e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var = var;
 801c912:	940b      	str	r4, [sp, #44]	; 0x2c
 801c914:	3301      	adds	r3, #1
 801c916:	1a5b      	subs	r3, r3, r1
 801c918:	b21b      	sxth	r3, r3
 801c91a:	429a      	cmp	r2, r3
 801c91c:	dd76      	ble.n	801ca0c <lv_label_refr_text+0x1d8>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 801c91e:	1a9b      	subs	r3, r3, r2
    a->exec_cb = exec_cb;
 801c920:	498f      	ldr	r1, [pc, #572]	; (801cb60 <lv_label_refr_text+0x32c>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 801c922:	4620      	mov	r0, r4
    a->end_value = end;
 801c924:	9314      	str	r3, [sp, #80]	; 0x50
    a->exec_cb = exec_cb;
 801c926:	910c      	str	r1, [sp, #48]	; 0x30
    a->current_value = start;
 801c928:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 801c92c:	f7fa f83a 	bl	80169a4 <lv_anim_get>
            if(anim_cur) {
 801c930:	2800      	cmp	r0, #0
 801c932:	d069      	beq.n	801ca08 <lv_label_refr_text+0x1d4>
                act_time = anim_cur->act_time;
 801c934:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 801c936:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 801c93a:	f3c0 0040 	ubfx	r0, r0, #1, #1
            if(act_time < a.time) {
 801c93e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c940:	429a      	cmp	r2, r3
 801c942:	dd10      	ble.n	801c966 <lv_label_refr_text+0x132>
                a.act_time = act_time;      /*To keep the old position*/
 801c944:	9316      	str	r3, [sp, #88]	; 0x58
                a.early_apply = 0;
 801c946:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801c94a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c94c:	f36f 0300 	bfc	r3, #0, #1
 801c950:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c952:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
                if(playback_now) {
 801c956:	b130      	cbz	r0, 801c966 <lv_label_refr_text+0x132>
                    a.playback_now = 1;
 801c958:	b2db      	uxtb	r3, r3
                    a.start_value = a.end_value;
 801c95a:	9112      	str	r1, [sp, #72]	; 0x48
                    a.end_value   = tmp;
 801c95c:	9214      	str	r2, [sp, #80]	; 0x50
                    a.playback_now = 1;
 801c95e:	f043 0302 	orr.w	r3, r3, #2
 801c962:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801c966:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c968:	4638      	mov	r0, r7
 801c96a:	9912      	ldr	r1, [sp, #72]	; 0x48
            hor_anim = true;
 801c96c:	2501      	movs	r5, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801c96e:	f7fa f82f 	bl	80169d0 <lv_anim_speed_to_time>
    a->time = duration;
 801c972:	9015      	str	r0, [sp, #84]	; 0x54
    a->playback_time = time;
 801c974:	9018      	str	r0, [sp, #96]	; 0x60
            lv_anim_start(&a);
 801c976:	a80b      	add	r0, sp, #44	; 0x2c
 801c978:	f7f9 ffce 	bl	8016918 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801c97c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801c980:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c984:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801c986:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801c98a:	1a5b      	subs	r3, r3, r1
 801c98c:	b21b      	sxth	r3, r3
 801c98e:	429a      	cmp	r2, r3
 801c990:	f340 80c7 	ble.w	801cb22 <lv_label_refr_text+0x2ee>
 801c994:	2d00      	cmp	r5, #0
 801c996:	f040 80c4 	bne.w	801cb22 <lv_label_refr_text+0x2ee>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801c99a:	1a9b      	subs	r3, r3, r2
 801c99c:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 801c9a0:	4970      	ldr	r1, [pc, #448]	; (801cb64 <lv_label_refr_text+0x330>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801c9a2:	4620      	mov	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801c9a4:	1a9b      	subs	r3, r3, r2
 801c9a6:	910c      	str	r1, [sp, #48]	; 0x30
    a->end_value = end;
 801c9a8:	9314      	str	r3, [sp, #80]	; 0x50
    a->current_value = start;
 801c9aa:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801c9ae:	f7f9 fff9 	bl	80169a4 <lv_anim_get>
            if(anim_cur) {
 801c9b2:	2800      	cmp	r0, #0
 801c9b4:	d031      	beq.n	801ca1a <lv_label_refr_text+0x1e6>
                playback_now = anim_cur->playback_now;
 801c9b6:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
                act_time = anim_cur->act_time;
 801c9ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 801c9bc:	f3c5 0540 	ubfx	r5, r5, #1, #1
            if(act_time < a.time) {
 801c9c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c9c2:	429a      	cmp	r2, r3
 801c9c4:	dd10      	ble.n	801c9e8 <lv_label_refr_text+0x1b4>
                a.act_time = act_time;      /*To keep the old position*/
 801c9c6:	9316      	str	r3, [sp, #88]	; 0x58
                a.early_apply = 0;
 801c9c8:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801c9cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c9ce:	f36f 0300 	bfc	r3, #0, #1
 801c9d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c9d4:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
                if(playback_now) {
 801c9d8:	b135      	cbz	r5, 801c9e8 <lv_label_refr_text+0x1b4>
                    a.playback_now = 1;
 801c9da:	b2db      	uxtb	r3, r3
                    a.start_value = a.end_value;
 801c9dc:	9112      	str	r1, [sp, #72]	; 0x48
                    a.end_value   = tmp;
 801c9de:	9214      	str	r2, [sp, #80]	; 0x50
                    a.playback_now = 1;
 801c9e0:	f043 0302 	orr.w	r3, r3, #2
 801c9e4:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801c9e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9ea:	4638      	mov	r0, r7
 801c9ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c9ee:	f7f9 ffef 	bl	80169d0 <lv_anim_speed_to_time>
    a->time = duration;
 801c9f2:	9015      	str	r0, [sp, #84]	; 0x54
    a->playback_time = time;
 801c9f4:	9018      	str	r0, [sp, #96]	; 0x60
            lv_anim_start(&a);
 801c9f6:	a80b      	add	r0, sp, #44	; 0x2c
 801c9f8:	f7f9 ff8e 	bl	8016918 <lv_anim_start>
    lv_obj_invalidate(obj);
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f7e8 f9a3 	bl	8004d48 <lv_obj_invalidate>
}
 801ca02:	b01d      	add	sp, #116	; 0x74
 801ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int32_t act_time = 0;
 801ca08:	4603      	mov	r3, r0
 801ca0a:	e798      	b.n	801c93e <lv_label_refr_text+0x10a>
            lv_anim_del(obj, set_ofs_x_anim);
 801ca0c:	4954      	ldr	r1, [pc, #336]	; (801cb60 <lv_label_refr_text+0x32c>)
 801ca0e:	4620      	mov	r0, r4
 801ca10:	f7f9 ff56 	bl	80168c0 <lv_anim_del>
            label->offset.x = 0;
 801ca14:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801ca18:	e7b0      	b.n	801c97c <lv_label_refr_text+0x148>
            int32_t act_time = 0;
 801ca1a:	462b      	mov	r3, r5
 801ca1c:	e7d0      	b.n	801c9c0 <lv_label_refr_text+0x18c>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801ca1e:	f1b9 0f03 	cmp.w	r9, #3
 801ca22:	f040 8086 	bne.w	801cb32 <lv_label_refr_text+0x2fe>
 801ca26:	2266      	movs	r2, #102	; 0x66
 801ca28:	2100      	movs	r1, #0
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	f7ea fab4 	bl	8006f98 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801ca30:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801ca32:	b93f      	cbnz	r7, 801ca44 <lv_label_refr_text+0x210>
 801ca34:	4620      	mov	r0, r4
 801ca36:	f7ea fdd9 	bl	80075ec <lv_obj_get_disp>
 801ca3a:	f7f9 fd83 	bl	8016544 <lv_disp_get_dpi>
 801ca3e:	fb90 f0f9 	sdiv	r0, r0, r9
 801ca42:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 801ca44:	a80b      	add	r0, sp, #44	; 0x2c
 801ca46:	f7f9 ff21 	bl	801688c <lv_anim_init>
    a->repeat_cnt = cnt;
 801ca4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ca4e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ca52:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 801ca56:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var = var;
 801ca5a:	940b      	str	r4, [sp, #44]	; 0x2c
 801ca5c:	3301      	adds	r3, #1
 801ca5e:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801ca60:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ca64:	b21b      	sxth	r3, r3
 801ca66:	429a      	cmp	r2, r3
 801ca68:	dd53      	ble.n	801cb12 <lv_label_refr_text+0x2de>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 801ca6a:	2220      	movs	r2, #32
 801ca6c:	4630      	mov	r0, r6
    a->exec_cb = exec_cb;
 801ca6e:	4d3c      	ldr	r5, [pc, #240]	; (801cb60 <lv_label_refr_text+0x32c>)
 801ca70:	4611      	mov	r1, r2
 801ca72:	f7f9 fb4f 	bl	8016114 <lv_font_get_glyph_width>
 801ca76:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ca7a:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    a->start_value = start;
 801ca7e:	2100      	movs	r1, #0
    a->exec_cb = exec_cb;
 801ca80:	950c      	str	r5, [sp, #48]	; 0x30
 801ca82:	1a82      	subs	r2, r0, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801ca84:	4638      	mov	r0, r7
    a->current_value = start;
 801ca86:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
    a->end_value = end;
 801ca8a:	9214      	str	r2, [sp, #80]	; 0x50
 801ca8c:	f7f9 ffa0 	bl	80169d0 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 801ca90:	4629      	mov	r1, r5
    a->time = duration;
 801ca92:	9015      	str	r0, [sp, #84]	; 0x54
 801ca94:	4620      	mov	r0, r4
 801ca96:	f7f9 ff85 	bl	80169a4 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801ca9a:	b100      	cbz	r0, 801ca9e <lv_label_refr_text+0x26a>
 801ca9c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801ca9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
            hor_anim = true;
 801caa0:	2501      	movs	r5, #1
            if(act_time < a.time) {
 801caa2:	4283      	cmp	r3, r0
                a.early_apply = 0;
 801caa4:	bfc4      	itt	gt
 801caa6:	f89d 306a 	ldrbgt.w	r3, [sp, #106]	; 0x6a
                a.act_time = act_time;      /*To keep the old position*/
 801caaa:	9016      	strgt	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 801caac:	a80b      	add	r0, sp, #44	; 0x2c
                a.early_apply = 0;
 801caae:	bfc4      	itt	gt
 801cab0:	f36f 0300 	bfcgt	r3, #0, #1
 801cab4:	f88d 306a 	strbgt.w	r3, [sp, #106]	; 0x6a
            lv_anim_start(&a);
 801cab8:	f7f9 ff2e 	bl	8016918 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cabc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cac0:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801cac4:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801cac6:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801caca:	1a5b      	subs	r3, r3, r1
 801cacc:	b21b      	sxth	r3, r3
 801cace:	429a      	cmp	r2, r3
 801cad0:	dd27      	ble.n	801cb22 <lv_label_refr_text+0x2ee>
 801cad2:	bb35      	cbnz	r5, 801cb22 <lv_label_refr_text+0x2ee>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801cad4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 801cad8:	4252      	negs	r2, r2
    a->exec_cb = exec_cb;
 801cada:	4e22      	ldr	r6, [pc, #136]	; (801cb64 <lv_label_refr_text+0x330>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cadc:	4629      	mov	r1, r5
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801cade:	1ad2      	subs	r2, r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801cae0:	4638      	mov	r0, r7
 801cae2:	960c      	str	r6, [sp, #48]	; 0x30
    a->end_value = end;
 801cae4:	9214      	str	r2, [sp, #80]	; 0x50
    a->current_value = start;
 801cae6:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 801caea:	f7f9 ff71 	bl	80169d0 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801caee:	4631      	mov	r1, r6
    a->time = duration;
 801caf0:	9015      	str	r0, [sp, #84]	; 0x54
 801caf2:	4620      	mov	r0, r4
 801caf4:	f7f9 ff56 	bl	80169a4 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801caf8:	b100      	cbz	r0, 801cafc <lv_label_refr_text+0x2c8>
 801cafa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801cafc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cafe:	42ab      	cmp	r3, r5
                a.early_apply = 0;
 801cb00:	bfc1      	itttt	gt
 801cb02:	f89d 306a 	ldrbgt.w	r3, [sp, #106]	; 0x6a
                a.act_time = act_time;      /*To keep the old position*/
 801cb06:	9516      	strgt	r5, [sp, #88]	; 0x58
                a.early_apply = 0;
 801cb08:	f36f 0300 	bfcgt	r3, #0, #1
 801cb0c:	f88d 306a 	strbgt.w	r3, [sp, #106]	; 0x6a
 801cb10:	e771      	b.n	801c9f6 <lv_label_refr_text+0x1c2>
            label->offset.x = 0;
 801cb12:	2500      	movs	r5, #0
            lv_anim_del(obj, set_ofs_x_anim);
 801cb14:	4912      	ldr	r1, [pc, #72]	; (801cb60 <lv_label_refr_text+0x32c>)
 801cb16:	4620      	mov	r0, r4
 801cb18:	f7f9 fed2 	bl	80168c0 <lv_anim_del>
            label->offset.x = 0;
 801cb1c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801cb20:	e7cc      	b.n	801cabc <lv_label_refr_text+0x288>
            lv_anim_del(obj, set_ofs_y_anim);
 801cb22:	4910      	ldr	r1, [pc, #64]	; (801cb64 <lv_label_refr_text+0x330>)
 801cb24:	4620      	mov	r0, r4
 801cb26:	f7f9 fecb 	bl	80168c0 <lv_anim_del>
            label->offset.y = 0;
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801cb30:	e764      	b.n	801c9fc <lv_label_refr_text+0x1c8>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 801cb32:	f1b9 0f01 	cmp.w	r9, #1
 801cb36:	f47f af61 	bne.w	801c9fc <lv_label_refr_text+0x1c8>
        lv_obj_refresh_self_size(obj);
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	f7e8 f83f 	bl	8004bbe <lv_obj_refresh_self_size>
 801cb40:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801cb44:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 801cb48:	3301      	adds	r3, #1
 801cb4a:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 801cb4c:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801cb50:	b21b      	sxth	r3, r3
 801cb52:	429a      	cmp	r2, r3
 801cb54:	dc08      	bgt.n	801cb68 <lv_label_refr_text+0x334>
            label->dot_end = LV_LABEL_DOT_END_INV;
 801cb56:	f04f 33ff 	mov.w	r3, #4294967295
 801cb5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cb5c:	e74e      	b.n	801c9fc <lv_label_refr_text+0x1c8>
 801cb5e:	bf00      	nop
 801cb60:	0801c565 	.word	0x0801c565
 801cb64:	0801c55d 	.word	0x0801c55d
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 801cb68:	4b4f      	ldr	r3, [pc, #316]	; (801cca8 <lv_label_refr_text+0x474>)
 801cb6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	4798      	blx	r3
 801cb70:	2803      	cmp	r0, #3
 801cb72:	d9f0      	bls.n	801cb56 <lv_label_refr_text+0x322>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801cb74:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 801cb78:	222e      	movs	r2, #46	; 0x2e
 801cb7a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cb7e:	4630      	mov	r0, r6
 801cb80:	3701      	adds	r7, #1
 801cb82:	4611      	mov	r1, r2
 801cb84:	1aff      	subs	r7, r7, r3
 801cb86:	f7f9 fac5 	bl	8016114 <lv_font_get_glyph_width>
 801cb8a:	4440      	add	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cb8c:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801cb90:	b2bf      	uxth	r7, r7
                _lv_txt_encoded_prev(label->text, &byte_id);
 801cb92:	f8df 811c 	ldr.w	r8, [pc, #284]	; 801ccb0 <lv_label_refr_text+0x47c>
            p.x = lv_area_get_width(&txt_coords) -
 801cb96:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cb9a:	3101      	adds	r1, #1
 801cb9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801cba0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cba4:	4407      	add	r7, r0
 801cba6:	1ac9      	subs	r1, r1, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801cba8:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801cbac:	b28a      	uxth	r2, r1
            p.x = lv_area_get_width(&txt_coords) -
 801cbae:	f8ad 7020 	strh.w	r7, [sp, #32]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801cbb2:	1946      	adds	r6, r0, r5
            y_overed = p.y %
 801cbb4:	b209      	sxth	r1, r1
 801cbb6:	fb91 f3f6 	sdiv	r3, r1, r6
 801cbba:	fb06 1113 	mls	r1, r6, r3, r1
            if(y_overed >= lv_font_get_line_height(font)) {
 801cbbe:	b20b      	sxth	r3, r1
 801cbc0:	4298      	cmp	r0, r3
                p.y += lv_font_get_line_height(font);
 801cbc2:	bfd4      	ite	le
 801cbc4:	1813      	addle	r3, r2, r0
                p.y -= line_space;
 801cbc6:	1b53      	subgt	r3, r2, r5
 801cbc8:	4620      	mov	r0, r4
 801cbca:	1a5b      	subs	r3, r3, r1
 801cbcc:	a908      	add	r1, sp, #32
 801cbce:	b21b      	sxth	r3, r3
 801cbd0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    LV_ASSERT_NULL(pos_in);
 801cbd4:	f7ff fd1c 	bl	801c610 <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 801cbd8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801cbda:	4605      	mov	r5, r0
 801cbdc:	4638      	mov	r0, r7
 801cbde:	f7e3 fb21 	bl	8000224 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 801cbe2:	4b32      	ldr	r3, [pc, #200]	; (801ccac <lv_label_refr_text+0x478>)
            size_t txt_len = strlen(label->text);
 801cbe4:	4606      	mov	r6, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 801cbe6:	4629      	mov	r1, r5
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	4638      	mov	r0, r7
 801cbec:	4798      	blx	r3
 801cbee:	900b      	str	r0, [sp, #44]	; 0x2c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 801cbf0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cbf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cbf4:	f107 0b03 	add.w	fp, r7, #3
 801cbf8:	455e      	cmp	r6, fp
 801cbfa:	d343      	bcc.n	801cc84 <lv_label_refr_text+0x450>
 801cbfc:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
 801cc00:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cc02:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801ccb4 <lv_label_refr_text+0x480>
                _lv_txt_encoded_next(label->text, &byte_id);
 801cc06:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801ccb8 <lv_label_refr_text+0x484>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cc0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cc0e:	f8d9 3000 	ldr.w	r3, [r9]
 801cc12:	4410      	add	r0, r2
 801cc14:	4798      	blx	r3
                _lv_txt_encoded_next(label->text, &byte_id);
 801cc16:	f8da 3000 	ldr.w	r3, [sl]
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cc1a:	4406      	add	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 801cc1c:	a90b      	add	r1, sp, #44	; 0x2c
 801cc1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cc20:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801cc22:	f1b8 0801 	subs.w	r8, r8, #1
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801cc26:	b2f6      	uxtb	r6, r6
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801cc28:	d1ef      	bne.n	801cc0a <lv_label_refr_text+0x3d6>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 801cc2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 801cc2c:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 801cc2e:	4439      	add	r1, r7
 801cc30:	9105      	str	r1, [sp, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 801cc32:	f7ff fc71 	bl	801c518 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801cc36:	2e04      	cmp	r6, #4
 801cc38:	9905      	ldr	r1, [sp, #20]
 801cc3a:	d929      	bls.n	801cc90 <lv_label_refr_text+0x45c>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801cc3c:	1c70      	adds	r0, r6, #1
 801cc3e:	f7fa fd23 	bl	8017688 <lv_mem_alloc>
 801cc42:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 801cc44:	2800      	cmp	r0, #0
 801cc46:	f43f aed9 	beq.w	801c9fc <lv_label_refr_text+0x1c8>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 801cc4a:	4632      	mov	r2, r6
 801cc4c:	9905      	ldr	r1, [sp, #20]
 801cc4e:	f7fa fbd3 	bl	80173f8 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 801cc52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cc54:	f803 8006 	strb.w	r8, [r3, r6]
        label->dot_tmp_alloc    = true;
 801cc58:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801cc5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc60:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 801cc64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc66:	222e      	movs	r2, #46	; 0x2e
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801cc68:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 801cc6a:	55da      	strb	r2, [r3, r7]
 801cc6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc6e:	443b      	add	r3, r7
 801cc70:	705a      	strb	r2, [r3, #1]
 801cc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc74:	441f      	add	r7, r3
 801cc76:	70ba      	strb	r2, [r7, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801cc78:	2200      	movs	r2, #0
 801cc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc7c:	f803 200b 	strb.w	r2, [r3, fp]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801cc80:	62e5      	str	r5, [r4, #44]	; 0x2c
 801cc82:	e6bb      	b.n	801c9fc <lv_label_refr_text+0x1c8>
                _lv_txt_encoded_prev(label->text, &byte_id);
 801cc84:	f8d8 3000 	ldr.w	r3, [r8]
 801cc88:	a90b      	add	r1, sp, #44	; 0x2c
                letter_id--;
 801cc8a:	3d01      	subs	r5, #1
                _lv_txt_encoded_prev(label->text, &byte_id);
 801cc8c:	4798      	blx	r3
                letter_id--;
 801cc8e:	e7af      	b.n	801cbf0 <lv_label_refr_text+0x3bc>
        label->dot_tmp_alloc = false;
 801cc90:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 801cc94:	4632      	mov	r2, r6
 801cc96:	f104 0028 	add.w	r0, r4, #40	; 0x28
        label->dot_tmp_alloc = false;
 801cc9a:	f368 1386 	bfi	r3, r8, #6, #1
 801cc9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 801cca2:	f7fa fba9 	bl	80173f8 <lv_memcpy>
 801cca6:	e7dd      	b.n	801cc64 <lv_label_refr_text+0x430>
 801cca8:	2000004c 	.word	0x2000004c
 801ccac:	20000038 	.word	0x20000038
 801ccb0:	20000044 	.word	0x20000044
 801ccb4:	20000048 	.word	0x20000048
 801ccb8:	20000040 	.word	0x20000040

0801ccbc <lv_label_event>:
{
 801ccbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801ccc0:	48be      	ldr	r0, [pc, #760]	; (801cfbc <lv_label_event+0x300>)
{
 801ccc2:	b095      	sub	sp, #84	; 0x54
 801ccc4:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801ccc6:	f7e4 fea0 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801ccca:	2801      	cmp	r0, #1
 801cccc:	d10e      	bne.n	801ccec <lv_label_event+0x30>
    lv_event_code_t code = lv_event_get_code(e);
 801ccce:	4630      	mov	r0, r6
 801ccd0:	f7e4 ff34 	bl	8001b3c <lv_event_get_code>
 801ccd4:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ccd6:	4630      	mov	r0, r6
 801ccd8:	f7e4 ff2e 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801ccdc:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801ccde:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801cce0:	d107      	bne.n	801ccf2 <lv_label_event+0x36>
        lv_label_revert_dots(obj);
 801cce2:	f7ff fc43 	bl	801c56c <lv_label_revert_dots>
        lv_label_refr_text(obj);
 801cce6:	4620      	mov	r0, r4
 801cce8:	f7ff fda4 	bl	801c834 <lv_label_refr_text>
}
 801ccec:	b015      	add	sp, #84	; 0x54
 801ccee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801ccf2:	2d23      	cmp	r5, #35	; 0x23
 801ccf4:	d0f5      	beq.n	801cce2 <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801ccf6:	2d26      	cmp	r5, #38	; 0x26
 801ccf8:	d144      	bne.n	801cd84 <lv_label_event+0xc8>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ccfa:	f7ff fc79 	bl	801c5f0 <lv_obj_get_style_text_font.constprop.0>
 801ccfe:	4605      	mov	r5, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801cd00:	4620      	mov	r0, r4
 801cd02:	f7ff fc6d 	bl	801c5e0 <lv_obj_get_style_text_letter_space.constprop.0>
 801cd06:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801cd08:	4620      	mov	r0, r4
 801cd0a:	f7ff fc61 	bl	801c5d0 <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801cd0e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801cd12:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801cd14:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801cd18:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 801cd1a:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801cd1c:	bf48      	it	mi
 801cd1e:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 801cd22:	f7e7 fec8 	bl	8004ab6 <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 801cd26:	4620      	mov	r0, r4
 801cd28:	f7ff fc69 	bl	801c5fe <lv_obj_get_style_width.constprop.0>
 801cd2c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801cd30:	4298      	cmp	r0, r3
 801cd32:	d103      	bne.n	801cd3c <lv_label_event+0x80>
 801cd34:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801cd38:	0759      	lsls	r1, r3, #29
 801cd3a:	d520      	bpl.n	801cd7e <lv_label_event+0xc2>
        else w = lv_obj_get_content_width(obj);
 801cd3c:	4620      	mov	r0, r4
 801cd3e:	f7e7 feba 	bl	8004ab6 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 801cd42:	463b      	mov	r3, r7
 801cd44:	462a      	mov	r2, r5
 801cd46:	f8cd 8000 	str.w	r8, [sp]
 801cd4a:	e9cd 0901 	strd	r0, r9, [sp, #4]
 801cd4e:	a80c      	add	r0, sp, #48	; 0x30
 801cd50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cd52:	f7fc fa28 	bl	80191a6 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 801cd56:	4630      	mov	r0, r6
 801cd58:	f7e4 fef2 	bl	8001b40 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 801cd5c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cd60:	f9b0 2000 	ldrsh.w	r2, [r0]
 801cd64:	4293      	cmp	r3, r2
 801cd66:	bfb8      	it	lt
 801cd68:	4613      	movlt	r3, r2
        self_size->y = LV_MAX(self_size->y, size.y);
 801cd6a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        self_size->x = LV_MAX(self_size->x, size.x);
 801cd6e:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 801cd70:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cd74:	4293      	cmp	r3, r2
 801cd76:	bfb8      	it	lt
 801cd78:	4613      	movlt	r3, r2
 801cd7a:	8043      	strh	r3, [r0, #2]
 801cd7c:	e7b6      	b.n	801ccec <lv_label_event+0x30>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 801cd7e:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801cd82:	e7de      	b.n	801cd42 <lv_label_event+0x86>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801cd84:	2d15      	cmp	r5, #21
 801cd86:	d1b1      	bne.n	801ccec <lv_label_event+0x30>
    lv_obj_t * obj = lv_event_get_target(e);
 801cd88:	4630      	mov	r0, r6
 801cd8a:	f7e4 fed5 	bl	8001b38 <lv_event_get_target>
 801cd8e:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801cd90:	4630      	mov	r0, r6
 801cd92:	f7e4 fed5 	bl	8001b40 <lv_event_get_param>
    lv_obj_get_content_coords(obj, &txt_coords);
 801cd96:	a908      	add	r1, sp, #32
    const lv_area_t * clip_area = lv_event_get_param(e);
 801cd98:	4680      	mov	r8, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801cd9a:	4620      	mov	r0, r4
 801cd9c:	f7e7 febf 	bl	8004b1e <lv_obj_get_content_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801cda0:	f241 425d 	movw	r2, #5213	; 0x145d
 801cda4:	2100      	movs	r1, #0
 801cda6:	4620      	mov	r0, r4
 801cda8:	f7ea f8f6 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801cdac:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 801cdb0:	d10a      	bne.n	801cdc8 <lv_label_event+0x10c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801cdb2:	4629      	mov	r1, r5
 801cdb4:	f241 426a 	movw	r2, #5226	; 0x146a
 801cdb8:	4620      	mov	r0, r4
 801cdba:	f7ea f8ed 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801cdbe:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801cdc0:	2801      	cmp	r0, #1
 801cdc2:	bf0c      	ite	eq
 801cdc4:	2503      	moveq	r5, #3
 801cdc6:	2501      	movne	r5, #1
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801cdc8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801cdcc:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801cdce:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801cdd0:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801cdd4:	bf48      	it	mi
 801cdd6:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801cdda:	f7ff fc10 	bl	801c5fe <lv_obj_get_style_width.constprop.0>
 801cdde:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801cde2:	4298      	cmp	r0, r3
 801cde4:	d105      	bne.n	801cdf2 <lv_label_event+0x136>
 801cde6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801cdea:	075b      	lsls	r3, r3, #29
 801cdec:	bf58      	it	pl
 801cdee:	f047 0704 	orrpl.w	r7, r7, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 801cdf2:	a80c      	add	r0, sp, #48	; 0x30
 801cdf4:	f7ed f9ac 	bl	800a150 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 801cdf8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801cdfc:	aa0c      	add	r2, sp, #48	; 0x30
 801cdfe:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 801ce00:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801ce04:	4620      	mov	r0, r4
    label_draw_dsc.ofs_y = label->offset.y;
 801ce06:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    label_draw_dsc.flag = flag;
 801ce0a:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
    label_draw_dsc.ofs_y = label->offset.y;
 801ce0e:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801ce12:	f7e7 faf9 	bl	8004408 <lv_obj_init_draw_label_dsc>
    return label->sel_start;
 801ce16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801ce18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return label->sel_end;
 801ce1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801ce1e:	4299      	cmp	r1, r3
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 801ce20:	910d      	str	r1, [sp, #52]	; 0x34
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 801ce22:	920e      	str	r2, [sp, #56]	; 0x38
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801ce24:	d012      	beq.n	801ce4c <lv_label_event+0x190>
 801ce26:	429a      	cmp	r2, r3
 801ce28:	d010      	beq.n	801ce4c <lv_label_event+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 801ce2a:	f244 4257 	movw	r2, #17495	; 0x4457
 801ce2e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7ea f8b0 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 801ce38:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 801ce3a:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801ce3e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801ce42:	4620      	mov	r0, r4
 801ce44:	f7ea f8a8 	bl	8006f98 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 801ce48:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 801ce4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801ce50:	f003 0306 	and.w	r3, r3, #6
 801ce54:	2b02      	cmp	r3, #2
 801ce56:	d122      	bne.n	801ce9e <lv_label_event+0x1e2>
 801ce58:	3d02      	subs	r5, #2
 801ce5a:	2d01      	cmp	r5, #1
 801ce5c:	d81f      	bhi.n	801ce9e <lv_label_event+0x1e2>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801ce5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801ce62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce64:	9702      	str	r7, [sp, #8]
 801ce66:	a80a      	add	r0, sp, #40	; 0x28
 801ce68:	9301      	str	r3, [sp, #4]
 801ce6a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ce6e:	9300      	str	r3, [sp, #0]
 801ce70:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801ce74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ce76:	f7fc f996 	bl	80191a6 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ce7a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801ce7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ce82:	3301      	adds	r3, #1
 801ce84:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801ce86:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ce8a:	b21b      	sxth	r3, r3
 801ce8c:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 801ce8e:	bfc1      	itttt	gt
 801ce90:	f89d 304d 	ldrbgt.w	r3, [sp, #77]	; 0x4d
 801ce94:	2201      	movgt	r2, #1
 801ce96:	f362 0301 	bfigt	r3, r2, #0, #2
 801ce9a:	f88d 304d 	strbgt.w	r3, [sp, #77]	; 0x4d
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 801ce9e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801cea2:	f003 0307 	and.w	r3, r3, #7
 801cea6:	2b03      	cmp	r3, #3
 801cea8:	f000 8086 	beq.w	801cfb8 <lv_label_event+0x2fc>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ceac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ceb0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ceb4:	3301      	adds	r3, #1
 801ceb6:	1a9b      	subs	r3, r3, r2
 801ceb8:	b21b      	sxth	r3, r3
 801ceba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cebe:	db7b      	blt.n	801cfb8 <lv_label_event+0x2fc>
    lv_draw_label_hint_t * hint = &label->hint;
 801cec0:	f104 0630 	add.w	r6, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, clip_area, clip_area);
 801cec4:	4642      	mov	r2, r8
 801cec6:	4641      	mov	r1, r8
 801cec8:	a80a      	add	r0, sp, #40	; 0x28
 801ceca:	f7f9 fe0c 	bl	8016ae6 <_lv_area_intersect>
    if(!is_common) return;
 801cece:	2800      	cmp	r0, #0
 801ced0:	f43f af0c 	beq.w	801ccec <lv_label_event+0x30>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 801ced4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801ced8:	f011 0107 	ands.w	r1, r1, #7
 801cedc:	d10c      	bne.n	801cef8 <lv_label_event+0x23c>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 801cede:	4620      	mov	r0, r4
 801cee0:	9105      	str	r1, [sp, #20]
 801cee2:	f7e8 fe2f 	bl	8005b44 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 801cee6:	4240      	negs	r0, r0
 801cee8:	9905      	ldr	r1, [sp, #20]
 801ceea:	b202      	sxth	r2, r0
 801ceec:	a808      	add	r0, sp, #32
 801ceee:	f7f9 fde9 	bl	8016ac4 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 801cef2:	8b63      	ldrh	r3, [r4, #26]
 801cef4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cef8:	9600      	str	r6, [sp, #0]
 801cefa:	aa0c      	add	r2, sp, #48	; 0x30
 801cefc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cefe:	a90a      	add	r1, sp, #40	; 0x28
 801cf00:	a808      	add	r0, sp, #32
 801cf02:	f7ed fafd 	bl	800a500 <lv_draw_label>
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801cf06:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801cf0a:	f003 0307 	and.w	r3, r3, #7
 801cf0e:	2b03      	cmp	r3, #3
 801cf10:	f47f aeec 	bne.w	801ccec <lv_label_event+0x30>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801cf14:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801cf18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf1a:	9702      	str	r7, [sp, #8]
 801cf1c:	a807      	add	r0, sp, #28
 801cf1e:	9301      	str	r3, [sp, #4]
 801cf20:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801cf24:	9300      	str	r3, [sp, #0]
 801cf26:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801cf2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cf2c:	f7fc f93b 	bl	80191a6 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801cf30:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801cf34:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801cf38:	3201      	adds	r2, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 801cf3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cf3e:	1a52      	subs	r2, r2, r1
 801cf40:	b212      	sxth	r2, r2
 801cf42:	4293      	cmp	r3, r2
 801cf44:	dd18      	ble.n	801cf78 <lv_label_event+0x2bc>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801cf46:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cf4a:	2220      	movs	r2, #32
 801cf4c:	980c      	ldr	r0, [sp, #48]	; 0x30
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801cf4e:	442b      	add	r3, r5
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cf50:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801cf52:	b29d      	uxth	r5, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801cf54:	f7f9 f8de 	bl	8016114 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_y = label->offset.y;
 801cf58:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801cf5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cf60:	9600      	str	r6, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y;
 801cf62:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cf66:	aa0c      	add	r2, sp, #48	; 0x30
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801cf68:	4405      	add	r5, r0
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cf6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf6c:	a90a      	add	r1, sp, #40	; 0x28
 801cf6e:	a808      	add	r0, sp, #32
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801cf70:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cf74:	f7ed fac4 	bl	800a500 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801cf78:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801cf7c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801cf80:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords)) {
 801cf82:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801cf86:	1a5b      	subs	r3, r3, r1
 801cf88:	b21b      	sxth	r3, r3
 801cf8a:	429a      	cmp	r2, r3
 801cf8c:	f77f aeae 	ble.w	801ccec <lv_label_event+0x30>
            label_draw_dsc.ofs_x = label->offset.x;
 801cf90:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cf94:	a90a      	add	r1, sp, #40	; 0x28
 801cf96:	a808      	add	r0, sp, #32
            label_draw_dsc.ofs_x = label->offset.x;
 801cf98:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801cf9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf9e:	891b      	ldrh	r3, [r3, #8]
 801cfa0:	441a      	add	r2, r3
 801cfa2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cfa6:	9600      	str	r6, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801cfa8:	441a      	add	r2, r3
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cfaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801cfac:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801cfb0:	aa0c      	add	r2, sp, #48	; 0x30
 801cfb2:	f7ed faa5 	bl	800a500 <lv_draw_label>
 801cfb6:	e699      	b.n	801ccec <lv_label_event+0x30>
        hint = NULL;
 801cfb8:	2600      	movs	r6, #0
 801cfba:	e783      	b.n	801cec4 <lv_label_event+0x208>
 801cfbc:	0802a024 	.word	0x0802a024

0801cfc0 <lv_label_create>:
{
 801cfc0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801cfc2:	4804      	ldr	r0, [pc, #16]	; (801cfd4 <lv_label_create+0x14>)
{
 801cfc4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801cfc6:	f7e7 f815 	bl	8003ff4 <lv_obj_class_create_obj>
 801cfca:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801cfcc:	f7e7 f89f 	bl	800410e <lv_obj_class_init_obj>
}
 801cfd0:	4620      	mov	r0, r4
 801cfd2:	bd10      	pop	{r4, pc}
 801cfd4:	0802a024 	.word	0x0802a024

0801cfd8 <lv_label_set_text>:
{
 801cfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfda:	4604      	mov	r4, r0
 801cfdc:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 801cfde:	f7e7 feb3 	bl	8004d48 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 801cfe2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cfe4:	2d00      	cmp	r5, #0
 801cfe6:	bf08      	it	eq
 801cfe8:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 801cfea:	42ae      	cmp	r6, r5
 801cfec:	d112      	bne.n	801d014 <lv_label_set_text+0x3c>
 801cfee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801cff2:	071b      	lsls	r3, r3, #28
 801cff4:	d418      	bmi.n	801d028 <lv_label_set_text+0x50>
 801cff6:	4630      	mov	r0, r6
 801cff8:	f7e3 f914 	bl	8000224 <strlen>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801cffc:	1c41      	adds	r1, r0, #1
 801cffe:	4630      	mov	r0, r6
 801d000:	f7fa fb58 	bl	80176b4 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 801d004:	b128      	cbz	r0, 801d012 <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801d006:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 801d008:	4620      	mov	r0, r4
}
 801d00a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 801d00e:	f7ff bc11 	b.w	801c834 <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 801d012:	e7fe      	b.n	801d012 <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 801d014:	b146      	cbz	r6, 801d028 <lv_label_set_text+0x50>
 801d016:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d01a:	f013 0708 	ands.w	r7, r3, #8
 801d01e:	d103      	bne.n	801d028 <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 801d020:	4630      	mov	r0, r6
 801d022:	f7fa f9af 	bl	8017384 <lv_mem_free>
            label->text = NULL;
 801d026:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 801d028:	4628      	mov	r0, r5
 801d02a:	f7e3 f8fb 	bl	8000224 <strlen>
        label->text = lv_mem_alloc(len);
 801d02e:	3001      	adds	r0, #1
 801d030:	f7fa fb2a 	bl	8017688 <lv_mem_alloc>
 801d034:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 801d036:	b900      	cbnz	r0, 801d03a <lv_label_set_text+0x62>
 801d038:	e7fe      	b.n	801d038 <lv_label_set_text+0x60>
        strcpy(label->text, text);
 801d03a:	4629      	mov	r1, r5
 801d03c:	f008 f85a 	bl	80250f4 <strcpy>
        label->static_txt = 0;
 801d040:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d044:	f36f 03c3 	bfc	r3, #3, #1
 801d048:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801d04c:	e7dc      	b.n	801d008 <lv_label_set_text+0x30>

0801d04e <lv_label_set_text_static>:
    if(label->static_txt == 0 && label->text != NULL) {
 801d04e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801d052:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 801d054:	f013 0608 	ands.w	r6, r3, #8
{
 801d058:	4604      	mov	r4, r0
 801d05a:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 801d05c:	d104      	bne.n	801d068 <lv_label_set_text_static+0x1a>
 801d05e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d060:	b110      	cbz	r0, 801d068 <lv_label_set_text_static+0x1a>
        lv_mem_free(label->text);
 801d062:	f7fa f98f 	bl	8017384 <lv_mem_free>
        label->text = NULL;
 801d066:	6266      	str	r6, [r4, #36]	; 0x24
    if(text != NULL) {
 801d068:	b135      	cbz	r5, 801d078 <lv_label_set_text_static+0x2a>
        label->static_txt = 1;
 801d06a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 801d06e:	6265      	str	r5, [r4, #36]	; 0x24
        label->static_txt = 1;
 801d070:	f043 0308 	orr.w	r3, r3, #8
 801d074:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801d078:	4620      	mov	r0, r4
}
 801d07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(obj);
 801d07e:	f7ff bbd9 	b.w	801c834 <lv_label_refr_text>
	...

0801d084 <lv_label_set_long_mode>:
{
 801d084:	b538      	push	{r3, r4, r5, lr}
 801d086:	4604      	mov	r4, r0
 801d088:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 801d08a:	4914      	ldr	r1, [pc, #80]	; (801d0dc <lv_label_set_long_mode+0x58>)
 801d08c:	f7f9 fc18 	bl	80168c0 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 801d090:	4913      	ldr	r1, [pc, #76]	; (801d0e0 <lv_label_set_long_mode+0x5c>)
 801d092:	4620      	mov	r0, r4
 801d094:	f7f9 fc14 	bl	80168c0 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801d098:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 801d09a:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801d09c:	2a02      	cmp	r2, #2
    label->offset.x = 0;
 801d09e:	6463      	str	r3, [r4, #68]	; 0x44
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801d0a0:	bf8c      	ite	hi
 801d0a2:	2200      	movhi	r2, #0
 801d0a4:	2201      	movls	r2, #1
 801d0a6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d0aa:	f362 1345 	bfi	r3, r2, #5, #1
 801d0ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801d0b2:	f003 0307 	and.w	r3, r3, #7
 801d0b6:	2b01      	cmp	r3, #1
 801d0b8:	d105      	bne.n	801d0c6 <lv_label_set_long_mode+0x42>
 801d0ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d0bc:	3301      	adds	r3, #1
 801d0be:	d002      	beq.n	801d0c6 <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	f7ff fa53 	bl	801c56c <lv_label_revert_dots>
    label->long_mode = long_mode;
 801d0c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801d0ca:	4620      	mov	r0, r4
    label->long_mode = long_mode;
 801d0cc:	f365 0302 	bfi	r3, r5, #0, #3
 801d0d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 801d0d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 801d0d8:	f7ff bbac 	b.w	801c834 <lv_label_refr_text>
 801d0dc:	0801c565 	.word	0x0801c565
 801d0e0:	0801c55d 	.word	0x0801c55d

0801d0e4 <lv_label_constructor>:
{
 801d0e4:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 801d0e6:	f04f 33ff 	mov.w	r3, #4294967295
{
 801d0ea:	460c      	mov	r4, r1
    label->text       = NULL;
 801d0ec:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801d0ee:	4620      	mov	r0, r4
    label->offset.x = 0;
 801d0f0:	644d      	str	r5, [r1, #68]	; 0x44
    label->hint.line_start = -1;
 801d0f2:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 801d0f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801d0fa:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801d0fe:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 801d102:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    label->dot.tmp_ptr   = NULL;
 801d106:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801d10a:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->hint.coord_y    = 0;
 801d10e:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801d112:	2102      	movs	r1, #2
 801d114:	f7e6 fc33 	bl	800397e <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 801d118:	4629      	mov	r1, r5
 801d11a:	4620      	mov	r0, r4
 801d11c:	f7ff ffb2 	bl	801d084 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 801d120:	4620      	mov	r0, r4
 801d122:	4902      	ldr	r1, [pc, #8]	; (801d12c <lv_label_constructor+0x48>)
}
 801d124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 801d128:	f7ff bf56 	b.w	801cfd8 <lv_label_set_text>
 801d12c:	0802a01c 	.word	0x0802a01c

0801d130 <lv_label_set_text_sel_start>:
    label->sel_start   = index;
 801d130:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 801d132:	f7e7 be09 	b.w	8004d48 <lv_obj_invalidate>

0801d136 <lv_label_set_text_sel_end>:
    label->sel_end     = index;
 801d136:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 801d138:	f7e7 be06 	b.w	8004d48 <lv_obj_invalidate>

0801d13c <lv_label_get_text>:
}
 801d13c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d13e:	4770      	bx	lr

0801d140 <lv_label_get_letter_pos>:
{
 801d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d144:	ed2d 8b02 	vpush	{d8}
 801d148:	b08b      	sub	sp, #44	; 0x2c
 801d14a:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 801d14c:	4690      	mov	r8, r2
{
 801d14e:	9106      	str	r1, [sp, #24]
    LV_ASSERT_NULL(pos);
 801d150:	b902      	cbnz	r2, 801d154 <lv_label_get_letter_pos+0x14>
 801d152:	e7fe      	b.n	801d152 <lv_label_get_letter_pos+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d154:	f241 425d 	movw	r2, #5213	; 0x145d
 801d158:	2100      	movs	r1, #0
    return label->text;
 801d15a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d15c:	f7e9 ff1c 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d160:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 801d164:	d10a      	bne.n	801d17c <lv_label_get_letter_pos+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d166:	4639      	mov	r1, r7
 801d168:	f241 426a 	movw	r2, #5226	; 0x146a
 801d16c:	4628      	mov	r0, r5
 801d16e:	f7e9 ff13 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d172:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801d174:	2801      	cmp	r0, #1
 801d176:	bf0c      	ite	eq
 801d178:	2703      	moveq	r7, #3
 801d17a:	2701      	movne	r7, #1
    if(txt[0] == '\0') {
 801d17c:	7823      	ldrb	r3, [r4, #0]
 801d17e:	b9db      	cbnz	r3, 801d1b8 <lv_label_get_letter_pos+0x78>
        switch(align) {
 801d180:	2f02      	cmp	r7, #2
        pos->y = 0;
 801d182:	f8a8 3002 	strh.w	r3, [r8, #2]
        switch(align) {
 801d186:	d010      	beq.n	801d1aa <lv_label_get_letter_pos+0x6a>
 801d188:	2f03      	cmp	r7, #3
 801d18a:	d008      	beq.n	801d19e <lv_label_get_letter_pos+0x5e>
 801d18c:	2f01      	cmp	r7, #1
 801d18e:	d101      	bne.n	801d194 <lv_label_get_letter_pos+0x54>
                pos->x = 0;
 801d190:	f8a8 3000 	strh.w	r3, [r8]
}
 801d194:	b00b      	add	sp, #44	; 0x2c
 801d196:	ecbd 8b02 	vpop	{d8}
 801d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_content_width(obj);
 801d19e:	4628      	mov	r0, r5
 801d1a0:	f7e7 fc89 	bl	8004ab6 <lv_obj_get_content_width>
                pos->x = lv_obj_get_content_width(obj) / 2;
 801d1a4:	f8a8 0000 	strh.w	r0, [r8]
                break;
 801d1a8:	e7f4      	b.n	801d194 <lv_label_get_letter_pos+0x54>
                pos->x = lv_obj_get_content_width(obj) / 2;
 801d1aa:	4628      	mov	r0, r5
 801d1ac:	f7e7 fc83 	bl	8004ab6 <lv_obj_get_content_width>
 801d1b0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d1b4:	1040      	asrs	r0, r0, #1
 801d1b6:	e7f5      	b.n	801d1a4 <lv_label_get_letter_pos+0x64>
    lv_obj_get_content_coords(obj, &txt_coords);
 801d1b8:	a908      	add	r1, sp, #32
 801d1ba:	4628      	mov	r0, r5
 801d1bc:	f7e7 fcaf 	bl	8004b1e <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d1c0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d1c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d1c8:	4628      	mov	r0, r5
 801d1ca:	3301      	adds	r3, #1
 801d1cc:	1a9b      	subs	r3, r3, r2
 801d1ce:	b21b      	sxth	r3, r3
 801d1d0:	ee08 3a10 	vmov	s16, r3
 801d1d4:	f7ff fa0c 	bl	801c5f0 <lv_obj_get_style_text_font.constprop.0>
 801d1d8:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d1da:	4628      	mov	r0, r5
 801d1dc:	f7ff f9f8 	bl	801c5d0 <lv_obj_get_style_text_line_space.constprop.0>
 801d1e0:	9004      	str	r0, [sp, #16]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d1e2:	4628      	mov	r0, r5
 801d1e4:	f7ff f9fc 	bl	801c5e0 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d1e8:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d1ec:	4683      	mov	fp, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d1ee:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d1f0:	9305      	str	r3, [sp, #20]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d1f2:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d1f6:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d1f8:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d1fc:	bf48      	it	mi
 801d1fe:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d202:	f7ff f9fc 	bl	801c5fe <lv_obj_get_style_width.constprop.0>
 801d206:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d20a:	4298      	cmp	r0, r3
 801d20c:	d105      	bne.n	801d21a <lv_label_get_letter_pos+0xda>
 801d20e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801d212:	075b      	lsls	r3, r3, #29
 801d214:	bf58      	it	pl
 801d216:	f049 0904 	orrpl.w	r9, r9, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801d21a:	4b40      	ldr	r3, [pc, #256]	; (801d31c <lv_label_get_letter_pos+0x1dc>)
 801d21c:	4620      	mov	r0, r4
 801d21e:	9906      	ldr	r1, [sp, #24]
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	4798      	blx	r3
    lv_coord_t y             = 0;
 801d224:	2300      	movs	r3, #0
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801d226:	4605      	mov	r5, r0
    uint32_t line_start      = 0;
 801d228:	461e      	mov	r6, r3
    lv_coord_t y             = 0;
 801d22a:	9303      	str	r3, [sp, #12]
        y += letter_height + line_space;
 801d22c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d230:	4413      	add	r3, r2
 801d232:	9307      	str	r3, [sp, #28]
    while(txt[new_line_start] != '\0') {
 801d234:	5da3      	ldrb	r3, [r4, r6]
 801d236:	19a0      	adds	r0, r4, r6
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d145      	bne.n	801d2c8 <lv_label_get_letter_pos+0x188>
 801d23c:	9602      	str	r6, [sp, #8]
    if(byte_id > 0) {
 801d23e:	b18d      	cbz	r5, 801d264 <lv_label_get_letter_pos+0x124>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 801d240:	1963      	adds	r3, r4, r5
 801d242:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d246:	2b0a      	cmp	r3, #10
 801d248:	d001      	beq.n	801d24e <lv_label_get_letter_pos+0x10e>
 801d24a:	2b0d      	cmp	r3, #13
 801d24c:	d10a      	bne.n	801d264 <lv_label_get_letter_pos+0x124>
 801d24e:	5d63      	ldrb	r3, [r4, r5]
 801d250:	b943      	cbnz	r3, 801d264 <lv_label_get_letter_pos+0x124>
            y += letter_height + line_space;
 801d252:	462e      	mov	r6, r5
 801d254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d258:	4413      	add	r3, r2
 801d25a:	4618      	mov	r0, r3
 801d25c:	9b03      	ldr	r3, [sp, #12]
 801d25e:	4418      	add	r0, r3
 801d260:	b203      	sxth	r3, r0
 801d262:	9303      	str	r3, [sp, #12]
    bidi_txt = &txt[line_start];
 801d264:	4434      	add	r4, r6
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 801d266:	465b      	mov	r3, fp
 801d268:	1ba9      	subs	r1, r5, r6
 801d26a:	4652      	mov	r2, sl
 801d26c:	4620      	mov	r0, r4
 801d26e:	f8cd 9000 	str.w	r9, [sp]
 801d272:	f7fb ff55 	bl	8019120 <lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
 801d276:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 801d278:	4605      	mov	r5, r0
    if(char_id != line_start) x += letter_space;
 801d27a:	429e      	cmp	r6, r3
 801d27c:	bf1c      	itt	ne
 801d27e:	445d      	addne	r5, fp
 801d280:	b22d      	sxthne	r5, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801d282:	2f02      	cmp	r7, #2
 801d284:	d136      	bne.n	801d2f4 <lv_label_get_letter_pos+0x1b4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801d286:	9902      	ldr	r1, [sp, #8]
 801d288:	465b      	mov	r3, fp
 801d28a:	4652      	mov	r2, sl
 801d28c:	4620      	mov	r0, r4
 801d28e:	1b89      	subs	r1, r1, r6
 801d290:	f8cd 9000 	str.w	r9, [sp]
 801d294:	f7fb ff44 	bl	8019120 <lv_txt_get_width>
 801d298:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d29c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801d2a0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d2a4:	3301      	adds	r3, #1
 801d2a6:	f340 004f 	sbfx	r0, r0, #1, #16
 801d2aa:	1a9b      	subs	r3, r3, r2
 801d2ac:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801d2b0:	fa02 f383 	sxtah	r3, r2, r3
 801d2b4:	ebc0 0063 	rsb	r0, r0, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 801d2b8:	4405      	add	r5, r0
 801d2ba:	b22d      	sxth	r5, r5
    pos->y = y;
 801d2bc:	9b03      	ldr	r3, [sp, #12]
    pos->x = x;
 801d2be:	f8a8 5000 	strh.w	r5, [r8]
    pos->y = y;
 801d2c2:	f8a8 3002 	strh.w	r3, [r8, #2]
 801d2c6:	e765      	b.n	801d194 <lv_label_get_letter_pos+0x54>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d2c8:	ee18 3a10 	vmov	r3, s16
 801d2cc:	465a      	mov	r2, fp
 801d2ce:	4651      	mov	r1, sl
 801d2d0:	f8cd 9000 	str.w	r9, [sp]
 801d2d4:	f7fb fddc 	bl	8018e90 <_lv_txt_get_next_line>
 801d2d8:	1833      	adds	r3, r6, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 801d2da:	429d      	cmp	r5, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d2dc:	9302      	str	r3, [sp, #8]
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 801d2de:	d3ae      	bcc.n	801d23e <lv_label_get_letter_pos+0xfe>
 801d2e0:	5ce3      	ldrb	r3, [r4, r3]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d0ab      	beq.n	801d23e <lv_label_get_letter_pos+0xfe>
        y += letter_height + line_space;
 801d2e6:	9b03      	ldr	r3, [sp, #12]
 801d2e8:	9a07      	ldr	r2, [sp, #28]
 801d2ea:	9e02      	ldr	r6, [sp, #8]
 801d2ec:	4413      	add	r3, r2
 801d2ee:	b21b      	sxth	r3, r3
 801d2f0:	9303      	str	r3, [sp, #12]
        line_start = new_line_start;
 801d2f2:	e79f      	b.n	801d234 <lv_label_get_letter_pos+0xf4>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801d2f4:	2f03      	cmp	r7, #3
 801d2f6:	d1e1      	bne.n	801d2bc <lv_label_get_letter_pos+0x17c>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801d2f8:	9902      	ldr	r1, [sp, #8]
 801d2fa:	465b      	mov	r3, fp
 801d2fc:	4652      	mov	r2, sl
 801d2fe:	4620      	mov	r0, r4
 801d300:	1b89      	subs	r1, r1, r6
 801d302:	f8cd 9000 	str.w	r9, [sp]
 801d306:	f7fb ff0b 	bl	8019120 <lv_txt_get_width>
 801d30a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d30e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d312:	3301      	adds	r3, #1
 801d314:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 801d316:	b21b      	sxth	r3, r3
 801d318:	1a18      	subs	r0, r3, r0
 801d31a:	e7cd      	b.n	801d2b8 <lv_label_get_letter_pos+0x178>
 801d31c:	20000038 	.word	0x20000038

0801d320 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 801d320:	b901      	cbnz	r1, 801d324 <lv_label_get_letter_on+0x4>
 801d322:	e7fe      	b.n	801d322 <lv_label_get_letter_on+0x2>
 801d324:	f7ff b974 	b.w	801c610 <lv_label_get_letter_on.part.0>

0801d328 <lv_label_is_char_under_pos>:
{
 801d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d32c:	ed2d 8b02 	vpush	{d8}
 801d330:	b08d      	sub	sp, #52	; 0x34
 801d332:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 801d334:	9103      	str	r1, [sp, #12]
 801d336:	b901      	cbnz	r1, 801d33a <lv_label_is_char_under_pos+0x12>
 801d338:	e7fe      	b.n	801d338 <lv_label_is_char_under_pos+0x10>
    lv_obj_get_content_coords(obj, &txt_coords);
 801d33a:	a90a      	add	r1, sp, #40	; 0x28
 801d33c:	f7e7 fbef 	bl	8004b1e <lv_obj_get_content_coords>
 801d340:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801d344:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d348:	4628      	mov	r0, r5
 801d34a:	3301      	adds	r3, #1
    return label->text;
 801d34c:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
 801d350:	1a9b      	subs	r3, r3, r2
 801d352:	b21b      	sxth	r3, r3
 801d354:	ee08 3a10 	vmov	s16, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d358:	f7ff f94a 	bl	801c5f0 <lv_obj_get_style_text_font.constprop.0>
 801d35c:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d35e:	4628      	mov	r0, r5
 801d360:	f7ff f936 	bl	801c5d0 <lv_obj_get_style_text_line_space.constprop.0>
 801d364:	4604      	mov	r4, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d366:	4628      	mov	r0, r5
 801d368:	f7ff f93a 	bl	801c5e0 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d36c:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d370:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d372:	f241 425d 	movw	r2, #5213	; 0x145d
 801d376:	2100      	movs	r1, #0
 801d378:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d37a:	9304      	str	r3, [sp, #16]
 801d37c:	f7e9 fe0c 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d380:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 801d384:	d10c      	bne.n	801d3a0 <lv_label_is_char_under_pos+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d386:	4649      	mov	r1, r9
 801d388:	f241 426a 	movw	r2, #5226	; 0x146a
 801d38c:	4628      	mov	r0, r5
 801d38e:	f7e9 fe03 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d392:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801d394:	2801      	cmp	r0, #1
 801d396:	bf0c      	ite	eq
 801d398:	f04f 0903 	moveq.w	r9, #3
 801d39c:	f04f 0901 	movne.w	r9, #1
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d3a0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d3a4:	4628      	mov	r0, r5
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d3a6:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d3a8:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d3ac:	bf48      	it	mi
 801d3ae:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d3b2:	f7ff f924 	bl	801c5fe <lv_obj_get_style_width.constprop.0>
 801d3b6:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d3ba:	4298      	cmp	r0, r3
 801d3bc:	d105      	bne.n	801d3ca <lv_label_is_char_under_pos+0xa2>
 801d3be:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801d3c2:	075b      	lsls	r3, r3, #29
 801d3c4:	d401      	bmi.n	801d3ca <lv_label_is_char_under_pos+0xa2>
 801d3c6:	f046 0604 	orr.w	r6, r6, #4
       else align = LV_TEXT_ALIGN_LEFT;
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	461d      	mov	r5, r3
 801d3ce:	9302      	str	r3, [sp, #8]
        y += letter_height + line_space;
 801d3d0:	9b04      	ldr	r3, [sp, #16]
 801d3d2:	4423      	add	r3, r4
 801d3d4:	9305      	str	r3, [sp, #20]
 801d3d6:	e016      	b.n	801d406 <lv_label_is_char_under_pos+0xde>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d3d8:	ee18 3a10 	vmov	r3, s16
 801d3dc:	463a      	mov	r2, r7
 801d3de:	4641      	mov	r1, r8
 801d3e0:	4658      	mov	r0, fp
 801d3e2:	9600      	str	r6, [sp, #0]
 801d3e4:	f7fb fd54 	bl	8018e90 <_lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801d3e8:	9b03      	ldr	r3, [sp, #12]
 801d3ea:	9904      	ldr	r1, [sp, #16]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d3ec:	182c      	adds	r4, r5, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801d3ee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d3f2:	9b02      	ldr	r3, [sp, #8]
 801d3f4:	440b      	add	r3, r1
 801d3f6:	429a      	cmp	r2, r3
 801d3f8:	dd0c      	ble.n	801d414 <lv_label_is_char_under_pos+0xec>
        y += letter_height + line_space;
 801d3fa:	9b02      	ldr	r3, [sp, #8]
        line_start = new_line_start;
 801d3fc:	4625      	mov	r5, r4
 801d3fe:	9a05      	ldr	r2, [sp, #20]
 801d400:	4413      	add	r3, r2
 801d402:	b21b      	sxth	r3, r3
 801d404:	9302      	str	r3, [sp, #8]
    while(txt[line_start] != '\0') {
 801d406:	f81a 3005 	ldrb.w	r3, [sl, r5]
 801d40a:	eb0a 0b05 	add.w	fp, sl, r5
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d1e2      	bne.n	801d3d8 <lv_label_is_char_under_pos+0xb0>
 801d412:	462c      	mov	r4, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801d414:	f1b9 0f02 	cmp.w	r9, #2
 801d418:	d13b      	bne.n	801d492 <lv_label_is_char_under_pos+0x16a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801d41a:	463b      	mov	r3, r7
 801d41c:	4642      	mov	r2, r8
 801d41e:	1b61      	subs	r1, r4, r5
 801d420:	4658      	mov	r0, fp
 801d422:	9600      	str	r6, [sp, #0]
 801d424:	f7fb fe7c 	bl	8019120 <lv_txt_get_width>
 801d428:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 801d42c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801d430:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d434:	f109 0901 	add.w	r9, r9, #1
 801d438:	eba9 0903 	sub.w	r9, r9, r3
 801d43c:	f3c9 33c0 	ubfx	r3, r9, #15, #1
 801d440:	fa03 f389 	sxtah	r3, r3, r9
 801d444:	ea4f 0960 	mov.w	r9, r0, asr #1
 801d448:	ebc9 0963 	rsb	r9, r9, r3, asr #1
 801d44c:	fa0f f989 	sxth.w	r9, r9
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801d450:	2000      	movs	r0, #0
 801d452:	f88d 001b 	strb.w	r0, [sp, #27]
    uint32_t letter_next = '\0';
 801d456:	9009      	str	r0, [sp, #36]	; 0x24
    uint32_t letter      = '\0';
 801d458:	e9cd 5007 	strd	r5, r0, [sp, #28]
    if(new_line_start > 0) {
 801d45c:	2c00      	cmp	r4, #0
 801d45e:	d159      	bne.n	801d514 <lv_label_is_char_under_pos+0x1ec>
    lv_coord_t last_x = 0;
 801d460:	46a3      	mov	fp, r4
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 801d462:	4640      	mov	r0, r8
 801d464:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801d468:	f7f8 fe54 	bl	8016114 <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801d46c:	9b03      	ldr	r3, [sp, #12]
 801d46e:	ebab 0207 	sub.w	r2, fp, r7
 801d472:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d476:	4293      	cmp	r3, r2
 801d478:	db51      	blt.n	801d51e <lv_label_is_char_under_pos+0x1f6>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 801d47a:	4438      	add	r0, r7
 801d47c:	1c47      	adds	r7, r0, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801d47e:	44bb      	add	fp, r7
 801d480:	455b      	cmp	r3, fp
 801d482:	bfcc      	ite	gt
 801d484:	2000      	movgt	r0, #0
 801d486:	2001      	movle	r0, #1
}
 801d488:	b00d      	add	sp, #52	; 0x34
 801d48a:	ecbd 8b02 	vpop	{d8}
 801d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801d492:	f1b9 0f03 	cmp.w	r9, #3
 801d496:	d111      	bne.n	801d4bc <lv_label_is_char_under_pos+0x194>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801d498:	463b      	mov	r3, r7
 801d49a:	4642      	mov	r2, r8
 801d49c:	1b61      	subs	r1, r4, r5
 801d49e:	4658      	mov	r0, fp
 801d4a0:	9600      	str	r6, [sp, #0]
 801d4a2:	f7fb fe3d 	bl	8019120 <lv_txt_get_width>
 801d4a6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801d4aa:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	eba3 0309 	sub.w	r3, r3, r9
        x += lv_area_get_width(&txt_coords) - line_w;
 801d4b4:	1a18      	subs	r0, r3, r0
 801d4b6:	fa0f f980 	sxth.w	r9, r0
 801d4ba:	e7c9      	b.n	801d450 <lv_label_is_char_under_pos+0x128>
    lv_coord_t x      = 0;
 801d4bc:	f04f 0900 	mov.w	r9, #0
 801d4c0:	e7c6      	b.n	801d450 <lv_label_is_char_under_pos+0x128>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801d4c2:	9b07      	ldr	r3, [sp, #28]
 801d4c4:	f10d 001b 	add.w	r0, sp, #27
 801d4c8:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801d4cc:	f7fb fcc2 	bl	8018e54 <_lv_txt_is_cmd>
 801d4d0:	b150      	cbz	r0, 801d4e8 <lv_label_is_char_under_pos+0x1c0>
        while(i <= new_line_start - 1) {
 801d4d2:	9b07      	ldr	r3, [sp, #28]
 801d4d4:	429c      	cmp	r4, r3
 801d4d6:	d3c4      	bcc.n	801d462 <lv_label_is_char_under_pos+0x13a>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 801d4d8:	ab07      	add	r3, sp, #28
 801d4da:	aa09      	add	r2, sp, #36	; 0x24
 801d4dc:	a908      	add	r1, sp, #32
 801d4de:	4650      	mov	r0, sl
 801d4e0:	f7fb fe04 	bl	80190ec <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801d4e4:	2e00      	cmp	r6, #0
 801d4e6:	d1ec      	bne.n	801d4c2 <lv_label_is_char_under_pos+0x19a>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d4e8:	4640      	mov	r0, r8
 801d4ea:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801d4ee:	f7f8 fe11 	bl	8016114 <lv_font_get_glyph_width>
            if(pos->x < x) {
 801d4f2:	9a03      	ldr	r2, [sp, #12]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d4f4:	4448      	add	r0, r9
            if(pos->x < x) {
 801d4f6:	f9b2 2000 	ldrsh.w	r2, [r2]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801d4fa:	b283      	uxth	r3, r0
            if(pos->x < x) {
 801d4fc:	b200      	sxth	r0, r0
 801d4fe:	4282      	cmp	r2, r0
 801d500:	da02      	bge.n	801d508 <lv_label_is_char_under_pos+0x1e0>
                break;
 801d502:	46cb      	mov	fp, r9
                i = i_current;
 801d504:	9507      	str	r5, [sp, #28]
                break;
 801d506:	e7ac      	b.n	801d462 <lv_label_is_char_under_pos+0x13a>
            x += letter_space;
 801d508:	443b      	add	r3, r7
            i_current = i;
 801d50a:	46cb      	mov	fp, r9
 801d50c:	9d07      	ldr	r5, [sp, #28]
            x += letter_space;
 801d50e:	fa0f f983 	sxth.w	r9, r3
 801d512:	e7de      	b.n	801d4d2 <lv_label_is_char_under_pos+0x1aa>
    lv_coord_t last_x = 0;
 801d514:	4683      	mov	fp, r0
        while(i <= new_line_start - 1) {
 801d516:	3c01      	subs	r4, #1
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801d518:	f006 0601 	and.w	r6, r6, #1
 801d51c:	e7d9      	b.n	801d4d2 <lv_label_is_char_under_pos+0x1aa>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801d51e:	2000      	movs	r0, #0
 801d520:	e7b2      	b.n	801d488 <lv_label_is_char_under_pos+0x160>

0801d522 <lv_label_get_text_selection_start>:
}
 801d522:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d524:	4770      	bx	lr

0801d526 <lv_label_get_text_selection_end>:
}
 801d526:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d528:	4770      	bx	lr
	...

0801d52c <lv_label_ins_text>:
{
 801d52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d530:	4604      	mov	r4, r0
 801d532:	460d      	mov	r5, r1
    LV_ASSERT_NULL(txt);
 801d534:	4616      	mov	r6, r2
 801d536:	b902      	cbnz	r2, 801d53a <lv_label_ins_text+0xe>
 801d538:	e7fe      	b.n	801d538 <lv_label_ins_text+0xc>
    if(label->static_txt != 0) return;
 801d53a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801d53e:	071b      	lsls	r3, r3, #28
 801d540:	d425      	bmi.n	801d58e <lv_label_ins_text+0x62>
    lv_obj_invalidate(obj);
 801d542:	f7e7 fc01 	bl	8004d48 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 801d546:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801d54a:	4640      	mov	r0, r8
 801d54c:	f7e2 fe6a 	bl	8000224 <strlen>
 801d550:	4607      	mov	r7, r0
    size_t ins_len = strlen(txt);
 801d552:	4630      	mov	r0, r6
 801d554:	f7e2 fe66 	bl	8000224 <strlen>
    size_t new_len = ins_len + old_len;
 801d558:	4438      	add	r0, r7
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 801d55a:	1c41      	adds	r1, r0, #1
 801d55c:	4640      	mov	r0, r8
 801d55e:	f7fa f8a9 	bl	80176b4 <lv_mem_realloc>
 801d562:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 801d564:	b900      	cbnz	r0, 801d568 <lv_label_ins_text+0x3c>
 801d566:	e7fe      	b.n	801d566 <lv_label_ins_text+0x3a>
    if(pos == LV_LABEL_POS_LAST) {
 801d568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d56c:	429d      	cmp	r5, r3
 801d56e:	d103      	bne.n	801d578 <lv_label_ins_text+0x4c>
        pos = _lv_txt_get_encoded_length(label->text);
 801d570:	4b08      	ldr	r3, [pc, #32]	; (801d594 <lv_label_ins_text+0x68>)
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	4798      	blx	r3
 801d576:	4605      	mov	r5, r0
    _lv_txt_ins(label->text, pos, txt);
 801d578:	4629      	mov	r1, r5
 801d57a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d57c:	4632      	mov	r2, r6
 801d57e:	f7fb fd69 	bl	8019054 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 801d582:	4620      	mov	r0, r4
 801d584:	2100      	movs	r1, #0
}
 801d586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_set_text(obj, NULL);
 801d58a:	f7ff bd25 	b.w	801cfd8 <lv_label_set_text>
}
 801d58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d592:	bf00      	nop
 801d594:	2000004c 	.word	0x2000004c

0801d598 <lv_line_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_line_t * line = (lv_line_t *)obj;

    line->point_num   = 0;
 801d598:	2300      	movs	r3, #0
    line->point_array = NULL;
    line->y_inv       = 0;
 801d59a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
{
 801d59e:	4608      	mov	r0, r1
    line->y_inv       = 0;
 801d5a0:	f363 0200 	bfi	r2, r3, #0, #1
    line->point_num   = 0;
 801d5a4:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 801d5a6:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 801d5a8:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801d5ac:	2102      	movs	r1, #2
 801d5ae:	f7e6 b9e6 	b.w	800397e <lv_obj_clear_flag>
	...

0801d5b4 <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801d5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801d5b8:	4858      	ldr	r0, [pc, #352]	; (801d71c <lv_line_event+0x168>)
{
 801d5ba:	b089      	sub	sp, #36	; 0x24
 801d5bc:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801d5be:	f7e4 fa24 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801d5c2:	2801      	cmp	r0, #1
 801d5c4:	d117      	bne.n	801d5f6 <lv_line_event+0x42>

    lv_event_code_t code = lv_event_get_code(e);
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f7e4 fab8 	bl	8001b3c <lv_event_get_code>
 801d5cc:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801d5ce:	4628      	mov	r0, r5
 801d5d0:	f7e4 fab2 	bl	8001b38 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801d5d4:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801d5d6:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801d5d8:	d110      	bne.n	801d5fc <lv_line_event+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801d5da:	f640 0249 	movw	r2, #2121	; 0x849
 801d5de:	2100      	movs	r1, #0
 801d5e0:	f7e9 fcda 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d5e4:	b204      	sxth	r4, r0
        /*The corner of the skew lines is out of the intended area*/
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_MAIN);
        lv_coord_t * s = lv_event_get_param(e);
 801d5e6:	4628      	mov	r0, r5
 801d5e8:	f7e4 faaa 	bl	8001b40 <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 801d5ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d5f0:	42a3      	cmp	r3, r4
 801d5f2:	da00      	bge.n	801d5f6 <lv_line_event+0x42>
 801d5f4:	8004      	strh	r4, [r0, #0]
            }
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 801d5f6:	b009      	add	sp, #36	; 0x24
 801d5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801d5fc:	2e26      	cmp	r6, #38	; 0x26
 801d5fe:	d128      	bne.n	801d652 <lv_line_event+0x9e>
        lv_point_t * p = lv_event_get_param(e);
 801d600:	4628      	mov	r0, r5
 801d602:	f7e4 fa9d 	bl	8001b40 <lv_event_get_param>
        if(line->point_num > 0) {
 801d606:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        lv_point_t * p = lv_event_get_param(e);
 801d608:	4606      	mov	r6, r0
        if(line->point_num > 0) {
 801d60a:	2a00      	cmp	r2, #0
 801d60c:	d0f3      	beq.n	801d5f6 <lv_line_event+0x42>
 801d60e:	2300      	movs	r3, #0
        lv_coord_t h = 0;
 801d610:	461f      	mov	r7, r3
        lv_coord_t w = 0;
 801d612:	461d      	mov	r5, r3
 801d614:	e00d      	b.n	801d632 <lv_line_event+0x7e>
                w = LV_MAX(line->point_array[i].x, w);
 801d616:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d618:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801d61c:	f931 1023 	ldrsh.w	r1, [r1, r3, lsl #2]
 801d620:	3301      	adds	r3, #1
 801d622:	428d      	cmp	r5, r1
 801d624:	bfb8      	it	lt
 801d626:	460d      	movlt	r5, r1
                h = LV_MAX(line->point_array[i].y, h);
 801d628:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d62c:	428f      	cmp	r7, r1
 801d62e:	bfb8      	it	lt
 801d630:	460f      	movlt	r7, r1
            for(i = 0; i < line->point_num; i++) {
 801d632:	b299      	uxth	r1, r3
 801d634:	428a      	cmp	r2, r1
 801d636:	d8ee      	bhi.n	801d616 <lv_line_event+0x62>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801d638:	f640 0249 	movw	r2, #2121	; 0x849
 801d63c:	2100      	movs	r1, #0
 801d63e:	4620      	mov	r0, r4
 801d640:	f7e9 fcaa 	bl	8006f98 <lv_obj_get_style_prop>
            w += line_width;
 801d644:	fa15 f580 	uxtah	r5, r5, r0
            h += line_width;
 801d648:	fa17 f080 	uxtah	r0, r7, r0
            p->x = w;
 801d64c:	8035      	strh	r5, [r6, #0]
            p->y = h;
 801d64e:	8070      	strh	r0, [r6, #2]
 801d650:	e7d1      	b.n	801d5f6 <lv_line_event+0x42>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801d652:	2e15      	cmp	r6, #21
 801d654:	d1cf      	bne.n	801d5f6 <lv_line_event+0x42>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801d656:	4628      	mov	r0, r5
 801d658:	f7e4 fa72 	bl	8001b40 <lv_event_get_param>
        if(line->point_num == 0 || line->point_array == NULL) return;
 801d65c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        const lv_area_t * clip_area = lv_event_get_param(e);
 801d65e:	4681      	mov	r9, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 801d660:	2b00      	cmp	r3, #0
 801d662:	d0c8      	beq.n	801d5f6 <lv_line_event+0x42>
 801d664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d666:	2b00      	cmp	r3, #0
 801d668:	d0c5      	beq.n	801d5f6 <lv_line_event+0x42>
        lv_obj_get_coords(obj, &area);
 801d66a:	a903      	add	r1, sp, #12
 801d66c:	4620      	mov	r0, r4
 801d66e:	f7e7 f9c6 	bl	80049fe <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801d672:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 801d676:	4620      	mov	r0, r4
        for(i = 0; i < line->point_num - 1; i++) {
 801d678:	f04f 0800 	mov.w	r8, #0
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801d67c:	f7e8 fa3e 	bl	8005afc <lv_obj_get_scroll_x>
 801d680:	1a28      	subs	r0, r5, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801d682:	f8bd 500e 	ldrh.w	r5, [sp, #14]
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801d686:	b287      	uxth	r7, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801d688:	4620      	mov	r0, r4
 801d68a:	f7e8 fa49 	bl	8005b20 <lv_obj_get_scroll_y>
 801d68e:	1a28      	subs	r0, r5, r0
 801d690:	b286      	uxth	r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 801d692:	4620      	mov	r0, r4
 801d694:	f7e7 fa09 	bl	8004aaa <lv_obj_get_height>
 801d698:	4605      	mov	r5, r0
        lv_draw_line_dsc_init(&line_dsc);
 801d69a:	a805      	add	r0, sp, #20
 801d69c:	4435      	add	r5, r6
 801d69e:	f7ed f9d1 	bl	800aa44 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801d6a2:	aa05      	add	r2, sp, #20
 801d6a4:	2100      	movs	r1, #0
 801d6a6:	b2ad      	uxth	r5, r5
 801d6a8:	4620      	mov	r0, r4
 801d6aa:	f7e6 ff55 	bl	8004558 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 801d6ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d6b0:	fa1f f388 	uxth.w	r3, r8
 801d6b4:	3a01      	subs	r2, #1
 801d6b6:	4293      	cmp	r3, r2
 801d6b8:	da9d      	bge.n	801d5f6 <lv_line_event+0x42>
            p1.x = line->point_array[i].x + x_ofs;
 801d6ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d6bc:	009a      	lsls	r2, r3, #2
 801d6be:	f108 0801 	add.w	r8, r8, #1
 801d6c2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801d6c6:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 801d6ca:	443b      	add	r3, r7
 801d6cc:	f8ad 3004 	strh.w	r3, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 801d6d0:	1d13      	adds	r3, r2, #4
 801d6d2:	18ca      	adds	r2, r1, r3
 801d6d4:	5acb      	ldrh	r3, [r1, r3]
            if(line->y_inv == 0) {
 801d6d6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
            p2.x = line->point_array[i + 1].x + x_ofs;
 801d6da:	443b      	add	r3, r7
            if(line->y_inv == 0) {
 801d6dc:	07c9      	lsls	r1, r1, #31
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801d6de:	a902      	add	r1, sp, #8
            p2.x = line->point_array[i + 1].x + x_ofs;
 801d6e0:	f8ad 3008 	strh.w	r3, [sp, #8]
                p1.y = line->point_array[i].y + y_ofs;
 801d6e4:	8843      	ldrh	r3, [r0, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801d6e6:	a801      	add	r0, sp, #4
                p1.y = line->point_array[i].y + y_ofs;
 801d6e8:	bf55      	itete	pl
 801d6ea:	199b      	addpl	r3, r3, r6
                p1.y = h - line->point_array[i].y + y_ofs;
 801d6ec:	1aeb      	submi	r3, r5, r3
                p1.y = line->point_array[i].y + y_ofs;
 801d6ee:	f8ad 3006 	strhpl.w	r3, [sp, #6]
                p1.y = h - line->point_array[i].y + y_ofs;
 801d6f2:	f8ad 3006 	strhmi.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 801d6f6:	bf54      	ite	pl
 801d6f8:	8853      	ldrhpl	r3, [r2, #2]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801d6fa:	8853      	ldrhmi	r3, [r2, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801d6fc:	464a      	mov	r2, r9
                p2.y = line->point_array[i + 1].y + y_ofs;
 801d6fe:	bf54      	ite	pl
 801d700:	199b      	addpl	r3, r3, r6
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801d702:	1aeb      	submi	r3, r5, r3
 801d704:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801d708:	ab05      	add	r3, sp, #20
 801d70a:	f7ed f9a7 	bl	800aa5c <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 801d70e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801d712:	f36f 0382 	bfc	r3, #2, #1
 801d716:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 801d71a:	e7c8      	b.n	801d6ae <lv_line_event+0xfa>
 801d71c:	0802a040 	.word	0x0802a040

0801d720 <set_y_anim>:
}


static void set_y_anim(void * obj, int32_t v)
{
    lv_obj_set_y(obj, v);
 801d720:	b209      	sxth	r1, r1
 801d722:	f7e7 b8fd 	b.w	8004920 <lv_obj_set_y>

0801d726 <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801d726:	f241 4259 	movw	r2, #5209	; 0x1459
{
 801d72a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801d72c:	f7e9 fc34 	bl	8006f98 <lv_obj_get_style_prop>
}
 801d730:	bd08      	pop	{r3, pc}

0801d732 <get_label>:
    return lv_obj_get_child(obj, 0);
 801d732:	2100      	movs	r1, #0
 801d734:	f7e9 bf7d 	b.w	8007632 <lv_obj_get_child>

0801d738 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801d738:	f241 425b 	movw	r2, #5211	; 0x145b
 801d73c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801d73e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801d740:	f7e9 fc2a 	bl	8006f98 <lv_obj_get_style_prop>
}
 801d744:	b200      	sxth	r0, r0
 801d746:	bd08      	pop	{r3, pc}

0801d748 <inf_normalize>:
{
 801d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801d74a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
{
 801d74e:	4604      	mov	r4, r0
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801d750:	07db      	lsls	r3, r3, #31
 801d752:	d537      	bpl.n	801d7c4 <inf_normalize+0x7c>
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801d754:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801d756:	2307      	movs	r3, #7
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801d758:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801d75a:	fbb2 f2f3 	udiv	r2, r2, r3
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801d75e:	fbb5 f3f2 	udiv	r3, r5, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801d762:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801d766:	fb02 5313 	mls	r3, r2, r3, r5
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801d76a:	fa13 f381 	uxtah	r3, r3, r1
 801d76e:	b29b      	uxth	r3, r3
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801d770:	fbb3 f5f2 	udiv	r5, r3, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801d774:	84c3      	strh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801d776:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801d77a:	fa13 f181 	uxtah	r1, r3, r1
 801d77e:	8501      	strh	r1, [r0, #40]	; 0x28
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d780:	2100      	movs	r1, #0
 801d782:	f7ff ffd0 	bl	801d726 <lv_obj_get_style_text_font>
 801d786:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d788:	4620      	mov	r0, r4
 801d78a:	f7ff ffd5 	bl	801d738 <lv_obj_get_style_text_line_space.constprop.0>
        lv_coord_t font_h              = lv_font_get_line_height(font);
 801d78e:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d792:	4607      	mov	r7, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 801d794:	4620      	mov	r0, r4
 801d796:	f7e7 f9a8 	bl	8004aea <lv_obj_get_content_height>
 801d79a:	4605      	mov	r5, r0
        lv_obj_t * label = get_label(obj);
 801d79c:	4620      	mov	r0, r4
 801d79e:	f7ff ffc8 	bl	801d732 <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801d7a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d7a4:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801d7a8:	443e      	add	r6, r7
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d7aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801d7ae:	fb13 f606 	smulbb	r6, r3, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d7b2:	1049      	asrs	r1, r1, #1
 801d7b4:	ebc1 0165 	rsb	r1, r1, r5, asr #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 801d7b8:	1b89      	subs	r1, r1, r6
}
 801d7ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_y(label, new_y);
 801d7be:	b209      	sxth	r1, r1
 801d7c0:	f7e7 b8ae 	b.w	8004920 <lv_obj_set_y>
}
 801d7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d7c6 <scroll_anim_ready_cb>:
{
 801d7c6:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 801d7c8:	6800      	ldr	r0, [r0, #0]
 801d7ca:	f7e9 ff2f 	bl	800762c <lv_obj_get_parent>
}
 801d7ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    inf_normalize(obj);
 801d7d2:	f7ff bfb9 	b.w	801d748 <inf_normalize>

0801d7d6 <lv_roller_set_options.part.0>:
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
 801d7d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7da:	4689      	mov	r9, r1
 801d7dc:	4604      	mov	r4, r0
 801d7de:	4615      	mov	r5, r2
    lv_obj_t * label = get_label(obj);
 801d7e0:	f7ff ffa7 	bl	801d732 <get_label>
    roller->option_cnt = 0;
 801d7e4:	2300      	movs	r3, #0
    lv_obj_t * label = get_label(obj);
 801d7e6:	4606      	mov	r6, r0
    roller->option_cnt = 0;
 801d7e8:	f109 31ff 	add.w	r1, r9, #4294967295
 801d7ec:	6263      	str	r3, [r4, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 801d7ee:	8523      	strh	r3, [r4, #40]	; 0x28
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801d7f0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801d7f2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d7f6:	3301      	adds	r3, #1
 801d7f8:	b29b      	uxth	r3, r3
 801d7fa:	b992      	cbnz	r2, 801d822 <lv_roller_set_options.part.0+0x4c>
    roller->option_cnt++; /*Last option has no `\n`*/
 801d7fc:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 801d7fe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801d802:	b995      	cbnz	r5, 801d82a <lv_roller_set_options.part.0+0x54>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801d804:	f365 0300 	bfi	r3, r5, #0, #1
        lv_label_set_text(label, options);
 801d808:	4649      	mov	r1, r9
 801d80a:	4630      	mov	r0, r6
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801d80c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 801d810:	f7ff fbe2 	bl	801cfd8 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801d814:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_obj_refresh_ext_draw_size(label);
 801d816:	4630      	mov	r0, r6
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801d818:	8523      	strh	r3, [r4, #40]	; 0x28
}
 801d81a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_ext_draw_size(label);
 801d81e:	f7e6 bfa8 	b.w	8004772 <lv_obj_refresh_ext_draw_size>
        if(options[cnt] == '\n') roller->option_cnt++;
 801d822:	2a0a      	cmp	r2, #10
 801d824:	bf08      	it	eq
 801d826:	84a3      	strheq	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801d828:	e7e2      	b.n	801d7f0 <lv_roller_set_options.part.0+0x1a>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801d82a:	f043 0301 	orr.w	r3, r3, #1
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801d82e:	4648      	mov	r0, r9
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801d830:	f04f 0807 	mov.w	r8, #7
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801d834:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801d838:	f7e2 fcf4 	bl	8000224 <strlen>
 801d83c:	1c45      	adds	r5, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801d83e:	ebc5 0ac5 	rsb	sl, r5, r5, lsl #3
 801d842:	4650      	mov	r0, sl
 801d844:	f7f9 ff50 	bl	80176e8 <lv_mem_buf_get>
 801d848:	4607      	mov	r7, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801d84a:	eb00 0b05 	add.w	fp, r0, r5
            strcpy(&opt_extra[opt_len * i], options);
 801d84e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d852:	ebab 0005 	sub.w	r0, fp, r5
 801d856:	4649      	mov	r1, r9
 801d858:	f007 fc4c 	bl	80250f4 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801d85c:	230a      	movs	r3, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801d85e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801d862:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801d866:	44ab      	add	fp, r5
 801d868:	d1f1      	bne.n	801d84e <lv_roller_set_options.part.0+0x78>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801d86a:	44ba      	add	sl, r7
        lv_label_set_text(label, opt_extra);
 801d86c:	4639      	mov	r1, r7
 801d86e:	4630      	mov	r0, r6
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801d870:	f80a 8c01 	strb.w	r8, [sl, #-1]
        lv_label_set_text(label, opt_extra);
 801d874:	f7ff fbb0 	bl	801cfd8 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 801d878:	4638      	mov	r0, r7
 801d87a:	f7f9 fd91 	bl	80173a0 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801d87e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 801d880:	4620      	mov	r0, r4
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801d882:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801d886:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801d88a:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801d88c:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 801d88e:	f7ff ff5b 	bl	801d748 <inf_normalize>
 801d892:	e7bf      	b.n	801d814 <lv_roller_set_options.part.0+0x3e>

0801d894 <lv_roller_constructor>:
{
 801d894:	b538      	push	{r3, r4, r5, lr}
    roller->option_cnt = 0;
 801d896:	2500      	movs	r5, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801d898:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
{
 801d89c:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801d89e:	f365 0300 	bfi	r3, r5, #0, #1
    roller->option_cnt = 0;
 801d8a2:	624d      	str	r5, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801d8a4:	4620      	mov	r0, r4
    roller->sel_opt_id_ori = 0;
 801d8a6:	850d      	strh	r5, [r1, #40]	; 0x28
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801d8a8:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801d8ac:	2110      	movs	r1, #16
 801d8ae:	f7e6 f866 	bl	800397e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801d8b2:	4620      	mov	r0, r4
 801d8b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d8b8:	f7e6 f861 	bl	800397e <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 801d8bc:	4621      	mov	r1, r4
 801d8be:	4806      	ldr	r0, [pc, #24]	; (801d8d8 <lv_roller_constructor+0x44>)
 801d8c0:	f7e6 fb98 	bl	8003ff4 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 801d8c4:	f7e6 fc23 	bl	800410e <lv_obj_class_init_obj>
    LV_ASSERT_NULL(options);
 801d8c8:	462a      	mov	r2, r5
 801d8ca:	4620      	mov	r0, r4
 801d8cc:	4903      	ldr	r1, [pc, #12]	; (801d8dc <lv_roller_constructor+0x48>)
}
 801d8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d8d2:	f7ff bf80 	b.w	801d7d6 <lv_roller_set_options.part.0>
 801d8d6:	bf00      	nop
 801d8d8:	0802a0a8 	.word	0x0802a0a8
 801d8dc:	0802a05c 	.word	0x0802a05c

0801d8e0 <get_selected_label_width>:
{
 801d8e0:	b570      	push	{r4, r5, r6, lr}
 801d8e2:	b088      	sub	sp, #32
 801d8e4:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 801d8e6:	f7ff ff24 	bl	801d732 <get_label>
    if(label == NULL) return 0;
 801d8ea:	4604      	mov	r4, r0
 801d8ec:	b1f8      	cbz	r0, 801d92e <get_selected_label_width+0x4e>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 801d8ee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801d8f2:	4628      	mov	r0, r5
 801d8f4:	f7ff ff17 	bl	801d726 <lv_obj_get_style_text_font>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801d8f8:	f241 425a 	movw	r2, #5210	; 0x145a
 801d8fc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801d900:	4606      	mov	r6, r0
 801d902:	4628      	mov	r0, r5
 801d904:	f7e9 fb48 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d908:	b203      	sxth	r3, r0
    const char * txt = lv_label_get_text(label);
 801d90a:	4620      	mov	r0, r4
 801d90c:	9305      	str	r3, [sp, #20]
 801d90e:	f7ff fc15 	bl	801d13c <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801d912:	2200      	movs	r2, #0
    const char * txt = lv_label_get_text(label);
 801d914:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801d916:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801d91a:	9b05      	ldr	r3, [sp, #20]
 801d91c:	9200      	str	r2, [sp, #0]
 801d91e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 801d922:	a807      	add	r0, sp, #28
 801d924:	4632      	mov	r2, r6
 801d926:	f7fb fc3e 	bl	80191a6 <lv_txt_get_size>
    return size.x;
 801d92a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
}
 801d92e:	b008      	add	sp, #32
 801d930:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d934 <refr_position>:
{
 801d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d938:	b093      	sub	sp, #76	; 0x4c
 801d93a:	4605      	mov	r5, r0
 801d93c:	460f      	mov	r7, r1
    lv_obj_t * label = get_label(obj);
 801d93e:	f7ff fef8 	bl	801d732 <get_label>
    if(label == NULL) return;
 801d942:	4604      	mov	r4, r0
 801d944:	2800      	cmp	r0, #0
 801d946:	d067      	beq.n	801da18 <refr_position+0xe4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d948:	2100      	movs	r1, #0
 801d94a:	f241 425d 	movw	r2, #5213	; 0x145d
 801d94e:	f7e9 fb23 	bl	8006f98 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d952:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 801d956:	d111      	bne.n	801d97c <refr_position+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d958:	f241 426a 	movw	r2, #5226	; 0x146a
 801d95c:	4628      	mov	r0, r5
 801d95e:	f7e9 fb1b 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d962:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
 801d964:	2801      	cmp	r0, #1
 801d966:	d10f      	bne.n	801d988 <refr_position+0x54>
        lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 801d968:	4628      	mov	r0, r5
 801d96a:	f7e7 f8a4 	bl	8004ab6 <lv_obj_get_content_width>
 801d96e:	4606      	mov	r6, r0
 801d970:	4620      	mov	r0, r4
 801d972:	f7e7 f894 	bl	8004a9e <lv_obj_get_width>
 801d976:	1a30      	subs	r0, r6, r0
 801d978:	b201      	sxth	r1, r0
 801d97a:	e013      	b.n	801d9a4 <refr_position+0x70>
    switch(align) {
 801d97c:	2902      	cmp	r1, #2
 801d97e:	d005      	beq.n	801d98c <refr_position+0x58>
 801d980:	2903      	cmp	r1, #3
 801d982:	d0f1      	beq.n	801d968 <refr_position+0x34>
 801d984:	2901      	cmp	r1, #1
 801d986:	d110      	bne.n	801d9aa <refr_position+0x76>
        lv_obj_set_x(label, 0);
 801d988:	2100      	movs	r1, #0
 801d98a:	e00b      	b.n	801d9a4 <refr_position+0x70>
        lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 801d98c:	4628      	mov	r0, r5
 801d98e:	f7e7 f892 	bl	8004ab6 <lv_obj_get_content_width>
 801d992:	4606      	mov	r6, r0
 801d994:	4620      	mov	r0, r4
 801d996:	f7e7 f882 	bl	8004a9e <lv_obj_get_width>
 801d99a:	1a30      	subs	r0, r6, r0
 801d99c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d9a0:	f340 014f 	sbfx	r1, r0, #1, #16
        lv_obj_set_x(label, 0);
 801d9a4:	4620      	mov	r0, r4
 801d9a6:	f7e6 ff9d 	bl	80048e4 <lv_obj_set_x>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d9aa:	2100      	movs	r1, #0
 801d9ac:	4628      	mov	r0, r5
 801d9ae:	f7ff feba 	bl	801d726 <lv_obj_get_style_text_font>
 801d9b2:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d9b4:	4628      	mov	r0, r5
 801d9b6:	f7ff febf 	bl	801d738 <lv_obj_get_style_text_line_space.constprop.0>
 801d9ba:	4681      	mov	r9, r0
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801d9bc:	4628      	mov	r0, r5
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801d9be:	f9b6 8008 	ldrsh.w	r8, [r6, #8]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801d9c2:	f7e7 f892 	bl	8004aea <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801d9c6:	2265      	movs	r2, #101	; 0x65
 801d9c8:	4683      	mov	fp, r0
 801d9ca:	2100      	movs	r1, #0
 801d9cc:	4628      	mov	r0, r5
 801d9ce:	f7e9 fae3 	bl	8006f98 <lv_obj_get_style_prop>
 801d9d2:	4606      	mov	r6, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 801d9d4:	fa1f fa80 	uxth.w	sl, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801d9d8:	b117      	cbz	r7, 801d9e0 <refr_position+0xac>
 801d9da:	f1ba 0f00 	cmp.w	sl, #0
 801d9de:	d102      	bne.n	801d9e6 <refr_position+0xb2>
        inf_normalize(obj);
 801d9e0:	4628      	mov	r0, r5
 801d9e2:	f7ff feb1 	bl	801d748 <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d9e6:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801d9ea:	8ced      	ldrh	r5, [r5, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d9ec:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801d9f0:	44c8      	add	r8, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d9f2:	105b      	asrs	r3, r3, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801d9f4:	fb15 f508 	smulbb	r5, r5, r8
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801d9f8:	ebc3 036b 	rsb	r3, r3, fp, asr #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 801d9fc:	1b5d      	subs	r5, r3, r5
 801d9fe:	b22d      	sxth	r5, r5
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801da00:	b117      	cbz	r7, 801da08 <refr_position+0xd4>
 801da02:	f1ba 0f00 	cmp.w	sl, #0
 801da06:	d10a      	bne.n	801da1e <refr_position+0xea>
        lv_anim_del(label, set_y_anim);
 801da08:	4910      	ldr	r1, [pc, #64]	; (801da4c <refr_position+0x118>)
 801da0a:	4620      	mov	r0, r4
 801da0c:	f7f8 ff58 	bl	80168c0 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 801da10:	4629      	mov	r1, r5
 801da12:	4620      	mov	r0, r4
 801da14:	f7e6 ff84 	bl	8004920 <lv_obj_set_y>
}
 801da18:	b013      	add	sp, #76	; 0x4c
 801da1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_anim_init(&a);
 801da1e:	a801      	add	r0, sp, #4
 801da20:	b2b6      	uxth	r6, r6
 801da22:	f7f8 ff33 	bl	801688c <lv_anim_init>
    a->exec_cb = exec_cb;
 801da26:	4b09      	ldr	r3, [pc, #36]	; (801da4c <refr_position+0x118>)
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 801da28:	4620      	mov	r0, r4
    a->var = var;
 801da2a:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801da2c:	9302      	str	r3, [sp, #8]
 801da2e:	f7e7 f80f 	bl	8004a50 <lv_obj_get_y>
    a->ready_cb = ready_cb;
 801da32:	4b07      	ldr	r3, [pc, #28]	; (801da50 <refr_position+0x11c>)
 801da34:	950a      	str	r5, [sp, #40]	; 0x28
 801da36:	9304      	str	r3, [sp, #16]
    a->path_cb = path_cb;
 801da38:	4b06      	ldr	r3, [pc, #24]	; (801da54 <refr_position+0x120>)
    a->time = duration;
 801da3a:	960b      	str	r6, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 801da3c:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 801da3e:	e9cd 0008 	strd	r0, r0, [sp, #32]
        lv_anim_start(&a);
 801da42:	a801      	add	r0, sp, #4
 801da44:	f7f8 ff68 	bl	8016918 <lv_anim_start>
 801da48:	e7e6      	b.n	801da18 <refr_position+0xe4>
 801da4a:	bf00      	nop
 801da4c:	0801d721 	.word	0x0801d721
 801da50:	0801d7c7 	.word	0x0801d7c7
 801da54:	080169ed 	.word	0x080169ed

0801da58 <lv_roller_label_event>:
{
 801da58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801da5c:	4608      	mov	r0, r1
{
 801da5e:	b08e      	sub	sp, #56	; 0x38
 801da60:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801da62:	f7e4 f86b 	bl	8001b3c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 801da66:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 801da68:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 801da6a:	d11a      	bne.n	801daa2 <lv_roller_label_event+0x4a>
    lv_obj_t * label = lv_event_get_target(e);
 801da6c:	4628      	mov	r0, r5
 801da6e:	f7e4 f863 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801da72:	2c13      	cmp	r4, #19
    lv_obj_t * label = lv_event_get_target(e);
 801da74:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801da76:	d11d      	bne.n	801dab4 <lv_roller_label_event+0x5c>
        lv_coord_t * s = lv_event_get_param(e);
 801da78:	4628      	mov	r0, r5
 801da7a:	f7e4 f861 	bl	8001b40 <lv_event_get_param>
 801da7e:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 801da80:	4630      	mov	r0, r6
 801da82:	f7e9 fdd3 	bl	800762c <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 801da86:	f7ff ff2b 	bl	801d8e0 <get_selected_label_width>
 801da8a:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 801da8c:	4630      	mov	r0, r6
 801da8e:	f7e7 f806 	bl	8004a9e <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 801da92:	1a24      	subs	r4, r4, r0
 801da94:	f9b5 0000 	ldrsh.w	r0, [r5]
 801da98:	4284      	cmp	r4, r0
 801da9a:	bfb8      	it	lt
 801da9c:	4604      	movlt	r4, r0
 801da9e:	802c      	strh	r4, [r5, #0]
 801daa0:	e005      	b.n	801daae <lv_roller_label_event+0x56>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 801daa2:	4629      	mov	r1, r5
 801daa4:	4840      	ldr	r0, [pc, #256]	; (801dba8 <lv_roller_label_event+0x150>)
 801daa6:	f7e3 ffb0 	bl	8001a0a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801daaa:	2801      	cmp	r0, #1
 801daac:	d0de      	beq.n	801da6c <lv_roller_label_event+0x14>
}
 801daae:	b00e      	add	sp, #56	; 0x38
 801dab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801dab4:	2c23      	cmp	r4, #35	; 0x23
 801dab6:	d105      	bne.n	801dac4 <lv_roller_label_event+0x6c>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 801dab8:	f7e9 fdb8 	bl	800762c <lv_obj_get_parent>
 801dabc:	2100      	movs	r1, #0
 801dabe:	f7ff ff39 	bl	801d934 <refr_position>
 801dac2:	e7f4      	b.n	801daae <lv_roller_label_event+0x56>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801dac4:	2c15      	cmp	r4, #21
 801dac6:	d1f2      	bne.n	801daae <lv_roller_label_event+0x56>
    lv_obj_t * label_obj = lv_event_get_target(e);
 801dac8:	4628      	mov	r0, r5
 801daca:	f7e4 f835 	bl	8001b38 <lv_event_get_target>
 801dace:	4604      	mov	r4, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 801dad0:	f7e9 fdac 	bl	800762c <lv_obj_get_parent>
 801dad4:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 801dad6:	a806      	add	r0, sp, #24
 801dad8:	f7ec fb3a 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 801dadc:	aa06      	add	r2, sp, #24
 801dade:	2100      	movs	r1, #0
 801dae0:	4630      	mov	r0, r6
 801dae2:	f7e6 fc91 	bl	8004408 <lv_obj_init_draw_label_dsc>
    lv_coord_t font_h        = lv_font_get_line_height(font);
 801dae6:	9b06      	ldr	r3, [sp, #24]
    const lv_area_t * clip_area = lv_event_get_param(e);
 801dae8:	4628      	mov	r0, r5
    lv_coord_t line_space = label_draw_dsc.line_space;
 801daea:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
    lv_coord_t font_h        = lv_font_get_line_height(font);
 801daee:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
    const lv_area_t * clip_area = lv_event_get_param(e);
 801daf2:	f7e4 f825 	bl	8001b40 <lv_event_get_param>
 801daf6:	4607      	mov	r7, r0
    rect_area.y1 = roller->coords.y1 + (lv_obj_get_height(roller) - font_h - line_space) / 2;
 801daf8:	4630      	mov	r0, r6
 801dafa:	8af5      	ldrh	r5, [r6, #22]
 801dafc:	f7e6 ffd5 	bl	8004aaa <lv_obj_get_height>
 801db00:	eba0 030a 	sub.w	r3, r0, sl
    if((font_h & 0x1) && (line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801db04:	f01a 0f01 	tst.w	sl, #1
 801db08:	fa1f f88a 	uxth.w	r8, sl
    rect_area.y1 = roller->coords.y1 + (lv_obj_get_height(roller) - font_h - line_space) / 2;
 801db0c:	eba3 0309 	sub.w	r3, r3, r9
 801db10:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801db14:	eb05 0363 	add.w	r3, r5, r3, asr #1
 801db18:	b29a      	uxth	r2, r3
 801db1a:	b21d      	sxth	r5, r3
    if((font_h & 0x1) && (line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801db1c:	d005      	beq.n	801db2a <lv_roller_label_event+0xd2>
 801db1e:	f019 0f01 	tst.w	r9, #1
 801db22:	bf1c      	itt	ne
 801db24:	f102 35ff 	addne.w	r5, r2, #4294967295
 801db28:	b22d      	sxthne	r5, r5
    lv_obj_get_coords(roller, &roller_coords);
 801db2a:	a902      	add	r1, sp, #8
 801db2c:	4630      	mov	r0, r6
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801db2e:	f109 39ff 	add.w	r9, r9, #4294967295
    lv_obj_get_coords(roller, &roller_coords);
 801db32:	f7e6 ff64 	bl	80049fe <lv_obj_get_coords>
    clip2.x1 = label_obj->coords.x1;
 801db36:	6962      	ldr	r2, [r4, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db38:	4639      	mov	r1, r7
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801db3a:	44c8      	add	r8, r9
    clip2.x2 = label_obj->coords.x2;
 801db3c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    clip2.x1 = label_obj->coords.x1;
 801db40:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db42:	aa04      	add	r2, sp, #16
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801db44:	44a8      	add	r8, r5
    clip2.x2 = label_obj->coords.x2;
 801db46:	f8ad 3014 	strh.w	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db4a:	4610      	mov	r0, r2
    clip2.y2 = rect_area.y1;
 801db4c:	f8ad 5016 	strh.w	r5, [sp, #22]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801db50:	fa0f f888 	sxth.w	r8, r8
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db54:	f7f8 ffc7 	bl	8016ae6 <_lv_area_intersect>
 801db58:	b158      	cbz	r0, 801db72 <lv_roller_label_event+0x11a>
        lv_draw_label(&label_obj->coords, &clip2, &label_draw_dsc, lv_label_get_text(label_obj), NULL);
 801db5a:	4620      	mov	r0, r4
 801db5c:	f7ff faee 	bl	801d13c <lv_label_get_text>
 801db60:	2200      	movs	r2, #0
 801db62:	4603      	mov	r3, r0
 801db64:	a904      	add	r1, sp, #16
 801db66:	9200      	str	r2, [sp, #0]
 801db68:	f104 0014 	add.w	r0, r4, #20
 801db6c:	aa06      	add	r2, sp, #24
 801db6e:	f7ec fcc7 	bl	800a500 <lv_draw_label>
    clip2.x1 = label_obj->coords.x1;
 801db72:	8aa3      	ldrh	r3, [r4, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db74:	aa04      	add	r2, sp, #16
 801db76:	4639      	mov	r1, r7
    clip2.y1 = rect_area.y2;
 801db78:	f8ad 8012 	strh.w	r8, [sp, #18]
    clip2.x1 = label_obj->coords.x1;
 801db7c:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db80:	4610      	mov	r0, r2
    clip2.x2 = label_obj->coords.x2;
 801db82:	69a3      	ldr	r3, [r4, #24]
 801db84:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801db86:	f7f8 ffae 	bl	8016ae6 <_lv_area_intersect>
 801db8a:	2800      	cmp	r0, #0
 801db8c:	d08f      	beq.n	801daae <lv_roller_label_event+0x56>
        lv_draw_label(&label_obj->coords, &clip2, &label_draw_dsc, lv_label_get_text(label_obj), NULL);
 801db8e:	4620      	mov	r0, r4
 801db90:	f7ff fad4 	bl	801d13c <lv_label_get_text>
 801db94:	2200      	movs	r2, #0
 801db96:	4603      	mov	r3, r0
 801db98:	a904      	add	r1, sp, #16
 801db9a:	9200      	str	r2, [sp, #0]
 801db9c:	f104 0014 	add.w	r0, r4, #20
 801dba0:	aa06      	add	r2, sp, #24
 801dba2:	f7ec fcad 	bl	800a500 <lv_draw_label>
}
 801dba6:	e782      	b.n	801daae <lv_roller_label_event+0x56>
 801dba8:	0802a0a8 	.word	0x0802a0a8

0801dbac <lv_roller_set_selected>:
{
 801dbac:	460b      	mov	r3, r1
 801dbae:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801dbb0:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 801dbb4:	07d2      	lsls	r2, r2, #31
{
 801dbb6:	b430      	push	{r4, r5}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801dbb8:	d50e      	bpl.n	801dbd8 <lv_roller_set_selected+0x2c>
        uint16_t page = roller->sel_opt_id / LV_ROLLER_INF_PAGES;
 801dbba:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801dbbc:	2407      	movs	r4, #7
 801dbbe:	fbb2 f5f4 	udiv	r5, r2, r4
        if(page != 0) {
 801dbc2:	2a06      	cmp	r2, #6
 801dbc4:	ea4f 04c5 	mov.w	r4, r5, lsl #3
            sel_opt_signed -= page * LV_ROLLER_INF_PAGES;
 801dbc8:	bf88      	it	hi
 801dbca:	1b2a      	subhi	r2, r5, r4
        sel_opt = page * LV_ROLLER_INF_PAGES + sel_opt_signed;
 801dbcc:	eba4 0405 	sub.w	r4, r4, r5
            sel_opt_signed -= page * LV_ROLLER_INF_PAGES;
 801dbd0:	bf88      	it	hi
 801dbd2:	189b      	addhi	r3, r3, r2
        sel_opt = page * LV_ROLLER_INF_PAGES + sel_opt_signed;
 801dbd4:	4423      	add	r3, r4
 801dbd6:	b29b      	uxth	r3, r3
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801dbd8:	8c84      	ldrh	r4, [r0, #36]	; 0x24
 801dbda:	429c      	cmp	r4, r3
 801dbdc:	bf9c      	itt	ls
 801dbde:	f104 33ff 	addls.w	r3, r4, #4294967295
 801dbe2:	b29b      	uxthls	r3, r3
}
 801dbe4:	bc30      	pop	{r4, r5}
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801dbe6:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801dbe8:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 801dbea:	f7ff bea3 	b.w	801d934 <refr_position>
	...

0801dbf0 <lv_roller_event>:
{
 801dbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801dbf4:	48c2      	ldr	r0, [pc, #776]	; (801df00 <lv_roller_event+0x310>)
{
 801dbf6:	b09c      	sub	sp, #112	; 0x70
 801dbf8:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801dbfa:	f7e3 ff06 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801dbfe:	2801      	cmp	r0, #1
 801dc00:	d111      	bne.n	801dc26 <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801dc02:	4630      	mov	r0, r6
 801dc04:	f7e3 ff9a 	bl	8001b3c <lv_event_get_code>
 801dc08:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801dc0a:	4630      	mov	r0, r6
 801dc0c:	f7e3 ff94 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801dc10:	2d26      	cmp	r5, #38	; 0x26
    lv_obj_t * obj = lv_event_get_target(e);
 801dc12:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801dc14:	d10a      	bne.n	801dc2c <lv_roller_event+0x3c>
        lv_point_t * p = lv_event_get_param(e);
 801dc16:	4630      	mov	r0, r6
 801dc18:	f7e3 ff92 	bl	8001b40 <lv_event_get_param>
 801dc1c:	4605      	mov	r5, r0
        p->x =  get_selected_label_width(obj);
 801dc1e:	4620      	mov	r0, r4
 801dc20:	f7ff fe5e 	bl	801d8e0 <get_selected_label_width>
 801dc24:	8028      	strh	r0, [r5, #0]
}
 801dc26:	b01c      	add	sp, #112	; 0x70
 801dc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801dc2c:	2d24      	cmp	r5, #36	; 0x24
 801dc2e:	d10c      	bne.n	801dc4a <lv_roller_event+0x5a>
        lv_obj_t * label = get_label(obj);
 801dc30:	f7ff fd7f 	bl	801d732 <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 801dc34:	b118      	cbz	r0, 801dc3e <lv_roller_event+0x4e>
 801dc36:	2200      	movs	r2, #0
 801dc38:	4629      	mov	r1, r5
 801dc3a:	f7e3 ff5d 	bl	8001af8 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 801dc3e:	4620      	mov	r0, r4
 801dc40:	f7e6 ffbd 	bl	8004bbe <lv_obj_refresh_self_size>
        refr_position(obj, false);
 801dc44:	2100      	movs	r1, #0
                    refr_position(obj, true);
 801dc46:	4620      	mov	r0, r4
 801dc48:	e002      	b.n	801dc50 <lv_roller_event+0x60>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801dc4a:	2d23      	cmp	r5, #35	; 0x23
 801dc4c:	d103      	bne.n	801dc56 <lv_roller_event+0x66>
        refr_position(obj, false);
 801dc4e:	2100      	movs	r1, #0
 801dc50:	f7ff fe70 	bl	801d934 <refr_position>
 801dc54:	e7e7      	b.n	801dc26 <lv_roller_event+0x36>
    else if(code == LV_EVENT_PRESSED) {
 801dc56:	2d01      	cmp	r5, #1
 801dc58:	d10b      	bne.n	801dc72 <lv_roller_event+0x82>
        roller->moved = 0;
 801dc5a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 801dc5e:	f36f 0341 	bfc	r3, #1, #1
 801dc62:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 801dc66:	f7ff fd64 	bl	801d732 <get_label>
 801dc6a:	49a6      	ldr	r1, [pc, #664]	; (801df04 <lv_roller_event+0x314>)
 801dc6c:	f7f8 fe28 	bl	80168c0 <lv_anim_del>
 801dc70:	e7d9      	b.n	801dc26 <lv_roller_event+0x36>
    else if(code == LV_EVENT_PRESSING) {
 801dc72:	2d02      	cmp	r5, #2
 801dc74:	d11c      	bne.n	801dcb0 <lv_roller_event+0xc0>
        lv_indev_t * indev = lv_indev_get_act();
 801dc76:	f7e4 f9d5 	bl	8002024 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 801dc7a:	a90f      	add	r1, sp, #60	; 0x3c
 801dc7c:	f7e4 fa61 	bl	8002142 <lv_indev_get_vect>
        if(p.y) {
 801dc80:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d0ce      	beq.n	801dc26 <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 801dc88:	4620      	mov	r0, r4
 801dc8a:	f7ff fd52 	bl	801d732 <get_label>
 801dc8e:	4605      	mov	r5, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 801dc90:	f7e6 fede 	bl	8004a50 <lv_obj_get_y>
 801dc94:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 801dc98:	4401      	add	r1, r0
 801dc9a:	4628      	mov	r0, r5
 801dc9c:	b209      	sxth	r1, r1
 801dc9e:	f7e6 fe3f 	bl	8004920 <lv_obj_set_y>
            roller->moved = 1;
 801dca2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801dca6:	f043 0302 	orr.w	r3, r3, #2
 801dcaa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 801dcae:	e7ba      	b.n	801dc26 <lv_roller_event+0x36>
    else if(code == LV_EVENT_RELEASED) {
 801dcb0:	2d08      	cmp	r5, #8
 801dcb2:	f040 8094 	bne.w	801ddde <lv_roller_event+0x1ee>
    lv_obj_t * label = get_label(obj);
 801dcb6:	f7ff fd3c 	bl	801d732 <get_label>
    if(label == NULL) return LV_RES_OK;
 801dcba:	4607      	mov	r7, r0
 801dcbc:	2800      	cmp	r0, #0
 801dcbe:	d0b2      	beq.n	801dc26 <lv_roller_event+0x36>
    lv_indev_t * indev = lv_indev_get_act();
 801dcc0:	f7e4 f9b0 	bl	8002024 <lv_indev_get_act>
 801dcc4:	4680      	mov	r8, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801dcc6:	f7e4 f9b3 	bl	8002030 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801dcca:	2804      	cmp	r0, #4
 801dccc:	d001      	beq.n	801dcd2 <lv_roller_event+0xe2>
 801dcce:	2802      	cmp	r0, #2
 801dcd0:	d10e      	bne.n	801dcf0 <lv_roller_event+0x100>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801dcd2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801dcd4:	2804      	cmp	r0, #4
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801dcd6:	8523      	strh	r3, [r4, #40]	; 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801dcd8:	d10a      	bne.n	801dcf0 <lv_roller_event+0x100>
            lv_group_t * g      = lv_obj_get_group(obj);
 801dcda:	4620      	mov	r0, r4
 801dcdc:	f7e5 fe98 	bl	8003a10 <lv_obj_get_group>
 801dce0:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 801dce2:	f7e4 f92b 	bl	8001f3c <lv_group_get_editing>
 801dce6:	b118      	cbz	r0, 801dcf0 <lv_roller_event+0x100>
                lv_group_set_editing(g, false);
 801dce8:	2100      	movs	r1, #0
 801dcea:	4628      	mov	r0, r5
 801dcec:	f7e4 f8c2 	bl	8001e74 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801dcf0:	4640      	mov	r0, r8
 801dcf2:	f7e4 f99d 	bl	8002030 <lv_indev_get_type>
 801dcf6:	2801      	cmp	r0, #1
 801dcf8:	d12e      	bne.n	801dd58 <lv_roller_event+0x168>
        if(roller->moved == 0) {
 801dcfa:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 801dcfe:	f016 0602 	ands.w	r6, r6, #2
 801dd02:	d036      	beq.n	801dd72 <lv_roller_event+0x182>
            const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801dd04:	2100      	movs	r1, #0
 801dd06:	4620      	mov	r0, r4
 801dd08:	f7ff fd0d 	bl	801d726 <lv_obj_get_style_text_font>
 801dd0c:	4605      	mov	r5, r0
            lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801dd0e:	4620      	mov	r0, r4
 801dd10:	f7ff fd12 	bl	801d738 <lv_obj_get_style_text_line_space.constprop.0>
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801dd14:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801dd18:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801dd1c:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 801dd1e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801dd22:	1af6      	subs	r6, r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801dd24:	8afd      	ldrh	r5, [r7, #22]
            lv_coord_t label_unit = font_h + line_space;
 801dd26:	4448      	add	r0, r9
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801dd28:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            lv_coord_t label_unit = font_h + line_space;
 801dd2c:	fa0f f980 	sxth.w	r9, r0
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801dd30:	4640      	mov	r0, r8
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801dd32:	eb03 0366 	add.w	r3, r3, r6, asr #1
 801dd36:	b21e      	sxth	r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801dd38:	f7e5 fc60 	bl	80035fc <lv_indev_scroll_throw_predict>
 801dd3c:	4405      	add	r5, r0
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801dd3e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            int32_t id = (mid - label_y1) / label_unit;
 801dd40:	b22d      	sxth	r5, r5
 801dd42:	1b75      	subs	r5, r6, r5
 801dd44:	fb95 f5f9 	sdiv	r5, r5, r9
            if(id < 0) id = 0;
 801dd48:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801dd4c:	429d      	cmp	r5, r3
 801dd4e:	bfa8      	it	ge
 801dd50:	f103 35ff 	addge.w	r5, r3, #4294967295
            new_opt = id;
 801dd54:	b22d      	sxth	r5, r5
 801dd56:	e02c      	b.n	801ddb2 <lv_roller_event+0x1c2>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801dd58:	4640      	mov	r0, r8
 801dd5a:	f7e4 f969 	bl	8002030 <lv_indev_get_type>
 801dd5e:	2803      	cmp	r0, #3
 801dd60:	d0cb      	beq.n	801dcfa <lv_roller_event+0x10a>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801dd62:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801dd64:	aa0f      	add	r2, sp, #60	; 0x3c
 801dd66:	211c      	movs	r1, #28
 801dd68:	4620      	mov	r0, r4
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801dd6a:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801dd6c:	f7e3 fec4 	bl	8001af8 <lv_event_send>
    return res;
 801dd70:	e759      	b.n	801dc26 <lv_roller_event+0x36>
            lv_indev_get_point(indev, &p);
 801dd72:	4640      	mov	r0, r8
 801dd74:	a90d      	add	r1, sp, #52	; 0x34
 801dd76:	f7e4 f9b6 	bl	80020e6 <lv_indev_get_point>
            p.y -= label->coords.y1;
 801dd7a:	8afa      	ldrh	r2, [r7, #22]
 801dd7c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            letter_i = lv_label_get_letter_on(label, &p);
 801dd80:	a90d      	add	r1, sp, #52	; 0x34
 801dd82:	4638      	mov	r0, r7
            new_opt = 0;
 801dd84:	4635      	mov	r5, r6
            p.y -= label->coords.y1;
 801dd86:	1a9b      	subs	r3, r3, r2
            p.x -= label->coords.x1;
 801dd88:	8aba      	ldrh	r2, [r7, #20]
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801dd8a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 801df08 <lv_roller_event+0x318>
            p.y -= label->coords.y1;
 801dd8e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            p.x -= label->coords.x1;
 801dd92:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801dd96:	1a9b      	subs	r3, r3, r2
 801dd98:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            letter_i = lv_label_get_letter_on(label, &p);
 801dd9c:	f7ff fac0 	bl	801d320 <lv_label_get_letter_on>
 801dda0:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(label);
 801dda2:	4638      	mov	r0, r7
 801dda4:	f7ff f9ca 	bl	801d13c <lv_label_get_text>
            uint32_t i_prev   = 0;
 801dda8:	4637      	mov	r7, r6
            const char * txt  = lv_label_get_text(label);
 801ddaa:	4681      	mov	r9, r0
            uint32_t i        = 0;
 801ddac:	960f      	str	r6, [sp, #60]	; 0x3c
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801ddae:	45b0      	cmp	r8, r6
 801ddb0:	d107      	bne.n	801ddc2 <lv_roller_event+0x1d2>
        if(new_opt >= 0) {
 801ddb2:	2d00      	cmp	r5, #0
 801ddb4:	dbd5      	blt.n	801dd62 <lv_roller_event+0x172>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 801ddb6:	2201      	movs	r2, #1
 801ddb8:	b2a9      	uxth	r1, r5
 801ddba:	4620      	mov	r0, r4
 801ddbc:	f7ff fef6 	bl	801dbac <lv_roller_set_selected>
 801ddc0:	e7cf      	b.n	801dd62 <lv_roller_event+0x172>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801ddc2:	f8da 3000 	ldr.w	r3, [sl]
 801ddc6:	a90f      	add	r1, sp, #60	; 0x3c
 801ddc8:	4648      	mov	r0, r9
 801ddca:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 801ddcc:	280a      	cmp	r0, #10
 801ddce:	d103      	bne.n	801ddd8 <lv_roller_event+0x1e8>
 801ddd0:	45b8      	cmp	r8, r7
 801ddd2:	bf1c      	itt	ne
 801ddd4:	3501      	addne	r5, #1
 801ddd6:	b22d      	sxthne	r5, r5
                i_prev = i;
 801ddd8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801ddda:	3601      	adds	r6, #1
 801dddc:	e7e7      	b.n	801ddae <lv_roller_event+0x1be>
    else if(code == LV_EVENT_FOCUSED) {
 801ddde:	2d0e      	cmp	r5, #14
 801dde0:	d115      	bne.n	801de0e <lv_roller_event+0x21e>
        lv_group_t * g             = lv_obj_get_group(obj);
 801dde2:	f7e5 fe15 	bl	8003a10 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801dde6:	f7e4 f8a9 	bl	8001f3c <lv_group_get_editing>
 801ddea:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801ddec:	f7e4 f91a 	bl	8002024 <lv_indev_get_act>
 801ddf0:	f7e4 f91e 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801ddf4:	2804      	cmp	r0, #4
 801ddf6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ddf8:	d107      	bne.n	801de0a <lv_roller_event+0x21a>
            if(!editing) {
 801ddfa:	b935      	cbnz	r5, 801de0a <lv_roller_event+0x21a>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801ddfc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801ddfe:	429a      	cmp	r2, r3
 801de00:	f43f af11 	beq.w	801dc26 <lv_roller_event+0x36>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 801de04:	84e2      	strh	r2, [r4, #38]	; 0x26
                    refr_position(obj, true);
 801de06:	2101      	movs	r1, #1
 801de08:	e71d      	b.n	801dc46 <lv_roller_event+0x56>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 801de0a:	8523      	strh	r3, [r4, #40]	; 0x28
 801de0c:	e70b      	b.n	801dc26 <lv_roller_event+0x36>
    else if(code == LV_EVENT_DEFOCUSED) {
 801de0e:	2d0f      	cmp	r5, #15
 801de10:	d106      	bne.n	801de20 <lv_roller_event+0x230>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801de12:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 801de14:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801de16:	429a      	cmp	r2, r3
 801de18:	f43f af05 	beq.w	801dc26 <lv_roller_event+0x36>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 801de1c:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, true);
 801de1e:	e7f2      	b.n	801de06 <lv_roller_event+0x216>
    else if(code == LV_EVENT_KEY) {
 801de20:	2d0d      	cmp	r5, #13
 801de22:	d121      	bne.n	801de68 <lv_roller_event+0x278>
        char c = *((char *)lv_event_get_param(e));
 801de24:	4630      	mov	r0, r6
 801de26:	f7e3 fe8b 	bl	8001b40 <lv_event_get_param>
 801de2a:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801de2c:	f1a3 0212 	sub.w	r2, r3, #18
 801de30:	2a01      	cmp	r2, #1
 801de32:	d80d      	bhi.n	801de50 <lv_roller_event+0x260>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 801de34:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801de36:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801de38:	3101      	adds	r1, #1
 801de3a:	4299      	cmp	r1, r3
 801de3c:	f6bf aef3 	bge.w	801dc26 <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801de40:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, true);
 801de42:	2201      	movs	r2, #1
 801de44:	b289      	uxth	r1, r1
 801de46:	4620      	mov	r0, r4
 801de48:	f7ff feb0 	bl	801dbac <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 801de4c:	8525      	strh	r5, [r4, #40]	; 0x28
 801de4e:	e6ea      	b.n	801dc26 <lv_roller_event+0x36>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801de50:	2b14      	cmp	r3, #20
 801de52:	d002      	beq.n	801de5a <lv_roller_event+0x26a>
 801de54:	2b11      	cmp	r3, #17
 801de56:	f47f aee6 	bne.w	801dc26 <lv_roller_event+0x36>
            if(roller->sel_opt_id > 0) {
 801de5a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801de5c:	2900      	cmp	r1, #0
 801de5e:	f43f aee2 	beq.w	801dc26 <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801de62:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, true);
 801de64:	3901      	subs	r1, #1
 801de66:	e7ec      	b.n	801de42 <lv_roller_event+0x252>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 801de68:	2d15      	cmp	r5, #21
 801de6a:	d002      	beq.n	801de72 <lv_roller_event+0x282>
 801de6c:	2d18      	cmp	r5, #24
 801de6e:	f47f aeda 	bne.w	801dc26 <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801de72:	4630      	mov	r0, r6
 801de74:	f7e3 fe62 	bl	8001b3c <lv_event_get_code>
 801de78:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801de7a:	4630      	mov	r0, r6
 801de7c:	f7e3 fe5c 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 801de80:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 801de82:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 801de84:	d142      	bne.n	801df0c <lv_roller_event+0x31c>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801de86:	4630      	mov	r0, r6
 801de88:	f7e3 fe5a 	bl	8001b40 <lv_event_get_param>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801de8c:	2100      	movs	r1, #0
        const lv_area_t * clip_area = lv_event_get_param(e);
 801de8e:	4606      	mov	r6, r0
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801de90:	4620      	mov	r0, r4
 801de92:	f7ff fc48 	bl	801d726 <lv_obj_get_style_text_font>
 801de96:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801de98:	4620      	mov	r0, r4
 801de9a:	f7ff fc4d 	bl	801d738 <lv_obj_get_style_text_line_space.constprop.0>
        lv_coord_t font_h        = lv_font_get_line_height(font);
 801de9e:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801dea2:	4607      	mov	r7, r0
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801dea4:	4620      	mov	r0, r4
 801dea6:	8ae5      	ldrh	r5, [r4, #22]
 801dea8:	f7e6 fdff 	bl	8004aaa <lv_obj_get_height>
 801deac:	eba0 0208 	sub.w	r2, r0, r8
        lv_obj_get_coords(obj, &roller_coords);
 801deb0:	a90d      	add	r1, sp, #52	; 0x34
 801deb2:	4620      	mov	r0, r4
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801deb4:	1bd2      	subs	r2, r2, r7
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801deb6:	3f01      	subs	r7, #1
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801deb8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801debc:	4447      	add	r7, r8
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801debe:	eb05 0562 	add.w	r5, r5, r2, asr #1
 801dec2:	b2ab      	uxth	r3, r5
 801dec4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801dec8:	443b      	add	r3, r7
 801deca:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_obj_get_coords(obj, &roller_coords);
 801dece:	f7e6 fd96 	bl	80049fe <lv_obj_get_coords>
        rect_area.x1 = roller_coords.x1;
 801ded2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
        lv_draw_rect_dsc_init(&sel_dsc);
 801ded6:	a80f      	add	r0, sp, #60	; 0x3c
        rect_area.x1 = roller_coords.x1;
 801ded8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        rect_area.x2 = roller_coords.x2;
 801dedc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801dee0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        lv_draw_rect_dsc_init(&sel_dsc);
 801dee4:	f7ee fbe8 	bl	800c6b8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 801dee8:	aa0f      	add	r2, sp, #60	; 0x3c
 801deea:	4620      	mov	r0, r4
 801deec:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801def0:	f7e6 f94e 	bl	8004190 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&rect_area, clip_area, &sel_dsc);
 801def4:	aa0f      	add	r2, sp, #60	; 0x3c
 801def6:	4631      	mov	r1, r6
 801def8:	a80b      	add	r0, sp, #44	; 0x2c
 801defa:	f7ee fbff 	bl	800c6fc <lv_draw_rect>
 801defe:	e692      	b.n	801dc26 <lv_roller_event+0x36>
 801df00:	0802a08c 	.word	0x0802a08c
 801df04:	0801d721 	.word	0x0801d721
 801df08:	20000040 	.word	0x20000040
    else if(code == LV_EVENT_DRAW_POST) {
 801df0c:	2d18      	cmp	r5, #24
 801df0e:	f47f ae8a 	bne.w	801dc26 <lv_roller_event+0x36>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801df12:	4630      	mov	r0, r6
 801df14:	f7e3 fe14 	bl	8001b40 <lv_event_get_param>
 801df18:	4606      	mov	r6, r0
        lv_draw_label_dsc_init(&label_dsc);
 801df1a:	a80f      	add	r0, sp, #60	; 0x3c
 801df1c:	f7ec f918 	bl	800a150 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 801df20:	aa0f      	add	r2, sp, #60	; 0x3c
 801df22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801df26:	4620      	mov	r0, r4
 801df28:	f7e6 fa6e 	bl	8004408 <lv_obj_init_draw_label_dsc>
        lv_coord_t bg_font_h = lv_font_get_line_height(lv_obj_get_style_text_font(obj, LV_PART_MAIN));
 801df2c:	2100      	movs	r1, #0
 801df2e:	4620      	mov	r0, r4
 801df30:	f7ff fbf9 	bl	801d726 <lv_obj_get_style_text_font>
 801df34:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801df38:	4620      	mov	r0, r4
 801df3a:	8ae5      	ldrh	r5, [r4, #22]
 801df3c:	f7e6 fdb5 	bl	8004aaa <lv_obj_get_height>
 801df40:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801df44:	1bc2      	subs	r2, r0, r7
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801df46:	a80b      	add	r0, sp, #44	; 0x2c
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801df48:	1a52      	subs	r2, r2, r1
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801df4a:	3901      	subs	r1, #1
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801df4c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801df50:	4439      	add	r1, r7
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801df52:	eb05 0562 	add.w	r5, r5, r2, asr #1
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801df56:	aa09      	add	r2, sp, #36	; 0x24
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801df58:	b2ab      	uxth	r3, r5
 801df5a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801df5e:	440b      	add	r3, r1
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801df60:	4631      	mov	r1, r6
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801df62:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        rect_area.x1 = obj->coords.x1;
 801df66:	8aa3      	ldrh	r3, [r4, #20]
 801df68:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_area.x2 = obj->coords.x2;
 801df6c:	8b23      	ldrh	r3, [r4, #24]
 801df6e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801df72:	f7f8 fdb8 	bl	8016ae6 <_lv_area_intersect>
        if(area_ok) {
 801df76:	2800      	cmp	r0, #0
 801df78:	f43f ae55 	beq.w	801dc26 <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 801df7c:	4620      	mov	r0, r4
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801df7e:	2702      	movs	r7, #2
            lv_obj_t * label = get_label(obj);
 801df80:	f7ff fbd7 	bl	801d732 <get_label>
 801df84:	4606      	mov	r6, r0
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801df86:	f7ff f8d9 	bl	801d13c <lv_label_get_text>
 801df8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df8c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 801df90:	f9bd 504e 	ldrsh.w	r5, [sp, #78]	; 0x4e
 801df94:	9007      	str	r0, [sp, #28]
 801df96:	4620      	mov	r0, r4
 801df98:	9206      	str	r2, [sp, #24]
 801df9a:	9305      	str	r3, [sp, #20]
 801df9c:	f7e6 fd7f 	bl	8004a9e <lv_obj_get_width>
 801dfa0:	9907      	ldr	r1, [sp, #28]
 801dfa2:	9500      	str	r5, [sp, #0]
 801dfa4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801dfa8:	e9cd 0701 	strd	r0, r7, [sp, #4]
 801dfac:	a808      	add	r0, sp, #32
 801dfae:	f7fb f8fa 	bl	80191a6 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	f7e6 fd79 	bl	8004aaa <lv_obj_get_height>
                    obj->coords.y1); /*label offset from the middle line of the roller*/
 801dfb8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801dfbc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801dfc0:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 801dfc4:	f340 074f 	sbfx	r7, r0, #1, #16
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801dfc8:	4630      	mov	r0, r6
 801dfca:	f7e6 fd6e 	bl	8004aaa <lv_obj_get_height>
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801dfce:	2100      	movs	r1, #0
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801dfd0:	44b8      	add	r8, r7
 801dfd2:	eba5 0508 	sub.w	r5, r5, r8
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801dfd6:	03ad      	lsls	r5, r5, #14
 801dfd8:	fb95 f5f0 	sdiv	r5, r5, r0
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801dfdc:	4620      	mov	r0, r4
 801dfde:	f7ff fba2 	bl	801d726 <lv_obj_get_style_text_font>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801dfe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            res_p.y -= corr;
 801dfe4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801dfe8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801dfec:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801dff0:	1ad2      	subs	r2, r2, r3
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801dff2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801dff6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801dffa:	443b      	add	r3, r7
            res_p.y -= corr;
 801dffc:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 801e000:	b208      	sxth	r0, r1
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801e002:	4345      	muls	r5, r0
            res_p.y -= corr;
 801e004:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            lv_draw_label(&label_sel_area, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801e008:	4630      	mov	r0, r6
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801e00a:	eb03 33a5 	add.w	r3, r3, r5, asr #14
            label_sel_y -= corr;
 801e00e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            label_sel_area.x1 = label->coords.x1;
 801e012:	8ab2      	ldrh	r2, [r6, #20]
            label_sel_area.y1 = label_sel_y;
 801e014:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801e018:	fa13 f381 	uxtah	r3, r3, r1
            label_sel_area.x1 = label->coords.x1;
 801e01c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
            label_sel_area.x2 = label->coords.x2;
 801e020:	8b32      	ldrh	r2, [r6, #24]
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801e022:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801e026:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
            label_sel_area.x2 = label->coords.x2;
 801e02a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801e02e:	f043 0302 	orr.w	r3, r3, #2
 801e032:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            lv_draw_label(&label_sel_area, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801e036:	f7ff f881 	bl	801d13c <lv_label_get_text>
 801e03a:	2200      	movs	r2, #0
 801e03c:	4603      	mov	r3, r0
 801e03e:	a90b      	add	r1, sp, #44	; 0x2c
 801e040:	a80d      	add	r0, sp, #52	; 0x34
 801e042:	9200      	str	r2, [sp, #0]
 801e044:	aa0f      	add	r2, sp, #60	; 0x3c
 801e046:	f7ec fa5b 	bl	800a500 <lv_draw_label>
 801e04a:	e5ec      	b.n	801dc26 <lv_roller_event+0x36>

0801e04c <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 801e04c:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 801e04e:	f7fc fbcc 	bl	801a7ea <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 801e052:	2801      	cmp	r0, #1
 801e054:	d002      	beq.n	801e05c <lv_slider_get_mode+0x10>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
    else return LV_SLIDER_MODE_NORMAL;
 801e056:	2802      	cmp	r0, #2
 801e058:	bf18      	it	ne
 801e05a:	2000      	movne	r0, #0
}
 801e05c:	bd08      	pop	{r3, pc}

0801e05e <lv_slider_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_slider_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e05e:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_slider_t * slider = (lv_slider_t *)obj;

    /*Initialize the allocated 'slider'*/
    slider->value_to_set = NULL;
    slider->dragging = 0;
 801e060:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
{
 801e064:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 801e066:	2500      	movs	r5, #0
    slider->dragging = 0;
 801e068:	f023 0303 	bic.w	r3, r3, #3
    slider->left_knob_focus = 0;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801e06c:	4620      	mov	r0, r4
    slider->value_to_set = NULL;
 801e06e:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0;
 801e070:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801e074:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e078:	f7e5 fc81 	bl	800397e <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801e07c:	2110      	movs	r1, #16
 801e07e:	4620      	mov	r0, r4
 801e080:	f7e5 fc7d 	bl	800397e <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801e084:	4628      	mov	r0, r5
 801e086:	f7f8 fa5d 	bl	8016544 <lv_disp_get_dpi>
 801e08a:	281d      	cmp	r0, #29
 801e08c:	dd0c      	ble.n	801e0a8 <lv_slider_constructor+0x4a>
 801e08e:	4628      	mov	r0, r5
 801e090:	f7f8 fa58 	bl	8016544 <lv_disp_get_dpi>
 801e094:	2114      	movs	r1, #20
 801e096:	300a      	adds	r0, #10
 801e098:	fb90 f1f1 	sdiv	r1, r0, r1
 801e09c:	b209      	sxth	r1, r1
 801e09e:	4620      	mov	r0, r4
}
 801e0a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801e0a4:	f7e7 b852 	b.w	800514c <lv_obj_set_ext_click_area>
 801e0a8:	2101      	movs	r1, #1
 801e0aa:	e7f8      	b.n	801e09e <lv_slider_constructor+0x40>

0801e0ac <position_knob>:
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
    }
}

static void position_knob(lv_obj_t * obj, lv_area_t * knob_area, lv_coord_t knob_size, bool hor)
{
 801e0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0b0:	460c      	mov	r4, r1
 801e0b2:	f3c2 014f 	ubfx	r1, r2, #1, #16
 801e0b6:	3a01      	subs	r2, #1
 801e0b8:	4605      	mov	r5, r0
 801e0ba:	b292      	uxth	r2, r2

    if(hor) {
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d053      	beq.n	801e168 <position_knob+0xbc>
        knob_area->x1 -= (knob_size >> 1);
 801e0c0:	8823      	ldrh	r3, [r4, #0]
 801e0c2:	1a5b      	subs	r3, r3, r1
 801e0c4:	b29b      	uxth	r3, r3
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801e0c6:	441a      	add	r2, r3
        knob_area->x1 -= (knob_size >> 1);
 801e0c8:	8023      	strh	r3, [r4, #0]
        knob_area->y1 = obj->coords.y1;
 801e0ca:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801e0ce:	80a2      	strh	r2, [r4, #4]
        knob_area->y1 = obj->coords.y1;
 801e0d0:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = obj->coords.y2;
 801e0d2:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801e0d6:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e0d8:	f241 0212 	movw	r2, #4114	; 0x1012
 801e0dc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e0e0:	4628      	mov	r0, r5
 801e0e2:	f7e8 ff59 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e0e6:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e0ea:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e0ec:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e0f0:	4628      	mov	r0, r5
 801e0f2:	f7e8 ff51 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e0f6:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e0fa:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e0fc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e100:	4628      	mov	r0, r5
 801e102:	f7e8 ff49 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e106:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e10a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e10c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e110:	4628      	mov	r0, r5
 801e112:	f7e8 ff41 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e116:	f640 020a 	movw	r2, #2058	; 0x80a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e11a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e11c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e120:	4628      	mov	r0, r5
 801e122:	f7e8 ff39 	bl	8006f98 <lv_obj_get_style_prop>
 801e126:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e128:	f640 020b 	movw	r2, #2059	; 0x80b
 801e12c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e130:	4628      	mov	r0, r5

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_KNOB);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left + transf_w;
 801e132:	fa18 f886 	uxtah	r8, r8, r6
 801e136:	f7e8 ff2f 	bl	8006f98 <lv_obj_get_style_prop>
    knob_area->x2 += knob_right + transf_w;
 801e13a:	fa1a f686 	uxtah	r6, sl, r6
 801e13e:	4603      	mov	r3, r0
    knob_area->x1 -= knob_left + transf_w;
 801e140:	8822      	ldrh	r2, [r4, #0]
    knob_area->x2 += knob_right + transf_w;
 801e142:	88a0      	ldrh	r0, [r4, #4]
    knob_area->x1 -= knob_left + transf_w;
 801e144:	eba2 0808 	sub.w	r8, r2, r8
    knob_area->y1 -= knob_top + transf_h;
 801e148:	fa17 f783 	uxtah	r7, r7, r3
    knob_area->x2 += knob_right + transf_w;
 801e14c:	4406      	add	r6, r0
    knob_area->y1 -= knob_top + transf_h;
 801e14e:	8862      	ldrh	r2, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801e150:	fa19 f083 	uxtah	r0, r9, r3
 801e154:	88e3      	ldrh	r3, [r4, #6]
    knob_area->y1 -= knob_top + transf_h;
 801e156:	1bd7      	subs	r7, r2, r7
    knob_area->x1 -= knob_left + transf_w;
 801e158:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->y2 += knob_bottom + transf_h;
 801e15c:	4403      	add	r3, r0
    knob_area->x2 += knob_right + transf_w;
 801e15e:	80a6      	strh	r6, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 801e160:	8067      	strh	r7, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801e162:	80e3      	strh	r3, [r4, #6]
}
 801e164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 801e168:	8863      	ldrh	r3, [r4, #2]
 801e16a:	1a5b      	subs	r3, r3, r1
 801e16c:	b29b      	uxth	r3, r3
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801e16e:	441a      	add	r2, r3
        knob_area->y1 -= (knob_size >> 1);
 801e170:	8063      	strh	r3, [r4, #2]
        knob_area->x1 = obj->coords.x1;
 801e172:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801e176:	80e2      	strh	r2, [r4, #6]
        knob_area->x1 = obj->coords.x1;
 801e178:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = obj->coords.x2;
 801e17a:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801e17e:	80a3      	strh	r3, [r4, #4]
 801e180:	e7aa      	b.n	801e0d8 <position_knob+0x2c>
	...

0801e184 <lv_slider_event>:
{
 801e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801e188:	48c4      	ldr	r0, [pc, #784]	; (801e49c <lv_slider_event+0x318>)
{
 801e18a:	b0b1      	sub	sp, #196	; 0xc4
 801e18c:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801e18e:	f7e3 fc3c 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801e192:	2801      	cmp	r0, #1
 801e194:	d121      	bne.n	801e1da <lv_slider_event+0x56>
    lv_event_code_t code = lv_event_get_code(e);
 801e196:	4638      	mov	r0, r7
 801e198:	f7e3 fcd0 	bl	8001b3c <lv_event_get_code>
 801e19c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e19e:	4638      	mov	r0, r7
 801e1a0:	f7e3 fcca 	bl	8001b38 <lv_event_get_target>
 801e1a4:	4604      	mov	r4, r0
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801e1a6:	f7ff ff51 	bl	801e04c <lv_slider_get_mode>
    if(code == LV_EVENT_HIT_TEST) {
 801e1aa:	2d11      	cmp	r5, #17
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801e1ac:	4606      	mov	r6, r0
    if(code == LV_EVENT_HIT_TEST) {
 801e1ae:	d117      	bne.n	801e1e0 <lv_slider_event+0x5c>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801e1b0:	4638      	mov	r0, r7
 801e1b2:	f7e3 fcc5 	bl	8001b40 <lv_event_get_param>
 801e1b6:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&slider->right_knob_area, info->point, 0);
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	6801      	ldr	r1, [r0, #0]
 801e1bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e1c0:	f7f8 fcdd 	bl	8016b7e <_lv_area_is_point_on>
 801e1c4:	4602      	mov	r2, r0
 801e1c6:	7128      	strb	r0, [r5, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 801e1c8:	b938      	cbnz	r0, 801e1da <lv_slider_event+0x56>
 801e1ca:	2e02      	cmp	r6, #2
 801e1cc:	d105      	bne.n	801e1da <lv_slider_event+0x56>
            info->res = _lv_area_is_point_on(&slider->left_knob_area, info->point, 0);
 801e1ce:	6829      	ldr	r1, [r5, #0]
 801e1d0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801e1d4:	f7f8 fcd3 	bl	8016b7e <_lv_area_is_point_on>
 801e1d8:	7128      	strb	r0, [r5, #4]
}
 801e1da:	b031      	add	sp, #196	; 0xc4
 801e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_PRESSED) {
 801e1e0:	2d01      	cmp	r5, #1
 801e1e2:	f040 808a 	bne.w	801e2fa <lv_slider_event+0x176>
        lv_obj_invalidate(obj);
 801e1e6:	4620      	mov	r0, r4
 801e1e8:	f7e6 fdae 	bl	8004d48 <lv_obj_invalidate>
        slider->dragging = true;
 801e1ec:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801e1f0:	2e01      	cmp	r6, #1
        slider->dragging = true;
 801e1f2:	f043 0301 	orr.w	r3, r3, #1
 801e1f6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801e1fa:	d802      	bhi.n	801e202 <lv_slider_event+0x7e>
                    slider->value_to_set = &slider->bar.cur_value;
 801e1fc:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801e200:	e053      	b.n	801e2aa <lv_slider_event+0x126>
        else if(type == LV_SLIDER_MODE_RANGE) {
 801e202:	2e02      	cmp	r6, #2
 801e204:	d1e9      	bne.n	801e1da <lv_slider_event+0x56>
            lv_indev_get_point(lv_indev_get_act(), &p);
 801e206:	f7e3 ff0d 	bl	8002024 <lv_indev_get_act>
 801e20a:	a91e      	add	r1, sp, #120	; 0x78
 801e20c:	f7e3 ff6b 	bl	80020e6 <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801e210:	4620      	mov	r0, r4
 801e212:	f7e6 fc44 	bl	8004a9e <lv_obj_get_width>
 801e216:	4606      	mov	r6, r0
 801e218:	4620      	mov	r0, r4
 801e21a:	f7e6 fc46 	bl	8004aaa <lv_obj_get_height>
 801e21e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e220:	f241 426a 	movw	r2, #5226	; 0x146a
 801e224:	2100      	movs	r1, #0
 801e226:	4620      	mov	r0, r4
 801e228:	f7e8 feb6 	bl	8006f98 <lv_obj_get_style_prop>
            if(hor) {
 801e22c:	42ae      	cmp	r6, r5
 801e22e:	db46      	blt.n	801e2be <lv_slider_event+0x13a>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801e230:	b2c0      	uxtb	r0, r0
 801e232:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 801e236:	2801      	cmp	r0, #1
 801e238:	d02d      	beq.n	801e296 <lv_slider_event+0x112>
 801e23a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801e23e:	428b      	cmp	r3, r1
 801e240:	dbdc      	blt.n	801e1fc <lv_slider_event+0x78>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801e242:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801e246:	428b      	cmp	r3, r1
 801e248:	dc2d      	bgt.n	801e2a6 <lv_slider_event+0x122>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e24a:	f9b4 2060 	ldrsh.w	r2, [r4, #96]	; 0x60
 801e24e:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e252:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e256:	1a80      	subs	r0, r0, r2
 801e258:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e25c:	eb02 0260 	add.w	r2, r2, r0, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e260:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 801e264:	1ac0      	subs	r0, r0, r3
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e266:	1a52      	subs	r2, r2, r1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e268:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e26c:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e26e:	eb03 0360 	add.w	r3, r3, r0, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801e272:	bfb8      	it	lt
 801e274:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801e276:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e278:	2b00      	cmp	r3, #0
                    if(dist_right < dist_left) {
 801e27a:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e27c:	bfb8      	it	lt
 801e27e:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 801e280:	b21b      	sxth	r3, r3
 801e282:	429a      	cmp	r2, r3
 801e284:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e288:	dd11      	ble.n	801e2ae <lv_slider_event+0x12a>
                        slider->value_to_set = &slider->bar.cur_value;
 801e28a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801e28e:	6722      	str	r2, [r4, #112]	; 0x70
            slider->left_knob_focus = 0;
 801e290:	f36f 0341 	bfc	r3, #1, #1
 801e294:	e010      	b.n	801e2b8 <lv_slider_event+0x134>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801e296:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801e29a:	428b      	cmp	r3, r1
 801e29c:	dcae      	bgt.n	801e1fc <lv_slider_event+0x78>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801e29e:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 801e2a2:	428b      	cmp	r3, r1
 801e2a4:	dad1      	bge.n	801e24a <lv_slider_event+0xc6>
                    slider->value_to_set = &slider->bar.start_value;
 801e2a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e2aa:	6723      	str	r3, [r4, #112]	; 0x70
 801e2ac:	e795      	b.n	801e1da <lv_slider_event+0x56>
                        slider->value_to_set = &slider->bar.start_value;
 801e2ae:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801e2b2:	6722      	str	r2, [r4, #112]	; 0x70
                        slider->left_knob_focus = 1;
 801e2b4:	f043 0302 	orr.w	r3, r3, #2
 801e2b8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 801e2bc:	e78d      	b.n	801e1da <lv_slider_event+0x56>
                if(p.y < slider->right_knob_area.y1) {
 801e2be:	f9bd 007a 	ldrsh.w	r0, [sp, #122]	; 0x7a
 801e2c2:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 801e2c6:	4298      	cmp	r0, r3
 801e2c8:	db98      	blt.n	801e1fc <lv_slider_event+0x78>
                else if(p.y > slider->left_knob_area.y2) {
 801e2ca:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 801e2ce:	4288      	cmp	r0, r1
 801e2d0:	dce9      	bgt.n	801e2a6 <lv_slider_event+0x122>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e2d2:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801e2d6:	1a89      	subs	r1, r1, r2
 801e2d8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801e2dc:	eb02 0261 	add.w	r2, r2, r1, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e2e0:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 801e2e4:	1ac9      	subs	r1, r1, r3
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e2e6:	1a12      	subs	r2, r2, r0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e2e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e2ec:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e2ee:	eb03 0361 	add.w	r3, r3, r1, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801e2f2:	bfb8      	it	lt
 801e2f4:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801e2f6:	1a1b      	subs	r3, r3, r0
 801e2f8:	e7be      	b.n	801e278 <lv_slider_event+0xf4>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 801e2fa:	2d02      	cmp	r5, #2
 801e2fc:	f040 8087 	bne.w	801e40e <lv_slider_event+0x28a>
 801e300:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e302:	2b00      	cmp	r3, #0
 801e304:	f43f af69 	beq.w	801e1da <lv_slider_event+0x56>
        lv_indev_t * indev = lv_indev_get_act();
 801e308:	f7e3 fe8c 	bl	8002024 <lv_indev_get_act>
 801e30c:	4605      	mov	r5, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 801e30e:	f7e3 fe8f 	bl	8002030 <lv_indev_get_type>
 801e312:	2801      	cmp	r0, #1
 801e314:	f47f af61 	bne.w	801e1da <lv_slider_event+0x56>
        lv_indev_get_point(indev, &p);
 801e318:	4628      	mov	r0, r5
 801e31a:	a91e      	add	r1, sp, #120	; 0x78
 801e31c:	f7e3 fee3 	bl	80020e6 <lv_indev_get_point>
 801e320:	f241 426a 	movw	r2, #5226	; 0x146a
 801e324:	2100      	movs	r1, #0
 801e326:	4620      	mov	r0, r4
 801e328:	f7e8 fe36 	bl	8006f98 <lv_obj_get_style_prop>
 801e32c:	4682      	mov	sl, r0
        lv_coord_t w = lv_obj_get_width(obj);
 801e32e:	4620      	mov	r0, r4
 801e330:	f7e6 fbb5 	bl	8004a9e <lv_obj_get_width>
 801e334:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 801e336:	4620      	mov	r0, r4
 801e338:	f7e6 fbb7 	bl	8004aaa <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e33c:	f241 0212 	movw	r2, #4114	; 0x1012
 801e340:	4605      	mov	r5, r0
 801e342:	2100      	movs	r1, #0
 801e344:	4620      	mov	r0, r4
 801e346:	f7e8 fe27 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e34a:	f241 0213 	movw	r2, #4115	; 0x1013
 801e34e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e350:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e352:	4620      	mov	r0, r4
 801e354:	f7e8 fe20 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e358:	f241 0210 	movw	r2, #4112	; 0x1010
 801e35c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e35e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e360:	4620      	mov	r0, r4
 801e362:	f7e8 fe19 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e366:	f241 0211 	movw	r2, #4113	; 0x1011
 801e36a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e36c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e36e:	4620      	mov	r0, r4
 801e370:	f7e8 fe12 	bl	8006f98 <lv_obj_get_style_prop>
        if(w >= h) {
 801e374:	42ae      	cmp	r6, r5
        int32_t range = slider->bar.max_value - slider->bar.min_value;
 801e376:	e9d4 1c0a 	ldrd	r1, ip, [r4, #40]	; 0x28
 801e37a:	ebac 0201 	sub.w	r2, ip, r1
        if(w >= h) {
 801e37e:	db38      	blt.n	801e3f2 <lv_slider_event+0x26e>
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e380:	eb07 0308 	add.w	r3, r7, r8
            if(base_dir == LV_BASE_DIR_RTL) {
 801e384:	fa5f fa8a 	uxtb.w	sl, sl
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e388:	1af6      	subs	r6, r6, r3
            if(base_dir == LV_BASE_DIR_RTL) {
 801e38a:	f1ba 0f01 	cmp.w	sl, #1
 801e38e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
            lv_coord_t indic_w = w - bg_left - bg_right;
 801e392:	b236      	sxth	r6, r6
            if(base_dir == LV_BASE_DIR_RTL) {
 801e394:	d127      	bne.n	801e3e6 <lv_slider_event+0x262>
                new_value = (obj->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 801e396:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 801e39a:	fa0f f888 	sxth.w	r8, r8
 801e39e:	eba0 0808 	sub.w	r8, r0, r8
 801e3a2:	eba8 0303 	sub.w	r3, r8, r3
            new_value = (new_value * range) / indic_w;
 801e3a6:	4353      	muls	r3, r2
 801e3a8:	fb93 f3f6 	sdiv	r3, r3, r6
        if(slider->value_to_set == &slider->bar.start_value) {
 801e3ac:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801e3ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
            new_value += slider->bar.min_value;
 801e3b2:	440b      	add	r3, r1
        if(slider->value_to_set == &slider->bar.start_value) {
 801e3b4:	4282      	cmp	r2, r0
            real_min_value = slider->bar.start_value;
 801e3b6:	bf14      	ite	ne
 801e3b8:	6b21      	ldrne	r1, [r4, #48]	; 0x30
            real_max_value = slider->bar.cur_value;
 801e3ba:	f8d4 c024 	ldreq.w	ip, [r4, #36]	; 0x24
        if(new_value < real_min_value) new_value = real_min_value;
 801e3be:	428b      	cmp	r3, r1
 801e3c0:	db03      	blt.n	801e3ca <lv_slider_event+0x246>
        else if(new_value > real_max_value) new_value = real_max_value;
 801e3c2:	4563      	cmp	r3, ip
 801e3c4:	bfa8      	it	ge
 801e3c6:	4663      	movge	r3, ip
 801e3c8:	4619      	mov	r1, r3
        if(*slider->value_to_set != new_value) {
 801e3ca:	6813      	ldr	r3, [r2, #0]
 801e3cc:	428b      	cmp	r3, r1
 801e3ce:	f43f af04 	beq.w	801e1da <lv_slider_event+0x56>
            lv_obj_invalidate(obj);
 801e3d2:	4620      	mov	r0, r4
            *slider->value_to_set = new_value;
 801e3d4:	6011      	str	r1, [r2, #0]
            lv_obj_invalidate(obj);
 801e3d6:	f7e6 fcb7 	bl	8004d48 <lv_obj_invalidate>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801e3da:	2200      	movs	r2, #0
 801e3dc:	211c      	movs	r1, #28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801e3de:	4620      	mov	r0, r4
 801e3e0:	f7e3 fb8a 	bl	8001af8 <lv_event_send>
}
 801e3e4:	e6f9      	b.n	801e1da <lv_slider_event+0x56>
                new_value = p.x - (obj->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801e3e6:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801e3ea:	fa00 f787 	sxtah	r7, r0, r7
 801e3ee:	1bdb      	subs	r3, r3, r7
 801e3f0:	e7d9      	b.n	801e3a6 <lv_slider_event+0x222>
            new_value = p.y - (obj->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 801e3f2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801e3f6:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
 801e3fa:	fa03 f380 	sxtah	r3, r3, r0
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e3fe:	4448      	add	r0, r9
            new_value = (-new_value * range) / indic_h;
 801e400:	1b9b      	subs	r3, r3, r6
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801e402:	1a2d      	subs	r5, r5, r0
            new_value = (-new_value * range) / indic_h;
 801e404:	4353      	muls	r3, r2
 801e406:	b22a      	sxth	r2, r5
 801e408:	fb93 f3f2 	sdiv	r3, r3, r2
 801e40c:	e7ce      	b.n	801e3ac <lv_slider_event+0x228>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801e40e:	2d08      	cmp	r5, #8
 801e410:	d001      	beq.n	801e416 <lv_slider_event+0x292>
 801e412:	2d03      	cmp	r5, #3
 801e414:	d12e      	bne.n	801e474 <lv_slider_event+0x2f0>
        slider->dragging = false;
 801e416:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        slider->value_to_set = NULL;
 801e41a:	2600      	movs	r6, #0
        lv_obj_invalidate(obj);
 801e41c:	4620      	mov	r0, r4
        slider->dragging = false;
 801e41e:	f36f 0300 	bfc	r3, #0, #1
        slider->value_to_set = NULL;
 801e422:	6726      	str	r6, [r4, #112]	; 0x70
        slider->dragging = false;
 801e424:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(obj);
 801e428:	f7e6 fc8e 	bl	8004d48 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 801e42c:	4620      	mov	r0, r4
 801e42e:	f7e5 faef 	bl	8003a10 <lv_obj_get_group>
 801e432:	4605      	mov	r5, r0
        bool editing     = lv_group_get_editing(g);
 801e434:	f7e3 fd82 	bl	8001f3c <lv_group_get_editing>
 801e438:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e43a:	f7e3 fdf3 	bl	8002024 <lv_indev_get_act>
 801e43e:	f7e3 fdf7 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801e442:	2804      	cmp	r0, #4
 801e444:	f47f aec9 	bne.w	801e1da <lv_slider_event+0x56>
            if(editing) {
 801e448:	2f00      	cmp	r7, #0
 801e44a:	f43f aec6 	beq.w	801e1da <lv_slider_event+0x56>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 801e44e:	4620      	mov	r0, r4
 801e450:	f7ff fdfc 	bl	801e04c <lv_slider_get_mode>
 801e454:	2802      	cmp	r0, #2
 801e456:	d108      	bne.n	801e46a <lv_slider_event+0x2e6>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 801e458:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e45c:	079f      	lsls	r7, r3, #30
 801e45e:	f57f af29 	bpl.w	801e2b4 <lv_slider_event+0x130>
                        slider->left_knob_focus = 0;
 801e462:	f366 0341 	bfi	r3, r6, #1, #1
 801e466:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    lv_group_set_editing(g, false);
 801e46a:	4631      	mov	r1, r6
 801e46c:	4628      	mov	r0, r5
 801e46e:	f7e3 fd01 	bl	8001e74 <lv_group_set_editing>
 801e472:	e6b2      	b.n	801e1da <lv_slider_event+0x56>
    else if(code == LV_EVENT_FOCUSED) {
 801e474:	2d0e      	cmp	r5, #14
 801e476:	d10b      	bne.n	801e490 <lv_slider_event+0x30c>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801e478:	f7e3 fdd4 	bl	8002024 <lv_indev_get_act>
 801e47c:	f7e3 fdd8 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801e480:	2804      	cmp	r0, #4
 801e482:	d002      	beq.n	801e48a <lv_slider_event+0x306>
 801e484:	2802      	cmp	r0, #2
 801e486:	f47f aea8 	bne.w	801e1da <lv_slider_event+0x56>
            slider->left_knob_focus = 0;
 801e48a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e48e:	e6ff      	b.n	801e290 <lv_slider_event+0x10c>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801e490:	2d23      	cmp	r5, #35	; 0x23
 801e492:	d105      	bne.n	801e4a0 <lv_slider_event+0x31c>
        lv_obj_refresh_ext_draw_size(obj);
 801e494:	4620      	mov	r0, r4
 801e496:	f7e6 f96c 	bl	8004772 <lv_obj_refresh_ext_draw_size>
 801e49a:	e69e      	b.n	801e1da <lv_slider_event+0x56>
 801e49c:	0802a0c4 	.word	0x0802a0c4
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e4a0:	2d13      	cmp	r5, #19
 801e4a2:	d17c      	bne.n	801e59e <lv_slider_event+0x41a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e4a4:	f241 0212 	movw	r2, #4114	; 0x1012
 801e4a8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e4ac:	4620      	mov	r0, r4
 801e4ae:	f7e8 fd73 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e4b2:	f241 0213 	movw	r2, #4115	; 0x1013
 801e4b6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e4ba:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e4be:	4620      	mov	r0, r4
 801e4c0:	f7e8 fd6a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e4c4:	f241 0210 	movw	r2, #4112	; 0x1010
 801e4c8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e4cc:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e4ce:	4620      	mov	r0, r4
 801e4d0:	f7e8 fd62 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e4d4:	f241 0211 	movw	r2, #4113	; 0x1011
 801e4d8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e4dc:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	f7e8 fd59 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801e4e6:	f640 020e 	movw	r2, #2062	; 0x80e
 801e4ea:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e4ee:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f7e8 fd50 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e4f8:	f640 020a 	movw	r2, #2058	; 0x80a
 801e4fc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e500:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801e504:	4620      	mov	r0, r4
 801e506:	f7e8 fd47 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e50a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e50e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e510:	f640 020b 	movw	r2, #2059	; 0x80b
 801e514:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801e516:	9300      	str	r3, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801e518:	f7e8 fd3e 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e51c:	b202      	sxth	r2, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801e51e:	4620      	mov	r0, r4
 801e520:	9201      	str	r2, [sp, #4]
 801e522:	f7e6 fabc 	bl	8004a9e <lv_obj_get_width>
 801e526:	9b00      	ldr	r3, [sp, #0]
 801e528:	005e      	lsls	r6, r3, #1
 801e52a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e52e:	4620      	mov	r0, r4
 801e530:	9300      	str	r3, [sp, #0]
 801e532:	f7e6 faba 	bl	8004aaa <lv_obj_get_height>
 801e536:	9a01      	ldr	r2, [sp, #4]
 801e538:	9b00      	ldr	r3, [sp, #0]
 801e53a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e53e:	0051      	lsls	r1, r2, #1
 801e540:	4283      	cmp	r3, r0
 801e542:	da25      	bge.n	801e590 <lv_slider_event+0x40c>
 801e544:	4620      	mov	r0, r4
 801e546:	f7e6 faaa 	bl	8004a9e <lv_obj_get_width>
 801e54a:	4430      	add	r0, r6
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e54c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801e550:	f340 064f 	sbfx	r6, r0, #1, #16
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e554:	4620      	mov	r0, r4
 801e556:	f7e6 f88e 	bl	8004676 <lv_obj_calculate_ext_draw_size>
 801e55a:	4604      	mov	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 801e55c:	4638      	mov	r0, r7
        knob_size = (knob_size * zoom) >> 8;
 801e55e:	fb06 f608 	mul.w	r6, r6, r8
        lv_coord_t * s = lv_event_get_param(e);
 801e562:	f7e3 faed 	bl	8001b40 <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801e566:	455d      	cmp	r5, fp
        *s  = LV_MAX(*s, knob_size);
 801e568:	f9b0 1000 	ldrsh.w	r1, [r0]
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801e56c:	bfb8      	it	lt
 801e56e:	465d      	movlt	r5, fp
 801e570:	4555      	cmp	r5, sl
 801e572:	bfb8      	it	lt
 801e574:	4655      	movlt	r5, sl
 801e576:	454d      	cmp	r5, r9
 801e578:	bfb8      	it	lt
 801e57a:	464d      	movlt	r5, r9
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e57c:	3502      	adds	r5, #2
 801e57e:	192b      	adds	r3, r5, r4
 801e580:	eb03 2326 	add.w	r3, r3, r6, asr #8
        *s  = LV_MAX(*s, knob_size);
 801e584:	b21b      	sxth	r3, r3
 801e586:	428b      	cmp	r3, r1
 801e588:	bfb8      	it	lt
 801e58a:	460b      	movlt	r3, r1
 801e58c:	8003      	strh	r3, [r0, #0]
 801e58e:	e624      	b.n	801e1da <lv_slider_event+0x56>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801e590:	4620      	mov	r0, r4
 801e592:	9100      	str	r1, [sp, #0]
 801e594:	f7e6 fa89 	bl	8004aaa <lv_obj_get_height>
 801e598:	9900      	ldr	r1, [sp, #0]
 801e59a:	4408      	add	r0, r1
 801e59c:	e7d6      	b.n	801e54c <lv_slider_event+0x3c8>
    else if(code == LV_EVENT_KEY) {
 801e59e:	2d0d      	cmp	r5, #13
 801e5a0:	d130      	bne.n	801e604 <lv_slider_event+0x480>
        char c = *((char *)lv_event_get_param(e));
 801e5a2:	4638      	mov	r0, r7
 801e5a4:	f7e3 facc 	bl	8001b40 <lv_event_get_param>
 801e5a8:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801e5aa:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801e5ae:	2a11      	cmp	r2, #17
 801e5b0:	d114      	bne.n	801e5dc <lv_slider_event+0x458>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 801e5b2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 801e5b6:	4620      	mov	r0, r4
 801e5b8:	079d      	lsls	r5, r3, #30
 801e5ba:	d407      	bmi.n	801e5cc <lv_slider_event+0x448>
 801e5bc:	f7fc f901 	bl	801a7c2 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801e5c0:	2201      	movs	r2, #1
 801e5c2:	1881      	adds	r1, r0, r2
 801e5c4:	4620      	mov	r0, r4
 801e5c6:	f7fc f887 	bl	801a6d8 <lv_bar_set_value>
}
 801e5ca:	e706      	b.n	801e3da <lv_slider_event+0x256>
    return lv_bar_get_start_value(obj);
 801e5cc:	f7fc f8ff 	bl	801a7ce <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801e5d0:	2201      	movs	r2, #1
 801e5d2:	1881      	adds	r1, r0, r2
 801e5d4:	4620      	mov	r0, r4
 801e5d6:	f7fc f8cd 	bl	801a774 <lv_bar_set_start_value>
}
 801e5da:	e6fe      	b.n	801e3da <lv_slider_event+0x256>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801e5dc:	2b14      	cmp	r3, #20
 801e5de:	d002      	beq.n	801e5e6 <lv_slider_event+0x462>
 801e5e0:	2b12      	cmp	r3, #18
 801e5e2:	f47f adfa 	bne.w	801e1da <lv_slider_event+0x56>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 801e5e6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 801e5ea:	4620      	mov	r0, r4
 801e5ec:	0799      	lsls	r1, r3, #30
 801e5ee:	d404      	bmi.n	801e5fa <lv_slider_event+0x476>
 801e5f0:	f7fc f8e7 	bl	801a7c2 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801e5f4:	2201      	movs	r2, #1
 801e5f6:	1e41      	subs	r1, r0, #1
 801e5f8:	e7e4      	b.n	801e5c4 <lv_slider_event+0x440>
    return lv_bar_get_start_value(obj);
 801e5fa:	f7fc f8e8 	bl	801a7ce <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801e5fe:	2201      	movs	r2, #1
 801e600:	1e41      	subs	r1, r0, #1
 801e602:	e7e7      	b.n	801e5d4 <lv_slider_event+0x450>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801e604:	2d15      	cmp	r5, #21
 801e606:	f47f ade8 	bne.w	801e1da <lv_slider_event+0x56>
    lv_obj_t * obj = lv_event_get_target(e);
 801e60a:	4638      	mov	r0, r7
 801e60c:	f7e3 fa94 	bl	8001b38 <lv_event_get_target>
 801e610:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801e612:	4638      	mov	r0, r7
 801e614:	f7e3 fa94 	bl	8001b40 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e618:	f241 426a 	movw	r2, #5226	; 0x146a
 801e61c:	2100      	movs	r1, #0
 801e61e:	4607      	mov	r7, r0
 801e620:	4620      	mov	r0, r4
 801e622:	f7e8 fcb9 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801e626:	fa5f f880 	uxtb.w	r8, r0
    lv_coord_t objw = lv_obj_get_width(obj);
 801e62a:	4620      	mov	r0, r4
 801e62c:	f7e6 fa37 	bl	8004a9e <lv_obj_get_width>
 801e630:	4605      	mov	r5, r0
    lv_coord_t objh = lv_obj_get_height(obj);
 801e632:	4620      	mov	r0, r4
 801e634:	f7e6 fa39 	bl	8004aaa <lv_obj_get_height>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801e638:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    bool hor = objw >= objh ? true : false;
 801e63c:	4285      	cmp	r5, r0
 801e63e:	46a9      	mov	r9, r5
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801e640:	f002 0203 	and.w	r2, r2, #3
    lv_coord_t objh = lv_obj_get_height(obj);
 801e644:	4606      	mov	r6, r0
    bool hor = objw >= objh ? true : false;
 801e646:	bfb4      	ite	lt
 801e648:	f04f 0b00 	movlt.w	fp, #0
 801e64c:	f04f 0b01 	movge.w	fp, #1
    lv_coord_t knob_size = hor ? objh : objw;
 801e650:	4285      	cmp	r5, r0
 801e652:	bfa8      	it	ge
 801e654:	4681      	movge	r9, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801e656:	2a01      	cmp	r2, #1
 801e658:	fa0f f989 	sxth.w	r9, r9
 801e65c:	d106      	bne.n	801e66c <lv_slider_event+0x4e8>
 801e65e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e660:	2b00      	cmp	r3, #0
 801e662:	da03      	bge.n	801e66c <lv_slider_event+0x4e8>
 801e664:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e666:	2b00      	cmp	r3, #0
 801e668:	f300 80a3 	bgt.w	801e7b2 <lv_slider_event+0x62e>
    if(hor) {
 801e66c:	42b5      	cmp	r5, r6
 801e66e:	da05      	bge.n	801e67c <lv_slider_event+0x4f8>
                knob_area.y1 = slider->bar.indic_area.y1;
 801e670:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
                knob_area.y1 = slider->bar.indic_area.y2;
 801e672:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e676:	e008      	b.n	801e68a <lv_slider_event+0x506>
            if(slider->bar.cur_value >= 0) {
 801e678:	2b00      	cmp	r3, #0
 801e67a:	db46      	blt.n	801e70a <lv_slider_event+0x586>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir == LV_BASE_DIR_RTL, slider->bar.indic_area);
 801e67c:	f1b8 0f01 	cmp.w	r8, #1
 801e680:	d146      	bne.n	801e710 <lv_slider_event+0x58c>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801e682:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 801e686:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801e68a:	a804      	add	r0, sp, #16
    lv_area_copy(&slider->right_knob_area, &knob_area);
 801e68c:	f104 0a68 	add.w	sl, r4, #104	; 0x68
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801e690:	f7ee f812 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801e694:	aa04      	add	r2, sp, #16
 801e696:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e69a:	4620      	mov	r0, r4
 801e69c:	f7e5 fd78 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, hor);
 801e6a0:	464a      	mov	r2, r9
 801e6a2:	465b      	mov	r3, fp
 801e6a4:	a902      	add	r1, sp, #8
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	f7ff fd00 	bl	801e0ac <position_knob>
    dest->x1 = src->x1;
 801e6ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801e6b0:	4639      	mov	r1, r7
 801e6b2:	a81e      	add	r0, sp, #120	; 0x78
 801e6b4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    dest->y1 = src->y1;
 801e6b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e6bc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dest->x2 = src->x2;
 801e6c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e6c4:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    dest->y2 = src->y2;
 801e6c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801e6cc:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801e6d0:	f7e6 f842 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.id = 0;
 801e6d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801e6d8:	2300      	movs	r3, #0
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801e6da:	4620      	mov	r0, r4
    dsc.draw_area = &slider->right_knob_area;
 801e6dc:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
    dsc.id = 0;
 801e6e0:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
    dsc.rect_dsc = &knob_rect_dsc;
 801e6e4:	ab04      	add	r3, sp, #16
 801e6e6:	9320      	str	r3, [sp, #128]	; 0x80
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801e6e8:	f7ff fcb0 	bl	801e04c <lv_slider_get_mode>
 801e6ec:	2802      	cmp	r0, #2
 801e6ee:	d012      	beq.n	801e716 <lv_slider_event+0x592>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801e6f0:	aa1e      	add	r2, sp, #120	; 0x78
 801e6f2:	211a      	movs	r1, #26
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	f7e3 f9ff 	bl	8001af8 <lv_event_send>
        lv_draw_rect(&slider->right_knob_area, clip_area, &knob_rect_dsc);
 801e6fa:	aa04      	add	r2, sp, #16
 801e6fc:	4639      	mov	r1, r7
 801e6fe:	4650      	mov	r0, sl
        lv_draw_rect(&slider->left_knob_area, clip_area, &knob_rect_dsc);
 801e700:	f7ed fffc 	bl	800c6fc <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801e704:	aa1e      	add	r2, sp, #120	; 0x78
 801e706:	211b      	movs	r1, #27
 801e708:	e669      	b.n	801e3de <lv_slider_event+0x25a>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801e70a:	f1b8 0f01 	cmp.w	r8, #1
 801e70e:	d1b8      	bne.n	801e682 <lv_slider_event+0x4fe>
 801e710:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 801e714:	e7b7      	b.n	801e686 <lv_slider_event+0x502>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 801e716:	2234      	movs	r2, #52	; 0x34
 801e718:	a904      	add	r1, sp, #16
 801e71a:	a811      	add	r0, sp, #68	; 0x44
 801e71c:	f7f8 fe6c 	bl	80173f8 <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801e720:	aa1e      	add	r2, sp, #120	; 0x78
 801e722:	211a      	movs	r1, #26
 801e724:	4620      	mov	r0, r4
 801e726:	f7e3 f9e7 	bl	8001af8 <lv_event_send>
        lv_draw_rect(&slider->right_knob_area, clip_area, &knob_rect_dsc);
 801e72a:	aa04      	add	r2, sp, #16
 801e72c:	4639      	mov	r1, r7
 801e72e:	4650      	mov	r0, sl
 801e730:	f7ed ffe4 	bl	800c6fc <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801e734:	aa1e      	add	r2, sp, #120	; 0x78
 801e736:	211b      	movs	r1, #27
 801e738:	4620      	mov	r0, r4
 801e73a:	f7e3 f9dd 	bl	8001af8 <lv_event_send>
        if(hor) {
 801e73e:	42b5      	cmp	r5, r6
 801e740:	db33      	blt.n	801e7aa <lv_slider_event+0x626>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801e742:	f1b8 0f01 	cmp.w	r8, #1
 801e746:	bf14      	ite	ne
 801e748:	f9b4 3034 	ldrshne.w	r3, [r4, #52]	; 0x34
 801e74c:	f9b4 3038 	ldrsheq.w	r3, [r4, #56]	; 0x38
 801e750:	f8ad 3008 	strh.w	r3, [sp, #8]
        position_knob(obj, &knob_area, knob_size, hor);
 801e754:	465b      	mov	r3, fp
 801e756:	464a      	mov	r2, r9
 801e758:	a902      	add	r1, sp, #8
 801e75a:	4620      	mov	r0, r4
 801e75c:	f7ff fca6 	bl	801e0ac <position_knob>
    dest->x1 = src->x1;
 801e760:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801e764:	2234      	movs	r2, #52	; 0x34
 801e766:	a911      	add	r1, sp, #68	; 0x44
 801e768:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 801e76c:	a804      	add	r0, sp, #16
    dest->y1 = src->y1;
 801e76e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        lv_area_copy(&slider->left_knob_area, &knob_area);
 801e772:	f104 0560 	add.w	r5, r4, #96	; 0x60
 801e776:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    dest->x2 = src->x2;
 801e77a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e77e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    dest->y2 = src->y2;
 801e782:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801e786:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801e78a:	f7f8 fe35 	bl	80173f8 <lv_memcpy>
        dsc.rect_dsc = &knob_rect_dsc;
 801e78e:	ab04      	add	r3, sp, #16
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801e790:	aa1e      	add	r2, sp, #120	; 0x78
 801e792:	211a      	movs	r1, #26
        dsc.rect_dsc = &knob_rect_dsc;
 801e794:	9320      	str	r3, [sp, #128]	; 0x80
        dsc.id = 1;
 801e796:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801e798:	4620      	mov	r0, r4
        dsc.draw_area = &slider->left_knob_area;
 801e79a:	951f      	str	r5, [sp, #124]	; 0x7c
        dsc.id = 1;
 801e79c:	932c      	str	r3, [sp, #176]	; 0xb0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801e79e:	f7e3 f9ab 	bl	8001af8 <lv_event_send>
        lv_draw_rect(&slider->left_knob_area, clip_area, &knob_rect_dsc);
 801e7a2:	aa04      	add	r2, sp, #16
 801e7a4:	4639      	mov	r1, r7
 801e7a6:	4628      	mov	r0, r5
 801e7a8:	e7aa      	b.n	801e700 <lv_slider_event+0x57c>
            knob_area.y1 = slider->bar.indic_area.y2;
 801e7aa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801e7ac:	f8ad 300a 	strh.w	r3, [sp, #10]
 801e7b0:	e7d0      	b.n	801e754 <lv_slider_event+0x5d0>
    if(hor) {
 801e7b2:	4285      	cmp	r5, r0
 801e7b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e7b6:	f6bf af5f 	bge.w	801e678 <lv_slider_event+0x4f4>
            if(slider->bar.cur_value >= 0) {
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	f6bf af58 	bge.w	801e670 <lv_slider_event+0x4ec>
                knob_area.y1 = slider->bar.indic_area.y2;
 801e7c0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801e7c2:	e756      	b.n	801e672 <lv_slider_event+0x4ee>

0801e7c4 <lv_switch_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_switch_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e7c4:	b507      	push	{r0, r1, r2, lr}
 801e7c6:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

   lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801e7c8:	2110      	movs	r1, #16
 801e7ca:	9001      	str	r0, [sp, #4]
 801e7cc:	f7e5 f8d7 	bl	800397e <lv_obj_clear_flag>
   lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801e7d0:	9801      	ldr	r0, [sp, #4]
 801e7d2:	2108      	movs	r1, #8
 801e7d4:	f7e5 f8b0 	bl	8003938 <lv_obj_add_flag>
   lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801e7d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e7dc:	9801      	ldr	r0, [sp, #4]

   LV_TRACE_OBJ_CREATE("finished");
}
 801e7de:	b003      	add	sp, #12
 801e7e0:	f85d eb04 	ldr.w	lr, [sp], #4
   lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801e7e4:	f7e5 b8a8 	b.w	8003938 <lv_obj_add_flag>

0801e7e8 <lv_switch_event>:


static void lv_switch_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801e7ec:	489a      	ldr	r0, [pc, #616]	; (801ea58 <lv_switch_event+0x270>)
{
 801e7ee:	b091      	sub	sp, #68	; 0x44
 801e7f0:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801e7f2:	f7e3 f90a 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801e7f6:	2801      	cmp	r0, #1
 801e7f8:	d151      	bne.n	801e89e <lv_switch_event+0xb6>

    lv_event_code_t code = lv_event_get_code(e);
 801e7fa:	4630      	mov	r0, r6
 801e7fc:	f7e3 f99e 	bl	8001b3c <lv_event_get_code>
 801e800:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e802:	4630      	mov	r0, r6
 801e804:	f7e3 f998 	bl	8001b38 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e808:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801e80a:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e80c:	d150      	bne.n	801e8b0 <lv_switch_event+0xc8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e80e:	f241 0212 	movw	r2, #4114	; 0x1012
 801e812:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e816:	f7e8 fbbf 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e81a:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801e81e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e822:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e826:	4628      	mov	r0, r5
 801e828:	f7e8 fbb6 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e82c:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801e830:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e832:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e836:	4628      	mov	r0, r5
 801e838:	f7e8 fbae 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e83c:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801e840:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e844:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e848:	4628      	mov	r0, r5
 801e84a:	f7e8 fba5 	bl	8006f98 <lv_obj_get_style_prop>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        /*The smaller size is the knob diameter*/
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
        knob_size += 2;         /*For rounding error*/
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e84e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801e852:	b207      	sxth	r7, r0
 801e854:	4628      	mov	r0, r5
 801e856:	f7e5 ff0e 	bl	8004676 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801e85a:	454c      	cmp	r4, r9
 801e85c:	4623      	mov	r3, r4
 801e85e:	bfb8      	it	lt
 801e860:	464b      	movlt	r3, r9
 801e862:	4543      	cmp	r3, r8
 801e864:	bfb8      	it	lt
 801e866:	4643      	movlt	r3, r8
 801e868:	42bb      	cmp	r3, r7
 801e86a:	bfb8      	it	lt
 801e86c:	463b      	movlt	r3, r7
        knob_size += 2;         /*For rounding error*/
 801e86e:	3302      	adds	r3, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801e870:	4418      	add	r0, r3
 801e872:	b284      	uxth	r4, r0

        lv_coord_t * s = lv_event_get_param(e);
 801e874:	4630      	mov	r0, r6
 801e876:	f7e3 f963 	bl	8001b40 <lv_event_get_param>
 801e87a:	4606      	mov	r6, r0
        *s = LV_MAX(*s, knob_size);
 801e87c:	b224      	sxth	r4, r4
 801e87e:	f9b0 0000 	ldrsh.w	r0, [r0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801e882:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        *s = LV_MAX(*s, knob_size);
 801e886:	4284      	cmp	r4, r0
 801e888:	bfb8      	it	lt
 801e88a:	4604      	movlt	r4, r0
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801e88c:	4628      	mov	r0, r5
        *s = LV_MAX(*s, knob_size);
 801e88e:	8034      	strh	r4, [r6, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801e890:	f7e5 fef1 	bl	8004676 <lv_obj_calculate_ext_draw_size>
 801e894:	4284      	cmp	r4, r0
 801e896:	dd05      	ble.n	801e8a4 <lv_switch_event+0xbc>
 801e898:	f9b6 0000 	ldrsh.w	r0, [r6]
 801e89c:	8030      	strh	r0, [r6, #0]
        lv_obj_invalidate(obj);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_main(e);
    }
}
 801e89e:	b011      	add	sp, #68	; 0x44
 801e8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801e8a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801e8a8:	4628      	mov	r0, r5
 801e8aa:	f7e5 fee4 	bl	8004676 <lv_obj_calculate_ext_draw_size>
 801e8ae:	e7f5      	b.n	801e89c <lv_switch_event+0xb4>
    else if(code == LV_EVENT_CLICKED) {
 801e8b0:	2c07      	cmp	r4, #7
 801e8b2:	d10f      	bne.n	801e8d4 <lv_switch_event+0xec>
        uint32_t v = lv_obj_get_state(obj) & LV_STATE_CHECKED ? 1 : 0;
 801e8b4:	f7e5 f8aa 	bl	8003a0c <lv_obj_get_state>
 801e8b8:	f000 0001 	and.w	r0, r0, #1
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &v);
 801e8bc:	aa03      	add	r2, sp, #12
 801e8be:	211c      	movs	r1, #28
        uint32_t v = lv_obj_get_state(obj) & LV_STATE_CHECKED ? 1 : 0;
 801e8c0:	9003      	str	r0, [sp, #12]
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &v);
 801e8c2:	4628      	mov	r0, r5
 801e8c4:	f7e3 f918 	bl	8001af8 <lv_event_send>
        if(res != LV_RES_OK) return;
 801e8c8:	2801      	cmp	r0, #1
 801e8ca:	d1e8      	bne.n	801e89e <lv_switch_event+0xb6>
        lv_obj_invalidate(obj);
 801e8cc:	4628      	mov	r0, r5
 801e8ce:	f7e6 fa3b 	bl	8004d48 <lv_obj_invalidate>
 801e8d2:	e7e4      	b.n	801e89e <lv_switch_event+0xb6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801e8d4:	2c15      	cmp	r4, #21
 801e8d6:	d1e2      	bne.n	801e89e <lv_switch_event+0xb6>

static void draw_main(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801e8d8:	4630      	mov	r0, r6
 801e8da:	f7e3 f92d 	bl	8001b38 <lv_event_get_target>
 801e8de:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801e8e0:	4630      	mov	r0, r6
 801e8e2:	f7e3 f92d 	bl	8001b40 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e8e6:	f241 426a 	movw	r2, #5226	; 0x146a
 801e8ea:	2100      	movs	r1, #0
 801e8ec:	4607      	mov	r7, r0
 801e8ee:	4620      	mov	r0, r4
 801e8f0:	f7e8 fb52 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e8f4:	f241 0212 	movw	r2, #4114	; 0x1012
 801e8f8:	2100      	movs	r1, #0
    return (lv_base_dir_t)v.num;
 801e8fa:	fa5f fb80 	uxtb.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e8fe:	4620      	mov	r0, r4
 801e900:	f7e8 fb4a 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e904:	f241 0213 	movw	r2, #4115	; 0x1013
 801e908:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e90a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7e8 fb43 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e912:	f241 0210 	movw	r2, #4112	; 0x1010
 801e916:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e918:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e91a:	4620      	mov	r0, r4
 801e91c:	f7e8 fb3c 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e920:	f241 0211 	movw	r2, #4113	; 0x1011
 801e924:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e926:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e928:	4620      	mov	r0, r4
 801e92a:	f7e8 fb35 	bl	8006f98 <lv_obj_get_style_prop>
 801e92e:	4680      	mov	r8, r0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj,     LV_PART_MAIN);
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj,   LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj,       LV_PART_MAIN);
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);

    bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801e930:	4620      	mov	r0, r4
 801e932:	f7e5 f86b 	bl	8003a0c <lv_obj_get_state>
    /*Draw the indicator in checked state*/
    if(chk) {
 801e936:	f010 0901 	ands.w	r9, r0, #1
 801e93a:	d022      	beq.n	801e982 <lv_switch_event+0x19a>
        /*Respect the background's padding*/
        lv_area_t indic_area;
        lv_area_copy(&indic_area, &obj->coords);
        indic_area.x1 += bg_left;
 801e93c:	8aa0      	ldrh	r0, [r4, #20]
    dest->y1 = src->y1;
 801e93e:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 801e942:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801e946:	4428      	add	r0, r5
    dest->y2 = src->y2;
 801e948:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        indic_area.x2 -= bg_right;
        indic_area.y1 += bg_top;
 801e94c:	4432      	add	r2, r6
        indic_area.x2 -= bg_right;
 801e94e:	eba1 010a 	sub.w	r1, r1, sl
        indic_area.x1 += bg_left;
 801e952:	f8ad 0004 	strh.w	r0, [sp, #4]
        indic_area.y2 -= bg_bottom;
 801e956:	eba3 0308 	sub.w	r3, r3, r8

        lv_draw_rect_dsc_t draw_indic_dsc;
        lv_draw_rect_dsc_init(&draw_indic_dsc);
 801e95a:	a803      	add	r0, sp, #12
        indic_area.x2 -= bg_right;
 801e95c:	f8ad 1008 	strh.w	r1, [sp, #8]
        indic_area.y1 += bg_top;
 801e960:	f8ad 2006 	strh.w	r2, [sp, #6]
        indic_area.y2 -= bg_bottom;
 801e964:	f8ad 300a 	strh.w	r3, [sp, #10]
        lv_draw_rect_dsc_init(&draw_indic_dsc);
 801e968:	f7ed fea6 	bl	800c6b8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 801e96c:	aa03      	add	r2, sp, #12
 801e96e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801e972:	4620      	mov	r0, r4
 801e974:	f7e5 fc0c 	bl	8004190 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&indic_area, clip_area, &draw_indic_dsc);
 801e978:	aa03      	add	r2, sp, #12
 801e97a:	4639      	mov	r1, r7
 801e97c:	a801      	add	r0, sp, #4
 801e97e:	f7ed febd 	bl	800c6fc <lv_draw_rect>
    }

    /*Draw the knob*/
    lv_coord_t objh = lv_obj_get_height(obj);
 801e982:	4620      	mov	r0, r4
 801e984:	f7e6 f891 	bl	8004aaa <lv_obj_get_height>
    lv_coord_t knob_size = objh;
    lv_area_t knob_area;

    /*Left*/
    if((base_dir != LV_BASE_DIR_RTL && !chk) || (base_dir == LV_BASE_DIR_RTL && chk)) {
 801e988:	f1bb 0f01 	cmp.w	fp, #1
 801e98c:	d00c      	beq.n	801e9a8 <lv_switch_event+0x1c0>
 801e98e:	f1b9 0f00 	cmp.w	r9, #0
 801e992:	d00c      	beq.n	801e9ae <lv_switch_event+0x1c6>
        knob_area.x1 = obj->coords.x1 + bg_left;
        knob_area.x2 = knob_area.x1 + knob_size;
    }
    else {
        knob_area.x2 = obj->coords.x2 - bg_right;
 801e994:	8b21      	ldrh	r1, [r4, #24]
 801e996:	eba1 020a 	sub.w	r2, r1, sl
 801e99a:	b293      	uxth	r3, r2
        knob_area.x1 = knob_area.x2 - knob_size;
 801e99c:	1a18      	subs	r0, r3, r0
        knob_area.x2 = obj->coords.x2 - bg_right;
 801e99e:	f8ad 3008 	strh.w	r3, [sp, #8]
        knob_area.x1 = knob_area.x2 - knob_size;
 801e9a2:	f8ad 0004 	strh.w	r0, [sp, #4]
 801e9a6:	e00a      	b.n	801e9be <lv_switch_event+0x1d6>
    if((base_dir != LV_BASE_DIR_RTL && !chk) || (base_dir == LV_BASE_DIR_RTL && chk)) {
 801e9a8:	f1b9 0f00 	cmp.w	r9, #0
 801e9ac:	d0f2      	beq.n	801e994 <lv_switch_event+0x1ac>
        knob_area.x1 = obj->coords.x1 + bg_left;
 801e9ae:	8aa3      	ldrh	r3, [r4, #20]
 801e9b0:	442b      	add	r3, r5
 801e9b2:	b29d      	uxth	r5, r3
 801e9b4:	f8ad 5004 	strh.w	r5, [sp, #4]
        knob_area.x2 = knob_area.x1 + knob_size;
 801e9b8:	4405      	add	r5, r0
 801e9ba:	f8ad 5008 	strh.w	r5, [sp, #8]
    }

    knob_area.y1 = obj->coords.y1 + bg_top;
 801e9be:	8ae0      	ldrh	r0, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e9c0:	f241 0212 	movw	r2, #4114	; 0x1012
 801e9c4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e9c8:	4406      	add	r6, r0
    knob_area.y2 = obj->coords.y2 - bg_bottom;
 801e9ca:	8b60      	ldrh	r0, [r4, #26]
 801e9cc:	eba0 0808 	sub.w	r8, r0, r8
 801e9d0:	4620      	mov	r0, r4
    knob_area.y1 = obj->coords.y1 + bg_top;
 801e9d2:	f8ad 6006 	strh.w	r6, [sp, #6]
    knob_area.y2 = obj->coords.y2 - bg_bottom;
 801e9d6:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e9da:	f7e8 fadd 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e9de:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801e9e2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e9e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	f7e8 fad5 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e9ee:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801e9f2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801e9f4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	f7e8 facd 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801e9fe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ea02:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ea04:	f241 0211 	movw	r2, #4113	; 0x1011
 801ea08:	4620      	mov	r0, r4
 801ea0a:	f7e8 fac5 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
    lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
    lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area.x1 -= knob_left;
 801ea0e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ea12:	eba2 0308 	sub.w	r3, r2, r8
    knob_area.x2 += knob_right;
    knob_area.y1 -= knob_top;
 801ea16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    knob_area.x1 -= knob_left;
 801ea1a:	f8ad 3004 	strh.w	r3, [sp, #4]
    knob_area.x2 += knob_right;
 801ea1e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ea22:	441d      	add	r5, r3
    knob_area.y1 -= knob_top;
 801ea24:	1b93      	subs	r3, r2, r6
 801ea26:	f8ad 3006 	strh.w	r3, [sp, #6]
    knob_area.y2 += knob_bottom;
 801ea2a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    knob_area.x2 += knob_right;
 801ea2e:	f8ad 5008 	strh.w	r5, [sp, #8]
    knob_area.y2 += knob_bottom;
 801ea32:	4418      	add	r0, r3
 801ea34:	f8ad 000a 	strh.w	r0, [sp, #10]

    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801ea38:	a803      	add	r0, sp, #12
 801ea3a:	f7ed fe3d 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801ea3e:	aa03      	add	r2, sp, #12
 801ea40:	4620      	mov	r0, r4
 801ea42:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ea46:	f7e5 fba3 	bl	8004190 <lv_obj_init_draw_rect_dsc>

    lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
 801ea4a:	aa03      	add	r2, sp, #12
 801ea4c:	4639      	mov	r1, r7
 801ea4e:	a801      	add	r0, sp, #4
 801ea50:	f7ed fe54 	bl	800c6fc <lv_draw_rect>

}
 801ea54:	e723      	b.n	801e89e <lv_switch_event+0xb6>
 801ea56:	bf00      	nop
 801ea58:	0802a0e0 	.word	0x0802a0e0

0801ea5c <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ea5c:	f241 0212 	movw	r2, #4114	; 0x1012
{
 801ea60:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ea62:	f7e8 fa99 	bl	8006f98 <lv_obj_get_style_prop>
}
 801ea66:	b200      	sxth	r0, r0
 801ea68:	bd08      	pop	{r3, pc}

0801ea6a <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ea6a:	f241 0213 	movw	r2, #4115	; 0x1013
{
 801ea6e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ea70:	f7e8 fa92 	bl	8006f98 <lv_obj_get_style_prop>
}
 801ea74:	b200      	sxth	r0, r0
 801ea76:	bd08      	pop	{r3, pc}

0801ea78 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ea78:	f241 0210 	movw	r2, #4112	; 0x1010
{
 801ea7c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ea7e:	f7e8 fa8b 	bl	8006f98 <lv_obj_get_style_prop>
}
 801ea82:	b200      	sxth	r0, r0
 801ea84:	bd08      	pop	{r3, pc}

0801ea86 <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 801ea86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea8a:	ed2d 8b02 	vpush	{d8}
 801ea8e:	b08f      	sub	sp, #60	; 0x3c
 801ea90:	ee08 3a10 	vmov	s16, r3
 801ea94:	4690      	mov	r8, r2
 801ea96:	4607      	mov	r7, r0
 801ea98:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    uint16_t row_start = row_id * table->col_cnt;
    uint16_t cell;
    uint16_t col;
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;

    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ea9c:	2600      	movs	r6, #0
{
 801ea9e:	f9bd 9074 	ldrsh.w	r9, [sp, #116]	; 0x74
 801eaa2:	f9bd a078 	ldrsh.w	sl, [sp, #120]	; 0x78
 801eaa6:	9309      	str	r3, [sp, #36]	; 0x24
 801eaa8:	eb09 050a 	add.w	r5, r9, sl
    uint16_t row_start = row_id * table->col_cnt;
 801eaac:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 801eaae:	fb13 f101 	smulbb	r1, r3, r1
 801eab2:	b2ab      	uxth	r3, r5
 801eab4:	9308      	str	r3, [sp, #32]
 801eab6:	fa1f fb81 	uxth.w	fp, r1
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801eaba:	8913      	ldrh	r3, [r2, #8]
                h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
                                    h_max);
            }
            /*Without text crop calculate the height of the text in the cell*/
            else {
                txt_w -= cell_left + cell_right;
 801eabc:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801eac0:	465c      	mov	r4, fp
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801eac2:	fa13 f585 	uxtah	r5, r3, r5
                txt_w -= cell_left + cell_right;
 801eac6:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801eaca:	b22d      	sxth	r5, r5
                txt_w -= cell_left + cell_right;
 801eacc:	18d3      	adds	r3, r2, r3
 801eace:	930b      	str	r3, [sp, #44]	; 0x2c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801ead0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801ead2:	eb0b 0300 	add.w	r3, fp, r0
 801ead6:	429c      	cmp	r4, r3
 801ead8:	db05      	blt.n	801eae6 <get_row_height+0x60>
            }
        }
    }

    return h_max;
}
 801eada:	4628      	mov	r0, r5
 801eadc:	b00f      	add	sp, #60	; 0x3c
 801eade:	ecbd 8b02 	vpop	{d8}
 801eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(table->cell_data[cell] != NULL) {
 801eae6:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
 801eaea:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
 801eaee:	b1e9      	cbz	r1, 801eb2c <get_row_height+0xa6>
            txt_w              = table->col_w[col];
 801eaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eaf2:	3801      	subs	r0, #1
 801eaf4:	2200      	movs	r2, #0
            txt_w              = table->col_w[col];
 801eaf6:	9306      	str	r3, [sp, #24]
 801eaf8:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eafc:	900a      	str	r0, [sp, #40]	; 0x28
            txt_w              = table->col_w[col];
 801eafe:	9305      	str	r3, [sp, #20]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eb00:	b293      	uxth	r3, r2
 801eb02:	fa16 f082 	uxtah	r0, r6, r2
 801eb06:	469c      	mov	ip, r3
 801eb08:	9307      	str	r3, [sp, #28]
 801eb0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb0c:	4298      	cmp	r0, r3
 801eb0e:	db12      	blt.n	801eb36 <get_row_height+0xb0>
            if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 801eb10:	780a      	ldrb	r2, [r1, #0]
 801eb12:	f012 0202 	ands.w	r2, r2, #2
 801eb16:	d023      	beq.n	801eb60 <get_row_height+0xda>
                h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 801eb18:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 801eb1c:	eb03 0209 	add.w	r2, r3, r9
 801eb20:	4452      	add	r2, sl
 801eb22:	42aa      	cmp	r2, r5
 801eb24:	dd02      	ble.n	801eb2c <get_row_height+0xa6>
 801eb26:	9a08      	ldr	r2, [sp, #32]
 801eb28:	18d5      	adds	r5, r2, r3
 801eb2a:	b22d      	sxth	r5, r5
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801eb2c:	3401      	adds	r4, #1
 801eb2e:	3601      	adds	r6, #1
 801eb30:	b2a4      	uxth	r4, r4
 801eb32:	b2b6      	uxth	r6, r6
 801eb34:	e7cc      	b.n	801ead0 <get_row_height+0x4a>
                if(table->cell_data[cell + col_merge] != NULL) {
 801eb36:	44a4      	add	ip, r4
 801eb38:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 801eb3c:	f1bc 0f00 	cmp.w	ip, #0
 801eb40:	d0e6      	beq.n	801eb10 <get_row_height+0x8a>
                    if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT)
 801eb42:	f89c c000 	ldrb.w	ip, [ip]
 801eb46:	3201      	adds	r2, #1
 801eb48:	f01c 0f01 	tst.w	ip, #1
 801eb4c:	d0e0      	beq.n	801eb10 <get_row_height+0x8a>
                        txt_w += table->col_w[col + col_merge + 1];
 801eb4e:	9b06      	ldr	r3, [sp, #24]
 801eb50:	3001      	adds	r0, #1
 801eb52:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801eb56:	9b05      	ldr	r3, [sp, #20]
 801eb58:	4403      	add	r3, r0
 801eb5a:	b21b      	sxth	r3, r3
 801eb5c:	9305      	str	r3, [sp, #20]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801eb5e:	e7cf      	b.n	801eb00 <get_row_height+0x7a>
                txt_w -= cell_left + cell_right;
 801eb60:	9805      	ldr	r0, [sp, #20]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801eb62:	3101      	adds	r1, #1
                txt_w -= cell_left + cell_right;
 801eb64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801eb66:	9202      	str	r2, [sp, #8]
 801eb68:	4642      	mov	r2, r8
                txt_w -= cell_left + cell_right;
 801eb6a:	1ac3      	subs	r3, r0, r3
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801eb6c:	a80d      	add	r0, sp, #52	; 0x34
 801eb6e:	b21b      	sxth	r3, r3
 801eb70:	9301      	str	r3, [sp, #4]
 801eb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb74:	9300      	str	r3, [sp, #0]
 801eb76:	ee18 3a10 	vmov	r3, s16
 801eb7a:	f7fa fb14 	bl	80191a6 <lv_txt_get_size>
                h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801eb7e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801eb82:	444b      	add	r3, r9
 801eb84:	4453      	add	r3, sl
 801eb86:	429d      	cmp	r5, r3
 801eb88:	bfb8      	it	lt
 801eb8a:	461d      	movlt	r5, r3
                cell += col_merge;
 801eb8c:	9b07      	ldr	r3, [sp, #28]
 801eb8e:	441c      	add	r4, r3
                col += col_merge;
 801eb90:	441e      	add	r6, r3
                h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801eb92:	b22d      	sxth	r5, r5
                cell += col_merge;
 801eb94:	b2a4      	uxth	r4, r4
                col += col_merge;
 801eb96:	b2b6      	uxth	r6, r6
 801eb98:	e7c8      	b.n	801eb2c <get_row_height+0xa6>

0801eb9a <lv_table_destructor>:
{
 801eb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801eb9c:	2500      	movs	r5, #0
{
 801eb9e:	460c      	mov	r4, r1
            table->cell_data[i] = NULL;
 801eba0:	462f      	mov	r7, r5
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801eba2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801eba4:	b2ae      	uxth	r6, r5
 801eba6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801eba8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801ebaa:	4353      	muls	r3, r2
 801ebac:	429e      	cmp	r6, r3
 801ebae:	db08      	blt.n	801ebc2 <lv_table_destructor+0x28>
    if(table->cell_data) lv_mem_free(table->cell_data);
 801ebb0:	b108      	cbz	r0, 801ebb6 <lv_table_destructor+0x1c>
 801ebb2:	f7f8 fbe7 	bl	8017384 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 801ebb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801ebb8:	b168      	cbz	r0, 801ebd6 <lv_table_destructor+0x3c>
}
 801ebba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(table->row_h) lv_mem_free(table->row_h);
 801ebbe:	f7f8 bbe1 	b.w	8017384 <lv_mem_free>
        if(table->cell_data[i]) {
 801ebc2:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801ebc6:	b120      	cbz	r0, 801ebd2 <lv_table_destructor+0x38>
            lv_mem_free(table->cell_data[i]);
 801ebc8:	f7f8 fbdc 	bl	8017384 <lv_mem_free>
            table->cell_data[i] = NULL;
 801ebcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ebce:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801ebd2:	3501      	adds	r5, #1
 801ebd4:	e7e5      	b.n	801eba2 <lv_table_destructor+0x8>
}
 801ebd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ebd8 <lv_table_constructor>:
    table->col_cnt = 1;
 801ebd8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801ebdc:	2002      	movs	r0, #2
{
 801ebde:	b510      	push	{r4, lr}
 801ebe0:	460c      	mov	r4, r1
    table->col_cnt = 1;
 801ebe2:	624b      	str	r3, [r1, #36]	; 0x24
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801ebe4:	f7f8 fd50 	bl	8017688 <lv_mem_alloc>
 801ebe8:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801ebea:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 801ebec:	0040      	lsls	r0, r0, #1
 801ebee:	f7f8 fd4b 	bl	8017688 <lv_mem_alloc>
    table->col_w[0] = LV_DPI_DEF;
 801ebf2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ebf4:	2382      	movs	r3, #130	; 0x82
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801ebf6:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 801ebf8:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 801ebfa:	8003      	strh	r3, [r0, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801ebfc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ebfe:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801ec00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801ec02:	4359      	muls	r1, r3
 801ec04:	0089      	lsls	r1, r1, #2
 801ec06:	f7f8 fd55 	bl	80176b4 <lv_mem_realloc>
    table->cell_data[0] = NULL;
 801ec0a:	2300      	movs	r3, #0
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801ec0c:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 801ec0e:	6003      	str	r3, [r0, #0]
}
 801ec10:	bd10      	pop	{r4, pc}

0801ec12 <refr_size>:
{
 801ec12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec16:	4604      	mov	r4, r0
 801ec18:	b08b      	sub	sp, #44	; 0x2c
 801ec1a:	460d      	mov	r5, r1
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ec1c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ec20:	f7ff ff1c 	bl	801ea5c <lv_obj_get_style_pad_left>
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ec24:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ec28:	9006      	str	r0, [sp, #24]
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	f7ff ff1d 	bl	801ea6a <lv_obj_get_style_pad_right>
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801ec30:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ec34:	9007      	str	r0, [sp, #28]
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801ec36:	4620      	mov	r0, r4
 801ec38:	f7ff ff1e 	bl	801ea78 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ec3c:	f241 0211 	movw	r2, #4113	; 0x1011
 801ec40:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ec44:	9008      	str	r0, [sp, #32]
 801ec46:	4620      	mov	r0, r4
 801ec48:	f7e8 f9a6 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801ec4c:	f241 425a 	movw	r2, #5210	; 0x145a
 801ec50:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801ec54:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801ec58:	4620      	mov	r0, r4
 801ec5a:	f7e8 f99d 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801ec5e:	f241 425b 	movw	r2, #5211	; 0x145b
 801ec62:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801ec66:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801ec6a:	4620      	mov	r0, r4
 801ec6c:	f7e8 f994 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ec70:	f241 4259 	movw	r2, #5209	; 0x1459
    return (lv_coord_t)v.num;
 801ec74:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ec76:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ec7a:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801ec7c:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ec7e:	f7e8 f98b 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801ec82:	f241 0205 	movw	r2, #4101	; 0x1005
 801ec86:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801ec8a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801ec8c:	4620      	mov	r0, r4
 801ec8e:	f7e8 f983 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801ec92:	f241 0206 	movw	r2, #4102	; 0x1006
    return (lv_coord_t)v.num;
 801ec96:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801ec98:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	f7e8 f97b 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801eca2:	b206      	sxth	r6, r0
    for(i = strat_row; i < table->row_cnt; i++) {
 801eca4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 801eca6:	42aa      	cmp	r2, r5
 801eca8:	d805      	bhi.n	801ecb6 <refr_size+0xa4>
    lv_obj_refresh_self_size(obj) ;
 801ecaa:	4620      	mov	r0, r4
}
 801ecac:	b00b      	add	sp, #44	; 0x2c
 801ecae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_self_size(obj) ;
 801ecb2:	f7e5 bf84 	b.w	8004bbe <lv_obj_refresh_self_size>
        table->row_h[i] = get_row_height(obj, i, font, letter_space, line_space,
 801ecb6:	9b08      	ldr	r3, [sp, #32]
 801ecb8:	b2a9      	uxth	r1, r5
 801ecba:	4642      	mov	r2, r8
 801ecbc:	4620      	mov	r0, r4
 801ecbe:	9303      	str	r3, [sp, #12]
 801ecc0:	9b07      	ldr	r3, [sp, #28]
 801ecc2:	f8cd a010 	str.w	sl, [sp, #16]
 801ecc6:	9302      	str	r3, [sp, #8]
 801ecc8:	9b06      	ldr	r3, [sp, #24]
 801ecca:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
 801ecce:	9301      	str	r3, [sp, #4]
 801ecd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecd2:	9300      	str	r3, [sp, #0]
 801ecd4:	464b      	mov	r3, r9
 801ecd6:	f7ff fed6 	bl	801ea86 <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, table->row_h[i], maxh);
 801ecda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        table->row_h[i] = get_row_height(obj, i, font, letter_space, line_space,
 801ecdc:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
        table->row_h[i] = LV_CLAMP(minh, table->row_h[i], maxh);
 801ece0:	f931 2015 	ldrsh.w	r2, [r1, r5, lsl #1]
 801ece4:	42b2      	cmp	r2, r6
 801ece6:	bfa8      	it	ge
 801ece8:	4632      	movge	r2, r6
 801ecea:	42ba      	cmp	r2, r7
 801ecec:	bfb8      	it	lt
 801ecee:	463a      	movlt	r2, r7
 801ecf0:	f821 2015 	strh.w	r2, [r1, r5, lsl #1]
    for(i = strat_row; i < table->row_cnt; i++) {
 801ecf4:	3501      	adds	r5, #1
 801ecf6:	e7d5      	b.n	801eca4 <refr_size+0x92>

0801ecf8 <draw_main>:
{
 801ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecfc:	4605      	mov	r5, r0
 801ecfe:	b0db      	sub	sp, #364	; 0x16c
    lv_obj_t * obj = lv_event_get_target(e);
 801ed00:	f7e2 ff1a 	bl	8001b38 <lv_event_get_target>
 801ed04:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ed06:	4628      	mov	r0, r5
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801ed08:	ad16      	add	r5, sp, #88	; 0x58
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ed0a:	f7e2 ff19 	bl	8001b40 <lv_event_get_param>
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ed0e:	2100      	movs	r1, #0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ed10:	4680      	mov	r8, r0
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ed12:	4620      	mov	r0, r4
 801ed14:	f7ff feb0 	bl	801ea78 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ed18:	f241 0211 	movw	r2, #4113	; 0x1011
 801ed1c:	2100      	movs	r1, #0
 801ed1e:	9007      	str	r0, [sp, #28]
 801ed20:	4620      	mov	r0, r4
    for(row = 0; row < table->row_cnt; row++) {
 801ed22:	f04f 0900 	mov.w	r9, #0
 801ed26:	f7e8 f937 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801ed2a:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 801ed2c:	b203      	sxth	r3, r0
 801ed2e:	4620      	mov	r0, r4
    uint16_t cell = 0;
 801ed30:	46ca      	mov	sl, r9
 801ed32:	9313      	str	r3, [sp, #76]	; 0x4c
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801ed34:	f7ff fe92 	bl	801ea5c <lv_obj_get_style_pad_left>
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801ed38:	2100      	movs	r1, #0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801ed3a:	9008      	str	r0, [sp, #32]
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801ed3c:	4620      	mov	r0, r4
 801ed3e:	f7ff fe94 	bl	801ea6a <lv_obj_get_style_pad_right>
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ed42:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801ed46:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ed48:	4620      	mov	r0, r4
 801ed4a:	f7ff fe87 	bl	801ea5c <lv_obj_get_style_pad_left>
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ed4e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801ed52:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ed54:	4620      	mov	r0, r4
 801ed56:	f7ff fe88 	bl	801ea6a <lv_obj_get_style_pad_right>
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801ed5a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801ed5e:	9010      	str	r0, [sp, #64]	; 0x40
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801ed60:	4620      	mov	r0, r4
 801ed62:	f7ff fe89 	bl	801ea78 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ed66:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ed6a:	f241 0211 	movw	r2, #4113	; 0x1011
 801ed6e:	9011      	str	r0, [sp, #68]	; 0x44
 801ed70:	4620      	mov	r0, r4
 801ed72:	f7e8 f911 	bl	8006f98 <lv_obj_get_style_prop>
    lv_state_t state_ori = obj->state;
 801ed76:	8c23      	ldrh	r3, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801ed78:	6a22      	ldr	r2, [r4, #32]
    lv_state_t state_ori = obj->state;
 801ed7a:	930a      	str	r3, [sp, #40]	; 0x28
    obj->state = LV_STATE_DEFAULT;
 801ed7c:	4bb1      	ldr	r3, [pc, #708]	; (801f044 <draw_main+0x34c>)
 801ed7e:	9012      	str	r0, [sp, #72]	; 0x48
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801ed80:	a82e      	add	r0, sp, #184	; 0xb8
    obj->state = LV_STATE_DEFAULT;
 801ed82:	4013      	ands	r3, r2
 801ed84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ed88:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801ed8a:	f7ed fc95 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 801ed8e:	aa2e      	add	r2, sp, #184	; 0xb8
 801ed90:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ed94:	4620      	mov	r0, r4
 801ed96:	f7e5 f9fb 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 801ed9a:	a81e      	add	r0, sp, #120	; 0x78
 801ed9c:	f7eb f9d8 	bl	800a150 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 801eda0:	aa1e      	add	r2, sp, #120	; 0x78
 801eda2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801eda6:	4620      	mov	r0, r4
 801eda8:	f7e5 fb2e 	bl	8004408 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 801edac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801edae:	4620      	mov	r0, r4
 801edb0:	8ae6      	ldrh	r6, [r4, #22]
    obj->state = state_ori;
 801edb2:	8423      	strh	r3, [r4, #32]
    obj->skip_trans = 0;
 801edb4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801edb8:	f36f 0382 	bfc	r3, #2, #1
 801edbc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801edc0:	f7e6 feae 	bl	8005b20 <lv_obj_get_scroll_y>
 801edc4:	9b07      	ldr	r3, [sp, #28]
 801edc6:	3b01      	subs	r3, #1
 801edc8:	441e      	add	r6, r3
 801edca:	1a36      	subs	r6, r6, r0
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801edcc:	4620      	mov	r0, r4
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801edce:	80ee      	strh	r6, [r5, #6]
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801edd0:	f7e6 fe94 	bl	8005afc <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801edd4:	f241 426a 	movw	r2, #5226	; 0x146a
 801edd8:	4606      	mov	r6, r0
 801edda:	2100      	movs	r1, #0
 801eddc:	4620      	mov	r0, r4
 801edde:	f7e8 f8db 	bl	8006f98 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801ede2:	4641      	mov	r1, r8
    return (lv_base_dir_t)v.num;
 801ede4:	b2c3      	uxtb	r3, r0
 801ede6:	a848      	add	r0, sp, #288	; 0x120
 801ede8:	9305      	str	r3, [sp, #20]
 801edea:	f7e5 fcb5 	bl	8004758 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 801edee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801edf2:	9355      	str	r3, [sp, #340]	; 0x154
    dsc.rect_dsc = &rect_dsc_act;
 801edf4:	ab3b      	add	r3, sp, #236	; 0xec
 801edf6:	934a      	str	r3, [sp, #296]	; 0x128
    dsc.label_dsc = &label_dsc_act;
 801edf8:	ab26      	add	r3, sp, #152	; 0x98
 801edfa:	934b      	str	r3, [sp, #300]	; 0x12c
    for(row = 0; row < table->row_cnt; row++) {
 801edfc:	b2b3      	uxth	r3, r6
 801edfe:	930c      	str	r3, [sp, #48]	; 0x30
 801ee00:	fa1f f389 	uxth.w	r3, r9
 801ee04:	930b      	str	r3, [sp, #44]	; 0x2c
 801ee06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ee0a:	4293      	cmp	r3, r2
 801ee0c:	d802      	bhi.n	801ee14 <draw_main+0x11c>
}
 801ee0e:	b05b      	add	sp, #364	; 0x16c
 801ee10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_coord_t h_row = table->row_h[row];
 801ee14:	fa1f f389 	uxth.w	r3, r9
 801ee18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        cell_area.y1 = cell_area.y2 + 1;
 801ee1a:	88e9      	ldrh	r1, [r5, #6]
        lv_coord_t h_row = table->row_h[row];
 801ee1c:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 801ee20:	1c4b      	adds	r3, r1, #1
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801ee22:	4411      	add	r1, r2
        cell_area.y1 = cell_area.y2 + 1;
 801ee24:	b21b      	sxth	r3, r3
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801ee26:	80e9      	strh	r1, [r5, #6]
        if(cell_area.y1 > clip_area->y2) return;
 801ee28:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
        cell_area.y1 = cell_area.y2 + 1;
 801ee2c:	806b      	strh	r3, [r5, #2]
        if(cell_area.y1 > clip_area->y2) return;
 801ee2e:	4299      	cmp	r1, r3
 801ee30:	dbed      	blt.n	801ee0e <draw_main+0x116>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x;
 801ee32:	9b05      	ldr	r3, [sp, #20]
 801ee34:	2b01      	cmp	r3, #1
 801ee36:	d112      	bne.n	801ee5e <draw_main+0x166>
 801ee38:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ee3a:	8b23      	ldrh	r3, [r4, #24]
 801ee3c:	1a5b      	subs	r3, r3, r1
 801ee3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ee40:	3b01      	subs	r3, #1
 801ee42:	1a5b      	subs	r3, r3, r1
 801ee44:	802b      	strh	r3, [r5, #0]
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801ee46:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801ee4a:	2700      	movs	r7, #0
 801ee4c:	f3c2 034f 	ubfx	r3, r2, #1, #16
 801ee50:	930e      	str	r3, [sp, #56]	; 0x38
        for(col = 0; col < table->col_cnt; col++) {
 801ee52:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801ee54:	42b9      	cmp	r1, r7
 801ee56:	d80a      	bhi.n	801ee6e <draw_main+0x176>
    for(row = 0; row < table->row_cnt; row++) {
 801ee58:	f109 0901 	add.w	r9, r9, #1
 801ee5c:	e7d0      	b.n	801ee00 <draw_main+0x108>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x;
 801ee5e:	9b08      	ldr	r3, [sp, #32]
 801ee60:	8aa1      	ldrh	r1, [r4, #20]
 801ee62:	3b01      	subs	r3, #1
 801ee64:	440b      	add	r3, r1
 801ee66:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ee68:	1a5b      	subs	r3, r3, r1
 801ee6a:	80ab      	strh	r3, [r5, #4]
 801ee6c:	e7eb      	b.n	801ee46 <draw_main+0x14e>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 801ee6e:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 801ee72:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801ee76:	f85b 602a 	ldr.w	r6, [fp, sl, lsl #2]
 801ee7a:	9306      	str	r3, [sp, #24]
 801ee7c:	b106      	cbz	r6, 801ee80 <draw_main+0x188>
 801ee7e:	7836      	ldrb	r6, [r6, #0]
            if(rtl) {
 801ee80:	9b05      	ldr	r3, [sp, #20]
 801ee82:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 801ee86:	2b01      	cmp	r3, #1
 801ee88:	f040 80b8 	bne.w	801effc <draw_main+0x304>
                cell_area.x2 = cell_area.x1 - 1;
 801ee8c:	882b      	ldrh	r3, [r5, #0]
 801ee8e:	1e5a      	subs	r2, r3, #1
 801ee90:	80aa      	strh	r2, [r5, #4]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 801ee92:	f83e 2017 	ldrh.w	r2, [lr, r7, lsl #1]
 801ee96:	1a9b      	subs	r3, r3, r2
 801ee98:	802b      	strh	r3, [r5, #0]
            lv_table_cell_ctrl_t ctrl = 0;
 801ee9a:	2200      	movs	r2, #0
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801ee9c:	3901      	subs	r1, #1
 801ee9e:	fa17 f082 	uxtah	r0, r7, r2
 801eea2:	b293      	uxth	r3, r2
 801eea4:	4288      	cmp	r0, r1
 801eea6:	469c      	mov	ip, r3
 801eea8:	f2c0 80b0 	blt.w	801f00c <draw_main+0x314>
            if(cell_area.y2 < clip_area->y1) {
 801eeac:	3301      	adds	r3, #1
 801eeae:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801eeb2:	b29a      	uxth	r2, r3
 801eeb4:	fa1a f383 	uxtah	r3, sl, r3
 801eeb8:	fa1f fa83 	uxth.w	sl, r3
 801eebc:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801eec0:	920d      	str	r2, [sp, #52]	; 0x34
 801eec2:	428b      	cmp	r3, r1
 801eec4:	f300 8139 	bgt.w	801f13a <draw_main+0x442>
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 801eec8:	f89d 00d7 	ldrb.w	r0, [sp, #215]	; 0xd7
    dest->x1 = src->x1;
 801eecc:	f9b5 2000 	ldrsh.w	r2, [r5]
    dest->y1 = src->y1;
 801eed0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801eed4:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    dest->x2 = src->x2;
 801eed8:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 801eedc:	0700      	lsls	r0, r0, #28
    dest->x1 = src->x1;
 801eede:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 801eee2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 801eee6:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 801eeea:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
 801eeee:	d50d      	bpl.n	801ef0c <draw_main+0x214>
 801eef0:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 801eef4:	9808      	ldr	r0, [sp, #32]
 801eef6:	4458      	add	r0, fp
 801eef8:	4282      	cmp	r2, r0
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 801eefa:	bfc1      	itttt	gt
 801eefc:	f9bd 00d4 	ldrshgt.w	r0, [sp, #212]	; 0xd4
 801ef00:	eb00 70d0 	addgt.w	r0, r0, r0, lsr #31
 801ef04:	eba2 0060 	subgt.w	r0, r2, r0, asr #1
 801ef08:	f8ad 0068 	strhgt.w	r0, [sp, #104]	; 0x68
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 801ef0c:	f01c 0f02 	tst.w	ip, #2
 801ef10:	d00d      	beq.n	801ef2e <draw_main+0x236>
 801ef12:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801ef16:	9807      	ldr	r0, [sp, #28]
 801ef18:	4402      	add	r2, r0
 801ef1a:	4293      	cmp	r3, r2
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 801ef1c:	bfc1      	itttt	gt
 801ef1e:	f9bd 20d4 	ldrshgt.w	r2, [sp, #212]	; 0xd4
 801ef22:	eb02 72d2 	addgt.w	r2, r2, r2, lsr #31
 801ef26:	eba3 0362 	subgt.w	r3, r3, r2, asr #1
 801ef2a:	f8ad 306a 	strhgt.w	r3, [sp, #106]	; 0x6a
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 801ef2e:	f01c 0f08 	tst.w	ip, #8
 801ef32:	d011      	beq.n	801ef58 <draw_main+0x260>
 801ef34:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801ef38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef3a:	1a9b      	subs	r3, r3, r2
 801ef3c:	3b01      	subs	r3, #1
 801ef3e:	459e      	cmp	lr, r3
 801ef40:	da0a      	bge.n	801ef58 <draw_main+0x260>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801ef42:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801ef46:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801ef4a:	f003 0301 	and.w	r3, r3, #1
 801ef4e:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801ef52:	449e      	add	lr, r3
 801ef54:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801ef58:	f01c 0f01 	tst.w	ip, #1
 801ef5c:	d011      	beq.n	801ef82 <draw_main+0x28a>
                    cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 801ef5e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801ef62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ef64:	1a9b      	subs	r3, r3, r2
 801ef66:	3b01      	subs	r3, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801ef68:	4299      	cmp	r1, r3
 801ef6a:	da0a      	bge.n	801ef82 <draw_main+0x28a>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801ef6c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801ef70:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801ef74:	f003 0301 	and.w	r3, r3, #1
 801ef78:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801ef7c:	4419      	add	r1, r3
 801ef7e:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
            if(row == table->row_act && col == table->col_act) {
 801ef82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ef84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ef86:	4293      	cmp	r3, r2
 801ef88:	d160      	bne.n	801f04c <draw_main+0x354>
 801ef8a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ef8c:	42bb      	cmp	r3, r7
 801ef8e:	d15d      	bne.n	801f04c <draw_main+0x354>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 801ef90:	8c22      	ldrh	r2, [r4, #32]
 801ef92:	f002 0360 	and.w	r3, r2, #96	; 0x60
            lv_state_t cell_state = LV_STATE_DEFAULT;
 801ef96:	2b20      	cmp	r3, #32
 801ef98:	bf18      	it	ne
 801ef9a:	2300      	movne	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 801ef9c:	0790      	lsls	r0, r2, #30
 801ef9e:	bf48      	it	mi
 801efa0:	f043 0302 	orrmi.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 801efa4:	0751      	lsls	r1, r2, #29
 801efa6:	bf44      	itt	mi
 801efa8:	f043 0304 	orrmi.w	r3, r3, #4
 801efac:	b29b      	uxthmi	r3, r3
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 801efae:	0712      	lsls	r2, r2, #28
 801efb0:	d54a      	bpl.n	801f048 <draw_main+0x350>
 801efb2:	f043 0308 	orr.w	r3, r3, #8
 801efb6:	b29b      	uxth	r3, r3
                obj->state = cell_state;
 801efb8:	8423      	strh	r3, [r4, #32]
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801efba:	a83b      	add	r0, sp, #236	; 0xec
                obj->skip_trans = 1;
 801efbc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801efc0:	f043 0304 	orr.w	r3, r3, #4
 801efc4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801efc8:	f7ed fb76 	bl	800c6b8 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 801efcc:	a826      	add	r0, sp, #152	; 0x98
 801efce:	f7eb f8bf 	bl	800a150 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 801efd2:	aa3b      	add	r2, sp, #236	; 0xec
 801efd4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801efd8:	4620      	mov	r0, r4
 801efda:	f7e5 f8d9 	bl	8004190 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 801efde:	aa26      	add	r2, sp, #152	; 0x98
 801efe0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801efe4:	4620      	mov	r0, r4
 801efe6:	f7e5 fa0f 	bl	8004408 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 801efea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efec:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 0;
 801efee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801eff2:	f36f 0382 	bfc	r3, #2, #1
 801eff6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801effa:	e031      	b.n	801f060 <draw_main+0x368>
                cell_area.x1 = cell_area.x2 + 1;
 801effc:	88ab      	ldrh	r3, [r5, #4]
 801effe:	1c5a      	adds	r2, r3, #1
 801f000:	802a      	strh	r2, [r5, #0]
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 801f002:	f83e 2017 	ldrh.w	r2, [lr, r7, lsl #1]
 801f006:	4413      	add	r3, r2
 801f008:	80ab      	strh	r3, [r5, #4]
 801f00a:	e746      	b.n	801ee9a <draw_main+0x1a2>
                if(table->cell_data[cell + col_merge]) {
 801f00c:	44d4      	add	ip, sl
 801f00e:	f85b c02c 	ldr.w	ip, [fp, ip, lsl #2]
 801f012:	f1bc 0f00 	cmp.w	ip, #0
 801f016:	f43f af49 	beq.w	801eeac <draw_main+0x1b4>
                    if(next_cell_data) ctrl = next_cell_data[0];
 801f01a:	f89c 6000 	ldrb.w	r6, [ip]
                    if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT)
 801f01e:	f016 0f01 	tst.w	r6, #1
 801f022:	f43f af43 	beq.w	801eeac <draw_main+0x1b4>
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801f026:	3001      	adds	r0, #1
 801f028:	3201      	adds	r2, #1
 801f02a:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 801f02e:	9805      	ldr	r0, [sp, #20]
 801f030:	2801      	cmp	r0, #1
 801f032:	bf0b      	itete	eq
 801f034:	8828      	ldrheq	r0, [r5, #0]
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801f036:	88a8      	ldrhne	r0, [r5, #4]
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801f038:	1ac3      	subeq	r3, r0, r3
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801f03a:	181b      	addne	r3, r3, r0
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801f03c:	bf0c      	ite	eq
 801f03e:	802b      	strheq	r3, [r5, #0]
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801f040:	80ab      	strhne	r3, [r5, #4]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f042:	e72c      	b.n	801ee9e <draw_main+0x1a6>
 801f044:	fffb0000 	.word	0xfffb0000
            if(cell_state == LV_STATE_DEFAULT) {
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d1b5      	bne.n	801efb8 <draw_main+0x2c0>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801f04c:	2234      	movs	r2, #52	; 0x34
 801f04e:	a92e      	add	r1, sp, #184	; 0xb8
 801f050:	a83b      	add	r0, sp, #236	; 0xec
 801f052:	f7f8 f9d1 	bl	80173f8 <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801f056:	2220      	movs	r2, #32
 801f058:	a91e      	add	r1, sp, #120	; 0x78
 801f05a:	a826      	add	r0, sp, #152	; 0x98
 801f05c:	f7f8 f9cc 	bl	80173f8 <lv_memcpy>
            dsc.id = row * table->col_cnt + col;
 801f060:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801f062:	fa1f f389 	uxth.w	r3, r9
            dsc.draw_area = &cell_area_border;
 801f066:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f06a:	211a      	movs	r1, #26
            dsc.id = row * table->col_cnt + col;
 801f06c:	fb02 7303 	mla	r3, r2, r3, r7
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f070:	4620      	mov	r0, r4
 801f072:	aa48      	add	r2, sp, #288	; 0x120
            dsc.draw_area = &cell_area_border;
 801f074:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
            dsc.id = row * table->col_cnt + col;
 801f078:	9356      	str	r3, [sp, #344]	; 0x158
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f07a:	f7e2 fd3d 	bl	8001af8 <lv_event_send>
            lv_draw_rect(&cell_area_border, clip_area, &rect_dsc_act);
 801f07e:	aa3b      	add	r2, sp, #236	; 0xec
 801f080:	4641      	mov	r1, r8
 801f082:	4658      	mov	r0, fp
 801f084:	f7ed fb3a 	bl	800c6fc <lv_draw_rect>
            if(table->cell_data[cell]) {
 801f088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f08a:	9a06      	ldr	r2, [sp, #24]
 801f08c:	5899      	ldr	r1, [r3, r2]
 801f08e:	2900      	cmp	r1, #0
 801f090:	d04e      	beq.n	801f130 <draw_main+0x438>
                txt_area.x1 = cell_area.x1 + cell_left;
 801f092:	882b      	ldrh	r3, [r5, #0]
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 801f094:	f3c6 0b40 	ubfx	fp, r6, #1, #1
                txt_area.x1 = cell_area.x1 + cell_left;
 801f098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                else txt_flags = LV_TEXT_FLAG_NONE;
 801f09a:	f006 0602 	and.w	r6, r6, #2
                txt_area.x2 = cell_area.x2 - cell_right;
 801f09e:	9810      	ldr	r0, [sp, #64]	; 0x40
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801f0a0:	3101      	adds	r1, #1
                txt_area.x1 = cell_area.x1 + cell_left;
 801f0a2:	4413      	add	r3, r2
 801f0a4:	b29a      	uxth	r2, r3
                txt_area.x2 = cell_area.x2 - cell_right;
 801f0a6:	88ab      	ldrh	r3, [r5, #4]
 801f0a8:	1a1b      	subs	r3, r3, r0
                txt_area.y1 = cell_area.y1 + cell_top;
 801f0aa:	8868      	ldrh	r0, [r5, #2]
                txt_area.x1 = cell_area.x1 + cell_left;
 801f0ac:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                txt_area.x2 = cell_area.x2 - cell_right;
 801f0b0:	fa1f fc83 	uxth.w	ip, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 801f0b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f0b6:	4418      	add	r0, r3
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801f0b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
                txt_area.x2 = cell_area.x2 - cell_right;
 801f0ba:	f8ad c064 	strh.w	ip, [sp, #100]	; 0x64
                txt_area.y1 = cell_area.y1 + cell_top;
 801f0be:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801f0c2:	88e8      	ldrh	r0, [r5, #6]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801f0c4:	9602      	str	r6, [sp, #8]
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801f0c6:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f0c8:	f10c 0301 	add.w	r3, ip, #1
 801f0cc:	1a9b      	subs	r3, r3, r2
 801f0ce:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801f0d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f0d4:	a815      	add	r0, sp, #84	; 0x54
 801f0d6:	b21b      	sxth	r3, r3
 801f0d8:	9301      	str	r3, [sp, #4]
 801f0da:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 801f0de:	9300      	str	r3, [sp, #0]
 801f0e0:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801f0e4:	f7fa f85f 	bl	80191a6 <lv_txt_get_size>
                if(!crop) {
 801f0e8:	f1bb 0f00 	cmp.w	fp, #0
 801f0ec:	d10f      	bne.n	801f10e <draw_main+0x416>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801f0ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f0f0:	886b      	ldrh	r3, [r5, #2]
 801f0f2:	4413      	add	r3, r2
 801f0f4:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 801f0f8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801f0fc:	b29b      	uxth	r3, r3
 801f0fe:	f3c2 024f 	ubfx	r2, r2, #1, #16
 801f102:	1a99      	subs	r1, r3, r2
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801f104:	4413      	add	r3, r2
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801f106:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801f10a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                label_mask_ok = _lv_area_intersect(&label_mask, clip_area, &cell_area);
 801f10e:	462a      	mov	r2, r5
 801f110:	4641      	mov	r1, r8
 801f112:	a81c      	add	r0, sp, #112	; 0x70
 801f114:	f7f7 fce7 	bl	8016ae6 <_lv_area_intersect>
                if(label_mask_ok) {
 801f118:	b150      	cbz	r0, 801f130 <draw_main+0x438>
                    lv_draw_label(&txt_area, &label_mask, &label_dsc_act, table->cell_data[cell] + 1, NULL);
 801f11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f11c:	a91c      	add	r1, sp, #112	; 0x70
 801f11e:	9a06      	ldr	r2, [sp, #24]
 801f120:	a818      	add	r0, sp, #96	; 0x60
 801f122:	589b      	ldr	r3, [r3, r2]
 801f124:	2200      	movs	r2, #0
 801f126:	3301      	adds	r3, #1
 801f128:	9200      	str	r2, [sp, #0]
 801f12a:	aa26      	add	r2, sp, #152	; 0x98
 801f12c:	f7eb f9e8 	bl	800a500 <lv_draw_label>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801f130:	aa48      	add	r2, sp, #288	; 0x120
 801f132:	211b      	movs	r1, #27
 801f134:	4620      	mov	r0, r4
 801f136:	f7e2 fcdf 	bl	8001af8 <lv_event_send>
        for(col = 0; col < table->col_cnt; col++) {
 801f13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f13c:	443b      	add	r3, r7
 801f13e:	b29f      	uxth	r7, r3
 801f140:	e687      	b.n	801ee52 <draw_main+0x15a>
 801f142:	bf00      	nop

0801f144 <lv_table_event>:
{
 801f144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801f146:	4891      	ldr	r0, [pc, #580]	; (801f38c <lv_table_event+0x248>)
{
 801f148:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801f14a:	f7e2 fc5e 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801f14e:	2801      	cmp	r0, #1
 801f150:	d10c      	bne.n	801f16c <lv_table_event+0x28>
    lv_event_code_t code = lv_event_get_code(e);
 801f152:	4630      	mov	r0, r6
 801f154:	f7e2 fcf2 	bl	8001b3c <lv_event_get_code>
 801f158:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801f15a:	4630      	mov	r0, r6
 801f15c:	f7e2 fcec 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801f160:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801f162:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801f164:	d104      	bne.n	801f170 <lv_table_event+0x2c>
        refr_size(obj, 0);
 801f166:	2100      	movs	r1, #0
 801f168:	f7ff fd53 	bl	801ec12 <refr_size>
}
 801f16c:	b003      	add	sp, #12
 801f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801f170:	2d26      	cmp	r5, #38	; 0x26
 801f172:	d11d      	bne.n	801f1b0 <lv_table_event+0x6c>
        lv_point_t * p = lv_event_get_param(e);
 801f174:	4630      	mov	r0, r6
 801f176:	f7e2 fce3 	bl	8001b40 <lv_event_get_param>
        lv_coord_t w = 0;
 801f17a:	2200      	movs	r2, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801f17c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801f17e:	4613      	mov	r3, r2
 801f180:	428b      	cmp	r3, r1
 801f182:	d307      	bcc.n	801f194 <lv_table_event+0x50>
        lv_coord_t h = 0;
 801f184:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801f186:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 801f188:	4619      	mov	r1, r3
 801f18a:	42a9      	cmp	r1, r5
 801f18c:	d309      	bcc.n	801f1a2 <lv_table_event+0x5e>
        p->x = w;
 801f18e:	8002      	strh	r2, [r0, #0]
        p->y = h;
 801f190:	8043      	strh	r3, [r0, #2]
 801f192:	e7eb      	b.n	801f16c <lv_table_event+0x28>
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801f194:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801f196:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801f19a:	3301      	adds	r3, #1
 801f19c:	442a      	add	r2, r5
 801f19e:	b212      	sxth	r2, r2
 801f1a0:	e7ee      	b.n	801f180 <lv_table_event+0x3c>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801f1a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1a4:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 801f1a8:	3101      	adds	r1, #1
 801f1aa:	4433      	add	r3, r6
 801f1ac:	b21b      	sxth	r3, r3
 801f1ae:	e7ec      	b.n	801f18a <lv_table_event+0x46>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING) {
 801f1b0:	1e6b      	subs	r3, r5, #1
 801f1b2:	b2db      	uxtb	r3, r3
 801f1b4:	2b01      	cmp	r3, #1
 801f1b6:	d861      	bhi.n	801f27c <lv_table_event+0x138>

static lv_res_t get_pressed_cell(lv_obj_t * obj, uint16_t * row, uint16_t * col)
{
   lv_table_t * table = (lv_table_t *)obj;

    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 801f1b8:	f7e2 ff34 	bl	8002024 <lv_indev_get_act>
 801f1bc:	f7e2 ff38 	bl	8002030 <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 801f1c0:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801f1c4:	2801      	cmp	r0, #1
 801f1c6:	d14f      	bne.n	801f268 <lv_table_event+0x124>
        if(row) *row = LV_TABLE_CELL_NONE;
        return LV_RES_INV;
    }

    lv_point_t p;
    lv_indev_get_point(lv_indev_get_act(), &p);
 801f1c8:	f7e2 ff2c 	bl	8002024 <lv_indev_get_act>
 801f1cc:	a901      	add	r1, sp, #4
 801f1ce:	f7e2 ff8a 	bl	80020e6 <lv_indev_get_point>

    lv_coord_t tmp;
    if(col) {
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 801f1d2:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f1d6:	4620      	mov	r0, r4
 801f1d8:	f7e6 fc90 	bl	8005afc <lv_obj_get_scroll_x>
 801f1dc:	4430      	add	r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f1de:	f241 426a 	movw	r2, #5226	; 0x146a
 801f1e2:	2100      	movs	r1, #0
 801f1e4:	b285      	uxth	r5, r0
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f7e7 fed6 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801f1ec:	b2c0      	uxtb	r0, r0

        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801f1ee:	2801      	cmp	r0, #1
 801f1f0:	d13c      	bne.n	801f26c <lv_table_event+0x128>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 801f1f2:	8b26      	ldrh	r6, [r4, #24]
 801f1f4:	2100      	movs	r1, #0
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	1b75      	subs	r5, r6, r5
 801f1fa:	f7ff fc36 	bl	801ea6a <lv_obj_get_style_pad_right>
        }
        else {
            x -= obj->coords.x1;
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f1fe:	1a28      	subs	r0, r5, r0
        }

        *col = 0;
        tmp = 0;
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801f200:	2300      	movs	r3, #0
 801f202:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f204:	b200      	sxth	r0, r0
        tmp = 0;
 801f206:	461a      	mov	r2, r3
 801f208:	b29f      	uxth	r7, r3
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801f20a:	428f      	cmp	r7, r1
 801f20c:	d207      	bcs.n	801f21e <lv_table_event+0xda>
            tmp += table->col_w[*col];
 801f20e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801f210:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801f214:	3301      	adds	r3, #1
 801f216:	442a      	add	r2, r5
 801f218:	b212      	sxth	r2, r2
            if(x < tmp) break;
 801f21a:	4282      	cmp	r2, r0
 801f21c:	ddf4      	ble.n	801f208 <lv_table_event+0xc4>
        }
    }

    if(row) {
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 801f21e:	4620      	mov	r0, r4
 801f220:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 801f224:	f7e6 fc7c 	bl	8005b20 <lv_obj_get_scroll_y>
        y -= obj->coords.y1;
 801f228:	8ae5      	ldrh	r5, [r4, #22]
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f22a:	2100      	movs	r1, #0
        y -= obj->coords.y1;
 801f22c:	1b76      	subs	r6, r6, r5
 801f22e:	4430      	add	r0, r6
 801f230:	b285      	uxth	r5, r0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f232:	4620      	mov	r0, r4
 801f234:	f7ff fc20 	bl	801ea78 <lv_obj_get_style_pad_top>

        *row = 0;
        tmp = 0;

        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801f238:	2300      	movs	r3, #0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f23a:	1a28      	subs	r0, r5, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801f23c:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
        tmp = 0;
 801f23e:	461a      	mov	r2, r3
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801f240:	b200      	sxth	r0, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801f242:	b299      	uxth	r1, r3
 801f244:	42a9      	cmp	r1, r5
 801f246:	d207      	bcs.n	801f258 <lv_table_event+0x114>
            tmp += table->row_h[*row];
 801f248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f24a:	f836 6013 	ldrh.w	r6, [r6, r3, lsl #1]
 801f24e:	3301      	adds	r3, #1
 801f250:	4432      	add	r2, r6
 801f252:	b212      	sxth	r2, r2
            if(y < tmp) break;
 801f254:	4290      	cmp	r0, r2
 801f256:	daf4      	bge.n	801f242 <lv_table_event+0xfe>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 801f258:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f25a:	42bb      	cmp	r3, r7
 801f25c:	d102      	bne.n	801f264 <lv_table_event+0x120>
 801f25e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f260:	428b      	cmp	r3, r1
 801f262:	d001      	beq.n	801f268 <lv_table_event+0x124>
            table->col_act = col;
 801f264:	86a7      	strh	r7, [r4, #52]	; 0x34
            table->row_act = row;
 801f266:	86e1      	strh	r1, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801f268:	4620      	mov	r0, r4
 801f26a:	e031      	b.n	801f2d0 <lv_table_event+0x18c>
            x -= obj->coords.x1;
 801f26c:	8aa0      	ldrh	r0, [r4, #20]
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f26e:	2100      	movs	r1, #0
            x -= obj->coords.x1;
 801f270:	1a2d      	subs	r5, r5, r0
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f272:	4620      	mov	r0, r4
            x -= obj->coords.x1;
 801f274:	b2ad      	uxth	r5, r5
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801f276:	f7ff fbf1 	bl	801ea5c <lv_obj_get_style_pad_left>
 801f27a:	e7c0      	b.n	801f1fe <lv_table_event+0xba>
    else if(code == LV_EVENT_RELEASED) {
 801f27c:	2d08      	cmp	r5, #8
 801f27e:	d125      	bne.n	801f2cc <lv_table_event+0x188>
        lv_obj_invalidate(obj);
 801f280:	f7e5 fd62 	bl	8004d48 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 801f284:	f7e2 fece 	bl	8002024 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 801f288:	f7e2 ff50 	bl	800212c <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 801f28c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801f28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f292:	429a      	cmp	r2, r3
 801f294:	d10c      	bne.n	801f2b0 <lv_table_event+0x16c>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801f296:	f7e2 fec5 	bl	8002024 <lv_indev_get_act>
 801f29a:	f7e2 fec9 	bl	8002030 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801f29e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801f2a2:	2801      	cmp	r0, #1
 801f2a4:	f47f af62 	bne.w	801f16c <lv_table_event+0x28>
            table->col_act = LV_TABLE_CELL_NONE;
 801f2a8:	f04f 33ff 	mov.w	r3, #4294967295
 801f2ac:	6363      	str	r3, [r4, #52]	; 0x34
 801f2ae:	e75d      	b.n	801f16c <lv_table_event+0x28>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 801f2b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f2b2:	429a      	cmp	r2, r3
 801f2b4:	d0ef      	beq.n	801f296 <lv_table_event+0x152>
 801f2b6:	2800      	cmp	r0, #0
 801f2b8:	d1ed      	bne.n	801f296 <lv_table_event+0x152>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801f2ba:	4602      	mov	r2, r0
 801f2bc:	211c      	movs	r1, #28
 801f2be:	4620      	mov	r0, r4
 801f2c0:	f7e2 fc1a 	bl	8001af8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801f2c4:	2801      	cmp	r0, #1
 801f2c6:	f47f af51 	bne.w	801f16c <lv_table_event+0x28>
 801f2ca:	e7e4      	b.n	801f296 <lv_table_event+0x152>
    else if(code == LV_EVENT_FOCUSED) {
 801f2cc:	2d0e      	cmp	r5, #14
 801f2ce:	d102      	bne.n	801f2d6 <lv_table_event+0x192>
            lv_obj_invalidate(obj);
 801f2d0:	f7e5 fd3a 	bl	8004d48 <lv_obj_invalidate>
            return;
 801f2d4:	e74a      	b.n	801f16c <lv_table_event+0x28>
    } else if(code == LV_EVENT_KEY) {
 801f2d6:	2d0d      	cmp	r5, #13
 801f2d8:	d150      	bne.n	801f37c <lv_table_event+0x238>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 801f2da:	4630      	mov	r0, r6
 801f2dc:	f7e2 fc30 	bl	8001b40 <lv_event_get_param>
        int32_t col = table->col_act;
 801f2e0:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 801f2e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
        int32_t row = table->row_act;
 801f2e6:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 801f2e8:	429d      	cmp	r5, r3
 801f2ea:	d001      	beq.n	801f2f0 <lv_table_event+0x1ac>
 801f2ec:	429e      	cmp	r6, r3
 801f2ee:	d102      	bne.n	801f2f6 <lv_table_event+0x1b2>
            table->col_act = 0;
 801f2f0:	2300      	movs	r3, #0
 801f2f2:	6363      	str	r3, [r4, #52]	; 0x34
 801f2f4:	e7b8      	b.n	801f268 <lv_table_event+0x124>
        if(col >= table->col_cnt) col = 0;
 801f2f6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
        if(row >= table->row_cnt) row = 0;
 801f2f8:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
        int32_t c = *((int32_t *)lv_event_get_param(e));
 801f2fa:	6800      	ldr	r0, [r0, #0]
        if(col >= table->col_cnt) col = 0;
 801f2fc:	428d      	cmp	r5, r1
 801f2fe:	bf34      	ite	cc
 801f300:	462a      	movcc	r2, r5
 801f302:	2200      	movcs	r2, #0
        if(row >= table->row_cnt) row = 0;
 801f304:	42be      	cmp	r6, r7
 801f306:	bf34      	ite	cc
 801f308:	4633      	movcc	r3, r6
 801f30a:	2300      	movcs	r3, #0
        if(c == LV_KEY_LEFT) col--;
 801f30c:	2814      	cmp	r0, #20
 801f30e:	d108      	bne.n	801f322 <lv_table_event+0x1de>
 801f310:	3a01      	subs	r2, #1
        if(col >= table->col_cnt) {
 801f312:	4291      	cmp	r1, r2
 801f314:	dd0a      	ble.n	801f32c <lv_table_event+0x1e8>
        } else if (col < 0) {
 801f316:	1c50      	adds	r0, r2, #1
 801f318:	d10f      	bne.n	801f33a <lv_table_event+0x1f6>
            if(row != 0) {
 801f31a:	b36b      	cbz	r3, 801f378 <lv_table_event+0x234>
                col = table->col_cnt - 1;
 801f31c:	1e4a      	subs	r2, r1, #1
                row--;
 801f31e:	3b01      	subs	r3, #1
 801f320:	e00b      	b.n	801f33a <lv_table_event+0x1f6>
        else if(c == LV_KEY_RIGHT) col++;
 801f322:	2813      	cmp	r0, #19
 801f324:	d11f      	bne.n	801f366 <lv_table_event+0x222>
 801f326:	3201      	adds	r2, #1
        if(col >= table->col_cnt) {
 801f328:	4291      	cmp	r1, r2
 801f32a:	dc06      	bgt.n	801f33a <lv_table_event+0x1f6>
            if(row < table->row_cnt - 1) {
 801f32c:	1e7a      	subs	r2, r7, #1
 801f32e:	429a      	cmp	r2, r3
                row++;
 801f330:	bfc6      	itte	gt
 801f332:	3301      	addgt	r3, #1
                col = 0;
 801f334:	2200      	movgt	r2, #0
                col = table->col_cnt - 1;
 801f336:	f101 32ff 	addle.w	r2, r1, #4294967295
        if(row >= table->row_cnt) {
 801f33a:	429f      	cmp	r7, r3
            row = table->row_cnt - 1;
 801f33c:	bfd4      	ite	le
 801f33e:	f107 33ff 	addle.w	r3, r7, #4294967295
        } else if(row < 0) {
 801f342:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 801f346:	4295      	cmp	r5, r2
 801f348:	d102      	bne.n	801f350 <lv_table_event+0x20c>
 801f34a:	429e      	cmp	r6, r3
 801f34c:	f43f af0e 	beq.w	801f16c <lv_table_event+0x28>
            lv_obj_invalidate(obj);
 801f350:	4620      	mov	r0, r4
            table->col_act = col;
 801f352:	86a2      	strh	r2, [r4, #52]	; 0x34
            table->row_act = row;
 801f354:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801f356:	f7e5 fcf7 	bl	8004d48 <lv_obj_invalidate>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801f35a:	2200      	movs	r2, #0
 801f35c:	211c      	movs	r1, #28
 801f35e:	4620      	mov	r0, r4
 801f360:	f7e2 fbca 	bl	8001af8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801f364:	e702      	b.n	801f16c <lv_table_event+0x28>
        else if(c == LV_KEY_UP) row--;
 801f366:	2811      	cmp	r0, #17
 801f368:	d101      	bne.n	801f36e <lv_table_event+0x22a>
 801f36a:	3b01      	subs	r3, #1
 801f36c:	e7dc      	b.n	801f328 <lv_table_event+0x1e4>
        else if(c == LV_KEY_DOWN) row++;
 801f36e:	2812      	cmp	r0, #18
 801f370:	f47f aefc 	bne.w	801f16c <lv_table_event+0x28>
 801f374:	3301      	adds	r3, #1
 801f376:	e7d7      	b.n	801f328 <lv_table_event+0x1e4>
                col = 0;
 801f378:	461a      	mov	r2, r3
 801f37a:	e7de      	b.n	801f33a <lv_table_event+0x1f6>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801f37c:	2d15      	cmp	r5, #21
 801f37e:	f47f aef5 	bne.w	801f16c <lv_table_event+0x28>
        draw_main(e);
 801f382:	4630      	mov	r0, r6
 801f384:	f7ff fcb8 	bl	801ecf8 <draw_main>
 801f388:	e6f0      	b.n	801f16c <lv_table_event+0x28>
 801f38a:	bf00      	nop
 801f38c:	0802a0fc 	.word	0x0802a0fc

0801f390 <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 801f390:	4770      	bx	lr

0801f392 <lv_textarea_destructor>:
    if(ta->pwd_tmp != NULL) {
 801f392:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
{
 801f394:	b510      	push	{r4, lr}
 801f396:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 801f398:	b118      	cbz	r0, 801f3a2 <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 801f39a:	f7f7 fff3 	bl	8017384 <lv_mem_free>
        ta->pwd_tmp = NULL;
 801f39e:	2300      	movs	r3, #0
 801f3a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->placeholder_txt != NULL) {
 801f3a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801f3a4:	b118      	cbz	r0, 801f3ae <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->placeholder_txt);
 801f3a6:	f7f7 ffed 	bl	8017384 <lv_mem_free>
        ta->placeholder_txt = NULL;
 801f3aa:	2300      	movs	r3, #0
 801f3ac:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801f3ae:	bd10      	pop	{r4, pc}

0801f3b0 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f3b0:	f241 4259 	movw	r2, #5209	; 0x1459
 801f3b4:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 801f3b6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f3b8:	f7e7 fdee 	bl	8006f98 <lv_obj_get_style_prop>
}
 801f3bc:	bd08      	pop	{r3, pc}
	...

0801f3c0 <start_cursor_blink>:
        return true; /*If the accepted char list in not specified the accept the character*/
    }
}

static void start_cursor_blink(lv_obj_t * obj)
{
 801f3c0:	b530      	push	{r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801f3c2:	2265      	movs	r2, #101	; 0x65
 801f3c4:	b093      	sub	sp, #76	; 0x4c
 801f3c6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f3ca:	4604      	mov	r4, r0
 801f3cc:	f7e7 fde4 	bl	8006f98 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 801f3d0:	4605      	mov	r5, r0
 801f3d2:	b958      	cbnz	r0, 801f3ec <start_cursor_blink+0x2c>
        lv_anim_del(obj, cursor_blink_anim_cb);
 801f3d4:	4911      	ldr	r1, [pc, #68]	; (801f41c <start_cursor_blink+0x5c>)
 801f3d6:	4620      	mov	r0, r4
 801f3d8:	f7f7 fa72 	bl	80168c0 <lv_anim_del>
        ta->cursor.show = 1;
 801f3dc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801f3e0:	f043 0301 	orr.w	r3, r3, #1
 801f3e4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 801f3e8:	b013      	add	sp, #76	; 0x4c
 801f3ea:	bd30      	pop	{r4, r5, pc}
        lv_anim_init(&a);
 801f3ec:	a801      	add	r0, sp, #4
 801f3ee:	f7f7 fa4d 	bl	801688c <lv_anim_init>
    a->exec_cb = exec_cb;
 801f3f2:	4b0a      	ldr	r3, [pc, #40]	; (801f41c <start_cursor_blink+0x5c>)
        lv_anim_start(&a);
 801f3f4:	a801      	add	r0, sp, #4
    a->var = var;
 801f3f6:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801f3f8:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 801f3fa:	2301      	movs	r3, #1
    a->time = duration;
 801f3fc:	950b      	str	r5, [sp, #44]	; 0x2c
    a->playback_time = time;
 801f3fe:	950e      	str	r5, [sp, #56]	; 0x38
    a->current_value = start;
 801f400:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 801f404:	2300      	movs	r3, #0
 801f406:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 801f408:	4b05      	ldr	r3, [pc, #20]	; (801f420 <start_cursor_blink+0x60>)
 801f40a:	9307      	str	r3, [sp, #28]
    a->repeat_cnt = cnt;
 801f40c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f410:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801f414:	f7f7 fa80 	bl	8016918 <lv_anim_start>
}
 801f418:	e7e6      	b.n	801f3e8 <start_cursor_blink+0x28>
 801f41a:	bf00      	nop
 801f41c:	0801f425 	.word	0x0801f425
 801f420:	08016a23 	.word	0x08016a23

0801f424 <cursor_blink_anim_cb>:
{
 801f424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(show != ta->cursor.show) {
 801f426:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 801f42a:	f002 0401 	and.w	r4, r2, #1
 801f42e:	428c      	cmp	r4, r1
 801f430:	d020      	beq.n	801f474 <cursor_blink_anim_cb+0x50>
        ta->cursor.show = show == 0 ? 0 : 1;
 801f432:	3900      	subs	r1, #0
        area_tmp.x1 += ta->label->coords.x1;
 801f434:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dest->x2 = src->x2;
 801f436:	f9b0 7048 	ldrsh.w	r7, [r0, #72]	; 0x48
        ta->cursor.show = show == 0 ? 0 : 1;
 801f43a:	bf18      	it	ne
 801f43c:	2101      	movne	r1, #1
    dest->y2 = src->y2;
 801f43e:	f9b0 604a 	ldrsh.w	r6, [r0, #74]	; 0x4a
        area_tmp.x1 += ta->label->coords.x1;
 801f442:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
        ta->cursor.show = show == 0 ? 0 : 1;
 801f446:	f361 0200 	bfi	r2, r1, #0, #1
    dest->y1 = src->y1;
 801f44a:	f9b0 1046 	ldrsh.w	r1, [r0, #70]	; 0x46
 801f44e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        area_tmp.y1 += ta->label->coords.y1;
 801f452:	8aeb      	ldrh	r3, [r5, #22]
        area_tmp.x1 += ta->label->coords.x1;
 801f454:	8aaa      	ldrh	r2, [r5, #20]
        area_tmp.y1 += ta->label->coords.y1;
 801f456:	4419      	add	r1, r3
        area_tmp.y2 += ta->label->coords.y1;
 801f458:	4433      	add	r3, r6
        area_tmp.x1 += ta->label->coords.x1;
 801f45a:	4414      	add	r4, r2
        area_tmp.x2 += ta->label->coords.x1;
 801f45c:	443a      	add	r2, r7
        area_tmp.y1 += ta->label->coords.y1;
 801f45e:	f8ad 1002 	strh.w	r1, [sp, #2]
        lv_obj_invalidate_area(obj, &area_tmp);
 801f462:	4669      	mov	r1, sp
        area_tmp.x1 += ta->label->coords.x1;
 801f464:	f8ad 4000 	strh.w	r4, [sp]
        area_tmp.x2 += ta->label->coords.x1;
 801f468:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 801f46c:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 801f470:	f7e5 fc50 	bl	8004d14 <lv_obj_invalidate_area>
}
 801f474:	b003      	add	sp, #12
 801f476:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f478 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 801f478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f47c:	4604      	mov	r4, r0
 801f47e:	b089      	sub	sp, #36	; 0x24
    lv_textarea_t * ta = (lv_textarea_t *)obj;

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f480:	f7ff ff96 	bl	801f3b0 <lv_obj_get_style_text_font.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f484:	f241 425b 	movw	r2, #5211	; 0x145b
 801f488:	2100      	movs	r1, #0
 801f48a:	4607      	mov	r7, r0
 801f48c:	4620      	mov	r0, r4
    const char * txt = lv_label_get_text(ta->label);

    uint32_t byte_pos;
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);

    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f48e:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 801f680 <refr_cursor_area+0x208>
 801f492:	f7e7 fd81 	bl	8006f98 <lv_obj_get_style_prop>
 801f496:	9002      	str	r0, [sp, #8]
    const char * txt = lv_label_get_text(ta->label);
 801f498:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return ta->cursor.pos;
 801f49a:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
    const char * txt = lv_label_get_text(ta->label);
 801f49e:	f7fd fe4d 	bl	801d13c <lv_label_get_text>
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801f4a2:	4b75      	ldr	r3, [pc, #468]	; (801f678 <refr_cursor_area+0x200>)
 801f4a4:	4659      	mov	r1, fp
    const char * txt = lv_label_get_text(ta->label);
 801f4a6:	9001      	str	r0, [sp, #4]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	4798      	blx	r3
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f4ac:	9b01      	ldr	r3, [sp, #4]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 801f4ae:	4606      	mov	r6, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f4b0:	2100      	movs	r1, #0
 801f4b2:	eb03 0900 	add.w	r9, r3, r0
 801f4b6:	f8da 3000 	ldr.w	r3, [sl]
 801f4ba:	4648      	mov	r0, r9
 801f4bc:	4798      	blx	r3

    lv_coord_t letter_h = lv_font_get_line_height(font);

    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f4be:	280d      	cmp	r0, #13
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f4c0:	4680      	mov	r8, r0
    lv_coord_t letter_h = lv_font_get_line_height(font);
 801f4c2:	f9b7 5008 	ldrsh.w	r5, [r7, #8]
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f4c6:	f8cd a00c 	str.w	sl, [sp, #12]
 801f4ca:	f200 80cf 	bhi.w	801f66c <refr_cursor_area+0x1f4>
 801f4ce:	f242 4201 	movw	r2, #9217	; 0x2401
 801f4d2:	40c2      	lsrs	r2, r0
 801f4d4:	43d2      	mvns	r2, r2
 801f4d6:	f012 0201 	ands.w	r2, r2, #1
 801f4da:	f040 80c7 	bne.w	801f66c <refr_cursor_area+0x1f4>
        letter_w = lv_font_get_glyph_width(font, ' ', '\0');
 801f4de:	2120      	movs	r1, #32
    }
    else {
        /*`letter_next` parameter is '\0' to ignore kerning*/
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f4e0:	4638      	mov	r0, r7
 801f4e2:	f7f6 fe17 	bl	8016114 <lv_font_get_glyph_width>
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801f4e6:	aa05      	add	r2, sp, #20
 801f4e8:	4659      	mov	r1, fp
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f4ea:	fa0f fa80 	sxth.w	sl, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 801f4ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f4f0:	f7fd fe26 	bl	801d140 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801f4f4:	f241 425d 	movw	r2, #5213	; 0x145d
 801f4f8:	2100      	movs	r1, #0
 801f4fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f4fc:	f7e7 fd4c 	bl	8006f98 <lv_obj_get_style_prop>

    lv_text_align_t align = lv_obj_get_style_text_align(ta->label, LV_PART_MAIN);
    if(align == LV_TEXT_ALIGN_AUTO) {
 801f500:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801f504:	d10a      	bne.n	801f51c <refr_cursor_area+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f506:	4601      	mov	r1, r0
 801f508:	f241 426a 	movw	r2, #5226	; 0x146a
 801f50c:	4620      	mov	r0, r4
 801f50e:	f7e7 fd43 	bl	8006f98 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801f512:	b2c0      	uxtb	r0, r0
       if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
       else align = LV_TEXT_ALIGN_LEFT;
 801f514:	2801      	cmp	r0, #1
 801f516:	bf0c      	ite	eq
 801f518:	2003      	moveq	r0, #3
 801f51a:	2001      	movne	r0, #1
    }

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ta->label->coords.x1 + letter_w > ta->label->coords.x2 && ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT) {
 801f51c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f51e:	b2ad      	uxth	r5, r5
 801f520:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801f524:	f9b1 c014 	ldrsh.w	ip, [r1, #20]
 801f528:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 801f52c:	4462      	add	r2, ip
 801f52e:	4452      	add	r2, sl
 801f530:	428a      	cmp	r2, r1
 801f532:	dd2e      	ble.n	801f592 <refr_cursor_area+0x11a>
 801f534:	f894 b05c 	ldrb.w	fp, [r4, #92]	; 0x5c
 801f538:	f01b 0b08 	ands.w	fp, fp, #8
 801f53c:	d129      	bne.n	801f592 <refr_cursor_area+0x11a>
 801f53e:	2803      	cmp	r0, #3
 801f540:	d027      	beq.n	801f592 <refr_cursor_area+0x11a>
        letter_pos.x = 0;
        letter_pos.y += letter_h + line_space;
 801f542:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801f546:	9b02      	ldr	r3, [sp, #8]
        letter_pos.x = 0;
 801f548:	f8ad b014 	strh.w	fp, [sp, #20]
        letter_pos.y += letter_h + line_space;
 801f54c:	4403      	add	r3, r0
 801f54e:	4618      	mov	r0, r3
 801f550:	4428      	add	r0, r5
 801f552:	f8ad 0016 	strh.w	r0, [sp, #22]

        if(letter != '\0') {
 801f556:	f1b8 0f00 	cmp.w	r8, #0
 801f55a:	d013      	beq.n	801f584 <refr_cursor_area+0x10c>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 801f55c:	4b47      	ldr	r3, [pc, #284]	; (801f67c <refr_cursor_area+0x204>)
 801f55e:	4648      	mov	r0, r9
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	4798      	blx	r3
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f564:	9a01      	ldr	r2, [sp, #4]
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 801f566:	4406      	add	r6, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f568:	9b03      	ldr	r3, [sp, #12]
 801f56a:	4659      	mov	r1, fp
 801f56c:	4432      	add	r2, r6
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	4610      	mov	r0, r2
 801f572:	4798      	blx	r3
        }

        if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f574:	280d      	cmp	r0, #13
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 801f576:	4601      	mov	r1, r0
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 801f578:	d87b      	bhi.n	801f672 <refr_cursor_area+0x1fa>
 801f57a:	f242 4301 	movw	r3, #9217	; 0x2401
 801f57e:	40c3      	lsrs	r3, r0
 801f580:	07db      	lsls	r3, r3, #31
 801f582:	d576      	bpl.n	801f672 <refr_cursor_area+0x1fa>
            letter_w = lv_font_get_glyph_width(font, ' ', '\0');
 801f584:	2200      	movs	r2, #0
 801f586:	2120      	movs	r1, #32
        }
        else {
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f588:	4638      	mov	r0, r7
 801f58a:	f7f6 fdc3 	bl	8016114 <lv_font_get_glyph_width>
 801f58e:	fa0f fa80 	sxth.w	sl, r0
        }
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ta->cursor.txt_byte_pos = byte_pos;
 801f592:	64e6      	str	r6, [r4, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f594:	f241 0210 	movw	r2, #4112	; 0x1010
 801f598:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f59c:	4620      	mov	r0, r4
 801f59e:	f7e7 fcfb 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f5a2:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f5a6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f5a8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f5ac:	4620      	mov	r0, r4
 801f5ae:	f7e7 fcf3 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f5b2:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f5b6:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f5b8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f5bc:	4620      	mov	r0, r4
 801f5be:	f7e7 fceb 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f5c2:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f5c6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f5c8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801f5cc:	4620      	mov	r0, r4
 801f5ce:	f7e7 fce3 	bl	8006f98 <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR);
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR);
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR);

    lv_area_t cur_area;
    cur_area.x1 = letter_pos.x - left;
 801f5d2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    cur_area.y1 = letter_pos.y - top;
 801f5d6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f5da:	4410      	add	r0, r2
    cur_area.x1 = letter_pos.x - left;
 801f5dc:	eba2 0808 	sub.w	r8, r2, r8
    cur_area.y1 = letter_pos.y - top;
 801f5e0:	1bcf      	subs	r7, r1, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f5e2:	4489      	add	r9, r1
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f5e4:	1e46      	subs	r6, r0, #1
 801f5e6:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 801f5ea:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f5ee:	f109 39ff 	add.w	r9, r9, #4294967295
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f5f2:	eb06 030a 	add.w	r3, r6, sl
    dest->x2 = src->x2;
 801f5f6:	f9b4 e048 	ldrsh.w	lr, [r4, #72]	; 0x48
    dest->y2 = src->y2;
 801f5fa:	f9b4 c04a 	ldrsh.w	ip, [r4, #74]	; 0x4a
    cur_area.x1 = letter_pos.x - left;
 801f5fe:	fa1f f888 	uxth.w	r8, r8
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 801f602:	b29e      	uxth	r6, r3
    area_tmp.x1 += ta->label->coords.x1;
 801f604:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cur_area.y1 = letter_pos.y - top;
 801f606:	b2bf      	uxth	r7, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f608:	444d      	add	r5, r9
    area_tmp.x1 += ta->label->coords.x1;
 801f60a:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 801f60c:	8adb      	ldrh	r3, [r3, #22]
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 801f60e:	b2ad      	uxth	r5, r5
    area_tmp.x1 += ta->label->coords.x1;
 801f610:	4410      	add	r0, r2
    area_tmp.x2 += ta->label->coords.x1;
 801f612:	4472      	add	r2, lr
    area_tmp.y1 += ta->label->coords.y1;
 801f614:	4419      	add	r1, r3
    area_tmp.y2 += ta->label->coords.y1;
 801f616:	4463      	add	r3, ip
    area_tmp.x1 += ta->label->coords.x1;
 801f618:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f61c:	4620      	mov	r0, r4
    area_tmp.y1 += ta->label->coords.y1;
 801f61e:	f8ad 101a 	strh.w	r1, [sp, #26]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f622:	a906      	add	r1, sp, #24
    area_tmp.x2 += ta->label->coords.x1;
 801f624:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 801f628:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f62c:	f7e5 fb72 	bl	8004d14 <lv_obj_invalidate_area>

    lv_area_copy(&ta->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 801f630:	6a62      	ldr	r2, [r4, #36]	; 0x24
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 801f632:	a906      	add	r1, sp, #24
    dest->x1 = src->x1;
 801f634:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
 801f638:	4620      	mov	r0, r4
    area_tmp.x1 += ta->label->coords.x1;
 801f63a:	8a93      	ldrh	r3, [r2, #20]
    dest->y1 = src->y1;
 801f63c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
    area_tmp.y1 += ta->label->coords.y1;
 801f640:	8ad2      	ldrh	r2, [r2, #22]
    area_tmp.x1 += ta->label->coords.x1;
 801f642:	4498      	add	r8, r3
    dest->x2 = src->x2;
 801f644:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
    area_tmp.x2 += ta->label->coords.x1;
 801f648:	441e      	add	r6, r3
    area_tmp.y1 += ta->label->coords.y1;
 801f64a:	4417      	add	r7, r2
    dest->y2 = src->y2;
 801f64c:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
    area_tmp.y2 += ta->label->coords.y1;
 801f650:	4415      	add	r5, r2
    area_tmp.x1 += ta->label->coords.x1;
 801f652:	f8ad 8018 	strh.w	r8, [sp, #24]
    area_tmp.y1 += ta->label->coords.y1;
 801f656:	f8ad 701a 	strh.w	r7, [sp, #26]
    area_tmp.x2 += ta->label->coords.x1;
 801f65a:	f8ad 601c 	strh.w	r6, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 801f65e:	f8ad 501e 	strh.w	r5, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 801f662:	f7e5 fb57 	bl	8004d14 <lv_obj_invalidate_area>
}
 801f666:	b009      	add	sp, #36	; 0x24
 801f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f66c:	2200      	movs	r2, #0
 801f66e:	4641      	mov	r1, r8
 801f670:	e736      	b.n	801f4e0 <refr_cursor_area+0x68>
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
 801f672:	2200      	movs	r2, #0
 801f674:	e788      	b.n	801f588 <refr_cursor_area+0x110>
 801f676:	bf00      	nop
 801f678:	20000038 	.word	0x20000038
 801f67c:	20000048 	.word	0x20000048
 801f680:	20000040 	.word	0x20000040

0801f684 <pwd_char_hider>:
{
 801f684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(ta->pwd_mode != 0) {
 801f688:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 801f68c:	4606      	mov	r6, r0
    if(ta->pwd_mode != 0) {
 801f68e:	075b      	lsls	r3, r3, #29
 801f690:	d535      	bpl.n	801f6fe <pwd_char_hider+0x7a>
        char * txt  = lv_label_get_text(ta->label);
 801f692:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f694:	f7fd fd52 	bl	801d13c <lv_label_get_text>
        int32_t enc_len = _lv_txt_get_encoded_length(txt);
 801f698:	4b1e      	ldr	r3, [pc, #120]	; (801f714 <pwd_char_hider+0x90>)
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	4798      	blx	r3
        if(enc_len == 0) return;
 801f69e:	4605      	mov	r5, r0
 801f6a0:	b368      	cbz	r0, 801f6fe <pwd_char_hider+0x7a>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f6a2:	4630      	mov	r0, r6
        for(i = 0; i < enc_len; i++) {
 801f6a4:	f04f 0900 	mov.w	r9, #0
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f6a8:	f7ff fe82 	bl	801f3b0 <lv_obj_get_style_text_font.constprop.0>
        has_bullet = lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0);
 801f6ac:	a901      	add	r1, sp, #4
 801f6ae:	2300      	movs	r3, #0
 801f6b0:	f242 0222 	movw	r2, #8226	; 0x2022
 801f6b4:	f7f6 fd28 	bl	8016108 <lv_font_get_glyph_dsc>
        else bullet = "*";
 801f6b8:	4a17      	ldr	r2, [pc, #92]	; (801f718 <pwd_char_hider+0x94>)
 801f6ba:	4b18      	ldr	r3, [pc, #96]	; (801f71c <pwd_char_hider+0x98>)
 801f6bc:	2800      	cmp	r0, #0
 801f6be:	bf14      	ite	ne
 801f6c0:	4690      	movne	r8, r2
 801f6c2:	4698      	moveq	r8, r3
        size_t bullet_len = strlen(bullet);
 801f6c4:	4640      	mov	r0, r8
 801f6c6:	f7e0 fdad 	bl	8000224 <strlen>
 801f6ca:	4604      	mov	r4, r0
        char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 801f6cc:	4368      	muls	r0, r5
 801f6ce:	3001      	adds	r0, #1
 801f6d0:	f7f8 f80a 	bl	80176e8 <lv_mem_buf_get>
 801f6d4:	4607      	mov	r7, r0
        for(i = 0; i < enc_len; i++) {
 801f6d6:	4682      	mov	sl, r0
 801f6d8:	454d      	cmp	r5, r9
 801f6da:	4650      	mov	r0, sl
 801f6dc:	44a2      	add	sl, r4
 801f6de:	dc11      	bgt.n	801f704 <pwd_char_hider+0x80>
        txt_tmp[i * bullet_len] = '\0';
 801f6e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801f6e4:	2300      	movs	r3, #0
        lv_label_set_text(ta->label, txt_tmp);
 801f6e6:	4639      	mov	r1, r7
        txt_tmp[i * bullet_len] = '\0';
 801f6e8:	436c      	muls	r4, r5
 801f6ea:	553b      	strb	r3, [r7, r4]
        lv_label_set_text(ta->label, txt_tmp);
 801f6ec:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801f6ee:	f7fd fc73 	bl	801cfd8 <lv_label_set_text>
        lv_mem_buf_release(txt_tmp);
 801f6f2:	4638      	mov	r0, r7
 801f6f4:	f7f7 fe54 	bl	80173a0 <lv_mem_buf_release>
        refr_cursor_area(obj);
 801f6f8:	4630      	mov	r0, r6
 801f6fa:	f7ff febd 	bl	801f478 <refr_cursor_area>
}
 801f6fe:	b004      	add	sp, #16
 801f700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 801f704:	4622      	mov	r2, r4
 801f706:	4641      	mov	r1, r8
        for(i = 0; i < enc_len; i++) {
 801f708:	f109 0901 	add.w	r9, r9, #1
            lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 801f70c:	f7f7 fe74 	bl	80173f8 <lv_memcpy>
        for(i = 0; i < enc_len; i++) {
 801f710:	e7e2      	b.n	801f6d8 <pwd_char_hider+0x54>
 801f712:	bf00      	nop
 801f714:	2000004c 	.word	0x2000004c
 801f718:	0802a118 	.word	0x0802a118
 801f71c:	08025d11 	.word	0x08025d11

0801f720 <pwd_char_hider_anim_ready>:
    pwd_char_hider(obj);
 801f720:	6800      	ldr	r0, [r0, #0]
 801f722:	f7ff bfaf 	b.w	801f684 <pwd_char_hider>
	...

0801f728 <lv_textarea_create>:
{
 801f728:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801f72a:	4804      	ldr	r0, [pc, #16]	; (801f73c <lv_textarea_create+0x14>)
{
 801f72c:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801f72e:	f7e4 fc61 	bl	8003ff4 <lv_obj_class_create_obj>
 801f732:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801f734:	f7e4 fceb 	bl	800410e <lv_obj_class_init_obj>
}
 801f738:	4620      	mov	r0, r4
 801f73a:	bd10      	pop	{r4, pc}
 801f73c:	0802a11c 	.word	0x0802a11c

0801f740 <lv_textarea_set_placeholder_text>:
{
 801f740:	b570      	push	{r4, r5, r6, lr}
 801f742:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 801f744:	460e      	mov	r6, r1
 801f746:	b901      	cbnz	r1, 801f74a <lv_textarea_set_placeholder_text+0xa>
 801f748:	e7fe      	b.n	801f748 <lv_textarea_set_placeholder_text+0x8>
    size_t txt_len = strlen(txt);
 801f74a:	4608      	mov	r0, r1
 801f74c:	f7e0 fd6a 	bl	8000224 <strlen>
    if(txt_len == 0) {
 801f750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f752:	4605      	mov	r5, r0
 801f754:	b948      	cbnz	r0, 801f76a <lv_textarea_set_placeholder_text+0x2a>
        if(ta->placeholder_txt) {
 801f756:	b11b      	cbz	r3, 801f760 <lv_textarea_set_placeholder_text+0x20>
            lv_mem_free(ta->placeholder_txt);
 801f758:	4618      	mov	r0, r3
 801f75a:	f7f7 fe13 	bl	8017384 <lv_mem_free>
            ta->placeholder_txt = NULL;
 801f75e:	62a5      	str	r5, [r4, #40]	; 0x28
    lv_obj_invalidate(obj);
 801f760:	4620      	mov	r0, r4
}
 801f762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(obj);
 801f766:	f7e5 baef 	b.w	8004d48 <lv_obj_invalidate>
        if(ta->placeholder_txt == NULL) {
 801f76a:	1c41      	adds	r1, r0, #1
 801f76c:	b933      	cbnz	r3, 801f77c <lv_textarea_set_placeholder_text+0x3c>
            ta->placeholder_txt = lv_mem_alloc(txt_len + 1);
 801f76e:	4608      	mov	r0, r1
 801f770:	f7f7 ff8a 	bl	8017688 <lv_mem_alloc>
            ta->placeholder_txt = lv_mem_realloc(ta->placeholder_txt, txt_len + 1);
 801f774:	62a0      	str	r0, [r4, #40]	; 0x28
        LV_ASSERT_MALLOC(ta->placeholder_txt);
 801f776:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801f778:	b920      	cbnz	r0, 801f784 <lv_textarea_set_placeholder_text+0x44>
 801f77a:	e7fe      	b.n	801f77a <lv_textarea_set_placeholder_text+0x3a>
            ta->placeholder_txt = lv_mem_realloc(ta->placeholder_txt, txt_len + 1);
 801f77c:	4618      	mov	r0, r3
 801f77e:	f7f7 ff99 	bl	80176b4 <lv_mem_realloc>
 801f782:	e7f7      	b.n	801f774 <lv_textarea_set_placeholder_text+0x34>
        strcpy(ta->placeholder_txt, txt);
 801f784:	4631      	mov	r1, r6
 801f786:	f005 fcb5 	bl	80250f4 <strcpy>
 801f78a:	e7e9      	b.n	801f760 <lv_textarea_set_placeholder_text+0x20>

0801f78c <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801f78c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801f78e:	428b      	cmp	r3, r1
{
 801f790:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f792:	4604      	mov	r4, r0
 801f794:	b087      	sub	sp, #28
 801f796:	460e      	mov	r6, r1
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 801f798:	d053      	beq.n	801f842 <lv_textarea_set_cursor_pos+0xb6>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 801f79a:	4b2b      	ldr	r3, [pc, #172]	; (801f848 <lv_textarea_set_cursor_pos+0xbc>)
 801f79c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f79e:	681d      	ldr	r5, [r3, #0]
 801f7a0:	f7fd fccc 	bl	801d13c <lv_label_get_text>
 801f7a4:	47a8      	blx	r5
    if(pos < 0) pos = len + pos;
 801f7a6:	2e00      	cmp	r6, #0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 801f7a8:	4605      	mov	r5, r0
    if(pos < 0) pos = len + pos;
 801f7aa:	bfb8      	it	lt
 801f7ac:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 801f7ae:	42b0      	cmp	r0, r6
 801f7b0:	db04      	blt.n	801f7bc <lv_textarea_set_cursor_pos+0x30>
 801f7b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f7b6:	429e      	cmp	r6, r3
 801f7b8:	bf18      	it	ne
 801f7ba:	4635      	movne	r5, r6
    ta->cursor.pos = pos;
 801f7bc:	6425      	str	r5, [r4, #64]	; 0x40
	const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f7be:	4620      	mov	r0, r4
 801f7c0:	f7ff fdf6 	bl	801f3b0 <lv_obj_get_style_text_font.constprop.0>
	lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801f7c4:	aa01      	add	r2, sp, #4
	const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f7c6:	4606      	mov	r6, r0
	lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 801f7c8:	4629      	mov	r1, r5
 801f7ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f7cc:	f7fd fcb8 	bl	801d140 <lv_label_get_letter_pos>
	lv_obj_get_coords(obj, &ta_cords);
 801f7d0:	a904      	add	r1, sp, #16
 801f7d2:	4620      	mov	r0, r4
 801f7d4:	f7e5 f913 	bl	80049fe <lv_obj_get_coords>
	lv_obj_get_coords(ta->label, &label_cords);
 801f7d8:	a902      	add	r1, sp, #8
 801f7da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f7dc:	f7e5 f90f 	bl	80049fe <lv_obj_get_coords>
	lv_obj_update_layout(obj);
 801f7e0:	4620      	mov	r0, r4
 801f7e2:	f7e5 ff19 	bl	8005618 <lv_obj_update_layout>
	lv_coord_t font_h = lv_font_get_line_height(font);
 801f7e6:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
	if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 801f7ea:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 801f7ee:	4620      	mov	r0, r4
 801f7f0:	f7e6 f9a8 	bl	8005b44 <lv_obj_get_scroll_top>
 801f7f4:	4286      	cmp	r6, r0
 801f7f6:	da05      	bge.n	801f804 <lv_textarea_set_cursor_pos+0x78>
		lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 801f7f8:	2201      	movs	r2, #1
 801f7fa:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801f7fe:	4620      	mov	r0, r4
 801f800:	f7e6 fce6 	bl	80061d0 <lv_obj_scroll_to_y>
	lv_coord_t h = lv_obj_get_content_height(obj);
 801f804:	4620      	mov	r0, r4
 801f806:	f7e5 f970 	bl	8004aea <lv_obj_get_content_height>
	if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 801f80a:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
	lv_coord_t h = lv_obj_get_content_height(obj);
 801f80e:	4607      	mov	r7, r0
	if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 801f810:	4620      	mov	r0, r4
 801f812:	442e      	add	r6, r5
 801f814:	f7e6 f996 	bl	8005b44 <lv_obj_get_scroll_top>
 801f818:	1a36      	subs	r6, r6, r0
 801f81a:	42be      	cmp	r6, r7
 801f81c:	dd08      	ble.n	801f830 <lv_textarea_set_cursor_pos+0xa4>
		lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 801f81e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f822:	2201      	movs	r2, #1
 801f824:	4405      	add	r5, r0
 801f826:	4620      	mov	r0, r4
 801f828:	1be9      	subs	r1, r5, r7
 801f82a:	b209      	sxth	r1, r1
 801f82c:	f7e6 fcd0 	bl	80061d0 <lv_obj_scroll_to_y>
    ta->cursor.valid_x = cur_pos.x;
 801f830:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    start_cursor_blink(obj);
 801f834:	4620      	mov	r0, r4
    ta->cursor.valid_x = cur_pos.x;
 801f836:	87a3      	strh	r3, [r4, #60]	; 0x3c
    start_cursor_blink(obj);
 801f838:	f7ff fdc2 	bl	801f3c0 <start_cursor_blink>
    refr_cursor_area(obj);
 801f83c:	4620      	mov	r0, r4
 801f83e:	f7ff fe1b 	bl	801f478 <refr_cursor_area>
}
 801f842:	b007      	add	sp, #28
 801f844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f846:	bf00      	nop
 801f848:	2000004c 	.word	0x2000004c

0801f84c <lv_textarea_constructor>:
{
 801f84c:	b538      	push	{r3, r4, r5, lr}
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 801f84e:	f240 53dc 	movw	r3, #1500	; 0x5dc
    ta->pwd_tmp           = NULL;
 801f852:	2500      	movs	r5, #0
{
 801f854:	460c      	mov	r4, r1
    ta->label = lv_label_create(obj);
 801f856:	4608      	mov	r0, r1
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 801f858:	870b      	strh	r3, [r1, #56]	; 0x38
    ta->cursor.pos        = 1;	/*It will be set to zero later (with zero value lv_textarea_set_cursor_pos(obj, 0); woldn't do anything as there is no difference)*/
 801f85a:	2301      	movs	r3, #1
    ta->pwd_tmp           = NULL;
 801f85c:	62cd      	str	r5, [r1, #44]	; 0x2c
    ta->cursor.pos        = 1;	/*It will be set to zero later (with zero value lv_textarea_set_cursor_pos(obj, 0); woldn't do anything as there is no difference)*/
 801f85e:	640b      	str	r3, [r1, #64]	; 0x40
    ta->cursor.show      = 1;
 801f860:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ta->cursor.valid_x    = 0;
 801f864:	878d      	strh	r5, [r1, #60]	; 0x3c
    ta->cursor.show      = 1;
 801f866:	f023 0303 	bic.w	r3, r3, #3
 801f86a:	f043 0303 	orr.w	r3, r3, #3
 801f86e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    ta->text_sel_en = 0;
 801f872:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 801f876:	f023 030e 	bic.w	r3, r3, #14
    ta->max_length        = 0;
 801f87a:	e9c1 550c 	strd	r5, r5, [r1, #48]	; 0x30
    ta->text_sel_en = 0;
 801f87e:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    ta->placeholder_txt = NULL;
 801f882:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    ta->label = lv_label_create(obj);
 801f886:	f7fd fb9b 	bl	801cfc0 <lv_label_create>
    lv_obj_set_width(ta->label, lv_pct(100));
 801f88a:	f242 0164 	movw	r1, #8292	; 0x2064
    ta->label = lv_label_create(obj);
 801f88e:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 801f890:	f7e4 ffb4 	bl	80047fc <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 801f894:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f896:	4908      	ldr	r1, [pc, #32]	; (801f8b8 <lv_textarea_constructor+0x6c>)
 801f898:	f7fd fb9e 	bl	801cfd8 <lv_label_set_text>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801f89c:	4620      	mov	r0, r4
 801f89e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f8a2:	f7e4 f849 	bl	8003938 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 801f8a6:	4620      	mov	r0, r4
 801f8a8:	4629      	mov	r1, r5
 801f8aa:	f7ff ff6f 	bl	801f78c <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 801f8ae:	4620      	mov	r0, r4
}
 801f8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    start_cursor_blink(obj);
 801f8b4:	f7ff bd84 	b.w	801f3c0 <start_cursor_blink>
 801f8b8:	0802a5e7 	.word	0x0802a5e7

0801f8bc <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1 : 0;
 801f8bc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 801f8c0:	f361 0341 	bfi	r3, r1, #1, #1
 801f8c4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 801f8c8:	4770      	bx	lr

0801f8ca <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 801f8ca:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801f8ce:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 801f8d2:	428a      	cmp	r2, r1
{
 801f8d4:	b570      	push	{r4, r5, r6, lr}
 801f8d6:	4604      	mov	r4, r0
    if(ta->one_line == en) return;
 801f8d8:	d029      	beq.n	801f92e <lv_textarea_set_one_line+0x64>
    if(en) {
 801f8da:	b1d1      	cbz	r1, 801f912 <lv_textarea_set_one_line+0x48>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801f8dc:	f7ff fd68 	bl	801f3b0 <lv_obj_get_style_text_font.constprop.0>
        ta->one_line = 1;
 801f8e0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        lv_coord_t font_h              = lv_font_get_line_height(font);
 801f8e4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 801f8e8:	f242 71d1 	movw	r1, #10193	; 0x27d1
        ta->one_line = 1;
 801f8ec:	f043 0308 	orr.w	r3, r3, #8
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 801f8f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
        ta->one_line = 1;
 801f8f2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 801f8f6:	f7e4 ff81 	bl	80047fc <lv_obj_set_width>
        lv_obj_set_content_height(obj, font_h);
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	4620      	mov	r0, r4
 801f8fe:	f7e4 ffbc 	bl	800487a <lv_obj_set_content_height>
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801f902:	2300      	movs	r3, #0
 801f904:	4620      	mov	r0, r4
 801f906:	461a      	mov	r2, r3
 801f908:	4619      	mov	r1, r3
}
 801f90a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801f90e:	f7e6 bc87 	b.w	8006220 <lv_obj_scroll_to>
        ta->one_line = 0;
 801f912:	f361 03c3 	bfi	r3, r1, #3, #1
        lv_obj_set_width(ta->label, lv_pct(100));
 801f916:	f242 0164 	movw	r1, #8292	; 0x2064
        ta->one_line = 0;
 801f91a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        lv_obj_set_width(ta->label, lv_pct(100));
 801f91e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f920:	f7e4 ff6c 	bl	80047fc <lv_obj_set_width>
        lv_obj_set_height(obj, LV_DPI_DEF);
 801f924:	2182      	movs	r1, #130	; 0x82
 801f926:	4620      	mov	r0, r4
 801f928:	f7e4 ff82 	bl	8004830 <lv_obj_set_height>
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 801f92c:	e7e9      	b.n	801f902 <lv_textarea_set_one_line+0x38>
}
 801f92e:	bd70      	pop	{r4, r5, r6, pc}

0801f930 <lv_textarea_get_text>:
    if(ta->pwd_mode == 0) {
 801f930:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801f934:	075b      	lsls	r3, r3, #29
 801f936:	d402      	bmi.n	801f93e <lv_textarea_get_text+0xe>
        txt = lv_label_get_text(ta->label);
 801f938:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f93a:	f7fd bbff 	b.w	801d13c <lv_label_get_text>
}
 801f93e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f940:	4770      	bx	lr

0801f942 <lv_textarea_get_cursor_pos>:
}
 801f942:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f944:	4770      	bx	lr

0801f946 <lv_textarea_get_one_line>:
    return ta->one_line == 0 ? false : true;
 801f946:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 801f94a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801f94e:	4770      	bx	lr

0801f950 <lv_textarea_clear_selection>:
{
 801f950:	b538      	push	{r3, r4, r5, lr}
 801f952:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 801f954:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f956:	f7fd fde4 	bl	801d522 <lv_label_get_text_selection_start>
 801f95a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f95e:	4605      	mov	r5, r0
 801f960:	4298      	cmp	r0, r3
 801f962:	d00b      	beq.n	801f97c <lv_textarea_clear_selection+0x2c>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801f964:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f966:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f96a:	f7fd fbe1 	bl	801d130 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801f96e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f970:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 801f974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 801f978:	f7fd bbdd 	b.w	801d136 <lv_label_set_text_sel_end>
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 801f97c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f97e:	f7fd fdd2 	bl	801d526 <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 801f982:	42a8      	cmp	r0, r5
 801f984:	d1ee      	bne.n	801f964 <lv_textarea_clear_selection+0x14>
}
 801f986:	bd38      	pop	{r3, r4, r5, pc}

0801f988 <lv_textarea_add_text>:
{
 801f988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f98a:	4604      	mov	r4, r0
 801f98c:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(txt);
 801f98e:	460d      	mov	r5, r1
 801f990:	b901      	cbnz	r1, 801f994 <lv_textarea_add_text+0xc>
 801f992:	e7fe      	b.n	801f992 <lv_textarea_add_text+0xa>
    if(ta->pwd_mode != 0) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801f994:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801f998:	075a      	lsls	r2, r3, #29
 801f99a:	d501      	bpl.n	801f9a0 <lv_textarea_add_text+0x18>
 801f99c:	f7ff fe72 	bl	801f684 <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 801f9a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f9a2:	b90b      	cbnz	r3, 801f9a8 <lv_textarea_add_text+0x20>
 801f9a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f9a6:	b19b      	cbz	r3, 801f9d0 <lv_textarea_add_text+0x48>
        uint32_t i = 0;
 801f9a8:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801f9aa:	4e36      	ldr	r6, [pc, #216]	; (801fa84 <lv_textarea_add_text+0xfc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801f9ac:	4f36      	ldr	r7, [pc, #216]	; (801fa88 <lv_textarea_add_text+0x100>)
        uint32_t i = 0;
 801f9ae:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 801f9b0:	9b01      	ldr	r3, [sp, #4]
 801f9b2:	5ceb      	ldrb	r3, [r5, r3]
 801f9b4:	b90b      	cbnz	r3, 801f9ba <lv_textarea_add_text+0x32>
}
 801f9b6:	b013      	add	sp, #76	; 0x4c
 801f9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801f9ba:	a901      	add	r1, sp, #4
 801f9bc:	6833      	ldr	r3, [r6, #0]
 801f9be:	4628      	mov	r0, r5
 801f9c0:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801f9c2:	683b      	ldr	r3, [r7, #0]
 801f9c4:	4798      	blx	r3
 801f9c6:	4601      	mov	r1, r0
 801f9c8:	4620      	mov	r0, r4
 801f9ca:	f000 f885 	bl	801fad8 <lv_textarea_add_char>
 801f9ce:	e7ef      	b.n	801f9b0 <lv_textarea_add_text+0x28>
    lv_res_t res = insert_handler(obj, txt);
 801f9d0:	4629      	mov	r1, r5
 801f9d2:	4620      	mov	r0, r4
 801f9d4:	f000 f862 	bl	801fa9c <insert_handler>
    if(res != LV_RES_OK) return;
 801f9d8:	2801      	cmp	r0, #1
 801f9da:	d1ec      	bne.n	801f9b6 <lv_textarea_add_text+0x2e>
    if(ta->placeholder_txt) {
 801f9dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f9de:	b13b      	cbz	r3, 801f9f0 <lv_textarea_add_text+0x68>
        const char * txt_act = lv_label_get_text(ta->label);
 801f9e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f9e2:	f7fd fbab 	bl	801d13c <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801f9e6:	7803      	ldrb	r3, [r0, #0]
 801f9e8:	b913      	cbnz	r3, 801f9f0 <lv_textarea_add_text+0x68>
 801f9ea:	4620      	mov	r0, r4
 801f9ec:	f7e5 f9ac 	bl	8004d48 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 801f9f0:	462a      	mov	r2, r5
 801f9f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f9f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f9f6:	f7fd fd99 	bl	801d52c <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 801f9fa:	4620      	mov	r0, r4
 801f9fc:	f7ff ffa8 	bl	801f950 <lv_textarea_clear_selection>
    if(ta->pwd_mode != 0) {
 801fa00:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fa04:	075b      	lsls	r3, r3, #29
 801fa06:	d518      	bpl.n	801fa3a <lv_textarea_add_text+0xb2>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + strlen(txt) + 1);
 801fa08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801fa0a:	4638      	mov	r0, r7
 801fa0c:	f7e0 fc0a 	bl	8000224 <strlen>
 801fa10:	4606      	mov	r6, r0
 801fa12:	4628      	mov	r0, r5
 801fa14:	f7e0 fc06 	bl	8000224 <strlen>
 801fa18:	4430      	add	r0, r6
 801fa1a:	1c41      	adds	r1, r0, #1
 801fa1c:	4638      	mov	r0, r7
 801fa1e:	f7f7 fe49 	bl	80176b4 <lv_mem_realloc>
 801fa22:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fa24:	b900      	cbnz	r0, 801fa28 <lv_textarea_add_text+0xa0>
 801fa26:	e7fe      	b.n	801fa26 <lv_textarea_add_text+0x9e>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 801fa28:	462a      	mov	r2, r5
 801fa2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fa2c:	f7f9 fb12 	bl	8019054 <_lv_txt_ins>
        if(ta->pwd_show_time == 0) {
 801fa30:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fa32:	b98b      	cbnz	r3, 801fa58 <lv_textarea_add_text+0xd0>
            pwd_char_hider(obj);
 801fa34:	4620      	mov	r0, r4
 801fa36:	f7ff fe25 	bl	801f684 <pwd_char_hider>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 801fa3a:	4b14      	ldr	r3, [pc, #80]	; (801fa8c <lv_textarea_add_text+0x104>)
 801fa3c:	4628      	mov	r0, r5
    return ta->cursor.pos;
 801fa3e:	6c26      	ldr	r6, [r4, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	4798      	blx	r3
 801fa44:	1981      	adds	r1, r0, r6
 801fa46:	4620      	mov	r0, r4
 801fa48:	f7ff fea0 	bl	801f78c <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801fa4c:	2200      	movs	r2, #0
 801fa4e:	211c      	movs	r1, #28
 801fa50:	4620      	mov	r0, r4
 801fa52:	f7e2 f851 	bl	8001af8 <lv_event_send>
 801fa56:	e7ae      	b.n	801f9b6 <lv_textarea_add_text+0x2e>
            lv_anim_init(&a);
 801fa58:	a801      	add	r0, sp, #4
 801fa5a:	f7f6 ff17 	bl	801688c <lv_anim_init>
    a->exec_cb = exec_cb;
 801fa5e:	4b0c      	ldr	r3, [pc, #48]	; (801fa90 <lv_textarea_add_text+0x108>)
            lv_anim_start(&a);
 801fa60:	a801      	add	r0, sp, #4
    a->var = var;
 801fa62:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801fa64:	9302      	str	r3, [sp, #8]
    a->time = duration;
 801fa66:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fa68:	930b      	str	r3, [sp, #44]	; 0x2c
    a->start_value = start;
 801fa6a:	2300      	movs	r3, #0
    a->current_value = start;
 801fa6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 801fa70:	2301      	movs	r3, #1
 801fa72:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 801fa74:	4b07      	ldr	r3, [pc, #28]	; (801fa94 <lv_textarea_add_text+0x10c>)
 801fa76:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
 801fa78:	4b07      	ldr	r3, [pc, #28]	; (801fa98 <lv_textarea_add_text+0x110>)
 801fa7a:	9304      	str	r3, [sp, #16]
 801fa7c:	f7f6 ff4c 	bl	8016918 <lv_anim_start>
 801fa80:	e7db      	b.n	801fa3a <lv_textarea_add_text+0xb2>
 801fa82:	bf00      	nop
 801fa84:	20000040 	.word	0x20000040
 801fa88:	20000050 	.word	0x20000050
 801fa8c:	2000004c 	.word	0x2000004c
 801fa90:	0801f391 	.word	0x0801f391
 801fa94:	08016a23 	.word	0x08016a23
 801fa98:	0801f721 	.word	0x0801f721

0801fa9c <insert_handler>:
    if(code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
#endif
}

static lv_res_t insert_handler(lv_obj_t * obj, const char * txt)
{
 801fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ta_insert_replace = NULL;
 801fa9e:	4c0d      	ldr	r4, [pc, #52]	; (801fad4 <insert_handler+0x38>)
 801faa0:	2700      	movs	r7, #0
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 801faa2:	460a      	mov	r2, r1
{
 801faa4:	460d      	mov	r5, r1
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 801faa6:	211d      	movs	r1, #29
    ta_insert_replace = NULL;
 801faa8:	6027      	str	r7, [r4, #0]
{
 801faaa:	4606      	mov	r6, r0
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 801faac:	f7e2 f824 	bl	8001af8 <lv_event_send>
    if(ta_insert_replace) {
 801fab0:	6824      	ldr	r4, [r4, #0]
 801fab2:	b164      	cbz	r4, 801face <insert_handler+0x32>
        if(ta_insert_replace[0] == '\0') return LV_RES_INV; /*Drop this text*/
 801fab4:	7820      	ldrb	r0, [r4, #0]
 801fab6:	b148      	cbz	r0, 801facc <insert_handler+0x30>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, txt)) {
 801fab8:	4629      	mov	r1, r5
 801faba:	4620      	mov	r0, r4
 801fabc:	f7e0 fba8 	bl	8000210 <strcmp>
 801fac0:	b128      	cbz	r0, 801face <insert_handler+0x32>
            lv_textarea_add_text(obj, ta_insert_replace);
 801fac2:	4630      	mov	r0, r6
 801fac4:	4621      	mov	r1, r4
 801fac6:	f7ff ff5f 	bl	801f988 <lv_textarea_add_text>
            return LV_RES_INV;
 801faca:	4638      	mov	r0, r7
        }
    }

    return LV_RES_OK;
}
 801facc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_RES_OK;
 801face:	2001      	movs	r0, #1
 801fad0:	e7fc      	b.n	801facc <insert_handler+0x30>
 801fad2:	bf00      	nop
 801fad4:	2000b23c 	.word	0x2000b23c

0801fad8 <lv_textarea_add_char>:
{
 801fad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fada:	b097      	sub	sp, #92	; 0x5c
    u32_buf[1] = 0;
 801fadc:	2300      	movs	r3, #0
{
 801fade:	4604      	mov	r4, r0
 801fae0:	9101      	str	r1, [sp, #4]
    u32_buf[0] = c;
 801fae2:	9103      	str	r1, [sp, #12]
    lv_res_t res = insert_handler(obj, letter_buf);
 801fae4:	a903      	add	r1, sp, #12
    u32_buf[1] = 0;
 801fae6:	9304      	str	r3, [sp, #16]
    lv_res_t res = insert_handler(obj, letter_buf);
 801fae8:	f7ff ffd8 	bl	801fa9c <insert_handler>
    if(res != LV_RES_OK) return;
 801faec:	2801      	cmp	r0, #1
 801faee:	d149      	bne.n	801fb84 <lv_textarea_add_char+0xac>
    if(ta->one_line && (c == '\n' || c == '\r')) {
 801faf0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801faf4:	0719      	lsls	r1, r3, #28
 801faf6:	d504      	bpl.n	801fb02 <lv_textarea_add_char+0x2a>
 801faf8:	9b01      	ldr	r3, [sp, #4]
 801fafa:	2b0a      	cmp	r3, #10
 801fafc:	d042      	beq.n	801fb84 <lv_textarea_add_char+0xac>
 801fafe:	2b0d      	cmp	r3, #13
 801fb00:	d040      	beq.n	801fb84 <lv_textarea_add_char+0xac>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 801fb02:	4d3e      	ldr	r5, [pc, #248]	; (801fbfc <lv_textarea_add_char+0x124>)
 801fb04:	2100      	movs	r1, #0
 801fb06:	a801      	add	r0, sp, #4
 801fb08:	682b      	ldr	r3, [r5, #0]
 801fb0a:	4798      	blx	r3
 801fb0c:	4606      	mov	r6, r0
    if(ta->accepted_chars == NULL && ta->max_length == 0) return true;
 801fb0e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801fb12:	bb6a      	cbnz	r2, 801fb70 <lv_textarea_add_char+0x98>
 801fb14:	bb6b      	cbnz	r3, 801fb72 <lv_textarea_add_char+0x9a>
    if(ta->pwd_mode != 0) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 801fb16:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fb1a:	075a      	lsls	r2, r3, #29
 801fb1c:	d502      	bpl.n	801fb24 <lv_textarea_add_char+0x4c>
 801fb1e:	4620      	mov	r0, r4
 801fb20:	f7ff fdb0 	bl	801f684 <pwd_char_hider>
    if(ta->placeholder_txt) {
 801fb24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fb26:	b13b      	cbz	r3, 801fb38 <lv_textarea_add_char+0x60>
        const char * txt = lv_label_get_text(ta->label);
 801fb28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fb2a:	f7fd fb07 	bl	801d13c <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 801fb2e:	7803      	ldrb	r3, [r0, #0]
 801fb30:	b913      	cbnz	r3, 801fb38 <lv_textarea_add_char+0x60>
 801fb32:	4620      	mov	r0, r4
 801fb34:	f7e5 f908 	bl	8004d48 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 801fb38:	aa03      	add	r2, sp, #12
 801fb3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fb3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fb3e:	f7fd fcf5 	bl	801d52c <lv_label_ins_text>
    lv_textarea_clear_selection(obj);                                                /*Clear selection*/
 801fb42:	4620      	mov	r0, r4
 801fb44:	f7ff ff04 	bl	801f950 <lv_textarea_clear_selection>
    if(ta->pwd_mode != 0) {
 801fb48:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fb4c:	075b      	lsls	r3, r3, #29
 801fb4e:	d534      	bpl.n	801fbba <lv_textarea_add_char+0xe2>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + strlen(letter_buf) + 1); /*+2: the new char + \0*/
 801fb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fb52:	4630      	mov	r0, r6
 801fb54:	f7e0 fb66 	bl	8000224 <strlen>
 801fb58:	4605      	mov	r5, r0
 801fb5a:	a803      	add	r0, sp, #12
 801fb5c:	f7e0 fb62 	bl	8000224 <strlen>
 801fb60:	4428      	add	r0, r5
 801fb62:	1c41      	adds	r1, r0, #1
 801fb64:	4630      	mov	r0, r6
 801fb66:	f7f7 fda5 	bl	80176b4 <lv_mem_realloc>
 801fb6a:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fb6c:	b9e0      	cbnz	r0, 801fba8 <lv_textarea_add_char+0xd0>
 801fb6e:	e7fe      	b.n	801fb6e <lv_textarea_add_char+0x96>
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 801fb70:	b16b      	cbz	r3, 801fb8e <lv_textarea_add_char+0xb6>
 801fb72:	4b23      	ldr	r3, [pc, #140]	; (801fc00 <lv_textarea_add_char+0x128>)
 801fb74:	4620      	mov	r0, r4
 801fb76:	681f      	ldr	r7, [r3, #0]
 801fb78:	f7ff feda 	bl	801f930 <lv_textarea_get_text>
 801fb7c:	47b8      	blx	r7
 801fb7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fb80:	4298      	cmp	r0, r3
 801fb82:	d301      	bcc.n	801fb88 <lv_textarea_add_char+0xb0>
}
 801fb84:	b017      	add	sp, #92	; 0x5c
 801fb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ta->accepted_chars) {
 801fb88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	d0c3      	beq.n	801fb16 <lv_textarea_add_char+0x3e>
        uint32_t i = 0;
 801fb8e:	2300      	movs	r3, #0
 801fb90:	9305      	str	r3, [sp, #20]
        while(ta->accepted_chars[i] != '\0') {
 801fb92:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fb94:	9b05      	ldr	r3, [sp, #20]
 801fb96:	5cc3      	ldrb	r3, [r0, r3]
 801fb98:	2b00      	cmp	r3, #0
 801fb9a:	d0f3      	beq.n	801fb84 <lv_textarea_add_char+0xac>
            uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 801fb9c:	682b      	ldr	r3, [r5, #0]
 801fb9e:	a905      	add	r1, sp, #20
 801fba0:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 801fba2:	4286      	cmp	r6, r0
 801fba4:	d1f5      	bne.n	801fb92 <lv_textarea_add_char+0xba>
 801fba6:	e7b6      	b.n	801fb16 <lv_textarea_add_char+0x3e>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 801fba8:	aa03      	add	r2, sp, #12
 801fbaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fbac:	f7f9 fa52 	bl	8019054 <_lv_txt_ins>
        if(ta->pwd_show_time == 0) {
 801fbb0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fbb2:	b96b      	cbnz	r3, 801fbd0 <lv_textarea_add_char+0xf8>
            pwd_char_hider(obj);
 801fbb4:	4620      	mov	r0, r4
 801fbb6:	f7ff fd65 	bl	801f684 <pwd_char_hider>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 801fbba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fbbc:	4620      	mov	r0, r4
 801fbbe:	3101      	adds	r1, #1
 801fbc0:	f7ff fde4 	bl	801f78c <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801fbc4:	2200      	movs	r2, #0
 801fbc6:	211c      	movs	r1, #28
 801fbc8:	4620      	mov	r0, r4
 801fbca:	f7e1 ff95 	bl	8001af8 <lv_event_send>
 801fbce:	e7d9      	b.n	801fb84 <lv_textarea_add_char+0xac>
            lv_anim_init(&a);
 801fbd0:	a805      	add	r0, sp, #20
 801fbd2:	f7f6 fe5b 	bl	801688c <lv_anim_init>
    a->exec_cb = exec_cb;
 801fbd6:	4b0b      	ldr	r3, [pc, #44]	; (801fc04 <lv_textarea_add_char+0x12c>)
            lv_anim_start(&a);
 801fbd8:	a805      	add	r0, sp, #20
    a->var = var;
 801fbda:	9405      	str	r4, [sp, #20]
    a->exec_cb = exec_cb;
 801fbdc:	9306      	str	r3, [sp, #24]
    a->time = duration;
 801fbde:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fbe0:	930f      	str	r3, [sp, #60]	; 0x3c
    a->start_value = start;
 801fbe2:	2300      	movs	r3, #0
    a->current_value = start;
 801fbe4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    a->end_value = end;
 801fbe8:	2301      	movs	r3, #1
 801fbea:	930e      	str	r3, [sp, #56]	; 0x38
    a->path_cb = path_cb;
 801fbec:	4b06      	ldr	r3, [pc, #24]	; (801fc08 <lv_textarea_add_char+0x130>)
 801fbee:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
 801fbf0:	4b06      	ldr	r3, [pc, #24]	; (801fc0c <lv_textarea_add_char+0x134>)
 801fbf2:	9308      	str	r3, [sp, #32]
 801fbf4:	f7f6 fe90 	bl	8016918 <lv_anim_start>
 801fbf8:	e7df      	b.n	801fbba <lv_textarea_add_char+0xe2>
 801fbfa:	bf00      	nop
 801fbfc:	20000040 	.word	0x20000040
 801fc00:	2000004c 	.word	0x2000004c
 801fc04:	0801f391 	.word	0x0801f391
 801fc08:	08016a23 	.word	0x08016a23
 801fc0c:	0801f721 	.word	0x0801f721

0801fc10 <lv_textarea_del_char>:
{
 801fc10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(cur_pos == 0) return;
 801fc12:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 801fc14:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d04d      	beq.n	801fcb6 <lv_textarea_del_char+0xa6>
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 801fc1a:	237f      	movs	r3, #127	; 0x7f
    lv_res_t res = insert_handler(obj, del_buf);
 801fc1c:	a903      	add	r1, sp, #12
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 801fc1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    lv_res_t res = insert_handler(obj, del_buf);
 801fc22:	f7ff ff3b 	bl	801fa9c <insert_handler>
    if(res != LV_RES_OK) return;
 801fc26:	2801      	cmp	r0, #1
    lv_res_t res = insert_handler(obj, del_buf);
 801fc28:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return;
 801fc2a:	d144      	bne.n	801fcb6 <lv_textarea_del_char+0xa6>
    char * label_txt = lv_label_get_text(ta->label);
 801fc2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fc2e:	f7fd fa85 	bl	801d13c <lv_label_get_text>
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 801fc32:	6c21      	ldr	r1, [r4, #64]	; 0x40
    char * label_txt = lv_label_get_text(ta->label);
 801fc34:	4606      	mov	r6, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 801fc36:	462a      	mov	r2, r5
 801fc38:	3901      	subs	r1, #1
 801fc3a:	f7f9 fa33 	bl	80190a4 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 801fc3e:	4631      	mov	r1, r6
 801fc40:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fc42:	f7fd f9c9 	bl	801cfd8 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 801fc46:	4620      	mov	r0, r4
 801fc48:	f7ff fe82 	bl	801f950 <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 801fc4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fc4e:	b13b      	cbz	r3, 801fc60 <lv_textarea_del_char+0x50>
        const char * txt = lv_label_get_text(ta->label);
 801fc50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fc52:	f7fd fa73 	bl	801d13c <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 801fc56:	7803      	ldrb	r3, [r0, #0]
 801fc58:	b913      	cbnz	r3, 801fc60 <lv_textarea_del_char+0x50>
 801fc5a:	4620      	mov	r0, r4
 801fc5c:	f7e5 f874 	bl	8004d48 <lv_obj_invalidate>
    if(ta->pwd_mode != 0) {
 801fc60:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fc64:	075b      	lsls	r3, r3, #29
 801fc66:	d51c      	bpl.n	801fca2 <lv_textarea_del_char+0x92>
        uint32_t byte_pos = _lv_txt_encoded_get_byte_id(ta->pwd_tmp, ta->cursor.pos - 1);
 801fc68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fc6a:	4b14      	ldr	r3, [pc, #80]	; (801fcbc <lv_textarea_del_char+0xac>)
 801fc6c:	3901      	subs	r1, #1
 801fc6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801fc70:	681b      	ldr	r3, [r3, #0]
 801fc72:	4798      	blx	r3
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, _lv_txt_encoded_size(&ta->pwd_tmp[byte_pos]));
 801fc74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fc76:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801fc78:	4b11      	ldr	r3, [pc, #68]	; (801fcc0 <lv_textarea_del_char+0xb0>)
 801fc7a:	3901      	subs	r1, #1
 801fc7c:	4428      	add	r0, r5
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	9101      	str	r1, [sp, #4]
 801fc82:	4798      	blx	r3
 801fc84:	9901      	ldr	r1, [sp, #4]
 801fc86:	4602      	mov	r2, r0
 801fc88:	4628      	mov	r0, r5
 801fc8a:	f7f9 fa0b 	bl	80190a4 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 801fc8e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 801fc90:	4628      	mov	r0, r5
 801fc92:	f7e0 fac7 	bl	8000224 <strlen>
 801fc96:	1c41      	adds	r1, r0, #1
 801fc98:	4628      	mov	r0, r5
 801fc9a:	f7f7 fd0b 	bl	80176b4 <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fc9e:	b160      	cbz	r0, 801fcba <lv_textarea_del_char+0xaa>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 801fca0:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 801fca2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fca4:	4620      	mov	r0, r4
 801fca6:	3901      	subs	r1, #1
 801fca8:	f7ff fd70 	bl	801f78c <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801fcac:	2200      	movs	r2, #0
 801fcae:	211c      	movs	r1, #28
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	f7e1 ff21 	bl	8001af8 <lv_event_send>
}
 801fcb6:	b004      	add	sp, #16
 801fcb8:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fcba:	e7fe      	b.n	801fcba <lv_textarea_del_char+0xaa>
 801fcbc:	20000038 	.word	0x20000038
 801fcc0:	20000048 	.word	0x20000048

0801fcc4 <lv_textarea_del_char_forward>:
{
 801fcc4:	b538      	push	{r3, r4, r5, lr}
    return ta->cursor.pos;
 801fcc6:	6c05      	ldr	r5, [r0, #64]	; 0x40
{
 801fcc8:	4604      	mov	r4, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 801fcca:	1c69      	adds	r1, r5, #1
 801fccc:	f7ff fd5e 	bl	801f78c <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 801fcd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fcd2:	429d      	cmp	r5, r3
 801fcd4:	d004      	beq.n	801fce0 <lv_textarea_del_char_forward+0x1c>
 801fcd6:	4620      	mov	r0, r4
}
 801fcd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 801fcdc:	f7ff bf98 	b.w	801fc10 <lv_textarea_del_char>
}
 801fce0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801fce4 <lv_textarea_set_text>:
{
 801fce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fce6:	4604      	mov	r4, r0
 801fce8:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(txt);
 801fcea:	460d      	mov	r5, r1
 801fcec:	b901      	cbnz	r1, 801fcf0 <lv_textarea_set_text+0xc>
 801fcee:	e7fe      	b.n	801fcee <lv_textarea_set_text+0xa>
    lv_textarea_clear_selection(obj);
 801fcf0:	f7ff fe2e 	bl	801f950 <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 801fcf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fcf6:	b913      	cbnz	r3, 801fcfe <lv_textarea_set_text+0x1a>
 801fcf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	d03a      	beq.n	801fd74 <lv_textarea_set_text+0x90>
        lv_label_set_text(ta->label, "");
 801fcfe:	4934      	ldr	r1, [pc, #208]	; (801fdd0 <lv_textarea_set_text+0xec>)
 801fd00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd02:	f7fd f969 	bl	801cfd8 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801fd06:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801fd0a:	4620      	mov	r0, r4
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801fd0c:	4e31      	ldr	r6, [pc, #196]	; (801fdd4 <lv_textarea_set_text+0xf0>)
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801fd0e:	f7ff fd3d 	bl	801f78c <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode != 0) {
 801fd12:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801fd16:	4f30      	ldr	r7, [pc, #192]	; (801fdd8 <lv_textarea_set_text+0xf4>)
        if(ta->pwd_mode != 0) {
 801fd18:	f013 0f04 	tst.w	r3, #4
 801fd1c:	f04f 0300 	mov.w	r3, #0
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 801fd20:	bf1c      	itt	ne
 801fd22:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 801fd24:	7013      	strbne	r3, [r2, #0]
        uint32_t i = 0;
 801fd26:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 801fd28:	9b01      	ldr	r3, [sp, #4]
 801fd2a:	5ceb      	ldrb	r3, [r5, r3]
 801fd2c:	b9bb      	cbnz	r3, 801fd5e <lv_textarea_set_text+0x7a>
    if(ta->placeholder_txt) {
 801fd2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fd30:	b13b      	cbz	r3, 801fd42 <lv_textarea_set_text+0x5e>
        const char * txt_act = lv_label_get_text(ta->label);
 801fd32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd34:	f7fd fa02 	bl	801d13c <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 801fd38:	7803      	ldrb	r3, [r0, #0]
 801fd3a:	b913      	cbnz	r3, 801fd42 <lv_textarea_set_text+0x5e>
 801fd3c:	4620      	mov	r0, r4
 801fd3e:	f7e5 f803 	bl	8004d48 <lv_obj_invalidate>
    if(ta->pwd_mode != 0) {
 801fd42:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801fd46:	075b      	lsls	r3, r3, #29
 801fd48:	d526      	bpl.n	801fd98 <lv_textarea_set_text+0xb4>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 801fd4a:	4628      	mov	r0, r5
 801fd4c:	f7e0 fa6a 	bl	8000224 <strlen>
 801fd50:	1c41      	adds	r1, r0, #1
 801fd52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801fd54:	f7f7 fcae 	bl	80176b4 <lv_mem_realloc>
 801fd58:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 801fd5a:	b9a8      	cbnz	r0, 801fd88 <lv_textarea_set_text+0xa4>
 801fd5c:	e7fe      	b.n	801fd5c <lv_textarea_set_text+0x78>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 801fd5e:	a901      	add	r1, sp, #4
 801fd60:	6833      	ldr	r3, [r6, #0]
 801fd62:	4628      	mov	r0, r5
 801fd64:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 801fd66:	683b      	ldr	r3, [r7, #0]
 801fd68:	4798      	blx	r3
 801fd6a:	4601      	mov	r1, r0
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	f7ff feb3 	bl	801fad8 <lv_textarea_add_char>
 801fd72:	e7d9      	b.n	801fd28 <lv_textarea_set_text+0x44>
        lv_label_set_text(ta->label, txt);
 801fd74:	4629      	mov	r1, r5
 801fd76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd78:	f7fd f92e 	bl	801cfd8 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801fd7c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801fd80:	4620      	mov	r0, r4
 801fd82:	f7ff fd03 	bl	801f78c <lv_textarea_set_cursor_pos>
 801fd86:	e7d2      	b.n	801fd2e <lv_textarea_set_text+0x4a>
        strcpy(ta->pwd_tmp, txt);
 801fd88:	4629      	mov	r1, r5
 801fd8a:	f005 f9b3 	bl	80250f4 <strcpy>
        if(ta->pwd_show_time == 0) {
 801fd8e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fd90:	b94b      	cbnz	r3, 801fda6 <lv_textarea_set_text+0xc2>
            pwd_char_hider(obj);
 801fd92:	4620      	mov	r0, r4
 801fd94:	f7ff fc76 	bl	801f684 <pwd_char_hider>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801fd98:	2200      	movs	r2, #0
 801fd9a:	211c      	movs	r1, #28
 801fd9c:	4620      	mov	r0, r4
 801fd9e:	f7e1 feab 	bl	8001af8 <lv_event_send>
}
 801fda2:	b013      	add	sp, #76	; 0x4c
 801fda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_anim_init(&a);
 801fda6:	a801      	add	r0, sp, #4
 801fda8:	f7f6 fd70 	bl	801688c <lv_anim_init>
    a->exec_cb = exec_cb;
 801fdac:	4b0b      	ldr	r3, [pc, #44]	; (801fddc <lv_textarea_set_text+0xf8>)
            lv_anim_start(&a);
 801fdae:	a801      	add	r0, sp, #4
    a->var = var;
 801fdb0:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801fdb2:	9302      	str	r3, [sp, #8]
    a->time = duration;
 801fdb4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801fdb6:	930b      	str	r3, [sp, #44]	; 0x2c
    a->start_value = start;
 801fdb8:	2300      	movs	r3, #0
    a->current_value = start;
 801fdba:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 801fdbe:	2301      	movs	r3, #1
 801fdc0:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 801fdc2:	4b07      	ldr	r3, [pc, #28]	; (801fde0 <lv_textarea_set_text+0xfc>)
 801fdc4:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
 801fdc6:	4b07      	ldr	r3, [pc, #28]	; (801fde4 <lv_textarea_set_text+0x100>)
 801fdc8:	9304      	str	r3, [sp, #16]
 801fdca:	f7f6 fda5 	bl	8016918 <lv_anim_start>
 801fdce:	e7e3      	b.n	801fd98 <lv_textarea_set_text+0xb4>
 801fdd0:	0802a5e7 	.word	0x0802a5e7
 801fdd4:	20000040 	.word	0x20000040
 801fdd8:	20000050 	.word	0x20000050
 801fddc:	0801f391 	.word	0x0801f391
 801fde0:	08016a23 	.word	0x08016a23
 801fde4:	0801f721 	.word	0x0801f721

0801fde8 <lv_textarea_cursor_right>:
    cp++;
 801fde8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, cp);
 801fdea:	3101      	adds	r1, #1
 801fdec:	f7ff bcce 	b.w	801f78c <lv_textarea_set_cursor_pos>

0801fdf0 <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 801fdf0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    if(cp > 0) {
 801fdf2:	b111      	cbz	r1, 801fdfa <lv_textarea_cursor_left+0xa>
        lv_textarea_set_cursor_pos(obj, cp);
 801fdf4:	3901      	subs	r1, #1
 801fdf6:	f7ff bcc9 	b.w	801f78c <lv_textarea_set_cursor_pos>
}
 801fdfa:	4770      	bx	lr

0801fdfc <lv_textarea_cursor_down>:
{
 801fdfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fdfe:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 801fe00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801fe02:	aa01      	add	r2, sp, #4
 801fe04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fe06:	f7fd f99b 	bl	801d140 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801fe0a:	f241 425b 	movw	r2, #5211	; 0x145b
 801fe0e:	2100      	movs	r1, #0
 801fe10:	4620      	mov	r0, r4
 801fe12:	f7e7 f8c1 	bl	8006f98 <lv_obj_get_style_prop>
 801fe16:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fe18:	4620      	mov	r0, r4
 801fe1a:	f7ff fac9 	bl	801f3b0 <lv_obj_get_style_text_font.constprop.0>
    pos.y += font_h + line_space + 1;
 801fe1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801fe22:	441d      	add	r5, r3
 801fe24:	8903      	ldrh	r3, [r0, #8]
    if(pos.y < lv_obj_get_height(ta->label)) {
 801fe26:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y += font_h + line_space + 1;
 801fe28:	3501      	adds	r5, #1
 801fe2a:	441d      	add	r5, r3
    pos.x = ta->cursor.valid_x;
 801fe2c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    pos.y += font_h + line_space + 1;
 801fe2e:	b22d      	sxth	r5, r5
    pos.x = ta->cursor.valid_x;
 801fe30:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + line_space + 1;
 801fe34:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ta->label)) {
 801fe38:	f7e4 fe37 	bl	8004aaa <lv_obj_get_height>
 801fe3c:	4285      	cmp	r5, r0
 801fe3e:	da0a      	bge.n	801fe56 <lv_textarea_cursor_down+0x5a>
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 801fe40:	a901      	add	r1, sp, #4
 801fe42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fe44:	f7fd fa6c 	bl	801d320 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 801fe48:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 801fe4c:	4601      	mov	r1, r0
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 801fe4e:	4620      	mov	r0, r4
 801fe50:	f7ff fc9c 	bl	801f78c <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 801fe54:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 801fe56:	b003      	add	sp, #12
 801fe58:	bd30      	pop	{r4, r5, pc}

0801fe5a <lv_textarea_cursor_up>:
{
 801fe5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe5c:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 801fe5e:	aa01      	add	r2, sp, #4
 801fe60:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801fe62:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fe64:	f7fd f96c 	bl	801d140 <lv_label_get_letter_pos>
 801fe68:	f241 425b 	movw	r2, #5211	; 0x145b
 801fe6c:	2100      	movs	r1, #0
 801fe6e:	4620      	mov	r0, r4
 801fe70:	f7e7 f892 	bl	8006f98 <lv_obj_get_style_prop>
 801fe74:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801fe76:	4620      	mov	r0, r4
 801fe78:	f7ff fa9a 	bl	801f3b0 <lv_obj_get_style_text_font.constprop.0>
    pos.y -= font_h + line_space - 1;
 801fe7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801fe80:	8900      	ldrh	r0, [r0, #8]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801fe82:	a901      	add	r1, sp, #4
    pos.y -= font_h + line_space - 1;
 801fe84:	3201      	adds	r2, #1
 801fe86:	1b53      	subs	r3, r2, r5
 801fe88:	1a1b      	subs	r3, r3, r0
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801fe8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y -= font_h + line_space - 1;
 801fe8c:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 801fe90:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 801fe92:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801fe96:	f7fd fa43 	bl	801d320 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 801fe9a:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 801fe9e:	4601      	mov	r1, r0
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 801fea0:	4620      	mov	r0, r4
 801fea2:	f7ff fc73 	bl	801f78c <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 801fea6:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 801fea8:	b003      	add	sp, #12
 801feaa:	bd30      	pop	{r4, r5, pc}

0801feac <lv_textarea_event>:
{
 801feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801feb0:	489c      	ldr	r0, [pc, #624]	; (8020124 <lv_textarea_event+0x278>)
{
 801feb2:	b09e      	sub	sp, #120	; 0x78
 801feb4:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801feb6:	f7e1 fda8 	bl	8001a0a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801feba:	2801      	cmp	r0, #1
 801febc:	d114      	bne.n	801fee8 <lv_textarea_event+0x3c>
    lv_event_code_t code = lv_event_get_code(e);
 801febe:	4628      	mov	r0, r5
 801fec0:	f7e1 fe3c 	bl	8001b3c <lv_event_get_code>
 801fec4:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801fec6:	4628      	mov	r0, r5
 801fec8:	f7e1 fe36 	bl	8001b38 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801fecc:	2e24      	cmp	r6, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801fece:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801fed0:	d10d      	bne.n	801feee <lv_textarea_event+0x42>
        if(ta->label) {
 801fed2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fed4:	b140      	cbz	r0, 801fee8 <lv_textarea_event+0x3c>
            lv_label_set_text(ta->label, NULL);
 801fed6:	2100      	movs	r1, #0
 801fed8:	f7fd f87e 	bl	801cfd8 <lv_label_set_text>
            refr_cursor_area(obj);
 801fedc:	4620      	mov	r0, r4
 801fede:	f7ff facb 	bl	801f478 <refr_cursor_area>
            start_cursor_blink(obj);
 801fee2:	4620      	mov	r0, r4
        start_cursor_blink(obj);
 801fee4:	f7ff fa6c 	bl	801f3c0 <start_cursor_blink>
}
 801fee8:	b01e      	add	sp, #120	; 0x78
 801feea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_FOCUSED) {
 801feee:	2e0e      	cmp	r6, #14
 801fef0:	d0f8      	beq.n	801fee4 <lv_textarea_event+0x38>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801fef2:	2e23      	cmp	r6, #35	; 0x23
 801fef4:	d10e      	bne.n	801ff14 <lv_textarea_event+0x68>
        if(ta->label) {
 801fef6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fef8:	2800      	cmp	r0, #0
 801fefa:	d0f5      	beq.n	801fee8 <lv_textarea_event+0x3c>
            lv_obj_set_pos(ta->label, 0, 0);
 801fefc:	2200      	movs	r2, #0
 801fefe:	4611      	mov	r1, r2
 801ff00:	f7e4 fd2c 	bl	800495c <lv_obj_set_pos>
            lv_label_set_text(ta->label, NULL); /*Refresh the label*/
 801ff04:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ff06:	2100      	movs	r1, #0
 801ff08:	f7fd f866 	bl	801cfd8 <lv_label_set_text>
            refr_cursor_area(obj);
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f7ff fab3 	bl	801f478 <refr_cursor_area>
 801ff12:	e7e9      	b.n	801fee8 <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_KEY) {
 801ff14:	2e0d      	cmp	r6, #13
 801ff16:	d143      	bne.n	801ffa0 <lv_textarea_event+0xf4>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801ff18:	4628      	mov	r0, r5
 801ff1a:	f7e1 fe11 	bl	8001b40 <lv_event_get_param>
 801ff1e:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 801ff20:	2913      	cmp	r1, #19
 801ff22:	d103      	bne.n	801ff2c <lv_textarea_event+0x80>
            lv_textarea_cursor_right(obj);
 801ff24:	4620      	mov	r0, r4
 801ff26:	f7ff ff5f 	bl	801fde8 <lv_textarea_cursor_right>
 801ff2a:	e7dd      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_LEFT)
 801ff2c:	2914      	cmp	r1, #20
 801ff2e:	d103      	bne.n	801ff38 <lv_textarea_event+0x8c>
            lv_textarea_cursor_left(obj);
 801ff30:	4620      	mov	r0, r4
 801ff32:	f7ff ff5d 	bl	801fdf0 <lv_textarea_cursor_left>
 801ff36:	e7d7      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_UP)
 801ff38:	2911      	cmp	r1, #17
 801ff3a:	d103      	bne.n	801ff44 <lv_textarea_event+0x98>
            lv_textarea_cursor_up(obj);
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	f7ff ff8c 	bl	801fe5a <lv_textarea_cursor_up>
 801ff42:	e7d1      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_DOWN)
 801ff44:	2912      	cmp	r1, #18
 801ff46:	d103      	bne.n	801ff50 <lv_textarea_event+0xa4>
            lv_textarea_cursor_down(obj);
 801ff48:	4620      	mov	r0, r4
 801ff4a:	f7ff ff57 	bl	801fdfc <lv_textarea_cursor_down>
 801ff4e:	e7cb      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_BACKSPACE)
 801ff50:	2908      	cmp	r1, #8
 801ff52:	d103      	bne.n	801ff5c <lv_textarea_event+0xb0>
            lv_textarea_del_char(obj);
 801ff54:	4620      	mov	r0, r4
 801ff56:	f7ff fe5b 	bl	801fc10 <lv_textarea_del_char>
 801ff5a:	e7c5      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_DEL)
 801ff5c:	297f      	cmp	r1, #127	; 0x7f
 801ff5e:	d103      	bne.n	801ff68 <lv_textarea_event+0xbc>
            lv_textarea_del_char_forward(obj);
 801ff60:	4620      	mov	r0, r4
 801ff62:	f7ff feaf 	bl	801fcc4 <lv_textarea_del_char_forward>
 801ff66:	e7bf      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_HOME)
 801ff68:	2902      	cmp	r1, #2
 801ff6a:	d104      	bne.n	801ff76 <lv_textarea_event+0xca>
            lv_textarea_set_cursor_pos(obj, 0);
 801ff6c:	2100      	movs	r1, #0
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f7ff fc0c 	bl	801f78c <lv_textarea_set_cursor_pos>
 801ff74:	e7b8      	b.n	801fee8 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_END)
 801ff76:	2903      	cmp	r1, #3
 801ff78:	d102      	bne.n	801ff80 <lv_textarea_event+0xd4>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 801ff7a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801ff7e:	e7f6      	b.n	801ff6e <lv_textarea_event+0xc2>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 801ff80:	290a      	cmp	r1, #10
 801ff82:	d109      	bne.n	801ff98 <lv_textarea_event+0xec>
    return ta->one_line == 0 ? false : true;
 801ff84:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 801ff88:	071d      	lsls	r5, r3, #28
 801ff8a:	d505      	bpl.n	801ff98 <lv_textarea_event+0xec>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	211f      	movs	r1, #31
 801ff90:	4620      	mov	r0, r4
 801ff92:	f7e1 fdb1 	bl	8001af8 <lv_event_send>
 801ff96:	e7a7      	b.n	801fee8 <lv_textarea_event+0x3c>
            lv_textarea_add_char(obj, c);
 801ff98:	4620      	mov	r0, r4
 801ff9a:	f7ff fd9d 	bl	801fad8 <lv_textarea_add_char>
 801ff9e:	e7a3      	b.n	801fee8 <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING || code == LV_EVENT_PRESS_LOST ||
 801ffa0:	1e73      	subs	r3, r6, #1
 801ffa2:	b2db      	uxtb	r3, r3
 801ffa4:	2b02      	cmp	r3, #2
 801ffa6:	d902      	bls.n	801ffae <lv_textarea_event+0x102>
 801ffa8:	2e08      	cmp	r6, #8
 801ffaa:	f040 80bd 	bne.w	8020128 <lv_textarea_event+0x27c>
    lv_indev_t * click_source = lv_indev_get_act();
 801ffae:	f7e2 f839 	bl	8002024 <lv_indev_get_act>
    if(click_source == NULL) return;
 801ffb2:	4607      	mov	r7, r0
 801ffb4:	2800      	cmp	r0, #0
 801ffb6:	d097      	beq.n	801fee8 <lv_textarea_event+0x3c>
    lv_event_code_t code = lv_event_get_code(e);
 801ffb8:	4628      	mov	r0, r5
 801ffba:	f7e1 fdbf 	bl	8001b3c <lv_event_get_code>
 801ffbe:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ffc0:	4628      	mov	r0, r5
 801ffc2:	f7e1 fdb9 	bl	8001b38 <lv_event_get_target>
    if(ta->cursor.click_pos == 0) return;
 801ffc6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    lv_obj_t * obj = lv_event_get_target(e);
 801ffca:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 801ffcc:	0798      	lsls	r0, r3, #30
 801ffce:	d58b      	bpl.n	801fee8 <lv_textarea_event+0x3c>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801ffd0:	4638      	mov	r0, r7
 801ffd2:	f7e2 f82d 	bl	8002030 <lv_indev_get_type>
 801ffd6:	2802      	cmp	r0, #2
 801ffd8:	d086      	beq.n	801fee8 <lv_textarea_event+0x3c>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 801ffda:	4638      	mov	r0, r7
 801ffdc:	f7e2 f828 	bl	8002030 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801ffe0:	2804      	cmp	r0, #4
 801ffe2:	d081      	beq.n	801fee8 <lv_textarea_event+0x3c>
    lv_obj_get_coords(ta->label, &label_coords);
 801ffe4:	a911      	add	r1, sp, #68	; 0x44
 801ffe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ffe8:	f7e4 fd09 	bl	80049fe <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 801ffec:	a905      	add	r1, sp, #20
 801ffee:	4638      	mov	r0, r7
 801fff0:	f7e2 f879 	bl	80020e6 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 801fff4:	a907      	add	r1, sp, #28
 801fff6:	4638      	mov	r0, r7
 801fff8:	f7e2 f8a3 	bl	8002142 <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 801fffc:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8020000:	2a00      	cmp	r2, #0
 8020002:	f6ff af71 	blt.w	801fee8 <lv_textarea_event+0x3c>
 8020006:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 802000a:	2b00      	cmp	r3, #0
 802000c:	f6ff af6c 	blt.w	801fee8 <lv_textarea_event+0x3c>
    rel_pos.x = point_act.x - label_coords.x1;
 8020010:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 8020014:	6a60      	ldr	r0, [r4, #36]	; 0x24
    rel_pos.x = point_act.x - label_coords.x1;
 8020016:	1a52      	subs	r2, r2, r1
 8020018:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    rel_pos.y = point_act.y - label_coords.y1;
 802001c:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8020020:	1a9b      	subs	r3, r3, r2
 8020022:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 8020026:	f7e4 fd3a 	bl	8004a9e <lv_obj_get_width>
    if(rel_pos.x < 0) {
 802002a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
    lv_label_t * label_data = (lv_label_t *)ta->label;
 802002e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 8020030:	2b00      	cmp	r3, #0
 8020032:	db3b      	blt.n	80200ac <lv_textarea_event+0x200>
    else if(rel_pos.x >= label_width) {
 8020034:	4298      	cmp	r0, r3
 8020036:	dd3c      	ble.n	80200b2 <lv_textarea_event+0x206>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8020038:	a909      	add	r1, sp, #36	; 0x24
 802003a:	4628      	mov	r0, r5
 802003c:	f7fd f970 	bl	801d320 <lv_label_get_letter_on>
        click_outside_label       = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8020040:	a909      	add	r1, sp, #36	; 0x24
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8020042:	b287      	uxth	r7, r0
        click_outside_label       = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8020044:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020046:	f7fd f96f 	bl	801d328 <lv_label_is_char_under_pos>
 802004a:	f080 0001 	eor.w	r0, r0, #1
 802004e:	b2c0      	uxtb	r0, r0
    if(ta->text_sel_en) {
 8020050:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020054:	0799      	lsls	r1, r3, #30
 8020056:	d540      	bpl.n	80200da <lv_textarea_event+0x22e>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 8020058:	07da      	lsls	r2, r3, #31
 802005a:	d443      	bmi.n	80200e4 <lv_textarea_event+0x238>
 802005c:	b368      	cbz	r0, 80200ba <lv_textarea_event+0x20e>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 802005e:	2e01      	cmp	r6, #1
 8020060:	f47f af42 	bne.w	801fee8 <lv_textarea_event+0x3c>
 8020064:	4639      	mov	r1, r7
 8020066:	4620      	mov	r0, r4
 8020068:	f7ff fb90 	bl	801f78c <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 802006c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020070:	07db      	lsls	r3, r3, #31
 8020072:	f57f af39 	bpl.w	801fee8 <lv_textarea_event+0x3c>
        if(ta->sel_start > ta->sel_end) {
 8020076:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8020078:	e9d4 2315 	ldrd	r2, r3, [r4, #84]	; 0x54
 802007c:	429a      	cmp	r2, r3
 802007e:	d93f      	bls.n	8020100 <lv_textarea_event+0x254>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 8020080:	428b      	cmp	r3, r1
 8020082:	d102      	bne.n	802008a <lv_textarea_event+0x1de>
 8020084:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8020086:	428a      	cmp	r2, r1
 8020088:	d004      	beq.n	8020094 <lv_textarea_event+0x1e8>
                label_data->sel_end   = ta->sel_start;
 802008a:	e9c5 320f 	strd	r3, r2, [r5, #60]	; 0x3c
                lv_obj_invalidate(obj);
 802008e:	4620      	mov	r0, r4
 8020090:	f7e4 fe5a 	bl	8004d48 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 8020094:	2e03      	cmp	r6, #3
 8020096:	d002      	beq.n	802009e <lv_textarea_event+0x1f2>
 8020098:	2e08      	cmp	r6, #8
 802009a:	f47f af25 	bne.w	801fee8 <lv_textarea_event+0x3c>
            ta->text_sel_in_prog = 0;
 802009e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80200a2:	f36f 0300 	bfc	r3, #0, #1
 80200a6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80200aa:	e71d      	b.n	801fee8 <lv_textarea_event+0x3c>
        click_outside_label       = true;
 80200ac:	2001      	movs	r0, #1
        char_id_at_click = 0;
 80200ae:	2700      	movs	r7, #0
 80200b0:	e7ce      	b.n	8020050 <lv_textarea_event+0x1a4>
        click_outside_label       = true;
 80200b2:	2001      	movs	r0, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 80200b4:	f647 77ff 	movw	r7, #32767	; 0x7fff
 80200b8:	e7ca      	b.n	8020050 <lv_textarea_event+0x1a4>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 80200ba:	2e01      	cmp	r6, #1
 80200bc:	f47f af14 	bne.w	801fee8 <lv_textarea_event+0x3c>
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 80200c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
            ta->text_sel_in_prog = 1;
 80200c4:	f043 0301 	orr.w	r3, r3, #1
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 80200c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80200cc:	4620      	mov	r0, r4
            ta->sel_start    = char_id_at_click;
 80200ce:	6567      	str	r7, [r4, #84]	; 0x54
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 80200d0:	65a2      	str	r2, [r4, #88]	; 0x58
            ta->text_sel_in_prog = 1;
 80200d2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 80200d6:	f7e3 fc52 	bl	800397e <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 80200da:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80200de:	07d8      	lsls	r0, r3, #31
 80200e0:	d5bd      	bpl.n	802005e <lv_textarea_event+0x1b2>
 80200e2:	e7bf      	b.n	8020064 <lv_textarea_event+0x1b8>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 80200e4:	2e02      	cmp	r6, #2
 80200e6:	d101      	bne.n	80200ec <lv_textarea_event+0x240>
            ta->sel_end = char_id_at_click;
 80200e8:	65a7      	str	r7, [r4, #88]	; 0x58
 80200ea:	e7bb      	b.n	8020064 <lv_textarea_event+0x1b8>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 80200ec:	2e03      	cmp	r6, #3
 80200ee:	d001      	beq.n	80200f4 <lv_textarea_event+0x248>
 80200f0:	2e08      	cmp	r6, #8
 80200f2:	d1b7      	bne.n	8020064 <lv_textarea_event+0x1b8>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 80200f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80200f8:	4620      	mov	r0, r4
 80200fa:	f7e3 fc1d 	bl	8003938 <lv_obj_add_flag>
 80200fe:	e7ec      	b.n	80200da <lv_textarea_event+0x22e>
        else if(ta->sel_start < ta->sel_end) {
 8020100:	d207      	bcs.n	8020112 <lv_textarea_event+0x266>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 8020102:	428a      	cmp	r2, r1
 8020104:	d102      	bne.n	802010c <lv_textarea_event+0x260>
 8020106:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8020108:	428b      	cmp	r3, r1
 802010a:	d0c3      	beq.n	8020094 <lv_textarea_event+0x1e8>
                label_data->sel_start = ta->sel_start;
 802010c:	63ea      	str	r2, [r5, #60]	; 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 802010e:	642b      	str	r3, [r5, #64]	; 0x40
 8020110:	e7bd      	b.n	802008e <lv_textarea_event+0x1e2>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8020112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020116:	4299      	cmp	r1, r3
 8020118:	d102      	bne.n	8020120 <lv_textarea_event+0x274>
 802011a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 802011c:	429a      	cmp	r2, r3
 802011e:	d0b9      	beq.n	8020094 <lv_textarea_event+0x1e8>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8020120:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020122:	e7f4      	b.n	802010e <lv_textarea_event+0x262>
 8020124:	0802a11c 	.word	0x0802a11c
    else if(code == LV_EVENT_DRAW_MAIN) {
 8020128:	2e15      	cmp	r6, #21
 802012a:	d15c      	bne.n	80201e6 <lv_textarea_event+0x33a>

static void draw_placeholder(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 802012c:	4628      	mov	r0, r5
 802012e:	f7e1 fd03 	bl	8001b38 <lv_event_get_target>
 8020132:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    const lv_area_t * clip_area = lv_event_get_param(e);
 8020134:	4628      	mov	r0, r5
 8020136:	f7e1 fd03 	bl	8001b40 <lv_event_get_param>
 802013a:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 802013c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802013e:	f7fc fffd 	bl	801d13c <lv_label_get_text>

    /*Draw the place holder*/
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 8020142:	7803      	ldrb	r3, [r0, #0]
 8020144:	2b00      	cmp	r3, #0
 8020146:	f47f aecf 	bne.w	801fee8 <lv_textarea_event+0x3c>
 802014a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802014c:	2b00      	cmp	r3, #0
 802014e:	f43f aecb 	beq.w	801fee8 <lv_textarea_event+0x3c>
 8020152:	781b      	ldrb	r3, [r3, #0]
 8020154:	2b00      	cmp	r3, #0
 8020156:	f43f aec7 	beq.w	801fee8 <lv_textarea_event+0x3c>
        lv_draw_label_dsc_t ph_dsc;
        lv_draw_label_dsc_init(&ph_dsc);
 802015a:	a811      	add	r0, sp, #68	; 0x44
 802015c:	f7e9 fff8 	bl	800a150 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 8020160:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8020164:	aa11      	add	r2, sp, #68	; 0x44
 8020166:	4620      	mov	r0, r4
 8020168:	f7e4 f94e 	bl	8004408 <lv_obj_init_draw_label_dsc>

        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 802016c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020170:	f241 0212 	movw	r2, #4114	; 0x1012
 8020174:	4620      	mov	r0, r4
 8020176:	0719      	lsls	r1, r3, #28
 8020178:	f04f 0100 	mov.w	r1, #0
 802017c:	bf42      	ittt	mi
 802017e:	f89d 3060 	ldrbmi.w	r3, [sp, #96]	; 0x60
 8020182:	f043 0302 	orrmi.w	r3, r3, #2
 8020186:	f88d 3060 	strbmi.w	r3, [sp, #96]	; 0x60
 802018a:	f7e6 ff05 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802018e:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020192:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020194:	2100      	movs	r1, #0
 8020196:	4620      	mov	r0, r4
 8020198:	f7e6 fefe 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802019c:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80201a0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80201a2:	2100      	movs	r1, #0
 80201a4:	4620      	mov	r0, r4
 80201a6:	f7e6 fef7 	bl	8006f98 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 80201aa:	8aa3      	ldrh	r3, [r4, #20]
        lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
        lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_area_t ph_coords;
        lv_area_copy(&ph_coords, &obj->coords);
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 80201ac:	fa15 f280 	uxtah	r2, r5, r0
 80201b0:	fa17 f180 	uxtah	r1, r7, r0
 80201b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80201b8:	a809      	add	r0, sp, #36	; 0x24
    dest->y1 = src->y1;
 80201ba:	8ae3      	ldrh	r3, [r4, #22]
 80201bc:	b212      	sxth	r2, r2
 80201be:	b209      	sxth	r1, r1
 80201c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    dest->x2 = src->x2;
 80201c4:	8b23      	ldrh	r3, [r4, #24]
 80201c6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y2 = src->y2;
 80201ca:	8b63      	ldrh	r3, [r4, #26]
 80201cc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80201d0:	f7f6 fc78 	bl	8016ac4 <lv_area_move>
        lv_draw_label(&ph_coords, clip_area, &ph_dsc, ta->placeholder_txt, NULL);
 80201d4:	2300      	movs	r3, #0
 80201d6:	aa11      	add	r2, sp, #68	; 0x44
 80201d8:	4631      	mov	r1, r6
 80201da:	a809      	add	r0, sp, #36	; 0x24
 80201dc:	9300      	str	r3, [sp, #0]
 80201de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        cur_area.y1 += top + border_width;

        lv_draw_label_dsc_t cur_label_dsc;
        lv_draw_label_dsc_init(&cur_label_dsc);
        lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
        lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
 80201e0:	f7ea f98e 	bl	800a500 <lv_draw_label>
 80201e4:	e680      	b.n	801fee8 <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_DRAW_POST) {
 80201e6:	2e18      	cmp	r6, #24
 80201e8:	f47f ae7e 	bne.w	801fee8 <lv_textarea_event+0x3c>
    lv_obj_t * obj = lv_event_get_target(e);
 80201ec:	4628      	mov	r0, r5
 80201ee:	f7e1 fca3 	bl	8001b38 <lv_event_get_target>
 80201f2:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 80201f4:	4628      	mov	r0, r5
 80201f6:	f7e1 fca3 	bl	8001b40 <lv_event_get_param>
 80201fa:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 80201fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80201fe:	f7fc ff9d 	bl	801d13c <lv_label_get_text>
    if(ta->cursor.show == 0) return;
 8020202:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    const char * txt = lv_label_get_text(ta->label);
 8020206:	4605      	mov	r5, r0
    if(ta->cursor.show == 0) return;
 8020208:	07da      	lsls	r2, r3, #31
 802020a:	f57f ae6d 	bpl.w	801fee8 <lv_textarea_event+0x3c>
    lv_draw_rect_dsc_init(&cur_dsc);
 802020e:	a811      	add	r0, sp, #68	; 0x44
 8020210:	f7ec fa52 	bl	800c6b8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 8020214:	aa11      	add	r2, sp, #68	; 0x44
 8020216:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802021a:	4620      	mov	r0, r4
 802021c:	f7e3 ffb8 	bl	8004190 <lv_obj_init_draw_rect_dsc>
    cur_area.x1 += ta->label->coords.x1;
 8020220:	6a67      	ldr	r7, [r4, #36]	; 0x24
    dest->x2 = src->x2;
 8020222:	f9b4 e048 	ldrsh.w	lr, [r4, #72]	; 0x48
 8020226:	8aba      	ldrh	r2, [r7, #20]
    cur_area.y1 += ta->label->coords.y1;
 8020228:	8afb      	ldrh	r3, [r7, #22]
    char letter_buf[8] = {0};
 802022a:	2700      	movs	r7, #0
    dest->y1 = src->y1;
 802022c:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    cur_area.x1 += ta->label->coords.x1;
 8020230:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    dest->y2 = src->y2;
 8020234:	f9b4 c04a 	ldrsh.w	ip, [r4, #74]	; 0x4a
    cur_area.y1 += ta->label->coords.y1;
 8020238:	4419      	add	r1, r3
    cur_area.x1 += ta->label->coords.x1;
 802023a:	4410      	add	r0, r2
    cur_area.x2 += ta->label->coords.x1;
 802023c:	4472      	add	r2, lr
    cur_area.y2 += ta->label->coords.y1;
 802023e:	4463      	add	r3, ip
    cur_area.y1 += ta->label->coords.y1;
 8020240:	f8ad 1016 	strh.w	r1, [sp, #22]
    cur_area.x1 += ta->label->coords.x1;
 8020244:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 8020248:	4631      	mov	r1, r6
 802024a:	a805      	add	r0, sp, #20
    cur_area.x2 += ta->label->coords.x1;
 802024c:	f8ad 2018 	strh.w	r2, [sp, #24]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 8020250:	aa11      	add	r2, sp, #68	; 0x44
    cur_area.y2 += ta->label->coords.y1;
 8020252:	f8ad 301a 	strh.w	r3, [sp, #26]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 8020256:	f7ec fa51 	bl	800c6fc <lv_draw_rect>
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 802025a:	4b24      	ldr	r3, [pc, #144]	; (80202ec <lv_textarea_event+0x440>)
    char letter_buf[8] = {0};
 802025c:	e9cd 7707 	strd	r7, r7, [sp, #28]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 8020260:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	4429      	add	r1, r5
 8020266:	4608      	mov	r0, r1
 8020268:	9103      	str	r1, [sp, #12]
 802026a:	4798      	blx	r3
 802026c:	9903      	ldr	r1, [sp, #12]
 802026e:	4602      	mov	r2, r0
 8020270:	a807      	add	r0, sp, #28
 8020272:	f7f7 f8c1 	bl	80173f8 <lv_memcpy>
    if(cur_dsc.bg_opa == LV_OPA_COVER) {
 8020276:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 802027a:	2bff      	cmp	r3, #255	; 0xff
 802027c:	f47f ae34 	bne.w	801fee8 <lv_textarea_event+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020280:	f241 0212 	movw	r2, #4114	; 0x1012
 8020284:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020288:	4620      	mov	r0, r4
 802028a:	f7e6 fe85 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802028e:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020292:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020294:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020298:	4620      	mov	r0, r4
 802029a:	f7e6 fe7d 	bl	8006f98 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802029e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80202a2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80202a4:	f241 0232 	movw	r2, #4146	; 0x1032
 80202a8:	4620      	mov	r0, r4
 80202aa:	f7e6 fe75 	bl	8006f98 <lv_obj_get_style_prop>
        cur_area.y1 += top + border_width;
 80202ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80202b2:	4603      	mov	r3, r0
        cur_area.x1 += left + border_width;
 80202b4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
        cur_area.y1 += top + border_width;
 80202b8:	fa12 f283 	uxtah	r2, r2, r3
        cur_area.x1 += left + border_width;
 80202bc:	4405      	add	r5, r0
        lv_draw_label_dsc_init(&cur_label_dsc);
 80202be:	a809      	add	r0, sp, #36	; 0x24
        cur_area.x1 += left + border_width;
 80202c0:	fa15 f583 	uxtah	r5, r5, r3
        cur_area.y1 += top + border_width;
 80202c4:	eb02 0308 	add.w	r3, r2, r8
        cur_area.x1 += left + border_width;
 80202c8:	f8ad 5014 	strh.w	r5, [sp, #20]
        cur_area.y1 += top + border_width;
 80202cc:	f8ad 3016 	strh.w	r3, [sp, #22]
        lv_draw_label_dsc_init(&cur_label_dsc);
 80202d0:	f7e9 ff3e 	bl	800a150 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 80202d4:	aa09      	add	r2, sp, #36	; 0x24
 80202d6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80202da:	4620      	mov	r0, r4
 80202dc:	f7e4 f894 	bl	8004408 <lv_obj_init_draw_label_dsc>
        lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
 80202e0:	ab07      	add	r3, sp, #28
 80202e2:	aa09      	add	r2, sp, #36	; 0x24
 80202e4:	4631      	mov	r1, r6
 80202e6:	a805      	add	r0, sp, #20
 80202e8:	9700      	str	r7, [sp, #0]
 80202ea:	e779      	b.n	80201e0 <lv_textarea_event+0x334>
 80202ec:	20000048 	.word	0x20000048

080202f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80202f0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80202f2:	2003      	movs	r0, #3
 80202f4:	f000 f82c 	bl	8020350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80202f8:	2000      	movs	r0, #0
 80202fa:	f7e1 f90d 	bl	8001518 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80202fe:	f7e1 f8f3 	bl	80014e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8020302:	2000      	movs	r0, #0
 8020304:	bd08      	pop	{r3, pc}
	...

08020308 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8020308:	4a03      	ldr	r2, [pc, #12]	; (8020318 <HAL_IncTick+0x10>)
 802030a:	4b04      	ldr	r3, [pc, #16]	; (802031c <HAL_IncTick+0x14>)
 802030c:	6811      	ldr	r1, [r2, #0]
 802030e:	781b      	ldrb	r3, [r3, #0]
 8020310:	440b      	add	r3, r1
 8020312:	6013      	str	r3, [r2, #0]
}
 8020314:	4770      	bx	lr
 8020316:	bf00      	nop
 8020318:	2000b664 	.word	0x2000b664
 802031c:	20000070 	.word	0x20000070

08020320 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8020320:	4b01      	ldr	r3, [pc, #4]	; (8020328 <HAL_GetTick+0x8>)
 8020322:	6818      	ldr	r0, [r3, #0]
}
 8020324:	4770      	bx	lr
 8020326:	bf00      	nop
 8020328:	2000b664 	.word	0x2000b664

0802032c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802032c:	b538      	push	{r3, r4, r5, lr}
 802032e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8020330:	f7ff fff6 	bl	8020320 <HAL_GetTick>
 8020334:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020336:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8020338:	bf1e      	ittt	ne
 802033a:	4b04      	ldrne	r3, [pc, #16]	; (802034c <HAL_Delay+0x20>)
 802033c:	781b      	ldrbne	r3, [r3, #0]
 802033e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020340:	f7ff ffee 	bl	8020320 <HAL_GetTick>
 8020344:	1b43      	subs	r3, r0, r5
 8020346:	42a3      	cmp	r3, r4
 8020348:	d3fa      	bcc.n	8020340 <HAL_Delay+0x14>
  {
  }
}
 802034a:	bd38      	pop	{r3, r4, r5, pc}
 802034c:	20000070 	.word	0x20000070

08020350 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020350:	4907      	ldr	r1, [pc, #28]	; (8020370 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020352:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020354:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802035a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802035e:	0412      	lsls	r2, r2, #16
 8020360:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 802036c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 802036e:	4770      	bx	lr
 8020370:	e000ed00 	.word	0xe000ed00

08020374 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020374:	4b16      	ldr	r3, [pc, #88]	; (80203d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020376:	b530      	push	{r4, r5, lr}
 8020378:	68dc      	ldr	r4, [r3, #12]
 802037a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802037e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020382:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020384:	2d04      	cmp	r5, #4
 8020386:	bf28      	it	cs
 8020388:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802038a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802038c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020390:	bf8c      	ite	hi
 8020392:	3c03      	subhi	r4, #3
 8020394:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020396:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 802039a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802039c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80203a0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80203a4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80203a8:	fa01 f104 	lsl.w	r1, r1, r4
 80203ac:	ea41 0302 	orr.w	r3, r1, r2
 80203b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80203b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80203b6:	db06      	blt.n	80203c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80203b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80203bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80203c0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80203c4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80203c6:	f000 000f 	and.w	r0, r0, #15
 80203ca:	4a02      	ldr	r2, [pc, #8]	; (80203d4 <HAL_NVIC_SetPriority+0x60>)
 80203cc:	5413      	strb	r3, [r2, r0]
 80203ce:	e7f9      	b.n	80203c4 <HAL_NVIC_SetPriority+0x50>
 80203d0:	e000ed00 	.word	0xe000ed00
 80203d4:	e000ed14 	.word	0xe000ed14

080203d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80203d8:	2800      	cmp	r0, #0
 80203da:	db08      	blt.n	80203ee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80203dc:	0942      	lsrs	r2, r0, #5
 80203de:	2301      	movs	r3, #1
 80203e0:	f000 001f 	and.w	r0, r0, #31
 80203e4:	fa03 f000 	lsl.w	r0, r3, r0
 80203e8:	4b01      	ldr	r3, [pc, #4]	; (80203f0 <HAL_NVIC_EnableIRQ+0x18>)
 80203ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80203ee:	4770      	bx	lr
 80203f0:	e000e100 	.word	0xe000e100

080203f4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80203f4:	6803      	ldr	r3, [r0, #0]
{
 80203f6:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80203f8:	2018      	movs	r0, #24
 80203fa:	b2d9      	uxtb	r1, r3
 80203fc:	3910      	subs	r1, #16
 80203fe:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8020402:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8020404:	4c05      	ldr	r4, [pc, #20]	; (802041c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8020406:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8020408:	5c20      	ldrb	r0, [r4, r0]
 802040a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802040c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8020410:	f020 0003 	bic.w	r0, r0, #3
 8020414:	bf88      	it	hi
 8020416:	3004      	addhi	r0, #4
 8020418:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 802041a:	bd10      	pop	{r4, pc}
 802041c:	0802a138 	.word	0x0802a138

08020420 <HAL_DMA_Init>:
{
 8020420:	b570      	push	{r4, r5, r6, lr}
 8020422:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8020424:	f7ff ff7c 	bl	8020320 <HAL_GetTick>
 8020428:	4605      	mov	r5, r0
  if(hdma == NULL)
 802042a:	2c00      	cmp	r4, #0
 802042c:	d073      	beq.n	8020516 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 802042e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8020430:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8020432:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8020436:	2302      	movs	r3, #2
 8020438:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 802043c:	6813      	ldr	r3, [r2, #0]
 802043e:	f023 0301 	bic.w	r3, r3, #1
 8020442:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8020444:	6821      	ldr	r1, [r4, #0]
 8020446:	680b      	ldr	r3, [r1, #0]
 8020448:	07d8      	lsls	r0, r3, #31
 802044a:	d42f      	bmi.n	80204ac <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 802044c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802044e:	4d33      	ldr	r5, [pc, #204]	; (802051c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8020450:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8020452:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8020454:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8020458:	4313      	orrs	r3, r2
 802045a:	68e2      	ldr	r2, [r4, #12]
 802045c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802045e:	6922      	ldr	r2, [r4, #16]
 8020460:	4313      	orrs	r3, r2
 8020462:	6962      	ldr	r2, [r4, #20]
 8020464:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8020466:	69e2      	ldr	r2, [r4, #28]
 8020468:	4303      	orrs	r3, r0
 802046a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 802046c:	6a22      	ldr	r2, [r4, #32]
 802046e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8020470:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8020472:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8020474:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8020478:	bf02      	ittt	eq
 802047a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 802047e:	4335      	orreq	r5, r6
 8020480:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8020482:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8020484:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8020486:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8020488:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 802048c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8020490:	d133      	bne.n	80204fa <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8020492:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8020494:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8020496:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8020498:	b37d      	cbz	r5, 80204fa <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802049a:	b990      	cbnz	r0, 80204c2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 802049c:	2a01      	cmp	r2, #1
 802049e:	d021      	beq.n	80204e4 <HAL_DMA_Init+0xc4>
 80204a0:	f032 0202 	bics.w	r2, r2, #2
 80204a4:	d129      	bne.n	80204fa <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80204a6:	01ea      	lsls	r2, r5, #7
 80204a8:	d527      	bpl.n	80204fa <HAL_DMA_Init+0xda>
 80204aa:	e01e      	b.n	80204ea <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80204ac:	f7ff ff38 	bl	8020320 <HAL_GetTick>
 80204b0:	1b40      	subs	r0, r0, r5
 80204b2:	2805      	cmp	r0, #5
 80204b4:	d9c6      	bls.n	8020444 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80204b6:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80204b8:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80204ba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80204bc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80204c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80204c2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80204c6:	d114      	bne.n	80204f2 <HAL_DMA_Init+0xd2>
    switch (tmp)
 80204c8:	2a03      	cmp	r2, #3
 80204ca:	d816      	bhi.n	80204fa <HAL_DMA_Init+0xda>
 80204cc:	a001      	add	r0, pc, #4	; (adr r0, 80204d4 <HAL_DMA_Init+0xb4>)
 80204ce:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80204d2:	bf00      	nop
 80204d4:	080204eb 	.word	0x080204eb
 80204d8:	080204a7 	.word	0x080204a7
 80204dc:	080204eb 	.word	0x080204eb
 80204e0:	080204e5 	.word	0x080204e5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80204e4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80204e8:	d107      	bne.n	80204fa <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80204ea:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80204ec:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80204ee:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80204f0:	e7e4      	b.n	80204bc <HAL_DMA_Init+0x9c>
    switch (tmp)
 80204f2:	2a02      	cmp	r2, #2
 80204f4:	d9f9      	bls.n	80204ea <HAL_DMA_Init+0xca>
 80204f6:	2a03      	cmp	r2, #3
 80204f8:	d0d5      	beq.n	80204a6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80204fa:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80204fc:	4620      	mov	r0, r4
 80204fe:	f7ff ff79 	bl	80203f4 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8020502:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8020504:	233f      	movs	r3, #63	; 0x3f
 8020506:	4093      	lsls	r3, r2
 8020508:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802050a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 802050c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802050e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8020510:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8020514:	e7d4      	b.n	80204c0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8020516:	2001      	movs	r0, #1
 8020518:	e7d2      	b.n	80204c0 <HAL_DMA_Init+0xa0>
 802051a:	bf00      	nop
 802051c:	f010803f 	.word	0xf010803f

08020520 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8020520:	2300      	movs	r3, #0
{
 8020522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8020524:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8020526:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8020528:	4b5b      	ldr	r3, [pc, #364]	; (8020698 <HAL_DMA_IRQHandler+0x178>)
{
 802052a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802052c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 802052e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8020530:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8020532:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8020534:	409a      	lsls	r2, r3
 8020536:	4232      	tst	r2, r6
 8020538:	d00c      	beq.n	8020554 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802053a:	6801      	ldr	r1, [r0, #0]
 802053c:	6808      	ldr	r0, [r1, #0]
 802053e:	0740      	lsls	r0, r0, #29
 8020540:	d508      	bpl.n	8020554 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8020542:	6808      	ldr	r0, [r1, #0]
 8020544:	f020 0004 	bic.w	r0, r0, #4
 8020548:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802054a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802054c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802054e:	f042 0201 	orr.w	r2, r2, #1
 8020552:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8020554:	2201      	movs	r2, #1
 8020556:	409a      	lsls	r2, r3
 8020558:	4232      	tst	r2, r6
 802055a:	d008      	beq.n	802056e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 802055c:	6821      	ldr	r1, [r4, #0]
 802055e:	6949      	ldr	r1, [r1, #20]
 8020560:	0609      	lsls	r1, r1, #24
 8020562:	d504      	bpl.n	802056e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8020564:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8020566:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8020568:	f042 0202 	orr.w	r2, r2, #2
 802056c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802056e:	2204      	movs	r2, #4
 8020570:	409a      	lsls	r2, r3
 8020572:	4232      	tst	r2, r6
 8020574:	d008      	beq.n	8020588 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8020576:	6821      	ldr	r1, [r4, #0]
 8020578:	6809      	ldr	r1, [r1, #0]
 802057a:	0788      	lsls	r0, r1, #30
 802057c:	d504      	bpl.n	8020588 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 802057e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8020580:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8020582:	f042 0204 	orr.w	r2, r2, #4
 8020586:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8020588:	2210      	movs	r2, #16
 802058a:	409a      	lsls	r2, r3
 802058c:	4232      	tst	r2, r6
 802058e:	d010      	beq.n	80205b2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8020590:	6823      	ldr	r3, [r4, #0]
 8020592:	6819      	ldr	r1, [r3, #0]
 8020594:	0709      	lsls	r1, r1, #28
 8020596:	d50c      	bpl.n	80205b2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8020598:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802059a:	681a      	ldr	r2, [r3, #0]
 802059c:	0350      	lsls	r0, r2, #13
 802059e:	d537      	bpl.n	8020610 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80205a0:	681b      	ldr	r3, [r3, #0]
 80205a2:	0319      	lsls	r1, r3, #12
 80205a4:	d401      	bmi.n	80205aa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80205a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80205a8:	e000      	b.n	80205ac <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80205aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80205ac:	b10b      	cbz	r3, 80205b2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80205ae:	4620      	mov	r0, r4
 80205b0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80205b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80205b4:	2220      	movs	r2, #32
 80205b6:	408a      	lsls	r2, r1
 80205b8:	4232      	tst	r2, r6
 80205ba:	d03a      	beq.n	8020632 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80205bc:	6823      	ldr	r3, [r4, #0]
 80205be:	6818      	ldr	r0, [r3, #0]
 80205c0:	06c6      	lsls	r6, r0, #27
 80205c2:	d536      	bpl.n	8020632 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80205c4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80205c6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80205ca:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80205cc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80205ce:	d127      	bne.n	8020620 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80205d0:	f022 0216 	bic.w	r2, r2, #22
 80205d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80205d6:	695a      	ldr	r2, [r3, #20]
 80205d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80205dc:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80205de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80205e0:	b90a      	cbnz	r2, 80205e6 <HAL_DMA_IRQHandler+0xc6>
 80205e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80205e4:	b11a      	cbz	r2, 80205ee <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80205e6:	681a      	ldr	r2, [r3, #0]
 80205e8:	f022 0208 	bic.w	r2, r2, #8
 80205ec:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80205ee:	233f      	movs	r3, #63	; 0x3f
 80205f0:	408b      	lsls	r3, r1
 80205f2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80205f4:	2300      	movs	r3, #0
 80205f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80205fa:	2301      	movs	r3, #1
 80205fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8020600:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8020602:	2b00      	cmp	r3, #0
 8020604:	d045      	beq.n	8020692 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8020606:	4620      	mov	r0, r4
}
 8020608:	b003      	add	sp, #12
 802060a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 802060e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8020610:	681a      	ldr	r2, [r3, #0]
 8020612:	05d2      	lsls	r2, r2, #23
 8020614:	d4c7      	bmi.n	80205a6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8020616:	681a      	ldr	r2, [r3, #0]
 8020618:	f022 0208 	bic.w	r2, r2, #8
 802061c:	601a      	str	r2, [r3, #0]
 802061e:	e7c2      	b.n	80205a6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8020620:	0350      	lsls	r0, r2, #13
 8020622:	d527      	bpl.n	8020674 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	0319      	lsls	r1, r3, #12
 8020628:	d431      	bmi.n	802068e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 802062a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 802062c:	b10b      	cbz	r3, 8020632 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 802062e:	4620      	mov	r0, r4
 8020630:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8020632:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8020634:	b36b      	cbz	r3, 8020692 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8020636:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8020638:	07da      	lsls	r2, r3, #31
 802063a:	d519      	bpl.n	8020670 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 802063c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8020640:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8020642:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8020646:	2305      	movs	r3, #5
 8020648:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 802064c:	6813      	ldr	r3, [r2, #0]
 802064e:	f023 0301 	bic.w	r3, r3, #1
 8020652:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8020654:	9b01      	ldr	r3, [sp, #4]
 8020656:	3301      	adds	r3, #1
 8020658:	42bb      	cmp	r3, r7
 802065a:	9301      	str	r3, [sp, #4]
 802065c:	d802      	bhi.n	8020664 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802065e:	6813      	ldr	r3, [r2, #0]
 8020660:	07db      	lsls	r3, r3, #31
 8020662:	d4f7      	bmi.n	8020654 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8020664:	2300      	movs	r3, #0
 8020666:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 802066a:	2301      	movs	r3, #1
 802066c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8020670:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8020672:	e7c6      	b.n	8020602 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8020674:	681a      	ldr	r2, [r3, #0]
 8020676:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 802067a:	d108      	bne.n	802068e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802067c:	6819      	ldr	r1, [r3, #0]
 802067e:	f021 0110 	bic.w	r1, r1, #16
 8020682:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8020684:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8020686:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 802068a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 802068e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020690:	e7cc      	b.n	802062c <HAL_DMA_IRQHandler+0x10c>
}
 8020692:	b003      	add	sp, #12
 8020694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020696:	bf00      	nop
 8020698:	20000000 	.word	0x20000000

0802069c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802069c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80206a0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80206a2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8020860 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80206a6:	4a6c      	ldr	r2, [pc, #432]	; (8020858 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80206a8:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8020864 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80206ac:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80206ae:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80206b0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80206b2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80206b6:	43ac      	bics	r4, r5
 80206b8:	f040 80b4 	bne.w	8020824 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80206bc:	684c      	ldr	r4, [r1, #4]
 80206be:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80206c2:	2503      	movs	r5, #3
 80206c4:	f024 0c10 	bic.w	ip, r4, #16
 80206c8:	fa05 f50e 	lsl.w	r5, r5, lr
 80206cc:	f10c 37ff 	add.w	r7, ip, #4294967295
 80206d0:	43ed      	mvns	r5, r5
 80206d2:	2f01      	cmp	r7, #1
 80206d4:	d811      	bhi.n	80206fa <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 80206d6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80206d8:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 80206dc:	68cf      	ldr	r7, [r1, #12]
 80206de:	fa07 f70e 	lsl.w	r7, r7, lr
 80206e2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80206e6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80206e8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80206ea:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80206ee:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80206f2:	409f      	lsls	r7, r3
 80206f4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80206f8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80206fa:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80206fc:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8020700:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8020704:	688f      	ldr	r7, [r1, #8]
 8020706:	fa07 f70e 	lsl.w	r7, r7, lr
 802070a:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 802070e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8020710:	d116      	bne.n	8020740 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8020712:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8020716:	f003 0b07 	and.w	fp, r3, #7
 802071a:	f04f 0c0f 	mov.w	ip, #15
 802071e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8020722:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8020726:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 802072a:	fa0c fc0b 	lsl.w	ip, ip, fp
 802072e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8020732:	690f      	ldr	r7, [r1, #16]
 8020734:	fa07 f70b 	lsl.w	r7, r7, fp
 8020738:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 802073c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8020740:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8020742:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8020744:	f004 0703 	and.w	r7, r4, #3
 8020748:	fa07 fe0e 	lsl.w	lr, r7, lr
 802074c:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8020750:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8020752:	00e5      	lsls	r5, r4, #3
 8020754:	d566      	bpl.n	8020824 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020756:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 802075a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 802075e:	f003 0c03 	and.w	ip, r3, #3
 8020762:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020766:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 802076a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 802076e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020772:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8020776:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 802077a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 802077e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8020782:	9501      	str	r5, [sp, #4]
 8020784:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8020786:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 802078a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 802078e:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8020792:	4d32      	ldr	r5, [pc, #200]	; (802085c <HAL_GPIO_Init+0x1c0>)
 8020794:	42a8      	cmp	r0, r5
 8020796:	d04c      	beq.n	8020832 <HAL_GPIO_Init+0x196>
 8020798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 802079c:	42a8      	cmp	r0, r5
 802079e:	d04a      	beq.n	8020836 <HAL_GPIO_Init+0x19a>
 80207a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80207a4:	42a8      	cmp	r0, r5
 80207a6:	d048      	beq.n	802083a <HAL_GPIO_Init+0x19e>
 80207a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80207ac:	42a8      	cmp	r0, r5
 80207ae:	d046      	beq.n	802083e <HAL_GPIO_Init+0x1a2>
 80207b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80207b4:	42a8      	cmp	r0, r5
 80207b6:	d044      	beq.n	8020842 <HAL_GPIO_Init+0x1a6>
 80207b8:	4548      	cmp	r0, r9
 80207ba:	d044      	beq.n	8020846 <HAL_GPIO_Init+0x1aa>
 80207bc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80207c0:	42a8      	cmp	r0, r5
 80207c2:	d042      	beq.n	802084a <HAL_GPIO_Init+0x1ae>
 80207c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80207c8:	42a8      	cmp	r0, r5
 80207ca:	d040      	beq.n	802084e <HAL_GPIO_Init+0x1b2>
 80207cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80207d0:	42a8      	cmp	r0, r5
 80207d2:	d03e      	beq.n	8020852 <HAL_GPIO_Init+0x1b6>
 80207d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80207d8:	42a8      	cmp	r0, r5
 80207da:	bf0c      	ite	eq
 80207dc:	2509      	moveq	r5, #9
 80207de:	250a      	movne	r5, #10
 80207e0:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80207e4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80207e8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80207ec:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80207ee:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80207f2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80207f4:	bf0c      	ite	eq
 80207f6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80207f8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80207fa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80207fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8020800:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8020802:	bf0c      	ite	eq
 8020804:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8020806:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8020808:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 802080c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 802080e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8020810:	bf0c      	ite	eq
 8020812:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8020814:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8020816:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8020818:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 802081a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 802081c:	bf54      	ite	pl
 802081e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8020820:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8020822:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8020824:	3301      	adds	r3, #1
 8020826:	2b10      	cmp	r3, #16
 8020828:	f47f af40 	bne.w	80206ac <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 802082c:	b003      	add	sp, #12
 802082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8020832:	2500      	movs	r5, #0
 8020834:	e7d4      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 8020836:	2501      	movs	r5, #1
 8020838:	e7d2      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 802083a:	2502      	movs	r5, #2
 802083c:	e7d0      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 802083e:	2503      	movs	r5, #3
 8020840:	e7ce      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 8020842:	2504      	movs	r5, #4
 8020844:	e7cc      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 8020846:	2505      	movs	r5, #5
 8020848:	e7ca      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 802084a:	2506      	movs	r5, #6
 802084c:	e7c8      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 802084e:	2507      	movs	r5, #7
 8020850:	e7c6      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 8020852:	2508      	movs	r5, #8
 8020854:	e7c4      	b.n	80207e0 <HAL_GPIO_Init+0x144>
 8020856:	bf00      	nop
 8020858:	40013c00 	.word	0x40013c00
 802085c:	40020000 	.word	0x40020000
 8020860:	40023800 	.word	0x40023800
 8020864:	40021400 	.word	0x40021400

08020868 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8020868:	6903      	ldr	r3, [r0, #16]
 802086a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 802086c:	bf14      	ite	ne
 802086e:	2001      	movne	r0, #1
 8020870:	2000      	moveq	r0, #0
 8020872:	4770      	bx	lr

08020874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020874:	b10a      	cbz	r2, 802087a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8020876:	6181      	str	r1, [r0, #24]
  }
}
 8020878:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 802087a:	0409      	lsls	r1, r1, #16
 802087c:	e7fb      	b.n	8020876 <HAL_GPIO_WritePin+0x2>

0802087e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802087e:	6803      	ldr	r3, [r0, #0]
 8020880:	699a      	ldr	r2, [r3, #24]
 8020882:	0791      	lsls	r1, r2, #30
 8020884:	d501      	bpl.n	802088a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8020886:	2200      	movs	r2, #0
 8020888:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802088a:	699a      	ldr	r2, [r3, #24]
 802088c:	07d2      	lsls	r2, r2, #31
 802088e:	d403      	bmi.n	8020898 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8020890:	699a      	ldr	r2, [r3, #24]
 8020892:	f042 0201 	orr.w	r2, r2, #1
 8020896:	619a      	str	r2, [r3, #24]
  }
}
 8020898:	4770      	bx	lr
	...

0802089c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 802089c:	b530      	push	{r4, r5, lr}
 802089e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80208a0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80208a4:	6804      	ldr	r4, [r0, #0]
 80208a6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80208aa:	6860      	ldr	r0, [r4, #4]
 80208ac:	431a      	orrs	r2, r3
 80208ae:	4b04      	ldr	r3, [pc, #16]	; (80208c0 <I2C_TransferConfig+0x24>)
 80208b0:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80208b4:	430a      	orrs	r2, r1
 80208b6:	ea20 0003 	bic.w	r0, r0, r3
 80208ba:	4302      	orrs	r2, r0
 80208bc:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80208be:	bd30      	pop	{r4, r5, pc}
 80208c0:	03ff63ff 	.word	0x03ff63ff

080208c4 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80208c4:	6803      	ldr	r3, [r0, #0]
{
 80208c6:	b570      	push	{r4, r5, r6, lr}
 80208c8:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80208ca:	6998      	ldr	r0, [r3, #24]
{
 80208cc:	460d      	mov	r5, r1
 80208ce:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80208d0:	f010 0010 	ands.w	r0, r0, #16
 80208d4:	d116      	bne.n	8020904 <I2C_IsAcknowledgeFailed+0x40>
}
 80208d6:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80208d8:	1c69      	adds	r1, r5, #1
 80208da:	d014      	beq.n	8020906 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80208dc:	f7ff fd20 	bl	8020320 <HAL_GetTick>
 80208e0:	1b80      	subs	r0, r0, r6
 80208e2:	42a8      	cmp	r0, r5
 80208e4:	d800      	bhi.n	80208e8 <I2C_IsAcknowledgeFailed+0x24>
 80208e6:	b96d      	cbnz	r5, 8020904 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80208e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80208ea:	f043 0320 	orr.w	r3, r3, #32
 80208ee:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80208f0:	2320      	movs	r3, #32
 80208f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80208f6:	2300      	movs	r3, #0
    return HAL_ERROR;
 80208f8:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80208fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80208fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8020902:	e7e8      	b.n	80208d6 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8020904:	6823      	ldr	r3, [r4, #0]
 8020906:	699a      	ldr	r2, [r3, #24]
 8020908:	0692      	lsls	r2, r2, #26
 802090a:	d5e5      	bpl.n	80208d8 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802090c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802090e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8020910:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8020912:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8020914:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8020916:	f7ff ffb2 	bl	802087e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 802091a:	6822      	ldr	r2, [r4, #0]
 802091c:	6853      	ldr	r3, [r2, #4]
 802091e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8020922:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8020926:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 802092a:	f023 0301 	bic.w	r3, r3, #1
 802092e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8020930:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020932:	f043 0304 	orr.w	r3, r3, #4
 8020936:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8020938:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 802093c:	e7db      	b.n	80208f6 <I2C_IsAcknowledgeFailed+0x32>

0802093e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 802093e:	b570      	push	{r4, r5, r6, lr}
 8020940:	4604      	mov	r4, r0
 8020942:	460d      	mov	r5, r1
 8020944:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8020946:	6823      	ldr	r3, [r4, #0]
 8020948:	699b      	ldr	r3, [r3, #24]
 802094a:	069b      	lsls	r3, r3, #26
 802094c:	d501      	bpl.n	8020952 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 802094e:	2000      	movs	r0, #0
}
 8020950:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8020952:	4632      	mov	r2, r6
 8020954:	4629      	mov	r1, r5
 8020956:	4620      	mov	r0, r4
 8020958:	f7ff ffb4 	bl	80208c4 <I2C_IsAcknowledgeFailed>
 802095c:	b990      	cbnz	r0, 8020984 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802095e:	f7ff fcdf 	bl	8020320 <HAL_GetTick>
 8020962:	1b80      	subs	r0, r0, r6
 8020964:	42a8      	cmp	r0, r5
 8020966:	d801      	bhi.n	802096c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8020968:	2d00      	cmp	r5, #0
 802096a:	d1ec      	bne.n	8020946 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 802096c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802096e:	f043 0320 	orr.w	r3, r3, #32
 8020972:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8020974:	2320      	movs	r3, #32
 8020976:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802097a:	2300      	movs	r3, #0
 802097c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8020980:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8020984:	2001      	movs	r0, #1
 8020986:	e7e3      	b.n	8020950 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08020988 <I2C_WaitOnFlagUntilTimeout>:
{
 8020988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802098c:	9f06      	ldr	r7, [sp, #24]
 802098e:	4604      	mov	r4, r0
 8020990:	4688      	mov	r8, r1
 8020992:	4616      	mov	r6, r2
 8020994:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020996:	6822      	ldr	r2, [r4, #0]
 8020998:	6993      	ldr	r3, [r2, #24]
 802099a:	ea38 0303 	bics.w	r3, r8, r3
 802099e:	bf0c      	ite	eq
 80209a0:	2301      	moveq	r3, #1
 80209a2:	2300      	movne	r3, #0
 80209a4:	42b3      	cmp	r3, r6
 80209a6:	d001      	beq.n	80209ac <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80209a8:	2000      	movs	r0, #0
 80209aa:	e015      	b.n	80209d8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80209ac:	1c6b      	adds	r3, r5, #1
 80209ae:	d0f3      	beq.n	8020998 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80209b0:	f7ff fcb6 	bl	8020320 <HAL_GetTick>
 80209b4:	1bc0      	subs	r0, r0, r7
 80209b6:	42a8      	cmp	r0, r5
 80209b8:	d801      	bhi.n	80209be <I2C_WaitOnFlagUntilTimeout+0x36>
 80209ba:	2d00      	cmp	r5, #0
 80209bc:	d1eb      	bne.n	8020996 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80209be:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80209c0:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80209c2:	f043 0320 	orr.w	r3, r3, #32
 80209c6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80209c8:	2320      	movs	r3, #32
 80209ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80209ce:	2300      	movs	r3, #0
 80209d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80209d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80209d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080209dc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80209dc:	b570      	push	{r4, r5, r6, lr}
 80209de:	4604      	mov	r4, r0
 80209e0:	460d      	mov	r5, r1
 80209e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80209e4:	6823      	ldr	r3, [r4, #0]
 80209e6:	699b      	ldr	r3, [r3, #24]
 80209e8:	079b      	lsls	r3, r3, #30
 80209ea:	d501      	bpl.n	80209f0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80209ec:	2000      	movs	r0, #0
}
 80209ee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80209f0:	4632      	mov	r2, r6
 80209f2:	4629      	mov	r1, r5
 80209f4:	4620      	mov	r0, r4
 80209f6:	f7ff ff65 	bl	80208c4 <I2C_IsAcknowledgeFailed>
 80209fa:	b9a0      	cbnz	r0, 8020a26 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80209fc:	1c6a      	adds	r2, r5, #1
 80209fe:	d0f1      	beq.n	80209e4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020a00:	f7ff fc8e 	bl	8020320 <HAL_GetTick>
 8020a04:	1b80      	subs	r0, r0, r6
 8020a06:	42a8      	cmp	r0, r5
 8020a08:	d801      	bhi.n	8020a0e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8020a0a:	2d00      	cmp	r5, #0
 8020a0c:	d1ea      	bne.n	80209e4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8020a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8020a10:	f043 0320 	orr.w	r3, r3, #32
 8020a14:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8020a16:	2320      	movs	r3, #32
 8020a18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8020a1c:	2300      	movs	r3, #0
 8020a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8020a22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8020a26:	2001      	movs	r0, #1
 8020a28:	e7e1      	b.n	80209ee <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

08020a2c <I2C_RequestMemoryRead>:
{
 8020a2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020a30:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8020a32:	4b18      	ldr	r3, [pc, #96]	; (8020a94 <I2C_RequestMemoryRead+0x68>)
{
 8020a34:	4605      	mov	r5, r0
 8020a36:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8020a38:	9300      	str	r3, [sp, #0]
 8020a3a:	b2f2      	uxtb	r2, r6
 8020a3c:	2300      	movs	r3, #0
{
 8020a3e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8020a42:	f7ff ff2b 	bl	802089c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8020a46:	4628      	mov	r0, r5
 8020a48:	4642      	mov	r2, r8
 8020a4a:	4639      	mov	r1, r7
 8020a4c:	f7ff ffc6 	bl	80209dc <I2C_WaitOnTXISFlagUntilTimeout>
 8020a50:	b118      	cbz	r0, 8020a5a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8020a52:	2001      	movs	r0, #1
}
 8020a54:	b002      	add	sp, #8
 8020a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8020a5a:	2e01      	cmp	r6, #1
 8020a5c:	682b      	ldr	r3, [r5, #0]
 8020a5e:	d10d      	bne.n	8020a7c <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8020a60:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8020a62:	2200      	movs	r2, #0
 8020a64:	2140      	movs	r1, #64	; 0x40
 8020a66:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8020a68:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8020a6a:	463b      	mov	r3, r7
 8020a6c:	f8cd 8000 	str.w	r8, [sp]
 8020a70:	f7ff ff8a 	bl	8020988 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8020a74:	3800      	subs	r0, #0
 8020a76:	bf18      	it	ne
 8020a78:	2001      	movne	r0, #1
 8020a7a:	e7eb      	b.n	8020a54 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8020a7c:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8020a7e:	4639      	mov	r1, r7
 8020a80:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8020a82:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8020a84:	4642      	mov	r2, r8
 8020a86:	f7ff ffa9 	bl	80209dc <I2C_WaitOnTXISFlagUntilTimeout>
 8020a8a:	2800      	cmp	r0, #0
 8020a8c:	d1e1      	bne.n	8020a52 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8020a8e:	682b      	ldr	r3, [r5, #0]
 8020a90:	e7e6      	b.n	8020a60 <I2C_RequestMemoryRead+0x34>
 8020a92:	bf00      	nop
 8020a94:	80002000 	.word	0x80002000

08020a98 <HAL_I2C_Init>:
{
 8020a98:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8020a9a:	4604      	mov	r4, r0
 8020a9c:	2800      	cmp	r0, #0
 8020a9e:	d04a      	beq.n	8020b36 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8020aa0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020aa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8020aa8:	b91b      	cbnz	r3, 8020ab2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8020aaa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8020aae:	f7e0 fa27 	bl	8000f00 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8020ab2:	2324      	movs	r3, #36	; 0x24
 8020ab4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8020ab8:	6823      	ldr	r3, [r4, #0]
 8020aba:	681a      	ldr	r2, [r3, #0]
 8020abc:	f022 0201 	bic.w	r2, r2, #1
 8020ac0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8020ac2:	6862      	ldr	r2, [r4, #4]
 8020ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8020ac8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8020aca:	689a      	ldr	r2, [r3, #8]
 8020acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8020ad0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8020ad2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8020ad6:	2901      	cmp	r1, #1
 8020ad8:	d124      	bne.n	8020b24 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8020ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020ade:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8020ae0:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8020ae2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8020ae4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8020ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020aec:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8020aee:	68da      	ldr	r2, [r3, #12]
 8020af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8020af4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8020af6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020afa:	430a      	orrs	r2, r1
 8020afc:	69a1      	ldr	r1, [r4, #24]
 8020afe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8020b02:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8020b04:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8020b08:	430a      	orrs	r2, r1
 8020b0a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8020b0c:	681a      	ldr	r2, [r3, #0]
 8020b0e:	f042 0201 	orr.w	r2, r2, #1
 8020b12:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8020b14:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8020b16:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8020b18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8020b1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8020b1e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8020b22:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8020b24:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8020b28:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8020b2a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8020b2c:	d1d8      	bne.n	8020ae0 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8020b2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020b32:	605a      	str	r2, [r3, #4]
 8020b34:	e7d4      	b.n	8020ae0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8020b36:	2001      	movs	r0, #1
 8020b38:	e7f3      	b.n	8020b22 <HAL_I2C_Init+0x8a>
	...

08020b3c <HAL_I2C_Mem_Read>:
{
 8020b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b40:	b085      	sub	sp, #20
 8020b42:	469b      	mov	fp, r3
 8020b44:	4604      	mov	r4, r0
 8020b46:	460f      	mov	r7, r1
 8020b48:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8020b4c:	4692      	mov	sl, r2
 8020b4e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8020b52:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8020b54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020b58:	2b20      	cmp	r3, #32
 8020b5a:	f040 80a7 	bne.w	8020cac <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8020b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020b60:	b10b      	cbz	r3, 8020b66 <HAL_I2C_Mem_Read+0x2a>
 8020b62:	9b03      	ldr	r3, [sp, #12]
 8020b64:	b933      	cbnz	r3, 8020b74 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8020b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020b6a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8020b6c:	2001      	movs	r0, #1
}
 8020b6e:	b005      	add	sp, #20
 8020b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8020b74:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8020b78:	2b01      	cmp	r3, #1
 8020b7a:	f000 8097 	beq.w	8020cac <HAL_I2C_Mem_Read+0x170>
 8020b7e:	2501      	movs	r5, #1
 8020b80:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8020b84:	f7ff fbcc 	bl	8020320 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8020b88:	2319      	movs	r3, #25
 8020b8a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8020b8c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8020b8e:	462a      	mov	r2, r5
 8020b90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020b94:	4620      	mov	r0, r4
 8020b96:	f7ff fef7 	bl	8020988 <I2C_WaitOnFlagUntilTimeout>
 8020b9a:	4680      	mov	r8, r0
 8020b9c:	2800      	cmp	r0, #0
 8020b9e:	d1e5      	bne.n	8020b6c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8020ba0:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8020ba2:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020ba4:	4652      	mov	r2, sl
 8020ba6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8020ba8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8020bac:	2340      	movs	r3, #64	; 0x40
 8020bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8020bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8020bb4:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020bb6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8020bb8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8020bba:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020bbc:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8020bc0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8020bc2:	465b      	mov	r3, fp
 8020bc4:	f7ff ff32 	bl	8020a2c <I2C_RequestMemoryRead>
 8020bc8:	b110      	cbz	r0, 8020bd0 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8020bca:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8020bce:	e7cd      	b.n	8020b6c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8020bd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020bd2:	b29b      	uxth	r3, r3
 8020bd4:	2bff      	cmp	r3, #255	; 0xff
 8020bd6:	4b36      	ldr	r3, [pc, #216]	; (8020cb0 <HAL_I2C_Mem_Read+0x174>)
 8020bd8:	d958      	bls.n	8020c8c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8020bda:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8020bdc:	9300      	str	r3, [sp, #0]
 8020bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8020be2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8020be4:	4639      	mov	r1, r7
 8020be6:	4620      	mov	r0, r4
 8020be8:	f7ff fe58 	bl	802089c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8020bec:	464b      	mov	r3, r9
 8020bee:	2200      	movs	r2, #0
 8020bf0:	2104      	movs	r1, #4
 8020bf2:	4620      	mov	r0, r4
 8020bf4:	9600      	str	r6, [sp, #0]
 8020bf6:	f7ff fec7 	bl	8020988 <I2C_WaitOnFlagUntilTimeout>
 8020bfa:	2800      	cmp	r0, #0
 8020bfc:	d1b6      	bne.n	8020b6c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8020bfe:	6823      	ldr	r3, [r4, #0]
 8020c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8020c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020c04:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8020c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8020c08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8020c0a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8020c0c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8020c0e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8020c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8020c12:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8020c14:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8020c16:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8020c18:	b29b      	uxth	r3, r3
 8020c1a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8020c1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020c1e:	b29b      	uxth	r3, r3
 8020c20:	b1ab      	cbz	r3, 8020c4e <HAL_I2C_Mem_Read+0x112>
 8020c22:	b9a2      	cbnz	r2, 8020c4e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8020c24:	464b      	mov	r3, r9
 8020c26:	2180      	movs	r1, #128	; 0x80
 8020c28:	4620      	mov	r0, r4
 8020c2a:	9600      	str	r6, [sp, #0]
 8020c2c:	f7ff feac 	bl	8020988 <I2C_WaitOnFlagUntilTimeout>
 8020c30:	2800      	cmp	r0, #0
 8020c32:	d19b      	bne.n	8020b6c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8020c34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020c36:	b29b      	uxth	r3, r3
 8020c38:	2bff      	cmp	r3, #255	; 0xff
 8020c3a:	d92f      	bls.n	8020c9c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8020c3c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8020c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8020c42:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8020c44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8020c46:	4639      	mov	r1, r7
 8020c48:	4620      	mov	r0, r4
 8020c4a:	f7ff fe27 	bl	802089c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8020c4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020c50:	b29b      	uxth	r3, r3
 8020c52:	2b00      	cmp	r3, #0
 8020c54:	d1ca      	bne.n	8020bec <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8020c56:	4632      	mov	r2, r6
 8020c58:	4649      	mov	r1, r9
 8020c5a:	4620      	mov	r0, r4
 8020c5c:	f7ff fe6f 	bl	802093e <I2C_WaitOnSTOPFlagUntilTimeout>
 8020c60:	2800      	cmp	r0, #0
 8020c62:	d183      	bne.n	8020b6c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8020c64:	6823      	ldr	r3, [r4, #0]
 8020c66:	2120      	movs	r1, #32
 8020c68:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8020c6a:	685a      	ldr	r2, [r3, #4]
 8020c6c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8020c70:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8020c74:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8020c78:	f022 0201 	bic.w	r2, r2, #1
 8020c7c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8020c7e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8020c82:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8020c86:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8020c8a:	e770      	b.n	8020b6e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8020c8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8020c8e:	9300      	str	r3, [sp, #0]
 8020c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8020c94:	b292      	uxth	r2, r2
 8020c96:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8020c98:	b2d2      	uxtb	r2, r2
 8020c9a:	e7a3      	b.n	8020be4 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8020c9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8020c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8020ca2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8020ca4:	b292      	uxth	r2, r2
 8020ca6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8020ca8:	b2d2      	uxtb	r2, r2
 8020caa:	e7cc      	b.n	8020c46 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8020cac:	2002      	movs	r0, #2
 8020cae:	e75e      	b.n	8020b6e <HAL_I2C_Mem_Read+0x32>
 8020cb0:	80002400 	.word	0x80002400

08020cb4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8020cb4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8020cb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8020cb8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8020cba:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8020cbc:	b103      	cbz	r3, 8020cc0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8020cbe:	4718      	bx	r3
}
 8020cc0:	4770      	bx	lr

08020cc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8020cc2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8020cc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020cc8:	2b20      	cmp	r3, #32
 8020cca:	b2dc      	uxtb	r4, r3
 8020ccc:	d11d      	bne.n	8020d0a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8020cce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8020cd2:	2b01      	cmp	r3, #1
 8020cd4:	d019      	beq.n	8020d0a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8020cd6:	2324      	movs	r3, #36	; 0x24
 8020cd8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8020cdc:	6803      	ldr	r3, [r0, #0]
 8020cde:	681a      	ldr	r2, [r3, #0]
 8020ce0:	f022 0201 	bic.w	r2, r2, #1
 8020ce4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8020ce6:	681a      	ldr	r2, [r3, #0]
 8020ce8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8020cec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8020cee:	681a      	ldr	r2, [r3, #0]
 8020cf0:	4311      	orrs	r1, r2
 8020cf2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8020cf4:	681a      	ldr	r2, [r3, #0]
 8020cf6:	f042 0201 	orr.w	r2, r2, #1
 8020cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8020cfc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8020cfe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8020d02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8020d06:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8020d08:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8020d0a:	2002      	movs	r0, #2
 8020d0c:	e7fc      	b.n	8020d08 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08020d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8020d0e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8020d10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8020d14:	2b20      	cmp	r3, #32
 8020d16:	b2dc      	uxtb	r4, r3
 8020d18:	d11c      	bne.n	8020d54 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8020d1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8020d1e:	2b01      	cmp	r3, #1
 8020d20:	d018      	beq.n	8020d54 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8020d22:	2324      	movs	r3, #36	; 0x24
 8020d24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8020d28:	6803      	ldr	r3, [r0, #0]
 8020d2a:	681a      	ldr	r2, [r3, #0]
 8020d2c:	f022 0201 	bic.w	r2, r2, #1
 8020d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8020d32:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8020d34:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8020d38:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8020d3c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8020d3e:	681a      	ldr	r2, [r3, #0]
 8020d40:	f042 0201 	orr.w	r2, r2, #1
 8020d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8020d46:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8020d48:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8020d4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8020d50:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8020d52:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8020d54:	2002      	movs	r0, #2
 8020d56:	e7fc      	b.n	8020d52 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08020d58 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020d58:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020d5a:	f8d1 c000 	ldr.w	ip, [r1]
{
 8020d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020d62:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020d64:	6804      	ldr	r4, [r0, #0]
 8020d66:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020d68:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020d6c:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020d6e:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8020d70:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8020d74:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020d78:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020d7a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020d7e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8020d82:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8020d84:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020d86:	68e0      	ldr	r0, [r4, #12]
 8020d88:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8020d8c:	4430      	add	r0, r6
 8020d8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8020d92:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8020d94:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8020d96:	68e0      	ldr	r0, [r4, #12]
 8020d98:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8020d9c:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8020d9e:	6898      	ldr	r0, [r3, #8]
 8020da0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8020da4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8020da6:	6888      	ldr	r0, [r1, #8]
 8020da8:	68e6      	ldr	r6, [r4, #12]
 8020daa:	3001      	adds	r0, #1
 8020dac:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8020db0:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8020db2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8020db4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020db8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8020dba:	6918      	ldr	r0, [r3, #16]
 8020dbc:	f020 0007 	bic.w	r0, r0, #7
 8020dc0:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8020dc2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8020dc4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8020dc6:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8020dca:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8020dce:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8020dd2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8020dd6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8020dda:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8020dde:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8020de2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8020de4:	6958      	ldr	r0, [r3, #20]
 8020de6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8020dea:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8020dec:	6948      	ldr	r0, [r1, #20]
 8020dee:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8020df0:	69d8      	ldr	r0, [r3, #28]
 8020df2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8020df6:	f020 0007 	bic.w	r0, r0, #7
 8020dfa:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8020dfc:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8020e00:	4305      	orrs	r5, r0
 8020e02:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8020e04:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8020e06:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8020e08:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8020e0c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8020e0e:	b31e      	cbz	r6, 8020e58 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8020e10:	2e01      	cmp	r6, #1
 8020e12:	d023      	beq.n	8020e5c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8020e14:	1eb0      	subs	r0, r6, #2
 8020e16:	2802      	cmp	r0, #2
 8020e18:	d922      	bls.n	8020e60 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8020e1a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8020e1c:	bf0c      	ite	eq
 8020e1e:	2002      	moveq	r0, #2
 8020e20:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8020e22:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8020e24:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8020e28:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8020e2c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8020e2e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8020e30:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8020e32:	4345      	muls	r5, r0
 8020e34:	4378      	muls	r0, r7
 8020e36:	3003      	adds	r0, #3
 8020e38:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020e3c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8020e3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8020e40:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8020e44:	f020 0007 	bic.w	r0, r0, #7
 8020e48:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8020e4a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8020e4c:	58a3      	ldr	r3, [r4, r2]
 8020e4e:	f043 0301 	orr.w	r3, r3, #1
 8020e52:	50a3      	str	r3, [r4, r2]
}
 8020e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8020e58:	2004      	movs	r0, #4
 8020e5a:	e7e2      	b.n	8020e22 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8020e5c:	2003      	movs	r0, #3
 8020e5e:	e7e0      	b.n	8020e22 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8020e60:	2002      	movs	r0, #2
 8020e62:	e7de      	b.n	8020e22 <LTDC_SetConfig+0xca>

08020e64 <HAL_LTDC_Init>:
{
 8020e64:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8020e66:	4604      	mov	r4, r0
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d063      	beq.n	8020f34 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8020e6c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8020e70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8020e74:	b91b      	cbnz	r3, 8020e7e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8020e76:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8020e7a:	f7e0 f87f 	bl	8000f7c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8020e7e:	2302      	movs	r3, #2
 8020e80:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8020e84:	6823      	ldr	r3, [r4, #0]
 8020e86:	699a      	ldr	r2, [r3, #24]
 8020e88:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8020e8c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8020e8e:	6999      	ldr	r1, [r3, #24]
 8020e90:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8020e94:	4302      	orrs	r2, r0
 8020e96:	68e0      	ldr	r0, [r4, #12]
 8020e98:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8020e9a:	6920      	ldr	r0, [r4, #16]
 8020e9c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8020e9e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8020ea0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8020ea2:	4925      	ldr	r1, [pc, #148]	; (8020f38 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8020ea4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8020ea6:	689a      	ldr	r2, [r3, #8]
 8020ea8:	400a      	ands	r2, r1
 8020eaa:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8020eac:	689a      	ldr	r2, [r3, #8]
 8020eae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8020eb2:	69a0      	ldr	r0, [r4, #24]
 8020eb4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8020eb6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8020eb8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8020eba:	68da      	ldr	r2, [r3, #12]
 8020ebc:	400a      	ands	r2, r1
 8020ebe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8020ec0:	68da      	ldr	r2, [r3, #12]
 8020ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8020ec6:	6a20      	ldr	r0, [r4, #32]
 8020ec8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8020eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8020ecc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8020ece:	691a      	ldr	r2, [r3, #16]
 8020ed0:	400a      	ands	r2, r1
 8020ed2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8020ed4:	691a      	ldr	r2, [r3, #16]
 8020ed6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8020eda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020edc:	4302      	orrs	r2, r0
 8020ede:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8020ee0:	695a      	ldr	r2, [r3, #20]
 8020ee2:	4011      	ands	r1, r2
 8020ee4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8020ee6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8020ee8:	695a      	ldr	r2, [r3, #20]
 8020eea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8020eee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8020ef0:	430a      	orrs	r2, r1
 8020ef2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8020ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8020ef6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8020efa:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8020efe:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8020f02:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8020f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8020f06:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8020f0a:	430a      	orrs	r2, r1
 8020f0c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8020f10:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8020f14:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8020f16:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8020f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8020f1a:	f042 0206 	orr.w	r2, r2, #6
 8020f1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8020f20:	699a      	ldr	r2, [r3, #24]
 8020f22:	f042 0201 	orr.w	r2, r2, #1
 8020f26:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8020f28:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8020f2a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8020f2e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8020f32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8020f34:	2001      	movs	r0, #1
 8020f36:	e7fc      	b.n	8020f32 <HAL_LTDC_Init+0xce>
 8020f38:	f000f800 	.word	0xf000f800

08020f3c <HAL_LTDC_ConfigLayer>:
{
 8020f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8020f40:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8020f44:	4606      	mov	r6, r0
 8020f46:	460f      	mov	r7, r1
 8020f48:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8020f4a:	2b01      	cmp	r3, #1
 8020f4c:	f04f 0002 	mov.w	r0, #2
 8020f50:	d01f      	beq.n	8020f92 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8020f52:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8020f54:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8020f58:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8020f5a:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8020f5e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8020f62:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8020f66:	3438      	adds	r4, #56	; 0x38
 8020f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020f74:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8020f76:	4630      	mov	r0, r6
 8020f78:	4662      	mov	r2, ip
 8020f7a:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8020f7c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8020f7e:	f7ff feeb 	bl	8020d58 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8020f82:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8020f84:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8020f86:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8020f8a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8020f8e:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8020f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08020f98 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8020f98:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8020f9c:	2b01      	cmp	r3, #1
 8020f9e:	f04f 0302 	mov.w	r3, #2
 8020fa2:	d00c      	beq.n	8020fbe <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8020fa4:	4a07      	ldr	r2, [pc, #28]	; (8020fc4 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8020fa6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8020faa:	6993      	ldr	r3, [r2, #24]
 8020fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020fb0:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8020fb2:	2301      	movs	r3, #1
 8020fb4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8020fb8:	2300      	movs	r3, #0
 8020fba:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8020fbe:	4618      	mov	r0, r3
}
 8020fc0:	4770      	bx	lr
 8020fc2:	bf00      	nop
 8020fc4:	40016800 	.word	0x40016800

08020fc8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8020fc8:	4b19      	ldr	r3, [pc, #100]	; (8021030 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8020fca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8020fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8020fce:	4c19      	ldr	r4, [pc, #100]	; (8021034 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8020fd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8020fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8020fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020fdc:	9301      	str	r3, [sp, #4]
 8020fde:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8020fe0:	6823      	ldr	r3, [r4, #0]
 8020fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020fe6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8020fe8:	f7ff f99a 	bl	8020320 <HAL_GetTick>
 8020fec:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8020fee:	6863      	ldr	r3, [r4, #4]
 8020ff0:	03da      	lsls	r2, r3, #15
 8020ff2:	d50c      	bpl.n	802100e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8020ff4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8020ff6:	4d0f      	ldr	r5, [pc, #60]	; (8021034 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8020ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020ffc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8020ffe:	f7ff f98f 	bl	8020320 <HAL_GetTick>
 8021002:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8021004:	686b      	ldr	r3, [r5, #4]
 8021006:	039b      	lsls	r3, r3, #14
 8021008:	d50a      	bpl.n	8021020 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 802100a:	2000      	movs	r0, #0
 802100c:	e006      	b.n	802101c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 802100e:	f7ff f987 	bl	8020320 <HAL_GetTick>
 8021012:	1b40      	subs	r0, r0, r5
 8021014:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8021018:	d9e9      	bls.n	8020fee <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 802101a:	2003      	movs	r0, #3
}
 802101c:	b003      	add	sp, #12
 802101e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021020:	f7ff f97e 	bl	8020320 <HAL_GetTick>
 8021024:	1b00      	subs	r0, r0, r4
 8021026:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 802102a:	d9eb      	bls.n	8021004 <HAL_PWREx_EnableOverDrive+0x3c>
 802102c:	e7f5      	b.n	802101a <HAL_PWREx_EnableOverDrive+0x52>
 802102e:	bf00      	nop
 8021030:	40023800 	.word	0x40023800
 8021034:	40007000 	.word	0x40007000

08021038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 802103c:	4604      	mov	r4, r0
 802103e:	b340      	cbz	r0, 8021092 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021040:	6803      	ldr	r3, [r0, #0]
 8021042:	07d8      	lsls	r0, r3, #31
 8021044:	d410      	bmi.n	8021068 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021046:	6823      	ldr	r3, [r4, #0]
 8021048:	0799      	lsls	r1, r3, #30
 802104a:	d464      	bmi.n	8021116 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802104c:	6823      	ldr	r3, [r4, #0]
 802104e:	0719      	lsls	r1, r3, #28
 8021050:	f100 80aa 	bmi.w	80211a8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021054:	6823      	ldr	r3, [r4, #0]
 8021056:	075a      	lsls	r2, r3, #29
 8021058:	f100 80cb 	bmi.w	80211f2 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802105c:	69a2      	ldr	r2, [r4, #24]
 802105e:	2a00      	cmp	r2, #0
 8021060:	f040 8134 	bne.w	80212cc <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8021064:	2000      	movs	r0, #0
 8021066:	e02b      	b.n	80210c0 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021068:	4b96      	ldr	r3, [pc, #600]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 802106a:	689a      	ldr	r2, [r3, #8]
 802106c:	f002 020c 	and.w	r2, r2, #12
 8021070:	2a04      	cmp	r2, #4
 8021072:	d007      	beq.n	8021084 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021074:	689a      	ldr	r2, [r3, #8]
 8021076:	f002 020c 	and.w	r2, r2, #12
 802107a:	2a08      	cmp	r2, #8
 802107c:	d10b      	bne.n	8021096 <HAL_RCC_OscConfig+0x5e>
 802107e:	685a      	ldr	r2, [r3, #4]
 8021080:	0252      	lsls	r2, r2, #9
 8021082:	d508      	bpl.n	8021096 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021084:	4b8f      	ldr	r3, [pc, #572]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	039b      	lsls	r3, r3, #14
 802108a:	d5dc      	bpl.n	8021046 <HAL_RCC_OscConfig+0xe>
 802108c:	6863      	ldr	r3, [r4, #4]
 802108e:	2b00      	cmp	r3, #0
 8021090:	d1d9      	bne.n	8021046 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8021092:	2001      	movs	r0, #1
 8021094:	e014      	b.n	80210c0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021096:	6862      	ldr	r2, [r4, #4]
 8021098:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 802109c:	d113      	bne.n	80210c6 <HAL_RCC_OscConfig+0x8e>
 802109e:	681a      	ldr	r2, [r3, #0]
 80210a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80210a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80210a6:	f7ff f93b 	bl	8020320 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210aa:	4e86      	ldr	r6, [pc, #536]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80210ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210ae:	6833      	ldr	r3, [r6, #0]
 80210b0:	039f      	lsls	r7, r3, #14
 80210b2:	d4c8      	bmi.n	8021046 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80210b4:	f7ff f934 	bl	8020320 <HAL_GetTick>
 80210b8:	1b40      	subs	r0, r0, r5
 80210ba:	2864      	cmp	r0, #100	; 0x64
 80210bc:	d9f7      	bls.n	80210ae <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80210be:	2003      	movs	r0, #3
}
 80210c0:	b002      	add	sp, #8
 80210c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80210c6:	4d7f      	ldr	r5, [pc, #508]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 80210c8:	682b      	ldr	r3, [r5, #0]
 80210ca:	b992      	cbnz	r2, 80210f2 <HAL_RCC_OscConfig+0xba>
 80210cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80210d0:	602b      	str	r3, [r5, #0]
 80210d2:	682b      	ldr	r3, [r5, #0]
 80210d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80210d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80210da:	f7ff f921 	bl	8020320 <HAL_GetTick>
 80210de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80210e0:	682b      	ldr	r3, [r5, #0]
 80210e2:	0398      	lsls	r0, r3, #14
 80210e4:	d5af      	bpl.n	8021046 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80210e6:	f7ff f91b 	bl	8020320 <HAL_GetTick>
 80210ea:	1b80      	subs	r0, r0, r6
 80210ec:	2864      	cmp	r0, #100	; 0x64
 80210ee:	d9f7      	bls.n	80210e0 <HAL_RCC_OscConfig+0xa8>
 80210f0:	e7e5      	b.n	80210be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80210f2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80210f6:	d107      	bne.n	8021108 <HAL_RCC_OscConfig+0xd0>
 80210f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80210fc:	602b      	str	r3, [r5, #0]
 80210fe:	682b      	ldr	r3, [r5, #0]
 8021100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021104:	602b      	str	r3, [r5, #0]
 8021106:	e7ce      	b.n	80210a6 <HAL_RCC_OscConfig+0x6e>
 8021108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802110c:	602b      	str	r3, [r5, #0]
 802110e:	682b      	ldr	r3, [r5, #0]
 8021110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021114:	e7f6      	b.n	8021104 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8021116:	4b6b      	ldr	r3, [pc, #428]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 8021118:	689a      	ldr	r2, [r3, #8]
 802111a:	f012 0f0c 	tst.w	r2, #12
 802111e:	d007      	beq.n	8021130 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021120:	689a      	ldr	r2, [r3, #8]
 8021122:	f002 020c 	and.w	r2, r2, #12
 8021126:	2a08      	cmp	r2, #8
 8021128:	d111      	bne.n	802114e <HAL_RCC_OscConfig+0x116>
 802112a:	685a      	ldr	r2, [r3, #4]
 802112c:	0251      	lsls	r1, r2, #9
 802112e:	d40e      	bmi.n	802114e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021130:	4b64      	ldr	r3, [pc, #400]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 8021132:	681a      	ldr	r2, [r3, #0]
 8021134:	0792      	lsls	r2, r2, #30
 8021136:	d502      	bpl.n	802113e <HAL_RCC_OscConfig+0x106>
 8021138:	68e2      	ldr	r2, [r4, #12]
 802113a:	2a01      	cmp	r2, #1
 802113c:	d1a9      	bne.n	8021092 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802113e:	681a      	ldr	r2, [r3, #0]
 8021140:	6921      	ldr	r1, [r4, #16]
 8021142:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8021146:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 802114a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802114c:	e77e      	b.n	802104c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 802114e:	68e2      	ldr	r2, [r4, #12]
 8021150:	b1c2      	cbz	r2, 8021184 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8021152:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021154:	4d5b      	ldr	r5, [pc, #364]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8021156:	f042 0201 	orr.w	r2, r2, #1
 802115a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 802115c:	f7ff f8e0 	bl	8020320 <HAL_GetTick>
 8021160:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021162:	682b      	ldr	r3, [r5, #0]
 8021164:	079f      	lsls	r7, r3, #30
 8021166:	d507      	bpl.n	8021178 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021168:	682b      	ldr	r3, [r5, #0]
 802116a:	6922      	ldr	r2, [r4, #16]
 802116c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8021170:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021174:	602b      	str	r3, [r5, #0]
 8021176:	e769      	b.n	802104c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021178:	f7ff f8d2 	bl	8020320 <HAL_GetTick>
 802117c:	1b80      	subs	r0, r0, r6
 802117e:	2802      	cmp	r0, #2
 8021180:	d9ef      	bls.n	8021162 <HAL_RCC_OscConfig+0x12a>
 8021182:	e79c      	b.n	80210be <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8021184:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021186:	4e4f      	ldr	r6, [pc, #316]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8021188:	f022 0201 	bic.w	r2, r2, #1
 802118c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 802118e:	f7ff f8c7 	bl	8020320 <HAL_GetTick>
 8021192:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021194:	6833      	ldr	r3, [r6, #0]
 8021196:	0798      	lsls	r0, r3, #30
 8021198:	f57f af58 	bpl.w	802104c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802119c:	f7ff f8c0 	bl	8020320 <HAL_GetTick>
 80211a0:	1b40      	subs	r0, r0, r5
 80211a2:	2802      	cmp	r0, #2
 80211a4:	d9f6      	bls.n	8021194 <HAL_RCC_OscConfig+0x15c>
 80211a6:	e78a      	b.n	80210be <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80211a8:	6963      	ldr	r3, [r4, #20]
 80211aa:	4d46      	ldr	r5, [pc, #280]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 80211ac:	b183      	cbz	r3, 80211d0 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80211ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80211b0:	f043 0301 	orr.w	r3, r3, #1
 80211b4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80211b6:	f7ff f8b3 	bl	8020320 <HAL_GetTick>
 80211ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211bc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80211be:	079b      	lsls	r3, r3, #30
 80211c0:	f53f af48 	bmi.w	8021054 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80211c4:	f7ff f8ac 	bl	8020320 <HAL_GetTick>
 80211c8:	1b80      	subs	r0, r0, r6
 80211ca:	2802      	cmp	r0, #2
 80211cc:	d9f6      	bls.n	80211bc <HAL_RCC_OscConfig+0x184>
 80211ce:	e776      	b.n	80210be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80211d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80211d2:	f023 0301 	bic.w	r3, r3, #1
 80211d6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80211d8:	f7ff f8a2 	bl	8020320 <HAL_GetTick>
 80211dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80211de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80211e0:	079f      	lsls	r7, r3, #30
 80211e2:	f57f af37 	bpl.w	8021054 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80211e6:	f7ff f89b 	bl	8020320 <HAL_GetTick>
 80211ea:	1b80      	subs	r0, r0, r6
 80211ec:	2802      	cmp	r0, #2
 80211ee:	d9f6      	bls.n	80211de <HAL_RCC_OscConfig+0x1a6>
 80211f0:	e765      	b.n	80210be <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80211f2:	4b34      	ldr	r3, [pc, #208]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 80211f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80211f6:	00d0      	lsls	r0, r2, #3
 80211f8:	d427      	bmi.n	802124a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80211fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80211fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80211fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021202:	641a      	str	r2, [r3, #64]	; 0x40
 8021204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802120a:	9301      	str	r3, [sp, #4]
 802120c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802120e:	4d2e      	ldr	r5, [pc, #184]	; (80212c8 <HAL_RCC_OscConfig+0x290>)
 8021210:	682b      	ldr	r3, [r5, #0]
 8021212:	05d9      	lsls	r1, r3, #23
 8021214:	d51b      	bpl.n	802124e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021216:	68a3      	ldr	r3, [r4, #8]
 8021218:	4d2a      	ldr	r5, [pc, #168]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 802121a:	2b01      	cmp	r3, #1
 802121c:	d127      	bne.n	802126e <HAL_RCC_OscConfig+0x236>
 802121e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021220:	f043 0301 	orr.w	r3, r3, #1
 8021224:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021226:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 802122a:	f7ff f879 	bl	8020320 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802122e:	4e25      	ldr	r6, [pc, #148]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8021230:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021232:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8021234:	079b      	lsls	r3, r3, #30
 8021236:	d53f      	bpl.n	80212b8 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8021238:	2f00      	cmp	r7, #0
 802123a:	f43f af0f 	beq.w	802105c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 802123e:	4a21      	ldr	r2, [pc, #132]	; (80212c4 <HAL_RCC_OscConfig+0x28c>)
 8021240:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8021242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021246:	6413      	str	r3, [r2, #64]	; 0x40
 8021248:	e708      	b.n	802105c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 802124a:	2700      	movs	r7, #0
 802124c:	e7df      	b.n	802120e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 802124e:	682b      	ldr	r3, [r5, #0]
 8021250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021254:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8021256:	f7ff f863 	bl	8020320 <HAL_GetTick>
 802125a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802125c:	682b      	ldr	r3, [r5, #0]
 802125e:	05da      	lsls	r2, r3, #23
 8021260:	d4d9      	bmi.n	8021216 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021262:	f7ff f85d 	bl	8020320 <HAL_GetTick>
 8021266:	1b80      	subs	r0, r0, r6
 8021268:	2864      	cmp	r0, #100	; 0x64
 802126a:	d9f7      	bls.n	802125c <HAL_RCC_OscConfig+0x224>
 802126c:	e727      	b.n	80210be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802126e:	b9ab      	cbnz	r3, 802129c <HAL_RCC_OscConfig+0x264>
 8021270:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021272:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021276:	f023 0301 	bic.w	r3, r3, #1
 802127a:	672b      	str	r3, [r5, #112]	; 0x70
 802127c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802127e:	f023 0304 	bic.w	r3, r3, #4
 8021282:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8021284:	f7ff f84c 	bl	8020320 <HAL_GetTick>
 8021288:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802128a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802128c:	0798      	lsls	r0, r3, #30
 802128e:	d5d3      	bpl.n	8021238 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021290:	f7ff f846 	bl	8020320 <HAL_GetTick>
 8021294:	1b80      	subs	r0, r0, r6
 8021296:	4540      	cmp	r0, r8
 8021298:	d9f7      	bls.n	802128a <HAL_RCC_OscConfig+0x252>
 802129a:	e710      	b.n	80210be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802129c:	2b05      	cmp	r3, #5
 802129e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80212a0:	d103      	bne.n	80212aa <HAL_RCC_OscConfig+0x272>
 80212a2:	f043 0304 	orr.w	r3, r3, #4
 80212a6:	672b      	str	r3, [r5, #112]	; 0x70
 80212a8:	e7b9      	b.n	802121e <HAL_RCC_OscConfig+0x1e6>
 80212aa:	f023 0301 	bic.w	r3, r3, #1
 80212ae:	672b      	str	r3, [r5, #112]	; 0x70
 80212b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80212b2:	f023 0304 	bic.w	r3, r3, #4
 80212b6:	e7b5      	b.n	8021224 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80212b8:	f7ff f832 	bl	8020320 <HAL_GetTick>
 80212bc:	1b40      	subs	r0, r0, r5
 80212be:	4540      	cmp	r0, r8
 80212c0:	d9b7      	bls.n	8021232 <HAL_RCC_OscConfig+0x1fa>
 80212c2:	e6fc      	b.n	80210be <HAL_RCC_OscConfig+0x86>
 80212c4:	40023800 	.word	0x40023800
 80212c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80212cc:	4d38      	ldr	r5, [pc, #224]	; (80213b0 <HAL_RCC_OscConfig+0x378>)
 80212ce:	68ab      	ldr	r3, [r5, #8]
 80212d0:	f003 030c 	and.w	r3, r3, #12
 80212d4:	2b08      	cmp	r3, #8
 80212d6:	d041      	beq.n	802135c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80212d8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80212da:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80212dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80212e0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80212e2:	d12e      	bne.n	8021342 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80212e4:	f7ff f81c 	bl	8020320 <HAL_GetTick>
 80212e8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80212ea:	682b      	ldr	r3, [r5, #0]
 80212ec:	0199      	lsls	r1, r3, #6
 80212ee:	d422      	bmi.n	8021336 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80212f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80212f2:	085b      	lsrs	r3, r3, #1
 80212f4:	1e5a      	subs	r2, r3, #1
 80212f6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80212fa:	430b      	orrs	r3, r1
 80212fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021300:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8021302:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8021306:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8021308:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 802130c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8021310:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8021312:	682b      	ldr	r3, [r5, #0]
 8021314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021318:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 802131a:	f7ff f801 	bl	8020320 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802131e:	4d24      	ldr	r5, [pc, #144]	; (80213b0 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8021320:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021322:	682b      	ldr	r3, [r5, #0]
 8021324:	019a      	lsls	r2, r3, #6
 8021326:	f53f ae9d 	bmi.w	8021064 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802132a:	f7fe fff9 	bl	8020320 <HAL_GetTick>
 802132e:	1b00      	subs	r0, r0, r4
 8021330:	2802      	cmp	r0, #2
 8021332:	d9f6      	bls.n	8021322 <HAL_RCC_OscConfig+0x2ea>
 8021334:	e6c3      	b.n	80210be <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021336:	f7fe fff3 	bl	8020320 <HAL_GetTick>
 802133a:	1b80      	subs	r0, r0, r6
 802133c:	2802      	cmp	r0, #2
 802133e:	d9d4      	bls.n	80212ea <HAL_RCC_OscConfig+0x2b2>
 8021340:	e6bd      	b.n	80210be <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8021342:	f7fe ffed 	bl	8020320 <HAL_GetTick>
 8021346:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021348:	682b      	ldr	r3, [r5, #0]
 802134a:	019b      	lsls	r3, r3, #6
 802134c:	f57f ae8a 	bpl.w	8021064 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021350:	f7fe ffe6 	bl	8020320 <HAL_GetTick>
 8021354:	1b00      	subs	r0, r0, r4
 8021356:	2802      	cmp	r0, #2
 8021358:	d9f6      	bls.n	8021348 <HAL_RCC_OscConfig+0x310>
 802135a:	e6b0      	b.n	80210be <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802135c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 802135e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021360:	f43f ae97 	beq.w	8021092 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021368:	69e1      	ldr	r1, [r4, #28]
 802136a:	428a      	cmp	r2, r1
 802136c:	f47f ae91 	bne.w	8021092 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021374:	6a21      	ldr	r1, [r4, #32]
 8021376:	428a      	cmp	r2, r1
 8021378:	f47f ae8b 	bne.w	8021092 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802137c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021380:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021382:	401a      	ands	r2, r3
 8021384:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8021388:	f47f ae83 	bne.w	8021092 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 802138c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802138e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8021392:	0852      	lsrs	r2, r2, #1
 8021394:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021396:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 802139a:	f47f ae7a 	bne.w	8021092 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802139e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80213a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80213a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80213a8:	f43f ae5c 	beq.w	8021064 <HAL_RCC_OscConfig+0x2c>
 80213ac:	e671      	b.n	8021092 <HAL_RCC_OscConfig+0x5a>
 80213ae:	bf00      	nop
 80213b0:	40023800 	.word	0x40023800

080213b4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80213b4:	4a02      	ldr	r2, [pc, #8]	; (80213c0 <HAL_RCC_EnableCSS+0xc>)
 80213b6:	6813      	ldr	r3, [r2, #0]
 80213b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80213bc:	6013      	str	r3, [r2, #0]
}
 80213be:	4770      	bx	lr
 80213c0:	40023800 	.word	0x40023800

080213c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80213c4:	4913      	ldr	r1, [pc, #76]	; (8021414 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80213c6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80213c8:	688b      	ldr	r3, [r1, #8]
 80213ca:	f003 030c 	and.w	r3, r3, #12
 80213ce:	2b04      	cmp	r3, #4
 80213d0:	d01b      	beq.n	802140a <HAL_RCC_GetSysClockFreq+0x46>
 80213d2:	2b08      	cmp	r3, #8
 80213d4:	d11b      	bne.n	802140e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80213d6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80213d8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80213da:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80213dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80213e0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80213e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80213e8:	bf1a      	itte	ne
 80213ea:	480b      	ldrne	r0, [pc, #44]	; (8021418 <HAL_RCC_GetSysClockFreq+0x54>)
 80213ec:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80213ee:	480b      	ldreq	r0, [pc, #44]	; (802141c <HAL_RCC_GetSysClockFreq+0x58>)
 80213f0:	fba1 0100 	umull	r0, r1, r1, r0
 80213f4:	f7de ff74 	bl	80002e0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80213f8:	4b06      	ldr	r3, [pc, #24]	; (8021414 <HAL_RCC_GetSysClockFreq+0x50>)
 80213fa:	685b      	ldr	r3, [r3, #4]
 80213fc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8021400:	3301      	adds	r3, #1
 8021402:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8021404:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8021408:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802140a:	4803      	ldr	r0, [pc, #12]	; (8021418 <HAL_RCC_GetSysClockFreq+0x54>)
 802140c:	e7fc      	b.n	8021408 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 802140e:	4803      	ldr	r0, [pc, #12]	; (802141c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8021410:	e7fa      	b.n	8021408 <HAL_RCC_GetSysClockFreq+0x44>
 8021412:	bf00      	nop
 8021414:	40023800 	.word	0x40023800
 8021418:	017d7840 	.word	0x017d7840
 802141c:	00f42400 	.word	0x00f42400

08021420 <HAL_RCC_ClockConfig>:
{
 8021420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021424:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8021426:	4604      	mov	r4, r0
 8021428:	b910      	cbnz	r0, 8021430 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 802142a:	2001      	movs	r0, #1
}
 802142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8021430:	4a46      	ldr	r2, [pc, #280]	; (802154c <HAL_RCC_ClockConfig+0x12c>)
 8021432:	6813      	ldr	r3, [r2, #0]
 8021434:	f003 030f 	and.w	r3, r3, #15
 8021438:	428b      	cmp	r3, r1
 802143a:	d328      	bcc.n	802148e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802143c:	6822      	ldr	r2, [r4, #0]
 802143e:	0797      	lsls	r7, r2, #30
 8021440:	d430      	bmi.n	80214a4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021442:	07d0      	lsls	r0, r2, #31
 8021444:	d444      	bmi.n	80214d0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8021446:	4a41      	ldr	r2, [pc, #260]	; (802154c <HAL_RCC_ClockConfig+0x12c>)
 8021448:	6813      	ldr	r3, [r2, #0]
 802144a:	f003 030f 	and.w	r3, r3, #15
 802144e:	42ab      	cmp	r3, r5
 8021450:	d867      	bhi.n	8021522 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021452:	6822      	ldr	r2, [r4, #0]
 8021454:	0751      	lsls	r1, r2, #29
 8021456:	d470      	bmi.n	802153a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021458:	0713      	lsls	r3, r2, #28
 802145a:	d507      	bpl.n	802146c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 802145c:	4a3c      	ldr	r2, [pc, #240]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
 802145e:	6921      	ldr	r1, [r4, #16]
 8021460:	6893      	ldr	r3, [r2, #8]
 8021462:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8021466:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 802146a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 802146c:	f7ff ffaa 	bl	80213c4 <HAL_RCC_GetSysClockFreq>
 8021470:	4b37      	ldr	r3, [pc, #220]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
 8021472:	4a38      	ldr	r2, [pc, #224]	; (8021554 <HAL_RCC_ClockConfig+0x134>)
 8021474:	689b      	ldr	r3, [r3, #8]
 8021476:	f3c3 1303 	ubfx	r3, r3, #4, #4
 802147a:	5cd3      	ldrb	r3, [r2, r3]
 802147c:	40d8      	lsrs	r0, r3
 802147e:	4b36      	ldr	r3, [pc, #216]	; (8021558 <HAL_RCC_ClockConfig+0x138>)
 8021480:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8021482:	4b36      	ldr	r3, [pc, #216]	; (802155c <HAL_RCC_ClockConfig+0x13c>)
 8021484:	6818      	ldr	r0, [r3, #0]
 8021486:	f7e0 f847 	bl	8001518 <HAL_InitTick>
  return HAL_OK;
 802148a:	2000      	movs	r0, #0
 802148c:	e7ce      	b.n	802142c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 802148e:	6813      	ldr	r3, [r2, #0]
 8021490:	f023 030f 	bic.w	r3, r3, #15
 8021494:	430b      	orrs	r3, r1
 8021496:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021498:	6813      	ldr	r3, [r2, #0]
 802149a:	f003 030f 	and.w	r3, r3, #15
 802149e:	428b      	cmp	r3, r1
 80214a0:	d1c3      	bne.n	802142a <HAL_RCC_ClockConfig+0xa>
 80214a2:	e7cb      	b.n	802143c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80214a4:	f012 0f04 	tst.w	r2, #4
 80214a8:	4b29      	ldr	r3, [pc, #164]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
 80214aa:	d003      	beq.n	80214b4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80214ac:	6899      	ldr	r1, [r3, #8]
 80214ae:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80214b2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80214b4:	0716      	lsls	r6, r2, #28
 80214b6:	d503      	bpl.n	80214c0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80214b8:	6899      	ldr	r1, [r3, #8]
 80214ba:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80214be:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80214c0:	4923      	ldr	r1, [pc, #140]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
 80214c2:	68a0      	ldr	r0, [r4, #8]
 80214c4:	688b      	ldr	r3, [r1, #8]
 80214c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80214ca:	4303      	orrs	r3, r0
 80214cc:	608b      	str	r3, [r1, #8]
 80214ce:	e7b8      	b.n	8021442 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80214d0:	6861      	ldr	r1, [r4, #4]
 80214d2:	4b1f      	ldr	r3, [pc, #124]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
 80214d4:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80214d6:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80214d8:	d11b      	bne.n	8021512 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80214da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80214de:	d0a4      	beq.n	802142a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80214e0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80214e2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80214e6:	4f1a      	ldr	r7, [pc, #104]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80214e8:	f022 0203 	bic.w	r2, r2, #3
 80214ec:	430a      	orrs	r2, r1
 80214ee:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80214f0:	f7fe ff16 	bl	8020320 <HAL_GetTick>
 80214f4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80214f6:	68bb      	ldr	r3, [r7, #8]
 80214f8:	6862      	ldr	r2, [r4, #4]
 80214fa:	f003 030c 	and.w	r3, r3, #12
 80214fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8021502:	d0a0      	beq.n	8021446 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021504:	f7fe ff0c 	bl	8020320 <HAL_GetTick>
 8021508:	1b80      	subs	r0, r0, r6
 802150a:	4540      	cmp	r0, r8
 802150c:	d9f3      	bls.n	80214f6 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 802150e:	2003      	movs	r0, #3
 8021510:	e78c      	b.n	802142c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021512:	2902      	cmp	r1, #2
 8021514:	d102      	bne.n	802151c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021516:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 802151a:	e7e0      	b.n	80214de <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802151c:	f012 0f02 	tst.w	r2, #2
 8021520:	e7dd      	b.n	80214de <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021522:	6813      	ldr	r3, [r2, #0]
 8021524:	f023 030f 	bic.w	r3, r3, #15
 8021528:	432b      	orrs	r3, r5
 802152a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802152c:	6813      	ldr	r3, [r2, #0]
 802152e:	f003 030f 	and.w	r3, r3, #15
 8021532:	42ab      	cmp	r3, r5
 8021534:	f47f af79 	bne.w	802142a <HAL_RCC_ClockConfig+0xa>
 8021538:	e78b      	b.n	8021452 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802153a:	4905      	ldr	r1, [pc, #20]	; (8021550 <HAL_RCC_ClockConfig+0x130>)
 802153c:	68e0      	ldr	r0, [r4, #12]
 802153e:	688b      	ldr	r3, [r1, #8]
 8021540:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8021544:	4303      	orrs	r3, r0
 8021546:	608b      	str	r3, [r1, #8]
 8021548:	e786      	b.n	8021458 <HAL_RCC_ClockConfig+0x38>
 802154a:	bf00      	nop
 802154c:	40023c00 	.word	0x40023c00
 8021550:	40023800 	.word	0x40023800
 8021554:	08025ab0 	.word	0x08025ab0
 8021558:	20000000 	.word	0x20000000
 802155c:	20000074 	.word	0x20000074

08021560 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8021560:	4b04      	ldr	r3, [pc, #16]	; (8021574 <HAL_RCC_GetPCLK2Freq+0x14>)
 8021562:	4a05      	ldr	r2, [pc, #20]	; (8021578 <HAL_RCC_GetPCLK2Freq+0x18>)
 8021564:	689b      	ldr	r3, [r3, #8]
 8021566:	f3c3 3342 	ubfx	r3, r3, #13, #3
 802156a:	5cd3      	ldrb	r3, [r2, r3]
 802156c:	4a03      	ldr	r2, [pc, #12]	; (802157c <HAL_RCC_GetPCLK2Freq+0x1c>)
 802156e:	6810      	ldr	r0, [r2, #0]
}
 8021570:	40d8      	lsrs	r0, r3
 8021572:	4770      	bx	lr
 8021574:	40023800 	.word	0x40023800
 8021578:	08025ac0 	.word	0x08025ac0
 802157c:	20000000 	.word	0x20000000

08021580 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8021580:	230f      	movs	r3, #15
 8021582:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8021584:	4b0b      	ldr	r3, [pc, #44]	; (80215b4 <HAL_RCC_GetClockConfig+0x34>)
 8021586:	689a      	ldr	r2, [r3, #8]
 8021588:	f002 0203 	and.w	r2, r2, #3
 802158c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 802158e:	689a      	ldr	r2, [r3, #8]
 8021590:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8021594:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8021596:	689a      	ldr	r2, [r3, #8]
 8021598:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 802159c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 802159e:	689b      	ldr	r3, [r3, #8]
 80215a0:	08db      	lsrs	r3, r3, #3
 80215a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80215a6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80215a8:	4b03      	ldr	r3, [pc, #12]	; (80215b8 <HAL_RCC_GetClockConfig+0x38>)
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	f003 030f 	and.w	r3, r3, #15
 80215b0:	600b      	str	r3, [r1, #0]
}
 80215b2:	4770      	bx	lr
 80215b4:	40023800 	.word	0x40023800
 80215b8:	40023c00 	.word	0x40023c00

080215bc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80215bc:	4770      	bx	lr
	...

080215c0 <HAL_RCC_NMI_IRQHandler>:
{
 80215c0:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80215c2:	4b05      	ldr	r3, [pc, #20]	; (80215d8 <HAL_RCC_NMI_IRQHandler+0x18>)
 80215c4:	68db      	ldr	r3, [r3, #12]
 80215c6:	061b      	lsls	r3, r3, #24
 80215c8:	d504      	bpl.n	80215d4 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 80215ca:	f7ff fff7 	bl	80215bc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80215ce:	4b03      	ldr	r3, [pc, #12]	; (80215dc <HAL_RCC_NMI_IRQHandler+0x1c>)
 80215d0:	2280      	movs	r2, #128	; 0x80
 80215d2:	701a      	strb	r2, [r3, #0]
}
 80215d4:	bd08      	pop	{r3, pc}
 80215d6:	bf00      	nop
 80215d8:	40023800 	.word	0x40023800
 80215dc:	4002380e 	.word	0x4002380e

080215e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80215e0:	6803      	ldr	r3, [r0, #0]
{
 80215e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80215e6:	f013 0601 	ands.w	r6, r3, #1
{
 80215ea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80215ec:	d00b      	beq.n	8021606 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80215ee:	4aaa      	ldr	r2, [pc, #680]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80215f0:	6891      	ldr	r1, [r2, #8]
 80215f2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80215f6:	6091      	str	r1, [r2, #8]
 80215f8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80215fa:	6891      	ldr	r1, [r2, #8]
 80215fc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80215fe:	fab6 f686 	clz	r6, r6
 8021602:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8021604:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8021606:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 802160a:	d012      	beq.n	8021632 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802160c:	49a2      	ldr	r1, [pc, #648]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802160e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8021610:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8021614:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8021618:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 802161c:	bf08      	it	eq
 802161e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8021620:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8021624:	bf16      	itet	ne
 8021626:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 802162a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 802162c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802162e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8021632:	02df      	lsls	r7, r3, #11
 8021634:	d510      	bpl.n	8021658 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8021636:	4898      	ldr	r0, [pc, #608]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021638:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802163a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 802163e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8021642:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8021646:	ea42 0201 	orr.w	r2, r2, r1
 802164a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 802164e:	f000 8184 	beq.w	802195a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8021652:	2900      	cmp	r1, #0
 8021654:	bf08      	it	eq
 8021656:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8021658:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 802165c:	bf18      	it	ne
 802165e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8021660:	0698      	lsls	r0, r3, #26
 8021662:	d531      	bpl.n	80216c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8021664:	4b8c      	ldr	r3, [pc, #560]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8021666:	4f8d      	ldr	r7, [pc, #564]	; (802189c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8021668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802166a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802166e:	641a      	str	r2, [r3, #64]	; 0x40
 8021670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021676:	9301      	str	r3, [sp, #4]
 8021678:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 802167a:	683b      	ldr	r3, [r7, #0]
 802167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021680:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021682:	f7fe fe4d 	bl	8020320 <HAL_GetTick>
 8021686:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8021688:	683b      	ldr	r3, [r7, #0]
 802168a:	05d9      	lsls	r1, r3, #23
 802168c:	f140 8167 	bpl.w	802195e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8021690:	4f81      	ldr	r7, [pc, #516]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021692:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8021694:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8021698:	f040 816c 	bne.w	8021974 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802169c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802169e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80216a2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80216a6:	4a7c      	ldr	r2, [pc, #496]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80216a8:	f040 818a 	bne.w	80219c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80216ac:	6891      	ldr	r1, [r2, #8]
 80216ae:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80216b2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80216b6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80216ba:	4301      	orrs	r1, r0
 80216bc:	6091      	str	r1, [r2, #8]
 80216be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80216c2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80216c4:	430b      	orrs	r3, r1
 80216c6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80216c8:	6823      	ldr	r3, [r4, #0]
 80216ca:	06d8      	lsls	r0, r3, #27
 80216cc:	d50c      	bpl.n	80216e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80216ce:	4a72      	ldr	r2, [pc, #456]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80216d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80216d4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80216d8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80216dc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80216e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80216e2:	4301      	orrs	r1, r0
 80216e4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80216e8:	0459      	lsls	r1, r3, #17
 80216ea:	d508      	bpl.n	80216fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80216ec:	496a      	ldr	r1, [pc, #424]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80216ee:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80216f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80216f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80216f8:	4302      	orrs	r2, r0
 80216fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80216fe:	041a      	lsls	r2, r3, #16
 8021700:	d508      	bpl.n	8021714 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8021702:	4965      	ldr	r1, [pc, #404]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021704:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8021706:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802170a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 802170e:	4302      	orrs	r2, r0
 8021710:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8021714:	03df      	lsls	r7, r3, #15
 8021716:	d508      	bpl.n	802172a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8021718:	495f      	ldr	r1, [pc, #380]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802171a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 802171c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021720:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8021724:	4302      	orrs	r2, r0
 8021726:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802172a:	0398      	lsls	r0, r3, #14
 802172c:	d508      	bpl.n	8021740 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802172e:	495a      	ldr	r1, [pc, #360]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021730:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8021732:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021736:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 802173a:	4302      	orrs	r2, r0
 802173c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8021740:	0659      	lsls	r1, r3, #25
 8021742:	d508      	bpl.n	8021756 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8021744:	4954      	ldr	r1, [pc, #336]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021746:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8021748:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802174c:	f022 0203 	bic.w	r2, r2, #3
 8021750:	4302      	orrs	r2, r0
 8021752:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8021756:	061a      	lsls	r2, r3, #24
 8021758:	d508      	bpl.n	802176c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 802175a:	494f      	ldr	r1, [pc, #316]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802175c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802175e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021762:	f022 020c 	bic.w	r2, r2, #12
 8021766:	4302      	orrs	r2, r0
 8021768:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 802176c:	05df      	lsls	r7, r3, #23
 802176e:	d508      	bpl.n	8021782 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8021770:	4949      	ldr	r1, [pc, #292]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021772:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8021774:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021778:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 802177c:	4302      	orrs	r2, r0
 802177e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8021782:	0598      	lsls	r0, r3, #22
 8021784:	d508      	bpl.n	8021798 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8021786:	4944      	ldr	r1, [pc, #272]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021788:	6d20      	ldr	r0, [r4, #80]	; 0x50
 802178a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802178e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8021792:	4302      	orrs	r2, r0
 8021794:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8021798:	0559      	lsls	r1, r3, #21
 802179a:	d508      	bpl.n	80217ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 802179c:	493e      	ldr	r1, [pc, #248]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802179e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80217a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80217a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80217a8:	4302      	orrs	r2, r0
 80217aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80217ae:	051a      	lsls	r2, r3, #20
 80217b0:	d508      	bpl.n	80217c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80217b2:	4939      	ldr	r1, [pc, #228]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80217b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80217b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80217ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80217be:	4302      	orrs	r2, r0
 80217c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80217c4:	04df      	lsls	r7, r3, #19
 80217c6:	d508      	bpl.n	80217da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80217c8:	4933      	ldr	r1, [pc, #204]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80217ca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80217cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80217d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80217d4:	4302      	orrs	r2, r0
 80217d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80217da:	0498      	lsls	r0, r3, #18
 80217dc:	d508      	bpl.n	80217f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80217de:	492e      	ldr	r1, [pc, #184]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80217e0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80217e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80217e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80217ea:	4302      	orrs	r2, r0
 80217ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80217f0:	0259      	lsls	r1, r3, #9
 80217f2:	d508      	bpl.n	8021806 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80217f4:	4928      	ldr	r1, [pc, #160]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80217f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80217f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80217fc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8021800:	4302      	orrs	r2, r0
 8021802:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8021806:	029a      	lsls	r2, r3, #10
 8021808:	d50c      	bpl.n	8021824 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 802180a:	4823      	ldr	r0, [pc, #140]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802180c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 802180e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8021812:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8021816:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 802181a:	bf08      	it	eq
 802181c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 802181e:	430a      	orrs	r2, r1
 8021820:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8021824:	f013 0f08 	tst.w	r3, #8
 8021828:	bf18      	it	ne
 802182a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802182c:	035f      	lsls	r7, r3, #13
 802182e:	d508      	bpl.n	8021842 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8021830:	4919      	ldr	r1, [pc, #100]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021832:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8021834:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021838:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802183c:	4302      	orrs	r2, r0
 802183e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8021842:	0218      	lsls	r0, r3, #8
 8021844:	d509      	bpl.n	802185a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8021846:	4914      	ldr	r1, [pc, #80]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8021848:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 802184c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8021850:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8021854:	4302      	orrs	r2, r0
 8021856:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802185a:	2e01      	cmp	r6, #1
 802185c:	f000 80b4 	beq.w	80219c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8021860:	0199      	lsls	r1, r3, #6
 8021862:	f100 80b1 	bmi.w	80219c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8021866:	2d01      	cmp	r5, #1
 8021868:	d175      	bne.n	8021956 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 802186a:	4d0b      	ldr	r5, [pc, #44]	; (8021898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802186c:	682b      	ldr	r3, [r5, #0]
 802186e:	462e      	mov	r6, r5
 8021870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021874:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021876:	f7fe fd53 	bl	8020320 <HAL_GetTick>
 802187a:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 802187c:	682b      	ldr	r3, [r5, #0]
 802187e:	009b      	lsls	r3, r3, #2
 8021880:	f100 8126 	bmi.w	8021ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8021884:	6822      	ldr	r2, [r4, #0]
 8021886:	0315      	lsls	r5, r2, #12
 8021888:	d501      	bpl.n	802188e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 802188a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802188c:	b143      	cbz	r3, 80218a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 802188e:	02d0      	lsls	r0, r2, #11
 8021890:	d521      	bpl.n	80218d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8021892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021894:	b9fb      	cbnz	r3, 80218d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8021896:	e003      	b.n	80218a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8021898:	40023800 	.word	0x40023800
 802189c:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80218a0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80218a4:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80218a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80218ac:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80218b0:	430b      	orrs	r3, r1
 80218b2:	6961      	ldr	r1, [r4, #20]
 80218b4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80218b8:	69a1      	ldr	r1, [r4, #24]
 80218ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80218be:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80218c2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80218c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80218c8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80218cc:	3901      	subs	r1, #1
 80218ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80218d2:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80218d6:	0291      	lsls	r1, r2, #10
 80218d8:	d515      	bpl.n	8021906 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80218da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80218dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80218e0:	d111      	bne.n	8021906 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80218e2:	4982      	ldr	r1, [pc, #520]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80218e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80218e8:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80218ec:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80218f0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80218f4:	4303      	orrs	r3, r0
 80218f6:	6960      	ldr	r0, [r4, #20]
 80218f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80218fc:	6a20      	ldr	r0, [r4, #32]
 80218fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8021906:	0712      	lsls	r2, r2, #28
 8021908:	d519      	bpl.n	802193e <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802190a:	4a78      	ldr	r2, [pc, #480]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 802190c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8021910:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8021914:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8021918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802191c:	430b      	orrs	r3, r1
 802191e:	6961      	ldr	r1, [r4, #20]
 8021920:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8021924:	69e1      	ldr	r1, [r4, #28]
 8021926:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 802192a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 802192e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8021932:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8021934:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8021938:	430b      	orrs	r3, r1
 802193a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 802193e:	4c6b      	ldr	r4, [pc, #428]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021940:	6823      	ldr	r3, [r4, #0]
 8021942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021946:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8021948:	f7fe fcea 	bl	8020320 <HAL_GetTick>
 802194c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802194e:	6823      	ldr	r3, [r4, #0]
 8021950:	009b      	lsls	r3, r3, #2
 8021952:	f140 80c4 	bpl.w	8021ade <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8021956:	2000      	movs	r0, #0
 8021958:	e009      	b.n	802196e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 802195a:	2601      	movs	r6, #1
 802195c:	e67c      	b.n	8021658 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802195e:	f7fe fcdf 	bl	8020320 <HAL_GetTick>
 8021962:	eba0 0008 	sub.w	r0, r0, r8
 8021966:	2864      	cmp	r0, #100	; 0x64
 8021968:	f67f ae8e 	bls.w	8021688 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 802196c:	2003      	movs	r0, #3
}
 802196e:	b003      	add	sp, #12
 8021970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8021974:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8021976:	f402 7240 	and.w	r2, r2, #768	; 0x300
 802197a:	4293      	cmp	r3, r2
 802197c:	f43f ae8e 	beq.w	802169c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8021980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8021982:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8021984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8021988:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 802198c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 802198e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021990:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8021994:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8021996:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8021998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802199a:	07da      	lsls	r2, r3, #31
 802199c:	f57f ae7e 	bpl.w	802169c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80219a0:	f7fe fcbe 	bl	8020320 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80219a4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80219a8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80219aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80219ac:	079b      	lsls	r3, r3, #30
 80219ae:	f53f ae75 	bmi.w	802169c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80219b2:	f7fe fcb5 	bl	8020320 <HAL_GetTick>
 80219b6:	eba0 0008 	sub.w	r0, r0, r8
 80219ba:	4548      	cmp	r0, r9
 80219bc:	d9f5      	bls.n	80219aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80219be:	e7d5      	b.n	802196c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80219c0:	6891      	ldr	r1, [r2, #8]
 80219c2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80219c6:	e679      	b.n	80216bc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80219c8:	4e48      	ldr	r6, [pc, #288]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80219ca:	6833      	ldr	r3, [r6, #0]
 80219cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80219d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80219d2:	f7fe fca5 	bl	8020320 <HAL_GetTick>
 80219d6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80219d8:	6833      	ldr	r3, [r6, #0]
 80219da:	011a      	lsls	r2, r3, #4
 80219dc:	d472      	bmi.n	8021ac4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80219de:	6822      	ldr	r2, [r4, #0]
 80219e0:	07d3      	lsls	r3, r2, #31
 80219e2:	d512      	bpl.n	8021a0a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80219e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80219e6:	b983      	cbnz	r3, 8021a0a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80219e8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80219ec:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80219f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80219f4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80219f8:	430b      	orrs	r3, r1
 80219fa:	6861      	ldr	r1, [r4, #4]
 80219fc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8021a00:	68a1      	ldr	r1, [r4, #8]
 8021a02:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8021a06:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8021a0a:	0317      	lsls	r7, r2, #12
 8021a0c:	d503      	bpl.n	8021a16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8021a0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021a14:	d005      	beq.n	8021a22 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8021a16:	02d6      	lsls	r6, r2, #11
 8021a18:	d51e      	bpl.n	8021a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8021a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021a20:	d11a      	bne.n	8021a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8021a22:	4932      	ldr	r1, [pc, #200]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021a24:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8021a28:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8021a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8021a30:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8021a34:	4303      	orrs	r3, r0
 8021a36:	6860      	ldr	r0, [r4, #4]
 8021a38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8021a3c:	68e0      	ldr	r0, [r4, #12]
 8021a3e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8021a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8021a46:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8021a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021a4c:	f020 001f 	bic.w	r0, r0, #31
 8021a50:	3b01      	subs	r3, #1
 8021a52:	4303      	orrs	r3, r0
 8021a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8021a58:	01d0      	lsls	r0, r2, #7
 8021a5a:	d511      	bpl.n	8021a80 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8021a5c:	4923      	ldr	r1, [pc, #140]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021a5e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8021a62:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8021a66:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8021a6a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8021a6e:	4303      	orrs	r3, r0
 8021a70:	6860      	ldr	r0, [r4, #4]
 8021a72:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8021a76:	6920      	ldr	r0, [r4, #16]
 8021a78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8021a80:	0191      	lsls	r1, r2, #6
 8021a82:	d50d      	bpl.n	8021aa0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8021a84:	6923      	ldr	r3, [r4, #16]
 8021a86:	6862      	ldr	r2, [r4, #4]
 8021a88:	041b      	lsls	r3, r3, #16
 8021a8a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8021a8e:	68e2      	ldr	r2, [r4, #12]
 8021a90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021a94:	68a2      	ldr	r2, [r4, #8]
 8021a96:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8021a9a:	4a14      	ldr	r2, [pc, #80]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021a9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8021aa0:	4e12      	ldr	r6, [pc, #72]	; (8021aec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8021aa2:	6833      	ldr	r3, [r6, #0]
 8021aa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021aa8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8021aaa:	f7fe fc39 	bl	8020320 <HAL_GetTick>
 8021aae:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8021ab0:	6833      	ldr	r3, [r6, #0]
 8021ab2:	011a      	lsls	r2, r3, #4
 8021ab4:	f53f aed7 	bmi.w	8021866 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8021ab8:	f7fe fc32 	bl	8020320 <HAL_GetTick>
 8021abc:	1bc0      	subs	r0, r0, r7
 8021abe:	2864      	cmp	r0, #100	; 0x64
 8021ac0:	d9f6      	bls.n	8021ab0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8021ac2:	e753      	b.n	802196c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8021ac4:	f7fe fc2c 	bl	8020320 <HAL_GetTick>
 8021ac8:	1bc0      	subs	r0, r0, r7
 8021aca:	2864      	cmp	r0, #100	; 0x64
 8021acc:	d984      	bls.n	80219d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8021ace:	e74d      	b.n	802196c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8021ad0:	f7fe fc26 	bl	8020320 <HAL_GetTick>
 8021ad4:	1bc0      	subs	r0, r0, r7
 8021ad6:	2864      	cmp	r0, #100	; 0x64
 8021ad8:	f67f aed0 	bls.w	802187c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8021adc:	e746      	b.n	802196c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8021ade:	f7fe fc1f 	bl	8020320 <HAL_GetTick>
 8021ae2:	1b40      	subs	r0, r0, r5
 8021ae4:	2864      	cmp	r0, #100	; 0x64
 8021ae6:	f67f af32 	bls.w	802194e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8021aea:	e73f      	b.n	802196c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8021aec:	40023800 	.word	0x40023800

08021af0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8021af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021af2:	4605      	mov	r5, r0
 8021af4:	b089      	sub	sp, #36	; 0x24
 8021af6:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8021af8:	f7fe fc12 	bl	8020320 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8021afc:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8021afe:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8021b00:	2108      	movs	r1, #8
 8021b02:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8021b04:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8021b08:	f001 f92d 	bl	8022d66 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8021b0c:	4604      	mov	r4, r0
 8021b0e:	b9d8      	cbnz	r0, 8021b48 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8021b10:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8021b12:	6828      	ldr	r0, [r5, #0]
 8021b14:	0409      	lsls	r1, r1, #16
 8021b16:	f001 fa33 	bl	8022f80 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8021b1a:	4604      	mov	r4, r0
 8021b1c:	b9a0      	cbnz	r0, 8021b48 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8021b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8021b22:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8021b24:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8021b26:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021b28:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8021b2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8021b2e:	2302      	movs	r3, #2
 8021b30:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8021b34:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021b36:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8021b38:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021b3a:	f001 f901 	bl	8022d40 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8021b3e:	6828      	ldr	r0, [r5, #0]
 8021b40:	f001 fa67 	bl	8023012 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8021b44:	4604      	mov	r4, r0
 8021b46:	b190      	cbz	r0, 8021b6e <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8021b48:	4620      	mov	r0, r4
 8021b4a:	b009      	add	sp, #36	; 0x24
 8021b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8021b4e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8021b50:	0293      	lsls	r3, r2, #10
 8021b52:	d512      	bpl.n	8021b7a <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8021b54:	f001 f8ca 	bl	8022cec <SDMMC_ReadFIFO>
 8021b58:	ab08      	add	r3, sp, #32
 8021b5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 8021b5e:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8021b60:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8021b64:	f7fe fbdc 	bl	8020320 <HAL_GetTick>
 8021b68:	1bc0      	subs	r0, r0, r7
 8021b6a:	3001      	adds	r0, #1
 8021b6c:	d023      	beq.n	8021bb6 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8021b6e:	6828      	ldr	r0, [r5, #0]
 8021b70:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8021b72:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8021b76:	d0ea      	beq.n	8021b4e <SD_FindSCR+0x5e>
 8021b78:	e002      	b.n	8021b80 <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8021b7a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8021b7c:	0491      	lsls	r1, r2, #18
 8021b7e:	d4f1      	bmi.n	8021b64 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8021b80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8021b82:	0712      	lsls	r2, r2, #28
 8021b84:	d502      	bpl.n	8021b8c <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8021b86:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8021b88:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8021b8a:	e7dd      	b.n	8021b48 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8021b8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8021b8e:	0793      	lsls	r3, r2, #30
 8021b90:	d501      	bpl.n	8021b96 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8021b92:	2402      	movs	r4, #2
 8021b94:	e7f8      	b.n	8021b88 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8021b96:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8021b98:	f014 0420 	ands.w	r4, r4, #32
 8021b9c:	d001      	beq.n	8021ba2 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8021b9e:	2420      	movs	r4, #32
 8021ba0:	e7f2      	b.n	8021b88 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8021ba2:	9b01      	ldr	r3, [sp, #4]
 8021ba4:	f240 523a 	movw	r2, #1338	; 0x53a
 8021ba8:	ba1b      	rev	r3, r3
 8021baa:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8021bac:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8021bae:	9b00      	ldr	r3, [sp, #0]
 8021bb0:	ba1b      	rev	r3, r3
 8021bb2:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8021bb4:	e7c8      	b.n	8021b48 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8021bb6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8021bba:	e7c5      	b.n	8021b48 <SD_FindSCR+0x58>

08021bbc <HAL_SD_ReadBlocks>:
{
 8021bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc0:	460d      	mov	r5, r1
 8021bc2:	b087      	sub	sp, #28
 8021bc4:	4604      	mov	r4, r0
 8021bc6:	4616      	mov	r6, r2
 8021bc8:	469a      	mov	sl, r3
  uint32_t tickstart = HAL_GetTick();
 8021bca:	f7fe fba9 	bl	8020320 <HAL_GetTick>
 8021bce:	4680      	mov	r8, r0
  if(NULL == pData)
 8021bd0:	b92d      	cbnz	r5, 8021bde <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8021bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8021bd8:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8021bda:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8021bdc:	e010      	b.n	8021c00 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8021bde:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8021be2:	2b01      	cmp	r3, #1
 8021be4:	b2df      	uxtb	r7, r3
 8021be6:	f040 80df 	bne.w	8021da8 <HAL_SD_ReadBlocks+0x1ec>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8021bea:	eb06 030a 	add.w	r3, r6, sl
 8021bee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8021bf0:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8021bf2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8021bf4:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8021bf6:	d907      	bls.n	8021c08 <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8021bf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8021bfe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8021c00:	4638      	mov	r0, r7
 8021c02:	b007      	add	sp, #28
 8021c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8021c08:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8021c0a:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	f04f 0b01 	mov.w	fp, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8021c12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8021c16:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8021c1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8021c1c:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021c1e:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8021c20:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8021c22:	f04f 33ff 	mov.w	r3, #4294967295
 8021c26:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8021c28:	ea4f 234a 	mov.w	r3, sl, lsl #9
      add *= 512U;
 8021c2c:	bf18      	it	ne
 8021c2e:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8021c30:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8021c32:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8021c34:	e9cd 2b04 	strd	r2, fp, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8021c38:	e9cd 3902 	strd	r3, r9, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021c3c:	f001 f880 	bl	8022d40 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8021c40:	45da      	cmp	sl, fp
 8021c42:	d912      	bls.n	8021c6a <HAL_SD_ReadBlocks+0xae>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8021c44:	4631      	mov	r1, r6
 8021c46:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8021c48:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8021c4c:	f001 f8bb 	bl	8022dc6 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8021c50:	b190      	cbz	r0, 8021c78 <HAL_SD_ReadBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021c52:	6823      	ldr	r3, [r4, #0]
 8021c54:	4a56      	ldr	r2, [pc, #344]	; (8021db0 <HAL_SD_ReadBlocks+0x1f4>)
 8021c56:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8021c58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021c5a:	4318      	orrs	r0, r3
 8021c5c:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8021c5e:	2301      	movs	r3, #1
 8021c60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8021c64:	2300      	movs	r3, #0
 8021c66:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8021c68:	e7ca      	b.n	8021c00 <HAL_SD_ReadBlocks+0x44>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8021c6a:	4631      	mov	r1, r6
 8021c6c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8021c6e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8021c72:	f001 f890 	bl	8022d96 <SDMMC_CmdReadSingleBlock>
 8021c76:	e7eb      	b.n	8021c50 <HAL_SD_ReadBlocks+0x94>
    dataremaining = config.DataLength;
 8021c78:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8021c7a:	6820      	ldr	r0, [r4, #0]
 8021c7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8021c7e:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8021c82:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8021c84:	d017      	beq.n	8021cb6 <HAL_SD_ReadBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8021c86:	05db      	lsls	r3, r3, #23
 8021c88:	d509      	bpl.n	8021c9e <HAL_SD_ReadBlocks+0xe2>
 8021c8a:	f1ba 0f01 	cmp.w	sl, #1
 8021c8e:	d906      	bls.n	8021c9e <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8021c90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021c92:	2b03      	cmp	r3, #3
 8021c94:	d003      	beq.n	8021c9e <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8021c96:	f001 f8df 	bl	8022e58 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8021c9a:	2800      	cmp	r0, #0
 8021c9c:	d1d9      	bne.n	8021c52 <HAL_SD_ReadBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8021c9e:	6823      	ldr	r3, [r4, #0]
 8021ca0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021ca2:	f011 0108 	ands.w	r1, r1, #8
 8021ca6:	d036      	beq.n	8021d16 <HAL_SD_ReadBlocks+0x15a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021ca8:	4a41      	ldr	r2, [pc, #260]	; (8021db0 <HAL_SD_ReadBlocks+0x1f4>)
 8021caa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8021cac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021cae:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8021cb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8021cb4:	e7d3      	b.n	8021c5e <HAL_SD_ReadBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8021cb6:	041a      	lsls	r2, r3, #16
 8021cb8:	d518      	bpl.n	8021cec <HAL_SD_ReadBlocks+0x130>
 8021cba:	b1be      	cbz	r6, 8021cec <HAL_SD_ReadBlocks+0x130>
 8021cbc:	f105 0b04 	add.w	fp, r5, #4
 8021cc0:	f105 0924 	add.w	r9, r5, #36	; 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 8021cc4:	6820      	ldr	r0, [r4, #0]
 8021cc6:	f10b 0b04 	add.w	fp, fp, #4
 8021cca:	f001 f80f 	bl	8022cec <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8021cce:	f80b 0c08 	strb.w	r0, [fp, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8021cd2:	0a02      	lsrs	r2, r0, #8
 8021cd4:	f80b 2c07 	strb.w	r2, [fp, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8021cd8:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8021cda:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8021cdc:	f80b 2c06 	strb.w	r2, [fp, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8021ce0:	f80b 0c05 	strb.w	r0, [fp, #-5]
        for(count = 0U; count < 8U; count++)
 8021ce4:	45d9      	cmp	r9, fp
 8021ce6:	d1ed      	bne.n	8021cc4 <HAL_SD_ReadBlocks+0x108>
 8021ce8:	3520      	adds	r5, #32
 8021cea:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8021cec:	f7fe fb18 	bl	8020320 <HAL_GetTick>
 8021cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cf2:	eba0 0008 	sub.w	r0, r0, r8
 8021cf6:	4298      	cmp	r0, r3
 8021cf8:	d3bf      	bcc.n	8021c7a <HAL_SD_ReadBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021cfa:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8021cfc:	2703      	movs	r7, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021cfe:	4a2c      	ldr	r2, [pc, #176]	; (8021db0 <HAL_SD_ReadBlocks+0x1f4>)
 8021d00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8021d02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8021d08:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8021d0a:	2301      	movs	r3, #1
 8021d0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8021d10:	2300      	movs	r3, #0
 8021d12:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8021d14:	e774      	b.n	8021c00 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8021d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021d18:	f012 0202 	ands.w	r2, r2, #2
 8021d1c:	d00a      	beq.n	8021d34 <HAL_SD_ReadBlocks+0x178>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021d1e:	4a24      	ldr	r2, [pc, #144]	; (8021db0 <HAL_SD_ReadBlocks+0x1f4>)
 8021d20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8021d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d24:	f043 0302 	orr.w	r3, r3, #2
 8021d28:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8021d2a:	2301      	movs	r3, #1
 8021d2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8021d30:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8021d32:	e765      	b.n	8021c00 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8021d34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021d36:	0689      	lsls	r1, r1, #26
 8021d38:	d527      	bpl.n	8021d8a <HAL_SD_ReadBlocks+0x1ce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021d3a:	491d      	ldr	r1, [pc, #116]	; (8021db0 <HAL_SD_ReadBlocks+0x1f4>)
 8021d3c:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8021d3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d40:	f043 0320 	orr.w	r3, r3, #32
 8021d44:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8021d46:	2301      	movs	r3, #1
 8021d48:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8021d4c:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8021d4e:	e757      	b.n	8021c00 <HAL_SD_ReadBlocks+0x44>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8021d50:	f000 ffcc 	bl	8022cec <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8021d54:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8021d58:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 8021d5a:	3e04      	subs	r6, #4
 8021d5c:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8021d5e:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8021d62:	0c03      	lsrs	r3, r0, #16
 8021d64:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8021d68:	0e03      	lsrs	r3, r0, #24
 8021d6a:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8021d6e:	f7fe fad7 	bl	8020320 <HAL_GetTick>
 8021d72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021d74:	eba0 0008 	sub.w	r0, r0, r8
 8021d78:	4298      	cmp	r0, r3
 8021d7a:	d307      	bcc.n	8021d8c <HAL_SD_ReadBlocks+0x1d0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021d7c:	6823      	ldr	r3, [r4, #0]
 8021d7e:	4a0c      	ldr	r2, [pc, #48]	; (8021db0 <HAL_SD_ReadBlocks+0x1f4>)
 8021d80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8021d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8021d88:	e793      	b.n	8021cb2 <HAL_SD_ReadBlocks+0xf6>
 8021d8a:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8021d8c:	6820      	ldr	r0, [r4, #0]
 8021d8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8021d90:	029b      	lsls	r3, r3, #10
 8021d92:	d501      	bpl.n	8021d98 <HAL_SD_ReadBlocks+0x1dc>
 8021d94:	2e00      	cmp	r6, #0
 8021d96:	d1db      	bne.n	8021d50 <HAL_SD_ReadBlocks+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8021d98:	f240 533a 	movw	r3, #1338	; 0x53a
    return HAL_OK;
 8021d9c:	2700      	movs	r7, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8021d9e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8021da0:	2301      	movs	r3, #1
 8021da2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8021da6:	e72b      	b.n	8021c00 <HAL_SD_ReadBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8021da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8021dae:	e713      	b.n	8021bd8 <HAL_SD_ReadBlocks+0x1c>
 8021db0:	004005ff 	.word	0x004005ff

08021db4 <HAL_SD_WriteBlocks>:
{
 8021db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db8:	460d      	mov	r5, r1
 8021dba:	b089      	sub	sp, #36	; 0x24
 8021dbc:	4604      	mov	r4, r0
 8021dbe:	4692      	mov	sl, r2
 8021dc0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8021dc2:	f7fe faad 	bl	8020320 <HAL_GetTick>
 8021dc6:	4681      	mov	r9, r0
  if(NULL == pData)
 8021dc8:	b935      	cbnz	r5, 8021dd8 <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8021dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021dcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    return HAL_ERROR;
 8021dd0:	f04f 0801 	mov.w	r8, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8021dd4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8021dd6:	e011      	b.n	8021dfc <HAL_SD_WriteBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 8021dd8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8021ddc:	2b01      	cmp	r3, #1
 8021dde:	fa5f f883 	uxtb.w	r8, r3
 8021de2:	f040 80ac 	bne.w	8021f3e <HAL_SD_WriteBlocks+0x18a>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8021de6:	eb0a 0307 	add.w	r3, sl, r7
 8021dea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8021dec:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8021dee:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8021df0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8021df2:	d907      	bls.n	8021e04 <HAL_SD_WriteBlocks+0x50>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8021df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8021dfa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8021dfc:	4640      	mov	r0, r8
 8021dfe:	b009      	add	sp, #36	; 0x24
 8021e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8021e04:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8021e06:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8021e08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8021e0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8021e0e:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8021e10:	2190      	movs	r1, #144	; 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8021e12:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8021e14:	f04f 33ff 	mov.w	r3, #4294967295
 8021e18:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8021e1a:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8021e1e:	bf18      	it	ne
 8021e20:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8021e24:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8021e26:	2300      	movs	r3, #0
 8021e28:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8021e2c:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8021e2e:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021e30:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8021e32:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8021e34:	f000 ff84 	bl	8022d40 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8021e38:	2f01      	cmp	r7, #1
 8021e3a:	d912      	bls.n	8021e62 <HAL_SD_WriteBlocks+0xae>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8021e3c:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8021e3e:	4651      	mov	r1, sl
 8021e40:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8021e42:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8021e44:	f000 ffef 	bl	8022e26 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8021e48:	b190      	cbz	r0, 8021e70 <HAL_SD_WriteBlocks+0xbc>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021e4a:	6823      	ldr	r3, [r4, #0]
 8021e4c:	4a3e      	ldr	r2, [pc, #248]	; (8021f48 <HAL_SD_WriteBlocks+0x194>)
 8021e4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8021e50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021e52:	4318      	orrs	r0, r3
 8021e54:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8021e56:	2301      	movs	r3, #1
 8021e58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8021e5c:	2300      	movs	r3, #0
 8021e5e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8021e60:	e7cc      	b.n	8021dfc <HAL_SD_WriteBlocks+0x48>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8021e62:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8021e64:	4651      	mov	r1, sl
 8021e66:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8021e68:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8021e6a:	f000 ffc4 	bl	8022df6 <SDMMC_CmdWriteSingleBlock>
 8021e6e:	e7eb      	b.n	8021e48 <HAL_SD_WriteBlocks+0x94>
    dataremaining = config.DataLength;
 8021e70:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8021e72:	6820      	ldr	r0, [r4, #0]
 8021e74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8021e76:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8021e7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8021e7c:	d016      	beq.n	8021eac <HAL_SD_WriteBlocks+0xf8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8021e7e:	05db      	lsls	r3, r3, #23
 8021e80:	d508      	bpl.n	8021e94 <HAL_SD_WriteBlocks+0xe0>
 8021e82:	2f01      	cmp	r7, #1
 8021e84:	d906      	bls.n	8021e94 <HAL_SD_WriteBlocks+0xe0>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8021e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021e88:	2b03      	cmp	r3, #3
 8021e8a:	d003      	beq.n	8021e94 <HAL_SD_WriteBlocks+0xe0>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8021e8c:	f000 ffe4 	bl	8022e58 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8021e90:	2800      	cmp	r0, #0
 8021e92:	d1da      	bne.n	8021e4a <HAL_SD_WriteBlocks+0x96>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8021e94:	6823      	ldr	r3, [r4, #0]
 8021e96:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8021e98:	f010 0008 	ands.w	r0, r0, #8
 8021e9c:	d029      	beq.n	8021ef2 <HAL_SD_WriteBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021e9e:	4a2a      	ldr	r2, [pc, #168]	; (8021f48 <HAL_SD_WriteBlocks+0x194>)
 8021ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8021ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021ea4:	f043 0308 	orr.w	r3, r3, #8
 8021ea8:	63a3      	str	r3, [r4, #56]	; 0x38
 8021eaa:	e7d4      	b.n	8021e56 <HAL_SD_WriteBlocks+0xa2>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8021eac:	045a      	lsls	r2, r3, #17
 8021eae:	d50c      	bpl.n	8021eca <HAL_SD_WriteBlocks+0x116>
 8021eb0:	b15e      	cbz	r6, 8021eca <HAL_SD_WriteBlocks+0x116>
 8021eb2:	f105 0b20 	add.w	fp, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8021eb6:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8021eba:	a901      	add	r1, sp, #4
 8021ebc:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8021ebe:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8021ec0:	f000 ff17 	bl	8022cf2 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8021ec4:	45ab      	cmp	fp, r5
 8021ec6:	d1f6      	bne.n	8021eb6 <HAL_SD_WriteBlocks+0x102>
 8021ec8:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8021eca:	f7fe fa29 	bl	8020320 <HAL_GetTick>
 8021ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021ed0:	eba0 0009 	sub.w	r0, r0, r9
 8021ed4:	4298      	cmp	r0, r3
 8021ed6:	d3cc      	bcc.n	8021e72 <HAL_SD_WriteBlocks+0xbe>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021ed8:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8021eda:	f04f 0803 	mov.w	r8, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021ede:	4a1a      	ldr	r2, [pc, #104]	; (8021f48 <HAL_SD_WriteBlocks+0x194>)
 8021ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8021ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021ee4:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8021ee6:	2301      	movs	r3, #1
 8021ee8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8021eec:	2300      	movs	r3, #0
 8021eee:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8021ef0:	e784      	b.n	8021dfc <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8021ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8021ef4:	f011 0102 	ands.w	r1, r1, #2
 8021ef8:	d00a      	beq.n	8021f10 <HAL_SD_WriteBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021efa:	4a13      	ldr	r2, [pc, #76]	; (8021f48 <HAL_SD_WriteBlocks+0x194>)
 8021efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8021efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021f00:	f043 0302 	orr.w	r3, r3, #2
 8021f04:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8021f06:	2301      	movs	r3, #1
 8021f08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8021f0c:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8021f0e:	e775      	b.n	8021dfc <HAL_SD_WriteBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8021f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021f12:	f012 0210 	ands.w	r2, r2, #16
 8021f16:	d00a      	beq.n	8021f2e <HAL_SD_WriteBlocks+0x17a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8021f18:	4a0b      	ldr	r2, [pc, #44]	; (8021f48 <HAL_SD_WriteBlocks+0x194>)
 8021f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8021f1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021f1e:	f043 0310 	orr.w	r3, r3, #16
 8021f22:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8021f24:	2301      	movs	r3, #1
 8021f26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8021f2a:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8021f2c:	e766      	b.n	8021dfc <HAL_SD_WriteBlocks+0x48>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8021f2e:	f240 513a 	movw	r1, #1338	; 0x53a
    return HAL_OK;
 8021f32:	4690      	mov	r8, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8021f34:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8021f36:	2301      	movs	r3, #1
 8021f38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8021f3c:	e75e      	b.n	8021dfc <HAL_SD_WriteBlocks+0x48>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8021f3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8021f44:	e744      	b.n	8021dd0 <HAL_SD_WriteBlocks+0x1c>
 8021f46:	bf00      	nop
 8021f48:	004005ff 	.word	0x004005ff

08021f4c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8021f4c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8021f4e:	0f9a      	lsrs	r2, r3, #30
 8021f50:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8021f52:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8021f56:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8021f58:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8021f5c:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8021f5e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8021f62:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8021f64:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8021f68:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8021f6a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8021f6c:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8021f6e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8021f70:	0d1a      	lsrs	r2, r3, #20
 8021f72:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8021f74:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8021f78:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8021f7a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8021f7e:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8021f80:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8021f84:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8021f86:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8021f8a:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8021f8c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8021f90:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8021f92:	2200      	movs	r2, #0
 8021f94:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8021f96:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8021f98:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8021f9a:	2a00      	cmp	r2, #0
 8021f9c:	d16b      	bne.n	8022076 <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8021f9e:	f640 74fc 	movw	r4, #4092	; 0xffc
 8021fa2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8021fa4:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8021fa8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8021fac:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8021fae:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8021fb2:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8021fb4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8021fb8:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8021fba:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8021fbe:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8021fc0:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8021fc4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8021fc8:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8021fca:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8021fcc:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8021fce:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8021fd0:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8021fd2:	f002 0207 	and.w	r2, r2, #7
 8021fd6:	3202      	adds	r2, #2
 8021fd8:	4093      	lsls	r3, r2
 8021fda:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8021fdc:	7a0a      	ldrb	r2, [r1, #8]
 8021fde:	f002 040f 	and.w	r4, r2, #15
 8021fe2:	2201      	movs	r2, #1
 8021fe4:	40a2      	lsls	r2, r4
 8021fe6:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8021fe8:	0a52      	lsrs	r2, r2, #9
 8021fea:	4353      	muls	r3, r2
 8021fec:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8021fee:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8021ff2:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8021ff4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8021ff6:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8021ffa:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8021ffc:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8022000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8022004:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8022006:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8022008:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 802200a:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 802200c:	0fda      	lsrs	r2, r3, #31
 802200e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8022010:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8022014:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8022016:	f3c3 6282 	ubfx	r2, r3, #26, #3
 802201a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 802201c:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8022020:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8022022:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8022026:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 802202a:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 802202e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8022032:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8022036:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 802203a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 802203e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8022042:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8022046:	f3c3 3240 	ubfx	r2, r3, #13, #1
 802204a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 802204e:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8022052:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8022056:	f3c3 2281 	ubfx	r2, r3, #10, #2
 802205a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 802205e:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8022062:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8022066:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 802206a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 802206e:	2301      	movs	r3, #1
 8022070:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8022074:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8022076:	2a01      	cmp	r2, #1
 8022078:	d10f      	bne.n	802209a <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 802207a:	041b      	lsls	r3, r3, #16
 802207c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8022080:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8022084:	4313      	orrs	r3, r2
 8022086:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8022088:	690b      	ldr	r3, [r1, #16]
 802208a:	3301      	adds	r3, #1
 802208c:	029b      	lsls	r3, r3, #10
 802208e:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8022090:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8022092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022096:	6583      	str	r3, [r0, #88]	; 0x58
 8022098:	e7ab      	b.n	8021ff2 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802209a:	6803      	ldr	r3, [r0, #0]
 802209c:	4a05      	ldr	r2, [pc, #20]	; (80220b4 <HAL_SD_GetCardCSD+0x168>)
 802209e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80220a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80220a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80220a6:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80220a8:	2301      	movs	r3, #1
 80220aa:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80220ae:	4618      	mov	r0, r3
 80220b0:	e7e0      	b.n	8022074 <HAL_SD_GetCardCSD+0x128>
 80220b2:	bf00      	nop
 80220b4:	004005ff 	.word	0x004005ff

080220b8 <HAL_SD_InitCard>:
{
 80220b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80220bc:	2300      	movs	r3, #0
{
 80220be:	b098      	sub	sp, #96	; 0x60
 80220c0:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80220c2:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80220c4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80220c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80220cc:	2376      	movs	r3, #118	; 0x76
 80220ce:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 80220d0:	ab0a      	add	r3, sp, #40	; 0x28
 80220d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80220d6:	ab07      	add	r3, sp, #28
 80220d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80220dc:	6820      	ldr	r0, [r4, #0]
 80220de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80220e0:	f000 fde8 	bl	8022cb4 <SDMMC_Init>
  if(status != HAL_OK)
 80220e4:	4605      	mov	r5, r0
 80220e6:	bb50      	cbnz	r0, 802213e <HAL_SD_InitCard+0x86>
  __HAL_SD_DISABLE(hsd);
 80220e8:	6820      	ldr	r0, [r4, #0]
 80220ea:	6843      	ldr	r3, [r0, #4]
 80220ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80220f0:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80220f2:	f000 fe03 	bl	8022cfc <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80220f6:	6820      	ldr	r0, [r4, #0]
 80220f8:	6843      	ldr	r3, [r0, #4]
 80220fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80220fe:	6043      	str	r3, [r0, #4]
  __IO uint32_t count = 0U;
 8022100:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8022102:	f000 fedb 	bl	8022ebc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8022106:	4605      	mov	r5, r0
 8022108:	b998      	cbnz	r0, 8022132 <HAL_SD_InitCard+0x7a>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 802210a:	6820      	ldr	r0, [r4, #0]
 802210c:	f000 fefc 	bl	8022f08 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8022110:	b130      	cbz	r0, 8022120 <HAL_SD_InitCard+0x68>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8022112:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8022114:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8022116:	f000 fed1 	bl	8022ebc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 802211a:	b190      	cbz	r0, 8022142 <HAL_SD_InitCard+0x8a>
 802211c:	4605      	mov	r5, r0
 802211e:	e008      	b.n	8022132 <HAL_SD_InitCard+0x7a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8022120:	2301      	movs	r3, #1
 8022122:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8022124:	2100      	movs	r1, #0
 8022126:	6820      	ldr	r0, [r4, #0]
 8022128:	f000 ff2a 	bl	8022f80 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 802212c:	b160      	cbz	r0, 8022148 <HAL_SD_InitCard+0x90>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802212e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8022132:	2001      	movs	r0, #1
 8022134:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8022138:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802213a:	432b      	orrs	r3, r5
 802213c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 802213e:	2501      	movs	r5, #1
 8022140:	e0b3      	b.n	80222aa <HAL_SD_InitCard+0x1f2>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8022142:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8022144:	2b01      	cmp	r3, #1
 8022146:	d0ed      	beq.n	8022124 <HAL_SD_InitCard+0x6c>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8022148:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 802214c:	2100      	movs	r1, #0
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 802214e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80222b8 <HAL_SD_InitCard+0x200>
 8022152:	4637      	mov	r7, r6
 8022154:	e014      	b.n	8022180 <HAL_SD_InitCard+0xc8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8022156:	6820      	ldr	r0, [r4, #0]
 8022158:	f000 ff12 	bl	8022f80 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 802215c:	4605      	mov	r5, r0
 802215e:	2800      	cmp	r0, #0
 8022160:	d1e7      	bne.n	8022132 <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8022162:	4641      	mov	r1, r8
 8022164:	6820      	ldr	r0, [r4, #0]
 8022166:	f000 ff23 	bl	8022fb0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 802216a:	2800      	cmp	r0, #0
 802216c:	d1df      	bne.n	802212e <HAL_SD_InitCard+0x76>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802216e:	4629      	mov	r1, r5
 8022170:	6820      	ldr	r0, [r4, #0]
 8022172:	f000 fde2 	bl	8022d3a <SDMMC_GetResponse>
    count++;
 8022176:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8022178:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 802217a:	0fc1      	lsrs	r1, r0, #31
    count++;
 802217c:	3301      	adds	r3, #1
 802217e:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8022180:	9b06      	ldr	r3, [sp, #24]
 8022182:	42b3      	cmp	r3, r6
 8022184:	d801      	bhi.n	802218a <HAL_SD_InitCard+0xd2>
 8022186:	2900      	cmp	r1, #0
 8022188:	d0e5      	beq.n	8022156 <HAL_SD_InitCard+0x9e>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 802218a:	9b06      	ldr	r3, [sp, #24]
 802218c:	42bb      	cmp	r3, r7
 802218e:	d80c      	bhi.n	80221aa <HAL_SD_InitCard+0xf2>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8022190:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8022194:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8022196:	6820      	ldr	r0, [r4, #0]
 8022198:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 802219a:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 802219e:	f000 fdb5 	bl	8022d0c <SDMMC_GetPowerState>
 80221a2:	b928      	cbnz	r0, 80221b0 <HAL_SD_InitCard+0xf8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80221a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80221a8:	e079      	b.n	802229e <HAL_SD_InitCard+0x1e6>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80221aa:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80221ae:	e7c0      	b.n	8022132 <HAL_SD_InitCard+0x7a>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80221b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80221b2:	2b03      	cmp	r3, #3
 80221b4:	d043      	beq.n	802223e <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80221b6:	6820      	ldr	r0, [r4, #0]
 80221b8:	f000 ff43 	bl	8023042 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80221bc:	2800      	cmp	r0, #0
 80221be:	d16e      	bne.n	802229e <HAL_SD_InitCard+0x1e6>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80221c0:	4601      	mov	r1, r0
 80221c2:	6820      	ldr	r0, [r4, #0]
 80221c4:	f000 fdb9 	bl	8022d3a <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80221c8:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80221ca:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80221cc:	6820      	ldr	r0, [r4, #0]
 80221ce:	f000 fdb4 	bl	8022d3a <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80221d2:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80221d4:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80221d6:	6820      	ldr	r0, [r4, #0]
 80221d8:	f000 fdaf 	bl	8022d3a <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80221dc:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80221de:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80221e0:	6820      	ldr	r0, [r4, #0]
 80221e2:	f000 fdaa 	bl	8022d3a <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80221e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80221e8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80221ec:	2b03      	cmp	r3, #3
 80221ee:	d026      	beq.n	802223e <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80221f0:	f10d 0116 	add.w	r1, sp, #22
 80221f4:	6820      	ldr	r0, [r4, #0]
 80221f6:	f000 ff4f 	bl	8023098 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80221fa:	2800      	cmp	r0, #0
 80221fc:	d14f      	bne.n	802229e <HAL_SD_InitCard+0x1e6>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80221fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8022200:	6820      	ldr	r0, [r4, #0]
 8022202:	2b03      	cmp	r3, #3
 8022204:	d01b      	beq.n	802223e <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 8022206:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802220a:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802220c:	0409      	lsls	r1, r1, #16
 802220e:	f000 ff2d 	bl	802306c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8022212:	2800      	cmp	r0, #0
 8022214:	d143      	bne.n	802229e <HAL_SD_InitCard+0x1e6>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8022216:	4601      	mov	r1, r0
 8022218:	6820      	ldr	r0, [r4, #0]
 802221a:	f000 fd8e 	bl	8022d3a <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 802221e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8022220:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8022222:	6820      	ldr	r0, [r4, #0]
 8022224:	f000 fd89 	bl	8022d3a <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8022228:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 802222a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 802222c:	6820      	ldr	r0, [r4, #0]
 802222e:	f000 fd84 	bl	8022d3a <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8022232:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8022234:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8022236:	6820      	ldr	r0, [r4, #0]
 8022238:	f000 fd7f 	bl	8022d3a <SDMMC_GetResponse>
 802223c:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 802223e:	2104      	movs	r1, #4
 8022240:	6820      	ldr	r0, [r4, #0]
 8022242:	f000 fd7a 	bl	8022d3a <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8022246:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8022248:	0d00      	lsrs	r0, r0, #20
 802224a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 802224c:	4620      	mov	r0, r4
 802224e:	f7ff fe7d 	bl	8021f4c <HAL_SD_GetCardCSD>
 8022252:	4605      	mov	r5, r0
 8022254:	bb08      	cbnz	r0, 802229a <HAL_SD_InitCard+0x1e2>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8022256:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8022258:	4603      	mov	r3, r0
 802225a:	6820      	ldr	r0, [r4, #0]
 802225c:	0412      	lsls	r2, r2, #16
 802225e:	f000 fe15 	bl	8022e8c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8022262:	b9e0      	cbnz	r0, 802229e <HAL_SD_InitCard+0x1e6>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8022264:	f104 0310 	add.w	r3, r4, #16
 8022268:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802226c:	1d23      	adds	r3, r4, #4
 802226e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8022272:	6820      	ldr	r0, [r4, #0]
 8022274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8022276:	f000 fd1d 	bl	8022cb4 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 802227a:	f44f 7100 	mov.w	r1, #512	; 0x200
 802227e:	6820      	ldr	r0, [r4, #0]
 8022280:	f000 fd71 	bl	8022d66 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8022284:	b188      	cbz	r0, 80222aa <HAL_SD_InitCard+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022286:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8022288:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802228a:	4a0a      	ldr	r2, [pc, #40]	; (80222b4 <HAL_SD_InitCard+0x1fc>)
 802228c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 802228e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022290:	4318      	orrs	r0, r3
 8022292:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8022294:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8022298:	e007      	b.n	80222aa <HAL_SD_InitCard+0x1f2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802229a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 802229e:	2501      	movs	r5, #1
 80222a0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80222a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80222a6:	4301      	orrs	r1, r0
 80222a8:	63a1      	str	r1, [r4, #56]	; 0x38
}
 80222aa:	4628      	mov	r0, r5
 80222ac:	b018      	add	sp, #96	; 0x60
 80222ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222b2:	bf00      	nop
 80222b4:	004005ff 	.word	0x004005ff
 80222b8:	c1100000 	.word	0xc1100000

080222bc <HAL_SD_Init>:
{
 80222bc:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80222be:	4604      	mov	r4, r0
 80222c0:	b908      	cbnz	r0, 80222c6 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 80222c2:	2001      	movs	r0, #1
}
 80222c4:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 80222c6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80222ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80222ce:	b913      	cbnz	r3, 80222d6 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 80222d0:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80222d2:	f7df f857 	bl	8001384 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80222d6:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80222d8:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80222da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80222de:	f7ff feeb 	bl	80220b8 <HAL_SD_InitCard>
 80222e2:	2800      	cmp	r0, #0
 80222e4:	d1ed      	bne.n	80222c2 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80222e6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80222e8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80222ea:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80222ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80222f0:	e7e8      	b.n	80222c4 <HAL_SD_Init+0x8>

080222f2 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80222f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80222f4:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80222f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80222f8:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80222fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80222fc:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80222fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8022300:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8022302:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8022304:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8022306:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8022308:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 802230a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 802230c:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 802230e:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8022310:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8022312:	61cb      	str	r3, [r1, #28]
}
 8022314:	4770      	bx	lr
	...

08022318 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8022318:	2303      	movs	r3, #3
{
 802231a:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 802231c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8022320:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8022322:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8022324:	4604      	mov	r4, r0
 8022326:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8022328:	2b03      	cmp	r3, #3
 802232a:	d002      	beq.n	8022332 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 802232c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8022330:	d103      	bne.n	802233a <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8022332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022338:	e065      	b.n	8022406 <HAL_SD_ConfigWideBusOperation+0xee>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 802233a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 802233e:	6800      	ldr	r0, [r0, #0]
 8022340:	d13c      	bne.n	80223bc <HAL_SD_ConfigWideBusOperation+0xa4>
  uint32_t scr[2U] = {0U, 0U};
 8022342:	2100      	movs	r1, #0
 8022344:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8022348:	f000 fcf7 	bl	8022d3a <SDMMC_GetResponse>
 802234c:	0180      	lsls	r0, r0, #6
 802234e:	d430      	bmi.n	80223b2 <HAL_SD_ConfigWideBusOperation+0x9a>
  errorstate = SD_FindSCR(hsd, scr);
 8022350:	a904      	add	r1, sp, #16
 8022352:	4620      	mov	r0, r4
 8022354:	f7ff fbcc 	bl	8021af0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8022358:	b960      	cbnz	r0, 8022374 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 802235a:	9b05      	ldr	r3, [sp, #20]
 802235c:	0359      	lsls	r1, r3, #13
 802235e:	d52a      	bpl.n	80223b6 <HAL_SD_ConfigWideBusOperation+0x9e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8022360:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8022362:	6820      	ldr	r0, [r4, #0]
 8022364:	0409      	lsls	r1, r1, #16
 8022366:	f000 fe0b 	bl	8022f80 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 802236a:	b918      	cbnz	r0, 8022374 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 802236c:	2102      	movs	r1, #2
 802236e:	6820      	ldr	r0, [r4, #0]
 8022370:	f000 fe37 	bl	8022fe2 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8022374:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022376:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8022378:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 802237a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802237c:	6827      	ldr	r7, [r4, #0]
 802237e:	2e00      	cmp	r6, #0
 8022380:	d043      	beq.n	802240a <HAL_SD_ConfigWideBusOperation+0xf2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022382:	4b2d      	ldr	r3, [pc, #180]	; (8022438 <HAL_SD_ConfigWideBusOperation+0x120>)
    hsd->State = HAL_SD_STATE_READY;
 8022384:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022386:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8022388:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 802238c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8022390:	6820      	ldr	r0, [r4, #0]
 8022392:	f000 fce8 	bl	8022d66 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8022396:	b130      	cbz	r0, 80223a6 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022398:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 802239a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802239c:	4a26      	ldr	r2, [pc, #152]	; (8022438 <HAL_SD_ConfigWideBusOperation+0x120>)
 802239e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80223a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80223a2:	4318      	orrs	r0, r3
 80223a4:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80223a6:	2301      	movs	r3, #1
}
 80223a8:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80223aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80223ae:	b00b      	add	sp, #44	; 0x2c
 80223b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80223b2:	4628      	mov	r0, r5
 80223b4:	e7de      	b.n	8022374 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80223b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80223ba:	e7db      	b.n	8022374 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80223bc:	bb01      	cbnz	r1, 8022400 <HAL_SD_ConfigWideBusOperation+0xe8>
  uint32_t scr[2U] = {0U, 0U};
 80223be:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80223c2:	f000 fcba 	bl	8022d3a <SDMMC_GetResponse>
 80223c6:	0182      	lsls	r2, r0, #6
 80223c8:	d414      	bmi.n	80223f4 <HAL_SD_ConfigWideBusOperation+0xdc>
  errorstate = SD_FindSCR(hsd, scr);
 80223ca:	a904      	add	r1, sp, #16
 80223cc:	4620      	mov	r0, r4
 80223ce:	f7ff fb8f 	bl	8021af0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80223d2:	b960      	cbnz	r0, 80223ee <HAL_SD_ConfigWideBusOperation+0xd6>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80223d4:	9b05      	ldr	r3, [sp, #20]
 80223d6:	03db      	lsls	r3, r3, #15
 80223d8:	d50f      	bpl.n	80223fa <HAL_SD_ConfigWideBusOperation+0xe2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80223da:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80223dc:	6820      	ldr	r0, [r4, #0]
 80223de:	0409      	lsls	r1, r1, #16
 80223e0:	f000 fdce 	bl	8022f80 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80223e4:	b918      	cbnz	r0, 80223ee <HAL_SD_ConfigWideBusOperation+0xd6>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80223e6:	4601      	mov	r1, r0
 80223e8:	6820      	ldr	r0, [r4, #0]
 80223ea:	f000 fdfa 	bl	8022fe2 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80223ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80223f0:	4308      	orrs	r0, r1
 80223f2:	e7c1      	b.n	8022378 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80223f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80223f8:	e7f9      	b.n	80223ee <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80223fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80223fe:	e7f6      	b.n	80223ee <HAL_SD_ConfigWideBusOperation+0xd6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8022400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8022406:	63a3      	str	r3, [r4, #56]	; 0x38
 8022408:	e7b7      	b.n	802237a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 802240a:	6863      	ldr	r3, [r4, #4]
 802240c:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 802240e:	68a3      	ldr	r3, [r4, #8]
 8022410:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8022412:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8022414:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8022418:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 802241a:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 802241c:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 802241e:	69a3      	ldr	r3, [r4, #24]
 8022420:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8022422:	ab0a      	add	r3, sp, #40	; 0x28
 8022424:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8022428:	ab04      	add	r3, sp, #16
 802242a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802242e:	4638      	mov	r0, r7
 8022430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8022432:	f000 fc3f 	bl	8022cb4 <SDMMC_Init>
 8022436:	e7a9      	b.n	802238c <HAL_SD_ConfigWideBusOperation+0x74>
 8022438:	004005ff 	.word	0x004005ff

0802243c <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802243c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 802243e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8022440:	0409      	lsls	r1, r1, #16
{
 8022442:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8022444:	6800      	ldr	r0, [r0, #0]
 8022446:	f000 fe79 	bl	802313c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 802244a:	b930      	cbnz	r0, 802245a <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802244c:	4601      	mov	r1, r0
 802244e:	6820      	ldr	r0, [r4, #0]
 8022450:	f000 fc73 	bl	8022d3a <SDMMC_GetResponse>
}
 8022454:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8022458:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 802245a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802245c:	4308      	orrs	r0, r1
 802245e:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8022460:	2000      	movs	r0, #0
 8022462:	e7f7      	b.n	8022454 <HAL_SD_GetCardState+0x18>

08022464 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8022464:	b538      	push	{r3, r4, r5, lr}
 8022466:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8022468:	4604      	mov	r4, r0
 802246a:	b1c8      	cbz	r0, 80224a0 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 802246c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8022470:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8022474:	b91b      	cbnz	r3, 802247e <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8022476:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 802247a:	f7de fc11 	bl	8000ca0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802247e:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8022480:	1d21      	adds	r1, r4, #4
 8022482:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8022484:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8022488:	f000 faaa 	bl	80229e0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 802248c:	6862      	ldr	r2, [r4, #4]
 802248e:	4629      	mov	r1, r5
 8022490:	6820      	ldr	r0, [r4, #0]
 8022492:	f000 fadb 	bl	8022a4c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8022496:	2301      	movs	r3, #1
  
  return HAL_OK;
 8022498:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 802249a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 802249e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80224a0:	2001      	movs	r0, #1
 80224a2:	e7fc      	b.n	802249e <HAL_SDRAM_Init+0x3a>

080224a4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80224a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80224a6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80224aa:	4604      	mov	r4, r0
 80224ac:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80224ae:	2b02      	cmp	r3, #2
 80224b0:	b2d8      	uxtb	r0, r3
 80224b2:	d00d      	beq.n	80224d0 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80224b4:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80224b6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80224b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80224bc:	f000 fb09 	bl	8022ad2 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80224c0:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80224c2:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80224c4:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80224c6:	bf0c      	ite	eq
 80224c8:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80224ca:	2301      	movne	r3, #1
 80224cc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80224d0:	bd38      	pop	{r3, r4, r5, pc}

080224d2 <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 80224d2:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80224d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80224d8:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80224da:	2b02      	cmp	r3, #2
 80224dc:	b2d8      	uxtb	r0, r3
 80224de:	d009      	beq.n	80224f4 <HAL_SDRAM_SetAutoRefreshNumber+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80224e0:	2302      	movs	r3, #2
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 80224e2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80224e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 80224e8:	f000 fb05 	bl	8022af6 <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80224ec:	2301      	movs	r3, #1
  
  return HAL_OK;
 80224ee:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80224f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80224f4:	bd10      	pop	{r4, pc}
	...

080224f8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80224f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80224fc:	2b01      	cmp	r3, #1
 80224fe:	d133      	bne.n	8022568 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022500:	2302      	movs	r3, #2
 8022502:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8022506:	6803      	ldr	r3, [r0, #0]
 8022508:	68da      	ldr	r2, [r3, #12]
 802250a:	f042 0201 	orr.w	r2, r2, #1
 802250e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022510:	4a16      	ldr	r2, [pc, #88]	; (802256c <HAL_TIM_Base_Start_IT+0x74>)
 8022512:	4293      	cmp	r3, r2
 8022514:	d01a      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 8022516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802251a:	d017      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 802251c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8022520:	4293      	cmp	r3, r2
 8022522:	d013      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 8022524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022528:	4293      	cmp	r3, r2
 802252a:	d00f      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 802252c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022530:	4293      	cmp	r3, r2
 8022532:	d00b      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 8022534:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022538:	4293      	cmp	r3, r2
 802253a:	d007      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 802253c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8022540:	4293      	cmp	r3, r2
 8022542:	d003      	beq.n	802254c <HAL_TIM_Base_Start_IT+0x54>
 8022544:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8022548:	4293      	cmp	r3, r2
 802254a:	d107      	bne.n	802255c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802254c:	6899      	ldr	r1, [r3, #8]
 802254e:	4a08      	ldr	r2, [pc, #32]	; (8022570 <HAL_TIM_Base_Start_IT+0x78>)
 8022550:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022552:	2a06      	cmp	r2, #6
 8022554:	d006      	beq.n	8022564 <HAL_TIM_Base_Start_IT+0x6c>
 8022556:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 802255a:	d003      	beq.n	8022564 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802255c:	681a      	ldr	r2, [r3, #0]
 802255e:	f042 0201 	orr.w	r2, r2, #1
 8022562:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8022564:	2000      	movs	r0, #0
}
 8022566:	4770      	bx	lr
    return HAL_ERROR;
 8022568:	2001      	movs	r0, #1
 802256a:	4770      	bx	lr
 802256c:	40010000 	.word	0x40010000
 8022570:	00010007 	.word	0x00010007

08022574 <HAL_TIM_OC_DelayElapsedCallback>:
 8022574:	4770      	bx	lr

08022576 <HAL_TIM_IC_CaptureCallback>:
 8022576:	4770      	bx	lr

08022578 <HAL_TIM_PWM_PulseFinishedCallback>:
 8022578:	4770      	bx	lr

0802257a <HAL_TIM_TriggerCallback>:
 802257a:	4770      	bx	lr

0802257c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802257c:	6803      	ldr	r3, [r0, #0]
 802257e:	691a      	ldr	r2, [r3, #16]
 8022580:	0791      	lsls	r1, r2, #30
{
 8022582:	b510      	push	{r4, lr}
 8022584:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8022586:	d50f      	bpl.n	80225a8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8022588:	68da      	ldr	r2, [r3, #12]
 802258a:	0792      	lsls	r2, r2, #30
 802258c:	d50c      	bpl.n	80225a8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802258e:	f06f 0202 	mvn.w	r2, #2
 8022592:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022594:	2201      	movs	r2, #1
 8022596:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8022598:	699b      	ldr	r3, [r3, #24]
 802259a:	0799      	lsls	r1, r3, #30
 802259c:	f000 8085 	beq.w	80226aa <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80225a0:	f7ff ffe9 	bl	8022576 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80225a4:	2300      	movs	r3, #0
 80225a6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80225a8:	6823      	ldr	r3, [r4, #0]
 80225aa:	691a      	ldr	r2, [r3, #16]
 80225ac:	0752      	lsls	r2, r2, #29
 80225ae:	d510      	bpl.n	80225d2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80225b0:	68da      	ldr	r2, [r3, #12]
 80225b2:	0750      	lsls	r0, r2, #29
 80225b4:	d50d      	bpl.n	80225d2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80225b6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80225ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80225bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80225be:	2202      	movs	r2, #2
 80225c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80225c2:	699b      	ldr	r3, [r3, #24]
 80225c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80225c8:	d075      	beq.n	80226b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80225ca:	f7ff ffd4 	bl	8022576 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80225ce:	2300      	movs	r3, #0
 80225d0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80225d2:	6823      	ldr	r3, [r4, #0]
 80225d4:	691a      	ldr	r2, [r3, #16]
 80225d6:	0711      	lsls	r1, r2, #28
 80225d8:	d50f      	bpl.n	80225fa <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80225da:	68da      	ldr	r2, [r3, #12]
 80225dc:	0712      	lsls	r2, r2, #28
 80225de:	d50c      	bpl.n	80225fa <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80225e0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80225e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80225e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80225e8:	2204      	movs	r2, #4
 80225ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80225ec:	69db      	ldr	r3, [r3, #28]
 80225ee:	079b      	lsls	r3, r3, #30
 80225f0:	d067      	beq.n	80226c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80225f2:	f7ff ffc0 	bl	8022576 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80225f6:	2300      	movs	r3, #0
 80225f8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80225fa:	6823      	ldr	r3, [r4, #0]
 80225fc:	691a      	ldr	r2, [r3, #16]
 80225fe:	06d0      	lsls	r0, r2, #27
 8022600:	d510      	bpl.n	8022624 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8022602:	68da      	ldr	r2, [r3, #12]
 8022604:	06d1      	lsls	r1, r2, #27
 8022606:	d50d      	bpl.n	8022624 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8022608:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802260c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802260e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8022610:	2208      	movs	r2, #8
 8022612:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8022614:	69db      	ldr	r3, [r3, #28]
 8022616:	f413 7f40 	tst.w	r3, #768	; 0x300
 802261a:	d058      	beq.n	80226ce <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 802261c:	f7ff ffab 	bl	8022576 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8022620:	2300      	movs	r3, #0
 8022622:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8022624:	6823      	ldr	r3, [r4, #0]
 8022626:	691a      	ldr	r2, [r3, #16]
 8022628:	07d2      	lsls	r2, r2, #31
 802262a:	d508      	bpl.n	802263e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802262c:	68da      	ldr	r2, [r3, #12]
 802262e:	07d0      	lsls	r0, r2, #31
 8022630:	d505      	bpl.n	802263e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8022632:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8022636:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8022638:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 802263a:	f7de fe7b 	bl	8001334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802263e:	6823      	ldr	r3, [r4, #0]
 8022640:	691a      	ldr	r2, [r3, #16]
 8022642:	0611      	lsls	r1, r2, #24
 8022644:	d508      	bpl.n	8022658 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8022646:	68da      	ldr	r2, [r3, #12]
 8022648:	0612      	lsls	r2, r2, #24
 802264a:	d505      	bpl.n	8022658 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802264c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8022650:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8022652:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8022654:	f000 f9c1 	bl	80229da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8022658:	6823      	ldr	r3, [r4, #0]
 802265a:	691a      	ldr	r2, [r3, #16]
 802265c:	05d0      	lsls	r0, r2, #23
 802265e:	d508      	bpl.n	8022672 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8022660:	68da      	ldr	r2, [r3, #12]
 8022662:	0611      	lsls	r1, r2, #24
 8022664:	d505      	bpl.n	8022672 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8022666:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 802266a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 802266c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 802266e:	f000 f9b5 	bl	80229dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8022672:	6823      	ldr	r3, [r4, #0]
 8022674:	691a      	ldr	r2, [r3, #16]
 8022676:	0652      	lsls	r2, r2, #25
 8022678:	d508      	bpl.n	802268c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802267a:	68da      	ldr	r2, [r3, #12]
 802267c:	0650      	lsls	r0, r2, #25
 802267e:	d505      	bpl.n	802268c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8022680:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8022684:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8022686:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8022688:	f7ff ff77 	bl	802257a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802268c:	6823      	ldr	r3, [r4, #0]
 802268e:	691a      	ldr	r2, [r3, #16]
 8022690:	0691      	lsls	r1, r2, #26
 8022692:	d522      	bpl.n	80226da <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8022694:	68da      	ldr	r2, [r3, #12]
 8022696:	0692      	lsls	r2, r2, #26
 8022698:	d51f      	bpl.n	80226da <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802269a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802269e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80226a0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80226a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80226a6:	f000 b997 	b.w	80229d8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80226aa:	f7ff ff63 	bl	8022574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80226ae:	4620      	mov	r0, r4
 80226b0:	f7ff ff62 	bl	8022578 <HAL_TIM_PWM_PulseFinishedCallback>
 80226b4:	e776      	b.n	80225a4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80226b6:	f7ff ff5d 	bl	8022574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80226ba:	4620      	mov	r0, r4
 80226bc:	f7ff ff5c 	bl	8022578 <HAL_TIM_PWM_PulseFinishedCallback>
 80226c0:	e785      	b.n	80225ce <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80226c2:	f7ff ff57 	bl	8022574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80226c6:	4620      	mov	r0, r4
 80226c8:	f7ff ff56 	bl	8022578 <HAL_TIM_PWM_PulseFinishedCallback>
 80226cc:	e793      	b.n	80225f6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80226ce:	f7ff ff51 	bl	8022574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80226d2:	4620      	mov	r0, r4
 80226d4:	f7ff ff50 	bl	8022578 <HAL_TIM_PWM_PulseFinishedCallback>
 80226d8:	e7a2      	b.n	8022620 <HAL_TIM_IRQHandler+0xa4>
}
 80226da:	bd10      	pop	{r4, pc}

080226dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80226dc:	4a30      	ldr	r2, [pc, #192]	; (80227a0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80226de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80226e0:	4290      	cmp	r0, r2
 80226e2:	d012      	beq.n	802270a <TIM_Base_SetConfig+0x2e>
 80226e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80226e8:	d00f      	beq.n	802270a <TIM_Base_SetConfig+0x2e>
 80226ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80226ee:	4290      	cmp	r0, r2
 80226f0:	d00b      	beq.n	802270a <TIM_Base_SetConfig+0x2e>
 80226f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80226f6:	4290      	cmp	r0, r2
 80226f8:	d007      	beq.n	802270a <TIM_Base_SetConfig+0x2e>
 80226fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80226fe:	4290      	cmp	r0, r2
 8022700:	d003      	beq.n	802270a <TIM_Base_SetConfig+0x2e>
 8022702:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022706:	4290      	cmp	r0, r2
 8022708:	d119      	bne.n	802273e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 802270a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8022710:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8022712:	4a23      	ldr	r2, [pc, #140]	; (80227a0 <TIM_Base_SetConfig+0xc4>)
 8022714:	4290      	cmp	r0, r2
 8022716:	d029      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 8022718:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 802271c:	d026      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 802271e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8022722:	4290      	cmp	r0, r2
 8022724:	d022      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 8022726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802272a:	4290      	cmp	r0, r2
 802272c:	d01e      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 802272e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022732:	4290      	cmp	r0, r2
 8022734:	d01a      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 8022736:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 802273a:	4290      	cmp	r0, r2
 802273c:	d016      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 802273e:	4a19      	ldr	r2, [pc, #100]	; (80227a4 <TIM_Base_SetConfig+0xc8>)
 8022740:	4290      	cmp	r0, r2
 8022742:	d013      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 8022744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022748:	4290      	cmp	r0, r2
 802274a:	d00f      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 802274c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022750:	4290      	cmp	r0, r2
 8022752:	d00b      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 8022754:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8022758:	4290      	cmp	r0, r2
 802275a:	d007      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 802275c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022760:	4290      	cmp	r0, r2
 8022762:	d003      	beq.n	802276c <TIM_Base_SetConfig+0x90>
 8022764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022768:	4290      	cmp	r0, r2
 802276a:	d103      	bne.n	8022774 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022770:	68ca      	ldr	r2, [r1, #12]
 8022772:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022774:	694a      	ldr	r2, [r1, #20]
 8022776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802277a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 802277c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802277e:	688b      	ldr	r3, [r1, #8]
 8022780:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022782:	680b      	ldr	r3, [r1, #0]
 8022784:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022786:	4b06      	ldr	r3, [pc, #24]	; (80227a0 <TIM_Base_SetConfig+0xc4>)
 8022788:	4298      	cmp	r0, r3
 802278a:	d003      	beq.n	8022794 <TIM_Base_SetConfig+0xb8>
 802278c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8022790:	4298      	cmp	r0, r3
 8022792:	d101      	bne.n	8022798 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022794:	690b      	ldr	r3, [r1, #16]
 8022796:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8022798:	2301      	movs	r3, #1
 802279a:	6143      	str	r3, [r0, #20]
}
 802279c:	4770      	bx	lr
 802279e:	bf00      	nop
 80227a0:	40010000 	.word	0x40010000
 80227a4:	40014000 	.word	0x40014000

080227a8 <HAL_TIM_Base_Init>:
{
 80227a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80227aa:	4604      	mov	r4, r0
 80227ac:	b350      	cbz	r0, 8022804 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80227ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80227b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80227b6:	b91b      	cbnz	r3, 80227c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80227b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80227bc:	f7de ffae 	bl	800171c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80227c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80227c2:	6820      	ldr	r0, [r4, #0]
 80227c4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80227c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80227ca:	f7ff ff87 	bl	80226dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80227ce:	2301      	movs	r3, #1
  return HAL_OK;
 80227d0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80227d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80227d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80227da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80227de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80227e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80227e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80227ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80227ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80227f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80227f6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80227fa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80227fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8022802:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8022804:	2001      	movs	r0, #1
 8022806:	e7fc      	b.n	8022802 <HAL_TIM_Base_Init+0x5a>

08022808 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022808:	4311      	orrs	r1, r2
{
 802280a:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 802280c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802280e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022812:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022816:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8022818:	6083      	str	r3, [r0, #8]
}
 802281a:	bd10      	pop	{r4, pc}

0802281c <HAL_TIM_ConfigClockSource>:
{
 802281c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 802281e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8022822:	4604      	mov	r4, r0
 8022824:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8022826:	2b01      	cmp	r3, #1
 8022828:	d025      	beq.n	8022876 <HAL_TIM_ConfigClockSource+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 802282a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 802282e:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8022830:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8022832:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022836:	4b42      	ldr	r3, [pc, #264]	; (8022940 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8022838:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802283a:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 802283c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 802283e:	680b      	ldr	r3, [r1, #0]
 8022840:	2b60      	cmp	r3, #96	; 0x60
 8022842:	d04d      	beq.n	80228e0 <HAL_TIM_ConfigClockSource+0xc4>
 8022844:	d832      	bhi.n	80228ac <HAL_TIM_ConfigClockSource+0x90>
 8022846:	2b40      	cmp	r3, #64	; 0x40
 8022848:	d062      	beq.n	8022910 <HAL_TIM_ConfigClockSource+0xf4>
 802284a:	d815      	bhi.n	8022878 <HAL_TIM_ConfigClockSource+0x5c>
 802284c:	2b20      	cmp	r3, #32
 802284e:	d003      	beq.n	8022858 <HAL_TIM_ConfigClockSource+0x3c>
 8022850:	d809      	bhi.n	8022866 <HAL_TIM_ConfigClockSource+0x4a>
 8022852:	f033 0210 	bics.w	r2, r3, #16
 8022856:	d108      	bne.n	802286a <HAL_TIM_ConfigClockSource+0x4e>
  tmpsmcr = TIMx->SMCR;
 8022858:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 802285a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802285e:	4313      	orrs	r3, r2
 8022860:	f043 0307 	orr.w	r3, r3, #7
 8022864:	e020      	b.n	80228a8 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8022866:	2b30      	cmp	r3, #48	; 0x30
 8022868:	d0f6      	beq.n	8022858 <HAL_TIM_ConfigClockSource+0x3c>
  htim->State = HAL_TIM_STATE_READY;
 802286a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 802286c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 802286e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8022872:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8022876:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8022878:	2b50      	cmp	r3, #80	; 0x50
 802287a:	d1f6      	bne.n	802286a <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802287c:	684a      	ldr	r2, [r1, #4]
 802287e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8022880:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022882:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022884:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022888:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 802288c:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802288e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022890:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8022896:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 802289a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 802289c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 802289e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80228a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80228a4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80228a8:	6083      	str	r3, [r0, #8]
}
 80228aa:	e7de      	b.n	802286a <HAL_TIM_ConfigClockSource+0x4e>
  switch (sClockSourceConfig->ClockSource)
 80228ac:	2b70      	cmp	r3, #112	; 0x70
 80228ae:	d00c      	beq.n	80228ca <HAL_TIM_ConfigClockSource+0xae>
 80228b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80228b4:	d1d9      	bne.n	802286a <HAL_TIM_ConfigClockSource+0x4e>
      TIM_ETR_SetConfig(htim->Instance,
 80228b6:	68cb      	ldr	r3, [r1, #12]
 80228b8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80228bc:	f7ff ffa4 	bl	8022808 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80228c0:	6822      	ldr	r2, [r4, #0]
 80228c2:	6893      	ldr	r3, [r2, #8]
 80228c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80228c8:	e008      	b.n	80228dc <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 80228ca:	68cb      	ldr	r3, [r1, #12]
 80228cc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80228d0:	f7ff ff9a 	bl	8022808 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80228d4:	6822      	ldr	r2, [r4, #0]
 80228d6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80228d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80228dc:	6093      	str	r3, [r2, #8]
      break;
 80228de:	e7c4      	b.n	802286a <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80228e0:	684d      	ldr	r5, [r1, #4]
 80228e2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80228e4:	6a01      	ldr	r1, [r0, #32]
 80228e6:	f021 0110 	bic.w	r1, r1, #16
 80228ea:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80228ec:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80228ee:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80228f0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80228f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80228f8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80228fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8022900:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8022902:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022904:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802290a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 802290e:	e7cb      	b.n	80228a8 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022910:	684a      	ldr	r2, [r1, #4]
 8022912:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8022914:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022916:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022918:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802291c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8022920:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022922:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022924:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802292a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 802292e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8022930:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022932:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022938:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 802293c:	e7b4      	b.n	80228a8 <HAL_TIM_ConfigClockSource+0x8c>
 802293e:	bf00      	nop
 8022940:	fffe0088 	.word	0xfffe0088

08022944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8022944:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8022946:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 802294a:	2b01      	cmp	r3, #1
 802294c:	f04f 0302 	mov.w	r3, #2
 8022950:	d03d      	beq.n	80229ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022952:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8022956:	4d1f      	ldr	r5, [pc, #124]	; (80229d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 8022958:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 802295a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 802295c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 802295e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8022960:	d003      	beq.n	802296a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8022962:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8022966:	42ab      	cmp	r3, r5
 8022968:	d103      	bne.n	8022972 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 802296a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802296e:	684d      	ldr	r5, [r1, #4]
 8022970:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022972:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8022974:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022978:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802297a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802297c:	4a15      	ldr	r2, [pc, #84]	; (80229d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 802297e:	4293      	cmp	r3, r2
 8022980:	d01a      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022986:	d017      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022988:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 802298c:	4293      	cmp	r3, r2
 802298e:	d013      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022994:	4293      	cmp	r3, r2
 8022996:	d00f      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802299c:	4293      	cmp	r3, r2
 802299e:	d00b      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80229a0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80229a4:	4293      	cmp	r3, r2
 80229a6:	d007      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80229a8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80229ac:	4293      	cmp	r3, r2
 80229ae:	d003      	beq.n	80229b8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80229b0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80229b4:	4293      	cmp	r3, r2
 80229b6:	d104      	bne.n	80229c2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80229b8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80229ba:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80229be:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80229c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80229c2:	2301      	movs	r3, #1
 80229c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80229c8:	2300      	movs	r3, #0
 80229ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80229ce:	4618      	mov	r0, r3

  return HAL_OK;
}
 80229d0:	bd30      	pop	{r4, r5, pc}
 80229d2:	bf00      	nop
 80229d4:	40010000 	.word	0x40010000

080229d8 <HAL_TIMEx_CommutCallback>:
 80229d8:	4770      	bx	lr

080229da <HAL_TIMEx_BreakCallback>:
 80229da:	4770      	bx	lr

080229dc <HAL_TIMEx_Break2Callback>:
 80229dc:	4770      	bx	lr
	...

080229e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80229e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229e4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80229e6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80229ea:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80229ee:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80229f2:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80229f6:	6809      	ldr	r1, [r1, #0]
 80229f8:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80229fa:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80229fc:	2901      	cmp	r1, #1
 80229fe:	4912      	ldr	r1, [pc, #72]	; (8022a48 <FMC_SDRAM_Init+0x68>)
 8022a00:	d00f      	beq.n	8022a22 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022a02:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8022a04:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022a06:	432a      	orrs	r2, r5
 8022a08:	ea42 0308 	orr.w	r3, r2, r8
 8022a0c:	ea43 030e 	orr.w	r3, r3, lr
 8022a10:	ea43 030c 	orr.w	r3, r3, ip
 8022a14:	433b      	orrs	r3, r7
 8022a16:	4333      	orrs	r3, r6
 8022a18:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8022a1a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8022a1c:	2000      	movs	r0, #0
 8022a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8022a22:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8022a24:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8022a26:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8022a2a:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022a2c:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8022a30:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022a32:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8022a36:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022a38:	ea42 020c 	orr.w	r2, r2, ip
 8022a3c:	433a      	orrs	r2, r7
 8022a3e:	4332      	orrs	r2, r6
 8022a40:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8022a42:	6042      	str	r2, [r0, #4]
 8022a44:	e7ea      	b.n	8022a1c <FMC_SDRAM_Init+0x3c>
 8022a46:	bf00      	nop
 8022a48:	ffff8000 	.word	0xffff8000

08022a4c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8022a4c:	68cb      	ldr	r3, [r1, #12]
 8022a4e:	2a01      	cmp	r2, #1
{
 8022a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a52:	680c      	ldr	r4, [r1, #0]
 8022a54:	f103 37ff 	add.w	r7, r3, #4294967295
 8022a58:	694b      	ldr	r3, [r1, #20]
 8022a5a:	688e      	ldr	r6, [r1, #8]
 8022a5c:	f104 3cff 	add.w	ip, r4, #4294967295
 8022a60:	690d      	ldr	r5, [r1, #16]
 8022a62:	f103 33ff 	add.w	r3, r3, #4294967295
 8022a66:	684c      	ldr	r4, [r1, #4]
 8022a68:	f106 36ff 	add.w	r6, r6, #4294967295
 8022a6c:	6989      	ldr	r1, [r1, #24]
 8022a6e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8022a72:	f104 34ff 	add.w	r4, r4, #4294967295
 8022a76:	f105 35ff 	add.w	r5, r5, #4294967295
 8022a7a:	f101 31ff 	add.w	r1, r1, #4294967295
 8022a7e:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8022a82:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8022a86:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8022a8a:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8022a8e:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8022a92:	d00c      	beq.n	8022aae <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022a94:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8022a98:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022a9a:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8022a9c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022aa0:	4333      	orrs	r3, r6
 8022aa2:	432b      	orrs	r3, r5
 8022aa4:	430b      	orrs	r3, r1
 8022aa6:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8022aa8:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8022aaa:	2000      	movs	r0, #0
 8022aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8022aae:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022ab0:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8022ab2:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022ab6:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8022aba:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022abe:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8022ac0:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8022ac2:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022ac4:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8022ac6:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8022aca:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022acc:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8022ace:	60c2      	str	r2, [r0, #12]
 8022ad0:	e7eb      	b.n	8022aaa <FMC_SDRAM_Timing_Init+0x5e>

08022ad2 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8022ad2:	6902      	ldr	r2, [r0, #16]
{ 
 8022ad4:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8022ad6:	e9d1 3400 	ldrd	r3, r4, [r1]
 8022ada:	0d92      	lsrs	r2, r2, #22
 8022adc:	4323      	orrs	r3, r4
 8022ade:	68cc      	ldr	r4, [r1, #12]
 8022ae0:	0592      	lsls	r2, r2, #22
 8022ae2:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8022ae6:	4313      	orrs	r3, r2
 8022ae8:	688a      	ldr	r2, [r1, #8]
 8022aea:	3a01      	subs	r2, #1
 8022aec:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8022af0:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 8022af2:	2000      	movs	r0, #0
 8022af4:	bd10      	pop	{r4, pc}

08022af6 <FMC_SDRAM_SetAutoRefreshNumber>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 8022af6:	6903      	ldr	r3, [r0, #16]
 8022af8:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 8022afc:	6101      	str	r1, [r0, #16]

  return HAL_OK;  
}
 8022afe:	2000      	movs	r0, #0
 8022b00:	4770      	bx	lr
	...

08022b04 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022b04:	4b11      	ldr	r3, [pc, #68]	; (8022b4c <SDMMC_GetCmdResp2+0x48>)
 8022b06:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8022b0a:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022b0c:	681b      	ldr	r3, [r3, #0]
 8022b0e:	fbb3 f1f1 	udiv	r1, r3, r1
 8022b12:	f241 3388 	movw	r3, #5000	; 0x1388
 8022b16:	434b      	muls	r3, r1
  
  do
  {
    if (count-- == 0U)
 8022b18:	3b01      	subs	r3, #1
 8022b1a:	d313      	bcc.n	8022b44 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8022b1c:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022b1e:	f011 0f45 	tst.w	r1, #69	; 0x45
 8022b22:	d0f9      	beq.n	8022b18 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022b24:	0509      	lsls	r1, r1, #20
 8022b26:	d4f7      	bmi.n	8022b18 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022b28:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8022b2a:	075b      	lsls	r3, r3, #29
 8022b2c:	d502      	bpl.n	8022b34 <SDMMC_GetCmdResp2+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022b2e:	2004      	movs	r0, #4
 8022b30:	6390      	str	r0, [r2, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022b32:	4770      	bx	lr
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022b34:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8022b36:	f010 0001 	ands.w	r0, r0, #1
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022b3a:	bf14      	ite	ne
 8022b3c:	2301      	movne	r3, #1
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022b3e:	23c5      	moveq	r3, #197	; 0xc5
 8022b40:	6393      	str	r3, [r2, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8022b42:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8022b44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8022b48:	4770      	bx	lr
 8022b4a:	bf00      	nop
 8022b4c:	20000000 	.word	0x20000000

08022b50 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022b50:	4b0f      	ldr	r3, [pc, #60]	; (8022b90 <SDMMC_GetCmdResp3+0x40>)
 8022b52:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8022b56:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	fbb3 f1f1 	udiv	r1, r3, r1
 8022b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8022b62:	434b      	muls	r3, r1
  
  do
  {
    if (count-- == 0U)
 8022b64:	3b01      	subs	r3, #1
 8022b66:	d30f      	bcc.n	8022b88 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8022b68:	6b51      	ldr	r1, [r2, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022b6a:	f011 0f45 	tst.w	r1, #69	; 0x45
 8022b6e:	d0f9      	beq.n	8022b64 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022b70:	0509      	lsls	r1, r1, #20
 8022b72:	d4f7      	bmi.n	8022b64 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022b74:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8022b76:	f010 0004 	ands.w	r0, r0, #4
 8022b7a:	d002      	beq.n	8022b82 <SDMMC_GetCmdResp3+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022b7c:	2004      	movs	r0, #4
 8022b7e:	6390      	str	r0, [r2, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022b80:	4770      	bx	lr
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022b82:	23c5      	movs	r3, #197	; 0xc5
 8022b84:	6393      	str	r3, [r2, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8022b86:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8022b88:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8022b8c:	4770      	bx	lr
 8022b8e:	bf00      	nop
 8022b90:	20000000 	.word	0x20000000

08022b94 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8022b94:	4b45      	ldr	r3, [pc, #276]	; (8022cac <SDMMC_GetCmdResp1+0x118>)
{
 8022b96:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8022b98:	681b      	ldr	r3, [r3, #0]
{
 8022b9a:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8022b9c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8022ba0:	fbb3 f3f0 	udiv	r3, r3, r0
 8022ba4:	435a      	muls	r2, r3
    if (count-- == 0U)
 8022ba6:	2a00      	cmp	r2, #0
 8022ba8:	d049      	beq.n	8022c3e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8022baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022bac:	f013 0f45 	tst.w	r3, #69	; 0x45
 8022bb0:	d007      	beq.n	8022bc2 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022bb2:	051b      	lsls	r3, r3, #20
 8022bb4:	d405      	bmi.n	8022bc2 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022bb8:	0758      	lsls	r0, r3, #29
 8022bba:	d504      	bpl.n	8022bc6 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022bbc:	2004      	movs	r0, #4
 8022bbe:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8022bc0:	bd10      	pop	{r4, pc}
 8022bc2:	3a01      	subs	r2, #1
 8022bc4:	e7ef      	b.n	8022ba6 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022bc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022bc8:	f010 0001 	ands.w	r0, r0, #1
 8022bcc:	d002      	beq.n	8022bd4 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022bce:	2301      	movs	r3, #1
 8022bd0:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022bd2:	e7f5      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022bd4:	23c5      	movs	r3, #197	; 0xc5
 8022bd6:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8022bd8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8022bda:	b2db      	uxtb	r3, r3
 8022bdc:	4299      	cmp	r1, r3
 8022bde:	d131      	bne.n	8022c44 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8022be0:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8022be2:	4833      	ldr	r0, [pc, #204]	; (8022cb0 <SDMMC_GetCmdResp1+0x11c>)
 8022be4:	4018      	ands	r0, r3
 8022be6:	2800      	cmp	r0, #0
 8022be8:	d0ea      	beq.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	db2c      	blt.n	8022c48 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8022bee:	005a      	lsls	r2, r3, #1
 8022bf0:	d42d      	bmi.n	8022c4e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8022bf2:	009c      	lsls	r4, r3, #2
 8022bf4:	d42d      	bmi.n	8022c52 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8022bf6:	00d9      	lsls	r1, r3, #3
 8022bf8:	d42d      	bmi.n	8022c56 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8022bfa:	011a      	lsls	r2, r3, #4
 8022bfc:	d42e      	bmi.n	8022c5c <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8022bfe:	015c      	lsls	r4, r3, #5
 8022c00:	d42f      	bmi.n	8022c62 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8022c02:	01d9      	lsls	r1, r3, #7
 8022c04:	d430      	bmi.n	8022c68 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8022c06:	021a      	lsls	r2, r3, #8
 8022c08:	d431      	bmi.n	8022c6e <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8022c0a:	025c      	lsls	r4, r3, #9
 8022c0c:	d432      	bmi.n	8022c74 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8022c0e:	0299      	lsls	r1, r3, #10
 8022c10:	d433      	bmi.n	8022c7a <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8022c12:	02da      	lsls	r2, r3, #11
 8022c14:	d434      	bmi.n	8022c80 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8022c16:	035c      	lsls	r4, r3, #13
 8022c18:	d435      	bmi.n	8022c86 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8022c1a:	0399      	lsls	r1, r3, #14
 8022c1c:	d436      	bmi.n	8022c8c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8022c1e:	03da      	lsls	r2, r3, #15
 8022c20:	d437      	bmi.n	8022c92 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8022c22:	041c      	lsls	r4, r3, #16
 8022c24:	d438      	bmi.n	8022c98 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8022c26:	0459      	lsls	r1, r3, #17
 8022c28:	d439      	bmi.n	8022c9e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8022c2a:	049a      	lsls	r2, r3, #18
 8022c2c:	d43a      	bmi.n	8022ca4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8022c2e:	f013 0f08 	tst.w	r3, #8
 8022c32:	bf14      	ite	ne
 8022c34:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8022c38:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8022c3c:	e7c0      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8022c3e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8022c42:	e7bd      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022c44:	2001      	movs	r0, #1
 8022c46:	e7bb      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8022c48:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8022c4c:	e7b8      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8022c4e:	2040      	movs	r0, #64	; 0x40
 8022c50:	e7b6      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8022c52:	2080      	movs	r0, #128	; 0x80
 8022c54:	e7b4      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8022c56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8022c5a:	e7b1      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8022c5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8022c60:	e7ae      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8022c62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8022c66:	e7ab      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8022c68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8022c6c:	e7a8      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8022c6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8022c72:	e7a5      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8022c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8022c78:	e7a2      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8022c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8022c7e:	e79f      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8022c80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8022c84:	e79c      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8022c86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8022c8a:	e799      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8022c8c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8022c90:	e796      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8022c92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8022c96:	e793      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8022c98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8022c9c:	e790      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8022c9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8022ca2:	e78d      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8022ca4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8022ca8:	e78a      	b.n	8022bc0 <SDMMC_GetCmdResp1+0x2c>
 8022caa:	bf00      	nop
 8022cac:	20000000 	.word	0x20000000
 8022cb0:	fdffe008 	.word	0xfdffe008

08022cb4 <SDMMC_Init>:
{
 8022cb4:	b084      	sub	sp, #16
 8022cb6:	b510      	push	{r4, lr}
 8022cb8:	ac03      	add	r4, sp, #12
 8022cba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8022cbe:	460b      	mov	r3, r1
 8022cc0:	9904      	ldr	r1, [sp, #16]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8022cc2:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8022cc4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8022cc6:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8022cc8:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8022ccc:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8022cce:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8022cd0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8022cd4:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8022cd6:	9907      	ldr	r1, [sp, #28]
 8022cd8:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8022cda:	9908      	ldr	r1, [sp, #32]
 8022cdc:	430b      	orrs	r3, r1
}
 8022cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8022ce2:	4313      	orrs	r3, r2
}
 8022ce4:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8022ce6:	6043      	str	r3, [r0, #4]
}
 8022ce8:	2000      	movs	r0, #0
 8022cea:	4770      	bx	lr

08022cec <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8022cec:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8022cf0:	4770      	bx	lr

08022cf2 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8022cf2:	680b      	ldr	r3, [r1, #0]
 8022cf4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8022cf8:	2000      	movs	r0, #0
 8022cfa:	4770      	bx	lr

08022cfc <SDMMC_PowerState_ON>:
{  
 8022cfc:	b508      	push	{r3, lr}
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8022cfe:	2303      	movs	r3, #3
 8022d00:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8022d02:	2002      	movs	r0, #2
 8022d04:	f7fd fb12 	bl	802032c <HAL_Delay>
}
 8022d08:	2000      	movs	r0, #0
 8022d0a:	bd08      	pop	{r3, pc}

08022d0c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8022d0c:	6800      	ldr	r0, [r0, #0]
}
 8022d0e:	f000 0003 	and.w	r0, r0, #3
 8022d12:	4770      	bx	lr

08022d14 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8022d14:	680b      	ldr	r3, [r1, #0]
{
 8022d16:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8022d18:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8022d1a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022d1c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8022d20:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8022d24:	4323      	orrs	r3, r4
                       Command->Response         |\
 8022d26:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8022d28:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8022d2a:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 8022d2e:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8022d30:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8022d32:	4313      	orrs	r3, r2
 8022d34:	60c3      	str	r3, [r0, #12]
}
 8022d36:	2000      	movs	r0, #0
 8022d38:	bd10      	pop	{r4, pc}

08022d3a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8022d3a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8022d3c:	5840      	ldr	r0, [r0, r1]
}  
 8022d3e:	4770      	bx	lr

08022d40 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8022d40:	680b      	ldr	r3, [r1, #0]
{
 8022d42:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8022d44:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8022d46:	684b      	ldr	r3, [r1, #4]
 8022d48:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8022d4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8022d4c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8022d50:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8022d54:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8022d56:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8022d58:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8022d5a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8022d5c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8022d5e:	4313      	orrs	r3, r2
 8022d60:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8022d62:	2000      	movs	r0, #0
 8022d64:	bd10      	pop	{r4, pc}

08022d66 <SDMMC_CmdBlockLength>:
{
 8022d66:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d68:	2340      	movs	r3, #64	; 0x40
{
 8022d6a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d6c:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022d6e:	2200      	movs	r2, #0
{
 8022d70:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8022d72:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022d74:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d76:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022d7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022d82:	f7ff ffc7 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8022d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8022d8a:	4629      	mov	r1, r5
 8022d8c:	4620      	mov	r0, r4
 8022d8e:	f7ff ff01 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022d92:	b007      	add	sp, #28
 8022d94:	bd30      	pop	{r4, r5, pc}

08022d96 <SDMMC_CmdReadSingleBlock>:
{
 8022d96:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d98:	2340      	movs	r3, #64	; 0x40
{
 8022d9a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022d9c:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022d9e:	2200      	movs	r2, #0
{
 8022da0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8022da2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022da4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022da6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022dae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022db2:	f7ff ffaf 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8022dba:	4629      	mov	r1, r5
 8022dbc:	4620      	mov	r0, r4
 8022dbe:	f7ff fee9 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022dc2:	b007      	add	sp, #28
 8022dc4:	bd30      	pop	{r4, r5, pc}

08022dc6 <SDMMC_CmdReadMultiBlock>:
{
 8022dc6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022dc8:	2340      	movs	r3, #64	; 0x40
{
 8022dca:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022dcc:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022dce:	2200      	movs	r2, #0
{
 8022dd0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8022dd2:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022dd4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022dd6:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022dde:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022de2:	f7ff ff97 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8022de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8022dea:	4629      	mov	r1, r5
 8022dec:	4620      	mov	r0, r4
 8022dee:	f7ff fed1 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022df2:	b007      	add	sp, #28
 8022df4:	bd30      	pop	{r4, r5, pc}

08022df6 <SDMMC_CmdWriteSingleBlock>:
{
 8022df6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022df8:	2340      	movs	r3, #64	; 0x40
{
 8022dfa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022dfc:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022dfe:	2200      	movs	r2, #0
{
 8022e00:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8022e02:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e04:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e06:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e12:	f7ff ff7f 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8022e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8022e1a:	4629      	mov	r1, r5
 8022e1c:	4620      	mov	r0, r4
 8022e1e:	f7ff feb9 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022e22:	b007      	add	sp, #28
 8022e24:	bd30      	pop	{r4, r5, pc}

08022e26 <SDMMC_CmdWriteMultiBlock>:
{
 8022e26:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e28:	2340      	movs	r3, #64	; 0x40
{
 8022e2a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e2c:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e2e:	2200      	movs	r2, #0
{
 8022e30:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8022e32:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e34:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e36:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e42:	f7ff ff67 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8022e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8022e4a:	4629      	mov	r1, r5
 8022e4c:	4620      	mov	r0, r4
 8022e4e:	f7ff fea1 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022e52:	b007      	add	sp, #28
 8022e54:	bd30      	pop	{r4, r5, pc}
	...

08022e58 <SDMMC_CmdStopTransfer>:
{
 8022e58:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8022e5a:	2300      	movs	r3, #0
{
 8022e5c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8022e5e:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e60:	2240      	movs	r2, #64	; 0x40
{
 8022e62:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e64:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022e66:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8022e6a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e72:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e74:	f7ff ff4e 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8022e78:	4a03      	ldr	r2, [pc, #12]	; (8022e88 <SDMMC_CmdStopTransfer+0x30>)
 8022e7a:	4629      	mov	r1, r5
 8022e7c:	4620      	mov	r0, r4
 8022e7e:	f7ff fe89 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022e82:	b007      	add	sp, #28
 8022e84:	bd30      	pop	{r4, r5, pc}
 8022e86:	bf00      	nop
 8022e88:	05f5e100 	.word	0x05f5e100

08022e8c <SDMMC_CmdSelDesel>:
{
 8022e8c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e8e:	2340      	movs	r3, #64	; 0x40
{
 8022e90:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e92:	2507      	movs	r5, #7
{
 8022e94:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8022e96:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022e98:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022e9a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022e9c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ea4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ea8:	f7ff ff34 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8022eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8022eb0:	4629      	mov	r1, r5
 8022eb2:	4620      	mov	r0, r4
 8022eb4:	f7ff fe6e 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022eb8:	b007      	add	sp, #28
 8022eba:	bd30      	pop	{r4, r5, pc}

08022ebc <SDMMC_CmdGoIdleState>:
{
 8022ebc:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0U;
 8022ebe:	2300      	movs	r3, #0
{
 8022ec0:	b086      	sub	sp, #24
 8022ec2:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ec4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8022ec6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022eca:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ed2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ed4:	f7ff ff1e 	bl	8022d14 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022ed8:	4b0a      	ldr	r3, [pc, #40]	; (8022f04 <SDMMC_CmdGoIdleState+0x48>)
 8022eda:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	fbb3 f2f2 	udiv	r2, r3, r2
 8022ee4:	f241 3388 	movw	r3, #5000	; 0x1388
 8022ee8:	4353      	muls	r3, r2
    if (count-- == 0U)
 8022eea:	3b01      	subs	r3, #1
 8022eec:	d307      	bcc.n	8022efe <SDMMC_CmdGoIdleState+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8022eee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8022ef0:	0612      	lsls	r2, r2, #24
 8022ef2:	d5fa      	bpl.n	8022eea <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022ef4:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8022ef6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022ef8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8022efa:	b006      	add	sp, #24
 8022efc:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8022efe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8022f02:	e7fa      	b.n	8022efa <SDMMC_CmdGoIdleState+0x3e>
 8022f04:	20000000 	.word	0x20000000

08022f08 <SDMMC_CmdOperCond>:
{
 8022f08:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8022f0a:	f44f 7cd5 	mov.w	ip, #426	; 0x1aa
{
 8022f0e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8022f10:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022f12:	f04f 0e40 	mov.w	lr, #64	; 0x40
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022f16:	a901      	add	r1, sp, #4
{
 8022f18:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8022f1a:	e9cd c301 	strd	ip, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022f1e:	2300      	movs	r3, #0
 8022f20:	e9cd e303 	strd	lr, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022f28:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022f2a:	f7ff fef3 	bl	8022d14 <SDMMC_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8022f2e:	4b13      	ldr	r3, [pc, #76]	; (8022f7c <SDMMC_CmdOperCond+0x74>)
 8022f30:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8022f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8022f3e:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8022f40:	3b01      	subs	r3, #1
 8022f42:	d318      	bcc.n	8022f76 <SDMMC_CmdOperCond+0x6e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8022f44:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8022f46:	f012 0f45 	tst.w	r2, #69	; 0x45
 8022f4a:	d0f9      	beq.n	8022f40 <SDMMC_CmdOperCond+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022f4c:	0511      	lsls	r1, r2, #20
 8022f4e:	d4f7      	bmi.n	8022f40 <SDMMC_CmdOperCond+0x38>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022f52:	075a      	lsls	r2, r3, #29
 8022f54:	d503      	bpl.n	8022f5e <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022f56:	2004      	movs	r0, #4
 8022f58:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8022f5a:	b006      	add	sp, #24
 8022f5c:	bd10      	pop	{r4, pc}
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022f5e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022f60:	f010 0001 	ands.w	r0, r0, #1
 8022f64:	d002      	beq.n	8022f6c <SDMMC_CmdOperCond+0x64>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022f66:	2301      	movs	r3, #1
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8022f68:	63a3      	str	r3, [r4, #56]	; 0x38
 8022f6a:	e7f6      	b.n	8022f5a <SDMMC_CmdOperCond+0x52>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8022f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022f6e:	065b      	lsls	r3, r3, #25
 8022f70:	d5f3      	bpl.n	8022f5a <SDMMC_CmdOperCond+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8022f72:	2340      	movs	r3, #64	; 0x40
 8022f74:	e7f8      	b.n	8022f68 <SDMMC_CmdOperCond+0x60>
      return SDMMC_ERROR_TIMEOUT;
 8022f76:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8022f7a:	e7ee      	b.n	8022f5a <SDMMC_CmdOperCond+0x52>
 8022f7c:	20000000 	.word	0x20000000

08022f80 <SDMMC_CmdAppCommand>:
{
 8022f80:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f82:	2340      	movs	r3, #64	; 0x40
{
 8022f84:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f86:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022f88:	2200      	movs	r2, #0
{
 8022f8a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8022f8c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022f8e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022f90:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022f98:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022f9c:	f7ff feba 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8022fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8022fa4:	4629      	mov	r1, r5
 8022fa6:	4620      	mov	r0, r4
 8022fa8:	f7ff fdf4 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8022fac:	b007      	add	sp, #28
 8022fae:	bd30      	pop	{r4, r5, pc}

08022fb0 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8022fb0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022fb4:	2229      	movs	r2, #41	; 0x29
 8022fb6:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8022fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 8022fbc:	b510      	push	{r4, lr}
 8022fbe:	b086      	sub	sp, #24
 8022fc0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8022fc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022fcc:	2100      	movs	r1, #0
 8022fce:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022fd2:	a901      	add	r1, sp, #4
 8022fd4:	f7ff fe9e 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8022fd8:	4620      	mov	r0, r4
 8022fda:	f7ff fdb9 	bl	8022b50 <SDMMC_GetCmdResp3>
}
 8022fde:	b006      	add	sp, #24
 8022fe0:	bd10      	pop	{r4, pc}

08022fe2 <SDMMC_CmdBusWidth>:
{
 8022fe2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022fe4:	2340      	movs	r3, #64	; 0x40
{
 8022fe6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022fe8:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022fea:	2200      	movs	r2, #0
{
 8022fec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8022fee:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ff0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022ff2:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022ffe:	f7ff fe89 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8023002:	f241 3288 	movw	r2, #5000	; 0x1388
 8023006:	4629      	mov	r1, r5
 8023008:	4620      	mov	r0, r4
 802300a:	f7ff fdc3 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 802300e:	b007      	add	sp, #28
 8023010:	bd30      	pop	{r4, r5, pc}

08023012 <SDMMC_CmdSendSCR>:
{
 8023012:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8023014:	2300      	movs	r3, #0
{
 8023016:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8023018:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802301a:	2240      	movs	r2, #64	; 0x40
{
 802301c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802301e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023020:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8023024:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802302c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802302e:	f7ff fe71 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8023032:	f241 3288 	movw	r2, #5000	; 0x1388
 8023036:	4629      	mov	r1, r5
 8023038:	4620      	mov	r0, r4
 802303a:	f7ff fdab 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 802303e:	b007      	add	sp, #28
 8023040:	bd30      	pop	{r4, r5, pc}

08023042 <SDMMC_CmdSendCID>:
{
 8023042:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8023044:	2300      	movs	r3, #0
{
 8023046:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8023048:	2202      	movs	r2, #2
{
 802304a:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802304c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802304e:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8023052:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8023054:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802305c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802305e:	f7ff fe59 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8023062:	4620      	mov	r0, r4
 8023064:	f7ff fd4e 	bl	8022b04 <SDMMC_GetCmdResp2>
}
 8023068:	b006      	add	sp, #24
 802306a:	bd10      	pop	{r4, pc}

0802306c <SDMMC_CmdSendCSD>:
{
 802306c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802306e:	2209      	movs	r2, #9
{
 8023070:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8023072:	23c0      	movs	r3, #192	; 0xc0
{
 8023074:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8023076:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023078:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802307a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802307e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023082:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023086:	a901      	add	r1, sp, #4
 8023088:	f7ff fe44 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802308c:	4620      	mov	r0, r4
 802308e:	f7ff fd39 	bl	8022b04 <SDMMC_GetCmdResp2>
}
 8023092:	b006      	add	sp, #24
 8023094:	bd10      	pop	{r4, pc}
	...

08023098 <SDMMC_CmdSetRelAdd>:
{
 8023098:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802309a:	2300      	movs	r3, #0
{
 802309c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 802309e:	2203      	movs	r2, #3
{
 80230a0:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80230a2:	a901      	add	r1, sp, #4
{
 80230a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80230a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80230aa:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80230ac:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80230b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80230b4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80230b6:	f7ff fe2d 	bl	8022d14 <SDMMC_SendCommand>
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80230ba:	4b1f      	ldr	r3, [pc, #124]	; (8023138 <SDMMC_CmdSetRelAdd+0xa0>)
 80230bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80230c0:	681b      	ldr	r3, [r3, #0]
 80230c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80230c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80230ca:	4353      	muls	r3, r2
    if (count-- == 0U)
 80230cc:	3b01      	subs	r3, #1
 80230ce:	d32a      	bcc.n	8023126 <SDMMC_CmdSetRelAdd+0x8e>
    sta_reg = SDMMCx->STA;
 80230d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80230d2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80230d6:	d0f9      	beq.n	80230cc <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80230d8:	0510      	lsls	r0, r2, #20
 80230da:	d4f7      	bmi.n	80230cc <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80230dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80230de:	0759      	lsls	r1, r3, #29
 80230e0:	d503      	bpl.n	80230ea <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80230e2:	2004      	movs	r0, #4
 80230e4:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80230e6:	b007      	add	sp, #28
 80230e8:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80230ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80230ec:	f010 0001 	ands.w	r0, r0, #1
 80230f0:	d002      	beq.n	80230f8 <SDMMC_CmdSetRelAdd+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80230f2:	2301      	movs	r3, #1
 80230f4:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80230f6:	e7f6      	b.n	80230e6 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDMMCx->RESPCMD);
 80230f8:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80230fa:	b2db      	uxtb	r3, r3
 80230fc:	2b03      	cmp	r3, #3
 80230fe:	d115      	bne.n	802312c <SDMMC_CmdSetRelAdd+0x94>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8023100:	23c5      	movs	r3, #197	; 0xc5
 8023102:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8023104:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8023106:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 802310a:	d102      	bne.n	8023112 <SDMMC_CmdSetRelAdd+0x7a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 802310c:	0c1b      	lsrs	r3, r3, #16
 802310e:	802b      	strh	r3, [r5, #0]
    return SDMMC_ERROR_NONE;
 8023110:	e7e9      	b.n	80230e6 <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8023112:	045a      	lsls	r2, r3, #17
 8023114:	d40c      	bmi.n	8023130 <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8023116:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 802311a:	bf14      	ite	ne
 802311c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8023120:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8023124:	e7df      	b.n	80230e6 <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 8023126:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 802312a:	e7dc      	b.n	80230e6 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802312c:	2001      	movs	r0, #1
 802312e:	e7da      	b.n	80230e6 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8023130:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8023134:	e7d7      	b.n	80230e6 <SDMMC_CmdSetRelAdd+0x4e>
 8023136:	bf00      	nop
 8023138:	20000000 	.word	0x20000000

0802313c <SDMMC_CmdSendStatus>:
{
 802313c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802313e:	2340      	movs	r3, #64	; 0x40
{
 8023140:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8023142:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023144:	2200      	movs	r2, #0
{
 8023146:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8023148:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802314a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802314c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8023150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023154:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8023158:	f7ff fddc 	bl	8022d14 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 802315c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023160:	4629      	mov	r1, r5
 8023162:	4620      	mov	r0, r4
 8023164:	f7ff fd16 	bl	8022b94 <SDMMC_GetCmdResp1>
}
 8023168:	b007      	add	sp, #28
 802316a:	bd30      	pop	{r4, r5, pc}

0802316c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 802316c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 802316e:	4903      	ldr	r1, [pc, #12]	; (802317c <MX_FATFS_Init+0x10>)
 8023170:	4803      	ldr	r0, [pc, #12]	; (8023180 <MX_FATFS_Init+0x14>)
 8023172:	f001 fbfb 	bl	802496c <FATFS_LinkDriver>
 8023176:	4b03      	ldr	r3, [pc, #12]	; (8023184 <MX_FATFS_Init+0x18>)
 8023178:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 802317a:	bd08      	pop	{r3, pc}
 802317c:	2000b669 	.word	0x2000b669
 8023180:	0802a140 	.word	0x0802a140
 8023184:	2000b668 	.word	0x2000b668

08023188 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8023188:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 802318a:	9300      	str	r3, [sp, #0]
 802318c:	4613      	mov	r3, r2
 802318e:	460a      	mov	r2, r1
 8023190:	4601      	mov	r1, r0
 8023192:	4804      	ldr	r0, [pc, #16]	; (80231a4 <BSP_SD_ReadBlocks+0x1c>)
 8023194:	f7fe fd12 	bl	8021bbc <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8023198:	3800      	subs	r0, #0
 802319a:	bf18      	it	ne
 802319c:	2001      	movne	r0, #1
 802319e:	b003      	add	sp, #12
 80231a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80231a4:	2000b2c8 	.word	0x2000b2c8

080231a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80231a8:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80231aa:	9300      	str	r3, [sp, #0]
 80231ac:	4613      	mov	r3, r2
 80231ae:	460a      	mov	r2, r1
 80231b0:	4601      	mov	r1, r0
 80231b2:	4804      	ldr	r0, [pc, #16]	; (80231c4 <BSP_SD_WriteBlocks+0x1c>)
 80231b4:	f7fe fdfe 	bl	8021db4 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80231b8:	3800      	subs	r0, #0
 80231ba:	bf18      	it	ne
 80231bc:	2001      	movne	r0, #1
 80231be:	b003      	add	sp, #12
 80231c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80231c4:	2000b2c8 	.word	0x2000b2c8

080231c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80231c8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80231ca:	4803      	ldr	r0, [pc, #12]	; (80231d8 <BSP_SD_GetCardState+0x10>)
 80231cc:	f7ff f936 	bl	802243c <HAL_SD_GetCardState>
}
 80231d0:	3804      	subs	r0, #4
 80231d2:	bf18      	it	ne
 80231d4:	2001      	movne	r0, #1
 80231d6:	bd08      	pop	{r3, pc}
 80231d8:	2000b2c8 	.word	0x2000b2c8

080231dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80231dc:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80231de:	4801      	ldr	r0, [pc, #4]	; (80231e4 <BSP_SD_GetCardInfo+0x8>)
 80231e0:	f7ff b887 	b.w	80222f2 <HAL_SD_GetCardInfo>
 80231e4:	2000b2c8 	.word	0x2000b2c8

080231e8 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80231e8:	2301      	movs	r3, #1
{
 80231ea:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 80231ec:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80231f0:	f000 f81e 	bl	8023230 <BSP_PlatformIsDetected>
 80231f4:	b908      	cbnz	r0, 80231fa <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 80231f6:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80231fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80231fe:	b003      	add	sp, #12
 8023200:	f85d fb04 	ldr.w	pc, [sp], #4

08023204 <BSP_SD_Init>:
{
 8023204:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8023206:	f7ff ffef 	bl	80231e8 <BSP_SD_IsDetected>
 802320a:	2801      	cmp	r0, #1
 802320c:	d10c      	bne.n	8023228 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 802320e:	4807      	ldr	r0, [pc, #28]	; (802322c <BSP_SD_Init+0x28>)
 8023210:	f7ff f854 	bl	80222bc <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8023214:	b938      	cbnz	r0, 8023226 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8023216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 802321a:	4804      	ldr	r0, [pc, #16]	; (802322c <BSP_SD_Init+0x28>)
 802321c:	f7ff f87c 	bl	8022318 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8023220:	3800      	subs	r0, #0
 8023222:	bf18      	it	ne
 8023224:	2001      	movne	r0, #1
}
 8023226:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8023228:	2002      	movs	r0, #2
 802322a:	e7fc      	b.n	8023226 <BSP_SD_Init+0x22>
 802322c:	2000b2c8 	.word	0x2000b2c8

08023230 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8023230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8023234:	4803      	ldr	r0, [pc, #12]	; (8023244 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 8023236:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8023238:	f7fd fb16 	bl	8020868 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 802323c:	fab0 f080 	clz	r0, r0
 8023240:	0940      	lsrs	r0, r0, #5
 8023242:	bd08      	pop	{r3, pc}
 8023244:	40020800 	.word	0x40020800

08023248 <SD_CheckStatus.isra.0>:

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
  Stat = STA_NOINIT;
 8023248:	2301      	movs	r3, #1
static DSTATUS SD_CheckStatus(BYTE lun)
 802324a:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 802324c:	4c05      	ldr	r4, [pc, #20]	; (8023264 <SD_CheckStatus.isra.0+0x1c>)
 802324e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8023250:	f7ff ffba 	bl	80231c8 <BSP_SD_GetCardState>
 8023254:	4623      	mov	r3, r4
 8023256:	b918      	cbnz	r0, 8023260 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8023258:	7822      	ldrb	r2, [r4, #0]
 802325a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802325e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8023260:	7818      	ldrb	r0, [r3, #0]
}
 8023262:	bd10      	pop	{r4, pc}
 8023264:	20000078 	.word	0x20000078

08023268 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8023268:	b510      	push	{r4, lr}
Stat = STA_NOINIT;
 802326a:	2301      	movs	r3, #1
 802326c:	4c04      	ldr	r4, [pc, #16]	; (8023280 <SD_initialize+0x18>)
 802326e:	7023      	strb	r3, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8023270:	f7ff ffc8 	bl	8023204 <BSP_SD_Init>
 8023274:	b910      	cbnz	r0, 802327c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8023276:	f7ff ffe7 	bl	8023248 <SD_CheckStatus.isra.0>
 802327a:	7020      	strb	r0, [r4, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 802327c:	7820      	ldrb	r0, [r4, #0]
}
 802327e:	bd10      	pop	{r4, pc}
 8023280:	20000078 	.word	0x20000078

08023284 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8023284:	f7ff bfe0 	b.w	8023248 <SD_CheckStatus.isra.0>

08023288 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8023288:	b508      	push	{r3, lr}
 802328a:	4608      	mov	r0, r1
 802328c:	4611      	mov	r1, r2
 802328e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8023290:	f04f 33ff 	mov.w	r3, #4294967295
 8023294:	f7ff ff78 	bl	8023188 <BSP_SD_ReadBlocks>
 8023298:	b920      	cbnz	r0, 80232a4 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 802329a:	f7ff ff95 	bl	80231c8 <BSP_SD_GetCardState>
 802329e:	2800      	cmp	r0, #0
 80232a0:	d1fb      	bne.n	802329a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 80232a2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80232a4:	2001      	movs	r0, #1
 80232a6:	e7fc      	b.n	80232a2 <SD_read+0x1a>

080232a8 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80232a8:	4b13      	ldr	r3, [pc, #76]	; (80232f8 <SD_ioctl+0x50>)
{
 80232aa:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80232ac:	781c      	ldrb	r4, [r3, #0]
{
 80232ae:	b089      	sub	sp, #36	; 0x24
 80232b0:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80232b2:	f014 0401 	ands.w	r4, r4, #1
 80232b6:	d11b      	bne.n	80232f0 <SD_ioctl+0x48>

  switch (cmd)
 80232b8:	2903      	cmp	r1, #3
 80232ba:	d803      	bhi.n	80232c4 <SD_ioctl+0x1c>
 80232bc:	e8df f001 	tbb	[pc, r1]
 80232c0:	120c061a 	.word	0x120c061a
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80232c4:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 80232c6:	4620      	mov	r0, r4
 80232c8:	b009      	add	sp, #36	; 0x24
 80232ca:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80232cc:	4668      	mov	r0, sp
 80232ce:	f7ff ff85 	bl	80231dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80232d2:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80232d4:	602b      	str	r3, [r5, #0]
    break;
 80232d6:	e7f6      	b.n	80232c6 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80232d8:	4668      	mov	r0, sp
 80232da:	f7ff ff7f 	bl	80231dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80232de:	9b07      	ldr	r3, [sp, #28]
 80232e0:	802b      	strh	r3, [r5, #0]
    break;
 80232e2:	e7f0      	b.n	80232c6 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 80232e4:	4668      	mov	r0, sp
 80232e6:	f7ff ff79 	bl	80231dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80232ea:	9b07      	ldr	r3, [sp, #28]
 80232ec:	0a5b      	lsrs	r3, r3, #9
 80232ee:	e7f1      	b.n	80232d4 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80232f0:	2403      	movs	r4, #3
 80232f2:	e7e8      	b.n	80232c6 <SD_ioctl+0x1e>
    res = RES_OK;
 80232f4:	460c      	mov	r4, r1
 80232f6:	e7e6      	b.n	80232c6 <SD_ioctl+0x1e>
 80232f8:	20000078 	.word	0x20000078

080232fc <SD_write>:
{
 80232fc:	b508      	push	{r3, lr}
 80232fe:	4608      	mov	r0, r1
 8023300:	4611      	mov	r1, r2
 8023302:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8023304:	f04f 33ff 	mov.w	r3, #4294967295
 8023308:	f7ff ff4e 	bl	80231a8 <BSP_SD_WriteBlocks>
 802330c:	b920      	cbnz	r0, 8023318 <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 802330e:	f7ff ff5b 	bl	80231c8 <BSP_SD_GetCardState>
 8023312:	2800      	cmp	r0, #0
 8023314:	d1fb      	bne.n	802330e <SD_write+0x12>
}
 8023316:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8023318:	2001      	movs	r0, #1
 802331a:	e7fc      	b.n	8023316 <SD_write+0x1a>

0802331c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802331c:	4b03      	ldr	r3, [pc, #12]	; (802332c <disk_status+0x10>)
 802331e:	181a      	adds	r2, r3, r0
 8023320:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8023324:	6843      	ldr	r3, [r0, #4]
 8023326:	7a10      	ldrb	r0, [r2, #8]
 8023328:	685b      	ldr	r3, [r3, #4]
 802332a:	4718      	bx	r3
 802332c:	2000b268 	.word	0x2000b268

08023330 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8023330:	4b06      	ldr	r3, [pc, #24]	; (802334c <disk_initialize+0x1c>)
 8023332:	5c1a      	ldrb	r2, [r3, r0]
 8023334:	b942      	cbnz	r2, 8023348 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8023336:	2201      	movs	r2, #1
 8023338:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 802333a:	181a      	adds	r2, r3, r0
 802333c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8023340:	7a10      	ldrb	r0, [r2, #8]
 8023342:	685b      	ldr	r3, [r3, #4]
 8023344:	681b      	ldr	r3, [r3, #0]
 8023346:	4718      	bx	r3
  }
  return stat;
}
 8023348:	2000      	movs	r0, #0
 802334a:	4770      	bx	lr
 802334c:	2000b268 	.word	0x2000b268

08023350 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8023350:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8023352:	4c05      	ldr	r4, [pc, #20]	; (8023368 <disk_read+0x18>)
 8023354:	1825      	adds	r5, r4, r0
 8023356:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 802335a:	6840      	ldr	r0, [r0, #4]
 802335c:	6884      	ldr	r4, [r0, #8]
 802335e:	7a28      	ldrb	r0, [r5, #8]
 8023360:	46a4      	mov	ip, r4
  return res;
}
 8023362:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8023364:	4760      	bx	ip
 8023366:	bf00      	nop
 8023368:	2000b268 	.word	0x2000b268

0802336c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 802336c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 802336e:	4c05      	ldr	r4, [pc, #20]	; (8023384 <disk_write+0x18>)
 8023370:	1825      	adds	r5, r4, r0
 8023372:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8023376:	6840      	ldr	r0, [r0, #4]
 8023378:	68c4      	ldr	r4, [r0, #12]
 802337a:	7a28      	ldrb	r0, [r5, #8]
 802337c:	46a4      	mov	ip, r4
  return res;
}
 802337e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8023380:	4760      	bx	ip
 8023382:	bf00      	nop
 8023384:	2000b268 	.word	0x2000b268

08023388 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8023388:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 802338a:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 802338c:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 802338e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8023392:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8023396:	4770      	bx	lr

08023398 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8023398:	b530      	push	{r4, r5, lr}
	QWORD rv;

	rv = ptr[7];
	rv = rv << 8 | ptr[6];
	rv = rv << 8 | ptr[5];
	rv = rv << 8 | ptr[4];
 802339a:	6843      	ldr	r3, [r0, #4]
	rv = rv << 8 | ptr[3];
 802339c:	78c4      	ldrb	r4, [r0, #3]
	rv = rv << 8 | ptr[2];
 802339e:	ea44 2103 	orr.w	r1, r4, r3, lsl #8
 80233a2:	7884      	ldrb	r4, [r0, #2]
 80233a4:	0c1b      	lsrs	r3, r3, #16
 80233a6:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[1];
 80233aa:	7844      	ldrb	r4, [r0, #1]
 80233ac:	021b      	lsls	r3, r3, #8
 80233ae:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80233b2:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80233b6:	7804      	ldrb	r4, [r0, #0]
 80233b8:	021b      	lsls	r3, r3, #8
	return rv;
}
 80233ba:	ea44 2001 	orr.w	r0, r4, r1, lsl #8
 80233be:	ea43 6111 	orr.w	r1, r3, r1, lsr #24
 80233c2:	bd30      	pop	{r4, r5, pc}

080233c4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80233c4:	0a0b      	lsrs	r3, r1, #8
 80233c6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80233c8:	7043      	strb	r3, [r0, #1]
 80233ca:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80233cc:	0e09      	lsrs	r1, r1, #24
 80233ce:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80233d0:	70c1      	strb	r1, [r0, #3]
}
 80233d2:	4770      	bx	lr

080233d4 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 80233d4:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 80233d6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80233da:	4290      	cmp	r0, r2
 80233dc:	d1fb      	bne.n	80233d6 <mem_set+0x2>
}
 80233de:	4770      	bx	lr

080233e0 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80233e0:	4a1f      	ldr	r2, [pc, #124]	; (8023460 <inc_lock+0x80>)
{
 80233e2:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 80233e4:	6813      	ldr	r3, [r2, #0]
 80233e6:	6806      	ldr	r6, [r0, #0]
 80233e8:	429e      	cmp	r6, r3
 80233ea:	d107      	bne.n	80233fc <inc_lock+0x1c>
 80233ec:	6855      	ldr	r5, [r2, #4]
 80233ee:	6884      	ldr	r4, [r0, #8]
 80233f0:	42a5      	cmp	r5, r4
 80233f2:	d103      	bne.n	80233fc <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 80233f4:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80233f6:	6894      	ldr	r4, [r2, #8]
 80233f8:	42a5      	cmp	r5, r4
 80233fa:	d01b      	beq.n	8023434 <inc_lock+0x54>
		if (Files[i].fs == dp->obj.fs &&
 80233fc:	6914      	ldr	r4, [r2, #16]
 80233fe:	42b4      	cmp	r4, r6
 8023400:	d107      	bne.n	8023412 <inc_lock+0x32>
 8023402:	6957      	ldr	r7, [r2, #20]
 8023404:	6885      	ldr	r5, [r0, #8]
 8023406:	42af      	cmp	r7, r5
 8023408:	d103      	bne.n	8023412 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 802340a:	6997      	ldr	r7, [r2, #24]
 802340c:	6b05      	ldr	r5, [r0, #48]	; 0x30
 802340e:	42af      	cmp	r7, r5
 8023410:	d019      	beq.n	8023446 <inc_lock+0x66>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8023412:	b10b      	cbz	r3, 8023418 <inc_lock+0x38>
 8023414:	b9ac      	cbnz	r4, 8023442 <inc_lock+0x62>
 8023416:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8023418:	011d      	lsls	r5, r3, #4
 802341a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 802341e:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8023420:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8023422:	6b00      	ldr	r0, [r0, #48]	; 0x30
		Files[i].clu = dp->obj.sclust;
 8023424:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8023426:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8023428:	2000      	movs	r0, #0
 802342a:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 802342c:	b169      	cbz	r1, 802344a <inc_lock+0x6a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 802342e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023432:	e00f      	b.n	8023454 <inc_lock+0x74>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8023434:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8023436:	b141      	cbz	r1, 802344a <inc_lock+0x6a>
 8023438:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 802343c:	8989      	ldrh	r1, [r1, #12]
 802343e:	2900      	cmp	r1, #0
 8023440:	d0f5      	beq.n	802342e <inc_lock+0x4e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8023442:	2000      	movs	r0, #0
 8023444:	e00a      	b.n	802345c <inc_lock+0x7c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8023446:	2301      	movs	r3, #1
 8023448:	e7f5      	b.n	8023436 <inc_lock+0x56>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 802344a:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 802344e:	8989      	ldrh	r1, [r1, #12]
 8023450:	3101      	adds	r1, #1
 8023452:	b289      	uxth	r1, r1
 8023454:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8023458:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 802345a:	8191      	strh	r1, [r2, #12]
}
 802345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802345e:	bf00      	nop
 8023460:	2000b244 	.word	0x2000b244

08023464 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8023464:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	clst -= 2;
 8023466:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8023468:	3b02      	subs	r3, #2
 802346a:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 802346c:	bf83      	ittte	hi
 802346e:	8943      	ldrhhi	r3, [r0, #10]
 8023470:	6c00      	ldrhi	r0, [r0, #64]	; 0x40
 8023472:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8023476:	2000      	movls	r0, #0
}
 8023478:	4770      	bx	lr

0802347a <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 802347a:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 802347e:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8023480:	01d3      	lsls	r3, r2, #7
 8023482:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8023486:	f810 2b01 	ldrb.w	r2, [r0], #1
 802348a:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
 802348e:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8023490:	b2da      	uxtb	r2, r3
	} while (--n);
 8023492:	d1f5      	bne.n	8023480 <sum_sfn+0x6>
	return sum;
}
 8023494:	4610      	mov	r0, r2
 8023496:	4770      	bx	lr

08023498 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8023498:	b510      	push	{r4, lr}
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 802349a:	7841      	ldrb	r1, [r0, #1]
{
 802349c:	4604      	mov	r4, r0
	for (i = sum = 0; i < szblk; i++) {
 802349e:	2000      	movs	r0, #0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80234a0:	3101      	adds	r1, #1
	for (i = sum = 0; i < szblk; i++) {
 80234a2:	4602      	mov	r2, r0
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80234a4:	0149      	lsls	r1, r1, #5
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80234a6:	2a02      	cmp	r2, #2
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80234a8:	bf16      	itet	ne
 80234aa:	5ca3      	ldrbne	r3, [r4, r2]
			i++;
 80234ac:	2203      	moveq	r2, #3
 80234ae:	eb03 33c0 	addne.w	r3, r3, r0, lsl #15
	for (i = sum = 0; i < szblk; i++) {
 80234b2:	f102 0201 	add.w	r2, r2, #1
 80234b6:	bf1e      	ittt	ne
 80234b8:	b29b      	uxthne	r3, r3
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80234ba:	eb03 0350 	addne.w	r3, r3, r0, lsr #1
 80234be:	b298      	uxthne	r0, r3
	for (i = sum = 0; i < szblk; i++) {
 80234c0:	4291      	cmp	r1, r2
 80234c2:	d8f0      	bhi.n	80234a6 <xdir_sum+0xe>
		}
	}
	return sum;
}
 80234c4:	bd10      	pop	{r4, pc}

080234c6 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80234c6:	6802      	ldr	r2, [r0, #0]
{
 80234c8:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80234ca:	b152      	cbz	r2, 80234e2 <get_ldnumber+0x1c>
 80234cc:	4611      	mov	r1, r2
 80234ce:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80234d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80234d4:	2c1f      	cmp	r4, #31
 80234d6:	d90c      	bls.n	80234f2 <get_ldnumber+0x2c>
 80234d8:	2c3a      	cmp	r4, #58	; 0x3a
 80234da:	d1f8      	bne.n	80234ce <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80234dc:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80234de:	428b      	cmp	r3, r1
 80234e0:	d002      	beq.n	80234e8 <get_ldnumber+0x22>
	int vol = -1;
 80234e2:	f04f 30ff 	mov.w	r0, #4294967295
 80234e6:	e005      	b.n	80234f4 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80234e8:	7812      	ldrb	r2, [r2, #0]
 80234ea:	2a30      	cmp	r2, #48	; 0x30
 80234ec:	d1f9      	bne.n	80234e2 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 80234ee:	3301      	adds	r3, #1
 80234f0:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80234f2:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80234f4:	bd10      	pop	{r4, pc}

080234f6 <xname_sum>:
{
 80234f6:	b538      	push	{r3, r4, r5, lr}
 80234f8:	4605      	mov	r5, r0
	WORD sum = 0;
 80234fa:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 80234fc:	f835 0b02 	ldrh.w	r0, [r5], #2
 8023500:	b908      	cbnz	r0, 8023506 <xname_sum+0x10>
}
 8023502:	4620      	mov	r0, r4
 8023504:	bd38      	pop	{r3, r4, r5, pc}
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8023506:	f001 fa53 	bl	80249b0 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 802350a:	0863      	lsrs	r3, r4, #1
 802350c:	b2c2      	uxtb	r2, r0
 802350e:	eb03 33c4 	add.w	r3, r3, r4, lsl #15
 8023512:	fa12 f383 	uxtah	r3, r2, r3
 8023516:	b29a      	uxth	r2, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8023518:	0a03      	lsrs	r3, r0, #8
 802351a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 802351e:	eb03 33c2 	add.w	r3, r3, r2, lsl #15
 8023522:	b29c      	uxth	r4, r3
 8023524:	e7ea      	b.n	80234fc <xname_sum+0x6>

08023526 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8023526:	3801      	subs	r0, #1
 8023528:	440a      	add	r2, r1
			*d++ = *s++;
 802352a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 802352e:	4291      	cmp	r1, r2
			*d++ = *s++;
 8023530:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8023534:	d1f9      	bne.n	802352a <mem_cpy.part.0+0x4>
}
 8023536:	4770      	bx	lr

08023538 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8023538:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 802353a:	7eca      	ldrb	r2, [r1, #27]
 802353c:	7e8b      	ldrb	r3, [r1, #26]
 802353e:	bf08      	it	eq
 8023540:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 8023542:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8023546:	bf02      	ittt	eq
 8023548:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 802354a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 802354e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8023552:	4618      	mov	r0, r3
 8023554:	4770      	bx	lr

08023556 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8023556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 802355a:	6c46      	ldr	r6, [r0, #68]	; 0x44
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 802355c:	f100 0848 	add.w	r8, r0, #72	; 0x48
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8023560:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8023562:	2301      	movs	r3, #1
 8023564:	4632      	mov	r2, r6
 8023566:	4641      	mov	r1, r8
 8023568:	7840      	ldrb	r0, [r0, #1]
 802356a:	f7ff feff 	bl	802336c <disk_write>
 802356e:	4605      	mov	r5, r0
 8023570:	b9a8      	cbnz	r0, 802359e <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8023572:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023574:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8023576:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
 8023578:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 802357a:	4293      	cmp	r3, r2
 802357c:	d202      	bcs.n	8023584 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802357e:	78a7      	ldrb	r7, [r4, #2]
 8023580:	2f01      	cmp	r7, #1
 8023582:	d802      	bhi.n	802358a <sync_window.part.0+0x34>
}
 8023584:	4628      	mov	r0, r5
 8023586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 802358a:	6b23      	ldr	r3, [r4, #48]	; 0x30
					disk_write(fs->drv, fs->win, wsect, 1);
 802358c:	4641      	mov	r1, r8
 802358e:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8023590:	3f01      	subs	r7, #1
					wsect += fs->fsize;
 8023592:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8023594:	2301      	movs	r3, #1
 8023596:	4632      	mov	r2, r6
 8023598:	f7ff fee8 	bl	802336c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802359c:	e7f0      	b.n	8023580 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 802359e:	2501      	movs	r5, #1
 80235a0:	e7f0      	b.n	8023584 <sync_window.part.0+0x2e>

080235a2 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80235a2:	78c3      	ldrb	r3, [r0, #3]
 80235a4:	b10b      	cbz	r3, 80235aa <sync_window+0x8>
 80235a6:	f7ff bfd6 	b.w	8023556 <sync_window.part.0>
}
 80235aa:	4618      	mov	r0, r3
 80235ac:	4770      	bx	lr

080235ae <move_window>:
{
 80235ae:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80235b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80235b2:	4605      	mov	r5, r0
 80235b4:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80235b6:	428b      	cmp	r3, r1
 80235b8:	d010      	beq.n	80235dc <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 80235ba:	f7ff fff2 	bl	80235a2 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80235be:	b960      	cbnz	r0, 80235da <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80235c0:	4622      	mov	r2, r4
 80235c2:	2301      	movs	r3, #1
 80235c4:	f105 0148 	add.w	r1, r5, #72	; 0x48
 80235c8:	7868      	ldrb	r0, [r5, #1]
 80235ca:	f7ff fec1 	bl	8023350 <disk_read>
				res = FR_DISK_ERR;
 80235ce:	2800      	cmp	r0, #0
 80235d0:	bf1c      	itt	ne
 80235d2:	f04f 34ff 	movne.w	r4, #4294967295
 80235d6:	2001      	movne	r0, #1
			fs->winsect = sector;
 80235d8:	646c      	str	r4, [r5, #68]	; 0x44
}
 80235da:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80235dc:	2000      	movs	r0, #0
 80235de:	e7fc      	b.n	80235da <move_window+0x2c>

080235e0 <change_bitmap>:
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80235e0:	3902      	subs	r1, #2
{
 80235e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80235e6:	f001 0407 	and.w	r4, r1, #7
 80235ea:	f04f 0a01 	mov.w	sl, #1
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80235ee:	6c06      	ldr	r6, [r0, #64]	; 0x40
{
 80235f0:	4605      	mov	r5, r0
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80235f2:	fa0a f404 	lsl.w	r4, sl, r4
{
 80235f6:	4617      	mov	r7, r2
 80235f8:	4698      	mov	r8, r3
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80235fa:	eb06 3611 	add.w	r6, r6, r1, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80235fe:	f3c1 09c8 	ubfx	r9, r1, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8023602:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8023604:	4631      	mov	r1, r6
 8023606:	4628      	mov	r0, r5
 8023608:	3601      	adds	r6, #1
 802360a:	f7ff ffd0 	bl	80235ae <move_window>
 802360e:	b118      	cbz	r0, 8023618 <change_bitmap+0x38>
 8023610:	2001      	movs	r0, #1
}
 8023612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023616:	4699      	mov	r9, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8023618:	eb05 0209 	add.w	r2, r5, r9
 802361c:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8023620:	4223      	tst	r3, r4
 8023622:	bf14      	ite	ne
 8023624:	2101      	movne	r1, #1
 8023626:	2100      	moveq	r1, #0
 8023628:	4541      	cmp	r1, r8
 802362a:	d013      	beq.n	8023654 <change_bitmap+0x74>
				fs->win[i] ^= bm;	/* Flip the bit */
 802362c:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 802362e:	3f01      	subs	r7, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8023630:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
				fs->wflag = 1;
 8023634:	f885 a003 	strb.w	sl, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8023638:	d0eb      	beq.n	8023612 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
 802363a:	0064      	lsls	r4, r4, #1
 802363c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8023640:	d1ea      	bne.n	8023618 <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
 8023642:	f109 0301 	add.w	r3, r9, #1
			bm = 1;
 8023646:	2401      	movs	r4, #1
		i = 0;
 8023648:	f04f 0900 	mov.w	r9, #0
		} while (++i < SS(fs));		/* Next byte */
 802364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023650:	d1e1      	bne.n	8023616 <change_bitmap+0x36>
 8023652:	e7d7      	b.n	8023604 <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8023654:	2002      	movs	r0, #2
 8023656:	e7dc      	b.n	8023612 <change_bitmap+0x32>

08023658 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8023658:	2901      	cmp	r1, #1
{
 802365a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802365c:	4603      	mov	r3, r0
 802365e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8023660:	f240 808d 	bls.w	802377e <get_fat+0x126>
	FATFS *fs = obj->fs;
 8023664:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8023666:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8023668:	428a      	cmp	r2, r1
 802366a:	f240 8088 	bls.w	802377e <get_fat+0x126>
		switch (fs->fs_type) {
 802366e:	7832      	ldrb	r2, [r6, #0]
 8023670:	3a01      	subs	r2, #1
 8023672:	2a03      	cmp	r2, #3
 8023674:	f200 8083 	bhi.w	802377e <get_fat+0x126>
 8023678:	e8df f002 	tbb	[pc, r2]
 802367c:	4e3b2902 	.word	0x4e3b2902
			bc = (UINT)clst; bc += bc / 2;
 8023680:	eb04 0554 	add.w	r5, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8023684:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8023686:	4630      	mov	r0, r6
 8023688:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 802368c:	f7ff ff8f 	bl	80235ae <move_window>
 8023690:	b110      	cbz	r0, 8023698 <get_fat+0x40>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8023692:	f04f 30ff 	mov.w	r0, #4294967295
}
 8023696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8023698:	1c6f      	adds	r7, r5, #1
 802369a:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 802369e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80236a0:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80236a2:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80236a4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80236a8:	f895 5048 	ldrb.w	r5, [r5, #72]	; 0x48
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80236ac:	f7ff ff7f 	bl	80235ae <move_window>
 80236b0:	2800      	cmp	r0, #0
 80236b2:	d1ee      	bne.n	8023692 <get_fat+0x3a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80236b4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80236b8:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80236ba:	443e      	add	r6, r7
 80236bc:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 80236c0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80236c4:	bf4c      	ite	mi
 80236c6:	0900      	lsrmi	r0, r0, #4
 80236c8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80236cc:	e7e3      	b.n	8023696 <get_fat+0x3e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80236ce:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80236d0:	4630      	mov	r0, r6
 80236d2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80236d6:	f7ff ff6a 	bl	80235ae <move_window>
 80236da:	2800      	cmp	r0, #0
 80236dc:	d1d9      	bne.n	8023692 <get_fat+0x3a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80236de:	0061      	lsls	r1, r4, #1
 80236e0:	3648      	adds	r6, #72	; 0x48
 80236e2:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 80236e6:	1873      	adds	r3, r6, r1
	rv = rv << 8 | ptr[0];
 80236e8:	5c70      	ldrb	r0, [r6, r1]
 80236ea:	785c      	ldrb	r4, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80236ec:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
 80236f0:	e7d1      	b.n	8023696 <get_fat+0x3e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80236f2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80236f4:	4630      	mov	r0, r6
 80236f6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80236fa:	f7ff ff58 	bl	80235ae <move_window>
 80236fe:	2800      	cmp	r0, #0
 8023700:	d1c7      	bne.n	8023692 <get_fat+0x3a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8023702:	00a4      	lsls	r4, r4, #2
 8023704:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8023708:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 802370c:	4420      	add	r0, r4
 802370e:	f7ff fe3b 	bl	8023388 <ld_dword>
 8023712:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8023716:	e7be      	b.n	8023696 <get_fat+0x3e>
			if (obj->objsize) {
 8023718:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 802371c:	ea50 0201 	orrs.w	r2, r0, r1
 8023720:	d02d      	beq.n	802377e <get_fat+0x126>
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8023722:	79dd      	ldrb	r5, [r3, #7]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8023724:	689a      	ldr	r2, [r3, #8]
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8023726:	2d02      	cmp	r5, #2
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8023728:	8977      	ldrh	r7, [r6, #10]
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 802372a:	eba4 0202 	sub.w	r2, r4, r2
				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 802372e:	d10d      	bne.n	802374c <get_fat+0xf4>
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8023730:	f110 33ff 	adds.w	r3, r0, #4294967295
 8023734:	f141 31ff 	adc.w	r1, r1, #4294967295
 8023738:	0a5b      	lsrs	r3, r3, #9
 802373a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 802373e:	fbb3 f3f7 	udiv	r3, r3, r7
					if (cofs <= clen) {
 8023742:	429a      	cmp	r2, r3
 8023744:	d81b      	bhi.n	802377e <get_fat+0x126>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8023746:	d01c      	beq.n	8023782 <get_fat+0x12a>
 8023748:	1c60      	adds	r0, r4, #1
 802374a:	e7a4      	b.n	8023696 <get_fat+0x3e>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 802374c:	2d03      	cmp	r5, #3
 802374e:	d102      	bne.n	8023756 <get_fat+0xfe>
 8023750:	6999      	ldr	r1, [r3, #24]
 8023752:	4291      	cmp	r1, r2
 8023754:	d8f8      	bhi.n	8023748 <get_fat+0xf0>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8023756:	69db      	ldr	r3, [r3, #28]
 8023758:	b99b      	cbnz	r3, 8023782 <get_fat+0x12a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 802375a:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 802375c:	4630      	mov	r0, r6
 802375e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8023762:	f7ff ff24 	bl	80235ae <move_window>
 8023766:	2800      	cmp	r0, #0
 8023768:	d193      	bne.n	8023692 <get_fat+0x3a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 802376a:	00a0      	lsls	r0, r4, #2
 802376c:	3648      	adds	r6, #72	; 0x48
 802376e:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8023772:	4430      	add	r0, r6
 8023774:	f7ff fe08 	bl	8023388 <ld_dword>
 8023778:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802377c:	e78b      	b.n	8023696 <get_fat+0x3e>
		val = 1;	/* Internal error */
 802377e:	2001      	movs	r0, #1
 8023780:	e789      	b.n	8023696 <get_fat+0x3e>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8023782:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 8023786:	e786      	b.n	8023696 <get_fat+0x3e>

08023788 <dir_sdi>:
{
 8023788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 802378a:	6806      	ldr	r6, [r0, #0]
{
 802378c:	4604      	mov	r4, r0
 802378e:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8023790:	7833      	ldrb	r3, [r6, #0]
 8023792:	2b04      	cmp	r3, #4
 8023794:	bf0c      	ite	eq
 8023796:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 802379a:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 802379e:	428a      	cmp	r2, r1
 80237a0:	d801      	bhi.n	80237a6 <dir_sdi+0x1e>
		return FR_INT_ERR;
 80237a2:	2002      	movs	r0, #2
}
 80237a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80237a6:	06ca      	lsls	r2, r1, #27
 80237a8:	d1fb      	bne.n	80237a2 <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80237aa:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 80237ac:	6301      	str	r1, [r0, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80237ae:	b9d2      	cbnz	r2, 80237e6 <dir_sdi+0x5e>
 80237b0:	2b02      	cmp	r3, #2
 80237b2:	d813      	bhi.n	80237dc <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80237b4:	8933      	ldrh	r3, [r6, #8]
 80237b6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80237ba:	d9f2      	bls.n	80237a2 <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
 80237bc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80237be:	63a3      	str	r3, [r4, #56]	; 0x38
	if (!dp->sect) return FR_INT_ERR;
 80237c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 80237c2:	6362      	str	r2, [r4, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80237c4:	2b00      	cmp	r3, #0
 80237c6:	d0ec      	beq.n	80237a2 <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80237c8:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80237cc:	3648      	adds	r6, #72	; 0x48
 80237ce:	f3c5 0508 	ubfx	r5, r5, #0, #9
	return FR_OK;
 80237d2:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80237d4:	63a3      	str	r3, [r4, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80237d6:	4435      	add	r5, r6
 80237d8:	63e5      	str	r5, [r4, #60]	; 0x3c
	return FR_OK;
 80237da:	e7e3      	b.n	80237a4 <dir_sdi+0x1c>
		clst = fs->dirbase;
 80237dc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80237de:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d0e7      	beq.n	80237b4 <dir_sdi+0x2c>
 80237e4:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80237e6:	8977      	ldrh	r7, [r6, #10]
 80237e8:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80237ea:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80237ec:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80237ee:	d204      	bcs.n	80237fa <dir_sdi+0x72>
		dp->sect = clust2sect(fs, clst);
 80237f0:	4630      	mov	r0, r6
 80237f2:	f7ff fe37 	bl	8023464 <clust2sect>
 80237f6:	63a0      	str	r0, [r4, #56]	; 0x38
 80237f8:	e7e2      	b.n	80237c0 <dir_sdi+0x38>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80237fa:	4620      	mov	r0, r4
 80237fc:	f7ff ff2c 	bl	8023658 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8023800:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8023802:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8023804:	d006      	beq.n	8023814 <dir_sdi+0x8c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8023806:	2801      	cmp	r0, #1
 8023808:	d9cb      	bls.n	80237a2 <dir_sdi+0x1a>
 802380a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 802380c:	4283      	cmp	r3, r0
 802380e:	d9c8      	bls.n	80237a2 <dir_sdi+0x1a>
			ofs -= csz;
 8023810:	1bed      	subs	r5, r5, r7
 8023812:	e7ea      	b.n	80237ea <dir_sdi+0x62>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8023814:	2001      	movs	r0, #1
 8023816:	e7c5      	b.n	80237a4 <dir_sdi+0x1c>

08023818 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8023818:	2901      	cmp	r1, #1
{
 802381a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802381e:	4606      	mov	r6, r0
 8023820:	460c      	mov	r4, r1
 8023822:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8023824:	d908      	bls.n	8023838 <put_fat+0x20>
 8023826:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8023828:	428b      	cmp	r3, r1
 802382a:	d905      	bls.n	8023838 <put_fat+0x20>
		switch (fs->fs_type) {
 802382c:	7803      	ldrb	r3, [r0, #0]
 802382e:	2b02      	cmp	r3, #2
 8023830:	d062      	beq.n	80238f8 <put_fat+0xe0>
 8023832:	d803      	bhi.n	802383c <put_fat+0x24>
 8023834:	2b01      	cmp	r3, #1
 8023836:	d022      	beq.n	802387e <put_fat+0x66>
 8023838:	2502      	movs	r5, #2
 802383a:	e052      	b.n	80238e2 <put_fat+0xca>
 802383c:	3b03      	subs	r3, #3
 802383e:	2b01      	cmp	r3, #1
 8023840:	d8fa      	bhi.n	8023838 <put_fat+0x20>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8023842:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8023844:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8023848:	f7ff feb1 	bl	80235ae <move_window>
			if (res != FR_OK) break;
 802384c:	4605      	mov	r5, r0
 802384e:	2800      	cmp	r0, #0
 8023850:	d147      	bne.n	80238e2 <put_fat+0xca>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8023852:	00a4      	lsls	r4, r4, #2
 8023854:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8023858:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 802385c:	441c      	add	r4, r3
 802385e:	7833      	ldrb	r3, [r6, #0]
 8023860:	2b04      	cmp	r3, #4
 8023862:	d007      	beq.n	8023874 <put_fat+0x5c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8023864:	4620      	mov	r0, r4
 8023866:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 802386a:	f7ff fd8d 	bl	8023388 <ld_dword>
 802386e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8023872:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8023874:	4639      	mov	r1, r7
 8023876:	4620      	mov	r0, r4
 8023878:	f7ff fda4 	bl	80233c4 <st_dword>
 802387c:	e02f      	b.n	80238de <put_fat+0xc6>
			bc = (UINT)clst; bc += bc / 2;
 802387e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8023882:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8023884:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8023888:	f7ff fe91 	bl	80235ae <move_window>
			if (res != FR_OK) break;
 802388c:	4605      	mov	r5, r0
 802388e:	bb40      	cbnz	r0, 80238e2 <put_fat+0xca>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8023890:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8023894:	f106 0948 	add.w	r9, r6, #72	; 0x48
 8023898:	f108 0a01 	add.w	sl, r8, #1
 802389c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80238a0:	bf08      	it	eq
 80238a2:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80238a4:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80238a6:	bf1f      	itttt	ne
 80238a8:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80238ac:	f003 020f 	andne.w	r2, r3, #15
 80238b0:	013b      	lslne	r3, r7, #4
 80238b2:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80238b6:	bf18      	it	ne
 80238b8:	4313      	orrne	r3, r2
 80238ba:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 80238be:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80238c0:	6bb1      	ldr	r1, [r6, #56]	; 0x38
			fs->wflag = 1;
 80238c2:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80238c4:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80238c8:	f7ff fe71 	bl	80235ae <move_window>
			if (res != FR_OK) break;
 80238cc:	4605      	mov	r5, r0
 80238ce:	b940      	cbnz	r0, 80238e2 <put_fat+0xca>
			p = fs->win + bc % SS(fs);
 80238d0:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80238d4:	b144      	cbz	r4, 80238e8 <put_fat+0xd0>
 80238d6:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80238da:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80238de:	2301      	movs	r3, #1
 80238e0:	70f3      	strb	r3, [r6, #3]
}
 80238e2:	4628      	mov	r0, r5
 80238e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80238e8:	f819 300a 	ldrb.w	r3, [r9, sl]
 80238ec:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80238f0:	f023 030f 	bic.w	r3, r3, #15
 80238f4:	431f      	orrs	r7, r3
 80238f6:	e7f0      	b.n	80238da <put_fat+0xc2>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80238f8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80238fa:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80238fe:	f7ff fe56 	bl	80235ae <move_window>
			if (res != FR_OK) break;
 8023902:	4605      	mov	r5, r0
 8023904:	2800      	cmp	r0, #0
 8023906:	d1ec      	bne.n	80238e2 <put_fat+0xca>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8023908:	0064      	lsls	r4, r4, #1
 802390a:	f106 0348 	add.w	r3, r6, #72	; 0x48
 802390e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8023912:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8023914:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8023916:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 802391a:	704f      	strb	r7, [r1, #1]
			fs->wflag = 1;
 802391c:	e7df      	b.n	80238de <put_fat+0xc6>

0802391e <fill_last_frag>:
{
 802391e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023920:	4604      	mov	r4, r0
 8023922:	460e      	mov	r6, r1
 8023924:	4617      	mov	r7, r2
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8023926:	69e3      	ldr	r3, [r4, #28]
 8023928:	b90b      	cbnz	r3, 802392e <fill_last_frag+0x10>
	return FR_OK;
 802392a:	4618      	mov	r0, r3
}
 802392c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 802392e:	2b01      	cmp	r3, #1
 8023930:	eba6 0503 	sub.w	r5, r6, r3
 8023934:	6820      	ldr	r0, [r4, #0]
 8023936:	bf8c      	ite	hi
 8023938:	1caa      	addhi	r2, r5, #2
 802393a:	463a      	movls	r2, r7
 802393c:	1c69      	adds	r1, r5, #1
 802393e:	f7ff ff6b 	bl	8023818 <put_fat>
		if (res != FR_OK) return res;
 8023942:	2800      	cmp	r0, #0
 8023944:	d1f2      	bne.n	802392c <fill_last_frag+0xe>
		obj->n_frag--;
 8023946:	69e3      	ldr	r3, [r4, #28]
 8023948:	3b01      	subs	r3, #1
 802394a:	61e3      	str	r3, [r4, #28]
 802394c:	e7eb      	b.n	8023926 <fill_last_frag+0x8>

0802394e <create_chain>:
{
 802394e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023952:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 8023954:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8023956:	4688      	mov	r8, r1
 8023958:	2900      	cmp	r1, #0
 802395a:	d14e      	bne.n	80239fa <create_chain+0xac>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 802395c:	696f      	ldr	r7, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 802395e:	2f00      	cmp	r7, #0
 8023960:	d05b      	beq.n	8023a1a <create_chain+0xcc>
 8023962:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8023964:	429f      	cmp	r7, r3
 8023966:	bf28      	it	cs
 8023968:	2701      	movcs	r7, #1
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 802396a:	782b      	ldrb	r3, [r5, #0]
 802396c:	2b04      	cmp	r3, #4
 802396e:	f040 8095 	bne.w	8023a9c <create_chain+0x14e>
	if (clst >= fs->n_fatent - 2) clst = 0;
 8023972:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8023974:	f1a7 0a02 	sub.w	sl, r7, #2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8023978:	f04f 0b01 	mov.w	fp, #1
	if (clst >= fs->n_fatent - 2) clst = 0;
 802397c:	3b02      	subs	r3, #2
 802397e:	459a      	cmp	sl, r3
 8023980:	bf28      	it	cs
 8023982:	f04f 0a00 	movcs.w	sl, #0
	scl = val = clst; ctr = 0;
 8023986:	46d1      	mov	r9, sl
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8023988:	6c29      	ldr	r1, [r5, #64]	; 0x40
 802398a:	4628      	mov	r0, r5
 802398c:	eb01 3119 	add.w	r1, r1, r9, lsr #12
 8023990:	f7ff fe0d 	bl	80235ae <move_window>
 8023994:	2800      	cmp	r0, #0
 8023996:	d14c      	bne.n	8023a32 <create_chain+0xe4>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8023998:	f009 0307 	and.w	r3, r9, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 802399c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 802399e:	f3c9 01c8 	ubfx	r1, r9, #3, #9
 80239a2:	fa0b f303 	lsl.w	r3, fp, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80239a6:	1e90      	subs	r0, r2, #2
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80239a8:	b2db      	uxtb	r3, r3
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80239aa:	186a      	adds	r2, r5, r1
			bm = 1;
 80239ac:	464c      	mov	r4, r9
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80239ae:	f109 0901 	add.w	r9, r9, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80239b2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80239b6:	4581      	cmp	r9, r0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80239b8:	ea02 0203 	and.w	r2, r2, r3
 80239bc:	bf33      	iteet	cc
 80239be:	005b      	lslcc	r3, r3, #1
					val = 0; bm = 0; i = SS(fs);
 80239c0:	2300      	movcs	r3, #0
 80239c2:	f44f 7100 	movcs.w	r1, #512	; 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80239c6:	b2db      	uxtbcc	r3, r3
					val = 0; bm = 0; i = SS(fs);
 80239c8:	bf28      	it	cs
 80239ca:	4699      	movcs	r9, r3
				if (!bv) {	/* Is it a free cluster? */
 80239cc:	bb3a      	cbnz	r2, 8023a1e <create_chain+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80239ce:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80239d0:	1e63      	subs	r3, r4, #1
 80239d2:	3303      	adds	r3, #3
 80239d4:	d817      	bhi.n	8023a06 <create_chain+0xb8>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80239d6:	2301      	movs	r3, #1
 80239d8:	4621      	mov	r1, r4
 80239da:	4628      	mov	r0, r5
 80239dc:	461a      	mov	r2, r3
 80239de:	f7ff fdff 	bl	80235e0 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 80239e2:	2802      	cmp	r0, #2
 80239e4:	d00e      	beq.n	8023a04 <create_chain+0xb6>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80239e6:	2801      	cmp	r0, #1
 80239e8:	f000 8081 	beq.w	8023aee <create_chain+0x1a0>
		if (clst == 0) {							/* Is it a new chain? */
 80239ec:	f1b8 0f00 	cmp.w	r8, #0
 80239f0:	d124      	bne.n	8023a3c <create_chain+0xee>
			obj->stat = 2;							/* Set status 'contiguous' */
 80239f2:	2302      	movs	r3, #2
 80239f4:	71f3      	strb	r3, [r6, #7]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80239f6:	b928      	cbnz	r0, 8023a04 <create_chain+0xb6>
 80239f8:	e042      	b.n	8023a80 <create_chain+0x132>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80239fa:	f7ff fe2d 	bl	8023658 <get_fat>
		if (cs < 2) return 1;				/* Invalid FAT value */
 80239fe:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8023a00:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8023a02:	d803      	bhi.n	8023a0c <create_chain+0xbe>
 8023a04:	2401      	movs	r4, #1
}
 8023a06:	4620      	mov	r0, r4
 8023a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8023a0c:	1c43      	adds	r3, r0, #1
 8023a0e:	d06e      	beq.n	8023aee <create_chain+0x1a0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8023a10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8023a12:	4283      	cmp	r3, r0
 8023a14:	d8f7      	bhi.n	8023a06 <create_chain+0xb8>
 8023a16:	4647      	mov	r7, r8
 8023a18:	e7a7      	b.n	802396a <create_chain+0x1c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8023a1a:	2701      	movs	r7, #1
 8023a1c:	e7a5      	b.n	802396a <create_chain+0x1c>
				if (val == clst) return 0;	/* All cluster scanned? */
 8023a1e:	45ca      	cmp	sl, r9
 8023a20:	d00a      	beq.n	8023a38 <create_chain+0xea>
			} while (bm);
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	d1c1      	bne.n	80239aa <create_chain+0x5c>
		} while (++i < SS(fs));
 8023a26:	3101      	adds	r1, #1
 8023a28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8023a2c:	d2ac      	bcs.n	8023988 <create_chain+0x3a>
			bm = 1;
 8023a2e:	2301      	movs	r3, #1
 8023a30:	e7bb      	b.n	80239aa <create_chain+0x5c>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8023a32:	f04f 34ff 	mov.w	r4, #4294967295
 8023a36:	e7cb      	b.n	80239d0 <create_chain+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
 8023a38:	2400      	movs	r4, #0
 8023a3a:	e7c9      	b.n	80239d0 <create_chain+0x82>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8023a3c:	79f3      	ldrb	r3, [r6, #7]
 8023a3e:	2b02      	cmp	r3, #2
 8023a40:	d107      	bne.n	8023a52 <create_chain+0x104>
 8023a42:	1c7b      	adds	r3, r7, #1
 8023a44:	42a3      	cmp	r3, r4
 8023a46:	d0d6      	beq.n	80239f6 <create_chain+0xa8>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8023a48:	68b3      	ldr	r3, [r6, #8]
 8023a4a:	1aff      	subs	r7, r7, r3
				obj->stat = 3;						/* Change status 'just fragmented' */
 8023a4c:	2303      	movs	r3, #3
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8023a4e:	61b7      	str	r7, [r6, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8023a50:	71f3      	strb	r3, [r6, #7]
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8023a52:	f108 0201 	add.w	r2, r8, #1
 8023a56:	69f3      	ldr	r3, [r6, #28]
 8023a58:	42a2      	cmp	r2, r4
 8023a5a:	d105      	bne.n	8023a68 <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8023a5c:	b113      	cbz	r3, 8023a64 <create_chain+0x116>
 8023a5e:	3301      	adds	r3, #1
 8023a60:	61f3      	str	r3, [r6, #28]
 8023a62:	e7c8      	b.n	80239f6 <create_chain+0xa8>
 8023a64:	2302      	movs	r3, #2
 8023a66:	e7fb      	b.n	8023a60 <create_chain+0x112>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8023a68:	b90b      	cbnz	r3, 8023a6e <create_chain+0x120>
 8023a6a:	2301      	movs	r3, #1
 8023a6c:	61f3      	str	r3, [r6, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8023a6e:	4622      	mov	r2, r4
 8023a70:	4641      	mov	r1, r8
 8023a72:	4630      	mov	r0, r6
 8023a74:	f7ff ff53 	bl	802391e <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 8023a78:	2800      	cmp	r0, #0
 8023a7a:	d136      	bne.n	8023aea <create_chain+0x19c>
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	61f3      	str	r3, [r6, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8023a80:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8023a82:	69ab      	ldr	r3, [r5, #24]
 8023a84:	3a02      	subs	r2, #2
		fs->last_clst = ncl;
 8023a86:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8023a88:	4293      	cmp	r3, r2
 8023a8a:	bf9c      	itt	ls
 8023a8c:	f103 33ff 	addls.w	r3, r3, #4294967295
 8023a90:	61ab      	strls	r3, [r5, #24]
		fs->fsi_flag |= 1;
 8023a92:	792b      	ldrb	r3, [r5, #4]
 8023a94:	f043 0301 	orr.w	r3, r3, #1
 8023a98:	712b      	strb	r3, [r5, #4]
 8023a9a:	e7b4      	b.n	8023a06 <create_chain+0xb8>
 8023a9c:	463c      	mov	r4, r7
			ncl++;							/* Next cluster */
 8023a9e:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8023aa0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8023aa2:	42a3      	cmp	r3, r4
 8023aa4:	d804      	bhi.n	8023ab0 <create_chain+0x162>
				if (ncl > scl) return 0;	/* No free cluster */
 8023aa6:	2f01      	cmp	r7, #1
 8023aa8:	d801      	bhi.n	8023aae <create_chain+0x160>
 8023aaa:	2400      	movs	r4, #0
 8023aac:	e7ab      	b.n	8023a06 <create_chain+0xb8>
				ncl = 2;
 8023aae:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8023ab0:	4621      	mov	r1, r4
 8023ab2:	4630      	mov	r0, r6
 8023ab4:	f7ff fdd0 	bl	8023658 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8023ab8:	b130      	cbz	r0, 8023ac8 <create_chain+0x17a>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8023aba:	2801      	cmp	r0, #1
 8023abc:	d0a2      	beq.n	8023a04 <create_chain+0xb6>
 8023abe:	3001      	adds	r0, #1
 8023ac0:	d015      	beq.n	8023aee <create_chain+0x1a0>
			if (ncl == scl) return 0;		/* No free cluster */
 8023ac2:	42bc      	cmp	r4, r7
 8023ac4:	d1eb      	bne.n	8023a9e <create_chain+0x150>
 8023ac6:	e7f0      	b.n	8023aaa <create_chain+0x15c>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8023ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8023acc:	4621      	mov	r1, r4
 8023ace:	4628      	mov	r0, r5
 8023ad0:	f7ff fea2 	bl	8023818 <put_fat>
		if (res == FR_OK && clst != 0) {
 8023ad4:	b948      	cbnz	r0, 8023aea <create_chain+0x19c>
 8023ad6:	f1b8 0f00 	cmp.w	r8, #0
 8023ada:	d0d1      	beq.n	8023a80 <create_chain+0x132>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8023adc:	4622      	mov	r2, r4
 8023ade:	4641      	mov	r1, r8
 8023ae0:	4628      	mov	r0, r5
 8023ae2:	f7ff fe99 	bl	8023818 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8023ae6:	2800      	cmp	r0, #0
 8023ae8:	d0ca      	beq.n	8023a80 <create_chain+0x132>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8023aea:	2801      	cmp	r0, #1
 8023aec:	d18a      	bne.n	8023a04 <create_chain+0xb6>
 8023aee:	f04f 34ff 	mov.w	r4, #4294967295
 8023af2:	e788      	b.n	8023a06 <create_chain+0xb8>

08023af4 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8023af4:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8023af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8023afa:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8023afe:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8023b00:	4605      	mov	r5, r0
 8023b02:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8023b04:	b1c3      	cbz	r3, 8023b38 <dir_next+0x44>
	FATFS *fs = dp->obj.fs;
 8023b06:	6804      	ldr	r4, [r0, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8023b08:	7822      	ldrb	r2, [r4, #0]
 8023b0a:	2a04      	cmp	r2, #4
 8023b0c:	bf0c      	ite	eq
 8023b0e:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8023b12:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8023b16:	4542      	cmp	r2, r8
 8023b18:	d90e      	bls.n	8023b38 <dir_next+0x44>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8023b1a:	f3c8 0908 	ubfx	r9, r8, #0, #9
 8023b1e:	f1b9 0f00 	cmp.w	r9, #0
 8023b22:	d150      	bne.n	8023bc6 <dir_next+0xd2>
		dp->sect++;				/* Next sector */
 8023b24:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8023b26:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8023b28:	6383      	str	r3, [r0, #56]	; 0x38
		if (!dp->clust) {		/* Static table */
 8023b2a:	b939      	cbnz	r1, 8023b3c <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8023b2c:	8923      	ldrh	r3, [r4, #8]
 8023b2e:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8023b32:	d848      	bhi.n	8023bc6 <dir_next+0xd2>
				dp->sect = 0; return FR_NO_FILE;
 8023b34:	2300      	movs	r3, #0
 8023b36:	63ab      	str	r3, [r5, #56]	; 0x38
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8023b38:	2004      	movs	r0, #4
 8023b3a:	e00a      	b.n	8023b52 <dir_next+0x5e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8023b3c:	8967      	ldrh	r7, [r4, #10]
 8023b3e:	3f01      	subs	r7, #1
 8023b40:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8023b44:	d13f      	bne.n	8023bc6 <dir_next+0xd2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8023b46:	f7ff fd87 	bl	8023658 <get_fat>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8023b4a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8023b4c:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8023b4e:	d802      	bhi.n	8023b56 <dir_next+0x62>
 8023b50:	2002      	movs	r0, #2
}
 8023b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8023b56:	1c42      	adds	r2, r0, #1
 8023b58:	d101      	bne.n	8023b5e <dir_next+0x6a>
 8023b5a:	2001      	movs	r0, #1
 8023b5c:	e7f9      	b.n	8023b52 <dir_next+0x5e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8023b5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023b60:	4283      	cmp	r3, r0
 8023b62:	d82a      	bhi.n	8023bba <dir_next+0xc6>
					if (!stretch) {								/* If no stretch, report EOT */
 8023b64:	f1ba 0f00 	cmp.w	sl, #0
 8023b68:	d0e4      	beq.n	8023b34 <dir_next+0x40>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8023b6a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8023b6c:	4628      	mov	r0, r5
 8023b6e:	f7ff feee 	bl	802394e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8023b72:	4606      	mov	r6, r0
 8023b74:	2800      	cmp	r0, #0
 8023b76:	d039      	beq.n	8023bec <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8023b78:	2801      	cmp	r0, #1
 8023b7a:	d0e9      	beq.n	8023b50 <dir_next+0x5c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8023b7c:	1c43      	adds	r3, r0, #1
 8023b7e:	d0ec      	beq.n	8023b5a <dir_next+0x66>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8023b80:	79eb      	ldrb	r3, [r5, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8023b82:	4620      	mov	r0, r4
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8023b84:	f043 0304 	orr.w	r3, r3, #4
 8023b88:	71eb      	strb	r3, [r5, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8023b8a:	f7ff fd0a 	bl	80235a2 <sync_window>
 8023b8e:	4601      	mov	r1, r0
 8023b90:	2800      	cmp	r0, #0
 8023b92:	d1e2      	bne.n	8023b5a <dir_next+0x66>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8023b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023b98:	f104 0048 	add.w	r0, r4, #72	; 0x48
						fs->wflag = 1;
 8023b9c:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8023ba0:	f7ff fc18 	bl	80233d4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023ba4:	4631      	mov	r1, r6
 8023ba6:	4620      	mov	r0, r4
 8023ba8:	f7ff fc5c 	bl	8023464 <clust2sect>
 8023bac:	6460      	str	r0, [r4, #68]	; 0x44
 8023bae:	8963      	ldrh	r3, [r4, #10]
 8023bb0:	42bb      	cmp	r3, r7
 8023bb2:	d80f      	bhi.n	8023bd4 <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 8023bb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8023bb6:	1bdf      	subs	r7, r3, r7
 8023bb8:	6467      	str	r7, [r4, #68]	; 0x44
				dp->sect = clust2sect(fs, clst);
 8023bba:	4631      	mov	r1, r6
 8023bbc:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 8023bbe:	636e      	str	r6, [r5, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8023bc0:	f7ff fc50 	bl	8023464 <clust2sect>
 8023bc4:	63a8      	str	r0, [r5, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8023bc6:	3448      	adds	r4, #72	; 0x48
	return FR_OK;
 8023bc8:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8023bca:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8023bce:	444c      	add	r4, r9
 8023bd0:	63ec      	str	r4, [r5, #60]	; 0x3c
	return FR_OK;
 8023bd2:	e7be      	b.n	8023b52 <dir_next+0x5e>
						fs->wflag = 1;
 8023bd4:	4620      	mov	r0, r4
 8023bd6:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8023bda:	f7ff fcbc 	bl	8023556 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8023bde:	2800      	cmp	r0, #0
 8023be0:	d1bb      	bne.n	8023b5a <dir_next+0x66>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8023be2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8023be4:	3701      	adds	r7, #1
 8023be6:	3301      	adds	r3, #1
 8023be8:	6463      	str	r3, [r4, #68]	; 0x44
 8023bea:	e7e0      	b.n	8023bae <dir_next+0xba>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8023bec:	2007      	movs	r0, #7
 8023bee:	e7b0      	b.n	8023b52 <dir_next+0x5e>

08023bf0 <load_xdir>:
{
 8023bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023bf4:	4605      	mov	r5, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8023bf6:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 8023bf8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8023bfa:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 8023bfc:	f7ff fcd7 	bl	80235ae <move_window>
	if (res != FR_OK) return res;
 8023c00:	4604      	mov	r4, r0
 8023c02:	2800      	cmp	r0, #0
 8023c04:	d159      	bne.n	8023cba <load_xdir+0xca>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8023c06:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8023c08:	780b      	ldrb	r3, [r1, #0]
 8023c0a:	2b85      	cmp	r3, #133	; 0x85
 8023c0c:	d154      	bne.n	8023cb8 <load_xdir+0xc8>
	if (cnt) {
 8023c0e:	2220      	movs	r2, #32
 8023c10:	4630      	mov	r0, r6
 8023c12:	f7ff fc88 	bl	8023526 <mem_cpy.part.0>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8023c16:	7877      	ldrb	r7, [r6, #1]
 8023c18:	3701      	adds	r7, #1
 8023c1a:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8023c1c:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 8023c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023c24:	d848      	bhi.n	8023cb8 <load_xdir+0xc8>
	res = dir_next(dp, 0);
 8023c26:	4621      	mov	r1, r4
 8023c28:	4628      	mov	r0, r5
 8023c2a:	f7ff ff63 	bl	8023af4 <dir_next>
	if (res != FR_OK) return res;
 8023c2e:	4604      	mov	r4, r0
 8023c30:	2800      	cmp	r0, #0
 8023c32:	d142      	bne.n	8023cba <load_xdir+0xca>
	res = move_window(dp->obj.fs, dp->sect);
 8023c34:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8023c36:	6828      	ldr	r0, [r5, #0]
 8023c38:	f7ff fcb9 	bl	80235ae <move_window>
	if (res != FR_OK) return res;
 8023c3c:	4604      	mov	r4, r0
 8023c3e:	2800      	cmp	r0, #0
 8023c40:	d13b      	bne.n	8023cba <load_xdir+0xca>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8023c42:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8023c44:	780b      	ldrb	r3, [r1, #0]
 8023c46:	2bc0      	cmp	r3, #192	; 0xc0
 8023c48:	d136      	bne.n	8023cb8 <load_xdir+0xc8>
	if (cnt) {
 8023c4a:	2220      	movs	r2, #32
 8023c4c:	18b0      	adds	r0, r6, r2
 8023c4e:	f7ff fc6a 	bl	8023526 <mem_cpy.part.0>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8023c52:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8023c56:	220f      	movs	r2, #15
 8023c58:	332c      	adds	r3, #44	; 0x2c
 8023c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8023c5e:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 8023c62:	d329      	bcc.n	8023cb8 <load_xdir+0xc8>
	i = SZDIRE * 2;	/* C1 offset */
 8023c64:	f04f 0840 	mov.w	r8, #64	; 0x40
		res = dir_next(dp, 0);
 8023c68:	2100      	movs	r1, #0
 8023c6a:	4628      	mov	r0, r5
 8023c6c:	f7ff ff42 	bl	8023af4 <dir_next>
		if (res != FR_OK) return res;
 8023c70:	4604      	mov	r4, r0
 8023c72:	bb10      	cbnz	r0, 8023cba <load_xdir+0xca>
		res = move_window(dp->obj.fs, dp->sect);
 8023c74:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8023c76:	6828      	ldr	r0, [r5, #0]
 8023c78:	f7ff fc99 	bl	80235ae <move_window>
		if (res != FR_OK) return res;
 8023c7c:	4604      	mov	r4, r0
 8023c7e:	b9e0      	cbnz	r0, 8023cba <load_xdir+0xca>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8023c80:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8023c82:	780b      	ldrb	r3, [r1, #0]
 8023c84:	2bc1      	cmp	r3, #193	; 0xc1
 8023c86:	d117      	bne.n	8023cb8 <load_xdir+0xc8>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8023c88:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8023c8c:	d204      	bcs.n	8023c98 <load_xdir+0xa8>
	if (cnt) {
 8023c8e:	2220      	movs	r2, #32
 8023c90:	eb06 0008 	add.w	r0, r6, r8
 8023c94:	f7ff fc47 	bl	8023526 <mem_cpy.part.0>
	} while ((i += SZDIRE) < sz_ent);
 8023c98:	f108 0820 	add.w	r8, r8, #32
 8023c9c:	4547      	cmp	r7, r8
 8023c9e:	d8e3      	bhi.n	8023c68 <load_xdir+0x78>
	if (i <= MAXDIRB(_MAX_LFN)) {
 8023ca0:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8023ca4:	d809      	bhi.n	8023cba <load_xdir+0xca>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8023ca6:	4630      	mov	r0, r6
 8023ca8:	f7ff fbf6 	bl	8023498 <xdir_sum>
	rv = rv << 8 | ptr[0];
 8023cac:	78f2      	ldrb	r2, [r6, #3]
 8023cae:	78b3      	ldrb	r3, [r6, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8023cb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8023cb4:	4298      	cmp	r0, r3
 8023cb6:	d000      	beq.n	8023cba <load_xdir+0xca>
 8023cb8:	2402      	movs	r4, #2
}
 8023cba:	4620      	mov	r0, r4
 8023cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023cc0 <load_obj_dir>:
	dp->obj.fs = obj->fs;
 8023cc0:	680b      	ldr	r3, [r1, #0]
{
 8023cc2:	b510      	push	{r4, lr}
	dp->obj.fs = obj->fs;
 8023cc4:	6003      	str	r3, [r0, #0]
{
 8023cc6:	4604      	mov	r4, r0
	dp->obj.sclust = obj->c_scl;
 8023cc8:	6a0b      	ldr	r3, [r1, #32]
 8023cca:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8023ccc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8023cce:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8023cd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
	dp->blk_ofs = obj->c_ofs;
 8023cd4:	6a89      	ldr	r1, [r1, #40]	; 0x28
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8023cd6:	6103      	str	r3, [r0, #16]
 8023cd8:	2300      	movs	r3, #0
	dp->blk_ofs = obj->c_ofs;
 8023cda:	64c1      	str	r1, [r0, #76]	; 0x4c
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8023cdc:	6143      	str	r3, [r0, #20]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8023cde:	f7ff fd53 	bl	8023788 <dir_sdi>
	if (res == FR_OK) {
 8023ce2:	b920      	cbnz	r0, 8023cee <load_obj_dir+0x2e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8023ce4:	4620      	mov	r0, r4
}
 8023ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		res = load_xdir(dp);		/* Load the object's entry block */
 8023cea:	f7ff bf81 	b.w	8023bf0 <load_xdir>
}
 8023cee:	bd10      	pop	{r4, pc}

08023cf0 <dir_read>:
{
 8023cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8023cf4:	27ff      	movs	r7, #255	; 0xff
{
 8023cf6:	4605      	mov	r5, r0
 8023cf8:	4689      	mov	r9, r1
	FATFS *fs = dp->obj.fs;
 8023cfa:	f8d0 8000 	ldr.w	r8, [r0]
	BYTE ord = 0xFF, sum = 0xFF;
 8023cfe:	463e      	mov	r6, r7
	FRESULT res = FR_NO_FILE;
 8023d00:	2404      	movs	r4, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8023d02:	f64f 7aff 	movw	sl, #65535	; 0xffff
	while (dp->sect) {
 8023d06:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8023d08:	b909      	cbnz	r1, 8023d0e <dir_read+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8023d0a:	b1a4      	cbz	r4, 8023d36 <dir_read+0x46>
 8023d0c:	e07f      	b.n	8023e0e <dir_read+0x11e>
		res = move_window(fs, dp->sect);
 8023d0e:	4640      	mov	r0, r8
 8023d10:	f7ff fc4d 	bl	80235ae <move_window>
		if (res != FR_OK) break;
 8023d14:	4604      	mov	r4, r0
 8023d16:	2800      	cmp	r0, #0
 8023d18:	d179      	bne.n	8023e0e <dir_read+0x11e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8023d1a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8023d1c:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	f000 8088 	beq.w	8023e34 <dir_read+0x144>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8023d24:	f898 2000 	ldrb.w	r2, [r8]
 8023d28:	2a04      	cmp	r2, #4
 8023d2a:	d119      	bne.n	8023d60 <dir_read+0x70>
			if (_USE_LABEL && vol) {
 8023d2c:	f1b9 0f00 	cmp.w	r9, #0
 8023d30:	d005      	beq.n	8023d3e <dir_read+0x4e>
				if (c == 0x83) break;	/* Volume label entry? */
 8023d32:	2b83      	cmp	r3, #131	; 0x83
 8023d34:	d163      	bne.n	8023dfe <dir_read+0x10e>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8023d36:	2400      	movs	r4, #0
}
 8023d38:	4620      	mov	r0, r4
 8023d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (c == 0x85) {		/* Start of the file entry block? */
 8023d3e:	2b85      	cmp	r3, #133	; 0x85
 8023d40:	d15d      	bne.n	8023dfe <dir_read+0x10e>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8023d42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
 8023d44:	4628      	mov	r0, r5
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8023d46:	64eb      	str	r3, [r5, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8023d48:	f7ff ff52 	bl	8023bf0 <load_xdir>
					if (res == FR_OK) {
 8023d4c:	4604      	mov	r4, r0
 8023d4e:	2800      	cmp	r0, #0
 8023d50:	d15d      	bne.n	8023e0e <dir_read+0x11e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8023d52:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8023d56:	791b      	ldrb	r3, [r3, #4]
 8023d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023d5c:	71ab      	strb	r3, [r5, #6]
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8023d5e:	e7eb      	b.n	8023d38 <dir_read+0x48>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8023d60:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8023d62:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8023d64:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8023d68:	71aa      	strb	r2, [r5, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8023d6a:	d055      	beq.n	8023e18 <dir_read+0x128>
 8023d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8023d6e:	d053      	beq.n	8023e18 <dir_read+0x128>
 8023d70:	f022 0120 	bic.w	r1, r2, #32
 8023d74:	f1a1 0c08 	sub.w	ip, r1, #8
 8023d78:	f1dc 0100 	rsbs	r1, ip, #0
 8023d7c:	eb41 010c 	adc.w	r1, r1, ip
 8023d80:	4549      	cmp	r1, r9
 8023d82:	d149      	bne.n	8023e18 <dir_read+0x128>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8023d84:	2a0f      	cmp	r2, #15
 8023d86:	d14c      	bne.n	8023e22 <dir_read+0x132>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8023d88:	065c      	lsls	r4, r3, #25
 8023d8a:	d543      	bpl.n	8023e14 <dir_read+0x124>
						dp->blk_ofs = dp->dptr;
 8023d8c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 8023d8e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8023d92:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8023d94:	64ea      	str	r2, [r5, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023d96:	7b42      	ldrb	r2, [r0, #13]
 8023d98:	42ba      	cmp	r2, r7
 8023d9a:	d13d      	bne.n	8023e18 <dir_read+0x128>
	rv = rv << 8 | ptr[0];
 8023d9c:	7ec1      	ldrb	r1, [r0, #27]
 8023d9e:	7e82      	ldrb	r2, [r0, #26]
 8023da0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8023da4:	b211      	sxth	r1, r2
 8023da6:	bbba      	cbnz	r2, 8023e18 <dir_read+0x128>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8023da8:	7802      	ldrb	r2, [r0, #0]
 8023daa:	240d      	movs	r4, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023dac:	f8d8 600c 	ldr.w	r6, [r8, #12]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8023db0:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8023db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023db8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8023e38 <dir_read+0x148>
 8023dbc:	3a01      	subs	r2, #1
 8023dbe:	4362      	muls	r2, r4
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8023dc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023dc4:	eb00 0b04 	add.w	fp, r0, r4
	rv = rv << 8 | ptr[0];
 8023dc8:	5d04      	ldrb	r4, [r0, r4]
 8023dca:	f89b b001 	ldrb.w	fp, [fp, #1]
 8023dce:	ea44 240b 	orr.w	r4, r4, fp, lsl #8
		if (wc) {
 8023dd2:	f1be 0f00 	cmp.w	lr, #0
 8023dd6:	d021      	beq.n	8023e1c <dir_read+0x12c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8023dd8:	2afe      	cmp	r2, #254	; 0xfe
 8023dda:	d81d      	bhi.n	8023e18 <dir_read+0x128>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8023ddc:	f826 4012 	strh.w	r4, [r6, r2, lsl #1]
	rv = rv << 8 | ptr[0];
 8023de0:	46a6      	mov	lr, r4
			lfnbuf[i++] = wc = uc;			/* Store it */
 8023de2:	3201      	adds	r2, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8023de4:	3101      	adds	r1, #1
 8023de6:	290d      	cmp	r1, #13
 8023de8:	d1ea      	bne.n	8023dc0 <dir_read+0xd0>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8023dea:	7801      	ldrb	r1, [r0, #0]
 8023dec:	0649      	lsls	r1, r1, #25
 8023dee:	d504      	bpl.n	8023dfa <dir_read+0x10a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8023df0:	2afe      	cmp	r2, #254	; 0xfe
 8023df2:	d811      	bhi.n	8023e18 <dir_read+0x128>
		lfnbuf[i] = 0;
 8023df4:	2100      	movs	r1, #0
 8023df6:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023dfa:	1e5e      	subs	r6, r3, #1
 8023dfc:	b2f6      	uxtb	r6, r6
		res = dir_next(dp, 0);		/* Next entry */
 8023dfe:	2100      	movs	r1, #0
 8023e00:	4628      	mov	r0, r5
 8023e02:	f7ff fe77 	bl	8023af4 <dir_next>
		if (res != FR_OK) break;
 8023e06:	4604      	mov	r4, r0
 8023e08:	2800      	cmp	r0, #0
 8023e0a:	f43f af7c 	beq.w	8023d06 <dir_read+0x16>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8023e0e:	2300      	movs	r3, #0
 8023e10:	63ab      	str	r3, [r5, #56]	; 0x38
 8023e12:	e791      	b.n	8023d38 <dir_read+0x48>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023e14:	429e      	cmp	r6, r3
 8023e16:	d0be      	beq.n	8023d96 <dir_read+0xa6>
 8023e18:	26ff      	movs	r6, #255	; 0xff
 8023e1a:	e7f0      	b.n	8023dfe <dir_read+0x10e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8023e1c:	4554      	cmp	r4, sl
 8023e1e:	d0e1      	beq.n	8023de4 <dir_read+0xf4>
 8023e20:	e7fa      	b.n	8023e18 <dir_read+0x128>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8023e22:	b91e      	cbnz	r6, 8023e2c <dir_read+0x13c>
 8023e24:	f7ff fb29 	bl	802347a <sum_sfn>
 8023e28:	42b8      	cmp	r0, r7
 8023e2a:	d084      	beq.n	8023d36 <dir_read+0x46>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8023e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8023e30:	64eb      	str	r3, [r5, #76]	; 0x4c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8023e32:	e781      	b.n	8023d38 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8023e34:	2404      	movs	r4, #4
 8023e36:	e7ea      	b.n	8023e0e <dir_read+0x11e>
 8023e38:	0802a1f0 	.word	0x0802a1f0

08023e3c <dir_find>:
{
 8023e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8023e40:	2100      	movs	r1, #0
{
 8023e42:	b087      	sub	sp, #28
 8023e44:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8023e46:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8023e4a:	f7ff fc9d 	bl	8023788 <dir_sdi>
	if (res != FR_OK) return res;
 8023e4e:	4607      	mov	r7, r0
 8023e50:	b978      	cbnz	r0, 8023e72 <dir_find+0x36>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8023e52:	f898 3000 	ldrb.w	r3, [r8]
 8023e56:	2b04      	cmp	r3, #4
 8023e58:	d144      	bne.n	8023ee4 <dir_find+0xa8>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8023e5a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8023e5e:	f7ff fb4a 	bl	80234f6 <xname_sum>
 8023e62:	4606      	mov	r6, r0
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8023e64:	2100      	movs	r1, #0
 8023e66:	4620      	mov	r0, r4
 8023e68:	f7ff ff42 	bl	8023cf0 <dir_read>
 8023e6c:	4605      	mov	r5, r0
 8023e6e:	b120      	cbz	r0, 8023e7a <dir_find+0x3e>
 8023e70:	4607      	mov	r7, r0
}
 8023e72:	4638      	mov	r0, r7
 8023e74:	b007      	add	sp, #28
 8023e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8023e7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
	rv = rv << 8 | ptr[0];
 8023e7e:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8023e82:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8023e86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8023e8a:	4296      	cmp	r6, r2
 8023e8c:	d1ea      	bne.n	8023e64 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8023e8e:	f893 b023 	ldrb.w	fp, [r3, #35]	; 0x23
 8023e92:	f04f 0940 	mov.w	r9, #64	; 0x40
 8023e96:	455d      	cmp	r5, fp
 8023e98:	d107      	bne.n	8023eaa <dir_find+0x6e>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8023e9a:	b22d      	sxth	r5, r5
 8023e9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8023ea0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d1dd      	bne.n	8023e64 <dir_find+0x28>
 8023ea8:	e7e3      	b.n	8023e72 <dir_find+0x36>
				if ((di % SZDIRE) == 0) di += 2;
 8023eaa:	f019 0f1f 	tst.w	r9, #31
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8023eae:	f8d8 3010 	ldr.w	r3, [r8, #16]
				if ((di % SZDIRE) == 0) di += 2;
 8023eb2:	bf08      	it	eq
 8023eb4:	f109 0902 	addeq.w	r9, r9, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8023eb8:	eb03 0209 	add.w	r2, r3, r9
	rv = rv << 8 | ptr[0];
 8023ebc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8023ec0:	7850      	ldrb	r0, [r2, #1]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8023ec2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8023ec6:	f000 fd73 	bl	80249b0 <ff_wtoupper>
 8023eca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8023ece:	4682      	mov	sl, r0
 8023ed0:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8023ed4:	f000 fd6c 	bl	80249b0 <ff_wtoupper>
 8023ed8:	4582      	cmp	sl, r0
 8023eda:	d1c3      	bne.n	8023e64 <dir_find+0x28>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8023edc:	f109 0902 	add.w	r9, r9, #2
 8023ee0:	3501      	adds	r5, #1
 8023ee2:	e7d8      	b.n	8023e96 <dir_find+0x5a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8023ee4:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8023ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8023eec:	46d9      	mov	r9, fp
 8023eee:	64e3      	str	r3, [r4, #76]	; 0x4c
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8023ef0:	9302      	str	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 8023ef2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023ef4:	4640      	mov	r0, r8
 8023ef6:	f7ff fb5a 	bl	80235ae <move_window>
		if (res != FR_OK) break;
 8023efa:	2800      	cmp	r0, #0
 8023efc:	d16a      	bne.n	8023fd4 <dir_find+0x198>
		c = dp->dir[DIR_Name];
 8023efe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8023f00:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8023f02:	2e00      	cmp	r6, #0
 8023f04:	f000 8092 	beq.w	802402c <dir_find+0x1f0>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8023f08:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8023f0a:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8023f0c:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8023f10:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8023f12:	d003      	beq.n	8023f1c <dir_find+0xe0>
 8023f14:	0712      	lsls	r2, r2, #28
 8023f16:	d504      	bpl.n	8023f22 <dir_find+0xe6>
 8023f18:	2b0f      	cmp	r3, #15
 8023f1a:	d004      	beq.n	8023f26 <dir_find+0xea>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8023f1c:	9b02      	ldr	r3, [sp, #8]
 8023f1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8023f20:	e05c      	b.n	8023fdc <dir_find+0x1a0>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8023f22:	2b0f      	cmp	r3, #15
 8023f24:	d162      	bne.n	8023fec <dir_find+0x1b0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8023f26:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8023f2a:	065b      	lsls	r3, r3, #25
 8023f2c:	d44c      	bmi.n	8023fc8 <dir_find+0x18c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8023f2e:	0670      	lsls	r0, r6, #25
 8023f30:	d552      	bpl.n	8023fd8 <dir_find+0x19c>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8023f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8023f34:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8023f38:	f895 b00d 	ldrb.w	fp, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8023f3c:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023f3e:	7b6b      	ldrb	r3, [r5, #13]
 8023f40:	455b      	cmp	r3, fp
 8023f42:	d14b      	bne.n	8023fdc <dir_find+0x1a0>
	rv = rv << 8 | ptr[0];
 8023f44:	7eea      	ldrb	r2, [r5, #27]
 8023f46:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8023f48:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8023f4c:	d146      	bne.n	8023fdc <dir_find+0x1a0>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8023f4e:	f895 9000 	ldrb.w	r9, [r5]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8023f52:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023f54:	f8d8 300c 	ldr.w	r3, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8023f58:	f009 093f 	and.w	r9, r9, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023f5c:	9301      	str	r3, [sp, #4]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8023f5e:	f109 33ff 	add.w	r3, r9, #4294967295
 8023f62:	f04f 090d 	mov.w	r9, #13
 8023f66:	fb09 f903 	mul.w	r9, r9, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8023f6a:	4b31      	ldr	r3, [pc, #196]	; (8024030 <dir_find+0x1f4>)
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8023f6c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023f70:	1868      	adds	r0, r5, r1
	rv = rv << 8 | ptr[0];
 8023f72:	f815 a001 	ldrb.w	sl, [r5, r1]
 8023f76:	7840      	ldrb	r0, [r0, #1]
 8023f78:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
		if (wc) {
 8023f7c:	b38a      	cbz	r2, 8023fe2 <dir_find+0x1a6>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8023f7e:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 8023f82:	9305      	str	r3, [sp, #20]
 8023f84:	d82a      	bhi.n	8023fdc <dir_find+0x1a0>
 8023f86:	4650      	mov	r0, sl
 8023f88:	f000 fd12 	bl	80249b0 <ff_wtoupper>
 8023f8c:	9b01      	ldr	r3, [sp, #4]
 8023f8e:	f109 0101 	add.w	r1, r9, #1
 8023f92:	9004      	str	r0, [sp, #16]
 8023f94:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 8023f98:	9103      	str	r1, [sp, #12]
 8023f9a:	f000 fd09 	bl	80249b0 <ff_wtoupper>
 8023f9e:	9a04      	ldr	r2, [sp, #16]
 8023fa0:	4282      	cmp	r2, r0
 8023fa2:	d11b      	bne.n	8023fdc <dir_find+0x1a0>
 8023fa4:	9903      	ldr	r1, [sp, #12]
	rv = rv << 8 | ptr[0];
 8023fa6:	4652      	mov	r2, sl
 8023fa8:	9b05      	ldr	r3, [sp, #20]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8023faa:	4689      	mov	r9, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8023fac:	4921      	ldr	r1, [pc, #132]	; (8024034 <dir_find+0x1f8>)
 8023fae:	4299      	cmp	r1, r3
 8023fb0:	d1dc      	bne.n	8023f6c <dir_find+0x130>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8023fb2:	782b      	ldrb	r3, [r5, #0]
 8023fb4:	0659      	lsls	r1, r3, #25
 8023fb6:	d504      	bpl.n	8023fc2 <dir_find+0x186>
 8023fb8:	b11a      	cbz	r2, 8023fc2 <dir_find+0x186>
 8023fba:	9b01      	ldr	r3, [sp, #4]
 8023fbc:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8023fc0:	b963      	cbnz	r3, 8023fdc <dir_find+0x1a0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023fc2:	3e01      	subs	r6, #1
 8023fc4:	fa5f f986 	uxtb.w	r9, r6
		res = dir_next(dp, 0);	/* Next entry */
 8023fc8:	2100      	movs	r1, #0
 8023fca:	4620      	mov	r0, r4
 8023fcc:	f7ff fd92 	bl	8023af4 <dir_next>
	} while (res == FR_OK);
 8023fd0:	2800      	cmp	r0, #0
 8023fd2:	d08e      	beq.n	8023ef2 <dir_find+0xb6>
 8023fd4:	4607      	mov	r7, r0
 8023fd6:	e74c      	b.n	8023e72 <dir_find+0x36>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8023fd8:	45b1      	cmp	r9, r6
 8023fda:	d0b0      	beq.n	8023f3e <dir_find+0x102>
 8023fdc:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8023fe0:	e7f2      	b.n	8023fc8 <dir_find+0x18c>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8023fe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8023fe6:	458a      	cmp	sl, r1
 8023fe8:	d0e0      	beq.n	8023fac <dir_find+0x170>
 8023fea:	e7f7      	b.n	8023fdc <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8023fec:	f1b9 0f00 	cmp.w	r9, #0
 8023ff0:	d105      	bne.n	8023ffe <dir_find+0x1c2>
 8023ff2:	4628      	mov	r0, r5
 8023ff4:	f7ff fa41 	bl	802347a <sum_sfn>
 8023ff8:	4558      	cmp	r0, fp
 8023ffa:	f43f af3a 	beq.w	8023e72 <dir_find+0x36>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8023ffe:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8024002:	07db      	lsls	r3, r3, #31
 8024004:	d48a      	bmi.n	8023f1c <dir_find+0xe0>
 8024006:	f104 0240 	add.w	r2, r4, #64	; 0x40
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 802400a:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 802400e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024012:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8024016:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 8024018:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 802401c:	d002      	beq.n	8024024 <dir_find+0x1e8>
 802401e:	2b00      	cmp	r3, #0
 8024020:	d0f5      	beq.n	802400e <dir_find+0x1d2>
 8024022:	e77b      	b.n	8023f1c <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8024024:	2b00      	cmp	r3, #0
 8024026:	f47f af79 	bne.w	8023f1c <dir_find+0xe0>
 802402a:	e722      	b.n	8023e72 <dir_find+0x36>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 802402c:	2704      	movs	r7, #4
 802402e:	e720      	b.n	8023e72 <dir_find+0x36>
 8024030:	0802a1f0 	.word	0x0802a1f0
 8024034:	0802a1fd 	.word	0x0802a1fd

08024038 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8024038:	2300      	movs	r3, #0
{
 802403a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802403c:	70c3      	strb	r3, [r0, #3]
 802403e:	f04f 33ff 	mov.w	r3, #4294967295
{
 8024042:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8024044:	6443      	str	r3, [r0, #68]	; 0x44
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8024046:	f7ff fab2 	bl	80235ae <move_window>
 802404a:	4601      	mov	r1, r0
 802404c:	2800      	cmp	r0, #0
 802404e:	d139      	bne.n	80240c4 <check_fs+0x8c>
	rv = rv << 8 | ptr[0];
 8024050:	f894 2247 	ldrb.w	r2, [r4, #583]	; 0x247
 8024054:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
 8024058:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802405c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8024060:	4293      	cmp	r3, r2
 8024062:	d131      	bne.n	80240c8 <check_fs+0x90>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8024064:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8024068:	2be9      	cmp	r3, #233	; 0xe9
 802406a:	d005      	beq.n	8024078 <check_fs+0x40>
 802406c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 802406e:	4a17      	ldr	r2, [pc, #92]	; (80240cc <check_fs+0x94>)
 8024070:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024074:	4293      	cmp	r3, r2
 8024076:	d10f      	bne.n	8024098 <check_fs+0x60>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8024078:	f104 007e 	add.w	r0, r4, #126	; 0x7e
 802407c:	f7ff f984 	bl	8023388 <ld_dword>
 8024080:	4b13      	ldr	r3, [pc, #76]	; (80240d0 <check_fs+0x98>)
 8024082:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8024086:	4298      	cmp	r0, r3
 8024088:	d015      	beq.n	80240b6 <check_fs+0x7e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 802408a:	f104 009a 	add.w	r0, r4, #154	; 0x9a
 802408e:	f7ff f97b 	bl	8023388 <ld_dword>
 8024092:	4b10      	ldr	r3, [pc, #64]	; (80240d4 <check_fs+0x9c>)
 8024094:	4298      	cmp	r0, r3
 8024096:	d00e      	beq.n	80240b6 <check_fs+0x7e>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8024098:	f104 0248 	add.w	r2, r4, #72	; 0x48
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 802409c:	490e      	ldr	r1, [pc, #56]	; (80240d8 <check_fs+0xa0>)
 802409e:	3453      	adds	r4, #83	; 0x53
		r = *d++ - *s++;
 80240a0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80240a4:	f811 0b01 	ldrb.w	r0, [r1], #1
	} while (--cnt && r == 0);
 80240a8:	4294      	cmp	r4, r2
		r = *d++ - *s++;
 80240aa:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 80240ae:	d004      	beq.n	80240ba <check_fs+0x82>
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	d0f5      	beq.n	80240a0 <check_fs+0x68>
#endif
	return 2;
 80240b4:	2102      	movs	r1, #2
}
 80240b6:	4608      	mov	r0, r1
 80240b8:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80240ba:	2b00      	cmp	r3, #0
 80240bc:	bf14      	ite	ne
 80240be:	2102      	movne	r1, #2
 80240c0:	2101      	moveq	r1, #1
 80240c2:	e7f8      	b.n	80240b6 <check_fs+0x7e>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80240c4:	2104      	movs	r1, #4
 80240c6:	e7f6      	b.n	80240b6 <check_fs+0x7e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80240c8:	2103      	movs	r1, #3
 80240ca:	e7f4      	b.n	80240b6 <check_fs+0x7e>
 80240cc:	009000eb 	.word	0x009000eb
 80240d0:	00544146 	.word	0x00544146
 80240d4:	33544146 	.word	0x33544146
 80240d8:	0802a154 	.word	0x0802a154

080240dc <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80240dc:	2300      	movs	r3, #0
{
 80240de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 80240e2:	600b      	str	r3, [r1, #0]
{
 80240e4:	b085      	sub	sp, #20
 80240e6:	460d      	mov	r5, r1
 80240e8:	4617      	mov	r7, r2
	vol = get_ldnumber(path);
 80240ea:	f7ff f9ec 	bl	80234c6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80240ee:	1e06      	subs	r6, r0, #0
 80240f0:	f2c0 81cb 	blt.w	802448a <find_volume+0x3ae>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80240f4:	4b70      	ldr	r3, [pc, #448]	; (80242b8 <find_volume+0x1dc>)
 80240f6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80240fa:	2c00      	cmp	r4, #0
 80240fc:	f000 81c7 	beq.w	802448e <find_volume+0x3b2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8024100:	602c      	str	r4, [r5, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8024102:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8024106:	7823      	ldrb	r3, [r4, #0]
 8024108:	b17b      	cbz	r3, 802412a <find_volume+0x4e>
		stat = disk_status(fs->drv);
 802410a:	7860      	ldrb	r0, [r4, #1]
 802410c:	f7ff f906 	bl	802331c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8024110:	07c2      	lsls	r2, r0, #31
 8024112:	d40a      	bmi.n	802412a <find_volume+0x4e>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8024114:	2f00      	cmp	r7, #0
 8024116:	f000 81bc 	beq.w	8024492 <find_volume+0x3b6>
 802411a:	f010 0504 	ands.w	r5, r0, #4
 802411e:	d000      	beq.n	8024122 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8024120:	250a      	movs	r5, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8024122:	4628      	mov	r0, r5
 8024124:	b005      	add	sp, #20
 8024126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 802412a:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 802412c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 802412e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8024130:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8024132:	f7ff f8fd 	bl	8023330 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8024136:	f010 0501 	ands.w	r5, r0, #1
 802413a:	f040 81ac 	bne.w	8024496 <find_volume+0x3ba>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 802413e:	b10f      	cbz	r7, 8024144 <find_volume+0x68>
 8024140:	0743      	lsls	r3, r0, #29
 8024142:	d4ed      	bmi.n	8024120 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8024144:	2100      	movs	r1, #0
 8024146:	4620      	mov	r0, r4
 8024148:	f7ff ff76 	bl	8024038 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 802414c:	2802      	cmp	r0, #2
 802414e:	f040 80ab 	bne.w	80242a8 <find_volume+0x1cc>
 8024152:	466f      	mov	r7, sp
 8024154:	f204 210e 	addw	r1, r4, #526	; 0x20e
 8024158:	f204 284e 	addw	r8, r4, #590	; 0x24e
 802415c:	463e      	mov	r6, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802415e:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8024162:	b110      	cbz	r0, 802416a <find_volume+0x8e>
 8024164:	4608      	mov	r0, r1
 8024166:	f7ff f90f 	bl	8023388 <ld_dword>
 802416a:	3110      	adds	r1, #16
 802416c:	f846 0b04 	str.w	r0, [r6], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8024170:	4588      	cmp	r8, r1
 8024172:	d1f4      	bne.n	802415e <find_volume+0x82>
 8024174:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 8024178:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802417c:	2e00      	cmp	r6, #0
 802417e:	f000 8088 	beq.w	8024292 <find_volume+0x1b6>
 8024182:	4631      	mov	r1, r6
 8024184:	4620      	mov	r0, r4
 8024186:	f7ff ff57 	bl	8024038 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 802418a:	2801      	cmp	r0, #1
 802418c:	f200 8082 	bhi.w	8024294 <find_volume+0x1b8>
	if (fmt == 1) {
 8024190:	2801      	cmp	r0, #1
 8024192:	f040 8095 	bne.w	80242c0 <find_volume+0x1e4>
 8024196:	f104 0353 	add.w	r3, r4, #83	; 0x53
 802419a:	f104 0188 	add.w	r1, r4, #136	; 0x88
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 802419e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80241a2:	2a00      	cmp	r2, #0
 80241a4:	f040 8084 	bne.w	80242b0 <find_volume+0x1d4>
 80241a8:	428b      	cmp	r3, r1
 80241aa:	d1f8      	bne.n	802419e <find_volume+0xc2>
	rv = rv << 8 | ptr[0];
 80241ac:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
 80241b0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 80241b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80241b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80241bc:	d178      	bne.n	80242b0 <find_volume+0x1d4>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80241be:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 80241c2:	2b09      	cmp	r3, #9
 80241c4:	d174      	bne.n	80242b0 <find_volume+0x1d4>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80241c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80241ca:	f7ff f8e5 	bl	8023398 <ld_qword>
 80241ce:	eb10 0806 	adds.w	r8, r0, r6
 80241d2:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80241d6:	f1b9 0f01 	cmp.w	r9, #1
 80241da:	bf08      	it	eq
 80241dc:	f1b8 0f00 	cmpeq.w	r8, #0
 80241e0:	d266      	bcs.n	80242b0 <find_volume+0x1d4>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80241e2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 80241e6:	f7ff f8cf 	bl	8023388 <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80241ea:	f894 a0b6 	ldrb.w	sl, [r4, #182]	; 0xb6
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80241ee:	6320      	str	r0, [r4, #48]	; 0x30
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80241f0:	f1ba 0f01 	cmp.w	sl, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80241f4:	f884 a002 	strb.w	sl, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80241f8:	d15a      	bne.n	80242b0 <find_volume+0x1d4>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80241fa:	f894 10b5 	ldrb.w	r1, [r4, #181]	; 0xb5
 80241fe:	fa0a fa01 	lsl.w	sl, sl, r1
 8024202:	fa1f f38a 	uxth.w	r3, sl
 8024206:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8024208:	2b00      	cmp	r3, #0
 802420a:	d051      	beq.n	80242b0 <find_volume+0x1d4>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 802420c:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8024210:	f7ff f8ba 	bl	8023388 <ld_dword>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8024214:	4b29      	ldr	r3, [pc, #164]	; (80242bc <find_volume+0x1e0>)
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8024216:	4601      	mov	r1, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8024218:	4298      	cmp	r0, r3
 802421a:	d849      	bhi.n	80242b0 <find_volume+0x1d4>
		fs->n_fatent = nclst + 2;
 802421c:	1c83      	adds	r3, r0, #2
		fs->volbase = bsect;
 802421e:	6366      	str	r6, [r4, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8024220:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8024224:	fa1f fa8a 	uxth.w	sl, sl
		fs->n_fatent = nclst + 2;
 8024228:	62e3      	str	r3, [r4, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 802422a:	f7ff f8ad 	bl	8023388 <ld_dword>
 802422e:	1987      	adds	r7, r0, r6
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8024230:	f104 0098 	add.w	r0, r4, #152	; 0x98
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8024234:	6427      	str	r7, [r4, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8024236:	f7ff f8a7 	bl	8023388 <ld_dword>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 802423a:	fb01 f10a 	mul.w	r1, r1, sl
 802423e:	2300      	movs	r3, #0
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8024240:	4430      	add	r0, r6
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8024242:	187a      	adds	r2, r7, r1
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8024244:	63a0      	str	r0, [r4, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8024246:	f143 0300 	adc.w	r3, r3, #0
 802424a:	4599      	cmp	r9, r3
 802424c:	bf08      	it	eq
 802424e:	4590      	cmpeq	r8, r2
 8024250:	d32e      	bcc.n	80242b0 <find_volume+0x1d4>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8024252:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8024256:	f7ff f897 	bl	8023388 <ld_dword>
 802425a:	4601      	mov	r1, r0
 802425c:	63e0      	str	r0, [r4, #60]	; 0x3c
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 802425e:	4620      	mov	r0, r4
 8024260:	f7ff f900 	bl	8023464 <clust2sect>
 8024264:	4601      	mov	r1, r0
 8024266:	4620      	mov	r0, r4
 8024268:	f7ff f9a1 	bl	80235ae <move_window>
 802426c:	b9d0      	cbnz	r0, 80242a4 <find_volume+0x1c8>
 802426e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 8024272:	f504 7617 	add.w	r6, r4, #604	; 0x25c
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8024276:	f811 3c14 	ldrb.w	r3, [r1, #-20]
 802427a:	2b81      	cmp	r3, #129	; 0x81
 802427c:	d105      	bne.n	802428a <find_volume+0x1ae>
 802427e:	4608      	mov	r0, r1
 8024280:	f7ff f882 	bl	8023388 <ld_dword>
 8024284:	2802      	cmp	r0, #2
 8024286:	f000 8108 	beq.w	802449a <find_volume+0x3be>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 802428a:	3120      	adds	r1, #32
 802428c:	428e      	cmp	r6, r1
 802428e:	d1f2      	bne.n	8024276 <find_volume+0x19a>
 8024290:	e00e      	b.n	80242b0 <find_volume+0x1d4>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8024292:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8024294:	f108 0801 	add.w	r8, r8, #1
 8024298:	f1b8 0f04 	cmp.w	r8, #4
 802429c:	f47f af6c 	bne.w	8024178 <find_volume+0x9c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80242a0:	2804      	cmp	r0, #4
 80242a2:	d105      	bne.n	80242b0 <find_volume+0x1d4>
 80242a4:	2501      	movs	r5, #1
 80242a6:	e73c      	b.n	8024122 <find_volume+0x46>
 80242a8:	2804      	cmp	r0, #4
 80242aa:	d0fb      	beq.n	80242a4 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80242ac:	2801      	cmp	r0, #1
 80242ae:	d901      	bls.n	80242b4 <find_volume+0x1d8>
 80242b0:	250d      	movs	r5, #13
 80242b2:	e736      	b.n	8024122 <find_volume+0x46>
	bsect = 0;
 80242b4:	2600      	movs	r6, #0
 80242b6:	e76b      	b.n	8024190 <find_volume+0xb4>
 80242b8:	2000b240 	.word	0x2000b240
 80242bc:	7ffffffd 	.word	0x7ffffffd
	rv = rv << 8 | ptr[0];
 80242c0:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80242c4:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 80242c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80242cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80242d0:	d1ee      	bne.n	80242b0 <find_volume+0x1d4>
	rv = rv << 8 | ptr[0];
 80242d2:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
 80242d6:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80242da:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 80242de:	d104      	bne.n	80242ea <find_volume+0x20e>
 80242e0:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80242e4:	f7ff f850 	bl	8023388 <ld_dword>
 80242e8:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80242ea:	f894 7058 	ldrb.w	r7, [r4, #88]	; 0x58
		fs->fsize = fasize;
 80242ee:	6321      	str	r1, [r4, #48]	; 0x30
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80242f0:	1e7b      	subs	r3, r7, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80242f2:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80242f4:	2b01      	cmp	r3, #1
 80242f6:	d8db      	bhi.n	80242b0 <find_volume+0x1d4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80242f8:	f894 b055 	ldrb.w	fp, [r4, #85]	; 0x55
 80242fc:	465b      	mov	r3, fp
 80242fe:	f8a4 b00a 	strh.w	fp, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8024302:	2b00      	cmp	r3, #0
 8024304:	d0d4      	beq.n	80242b0 <find_volume+0x1d4>
 8024306:	f10b 33ff 	add.w	r3, fp, #4294967295
 802430a:	ea13 0f0b 	tst.w	r3, fp
 802430e:	d1cf      	bne.n	80242b0 <find_volume+0x1d4>
	rv = rv << 8 | ptr[0];
 8024310:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8024314:	f894 9059 	ldrb.w	r9, [r4, #89]	; 0x59
 8024318:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 802431c:	f019 0f0f 	tst.w	r9, #15
	rv = rv << 8 | ptr[0];
 8024320:	fa0f fa89 	sxth.w	sl, r9
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8024324:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8024328:	d1c2      	bne.n	80242b0 <find_volume+0x1d4>
	rv = rv << 8 | ptr[0];
 802432a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 802432e:	f894 005b 	ldrb.w	r0, [r4, #91]	; 0x5b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8024332:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8024336:	d103      	bne.n	8024340 <find_volume+0x264>
 8024338:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802433c:	f7ff f824 	bl	8023388 <ld_dword>
	rv = rv << 8 | ptr[0];
 8024340:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8024344:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8024348:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 802434c:	d0b0      	beq.n	80242b0 <find_volume+0x1d4>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 802434e:	fb01 fc07 	mul.w	ip, r1, r7
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8024352:	eb02 1319 	add.w	r3, r2, r9, lsr #4
 8024356:	eb03 0e0c 	add.w	lr, r3, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 802435a:	4570      	cmp	r0, lr
 802435c:	d3a8      	bcc.n	80242b0 <find_volume+0x1d4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 802435e:	eba0 070e 	sub.w	r7, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8024362:	455f      	cmp	r7, fp
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8024364:	fbb7 f3fb 	udiv	r3, r7, fp
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8024368:	d3a2      	bcc.n	80242b0 <find_volume+0x1d4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 802436a:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 802436e:	4283      	cmp	r3, r0
 8024370:	d878      	bhi.n	8024464 <find_volume+0x388>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8024372:	f640 77f5 	movw	r7, #4085	; 0xff5
 8024376:	42bb      	cmp	r3, r7
 8024378:	bf8c      	ite	hi
 802437a:	2702      	movhi	r7, #2
 802437c:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 802437e:	f103 0802 	add.w	r8, r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8024382:	1990      	adds	r0, r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8024384:	eb0e 0306 	add.w	r3, lr, r6
		if (fmt == FS_FAT32) {
 8024388:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 802438a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 802438e:	6366      	str	r6, [r4, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8024390:	63a0      	str	r0, [r4, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 8024392:	6423      	str	r3, [r4, #64]	; 0x40
		if (fmt == FS_FAT32) {
 8024394:	d168      	bne.n	8024468 <find_volume+0x38c>
	rv = rv << 8 | ptr[0];
 8024396:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 802439a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 802439e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80243a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80243a6:	fa0f f38a 	sxth.w	r3, sl
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d180      	bne.n	80242b0 <find_volume+0x1d4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80243ae:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80243b2:	f7fe ffe9 	bl	8023388 <ld_dword>
 80243b6:	63e0      	str	r0, [r4, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80243b8:	ea4f 0388 	mov.w	r3, r8, lsl #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80243bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80243c0:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80243c4:	f4ff af74 	bcc.w	80242b0 <find_volume+0x1d4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80243c8:	f04f 33ff 	mov.w	r3, #4294967295
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80243cc:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80243ce:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 80243d2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80243d6:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80243d8:	d12f      	bne.n	802443a <find_volume+0x35e>
	rv = rv << 8 | ptr[0];
 80243da:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80243de:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 80243e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80243e6:	2b01      	cmp	r3, #1
 80243e8:	d127      	bne.n	802443a <find_volume+0x35e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80243ea:	1c71      	adds	r1, r6, #1
 80243ec:	4620      	mov	r0, r4
 80243ee:	f7ff f8de 	bl	80235ae <move_window>
 80243f2:	bb10      	cbnz	r0, 802443a <find_volume+0x35e>
	rv = rv << 8 | ptr[0];
 80243f4:	f894 2247 	ldrb.w	r2, [r4, #583]	; 0x247
 80243f8:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
			fs->fsi_flag = 0;
 80243fc:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80243fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8024402:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8024406:	4293      	cmp	r3, r2
 8024408:	d117      	bne.n	802443a <find_volume+0x35e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802440a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 802440e:	f7fe ffbb 	bl	8023388 <ld_dword>
 8024412:	4b25      	ldr	r3, [pc, #148]	; (80244a8 <find_volume+0x3cc>)
 8024414:	4298      	cmp	r0, r3
 8024416:	d110      	bne.n	802443a <find_volume+0x35e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8024418:	f504 700b 	add.w	r0, r4, #556	; 0x22c
 802441c:	f7fe ffb4 	bl	8023388 <ld_dword>
 8024420:	4b22      	ldr	r3, [pc, #136]	; (80244ac <find_volume+0x3d0>)
 8024422:	4298      	cmp	r0, r3
 8024424:	d109      	bne.n	802443a <find_volume+0x35e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8024426:	f504 700c 	add.w	r0, r4, #560	; 0x230
 802442a:	f7fe ffad 	bl	8023388 <ld_dword>
 802442e:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8024430:	f504 700d 	add.w	r0, r4, #564	; 0x234
 8024434:	f7fe ffa8 	bl	8023388 <ld_dword>
 8024438:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 802443a:	4a1d      	ldr	r2, [pc, #116]	; (80244b0 <find_volume+0x3d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 802443c:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 802443e:	8813      	ldrh	r3, [r2, #0]
 8024440:	3301      	adds	r3, #1
 8024442:	b29b      	uxth	r3, r3
 8024444:	8013      	strh	r3, [r2, #0]
	fs->cdir = 0;			/* Initialize current directory */
 8024446:	2200      	movs	r2, #0
	fs->id = ++Fsid;		/* File system mount ID */
 8024448:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 802444a:	4b1a      	ldr	r3, [pc, #104]	; (80244b4 <find_volume+0x3d8>)
	fs->cdir = 0;			/* Initialize current directory */
 802444c:	61e2      	str	r2, [r4, #28]
		if (Files[i].fs == fs) Files[i].fs = 0;
 802444e:	6819      	ldr	r1, [r3, #0]
 8024450:	428c      	cmp	r4, r1
 8024452:	bf08      	it	eq
 8024454:	601a      	streq	r2, [r3, #0]
 8024456:	691a      	ldr	r2, [r3, #16]
 8024458:	4294      	cmp	r4, r2
 802445a:	f47f ae62 	bne.w	8024122 <find_volume+0x46>
 802445e:	2200      	movs	r2, #0
 8024460:	611a      	str	r2, [r3, #16]
 8024462:	e65e      	b.n	8024122 <find_volume+0x46>
		fmt = FS_FAT32;
 8024464:	2703      	movs	r7, #3
 8024466:	e78a      	b.n	802437e <find_volume+0x2a2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8024468:	f1b9 0f00 	cmp.w	r9, #0
 802446c:	f43f af20 	beq.w	80242b0 <find_volume+0x1d4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8024470:	2f02      	cmp	r7, #2
 8024472:	ea4f 0348 	mov.w	r3, r8, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8024476:	4460      	add	r0, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8024478:	bf1c      	itt	ne
 802447a:	4443      	addne	r3, r8
 802447c:	f008 0201 	andne.w	r2, r8, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8024480:	63e0      	str	r0, [r4, #60]	; 0x3c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8024482:	bf18      	it	ne
 8024484:	eb02 0353 	addne.w	r3, r2, r3, lsr #1
 8024488:	e798      	b.n	80243bc <find_volume+0x2e0>
	if (vol < 0) return FR_INVALID_DRIVE;
 802448a:	250b      	movs	r5, #11
 802448c:	e649      	b.n	8024122 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 802448e:	250c      	movs	r5, #12
 8024490:	e647      	b.n	8024122 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8024492:	463d      	mov	r5, r7
 8024494:	e645      	b.n	8024122 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8024496:	2503      	movs	r5, #3
 8024498:	e643      	b.n	8024122 <find_volume+0x46>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 802449a:	f04f 33ff 	mov.w	r3, #4294967295
		fmt = FS_EXFAT;			/* FAT sub-type */
 802449e:	2704      	movs	r7, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80244a0:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
 80244a4:	e7c9      	b.n	802443a <find_volume+0x35e>
 80244a6:	bf00      	nop
 80244a8:	41615252 	.word	0x41615252
 80244ac:	61417272 	.word	0x61417272
 80244b0:	2000b264 	.word	0x2000b264
 80244b4:	2000b244 	.word	0x2000b244

080244b8 <follow_path>:
{
 80244b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80244bc:	780b      	ldrb	r3, [r1, #0]
{
 80244be:	b099      	sub	sp, #100	; 0x64
 80244c0:	4604      	mov	r4, r0
 80244c2:	4688      	mov	r8, r1
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80244c4:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 80244c6:	f8d0 9000 	ldr.w	r9, [r0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80244ca:	d001      	beq.n	80244d0 <follow_path+0x18>
 80244cc:	2b5c      	cmp	r3, #92	; 0x5c
 80244ce:	d109      	bne.n	80244e4 <follow_path+0x2c>
 80244d0:	4642      	mov	r2, r8
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80244d2:	7813      	ldrb	r3, [r2, #0]
 80244d4:	4690      	mov	r8, r2
 80244d6:	3201      	adds	r2, #1
 80244d8:	2b2f      	cmp	r3, #47	; 0x2f
 80244da:	d0fa      	beq.n	80244d2 <follow_path+0x1a>
 80244dc:	2b5c      	cmp	r3, #92	; 0x5c
 80244de:	d0f8      	beq.n	80244d2 <follow_path+0x1a>
		obj->sclust = 0;					/* Start from root directory */
 80244e0:	2300      	movs	r3, #0
 80244e2:	e001      	b.n	80244e8 <follow_path+0x30>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80244e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
		obj->sclust = 0;					/* Start from root directory */
 80244e8:	60a3      	str	r3, [r4, #8]
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80244ea:	2300      	movs	r3, #0
 80244ec:	61e3      	str	r3, [r4, #28]
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 80244ee:	f899 3000 	ldrb.w	r3, [r9]
 80244f2:	2b04      	cmp	r3, #4
 80244f4:	d11d      	bne.n	8024532 <follow_path+0x7a>
 80244f6:	68a3      	ldr	r3, [r4, #8]
 80244f8:	b1db      	cbz	r3, 8024532 <follow_path+0x7a>
		obj->c_scl = fs->cdc_scl;
 80244fa:	f8d9 3020 	ldr.w	r3, [r9, #32]
		res = load_obj_dir(&dj, obj);
 80244fe:	4621      	mov	r1, r4
 8024500:	a802      	add	r0, sp, #8
		obj->c_scl = fs->cdc_scl;
 8024502:	6223      	str	r3, [r4, #32]
		obj->c_size = fs->cdc_size;
 8024504:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8024508:	6263      	str	r3, [r4, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 802450a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 802450e:	62a3      	str	r3, [r4, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 8024510:	f7ff fbd6 	bl	8023cc0 <load_obj_dir>
 8024514:	4601      	mov	r1, r0
		if (res != FR_OK) return res;
 8024516:	b9c0      	cbnz	r0, 802454a <follow_path+0x92>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8024518:	f8d9 5010 	ldr.w	r5, [r9, #16]
 802451c:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8024520:	f7fe ff32 	bl	8023388 <ld_dword>
 8024524:	e9c4 0104 	strd	r0, r1, [r4, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8024528:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 802452c:	f003 0302 	and.w	r3, r3, #2
 8024530:	71e3      	strb	r3, [r4, #7]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8024532:	f898 3000 	ldrb.w	r3, [r8]
 8024536:	2b1f      	cmp	r3, #31
 8024538:	f200 80fb 	bhi.w	8024732 <follow_path+0x27a>
		dp->fn[NSFLAG] = NS_NONAME;
 802453c:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 802453e:	2100      	movs	r1, #0
 8024540:	4620      	mov	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
 8024542:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8024546:	f7ff f91f 	bl	8023788 <dir_sdi>
}
 802454a:	b019      	add	sp, #100	; 0x64
 802454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8024550:	3501      	adds	r5, #1
 8024552:	e101      	b.n	8024758 <follow_path+0x2a0>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8024554:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8024558:	9300      	str	r3, [sp, #0]
 802455a:	d00c      	beq.n	8024576 <follow_path+0xbe>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 802455c:	2101      	movs	r1, #1
 802455e:	f000 fa09 	bl	8024974 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8024562:	b140      	cbz	r0, 8024576 <follow_path+0xbe>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8024564:	287f      	cmp	r0, #127	; 0x7f
 8024566:	9b00      	ldr	r3, [sp, #0]
 8024568:	d807      	bhi.n	802457a <follow_path+0xc2>
 802456a:	499f      	ldr	r1, [pc, #636]	; (80247e8 <follow_path+0x330>)
	while (*str && *str != chr) str++;
 802456c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024570:	b11a      	cbz	r2, 802457a <follow_path+0xc2>
 8024572:	4282      	cmp	r2, r0
 8024574:	d1fa      	bne.n	802456c <follow_path+0xb4>
						res = FR_OK;
 8024576:	2006      	movs	r0, #6
 8024578:	e7e7      	b.n	802454a <follow_path+0x92>
		w = p[si++];					/* Get a character */
 802457a:	462e      	mov	r6, r5
		lfn[di++] = w;					/* Store the Unicode character */
 802457c:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8024580:	e0e0      	b.n	8024744 <follow_path+0x28c>
	if ((di == 1 && lfn[di - 1] == '.') ||
 8024582:	2e02      	cmp	r6, #2
 8024584:	d104      	bne.n	8024590 <follow_path+0xd8>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8024586:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802458a:	2b2e      	cmp	r3, #46	; 0x2e
 802458c:	f000 80f4 	beq.w	8024778 <follow_path+0x2c0>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8024590:	bb66      	cbnz	r6, 80245ec <follow_path+0x134>
	lfn[di] = 0;						/* LFN is created */
 8024592:	2300      	movs	r3, #0
 8024594:	f82b 3016 	strh.w	r3, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8024598:	2e00      	cmp	r6, #0
 802459a:	d0ec      	beq.n	8024576 <follow_path+0xbe>
	mem_set(dp->fn, ' ', 11);
 802459c:	2120      	movs	r1, #32
 802459e:	220b      	movs	r2, #11
 80245a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80245a4:	f7fe ff16 	bl	80233d4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80245a8:	4619      	mov	r1, r3
 80245aa:	f83b 3011 	ldrh.w	r3, [fp, r1, lsl #1]
 80245ae:	2b20      	cmp	r3, #32
 80245b0:	d024      	beq.n	80245fc <follow_path+0x144>
 80245b2:	2b2e      	cmp	r3, #46	; 0x2e
 80245b4:	d022      	beq.n	80245fc <follow_path+0x144>
	if (si) cf |= NS_LOSS | NS_LFN;
 80245b6:	b109      	cbz	r1, 80245bc <follow_path+0x104>
 80245b8:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80245bc:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 80245c0:	2b2e      	cmp	r3, #46	; 0x2e
 80245c2:	d001      	beq.n	80245c8 <follow_path+0x110>
 80245c4:	3e01      	subs	r6, #1
 80245c6:	d1f9      	bne.n	80245bc <follow_path+0x104>
		dp->fn[i++] = (BYTE)w;
 80245c8:	2300      	movs	r3, #0
 80245ca:	f04f 0a08 	mov.w	sl, #8
 80245ce:	461f      	mov	r7, r3
		w = lfn[si++];					/* Get an LFN character */
 80245d0:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 80245d4:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 80245d6:	b310      	cbz	r0, 802461e <follow_path+0x166>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80245d8:	2820      	cmp	r0, #32
 80245da:	d003      	beq.n	80245e4 <follow_path+0x12c>
 80245dc:	282e      	cmp	r0, #46	; 0x2e
 80245de:	d10f      	bne.n	8024600 <follow_path+0x148>
 80245e0:	42b2      	cmp	r2, r6
 80245e2:	d011      	beq.n	8024608 <follow_path+0x150>
			cf |= NS_LOSS | NS_LFN; continue;
 80245e4:	f045 0503 	orr.w	r5, r5, #3
		dp->fn[i++] = (BYTE)w;
 80245e8:	4611      	mov	r1, r2
 80245ea:	e7f1      	b.n	80245d0 <follow_path+0x118>
		w = lfn[di - 1];
 80245ec:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
		if (w != ' ' && w != '.') break;
 80245f0:	2b20      	cmp	r3, #32
 80245f2:	d001      	beq.n	80245f8 <follow_path+0x140>
 80245f4:	2b2e      	cmp	r3, #46	; 0x2e
 80245f6:	d1cc      	bne.n	8024592 <follow_path+0xda>
		di--;
 80245f8:	3e01      	subs	r6, #1
 80245fa:	e7c9      	b.n	8024590 <follow_path+0xd8>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80245fc:	3101      	adds	r1, #1
 80245fe:	e7d4      	b.n	80245aa <follow_path+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8024600:	4553      	cmp	r3, sl
 8024602:	d205      	bcs.n	8024610 <follow_path+0x158>
 8024604:	42b2      	cmp	r2, r6
 8024606:	d13a      	bne.n	802467e <follow_path+0x1c6>
			if (ni == 11) {				/* Long extension */
 8024608:	f1ba 0f0b 	cmp.w	sl, #11
 802460c:	d130      	bne.n	8024670 <follow_path+0x1b8>
 802460e:	e002      	b.n	8024616 <follow_path+0x15e>
 8024610:	f1ba 0f0b 	cmp.w	sl, #11
 8024614:	d127      	bne.n	8024666 <follow_path+0x1ae>
				cf |= NS_LOSS | NS_LFN; break;
 8024616:	f045 0503 	orr.w	r5, r5, #3
 802461a:	f04f 0a0b 	mov.w	sl, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 802461e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8024622:	2be5      	cmp	r3, #229	; 0xe5
 8024624:	bf04      	itt	eq
 8024626:	2305      	moveq	r3, #5
 8024628:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
	if (ni == 8) b <<= 2;
 802462c:	f1ba 0f08 	cmp.w	sl, #8
 8024630:	bf04      	itt	eq
 8024632:	00bf      	lsleq	r7, r7, #2
 8024634:	b2ff      	uxtbeq	r7, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8024636:	f007 030c 	and.w	r3, r7, #12
 802463a:	2b0c      	cmp	r3, #12
 802463c:	d003      	beq.n	8024646 <follow_path+0x18e>
 802463e:	f007 0203 	and.w	r2, r7, #3
 8024642:	2a03      	cmp	r2, #3
 8024644:	d101      	bne.n	802464a <follow_path+0x192>
 8024646:	f045 0502 	orr.w	r5, r5, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 802464a:	07a8      	lsls	r0, r5, #30
 802464c:	f100 80a9 	bmi.w	80247a2 <follow_path+0x2ea>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8024650:	f007 0703 	and.w	r7, r7, #3
 8024654:	2f01      	cmp	r7, #1
 8024656:	bf08      	it	eq
 8024658:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 802465c:	2b04      	cmp	r3, #4
 802465e:	bf08      	it	eq
 8024660:	f045 0508 	orreq.w	r5, r5, #8
 8024664:	e09d      	b.n	80247a2 <follow_path+0x2ea>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8024666:	42b2      	cmp	r2, r6
 8024668:	d002      	beq.n	8024670 <follow_path+0x1b8>
 802466a:	f045 0503 	orr.w	r5, r5, #3
			if (si > di) break;			/* No extension */
 802466e:	d8d6      	bhi.n	802461e <follow_path+0x166>
			b <<= 2; continue;
 8024670:	00bf      	lsls	r7, r7, #2
 8024672:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8024674:	f04f 0a0b 	mov.w	sl, #11
 8024678:	2308      	movs	r3, #8
			b <<= 2; continue;
 802467a:	b2ff      	uxtb	r7, r7
 802467c:	e7b4      	b.n	80245e8 <follow_path+0x130>
		if (w >= 0x80) {				/* Non ASCII character */
 802467e:	287f      	cmp	r0, #127	; 0x7f
 8024680:	d90e      	bls.n	80246a0 <follow_path+0x1e8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8024682:	2100      	movs	r1, #0
 8024684:	f045 0502 	orr.w	r5, r5, #2
 8024688:	e9cd 2300 	strd	r2, r3, [sp]
 802468c:	f000 f972 	bl	8024974 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8024690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024694:	b158      	cbz	r0, 80246ae <follow_path+0x1f6>
 8024696:	4955      	ldr	r1, [pc, #340]	; (80247ec <follow_path+0x334>)
 8024698:	4408      	add	r0, r1
 802469a:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 802469e:	b130      	cbz	r0, 80246ae <follow_path+0x1f6>
	while (*str && *str != chr) str++;
 80246a0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 80247f0 <follow_path+0x338>
 80246a4:	f81c 1b01 	ldrb.w	r1, [ip], #1
 80246a8:	b149      	cbz	r1, 80246be <follow_path+0x206>
 80246aa:	4281      	cmp	r1, r0
 80246ac:	d1fa      	bne.n	80246a4 <follow_path+0x1ec>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80246ae:	f045 0503 	orr.w	r5, r5, #3
 80246b2:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80246b4:	18e1      	adds	r1, r4, r3
 80246b6:	3301      	adds	r3, #1
 80246b8:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 80246bc:	e794      	b.n	80245e8 <follow_path+0x130>
				if (IsUpper(w)) {		/* ASCII large capital */
 80246be:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80246c2:	2919      	cmp	r1, #25
 80246c4:	d802      	bhi.n	80246cc <follow_path+0x214>
					b |= 2;
 80246c6:	f047 0702 	orr.w	r7, r7, #2
 80246ca:	e7f3      	b.n	80246b4 <follow_path+0x1fc>
					if (IsLower(w)) {	/* ASCII small capital */
 80246cc:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80246d0:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80246d2:	bf9e      	ittt	ls
 80246d4:	3820      	subls	r0, #32
 80246d6:	f047 0701 	orrls.w	r7, r7, #1
 80246da:	b280      	uxthls	r0, r0
 80246dc:	e7ea      	b.n	80246b4 <follow_path+0x1fc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80246de:	2a00      	cmp	r2, #0
 80246e0:	bf08      	it	eq
 80246e2:	2005      	moveq	r0, #5
 80246e4:	e731      	b.n	802454a <follow_path+0x92>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80246e6:	075a      	lsls	r2, r3, #29
 80246e8:	f53f af2f 	bmi.w	802454a <follow_path+0x92>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80246ec:	79a3      	ldrb	r3, [r4, #6]
 80246ee:	06db      	lsls	r3, r3, #27
 80246f0:	d578      	bpl.n	80247e4 <follow_path+0x32c>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80246f2:	f899 0000 	ldrb.w	r0, [r9]
 80246f6:	2804      	cmp	r0, #4
 80246f8:	d16a      	bne.n	80247d0 <follow_path+0x318>
				obj->c_scl = obj->sclust;
 80246fa:	68a3      	ldr	r3, [r4, #8]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80246fc:	79e2      	ldrb	r2, [r4, #7]
				obj->c_scl = obj->sclust;
 80246fe:	6223      	str	r3, [r4, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8024700:	6923      	ldr	r3, [r4, #16]
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8024702:	f8d9 1010 	ldr.w	r1, [r9, #16]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8024706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 802470a:	f101 0034 	add.w	r0, r1, #52	; 0x34
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 802470e:	4313      	orrs	r3, r2
 8024710:	6263      	str	r3, [r4, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8024712:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8024714:	62a3      	str	r3, [r4, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8024716:	f7fe fe37 	bl	8023388 <ld_dword>
 802471a:	60a0      	str	r0, [r4, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 802471c:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8024720:	f101 0038 	add.w	r0, r1, #56	; 0x38
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8024724:	f003 0302 	and.w	r3, r3, #2
 8024728:	71e3      	strb	r3, [r4, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 802472a:	f7fe fe35 	bl	8023398 <ld_qword>
 802472e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8024732:	6823      	ldr	r3, [r4, #0]
 8024734:	2600      	movs	r6, #0
 8024736:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802473a:	f108 33ff 	add.w	r3, r8, #4294967295
 802473e:	f1ab 0702 	sub.w	r7, fp, #2
 8024742:	46ba      	mov	sl, r7
		w = p[si++];					/* Get a character */
 8024744:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8024748:	1c75      	adds	r5, r6, #1
		if (w < ' ') break;				/* Break if end of the path name */
 802474a:	281f      	cmp	r0, #31
 802474c:	d90c      	bls.n	8024768 <follow_path+0x2b0>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 802474e:	282f      	cmp	r0, #47	; 0x2f
 8024750:	d002      	beq.n	8024758 <follow_path+0x2a0>
 8024752:	285c      	cmp	r0, #92	; 0x5c
 8024754:	f47f aefe 	bne.w	8024554 <follow_path+0x9c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8024758:	f818 3005 	ldrb.w	r3, [r8, r5]
 802475c:	2b2f      	cmp	r3, #47	; 0x2f
 802475e:	f43f aef7 	beq.w	8024550 <follow_path+0x98>
 8024762:	2b5c      	cmp	r3, #92	; 0x5c
 8024764:	f43f aef4 	beq.w	8024550 <follow_path+0x98>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8024768:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 802476a:	44a8      	add	r8, r5
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802476c:	bf34      	ite	cc
 802476e:	2504      	movcc	r5, #4
 8024770:	2500      	movcs	r5, #0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8024772:	2e01      	cmp	r6, #1
 8024774:	f47f af05 	bne.w	8024582 <follow_path+0xca>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8024778:	f8bb 3000 	ldrh.w	r3, [fp]
 802477c:	2b2e      	cmp	r3, #46	; 0x2e
 802477e:	f47f af07 	bne.w	8024590 <follow_path+0xd8>
		lfn[di] = 0;
 8024782:	2300      	movs	r3, #0
 8024784:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8024788:	f82b 3016 	strh.w	r3, [fp, r6, lsl #1]
			dp->fn[i] = (i < di) ? '.' : ' ';
 802478c:	429e      	cmp	r6, r3
 802478e:	bf8c      	ite	hi
 8024790:	212e      	movhi	r1, #46	; 0x2e
 8024792:	2120      	movls	r1, #32
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8024794:	3301      	adds	r3, #1
 8024796:	2b0b      	cmp	r3, #11
			dp->fn[i] = (i < di) ? '.' : ' ';
 8024798:	f802 1b01 	strb.w	r1, [r2], #1
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 802479c:	d1f6      	bne.n	802478c <follow_path+0x2d4>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 802479e:	f045 0520 	orr.w	r5, r5, #32
			res = dir_find(dp);				/* Find an object with the segment name */
 80247a2:	4620      	mov	r0, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80247a4:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 80247a8:	f7ff fb48 	bl	8023e3c <dir_find>
			ns = dp->fn[NSFLAG];
 80247ac:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 80247b0:	2800      	cmp	r0, #0
 80247b2:	d098      	beq.n	80246e6 <follow_path+0x22e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80247b4:	2804      	cmp	r0, #4
 80247b6:	f47f aec8 	bne.w	802454a <follow_path+0x92>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80247ba:	0699      	lsls	r1, r3, #26
 80247bc:	f003 0204 	and.w	r2, r3, #4
 80247c0:	d58d      	bpl.n	80246de <follow_path+0x226>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80247c2:	2a00      	cmp	r2, #0
 80247c4:	d0b5      	beq.n	8024732 <follow_path+0x27a>
						dp->fn[NSFLAG] = NS_NONAME;
 80247c6:	2380      	movs	r3, #128	; 0x80
						res = FR_OK;
 80247c8:	2000      	movs	r0, #0
						dp->fn[NSFLAG] = NS_NONAME;
 80247ca:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
						res = FR_OK;
 80247ce:	e6bc      	b.n	802454a <follow_path+0x92>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80247d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80247d2:	f109 0148 	add.w	r1, r9, #72	; 0x48
 80247d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80247da:	4419      	add	r1, r3
 80247dc:	f7fe feac 	bl	8023538 <ld_clust.isra.0>
 80247e0:	60a0      	str	r0, [r4, #8]
 80247e2:	e7a6      	b.n	8024732 <follow_path+0x27a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80247e4:	2005      	movs	r0, #5
 80247e6:	e6b0      	b.n	802454a <follow_path+0x92>
 80247e8:	0802a160 	.word	0x0802a160
 80247ec:	0802a170 	.word	0x0802a170
 80247f0:	0802a169 	.word	0x0802a169

080247f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80247f4:	b530      	push	{r4, r5, lr}
 80247f6:	b085      	sub	sp, #20
 80247f8:	4615      	mov	r5, r2
 80247fa:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80247fe:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8024800:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8024802:	f7fe fe60 	bl	80234c6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8024806:	1e01      	subs	r1, r0, #0
 8024808:	db20      	blt.n	802484c <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 802480a:	4c12      	ldr	r4, [pc, #72]	; (8024854 <f_mount+0x60>)
 802480c:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]

	if (cfs) {
 8024810:	b160      	cbz	r0, 802482c <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8024812:	4b11      	ldr	r3, [pc, #68]	; (8024858 <f_mount+0x64>)
 8024814:	681a      	ldr	r2, [r3, #0]
 8024816:	4290      	cmp	r0, r2
 8024818:	bf04      	itt	eq
 802481a:	2200      	moveq	r2, #0
 802481c:	601a      	streq	r2, [r3, #0]
 802481e:	691a      	ldr	r2, [r3, #16]
 8024820:	4290      	cmp	r0, r2
 8024822:	f04f 0200 	mov.w	r2, #0
 8024826:	bf08      	it	eq
 8024828:	611a      	streq	r2, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 802482a:	7002      	strb	r2, [r0, #0]
	}

	if (fs) {
 802482c:	9801      	ldr	r0, [sp, #4]
 802482e:	b108      	cbz	r0, 8024834 <f_mount+0x40>
		fs->fs_type = 0;				/* Clear new fs object */
 8024830:	2300      	movs	r3, #0
 8024832:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8024834:	f844 0021 	str.w	r0, [r4, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8024838:	b130      	cbz	r0, 8024848 <f_mount+0x54>
 802483a:	2d01      	cmp	r5, #1
 802483c:	d108      	bne.n	8024850 <f_mount+0x5c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 802483e:	2200      	movs	r2, #0
 8024840:	a901      	add	r1, sp, #4
 8024842:	4668      	mov	r0, sp
 8024844:	f7ff fc4a 	bl	80240dc <find_volume>
	LEAVE_FF(fs, res);
}
 8024848:	b005      	add	sp, #20
 802484a:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 802484c:	200b      	movs	r0, #11
 802484e:	e7fb      	b.n	8024848 <f_mount+0x54>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8024850:	2000      	movs	r0, #0
 8024852:	e7f9      	b.n	8024848 <f_mount+0x54>
 8024854:	2000b240 	.word	0x2000b240
 8024858:	2000b244 	.word	0x2000b244

0802485c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 802485c:	b530      	push	{r4, r5, lr}
 802485e:	f2ad 4d74 	subw	sp, sp, #1140	; 0x474
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8024862:	4604      	mov	r4, r0
{
 8024864:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8024866:	2800      	cmp	r0, #0
 8024868:	d05e      	beq.n	8024928 <f_opendir+0xcc>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 802486a:	2200      	movs	r2, #0
 802486c:	a903      	add	r1, sp, #12
 802486e:	a801      	add	r0, sp, #4
 8024870:	f7ff fc34 	bl	80240dc <find_volume>
	if (res == FR_OK) {
 8024874:	4605      	mov	r5, r0
 8024876:	b9a0      	cbnz	r0, 80248a2 <f_opendir+0x46>
		obj->fs = fs;
 8024878:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 802487a:	aa04      	add	r2, sp, #16
		res = follow_path(dp, path);			/* Follow the path to the directory */
 802487c:	9901      	ldr	r1, [sp, #4]
 802487e:	4620      	mov	r0, r4
		obj->fs = fs;
 8024880:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 8024882:	60da      	str	r2, [r3, #12]
 8024884:	aa84      	add	r2, sp, #528	; 0x210
 8024886:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8024888:	f7ff fe16 	bl	80244b8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 802488c:	4605      	mov	r5, r0
 802488e:	2800      	cmp	r0, #0
 8024890:	d145      	bne.n	802491e <f_opendir+0xc2>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8024892:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 8024896:	2b00      	cmp	r3, #0
 8024898:	db25      	blt.n	80248e6 <f_opendir+0x8a>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 802489a:	79a3      	ldrb	r3, [r4, #6]
 802489c:	06db      	lsls	r3, r3, #27
 802489e:	d403      	bmi.n	80248a8 <f_opendir+0x4c>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80248a0:	2505      	movs	r5, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80248a2:	2300      	movs	r3, #0
 80248a4:	6023      	str	r3, [r4, #0]
 80248a6:	e02f      	b.n	8024908 <f_opendir+0xac>
					if (fs->fs_type == FS_EXFAT) {
 80248a8:	9a03      	ldr	r2, [sp, #12]
 80248aa:	7810      	ldrb	r0, [r2, #0]
 80248ac:	2804      	cmp	r0, #4
 80248ae:	d12f      	bne.n	8024910 <f_opendir+0xb4>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80248b0:	68a3      	ldr	r3, [r4, #8]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80248b2:	79e1      	ldrb	r1, [r4, #7]
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80248b4:	6223      	str	r3, [r4, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80248b6:	6923      	ldr	r3, [r4, #16]
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80248b8:	6915      	ldr	r5, [r2, #16]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80248ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80248be:	f105 0034 	add.w	r0, r5, #52	; 0x34
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80248c2:	430b      	orrs	r3, r1
 80248c4:	6263      	str	r3, [r4, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 80248c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80248c8:	62a3      	str	r3, [r4, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80248ca:	f7fe fd5d 	bl	8023388 <ld_dword>
 80248ce:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80248d0:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80248d4:	f7fe fd60 	bl	8023398 <ld_qword>
 80248d8:	e9c4 0104 	strd	r0, r1, [r4, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80248dc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80248e0:	f003 0302 	and.w	r3, r3, #2
 80248e4:	71e3      	strb	r3, [r4, #7]
				obj->id = fs->id;
 80248e6:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80248e8:	2100      	movs	r1, #0
 80248ea:	4620      	mov	r0, r4
				obj->id = fs->id;
 80248ec:	88db      	ldrh	r3, [r3, #6]
 80248ee:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80248f0:	f7fe ff4a 	bl	8023788 <dir_sdi>
				if (res == FR_OK) {
 80248f4:	4605      	mov	r5, r0
 80248f6:	b990      	cbnz	r0, 802491e <f_opendir+0xc2>
					if (obj->sclust) {
 80248f8:	68a3      	ldr	r3, [r4, #8]
 80248fa:	b173      	cbz	r3, 802491a <f_opendir+0xbe>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80248fc:	4601      	mov	r1, r0
 80248fe:	4620      	mov	r0, r4
 8024900:	f7fe fd6e 	bl	80233e0 <inc_lock>
 8024904:	62e0      	str	r0, [r4, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8024906:	b168      	cbz	r0, 8024924 <f_opendir+0xc8>

	LEAVE_FF(fs, res);
}
 8024908:	4628      	mov	r0, r5
 802490a:	f20d 4d74 	addw	sp, sp, #1140	; 0x474
 802490e:	bd30      	pop	{r4, r5, pc}
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8024910:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8024912:	f7fe fe11 	bl	8023538 <ld_clust.isra.0>
 8024916:	60a0      	str	r0, [r4, #8]
 8024918:	e7e5      	b.n	80248e6 <f_opendir+0x8a>
						obj->lockid = 0;	/* Root directory need not to be locked */
 802491a:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 802491c:	e7f4      	b.n	8024908 <f_opendir+0xac>
 802491e:	2d04      	cmp	r5, #4
 8024920:	d0be      	beq.n	80248a0 <f_opendir+0x44>
 8024922:	e7be      	b.n	80248a2 <f_opendir+0x46>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8024924:	2512      	movs	r5, #18
 8024926:	e7bc      	b.n	80248a2 <f_opendir+0x46>
	if (!dp) return FR_INVALID_OBJECT;
 8024928:	2509      	movs	r5, #9
 802492a:	e7ed      	b.n	8024908 <f_opendir+0xac>

0802492c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 802492c:	4b0e      	ldr	r3, [pc, #56]	; (8024968 <FATFS_LinkDriverEx+0x3c>)
{
 802492e:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8024930:	7a5c      	ldrb	r4, [r3, #9]
{
 8024932:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 8024934:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8024938:	b9a4      	cbnz	r4, 8024964 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 802493a:	7a5c      	ldrb	r4, [r3, #9]
 802493c:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 802493e:	7a5c      	ldrb	r4, [r3, #9]
 8024940:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024944:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8024946:	7a5c      	ldrb	r4, [r3, #9]
 8024948:	441c      	add	r4, r3
 802494a:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 802494c:	7a5a      	ldrb	r2, [r3, #9]
 802494e:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8024950:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8024952:	b2e4      	uxtb	r4, r4
 8024954:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8024956:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8024958:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 802495a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 802495c:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 802495e:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 8024960:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 8024962:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8024964:	2001      	movs	r0, #1
 8024966:	e7fc      	b.n	8024962 <FATFS_LinkDriverEx+0x36>
 8024968:	2000b268 	.word	0x2000b268

0802496c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 802496c:	2200      	movs	r2, #0
 802496e:	f7ff bfdd 	b.w	802492c <FATFS_LinkDriverEx>
	...

08024974 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8024974:	287f      	cmp	r0, #127	; 0x7f
{
 8024976:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8024978:	d906      	bls.n	8024988 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 802497a:	b131      	cbz	r1, 802498a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 802497c:	28ff      	cmp	r0, #255	; 0xff
 802497e:	d812      	bhi.n	80249a6 <ff_convert+0x32>
 8024980:	3880      	subs	r0, #128	; 0x80
 8024982:	4b0a      	ldr	r3, [pc, #40]	; (80249ac <ff_convert+0x38>)
 8024984:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8024988:	bd10      	pop	{r4, pc}
 802498a:	4a08      	ldr	r2, [pc, #32]	; (80249ac <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 802498c:	f832 4b02 	ldrh.w	r4, [r2], #2
 8024990:	b28b      	uxth	r3, r1
 8024992:	4284      	cmp	r4, r0
 8024994:	d003      	beq.n	802499e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8024996:	3101      	adds	r1, #1
 8024998:	2980      	cmp	r1, #128	; 0x80
 802499a:	d1f7      	bne.n	802498c <ff_convert+0x18>
 802499c:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 802499e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80249a2:	b2c0      	uxtb	r0, r0
 80249a4:	e7f0      	b.n	8024988 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80249a6:	2000      	movs	r0, #0
 80249a8:	e7ee      	b.n	8024988 <ff_convert+0x14>
 80249aa:	bf00      	nop
 80249ac:	0802a1fe 	.word	0x0802a1fe

080249b0 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80249b0:	4b1e      	ldr	r3, [pc, #120]	; (8024a2c <ff_wtoupper+0x7c>)
 80249b2:	4a1f      	ldr	r2, [pc, #124]	; (8024a30 <ff_wtoupper+0x80>)
 80249b4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80249b8:	bf28      	it	cs
 80249ba:	4613      	movcs	r3, r2
{
 80249bc:	b570      	push	{r4, r5, r6, lr}
 80249be:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 80249c0:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 80249c4:	460a      	mov	r2, r1
 80249c6:	b1ab      	cbz	r3, 80249f4 <ff_wtoupper+0x44>
 80249c8:	4298      	cmp	r0, r3
 80249ca:	d313      	bcc.n	80249f4 <ff_wtoupper+0x44>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80249cc:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 80249d0:	0a25      	lsrs	r5, r4, #8
 80249d2:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 80249d4:	fa53 f484 	uxtab	r4, r3, r4
 80249d8:	42a0      	cmp	r0, r4
 80249da:	da21      	bge.n	8024a20 <ff_wtoupper+0x70>
			switch (cmd) {
 80249dc:	2d08      	cmp	r5, #8
 80249de:	d809      	bhi.n	80249f4 <ff_wtoupper+0x44>
 80249e0:	e8df f005 	tbb	[pc, r5]
 80249e4:	110f0905 	.word	0x110f0905
 80249e8:	19171513 	.word	0x19171513
 80249ec:	1b          	.byte	0x1b
 80249ed:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80249ee:	1ac0      	subs	r0, r0, r3
 80249f0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 80249f4:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80249f6:	1ac3      	subs	r3, r0, r3
 80249f8:	f003 0301 	and.w	r3, r3, #1
 80249fc:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80249fe:	b280      	uxth	r0, r0
 8024a00:	e7f8      	b.n	80249f4 <ff_wtoupper+0x44>
			case 2: chr -= 16; break;				/* Shift -16 */
 8024a02:	3810      	subs	r0, #16
 8024a04:	e7fb      	b.n	80249fe <ff_wtoupper+0x4e>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8024a06:	3820      	subs	r0, #32
 8024a08:	e7f9      	b.n	80249fe <ff_wtoupper+0x4e>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8024a0a:	3830      	subs	r0, #48	; 0x30
 8024a0c:	e7f7      	b.n	80249fe <ff_wtoupper+0x4e>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8024a0e:	381a      	subs	r0, #26
 8024a10:	e7f5      	b.n	80249fe <ff_wtoupper+0x4e>
			case 6:	chr += 8; break;				/* Shift +8 */
 8024a12:	3008      	adds	r0, #8
 8024a14:	e7f3      	b.n	80249fe <ff_wtoupper+0x4e>
			case 7: chr -= 80; break;				/* Shift -80 */
 8024a16:	3850      	subs	r0, #80	; 0x50
 8024a18:	e7f1      	b.n	80249fe <ff_wtoupper+0x4e>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8024a1a:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8024a1e:	e7ee      	b.n	80249fe <ff_wtoupper+0x4e>
		if (!cmd) p += nc;
 8024a20:	3104      	adds	r1, #4
 8024a22:	2d00      	cmp	r5, #0
 8024a24:	d1cc      	bne.n	80249c0 <ff_wtoupper+0x10>
 8024a26:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8024a2a:	e7c8      	b.n	80249be <ff_wtoupper+0xe>
 8024a2c:	0802a2fe 	.word	0x0802a2fe
 8024a30:	0802a4f0 	.word	0x0802a4f0

08024a34 <__cxa_guard_acquire>:
 8024a34:	6803      	ldr	r3, [r0, #0]
 8024a36:	07db      	lsls	r3, r3, #31
 8024a38:	d406      	bmi.n	8024a48 <__cxa_guard_acquire+0x14>
 8024a3a:	7843      	ldrb	r3, [r0, #1]
 8024a3c:	b103      	cbz	r3, 8024a40 <__cxa_guard_acquire+0xc>
 8024a3e:	deff      	udf	#255	; 0xff
 8024a40:	2301      	movs	r3, #1
 8024a42:	7043      	strb	r3, [r0, #1]
 8024a44:	4618      	mov	r0, r3
 8024a46:	4770      	bx	lr
 8024a48:	2000      	movs	r0, #0
 8024a4a:	4770      	bx	lr

08024a4c <__cxa_guard_release>:
 8024a4c:	2301      	movs	r3, #1
 8024a4e:	6003      	str	r3, [r0, #0]
 8024a50:	4770      	bx	lr
	...

08024a54 <__assert_func>:
 8024a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024a56:	4614      	mov	r4, r2
 8024a58:	461a      	mov	r2, r3
 8024a5a:	4b09      	ldr	r3, [pc, #36]	; (8024a80 <__assert_func+0x2c>)
 8024a5c:	681b      	ldr	r3, [r3, #0]
 8024a5e:	4605      	mov	r5, r0
 8024a60:	68d8      	ldr	r0, [r3, #12]
 8024a62:	b14c      	cbz	r4, 8024a78 <__assert_func+0x24>
 8024a64:	4b07      	ldr	r3, [pc, #28]	; (8024a84 <__assert_func+0x30>)
 8024a66:	9100      	str	r1, [sp, #0]
 8024a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024a6c:	4906      	ldr	r1, [pc, #24]	; (8024a88 <__assert_func+0x34>)
 8024a6e:	462b      	mov	r3, r5
 8024a70:	f000 f814 	bl	8024a9c <fiprintf>
 8024a74:	f000 fc1a 	bl	80252ac <abort>
 8024a78:	4b04      	ldr	r3, [pc, #16]	; (8024a8c <__assert_func+0x38>)
 8024a7a:	461c      	mov	r4, r3
 8024a7c:	e7f3      	b.n	8024a66 <__assert_func+0x12>
 8024a7e:	bf00      	nop
 8024a80:	2000007c 	.word	0x2000007c
 8024a84:	0802a5ac 	.word	0x0802a5ac
 8024a88:	0802a5b9 	.word	0x0802a5b9
 8024a8c:	0802a5e7 	.word	0x0802a5e7

08024a90 <__errno>:
 8024a90:	4b01      	ldr	r3, [pc, #4]	; (8024a98 <__errno+0x8>)
 8024a92:	6818      	ldr	r0, [r3, #0]
 8024a94:	4770      	bx	lr
 8024a96:	bf00      	nop
 8024a98:	2000007c 	.word	0x2000007c

08024a9c <fiprintf>:
 8024a9c:	b40e      	push	{r1, r2, r3}
 8024a9e:	b503      	push	{r0, r1, lr}
 8024aa0:	4601      	mov	r1, r0
 8024aa2:	ab03      	add	r3, sp, #12
 8024aa4:	4805      	ldr	r0, [pc, #20]	; (8024abc <fiprintf+0x20>)
 8024aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8024aaa:	6800      	ldr	r0, [r0, #0]
 8024aac:	9301      	str	r3, [sp, #4]
 8024aae:	f000 f85d 	bl	8024b6c <_vfiprintf_r>
 8024ab2:	b002      	add	sp, #8
 8024ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8024ab8:	b003      	add	sp, #12
 8024aba:	4770      	bx	lr
 8024abc:	2000007c 	.word	0x2000007c

08024ac0 <__libc_init_array>:
 8024ac0:	b570      	push	{r4, r5, r6, lr}
 8024ac2:	4d0d      	ldr	r5, [pc, #52]	; (8024af8 <__libc_init_array+0x38>)
 8024ac4:	4c0d      	ldr	r4, [pc, #52]	; (8024afc <__libc_init_array+0x3c>)
 8024ac6:	1b64      	subs	r4, r4, r5
 8024ac8:	10a4      	asrs	r4, r4, #2
 8024aca:	2600      	movs	r6, #0
 8024acc:	42a6      	cmp	r6, r4
 8024ace:	d109      	bne.n	8024ae4 <__libc_init_array+0x24>
 8024ad0:	4d0b      	ldr	r5, [pc, #44]	; (8024b00 <__libc_init_array+0x40>)
 8024ad2:	4c0c      	ldr	r4, [pc, #48]	; (8024b04 <__libc_init_array+0x44>)
 8024ad4:	f000 ffc6 	bl	8025a64 <_init>
 8024ad8:	1b64      	subs	r4, r4, r5
 8024ada:	10a4      	asrs	r4, r4, #2
 8024adc:	2600      	movs	r6, #0
 8024ade:	42a6      	cmp	r6, r4
 8024ae0:	d105      	bne.n	8024aee <__libc_init_array+0x2e>
 8024ae2:	bd70      	pop	{r4, r5, r6, pc}
 8024ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8024ae8:	4798      	blx	r3
 8024aea:	3601      	adds	r6, #1
 8024aec:	e7ee      	b.n	8024acc <__libc_init_array+0xc>
 8024aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8024af2:	4798      	blx	r3
 8024af4:	3601      	adds	r6, #1
 8024af6:	e7f2      	b.n	8024ade <__libc_init_array+0x1e>
 8024af8:	0802a688 	.word	0x0802a688
 8024afc:	0802a688 	.word	0x0802a688
 8024b00:	0802a688 	.word	0x0802a688
 8024b04:	0802a694 	.word	0x0802a694

08024b08 <memset>:
 8024b08:	4402      	add	r2, r0
 8024b0a:	4603      	mov	r3, r0
 8024b0c:	4293      	cmp	r3, r2
 8024b0e:	d100      	bne.n	8024b12 <memset+0xa>
 8024b10:	4770      	bx	lr
 8024b12:	f803 1b01 	strb.w	r1, [r3], #1
 8024b16:	e7f9      	b.n	8024b0c <memset+0x4>

08024b18 <__sfputc_r>:
 8024b18:	6893      	ldr	r3, [r2, #8]
 8024b1a:	3b01      	subs	r3, #1
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	b410      	push	{r4}
 8024b20:	6093      	str	r3, [r2, #8]
 8024b22:	da08      	bge.n	8024b36 <__sfputc_r+0x1e>
 8024b24:	6994      	ldr	r4, [r2, #24]
 8024b26:	42a3      	cmp	r3, r4
 8024b28:	db01      	blt.n	8024b2e <__sfputc_r+0x16>
 8024b2a:	290a      	cmp	r1, #10
 8024b2c:	d103      	bne.n	8024b36 <__sfputc_r+0x1e>
 8024b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b32:	f000 bafb 	b.w	802512c <__swbuf_r>
 8024b36:	6813      	ldr	r3, [r2, #0]
 8024b38:	1c58      	adds	r0, r3, #1
 8024b3a:	6010      	str	r0, [r2, #0]
 8024b3c:	7019      	strb	r1, [r3, #0]
 8024b3e:	4608      	mov	r0, r1
 8024b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b44:	4770      	bx	lr

08024b46 <__sfputs_r>:
 8024b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b48:	4606      	mov	r6, r0
 8024b4a:	460f      	mov	r7, r1
 8024b4c:	4614      	mov	r4, r2
 8024b4e:	18d5      	adds	r5, r2, r3
 8024b50:	42ac      	cmp	r4, r5
 8024b52:	d101      	bne.n	8024b58 <__sfputs_r+0x12>
 8024b54:	2000      	movs	r0, #0
 8024b56:	e007      	b.n	8024b68 <__sfputs_r+0x22>
 8024b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024b5c:	463a      	mov	r2, r7
 8024b5e:	4630      	mov	r0, r6
 8024b60:	f7ff ffda 	bl	8024b18 <__sfputc_r>
 8024b64:	1c43      	adds	r3, r0, #1
 8024b66:	d1f3      	bne.n	8024b50 <__sfputs_r+0xa>
 8024b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024b6c <_vfiprintf_r>:
 8024b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b70:	460d      	mov	r5, r1
 8024b72:	b09d      	sub	sp, #116	; 0x74
 8024b74:	4614      	mov	r4, r2
 8024b76:	4698      	mov	r8, r3
 8024b78:	4606      	mov	r6, r0
 8024b7a:	b118      	cbz	r0, 8024b84 <_vfiprintf_r+0x18>
 8024b7c:	6983      	ldr	r3, [r0, #24]
 8024b7e:	b90b      	cbnz	r3, 8024b84 <_vfiprintf_r+0x18>
 8024b80:	f000 fcb6 	bl	80254f0 <__sinit>
 8024b84:	4b89      	ldr	r3, [pc, #548]	; (8024dac <_vfiprintf_r+0x240>)
 8024b86:	429d      	cmp	r5, r3
 8024b88:	d11b      	bne.n	8024bc2 <_vfiprintf_r+0x56>
 8024b8a:	6875      	ldr	r5, [r6, #4]
 8024b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024b8e:	07d9      	lsls	r1, r3, #31
 8024b90:	d405      	bmi.n	8024b9e <_vfiprintf_r+0x32>
 8024b92:	89ab      	ldrh	r3, [r5, #12]
 8024b94:	059a      	lsls	r2, r3, #22
 8024b96:	d402      	bmi.n	8024b9e <_vfiprintf_r+0x32>
 8024b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024b9a:	f000 fd47 	bl	802562c <__retarget_lock_acquire_recursive>
 8024b9e:	89ab      	ldrh	r3, [r5, #12]
 8024ba0:	071b      	lsls	r3, r3, #28
 8024ba2:	d501      	bpl.n	8024ba8 <_vfiprintf_r+0x3c>
 8024ba4:	692b      	ldr	r3, [r5, #16]
 8024ba6:	b9eb      	cbnz	r3, 8024be4 <_vfiprintf_r+0x78>
 8024ba8:	4629      	mov	r1, r5
 8024baa:	4630      	mov	r0, r6
 8024bac:	f000 fb10 	bl	80251d0 <__swsetup_r>
 8024bb0:	b1c0      	cbz	r0, 8024be4 <_vfiprintf_r+0x78>
 8024bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024bb4:	07dc      	lsls	r4, r3, #31
 8024bb6:	d50e      	bpl.n	8024bd6 <_vfiprintf_r+0x6a>
 8024bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8024bbc:	b01d      	add	sp, #116	; 0x74
 8024bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bc2:	4b7b      	ldr	r3, [pc, #492]	; (8024db0 <_vfiprintf_r+0x244>)
 8024bc4:	429d      	cmp	r5, r3
 8024bc6:	d101      	bne.n	8024bcc <_vfiprintf_r+0x60>
 8024bc8:	68b5      	ldr	r5, [r6, #8]
 8024bca:	e7df      	b.n	8024b8c <_vfiprintf_r+0x20>
 8024bcc:	4b79      	ldr	r3, [pc, #484]	; (8024db4 <_vfiprintf_r+0x248>)
 8024bce:	429d      	cmp	r5, r3
 8024bd0:	bf08      	it	eq
 8024bd2:	68f5      	ldreq	r5, [r6, #12]
 8024bd4:	e7da      	b.n	8024b8c <_vfiprintf_r+0x20>
 8024bd6:	89ab      	ldrh	r3, [r5, #12]
 8024bd8:	0598      	lsls	r0, r3, #22
 8024bda:	d4ed      	bmi.n	8024bb8 <_vfiprintf_r+0x4c>
 8024bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024bde:	f000 fd26 	bl	802562e <__retarget_lock_release_recursive>
 8024be2:	e7e9      	b.n	8024bb8 <_vfiprintf_r+0x4c>
 8024be4:	2300      	movs	r3, #0
 8024be6:	9309      	str	r3, [sp, #36]	; 0x24
 8024be8:	2320      	movs	r3, #32
 8024bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8024bf2:	2330      	movs	r3, #48	; 0x30
 8024bf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024db8 <_vfiprintf_r+0x24c>
 8024bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024bfc:	f04f 0901 	mov.w	r9, #1
 8024c00:	4623      	mov	r3, r4
 8024c02:	469a      	mov	sl, r3
 8024c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024c08:	b10a      	cbz	r2, 8024c0e <_vfiprintf_r+0xa2>
 8024c0a:	2a25      	cmp	r2, #37	; 0x25
 8024c0c:	d1f9      	bne.n	8024c02 <_vfiprintf_r+0x96>
 8024c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8024c12:	d00b      	beq.n	8024c2c <_vfiprintf_r+0xc0>
 8024c14:	465b      	mov	r3, fp
 8024c16:	4622      	mov	r2, r4
 8024c18:	4629      	mov	r1, r5
 8024c1a:	4630      	mov	r0, r6
 8024c1c:	f7ff ff93 	bl	8024b46 <__sfputs_r>
 8024c20:	3001      	adds	r0, #1
 8024c22:	f000 80aa 	beq.w	8024d7a <_vfiprintf_r+0x20e>
 8024c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c28:	445a      	add	r2, fp
 8024c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8024c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8024c30:	2b00      	cmp	r3, #0
 8024c32:	f000 80a2 	beq.w	8024d7a <_vfiprintf_r+0x20e>
 8024c36:	2300      	movs	r3, #0
 8024c38:	f04f 32ff 	mov.w	r2, #4294967295
 8024c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024c40:	f10a 0a01 	add.w	sl, sl, #1
 8024c44:	9304      	str	r3, [sp, #16]
 8024c46:	9307      	str	r3, [sp, #28]
 8024c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8024c4e:	4654      	mov	r4, sl
 8024c50:	2205      	movs	r2, #5
 8024c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c56:	4858      	ldr	r0, [pc, #352]	; (8024db8 <_vfiprintf_r+0x24c>)
 8024c58:	f7db faf2 	bl	8000240 <memchr>
 8024c5c:	9a04      	ldr	r2, [sp, #16]
 8024c5e:	b9d8      	cbnz	r0, 8024c98 <_vfiprintf_r+0x12c>
 8024c60:	06d1      	lsls	r1, r2, #27
 8024c62:	bf44      	itt	mi
 8024c64:	2320      	movmi	r3, #32
 8024c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c6a:	0713      	lsls	r3, r2, #28
 8024c6c:	bf44      	itt	mi
 8024c6e:	232b      	movmi	r3, #43	; 0x2b
 8024c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c74:	f89a 3000 	ldrb.w	r3, [sl]
 8024c78:	2b2a      	cmp	r3, #42	; 0x2a
 8024c7a:	d015      	beq.n	8024ca8 <_vfiprintf_r+0x13c>
 8024c7c:	9a07      	ldr	r2, [sp, #28]
 8024c7e:	4654      	mov	r4, sl
 8024c80:	2000      	movs	r0, #0
 8024c82:	f04f 0c0a 	mov.w	ip, #10
 8024c86:	4621      	mov	r1, r4
 8024c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024c8c:	3b30      	subs	r3, #48	; 0x30
 8024c8e:	2b09      	cmp	r3, #9
 8024c90:	d94e      	bls.n	8024d30 <_vfiprintf_r+0x1c4>
 8024c92:	b1b0      	cbz	r0, 8024cc2 <_vfiprintf_r+0x156>
 8024c94:	9207      	str	r2, [sp, #28]
 8024c96:	e014      	b.n	8024cc2 <_vfiprintf_r+0x156>
 8024c98:	eba0 0308 	sub.w	r3, r0, r8
 8024c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8024ca0:	4313      	orrs	r3, r2
 8024ca2:	9304      	str	r3, [sp, #16]
 8024ca4:	46a2      	mov	sl, r4
 8024ca6:	e7d2      	b.n	8024c4e <_vfiprintf_r+0xe2>
 8024ca8:	9b03      	ldr	r3, [sp, #12]
 8024caa:	1d19      	adds	r1, r3, #4
 8024cac:	681b      	ldr	r3, [r3, #0]
 8024cae:	9103      	str	r1, [sp, #12]
 8024cb0:	2b00      	cmp	r3, #0
 8024cb2:	bfbb      	ittet	lt
 8024cb4:	425b      	neglt	r3, r3
 8024cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8024cba:	9307      	strge	r3, [sp, #28]
 8024cbc:	9307      	strlt	r3, [sp, #28]
 8024cbe:	bfb8      	it	lt
 8024cc0:	9204      	strlt	r2, [sp, #16]
 8024cc2:	7823      	ldrb	r3, [r4, #0]
 8024cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8024cc6:	d10c      	bne.n	8024ce2 <_vfiprintf_r+0x176>
 8024cc8:	7863      	ldrb	r3, [r4, #1]
 8024cca:	2b2a      	cmp	r3, #42	; 0x2a
 8024ccc:	d135      	bne.n	8024d3a <_vfiprintf_r+0x1ce>
 8024cce:	9b03      	ldr	r3, [sp, #12]
 8024cd0:	1d1a      	adds	r2, r3, #4
 8024cd2:	681b      	ldr	r3, [r3, #0]
 8024cd4:	9203      	str	r2, [sp, #12]
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	bfb8      	it	lt
 8024cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8024cde:	3402      	adds	r4, #2
 8024ce0:	9305      	str	r3, [sp, #20]
 8024ce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024dc8 <_vfiprintf_r+0x25c>
 8024ce6:	7821      	ldrb	r1, [r4, #0]
 8024ce8:	2203      	movs	r2, #3
 8024cea:	4650      	mov	r0, sl
 8024cec:	f7db faa8 	bl	8000240 <memchr>
 8024cf0:	b140      	cbz	r0, 8024d04 <_vfiprintf_r+0x198>
 8024cf2:	2340      	movs	r3, #64	; 0x40
 8024cf4:	eba0 000a 	sub.w	r0, r0, sl
 8024cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8024cfc:	9b04      	ldr	r3, [sp, #16]
 8024cfe:	4303      	orrs	r3, r0
 8024d00:	3401      	adds	r4, #1
 8024d02:	9304      	str	r3, [sp, #16]
 8024d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d08:	482c      	ldr	r0, [pc, #176]	; (8024dbc <_vfiprintf_r+0x250>)
 8024d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024d0e:	2206      	movs	r2, #6
 8024d10:	f7db fa96 	bl	8000240 <memchr>
 8024d14:	2800      	cmp	r0, #0
 8024d16:	d03f      	beq.n	8024d98 <_vfiprintf_r+0x22c>
 8024d18:	4b29      	ldr	r3, [pc, #164]	; (8024dc0 <_vfiprintf_r+0x254>)
 8024d1a:	bb1b      	cbnz	r3, 8024d64 <_vfiprintf_r+0x1f8>
 8024d1c:	9b03      	ldr	r3, [sp, #12]
 8024d1e:	3307      	adds	r3, #7
 8024d20:	f023 0307 	bic.w	r3, r3, #7
 8024d24:	3308      	adds	r3, #8
 8024d26:	9303      	str	r3, [sp, #12]
 8024d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d2a:	443b      	add	r3, r7
 8024d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8024d2e:	e767      	b.n	8024c00 <_vfiprintf_r+0x94>
 8024d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8024d34:	460c      	mov	r4, r1
 8024d36:	2001      	movs	r0, #1
 8024d38:	e7a5      	b.n	8024c86 <_vfiprintf_r+0x11a>
 8024d3a:	2300      	movs	r3, #0
 8024d3c:	3401      	adds	r4, #1
 8024d3e:	9305      	str	r3, [sp, #20]
 8024d40:	4619      	mov	r1, r3
 8024d42:	f04f 0c0a 	mov.w	ip, #10
 8024d46:	4620      	mov	r0, r4
 8024d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024d4c:	3a30      	subs	r2, #48	; 0x30
 8024d4e:	2a09      	cmp	r2, #9
 8024d50:	d903      	bls.n	8024d5a <_vfiprintf_r+0x1ee>
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	d0c5      	beq.n	8024ce2 <_vfiprintf_r+0x176>
 8024d56:	9105      	str	r1, [sp, #20]
 8024d58:	e7c3      	b.n	8024ce2 <_vfiprintf_r+0x176>
 8024d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8024d5e:	4604      	mov	r4, r0
 8024d60:	2301      	movs	r3, #1
 8024d62:	e7f0      	b.n	8024d46 <_vfiprintf_r+0x1da>
 8024d64:	ab03      	add	r3, sp, #12
 8024d66:	9300      	str	r3, [sp, #0]
 8024d68:	462a      	mov	r2, r5
 8024d6a:	4b16      	ldr	r3, [pc, #88]	; (8024dc4 <_vfiprintf_r+0x258>)
 8024d6c:	a904      	add	r1, sp, #16
 8024d6e:	4630      	mov	r0, r6
 8024d70:	f3af 8000 	nop.w
 8024d74:	4607      	mov	r7, r0
 8024d76:	1c78      	adds	r0, r7, #1
 8024d78:	d1d6      	bne.n	8024d28 <_vfiprintf_r+0x1bc>
 8024d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024d7c:	07d9      	lsls	r1, r3, #31
 8024d7e:	d405      	bmi.n	8024d8c <_vfiprintf_r+0x220>
 8024d80:	89ab      	ldrh	r3, [r5, #12]
 8024d82:	059a      	lsls	r2, r3, #22
 8024d84:	d402      	bmi.n	8024d8c <_vfiprintf_r+0x220>
 8024d86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024d88:	f000 fc51 	bl	802562e <__retarget_lock_release_recursive>
 8024d8c:	89ab      	ldrh	r3, [r5, #12]
 8024d8e:	065b      	lsls	r3, r3, #25
 8024d90:	f53f af12 	bmi.w	8024bb8 <_vfiprintf_r+0x4c>
 8024d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024d96:	e711      	b.n	8024bbc <_vfiprintf_r+0x50>
 8024d98:	ab03      	add	r3, sp, #12
 8024d9a:	9300      	str	r3, [sp, #0]
 8024d9c:	462a      	mov	r2, r5
 8024d9e:	4b09      	ldr	r3, [pc, #36]	; (8024dc4 <_vfiprintf_r+0x258>)
 8024da0:	a904      	add	r1, sp, #16
 8024da2:	4630      	mov	r0, r6
 8024da4:	f000 f880 	bl	8024ea8 <_printf_i>
 8024da8:	e7e4      	b.n	8024d74 <_vfiprintf_r+0x208>
 8024daa:	bf00      	nop
 8024dac:	0802a640 	.word	0x0802a640
 8024db0:	0802a660 	.word	0x0802a660
 8024db4:	0802a620 	.word	0x0802a620
 8024db8:	0802a5ec 	.word	0x0802a5ec
 8024dbc:	0802a5f6 	.word	0x0802a5f6
 8024dc0:	00000000 	.word	0x00000000
 8024dc4:	08024b47 	.word	0x08024b47
 8024dc8:	0802a5f2 	.word	0x0802a5f2

08024dcc <_printf_common>:
 8024dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024dd0:	4616      	mov	r6, r2
 8024dd2:	4699      	mov	r9, r3
 8024dd4:	688a      	ldr	r2, [r1, #8]
 8024dd6:	690b      	ldr	r3, [r1, #16]
 8024dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024ddc:	4293      	cmp	r3, r2
 8024dde:	bfb8      	it	lt
 8024de0:	4613      	movlt	r3, r2
 8024de2:	6033      	str	r3, [r6, #0]
 8024de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024de8:	4607      	mov	r7, r0
 8024dea:	460c      	mov	r4, r1
 8024dec:	b10a      	cbz	r2, 8024df2 <_printf_common+0x26>
 8024dee:	3301      	adds	r3, #1
 8024df0:	6033      	str	r3, [r6, #0]
 8024df2:	6823      	ldr	r3, [r4, #0]
 8024df4:	0699      	lsls	r1, r3, #26
 8024df6:	bf42      	ittt	mi
 8024df8:	6833      	ldrmi	r3, [r6, #0]
 8024dfa:	3302      	addmi	r3, #2
 8024dfc:	6033      	strmi	r3, [r6, #0]
 8024dfe:	6825      	ldr	r5, [r4, #0]
 8024e00:	f015 0506 	ands.w	r5, r5, #6
 8024e04:	d106      	bne.n	8024e14 <_printf_common+0x48>
 8024e06:	f104 0a19 	add.w	sl, r4, #25
 8024e0a:	68e3      	ldr	r3, [r4, #12]
 8024e0c:	6832      	ldr	r2, [r6, #0]
 8024e0e:	1a9b      	subs	r3, r3, r2
 8024e10:	42ab      	cmp	r3, r5
 8024e12:	dc26      	bgt.n	8024e62 <_printf_common+0x96>
 8024e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024e18:	1e13      	subs	r3, r2, #0
 8024e1a:	6822      	ldr	r2, [r4, #0]
 8024e1c:	bf18      	it	ne
 8024e1e:	2301      	movne	r3, #1
 8024e20:	0692      	lsls	r2, r2, #26
 8024e22:	d42b      	bmi.n	8024e7c <_printf_common+0xb0>
 8024e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024e28:	4649      	mov	r1, r9
 8024e2a:	4638      	mov	r0, r7
 8024e2c:	47c0      	blx	r8
 8024e2e:	3001      	adds	r0, #1
 8024e30:	d01e      	beq.n	8024e70 <_printf_common+0xa4>
 8024e32:	6823      	ldr	r3, [r4, #0]
 8024e34:	68e5      	ldr	r5, [r4, #12]
 8024e36:	6832      	ldr	r2, [r6, #0]
 8024e38:	f003 0306 	and.w	r3, r3, #6
 8024e3c:	2b04      	cmp	r3, #4
 8024e3e:	bf08      	it	eq
 8024e40:	1aad      	subeq	r5, r5, r2
 8024e42:	68a3      	ldr	r3, [r4, #8]
 8024e44:	6922      	ldr	r2, [r4, #16]
 8024e46:	bf0c      	ite	eq
 8024e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024e4c:	2500      	movne	r5, #0
 8024e4e:	4293      	cmp	r3, r2
 8024e50:	bfc4      	itt	gt
 8024e52:	1a9b      	subgt	r3, r3, r2
 8024e54:	18ed      	addgt	r5, r5, r3
 8024e56:	2600      	movs	r6, #0
 8024e58:	341a      	adds	r4, #26
 8024e5a:	42b5      	cmp	r5, r6
 8024e5c:	d11a      	bne.n	8024e94 <_printf_common+0xc8>
 8024e5e:	2000      	movs	r0, #0
 8024e60:	e008      	b.n	8024e74 <_printf_common+0xa8>
 8024e62:	2301      	movs	r3, #1
 8024e64:	4652      	mov	r2, sl
 8024e66:	4649      	mov	r1, r9
 8024e68:	4638      	mov	r0, r7
 8024e6a:	47c0      	blx	r8
 8024e6c:	3001      	adds	r0, #1
 8024e6e:	d103      	bne.n	8024e78 <_printf_common+0xac>
 8024e70:	f04f 30ff 	mov.w	r0, #4294967295
 8024e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024e78:	3501      	adds	r5, #1
 8024e7a:	e7c6      	b.n	8024e0a <_printf_common+0x3e>
 8024e7c:	18e1      	adds	r1, r4, r3
 8024e7e:	1c5a      	adds	r2, r3, #1
 8024e80:	2030      	movs	r0, #48	; 0x30
 8024e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024e86:	4422      	add	r2, r4
 8024e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024e90:	3302      	adds	r3, #2
 8024e92:	e7c7      	b.n	8024e24 <_printf_common+0x58>
 8024e94:	2301      	movs	r3, #1
 8024e96:	4622      	mov	r2, r4
 8024e98:	4649      	mov	r1, r9
 8024e9a:	4638      	mov	r0, r7
 8024e9c:	47c0      	blx	r8
 8024e9e:	3001      	adds	r0, #1
 8024ea0:	d0e6      	beq.n	8024e70 <_printf_common+0xa4>
 8024ea2:	3601      	adds	r6, #1
 8024ea4:	e7d9      	b.n	8024e5a <_printf_common+0x8e>
	...

08024ea8 <_printf_i>:
 8024ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024eac:	460c      	mov	r4, r1
 8024eae:	4691      	mov	r9, r2
 8024eb0:	7e27      	ldrb	r7, [r4, #24]
 8024eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024eb4:	2f78      	cmp	r7, #120	; 0x78
 8024eb6:	4680      	mov	r8, r0
 8024eb8:	469a      	mov	sl, r3
 8024eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024ebe:	d807      	bhi.n	8024ed0 <_printf_i+0x28>
 8024ec0:	2f62      	cmp	r7, #98	; 0x62
 8024ec2:	d80a      	bhi.n	8024eda <_printf_i+0x32>
 8024ec4:	2f00      	cmp	r7, #0
 8024ec6:	f000 80d8 	beq.w	802507a <_printf_i+0x1d2>
 8024eca:	2f58      	cmp	r7, #88	; 0x58
 8024ecc:	f000 80a3 	beq.w	8025016 <_printf_i+0x16e>
 8024ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024ed8:	e03a      	b.n	8024f50 <_printf_i+0xa8>
 8024eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024ede:	2b15      	cmp	r3, #21
 8024ee0:	d8f6      	bhi.n	8024ed0 <_printf_i+0x28>
 8024ee2:	a001      	add	r0, pc, #4	; (adr r0, 8024ee8 <_printf_i+0x40>)
 8024ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8024ee8:	08024f41 	.word	0x08024f41
 8024eec:	08024f55 	.word	0x08024f55
 8024ef0:	08024ed1 	.word	0x08024ed1
 8024ef4:	08024ed1 	.word	0x08024ed1
 8024ef8:	08024ed1 	.word	0x08024ed1
 8024efc:	08024ed1 	.word	0x08024ed1
 8024f00:	08024f55 	.word	0x08024f55
 8024f04:	08024ed1 	.word	0x08024ed1
 8024f08:	08024ed1 	.word	0x08024ed1
 8024f0c:	08024ed1 	.word	0x08024ed1
 8024f10:	08024ed1 	.word	0x08024ed1
 8024f14:	08025061 	.word	0x08025061
 8024f18:	08024f85 	.word	0x08024f85
 8024f1c:	08025043 	.word	0x08025043
 8024f20:	08024ed1 	.word	0x08024ed1
 8024f24:	08024ed1 	.word	0x08024ed1
 8024f28:	08025083 	.word	0x08025083
 8024f2c:	08024ed1 	.word	0x08024ed1
 8024f30:	08024f85 	.word	0x08024f85
 8024f34:	08024ed1 	.word	0x08024ed1
 8024f38:	08024ed1 	.word	0x08024ed1
 8024f3c:	0802504b 	.word	0x0802504b
 8024f40:	680b      	ldr	r3, [r1, #0]
 8024f42:	1d1a      	adds	r2, r3, #4
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	600a      	str	r2, [r1, #0]
 8024f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024f50:	2301      	movs	r3, #1
 8024f52:	e0a3      	b.n	802509c <_printf_i+0x1f4>
 8024f54:	6825      	ldr	r5, [r4, #0]
 8024f56:	6808      	ldr	r0, [r1, #0]
 8024f58:	062e      	lsls	r6, r5, #24
 8024f5a:	f100 0304 	add.w	r3, r0, #4
 8024f5e:	d50a      	bpl.n	8024f76 <_printf_i+0xce>
 8024f60:	6805      	ldr	r5, [r0, #0]
 8024f62:	600b      	str	r3, [r1, #0]
 8024f64:	2d00      	cmp	r5, #0
 8024f66:	da03      	bge.n	8024f70 <_printf_i+0xc8>
 8024f68:	232d      	movs	r3, #45	; 0x2d
 8024f6a:	426d      	negs	r5, r5
 8024f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024f70:	485e      	ldr	r0, [pc, #376]	; (80250ec <_printf_i+0x244>)
 8024f72:	230a      	movs	r3, #10
 8024f74:	e019      	b.n	8024faa <_printf_i+0x102>
 8024f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024f7a:	6805      	ldr	r5, [r0, #0]
 8024f7c:	600b      	str	r3, [r1, #0]
 8024f7e:	bf18      	it	ne
 8024f80:	b22d      	sxthne	r5, r5
 8024f82:	e7ef      	b.n	8024f64 <_printf_i+0xbc>
 8024f84:	680b      	ldr	r3, [r1, #0]
 8024f86:	6825      	ldr	r5, [r4, #0]
 8024f88:	1d18      	adds	r0, r3, #4
 8024f8a:	6008      	str	r0, [r1, #0]
 8024f8c:	0628      	lsls	r0, r5, #24
 8024f8e:	d501      	bpl.n	8024f94 <_printf_i+0xec>
 8024f90:	681d      	ldr	r5, [r3, #0]
 8024f92:	e002      	b.n	8024f9a <_printf_i+0xf2>
 8024f94:	0669      	lsls	r1, r5, #25
 8024f96:	d5fb      	bpl.n	8024f90 <_printf_i+0xe8>
 8024f98:	881d      	ldrh	r5, [r3, #0]
 8024f9a:	4854      	ldr	r0, [pc, #336]	; (80250ec <_printf_i+0x244>)
 8024f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8024f9e:	bf0c      	ite	eq
 8024fa0:	2308      	moveq	r3, #8
 8024fa2:	230a      	movne	r3, #10
 8024fa4:	2100      	movs	r1, #0
 8024fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024faa:	6866      	ldr	r6, [r4, #4]
 8024fac:	60a6      	str	r6, [r4, #8]
 8024fae:	2e00      	cmp	r6, #0
 8024fb0:	bfa2      	ittt	ge
 8024fb2:	6821      	ldrge	r1, [r4, #0]
 8024fb4:	f021 0104 	bicge.w	r1, r1, #4
 8024fb8:	6021      	strge	r1, [r4, #0]
 8024fba:	b90d      	cbnz	r5, 8024fc0 <_printf_i+0x118>
 8024fbc:	2e00      	cmp	r6, #0
 8024fbe:	d04d      	beq.n	802505c <_printf_i+0x1b4>
 8024fc0:	4616      	mov	r6, r2
 8024fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8024fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8024fca:	5dc7      	ldrb	r7, [r0, r7]
 8024fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024fd0:	462f      	mov	r7, r5
 8024fd2:	42bb      	cmp	r3, r7
 8024fd4:	460d      	mov	r5, r1
 8024fd6:	d9f4      	bls.n	8024fc2 <_printf_i+0x11a>
 8024fd8:	2b08      	cmp	r3, #8
 8024fda:	d10b      	bne.n	8024ff4 <_printf_i+0x14c>
 8024fdc:	6823      	ldr	r3, [r4, #0]
 8024fde:	07df      	lsls	r7, r3, #31
 8024fe0:	d508      	bpl.n	8024ff4 <_printf_i+0x14c>
 8024fe2:	6923      	ldr	r3, [r4, #16]
 8024fe4:	6861      	ldr	r1, [r4, #4]
 8024fe6:	4299      	cmp	r1, r3
 8024fe8:	bfde      	ittt	le
 8024fea:	2330      	movle	r3, #48	; 0x30
 8024fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024ff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024ff4:	1b92      	subs	r2, r2, r6
 8024ff6:	6122      	str	r2, [r4, #16]
 8024ff8:	f8cd a000 	str.w	sl, [sp]
 8024ffc:	464b      	mov	r3, r9
 8024ffe:	aa03      	add	r2, sp, #12
 8025000:	4621      	mov	r1, r4
 8025002:	4640      	mov	r0, r8
 8025004:	f7ff fee2 	bl	8024dcc <_printf_common>
 8025008:	3001      	adds	r0, #1
 802500a:	d14c      	bne.n	80250a6 <_printf_i+0x1fe>
 802500c:	f04f 30ff 	mov.w	r0, #4294967295
 8025010:	b004      	add	sp, #16
 8025012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025016:	4835      	ldr	r0, [pc, #212]	; (80250ec <_printf_i+0x244>)
 8025018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802501c:	6823      	ldr	r3, [r4, #0]
 802501e:	680e      	ldr	r6, [r1, #0]
 8025020:	061f      	lsls	r7, r3, #24
 8025022:	f856 5b04 	ldr.w	r5, [r6], #4
 8025026:	600e      	str	r6, [r1, #0]
 8025028:	d514      	bpl.n	8025054 <_printf_i+0x1ac>
 802502a:	07d9      	lsls	r1, r3, #31
 802502c:	bf44      	itt	mi
 802502e:	f043 0320 	orrmi.w	r3, r3, #32
 8025032:	6023      	strmi	r3, [r4, #0]
 8025034:	b91d      	cbnz	r5, 802503e <_printf_i+0x196>
 8025036:	6823      	ldr	r3, [r4, #0]
 8025038:	f023 0320 	bic.w	r3, r3, #32
 802503c:	6023      	str	r3, [r4, #0]
 802503e:	2310      	movs	r3, #16
 8025040:	e7b0      	b.n	8024fa4 <_printf_i+0xfc>
 8025042:	6823      	ldr	r3, [r4, #0]
 8025044:	f043 0320 	orr.w	r3, r3, #32
 8025048:	6023      	str	r3, [r4, #0]
 802504a:	2378      	movs	r3, #120	; 0x78
 802504c:	4828      	ldr	r0, [pc, #160]	; (80250f0 <_printf_i+0x248>)
 802504e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025052:	e7e3      	b.n	802501c <_printf_i+0x174>
 8025054:	065e      	lsls	r6, r3, #25
 8025056:	bf48      	it	mi
 8025058:	b2ad      	uxthmi	r5, r5
 802505a:	e7e6      	b.n	802502a <_printf_i+0x182>
 802505c:	4616      	mov	r6, r2
 802505e:	e7bb      	b.n	8024fd8 <_printf_i+0x130>
 8025060:	680b      	ldr	r3, [r1, #0]
 8025062:	6826      	ldr	r6, [r4, #0]
 8025064:	6960      	ldr	r0, [r4, #20]
 8025066:	1d1d      	adds	r5, r3, #4
 8025068:	600d      	str	r5, [r1, #0]
 802506a:	0635      	lsls	r5, r6, #24
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	d501      	bpl.n	8025074 <_printf_i+0x1cc>
 8025070:	6018      	str	r0, [r3, #0]
 8025072:	e002      	b.n	802507a <_printf_i+0x1d2>
 8025074:	0671      	lsls	r1, r6, #25
 8025076:	d5fb      	bpl.n	8025070 <_printf_i+0x1c8>
 8025078:	8018      	strh	r0, [r3, #0]
 802507a:	2300      	movs	r3, #0
 802507c:	6123      	str	r3, [r4, #16]
 802507e:	4616      	mov	r6, r2
 8025080:	e7ba      	b.n	8024ff8 <_printf_i+0x150>
 8025082:	680b      	ldr	r3, [r1, #0]
 8025084:	1d1a      	adds	r2, r3, #4
 8025086:	600a      	str	r2, [r1, #0]
 8025088:	681e      	ldr	r6, [r3, #0]
 802508a:	6862      	ldr	r2, [r4, #4]
 802508c:	2100      	movs	r1, #0
 802508e:	4630      	mov	r0, r6
 8025090:	f7db f8d6 	bl	8000240 <memchr>
 8025094:	b108      	cbz	r0, 802509a <_printf_i+0x1f2>
 8025096:	1b80      	subs	r0, r0, r6
 8025098:	6060      	str	r0, [r4, #4]
 802509a:	6863      	ldr	r3, [r4, #4]
 802509c:	6123      	str	r3, [r4, #16]
 802509e:	2300      	movs	r3, #0
 80250a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250a4:	e7a8      	b.n	8024ff8 <_printf_i+0x150>
 80250a6:	6923      	ldr	r3, [r4, #16]
 80250a8:	4632      	mov	r2, r6
 80250aa:	4649      	mov	r1, r9
 80250ac:	4640      	mov	r0, r8
 80250ae:	47d0      	blx	sl
 80250b0:	3001      	adds	r0, #1
 80250b2:	d0ab      	beq.n	802500c <_printf_i+0x164>
 80250b4:	6823      	ldr	r3, [r4, #0]
 80250b6:	079b      	lsls	r3, r3, #30
 80250b8:	d413      	bmi.n	80250e2 <_printf_i+0x23a>
 80250ba:	68e0      	ldr	r0, [r4, #12]
 80250bc:	9b03      	ldr	r3, [sp, #12]
 80250be:	4298      	cmp	r0, r3
 80250c0:	bfb8      	it	lt
 80250c2:	4618      	movlt	r0, r3
 80250c4:	e7a4      	b.n	8025010 <_printf_i+0x168>
 80250c6:	2301      	movs	r3, #1
 80250c8:	4632      	mov	r2, r6
 80250ca:	4649      	mov	r1, r9
 80250cc:	4640      	mov	r0, r8
 80250ce:	47d0      	blx	sl
 80250d0:	3001      	adds	r0, #1
 80250d2:	d09b      	beq.n	802500c <_printf_i+0x164>
 80250d4:	3501      	adds	r5, #1
 80250d6:	68e3      	ldr	r3, [r4, #12]
 80250d8:	9903      	ldr	r1, [sp, #12]
 80250da:	1a5b      	subs	r3, r3, r1
 80250dc:	42ab      	cmp	r3, r5
 80250de:	dcf2      	bgt.n	80250c6 <_printf_i+0x21e>
 80250e0:	e7eb      	b.n	80250ba <_printf_i+0x212>
 80250e2:	2500      	movs	r5, #0
 80250e4:	f104 0619 	add.w	r6, r4, #25
 80250e8:	e7f5      	b.n	80250d6 <_printf_i+0x22e>
 80250ea:	bf00      	nop
 80250ec:	0802a5fd 	.word	0x0802a5fd
 80250f0:	0802a60e 	.word	0x0802a60e

080250f4 <strcpy>:
 80250f4:	4603      	mov	r3, r0
 80250f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80250fa:	f803 2b01 	strb.w	r2, [r3], #1
 80250fe:	2a00      	cmp	r2, #0
 8025100:	d1f9      	bne.n	80250f6 <strcpy+0x2>
 8025102:	4770      	bx	lr

08025104 <strncpy>:
 8025104:	b510      	push	{r4, lr}
 8025106:	3901      	subs	r1, #1
 8025108:	4603      	mov	r3, r0
 802510a:	b132      	cbz	r2, 802511a <strncpy+0x16>
 802510c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025110:	f803 4b01 	strb.w	r4, [r3], #1
 8025114:	3a01      	subs	r2, #1
 8025116:	2c00      	cmp	r4, #0
 8025118:	d1f7      	bne.n	802510a <strncpy+0x6>
 802511a:	441a      	add	r2, r3
 802511c:	2100      	movs	r1, #0
 802511e:	4293      	cmp	r3, r2
 8025120:	d100      	bne.n	8025124 <strncpy+0x20>
 8025122:	bd10      	pop	{r4, pc}
 8025124:	f803 1b01 	strb.w	r1, [r3], #1
 8025128:	e7f9      	b.n	802511e <strncpy+0x1a>
	...

0802512c <__swbuf_r>:
 802512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802512e:	460e      	mov	r6, r1
 8025130:	4614      	mov	r4, r2
 8025132:	4605      	mov	r5, r0
 8025134:	b118      	cbz	r0, 802513e <__swbuf_r+0x12>
 8025136:	6983      	ldr	r3, [r0, #24]
 8025138:	b90b      	cbnz	r3, 802513e <__swbuf_r+0x12>
 802513a:	f000 f9d9 	bl	80254f0 <__sinit>
 802513e:	4b21      	ldr	r3, [pc, #132]	; (80251c4 <__swbuf_r+0x98>)
 8025140:	429c      	cmp	r4, r3
 8025142:	d12b      	bne.n	802519c <__swbuf_r+0x70>
 8025144:	686c      	ldr	r4, [r5, #4]
 8025146:	69a3      	ldr	r3, [r4, #24]
 8025148:	60a3      	str	r3, [r4, #8]
 802514a:	89a3      	ldrh	r3, [r4, #12]
 802514c:	071a      	lsls	r2, r3, #28
 802514e:	d52f      	bpl.n	80251b0 <__swbuf_r+0x84>
 8025150:	6923      	ldr	r3, [r4, #16]
 8025152:	b36b      	cbz	r3, 80251b0 <__swbuf_r+0x84>
 8025154:	6923      	ldr	r3, [r4, #16]
 8025156:	6820      	ldr	r0, [r4, #0]
 8025158:	1ac0      	subs	r0, r0, r3
 802515a:	6963      	ldr	r3, [r4, #20]
 802515c:	b2f6      	uxtb	r6, r6
 802515e:	4283      	cmp	r3, r0
 8025160:	4637      	mov	r7, r6
 8025162:	dc04      	bgt.n	802516e <__swbuf_r+0x42>
 8025164:	4621      	mov	r1, r4
 8025166:	4628      	mov	r0, r5
 8025168:	f000 f92e 	bl	80253c8 <_fflush_r>
 802516c:	bb30      	cbnz	r0, 80251bc <__swbuf_r+0x90>
 802516e:	68a3      	ldr	r3, [r4, #8]
 8025170:	3b01      	subs	r3, #1
 8025172:	60a3      	str	r3, [r4, #8]
 8025174:	6823      	ldr	r3, [r4, #0]
 8025176:	1c5a      	adds	r2, r3, #1
 8025178:	6022      	str	r2, [r4, #0]
 802517a:	701e      	strb	r6, [r3, #0]
 802517c:	6963      	ldr	r3, [r4, #20]
 802517e:	3001      	adds	r0, #1
 8025180:	4283      	cmp	r3, r0
 8025182:	d004      	beq.n	802518e <__swbuf_r+0x62>
 8025184:	89a3      	ldrh	r3, [r4, #12]
 8025186:	07db      	lsls	r3, r3, #31
 8025188:	d506      	bpl.n	8025198 <__swbuf_r+0x6c>
 802518a:	2e0a      	cmp	r6, #10
 802518c:	d104      	bne.n	8025198 <__swbuf_r+0x6c>
 802518e:	4621      	mov	r1, r4
 8025190:	4628      	mov	r0, r5
 8025192:	f000 f919 	bl	80253c8 <_fflush_r>
 8025196:	b988      	cbnz	r0, 80251bc <__swbuf_r+0x90>
 8025198:	4638      	mov	r0, r7
 802519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802519c:	4b0a      	ldr	r3, [pc, #40]	; (80251c8 <__swbuf_r+0x9c>)
 802519e:	429c      	cmp	r4, r3
 80251a0:	d101      	bne.n	80251a6 <__swbuf_r+0x7a>
 80251a2:	68ac      	ldr	r4, [r5, #8]
 80251a4:	e7cf      	b.n	8025146 <__swbuf_r+0x1a>
 80251a6:	4b09      	ldr	r3, [pc, #36]	; (80251cc <__swbuf_r+0xa0>)
 80251a8:	429c      	cmp	r4, r3
 80251aa:	bf08      	it	eq
 80251ac:	68ec      	ldreq	r4, [r5, #12]
 80251ae:	e7ca      	b.n	8025146 <__swbuf_r+0x1a>
 80251b0:	4621      	mov	r1, r4
 80251b2:	4628      	mov	r0, r5
 80251b4:	f000 f80c 	bl	80251d0 <__swsetup_r>
 80251b8:	2800      	cmp	r0, #0
 80251ba:	d0cb      	beq.n	8025154 <__swbuf_r+0x28>
 80251bc:	f04f 37ff 	mov.w	r7, #4294967295
 80251c0:	e7ea      	b.n	8025198 <__swbuf_r+0x6c>
 80251c2:	bf00      	nop
 80251c4:	0802a640 	.word	0x0802a640
 80251c8:	0802a660 	.word	0x0802a660
 80251cc:	0802a620 	.word	0x0802a620

080251d0 <__swsetup_r>:
 80251d0:	4b32      	ldr	r3, [pc, #200]	; (802529c <__swsetup_r+0xcc>)
 80251d2:	b570      	push	{r4, r5, r6, lr}
 80251d4:	681d      	ldr	r5, [r3, #0]
 80251d6:	4606      	mov	r6, r0
 80251d8:	460c      	mov	r4, r1
 80251da:	b125      	cbz	r5, 80251e6 <__swsetup_r+0x16>
 80251dc:	69ab      	ldr	r3, [r5, #24]
 80251de:	b913      	cbnz	r3, 80251e6 <__swsetup_r+0x16>
 80251e0:	4628      	mov	r0, r5
 80251e2:	f000 f985 	bl	80254f0 <__sinit>
 80251e6:	4b2e      	ldr	r3, [pc, #184]	; (80252a0 <__swsetup_r+0xd0>)
 80251e8:	429c      	cmp	r4, r3
 80251ea:	d10f      	bne.n	802520c <__swsetup_r+0x3c>
 80251ec:	686c      	ldr	r4, [r5, #4]
 80251ee:	89a3      	ldrh	r3, [r4, #12]
 80251f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80251f4:	0719      	lsls	r1, r3, #28
 80251f6:	d42c      	bmi.n	8025252 <__swsetup_r+0x82>
 80251f8:	06dd      	lsls	r5, r3, #27
 80251fa:	d411      	bmi.n	8025220 <__swsetup_r+0x50>
 80251fc:	2309      	movs	r3, #9
 80251fe:	6033      	str	r3, [r6, #0]
 8025200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025204:	81a3      	strh	r3, [r4, #12]
 8025206:	f04f 30ff 	mov.w	r0, #4294967295
 802520a:	e03e      	b.n	802528a <__swsetup_r+0xba>
 802520c:	4b25      	ldr	r3, [pc, #148]	; (80252a4 <__swsetup_r+0xd4>)
 802520e:	429c      	cmp	r4, r3
 8025210:	d101      	bne.n	8025216 <__swsetup_r+0x46>
 8025212:	68ac      	ldr	r4, [r5, #8]
 8025214:	e7eb      	b.n	80251ee <__swsetup_r+0x1e>
 8025216:	4b24      	ldr	r3, [pc, #144]	; (80252a8 <__swsetup_r+0xd8>)
 8025218:	429c      	cmp	r4, r3
 802521a:	bf08      	it	eq
 802521c:	68ec      	ldreq	r4, [r5, #12]
 802521e:	e7e6      	b.n	80251ee <__swsetup_r+0x1e>
 8025220:	0758      	lsls	r0, r3, #29
 8025222:	d512      	bpl.n	802524a <__swsetup_r+0x7a>
 8025224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025226:	b141      	cbz	r1, 802523a <__swsetup_r+0x6a>
 8025228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802522c:	4299      	cmp	r1, r3
 802522e:	d002      	beq.n	8025236 <__swsetup_r+0x66>
 8025230:	4630      	mov	r0, r6
 8025232:	f000 fa61 	bl	80256f8 <_free_r>
 8025236:	2300      	movs	r3, #0
 8025238:	6363      	str	r3, [r4, #52]	; 0x34
 802523a:	89a3      	ldrh	r3, [r4, #12]
 802523c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025240:	81a3      	strh	r3, [r4, #12]
 8025242:	2300      	movs	r3, #0
 8025244:	6063      	str	r3, [r4, #4]
 8025246:	6923      	ldr	r3, [r4, #16]
 8025248:	6023      	str	r3, [r4, #0]
 802524a:	89a3      	ldrh	r3, [r4, #12]
 802524c:	f043 0308 	orr.w	r3, r3, #8
 8025250:	81a3      	strh	r3, [r4, #12]
 8025252:	6923      	ldr	r3, [r4, #16]
 8025254:	b94b      	cbnz	r3, 802526a <__swsetup_r+0x9a>
 8025256:	89a3      	ldrh	r3, [r4, #12]
 8025258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025260:	d003      	beq.n	802526a <__swsetup_r+0x9a>
 8025262:	4621      	mov	r1, r4
 8025264:	4630      	mov	r0, r6
 8025266:	f000 fa07 	bl	8025678 <__smakebuf_r>
 802526a:	89a0      	ldrh	r0, [r4, #12]
 802526c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025270:	f010 0301 	ands.w	r3, r0, #1
 8025274:	d00a      	beq.n	802528c <__swsetup_r+0xbc>
 8025276:	2300      	movs	r3, #0
 8025278:	60a3      	str	r3, [r4, #8]
 802527a:	6963      	ldr	r3, [r4, #20]
 802527c:	425b      	negs	r3, r3
 802527e:	61a3      	str	r3, [r4, #24]
 8025280:	6923      	ldr	r3, [r4, #16]
 8025282:	b943      	cbnz	r3, 8025296 <__swsetup_r+0xc6>
 8025284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025288:	d1ba      	bne.n	8025200 <__swsetup_r+0x30>
 802528a:	bd70      	pop	{r4, r5, r6, pc}
 802528c:	0781      	lsls	r1, r0, #30
 802528e:	bf58      	it	pl
 8025290:	6963      	ldrpl	r3, [r4, #20]
 8025292:	60a3      	str	r3, [r4, #8]
 8025294:	e7f4      	b.n	8025280 <__swsetup_r+0xb0>
 8025296:	2000      	movs	r0, #0
 8025298:	e7f7      	b.n	802528a <__swsetup_r+0xba>
 802529a:	bf00      	nop
 802529c:	2000007c 	.word	0x2000007c
 80252a0:	0802a640 	.word	0x0802a640
 80252a4:	0802a660 	.word	0x0802a660
 80252a8:	0802a620 	.word	0x0802a620

080252ac <abort>:
 80252ac:	b508      	push	{r3, lr}
 80252ae:	2006      	movs	r0, #6
 80252b0:	f000 fb04 	bl	80258bc <raise>
 80252b4:	2001      	movs	r0, #1
 80252b6:	f7dc f99f 	bl	80015f8 <_exit>
	...

080252bc <__sflush_r>:
 80252bc:	898a      	ldrh	r2, [r1, #12]
 80252be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80252c2:	4605      	mov	r5, r0
 80252c4:	0710      	lsls	r0, r2, #28
 80252c6:	460c      	mov	r4, r1
 80252c8:	d458      	bmi.n	802537c <__sflush_r+0xc0>
 80252ca:	684b      	ldr	r3, [r1, #4]
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	dc05      	bgt.n	80252dc <__sflush_r+0x20>
 80252d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	dc02      	bgt.n	80252dc <__sflush_r+0x20>
 80252d6:	2000      	movs	r0, #0
 80252d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80252dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80252de:	2e00      	cmp	r6, #0
 80252e0:	d0f9      	beq.n	80252d6 <__sflush_r+0x1a>
 80252e2:	2300      	movs	r3, #0
 80252e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80252e8:	682f      	ldr	r7, [r5, #0]
 80252ea:	602b      	str	r3, [r5, #0]
 80252ec:	d032      	beq.n	8025354 <__sflush_r+0x98>
 80252ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80252f0:	89a3      	ldrh	r3, [r4, #12]
 80252f2:	075a      	lsls	r2, r3, #29
 80252f4:	d505      	bpl.n	8025302 <__sflush_r+0x46>
 80252f6:	6863      	ldr	r3, [r4, #4]
 80252f8:	1ac0      	subs	r0, r0, r3
 80252fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80252fc:	b10b      	cbz	r3, 8025302 <__sflush_r+0x46>
 80252fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025300:	1ac0      	subs	r0, r0, r3
 8025302:	2300      	movs	r3, #0
 8025304:	4602      	mov	r2, r0
 8025306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025308:	6a21      	ldr	r1, [r4, #32]
 802530a:	4628      	mov	r0, r5
 802530c:	47b0      	blx	r6
 802530e:	1c43      	adds	r3, r0, #1
 8025310:	89a3      	ldrh	r3, [r4, #12]
 8025312:	d106      	bne.n	8025322 <__sflush_r+0x66>
 8025314:	6829      	ldr	r1, [r5, #0]
 8025316:	291d      	cmp	r1, #29
 8025318:	d82c      	bhi.n	8025374 <__sflush_r+0xb8>
 802531a:	4a2a      	ldr	r2, [pc, #168]	; (80253c4 <__sflush_r+0x108>)
 802531c:	40ca      	lsrs	r2, r1
 802531e:	07d6      	lsls	r6, r2, #31
 8025320:	d528      	bpl.n	8025374 <__sflush_r+0xb8>
 8025322:	2200      	movs	r2, #0
 8025324:	6062      	str	r2, [r4, #4]
 8025326:	04d9      	lsls	r1, r3, #19
 8025328:	6922      	ldr	r2, [r4, #16]
 802532a:	6022      	str	r2, [r4, #0]
 802532c:	d504      	bpl.n	8025338 <__sflush_r+0x7c>
 802532e:	1c42      	adds	r2, r0, #1
 8025330:	d101      	bne.n	8025336 <__sflush_r+0x7a>
 8025332:	682b      	ldr	r3, [r5, #0]
 8025334:	b903      	cbnz	r3, 8025338 <__sflush_r+0x7c>
 8025336:	6560      	str	r0, [r4, #84]	; 0x54
 8025338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802533a:	602f      	str	r7, [r5, #0]
 802533c:	2900      	cmp	r1, #0
 802533e:	d0ca      	beq.n	80252d6 <__sflush_r+0x1a>
 8025340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025344:	4299      	cmp	r1, r3
 8025346:	d002      	beq.n	802534e <__sflush_r+0x92>
 8025348:	4628      	mov	r0, r5
 802534a:	f000 f9d5 	bl	80256f8 <_free_r>
 802534e:	2000      	movs	r0, #0
 8025350:	6360      	str	r0, [r4, #52]	; 0x34
 8025352:	e7c1      	b.n	80252d8 <__sflush_r+0x1c>
 8025354:	6a21      	ldr	r1, [r4, #32]
 8025356:	2301      	movs	r3, #1
 8025358:	4628      	mov	r0, r5
 802535a:	47b0      	blx	r6
 802535c:	1c41      	adds	r1, r0, #1
 802535e:	d1c7      	bne.n	80252f0 <__sflush_r+0x34>
 8025360:	682b      	ldr	r3, [r5, #0]
 8025362:	2b00      	cmp	r3, #0
 8025364:	d0c4      	beq.n	80252f0 <__sflush_r+0x34>
 8025366:	2b1d      	cmp	r3, #29
 8025368:	d001      	beq.n	802536e <__sflush_r+0xb2>
 802536a:	2b16      	cmp	r3, #22
 802536c:	d101      	bne.n	8025372 <__sflush_r+0xb6>
 802536e:	602f      	str	r7, [r5, #0]
 8025370:	e7b1      	b.n	80252d6 <__sflush_r+0x1a>
 8025372:	89a3      	ldrh	r3, [r4, #12]
 8025374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025378:	81a3      	strh	r3, [r4, #12]
 802537a:	e7ad      	b.n	80252d8 <__sflush_r+0x1c>
 802537c:	690f      	ldr	r7, [r1, #16]
 802537e:	2f00      	cmp	r7, #0
 8025380:	d0a9      	beq.n	80252d6 <__sflush_r+0x1a>
 8025382:	0793      	lsls	r3, r2, #30
 8025384:	680e      	ldr	r6, [r1, #0]
 8025386:	bf08      	it	eq
 8025388:	694b      	ldreq	r3, [r1, #20]
 802538a:	600f      	str	r7, [r1, #0]
 802538c:	bf18      	it	ne
 802538e:	2300      	movne	r3, #0
 8025390:	eba6 0807 	sub.w	r8, r6, r7
 8025394:	608b      	str	r3, [r1, #8]
 8025396:	f1b8 0f00 	cmp.w	r8, #0
 802539a:	dd9c      	ble.n	80252d6 <__sflush_r+0x1a>
 802539c:	6a21      	ldr	r1, [r4, #32]
 802539e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80253a0:	4643      	mov	r3, r8
 80253a2:	463a      	mov	r2, r7
 80253a4:	4628      	mov	r0, r5
 80253a6:	47b0      	blx	r6
 80253a8:	2800      	cmp	r0, #0
 80253aa:	dc06      	bgt.n	80253ba <__sflush_r+0xfe>
 80253ac:	89a3      	ldrh	r3, [r4, #12]
 80253ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80253b2:	81a3      	strh	r3, [r4, #12]
 80253b4:	f04f 30ff 	mov.w	r0, #4294967295
 80253b8:	e78e      	b.n	80252d8 <__sflush_r+0x1c>
 80253ba:	4407      	add	r7, r0
 80253bc:	eba8 0800 	sub.w	r8, r8, r0
 80253c0:	e7e9      	b.n	8025396 <__sflush_r+0xda>
 80253c2:	bf00      	nop
 80253c4:	20400001 	.word	0x20400001

080253c8 <_fflush_r>:
 80253c8:	b538      	push	{r3, r4, r5, lr}
 80253ca:	690b      	ldr	r3, [r1, #16]
 80253cc:	4605      	mov	r5, r0
 80253ce:	460c      	mov	r4, r1
 80253d0:	b913      	cbnz	r3, 80253d8 <_fflush_r+0x10>
 80253d2:	2500      	movs	r5, #0
 80253d4:	4628      	mov	r0, r5
 80253d6:	bd38      	pop	{r3, r4, r5, pc}
 80253d8:	b118      	cbz	r0, 80253e2 <_fflush_r+0x1a>
 80253da:	6983      	ldr	r3, [r0, #24]
 80253dc:	b90b      	cbnz	r3, 80253e2 <_fflush_r+0x1a>
 80253de:	f000 f887 	bl	80254f0 <__sinit>
 80253e2:	4b14      	ldr	r3, [pc, #80]	; (8025434 <_fflush_r+0x6c>)
 80253e4:	429c      	cmp	r4, r3
 80253e6:	d11b      	bne.n	8025420 <_fflush_r+0x58>
 80253e8:	686c      	ldr	r4, [r5, #4]
 80253ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80253ee:	2b00      	cmp	r3, #0
 80253f0:	d0ef      	beq.n	80253d2 <_fflush_r+0xa>
 80253f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80253f4:	07d0      	lsls	r0, r2, #31
 80253f6:	d404      	bmi.n	8025402 <_fflush_r+0x3a>
 80253f8:	0599      	lsls	r1, r3, #22
 80253fa:	d402      	bmi.n	8025402 <_fflush_r+0x3a>
 80253fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80253fe:	f000 f915 	bl	802562c <__retarget_lock_acquire_recursive>
 8025402:	4628      	mov	r0, r5
 8025404:	4621      	mov	r1, r4
 8025406:	f7ff ff59 	bl	80252bc <__sflush_r>
 802540a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802540c:	07da      	lsls	r2, r3, #31
 802540e:	4605      	mov	r5, r0
 8025410:	d4e0      	bmi.n	80253d4 <_fflush_r+0xc>
 8025412:	89a3      	ldrh	r3, [r4, #12]
 8025414:	059b      	lsls	r3, r3, #22
 8025416:	d4dd      	bmi.n	80253d4 <_fflush_r+0xc>
 8025418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802541a:	f000 f908 	bl	802562e <__retarget_lock_release_recursive>
 802541e:	e7d9      	b.n	80253d4 <_fflush_r+0xc>
 8025420:	4b05      	ldr	r3, [pc, #20]	; (8025438 <_fflush_r+0x70>)
 8025422:	429c      	cmp	r4, r3
 8025424:	d101      	bne.n	802542a <_fflush_r+0x62>
 8025426:	68ac      	ldr	r4, [r5, #8]
 8025428:	e7df      	b.n	80253ea <_fflush_r+0x22>
 802542a:	4b04      	ldr	r3, [pc, #16]	; (802543c <_fflush_r+0x74>)
 802542c:	429c      	cmp	r4, r3
 802542e:	bf08      	it	eq
 8025430:	68ec      	ldreq	r4, [r5, #12]
 8025432:	e7da      	b.n	80253ea <_fflush_r+0x22>
 8025434:	0802a640 	.word	0x0802a640
 8025438:	0802a660 	.word	0x0802a660
 802543c:	0802a620 	.word	0x0802a620

08025440 <std>:
 8025440:	2300      	movs	r3, #0
 8025442:	b510      	push	{r4, lr}
 8025444:	4604      	mov	r4, r0
 8025446:	e9c0 3300 	strd	r3, r3, [r0]
 802544a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802544e:	6083      	str	r3, [r0, #8]
 8025450:	8181      	strh	r1, [r0, #12]
 8025452:	6643      	str	r3, [r0, #100]	; 0x64
 8025454:	81c2      	strh	r2, [r0, #14]
 8025456:	6183      	str	r3, [r0, #24]
 8025458:	4619      	mov	r1, r3
 802545a:	2208      	movs	r2, #8
 802545c:	305c      	adds	r0, #92	; 0x5c
 802545e:	f7ff fb53 	bl	8024b08 <memset>
 8025462:	4b05      	ldr	r3, [pc, #20]	; (8025478 <std+0x38>)
 8025464:	6263      	str	r3, [r4, #36]	; 0x24
 8025466:	4b05      	ldr	r3, [pc, #20]	; (802547c <std+0x3c>)
 8025468:	62a3      	str	r3, [r4, #40]	; 0x28
 802546a:	4b05      	ldr	r3, [pc, #20]	; (8025480 <std+0x40>)
 802546c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802546e:	4b05      	ldr	r3, [pc, #20]	; (8025484 <std+0x44>)
 8025470:	6224      	str	r4, [r4, #32]
 8025472:	6323      	str	r3, [r4, #48]	; 0x30
 8025474:	bd10      	pop	{r4, pc}
 8025476:	bf00      	nop
 8025478:	080258f5 	.word	0x080258f5
 802547c:	08025917 	.word	0x08025917
 8025480:	0802594f 	.word	0x0802594f
 8025484:	08025973 	.word	0x08025973

08025488 <_cleanup_r>:
 8025488:	4901      	ldr	r1, [pc, #4]	; (8025490 <_cleanup_r+0x8>)
 802548a:	f000 b8af 	b.w	80255ec <_fwalk_reent>
 802548e:	bf00      	nop
 8025490:	080253c9 	.word	0x080253c9

08025494 <__sfmoreglue>:
 8025494:	b570      	push	{r4, r5, r6, lr}
 8025496:	1e4a      	subs	r2, r1, #1
 8025498:	2568      	movs	r5, #104	; 0x68
 802549a:	4355      	muls	r5, r2
 802549c:	460e      	mov	r6, r1
 802549e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80254a2:	f000 f979 	bl	8025798 <_malloc_r>
 80254a6:	4604      	mov	r4, r0
 80254a8:	b140      	cbz	r0, 80254bc <__sfmoreglue+0x28>
 80254aa:	2100      	movs	r1, #0
 80254ac:	e9c0 1600 	strd	r1, r6, [r0]
 80254b0:	300c      	adds	r0, #12
 80254b2:	60a0      	str	r0, [r4, #8]
 80254b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80254b8:	f7ff fb26 	bl	8024b08 <memset>
 80254bc:	4620      	mov	r0, r4
 80254be:	bd70      	pop	{r4, r5, r6, pc}

080254c0 <__sfp_lock_acquire>:
 80254c0:	4801      	ldr	r0, [pc, #4]	; (80254c8 <__sfp_lock_acquire+0x8>)
 80254c2:	f000 b8b3 	b.w	802562c <__retarget_lock_acquire_recursive>
 80254c6:	bf00      	nop
 80254c8:	2000bb18 	.word	0x2000bb18

080254cc <__sfp_lock_release>:
 80254cc:	4801      	ldr	r0, [pc, #4]	; (80254d4 <__sfp_lock_release+0x8>)
 80254ce:	f000 b8ae 	b.w	802562e <__retarget_lock_release_recursive>
 80254d2:	bf00      	nop
 80254d4:	2000bb18 	.word	0x2000bb18

080254d8 <__sinit_lock_acquire>:
 80254d8:	4801      	ldr	r0, [pc, #4]	; (80254e0 <__sinit_lock_acquire+0x8>)
 80254da:	f000 b8a7 	b.w	802562c <__retarget_lock_acquire_recursive>
 80254de:	bf00      	nop
 80254e0:	2000bb13 	.word	0x2000bb13

080254e4 <__sinit_lock_release>:
 80254e4:	4801      	ldr	r0, [pc, #4]	; (80254ec <__sinit_lock_release+0x8>)
 80254e6:	f000 b8a2 	b.w	802562e <__retarget_lock_release_recursive>
 80254ea:	bf00      	nop
 80254ec:	2000bb13 	.word	0x2000bb13

080254f0 <__sinit>:
 80254f0:	b510      	push	{r4, lr}
 80254f2:	4604      	mov	r4, r0
 80254f4:	f7ff fff0 	bl	80254d8 <__sinit_lock_acquire>
 80254f8:	69a3      	ldr	r3, [r4, #24]
 80254fa:	b11b      	cbz	r3, 8025504 <__sinit+0x14>
 80254fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025500:	f7ff bff0 	b.w	80254e4 <__sinit_lock_release>
 8025504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025508:	6523      	str	r3, [r4, #80]	; 0x50
 802550a:	4b13      	ldr	r3, [pc, #76]	; (8025558 <__sinit+0x68>)
 802550c:	4a13      	ldr	r2, [pc, #76]	; (802555c <__sinit+0x6c>)
 802550e:	681b      	ldr	r3, [r3, #0]
 8025510:	62a2      	str	r2, [r4, #40]	; 0x28
 8025512:	42a3      	cmp	r3, r4
 8025514:	bf04      	itt	eq
 8025516:	2301      	moveq	r3, #1
 8025518:	61a3      	streq	r3, [r4, #24]
 802551a:	4620      	mov	r0, r4
 802551c:	f000 f820 	bl	8025560 <__sfp>
 8025520:	6060      	str	r0, [r4, #4]
 8025522:	4620      	mov	r0, r4
 8025524:	f000 f81c 	bl	8025560 <__sfp>
 8025528:	60a0      	str	r0, [r4, #8]
 802552a:	4620      	mov	r0, r4
 802552c:	f000 f818 	bl	8025560 <__sfp>
 8025530:	2200      	movs	r2, #0
 8025532:	60e0      	str	r0, [r4, #12]
 8025534:	2104      	movs	r1, #4
 8025536:	6860      	ldr	r0, [r4, #4]
 8025538:	f7ff ff82 	bl	8025440 <std>
 802553c:	68a0      	ldr	r0, [r4, #8]
 802553e:	2201      	movs	r2, #1
 8025540:	2109      	movs	r1, #9
 8025542:	f7ff ff7d 	bl	8025440 <std>
 8025546:	68e0      	ldr	r0, [r4, #12]
 8025548:	2202      	movs	r2, #2
 802554a:	2112      	movs	r1, #18
 802554c:	f7ff ff78 	bl	8025440 <std>
 8025550:	2301      	movs	r3, #1
 8025552:	61a3      	str	r3, [r4, #24]
 8025554:	e7d2      	b.n	80254fc <__sinit+0xc>
 8025556:	bf00      	nop
 8025558:	0802a5e8 	.word	0x0802a5e8
 802555c:	08025489 	.word	0x08025489

08025560 <__sfp>:
 8025560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025562:	4607      	mov	r7, r0
 8025564:	f7ff ffac 	bl	80254c0 <__sfp_lock_acquire>
 8025568:	4b1e      	ldr	r3, [pc, #120]	; (80255e4 <__sfp+0x84>)
 802556a:	681e      	ldr	r6, [r3, #0]
 802556c:	69b3      	ldr	r3, [r6, #24]
 802556e:	b913      	cbnz	r3, 8025576 <__sfp+0x16>
 8025570:	4630      	mov	r0, r6
 8025572:	f7ff ffbd 	bl	80254f0 <__sinit>
 8025576:	3648      	adds	r6, #72	; 0x48
 8025578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802557c:	3b01      	subs	r3, #1
 802557e:	d503      	bpl.n	8025588 <__sfp+0x28>
 8025580:	6833      	ldr	r3, [r6, #0]
 8025582:	b30b      	cbz	r3, 80255c8 <__sfp+0x68>
 8025584:	6836      	ldr	r6, [r6, #0]
 8025586:	e7f7      	b.n	8025578 <__sfp+0x18>
 8025588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802558c:	b9d5      	cbnz	r5, 80255c4 <__sfp+0x64>
 802558e:	4b16      	ldr	r3, [pc, #88]	; (80255e8 <__sfp+0x88>)
 8025590:	60e3      	str	r3, [r4, #12]
 8025592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025596:	6665      	str	r5, [r4, #100]	; 0x64
 8025598:	f000 f847 	bl	802562a <__retarget_lock_init_recursive>
 802559c:	f7ff ff96 	bl	80254cc <__sfp_lock_release>
 80255a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80255a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80255a8:	6025      	str	r5, [r4, #0]
 80255aa:	61a5      	str	r5, [r4, #24]
 80255ac:	2208      	movs	r2, #8
 80255ae:	4629      	mov	r1, r5
 80255b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80255b4:	f7ff faa8 	bl	8024b08 <memset>
 80255b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80255bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80255c0:	4620      	mov	r0, r4
 80255c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80255c4:	3468      	adds	r4, #104	; 0x68
 80255c6:	e7d9      	b.n	802557c <__sfp+0x1c>
 80255c8:	2104      	movs	r1, #4
 80255ca:	4638      	mov	r0, r7
 80255cc:	f7ff ff62 	bl	8025494 <__sfmoreglue>
 80255d0:	4604      	mov	r4, r0
 80255d2:	6030      	str	r0, [r6, #0]
 80255d4:	2800      	cmp	r0, #0
 80255d6:	d1d5      	bne.n	8025584 <__sfp+0x24>
 80255d8:	f7ff ff78 	bl	80254cc <__sfp_lock_release>
 80255dc:	230c      	movs	r3, #12
 80255de:	603b      	str	r3, [r7, #0]
 80255e0:	e7ee      	b.n	80255c0 <__sfp+0x60>
 80255e2:	bf00      	nop
 80255e4:	0802a5e8 	.word	0x0802a5e8
 80255e8:	ffff0001 	.word	0xffff0001

080255ec <_fwalk_reent>:
 80255ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80255f0:	4606      	mov	r6, r0
 80255f2:	4688      	mov	r8, r1
 80255f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80255f8:	2700      	movs	r7, #0
 80255fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80255fe:	f1b9 0901 	subs.w	r9, r9, #1
 8025602:	d505      	bpl.n	8025610 <_fwalk_reent+0x24>
 8025604:	6824      	ldr	r4, [r4, #0]
 8025606:	2c00      	cmp	r4, #0
 8025608:	d1f7      	bne.n	80255fa <_fwalk_reent+0xe>
 802560a:	4638      	mov	r0, r7
 802560c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025610:	89ab      	ldrh	r3, [r5, #12]
 8025612:	2b01      	cmp	r3, #1
 8025614:	d907      	bls.n	8025626 <_fwalk_reent+0x3a>
 8025616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802561a:	3301      	adds	r3, #1
 802561c:	d003      	beq.n	8025626 <_fwalk_reent+0x3a>
 802561e:	4629      	mov	r1, r5
 8025620:	4630      	mov	r0, r6
 8025622:	47c0      	blx	r8
 8025624:	4307      	orrs	r7, r0
 8025626:	3568      	adds	r5, #104	; 0x68
 8025628:	e7e9      	b.n	80255fe <_fwalk_reent+0x12>

0802562a <__retarget_lock_init_recursive>:
 802562a:	4770      	bx	lr

0802562c <__retarget_lock_acquire_recursive>:
 802562c:	4770      	bx	lr

0802562e <__retarget_lock_release_recursive>:
 802562e:	4770      	bx	lr

08025630 <__swhatbuf_r>:
 8025630:	b570      	push	{r4, r5, r6, lr}
 8025632:	460e      	mov	r6, r1
 8025634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025638:	2900      	cmp	r1, #0
 802563a:	b096      	sub	sp, #88	; 0x58
 802563c:	4614      	mov	r4, r2
 802563e:	461d      	mov	r5, r3
 8025640:	da07      	bge.n	8025652 <__swhatbuf_r+0x22>
 8025642:	2300      	movs	r3, #0
 8025644:	602b      	str	r3, [r5, #0]
 8025646:	89b3      	ldrh	r3, [r6, #12]
 8025648:	061a      	lsls	r2, r3, #24
 802564a:	d410      	bmi.n	802566e <__swhatbuf_r+0x3e>
 802564c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025650:	e00e      	b.n	8025670 <__swhatbuf_r+0x40>
 8025652:	466a      	mov	r2, sp
 8025654:	f000 f9b4 	bl	80259c0 <_fstat_r>
 8025658:	2800      	cmp	r0, #0
 802565a:	dbf2      	blt.n	8025642 <__swhatbuf_r+0x12>
 802565c:	9a01      	ldr	r2, [sp, #4]
 802565e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025666:	425a      	negs	r2, r3
 8025668:	415a      	adcs	r2, r3
 802566a:	602a      	str	r2, [r5, #0]
 802566c:	e7ee      	b.n	802564c <__swhatbuf_r+0x1c>
 802566e:	2340      	movs	r3, #64	; 0x40
 8025670:	2000      	movs	r0, #0
 8025672:	6023      	str	r3, [r4, #0]
 8025674:	b016      	add	sp, #88	; 0x58
 8025676:	bd70      	pop	{r4, r5, r6, pc}

08025678 <__smakebuf_r>:
 8025678:	898b      	ldrh	r3, [r1, #12]
 802567a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802567c:	079d      	lsls	r5, r3, #30
 802567e:	4606      	mov	r6, r0
 8025680:	460c      	mov	r4, r1
 8025682:	d507      	bpl.n	8025694 <__smakebuf_r+0x1c>
 8025684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025688:	6023      	str	r3, [r4, #0]
 802568a:	6123      	str	r3, [r4, #16]
 802568c:	2301      	movs	r3, #1
 802568e:	6163      	str	r3, [r4, #20]
 8025690:	b002      	add	sp, #8
 8025692:	bd70      	pop	{r4, r5, r6, pc}
 8025694:	ab01      	add	r3, sp, #4
 8025696:	466a      	mov	r2, sp
 8025698:	f7ff ffca 	bl	8025630 <__swhatbuf_r>
 802569c:	9900      	ldr	r1, [sp, #0]
 802569e:	4605      	mov	r5, r0
 80256a0:	4630      	mov	r0, r6
 80256a2:	f000 f879 	bl	8025798 <_malloc_r>
 80256a6:	b948      	cbnz	r0, 80256bc <__smakebuf_r+0x44>
 80256a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256ac:	059a      	lsls	r2, r3, #22
 80256ae:	d4ef      	bmi.n	8025690 <__smakebuf_r+0x18>
 80256b0:	f023 0303 	bic.w	r3, r3, #3
 80256b4:	f043 0302 	orr.w	r3, r3, #2
 80256b8:	81a3      	strh	r3, [r4, #12]
 80256ba:	e7e3      	b.n	8025684 <__smakebuf_r+0xc>
 80256bc:	4b0d      	ldr	r3, [pc, #52]	; (80256f4 <__smakebuf_r+0x7c>)
 80256be:	62b3      	str	r3, [r6, #40]	; 0x28
 80256c0:	89a3      	ldrh	r3, [r4, #12]
 80256c2:	6020      	str	r0, [r4, #0]
 80256c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80256c8:	81a3      	strh	r3, [r4, #12]
 80256ca:	9b00      	ldr	r3, [sp, #0]
 80256cc:	6163      	str	r3, [r4, #20]
 80256ce:	9b01      	ldr	r3, [sp, #4]
 80256d0:	6120      	str	r0, [r4, #16]
 80256d2:	b15b      	cbz	r3, 80256ec <__smakebuf_r+0x74>
 80256d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80256d8:	4630      	mov	r0, r6
 80256da:	f000 f983 	bl	80259e4 <_isatty_r>
 80256de:	b128      	cbz	r0, 80256ec <__smakebuf_r+0x74>
 80256e0:	89a3      	ldrh	r3, [r4, #12]
 80256e2:	f023 0303 	bic.w	r3, r3, #3
 80256e6:	f043 0301 	orr.w	r3, r3, #1
 80256ea:	81a3      	strh	r3, [r4, #12]
 80256ec:	89a0      	ldrh	r0, [r4, #12]
 80256ee:	4305      	orrs	r5, r0
 80256f0:	81a5      	strh	r5, [r4, #12]
 80256f2:	e7cd      	b.n	8025690 <__smakebuf_r+0x18>
 80256f4:	08025489 	.word	0x08025489

080256f8 <_free_r>:
 80256f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80256fa:	2900      	cmp	r1, #0
 80256fc:	d048      	beq.n	8025790 <_free_r+0x98>
 80256fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025702:	9001      	str	r0, [sp, #4]
 8025704:	2b00      	cmp	r3, #0
 8025706:	f1a1 0404 	sub.w	r4, r1, #4
 802570a:	bfb8      	it	lt
 802570c:	18e4      	addlt	r4, r4, r3
 802570e:	f000 f98b 	bl	8025a28 <__malloc_lock>
 8025712:	4a20      	ldr	r2, [pc, #128]	; (8025794 <_free_r+0x9c>)
 8025714:	9801      	ldr	r0, [sp, #4]
 8025716:	6813      	ldr	r3, [r2, #0]
 8025718:	4615      	mov	r5, r2
 802571a:	b933      	cbnz	r3, 802572a <_free_r+0x32>
 802571c:	6063      	str	r3, [r4, #4]
 802571e:	6014      	str	r4, [r2, #0]
 8025720:	b003      	add	sp, #12
 8025722:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025726:	f000 b985 	b.w	8025a34 <__malloc_unlock>
 802572a:	42a3      	cmp	r3, r4
 802572c:	d90b      	bls.n	8025746 <_free_r+0x4e>
 802572e:	6821      	ldr	r1, [r4, #0]
 8025730:	1862      	adds	r2, r4, r1
 8025732:	4293      	cmp	r3, r2
 8025734:	bf04      	itt	eq
 8025736:	681a      	ldreq	r2, [r3, #0]
 8025738:	685b      	ldreq	r3, [r3, #4]
 802573a:	6063      	str	r3, [r4, #4]
 802573c:	bf04      	itt	eq
 802573e:	1852      	addeq	r2, r2, r1
 8025740:	6022      	streq	r2, [r4, #0]
 8025742:	602c      	str	r4, [r5, #0]
 8025744:	e7ec      	b.n	8025720 <_free_r+0x28>
 8025746:	461a      	mov	r2, r3
 8025748:	685b      	ldr	r3, [r3, #4]
 802574a:	b10b      	cbz	r3, 8025750 <_free_r+0x58>
 802574c:	42a3      	cmp	r3, r4
 802574e:	d9fa      	bls.n	8025746 <_free_r+0x4e>
 8025750:	6811      	ldr	r1, [r2, #0]
 8025752:	1855      	adds	r5, r2, r1
 8025754:	42a5      	cmp	r5, r4
 8025756:	d10b      	bne.n	8025770 <_free_r+0x78>
 8025758:	6824      	ldr	r4, [r4, #0]
 802575a:	4421      	add	r1, r4
 802575c:	1854      	adds	r4, r2, r1
 802575e:	42a3      	cmp	r3, r4
 8025760:	6011      	str	r1, [r2, #0]
 8025762:	d1dd      	bne.n	8025720 <_free_r+0x28>
 8025764:	681c      	ldr	r4, [r3, #0]
 8025766:	685b      	ldr	r3, [r3, #4]
 8025768:	6053      	str	r3, [r2, #4]
 802576a:	4421      	add	r1, r4
 802576c:	6011      	str	r1, [r2, #0]
 802576e:	e7d7      	b.n	8025720 <_free_r+0x28>
 8025770:	d902      	bls.n	8025778 <_free_r+0x80>
 8025772:	230c      	movs	r3, #12
 8025774:	6003      	str	r3, [r0, #0]
 8025776:	e7d3      	b.n	8025720 <_free_r+0x28>
 8025778:	6825      	ldr	r5, [r4, #0]
 802577a:	1961      	adds	r1, r4, r5
 802577c:	428b      	cmp	r3, r1
 802577e:	bf04      	itt	eq
 8025780:	6819      	ldreq	r1, [r3, #0]
 8025782:	685b      	ldreq	r3, [r3, #4]
 8025784:	6063      	str	r3, [r4, #4]
 8025786:	bf04      	itt	eq
 8025788:	1949      	addeq	r1, r1, r5
 802578a:	6021      	streq	r1, [r4, #0]
 802578c:	6054      	str	r4, [r2, #4]
 802578e:	e7c7      	b.n	8025720 <_free_r+0x28>
 8025790:	b003      	add	sp, #12
 8025792:	bd30      	pop	{r4, r5, pc}
 8025794:	2000b274 	.word	0x2000b274

08025798 <_malloc_r>:
 8025798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802579a:	1ccd      	adds	r5, r1, #3
 802579c:	f025 0503 	bic.w	r5, r5, #3
 80257a0:	3508      	adds	r5, #8
 80257a2:	2d0c      	cmp	r5, #12
 80257a4:	bf38      	it	cc
 80257a6:	250c      	movcc	r5, #12
 80257a8:	2d00      	cmp	r5, #0
 80257aa:	4606      	mov	r6, r0
 80257ac:	db01      	blt.n	80257b2 <_malloc_r+0x1a>
 80257ae:	42a9      	cmp	r1, r5
 80257b0:	d903      	bls.n	80257ba <_malloc_r+0x22>
 80257b2:	230c      	movs	r3, #12
 80257b4:	6033      	str	r3, [r6, #0]
 80257b6:	2000      	movs	r0, #0
 80257b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80257ba:	f000 f935 	bl	8025a28 <__malloc_lock>
 80257be:	4921      	ldr	r1, [pc, #132]	; (8025844 <_malloc_r+0xac>)
 80257c0:	680a      	ldr	r2, [r1, #0]
 80257c2:	4614      	mov	r4, r2
 80257c4:	b99c      	cbnz	r4, 80257ee <_malloc_r+0x56>
 80257c6:	4f20      	ldr	r7, [pc, #128]	; (8025848 <_malloc_r+0xb0>)
 80257c8:	683b      	ldr	r3, [r7, #0]
 80257ca:	b923      	cbnz	r3, 80257d6 <_malloc_r+0x3e>
 80257cc:	4621      	mov	r1, r4
 80257ce:	4630      	mov	r0, r6
 80257d0:	f000 f83c 	bl	802584c <_sbrk_r>
 80257d4:	6038      	str	r0, [r7, #0]
 80257d6:	4629      	mov	r1, r5
 80257d8:	4630      	mov	r0, r6
 80257da:	f000 f837 	bl	802584c <_sbrk_r>
 80257de:	1c43      	adds	r3, r0, #1
 80257e0:	d123      	bne.n	802582a <_malloc_r+0x92>
 80257e2:	230c      	movs	r3, #12
 80257e4:	6033      	str	r3, [r6, #0]
 80257e6:	4630      	mov	r0, r6
 80257e8:	f000 f924 	bl	8025a34 <__malloc_unlock>
 80257ec:	e7e3      	b.n	80257b6 <_malloc_r+0x1e>
 80257ee:	6823      	ldr	r3, [r4, #0]
 80257f0:	1b5b      	subs	r3, r3, r5
 80257f2:	d417      	bmi.n	8025824 <_malloc_r+0x8c>
 80257f4:	2b0b      	cmp	r3, #11
 80257f6:	d903      	bls.n	8025800 <_malloc_r+0x68>
 80257f8:	6023      	str	r3, [r4, #0]
 80257fa:	441c      	add	r4, r3
 80257fc:	6025      	str	r5, [r4, #0]
 80257fe:	e004      	b.n	802580a <_malloc_r+0x72>
 8025800:	6863      	ldr	r3, [r4, #4]
 8025802:	42a2      	cmp	r2, r4
 8025804:	bf0c      	ite	eq
 8025806:	600b      	streq	r3, [r1, #0]
 8025808:	6053      	strne	r3, [r2, #4]
 802580a:	4630      	mov	r0, r6
 802580c:	f000 f912 	bl	8025a34 <__malloc_unlock>
 8025810:	f104 000b 	add.w	r0, r4, #11
 8025814:	1d23      	adds	r3, r4, #4
 8025816:	f020 0007 	bic.w	r0, r0, #7
 802581a:	1ac2      	subs	r2, r0, r3
 802581c:	d0cc      	beq.n	80257b8 <_malloc_r+0x20>
 802581e:	1a1b      	subs	r3, r3, r0
 8025820:	50a3      	str	r3, [r4, r2]
 8025822:	e7c9      	b.n	80257b8 <_malloc_r+0x20>
 8025824:	4622      	mov	r2, r4
 8025826:	6864      	ldr	r4, [r4, #4]
 8025828:	e7cc      	b.n	80257c4 <_malloc_r+0x2c>
 802582a:	1cc4      	adds	r4, r0, #3
 802582c:	f024 0403 	bic.w	r4, r4, #3
 8025830:	42a0      	cmp	r0, r4
 8025832:	d0e3      	beq.n	80257fc <_malloc_r+0x64>
 8025834:	1a21      	subs	r1, r4, r0
 8025836:	4630      	mov	r0, r6
 8025838:	f000 f808 	bl	802584c <_sbrk_r>
 802583c:	3001      	adds	r0, #1
 802583e:	d1dd      	bne.n	80257fc <_malloc_r+0x64>
 8025840:	e7cf      	b.n	80257e2 <_malloc_r+0x4a>
 8025842:	bf00      	nop
 8025844:	2000b274 	.word	0x2000b274
 8025848:	2000b278 	.word	0x2000b278

0802584c <_sbrk_r>:
 802584c:	b538      	push	{r3, r4, r5, lr}
 802584e:	4d06      	ldr	r5, [pc, #24]	; (8025868 <_sbrk_r+0x1c>)
 8025850:	2300      	movs	r3, #0
 8025852:	4604      	mov	r4, r0
 8025854:	4608      	mov	r0, r1
 8025856:	602b      	str	r3, [r5, #0]
 8025858:	f7db fefa 	bl	8001650 <_sbrk>
 802585c:	1c43      	adds	r3, r0, #1
 802585e:	d102      	bne.n	8025866 <_sbrk_r+0x1a>
 8025860:	682b      	ldr	r3, [r5, #0]
 8025862:	b103      	cbz	r3, 8025866 <_sbrk_r+0x1a>
 8025864:	6023      	str	r3, [r4, #0]
 8025866:	bd38      	pop	{r3, r4, r5, pc}
 8025868:	2000bb1c 	.word	0x2000bb1c

0802586c <_raise_r>:
 802586c:	291f      	cmp	r1, #31
 802586e:	b538      	push	{r3, r4, r5, lr}
 8025870:	4604      	mov	r4, r0
 8025872:	460d      	mov	r5, r1
 8025874:	d904      	bls.n	8025880 <_raise_r+0x14>
 8025876:	2316      	movs	r3, #22
 8025878:	6003      	str	r3, [r0, #0]
 802587a:	f04f 30ff 	mov.w	r0, #4294967295
 802587e:	bd38      	pop	{r3, r4, r5, pc}
 8025880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025882:	b112      	cbz	r2, 802588a <_raise_r+0x1e>
 8025884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025888:	b94b      	cbnz	r3, 802589e <_raise_r+0x32>
 802588a:	4620      	mov	r0, r4
 802588c:	f000 f830 	bl	80258f0 <_getpid_r>
 8025890:	462a      	mov	r2, r5
 8025892:	4601      	mov	r1, r0
 8025894:	4620      	mov	r0, r4
 8025896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802589a:	f000 b817 	b.w	80258cc <_kill_r>
 802589e:	2b01      	cmp	r3, #1
 80258a0:	d00a      	beq.n	80258b8 <_raise_r+0x4c>
 80258a2:	1c59      	adds	r1, r3, #1
 80258a4:	d103      	bne.n	80258ae <_raise_r+0x42>
 80258a6:	2316      	movs	r3, #22
 80258a8:	6003      	str	r3, [r0, #0]
 80258aa:	2001      	movs	r0, #1
 80258ac:	e7e7      	b.n	802587e <_raise_r+0x12>
 80258ae:	2400      	movs	r4, #0
 80258b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80258b4:	4628      	mov	r0, r5
 80258b6:	4798      	blx	r3
 80258b8:	2000      	movs	r0, #0
 80258ba:	e7e0      	b.n	802587e <_raise_r+0x12>

080258bc <raise>:
 80258bc:	4b02      	ldr	r3, [pc, #8]	; (80258c8 <raise+0xc>)
 80258be:	4601      	mov	r1, r0
 80258c0:	6818      	ldr	r0, [r3, #0]
 80258c2:	f7ff bfd3 	b.w	802586c <_raise_r>
 80258c6:	bf00      	nop
 80258c8:	2000007c 	.word	0x2000007c

080258cc <_kill_r>:
 80258cc:	b538      	push	{r3, r4, r5, lr}
 80258ce:	4d07      	ldr	r5, [pc, #28]	; (80258ec <_kill_r+0x20>)
 80258d0:	2300      	movs	r3, #0
 80258d2:	4604      	mov	r4, r0
 80258d4:	4608      	mov	r0, r1
 80258d6:	4611      	mov	r1, r2
 80258d8:	602b      	str	r3, [r5, #0]
 80258da:	f7db fe85 	bl	80015e8 <_kill>
 80258de:	1c43      	adds	r3, r0, #1
 80258e0:	d102      	bne.n	80258e8 <_kill_r+0x1c>
 80258e2:	682b      	ldr	r3, [r5, #0]
 80258e4:	b103      	cbz	r3, 80258e8 <_kill_r+0x1c>
 80258e6:	6023      	str	r3, [r4, #0]
 80258e8:	bd38      	pop	{r3, r4, r5, pc}
 80258ea:	bf00      	nop
 80258ec:	2000bb1c 	.word	0x2000bb1c

080258f0 <_getpid_r>:
 80258f0:	f7db be78 	b.w	80015e4 <_getpid>

080258f4 <__sread>:
 80258f4:	b510      	push	{r4, lr}
 80258f6:	460c      	mov	r4, r1
 80258f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80258fc:	f000 f8a0 	bl	8025a40 <_read_r>
 8025900:	2800      	cmp	r0, #0
 8025902:	bfab      	itete	ge
 8025904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025906:	89a3      	ldrhlt	r3, [r4, #12]
 8025908:	181b      	addge	r3, r3, r0
 802590a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802590e:	bfac      	ite	ge
 8025910:	6563      	strge	r3, [r4, #84]	; 0x54
 8025912:	81a3      	strhlt	r3, [r4, #12]
 8025914:	bd10      	pop	{r4, pc}

08025916 <__swrite>:
 8025916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802591a:	461f      	mov	r7, r3
 802591c:	898b      	ldrh	r3, [r1, #12]
 802591e:	05db      	lsls	r3, r3, #23
 8025920:	4605      	mov	r5, r0
 8025922:	460c      	mov	r4, r1
 8025924:	4616      	mov	r6, r2
 8025926:	d505      	bpl.n	8025934 <__swrite+0x1e>
 8025928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802592c:	2302      	movs	r3, #2
 802592e:	2200      	movs	r2, #0
 8025930:	f000 f868 	bl	8025a04 <_lseek_r>
 8025934:	89a3      	ldrh	r3, [r4, #12]
 8025936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802593a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802593e:	81a3      	strh	r3, [r4, #12]
 8025940:	4632      	mov	r2, r6
 8025942:	463b      	mov	r3, r7
 8025944:	4628      	mov	r0, r5
 8025946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802594a:	f000 b817 	b.w	802597c <_write_r>

0802594e <__sseek>:
 802594e:	b510      	push	{r4, lr}
 8025950:	460c      	mov	r4, r1
 8025952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025956:	f000 f855 	bl	8025a04 <_lseek_r>
 802595a:	1c43      	adds	r3, r0, #1
 802595c:	89a3      	ldrh	r3, [r4, #12]
 802595e:	bf15      	itete	ne
 8025960:	6560      	strne	r0, [r4, #84]	; 0x54
 8025962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802596a:	81a3      	strheq	r3, [r4, #12]
 802596c:	bf18      	it	ne
 802596e:	81a3      	strhne	r3, [r4, #12]
 8025970:	bd10      	pop	{r4, pc}

08025972 <__sclose>:
 8025972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025976:	f000 b813 	b.w	80259a0 <_close_r>
	...

0802597c <_write_r>:
 802597c:	b538      	push	{r3, r4, r5, lr}
 802597e:	4d07      	ldr	r5, [pc, #28]	; (802599c <_write_r+0x20>)
 8025980:	4604      	mov	r4, r0
 8025982:	4608      	mov	r0, r1
 8025984:	4611      	mov	r1, r2
 8025986:	2200      	movs	r2, #0
 8025988:	602a      	str	r2, [r5, #0]
 802598a:	461a      	mov	r2, r3
 802598c:	f7db fe47 	bl	800161e <_write>
 8025990:	1c43      	adds	r3, r0, #1
 8025992:	d102      	bne.n	802599a <_write_r+0x1e>
 8025994:	682b      	ldr	r3, [r5, #0]
 8025996:	b103      	cbz	r3, 802599a <_write_r+0x1e>
 8025998:	6023      	str	r3, [r4, #0]
 802599a:	bd38      	pop	{r3, r4, r5, pc}
 802599c:	2000bb1c 	.word	0x2000bb1c

080259a0 <_close_r>:
 80259a0:	b538      	push	{r3, r4, r5, lr}
 80259a2:	4d06      	ldr	r5, [pc, #24]	; (80259bc <_close_r+0x1c>)
 80259a4:	2300      	movs	r3, #0
 80259a6:	4604      	mov	r4, r0
 80259a8:	4608      	mov	r0, r1
 80259aa:	602b      	str	r3, [r5, #0]
 80259ac:	f7db fe44 	bl	8001638 <_close>
 80259b0:	1c43      	adds	r3, r0, #1
 80259b2:	d102      	bne.n	80259ba <_close_r+0x1a>
 80259b4:	682b      	ldr	r3, [r5, #0]
 80259b6:	b103      	cbz	r3, 80259ba <_close_r+0x1a>
 80259b8:	6023      	str	r3, [r4, #0]
 80259ba:	bd38      	pop	{r3, r4, r5, pc}
 80259bc:	2000bb1c 	.word	0x2000bb1c

080259c0 <_fstat_r>:
 80259c0:	b538      	push	{r3, r4, r5, lr}
 80259c2:	4d07      	ldr	r5, [pc, #28]	; (80259e0 <_fstat_r+0x20>)
 80259c4:	2300      	movs	r3, #0
 80259c6:	4604      	mov	r4, r0
 80259c8:	4608      	mov	r0, r1
 80259ca:	4611      	mov	r1, r2
 80259cc:	602b      	str	r3, [r5, #0]
 80259ce:	f7db fe36 	bl	800163e <_fstat>
 80259d2:	1c43      	adds	r3, r0, #1
 80259d4:	d102      	bne.n	80259dc <_fstat_r+0x1c>
 80259d6:	682b      	ldr	r3, [r5, #0]
 80259d8:	b103      	cbz	r3, 80259dc <_fstat_r+0x1c>
 80259da:	6023      	str	r3, [r4, #0]
 80259dc:	bd38      	pop	{r3, r4, r5, pc}
 80259de:	bf00      	nop
 80259e0:	2000bb1c 	.word	0x2000bb1c

080259e4 <_isatty_r>:
 80259e4:	b538      	push	{r3, r4, r5, lr}
 80259e6:	4d06      	ldr	r5, [pc, #24]	; (8025a00 <_isatty_r+0x1c>)
 80259e8:	2300      	movs	r3, #0
 80259ea:	4604      	mov	r4, r0
 80259ec:	4608      	mov	r0, r1
 80259ee:	602b      	str	r3, [r5, #0]
 80259f0:	f7db fe2a 	bl	8001648 <_isatty>
 80259f4:	1c43      	adds	r3, r0, #1
 80259f6:	d102      	bne.n	80259fe <_isatty_r+0x1a>
 80259f8:	682b      	ldr	r3, [r5, #0]
 80259fa:	b103      	cbz	r3, 80259fe <_isatty_r+0x1a>
 80259fc:	6023      	str	r3, [r4, #0]
 80259fe:	bd38      	pop	{r3, r4, r5, pc}
 8025a00:	2000bb1c 	.word	0x2000bb1c

08025a04 <_lseek_r>:
 8025a04:	b538      	push	{r3, r4, r5, lr}
 8025a06:	4d07      	ldr	r5, [pc, #28]	; (8025a24 <_lseek_r+0x20>)
 8025a08:	4604      	mov	r4, r0
 8025a0a:	4608      	mov	r0, r1
 8025a0c:	4611      	mov	r1, r2
 8025a0e:	2200      	movs	r2, #0
 8025a10:	602a      	str	r2, [r5, #0]
 8025a12:	461a      	mov	r2, r3
 8025a14:	f7db fe1a 	bl	800164c <_lseek>
 8025a18:	1c43      	adds	r3, r0, #1
 8025a1a:	d102      	bne.n	8025a22 <_lseek_r+0x1e>
 8025a1c:	682b      	ldr	r3, [r5, #0]
 8025a1e:	b103      	cbz	r3, 8025a22 <_lseek_r+0x1e>
 8025a20:	6023      	str	r3, [r4, #0]
 8025a22:	bd38      	pop	{r3, r4, r5, pc}
 8025a24:	2000bb1c 	.word	0x2000bb1c

08025a28 <__malloc_lock>:
 8025a28:	4801      	ldr	r0, [pc, #4]	; (8025a30 <__malloc_lock+0x8>)
 8025a2a:	f7ff bdff 	b.w	802562c <__retarget_lock_acquire_recursive>
 8025a2e:	bf00      	nop
 8025a30:	2000bb14 	.word	0x2000bb14

08025a34 <__malloc_unlock>:
 8025a34:	4801      	ldr	r0, [pc, #4]	; (8025a3c <__malloc_unlock+0x8>)
 8025a36:	f7ff bdfa 	b.w	802562e <__retarget_lock_release_recursive>
 8025a3a:	bf00      	nop
 8025a3c:	2000bb14 	.word	0x2000bb14

08025a40 <_read_r>:
 8025a40:	b538      	push	{r3, r4, r5, lr}
 8025a42:	4d07      	ldr	r5, [pc, #28]	; (8025a60 <_read_r+0x20>)
 8025a44:	4604      	mov	r4, r0
 8025a46:	4608      	mov	r0, r1
 8025a48:	4611      	mov	r1, r2
 8025a4a:	2200      	movs	r2, #0
 8025a4c:	602a      	str	r2, [r5, #0]
 8025a4e:	461a      	mov	r2, r3
 8025a50:	f7db fdd8 	bl	8001604 <_read>
 8025a54:	1c43      	adds	r3, r0, #1
 8025a56:	d102      	bne.n	8025a5e <_read_r+0x1e>
 8025a58:	682b      	ldr	r3, [r5, #0]
 8025a5a:	b103      	cbz	r3, 8025a5e <_read_r+0x1e>
 8025a5c:	6023      	str	r3, [r4, #0]
 8025a5e:	bd38      	pop	{r3, r4, r5, pc}
 8025a60:	2000bb1c 	.word	0x2000bb1c

08025a64 <_init>:
 8025a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a66:	bf00      	nop
 8025a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a6a:	bc08      	pop	{r3}
 8025a6c:	469e      	mov	lr, r3
 8025a6e:	4770      	bx	lr

08025a70 <_fini>:
 8025a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a72:	bf00      	nop
 8025a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a76:	bc08      	pop	{r3}
 8025a78:	469e      	mov	lr, r3
 8025a7a:	4770      	bx	lr
