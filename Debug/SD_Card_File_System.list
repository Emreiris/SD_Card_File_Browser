
SD_Card_File_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002567c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004aec  08025850  08025850  00035850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a33c  0802a33c  00040248  2**0
                  CONTENTS
  4 .ARM          00000008  0802a33c  0802a33c  0003a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a344  0802a344  00040248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802a344  0802a344  0003a344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a354  0802a354  0003a354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0802a358  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad40  20000248  0802a5a0  00040248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000af88  0802a5a0  0004af88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY
 12 .debug_info   001377d9  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001cd93  00000000  00000000  00177a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00065bb3  00000000  00000000  001947e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003930  00000000  00000000  001fa398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000d930  00000000  00000000  001fdcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205e6  00000000  00000000  0020b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000abd9c  00000000  00000000  0022bbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122326  00000000  00000000  002d797a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003f9ca0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000be10  00000000  00000000  003f9cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025834 	.word	0x08025834

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	08025834 	.word	0x08025834

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <_ZN6driver9displayerC1Ev>:
{

displayer::displayer()
{
	; /*TODO : It may be filled later.*/
}
 8000f00:	4770      	bx	lr

08000f02 <_ZN6driver9displayer12config_layerEv>:
	this->config_layer();

}

void displayer::config_layer()
{
 8000f02:	b538      	push	{r3, r4, r5, lr}
	lcd_handle.LayerCfg[0].WindowX0 = 0;
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
	lcd_handle.LayerCfg[0].WindowY0 = 0;
	lcd_handle.LayerCfg[0].WindowY1 = displayer_height;
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f04:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000f08:	2502      	movs	r5, #2
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
 8000f0a:	2300      	movs	r3, #0
	lcd_handle.LayerCfg[0].Alpha = 255;
	lcd_handle.LayerCfg[0].Alpha0 = 0;
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f0c:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
 8000f10:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
{
 8000f14:	4604      	mov	r4, r0
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000f16:	6403      	str	r3, [r0, #64]	; 0x40
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)fb_start_address;
	lcd_handle.LayerCfg[0].ImageWidth = displayer_width;
	lcd_handle.LayerCfg[0].ImageHeight = displayer_height;
 8000f18:	6642      	str	r2, [r0, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 8000f1a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 8000f1e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f22:	e9c0 2511 	strd	r2, r5, [r0, #68]	; 0x44
	lcd_handle.LayerCfg[0].Alpha = 255;
 8000f26:	25ff      	movs	r5, #255	; 0xff
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 8000f28:	2201      	movs	r2, #1
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 8000f2a:	e9c0 5313 	strd	r5, r3, [r0, #76]	; 0x4c
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f2e:	2507      	movs	r5, #7
 8000f30:	e9c0 c515 	strd	ip, r5, [r0, #84]	; 0x54
	lcd_handle.LayerCfg[0].FBStartAdress = (uint32_t)fb_start_address;
 8000f34:	f04f 4540 	mov.w	r5, #3221225472	; 0xc0000000
	lcd_handle.LayerCfg[0].WindowX1 = displayer_width;
 8000f38:	e9c0 310e 	strd	r3, r1, [r0, #56]	; 0x38
	lcd_handle.LayerCfg[0].ImageWidth = displayer_width;
 8000f3c:	e9c0 5117 	strd	r5, r1, [r0, #92]	; 0x5c
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 8000f40:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8000f44:	f020 fe1a 	bl	8021b7c <HAL_LTDC_ConfigLayer>
	HAL_LTDC_EnableDither(&lcd_handle);
 8000f48:	4620      	mov	r0, r4
}
 8000f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_LTDC_EnableDither(&lcd_handle);
 8000f4e:	f020 be43 	b.w	8021bd8 <HAL_LTDC_EnableDither>
	...

08000f54 <_ZN6driver9displayer4initEv>:
{
 8000f54:	b510      	push	{r4, lr}
	static constexpr uint16_t displayer_height  = 272; /* LCD PIXEL HEIGHT           */

private:
	LTDC_HandleTypeDef lcd_handle;

	static auto inline lcd_backlight_state = [](GPIO_PinState pin_state){ HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, pin_state); };
 8000f56:	2201      	movs	r2, #1
 8000f58:	4604      	mov	r4, r0
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <_ZN6driver9displayer4initEv+0x68>)
 8000f5e:	f020 faa9 	bl	80214b4 <HAL_GPIO_WritePin>
	static auto inline lcd_display_state   = [](GPIO_PinState pin_state){ HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, pin_state); };
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <_ZN6driver9displayer4initEv+0x6c>)
 8000f6a:	f020 faa3 	bl	80214b4 <HAL_GPIO_WritePin>
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <_ZN6driver9displayer4initEv+0x70>)
	lcd_handle.Init.VerticalSync = (displayer_vsync - 1);
 8000f72:	2128      	movs	r1, #40	; 0x28
	lcd_handle.Init.AccumulatedVBP = (displayer_vsync + displayer_vbp - 1);
 8000f74:	2035      	movs	r0, #53	; 0x35
	lcd_handle.Init.AccumulatedActiveH = (displayer_height + displayer_vsync
 8000f76:	f240 2c15 	movw	ip, #533	; 0x215
	lcd_handle.Init.TotalHeigh = (displayer_height + displayer_vsync
 8000f7a:	f240 2e35 	movw	lr, #565	; 0x235
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f7e:	6123      	str	r3, [r4, #16]
	lcd_handle.Init.Backcolor.Blue = 0;
 8000f80:	86a3      	strh	r3, [r4, #52]	; 0x34
	lcd_handle.Init.Backcolor.Red = 0;
 8000f82:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f86:	e9c4 2300 	strd	r2, r3, [r4]
	lcd_handle.Init.VerticalSync = (displayer_vsync - 1);
 8000f8a:	2209      	movs	r2, #9
 8000f8c:	e9c4 1205 	strd	r1, r2, [r4, #20]
	lcd_handle.Init.AccumulatedVBP = (displayer_vsync + displayer_vbp - 1);
 8000f90:	220b      	movs	r2, #11
 8000f92:	e9c4 0207 	strd	r0, r2, [r4, #28]
	lcd_handle.Init.AccumulatedActiveH = (displayer_height + displayer_vsync
 8000f96:	f240 121b 	movw	r2, #283	; 0x11b
	HAL_LTDC_Init(&lcd_handle);
 8000f9a:	4620      	mov	r0, r4
	lcd_handle.Init.AccumulatedActiveH = (displayer_height + displayer_vsync
 8000f9c:	e9c4 c209 	strd	ip, r2, [r4, #36]	; 0x24
	lcd_handle.Init.TotalHeigh = (displayer_height + displayer_vsync
 8000fa0:	f240 121d 	movw	r2, #285	; 0x11d
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fa4:	e9c4 3302 	strd	r3, r3, [r4, #8]
	lcd_handle.Init.TotalHeigh = (displayer_height + displayer_vsync
 8000fa8:	e9c4 e20b 	strd	lr, r2, [r4, #44]	; 0x2c
	HAL_LTDC_Init(&lcd_handle);
 8000fac:	f020 fd7a 	bl	8021aa4 <HAL_LTDC_Init>
	this->config_layer();
 8000fb0:	4620      	mov	r0, r4
}
 8000fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	this->config_layer();
 8000fb6:	f7ff bfa4 	b.w	8000f02 <_ZN6driver9displayer12config_layerEv>
 8000fba:	bf00      	nop
 8000fbc:	40022800 	.word	0x40022800
 8000fc0:	40022000 	.word	0x40022000
 8000fc4:	40016800 	.word	0x40016800

08000fc8 <_ZN6driver9displayer10draw_pixelEsst>:

void displayer::draw_pixel(int16_t x_pos, int16_t y_pos, uint16_t color)
{
 8000fc8:	b510      	push	{r4, lr}
	*(volatile uint16_t *)(lcd_handle.LayerCfg[0].FBStartAdress+( 2 * (y_pos * lcd_handle.LayerCfg [0] .ImageWidth + x_pos))) = color;
 8000fca:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8000fcc:	fb04 1102 	mla	r1, r4, r2, r1
 8000fd0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000fd2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
}
 8000fd6:	bd10      	pop	{r4, pc}

08000fd8 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t>:
	lv_disp_flush_ready(&disp_drv);

}

void displayer_gui_driver::displayer_interface(lv_disp_drv_t *disp,const lv_area_t* area,lv_color_t* color_p)
{
 8000fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    static int32_t x, y;

    for(y = area->y1; y <= area->y2; y++)
 8000fdc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
{
 8000fe0:	4681      	mov	r9, r0
    for(y = area->y1; y <= area->y2; y++)
 8000fe2:	4c15      	ldr	r4, [pc, #84]	; (8001038 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x60>)
{
 8000fe4:	460d      	mov	r5, r1
 8000fe6:	4617      	mov	r7, r2
    {
        for(x = area->x1; x <= area->x2; x++)
 8000fe8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800103c <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x64>
        {
        	display.draw_pixel(x, y, (uint32_t)color_p->full);
 8000fec:	f8df a050 	ldr.w	sl, [pc, #80]	; 8001040 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x68>
    for(y = area->y1; y <= area->y2; y++)
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	db18      	blt.n	800102e <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x56>
        for(x = area->x1; x <= area->x2; x++)
 8000ffc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001000:	f8c8 3000 	str.w	r3, [r8]
 8001004:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8001008:	f8d8 1000 	ldr.w	r1, [r8]
 800100c:	6826      	ldr	r6, [r4, #0]
 800100e:	428b      	cmp	r3, r1
 8001010:	db0a      	blt.n	8001028 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x50>
        	display.draw_pixel(x, y, (uint32_t)color_p->full);
 8001012:	f837 3b02 	ldrh.w	r3, [r7], #2
 8001016:	b232      	sxth	r2, r6
 8001018:	b209      	sxth	r1, r1
 800101a:	4650      	mov	r0, sl
 800101c:	f7ff ffd4 	bl	8000fc8 <_ZN6driver9displayer10draw_pixelEsst>
        for(x = area->x1; x <= area->x2; x++)
 8001020:	f8d8 3000 	ldr.w	r3, [r8]
 8001024:	3301      	adds	r3, #1
 8001026:	e7eb      	b.n	8001000 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x28>
    for(y = area->y1; y <= area->y2; y++)
 8001028:	3601      	adds	r6, #1
 800102a:	6026      	str	r6, [r4, #0]
 800102c:	e7e1      	b.n	8000ff2 <_ZN3gui20displayer_gui_driver19displayer_interfaceEP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t+0x1a>
            color_p++;
        }
    }

    lv_disp_flush_ready(disp);
 800102e:	4648      	mov	r0, r9
}
 8001030:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_disp_flush_ready(disp);
 8001034:	f015 bd5c 	b.w	8016af0 <lv_disp_flush_ready>
 8001038:	20000350 	.word	0x20000350
 800103c:	2000034c 	.word	0x2000034c
 8001040:	200002a4 	.word	0x200002a4

08001044 <_ZN3gui20displayer_gui_driver8gui_initEv>:
{
 8001044:	b538      	push	{r3, r4, r5, lr}
	sdram.init();
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <_ZN3gui20displayer_gui_driver8gui_initEv+0x44>)
	lv_disp_draw_buf_init(&disp_buf, buf_1, NULL, display.displayer_width*10);
 8001048:	4d10      	ldr	r5, [pc, #64]	; (800108c <_ZN3gui20displayer_gui_driver8gui_initEv+0x48>)
	sdram.init();
 800104a:	f000 f913 	bl	8001274 <_ZN6driver13sdram_handler4initEv>
	lv_disp_drv_init(&disp_drv);
 800104e:	4c10      	ldr	r4, [pc, #64]	; (8001090 <_ZN3gui20displayer_gui_driver8gui_initEv+0x4c>)
	display.init();
 8001050:	4810      	ldr	r0, [pc, #64]	; (8001094 <_ZN3gui20displayer_gui_driver8gui_initEv+0x50>)
 8001052:	f7ff ff7f 	bl	8000f54 <_ZN6driver9displayer4initEv>
	lv_init();
 8001056:	f002 fed3 	bl	8003e00 <lv_init>
	lv_disp_draw_buf_init(&disp_buf, buf_1, NULL, display.displayer_width*10);
 800105a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800105e:	2200      	movs	r2, #0
 8001060:	490d      	ldr	r1, [pc, #52]	; (8001098 <_ZN3gui20displayer_gui_driver8gui_initEv+0x54>)
 8001062:	4628      	mov	r0, r5
 8001064:	f015 fc82 	bl	801696c <lv_disp_draw_buf_init>
	lv_disp_drv_init(&disp_drv);
 8001068:	4620      	mov	r0, r4
 800106a:	f015 fc69 	bl	8016940 <lv_disp_drv_init>
	disp_drv.hor_res =  display.displayer_width;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <_ZN3gui20displayer_gui_driver8gui_initEv+0x58>)
	lv_disp_drv_register(&disp_drv);
 8001070:	4620      	mov	r0, r4
	disp_drv.draw_buf = &disp_buf;
 8001072:	6065      	str	r5, [r4, #4]
	disp_drv.hor_res =  display.displayer_width;
 8001074:	6023      	str	r3, [r4, #0]
	disp_drv.flush_cb = this->displayer_interface;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <_ZN3gui20displayer_gui_driver8gui_initEv+0x5c>)
 8001078:	60e3      	str	r3, [r4, #12]
	lv_disp_drv_register(&disp_drv);
 800107a:	f015 fc85 	bl	8016988 <lv_disp_drv_register>
	lv_disp_flush_ready(&disp_drv);
 800107e:	4620      	mov	r0, r4
}
 8001080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lv_disp_flush_ready(&disp_drv);
 8001084:	f015 bd34 	b.w	8016af0 <lv_disp_flush_ready>
 8001088:	2000026c 	.word	0x2000026c
 800108c:	200028d4 	.word	0x200028d4
 8001090:	200028f8 	.word	0x200028f8
 8001094:	200002a4 	.word	0x200002a4
 8001098:	20000354 	.word	0x20000354
 800109c:	011001e0 	.word	0x011001e0
 80010a0:	08000fd9 	.word	0x08000fd9

080010a4 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv>:
public:
	displayer_gui_driver() = default;
	void gui_init();
	static void displayer_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);
private:
	static inline driver::displayer display;
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x20>)

}
 80010a6:	b508      	push	{r3, lr}
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	d102      	bne.n	80010b8 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x14>
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x24>)
 80010b4:	f7ff ff24 	bl	8000f00 <_ZN6driver9displayerC1Ev>
	static inline driver::sdram_handler sdram;
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <_GLOBAL__sub_I__ZN3gui20displayer_gui_driver8gui_initEv+0x28>)
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	bd08      	pop	{r3, pc}
 80010c2:	bf00      	nop
 80010c4:	20000268 	.word	0x20000268
 80010c8:	200002a4 	.word	0x200002a4
 80010cc:	20000264 	.word	0x20000264

080010d0 <_ZN6driver12touch_screen10is_pressedEv>:
{

#define I2C_Handle (&hi2c3)  /* XXX:touch screen driver port is connected to I2C3*/

bool touch_screen::is_pressed()
{
 80010d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t temp_touch_number;

	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_num, I2C_MEMADD_SIZE_8BIT, &temp_touch_number, 1, 10);
 80010d2:	2301      	movs	r3, #1
 80010d4:	220a      	movs	r2, #10
 80010d6:	2171      	movs	r1, #113	; 0x71
 80010d8:	4808      	ldr	r0, [pc, #32]	; (80010fc <_ZN6driver12touch_screen10is_pressedEv+0x2c>)
 80010da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80010de:	f10d 0217 	add.w	r2, sp, #23
 80010e2:	9200      	str	r2, [sp, #0]
 80010e4:	2202      	movs	r2, #2
 80010e6:	f020 fb49 	bl	802177c <HAL_I2C_Mem_Read>

	if(temp_touch_number > 0)
 80010ea:	f89d 0017 	ldrb.w	r0, [sp, #23]
	}
	else
	{
		return false;
	}
}
 80010ee:	3800      	subs	r0, #0
 80010f0:	bf18      	it	ne
 80010f2:	2001      	movne	r0, #1
 80010f4:	b007      	add	sp, #28
 80010f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fa:	bf00      	nop
 80010fc:	2000ab8c 	.word	0x2000ab8c

08001100 <_ZN6driver12touch_screen17read_touch_screenEPtS1_>:

void touch_screen::read_touch_screen(uint16_t* touch_x, uint16_t* touch_y)
{
 8001100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001104:	b086      	sub	sp, #24
	uint8_t ts_x[2];
	uint8_t ts_y[2];

	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_x_h, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 8001106:	2401      	movs	r4, #1
 8001108:	4e21      	ldr	r6, [pc, #132]	; (8001190 <_ZN6driver12touch_screen17read_touch_screenEPtS1_+0x90>)
 800110a:	270a      	movs	r7, #10
 800110c:	ab04      	add	r3, sp, #16
{
 800110e:	4688      	mov	r8, r1
 8001110:	4615      	mov	r5, r2
	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_x_h, I2C_MEMADD_SIZE_8BIT, &ts_x[0], 1, 10);
 8001112:	2171      	movs	r1, #113	; 0x71
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2203      	movs	r2, #3
 8001118:	4623      	mov	r3, r4
 800111a:	4630      	mov	r0, r6
 800111c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001120:	f020 fb2c 	bl	802177c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_x_l, I2C_MEMADD_SIZE_8BIT, &ts_x[1], 1, 10);
 8001124:	f10d 0311 	add.w	r3, sp, #17
 8001128:	2204      	movs	r2, #4
 800112a:	2171      	movs	r1, #113	; 0x71
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4630      	mov	r0, r6
 8001130:	4623      	mov	r3, r4
 8001132:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001136:	f020 fb21 	bl	802177c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_y_h, I2C_MEMADD_SIZE_8BIT, &ts_y[0], 1, 10);
 800113a:	ab05      	add	r3, sp, #20
 800113c:	2205      	movs	r2, #5
 800113e:	2171      	movs	r1, #113	; 0x71
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	4630      	mov	r0, r6
 8001144:	4623      	mov	r3, r4
 8001146:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800114a:	f020 fb17 	bl	802177c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_Handle, address_read , touch_y_l, I2C_MEMADD_SIZE_8BIT, &ts_y[1], 1, 10);
 800114e:	f10d 0315 	add.w	r3, sp, #21
 8001152:	2206      	movs	r2, #6
 8001154:	2171      	movs	r1, #113	; 0x71
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	4630      	mov	r0, r6
 800115a:	4623      	mov	r3, r4
 800115c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8001160:	f020 fb0c 	bl	802177c <HAL_I2C_Mem_Read>

	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 8001164:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001168:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001172:	4413      	add	r3, r2
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 8001174:	f89d 2015 	ldrb.w	r2, [sp, #21]
	*touch_x = ts_x[1] + ((ts_x[0] & 0x0F) << 8);
 8001178:	f8a8 3000 	strh.w	r3, [r8]
	*touch_y = ts_y[1] + ((ts_y[0] & 0x0F) << 8);
 800117c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001186:	4413      	add	r3, r2
 8001188:	802b      	strh	r3, [r5, #0]
}
 800118a:	b006      	add	sp, #24
 800118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001190:	2000ab8c 	.word	0x2000ab8c

08001194 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t>:
	indev_drv.read_cb = this->ts_interface;
	lv_indev_drv_register(&indev_drv);
}

void touch_screen_gui_driver::ts_interface(struct _lv_indev_drv_t * indev, lv_indev_data_t * data)
{
 8001194:	b513      	push	{r0, r1, r4, lr}

	uint16_t ts_x;
	uint16_t ts_y;

	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x30>)
{
 8001198:	460c      	mov	r4, r1
	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 800119a:	f7ff ff99 	bl	80010d0 <_ZN6driver12touch_screen10is_pressedEv>
 800119e:	b178      	cbz	r0, 80011c0 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x2c>
 80011a0:	2301      	movs	r3, #1

	if (data->state == LV_INDEV_STATE_PR)
	{
		ts.read_touch_screen(&ts_x, &ts_y);
 80011a2:	f10d 0206 	add.w	r2, sp, #6
 80011a6:	a901      	add	r1, sp, #4
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x30>)
	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 80011aa:	73a3      	strb	r3, [r4, #14]
		ts.read_touch_screen(&ts_x, &ts_y);
 80011ac:	f7ff ffa8 	bl	8001100 <_ZN6driver12touch_screen17read_touch_screenEPtS1_>
	}

	data->point.x = (int16_t)ts_y;
 80011b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80011b4:	8023      	strh	r3, [r4, #0]
	data->point.y = (int16_t)ts_x;
 80011b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80011ba:	8063      	strh	r3, [r4, #2]

}
 80011bc:	b002      	add	sp, #8
 80011be:	bd10      	pop	{r4, pc}
	data->state =  ts.is_pressed() ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 80011c0:	73a0      	strb	r0, [r4, #14]
	if (data->state == LV_INDEV_STATE_PR)
 80011c2:	e7f5      	b.n	80011b0 <_ZN3gui23touch_screen_gui_driver12ts_interfaceEP15_lv_indev_drv_tP15lv_indev_data_t+0x1c>
 80011c4:	20002930 	.word	0x20002930

080011c8 <_ZN3gui23touch_screen_gui_driver7ts_initEv>:
{
 80011c8:	b510      	push	{r4, lr}
	lv_indev_drv_init(&indev_drv);
 80011ca:	4c07      	ldr	r4, [pc, #28]	; (80011e8 <_ZN3gui23touch_screen_gui_driver7ts_initEv+0x20>)
	MX_I2C3_Init();
 80011cc:	f000 f9a4 	bl	8001518 <MX_I2C3_Init>
	lv_indev_drv_init(&indev_drv);
 80011d0:	4620      	mov	r0, r4
 80011d2:	f015 fca1 	bl	8016b18 <lv_indev_drv_init>
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 80011d6:	2301      	movs	r3, #1
	lv_indev_drv_register(&indev_drv);
 80011d8:	4620      	mov	r0, r4
	indev_drv.type = LV_INDEV_TYPE_POINTER;
 80011da:	7023      	strb	r3, [r4, #0]
	indev_drv.read_cb = this->ts_interface;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <_ZN3gui23touch_screen_gui_driver7ts_initEv+0x24>)
 80011de:	6063      	str	r3, [r4, #4]
}
 80011e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lv_indev_drv_register(&indev_drv);
 80011e4:	f015 bca8 	b.w	8016b38 <lv_indev_drv_register>
 80011e8:	20002934 	.word	0x20002934
 80011ec:	08001195 	.word	0x08001195

080011f0 <_ZN6driver13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>:

}

void sdram_handler::init_sequence(SDRAM_HandleTypeDef *sdram_handle,
		                          FMC_SDRAM_CommandTypeDef *command)
{
 80011f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80011f4:	4614      	mov	r4, r2
 80011f6:	460d      	mov	r5, r1
	  volatile uint32_t temp_val;

	  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011f8:	2601      	movs	r6, #1
 80011fa:	2710      	movs	r7, #16
	  command->AutoRefreshNumber = 1;
	  command->ModeRegisterDefinition = 0;
 80011fc:	f04f 0900 	mov.w	r9, #0
{
 8001200:	4680      	mov	r8, r0

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001202:	4621      	mov	r1, r4
	  command->AutoRefreshNumber = 1;
 8001204:	6096      	str	r6, [r2, #8]
	  command->ModeRegisterDefinition = 0;
 8001206:	f8c2 900c 	str.w	r9, [r2, #12]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800120a:	4628      	mov	r0, r5
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800120c:	e9c2 6700 	strd	r6, r7, [r2]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001214:	f021 faac 	bl	8022770 <HAL_SDRAM_SendCommand>

	  command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001218:	2302      	movs	r3, #2
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	  command->AutoRefreshNumber = 1;
	  command->ModeRegisterDefinition = 0;

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800121a:	4621      	mov	r1, r4
 800121c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001220:	4628      	mov	r0, r5
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001222:	e9c4 3700 	strd	r3, r7, [r4]
	  command->ModeRegisterDefinition = 0;
 8001226:	e9c4 6902 	strd	r6, r9, [r4, #8]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800122a:	f021 faa1 	bl	8022770 <HAL_SDRAM_SendCommand>

	  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800122e:	2303      	movs	r3, #3
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	  command->AutoRefreshNumber = 8;
	  command->ModeRegisterDefinition = 0;

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001230:	4621      	mov	r1, r4
 8001232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001236:	4628      	mov	r0, r5
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001238:	e9c4 3700 	strd	r3, r7, [r4]
	  command->AutoRefreshNumber = 8;
 800123c:	2308      	movs	r3, #8
	  command->ModeRegisterDefinition = 0;
 800123e:	e9c4 3902 	strd	r3, r9, [r4, #8]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001242:	f021 fa95 	bl	8022770 <HAL_SDRAM_SendCommand>

	  temp_val = (uint32_t)burst_length|burst_type_seq|cas_latency| \
 8001246:	f44f 7308 	mov.w	r3, #544	; 0x220
	  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	  command->AutoRefreshNumber = 1;
	  command->ModeRegisterDefinition = temp_val;

	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 800124a:	4621      	mov	r1, r4
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	  temp_val = (uint32_t)burst_length|burst_type_seq|cas_latency| \
 8001250:	9301      	str	r3, [sp, #4]
	  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001252:	2304      	movs	r3, #4
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001254:	4628      	mov	r0, r5
	  command->AutoRefreshNumber = 1;
 8001256:	60a6      	str	r6, [r4, #8]
	  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001258:	e9c4 3700 	strd	r3, r7, [r4]
	  command->ModeRegisterDefinition = temp_val;
 800125c:	9b01      	ldr	r3, [sp, #4]
 800125e:	60e3      	str	r3, [r4, #12]
	  HAL_SDRAM_SendCommand(sdram_handle, command, timeout);
 8001260:	f021 fa86 	bl	8022770 <HAL_SDRAM_SendCommand>
	  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, refresh_time);
 8001264:	f240 6103 	movw	r1, #1539	; 0x603
 8001268:	4640      	mov	r0, r8

}
 800126a:	b003      	add	sp, #12
 800126c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, refresh_time);
 8001270:	f021 ba95 	b.w	802279e <HAL_SDRAM_SetAutoRefreshNumber>

08001274 <_ZN6driver13sdram_handler4initEv>:
    hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001274:	2300      	movs	r3, #0
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <_ZN6driver13sdram_handler4initEv+0x58>)
    hsdram1.Init.MemoryDataWidth = memory_width;
 8001278:	2104      	movs	r1, #4
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800127a:	f44f 6c00 	mov.w	ip, #2048	; 0x800
{
 800127e:	b510      	push	{r4, lr}
    hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001280:	e9c0 2300 	strd	r2, r3, [r0]
    hsdram1.Init.MemoryDataWidth = memory_width;
 8001284:	2210      	movs	r2, #16
{
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	4604      	mov	r4, r0
    hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800128a:	6083      	str	r3, [r0, #8]
    hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800128c:	6143      	str	r3, [r0, #20]
    hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800128e:	6283      	str	r3, [r0, #40]	; 0x28
    hsdram1.Init.MemoryDataWidth = memory_width;
 8001290:	e9c0 1203 	strd	r1, r2, [r0, #12]
    hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
    hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001298:	e9c0 2306 	strd	r2, r3, [r0, #24]
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800129c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    SdramTiming.ExitSelfRefreshDelay = 6;
 80012a0:	2302      	movs	r3, #2
    hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012a2:	e9c0 c208 	strd	ip, r2, [r0, #32]
    SdramTiming.ExitSelfRefreshDelay = 6;
 80012a6:	2206      	movs	r2, #6
    SdramTiming.RCDDelay = 2;
 80012a8:	930b      	str	r3, [sp, #44]	; 0x2c
    SdramTiming.RowCycleDelay = 6;
 80012aa:	e9cd 1207 	strd	r1, r2, [sp, #28]
    HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80012ae:	a905      	add	r1, sp, #20
    SdramTiming.ExitSelfRefreshDelay = 6;
 80012b0:	e9cd 3205 	strd	r3, r2, [sp, #20]
    SdramTiming.RPDelay = 2;
 80012b4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 80012b8:	f021 fa3a 	bl	8022730 <HAL_SDRAM_Init>
    this->init_sequence(&hsdram1, &command);
 80012bc:	aa01      	add	r2, sp, #4
 80012be:	4621      	mov	r1, r4
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff ff95 	bl	80011f0 <_ZN6driver13sdram_handler13init_sequenceEP19SDRAM_HandleTypeDefP24FMC_SDRAM_CommandTypeDef>
}
 80012c6:	b00c      	add	sp, #48	; 0x30
 80012c8:	bd10      	pop	{r4, pc}
 80012ca:	bf00      	nop
 80012cc:	a0000140 	.word	0xa0000140

080012d0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_DMA_Init+0x3c>)
{
 80012d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012d6:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012d8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012e2:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012ec:	f01f fefe 	bl	80210ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012f0:	203b      	movs	r0, #59	; 0x3b
 80012f2:	f01f ff2d 	bl	8021150 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2045      	movs	r0, #69	; 0x45
 80012fa:	4611      	mov	r1, r2
 80012fc:	f01f fef6 	bl	80210ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001300:	2045      	movs	r0, #69	; 0x45

}
 8001302:	b003      	add	sp, #12
 8001304:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001308:	f01f bf22 	b.w	8021150 <HAL_NVIC_EnableIRQ>
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001312:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8001314:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001316:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8001318:	2c00      	cmp	r4, #0
 800131a:	d14e      	bne.n	80013ba <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 800131c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001320:	2603      	movs	r6, #3
 8001322:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8001324:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001328:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132a:	4827      	ldr	r0, [pc, #156]	; (80013c8 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800132c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001344:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134c:	f01f ffcc 	bl	80212e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001350:	f248 1313 	movw	r3, #33043	; 0x8113
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001354:	a901      	add	r1, sp, #4
 8001356:	481d      	ldr	r0, [pc, #116]	; (80013cc <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001358:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001362:	f01f ffc1 	bl	80212e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001366:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136a:	a901      	add	r1, sp, #4
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001378:	f01f ffb6 	bl	80212e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800137c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001380:	a901      	add	r1, sp, #4
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001384:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138e:	f01f ffab 	bl	80212e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001392:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001394:	a901      	add	r1, sp, #4
 8001396:	4810      	ldr	r0, [pc, #64]	; (80013d8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001398:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013a2:	f01f ffa1 	bl	80212e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a6:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	a901      	add	r1, sp, #4
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ac:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f01f ff97 	bl	80212e8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013ba:	b007      	add	sp, #28
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	bf00      	nop
 80013c0:	20002954 	.word	0x20002954
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021c00 	.word	0x40021c00
 80013dc:	40020800 	.word	0x40020800

080013e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e4:	b090      	sub	sp, #64	; 0x40

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	2214      	movs	r2, #20
 80013e8:	2100      	movs	r1, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80013ea:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8001514 <MX_GPIO_Init+0x134>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	a80b      	add	r0, sp, #44	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 80013f0:	4d45      	ldr	r5, [pc, #276]	; (8001508 <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f021 fd7f 	bl	8022ef4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	4b45      	ldr	r3, [pc, #276]	; (800150c <MX_GPIO_Init+0x12c>)
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80013f8:	4640      	mov	r0, r8
 80013fa:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30



  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2603      	movs	r6, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001404:	f042 0210 	orr.w	r2, r2, #16
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	f002 0210 	and.w	r2, r2, #16
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001416:	f042 0204 	orr.w	r2, r2, #4
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
 800141c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141e:	f002 0204 	and.w	r2, r2, #4
 8001422:	9202      	str	r2, [sp, #8]
 8001424:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001430:	f002 0201 	and.w	r2, r2, #1
 8001434:	9203      	str	r2, [sp, #12]
 8001436:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
 8001440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001442:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001446:	9204      	str	r2, [sp, #16]
 8001448:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800144a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
 8001452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001454:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001458:	9205      	str	r2, [sp, #20]
 800145a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
 8001464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001466:	f002 0208 	and.w	r2, r2, #8
 800146a:	9206      	str	r2, [sp, #24]
 800146c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800146e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
 8001476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001478:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800147c:	9207      	str	r2, [sp, #28]
 800147e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
 8001488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148a:	f002 0220 	and.w	r2, r2, #32
 800148e:	9208      	str	r2, [sp, #32]
 8001490:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
 800149a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80014a0:	9209      	str	r2, [sp, #36]	; 0x24
 80014a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b4:	930a      	str	r3, [sp, #40]	; 0x28
 80014b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80014b8:	f01f fffc 	bl	80214b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	4628      	mov	r0, r5
 80014c0:	f241 0102 	movw	r1, #4098	; 0x1002
 80014c4:	f01f fff6 	bl	80214b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	a90b      	add	r1, sp, #44	; 0x2c
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f01f ff07 	bl	80212e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80014dc:	a90b      	add	r1, sp, #44	; 0x2c
 80014de:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80014e8:	f01f fefe 	bl	80212e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80014ec:	f241 0302 	movw	r3, #4098	; 0x1002
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f0:	a90b      	add	r1, sp, #44	; 0x2c
 80014f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	e9cd 460d 	strd	r4, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014fc:	f01f fef4 	bl	80212e8 <HAL_GPIO_Init>

}
 8001500:	b010      	add	sp, #64	; 0x40
 8001502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000
 800150c:	40023800 	.word	0x40023800
 8001510:	40020800 	.word	0x40020800
 8001514:	40022800 	.word	0x40022800

08001518 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001518:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <MX_I2C3_Init+0x4c>)
  hi2c3.Init.Timing = 0x0040EAFF;
  hi2c3.Init.OwnAddress1 = 224;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151c:	21e0      	movs	r1, #224	; 0xe0
  hi2c3.Init.Timing = 0x0040EAFF;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C3_Init+0x50>)
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_I2C3_Init+0x54>)
 8001522:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	2301      	movs	r3, #1
 8001528:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress2 = 0;
 800152e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001532:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001536:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001538:	f020 f8ce 	bl	80216d8 <HAL_I2C_Init>
 800153c:	b108      	cbz	r0, 8001542 <MX_I2C3_Init+0x2a>
  {
    Error_Handler();
 800153e:	f000 f9c3 	bl	80018c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <MX_I2C3_Init+0x4c>)
 8001546:	f020 f9dc 	bl	8021902 <HAL_I2CEx_ConfigAnalogFilter>
 800154a:	b108      	cbz	r0, 8001550 <MX_I2C3_Init+0x38>
  {
    Error_Handler();
 800154c:	f000 f9bc 	bl	80018c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_I2C3_Init+0x4c>)
 8001554:	f020 f9fb 	bl	802194e <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	b118      	cbz	r0, 8001562 <MX_I2C3_Init+0x4a>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800155a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800155e:	f000 b9b3 	b.w	80018c8 <Error_Handler>
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	2000ab8c 	.word	0x2000ab8c
 8001568:	0040eaff 	.word	0x0040eaff
 800156c:	40005c00 	.word	0x40005c00

08001570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001570:	b510      	push	{r4, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	2214      	movs	r2, #20
 8001578:	2100      	movs	r1, #0
 800157a:	a803      	add	r0, sp, #12
 800157c:	f021 fcba 	bl	8022ef4 <memset>
  if(i2cHandle->Instance==I2C3)
 8001580:	6822      	ldr	r2, [r4, #0]
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <HAL_I2C_MspInit+0x70>)
 8001584:	429a      	cmp	r2, r3
 8001586:	d129      	bne.n	80015dc <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001588:	4c16      	ldr	r4, [pc, #88]	; (80015e4 <HAL_I2C_MspInit+0x74>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001590:	4815      	ldr	r0, [pc, #84]	; (80015e8 <HAL_I2C_MspInit+0x78>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001592:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001598:	6323      	str	r3, [r4, #48]	; 0x30
 800159a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800159c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015b0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015b6:	f01f fe97 	bl	80212e8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ba:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015bc:	2200      	movs	r2, #0
 80015be:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015c4:	4611      	mov	r1, r2
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015c6:	6423      	str	r3, [r4, #64]	; 0x40
 80015c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80015d2:	f01f fd8b 	bl	80210ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80015d6:	2048      	movs	r0, #72	; 0x48
 80015d8:	f01f fdba 	bl	8021150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015dc:	b008      	add	sp, #32
 80015de:	bd10      	pop	{r4, pc}
 80015e0:	40005c00 	.word	0x40005c00
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40021c00 	.word	0x40021c00

080015ec <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b08d      	sub	sp, #52	; 0x34
 80015f0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	2214      	movs	r2, #20
 80015f4:	2100      	movs	r1, #0
 80015f6:	a807      	add	r0, sp, #28
 80015f8:	f021 fc7c 	bl	8022ef4 <memset>
  if(ltdcHandle->Instance==LTDC)
 80015fc:	6822      	ldr	r2, [r4, #0]
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_LTDC_MspInit+0x100>)
 8001600:	429a      	cmp	r2, r3
 8001602:	d171      	bne.n	80016e8 <HAL_LTDC_MspInit+0xfc>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001604:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2500      	movs	r5, #0
 800160c:	2403      	movs	r4, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 800160e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001610:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001612:	a907      	add	r1, sp, #28
 8001614:	4836      	ldr	r0, [pc, #216]	; (80016f0 <HAL_LTDC_MspInit+0x104>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001616:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
 800161c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800161e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001622:	9201      	str	r2, [sp, #4]
 8001624:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001628:	f042 0210 	orr.w	r2, r2, #16
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	f002 0210 	and.w	r2, r2, #16
 8001634:	9202      	str	r2, [sp, #8]
 8001636:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
 8001640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001642:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001646:	9203      	str	r2, [sp, #12]
 8001648:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800164a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001650:	631a      	str	r2, [r3, #48]	; 0x30
 8001652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001654:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001658:	9204      	str	r2, [sp, #16]
 800165a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800165c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001666:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800166a:	9205      	str	r2, [sp, #20]
 800166c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800166e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2310      	movs	r3, #16
 8001682:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800168a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168c:	f01f fe2c 	bl	80212e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001690:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001694:	a907      	add	r1, sp, #28
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <HAL_LTDC_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001698:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016a2:	f01f fe21 	bl	80212e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80016a6:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016a8:	a907      	add	r1, sp, #28
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <HAL_LTDC_MspInit+0x10c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ac:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80016b6:	f01f fe17 	bl	80212e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016be:	a907      	add	r1, sp, #28
 80016c0:	480e      	ldr	r0, [pc, #56]	; (80016fc <HAL_LTDC_MspInit+0x110>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016c6:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016cc:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ce:	f01f fe0b 	bl	80212e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80016d2:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016d6:	a907      	add	r1, sp, #28
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <HAL_LTDC_MspInit+0x114>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016da:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016e4:	f01f fe00 	bl	80212e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80016e8:	b00d      	add	sp, #52	; 0x34
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ec:	40016800 	.word	0x40016800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40022400 	.word	0x40022400
 80016f8:	40022800 	.word	0x40022800
 80016fc:	40021800 	.word	0x40021800
 8001700:	40022000 	.word	0x40022000

08001704 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b0b5      	sub	sp, #212	; 0xd4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001708:	2210      	movs	r2, #16
 800170a:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 15;
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001710:	270f      	movs	r7, #15
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f021 fbef 	bl	8022ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001716:	2214      	movs	r2, #20
 8001718:	2100      	movs	r1, #0
 800171a:	a802      	add	r0, sp, #8
 800171c:	f021 fbea 	bl	8022ef4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	2284      	movs	r2, #132	; 0x84
 8001722:	2100      	movs	r1, #0
 8001724:	a813      	add	r0, sp, #76	; 0x4c
 8001726:	f021 fbe5 	bl	8022ef4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <_Z18SystemClock_Configv+0xd0>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	2601      	movs	r6, #1
 800172e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <_Z18SystemClock_Configv+0xd4>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001752:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001760:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001764:	23f0      	movs	r3, #240	; 0xf0
 8001766:	e9cd 730f 	strd	r7, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800176a:	2309      	movs	r3, #9
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176c:	e9cd 6507 	strd	r6, r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001770:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f020 fa81 	bl	8021c78 <HAL_RCC_OscConfig>
 8001776:	b100      	cbz	r0, 800177a <_Z18SystemClock_Configv+0x76>
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  while (1)
 8001778:	e7fe      	b.n	8001778 <_Z18SystemClock_Configv+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800177a:	f020 fa45 	bl	8021c08 <HAL_PWREx_EnableOverDrive>
 800177e:	b100      	cbz	r0, 8001782 <_Z18SystemClock_Configv+0x7e>
  while (1)
 8001780:	e7fe      	b.n	8001780 <_Z18SystemClock_Configv+0x7c>
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001786:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001788:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800178c:	2106      	movs	r1, #6
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800178e:	e9cd 0305 	strd	r0, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001792:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	e9cd 7402 	strd	r7, r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001798:	f020 fc62 	bl	8022060 <HAL_RCC_ClockConfig>
 800179c:	b100      	cbz	r0, 80017a0 <_Z18SystemClock_Configv+0x9c>
  while (1)
 800179e:	e7fe      	b.n	800179e <_Z18SystemClock_Configv+0x9a>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <_Z18SystemClock_Configv+0xd8>)
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017a2:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3
 80017a4:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 80017a6:	2372      	movs	r3, #114	; 0x72
 80017a8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80017aa:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80017ac:	e9cd 4319 	strd	r4, r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80017b0:	2303      	movs	r3, #3
 80017b2:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80017b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017b8:	e9cd 3032 	strd	r3, r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80017be:	e9cd 651d 	strd	r6, r5, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017c2:	f020 fd2d 	bl	8022220 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	b100      	cbz	r0, 80017ca <_Z18SystemClock_Configv+0xc6>
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <_Z18SystemClock_Configv+0xc4>
  HAL_RCC_EnableCSS();
 80017ca:	f020 fc13 	bl	8021ff4 <HAL_RCC_EnableCSS>
}
 80017ce:	b035      	add	sp, #212	; 0xd4
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40007000 	.word	0x40007000
 80017dc:	00a10008 	.word	0x00a10008

080017e0 <main>:
	static  app::application app;
 80017e0:	4c2e      	ldr	r4, [pc, #184]	; (800189c <main+0xbc>)
{
 80017e2:	b508      	push	{r3, lr}
	static  app::application app;
 80017e4:	7823      	ldrb	r3, [r4, #0]
 80017e6:	f3bf 8f5b 	dmb	ish
 80017ea:	07db      	lsls	r3, r3, #31
 80017ec:	d409      	bmi.n	8001802 <main+0x22>
 80017ee:	4620      	mov	r0, r4
 80017f0:	f021 faed 	bl	8022dce <__cxa_guard_acquire>
 80017f4:	b128      	cbz	r0, 8001802 <main+0x22>
 80017f6:	482a      	ldr	r0, [pc, #168]	; (80018a0 <main+0xc0>)
 80017f8:	f000 f9df 	bl	8001bba <_ZN3app11applicationC1Ev>
 80017fc:	4620      	mov	r0, r4
 80017fe:	f021 faf2 	bl	8022de6 <__cxa_guard_release>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001802:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001806:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <main+0xc4>)
 800180c:	2100      	movs	r1, #0
 800180e:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001812:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001816:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001820:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001826:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800182a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800182e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001832:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001836:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800183a:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800183e:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8001842:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001844:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001848:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800184a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800184e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001850:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001854:	d2f9      	bcs.n	800184a <main+0x6a>
    } while(sets-- != 0U);
 8001856:	3a20      	subs	r2, #32
 8001858:	f112 0f20 	cmn.w	r2, #32
 800185c:	d1f2      	bne.n	8001844 <main+0x64>
 800185e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
	  app.app_run();
 8001872:	4c0b      	ldr	r4, [pc, #44]	; (80018a0 <main+0xc0>)
  HAL_Init();
 8001874:	f01f fc0a 	bl	802108c <HAL_Init>
  SystemClock_Config();
 8001878:	f7ff ff44 	bl	8001704 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800187c:	f7ff fdb0 	bl	80013e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001880:	f7ff fd26 	bl	80012d0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001884:	f000 f91a 	bl	8001abc <MX_TIM2_Init>
  app.app_init();
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <main+0xc0>)
 800188a:	f000 f9a3 	bl	8001bd4 <_ZN3app11application8app_initEv>
	  app.app_run();
 800188e:	4620      	mov	r0, r4
 8001890:	f000 f9c2 	bl	8001c18 <_ZN3app11application7app_runEv>
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 8001894:	f017 f82a 	bl	80188ec <lv_timer_handler>
 8001898:	e7f9      	b.n	800188e <main+0xae>
 800189a:	bf00      	nop
 800189c:	20002958 	.word	0x20002958
 80018a0:	2000295c 	.word	0x2000295c
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 80018a8:	6802      	ldr	r2, [r0, #0]
{
 80018aa:	b508      	push	{r3, lr}
  if (htim->Instance == TIM1) {
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d106      	bne.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80018b2:	f01f fbf7 	bl	80210a4 <HAL_IncTick>
    lv_tick_inc(1);
 80018b6:	2001      	movs	r0, #1
}
 80018b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_tick_inc(1);
 80018bc:	f015 b98c 	b.w	8016bd8 <lv_tick_inc>
}
 80018c0:	bd08      	pop	{r3, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000

080018c8 <Error_Handler>:
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler>
	...

080018cc <_GLOBAL__sub_I_main>:
public:
	displayer_gui_driver() = default;
	void gui_init();
	static void displayer_interface(lv_disp_drv_t * disp, const lv_area_t * area, lv_color_t * color_p);
private:
	static inline driver::displayer display;
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <_GLOBAL__sub_I_main+0x20>)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80018ce:	b508      	push	{r3, lr}
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	d102      	bne.n	80018e0 <_GLOBAL__sub_I_main+0x14>
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <_GLOBAL__sub_I_main+0x24>)
 80018dc:	f7ff fb10 	bl	8000f00 <_ZN6driver9displayerC1Ev>
	static inline driver::sdram_handler sdram;
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <_GLOBAL__sub_I_main+0x28>)
 80018e2:	6813      	ldr	r3, [r2, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	bd08      	pop	{r3, pc}
 80018ea:	bf00      	nop
 80018ec:	20000268 	.word	0x20000268
 80018f0:	200002a4 	.word	0x200002a4
 80018f4:	20000264 	.word	0x20000264

080018f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_MspInit+0x2c>)
{
 80018fa:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
 8001904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001906:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800190a:	9200      	str	r2, [sp, #0]
 800190c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	b002      	add	sp, #8
 8001922:	4770      	bx	lr
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b510      	push	{r4, lr}
 800192a:	4601      	mov	r1, r0
 800192c:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800192e:	2200      	movs	r2, #0
 8001930:	2019      	movs	r0, #25
 8001932:	f01f fbdb 	bl	80210ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001936:	2019      	movs	r0, #25
 8001938:	f01f fc0a 	bl	8021150 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193e:	a901      	add	r1, sp, #4
 8001940:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001944:	4c13      	ldr	r4, [pc, #76]	; (8001994 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	645a      	str	r2, [r3, #68]	; 0x44
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001956:	f020 fc33 	bl	80221c0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800195a:	f020 fc21 	bl	80221a0 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001960:	0040      	lsls	r0, r0, #1
  htim1.Instance = TIM1;
 8001962:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001964:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001968:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_InitTick+0x74>)
 800196c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001970:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001972:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8001974:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001976:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001978:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800197c:	f021 f87a 	bl	8022a74 <HAL_TIM_Base_Init>
 8001980:	b920      	cbnz	r0, 800198c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001982:	4620      	mov	r0, r4
 8001984:	f020 ff1e 	bl	80227c4 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001988:	b008      	add	sp, #32
 800198a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
 800198e:	e7fb      	b.n	8001988 <HAL_InitTick+0x60>
 8001990:	40023800 	.word	0x40023800
 8001994:	2000ad1c 	.word	0x2000ad1c
 8001998:	40010000 	.word	0x40010000
 800199c:	000f4240 	.word	0x000f4240

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80019a2:	f020 fc2d 	bl	8022200 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <NMI_Handler+0x6>

080019a8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <HardFault_Handler>

080019aa <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <MemManage_Handler>

080019ac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <BusFault_Handler>

080019ae <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <UsageFault_Handler>

080019b0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:
 80019b2:	4770      	bx	lr

080019b4 <PendSV_Handler>:
 80019b4:	4770      	bx	lr

080019b6 <SysTick_Handler>:
 80019b6:	4770      	bx	lr

080019b8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b8:	4801      	ldr	r0, [pc, #4]	; (80019c0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80019ba:	f020 bf45 	b.w	8022848 <HAL_TIM_IRQHandler>
 80019be:	bf00      	nop
 80019c0:	2000ad1c 	.word	0x2000ad1c

080019c4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c4:	4801      	ldr	r0, [pc, #4]	; (80019cc <TIM2_IRQHandler+0x8>)
 80019c6:	f020 bf3f 	b.w	8022848 <HAL_TIM_IRQHandler>
 80019ca:	bf00      	nop
 80019cc:	2000ad68 	.word	0x2000ad68

080019d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80019d0:	4801      	ldr	r0, [pc, #4]	; (80019d8 <DMA2_Stream3_IRQHandler+0x8>)
 80019d2:	f01f bbcb 	b.w	802116c <HAL_DMA_IRQHandler>
 80019d6:	bf00      	nop
 80019d8:	2000ac5c 	.word	0x2000ac5c

080019dc <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80019dc:	4801      	ldr	r0, [pc, #4]	; (80019e4 <DMA2_Stream6_IRQHandler+0x8>)
 80019de:	f01f bbc5 	b.w	802116c <HAL_DMA_IRQHandler>
 80019e2:	bf00      	nop
 80019e4:	2000acbc 	.word	0x2000acbc

080019e8 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80019e8:	4801      	ldr	r0, [pc, #4]	; (80019f0 <I2C3_EV_IRQHandler+0x8>)
 80019ea:	f01f bf83 	b.w	80218f4 <HAL_I2C_EV_IRQHandler>
 80019ee:	bf00      	nop
 80019f0:	2000ab8c 	.word	0x2000ab8c

080019f4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80019f4:	2001      	movs	r0, #1
 80019f6:	4770      	bx	lr

080019f8 <_kill>:

int _kill(int pid, int sig)
{
 80019f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80019fa:	f021 fa37 	bl	8022e6c <__errno>
 80019fe:	2316      	movs	r3, #22
 8001a00:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	bd08      	pop	{r3, pc}

08001a08 <_exit>:

void _exit (int status)
{
 8001a08:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a0a:	f021 fa2f 	bl	8022e6c <__errno>
 8001a0e:	2316      	movs	r3, #22
 8001a10:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001a12:	e7fe      	b.n	8001a12 <_exit+0xa>

08001a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a14:	b570      	push	{r4, r5, r6, lr}
 8001a16:	460e      	mov	r6, r1
 8001a18:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	42a5      	cmp	r5, r4
 8001a1e:	db01      	blt.n	8001a24 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001a20:	4620      	mov	r0, r4
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001a24:	f3af 8000 	nop.w
 8001a28:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2a:	3501      	adds	r5, #1
 8001a2c:	e7f6      	b.n	8001a1c <_read+0x8>

08001a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2e:	b570      	push	{r4, r5, r6, lr}
 8001a30:	460e      	mov	r6, r1
 8001a32:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2500      	movs	r5, #0
 8001a36:	42a5      	cmp	r5, r4
 8001a38:	db01      	blt.n	8001a3e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001a3e:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8001a42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	e7f6      	b.n	8001a36 <_write+0x8>

08001a48 <_close>:

int _close(int file)
{
	return -1;
}
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001a52:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001a54:	604b      	str	r3, [r1, #4]
}
 8001a56:	4770      	bx	lr

08001a58 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001a58:	2001      	movs	r0, #1
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	4770      	bx	lr

08001a60 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <_sbrk+0x30>)
{
 8001a62:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001a64:	6819      	ldr	r1, [r3, #0]
{
 8001a66:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001a68:	b909      	cbnz	r1, 8001a6e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <_sbrk+0x34>)
 8001a6c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	4909      	ldr	r1, [pc, #36]	; (8001a98 <_sbrk+0x38>)
 8001a72:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <_sbrk+0x3c>)
 8001a74:	4402      	add	r2, r0
 8001a76:	1b09      	subs	r1, r1, r4
 8001a78:	428a      	cmp	r2, r1
 8001a7a:	d906      	bls.n	8001a8a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001a7c:	f021 f9f6 	bl	8022e6c <__errno>
 8001a80:	230c      	movs	r3, #12
 8001a82:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001a88:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001a8a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001a8c:	e7fc      	b.n	8001a88 <_sbrk+0x28>
 8001a8e:	bf00      	nop
 8001a90:	20002964 	.word	0x20002964
 8001a94:	2000af88 	.word	0x2000af88
 8001a98:	20050000 	.word	0x20050000
 8001a9c:	00000400 	.word	0x00000400

08001aa0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SystemInit+0x18>)
 8001aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001aa6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ab2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <MX_TIM2_Init>:

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abc:	2210      	movs	r2, #16
 8001abe:	2100      	movs	r1, #0
{
 8001ac0:	b500      	push	{lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac4:	eb0d 0002 	add.w	r0, sp, r2
 8001ac8:	f021 fa14 	bl	8022ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001acc:	4816      	ldr	r0, [pc, #88]	; (8001b28 <MX_TIM2_Init+0x6c>)
  htim2.Init.Prescaler = 10000;
 8001ace:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ad2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 10000;
 8001ad8:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100;
 8001adc:	2264      	movs	r2, #100	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ade:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae2:	6183      	str	r3, [r0, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	e9c0 2303 	strd	r2, r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aec:	f020 ffc2 	bl	8022a74 <HAL_TIM_Base_Init>
 8001af0:	b108      	cbz	r0, 8001af6 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 8001af2:	f7ff fee9 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001afa:	a904      	add	r1, sp, #16
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <MX_TIM2_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b00:	f020 fff2 	bl	8022ae8 <HAL_TIM_ConfigClockSource>
 8001b04:	b108      	cbz	r0, 8001b0a <MX_TIM2_Init+0x4e>
  {
    Error_Handler();
 8001b06:	f7ff fedf 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b0a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b0c:	a901      	add	r1, sp, #4
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <MX_TIM2_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b10:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b16:	f021 f87b 	bl	8022c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	b108      	cbz	r0, 8001b20 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001b1c:	f7ff fed4 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b20:	b009      	add	sp, #36	; 0x24
 8001b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b26:	bf00      	nop
 8001b28:	2000ad68 	.word	0x2000ad68

08001b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001b2c:	6803      	ldr	r3, [r0, #0]
 8001b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001b32:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8001b34:	d115      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b36:	f503 330e 	add.w	r3, r3, #145408	; 0x23800

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b3a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b48:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b52:	f01f facb 	bl	80210ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b56:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b58:	b003      	add	sp, #12
 8001b5a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b5e:	f01f baf7 	b.w	8021150 <HAL_NVIC_EnableIRQ>
}
 8001b62:	b003      	add	sp, #12
 8001b64:	f85d fb04 	ldr.w	pc, [sp], #4

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6e:	e003      	b.n	8001b78 <LoopCopyDataInit>

08001b70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b76:	3104      	adds	r1, #4

08001b78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b80:	d3f6      	bcc.n	8001b70 <CopyDataInit>
  ldr  r2, =_sbss
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b84:	e002      	b.n	8001b8c <LoopFillZerobss>

08001b86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b88:	f842 3b04 	str.w	r3, [r2], #4

08001b8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b90:	d3f9      	bcc.n	8001b86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b92:	f7ff ff85 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f021 f981 	bl	8022e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff fe21 	bl	80017e0 <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001ba4:	0802a358 	.word	0x0802a358
  ldr  r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bac:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8001bb0:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8001bb4:	2000af88 	.word	0x2000af88

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>

08001bba <_ZN3app11applicationC1Ev>:


namespace app
{

application::application():gui(new gui::displayer_gui_driver()), ts(new gui::touch_screen_gui_driver())
 8001bba:	b510      	push	{r4, lr}
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f021 f914 	bl	8022dec <_Znwj>
 8001bc4:	6020      	str	r0, [r4, #0]
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f021 f910 	bl	8022dec <_Znwj>
 8001bcc:	6060      	str	r0, [r4, #4]
{

}
 8001bce:	4620      	mov	r0, r4
 8001bd0:	bd10      	pop	{r4, pc}
	...

08001bd4 <_ZN3app11application8app_initEv>:

void application::app_init()
{
 8001bd4:	b510      	push	{r4, lr}
 8001bd6:	4604      	mov	r4, r0
	gui->gui_init();
 8001bd8:	6800      	ldr	r0, [r0, #0]
 8001bda:	f7ff fa33 	bl	8001044 <_ZN3gui20displayer_gui_driver8gui_initEv>
	ts->ts_init();
 8001bde:	6860      	ldr	r0, [r4, #4]
public:
	main_window();

	static main_window& get_instance()
	{
		static main_window instance;
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <_ZN3app11application8app_initEv+0x3c>)
 8001be2:	f7ff faf1 	bl	80011c8 <_ZN3gui23touch_screen_gui_driver7ts_initEv>
 8001be6:	7823      	ldrb	r3, [r4, #0]
 8001be8:	f3bf 8f5b 	dmb	ish
 8001bec:	07db      	lsls	r3, r3, #31
 8001bee:	d409      	bmi.n	8001c04 <_ZN3app11application8app_initEv+0x30>
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f021 f8ec 	bl	8022dce <__cxa_guard_acquire>
 8001bf6:	b128      	cbz	r0, 8001c04 <_ZN3app11application8app_initEv+0x30>
 8001bf8:	4806      	ldr	r0, [pc, #24]	; (8001c14 <_ZN3app11application8app_initEv+0x40>)
 8001bfa:	f000 f951 	bl	8001ea0 <_ZN3gui11main_windowC1Ev>
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f021 f8f1 	bl	8022de6 <__cxa_guard_release>

	lv_scr_load(gui::main_window::get_instance().get_screen());
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <_ZN3app11application8app_initEv+0x40>)

}
 8001c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
 8001c0a:	6858      	ldr	r0, [r3, #4]
 8001c0c:	f000 b975 	b.w	8001efa <lv_disp_load_scr>
 8001c10:	20002968 	.word	0x20002968
 8001c14:	2000296c 	.word	0x2000296c

08001c18 <_ZN3app11application7app_runEv>:
void application::app_run()
{



}
 8001c18:	4770      	bx	lr
	...

08001c1c <_GLOBAL__sub_I__ZN3app11applicationC2Ev>:
	static inline driver::displayer display;
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <_GLOBAL__sub_I__ZN3app11applicationC2Ev+0x20>)

}
 8001c1e:	b508      	push	{r3, lr}
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	d102      	bne.n	8001c30 <_GLOBAL__sub_I__ZN3app11applicationC2Ev+0x14>
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <_GLOBAL__sub_I__ZN3app11applicationC2Ev+0x24>)
 8001c2c:	f7ff f968 	bl	8000f00 <_ZN6driver9displayerC1Ev>
	static inline driver::sdram_handler sdram;
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <_GLOBAL__sub_I__ZN3app11applicationC2Ev+0x28>)
 8001c32:	6813      	ldr	r3, [r2, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	bd08      	pop	{r3, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000268 	.word	0x20000268
 8001c40:	200002a4 	.word	0x200002a4
 8001c44:	20000264 	.word	0x20000264

08001c48 <_ZN3gui11main_window17create_text_inputEv>:
	create_file_list();
	//create_keyboard();
}

void main_window::create_text_input()
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
	text_input = lv_textarea_create(screen);
 8001c4c:	6840      	ldr	r0, [r0, #4]
 8001c4e:	f01e fc37 	bl	80204c0 <lv_textarea_create>
	lv_textarea_set_placeholder_text(text_input, "Enter Filename");
 8001c52:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <_ZN3gui11main_window17create_text_inputEv+0xa0>)
	text_input = lv_textarea_create(screen);
 8001c54:	60a0      	str	r0, [r4, #8]
	lv_textarea_set_placeholder_text(text_input, "Enter Filename");
 8001c56:	f01e fc3f 	bl	80204d8 <lv_textarea_set_placeholder_text>
	lv_textarea_set_max_length(text_input, 32);
 8001c5a:	68a0      	ldr	r0, [r4, #8]
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	f01e fd33 	bl	80206c8 <lv_textarea_set_max_length>
	lv_obj_set_size(text_input, screen_width*0.72f, screen_height*0.15f);
 8001c62:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001c66:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001cec <_ZN3gui11main_window17create_text_inputEv+0xa4>
 8001c6a:	ee07 3a10 	vmov	s14, r3
 8001c6e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001c72:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001cf0 <_ZN3gui11main_window17create_text_inputEv+0xa8>
 8001c76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c7a:	68a0      	ldr	r0, [r4, #8]
 8001c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c88:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c90:	ee17 3a10 	vmov	r3, s14
 8001c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	ee17 3a90 	vmov	r3, s15
 8001c9e:	b219      	sxth	r1, r3
 8001ca0:	f003 f878 	bl	8004d94 <lv_obj_set_size>
	lv_obj_align(text_input, LV_ALIGN_TOP_LEFT, screen_width*0.03f, screen_height*0.03f);
 8001ca4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001ca8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001cf4 <_ZN3gui11main_window17create_text_inputEv+0xac>
 8001cac:	2101      	movs	r1, #1
 8001cae:	ee07 3a10 	vmov	s14, r3
 8001cb2:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001cb6:	68a0      	ldr	r0, [r4, #8]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ccc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd4:	ee17 3a10 	vmov	r3, s14
 8001cd8:	ee17 2a90 	vmov	r2, s15
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b212      	sxth	r2, r2

}
 8001ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lv_obj_align(text_input, LV_ALIGN_TOP_LEFT, screen_width*0.03f, screen_height*0.03f);
 8001ce4:	f003 b912 	b.w	8004f0c <lv_obj_align>
 8001ce8:	08025888 	.word	0x08025888
 8001cec:	3e19999a 	.word	0x3e19999a
 8001cf0:	3f3851ec 	.word	0x3f3851ec
 8001cf4:	3cf5c28f 	.word	0x3cf5c28f

08001cf8 <_ZN3gui11main_window20create_search_buttonEv>:
	keyboard = lv_keyboard_create(screen);
	lv_keyboard_set_textarea(keyboard, text_input);
}

void main_window::create_search_button()
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b086      	sub	sp, #24
	lv_style_t button_style;

	search_button = lv_btn_create(screen);
 8001cfe:	6840      	ldr	r0, [r0, #4]
	lv_obj_set_size(search_button, screen_width*0.20f, screen_height*0.15f);
	lv_obj_align_to(search_button, text_input, LV_ALIGN_OUT_RIGHT_MID, 10, 0);
 8001d00:	2500      	movs	r5, #0
	search_button = lv_btn_create(screen);
 8001d02:	f019 f84d 	bl	801ada0 <lv_btn_create>
	lv_obj_set_size(search_button, screen_width*0.20f, screen_height*0.15f);
 8001d06:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001d0a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8001d94 <_ZN3gui11main_window20create_search_buttonEv+0x9c>
 8001d0e:	ee07 3a10 	vmov	s14, r3
 8001d12:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001d16:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001d98 <_ZN3gui11main_window20create_search_buttonEv+0xa0>
 8001d1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	search_button = lv_btn_create(screen);
 8001d1e:	60e0      	str	r0, [r4, #12]
	lv_obj_set_size(search_button, screen_width*0.20f, screen_height*0.15f);
 8001d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001d30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d34:	ee17 3a10 	vmov	r3, s14
 8001d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	ee17 3a90 	vmov	r3, s15
 8001d42:	b219      	sxth	r1, r3
 8001d44:	f003 f826 	bl	8004d94 <lv_obj_set_size>
	lv_obj_align_to(search_button, text_input, LV_ALIGN_OUT_RIGHT_MID, 10, 0);
 8001d48:	230a      	movs	r3, #10
 8001d4a:	2214      	movs	r2, #20
 8001d4c:	9500      	str	r5, [sp, #0]
 8001d4e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8001d52:	f003 ff13 	bl	8005b7c <lv_obj_align_to>

	lv_obj_t* label = lv_label_create(search_button);
 8001d56:	68e0      	ldr	r0, [r4, #12]
 8001d58:	f01b fffe 	bl	801dd58 <lv_label_create>
 8001d5c:	4606      	mov	r6, r0
	lv_label_set_text(label, "Search");
 8001d5e:	490f      	ldr	r1, [pc, #60]	; (8001d9c <_ZN3gui11main_window20create_search_buttonEv+0xa4>)
 8001d60:	f01c f806 	bl	801dd70 <lv_label_set_text>
 * @param obj       pointer to an object to align
 * @note            if the parent size changes `obj` needs to be aligned manually again
 */
static inline void lv_obj_center(struct _lv_obj_t * obj)
{
    lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 8001d64:	462b      	mov	r3, r5
 8001d66:	462a      	mov	r2, r5
 8001d68:	2109      	movs	r1, #9
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	f003 f8ce 	bl	8004f0c <lv_obj_align>
	lv_obj_center(label);

	lv_style_init(&button_style);
 8001d70:	a804      	add	r0, sp, #16
 8001d72:	f016 fbe6 	bl	8018542 <lv_style_init>
static inline void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8001d76:	a804      	add	r0, sp, #16
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	2120      	movs	r1, #32
    lv_style_value_t v = {
 8001d7e:	f8ad 5008 	strh.w	r5, [sp, #8]
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8001d82:	f016 fd06 	bl	8018792 <lv_style_set_prop>
	lv_style_set_bg_color(&button_style, lv_color_white());
	lv_obj_add_style(search_button, &button_style, 0);
 8001d86:	462a      	mov	r2, r5
 8001d88:	a904      	add	r1, sp, #16
 8001d8a:	68e0      	ldr	r0, [r4, #12]
 8001d8c:	f005 f96e 	bl	800706c <lv_obj_add_style>
}
 8001d90:	b006      	add	sp, #24
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	3e19999a 	.word	0x3e19999a
 8001d98:	3e4ccccd 	.word	0x3e4ccccd
 8001d9c:	08025897 	.word	0x08025897

08001da0 <_ZN3gui11main_window16create_file_listEv>:
	lv_obj_align_to(page_temp, screen, LV_FLEX_ALIGN_CENTER, 0, screen_height*0.20f);

}

void main_window::create_file_list()
{
 8001da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001da2:	4604      	mov	r4, r0
	file_list = lv_list_create(screen);
 8001da4:	6840      	ldr	r0, [r0, #4]
 8001da6:	f013 fbe7 	bl	8015578 <lv_list_create>

	lv_obj_set_size(file_list, screen_width*0.92f+10.0f, screen_height*0.75f);
 8001daa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dae:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001db2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001e74 <_ZN3gui11main_window16create_file_listEv+0xd4>
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	file_list = lv_list_create(screen);
 8001dbe:	6160      	str	r0, [r4, #20]
	lv_obj_set_size(file_list, screen_width*0.92f+10.0f, screen_height*0.75f);
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	lv_obj_align_to(file_list, screen, LV_FLEX_ALIGN_CENTER, 0, screen_height*0.20f);

	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image1");
 8001dc4:	4d2c      	ldr	r5, [pc, #176]	; (8001e78 <_ZN3gui11main_window16create_file_listEv+0xd8>)
	lv_obj_set_size(file_list, screen_width*0.92f+10.0f, screen_height*0.75f);
 8001dc6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dda:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de2:	ee17 3a90 	vmov	r3, s15
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	ee17 3a10 	vmov	r3, s14
 8001dec:	b219      	sxth	r1, r3
 8001dee:	f002 ffd1 	bl	8004d94 <lv_obj_set_size>
	lv_obj_align_to(file_list, screen, LV_FLEX_ALIGN_CENTER, 0, screen_height*0.20f);
 8001df2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001df6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001e7c <_ZN3gui11main_window16create_file_listEv+0xdc>
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	6861      	ldr	r1, [r4, #4]
 8001e02:	6960      	ldr	r0, [r4, #20]
 8001e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e10:	ee17 3a90 	vmov	r3, s15
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f003 feaf 	bl	8005b7c <lv_obj_align_to>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image1");
 8001e1e:	4629      	mov	r1, r5
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <_ZN3gui11main_window16create_file_listEv+0xe0>)
 8001e22:	6960      	ldr	r0, [r4, #20]
 8001e24:	f013 fbb8 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image2");
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <_ZN3gui11main_window16create_file_listEv+0xe4>)
 8001e2c:	6960      	ldr	r0, [r4, #20]
 8001e2e:	f013 fbb3 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image3");
 8001e32:	4629      	mov	r1, r5
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <_ZN3gui11main_window16create_file_listEv+0xe8>)
 8001e36:	6960      	ldr	r0, [r4, #20]
 8001e38:	f013 fbae 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image4");
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <_ZN3gui11main_window16create_file_listEv+0xec>)
 8001e40:	6960      	ldr	r0, [r4, #20]
 8001e42:	f013 fba9 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image5");
 8001e46:	4629      	mov	r1, r5
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <_ZN3gui11main_window16create_file_listEv+0xf0>)
 8001e4a:	6960      	ldr	r0, [r4, #20]
 8001e4c:	f013 fba4 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image6");
 8001e50:	4629      	mov	r1, r5
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <_ZN3gui11main_window16create_file_listEv+0xf4>)
 8001e54:	6960      	ldr	r0, [r4, #20]
 8001e56:	f013 fb9f 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image7");
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <_ZN3gui11main_window16create_file_listEv+0xf8>)
 8001e5e:	6960      	ldr	r0, [r4, #20]
 8001e60:	f013 fb9a 	bl	8015598 <lv_list_add_btn>
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image8");
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <_ZN3gui11main_window16create_file_listEv+0xfc>)
 8001e66:	4629      	mov	r1, r5
 8001e68:	6960      	ldr	r0, [r4, #20]

}
 8001e6a:	b003      	add	sp, #12
 8001e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lv_list_add_btn(file_list, LV_SYMBOL_FILE, "image8");
 8001e70:	f013 bb92 	b.w	8015598 <lv_list_add_btn>
 8001e74:	3f6b851f 	.word	0x3f6b851f
 8001e78:	080258a5 	.word	0x080258a5
 8001e7c:	3e4ccccd 	.word	0x3e4ccccd
 8001e80:	0802589e 	.word	0x0802589e
 8001e84:	080258a9 	.word	0x080258a9
 8001e88:	080258b0 	.word	0x080258b0
 8001e8c:	080258b7 	.word	0x080258b7
 8001e90:	080258be 	.word	0x080258be
 8001e94:	080258c5 	.word	0x080258c5
 8001e98:	080258cc 	.word	0x080258cc
 8001e9c:	080258d3 	.word	0x080258d3

08001ea0 <_ZN3gui11main_windowC1Ev>:
main_window::main_window()//:screen(lv_obj_create(NULL))
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e9c4 0000 	strd	r0, r0, [r4]
 8001eaa:	e9c4 0002 	strd	r0, r0, [r4, #8]
 8001eae:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8001eb2:	61a0      	str	r0, [r4, #24]
	screen = lv_obj_create(NULL);
 8001eb4:	f001 ffcc 	bl	8003e50 <lv_obj_create>
 8001eb8:	6060      	str	r0, [r4, #4]
	screen_width  = lv_obj_get_content_width(screen);
 8001eba:	f003 f894 	bl	8004fe6 <lv_obj_get_content_width>
 8001ebe:	8020      	strh	r0, [r4, #0]
	screen_height = lv_obj_get_content_height(screen);
 8001ec0:	6860      	ldr	r0, [r4, #4]
 8001ec2:	f003 f8aa 	bl	800501a <lv_obj_get_content_height>
 8001ec6:	8060      	strh	r0, [r4, #2]
	create_text_input();
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff febd 	bl	8001c48 <_ZN3gui11main_window17create_text_inputEv>
	create_search_button();
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff ff12 	bl	8001cf8 <_ZN3gui11main_window20create_search_buttonEv>
	create_file_list();
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff ff63 	bl	8001da0 <_ZN3gui11main_window16create_file_listEv>
}
 8001eda:	4620      	mov	r0, r4
 8001edc:	bd10      	pop	{r4, pc}

08001ede <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8001ede:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001ee0:	b910      	cbnz	r0, 8001ee8 <lv_disp_get_scr_act+0xa>
 8001ee2:	f014 fdd1 	bl	8016a88 <lv_disp_get_default>
    if(!disp) {
 8001ee6:	b100      	cbz	r0, 8001eea <lv_disp_get_scr_act+0xc>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8001ee8:	6900      	ldr	r0, [r0, #16]
}
 8001eea:	bd08      	pop	{r3, pc}

08001eec <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8001eec:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001eee:	b910      	cbnz	r0, 8001ef6 <lv_disp_get_scr_prev+0xa>
 8001ef0:	f014 fdca 	bl	8016a88 <lv_disp_get_default>
    if(!disp) {
 8001ef4:	b100      	cbz	r0, 8001ef8 <lv_disp_get_scr_prev+0xc>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8001ef6:	6940      	ldr	r0, [r0, #20]
}
 8001ef8:	bd08      	pop	{r3, pc}

08001efa <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8001efa:	b510      	push	{r4, lr}
 8001efc:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 8001efe:	f005 fe0d 	bl	8007b1c <lv_obj_get_disp>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8001f02:	b128      	cbz	r0, 8001f10 <lv_disp_load_scr+0x16>
    d->act_scr = scr;
 8001f04:	6104      	str	r4, [r0, #16]

    lv_obj_invalidate(scr);
 8001f06:	4620      	mov	r0, r4
}
 8001f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
 8001f0c:	f003 b9b4 	b.w	8005278 <lv_obj_invalidate>
}
 8001f10:	bd10      	pop	{r4, pc}

08001f12 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8001f12:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001f14:	b910      	cbnz	r0, 8001f1c <lv_disp_get_layer_top+0xa>
 8001f16:	f014 fdb7 	bl	8016a88 <lv_disp_get_default>
    if(!disp) {
 8001f1a:	b100      	cbz	r0, 8001f1e <lv_disp_get_layer_top+0xc>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8001f1c:	69c0      	ldr	r0, [r0, #28]
}
 8001f1e:	bd08      	pop	{r3, pc}

08001f20 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8001f20:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8001f22:	b910      	cbnz	r0, 8001f2a <lv_disp_get_layer_sys+0xa>
 8001f24:	f014 fdb0 	bl	8016a88 <lv_disp_get_default>
    if(!disp) {
 8001f28:	b100      	cbz	r0, 8001f2c <lv_disp_get_layer_sys+0xc>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8001f2a:	6a00      	ldr	r0, [r0, #32]
}
 8001f2c:	bd08      	pop	{r3, pc}

08001f2e <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8001f2e:	b508      	push	{r3, lr}
	if(disp == NULL) disp = lv_disp_get_default();
 8001f30:	b908      	cbnz	r0, 8001f36 <lv_disp_get_theme+0x8>
 8001f32:	f014 fda9 	bl	8016a88 <lv_disp_get_default>
    return disp->theme;
}
 8001f36:	6880      	ldr	r0, [r0, #8]
 8001f38:	bd08      	pop	{r3, pc}

08001f3a <lv_obj_event_base>:
    return res;
}


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8001f3a:	b510      	push	{r4, lr}
 8001f3c:	460c      	mov	r4, r1
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8001f3e:	b968      	cbnz	r0, 8001f5c <lv_obj_event_base+0x22>
 8001f40:	684b      	ldr	r3, [r1, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
    else base = class_p->base_class;

    /*Find a base in which Call the ancestor's event handler_cb is set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8001f44:	b160      	cbz	r0, 8001f60 <lv_obj_event_base+0x26>
 8001f46:	6903      	ldr	r3, [r0, #16]
 8001f48:	b143      	cbz	r3, 8001f5c <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
    if(base->event_cb == NULL) return LV_RES_OK;

    /*Call the actual event callback*/
    e->user_data = NULL;
 8001f4a:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8001f4c:	4621      	mov	r1, r4
    e->user_data = NULL;
 8001f4e:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8001f50:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8001f52:	7e20      	ldrb	r0, [r4, #24]
 8001f54:	43c0      	mvns	r0, r0
 8001f56:	f000 0001 	and.w	r0, r0, #1
 8001f5a:	e002      	b.n	8001f62 <lv_obj_event_base+0x28>
    while(base && base->event_cb == NULL) base = base->base_class;
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	e7f1      	b.n	8001f44 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 8001f60:	2001      	movs	r0, #1

    return res;
}
 8001f62:	bd10      	pop	{r4, pc}

08001f64 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 8001f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f68:	4605      	mov	r5, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8001f6a:	f000 faf3 	bl	8002554 <lv_indev_get_act>
    if(indev_act) {
 8001f6e:	b120      	cbz	r0, 8001f7a <event_send_core+0x16>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8001f70:	6800      	ldr	r0, [r0, #0]
 8001f72:	6883      	ldr	r3, [r0, #8]
 8001f74:	b10b      	cbz	r3, 8001f7a <event_send_core+0x16>
 8001f76:	7a29      	ldrb	r1, [r5, #8]
 8001f78:	4798      	blx	r3
    }

    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8001f7a:	686b      	ldr	r3, [r5, #4]
 8001f7c:	689e      	ldr	r6, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001f7e:	b116      	cbz	r6, 8001f86 <event_send_core+0x22>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001f80:	7eb3      	ldrb	r3, [r6, #26]
 8001f82:	b17b      	cbz	r3, 8001fa4 <event_send_core+0x40>
    return &obj->spec_attr->event_dsc[id];
 8001f84:	68f6      	ldr	r6, [r6, #12]
    lv_res_t res = LV_RES_OK;
    res = lv_obj_event_base(NULL, e);
 8001f86:	4629      	mov	r1, r5
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff ffd6 	bl	8001f3a <lv_obj_event_base>

    uint32_t i = 0;
 8001f8e:	2700      	movs	r7, #0
    res = lv_obj_event_base(NULL, e);
 8001f90:	4604      	mov	r4, r0
    return &obj->spec_attr->event_dsc[id];
 8001f92:	f04f 080c 	mov.w	r8, #12
    while(event_dsc && res == LV_RES_OK) {
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	d03e      	beq.n	8002018 <event_send_core+0xb4>
 8001f9a:	2c01      	cmp	r4, #1
 8001f9c:	d004      	beq.n	8001fa8 <event_send_core+0x44>
            if(res != LV_RES_OK) return LV_RES_INV;
        }
    }

    return res;
}
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!obj->spec_attr) return NULL;
 8001fa4:	461e      	mov	r6, r3
 8001fa6:	e7ee      	b.n	8001f86 <event_send_core+0x22>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001fa8:	6833      	ldr	r3, [r6, #0]
 8001faa:	bb03      	cbnz	r3, 8001fee <event_send_core+0x8a>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001fac:	686b      	ldr	r3, [r5, #4]
        i++;
 8001fae:	3701      	adds	r7, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001fb0:	689b      	ldr	r3, [r3, #8]
    if(!obj->spec_attr) return NULL;
 8001fb2:	bb53      	cbnz	r3, 800200a <event_send_core+0xa6>

static bool event_is_bubbled(lv_event_code_t e)
{
    switch(e) {
 8001fb4:	7a2b      	ldrb	r3, [r5, #8]
 8001fb6:	3b11      	subs	r3, #17
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b15      	cmp	r3, #21
 8001fbc:	d806      	bhi.n	8001fcc <event_send_core+0x68>
 8001fbe:	2401      	movs	r4, #1
 8001fc0:	4a18      	ldr	r2, [pc, #96]	; (8002024 <event_send_core+0xc0>)
 8001fc2:	fa04 f303 	lsl.w	r3, r4, r3
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d1e8      	bne.n	8001f9e <event_send_core+0x3a>
        if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) && e->current_target->parent) {
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	6868      	ldr	r0, [r5, #4]
 8001fd2:	f001 ffa6 	bl	8003f22 <lv_obj_has_flag>
 8001fd6:	b310      	cbz	r0, 800201e <event_send_core+0xba>
 8001fd8:	686b      	ldr	r3, [r5, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	b1fb      	cbz	r3, 800201e <event_send_core+0xba>
            e->current_target = e->current_target->parent;
 8001fde:	606b      	str	r3, [r5, #4]
            res = event_send_core(e);
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	f7ff ffbf 	bl	8001f64 <event_send_core>
            if(e->deleted) return LV_RES_INV;
 8001fe6:	1e43      	subs	r3, r0, #1
 8001fe8:	425c      	negs	r4, r3
 8001fea:	415c      	adcs	r4, r3
 8001fec:	e7d7      	b.n	8001f9e <event_send_core+0x3a>
        if(event_dsc->cb && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001fee:	7a32      	ldrb	r2, [r6, #8]
 8001ff0:	b112      	cbz	r2, 8001ff8 <event_send_core+0x94>
 8001ff2:	7a29      	ldrb	r1, [r5, #8]
 8001ff4:	4291      	cmp	r1, r2
 8001ff6:	d1d9      	bne.n	8001fac <event_send_core+0x48>
            e->user_data = event_dsc->user_data;
 8001ff8:	6872      	ldr	r2, [r6, #4]
            event_dsc->cb(e);
 8001ffa:	4628      	mov	r0, r5
            e->user_data = event_dsc->user_data;
 8001ffc:	60ea      	str	r2, [r5, #12]
            event_dsc->cb(e);
 8001ffe:	4798      	blx	r3
            if(e->deleted) return LV_RES_INV;
 8002000:	7e2b      	ldrb	r3, [r5, #24]
 8002002:	07da      	lsls	r2, r3, #31
 8002004:	d5d2      	bpl.n	8001fac <event_send_core+0x48>
 8002006:	2400      	movs	r4, #0
 8002008:	e7c9      	b.n	8001f9e <event_send_core+0x3a>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 800200a:	7e9a      	ldrb	r2, [r3, #26]
 800200c:	4297      	cmp	r7, r2
 800200e:	d2d1      	bcs.n	8001fb4 <event_send_core+0x50>
    return &obj->spec_attr->event_dsc[id];
 8002010:	68de      	ldr	r6, [r3, #12]
 8002012:	fb08 6607 	mla	r6, r8, r7, r6
 8002016:	e7be      	b.n	8001f96 <event_send_core+0x32>
    if(res == LV_RES_OK && event_is_bubbled(e->code)) {
 8002018:	2c01      	cmp	r4, #1
 800201a:	d1c0      	bne.n	8001f9e <event_send_core+0x3a>
 800201c:	e7ca      	b.n	8001fb4 <event_send_core+0x50>
    res = lv_obj_event_base(NULL, e);
 800201e:	2401      	movs	r4, #1
 8002020:	e7bd      	b.n	8001f9e <event_send_core+0x3a>
 8002022:	bf00      	nop
 8002024:	002f27ff 	.word	0x002f27ff

08002028 <lv_event_send>:
{
 8002028:	b510      	push	{r4, lr}
 800202a:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 800202c:	b1b8      	cbz	r0, 800205e <lv_event_send+0x36>
    e.deleted = 0;
 800202e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.code = event_code;
 8002032:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8002036:	2100      	movs	r1, #0
    e.prev = event_head;
 8002038:	4c0a      	ldr	r4, [pc, #40]	; (8002064 <lv_event_send+0x3c>)
    e.deleted = 0;
 800203a:	f361 0300 	bfi	r3, r1, #0, #1
    e.current_target = obj;
 800203e:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e.deleted = 0;
 8002042:	f88d 301c 	strb.w	r3, [sp, #28]
    event_head = &e;
 8002046:	a801      	add	r0, sp, #4
    e.prev = event_head;
 8002048:	6823      	ldr	r3, [r4, #0]
    event_head = &e;
 800204a:	6020      	str	r0, [r4, #0]
    e.prev = event_head;
 800204c:	9306      	str	r3, [sp, #24]
    e.param = param;
 800204e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    lv_res_t res = event_send_core(&e);
 8002052:	f7ff ff87 	bl	8001f64 <event_send_core>
    event_head = e.prev;
 8002056:	9b06      	ldr	r3, [sp, #24]
 8002058:	6023      	str	r3, [r4, #0]
}
 800205a:	b008      	add	sp, #32
 800205c:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 800205e:	2001      	movs	r0, #1
 8002060:	e7fb      	b.n	800205a <lv_event_send+0x32>
 8002062:	bf00      	nop
 8002064:	20002988 	.word	0x20002988

08002068 <lv_event_get_target>:
}
 8002068:	6800      	ldr	r0, [r0, #0]
 800206a:	4770      	bx	lr

0800206c <lv_event_get_code>:
}
 800206c:	7a00      	ldrb	r0, [r0, #8]
 800206e:	4770      	bx	lr

08002070 <lv_event_get_param>:
}
 8002070:	6900      	ldr	r0, [r0, #16]
 8002072:	4770      	bx	lr

08002074 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_lv_event_mark_deleted+0x20>)
 8002076:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8002078:	b903      	cbnz	r3, 800207c <_lv_event_mark_deleted+0x8>
}
 800207a:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4282      	cmp	r2, r0
 8002080:	d002      	beq.n	8002088 <_lv_event_mark_deleted+0x14>
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4282      	cmp	r2, r0
 8002086:	d103      	bne.n	8002090 <_lv_event_mark_deleted+0x1c>
 8002088:	7e1a      	ldrb	r2, [r3, #24]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	e7f1      	b.n	8002078 <_lv_event_mark_deleted+0x4>
 8002094:	20002988 	.word	0x20002988

08002098 <lv_obj_add_event_cb>:
{
 8002098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800209c:	4605      	mov	r5, r0
 800209e:	4617      	mov	r7, r2
 80020a0:	4698      	mov	r8, r3
 80020a2:	460e      	mov	r6, r1
    lv_obj_allocate_spec_attr(obj);
 80020a4:	f002 fa0a 	bl	80044bc <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 80020a8:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80020ac:	f899 401a 	ldrb.w	r4, [r9, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 80020b0:	f8d9 000c 	ldr.w	r0, [r9, #12]
    obj->spec_attr->event_dsc_cnt++;
 80020b4:	3401      	adds	r4, #1
 80020b6:	b2e4      	uxtb	r4, r4
 80020b8:	f889 401a 	strb.w	r4, [r9, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 80020bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80020c0:	00a1      	lsls	r1, r4, #2
 80020c2:	f015 fdbf 	bl	8017c44 <lv_mem_realloc>
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 80020c6:	68aa      	ldr	r2, [r5, #8]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc, obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 80020c8:	f8c9 000c 	str.w	r0, [r9, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 80020cc:	68d3      	ldr	r3, [r2, #12]
 80020ce:	b903      	cbnz	r3, 80020d2 <lv_obj_add_event_cb+0x3a>
 80020d0:	e7fe      	b.n	80020d0 <lv_obj_add_event_cb+0x38>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 80020d2:	7e91      	ldrb	r1, [r2, #26]
 80020d4:	240c      	movs	r4, #12
 80020d6:	f06f 020b 	mvn.w	r2, #11
 80020da:	fb14 2401 	smlabb	r4, r4, r1, r2
 80020de:	1918      	adds	r0, r3, r4
 80020e0:	511e      	str	r6, [r3, r4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 80020e2:	7207      	strb	r7, [r0, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 80020e4:	f8c0 8004 	str.w	r8, [r0, #4]
}
 80020e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020ec <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80020ec:	7a03      	ldrb	r3, [r0, #8]
 80020ee:	2b13      	cmp	r3, #19
 80020f0:	d106      	bne.n	8002100 <lv_event_set_ext_draw_size+0x14>
    return e->param;
 80020f2:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 80020f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80020f8:	4299      	cmp	r1, r3
 80020fa:	bfb8      	it	lt
 80020fc:	4619      	movlt	r1, r3
 80020fe:	8011      	strh	r1, [r2, #0]
}
 8002100:	4770      	bx	lr

08002102 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8002102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
 8002104:	2600      	movs	r6, #0
{
 8002106:	4607      	mov	r7, r0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8002108:	2000      	movs	r0, #0
 800210a:	f014 fd3b 	bl	8016b84 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 800210e:	4635      	mov	r5, r6
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8002110:	4604      	mov	r4, r0
    while(indev) {
 8002112:	b934      	cbnz	r4, 8002122 <get_indev+0x20>
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
    }

    if(indev_encoder) return indev_encoder;
 8002114:	b9bd      	cbnz	r5, 8002146 <get_indev+0x44>
    if(indev_group) return indev_group;
 8002116:	b9c6      	cbnz	r6, 800214a <get_indev+0x48>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8002118:	4630      	mov	r0, r6
}
 800211a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return lv_indev_get_next(NULL);
 800211e:	f014 bd31 	b.w	8016b84 <lv_indev_get_next>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8002122:	4620      	mov	r0, r4
 8002124:	f000 fa1c 	bl	8002560 <lv_indev_get_type>
        if(indev->group == g) {
 8002128:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800212a:	42bb      	cmp	r3, r7
 800212c:	d105      	bne.n	800213a <get_indev+0x38>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 800212e:	2802      	cmp	r0, #2
 8002130:	d008      	beq.n	8002144 <get_indev+0x42>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8002132:	4626      	mov	r6, r4
 8002134:	2804      	cmp	r0, #4
 8002136:	bf08      	it	eq
 8002138:	4625      	moveq	r5, r4
        indev = lv_indev_get_next(indev);
 800213a:	4620      	mov	r0, r4
 800213c:	f014 fd22 	bl	8016b84 <lv_indev_get_next>
 8002140:	4604      	mov	r4, r0
 8002142:	e7e6      	b.n	8002112 <get_indev+0x10>
 8002144:	4625      	mov	r5, r4
}
 8002146:	4628      	mov	r0, r5
 8002148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800214a:	4635      	mov	r5, r6
 800214c:	e7fb      	b.n	8002146 <get_indev+0x44>

0800214e <focus_next_core.part.0>:
static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 800214e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002152:	4681      	mov	r9, r0
 8002154:	4688      	mov	r8, r1
 8002156:	4616      	mov	r6, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 8002158:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
 800215a:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
 800215c:	2500      	movs	r5, #0
        if(obj_next == NULL) {
 800215e:	2c00      	cmp	r4, #0
 8002160:	d14d      	bne.n	80021fe <focus_next_core.part.0+0xb0>
            if(group->wrap || obj_sentinel == NULL) {
 8002162:	f899 3018 	ldrb.w	r3, [r9, #24]
 8002166:	071a      	lsls	r2, r3, #28
 8002168:	d401      	bmi.n	800216e <focus_next_core.part.0+0x20>
 800216a:	2d00      	cmp	r5, #0
 800216c:	d150      	bne.n	8002210 <focus_next_core.part.0+0xc2>
                if(!can_begin) return;
 800216e:	2f00      	cmp	r7, #0
 8002170:	d04e      	beq.n	8002210 <focus_next_core.part.0+0xc2>
                obj_next  = begin(&group->obj_ll);
 8002172:	4648      	mov	r0, r9
 8002174:	47c0      	blx	r8
 8002176:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
 8002178:	2d00      	cmp	r5, #0
 800217a:	d13c      	bne.n	80021f6 <focus_next_core.part.0+0xa8>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 800217c:	2800      	cmp	r0, #0
 800217e:	d047      	beq.n	8002210 <focus_next_core.part.0+0xc2>
 8002180:	4605      	mov	r5, r0
                can_begin = false;
 8002182:	2700      	movs	r7, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8002184:	6820      	ldr	r0, [r4, #0]
 8002186:	f001 fed9 	bl	8003f3c <lv_obj_get_state>
 800218a:	0603      	lsls	r3, r0, #24
 800218c:	d4e7      	bmi.n	800215e <focus_next_core.part.0+0x10>
        if(lv_obj_has_flag(*obj_next, LV_OBJ_FLAG_HIDDEN) == false) break;
 800218e:	2101      	movs	r1, #1
 8002190:	6820      	ldr	r0, [r4, #0]
 8002192:	f001 fec6 	bl	8003f22 <lv_obj_has_flag>
 8002196:	2800      	cmp	r0, #0
 8002198:	d1e1      	bne.n	800215e <focus_next_core.part.0+0x10>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 800219a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800219e:	42a3      	cmp	r3, r4
 80021a0:	d036      	beq.n	8002210 <focus_next_core.part.0+0xc2>
    if(group->obj_focus) {
 80021a2:	b17b      	cbz	r3, 80021c4 <focus_next_core.part.0+0x76>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 80021a4:	681d      	ldr	r5, [r3, #0]
 80021a6:	4648      	mov	r0, r9
 80021a8:	f7ff ffab 	bl	8002102 <get_indev>
 80021ac:	210f      	movs	r1, #15
 80021ae:	4602      	mov	r2, r0
 80021b0:	4628      	mov	r0, r5
 80021b2:	f7ff ff39 	bl	8002028 <lv_event_send>
        if(res != LV_RES_OK) return;
 80021b6:	2801      	cmp	r0, #1
 80021b8:	d12a      	bne.n	8002210 <focus_next_core.part.0+0xc2>
        lv_obj_invalidate(*group->obj_focus);
 80021ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f003 f85a 	bl	8005278 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 80021c4:	f8c9 400c 	str.w	r4, [r9, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 80021c8:	4648      	mov	r0, r9
 80021ca:	6824      	ldr	r4, [r4, #0]
 80021cc:	f7ff ff99 	bl	8002102 <get_indev>
 80021d0:	210e      	movs	r1, #14
 80021d2:	4602      	mov	r2, r0
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ff27 	bl	8002028 <lv_event_send>
    if(res != LV_RES_OK) return;
 80021da:	2801      	cmp	r0, #1
 80021dc:	d118      	bne.n	8002210 <focus_next_core.part.0+0xc2>
    lv_obj_invalidate(*group->obj_focus);
 80021de:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	f003 f848 	bl	8005278 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 80021e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80021ec:	b183      	cbz	r3, 8002210 <focus_next_core.part.0+0xc2>
 80021ee:	4648      	mov	r0, r9
}
 80021f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->focus_cb) group->focus_cb(group);
 80021f4:	4718      	bx	r3
                can_begin = false;
 80021f6:	2700      	movs	r7, #0
        if(obj_next == NULL) continue;
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	d1c3      	bne.n	8002184 <focus_next_core.part.0+0x36>
 80021fc:	e7b1      	b.n	8002162 <focus_next_core.part.0+0x14>
        if(obj_sentinel == NULL) {
 80021fe:	2d00      	cmp	r5, #0
 8002200:	bf08      	it	eq
 8002202:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
 8002204:	4621      	mov	r1, r4
 8002206:	4648      	mov	r0, r9
 8002208:	47b0      	blx	r6
            if(obj_next == obj_sentinel) return;
 800220a:	42a8      	cmp	r0, r5
            obj_next = move(&group->obj_ll, obj_next);
 800220c:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
 800220e:	d1f3      	bne.n	80021f8 <focus_next_core.part.0+0xaa>
}
 8002210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002214 <_lv_group_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8002214:	211c      	movs	r1, #28
 8002216:	4801      	ldr	r0, [pc, #4]	; (800221c <_lv_group_init+0x8>)
 8002218:	f015 b9ff 	b.w	801761a <_lv_ll_init>
 800221c:	2000aee8 	.word	0x2000aee8

08002220 <lv_group_get_default>:
}
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <lv_group_get_default+0x8>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000298c 	.word	0x2000298c

0800222c <lv_group_focus_next>:
    if(group->frozen) return;
 800222c:	7e03      	ldrb	r3, [r0, #24]
 800222e:	07db      	lsls	r3, r3, #31
 8002230:	d403      	bmi.n	800223a <lv_group_focus_next+0xe>
 8002232:	4a02      	ldr	r2, [pc, #8]	; (800223c <lv_group_focus_next+0x10>)
 8002234:	4902      	ldr	r1, [pc, #8]	; (8002240 <lv_group_focus_next+0x14>)
 8002236:	f7ff bf8a 	b.w	800214e <focus_next_core.part.0>
}
 800223a:	4770      	bx	lr
 800223c:	0801771b 	.word	0x0801771b
 8002240:	0801770f 	.word	0x0801770f

08002244 <lv_group_focus_prev>:
    if(group->frozen) return;
 8002244:	7e03      	ldrb	r3, [r0, #24]
 8002246:	07db      	lsls	r3, r3, #31
 8002248:	d403      	bmi.n	8002252 <lv_group_focus_prev+0xe>
 800224a:	4a02      	ldr	r2, [pc, #8]	; (8002254 <lv_group_focus_prev+0x10>)
 800224c:	4902      	ldr	r1, [pc, #8]	; (8002258 <lv_group_focus_prev+0x14>)
 800224e:	f7ff bf7e 	b.w	800214e <focus_next_core.part.0>
}
 8002252:	4770      	bx	lr
 8002254:	08017723 	.word	0x08017723
 8002258:	08017715 	.word	0x08017715

0800225c <lv_group_refocus>:
{
 800225c:	b538      	push	{r3, r4, r5, lr}
    uint8_t temp_wrap = g->wrap;
 800225e:	7e03      	ldrb	r3, [r0, #24]
{
 8002260:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8002262:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800226c:	075b      	lsls	r3, r3, #29
 800226e:	d406      	bmi.n	800227e <lv_group_refocus+0x22>
        lv_group_focus_next(g);
 8002270:	f7ff ffdc 	bl	800222c <lv_group_focus_next>
    g->wrap = temp_wrap;
 8002274:	7e23      	ldrb	r3, [r4, #24]
 8002276:	f365 03c3 	bfi	r3, r5, #3, #1
 800227a:	7623      	strb	r3, [r4, #24]
}
 800227c:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 800227e:	f7ff ffe1 	bl	8002244 <lv_group_focus_prev>
 8002282:	e7f7      	b.n	8002274 <lv_group_refocus+0x18>

08002284 <lv_group_add_obj>:
{
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	460c      	mov	r4, r1
    if(group == NULL) return;
 8002288:	4605      	mov	r5, r0
 800228a:	b378      	cbz	r0, 80022ec <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800228c:	f015 fa3f 	bl	801770e <_lv_ll_get_head>
 8002290:	b9c8      	cbnz	r0, 80022c6 <lv_group_add_obj+0x42>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8002292:	4620      	mov	r0, r4
 8002294:	f001 fe54 	bl	8003f40 <lv_obj_get_group>
    if(group_cur) {
 8002298:	b140      	cbz	r0, 80022ac <lv_group_add_obj+0x28>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 800229a:	68a3      	ldr	r3, [r4, #8]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	b153      	cbz	r3, 80022b6 <lv_group_add_obj+0x32>
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	42a3      	cmp	r3, r4
 80022a6:	d106      	bne.n	80022b6 <lv_group_add_obj+0x32>
            lv_group_refocus(group_cur);
 80022a8:	f7ff ffd8 	bl	800225c <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 80022ac:	68a3      	ldr	r3, [r4, #8]
 80022ae:	b913      	cbnz	r3, 80022b6 <lv_group_add_obj+0x32>
 80022b0:	4620      	mov	r0, r4
 80022b2:	f002 f903 	bl	80044bc <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 80022b6:	68a3      	ldr	r3, [r4, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80022b8:	4628      	mov	r0, r5
    obj->spec_attr->group_p = group;
 80022ba:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 80022bc:	f015 f9d0 	bl	8017660 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 80022c0:	4606      	mov	r6, r0
 80022c2:	b940      	cbnz	r0, 80022d6 <lv_group_add_obj+0x52>
 80022c4:	e7fe      	b.n	80022c4 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
 80022c6:	6803      	ldr	r3, [r0, #0]
 80022c8:	42a3      	cmp	r3, r4
 80022ca:	d00f      	beq.n	80022ec <lv_group_add_obj+0x68>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80022cc:	4601      	mov	r1, r0
 80022ce:	4628      	mov	r0, r5
 80022d0:	f015 fa23 	bl	801771a <_lv_ll_get_next>
 80022d4:	e7dc      	b.n	8002290 <lv_group_add_obj+0xc>
    *next = obj;
 80022d6:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80022d8:	4628      	mov	r0, r5
 80022da:	f015 fa18 	bl	801770e <_lv_ll_get_head>
 80022de:	4286      	cmp	r6, r0
 80022e0:	d104      	bne.n	80022ec <lv_group_add_obj+0x68>
        lv_group_refocus(group);
 80022e2:	4628      	mov	r0, r5
}
 80022e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_group_refocus(group);
 80022e8:	f7ff bfb8 	b.w	800225c <lv_group_refocus>
}
 80022ec:	bd70      	pop	{r4, r5, r6, pc}

080022ee <lv_group_remove_obj>:
{
 80022ee:	b570      	push	{r4, r5, r6, lr}
 80022f0:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 80022f2:	f001 fe25 	bl	8003f40 <lv_obj_get_group>
    if(g == NULL) return;
 80022f6:	4604      	mov	r4, r0
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d038      	beq.n	800236e <lv_group_remove_obj+0x80>
    if(g->obj_focus && *g->obj_focus == obj) {
 80022fc:	68c3      	ldr	r3, [r0, #12]
 80022fe:	b1e3      	cbz	r3, 800233a <lv_group_remove_obj+0x4c>
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	42b3      	cmp	r3, r6
 8002304:	d119      	bne.n	800233a <lv_group_remove_obj+0x4c>
        if(g->frozen) g->frozen = 0;
 8002306:	7e03      	ldrb	r3, [r0, #24]
 8002308:	07da      	lsls	r2, r3, #31
 800230a:	bf44      	itt	mi
 800230c:	f36f 0300 	bfcmi	r3, #0, #1
 8002310:	7603      	strbmi	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8002312:	f015 f9fc 	bl	801770e <_lv_ll_get_head>
 8002316:	68e3      	ldr	r3, [r4, #12]
 8002318:	4283      	cmp	r3, r0
 800231a:	d129      	bne.n	8002370 <lv_group_remove_obj+0x82>
 800231c:	4620      	mov	r0, r4
 800231e:	f015 f9f9 	bl	8017714 <_lv_ll_get_tail>
 8002322:	68e3      	ldr	r3, [r4, #12]
 8002324:	4298      	cmp	r0, r3
 8002326:	d123      	bne.n	8002370 <lv_group_remove_obj+0x82>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8002328:	6805      	ldr	r5, [r0, #0]
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff fee9 	bl	8002102 <get_indev>
 8002330:	210f      	movs	r1, #15
 8002332:	4602      	mov	r2, r0
 8002334:	4628      	mov	r0, r5
 8002336:	f7ff fe77 	bl	8002028 <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 800233a:	68e3      	ldr	r3, [r4, #12]
 800233c:	b123      	cbz	r3, 8002348 <lv_group_remove_obj+0x5a>
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	42b3      	cmp	r3, r6
        g->obj_focus = NULL;
 8002342:	bf04      	itt	eq
 8002344:	2300      	moveq	r3, #0
 8002346:	60e3      	streq	r3, [r4, #12]
    _LV_LL_READ(&g->obj_ll, i) {
 8002348:	4620      	mov	r0, r4
 800234a:	f015 f9e0 	bl	801770e <_lv_ll_get_head>
 800234e:	4605      	mov	r5, r0
 8002350:	b168      	cbz	r0, 800236e <lv_group_remove_obj+0x80>
        if(*i == obj) {
 8002352:	682b      	ldr	r3, [r5, #0]
            _lv_ll_remove(&g->obj_ll, i);
 8002354:	4629      	mov	r1, r5
 8002356:	4620      	mov	r0, r4
        if(*i == obj) {
 8002358:	42b3      	cmp	r3, r6
 800235a:	d10d      	bne.n	8002378 <lv_group_remove_obj+0x8a>
            _lv_ll_remove(&g->obj_ll, i);
 800235c:	f015 f99c 	bl	8017698 <_lv_ll_remove>
            lv_mem_free(i);
 8002360:	4628      	mov	r0, r5
 8002362:	f015 fad7 	bl	8017914 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8002366:	68b3      	ldr	r3, [r6, #8]
 8002368:	b10b      	cbz	r3, 800236e <lv_group_remove_obj+0x80>
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(g);
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff ff73 	bl	800225c <lv_group_refocus>
 8002376:	e7e0      	b.n	800233a <lv_group_remove_obj+0x4c>
    _LV_LL_READ(&g->obj_ll, i) {
 8002378:	f015 f9cf 	bl	801771a <_lv_ll_get_next>
 800237c:	e7e7      	b.n	800234e <lv_group_remove_obj+0x60>

0800237e <lv_group_get_focused>:
    if(!group) return NULL;
 800237e:	b110      	cbz	r0, 8002386 <lv_group_get_focused+0x8>
    if(group->obj_focus == NULL) return NULL;
 8002380:	68c0      	ldr	r0, [r0, #12]
 8002382:	b100      	cbz	r0, 8002386 <lv_group_get_focused+0x8>
    return *group->obj_focus;
 8002384:	6800      	ldr	r0, [r0, #0]
}
 8002386:	4770      	bx	lr

08002388 <lv_group_send_data>:
{
 8002388:	b507      	push	{r0, r1, r2, lr}
 800238a:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 800238c:	f7ff fff7 	bl	800237e <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8002390:	b130      	cbz	r0, 80023a0 <lv_group_send_data+0x18>
    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8002392:	aa01      	add	r2, sp, #4
 8002394:	210d      	movs	r1, #13
 8002396:	f7ff fe47 	bl	8002028 <lv_event_send>
}
 800239a:	b003      	add	sp, #12
 800239c:	f85d fb04 	ldr.w	pc, [sp], #4
    if(act == NULL) return LV_RES_OK;
 80023a0:	2001      	movs	r0, #1
 80023a2:	e7fa      	b.n	800239a <lv_group_send_data+0x12>

080023a4 <lv_group_set_editing>:
{
 80023a4:	b538      	push	{r3, r4, r5, lr}
    if(group == NULL) return;
 80023a6:	4603      	mov	r3, r0
 80023a8:	b1e0      	cbz	r0, 80023e4 <lv_group_set_editing+0x40>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80023aa:	7e02      	ldrb	r2, [r0, #24]
 80023ac:	f3c2 0440 	ubfx	r4, r2, #1, #1
 80023b0:	428c      	cmp	r4, r1
 80023b2:	d017      	beq.n	80023e4 <lv_group_set_editing+0x40>
    group->editing     = en_val;
 80023b4:	f361 0241 	bfi	r2, r1, #1, #1
 80023b8:	7602      	strb	r2, [r0, #24]
    lv_obj_t * focused = lv_group_get_focused(group);
 80023ba:	f7ff ffe0 	bl	800237e <lv_group_get_focused>
    if(focused) {
 80023be:	4604      	mov	r4, r0
 80023c0:	b180      	cbz	r0, 80023e4 <lv_group_set_editing+0x40>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	4618      	mov	r0, r3
 80023c6:	6815      	ldr	r5, [r2, #0]
 80023c8:	f7ff fe9b 	bl	8002102 <get_indev>
 80023cc:	210e      	movs	r1, #14
 80023ce:	4602      	mov	r2, r0
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7ff fe29 	bl	8002028 <lv_event_send>
        if(res != LV_RES_OK) return;
 80023d6:	2801      	cmp	r0, #1
 80023d8:	d104      	bne.n	80023e4 <lv_group_set_editing+0x40>
        lv_obj_invalidate(focused);
 80023da:	4620      	mov	r0, r4
}
 80023dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_obj_invalidate(focused);
 80023e0:	f002 bf4a 	b.w	8005278 <lv_obj_invalidate>
}
 80023e4:	bd38      	pop	{r3, r4, r5, pc}

080023e6 <lv_group_focus_obj>:
{
 80023e6:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return;
 80023e8:	4606      	mov	r6, r0
 80023ea:	b170      	cbz	r0, 800240a <lv_group_focus_obj+0x24>
    lv_group_t * g = lv_obj_get_group(obj);
 80023ec:	f001 fda8 	bl	8003f40 <lv_obj_get_group>
    if(g == NULL) return;
 80023f0:	4604      	mov	r4, r0
 80023f2:	b150      	cbz	r0, 800240a <lv_group_focus_obj+0x24>
    if(g->frozen != 0) return;
 80023f4:	7e01      	ldrb	r1, [r0, #24]
 80023f6:	f011 0101 	ands.w	r1, r1, #1
 80023fa:	d106      	bne.n	800240a <lv_group_focus_obj+0x24>
    lv_group_set_editing(g, false);
 80023fc:	f7ff ffd2 	bl	80023a4 <lv_group_set_editing>
    _LV_LL_READ(&g->obj_ll, i) {
 8002400:	4620      	mov	r0, r4
 8002402:	f015 f984 	bl	801770e <_lv_ll_get_head>
 8002406:	4605      	mov	r5, r0
 8002408:	b900      	cbnz	r0, 800240c <lv_group_focus_obj+0x26>
}
 800240a:	bd70      	pop	{r4, r5, r6, pc}
        if(*i == obj) {
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	42b3      	cmp	r3, r6
 8002410:	d127      	bne.n	8002462 <lv_group_focus_obj+0x7c>
            if(g->obj_focus != NULL) {
 8002412:	68e3      	ldr	r3, [r4, #12]
 8002414:	b173      	cbz	r3, 8002434 <lv_group_focus_obj+0x4e>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8002416:	681e      	ldr	r6, [r3, #0]
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff fe72 	bl	8002102 <get_indev>
 800241e:	210f      	movs	r1, #15
 8002420:	4602      	mov	r2, r0
 8002422:	4630      	mov	r0, r6
 8002424:	f7ff fe00 	bl	8002028 <lv_event_send>
                if(res != LV_RES_OK) return;
 8002428:	2801      	cmp	r0, #1
 800242a:	d1ee      	bne.n	800240a <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 800242c:	68e3      	ldr	r3, [r4, #12]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	f002 ff22 	bl	8005278 <lv_obj_invalidate>
                if(g->focus_cb) g->focus_cb(g);
 8002434:	6923      	ldr	r3, [r4, #16]
            g->obj_focus = i;
 8002436:	60e5      	str	r5, [r4, #12]
                if(g->focus_cb) g->focus_cb(g);
 8002438:	b10b      	cbz	r3, 800243e <lv_group_focus_obj+0x58>
 800243a:	4620      	mov	r0, r4
 800243c:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 800243e:	68e3      	ldr	r3, [r4, #12]
 8002440:	4620      	mov	r0, r4
 8002442:	681d      	ldr	r5, [r3, #0]
 8002444:	f7ff fe5d 	bl	8002102 <get_indev>
 8002448:	210e      	movs	r1, #14
 800244a:	4602      	mov	r2, r0
 800244c:	4628      	mov	r0, r5
 800244e:	f7ff fdeb 	bl	8002028 <lv_event_send>
                if(res != LV_RES_OK) return;
 8002452:	2801      	cmp	r0, #1
 8002454:	d1d9      	bne.n	800240a <lv_group_focus_obj+0x24>
                lv_obj_invalidate(*g->obj_focus);
 8002456:	68e3      	ldr	r3, [r4, #12]
}
 8002458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                lv_obj_invalidate(*g->obj_focus);
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	f002 bf0b 	b.w	8005278 <lv_obj_invalidate>
    _LV_LL_READ(&g->obj_ll, i) {
 8002462:	4629      	mov	r1, r5
 8002464:	4620      	mov	r0, r4
 8002466:	f015 f958 	bl	801771a <_lv_ll_get_next>
 800246a:	e7cc      	b.n	8002406 <lv_group_focus_obj+0x20>

0800246c <lv_group_get_editing>:
    if(!group) return false;
 800246c:	b110      	cbz	r0, 8002474 <lv_group_get_editing+0x8>
    return group->editing ? true : false;
 800246e:	7e00      	ldrb	r0, [r0, #24]
 8002470:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
 8002474:	4770      	bx	lr

08002476 <lv_group_get_obj_count>:
    return _lv_ll_get_len(&group->obj_ll);
 8002476:	f015 b957 	b.w	8017728 <_lv_ll_get_len>
	...

0800247c <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 800247c:	7840      	ldrb	r0, [r0, #1]
 800247e:	0783      	lsls	r3, r0, #30
        indev_obj_act = NULL;
    }

    return proc->reset_query ? true : false;
}
 8002480:	f3c0 0040 	ubfx	r0, r0, #1, #1
        indev_obj_act = NULL;
 8002484:	bf42      	ittt	mi
 8002486:	4b02      	ldrmi	r3, [pc, #8]	; (8002490 <indev_reset_check+0x14>)
 8002488:	2200      	movmi	r2, #0
 800248a:	601a      	strmi	r2, [r3, #0]
}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20002994 	.word	0x20002994

08002494 <indev_proc_release>:
{
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->wait_until_release != 0) {
 8002496:	7843      	ldrb	r3, [r0, #1]
{
 8002498:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 800249a:	071a      	lsls	r2, r3, #28
 800249c:	d507      	bpl.n	80024ae <indev_proc_release+0x1a>
        proc->types.pointer.act_obj  = NULL;
 800249e:	2200      	movs	r2, #0
        proc->wait_until_release     = 0;
 80024a0:	f362 03c3 	bfi	r3, r2, #3, #1
        proc->types.pointer.last_obj = NULL;
 80024a4:	e9c0 2208 	strd	r2, r2, [r0, #32]
        proc->longpr_rep_timestamp   = 0;
 80024a8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
        proc->wait_until_release     = 0;
 80024ac:	7043      	strb	r3, [r0, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 80024ae:	6a20      	ldr	r0, [r4, #32]
 80024b0:	4d19      	ldr	r5, [pc, #100]	; (8002518 <indev_proc_release+0x84>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80024b2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    indev_obj_act = proc->types.pointer.act_obj;
 80024b4:	6028      	str	r0, [r5, #0]
    if(indev_obj_act) {
 80024b6:	b168      	cbz	r0, 80024d4 <indev_proc_release+0x40>
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80024b8:	4e18      	ldr	r6, [pc, #96]	; (800251c <indev_proc_release+0x88>)
 80024ba:	2108      	movs	r1, #8
 80024bc:	6832      	ldr	r2, [r6, #0]
 80024be:	f7ff fdb3 	bl	8002028 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7ff ffda 	bl	800247c <indev_reset_check>
 80024c8:	b9d0      	cbnz	r0, 8002500 <indev_proc_release+0x6c>
        if(scroll_obj == NULL) {
 80024ca:	b167      	cbz	r7, 80024e6 <indev_proc_release+0x52>
        proc->types.pointer.act_obj = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	6223      	str	r3, [r4, #32]
        proc->longpr_rep_timestamp  = 0;
 80024d0:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
    if(scroll_obj) {
 80024d4:	b1a7      	cbz	r7, 8002500 <indev_proc_release+0x6c>
        _lv_indev_scroll_throw_handler(proc);
 80024d6:	4620      	mov	r0, r4
 80024d8:	f001 fa22 	bl	8003920 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 80024dc:	4620      	mov	r0, r4
}
 80024de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        if(indev_reset_check(proc)) return;
 80024e2:	f7ff bfcb 	b.w	800247c <indev_reset_check>
            if(proc->long_pr_sent == 0) {
 80024e6:	7863      	ldrb	r3, [r4, #1]
 80024e8:	07db      	lsls	r3, r3, #31
 80024ea:	d50a      	bpl.n	8002502 <indev_proc_release+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 80024ec:	6832      	ldr	r2, [r6, #0]
 80024ee:	2107      	movs	r1, #7
 80024f0:	6828      	ldr	r0, [r5, #0]
 80024f2:	f7ff fd99 	bl	8002028 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7ff ffc0 	bl	800247c <indev_reset_check>
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d0e5      	beq.n	80024cc <indev_proc_release+0x38>
}
 8002500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002502:	6832      	ldr	r2, [r6, #0]
 8002504:	2104      	movs	r1, #4
 8002506:	6828      	ldr	r0, [r5, #0]
 8002508:	f7ff fd8e 	bl	8002028 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff ffb5 	bl	800247c <indev_reset_check>
 8002512:	2800      	cmp	r0, #0
 8002514:	d0ea      	beq.n	80024ec <indev_proc_release+0x58>
 8002516:	e7f3      	b.n	8002500 <indev_proc_release+0x6c>
 8002518:	20002994 	.word	0x20002994
 800251c:	20002990 	.word	0x20002990

08002520 <indev_proc_reset_query_handler>:
    if(indev->proc.reset_query) {
 8002520:	7942      	ldrb	r2, [r0, #5]
 8002522:	0793      	lsls	r3, r2, #30
 8002524:	d513      	bpl.n	800254e <indev_proc_reset_query_handler+0x2e>
        indev->proc.types.pointer.act_obj           = NULL;
 8002526:	2300      	movs	r3, #0
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002528:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
        indev->proc.long_pr_sent                    = 0;
 800252c:	f022 0203 	bic.w	r2, r2, #3
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002530:	f363 0103 	bfi	r1, r3, #0, #4
        indev->proc.types.pointer.scroll_obj          = NULL;
 8002534:	62c3      	str	r3, [r0, #44]	; 0x2c
        indev->proc.long_pr_sent                    = 0;
 8002536:	7142      	strb	r2, [r0, #5]
        indev_obj_act                               = NULL;
 8002538:	4a05      	ldr	r2, [pc, #20]	; (8002550 <indev_proc_reset_query_handler+0x30>)
        indev->proc.types.pointer.gesture_sum.x     = 0;
 800253a:	63c3      	str	r3, [r0, #60]	; 0x3c
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 800253c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        indev_obj_act                               = NULL;
 8002540:	6013      	str	r3, [r2, #0]
        indev->proc.types.pointer.last_obj          = NULL;
 8002542:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
        indev->proc.longpr_rep_timestamp            = 0;
 8002546:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 800254a:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 800254e:	4770      	bx	lr
 8002550:	20002994 	.word	0x20002994

08002554 <lv_indev_get_act>:
}
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <lv_indev_get_act+0x8>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20002990 	.word	0x20002990

08002560 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8002560:	b108      	cbz	r0, 8002566 <lv_indev_get_type+0x6>
    return indev->driver->type;
 8002562:	6803      	ldr	r3, [r0, #0]
 8002564:	7818      	ldrb	r0, [r3, #0]
}
 8002566:	4770      	bx	lr

08002568 <lv_indev_reset>:
{
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	460d      	mov	r5, r1
    if(indev) {
 800256c:	4604      	mov	r4, r0
 800256e:	2800      	cmp	r0, #0
 8002570:	d035      	beq.n	80025de <lv_indev_reset+0x76>
        indev->proc.reset_query = 1;
 8002572:	7943      	ldrb	r3, [r0, #5]
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <lv_indev_reset+0x8c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4283      	cmp	r3, r0
 8002580:	bf02      	ittt	eq
 8002582:	4b1d      	ldreq	r3, [pc, #116]	; (80025f8 <lv_indev_reset+0x90>)
 8002584:	2200      	moveq	r2, #0
 8002586:	601a      	streq	r2, [r3, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8002588:	b171      	cbz	r1, 80025a8 <lv_indev_reset+0x40>
 800258a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800258c:	428b      	cmp	r3, r1
 800258e:	d00b      	beq.n	80025a8 <lv_indev_reset+0x40>
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8002590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002592:	42ab      	cmp	r3, r5
 8002594:	d102      	bne.n	800259c <lv_indev_reset+0x34>
            indev->proc.types.pointer.act_obj = NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	6263      	str	r3, [r4, #36]	; 0x24
        if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 800259a:	b115      	cbz	r5, 80025a2 <lv_indev_reset+0x3a>
 800259c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800259e:	42ab      	cmp	r3, r5
 80025a0:	d101      	bne.n	80025a6 <lv_indev_reset+0x3e>
            indev->proc.types.pointer.last_obj = NULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
            indev->proc.types.pointer.last_pressed = NULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	6323      	str	r3, [r4, #48]	; 0x30
        if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	d0f2      	beq.n	8002596 <lv_indev_reset+0x2e>
 80025b0:	e7ee      	b.n	8002590 <lv_indev_reset+0x28>
            i->proc.reset_query = 1;
 80025b2:	7943      	ldrb	r3, [r0, #5]
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	7143      	strb	r3, [r0, #5]
            if((i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) &&
 80025ba:	6803      	ldr	r3, [r0, #0]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d814      	bhi.n	80025ee <lv_indev_reset+0x86>
 80025c4:	b195      	cbz	r5, 80025ec <lv_indev_reset+0x84>
               (obj == NULL || i->proc.types.pointer.last_pressed == obj)) {
 80025c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80025c8:	42ab      	cmp	r3, r5
 80025ca:	d00f      	beq.n	80025ec <lv_indev_reset+0x84>
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80025cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025ce:	42ab      	cmp	r3, r5
 80025d0:	d101      	bne.n	80025d6 <lv_indev_reset+0x6e>
                i->proc.types.pointer.act_obj = NULL;
 80025d2:	6244      	str	r4, [r0, #36]	; 0x24
            if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 80025d4:	b115      	cbz	r5, 80025dc <lv_indev_reset+0x74>
 80025d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025d8:	42ab      	cmp	r3, r5
 80025da:	d100      	bne.n	80025de <lv_indev_reset+0x76>
                i->proc.types.pointer.last_obj = NULL;
 80025dc:	6284      	str	r4, [r0, #40]	; 0x28
            i = lv_indev_get_next(i);
 80025de:	f014 fad1 	bl	8016b84 <lv_indev_get_next>
        while(i) {
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d1e5      	bne.n	80025b2 <lv_indev_reset+0x4a>
        indev_obj_act = NULL;
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <lv_indev_reset+0x90>)
 80025e8:	6018      	str	r0, [r3, #0]
}
 80025ea:	e7dc      	b.n	80025a6 <lv_indev_reset+0x3e>
                i->proc.types.pointer.last_pressed = NULL;
 80025ec:	6304      	str	r4, [r0, #48]	; 0x30
            if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	d1ec      	bne.n	80025cc <lv_indev_reset+0x64>
 80025f2:	e7ee      	b.n	80025d2 <lv_indev_reset+0x6a>
 80025f4:	20002990 	.word	0x20002990
 80025f8:	20002994 	.word	0x20002994

080025fc <lv_indev_reset_long_press>:
    indev->proc.long_pr_sent         = 0;
 80025fc:	7943      	ldrb	r3, [r0, #5]
 80025fe:	f36f 0300 	bfc	r3, #0, #1
{
 8002602:	b510      	push	{r4, lr}
 8002604:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 8002606:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 8002608:	f014 faf2 	bl	8016bf0 <lv_tick_get>
 800260c:	64a0      	str	r0, [r4, #72]	; 0x48
    indev->proc.pr_timestamp         = lv_tick_get();
 800260e:	f014 faef 	bl	8016bf0 <lv_tick_get>
 8002612:	6460      	str	r0, [r4, #68]	; 0x44
}
 8002614:	bd10      	pop	{r4, pc}

08002616 <lv_indev_get_point>:
    if(indev == NULL) {
 8002616:	b910      	cbnz	r0, 800261e <lv_indev_get_point+0x8>
        point->x = 0;
 8002618:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 800261a:	8048      	strh	r0, [r1, #2]
        return;
 800261c:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 800261e:	6803      	ldr	r3, [r0, #0]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002626:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.act_point.x;
 8002628:	bf09      	itett	eq
 800262a:	f9b0 3008 	ldrsheq.w	r3, [r0, #8]
        point->x = -1;
 800262e:	f64f 73ff 	movwne	r3, #65535	; 0xffff
        point->x = indev->proc.types.pointer.act_point.x;
 8002632:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8002634:	f9b0 300a 	ldrsheq.w	r3, [r0, #10]
        point->x = -1;
 8002638:	bf18      	it	ne
 800263a:	800b      	strhne	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800263c:	804b      	strh	r3, [r1, #2]
}
 800263e:	4770      	bx	lr

08002640 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 8002640:	b158      	cbz	r0, 800265a <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800264a:	2b01      	cmp	r3, #1
 800264c:	d104      	bne.n	8002658 <lv_indev_get_scroll_dir+0x18>
    return indev->proc.types.pointer.scroll_dir;
 800264e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8002652:	f000 000f 	and.w	r0, r0, #15
 8002656:	4770      	bx	lr
    if(indev == NULL) return false;
 8002658:	2000      	movs	r0, #0
}
 800265a:	4770      	bx	lr

0800265c <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 800265c:	b140      	cbz	r0, 8002670 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 800265e:	6803      	ldr	r3, [r0, #0]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <lv_indev_get_scroll_obj+0x12>
    return indev->proc.types.pointer.scroll_obj;
 800266a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800266c:	4770      	bx	lr
    if(indev == NULL) return NULL;
 800266e:	2000      	movs	r0, #0
}
 8002670:	4770      	bx	lr

08002672 <lv_indev_get_vect>:
    point->x = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 8002676:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 8002678:	b158      	cbz	r0, 8002692 <lv_indev_get_vect+0x20>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 800267a:	6803      	ldr	r3, [r0, #0]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8002682:	2b01      	cmp	r3, #1
        point->x = indev->proc.types.pointer.vect.x;
 8002684:	bf01      	itttt	eq
 8002686:	f9b0 3014 	ldrsheq.w	r3, [r0, #20]
 800268a:	800b      	strheq	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 800268c:	f9b0 3016 	ldrsheq.w	r3, [r0, #22]
 8002690:	804b      	strheq	r3, [r1, #2]
}
 8002692:	4770      	bx	lr

08002694 <lv_indev_wait_release>:
    if(indev == NULL)return;
 8002694:	b118      	cbz	r0, 800269e <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 8002696:	7943      	ldrb	r3, [r0, #5]
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	7143      	strb	r3, [r0, #5]
}
 800269e:	4770      	bx	lr

080026a0 <lv_indev_get_obj_act>:
}
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <lv_indev_get_obj_act+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20002994 	.word	0x20002994

080026ac <lv_indev_search_obj>:
{
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	4604      	mov	r4, r0
 80026b0:	460e      	mov	r6, r1
    if(lv_obj_hit_test(obj, point)) {
 80026b2:	f003 f804 	bl	80056be <lv_obj_hit_test>
 80026b6:	b908      	cbnz	r0, 80026bc <lv_indev_search_obj+0x10>
    lv_obj_t * found_p = NULL;
 80026b8:	2000      	movs	r0, #0
}
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
        for(i = lv_obj_get_child_cnt(obj) - 1; i >= 0; i--) {
 80026bc:	4620      	mov	r0, r4
 80026be:	f005 fa5f 	bl	8007b80 <lv_obj_get_child_cnt>
 80026c2:	1e45      	subs	r5, r0, #1
 80026c4:	2d00      	cmp	r5, #0
 80026c6:	da07      	bge.n	80026d8 <lv_indev_search_obj+0x2c>
        if(found_p == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) {
 80026c8:	2102      	movs	r1, #2
 80026ca:	4620      	mov	r0, r4
 80026cc:	f001 fc29 	bl	8003f22 <lv_obj_has_flag>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d0f1      	beq.n	80026b8 <lv_indev_search_obj+0xc>
            lv_obj_t * hidden_i = obj;
 80026d4:	4625      	mov	r5, r4
 80026d6:	e014      	b.n	8002702 <lv_indev_search_obj+0x56>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 80026d8:	4629      	mov	r1, r5
 80026da:	4620      	mov	r0, r4
 80026dc:	f005 fa41 	bl	8007b62 <lv_obj_get_child>
            found_p = lv_indev_search_obj(child, point);
 80026e0:	4631      	mov	r1, r6
 80026e2:	f7ff ffe3 	bl	80026ac <lv_indev_search_obj>
            if(found_p != NULL) break;
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d1e7      	bne.n	80026ba <lv_indev_search_obj+0xe>
        for(i = lv_obj_get_child_cnt(obj) - 1; i >= 0; i--) {
 80026ea:	3d01      	subs	r5, #1
 80026ec:	e7ea      	b.n	80026c4 <lv_indev_search_obj+0x18>
                if(lv_obj_has_flag(hidden_i, LV_OBJ_FLAG_HIDDEN) == true) break;
 80026ee:	2101      	movs	r1, #1
 80026f0:	4628      	mov	r0, r5
 80026f2:	f001 fc16 	bl	8003f22 <lv_obj_has_flag>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d1de      	bne.n	80026b8 <lv_indev_search_obj+0xc>
                hidden_i = lv_obj_get_parent(hidden_i);
 80026fa:	4628      	mov	r0, r5
 80026fc:	f005 fa2e 	bl	8007b5c <lv_obj_get_parent>
 8002700:	4605      	mov	r5, r0
            while(hidden_i != NULL) {
 8002702:	2d00      	cmp	r5, #0
 8002704:	d1f3      	bne.n	80026ee <lv_indev_search_obj+0x42>
            if(hidden_i == NULL && (lv_obj_get_state(obj) & LV_STATE_DISABLED) == false) found_p = obj;
 8002706:	4620      	mov	r0, r4
 8002708:	f001 fc18 	bl	8003f3c <lv_obj_get_state>
 800270c:	0603      	lsls	r3, r0, #24
 800270e:	d4d3      	bmi.n	80026b8 <lv_indev_search_obj+0xc>
 8002710:	4620      	mov	r0, r4
    return found_p;
 8002712:	e7d2      	b.n	80026ba <lv_indev_search_obj+0xe>

08002714 <indev_proc_press>:
{
 8002714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002718:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 800271a:	4db5      	ldr	r5, [pc, #724]	; (80029f0 <indev_proc_press+0x2dc>)
 800271c:	6a00      	ldr	r0, [r0, #32]
    if(proc->wait_until_release != 0) return;
 800271e:	7863      	ldrb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 8002720:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 8002722:	071a      	lsls	r2, r3, #28
 8002724:	d428      	bmi.n	8002778 <indev_proc_press+0x64>
    lv_disp_t * disp = indev_act->driver->disp;
 8002726:	4eb3      	ldr	r6, [pc, #716]	; (80029f4 <indev_proc_press+0x2e0>)
 8002728:	6833      	ldr	r3, [r6, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691f      	ldr	r7, [r3, #16]
    if(indev_obj_act == NULL) {
 800272e:	bb28      	cbnz	r0, 800277c <indev_proc_press+0x68>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002730:	f104 0804 	add.w	r8, r4, #4
 8002734:	4638      	mov	r0, r7
 8002736:	f7ff fbf3 	bl	8001f20 <lv_disp_get_layer_sys>
 800273a:	4641      	mov	r1, r8
 800273c:	f7ff ffb6 	bl	80026ac <lv_indev_search_obj>
 8002740:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002742:	b970      	cbnz	r0, 8002762 <indev_proc_press+0x4e>
 8002744:	4638      	mov	r0, r7
 8002746:	f7ff fbe4 	bl	8001f12 <lv_disp_get_layer_top>
 800274a:	4641      	mov	r1, r8
 800274c:	f7ff ffae 	bl	80026ac <lv_indev_search_obj>
 8002750:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002752:	b930      	cbnz	r0, 8002762 <indev_proc_press+0x4e>
 8002754:	4638      	mov	r0, r7
 8002756:	f7ff fbc2 	bl	8001ede <lv_disp_get_scr_act>
 800275a:	4641      	mov	r1, r8
 800275c:	f7ff ffa6 	bl	80026ac <lv_indev_search_obj>
 8002760:	6028      	str	r0, [r5, #0]
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002764:	b173      	cbz	r3, 8002784 <indev_proc_press+0x70>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8002766:	2300      	movs	r3, #0
        _lv_indev_scroll_throw_handler(proc);
 8002768:	4620      	mov	r0, r4
        proc->types.pointer.scroll_throw_vect.x = 0;
 800276a:	61a3      	str	r3, [r4, #24]
        _lv_indev_scroll_throw_handler(proc);
 800276c:	f001 f8d8 	bl	8003920 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff fe83 	bl	800247c <indev_reset_check>
 8002776:	b128      	cbz	r0, 8002784 <indev_proc_press+0x70>
}
 8002778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(proc->types.pointer.scroll_obj == NULL &&
 800277c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80d7 	beq.w	8002932 <indev_proc_press+0x21e>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002784:	6a20      	ldr	r0, [r4, #32]
 8002786:	682b      	ldr	r3, [r5, #0]
 8002788:	4298      	cmp	r0, r3
 800278a:	f040 80da 	bne.w	8002942 <indev_proc_press+0x22e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800278e:	8923      	ldrh	r3, [r4, #8]
 8002790:	88a2      	ldrh	r2, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002792:	8961      	ldrh	r1, [r4, #10]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002794:	1ad2      	subs	r2, r2, r3
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002796:	88e3      	ldrh	r3, [r4, #6]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x * 4) >> 3;
 8002798:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800279c:	1a5b      	subs	r3, r3, r1
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800279e:	b212      	sxth	r2, r2
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y * 4) >> 3;
 80027a0:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 80027a4:	b21b      	sxth	r3, r3
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 80027a6:	8222      	strh	r2, [r4, #16]
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 80027a8:	1052      	asrs	r2, r2, #1
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 80027aa:	8263      	strh	r3, [r4, #18]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 80027ac:	105b      	asrs	r3, r3, #1
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 80027ae:	eb02 0260 	add.w	r2, r2, r0, asr #1
    if(indev_obj_act) {
 80027b2:	6828      	ldr	r0, [r5, #0]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 80027b4:	eb03 0361 	add.w	r3, r3, r1, asr #1
    proc->types.pointer.scroll_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 80027b8:	8322      	strh	r2, [r4, #24]
    proc->types.pointer.scroll_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 80027ba:	8363      	strh	r3, [r4, #26]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 80027bc:	69a3      	ldr	r3, [r4, #24]
 80027be:	61e3      	str	r3, [r4, #28]
    if(indev_obj_act) {
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d0d9      	beq.n	8002778 <indev_proc_press+0x64>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 80027c4:	6832      	ldr	r2, [r6, #0]
 80027c6:	2102      	movs	r1, #2
 80027c8:	f7ff fc2e 	bl	8002028 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff fe55 	bl	800247c <indev_reset_check>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d1d0      	bne.n	8002778 <indev_proc_press+0x64>
        if(indev_act->proc.wait_until_release) return;
 80027d6:	6833      	ldr	r3, [r6, #0]
 80027d8:	795b      	ldrb	r3, [r3, #5]
 80027da:	0718      	lsls	r0, r3, #28
 80027dc:	d4cc      	bmi.n	8002778 <indev_proc_press+0x64>
        _lv_indev_scroll_handler(proc);
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 fe7e 	bl	80034e0 <_lv_indev_scroll_handler>
        if(indev_reset_check(proc)) return;
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fe49 	bl	800247c <indev_reset_check>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d1c4      	bne.n	8002778 <indev_proc_press+0x64>
    if(proc->types.pointer.scroll_obj) return;
 80027ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d159      	bne.n	80028a8 <indev_proc_press+0x194>
    if(proc->types.pointer.gesture_sent) return;
 80027f4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80027f8:	07d9      	lsls	r1, r3, #31
 80027fa:	d455      	bmi.n	80028a8 <indev_proc_press+0x194>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 80027fc:	6a27      	ldr	r7, [r4, #32]
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 80027fe:	2f00      	cmp	r7, #0
 8002800:	d052      	beq.n	80028a8 <indev_proc_press+0x194>
 8002802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002806:	4638      	mov	r0, r7
 8002808:	f001 fb8b 	bl	8003f22 <lv_obj_has_flag>
 800280c:	2800      	cmp	r0, #0
 800280e:	f040 8120 	bne.w	8002a52 <indev_proc_press+0x33e>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 8002812:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8002816:	6832      	ldr	r2, [r6, #0]
 8002818:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800281c:	f9b4 c012 	ldrsh.w	ip, [r4, #18]
 8002820:	f8d2 e000 	ldr.w	lr, [r2]
 8002824:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8002828:	f89e 801a 	ldrb.w	r8, [lr, #26]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4543      	cmp	r3, r8
 8002830:	d207      	bcs.n	8002842 <indev_proc_press+0x12e>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8002832:	ea8c 73ec 	eor.w	r3, ip, ip, asr #31
 8002836:	eba3 73ec 	sub.w	r3, r3, ip, asr #31
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 800283a:	b29b      	uxth	r3, r3
 800283c:	4598      	cmp	r8, r3
        proc->types.pointer.gesture_sum.x = 0;
 800283e:	bf88      	it	hi
 8002840:	63a0      	strhi	r0, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002842:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8002844:	4408      	add	r0, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002846:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002848:	b200      	sxth	r0, r0
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 800284a:	4461      	add	r1, ip
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 800284c:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002850:	8720      	strh	r0, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002852:	b209      	sxth	r1, r1
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002854:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 8002858:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 800285c:	8761      	strh	r1, [r4, #58]	; 0x3a
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 800285e:	fa1f fc8c 	uxth.w	ip, ip
 8002862:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8002866:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 800286a:	45f4      	cmp	ip, lr
 800286c:	b29b      	uxth	r3, r3
 800286e:	d801      	bhi.n	8002874 <indev_proc_press+0x160>
 8002870:	459e      	cmp	lr, r3
 8002872:	d219      	bcs.n	80028a8 <indev_proc_press+0x194>
        proc->types.pointer.gesture_sent = 1;
 8002874:	f894 e03d 	ldrb.w	lr, [r4, #61]	; 0x3d
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002878:	459c      	cmp	ip, r3
 800287a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
        proc->types.pointer.gesture_sent = 1;
 800287e:	f04e 0e01 	orr.w	lr, lr, #1
 8002882:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002886:	f240 80e9 	bls.w	8002a5c <indev_proc_press+0x348>
            if(proc->types.pointer.gesture_sum.x > 0)
 800288a:	2800      	cmp	r0, #0
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 800288c:	bfcc      	ite	gt
 800288e:	2102      	movgt	r1, #2
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 8002890:	2101      	movle	r1, #1
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002892:	f361 1307 	bfi	r3, r1, #4, #4
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 8002896:	4638      	mov	r0, r7
 8002898:	210c      	movs	r1, #12
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 800289a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 800289e:	f7ff fbc3 	bl	8002028 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80028a2:	4620      	mov	r0, r4
 80028a4:	f7ff fdea 	bl	800247c <indev_reset_check>
        if(indev_reset_check(proc)) return;
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7ff fde7 	bl	800247c <indev_reset_check>
 80028ae:	2800      	cmp	r0, #0
 80028b0:	f47f af62 	bne.w	8002778 <indev_proc_press+0x64>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 80028b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f af5e 	bne.w	8002778 <indev_proc_press+0x64>
 80028bc:	7863      	ldrb	r3, [r4, #1]
 80028be:	07da      	lsls	r2, r3, #31
 80028c0:	d420      	bmi.n	8002904 <indev_proc_press+0x1f0>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 80028c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80028c4:	f014 f9a2 	bl	8016c0c <lv_tick_elaps>
 80028c8:	6832      	ldr	r2, [r6, #0]
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	8b9b      	ldrh	r3, [r3, #28]
 80028ce:	4298      	cmp	r0, r3
 80028d0:	d910      	bls.n	80028f4 <indev_proc_press+0x1e0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80028d2:	2105      	movs	r1, #5
 80028d4:	6828      	ldr	r0, [r5, #0]
 80028d6:	f7ff fba7 	bl	8002028 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff fdce 	bl	800247c <indev_reset_check>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	f47f af49 	bne.w	8002778 <indev_proc_press+0x64>
                proc->long_pr_sent = 1;
 80028e6:	7863      	ldrb	r3, [r4, #1]
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 80028ee:	f014 f97f 	bl	8016bf0 <lv_tick_get>
 80028f2:	6460      	str	r0, [r4, #68]	; 0x44
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 80028f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f47f af3e 	bne.w	8002778 <indev_proc_press+0x64>
 80028fc:	7863      	ldrb	r3, [r4, #1]
 80028fe:	07db      	lsls	r3, r3, #31
 8002900:	f57f af3a 	bpl.w	8002778 <indev_proc_press+0x64>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 8002904:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002906:	f014 f981 	bl	8016c0c <lv_tick_elaps>
 800290a:	6832      	ldr	r2, [r6, #0]
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	8bdb      	ldrh	r3, [r3, #30]
 8002910:	4298      	cmp	r0, r3
 8002912:	f67f af31 	bls.w	8002778 <indev_proc_press+0x64>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002916:	2106      	movs	r1, #6
 8002918:	6828      	ldr	r0, [r5, #0]
 800291a:	f7ff fb85 	bl	8002028 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800291e:	4620      	mov	r0, r4
 8002920:	f7ff fdac 	bl	800247c <indev_reset_check>
 8002924:	2800      	cmp	r0, #0
 8002926:	f47f af27 	bne.w	8002778 <indev_proc_press+0x64>
                proc->longpr_rep_timestamp = lv_tick_get();
 800292a:	f014 f961 	bl	8016bf0 <lv_tick_get>
 800292e:	6460      	str	r0, [r4, #68]	; 0x44
 8002930:	e722      	b.n	8002778 <indev_proc_press+0x64>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 8002932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002936:	f001 faf4 	bl	8003f22 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 800293a:	2800      	cmp	r0, #0
 800293c:	f47f af22 	bne.w	8002784 <indev_proc_press+0x70>
 8002940:	e6f6      	b.n	8002730 <indev_proc_press+0x1c>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8002942:	6863      	ldr	r3, [r4, #4]
 8002944:	60a3      	str	r3, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 8002946:	2800      	cmp	r0, #0
 8002948:	d156      	bne.n	80029f8 <indev_proc_press+0x2e4>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 800294a:	682b      	ldr	r3, [r5, #0]
        proc->types.pointer.last_obj = indev_obj_act;
 800294c:	e9c4 3308 	strd	r3, r3, [r4, #32]
        if(indev_obj_act != NULL) {
 8002950:	2b00      	cmp	r3, #0
 8002952:	f43f af1c 	beq.w	800278e <indev_proc_press+0x7a>
            proc->pr_timestamp                 = lv_tick_get();
 8002956:	f014 f94b 	bl	8016bf0 <lv_tick_get>
            proc->long_pr_sent                 = 0;
 800295a:	7863      	ldrb	r3, [r4, #1]
            proc->types.pointer.gesture_sum.x  = 0;
 800295c:	2200      	movs	r2, #0
            proc->pr_timestamp                 = lv_tick_get();
 800295e:	6420      	str	r0, [r4, #64]	; 0x40
            proc->long_pr_sent                 = 0;
 8002960:	f36f 0300 	bfc	r3, #0, #1
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002964:	2101      	movs	r1, #1
            proc->types.pointer.gesture_sum.x  = 0;
 8002966:	63a2      	str	r2, [r4, #56]	; 0x38
            proc->long_pr_sent                 = 0;
 8002968:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800296a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800296c:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800296e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002972:	f023 0301 	bic.w	r3, r3, #1
            proc->types.pointer.scroll_sum.x     = 0;
 8002976:	e9c4 2204 	strd	r2, r2, [r4, #16]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800297a:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800297c:	6832      	ldr	r2, [r6, #0]
 800297e:	f7ff fb53 	bl	8002028 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff fd7a 	bl	800247c <indev_reset_check>
 8002988:	2800      	cmp	r0, #0
 800298a:	f47f aef5 	bne.w	8002778 <indev_proc_press+0x64>
            if(indev_act->proc.wait_until_release) return;
 800298e:	6837      	ldr	r7, [r6, #0]
 8002990:	797b      	ldrb	r3, [r7, #5]
 8002992:	071b      	lsls	r3, r3, #28
 8002994:	f53f aef0 	bmi.w	8002778 <indev_proc_press+0x64>
    lv_obj_t * obj_to_focus = indev_obj_act;
 8002998:	f8d5 9000 	ldr.w	r9, [r5]
    if(lv_obj_has_flag(obj_to_focus, LV_OBJ_FLAG_CLICK_FOCUSABLE) &&
 800299c:	2104      	movs	r1, #4
 800299e:	4648      	mov	r0, r9
 80029a0:	f001 fabf 	bl	8003f22 <lv_obj_has_flag>
 80029a4:	b1e0      	cbz	r0, 80029e0 <indev_proc_press+0x2cc>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	4599      	cmp	r9, r3
 80029aa:	d019      	beq.n	80029e0 <indev_proc_press+0x2cc>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 80029ac:	4648      	mov	r0, r9
            indev_click_focus(&indev_act->proc);
 80029ae:	f107 0804 	add.w	r8, r7, #4
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
 80029b2:	f001 fac5 	bl	8003f40 <lv_obj_get_group>
 80029b6:	4682      	mov	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80029b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d053      	beq.n	8002a66 <indev_proc_press+0x352>
 80029be:	f001 fabf 	bl	8003f40 <lv_obj_get_group>
        if(g_act == g_prev) {
 80029c2:	4582      	cmp	sl, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80029c4:	4603      	mov	r3, r0
        if(g_act == g_prev) {
 80029c6:	d12a      	bne.n	8002a1e <indev_proc_press+0x30a>
            if(g_act) {
 80029c8:	f1ba 0f00 	cmp.w	sl, #0
 80029cc:	d04e      	beq.n	8002a6c <indev_proc_press+0x358>
                lv_group_focus_obj(obj_to_focus);
 80029ce:	4648      	mov	r0, r9
 80029d0:	f7ff fd09 	bl	80023e6 <lv_group_focus_obj>
                if(indev_reset_check(proc)) return;
 80029d4:	4640      	mov	r0, r8
 80029d6:	f7ff fd51 	bl	800247c <indev_reset_check>
 80029da:	b908      	cbnz	r0, 80029e0 <indev_proc_press+0x2cc>
        proc->types.pointer.last_pressed = obj_to_focus;
 80029dc:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
            if(indev_reset_check(proc)) return;
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7ff fd4b 	bl	800247c <indev_reset_check>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	f43f aed1 	beq.w	800278e <indev_proc_press+0x7a>
 80029ec:	e6c4      	b.n	8002778 <indev_proc_press+0x64>
 80029ee:	bf00      	nop
 80029f0:	20002994 	.word	0x20002994
 80029f4:	20002990 	.word	0x20002990
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 80029f8:	6832      	ldr	r2, [r6, #0]
 80029fa:	2103      	movs	r1, #3
 80029fc:	f7ff fb14 	bl	8002028 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff fd3b 	bl	800247c <indev_reset_check>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d09f      	beq.n	800294a <indev_proc_press+0x236>
 8002a0a:	e6b5      	b.n	8002778 <indev_proc_press+0x64>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8002a0c:	6832      	ldr	r2, [r6, #0]
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f7ff fb0a 	bl	8002028 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8002a14:	4640      	mov	r0, r8
 8002a16:	f7ff fd31 	bl	800247c <indev_reset_check>
 8002a1a:	b350      	cbz	r0, 8002a72 <indev_proc_press+0x35e>
 8002a1c:	e7e0      	b.n	80029e0 <indev_proc_press+0x2cc>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8002a1e:	b978      	cbnz	r0, 8002a40 <indev_proc_press+0x32c>
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	b16b      	cbz	r3, 8002a40 <indev_proc_press+0x32c>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8002a24:	6832      	ldr	r2, [r6, #0]
 8002a26:	210f      	movs	r1, #15
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fafd 	bl	8002028 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8002a2e:	4640      	mov	r0, r8
 8002a30:	f7ff fd24 	bl	800247c <indev_reset_check>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d1d3      	bne.n	80029e0 <indev_proc_press+0x2cc>
            if(g_act) {
 8002a38:	f1ba 0f00 	cmp.w	sl, #0
 8002a3c:	d1c7      	bne.n	80029ce <indev_proc_press+0x2ba>
 8002a3e:	e018      	b.n	8002a72 <indev_proc_press+0x35e>
                if(proc->types.pointer.last_pressed) {
 8002a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a42:	2800      	cmp	r0, #0
 8002a44:	d0f8      	beq.n	8002a38 <indev_proc_press+0x324>
                    if(g_prev == NULL) {
 8002a46:	6832      	ldr	r2, [r6, #0]
 8002a48:	b90b      	cbnz	r3, 8002a4e <indev_proc_press+0x33a>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	e7ed      	b.n	8002a2a <indev_proc_press+0x316>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 8002a4e:	2110      	movs	r1, #16
 8002a50:	e7eb      	b.n	8002a2a <indev_proc_press+0x316>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8002a52:	4638      	mov	r0, r7
 8002a54:	f005 f882 	bl	8007b5c <lv_obj_get_parent>
 8002a58:	4607      	mov	r7, r0
 8002a5a:	e6d0      	b.n	80027fe <indev_proc_press+0xea>
            if(proc->types.pointer.gesture_sum.y > 0)
 8002a5c:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 8002a5e:	bfcc      	ite	gt
 8002a60:	2108      	movgt	r1, #8
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002a62:	2104      	movle	r1, #4
 8002a64:	e715      	b.n	8002892 <indev_proc_press+0x17e>
        if(g_act == g_prev) {
 8002a66:	f1ba 0f00 	cmp.w	sl, #0
 8002a6a:	d1d9      	bne.n	8002a20 <indev_proc_press+0x30c>
                if(proc->types.pointer.last_pressed) {
 8002a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1cc      	bne.n	8002a0c <indev_proc_press+0x2f8>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, indev_act);
 8002a72:	6832      	ldr	r2, [r6, #0]
 8002a74:	210e      	movs	r1, #14
 8002a76:	4648      	mov	r0, r9
 8002a78:	f7ff fad6 	bl	8002028 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8002a7c:	e7aa      	b.n	80029d4 <indev_proc_press+0x2c0>
 8002a7e:	bf00      	nop

08002a80 <lv_indev_read_timer_cb>:
    indev_act = timer->user_data;
 8002a80:	68c0      	ldr	r0, [r0, #12]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002a82:	6803      	ldr	r3, [r0, #0]
{
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002a88:	691b      	ldr	r3, [r3, #16]
{
 8002a8a:	b085      	sub	sp, #20
    indev_act = timer->user_data;
 8002a8c:	4db6      	ldr	r5, [pc, #728]	; (8002d68 <lv_indev_read_timer_cb+0x2e8>)
 8002a8e:	6028      	str	r0, [r5, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8087 	beq.w	8002ba4 <lv_indev_read_timer_cb+0x124>
    indev_proc_reset_query_handler(indev_act);
 8002a96:	f7ff fd43 	bl	8002520 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled) return;
 8002a9a:	7943      	ldrb	r3, [r0, #5]
 8002a9c:	075b      	lsls	r3, r3, #29
 8002a9e:	f100 8081 	bmi.w	8002ba4 <lv_indev_read_timer_cb+0x124>
        indev_obj_act = NULL;
 8002aa2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8002d6c <lv_indev_read_timer_cb+0x2ec>
 8002aa6:	464e      	mov	r6, r9
        _lv_indev_read(indev_act, &data);
 8002aa8:	4669      	mov	r1, sp
 8002aaa:	6828      	ldr	r0, [r5, #0]
 8002aac:	f014 f874 	bl	8016b98 <_lv_indev_read>
        indev_proc_reset_query_handler(indev_act);
 8002ab0:	6828      	ldr	r0, [r5, #0]
        continue_reading = data.continue_reading;
 8002ab2:	f89d 800f 	ldrb.w	r8, [sp, #15]
        indev_proc_reset_query_handler(indev_act);
 8002ab6:	f7ff fd33 	bl	8002520 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c9 3000 	str.w	r3, [r9]
        indev_act->proc.state = data.state;
 8002ac0:	f89d 300e 	ldrb.w	r3, [sp, #14]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002ac4:	2b01      	cmp	r3, #1
        indev_act->proc.state = data.state;
 8002ac6:	7103      	strb	r3, [r0, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002ac8:	6803      	ldr	r3, [r0, #0]
 8002aca:	d105      	bne.n	8002ad8 <lv_indev_read_timer_cb+0x58>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8002acc:	691c      	ldr	r4, [r3, #16]
 8002ace:	f014 f88f 	bl	8016bf0 <lv_tick_get>
 8002ad2:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
 8002ad6:	e006      	b.n	8002ae6 <lv_indev_read_timer_cb+0x66>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	2a04      	cmp	r2, #4
 8002adc:	d103      	bne.n	8002ae6 <lv_indev_read_timer_cb+0x66>
 8002ade:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8002ae2:	2a00      	cmp	r2, #0
 8002ae4:	d1f2      	bne.n	8002acc <lv_indev_read_timer_cb+0x4c>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8002ae6:	682c      	ldr	r4, [r5, #0]
 8002ae8:	6822      	ldr	r2, [r4, #0]
 8002aea:	7813      	ldrb	r3, [r2, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d144      	bne.n	8002b7a <lv_indev_read_timer_cb+0xfa>
    lv_disp_t *disp = i->driver->disp;
 8002af0:	6910      	ldr	r0, [r2, #16]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8002af2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002af6:	6807      	ldr	r7, [r0, #0]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8002af8:	f9bd 2000 	ldrsh.w	r2, [sp]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002afc:	7a39      	ldrb	r1, [r7, #8]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8002afe:	8222      	strh	r2, [r4, #16]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002b00:	f011 0f10 	tst.w	r1, #16
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8002b04:	8263      	strh	r3, [r4, #18]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002b06:	f000 82fc 	beq.w	8003102 <lv_indev_read_timer_cb+0x682>
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 8002b0a:	f8b7 c000 	ldrh.w	ip, [r7]
 8002b0e:	43d2      	mvns	r2, r2
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 8002b10:	43db      	mvns	r3, r3
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 8002b12:	4462      	add	r2, ip
 8002b14:	f8ad 2000 	strh.w	r2, [sp]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f8ad 3002 	strh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8002b20:	070b      	lsls	r3, r1, #28
 8002b22:	d50a      	bpl.n	8002b3a <lv_indev_read_timer_cb+0xba>
        data->point.y = data->point.x;
 8002b24:	f8bd 2000 	ldrh.w	r2, [sp]
        lv_coord_t tmp = data->point.y;
 8002b28:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
        data->point.y = data->point.x;
 8002b2c:	f8ad 2002 	strh.w	r2, [sp, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 8002b30:	43db      	mvns	r3, r3
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	4413      	add	r3, r2
 8002b36:	f8ad 3000 	strh.w	r3, [sp]
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) LV_LOG_WARN("X is %d which is greater than hor. res", data->point.x);
 8002b3a:	f013 ffab 	bl	8016a94 <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) LV_LOG_WARN("Y is %d which is greater than hor. res", data->point.y);
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	6918      	ldr	r0, [r3, #16]
 8002b42:	f013 ffb7 	bl	8016ab4 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 8002b46:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b48:	b148      	cbz	r0, 8002b5e <lv_indev_read_timer_cb+0xde>
 8002b4a:	68e2      	ldr	r2, [r4, #12]
 8002b4c:	9b00      	ldr	r3, [sp, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d005      	beq.n	8002b5e <lv_indev_read_timer_cb+0xde>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8002b52:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8002b56:	f9bd 1000 	ldrsh.w	r1, [sp]
 8002b5a:	f002 f997 	bl	8004e8c <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 8002b5e:	9b00      	ldr	r3, [sp, #0]
 8002b60:	1d20      	adds	r0, r4, #4
 8002b62:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8002b64:	7923      	ldrb	r3, [r4, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d104      	bne.n	8002b74 <lv_indev_read_timer_cb+0xf4>
        indev_proc_press(&i->proc);
 8002b6a:	f7ff fdd3 	bl	8002714 <indev_proc_press>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	60e3      	str	r3, [r4, #12]
 8002b72:	e00d      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
        indev_proc_release(&i->proc);
 8002b74:	f7ff fc8e 	bl	8002494 <indev_proc_release>
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8002b78:	e7f9      	b.n	8002b6e <lv_indev_read_timer_cb+0xee>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	f040 80f8 	bne.w	8002d70 <lv_indev_read_timer_cb+0x2f0>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8002b80:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8002b84:	7963      	ldrb	r3, [r4, #5]
 8002b86:	2901      	cmp	r1, #1
 8002b88:	f003 0208 	and.w	r2, r3, #8
 8002b8c:	d10d      	bne.n	8002baa <lv_indev_read_timer_cb+0x12a>
 8002b8e:	b19a      	cbz	r2, 8002bb8 <lv_indev_read_timer_cb+0x138>
        indev_proc_reset_query_handler(indev_act);
 8002b90:	6828      	ldr	r0, [r5, #0]
 8002b92:	f7ff fcc5 	bl	8002520 <indev_proc_reset_query_handler>
    } while(continue_reading);
 8002b96:	f1b8 0f00 	cmp.w	r8, #0
 8002b9a:	d185      	bne.n	8002aa8 <lv_indev_read_timer_cb+0x28>
    indev_act     = NULL;
 8002b9c:	f8c5 8000 	str.w	r8, [r5]
    indev_obj_act = NULL;
 8002ba0:	f8c6 8000 	str.w	r8, [r6]
}
 8002ba4:	b005      	add	sp, #20
 8002ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i->proc.wait_until_release) {
 8002baa:	b12a      	cbz	r2, 8002bb8 <lv_indev_read_timer_cb+0x138>
        i->proc.pr_timestamp            = 0;
 8002bac:	2200      	movs	r2, #0
        i->proc.long_pr_sent            = 0;
 8002bae:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 8002bb2:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8002bb4:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8002bb6:	7222      	strb	r2, [r4, #8]
    lv_group_t * g = i->group;
 8002bb8:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if(g == NULL) return;
 8002bba:	2f00      	cmp	r7, #0
 8002bbc:	d0e8      	beq.n	8002b90 <lv_indev_read_timer_cb+0x110>
    indev_obj_act = lv_group_get_focused(g);
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f7ff fbdd 	bl	800237e <lv_group_get_focused>
 8002bc4:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d0e2      	beq.n	8002b90 <lv_indev_read_timer_cb+0x110>
    i->proc.types.keypad.last_key = data->key;
 8002bca:	9a01      	ldr	r2, [sp, #4]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8002bcc:	68e3      	ldr	r3, [r4, #12]
    i->proc.types.keypad.last_key = data->key;
 8002bce:	60e2      	str	r2, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 8002bd0:	f89d b00e 	ldrb.w	fp, [sp, #14]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8002bd4:	f894 a008 	ldrb.w	sl, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8002bd8:	f1bb 0f01 	cmp.w	fp, #1
    i->proc.types.keypad.last_state = data->state;
 8002bdc:	f884 b008 	strb.w	fp, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8002be0:	f040 808d 	bne.w	8002cfe <lv_indev_read_timer_cb+0x27e>
 8002be4:	f1ba 0f00 	cmp.w	sl, #0
 8002be8:	d134      	bne.n	8002c54 <lv_indev_read_timer_cb+0x1d4>
        i->proc.pr_timestamp = lv_tick_get();
 8002bea:	f014 f801 	bl	8016bf0 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8002bee:	9901      	ldr	r1, [sp, #4]
        i->proc.pr_timestamp = lv_tick_get();
 8002bf0:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 8002bf2:	290a      	cmp	r1, #10
 8002bf4:	d108      	bne.n	8002c08 <lv_indev_read_timer_cb+0x188>
            lv_group_send_data(g, LV_KEY_ENTER);
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	f7ff fbc6 	bl	8002388 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002bfc:	682a      	ldr	r2, [r5, #0]
 8002bfe:	4659      	mov	r1, fp
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002c00:	6830      	ldr	r0, [r6, #0]
 8002c02:	f7ff fa11 	bl	8002028 <lv_event_send>
 8002c06:	e010      	b.n	8002c2a <lv_indev_read_timer_cb+0x1aa>
        else if(data->key == LV_KEY_ESC) {
 8002c08:	291b      	cmp	r1, #27
 8002c0a:	d105      	bne.n	8002c18 <lv_indev_read_timer_cb+0x198>
            lv_group_send_data(g, LV_KEY_ESC);
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	f7ff fbbb 	bl	8002388 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8002c12:	682a      	ldr	r2, [r5, #0]
 8002c14:	2120      	movs	r1, #32
 8002c16:	e7f3      	b.n	8002c00 <lv_indev_read_timer_cb+0x180>
        else if(data->key == LV_KEY_NEXT) {
 8002c18:	2909      	cmp	r1, #9
 8002c1a:	d10b      	bne.n	8002c34 <lv_indev_read_timer_cb+0x1b4>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	4651      	mov	r1, sl
 8002c20:	f7ff fbc0 	bl	80023a4 <lv_group_set_editing>
            lv_group_focus_next(g);
 8002c24:	4638      	mov	r0, r7
 8002c26:	f7ff fb01 	bl	800222c <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 8002c2a:	1d20      	adds	r0, r4, #4
                if(indev_reset_check(&i->proc)) return;
 8002c2c:	f7ff fc26 	bl	800247c <indev_reset_check>
 8002c30:	b168      	cbz	r0, 8002c4e <lv_indev_read_timer_cb+0x1ce>
 8002c32:	e7ad      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
        else if(data->key == LV_KEY_PREV) {
 8002c34:	290b      	cmp	r1, #11
 8002c36:	d107      	bne.n	8002c48 <lv_indev_read_timer_cb+0x1c8>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002c38:	4638      	mov	r0, r7
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	f7ff fbb2 	bl	80023a4 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8002c40:	4638      	mov	r0, r7
 8002c42:	f7ff faff 	bl	8002244 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8002c46:	e7f0      	b.n	8002c2a <lv_indev_read_timer_cb+0x1aa>
            lv_group_send_data(g, data->key);
 8002c48:	4638      	mov	r0, r7
 8002c4a:	f7ff fb9d 	bl	8002388 <lv_group_send_data>
    indev_obj_act = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	6033      	str	r3, [r6, #0]
 8002c52:	e79d      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
    else if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8002c54:	f1ba 0f01 	cmp.w	sl, #1
 8002c58:	d1f9      	bne.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
        if(data->key == LV_KEY_ENTER) {
 8002c5a:	2a0a      	cmp	r2, #10
 8002c5c:	d016      	beq.n	8002c8c <lv_indev_read_timer_cb+0x20c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002c5e:	7963      	ldrb	r3, [r4, #5]
 8002c60:	07d8      	lsls	r0, r3, #31
 8002c62:	d41f      	bmi.n	8002ca4 <lv_indev_read_timer_cb+0x224>
 8002c64:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c66:	f013 ffd1 	bl	8016c0c <lv_tick_elaps>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	8b9b      	ldrh	r3, [r3, #28]
 8002c6e:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002c70:	7963      	ldrb	r3, [r4, #5]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002c72:	d915      	bls.n	8002ca0 <lv_indev_read_timer_cb+0x220>
            i->proc.long_pr_sent = 1;
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 8002c7a:	9b01      	ldr	r3, [sp, #4]
 8002c7c:	2b0a      	cmp	r3, #10
 8002c7e:	d1e6      	bne.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002c80:	f013 ffb6 	bl	8016bf0 <lv_tick_get>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002c84:	682a      	ldr	r2, [r5, #0]
 8002c86:	2105      	movs	r1, #5
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8002c88:	64a0      	str	r0, [r4, #72]	; 0x48
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002c8a:	e7b9      	b.n	8002c00 <lv_indev_read_timer_cb+0x180>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8002c8c:	682a      	ldr	r2, [r5, #0]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	f7ff f9ca 	bl	8002028 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002c94:	1d20      	adds	r0, r4, #4
 8002c96:	f7ff fbf1 	bl	800247c <indev_reset_check>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0df      	beq.n	8002c5e <lv_indev_read_timer_cb+0x1de>
 8002c9e:	e777      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
        else if(i->proc.long_pr_sent != 0 &&
 8002ca0:	07d9      	lsls	r1, r3, #31
 8002ca2:	d5d4      	bpl.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002ca4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002ca6:	f013 ffb1 	bl	8016c0c <lv_tick_elaps>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	8bdb      	ldrh	r3, [r3, #30]
        else if(i->proc.long_pr_sent != 0 &&
 8002cae:	4298      	cmp	r0, r3
 8002cb0:	d9cd      	bls.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002cb2:	f013 ff9d 	bl	8016bf0 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002cb6:	9901      	ldr	r1, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002cb8:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002cba:	3404      	adds	r4, #4
 8002cbc:	290a      	cmp	r1, #10
 8002cbe:	d106      	bne.n	8002cce <lv_indev_read_timer_cb+0x24e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002cc0:	682a      	ldr	r2, [r5, #0]
 8002cc2:	2106      	movs	r1, #6
 8002cc4:	6830      	ldr	r0, [r6, #0]
 8002cc6:	f7ff f9af 	bl	8002028 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002cca:	4620      	mov	r0, r4
 8002ccc:	e7ae      	b.n	8002c2c <lv_indev_read_timer_cb+0x1ac>
            else if(data->key == LV_KEY_NEXT) {
 8002cce:	2909      	cmp	r1, #9
 8002cd0:	d107      	bne.n	8002ce2 <lv_indev_read_timer_cb+0x262>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002cd2:	4638      	mov	r0, r7
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f7ff fb65 	bl	80023a4 <lv_group_set_editing>
                lv_group_focus_next(g);
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f7ff faa6 	bl	800222c <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 8002ce0:	e7f3      	b.n	8002cca <lv_indev_read_timer_cb+0x24a>
            else if(data->key == LV_KEY_PREV) {
 8002ce2:	290b      	cmp	r1, #11
 8002ce4:	d107      	bne.n	8002cf6 <lv_indev_read_timer_cb+0x276>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8002ce6:	4638      	mov	r0, r7
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f7ff fb5b 	bl	80023a4 <lv_group_set_editing>
                lv_group_focus_prev(g);
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7ff faa8 	bl	8002244 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 8002cf4:	e7e9      	b.n	8002cca <lv_indev_read_timer_cb+0x24a>
                lv_group_send_data(g, data->key);
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	f7ff fb46 	bl	8002388 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8002cfc:	e7e5      	b.n	8002cca <lv_indev_read_timer_cb+0x24a>
    else if(data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 8002cfe:	f1bb 0f00 	cmp.w	fp, #0
 8002d02:	d1a4      	bne.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
 8002d04:	f1ba 0f01 	cmp.w	sl, #1
 8002d08:	d1a1      	bne.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
        if(data->key == LV_KEY_ENTER) {
 8002d0a:	2b0a      	cmp	r3, #10
 8002d0c:	682a      	ldr	r2, [r5, #0]
        data->key = prev_key;
 8002d0e:	9301      	str	r3, [sp, #4]
        if(data->key == LV_KEY_ENTER) {
 8002d10:	d006      	beq.n	8002d20 <lv_indev_read_timer_cb+0x2a0>
        i->proc.pr_timestamp = 0;
 8002d12:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8002d14:	7963      	ldrb	r3, [r4, #5]
 8002d16:	f362 0300 	bfi	r3, r2, #0, #1
        i->proc.pr_timestamp = 0;
 8002d1a:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8002d1c:	7163      	strb	r3, [r4, #5]
 8002d1e:	e796      	b.n	8002c4e <lv_indev_read_timer_cb+0x1ce>
            if(indev_reset_check(&i->proc)) return;
 8002d20:	1d27      	adds	r7, r4, #4
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002d22:	2108      	movs	r1, #8
 8002d24:	f7ff f980 	bl	8002028 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002d28:	4638      	mov	r0, r7
 8002d2a:	f7ff fba7 	bl	800247c <indev_reset_check>
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	f47f af2e 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
            if(i->proc.long_pr_sent == 0) {
 8002d34:	7963      	ldrb	r3, [r4, #5]
 8002d36:	07da      	lsls	r2, r3, #31
 8002d38:	d50a      	bpl.n	8002d50 <lv_indev_read_timer_cb+0x2d0>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002d3a:	682a      	ldr	r2, [r5, #0]
 8002d3c:	2107      	movs	r1, #7
 8002d3e:	6830      	ldr	r0, [r6, #0]
 8002d40:	f7ff f972 	bl	8002028 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8002d44:	4638      	mov	r0, r7
 8002d46:	f7ff fb99 	bl	800247c <indev_reset_check>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d0e1      	beq.n	8002d12 <lv_indev_read_timer_cb+0x292>
 8002d4e:	e71f      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002d50:	682a      	ldr	r2, [r5, #0]
 8002d52:	2104      	movs	r1, #4
 8002d54:	6830      	ldr	r0, [r6, #0]
 8002d56:	f7ff f967 	bl	8002028 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	f7ff fb8e 	bl	800247c <indev_reset_check>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d0ea      	beq.n	8002d3a <lv_indev_read_timer_cb+0x2ba>
 8002d64:	e714      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
 8002d66:	bf00      	nop
 8002d68:	20002990 	.word	0x20002990
 8002d6c:	20002994 	.word	0x20002994
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	f040 818d 	bne.w	8003090 <lv_indev_read_timer_cb+0x610>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8002d76:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002d7a:	7963      	ldrb	r3, [r4, #5]
 8002d7c:	2a01      	cmp	r2, #1
 8002d7e:	f003 0108 	and.w	r1, r3, #8
 8002d82:	d142      	bne.n	8002e0a <lv_indev_read_timer_cb+0x38a>
 8002d84:	2900      	cmp	r1, #0
 8002d86:	f47f af03 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
    i->proc.types.keypad.last_key   = data->key;
 8002d8a:	9b01      	ldr	r3, [sp, #4]
    lv_group_t * g = i->group;
 8002d8c:	6d27      	ldr	r7, [r4, #80]	; 0x50
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8002d8e:	f894 a008 	ldrb.w	sl, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8002d92:	60e3      	str	r3, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 8002d94:	7222      	strb	r2, [r4, #8]
    if(g == NULL) return;
 8002d96:	2f00      	cmp	r7, #0
 8002d98:	f43f aefa 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
    indev_obj_act = lv_group_get_focused(g);
 8002d9c:	4638      	mov	r0, r7
 8002d9e:	f7ff faee 	bl	800237e <lv_group_get_focused>
 8002da2:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002da4:	2800      	cmp	r0, #0
 8002da6:	f43f aef3 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 8002daa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002dae:	b113      	cbz	r3, 8002db6 <lv_indev_read_timer_cb+0x336>
        data->enc_diff = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8ad 300c 	strh.w	r3, [sp, #12]
    indev_obj_act = lv_group_get_focused(g);
 8002db6:	4638      	mov	r0, r7
 8002db8:	f7ff fae1 	bl	800237e <lv_group_get_focused>
 8002dbc:	6030      	str	r0, [r6, #0]
    if(indev_obj_act == NULL) return;
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	f43f aee6 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8002dc4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 80bb 	bne.w	8002f44 <lv_indev_read_timer_cb+0x4c4>
 8002dce:	f1ba 0f00 	cmp.w	sl, #0
 8002dd2:	d15d      	bne.n	8002e90 <lv_indev_read_timer_cb+0x410>
        i->proc.pr_timestamp = lv_tick_get();
 8002dd4:	f013 ff0c 	bl	8016bf0 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 8002dd8:	9901      	ldr	r1, [sp, #4]
        i->proc.pr_timestamp = lv_tick_get();
 8002dda:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 8002ddc:	290a      	cmp	r1, #10
 8002dde:	d11d      	bne.n	8002e1c <lv_indev_read_timer_cb+0x39c>
            bool editable = lv_obj_is_editable(indev_obj_act);
 8002de0:	6830      	ldr	r0, [r6, #0]
 8002de2:	f001 fc18 	bl	8004616 <lv_obj_is_editable>
 8002de6:	4682      	mov	sl, r0
            if(lv_group_get_editing(g) == true || editable == false) {
 8002de8:	4638      	mov	r0, r7
 8002dea:	f7ff fb3f 	bl	800246c <lv_group_get_editing>
 8002dee:	b910      	cbnz	r0, 8002df6 <lv_indev_read_timer_cb+0x376>
 8002df0:	f1ba 0f00 	cmp.w	sl, #0
 8002df4:	d12a      	bne.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002df6:	682a      	ldr	r2, [r5, #0]
 8002df8:	2101      	movs	r1, #1
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002dfa:	6830      	ldr	r0, [r6, #0]
 8002dfc:	f7ff f914 	bl	8002028 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002e00:	1d20      	adds	r0, r4, #4
 8002e02:	f7ff fb3b 	bl	800247c <indev_reset_check>
 8002e06:	b308      	cbz	r0, 8002e4c <lv_indev_read_timer_cb+0x3cc>
 8002e08:	e6c2      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
    if(i->proc.wait_until_release) {
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d0bd      	beq.n	8002d8a <lv_indev_read_timer_cb+0x30a>
        i->proc.pr_timestamp            = 0;
 8002e0e:	2100      	movs	r1, #0
        i->proc.long_pr_sent            = 0;
 8002e10:	f023 0309 	bic.w	r3, r3, #9
        i->proc.pr_timestamp            = 0;
 8002e14:	6461      	str	r1, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8002e16:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8002e18:	7221      	strb	r1, [r4, #8]
 8002e1a:	e7b6      	b.n	8002d8a <lv_indev_read_timer_cb+0x30a>
        else if(data->key == LV_KEY_LEFT) {
 8002e1c:	2914      	cmp	r1, #20
 8002e1e:	d105      	bne.n	8002e2c <lv_indev_read_timer_cb+0x3ac>
                data->enc_diff--;
 8002e20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002e24:	3b01      	subs	r3, #1
                data->enc_diff++;
 8002e26:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002e2a:	e00f      	b.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
        else if(data->key == LV_KEY_RIGHT) {
 8002e2c:	2913      	cmp	r1, #19
 8002e2e:	d103      	bne.n	8002e38 <lv_indev_read_timer_cb+0x3b8>
                data->enc_diff++;
 8002e30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002e34:	3301      	adds	r3, #1
 8002e36:	e7f6      	b.n	8002e26 <lv_indev_read_timer_cb+0x3a6>
        else if(data->key == LV_KEY_ESC) {
 8002e38:	291b      	cmp	r1, #27
            lv_group_send_data(g, LV_KEY_ESC);
 8002e3a:	4638      	mov	r0, r7
        else if(data->key == LV_KEY_ESC) {
 8002e3c:	d104      	bne.n	8002e48 <lv_indev_read_timer_cb+0x3c8>
            lv_group_send_data(g, LV_KEY_ESC);
 8002e3e:	f7ff faa3 	bl	8002388 <lv_group_send_data>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8002e42:	682a      	ldr	r2, [r5, #0]
 8002e44:	2120      	movs	r1, #32
 8002e46:	e7d8      	b.n	8002dfa <lv_indev_read_timer_cb+0x37a>
            lv_group_send_data(g, data->key);
 8002e48:	f7ff fa9e 	bl	8002388 <lv_group_send_data>
    indev_obj_act = NULL;
 8002e4c:	f04f 0a00 	mov.w	sl, #0
    if(data->enc_diff != 0) {
 8002e50:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
    indev_obj_act = NULL;
 8002e54:	f8c6 a000 	str.w	sl, [r6]
    if(data->enc_diff != 0) {
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f43f ae99 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
        if(lv_group_get_editing(g)) {
 8002e5e:	4638      	mov	r0, r7
 8002e60:	f7ff fb04 	bl	800246c <lv_group_get_editing>
 8002e64:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002e68:	4604      	mov	r4, r0
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	f000 80f7 	beq.w	800305e <lv_indev_read_timer_cb+0x5de>
            if(data->enc_diff < 0) {
 8002e70:	4553      	cmp	r3, sl
 8002e72:	f280 80e6 	bge.w	8003042 <lv_indev_read_timer_cb+0x5c2>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8002e76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002e7a:	425b      	negs	r3, r3
 8002e7c:	459a      	cmp	sl, r3
 8002e7e:	f6bf ae87 	bge.w	8002b90 <lv_indev_read_timer_cb+0x110>
 8002e82:	2114      	movs	r1, #20
 8002e84:	4638      	mov	r0, r7
 8002e86:	f10a 0a01 	add.w	sl, sl, #1
 8002e8a:	f7ff fa7d 	bl	8002388 <lv_group_send_data>
 8002e8e:	e7f2      	b.n	8002e76 <lv_indev_read_timer_cb+0x3f6>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 8002e90:	f1ba 0f01 	cmp.w	sl, #1
 8002e94:	d1da      	bne.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002e96:	7963      	ldrb	r3, [r4, #5]
 8002e98:	07db      	lsls	r3, r3, #31
 8002e9a:	d50f      	bpl.n	8002ebc <lv_indev_read_timer_cb+0x43c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002e9c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002e9e:	f013 feb5 	bl	8016c0c <lv_tick_elaps>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	8bdb      	ldrh	r3, [r3, #30]
 8002ea6:	4298      	cmp	r0, r3
 8002ea8:	d9d0      	bls.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002eaa:	f013 fea1 	bl	8016bf0 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002eae:	9901      	ldr	r1, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002eb0:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002eb2:	290a      	cmp	r1, #10
 8002eb4:	d13c      	bne.n	8002f30 <lv_indev_read_timer_cb+0x4b0>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002eb6:	682a      	ldr	r2, [r5, #0]
 8002eb8:	2106      	movs	r1, #6
 8002eba:	e79e      	b.n	8002dfa <lv_indev_read_timer_cb+0x37a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002ebc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002ebe:	f013 fea5 	bl	8016c0c <lv_tick_elaps>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	8b9b      	ldrh	r3, [r3, #28]
 8002ec6:	4298      	cmp	r0, r3
            i->proc.long_pr_sent = 1;
 8002ec8:	7963      	ldrb	r3, [r4, #5]
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8002eca:	d92e      	bls.n	8002f2a <lv_indev_read_timer_cb+0x4aa>
            i->proc.long_pr_sent = 1;
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002ed2:	f013 fe8d 	bl	8016bf0 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8002ed6:	9b01      	ldr	r3, [sp, #4]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8002ed8:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8002eda:	2b0a      	cmp	r3, #10
 8002edc:	d115      	bne.n	8002f0a <lv_indev_read_timer_cb+0x48a>
                bool editable = lv_obj_is_editable(indev_obj_act);
 8002ede:	6830      	ldr	r0, [r6, #0]
 8002ee0:	f001 fb99 	bl	8004616 <lv_obj_is_editable>
                if(editable) {
 8002ee4:	b1b0      	cbz	r0, 8002f14 <lv_indev_read_timer_cb+0x494>
                    if(lv_group_get_obj_count(g) > 1) {
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	f7ff fac5 	bl	8002476 <lv_group_get_obj_count>
 8002eec:	2801      	cmp	r0, #1
 8002eee:	d90c      	bls.n	8002f0a <lv_indev_read_timer_cb+0x48a>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f7ff fabb 	bl	800246c <lv_group_get_editing>
 8002ef6:	f080 0001 	eor.w	r0, r0, #1
 8002efa:	b2c1      	uxtb	r1, r0
 8002efc:	4638      	mov	r0, r7
 8002efe:	f7ff fa51 	bl	80023a4 <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 8002f02:	2120      	movs	r1, #32
 8002f04:	6830      	ldr	r0, [r6, #0]
 8002f06:	f001 f803 	bl	8003f10 <lv_obj_clear_state>
            i->proc.long_pr_sent = 1;
 8002f0a:	7963      	ldrb	r3, [r4, #5]
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
        i->proc.long_pr_sent = 0;
 8002f10:	7163      	strb	r3, [r4, #5]
 8002f12:	e79b      	b.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002f14:	682a      	ldr	r2, [r5, #0]
 8002f16:	2105      	movs	r1, #5
 8002f18:	6830      	ldr	r0, [r6, #0]
 8002f1a:	f7ff f885 	bl	8002028 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002f1e:	1d20      	adds	r0, r4, #4
 8002f20:	f7ff faac 	bl	800247c <indev_reset_check>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d0f0      	beq.n	8002f0a <lv_indev_read_timer_cb+0x48a>
 8002f28:	e632      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8002f2a:	07d8      	lsls	r0, r3, #31
 8002f2c:	d58e      	bpl.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
 8002f2e:	e7b5      	b.n	8002e9c <lv_indev_read_timer_cb+0x41c>
            else if(data->key == LV_KEY_LEFT) {
 8002f30:	2914      	cmp	r1, #20
 8002f32:	f43f af75 	beq.w	8002e20 <lv_indev_read_timer_cb+0x3a0>
            else if(data->key == LV_KEY_RIGHT) {
 8002f36:	2913      	cmp	r1, #19
 8002f38:	f43f af7a 	beq.w	8002e30 <lv_indev_read_timer_cb+0x3b0>
                lv_group_send_data(g, data->key);
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f7ff fa23 	bl	8002388 <lv_group_send_data>
 8002f42:	e75d      	b.n	8002e00 <lv_indev_read_timer_cb+0x380>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d181      	bne.n	8002e4c <lv_indev_read_timer_cb+0x3cc>
 8002f48:	f1ba 0f01 	cmp.w	sl, #1
 8002f4c:	f47f af7e 	bne.w	8002e4c <lv_indev_read_timer_cb+0x3cc>
        if(data->key == LV_KEY_ENTER) {
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	2b0a      	cmp	r3, #10
 8002f54:	d128      	bne.n	8002fa8 <lv_indev_read_timer_cb+0x528>
            bool editable = lv_obj_is_editable(indev_obj_act);
 8002f56:	f001 fb5e 	bl	8004616 <lv_obj_is_editable>
            if(editable == false) {
 8002f5a:	bb58      	cbnz	r0, 8002fb4 <lv_indev_read_timer_cb+0x534>
                if(indev_reset_check(&i->proc)) return;
 8002f5c:	f104 0a04 	add.w	sl, r4, #4
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002f60:	682a      	ldr	r2, [r5, #0]
 8002f62:	2108      	movs	r1, #8
 8002f64:	6830      	ldr	r0, [r6, #0]
 8002f66:	f7ff f85f 	bl	8002028 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002f6a:	4650      	mov	r0, sl
 8002f6c:	f7ff fa86 	bl	800247c <indev_reset_check>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f47f ae0d 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002f76:	7963      	ldrb	r3, [r4, #5]
 8002f78:	07d9      	lsls	r1, r3, #31
 8002f7a:	d404      	bmi.n	8002f86 <lv_indev_read_timer_cb+0x506>
 8002f7c:	682a      	ldr	r2, [r5, #0]
 8002f7e:	2104      	movs	r1, #4
 8002f80:	6830      	ldr	r0, [r6, #0]
 8002f82:	f7ff f851 	bl	8002028 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002f86:	4650      	mov	r0, sl
 8002f88:	f7ff fa78 	bl	800247c <indev_reset_check>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	f47f adff 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002f92:	682a      	ldr	r2, [r5, #0]
 8002f94:	2107      	movs	r1, #7
 8002f96:	6830      	ldr	r0, [r6, #0]
 8002f98:	f7ff f846 	bl	8002028 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8002f9c:	4650      	mov	r0, sl
 8002f9e:	f7ff fa6d 	bl	800247c <indev_reset_check>
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	f47f adf4 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
        i->proc.pr_timestamp = 0;
 8002fa8:	2200      	movs	r2, #0
        i->proc.long_pr_sent = 0;
 8002faa:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8002fac:	6462      	str	r2, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8002fae:	f362 0300 	bfi	r3, r2, #0, #1
 8002fb2:	e7ad      	b.n	8002f10 <lv_indev_read_timer_cb+0x490>
            else if(lv_group_get_editing(g)) {
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f7ff fa59 	bl	800246c <lv_group_get_editing>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d034      	beq.n	8003028 <lv_indev_read_timer_cb+0x5a8>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 8002fbe:	7963      	ldrb	r3, [r4, #5]
 8002fc0:	07da      	lsls	r2, r3, #31
 8002fc2:	d427      	bmi.n	8003014 <lv_indev_read_timer_cb+0x594>
                    if(indev_reset_check(&i->proc)) return;
 8002fc4:	f104 0a04 	add.w	sl, r4, #4
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8002fc8:	682a      	ldr	r2, [r5, #0]
 8002fca:	2108      	movs	r1, #8
 8002fcc:	6830      	ldr	r0, [r6, #0]
 8002fce:	f7ff f82b 	bl	8002028 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002fd2:	4650      	mov	r0, sl
 8002fd4:	f7ff fa52 	bl	800247c <indev_reset_check>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	f47f add9 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8002fde:	682a      	ldr	r2, [r5, #0]
 8002fe0:	2104      	movs	r1, #4
 8002fe2:	6830      	ldr	r0, [r6, #0]
 8002fe4:	f7ff f820 	bl	8002028 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002fe8:	4650      	mov	r0, sl
 8002fea:	f7ff fa47 	bl	800247c <indev_reset_check>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	f47f adce 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002ff4:	682a      	ldr	r2, [r5, #0]
 8002ff6:	2107      	movs	r1, #7
 8002ff8:	6830      	ldr	r0, [r6, #0]
 8002ffa:	f7ff f815 	bl	8002028 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8002ffe:	4650      	mov	r0, sl
 8003000:	f7ff fa3c 	bl	800247c <indev_reset_check>
 8003004:	2800      	cmp	r0, #0
 8003006:	f47f adc3 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
                    lv_group_send_data(g, LV_KEY_ENTER);
 800300a:	210a      	movs	r1, #10
 800300c:	4638      	mov	r0, r7
 800300e:	f7ff f9bb 	bl	8002388 <lv_group_send_data>
 8003012:	e7c9      	b.n	8002fa8 <lv_indev_read_timer_cb+0x528>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 8003014:	4638      	mov	r0, r7
 8003016:	f7ff fa2e 	bl	8002476 <lv_group_get_obj_count>
 800301a:	2801      	cmp	r0, #1
 800301c:	d9d2      	bls.n	8002fc4 <lv_indev_read_timer_cb+0x544>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 800301e:	2120      	movs	r1, #32
 8003020:	6830      	ldr	r0, [r6, #0]
 8003022:	f000 ff75 	bl	8003f10 <lv_obj_clear_state>
 8003026:	e7bf      	b.n	8002fa8 <lv_indev_read_timer_cb+0x528>
            else if(editable && !lv_group_get_editing(g) && !i->proc.long_pr_sent) {
 8003028:	4638      	mov	r0, r7
 800302a:	f7ff fa1f 	bl	800246c <lv_group_get_editing>
 800302e:	2800      	cmp	r0, #0
 8003030:	d1ba      	bne.n	8002fa8 <lv_indev_read_timer_cb+0x528>
 8003032:	7963      	ldrb	r3, [r4, #5]
 8003034:	07db      	lsls	r3, r3, #31
 8003036:	d4b7      	bmi.n	8002fa8 <lv_indev_read_timer_cb+0x528>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8003038:	4651      	mov	r1, sl
 800303a:	4638      	mov	r0, r7
 800303c:	f7ff f9b2 	bl	80023a4 <lv_group_set_editing>
 8003040:	e7b2      	b.n	8002fa8 <lv_indev_read_timer_cb+0x528>
            else if(data->enc_diff > 0) {
 8003042:	f43f ada5 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8003046:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800304a:	459a      	cmp	sl, r3
 800304c:	f6bf ada0 	bge.w	8002b90 <lv_indev_read_timer_cb+0x110>
 8003050:	2113      	movs	r1, #19
 8003052:	4638      	mov	r0, r7
 8003054:	f10a 0a01 	add.w	sl, sl, #1
 8003058:	f7ff f996 	bl	8002388 <lv_group_send_data>
 800305c:	e7f3      	b.n	8003046 <lv_indev_read_timer_cb+0x5c6>
            if(data->enc_diff < 0) {
 800305e:	2b00      	cmp	r3, #0
 8003060:	da0a      	bge.n	8003078 <lv_indev_read_timer_cb+0x5f8>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8003062:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003066:	425b      	negs	r3, r3
 8003068:	429c      	cmp	r4, r3
 800306a:	f6bf ad91 	bge.w	8002b90 <lv_indev_read_timer_cb+0x110>
 800306e:	4638      	mov	r0, r7
 8003070:	3401      	adds	r4, #1
 8003072:	f7ff f8e7 	bl	8002244 <lv_group_focus_prev>
 8003076:	e7f4      	b.n	8003062 <lv_indev_read_timer_cb+0x5e2>
            else if(data->enc_diff > 0) {
 8003078:	f43f ad8a 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 800307c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8003080:	429c      	cmp	r4, r3
 8003082:	f6bf ad85 	bge.w	8002b90 <lv_indev_read_timer_cb+0x110>
 8003086:	4638      	mov	r0, r7
 8003088:	3401      	adds	r4, #1
 800308a:	f7ff f8cf 	bl	800222c <lv_group_focus_next>
 800308e:	e7f5      	b.n	800307c <lv_indev_read_timer_cb+0x5fc>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8003090:	2b03      	cmp	r3, #3
 8003092:	f47f ad7d 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
    if(i->btn_points == NULL) {
 8003096:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	f43f ad79 	beq.w	8002b90 <lv_indev_read_timer_cb+0x110>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 800309e:	9a02      	ldr	r2, [sp, #8]
 80030a0:	1d27      	adds	r7, r4, #4
 80030a2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 80030a6:	f933 b022 	ldrsh.w	fp, [r3, r2, lsl #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 80030aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 80030ae:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10a      	bne.n	80030cc <lv_indev_read_timer_cb+0x64c>
        if(i->proc.types.pointer.last_point.x != x ||
 80030b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ba:	455b      	cmp	r3, fp
 80030bc:	d103      	bne.n	80030c6 <lv_indev_read_timer_cb+0x646>
 80030be:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80030c2:	4553      	cmp	r3, sl
 80030c4:	d002      	beq.n	80030cc <lv_indev_read_timer_cb+0x64c>
            indev_proc_release(&i->proc);
 80030c6:	4638      	mov	r0, r7
 80030c8:	f7ff f9e4 	bl	8002494 <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
 80030cc:	4638      	mov	r0, r7
 80030ce:	f7ff f9d5 	bl	800247c <indev_reset_check>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	f47f ad5c 	bne.w	8002b90 <lv_indev_read_timer_cb+0x110>
    i->proc.types.pointer.act_point.x = x;
 80030d8:	f8a4 b008 	strh.w	fp, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 80030dc:	4638      	mov	r0, r7
    i->proc.types.pointer.act_point.y = y;
 80030de:	f8a4 a00a 	strh.w	sl, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 80030e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d108      	bne.n	80030fc <lv_indev_read_timer_cb+0x67c>
 80030ea:	f7ff fb13 	bl	8002714 <indev_proc_press>
    if(indev_reset_check(&i->proc)) return;
 80030ee:	4638      	mov	r0, r7
 80030f0:	f7ff f9c4 	bl	800247c <indev_reset_check>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f43f ad3a 	beq.w	8002b6e <lv_indev_read_timer_cb+0xee>
 80030fa:	e549      	b.n	8002b90 <lv_indev_read_timer_cb+0x110>
    else indev_proc_release(&i->proc);
 80030fc:	f7ff f9ca 	bl	8002494 <indev_proc_release>
 8003100:	e7f5      	b.n	80030ee <lv_indev_read_timer_cb+0x66e>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8003102:	f001 0118 	and.w	r1, r1, #24
 8003106:	2908      	cmp	r1, #8
 8003108:	f47f ad17 	bne.w	8002b3a <lv_indev_read_timer_cb+0xba>
 800310c:	e50a      	b.n	8002b24 <lv_indev_read_timer_cb+0xa4>
 800310e:	bf00      	nop

08003110 <scroll_throw_predict_x.isra.0>:
    }
}



static lv_coord_t scroll_throw_predict_y(_lv_indev_proc_t * proc)
 8003110:	b510      	push	{r4, lr}
 8003112:	4604      	mov	r4, r0
{
    lv_coord_t y =  proc->types.pointer.scroll_throw_vect.y;
    lv_coord_t move = 0;

    lv_indev_t * indev_act = lv_indev_get_act();
 8003114:	f7ff fa1e 	bl	8002554 <lv_indev_get_act>
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8003118:	6803      	ldr	r3, [r0, #0]

    while(y) {
        move += y;
        y = y * (100 - scroll_throw) / 100;
 800311a:	2264      	movs	r2, #100	; 0x64
    lv_coord_t move = 0;
 800311c:	2000      	movs	r0, #0
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 800311e:	7e5b      	ldrb	r3, [r3, #25]
        y = y * (100 - scroll_throw) / 100;
 8003120:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
    while(y) {
 8003124:	b904      	cbnz	r4, 8003128 <scroll_throw_predict_x.isra.0+0x18>
    }
    return move;
}
 8003126:	bd10      	pop	{r4, pc}
        move += y;
 8003128:	4420      	add	r0, r4
        y = y * (100 - scroll_throw) / 100;
 800312a:	435c      	muls	r4, r3
 800312c:	fb94 f4f2 	sdiv	r4, r4, r2
        move += y;
 8003130:	b200      	sxth	r0, r0
        y = y * (100 - scroll_throw) / 100;
 8003132:	b224      	sxth	r4, r4
 8003134:	e7f6      	b.n	8003124 <scroll_throw_predict_x.isra.0+0x14>

08003136 <elastic_diff>:
    }
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end, lv_dir_t dir)
{
 8003136:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313a:	460c      	mov	r4, r1
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 800313c:	2120      	movs	r1, #32
{
 800313e:	4683      	mov	fp, r0
 8003140:	4690      	mov	r8, r2
 8003142:	461f      	mov	r7, r3
 8003144:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8003148:	f000 feeb 	bl	8003f22 <lv_obj_has_flag>
 800314c:	2800      	cmp	r0, #0
 800314e:	f000 80ad 	beq.w	80032ac <elastic_diff+0x176>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8003152:	2d03      	cmp	r5, #3
 8003154:	4658      	mov	r0, fp
 8003156:	d12a      	bne.n	80031ae <elastic_diff+0x78>
 8003158:	f002 ff5c 	bl	8006014 <lv_obj_get_scroll_snap_x>
 800315c:	4681      	mov	r9, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 800315e:	f7ff fa9f 	bl	80026a0 <lv_indev_get_obj_act>
        lv_coord_t snap_point = 0;
        lv_coord_t act_obj_point = 0;

        if(dir == LV_DIR_HOR) {
 8003162:	2d03      	cmp	r5, #3
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8003164:	4682      	mov	sl, r0
        if(dir == LV_DIR_HOR) {
 8003166:	d14b      	bne.n	8003200 <elastic_diff+0xca>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003168:	f241 0212 	movw	r2, #4114	; 0x1012
 800316c:	2100      	movs	r1, #0
 800316e:	4658      	mov	r0, fp
 8003170:	f004 f9aa 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003174:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003178:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800317a:	2100      	movs	r1, #0
 800317c:	4658      	mov	r0, fp
 800317e:	f004 f9a3 	bl	80074c8 <lv_obj_get_style_prop>
            lv_coord_t pad_left = lv_obj_get_style_pad_left(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_right = lv_obj_get_style_pad_right(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 8003182:	f1b9 0f02 	cmp.w	r9, #2
 8003186:	d034      	beq.n	80031f2 <elastic_diff+0xbc>
 8003188:	f1b9 0f03 	cmp.w	r9, #3
 800318c:	d012      	beq.n	80031b4 <elastic_diff+0x7e>
 800318e:	f1b9 0f01 	cmp.w	r9, #1
 8003192:	d16f      	bne.n	8003274 <elastic_diff+0x13e>
            case LV_SCROLL_SNAP_CENTER:
                snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
                act_obj_point = lv_area_get_width(&act_obj->coords) / 2 + act_obj->coords.x1;
                break;
            case LV_SCROLL_SNAP_START:
                snap_point = scroll_obj->coords.x1 + pad_left;
 8003194:	f8bb 5014 	ldrh.w	r5, [fp, #20]
 8003198:	4435      	add	r5, r6
                act_obj_point = act_obj->coords.x1;
 800319a:	f9ba 6014 	ldrsh.w	r6, [sl, #20]
                snap_point = scroll_obj->coords.x1 + pad_left;
 800319e:	b22d      	sxth	r5, r5
                act_obj_point = act_obj->coords.y2;
                break;
            }
        }

        if(scroll_end < 0) {
 80031a0:	2f00      	cmp	r7, #0
 80031a2:	da79      	bge.n	8003298 <elastic_diff+0x162>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 80031a4:	42b5      	cmp	r5, r6
 80031a6:	da67      	bge.n	8003278 <elastic_diff+0x142>
        if(scroll_end + diff < 0) diff = - scroll_end;
        if(scroll_start - diff < 0) diff = scroll_start;
    }

    return diff;
}
 80031a8:	4620      	mov	r0, r4
 80031aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 80031ae:	f002 ff37 	bl	8006020 <lv_obj_get_scroll_snap_y>
 80031b2:	e7d3      	b.n	800315c <elastic_diff+0x26>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80031b4:	f8bb 3018 	ldrh.w	r3, [fp, #24]
                snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 80031b8:	b235      	sxth	r5, r6
 80031ba:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 80031be:	3301      	adds	r3, #1
 80031c0:	4416      	add	r6, r2
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	1b5b      	subs	r3, r3, r5
 80031c8:	b205      	sxth	r5, r0
 80031ca:	1b5d      	subs	r5, r3, r5
 80031cc:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 80031d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031d4:	eb06 0565 	add.w	r5, r6, r5, asr #1
 80031d8:	f8ba 6014 	ldrh.w	r6, [sl, #20]
 80031dc:	b22d      	sxth	r5, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80031de:	3301      	adds	r3, #1
 80031e0:	1b9b      	subs	r3, r3, r6
                act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 80031e2:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80031e6:	fa02 f383 	sxtah	r3, r2, r3
 80031ea:	eb06 0663 	add.w	r6, r6, r3, asr #1
 80031ee:	b236      	sxth	r6, r6
                break;
 80031f0:	e7d6      	b.n	80031a0 <elastic_diff+0x6a>
                snap_point = scroll_obj->coords.x2 - pad_right;
 80031f2:	f8bb 5018 	ldrh.w	r5, [fp, #24]
                act_obj_point = act_obj->coords.x2;
 80031f6:	f9ba 6018 	ldrsh.w	r6, [sl, #24]
                snap_point = scroll_obj->coords.x2 - pad_right;
 80031fa:	1a2d      	subs	r5, r5, r0
 80031fc:	b22d      	sxth	r5, r5
                break;
 80031fe:	e7cf      	b.n	80031a0 <elastic_diff+0x6a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003200:	f241 0210 	movw	r2, #4112	; 0x1010
 8003204:	2100      	movs	r1, #0
 8003206:	4658      	mov	r0, fp
 8003208:	f004 f95e 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800320c:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003210:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003212:	2100      	movs	r1, #0
 8003214:	4658      	mov	r0, fp
 8003216:	f004 f957 	bl	80074c8 <lv_obj_get_style_prop>
            switch(snap) {
 800321a:	f1b9 0f02 	cmp.w	r9, #2
 800321e:	d022      	beq.n	8003266 <elastic_diff+0x130>
 8003220:	f1b9 0f03 	cmp.w	r9, #3
 8003224:	d009      	beq.n	800323a <elastic_diff+0x104>
 8003226:	f1b9 0f01 	cmp.w	r9, #1
 800322a:	d123      	bne.n	8003274 <elastic_diff+0x13e>
                snap_point = scroll_obj->coords.y1 + pad_top;
 800322c:	f8bb 5016 	ldrh.w	r5, [fp, #22]
 8003230:	4435      	add	r5, r6
                act_obj_point = act_obj->coords.y1;
 8003232:	f9ba 6016 	ldrsh.w	r6, [sl, #22]
                snap_point = scroll_obj->coords.y1 + pad_top;
 8003236:	b22d      	sxth	r5, r5
                break;
 8003238:	e7b2      	b.n	80031a0 <elastic_diff+0x6a>
 800323a:	f8bb 301a 	ldrh.w	r3, [fp, #26]
                snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 800323e:	b235      	sxth	r5, r6
 8003240:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 8003244:	3301      	adds	r3, #1
 8003246:	4416      	add	r6, r2
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	b21b      	sxth	r3, r3
 800324c:	1b5b      	subs	r3, r3, r5
 800324e:	b205      	sxth	r5, r0
 8003250:	1b5d      	subs	r5, r3, r5
 8003252:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 8003256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800325a:	eb06 0565 	add.w	r5, r6, r5, asr #1
 800325e:	f8ba 6016 	ldrh.w	r6, [sl, #22]
 8003262:	b22d      	sxth	r5, r5
 8003264:	e7bb      	b.n	80031de <elastic_diff+0xa8>
                snap_point = scroll_obj->coords.y2 - pad_bottom;
 8003266:	f8bb 501a 	ldrh.w	r5, [fp, #26]
                act_obj_point = act_obj->coords.y2;
 800326a:	f9ba 601a 	ldrsh.w	r6, [sl, #26]
                snap_point = scroll_obj->coords.y2 - pad_bottom;
 800326e:	1a2d      	subs	r5, r5, r0
 8003270:	b22d      	sxth	r5, r5
                break;
 8003272:	e795      	b.n	80031a0 <elastic_diff+0x6a>
        if(scroll_end < 0) {
 8003274:	2f00      	cmp	r7, #0
 8003276:	da0d      	bge.n	8003294 <elastic_diff+0x15e>
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8003278:	2c00      	cmp	r4, #0
 800327a:	bfbc      	itt	lt
 800327c:	3c02      	sublt	r4, #2
 800327e:	b224      	sxthlt	r4, r4
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8003280:	2c00      	cmp	r4, #0
 8003282:	bfc4      	itt	gt
 8003284:	3402      	addgt	r4, #2
 8003286:	b224      	sxthgt	r4, r4
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8003288:	2c00      	cmp	r4, #0
 800328a:	bfb8      	it	lt
 800328c:	3403      	addlt	r4, #3
 800328e:	f344 048f 	sbfx	r4, r4, #2, #16
 8003292:	e789      	b.n	80031a8 <elastic_diff+0x72>
 8003294:	2600      	movs	r6, #0
 8003296:	4635      	mov	r5, r6
        else if(scroll_start < 0) {
 8003298:	f1b8 0f00 	cmp.w	r8, #0
 800329c:	da84      	bge.n	80031a8 <elastic_diff+0x72>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 800329e:	f1b9 0f00 	cmp.w	r9, #0
 80032a2:	d0e9      	beq.n	8003278 <elastic_diff+0x142>
 80032a4:	42b5      	cmp	r5, r6
 80032a6:	f73f af7f 	bgt.w	80031a8 <elastic_diff+0x72>
 80032aa:	e7e5      	b.n	8003278 <elastic_diff+0x142>
        if(scroll_end + diff < 0) diff = - scroll_end;
 80032ac:	42e7      	cmn	r7, r4
 80032ae:	bf44      	itt	mi
 80032b0:	427c      	negmi	r4, r7
 80032b2:	b224      	sxthmi	r4, r4
        if(scroll_start - diff < 0) diff = scroll_start;
 80032b4:	eba8 0304 	sub.w	r3, r8, r4
 80032b8:	ea34 0423 	bics.w	r4, r4, r3, asr #32
 80032bc:	bf28      	it	cs
 80032be:	4644      	movcs	r4, r8
 80032c0:	e772      	b.n	80031a8 <elastic_diff+0x72>

080032c2 <find_snap_point_x>:
{
 80032c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	4604      	mov	r4, r0
 80032ca:	469b      	mov	fp, r3
 80032cc:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 80032d0:	f002 fea0 	bl	8006014 <lv_obj_get_scroll_snap_x>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 80032d4:	4605      	mov	r5, r0
 80032d6:	b918      	cbnz	r0, 80032e0 <find_snap_point_x+0x1e>
 80032d8:	2000      	movs	r0, #0
}
 80032da:	b005      	add	sp, #20
 80032dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80032e0:	f241 0212 	movw	r2, #4114	; 0x1012
 80032e4:	2100      	movs	r1, #0
 80032e6:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80032e8:	2700      	movs	r7, #0
 80032ea:	f004 f8ed 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80032ee:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 80032f2:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80032f4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80032f6:	2100      	movs	r1, #0
 80032f8:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 80032fa:	9301      	str	r3, [sp, #4]
    lv_coord_t dist = LV_COORD_MAX;
 80032fc:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003300:	f004 f8e2 	bl	80074c8 <lv_obj_get_style_prop>
 8003304:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8003306:	b203      	sxth	r3, r0
 8003308:	9300      	str	r3, [sp, #0]
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800330a:	4620      	mov	r0, r4
 800330c:	f004 fc38 	bl	8007b80 <lv_obj_get_child_cnt>
 8003310:	42b8      	cmp	r0, r7
 8003312:	d806      	bhi.n	8003322 <find_snap_point_x+0x60>
    return dist == LV_COORD_MAX ? 0: -dist;
 8003314:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
 8003318:	d0de      	beq.n	80032d8 <find_snap_point_x+0x16>
 800331a:	f1c9 0000 	rsb	r0, r9, #0
 800331e:	b200      	sxth	r0, r0
 8003320:	e7db      	b.n	80032da <find_snap_point_x+0x18>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8003322:	4639      	mov	r1, r7
 8003324:	4620      	mov	r0, r4
 8003326:	f004 fc1c 	bl	8007b62 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800332a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 800332e:	4682      	mov	sl, r0
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003330:	f000 fdfe 	bl	8003f30 <lv_obj_has_flag_any>
 8003334:	bb40      	cbnz	r0, 8003388 <find_snap_point_x+0xc6>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPABLE)) {
 8003336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800333a:	4650      	mov	r0, sl
 800333c:	f000 fdf1 	bl	8003f22 <lv_obj_has_flag>
 8003340:	b310      	cbz	r0, 8003388 <find_snap_point_x+0xc6>
            switch(align) {
 8003342:	2d02      	cmp	r5, #2
 8003344:	d022      	beq.n	800338c <find_snap_point_x+0xca>
 8003346:	2d03      	cmp	r5, #3
 8003348:	d026      	beq.n	8003398 <find_snap_point_x+0xd6>
 800334a:	2d01      	cmp	r5, #1
 800334c:	d11c      	bne.n	8003388 <find_snap_point_x+0xc6>
                x_parent = obj->coords.x1 + pad_left;
 800334e:	8aa3      	ldrh	r3, [r4, #20]
                x_child = child->coords.x1;
 8003350:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
                x_parent = obj->coords.x1 + pad_left;
 8003354:	4433      	add	r3, r6
            x_child += ofs;
 8003356:	4458      	add	r0, fp
            if(x_child >= min && x_child <= max) {
 8003358:	9a02      	ldr	r2, [sp, #8]
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 800335a:	b21b      	sxth	r3, r3
            x_child += ofs;
 800335c:	b281      	uxth	r1, r0
 800335e:	b200      	sxth	r0, r0
            if(x_child >= min && x_child <= max) {
 8003360:	4290      	cmp	r0, r2
 8003362:	db11      	blt.n	8003388 <find_snap_point_x+0xc6>
 8003364:	9a03      	ldr	r2, [sp, #12]
 8003366:	4290      	cmp	r0, r2
 8003368:	dc0e      	bgt.n	8003388 <find_snap_point_x+0xc6>
                lv_coord_t x = x_child -  x_parent;
 800336a:	1acb      	subs	r3, r1, r3
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 800336c:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
                lv_coord_t x = x_child -  x_parent;
 8003370:	b21b      	sxth	r3, r3
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8003372:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8003376:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 800337a:	b289      	uxth	r1, r1
 800337c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8003380:	b280      	uxth	r0, r0
 8003382:	4288      	cmp	r0, r1
 8003384:	bf38      	it	cc
 8003386:	4699      	movcc	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003388:	3701      	adds	r7, #1
 800338a:	e7be      	b.n	800330a <find_snap_point_x+0x48>
                x_parent = obj->coords.x2 - pad_right;
 800338c:	8b23      	ldrh	r3, [r4, #24]
                x_child = child->coords.x2;
 800338e:	f9ba 0018 	ldrsh.w	r0, [sl, #24]
                x_parent = obj->coords.x2 - pad_right;
 8003392:	eba3 0308 	sub.w	r3, r3, r8
 8003396:	e7de      	b.n	8003356 <find_snap_point_x+0x94>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003398:	f8ba 3018 	ldrh.w	r3, [sl, #24]
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 800339c:	f8ba 0014 	ldrh.w	r0, [sl, #20]
 80033a0:	3301      	adds	r3, #1
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 80033a2:	9a01      	ldr	r2, [sp, #4]
 80033a4:	1a1b      	subs	r3, r3, r0
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 80033a6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80033aa:	fa01 f383 	sxtah	r3, r1, r3
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 80033ae:	8aa1      	ldrh	r1, [r4, #20]
                x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 80033b0:	eb00 0363 	add.w	r3, r0, r3, asr #1
 80033b4:	b218      	sxth	r0, r3
 80033b6:	8b23      	ldrh	r3, [r4, #24]
 80033b8:	3301      	adds	r3, #1
 80033ba:	1a5b      	subs	r3, r3, r1
                x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 80033bc:	b21b      	sxth	r3, r3
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	9a00      	ldr	r2, [sp, #0]
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 80033c8:	198b      	adds	r3, r1, r6
 80033ca:	eb03 036c 	add.w	r3, r3, ip, asr #1
 80033ce:	e7c2      	b.n	8003356 <find_snap_point_x+0x94>

080033d0 <find_snap_point_y>:
{
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	b085      	sub	sp, #20
 80033d6:	4604      	mov	r4, r0
 80033d8:	469b      	mov	fp, r3
 80033da:	e9cd 1202 	strd	r1, r2, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 80033de:	f002 fe1f 	bl	8006020 <lv_obj_get_scroll_snap_y>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 80033e2:	4605      	mov	r5, r0
 80033e4:	b918      	cbnz	r0, 80033ee <find_snap_point_y+0x1e>
 80033e6:	2000      	movs	r0, #0
}
 80033e8:	b005      	add	sp, #20
 80033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80033ee:	f241 0210 	movw	r2, #4112	; 0x1010
 80033f2:	2100      	movs	r1, #0
 80033f4:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80033f6:	2700      	movs	r7, #0
 80033f8:	f004 f866 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80033fc:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 8003400:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003402:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003404:	2100      	movs	r1, #0
 8003406:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 8003408:	9301      	str	r3, [sp, #4]
    lv_coord_t dist = LV_COORD_MAX;
 800340a:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800340e:	f004 f85b 	bl	80074c8 <lv_obj_get_style_prop>
 8003412:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8003414:	b203      	sxth	r3, r0
 8003416:	9300      	str	r3, [sp, #0]
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003418:	4620      	mov	r0, r4
 800341a:	f004 fbb1 	bl	8007b80 <lv_obj_get_child_cnt>
 800341e:	42b8      	cmp	r0, r7
 8003420:	d806      	bhi.n	8003430 <find_snap_point_y+0x60>
    return dist == LV_COORD_MAX ? 0 : -dist;
 8003422:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
 8003426:	d0de      	beq.n	80033e6 <find_snap_point_y+0x16>
 8003428:	f1c9 0000 	rsb	r0, r9, #0
 800342c:	b200      	sxth	r0, r0
 800342e:	e7db      	b.n	80033e8 <find_snap_point_y+0x18>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8003430:	4639      	mov	r1, r7
 8003432:	4620      	mov	r0, r4
 8003434:	f004 fb95 	bl	8007b62 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 800343c:	4682      	mov	sl, r0
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800343e:	f000 fd77 	bl	8003f30 <lv_obj_has_flag_any>
 8003442:	bb40      	cbnz	r0, 8003496 <find_snap_point_y+0xc6>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPABLE)) {
 8003444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003448:	4650      	mov	r0, sl
 800344a:	f000 fd6a 	bl	8003f22 <lv_obj_has_flag>
 800344e:	b310      	cbz	r0, 8003496 <find_snap_point_y+0xc6>
            switch(align) {
 8003450:	2d02      	cmp	r5, #2
 8003452:	d022      	beq.n	800349a <find_snap_point_y+0xca>
 8003454:	2d03      	cmp	r5, #3
 8003456:	d026      	beq.n	80034a6 <find_snap_point_y+0xd6>
 8003458:	2d01      	cmp	r5, #1
 800345a:	d11c      	bne.n	8003496 <find_snap_point_y+0xc6>
                y_parent = obj->coords.y1 + pad_top;
 800345c:	8ae3      	ldrh	r3, [r4, #22]
                y_child = child->coords.y1;
 800345e:	f9ba 0016 	ldrsh.w	r0, [sl, #22]
                y_parent = obj->coords.y1 + pad_top;
 8003462:	4433      	add	r3, r6
            y_child += ofs;
 8003464:	4458      	add	r0, fp
            if(y_child >= min && y_child <= max) {
 8003466:	9a02      	ldr	r2, [sp, #8]
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8003468:	b21b      	sxth	r3, r3
            y_child += ofs;
 800346a:	b281      	uxth	r1, r0
 800346c:	b200      	sxth	r0, r0
            if(y_child >= min && y_child <= max) {
 800346e:	4290      	cmp	r0, r2
 8003470:	db11      	blt.n	8003496 <find_snap_point_y+0xc6>
 8003472:	9a03      	ldr	r2, [sp, #12]
 8003474:	4290      	cmp	r0, r2
 8003476:	dc0e      	bgt.n	8003496 <find_snap_point_y+0xc6>
                lv_coord_t y = y_child -  y_parent;
 8003478:	1acb      	subs	r3, r1, r3
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 800347a:	ea89 71e9 	eor.w	r1, r9, r9, asr #31
                lv_coord_t y = y_child -  y_parent;
 800347e:	b21b      	sxth	r3, r3
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8003480:	eba1 71e9 	sub.w	r1, r1, r9, asr #31
 8003484:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8003488:	b289      	uxth	r1, r1
 800348a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800348e:	b280      	uxth	r0, r0
 8003490:	4288      	cmp	r0, r1
 8003492:	bf38      	it	cc
 8003494:	4699      	movcc	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8003496:	3701      	adds	r7, #1
 8003498:	e7be      	b.n	8003418 <find_snap_point_y+0x48>
                y_parent = obj->coords.y2 - pad_bottom;
 800349a:	8b63      	ldrh	r3, [r4, #26]
                y_child = child->coords.y2;
 800349c:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
                y_parent = obj->coords.y2 - pad_bottom;
 80034a0:	eba3 0308 	sub.w	r3, r3, r8
 80034a4:	e7de      	b.n	8003464 <find_snap_point_y+0x94>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80034a6:	f8ba 301a 	ldrh.w	r3, [sl, #26]
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 80034aa:	f8ba 0016 	ldrh.w	r0, [sl, #22]
 80034ae:	3301      	adds	r3, #1
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 80034b0:	9a01      	ldr	r2, [sp, #4]
 80034b2:	1a1b      	subs	r3, r3, r0
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 80034b4:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 80034b8:	fa01 f383 	sxtah	r3, r1, r3
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 80034bc:	8ae1      	ldrh	r1, [r4, #22]
                y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 80034be:	eb00 0363 	add.w	r3, r0, r3, asr #1
 80034c2:	b218      	sxth	r0, r3
 80034c4:	8b63      	ldrh	r3, [r4, #26]
 80034c6:	3301      	adds	r3, #1
 80034c8:	1a5b      	subs	r3, r3, r1
                y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	9a00      	ldr	r2, [sp, #0]
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	eb03 7cd3 	add.w	ip, r3, r3, lsr #31
 80034d6:	198b      	adds	r3, r1, r6
 80034d8:	eb03 036c 	add.w	r3, r3, ip, asr #1
 80034dc:	e7c2      	b.n	8003464 <find_snap_point_y+0x94>
	...

080034e0 <_lv_indev_scroll_handler>:
{
 80034e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80034e4:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	4604      	mov	r4, r0
    if(scroll_obj == NULL) {
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	f040 81af 	bne.w	800384e <_lv_indev_scroll_handler+0x36e>
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 80034f0:	8a83      	ldrh	r3, [r0, #20]
    lv_dir_t dir_candidate = LV_DIR_NONE;
 80034f2:	46a9      	mov	r9, r5
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 80034f4:	8a02      	ldrh	r2, [r0, #16]
 80034f6:	4413      	add	r3, r2
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 80034f8:	8a42      	ldrh	r2, [r0, #18]
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 80034fa:	8283      	strh	r3, [r0, #20]
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 80034fc:	8ac3      	ldrh	r3, [r0, #22]
 80034fe:	4413      	add	r3, r2
 8003500:	82c3      	strh	r3, [r0, #22]
    lv_indev_t * indev_act = lv_indev_get_act();
 8003502:	f7ff f827 	bl	8002554 <lv_indev_get_act>
    lv_coord_t scroll_limit =  indev_act->driver->scroll_limit;
 8003506:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 8003508:	6a26      	ldr	r6, [r4, #32]
    lv_coord_t scroll_limit =  indev_act->driver->scroll_limit;
 800350a:	f893 a018 	ldrb.w	sl, [r3, #24]
 800350e:	46d3      	mov	fp, sl
                (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))
 8003510:	f1ca 0a00 	rsb	sl, sl, #0
    while(obj_act) {
 8003514:	2e00      	cmp	r6, #0
 8003516:	f000 815e 	beq.w	80037d6 <_lv_indev_scroll_handler+0x2f6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 800351a:	2110      	movs	r1, #16
 800351c:	4630      	mov	r0, r6
 800351e:	f000 fd00 	bl	8003f22 <lv_obj_has_flag>
 8003522:	4607      	mov	r7, r0
 8003524:	b960      	cbnz	r0, 8003540 <_lv_indev_scroll_handler+0x60>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN) == false) break;
 8003526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800352a:	4630      	mov	r0, r6
 800352c:	f000 fcf9 	bl	8003f22 <lv_obj_has_flag>
 8003530:	2800      	cmp	r0, #0
 8003532:	f000 8150 	beq.w	80037d6 <_lv_indev_scroll_handler+0x2f6>
        obj_act = lv_obj_get_parent(obj_act);
 8003536:	4630      	mov	r0, r6
 8003538:	f004 fb10 	bl	8007b5c <lv_obj_get_parent>
 800353c:	4606      	mov	r6, r0
 800353e:	e7e9      	b.n	8003514 <_lv_indev_scroll_handler+0x34>
        if(LV_ABS(proc->types.pointer.scroll_sum.x) > LV_ABS(proc->types.pointer.scroll_sum.y)) {
 8003540:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8003544:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8003548:	2a00      	cmp	r2, #0
 800354a:	bfb8      	it	lt
 800354c:	4252      	neglt	r2, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfb8      	it	lt
 8003552:	425b      	neglt	r3, r3
 8003554:	b292      	uxth	r2, r2
 8003556:	b29b      	uxth	r3, r3
 8003558:	429a      	cmp	r2, r3
            ver_en = true;
 800355a:	bf98      	it	ls
 800355c:	4680      	movls	r8, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 800355e:	4630      	mov	r0, r6
        bool hor_en = false;
 8003560:	bf94      	ite	ls
 8003562:	2700      	movls	r7, #0
        bool ver_en = false;
 8003564:	f04f 0800 	movhi.w	r8, #0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 8003568:	f002 fd4c 	bl	8006004 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 800356c:	f010 0f01 	tst.w	r0, #1
 8003570:	bf14      	ite	ne
 8003572:	4639      	movne	r1, r7
 8003574:	2100      	moveq	r1, #0
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003576:	f010 0f02 	tst.w	r0, #2
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 800357a:	9107      	str	r1, [sp, #28]
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 800357c:	bf14      	ite	ne
 800357e:	463a      	movne	r2, r7
 8003580:	2200      	moveq	r2, #0
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003582:	f010 0f04 	tst.w	r0, #4
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003586:	9206      	str	r2, [sp, #24]
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003588:	bf14      	ite	ne
 800358a:	4643      	movne	r3, r8
 800358c:	2300      	moveq	r3, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 800358e:	f010 0f08 	tst.w	r0, #8
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8003592:	4630      	mov	r0, r6
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003594:	9305      	str	r3, [sp, #20]
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8003596:	bf08      	it	eq
 8003598:	f04f 0800 	moveq.w	r8, #0
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 800359c:	f002 fd6a 	bl	8006074 <lv_obj_get_scroll_top>
 80035a0:	9002      	str	r0, [sp, #8]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 80035a2:	4630      	mov	r0, r6
 80035a4:	f002 fd68 	bl	8006078 <lv_obj_get_scroll_bottom>
 80035a8:	9003      	str	r0, [sp, #12]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 80035aa:	4630      	mov	r0, r6
 80035ac:	f002 fdb8 	bl	8006120 <lv_obj_get_scroll_left>
 80035b0:	9004      	str	r0, [sp, #16]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 80035b2:	4630      	mov	r0, r6
 80035b4:	f002 fe20 	bl	80061f8 <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 80035b8:	9b02      	ldr	r3, [sp, #8]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 80035ba:	4686      	mov	lr, r0
        if((st > 0 || sb > 0)  &&
 80035bc:	9907      	ldr	r1, [sp, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80035c4:	dc02      	bgt.n	80035cc <_lv_indev_scroll_handler+0xec>
 80035c6:	9803      	ldr	r0, [sp, #12]
 80035c8:	2800      	cmp	r0, #0
 80035ca:	dd0e      	ble.n	80035ea <_lv_indev_scroll_handler+0x10a>
 80035cc:	b11b      	cbz	r3, 80035d6 <_lv_indev_scroll_handler+0xf6>
                ((up_en    && proc->types.pointer.scroll_sum.y >= scroll_limit) ||
 80035ce:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80035d2:	45dc      	cmp	ip, fp
 80035d4:	da46      	bge.n	8003664 <_lv_indev_scroll_handler+0x184>
 80035d6:	f1b8 0f00 	cmp.w	r8, #0
 80035da:	d006      	beq.n	80035ea <_lv_indev_scroll_handler+0x10a>
                        (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit)))
 80035dc:	f9b4 c016 	ldrsh.w	ip, [r4, #22]
 80035e0:	45d4      	cmp	ip, sl
 80035e2:	bfdc      	itt	le
 80035e4:	4635      	movle	r5, r6
 80035e6:	f04f 090c 	movle.w	r9, #12
        if((sl > 0 || sr > 0)  &&
 80035ea:	9804      	ldr	r0, [sp, #16]
 80035ec:	2800      	cmp	r0, #0
 80035ee:	dc02      	bgt.n	80035f6 <_lv_indev_scroll_handler+0x116>
 80035f0:	f1be 0f00 	cmp.w	lr, #0
 80035f4:	dd0c      	ble.n	8003610 <_lv_indev_scroll_handler+0x130>
 80035f6:	b119      	cbz	r1, 8003600 <_lv_indev_scroll_handler+0x120>
                ((left_en    && proc->types.pointer.scroll_sum.x >=  scroll_limit) ||
 80035f8:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 80035fc:	45dc      	cmp	ip, fp
 80035fe:	da35      	bge.n	800366c <_lv_indev_scroll_handler+0x18c>
 8003600:	b132      	cbz	r2, 8003610 <_lv_indev_scroll_handler+0x130>
                        (right_en  && proc->types.pointer.scroll_sum.x <= - scroll_limit)))
 8003602:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8003606:	45d4      	cmp	ip, sl
 8003608:	bfdc      	itt	le
 800360a:	4635      	movle	r5, r6
 800360c:	f04f 0903 	movle.w	r9, #3
        if(st <= 0) up_en = false;
 8003610:	9802      	ldr	r0, [sp, #8]
 8003612:	2800      	cmp	r0, #0
        if(sb <= 0) down_en = false;
 8003614:	9803      	ldr	r0, [sp, #12]
        if(st <= 0) up_en = false;
 8003616:	bfd8      	it	le
 8003618:	2300      	movle	r3, #0
        if(sb <= 0) down_en = false;
 800361a:	2800      	cmp	r0, #0
        if(sl <= 0) left_en = false;
 800361c:	9804      	ldr	r0, [sp, #16]
        if(sb <= 0) down_en = false;
 800361e:	bfd8      	it	le
 8003620:	f04f 0800 	movle.w	r8, #0
        if(sl <= 0) left_en = false;
 8003624:	2800      	cmp	r0, #0
 8003626:	f340 8174 	ble.w	8003912 <_lv_indev_scroll_handler+0x432>
        if(sr <= 0) right_en = false;
 800362a:	f1be 0f00 	cmp.w	lr, #0
 800362e:	f340 80bf 	ble.w	80037b0 <_lv_indev_scroll_handler+0x2d0>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003632:	2900      	cmp	r1, #0
 8003634:	f040 80c0 	bne.w	80037b8 <_lv_indev_scroll_handler+0x2d8>
 8003638:	b122      	cbz	r2, 8003644 <_lv_indev_scroll_handler+0x164>
                (right_en && proc->types.pointer.scroll_sum.x <= - scroll_limit) ||
 800363a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800363e:	4552      	cmp	r2, sl
 8003640:	f340 80bf 	ble.w	80037c2 <_lv_indev_scroll_handler+0x2e2>
 8003644:	b123      	cbz	r3, 8003650 <_lv_indev_scroll_handler+0x170>
                (up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8003646:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800364a:	455b      	cmp	r3, fp
 800364c:	f280 80b9 	bge.w	80037c2 <_lv_indev_scroll_handler+0x2e2>
 8003650:	f1b8 0f00 	cmp.w	r8, #0
 8003654:	f43f af67 	beq.w	8003526 <_lv_indev_scroll_handler+0x46>
                (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))
 8003658:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800365c:	4553      	cmp	r3, sl
 800365e:	f73f af62 	bgt.w	8003526 <_lv_indev_scroll_handler+0x46>
 8003662:	e0ae      	b.n	80037c2 <_lv_indev_scroll_handler+0x2e2>
 8003664:	4635      	mov	r5, r6
            dir_candidate = LV_DIR_VER;
 8003666:	f04f 090c 	mov.w	r9, #12
 800366a:	e7be      	b.n	80035ea <_lv_indev_scroll_handler+0x10a>
 800366c:	4635      	mov	r5, r6
            dir_candidate = LV_DIR_HOR;
 800366e:	f04f 0903 	mov.w	r9, #3
 8003672:	e7cd      	b.n	8003610 <_lv_indev_scroll_handler+0x130>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 8003674:	4628      	mov	r0, r5
 8003676:	f002 fcd3 	bl	8006020 <lv_obj_get_scroll_snap_y>
 800367a:	2802      	cmp	r0, #2
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	d011      	beq.n	80036a6 <_lv_indev_scroll_handler+0x1c6>
 8003682:	2803      	cmp	r0, #3
 8003684:	d03a      	beq.n	80036fc <_lv_indev_scroll_handler+0x21c>
 8003686:	2801      	cmp	r0, #1
 8003688:	d14d      	bne.n	8003726 <_lv_indev_scroll_handler+0x246>
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 800368a:	8ae9      	ldrh	r1, [r5, #22]
 800368c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8003690:	4628      	mov	r0, r5
 8003692:	3101      	adds	r1, #1
 8003694:	b209      	sxth	r1, r1
 8003696:	f7ff fe9b 	bl	80033d0 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 800369a:	8aea      	ldrh	r2, [r5, #22]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 800369c:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 800369e:	3a01      	subs	r2, #1
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 80036a0:	2300      	movs	r3, #0
 80036a2:	b212      	sxth	r2, r2
 80036a4:	e00a      	b.n	80036bc <_lv_indev_scroll_handler+0x1dc>
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 80036a6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80036aa:	f9b5 101a 	ldrsh.w	r1, [r5, #26]
 80036ae:	4628      	mov	r0, r5
 80036b0:	f7ff fe8e 	bl	80033d0 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 80036b4:	2300      	movs	r3, #0
 80036b6:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 80036ba:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 80036bc:	4997      	ldr	r1, [pc, #604]	; (800391c <_lv_indev_scroll_handler+0x43c>)
 80036be:	4628      	mov	r0, r5
 80036c0:	f7ff fe86 	bl	80033d0 <find_snap_point_y>
 80036c4:	86e0      	strh	r0, [r4, #54]	; 0x36
        switch(lv_obj_get_scroll_snap_x(obj)) {
 80036c6:	4628      	mov	r0, r5
 80036c8:	f002 fca4 	bl	8006014 <lv_obj_get_scroll_snap_x>
 80036cc:	2802      	cmp	r0, #2
 80036ce:	d031      	beq.n	8003734 <_lv_indev_scroll_handler+0x254>
 80036d0:	2803      	cmp	r0, #3
 80036d2:	d03c      	beq.n	800374e <_lv_indev_scroll_handler+0x26e>
 80036d4:	2801      	cmp	r0, #1
 80036d6:	d152      	bne.n	800377e <_lv_indev_scroll_handler+0x29e>
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 80036d8:	2300      	movs	r3, #0
 80036da:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80036de:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
 80036e2:	4628      	mov	r0, r5
 80036e4:	f7ff fded 	bl	80032c2 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 80036e8:	2300      	movs	r3, #0
 80036ea:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 80036ee:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 80036f0:	498a      	ldr	r1, [pc, #552]	; (800391c <_lv_indev_scroll_handler+0x43c>)
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7ff fde5 	bl	80032c2 <find_snap_point_x>
 80036f8:	86a0      	strh	r0, [r4, #52]	; 0x34
            break;
 80036fa:	e088      	b.n	800380e <_lv_indev_scroll_handler+0x32e>
 80036fc:	8b6a      	ldrh	r2, [r5, #26]
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 80036fe:	4628      	mov	r0, r5
            lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 8003700:	8aee      	ldrh	r6, [r5, #22]
 8003702:	3201      	adds	r2, #1
 8003704:	1b92      	subs	r2, r2, r6
 8003706:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 800370a:	fa01 f282 	sxtah	r2, r1, r2
 800370e:	eb06 0662 	add.w	r6, r6, r2, asr #1
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8003712:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 8003716:	b2b6      	uxth	r6, r6
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8003718:	1c71      	adds	r1, r6, #1
 800371a:	b209      	sxth	r1, r1
 800371c:	f7ff fe58 	bl	80033d0 <find_snap_point_y>
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8003720:	1e72      	subs	r2, r6, #1
            proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8003722:	8660      	strh	r0, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8003724:	e7bc      	b.n	80036a0 <_lv_indev_scroll_handler+0x1c0>
            proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8003726:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800372a:	8663      	strh	r3, [r4, #50]	; 0x32
            proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 800372c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003730:	86e3      	strh	r3, [r4, #54]	; 0x36
            break;
 8003732:	e7c8      	b.n	80036c6 <_lv_indev_scroll_handler+0x1e6>
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 8003734:	2300      	movs	r3, #0
 8003736:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800373a:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
 800373e:	4628      	mov	r0, r5
 8003740:	f7ff fdbf 	bl	80032c2 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 8003744:	2300      	movs	r3, #0
 8003746:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 800374a:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 800374c:	e7d0      	b.n	80036f0 <_lv_indev_scroll_handler+0x210>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800374e:	8b2a      	ldrh	r2, [r5, #24]
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003750:	4628      	mov	r0, r5
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8003752:	8aae      	ldrh	r6, [r5, #20]
 8003754:	3201      	adds	r2, #1
 8003756:	1b92      	subs	r2, r2, r6
 8003758:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 800375c:	fa03 f282 	sxtah	r2, r3, r2
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003760:	2300      	movs	r3, #0
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8003762:	eb06 0662 	add.w	r6, r6, r2, asr #1
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003766:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 800376a:	b2b6      	uxth	r6, r6
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 800376c:	1c71      	adds	r1, r6, #1
 800376e:	b209      	sxth	r1, r1
 8003770:	f7ff fda7 	bl	80032c2 <find_snap_point_x>
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8003774:	1e72      	subs	r2, r6, #1
 8003776:	2300      	movs	r3, #0
            proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8003778:	8620      	strh	r0, [r4, #48]	; 0x30
            proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 800377a:	b212      	sxth	r2, r2
 800377c:	e7b8      	b.n	80036f0 <_lv_indev_scroll_handler+0x210>
            proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 800377e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003782:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8003784:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003788:	86a3      	strh	r3, [r4, #52]	; 0x34
 800378a:	e04a      	b.n	8003822 <_lv_indev_scroll_handler+0x342>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800378c:	f002 fc72 	bl	8006074 <lv_obj_get_scroll_top>
 8003790:	9002      	str	r0, [sp, #8]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003792:	4628      	mov	r0, r5
        lv_coord_t diff_x = 0;
 8003794:	2700      	movs	r7, #0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003796:	f002 fc6f 	bl	8006078 <lv_obj_get_scroll_bottom>
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 800379a:	210c      	movs	r1, #12
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800379c:	4603      	mov	r3, r0
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 800379e:	9a02      	ldr	r2, [sp, #8]
 80037a0:	9100      	str	r1, [sp, #0]
 80037a2:	4628      	mov	r0, r5
 80037a4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80037a8:	f7ff fcc5 	bl	8003136 <elastic_diff>
 80037ac:	4606      	mov	r6, r0
 80037ae:	e068      	b.n	8003882 <_lv_indev_scroll_handler+0x3a2>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 80037b0:	2900      	cmp	r1, #0
 80037b2:	f43f af47 	beq.w	8003644 <_lv_indev_scroll_handler+0x164>
        if(sr <= 0) right_en = false;
 80037b6:	2200      	movs	r2, #0
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 80037b8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80037bc:	4559      	cmp	r1, fp
 80037be:	f6ff af3b 	blt.w	8003638 <_lv_indev_scroll_handler+0x158>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 80037c2:	2f00      	cmp	r7, #0
 80037c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80037c8:	bf14      	ite	ne
 80037ca:	2203      	movne	r2, #3
 80037cc:	220c      	moveq	r2, #12
 80037ce:	f362 0303 	bfi	r3, r2, #0, #4
 80037d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(obj_candidate) {
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	f000 8098 	beq.w	800390c <_lv_indev_scroll_handler+0x42c>
        proc->types.pointer.scroll_dir = dir_candidate;
 80037dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	4628      	mov	r0, r5
        proc->types.pointer.scroll_obj = obj_candidate;
 80037e4:	62a5      	str	r5, [r4, #40]	; 0x28
        proc->types.pointer.scroll_dir = dir_candidate;
 80037e6:	f369 0303 	bfi	r3, r9, #0, #4
 80037ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        proc->types.pointer.scroll_sum.x = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	6163      	str	r3, [r4, #20]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 80037f2:	f000 fb96 	bl	8003f22 <lv_obj_has_flag>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	f47f af3c 	bne.w	8003674 <_lv_indev_scroll_handler+0x194>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 80037fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003800:	4a46      	ldr	r2, [pc, #280]	; (800391c <_lv_indev_scroll_handler+0x43c>)
 8003802:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003806:	4611      	mov	r1, r2
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	f013 fbf5 	bl	8016ff8 <lv_area_set>
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 800380e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8003812:	b913      	cbnz	r3, 800381a <_lv_indev_scroll_handler+0x33a>
 8003814:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003818:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 800381a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0b0      	beq.n	8003784 <_lv_indev_scroll_handler+0x2a4>
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8003822:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8003826:	b913      	cbnz	r3, 800382e <_lv_indev_scroll_handler+0x34e>
 8003828:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800382c:	8663      	strh	r3, [r4, #50]	; 0x32
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 800382e:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8003832:	b913      	cbnz	r3, 800383a <_lv_indev_scroll_handler+0x35a>
 8003834:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003838:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_indev_t * indev_act = lv_indev_get_act();
 800383a:	f7fe fe8b 	bl	8002554 <lv_indev_get_act>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, indev_act);
 800383e:	2109      	movs	r1, #9
        lv_indev_t * indev_act = lv_indev_get_act();
 8003840:	4602      	mov	r2, r0
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, indev_act);
 8003842:	4628      	mov	r0, r5
 8003844:	f7fe fbf0 	bl	8002028 <lv_event_send>
        if(proc->reset_query) return;
 8003848:	7863      	ldrb	r3, [r4, #1]
 800384a:	079a      	lsls	r2, r3, #30
 800384c:	d45e      	bmi.n	800390c <_lv_indev_scroll_handler+0x42c>
    if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05b      	beq.n	800390c <_lv_indev_scroll_handler+0x42c>
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8003854:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003858:	4628      	mov	r0, r5
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 800385a:	f006 060f 	and.w	r6, r6, #15
 800385e:	2e03      	cmp	r6, #3
 8003860:	d194      	bne.n	800378c <_lv_indev_scroll_handler+0x2ac>
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003862:	f002 fcc9 	bl	80061f8 <lv_obj_get_scroll_right>
 8003866:	9002      	str	r0, [sp, #8]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003868:	4628      	mov	r0, r5
 800386a:	f002 fc59 	bl	8006120 <lv_obj_get_scroll_left>
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 800386e:	9600      	str	r6, [sp, #0]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003870:	4602      	mov	r2, r0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003872:	9b02      	ldr	r3, [sp, #8]
 8003874:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8003878:	4628      	mov	r0, r5
 800387a:	f7ff fc5c 	bl	8003136 <elastic_diff>
        lv_coord_t diff_y = 0;
 800387e:	2600      	movs	r6, #0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003880:	4607      	mov	r7, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8003882:	4628      	mov	r0, r5
 8003884:	f002 fbbe 	bl	8006004 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8003888:	07c3      	lsls	r3, r0, #31
 800388a:	bf5c      	itt	pl
 800388c:	ea07 77e7 	andpl.w	r7, r7, r7, asr #31
 8003890:	b23f      	sxthpl	r7, r7
        if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8003892:	0781      	lsls	r1, r0, #30
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003894:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8003898:	bf5c      	itt	pl
 800389a:	ea27 77e7 	bicpl.w	r7, r7, r7, asr #31
 800389e:	b23f      	sxthpl	r7, r7
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 80038a0:	0742      	lsls	r2, r0, #29
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80038a2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80038a6:	bf5c      	itt	pl
 80038a8:	ea06 76e6 	andpl.w	r6, r6, r6, asr #31
 80038ac:	b236      	sxthpl	r6, r6
        if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 80038ae:	0703      	lsls	r3, r0, #28
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80038b0:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
 80038b4:	bf5c      	itt	pl
 80038b6:	ea26 76e6 	bicpl.w	r6, r6, r6, asr #31
 80038ba:	b236      	sxthpl	r6, r6
 80038bc:	18b3      	adds	r3, r6, r2
 80038be:	4283      	cmp	r3, r0
           *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 80038c0:	bfbc      	itt	lt
 80038c2:	1a80      	sublt	r0, r0, r2
 80038c4:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 80038c6:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 80038ca:	18b3      	adds	r3, r6, r2
 80038cc:	4283      	cmp	r3, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80038ce:	eb07 0301 	add.w	r3, r7, r1
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 80038d2:	bfc4      	itt	gt
 80038d4:	1a80      	subgt	r0, r0, r2
 80038d6:	b206      	sxthgt	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80038d8:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80038dc:	4283      	cmp	r3, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 80038de:	4632      	mov	r2, r6
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 80038e0:	bfbc      	itt	lt
 80038e2:	1a40      	sublt	r0, r0, r1
 80038e4:	b207      	sxthlt	r7, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 80038e6:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	4283      	cmp	r3, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 80038ee:	f04f 0300 	mov.w	r3, #0
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80038f2:	bfc4      	itt	gt
 80038f4:	1a40      	subgt	r0, r0, r1
 80038f6:	b207      	sxthgt	r7, r0
        lv_obj_scroll_by(scroll_obj, diff_x, diff_y, LV_ANIM_OFF);
 80038f8:	4628      	mov	r0, r5
 80038fa:	4639      	mov	r1, r7
 80038fc:	f002 fd00 	bl	8006300 <lv_obj_scroll_by>
        proc->types.pointer.scroll_sum.x += diff_x;
 8003900:	8aa1      	ldrh	r1, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 8003902:	8ae2      	ldrh	r2, [r4, #22]
        proc->types.pointer.scroll_sum.x += diff_x;
 8003904:	440f      	add	r7, r1
        proc->types.pointer.scroll_sum.y += diff_y;
 8003906:	4416      	add	r6, r2
        proc->types.pointer.scroll_sum.x += diff_x;
 8003908:	82a7      	strh	r7, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 800390a:	82e6      	strh	r6, [r4, #22]
}
 800390c:	b009      	add	sp, #36	; 0x24
 800390e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(sr <= 0) right_en = false;
 8003912:	f1be 0f00 	cmp.w	lr, #0
 8003916:	f73f ae8f 	bgt.w	8003638 <_lv_indev_scroll_handler+0x158>
 800391a:	e693      	b.n	8003644 <_lv_indev_scroll_handler+0x164>
 800391c:	ffffa000 	.word	0xffffa000

08003920 <_lv_indev_scroll_throw_handler>:
{
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8003924:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 8003926:	b085      	sub	sp, #20
 8003928:	4604      	mov	r4, r0
    if(scroll_obj == NULL) return;
 800392a:	2d00      	cmp	r5, #0
 800392c:	f000 8083 	beq.w	8003a36 <_lv_indev_scroll_throw_handler+0x116>
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 8003930:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	d07e      	beq.n	8003a36 <_lv_indev_scroll_throw_handler+0x116>
    lv_indev_t * indev_act = lv_indev_get_act();
 8003938:	f7fe fe0c 	bl	8002554 <lv_indev_get_act>
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 800393c:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 800393e:	4681      	mov	r9, r0
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4628      	mov	r0, r5
    lv_coord_t scroll_throw =  indev_act->driver->scroll_throw;
 8003944:	f893 a019 	ldrb.w	sl, [r3, #25]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8003948:	f000 faeb 	bl	8003f22 <lv_obj_has_flag>
 800394c:	b900      	cbnz	r0, 8003950 <_lv_indev_scroll_throw_handler+0x30>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800394e:	61a0      	str	r0, [r4, #24]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 8003950:	4628      	mov	r0, r5
 8003952:	f002 fb5f 	bl	8006014 <lv_obj_get_scroll_snap_x>
 8003956:	4607      	mov	r7, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8003958:	4628      	mov	r0, r5
 800395a:	f002 fb61 	bl	8006020 <lv_obj_get_scroll_snap_y>
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 800395e:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8003962:	4680      	mov	r8, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 8003964:	f006 060f 	and.w	r6, r6, #15
 8003968:	2e0c      	cmp	r6, #12
 800396a:	f040 8087 	bne.w	8003a7c <_lv_indev_scroll_throw_handler+0x15c>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800396e:	f04f 0b00 	mov.w	fp, #0
 8003972:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
 8003976:	f8a4 b018 	strh.w	fp, [r4, #24]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 800397a:	f1b8 0f00 	cmp.w	r8, #0
 800397e:	d15d      	bne.n	8003a3c <_lv_indev_scroll_throw_handler+0x11c>
                    proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 8003980:	f1ca 0a64 	rsb	sl, sl, #100	; 0x64
 8003984:	fb00 f00a 	mul.w	r0, r0, sl
 8003988:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800398c:	fb90 f0fa 	sdiv	r0, r0, sl
            proc->types.pointer.scroll_throw_vect.y =
 8003990:	8360      	strh	r0, [r4, #26]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003992:	4628      	mov	r0, r5
 8003994:	f002 fb70 	bl	8006078 <lv_obj_get_scroll_bottom>
 8003998:	9003      	str	r0, [sp, #12]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800399a:	4628      	mov	r0, r5
 800399c:	f002 fb6a 	bl	8006074 <lv_obj_get_scroll_top>
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 80039a0:	9b03      	ldr	r3, [sp, #12]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 80039a2:	4602      	mov	r2, r0
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 80039a4:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 80039a8:	4628      	mov	r0, r5
 80039aa:	9600      	str	r6, [sp, #0]
 80039ac:	f7ff fbc3 	bl	8003136 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 80039b0:	4643      	mov	r3, r8
             proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb, LV_DIR_VER);
 80039b2:	4602      	mov	r2, r0
 80039b4:	8360      	strh	r0, [r4, #26]
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 80039b6:	2100      	movs	r1, #0
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 80039b8:	4628      	mov	r0, r5
 80039ba:	f002 fca1 	bl	8006300 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 80039be:	69a3      	ldr	r3, [r4, #24]
 80039c0:	bbcb      	cbnz	r3, 8003a36 <_lv_indev_scroll_throw_handler+0x116>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 80039c2:	f1b8 0f00 	cmp.w	r8, #0
 80039c6:	d112      	bne.n	80039ee <_lv_indev_scroll_throw_handler+0xce>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 80039c8:	4628      	mov	r0, r5
 80039ca:	f002 fb53 	bl	8006074 <lv_obj_get_scroll_top>
 80039ce:	4606      	mov	r6, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 80039d0:	4628      	mov	r0, r5
 80039d2:	f002 fb51 	bl	8006078 <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 80039d6:	2e00      	cmp	r6, #0
 80039d8:	f300 8096 	bgt.w	8003b08 <_lv_indev_scroll_throw_handler+0x1e8>
 80039dc:	2800      	cmp	r0, #0
 80039de:	dd06      	ble.n	80039ee <_lv_indev_scroll_throw_handler+0xce>
                if(st < 0) {
 80039e0:	b12e      	cbz	r6, 80039ee <_lv_indev_scroll_throw_handler+0xce>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 80039e2:	2301      	movs	r3, #1
 80039e4:	4632      	mov	r2, r6
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 80039e6:	4641      	mov	r1, r8
 80039e8:	4628      	mov	r0, r5
 80039ea:	f002 fc89 	bl	8006300 <lv_obj_scroll_by>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 80039ee:	b997      	cbnz	r7, 8003a16 <_lv_indev_scroll_throw_handler+0xf6>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 80039f0:	4628      	mov	r0, r5
 80039f2:	f002 fb95 	bl	8006120 <lv_obj_get_scroll_left>
 80039f6:	4606      	mov	r6, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 80039f8:	4628      	mov	r0, r5
 80039fa:	f002 fbfd 	bl	80061f8 <lv_obj_get_scroll_right>
            if (sl > 0 || sr > 0) {
 80039fe:	2e00      	cmp	r6, #0
 8003a00:	f300 8089 	bgt.w	8003b16 <_lv_indev_scroll_throw_handler+0x1f6>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	dd06      	ble.n	8003a16 <_lv_indev_scroll_throw_handler+0xf6>
                if(sl < 0) {
 8003a08:	b12e      	cbz	r6, 8003a16 <_lv_indev_scroll_throw_handler+0xf6>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	463a      	mov	r2, r7
 8003a0e:	4631      	mov	r1, r6
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 8003a10:	4628      	mov	r0, r5
 8003a12:	f002 fc75 	bl	8006300 <lv_obj_scroll_by>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 8003a16:	464a      	mov	r2, r9
 8003a18:	210a      	movs	r1, #10
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f7fe fb04 	bl	8002028 <lv_event_send>
        if(proc->reset_query) return;
 8003a20:	7863      	ldrb	r3, [r4, #1]
 8003a22:	f013 0302 	ands.w	r3, r3, #2
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 8003a26:	bf01      	itttt	eq
 8003a28:	f894 203c 	ldrbeq.w	r2, [r4, #60]	; 0x3c
        proc->types.pointer.scroll_obj = NULL;
 8003a2c:	62a3      	streq	r3, [r4, #40]	; 0x28
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 8003a2e:	f363 0203 	bfieq	r2, r3, #0, #4
 8003a32:	f884 203c 	strbeq.w	r2, [r4, #60]	; 0x3c
}
 8003a36:	b005      	add	sp, #20
 8003a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 8003a3c:	f7ff fb68 	bl	8003110 <scroll_throw_predict_x.isra.0>
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003a40:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 8003a44:	4606      	mov	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003a46:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8003a4a:	4937      	ldr	r1, [pc, #220]	; (8003b28 <_lv_indev_scroll_throw_handler+0x208>)
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003a4c:	18f2      	adds	r2, r6, r3
            proc->types.pointer.scroll_throw_vect.y = 0;
 8003a4e:	f8a4 b01a 	strh.w	fp, [r4, #26]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003a52:	4282      	cmp	r2, r0
           *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8003a54:	bfbc      	itt	lt
 8003a56:	1ac0      	sublt	r0, r0, r3
 8003a58:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8003a5a:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8003a5e:	18f2      	adds	r2, r6, r3
 8003a60:	4282      	cmp	r2, r0
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8003a62:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8003a66:	bfc4      	itt	gt
 8003a68:	1ac0      	subgt	r0, r0, r3
 8003a6a:	b206      	sxthgt	r6, r0
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	4633      	mov	r3, r6
 8003a70:	f7ff fcae 	bl	80033d0 <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8003a74:	1832      	adds	r2, r6, r0
 8003a76:	2301      	movs	r3, #1
 8003a78:	b212      	sxth	r2, r2
 8003a7a:	e79c      	b.n	80039b6 <_lv_indev_scroll_throw_handler+0x96>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8003a7c:	2e03      	cmp	r6, #3
 8003a7e:	d19e      	bne.n	80039be <_lv_indev_scroll_throw_handler+0x9e>
        proc->types.pointer.scroll_throw_vect.y = 0;
 8003a80:	f04f 0b00 	mov.w	fp, #0
 8003a84:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8003a88:	f8a4 b01a 	strh.w	fp, [r4, #26]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 8003a8c:	b9df      	cbnz	r7, 8003ac6 <_lv_indev_scroll_throw_handler+0x1a6>
                    proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 8003a8e:	f1ca 0a64 	rsb	sl, sl, #100	; 0x64
 8003a92:	2364      	movs	r3, #100	; 0x64
 8003a94:	fb00 f00a 	mul.w	r0, r0, sl
 8003a98:	fb90 f0f3 	sdiv	r0, r0, r3
            proc->types.pointer.scroll_throw_vect.x =
 8003a9c:	8320      	strh	r0, [r4, #24]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f002 fb3e 	bl	8006120 <lv_obj_get_scroll_left>
 8003aa4:	9003      	str	r0, [sp, #12]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f002 fba6 	bl	80061f8 <lv_obj_get_scroll_right>
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003aac:	9a03      	ldr	r2, [sp, #12]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003aae:	4603      	mov	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003ab0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	9600      	str	r6, [sp, #0]
 8003ab8:	f7ff fb3d 	bl	8003136 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003abc:	463b      	mov	r3, r7
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003abe:	4601      	mov	r1, r0
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003ac0:	463a      	mov	r2, r7
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl ,sr, LV_DIR_HOR);
 8003ac2:	8320      	strh	r0, [r4, #24]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8003ac4:	e778      	b.n	80039b8 <_lv_indev_scroll_throw_handler+0x98>
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 8003ac6:	f7ff fb23 	bl	8003110 <scroll_throw_predict_x.isra.0>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003aca:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 8003ace:	4606      	mov	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003ad0:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8003ad4:	4914      	ldr	r1, [pc, #80]	; (8003b28 <_lv_indev_scroll_throw_handler+0x208>)
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003ad6:	18f2      	adds	r2, r6, r3
            proc->types.pointer.scroll_throw_vect.x = 0;
 8003ad8:	f8a4 b018 	strh.w	fp, [r4, #24]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003adc:	4282      	cmp	r2, r0
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8003ade:	bfbc      	itt	lt
 8003ae0:	1ac0      	sublt	r0, r0, r3
 8003ae2:	b206      	sxthlt	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8003ae4:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8003ae8:	18f2      	adds	r2, r6, r3
 8003aea:	4282      	cmp	r2, r0
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8003aec:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8003af0:	bfc4      	itt	gt
 8003af2:	1ac0      	subgt	r0, r0, r3
 8003af4:	b206      	sxthgt	r6, r0
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8003af6:	4628      	mov	r0, r5
 8003af8:	4633      	mov	r3, r6
 8003afa:	f7ff fbe2 	bl	80032c2 <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 8003afe:	4430      	add	r0, r6
 8003b00:	2301      	movs	r3, #1
 8003b02:	2200      	movs	r2, #0
 8003b04:	b201      	sxth	r1, r0
 8003b06:	e757      	b.n	80039b8 <_lv_indev_scroll_throw_handler+0x98>
                else if(sb < 0) {
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	f6bf af70 	bge.w	80039ee <_lv_indev_scroll_throw_handler+0xce>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 8003b0e:	4240      	negs	r0, r0
 8003b10:	2301      	movs	r3, #1
 8003b12:	b202      	sxth	r2, r0
 8003b14:	e767      	b.n	80039e6 <_lv_indev_scroll_throw_handler+0xc6>
                else if(sr < 0) {
 8003b16:	2800      	cmp	r0, #0
 8003b18:	f6bf af7d 	bge.w	8003a16 <_lv_indev_scroll_throw_handler+0xf6>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 8003b1c:	4240      	negs	r0, r0
 8003b1e:	2301      	movs	r3, #1
 8003b20:	463a      	mov	r2, r7
 8003b22:	b201      	sxth	r1, r0
 8003b24:	e774      	b.n	8003a10 <_lv_indev_scroll_throw_handler+0xf0>
 8003b26:	bf00      	nop
 8003b28:	ffffa000 	.word	0xffffa000

08003b2c <lv_indev_scroll_throw_predict>:
    if(indev == NULL) return 0;
 8003b2c:	b1c0      	cbz	r0, 8003b60 <lv_indev_scroll_throw_predict+0x34>
    switch(dir) {
 8003b2e:	2903      	cmp	r1, #3
 8003b30:	d00b      	beq.n	8003b4a <lv_indev_scroll_throw_predict+0x1e>
 8003b32:	290c      	cmp	r1, #12
 8003b34:	d113      	bne.n	8003b5e <lv_indev_scroll_throw_predict+0x32>
        v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 8003b36:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8003b3a:	6802      	ldr	r2, [r0, #0]
        v = v * (100 - scroll_throw) / 100;
 8003b3c:	2164      	movs	r1, #100	; 0x64
    lv_coord_t sum = 0;
 8003b3e:	2000      	movs	r0, #0
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8003b40:	7e52      	ldrb	r2, [r2, #25]
        v = v * (100 - scroll_throw) / 100;
 8003b42:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
    while(v) {
 8003b46:	b91b      	cbnz	r3, 8003b50 <lv_indev_scroll_throw_predict+0x24>
 8003b48:	4770      	bx	lr
        v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 8003b4a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
        break;
 8003b4e:	e7f4      	b.n	8003b3a <lv_indev_scroll_throw_predict+0xe>
        sum += v;
 8003b50:	4418      	add	r0, r3
        v = v * (100 - scroll_throw) / 100;
 8003b52:	4353      	muls	r3, r2
 8003b54:	fb93 f3f1 	sdiv	r3, r3, r1
        sum += v;
 8003b58:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 8003b5a:	b21b      	sxth	r3, r3
 8003b5c:	e7f3      	b.n	8003b46 <lv_indev_scroll_throw_predict+0x1a>
    switch(dir) {
 8003b5e:	2000      	movs	r0, #0
}
 8003b60:	4770      	bx	lr

08003b62 <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);

    if(obj->spec_attr) {
 8003b62:	688b      	ldr	r3, [r1, #8]
{
 8003b64:	b510      	push	{r4, lr}
 8003b66:	460c      	mov	r4, r1
    if(obj->spec_attr) {
 8003b68:	b19b      	cbz	r3, 8003b92 <lv_obj_destructor+0x30>
        if(obj->spec_attr->children) {
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	b120      	cbz	r0, 8003b78 <lv_obj_destructor+0x16>
            lv_mem_free(obj->spec_attr->children);
 8003b6e:	f013 fed1 	bl	8017914 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8003b72:	68a3      	ldr	r3, [r4, #8]
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 8003b78:	68a3      	ldr	r3, [r4, #8]
 8003b7a:	68d8      	ldr	r0, [r3, #12]
 8003b7c:	b120      	cbz	r0, 8003b88 <lv_obj_destructor+0x26>
            lv_mem_free(obj->spec_attr->event_dsc);
 8003b7e:	f013 fec9 	bl	8017914 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8003b82:	68a3      	ldr	r3, [r4, #8]
 8003b84:	2200      	movs	r2, #0
 8003b86:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8003b88:	68a0      	ldr	r0, [r4, #8]
 8003b8a:	f013 fec3 	bl	8017914 <lv_mem_free>
        obj->spec_attr = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60a3      	str	r3, [r4, #8]
    }

}
 8003b92:	bd10      	pop	{r4, pc}

08003b94 <lv_obj_set_state>:
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
    if(obj->state == new_state) return;
 8003b94:	8c03      	ldrh	r3, [r0, #32]
 8003b96:	428b      	cmp	r3, r1
{
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	4688      	mov	r8, r1
 8003ba0:	ed2d 8b02 	vpush	{d8}
    if(obj->state == new_state) return;
 8003ba4:	ee08 3a10 	vmov	s16, r3
{
 8003ba8:	b08b      	sub	sp, #44	; 0x2c
    if(obj->state == new_state) return;
 8003baa:	f000 80e9 	beq.w	8003d80 <lv_obj_set_state+0x1ec>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8003bae:	460a      	mov	r2, r1
    obj->state = new_state;
 8003bb0:	8401      	strh	r1, [r0, #32]
    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f003 fe8e 	bl	80078d4 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8003bb8:	9002      	str	r0, [sp, #8]
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	f000 80e0 	beq.w	8003d80 <lv_obj_set_state+0x1ec>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003bc0:	f44f 7020 	mov.w	r0, #640	; 0x280
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
    uint32_t tsi = 0;
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003bc4:	f04f 0900 	mov.w	r9, #0
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003bc8:	f014 f856 	bl	8017c78 <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003bcc:	f44f 7120 	mov.w	r1, #640	; 0x280
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003bd0:	4607      	mov	r7, r0
    uint32_t tsi = 0;
 8003bd2:	464d      	mov	r5, r9
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8003bd4:	f014 f89e 	bl	8017d14 <lv_memset_00>
        _lv_obj_style_t * obj_style = &obj->styles[i];
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003bd8:	ea6f 0308 	mvn.w	r3, r8
 8003bdc:	9306      	str	r3, [sp, #24]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003bde:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8003be0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8003be4:	454b      	cmp	r3, r9
 8003be6:	d901      	bls.n	8003bec <lv_obj_set_state+0x58>
 8003be8:	2d1f      	cmp	r5, #31
 8003bea:	d915      	bls.n	8003c18 <lv_obj_set_state+0x84>
 8003bec:	2314      	movs	r3, #20
 8003bee:	463e      	mov	r6, r7
 8003bf0:	fb03 7505 	mla	r5, r3, r5, r7
                tsi++;
            }
        }
    }

    for(i = 0;i < tsi; i++) {
 8003bf4:	42ae      	cmp	r6, r5
 8003bf6:	f040 809c 	bne.w	8003d32 <lv_obj_set_state+0x19e>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
    }

    lv_mem_buf_release(ts);
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	f013 fe98 	bl	8017930 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8003c00:	9b02      	ldr	r3, [sp, #8]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f040 80a2 	bne.w	8003d4c <lv_obj_set_state+0x1b8>
        lv_obj_invalidate(obj);
 8003c08:	4620      	mov	r0, r4
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 8003c0a:	b00b      	add	sp, #44	; 0x2c
 8003c0c:	ecbd 8b02 	vpop	{d8}
 8003c10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_invalidate(obj);
 8003c14:	f001 bb30 	b.w	8005278 <lv_obj_invalidate>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8003c18:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8003c1c:	ea4f 06c9 	mov.w	r6, r9, lsl #3
 8003c20:	eb0a 0bc9 	add.w	fp, sl, r9, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8003c24:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003c28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003c2c:	f003 ff6a 	bl	8007b04 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003c30:	68e3      	ldr	r3, [r4, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8003c32:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003c34:	4433      	add	r3, r6
 8003c36:	6858      	ldr	r0, [r3, #4]
 8003c38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003c3c:	f003 ff64 	bl	8007b08 <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003c40:	9b06      	ldr	r3, [sp, #24]
 8003c42:	9a03      	ldr	r2, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8003c44:	9004      	str	r0, [sp, #16]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8003c46:	4213      	tst	r3, r2
 8003c48:	d10d      	bne.n	8003c66 <lv_obj_set_state+0xd2>
        if(obj_style->is_trans) continue;
 8003c4a:	f89b 3007 	ldrb.w	r3, [fp, #7]
 8003c4e:	f013 0302 	ands.w	r3, r3, #2
 8003c52:	d108      	bne.n	8003c66 <lv_obj_set_state+0xd2>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) == false) continue;
 8003c54:	f85a 1006 	ldr.w	r1, [sl, r6]
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
 8003c58:	f991 2005 	ldrsb.w	r2, [r1, #5]
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	da16      	bge.n	8003c8e <lv_obj_set_state+0xfa>
        const lv_style_const_prop_t *const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8003c60:	680b      	ldr	r3, [r1, #0]
 8003c62:	881a      	ldrh	r2, [r3, #0]
 8003c64:	b912      	cbnz	r2, 8003c6c <lv_obj_set_state+0xd8>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8003c66:	f109 0901 	add.w	r9, r9, #1
 8003c6a:	e7b8      	b.n	8003bde <lv_obj_set_state+0x4a>
            if(const_prop->prop == prop) {
 8003c6c:	2a67      	cmp	r2, #103	; 0x67
 8003c6e:	d10c      	bne.n	8003c8a <lv_obj_set_state+0xf6>
                *value = const_prop->value;
 8003c70:	685e      	ldr	r6, [r3, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003c72:	f04f 0a00 	mov.w	sl, #0
 8003c76:	6833      	ldr	r3, [r6, #0]
 8003c78:	f833 300a 	ldrh.w	r3, [r3, sl]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f2      	beq.n	8003c66 <lv_obj_set_state+0xd2>
 8003c80:	2d1f      	cmp	r5, #31
 8003c82:	d8f0      	bhi.n	8003c66 <lv_obj_set_state+0xd2>
 8003c84:	463a      	mov	r2, r7
            for(t = 0; t < tsi; t++) {
 8003c86:	2300      	movs	r3, #0
 8003c88:	e039      	b.n	8003cfe <lv_obj_set_state+0x16a>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	e7e9      	b.n	8003c62 <lv_obj_set_state+0xce>
            }
        }
        return LV_RES_INV;
    }

    if(style->prop_cnt == 0) return LV_RES_INV;
 8003c8e:	79ca      	ldrb	r2, [r1, #7]
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d0e8      	beq.n	8003c66 <lv_obj_set_state+0xd2>

    if(style->prop_cnt > 1) {
 8003c94:	2a01      	cmp	r2, #1
 8003c96:	d90d      	bls.n	8003cb4 <lv_obj_set_state+0x120>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8003c98:	6809      	ldr	r1, [r1, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8003c9a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
            if(props[i] == prop) {
 8003c9e:	f830 6b02 	ldrh.w	r6, [r0], #2
 8003ca2:	2e67      	cmp	r6, #103	; 0x67
 8003ca4:	d102      	bne.n	8003cac <lv_obj_set_state+0x118>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                *value = values[i];
 8003ca6:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
                return LV_RES_OK;
 8003caa:	e7e2      	b.n	8003c72 <lv_obj_set_state+0xde>
        for(i = 0; i < style->prop_cnt; i++) {
 8003cac:	3301      	adds	r3, #1
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d8f5      	bhi.n	8003c9e <lv_obj_set_state+0x10a>
 8003cb2:	e7d8      	b.n	8003c66 <lv_obj_set_state+0xd2>
            }
        }
    } else if(style->prop1 == prop) {
 8003cb4:	888b      	ldrh	r3, [r1, #4]
 8003cb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003cba:	2b67      	cmp	r3, #103	; 0x67
 8003cbc:	d1d3      	bne.n	8003c66 <lv_obj_set_state+0xd2>
        *value = style->v_p.value1;
 8003cbe:	680e      	ldr	r6, [r1, #0]
        return LV_RES_OK;
 8003cc0:	e7d7      	b.n	8003c72 <lv_obj_set_state+0xde>
                lv_style_selector_t selector = ts[t].selector;
 8003cc2:	6851      	ldr	r1, [r2, #4]
 8003cc4:	9309      	str	r3, [sp, #36]	; 0x24
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003cc6:	4608      	mov	r0, r1
                lv_style_selector_t selector = ts[t].selector;
 8003cc8:	9208      	str	r2, [sp, #32]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003cca:	9107      	str	r1, [sp, #28]
 8003ccc:	f003 ff1a 	bl	8007b04 <lv_obj_style_get_selector_state>
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8003cd0:	9907      	ldr	r1, [sp, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8003cd2:	9005      	str	r0, [sp, #20]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	f003 ff17 	bl	8007b08 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8003cda:	6831      	ldr	r1, [r6, #0]
 8003cdc:	9a08      	ldr	r2, [sp, #32]
 8003cde:	f831 100a 	ldrh.w	r1, [r1, sl]
 8003ce2:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 8003ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce8:	458c      	cmp	ip, r1
 8003cea:	d106      	bne.n	8003cfa <lv_obj_set_state+0x166>
 8003cec:	9904      	ldr	r1, [sp, #16]
 8003cee:	4281      	cmp	r1, r0
 8003cf0:	d103      	bne.n	8003cfa <lv_obj_set_state+0x166>
 8003cf2:	9903      	ldr	r1, [sp, #12]
 8003cf4:	9805      	ldr	r0, [sp, #20]
 8003cf6:	4281      	cmp	r1, r0
 8003cf8:	d918      	bls.n	8003d2c <lv_obj_set_state+0x198>
            for(t = 0; t < tsi; t++) {
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	3214      	adds	r2, #20
 8003cfe:	429d      	cmp	r5, r3
 8003d00:	d1df      	bne.n	8003cc2 <lv_obj_set_state+0x12e>
                ts[tsi].time = tr->time;
 8003d02:	2314      	movs	r3, #20
 8003d04:	68f0      	ldr	r0, [r6, #12]
 8003d06:	6831      	ldr	r1, [r6, #0]
 8003d08:	436b      	muls	r3, r5
                tsi++;
 8003d0a:	3501      	adds	r5, #1
                ts[tsi].time = tr->time;
 8003d0c:	52f8      	strh	r0, [r7, r3]
 8003d0e:	18fa      	adds	r2, r7, r3
                ts[tsi].delay = tr->delay;
 8003d10:	6933      	ldr	r3, [r6, #16]
 8003d12:	8053      	strh	r3, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8003d14:	68b3      	ldr	r3, [r6, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
                ts[tsi].prop = tr->props[j];
 8003d18:	f831 300a 	ldrh.w	r3, [r1, sl]
 8003d1c:	8113      	strh	r3, [r2, #8]
                ts[tsi].user_data = tr->user_data;
 8003d1e:	6873      	ldr	r3, [r6, #4]
 8003d20:	6113      	str	r3, [r2, #16]
                ts[tsi].selector = obj_style->selector;
 8003d22:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d26:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8003d2a:	6053      	str	r3, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8003d2c:	f10a 0a02 	add.w	sl, sl, #2
 8003d30:	e7a1      	b.n	8003c76 <lv_obj_set_state+0xe2>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003d32:	6870      	ldr	r0, [r6, #4]
 8003d34:	f003 fee8 	bl	8007b08 <lv_obj_style_get_selector_part>
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003d38:	9600      	str	r6, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8003d3a:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	ee18 2a10 	vmov	r2, s16
 8003d42:	4620      	mov	r0, r4
 8003d44:	3614      	adds	r6, #20
 8003d46:	f003 fd2b 	bl	80077a0 <_lv_obj_style_create_transition>
    for(i = 0;i < tsi; i++) {
 8003d4a:	e753      	b.n	8003bf4 <lv_obj_set_state+0x60>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d10b      	bne.n	8003d6a <lv_obj_set_state+0x1d6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d56:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8003d5a:	4620      	mov	r0, r4
}
 8003d5c:	b00b      	add	sp, #44	; 0x2c
 8003d5e:	ecbd 8b02 	vpop	{d8}
 8003d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8003d66:	f003 b92b 	b.w	8006fc0 <lv_obj_refresh_style>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8003d6a:	9b02      	ldr	r3, [sp, #8]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d107      	bne.n	8003d80 <lv_obj_set_state+0x1ec>
        lv_obj_refresh_ext_draw_size(obj);
 8003d70:	4620      	mov	r0, r4
}
 8003d72:	b00b      	add	sp, #44	; 0x2c
 8003d74:	ecbd 8b02 	vpop	{d8}
 8003d78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_ext_draw_size(obj);
 8003d7c:	f000 bf91 	b.w	8004ca2 <lv_obj_refresh_ext_draw_size>
}
 8003d80:	b00b      	add	sp, #44	; 0x2c
 8003d82:	ecbd 8b02 	vpop	{d8}
 8003d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d8a <lv_obj_constructor>:
{
 8003d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_t * parent = obj->parent;
 8003d8e:	684f      	ldr	r7, [r1, #4]
{
 8003d90:	460c      	mov	r4, r1
    if(parent) {
 8003d92:	b38f      	cbz	r7, 8003df8 <lv_obj_constructor+0x6e>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8003d94:	4638      	mov	r0, r7
 8003d96:	f002 f9c3 	bl	8006120 <lv_obj_get_scroll_left>
 8003d9a:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f002 f969 	bl	8006074 <lv_obj_get_scroll_top>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003da2:	8afe      	ldrh	r6, [r7, #22]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8003da4:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003da6:	f241 0210 	movw	r2, #4112	; 0x1010
 8003daa:	2100      	movs	r1, #0
 8003dac:	4638      	mov	r0, r7
 8003dae:	f003 fb8b 	bl	80074c8 <lv_obj_get_style_prop>
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003db2:	4406      	add	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003db4:	f241 0212 	movw	r2, #4114	; 0x1012
 8003db8:	2100      	movs	r1, #0
 8003dba:	1b73      	subs	r3, r6, r5
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8003dbc:	8abd      	ldrh	r5, [r7, #20]
 8003dbe:	4638      	mov	r0, r7
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	8363      	strh	r3, [r4, #26]
 8003dc8:	f003 fb7e 	bl	80074c8 <lv_obj_get_style_prop>
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8003dcc:	4405      	add	r5, r0
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8003dce:	f640 5302 	movw	r3, #3330	; 0xd02
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8003dd2:	eba5 0008 	sub.w	r0, r5, r8
 8003dd6:	b280      	uxth	r0, r0
 8003dd8:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8003dda:	3801      	subs	r0, #1
 8003ddc:	8320      	strh	r0, [r4, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8003dde:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8003de0:	69e3      	ldr	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003de2:	b927      	cbnz	r7, 8003dee <lv_obj_constructor+0x64>
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 8003de4:	f043 0374 	orr.w	r3, r3, #116	; 0x74
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003de8:	61e3      	str	r3, [r4, #28]
}
 8003dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8003dee:	f443 5301 	orr.w	r3, r3, #8256	; 0x2040
 8003df2:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8003df6:	e7f7      	b.n	8003de8 <lv_obj_constructor+0x5e>
    obj->flags |= LV_OBJ_FLAG_SNAPABLE;
 8003df8:	f240 4302 	movw	r3, #1026	; 0x402
 8003dfc:	e7ef      	b.n	8003dde <lv_obj_constructor+0x54>
	...

08003e00 <lv_init>:
{
 8003e00:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8003e02:	4c10      	ldr	r4, [pc, #64]	; (8003e44 <lv_init+0x44>)
 8003e04:	7823      	ldrb	r3, [r4, #0]
 8003e06:	b9e3      	cbnz	r3, 8003e42 <lv_init+0x42>
    lv_mem_init();
 8003e08:	f013 fd76 	bl	80178f8 <lv_mem_init>
    _lv_timer_core_init();
 8003e0c:	f014 fd2e 	bl	801886c <_lv_timer_core_init>
    _lv_fs_init();
 8003e10:	f013 fb62 	bl	80174d8 <_lv_fs_init>
    _lv_anim_core_init();
 8003e14:	f012 ffe8 	bl	8016de8 <_lv_anim_core_init>
    _lv_group_init();
 8003e18:	f7fe f9fc 	bl	8002214 <_lv_group_init>
    _lv_obj_style_init();
 8003e1c:	f003 f8ca 	bl	8006fb4 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8003e20:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003e24:	4808      	ldr	r0, [pc, #32]	; (8003e48 <lv_init+0x48>)
 8003e26:	f013 fbf8 	bl	801761a <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8003e2a:	2158      	movs	r1, #88	; 0x58
 8003e2c:	4807      	ldr	r0, [pc, #28]	; (8003e4c <lv_init+0x4c>)
 8003e2e:	f013 fbf4 	bl	801761a <_lv_ll_init>
    _lv_refr_init();
 8003e32:	f004 fae1 	bl	80083f8 <_lv_refr_init>
    _lv_img_decoder_init();
 8003e36:	f00b fb0b 	bl	800f450 <_lv_img_decoder_init>
    lv_extra_init();
 8003e3a:	f00c fd8f 	bl	801095c <lv_extra_init>
    lv_initialized = true;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	7023      	strb	r3, [r4, #0]
}
 8003e42:	bd10      	pop	{r4, pc}
 8003e44:	20002998 	.word	0x20002998
 8003e48:	2000adf8 	.word	0x2000adf8
 8003e4c:	2000ade0 	.word	0x2000ade0

08003e50 <lv_obj_create>:
{
 8003e50:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003e52:	4804      	ldr	r0, [pc, #16]	; (8003e64 <lv_obj_create+0x14>)
{
 8003e54:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003e56:	f000 fb65 	bl	8004524 <lv_obj_class_create_obj>
 8003e5a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8003e5c:	f000 fbef 	bl	800463e <lv_obj_class_init_obj>
}
 8003e60:	4620      	mov	r0, r4
 8003e62:	bd10      	pop	{r4, pc}
 8003e64:	080258dc 	.word	0x080258dc

08003e68 <lv_obj_add_flag>:
{
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	460d      	mov	r5, r1
 8003e6c:	4604      	mov	r4, r0
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003e6e:	f000 ffb7 	bl	8004de0 <lv_obj_is_layout_positioned>
 8003e72:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8003e74:	f015 0701 	ands.w	r7, r5, #1
 8003e78:	d002      	beq.n	8003e80 <lv_obj_add_flag+0x18>
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f001 f9fc 	bl	8005278 <lv_obj_invalidate>
    obj->flags |= f;
 8003e80:	69e3      	ldr	r3, [r4, #28]
 8003e82:	432b      	orrs	r3, r5
 8003e84:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003e86:	b117      	cbz	r7, 8003e8e <lv_obj_add_flag+0x26>
        lv_obj_invalidate(obj);
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f001 f9f5 	bl	8005278 <lv_obj_invalidate>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 ffa6 	bl	8004de0 <lv_obj_is_layout_positioned>
 8003e94:	42b0      	cmp	r0, r6
 8003e96:	d102      	bne.n	8003e9e <lv_obj_add_flag+0x36>
 8003e98:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8003e9c:	d006      	beq.n	8003eac <lv_obj_add_flag+0x44>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f003 fe5c 	bl	8007b5c <lv_obj_get_parent>
}
 8003ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003ea8:	f000 bffb 	b.w	8004ea2 <lv_obj_mark_layout_as_dirty>
}
 8003eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003eae <lv_obj_clear_flag>:
{
 8003eae:	b570      	push	{r4, r5, r6, lr}
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8003eb4:	f000 ff94 	bl	8004de0 <lv_obj_is_layout_positioned>
 8003eb8:	4606      	mov	r6, r0
    obj->flags &= (~f);
 8003eba:	69e3      	ldr	r3, [r4, #28]
 8003ebc:	ea23 0305 	bic.w	r3, r3, r5
 8003ec0:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8003ec2:	07eb      	lsls	r3, r5, #31
 8003ec4:	d50b      	bpl.n	8003ede <lv_obj_clear_flag+0x30>
        lv_obj_invalidate(obj);
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f001 f9d6 	bl	8005278 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f000 ff87 	bl	8004de0 <lv_obj_is_layout_positioned>
 8003ed2:	b120      	cbz	r0, 8003ede <lv_obj_clear_flag+0x30>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f003 fe41 	bl	8007b5c <lv_obj_get_parent>
 8003eda:	f000 ffe2 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f000 ff7e 	bl	8004de0 <lv_obj_is_layout_positioned>
 8003ee4:	42b0      	cmp	r0, r6
 8003ee6:	d102      	bne.n	8003eee <lv_obj_clear_flag+0x40>
 8003ee8:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8003eec:	d006      	beq.n	8003efc <lv_obj_clear_flag+0x4e>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f003 fe34 	bl	8007b5c <lv_obj_get_parent>
}
 8003ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8003ef8:	f000 bfd3 	b.w	8004ea2 <lv_obj_mark_layout_as_dirty>
}
 8003efc:	bd70      	pop	{r4, r5, r6, pc}

08003efe <lv_obj_add_state>:
{
 8003efe:	460b      	mov	r3, r1
    lv_state_t new_state = obj->state | state;
 8003f00:	8c02      	ldrh	r2, [r0, #32]
    if(obj->state != new_state) {
 8003f02:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
 8003f04:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
 8003f08:	d001      	beq.n	8003f0e <lv_obj_add_state+0x10>
        lv_obj_set_state(obj, new_state);
 8003f0a:	f7ff be43 	b.w	8003b94 <lv_obj_set_state>
}
 8003f0e:	4770      	bx	lr

08003f10 <lv_obj_clear_state>:
{
 8003f10:	460a      	mov	r2, r1
    lv_state_t new_state = obj->state & (~state);
 8003f12:	8c03      	ldrh	r3, [r0, #32]
    if(obj->state != new_state) {
 8003f14:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
 8003f16:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
 8003f1a:	d001      	beq.n	8003f20 <lv_obj_clear_state+0x10>
        lv_obj_set_state(obj, new_state);
 8003f1c:	f7ff be3a 	b.w	8003b94 <lv_obj_set_state>
}
 8003f20:	4770      	bx	lr

08003f22 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8003f22:	69c3      	ldr	r3, [r0, #28]
 8003f24:	ea31 0303 	bics.w	r3, r1, r3
}
 8003f28:	bf0c      	ite	eq
 8003f2a:	2001      	moveq	r0, #1
 8003f2c:	2000      	movne	r0, #0
 8003f2e:	4770      	bx	lr

08003f30 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8003f30:	69c3      	ldr	r3, [r0, #28]
 8003f32:	4219      	tst	r1, r3
}
 8003f34:	bf14      	ite	ne
 8003f36:	2001      	movne	r0, #1
 8003f38:	2000      	moveq	r0, #0
 8003f3a:	4770      	bx	lr

08003f3c <lv_obj_get_state>:
}
 8003f3c:	8c00      	ldrh	r0, [r0, #32]
 8003f3e:	4770      	bx	lr

08003f40 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8003f40:	6880      	ldr	r0, [r0, #8]
 8003f42:	b100      	cbz	r0, 8003f46 <lv_obj_get_group+0x6>
 8003f44:	6880      	ldr	r0, [r0, #8]
}
 8003f46:	4770      	bx	lr

08003f48 <lv_obj_event>:
{
 8003f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8003f4c:	4608      	mov	r0, r1
{
 8003f4e:	460e      	mov	r6, r1
 8003f50:	b092      	sub	sp, #72	; 0x48
    lv_event_code_t code = lv_event_get_code(e);
 8003f52:	f7fe f88b 	bl	800206c <lv_event_get_code>
 8003f56:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7fe f885 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 8003f5e:	2d01      	cmp	r5, #1
    lv_obj_t * obj = lv_event_get_target(e);
 8003f60:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSED) {
 8003f62:	d103      	bne.n	8003f6c <lv_obj_event+0x24>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8003f64:	2120      	movs	r1, #32
            lv_obj_add_state(obj, state);
 8003f66:	f7ff ffca 	bl	8003efe <lv_obj_add_state>
 8003f6a:	e019      	b.n	8003fa0 <lv_obj_event+0x58>
    else if(code == LV_EVENT_RELEASED) {
 8003f6c:	2d08      	cmp	r5, #8
 8003f6e:	d11a      	bne.n	8003fa6 <lv_obj_event+0x5e>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8003f70:	2120      	movs	r1, #32
 8003f72:	f7ff ffcd 	bl	8003f10 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7fe f87a 	bl	8002070 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003f7c:	f7fe fb6e 	bl	800265c <lv_indev_get_scroll_obj>
 8003f80:	b970      	cbnz	r0, 8003fa0 <lv_obj_event+0x58>
    return (obj->flags & f)  == f ? true : false;
 8003f82:	69e3      	ldr	r3, [r4, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003f84:	071e      	lsls	r6, r3, #28
 8003f86:	d50b      	bpl.n	8003fa0 <lv_obj_event+0x58>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003f88:	8c23      	ldrh	r3, [r4, #32]
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	07dd      	lsls	r5, r3, #31
 8003f90:	d425      	bmi.n	8003fde <lv_obj_event+0x96>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003f92:	f7ff ffb4 	bl	8003efe <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8003f96:	2200      	movs	r2, #0
 8003f98:	211c      	movs	r1, #28
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f7fe f844 	bl	8002028 <lv_event_send>
}
 8003fa0:	b012      	add	sp, #72	; 0x48
 8003fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_PRESS_LOST) {
 8003fa6:	2d03      	cmp	r5, #3
 8003fa8:	d103      	bne.n	8003fb2 <lv_obj_event+0x6a>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8003faa:	2120      	movs	r1, #32
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8003fac:	f7ff ffb0 	bl	8003f10 <lv_obj_clear_state>
 8003fb0:	e7f6      	b.n	8003fa0 <lv_obj_event+0x58>
    else if(code == LV_EVENT_KEY) {
 8003fb2:	2d0d      	cmp	r5, #13
 8003fb4:	d116      	bne.n	8003fe4 <lv_obj_event+0x9c>
    return (obj->flags & f)  == f ? true : false;
 8003fb6:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8003fb8:	071a      	lsls	r2, r3, #28
 8003fba:	d5f1      	bpl.n	8003fa0 <lv_obj_event+0x58>
            char c = *((char *)lv_event_get_param(e));
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f7fe f857 	bl	8002070 <lv_event_get_param>
 8003fc2:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8003fc4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8003fc8:	2a11      	cmp	r2, #17
 8003fca:	d102      	bne.n	8003fd2 <lv_obj_event+0x8a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4620      	mov	r0, r4
 8003fd0:	e7df      	b.n	8003f92 <lv_obj_event+0x4a>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8003fd2:	2b14      	cmp	r3, #20
 8003fd4:	d001      	beq.n	8003fda <lv_obj_event+0x92>
 8003fd6:	2b12      	cmp	r3, #18
 8003fd8:	d1dd      	bne.n	8003f96 <lv_obj_event+0x4e>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f7ff ff97 	bl	8003f10 <lv_obj_clear_state>
 8003fe2:	e7d8      	b.n	8003f96 <lv_obj_event+0x4e>
    else if(code == LV_EVENT_FOCUSED) {
 8003fe4:	2d0e      	cmp	r5, #14
 8003fe6:	d122      	bne.n	800402e <lv_obj_event+0xe6>
    return (obj->flags & f)  == f ? true : false;
 8003fe8:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8003fea:	059b      	lsls	r3, r3, #22
 8003fec:	d502      	bpl.n	8003ff4 <lv_obj_event+0xac>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8003fee:	2101      	movs	r1, #1
 8003ff0:	f002 fbbd 	bl	800676e <lv_obj_scroll_to_view_recursive>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff ffa3 	bl	8003f40 <lv_obj_get_group>
 8003ffa:	f7fe fa37 	bl	800246c <lv_group_get_editing>
 8003ffe:	4605      	mov	r5, r0
        lv_indev_t * indev = lv_indev_get_act();
 8004000:	f7fe faa8 	bl	8002554 <lv_indev_get_act>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004004:	f7fe faac 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8004008:	2802      	cmp	r0, #2
 800400a:	d008      	beq.n	800401e <lv_obj_event+0xd6>
        lv_state_t state = LV_STATE_FOCUSED;
 800400c:	2804      	cmp	r0, #4
 800400e:	bf0c      	ite	eq
 8004010:	2106      	moveq	r1, #6
 8004012:	2102      	movne	r1, #2
        if(editing) {
 8004014:	b12d      	cbz	r5, 8004022 <lv_obj_event+0xda>
            lv_obj_add_state(obj, state);
 8004016:	f041 0108 	orr.w	r1, r1, #8
 800401a:	4620      	mov	r0, r4
 800401c:	e7a3      	b.n	8003f66 <lv_obj_event+0x1e>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 800401e:	2106      	movs	r1, #6
 8004020:	e7f8      	b.n	8004014 <lv_obj_event+0xcc>
            lv_obj_add_state(obj, state);
 8004022:	4620      	mov	r0, r4
 8004024:	f7ff ff6b 	bl	8003efe <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8004028:	2108      	movs	r1, #8
 800402a:	4620      	mov	r0, r4
 800402c:	e7be      	b.n	8003fac <lv_obj_event+0x64>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 800402e:	2d09      	cmp	r5, #9
 8004030:	d101      	bne.n	8004036 <lv_obj_event+0xee>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8004032:	2140      	movs	r1, #64	; 0x40
 8004034:	e797      	b.n	8003f66 <lv_obj_event+0x1e>
    else if(code == LV_EVENT_SCROLL_END) {
 8004036:	2d0a      	cmp	r5, #10
 8004038:	d101      	bne.n	800403e <lv_obj_event+0xf6>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 800403a:	2140      	movs	r1, #64	; 0x40
 800403c:	e7b6      	b.n	8003fac <lv_obj_event+0x64>
    else if(code == LV_EVENT_DEFOCUSED) {
 800403e:	2d0f      	cmp	r5, #15
 8004040:	d101      	bne.n	8004046 <lv_obj_event+0xfe>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8004042:	210e      	movs	r1, #14
 8004044:	e7b2      	b.n	8003fac <lv_obj_event+0x64>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8004046:	2d23      	cmp	r5, #35	; 0x23
 8004048:	d121      	bne.n	800408e <lv_obj_event+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800404a:	f241 0209 	movw	r2, #4105	; 0x1009
 800404e:	2100      	movs	r1, #0
 8004050:	f003 fa3a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004054:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004058:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800405a:	2100      	movs	r1, #0
 800405c:	4620      	mov	r0, r4
 800405e:	f003 fa33 	bl	80074c8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004062:	b280      	uxth	r0, r0
        if(layout || align) {
 8004064:	b910      	cbnz	r0, 800406c <lv_obj_event+0x124>
 8004066:	f015 0fff 	tst.w	r5, #255	; 0xff
 800406a:	d002      	beq.n	8004072 <lv_obj_event+0x12a>
            lv_obj_mark_layout_as_dirty(obj);
 800406c:	4620      	mov	r0, r4
 800406e:	f000 ff18 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
        lv_state_t state = LV_STATE_FOCUSED;
 8004072:	2500      	movs	r5, #0
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004074:	4620      	mov	r0, r4
 8004076:	f003 fd83 	bl	8007b80 <lv_obj_get_child_cnt>
 800407a:	42a8      	cmp	r0, r5
 800407c:	d990      	bls.n	8003fa0 <lv_obj_event+0x58>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 800407e:	4629      	mov	r1, r5
 8004080:	4620      	mov	r0, r4
 8004082:	f003 fd6e 	bl	8007b62 <lv_obj_get_child>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8004086:	3501      	adds	r5, #1
            lv_obj_mark_layout_as_dirty(child);
 8004088:	f000 ff0b 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800408c:	e7f2      	b.n	8004074 <lv_obj_event+0x12c>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 800408e:	2d22      	cmp	r5, #34	; 0x22
 8004090:	d12b      	bne.n	80040ea <lv_obj_event+0x1a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004092:	f241 0201 	movw	r2, #4097	; 0x1001
 8004096:	2100      	movs	r1, #0
 8004098:	f003 fa16 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800409c:	f241 0204 	movw	r2, #4100	; 0x1004
 80040a0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80040a2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80040a4:	4620      	mov	r0, r4
 80040a6:	f003 fa0f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80040aa:	f241 0209 	movw	r2, #4105	; 0x1009
 80040ae:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80040b0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f003 fa08 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80040b8:	f241 0269 	movw	r2, #4201	; 0x1069
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80040bc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80040be:	2100      	movs	r1, #0
 80040c0:	4620      	mov	r0, r4
 80040c2:	f003 fa01 	bl	80074c8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80040c6:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 80040c8:	b958      	cbnz	r0, 80040e2 <lv_obj_event+0x19a>
 80040ca:	f017 0fff 	tst.w	r7, #255	; 0xff
 80040ce:	d108      	bne.n	80040e2 <lv_obj_event+0x19a>
 80040d0:	b236      	sxth	r6, r6
 80040d2:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80040d6:	429e      	cmp	r6, r3
 80040d8:	d003      	beq.n	80040e2 <lv_obj_event+0x19a>
 80040da:	b22d      	sxth	r5, r5
 80040dc:	429d      	cmp	r5, r3
 80040de:	f47f af5f 	bne.w	8003fa0 <lv_obj_event+0x58>
            lv_obj_mark_layout_as_dirty(obj);
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 fedd 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
 80040e8:	e75a      	b.n	8003fa0 <lv_obj_event+0x58>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80040ea:	2d13      	cmp	r5, #19
 80040ec:	d10e      	bne.n	800410c <lv_obj_event+0x1c4>
        lv_coord_t * s = lv_event_get_param(e);
 80040ee:	4630      	mov	r0, r6
 80040f0:	f7fd ffbe 	bl	8002070 <lv_event_get_param>
 80040f4:	4605      	mov	r5, r0
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 80040f6:	2100      	movs	r1, #0
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 fd54 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, d);
 80040fe:	f9b5 3000 	ldrsh.w	r3, [r5]
 8004102:	4298      	cmp	r0, r3
 8004104:	bfb8      	it	lt
 8004106:	4618      	movlt	r0, r3
 8004108:	8028      	strh	r0, [r5, #0]
 800410a:	e749      	b.n	8003fa0 <lv_obj_event+0x58>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 800410c:	2d18      	cmp	r5, #24
 800410e:	f63f af47 	bhi.w	8003fa0 <lv_obj_event+0x58>
 8004112:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8004116:	fa20 f505 	lsr.w	r5, r0, r5
 800411a:	43ed      	mvns	r5, r5
 800411c:	f015 0501 	ands.w	r5, r5, #1
 8004120:	f47f af3e 	bne.w	8003fa0 <lv_obj_event+0x58>
    lv_event_code_t code = lv_event_get_code(e);
 8004124:	4630      	mov	r0, r6
 8004126:	f7fd ffa1 	bl	800206c <lv_event_get_code>
 800412a:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800412c:	4630      	mov	r0, r6
 800412e:	f7fd ff9b 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_COVER_CHECK) {
 8004132:	2f12      	cmp	r7, #18
    lv_obj_t * obj = lv_event_get_target(e);
 8004134:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8004136:	d15c      	bne.n	80041f2 <lv_obj_event+0x2aa>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8004138:	4630      	mov	r0, r6
 800413a:	f7fd ff99 	bl	8002070 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 800413e:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8004140:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8004142:	2b02      	cmp	r3, #2
 8004144:	f43f af2c 	beq.w	8003fa0 <lv_obj_event+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004148:	4629      	mov	r1, r5
 800414a:	2261      	movs	r2, #97	; 0x61
 800414c:	4620      	mov	r0, r4
 800414e:	f003 f9bb 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8004152:	4605      	mov	r5, r0
 8004154:	b110      	cbz	r0, 800415c <lv_obj_event+0x214>
            info->res = LV_COVER_RES_MASKED;
 8004156:	2302      	movs	r3, #2
        info->res = LV_COVER_RES_COVER;
 8004158:	7033      	strb	r3, [r6, #0]
 800415a:	e721      	b.n	8003fa0 <lv_obj_event+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800415c:	4601      	mov	r1, r0
 800415e:	2260      	movs	r2, #96	; 0x60
 8004160:	4620      	mov	r0, r4
 8004162:	f003 f9b1 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004166:	f640 020a 	movw	r2, #2058	; 0x80a
    return (lv_coord_t)v.num;
 800416a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800416e:	4629      	mov	r1, r5
 8004170:	4620      	mov	r0, r4
 8004172:	f003 f9a9 	bl	80074c8 <lv_obj_get_style_prop>
 8004176:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004178:	f640 020b 	movw	r2, #2059	; 0x80b
 800417c:	4629      	mov	r1, r5
 800417e:	4620      	mov	r0, r4
 8004180:	f003 f9a2 	bl	80074c8 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8004184:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->y2 = src->y2;
 8004188:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 800418c:	b2bb      	uxth	r3, r7
 800418e:	8aa1      	ldrh	r1, [r4, #20]
        coords.y1 -= h;
 8004190:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004192:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
        coords.x1 -= w;
 8004196:	1ac9      	subs	r1, r1, r3
        coords.y1 -= h;
 8004198:	1a12      	subs	r2, r2, r0
        coords.y2 += h;
 800419a:	4460      	add	r0, ip
        coords.x2 += w;
 800419c:	4473      	add	r3, lr
        coords.x1 -= w;
 800419e:	f8ad 1014 	strh.w	r1, [sp, #20]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80041a2:	a905      	add	r1, sp, #20
        coords.y1 -= h;
 80041a4:	f8ad 2016 	strh.w	r2, [sp, #22]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80041a8:	4642      	mov	r2, r8
        coords.y2 += h;
 80041aa:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80041ae:	6870      	ldr	r0, [r6, #4]
        coords.x2 += w;
 80041b0:	f8ad 3018 	strh.w	r3, [sp, #24]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80041b4:	f013 f85e 	bl	8017274 <_lv_area_is_in>
 80041b8:	b908      	cbnz	r0, 80041be <lv_obj_event+0x276>
            info->res = LV_COVER_RES_NOT_COVER;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e7cc      	b.n	8004158 <lv_obj_event+0x210>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80041be:	2221      	movs	r2, #33	; 0x21
 80041c0:	4629      	mov	r1, r5
 80041c2:	4620      	mov	r0, r4
 80041c4:	f003 f980 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80041c8:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80041ca:	28fc      	cmp	r0, #252	; 0xfc
 80041cc:	d9f5      	bls.n	80041ba <lv_obj_event+0x272>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80041ce:	4629      	mov	r1, r5
 80041d0:	2268      	movs	r2, #104	; 0x68
 80041d2:	4620      	mov	r0, r4
 80041d4:	f003 f978 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_blend_mode(obj, LV_PART_MAIN) != LV_BLEND_MODE_NORMAL) {
 80041d8:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 80041dc:	d1ed      	bne.n	80041ba <lv_obj_event+0x272>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80041de:	f240 4262 	movw	r2, #1122	; 0x462
 80041e2:	4620      	mov	r0, r4
 80041e4:	f003 f970 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80041e8:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80041ea:	28fc      	cmp	r0, #252	; 0xfc
 80041ec:	d9e5      	bls.n	80041ba <lv_obj_event+0x272>
        info->res = LV_COVER_RES_COVER;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e7b2      	b.n	8004158 <lv_obj_event+0x210>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80041f2:	2f15      	cmp	r7, #21
 80041f4:	d15c      	bne.n	80042b0 <lv_obj_event+0x368>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80041f6:	4630      	mov	r0, r6
 80041f8:	f7fd ff3a 	bl	8002070 <lv_event_get_param>
 80041fc:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 80041fe:	a805      	add	r0, sp, #20
 8004200:	f008 fcf2 	bl	800cbe8 <lv_draw_rect_dsc_init>
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8004204:	2234      	movs	r2, #52	; 0x34
 8004206:	4629      	mov	r1, r5
 8004208:	4620      	mov	r0, r4
 800420a:	f003 f95d 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 800420e:	b128      	cbz	r0, 800421c <lv_obj_event+0x2d4>
            draw_dsc.border_post = 1;
 8004210:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800421c:	aa05      	add	r2, sp, #20
 800421e:	2100      	movs	r1, #0
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fa4d 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004226:	f640 020a 	movw	r2, #2058	; 0x80a
 800422a:	2100      	movs	r1, #0
 800422c:	4620      	mov	r0, r4
 800422e:	f003 f94b 	bl	80074c8 <lv_obj_get_style_prop>
 8004232:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004234:	f640 020b 	movw	r2, #2059	; 0x80b
 8004238:	2100      	movs	r1, #0
 800423a:	4620      	mov	r0, r4
 800423c:	f003 f944 	bl	80074c8 <lv_obj_get_style_prop>
 8004240:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
        coords.x1 -= w;
 8004244:	8aa1      	ldrh	r1, [r4, #20]
 8004246:	b2ab      	uxth	r3, r5
    dest->y1 = src->y1;
 8004248:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800424c:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 800424e:	4463      	add	r3, ip
    dest->y2 = src->y2;
 8004250:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
 8004254:	f8ad 3010 	strh.w	r3, [sp, #16]
        coords.y1 -= h;
 8004258:	b283      	uxth	r3, r0
        coords.x1 -= w;
 800425a:	f8ad 100c 	strh.w	r1, [sp, #12]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800425e:	a803      	add	r0, sp, #12
        coords.y1 -= h;
 8004260:	1ad2      	subs	r2, r2, r3
        coords.y2 += h;
 8004262:	443b      	add	r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004264:	4631      	mov	r1, r6
        coords.y1 -= h;
 8004266:	f8ad 200e 	strh.w	r2, [sp, #14]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 800426a:	aa05      	add	r2, sp, #20
        coords.y2 += h;
 800426c:	f8ad 3012 	strh.w	r3, [sp, #18]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004270:	f008 fcdc 	bl	800cc2c <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004274:	2261      	movs	r2, #97	; 0x61
 8004276:	2100      	movs	r1, #0
 8004278:	4620      	mov	r0, r4
 800427a:	f003 f925 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800427e:	2800      	cmp	r0, #0
 8004280:	f43f ae8e 	beq.w	8003fa0 <lv_obj_event+0x58>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8004284:	201c      	movs	r0, #28
 8004286:	f013 fcf7 	bl	8017c78 <lv_mem_buf_get>
 800428a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800428c:	2260      	movs	r2, #96	; 0x60
 800428e:	2100      	movs	r1, #0
 8004290:	4620      	mov	r0, r4
 8004292:	f003 f919 	bl	80074c8 <lv_obj_get_style_prop>
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
 8004296:	f104 0114 	add.w	r1, r4, #20
 800429a:	b202      	sxth	r2, r0
 800429c:	2300      	movs	r3, #0
 800429e:	4628      	mov	r0, r5
 80042a0:	f008 f904 	bl	800c4ac <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 80042a4:	f504 7190 	add.w	r1, r4, #288	; 0x120
 80042a8:	4628      	mov	r0, r5
 80042aa:	f007 ff99 	bl	800c1e0 <lv_draw_mask_add>
 80042ae:	e677      	b.n	8003fa0 <lv_obj_event+0x58>
    else if(code == LV_EVENT_DRAW_POST) {
 80042b0:	2f18      	cmp	r7, #24
 80042b2:	f47f ae75 	bne.w	8003fa0 <lv_obj_event+0x58>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7fd feda 	bl	8002070 <lv_event_get_param>
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 80042bc:	aa03      	add	r2, sp, #12
        const lv_area_t * clip_area = lv_event_get_param(e);
 80042be:	4606      	mov	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 80042c0:	a901      	add	r1, sp, #4
 80042c2:	4620      	mov	r0, r4
 80042c4:	f002 fa6e 	bl	80067a4 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 80042c8:	a801      	add	r0, sp, #4
 80042ca:	f012 fea6 	bl	801701a <lv_area_get_size>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f000 809a 	beq.w	8004408 <lv_obj_event+0x4c0>
    lv_draw_rect_dsc_init(dsc);
 80042d4:	a805      	add	r0, sp, #20
 80042d6:	f008 fc87 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80042da:	2221      	movs	r2, #33	; 0x21
 80042dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80042e0:	4620      	mov	r0, r4
 80042e2:	f003 f8f1 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80042e6:	b2c0      	uxtb	r0, r0
    if(dsc->bg_opa > LV_OPA_MIN) {
 80042e8:	2802      	cmp	r0, #2
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 80042ea:	f88d 001e 	strb.w	r0, [sp, #30]
    if(dsc->bg_opa > LV_OPA_MIN) {
 80042ee:	d907      	bls.n	8004300 <lv_obj_event+0x3b8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 80042f0:	2220      	movs	r2, #32
 80042f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80042f6:	4620      	mov	r0, r4
 80042f8:	f003 f8e6 	bl	80074c8 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 80042fc:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004300:	2231      	movs	r2, #49	; 0x31
 8004302:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004306:	4620      	mov	r0, r4
 8004308:	f003 f8de 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800430c:	b2c0      	uxtb	r0, r0
    if(dsc->border_opa > LV_OPA_MIN) {
 800430e:	2802      	cmp	r0, #2
    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8004310:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 8004314:	d914      	bls.n	8004340 <lv_obj_event+0x3f8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004316:	f241 0232 	movw	r2, #4146	; 0x1032
 800431a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800431e:	4620      	mov	r0, r4
 8004320:	f003 f8d2 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004324:	b200      	sxth	r0, r0
        if(dsc->border_width > 0) {
 8004326:	2800      	cmp	r0, #0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8004328:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 800432c:	f340 80bd 	ble.w	80044aa <lv_obj_event+0x562>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8004330:	2230      	movs	r2, #48	; 0x30
 8004332:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004336:	4620      	mov	r0, r4
 8004338:	f003 f8c6 	bl	80074c8 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 800433c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004340:	f640 0245 	movw	r2, #2117	; 0x845
 8004344:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004348:	4620      	mov	r0, r4
 800434a:	f003 f8bd 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800434e:	b2c0      	uxtb	r0, r0
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8004350:	2802      	cmp	r0, #2
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8004352:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8004356:	d91d      	bls.n	8004394 <lv_obj_event+0x44c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004358:	f44f 6204 	mov.w	r2, #2112	; 0x840
 800435c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004360:	4620      	mov	r0, r4
 8004362:	f003 f8b1 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004366:	b200      	sxth	r0, r0
        if(dsc->shadow_width > 0) {
 8004368:	2800      	cmp	r0, #0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 800436a:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 800436e:	f340 80a0 	ble.w	80044b2 <lv_obj_event+0x56a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004372:	f640 0243 	movw	r2, #2115	; 0x843
 8004376:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800437a:	4620      	mov	r0, r4
 800437c:	f003 f8a4 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8004380:	2244      	movs	r2, #68	; 0x44
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8004382:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 8004386:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800438a:	4620      	mov	r0, r4
 800438c:	f003 f89c 	bl	80074c8 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8004390:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8004394:	f240 4262 	movw	r2, #1122	; 0x462
 8004398:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800439c:	4620      	mov	r0, r4
 800439e:	f003 f893 	bl	80074c8 <lv_obj_get_style_prop>
    if(opa < LV_OPA_MAX) {
 80043a2:	b2c3      	uxtb	r3, r0
 80043a4:	2bfc      	cmp	r3, #252	; 0xfc
 80043a6:	d80b      	bhi.n	80043c0 <lv_obj_event+0x478>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 80043a8:	f89d 001e 	ldrb.w	r0, [sp, #30]
 80043ac:	4358      	muls	r0, r3
 80043ae:	1200      	asrs	r0, r0, #8
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 80043b0:	4343      	muls	r3, r0
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 80043b2:	f88d 001e 	strb.w	r0, [sp, #30]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 80043bc:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP ) {
 80043c0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80043c4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d020      	beq.n	8004414 <lv_obj_event+0x4cc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80043d2:	2260      	movs	r2, #96	; 0x60
 80043d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80043d8:	4620      	mov	r0, r4
 80043da:	f003 f875 	bl	80074c8 <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 80043de:	f8ad 0014 	strh.w	r0, [sp, #20]
    if(lv_area_get_size(&hor_area) > 0) lv_draw_rect(&hor_area, clip_area, &draw_dsc);
 80043e2:	a801      	add	r0, sp, #4
 80043e4:	f012 fe19 	bl	801701a <lv_area_get_size>
 80043e8:	b120      	cbz	r0, 80043f4 <lv_obj_event+0x4ac>
 80043ea:	aa05      	add	r2, sp, #20
 80043ec:	4631      	mov	r1, r6
 80043ee:	a801      	add	r0, sp, #4
 80043f0:	f008 fc1c 	bl	800cc2c <lv_draw_rect>
    if(lv_area_get_size(&ver_area) > 0) lv_draw_rect(&ver_area, clip_area, &draw_dsc);
 80043f4:	a803      	add	r0, sp, #12
 80043f6:	f012 fe10 	bl	801701a <lv_area_get_size>
 80043fa:	b158      	cbz	r0, 8004414 <lv_obj_event+0x4cc>
 80043fc:	aa05      	add	r2, sp, #20
 80043fe:	4631      	mov	r1, r6
 8004400:	a803      	add	r0, sp, #12
 8004402:	f008 fc13 	bl	800cc2c <lv_draw_rect>
 8004406:	e005      	b.n	8004414 <lv_obj_event+0x4cc>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004408:	a803      	add	r0, sp, #12
 800440a:	f012 fe06 	bl	801701a <lv_area_get_size>
 800440e:	2800      	cmp	r0, #0
 8004410:	f47f af60 	bne.w	80042d4 <lv_obj_event+0x38c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004414:	2261      	movs	r2, #97	; 0x61
 8004416:	2100      	movs	r1, #0
 8004418:	4620      	mov	r0, r4
 800441a:	f003 f855 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800441e:	b128      	cbz	r0, 800442c <lv_obj_event+0x4e4>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8004420:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8004424:	f007 ff28 	bl	800c278 <lv_draw_mask_remove_custom>
            lv_mem_buf_release(param);
 8004428:	f013 fa82 	bl	8017930 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 800442c:	2234      	movs	r2, #52	; 0x34
 800442e:	2100      	movs	r1, #0
 8004430:	4620      	mov	r0, r4
 8004432:	f003 f849 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8004436:	2800      	cmp	r0, #0
 8004438:	f43f adb2 	beq.w	8003fa0 <lv_obj_event+0x58>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 800443c:	2700      	movs	r7, #0
            lv_draw_rect_dsc_init(&draw_dsc);
 800443e:	a805      	add	r0, sp, #20
 8004440:	f008 fbd2 	bl	800cbe8 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004444:	aa05      	add	r2, sp, #20
 8004446:	4639      	mov	r1, r7
 8004448:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 800444a:	f88d 701e 	strb.w	r7, [sp, #30]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 800444e:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004452:	f88d 7046 	strb.w	r7, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8004456:	f000 f933 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800445a:	4639      	mov	r1, r7
 800445c:	f640 020a 	movw	r2, #2058	; 0x80a
 8004460:	4620      	mov	r0, r4
 8004462:	f003 f831 	bl	80074c8 <lv_obj_get_style_prop>
 8004466:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004468:	4639      	mov	r1, r7
 800446a:	f640 020b 	movw	r2, #2059	; 0x80b
 800446e:	4620      	mov	r0, r4
 8004470:	f003 f82a 	bl	80074c8 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8004474:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->y2 = src->y2;
 8004478:	f9b4 701a 	ldrsh.w	r7, [r4, #26]
            coords.x1 -= w;
 800447c:	b2ab      	uxth	r3, r5
 800447e:	8aa1      	ldrh	r1, [r4, #20]
            coords.y1 -= h;
 8004480:	b280      	uxth	r0, r0
    dest->x2 = src->x2;
 8004482:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
            coords.x1 -= w;
 8004486:	1ac9      	subs	r1, r1, r3
            coords.y1 -= h;
 8004488:	1a12      	subs	r2, r2, r0
            coords.y2 += h;
 800448a:	4438      	add	r0, r7
            coords.x2 += w;
 800448c:	4463      	add	r3, ip
            coords.x1 -= w;
 800448e:	f8ad 100c 	strh.w	r1, [sp, #12]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004492:	4631      	mov	r1, r6
            coords.y1 -= h;
 8004494:	f8ad 200e 	strh.w	r2, [sp, #14]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 8004498:	aa05      	add	r2, sp, #20
            coords.y2 += h;
 800449a:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 800449e:	a803      	add	r0, sp, #12
            coords.x2 += w;
 80044a0:	f8ad 3010 	strh.w	r3, [sp, #16]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
 80044a4:	f008 fbc2 	bl	800cc2c <lv_draw_rect>
 80044a8:	e57a      	b.n	8003fa0 <lv_obj_event+0x58>
            dsc->border_opa = LV_OPA_TRANSP;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80044b0:	e746      	b.n	8004340 <lv_obj_event+0x3f8>
            dsc->shadow_opa = LV_OPA_TRANSP;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80044b8:	e76c      	b.n	8004394 <lv_obj_event+0x44c>
	...

080044bc <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 80044bc:	6883      	ldr	r3, [r0, #8]
{
 80044be:	b510      	push	{r4, lr}
 80044c0:	4604      	mov	r4, r0
    if(obj->spec_attr == NULL) {
 80044c2:	b99b      	cbnz	r3, 80044ec <lv_obj_allocate_spec_attr+0x30>
        x++;
 80044c4:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <lv_obj_allocate_spec_attr+0x34>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 80044c6:	201c      	movs	r0, #28
        x++;
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 80044ce:	f013 fba3 	bl	8017c18 <lv_mem_alloc>
 80044d2:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 80044d4:	b900      	cbnz	r0, 80044d8 <lv_obj_allocate_spec_attr+0x1c>
 80044d6:	e7fe      	b.n	80044d6 <lv_obj_allocate_spec_attr+0x1a>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 80044d8:	211c      	movs	r1, #28
 80044da:	f013 fc1b 	bl	8017d14 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 80044de:	68a2      	ldr	r2, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 80044e0:	8b13      	ldrh	r3, [r2, #24]
 80044e2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80044e6:	f043 0303 	orr.w	r3, r3, #3
 80044ea:	8313      	strh	r3, [r2, #24]
}
 80044ec:	bd10      	pop	{r4, pc}
 80044ee:	bf00      	nop
 80044f0:	2000299c 	.word	0x2000299c

080044f4 <lv_obj_check_type>:
    if(obj == NULL) return false;
 80044f4:	b118      	cbz	r0, 80044fe <lv_obj_check_type+0xa>
    return obj->class_p == class_p ? true : false;
 80044f6:	6800      	ldr	r0, [r0, #0]
 80044f8:	1a43      	subs	r3, r0, r1
 80044fa:	4258      	negs	r0, r3
 80044fc:	4158      	adcs	r0, r3
}
 80044fe:	4770      	bx	lr

08004500 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8004500:	b570      	push	{r4, r5, r6, lr}
    const lv_obj_class_t * original_class_p = obj->class_p;
 8004502:	6805      	ldr	r5, [r0, #0]
{
 8004504:	4604      	mov	r4, r0

    if(obj->class_p->base_class) {
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	b113      	cbz	r3, 8004510 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 800450a:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 800450c:	f7ff fff8 	bl	8004500 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8004510:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8004512:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8004514:	b123      	cbz	r3, 8004520 <lv_obj_construct+0x20>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
}
 800451a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800451e:	4718      	bx	r3
}
 8004520:	bd70      	pop	{r4, r5, r6, pc}
	...

08004524 <lv_obj_class_create_obj>:
{
 8004524:	b573      	push	{r0, r1, r4, r5, r6, lr}

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 8004526:	4603      	mov	r3, r0
{
 8004528:	4606      	mov	r6, r0
 800452a:	460d      	mov	r5, r1
    while(base && base->instance_size == 0) base = base->base_class;
 800452c:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <lv_obj_class_create_obj+0xd4>)
 800452e:	b13b      	cbz	r3, 8004540 <lv_obj_class_create_obj+0x1c>
 8004530:	6999      	ldr	r1, [r3, #24]
 8004532:	420a      	tst	r2, r1
 8004534:	d002      	beq.n	800453c <lv_obj_class_create_obj+0x18>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 8004536:	f3c1 110f 	ubfx	r1, r1, #4, #16
 800453a:	e002      	b.n	8004542 <lv_obj_class_create_obj+0x1e>
    while(base && base->instance_size == 0) base = base->base_class;
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	e7f6      	b.n	800452e <lv_obj_class_create_obj+0xa>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8004540:	4619      	mov	r1, r3
    lv_obj_t * obj = lv_mem_alloc(s);
 8004542:	4608      	mov	r0, r1
 8004544:	9101      	str	r1, [sp, #4]
 8004546:	f013 fb67 	bl	8017c18 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 800454a:	9901      	ldr	r1, [sp, #4]
 800454c:	4604      	mov	r4, r0
 800454e:	b918      	cbnz	r0, 8004558 <lv_obj_class_create_obj+0x34>
 8004550:	2400      	movs	r4, #0
}
 8004552:	4620      	mov	r0, r4
 8004554:	b002      	add	sp, #8
 8004556:	bd70      	pop	{r4, r5, r6, pc}
    lv_memset_00(obj, s);
 8004558:	f013 fbdc 	bl	8017d14 <lv_memset_00>
    obj->parent = parent;
 800455c:	e9c4 6500 	strd	r6, r5, [r4]
    if(parent == NULL) {
 8004560:	bb45      	cbnz	r5, 80045b4 <lv_obj_class_create_obj+0x90>
        lv_disp_t * disp = lv_disp_get_default();
 8004562:	f012 fa91 	bl	8016a88 <lv_disp_get_default>
        if(!disp) {
 8004566:	4605      	mov	r5, r0
 8004568:	2800      	cmp	r0, #0
 800456a:	d0f1      	beq.n	8004550 <lv_obj_class_create_obj+0x2c>
        if(disp->screens == NULL) {
 800456c:	68c0      	ldr	r0, [r0, #12]
 800456e:	b998      	cbnz	r0, 8004598 <lv_obj_class_create_obj+0x74>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004570:	2004      	movs	r0, #4
 8004572:	f013 fb51 	bl	8017c18 <lv_mem_alloc>
            disp->screen_cnt = 1;
 8004576:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8004578:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 800457a:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 800457c:	626b      	str	r3, [r5, #36]	; 0x24
        obj->coords.x1 = 0;
 800457e:	2500      	movs	r5, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004580:	4628      	mov	r0, r5
        obj->coords.x1 = 0;
 8004582:	6165      	str	r5, [r4, #20]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8004584:	f012 fa86 	bl	8016a94 <lv_disp_get_hor_res>
 8004588:	3801      	subs	r0, #1
 800458a:	8320      	strh	r0, [r4, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 800458c:	4628      	mov	r0, r5
 800458e:	f012 fa91 	bl	8016ab4 <lv_disp_get_ver_res>
 8004592:	3801      	subs	r0, #1
 8004594:	8360      	strh	r0, [r4, #26]
 8004596:	e7dc      	b.n	8004552 <lv_obj_class_create_obj+0x2e>
            disp->screen_cnt++;
 8004598:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800459a:	3101      	adds	r1, #1
 800459c:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 800459e:	0089      	lsls	r1, r1, #2
 80045a0:	f013 fb50 	bl	8017c44 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 80045a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80045a6:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 80045a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045ac:	3b01      	subs	r3, #1
 80045ae:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80045b2:	e7e4      	b.n	800457e <lv_obj_class_create_obj+0x5a>
        if(parent->spec_attr == NULL) {
 80045b4:	68ab      	ldr	r3, [r5, #8]
 80045b6:	b913      	cbnz	r3, 80045be <lv_obj_class_create_obj+0x9a>
            lv_obj_allocate_spec_attr(parent);
 80045b8:	4628      	mov	r0, r5
 80045ba:	f7ff ff7f 	bl	80044bc <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 80045be:	68ae      	ldr	r6, [r5, #8]
 80045c0:	6830      	ldr	r0, [r6, #0]
 80045c2:	b948      	cbnz	r0, 80045d8 <lv_obj_class_create_obj+0xb4>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80045c4:	2004      	movs	r0, #4
 80045c6:	f013 fb27 	bl	8017c18 <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 80045ca:	68ab      	ldr	r3, [r5, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80045cc:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[0] = obj;
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 80045d2:	2201      	movs	r2, #1
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	e7bc      	b.n	8004552 <lv_obj_class_create_obj+0x2e>
            parent->spec_attr->child_cnt++;
 80045d8:	6871      	ldr	r1, [r6, #4]
 80045da:	3101      	adds	r1, #1
 80045dc:	6071      	str	r1, [r6, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children, sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 80045de:	0089      	lsls	r1, r1, #2
 80045e0:	f013 fb30 	bl	8017c44 <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 80045e4:	68aa      	ldr	r2, [r5, #8]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children, sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 80045e6:	6030      	str	r0, [r6, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 80045e8:	6853      	ldr	r3, [r2, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045f0:	3b01      	subs	r3, #1
 80045f2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 80045f6:	e7ac      	b.n	8004552 <lv_obj_class_create_obj+0x2e>
 80045f8:	000ffff0 	.word	0x000ffff0

080045fc <_lv_obj_destructor>:
{
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	6883      	ldr	r3, [r0, #8]
 8004604:	b10b      	cbz	r3, 800460a <_lv_obj_destructor+0xe>
 8004606:	4621      	mov	r1, r4
 8004608:	4798      	blx	r3
    if(obj->class_p->base_class) {
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b10b      	cbz	r3, 8004614 <_lv_obj_destructor+0x18>
        obj->class_p = obj->class_p->base_class;
 8004610:	6023      	str	r3, [r4, #0]
        _lv_obj_destructor(obj);
 8004612:	e7f5      	b.n	8004600 <_lv_obj_destructor+0x4>
}
 8004614:	bd10      	pop	{r4, pc}

08004616 <lv_obj_is_editable>:
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8004616:	6800      	ldr	r0, [r0, #0]
 8004618:	b130      	cbz	r0, 8004628 <lv_obj_is_editable+0x12>
 800461a:	7e03      	ldrb	r3, [r0, #24]
 800461c:	f013 0303 	ands.w	r3, r3, #3
 8004620:	d0f9      	beq.n	8004616 <lv_obj_is_editable>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8004622:	3b01      	subs	r3, #1
 8004624:	4258      	negs	r0, r3
 8004626:	4158      	adcs	r0, r3
}
 8004628:	4770      	bx	lr

0800462a <lv_obj_is_group_def>:
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 800462a:	6800      	ldr	r0, [r0, #0]
 800462c:	b130      	cbz	r0, 800463c <lv_obj_is_group_def+0x12>
 800462e:	7e03      	ldrb	r3, [r0, #24]
 8004630:	f013 030c 	ands.w	r3, r3, #12
 8004634:	d0f9      	beq.n	800462a <lv_obj_is_group_def>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8004636:	3b04      	subs	r3, #4
 8004638:	4258      	negs	r0, r3
 800463a:	4158      	adcs	r0, r3
}
 800463c:	4770      	bx	lr

0800463e <lv_obj_class_init_obj>:
{
 800463e:	b510      	push	{r4, lr}
 8004640:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 8004642:	f000 fc2e 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8004646:	2000      	movs	r0, #0
 8004648:	f002 ff38 	bl	80074bc <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 800464c:	4620      	mov	r0, r4
 800464e:	f004 f931 	bl	80088b4 <lv_theme_apply>
    lv_obj_construct(obj);
 8004652:	4620      	mov	r0, r4
 8004654:	f7ff ff54 	bl	8004500 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 8004658:	2001      	movs	r0, #1
 800465a:	f002 ff2f 	bl	80074bc <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800465e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004662:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8004666:	4620      	mov	r0, r4
 8004668:	f002 fcaa 	bl	8006fc0 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 800466c:	4620      	mov	r0, r4
 800466e:	f000 fd3e 	bl	80050ee <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 8004672:	f7fd fdd5 	bl	8002220 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8004676:	4602      	mov	r2, r0
 8004678:	b138      	cbz	r0, 800468a <lv_obj_class_init_obj+0x4c>
 800467a:	4620      	mov	r0, r4
 800467c:	f7ff ffd5 	bl	800462a <lv_obj_is_group_def>
 8004680:	b118      	cbz	r0, 800468a <lv_obj_class_init_obj+0x4c>
        lv_group_add_obj(def_group, obj);
 8004682:	4621      	mov	r1, r4
 8004684:	4610      	mov	r0, r2
 8004686:	f7fd fdfd 	bl	8002284 <lv_group_add_obj>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800468a:	4620      	mov	r0, r4
 800468c:	f003 fa66 	bl	8007b5c <lv_obj_get_parent>
    if(parent) {
 8004690:	b140      	cbz	r0, 80046a4 <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8004692:	4622      	mov	r2, r4
 8004694:	2122      	movs	r1, #34	; 0x22
 8004696:	f7fd fcc7 	bl	8002028 <lv_event_send>
        lv_obj_invalidate(obj);
 800469a:	4620      	mov	r0, r4
}
 800469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_obj_invalidate(obj);
 80046a0:	f000 bdea 	b.w	8005278 <lv_obj_invalidate>
}
 80046a4:	bd10      	pop	{r4, pc}

080046a6 <lv_obj_get_style_opa>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80046a6:	f240 4262 	movw	r2, #1122	; 0x462
{
 80046aa:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80046ac:	f002 ff0c 	bl	80074c8 <lv_obj_get_style_prop>
}
 80046b0:	b2c0      	uxtb	r0, r0
 80046b2:	bd08      	pop	{r3, pc}

080046b4 <lv_obj_get_style_blend_mode>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80046b4:	2268      	movs	r2, #104	; 0x68
{
 80046b6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80046b8:	f002 ff06 	bl	80074c8 <lv_obj_get_style_prop>
}
 80046bc:	b2c0      	uxtb	r0, r0
 80046be:	bd08      	pop	{r3, pc}

080046c0 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 80046c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c4:	4614      	mov	r4, r2
 80046c6:	460d      	mov	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80046c8:	2260      	movs	r2, #96	; 0x60
 80046ca:	4606      	mov	r6, r0
 80046cc:	f002 fefc 	bl	80074c8 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 80046d0:	8020      	strh	r0, [r4, #0]

    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 80046d2:	b1bd      	cbz	r5, 8004704 <lv_obj_init_draw_rect_dsc+0x44>
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff ffe5 	bl	80046a6 <lv_obj_get_style_opa>
 80046dc:	4680      	mov	r8, r0
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80046de:	4629      	mov	r1, r5
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff ffe0 	bl	80046a6 <lv_obj_get_style_opa>
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 80046e6:	2802      	cmp	r0, #2
    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 80046e8:	4607      	mov	r7, r0
    if(opa <= LV_OPA_MIN || main_opa <= LV_OPA_MIN) {
 80046ea:	d902      	bls.n	80046f2 <lv_obj_init_draw_rect_dsc+0x32>
 80046ec:	f1b8 0f02 	cmp.w	r8, #2
 80046f0:	d80b      	bhi.n	800470a <lv_obj_init_draw_rect_dsc+0x4a>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
 80046f2:	2300      	movs	r3, #0
 80046f4:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = LV_OPA_TRANSP;
 80046f6:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80046f8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = LV_OPA_TRANSP;
 80046fc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
               }
            }
        }
    }
#endif
}
 8004700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_opa_t main_opa = part != LV_PART_MAIN ? lv_obj_get_style_opa(obj, part) : LV_OPA_COVER;
 8004704:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004708:	e7e9      	b.n	80046de <lv_obj_init_draw_rect_dsc+0x1e>
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800470a:	4629      	mov	r1, r5
 800470c:	4630      	mov	r0, r6
 800470e:	f7ff ffd1 	bl	80046b4 <lv_obj_get_style_blend_mode>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004712:	7aa3      	ldrb	r3, [r4, #10]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004714:	70a0      	strb	r0, [r4, #2]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8004716:	b363      	cbz	r3, 8004772 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8004718:	2221      	movs	r2, #33	; 0x21
 800471a:	4629      	mov	r1, r5
 800471c:	4630      	mov	r0, r6
 800471e:	f002 fed3 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004722:	b2c0      	uxtb	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8004724:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8004726:	72a0      	strb	r0, [r4, #10]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8004728:	d923      	bls.n	8004772 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR_FILTERED);
 800472a:	f244 0220 	movw	r2, #16416	; 0x4020
 800472e:	4629      	mov	r1, r5
 8004730:	4630      	mov	r0, r6
 8004732:	f002 fec9 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8004736:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8004738:	80a0      	strh	r0, [r4, #4]
 800473a:	4629      	mov	r1, r5
 800473c:	4630      	mov	r0, r6
 800473e:	f002 fec3 	bl	80074c8 <lv_obj_get_style_prop>
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
 8004742:	7ae3      	ldrb	r3, [r4, #11]
 8004744:	f360 0302 	bfi	r3, r0, #0, #3
 8004748:	72e3      	strb	r3, [r4, #11]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
 800474a:	075b      	lsls	r3, r3, #29
 800474c:	d011      	beq.n	8004772 <lv_obj_init_draw_rect_dsc+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR);
 800474e:	2222      	movs	r2, #34	; 0x22
 8004750:	4629      	mov	r1, r5
 8004752:	4630      	mov	r0, r6
 8004754:	f002 feb8 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8004758:	2224      	movs	r2, #36	; 0x24
 800475a:	4629      	mov	r1, r5
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
 800475c:	80e0      	strh	r0, [r4, #6]
 800475e:	4630      	mov	r0, r6
 8004760:	f002 feb2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8004764:	2225      	movs	r2, #37	; 0x25
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
 8004766:	7220      	strb	r0, [r4, #8]
 8004768:	4629      	mov	r1, r5
 800476a:	4630      	mov	r0, r6
 800476c:	f002 feac 	bl	80074c8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
 8004770:	7260      	strb	r0, [r4, #9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004772:	f241 0232 	movw	r2, #4146	; 0x1032
 8004776:	4629      	mov	r1, r5
 8004778:	4630      	mov	r0, r6
 800477a:	f002 fea5 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800477e:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8004780:	83a0      	strh	r0, [r4, #28]
    if(draw_dsc->border_width) {
 8004782:	b1d0      	cbz	r0, 80047ba <lv_obj_init_draw_rect_dsc+0xfa>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8004784:	7fa3      	ldrb	r3, [r4, #30]
 8004786:	b1c3      	cbz	r3, 80047ba <lv_obj_init_draw_rect_dsc+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004788:	2231      	movs	r2, #49	; 0x31
 800478a:	4629      	mov	r1, r5
 800478c:	4630      	mov	r0, r6
 800478e:	f002 fe9b 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004792:	b2c0      	uxtb	r0, r0
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004794:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8004796:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8004798:	d90f      	bls.n	80047ba <lv_obj_init_draw_rect_dsc+0xfa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800479a:	2233      	movs	r2, #51	; 0x33
 800479c:	4629      	mov	r1, r5
 800479e:	4630      	mov	r0, r6
 80047a0:	f002 fe92 	bl	80074c8 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80047a4:	7fe3      	ldrb	r3, [r4, #31]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR_FILTERED);
 80047a6:	f244 0230 	movw	r2, #16432	; 0x4030
 80047aa:	4629      	mov	r1, r5
 80047ac:	f360 0345 	bfi	r3, r0, #1, #5
 80047b0:	4630      	mov	r0, r6
 80047b2:	77e3      	strb	r3, [r4, #31]
 80047b4:	f002 fe88 	bl	80074c8 <lv_obj_get_style_prop>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80047b8:	8360      	strh	r0, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 80047ba:	f640 023a 	movw	r2, #2106	; 0x83a
 80047be:	4629      	mov	r1, r5
 80047c0:	4630      	mov	r0, r6
 80047c2:	f002 fe81 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80047c6:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 80047c8:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->outline_width) {
 80047ca:	b1d0      	cbz	r0, 8004802 <lv_obj_init_draw_rect_dsc+0x142>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 80047cc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80047d0:	b1bb      	cbz	r3, 8004802 <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80047d2:	f640 023c 	movw	r2, #2108	; 0x83c
 80047d6:	4629      	mov	r1, r5
 80047d8:	4630      	mov	r0, r6
 80047da:	f002 fe75 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80047de:	b2c0      	uxtb	r0, r0
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80047e0:	2802      	cmp	r0, #2
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80047e2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80047e6:	d90c      	bls.n	8004802 <lv_obj_init_draw_rect_dsc+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80047e8:	f640 023d 	movw	r2, #2109	; 0x83d
 80047ec:	4629      	mov	r1, r5
 80047ee:	4630      	mov	r0, r6
 80047f0:	f002 fe6a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR);
 80047f4:	223b      	movs	r2, #59	; 0x3b
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80047f6:	84a0      	strh	r0, [r4, #36]	; 0x24
 80047f8:	4629      	mov	r1, r5
 80047fa:	4630      	mov	r0, r6
 80047fc:	f002 fe64 	bl	80074c8 <lv_obj_get_style_prop>
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
 8004800:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8004802:	7da3      	ldrb	r3, [r4, #22]
 8004804:	b313      	cbz	r3, 800484c <lv_obj_init_draw_rect_dsc+0x18c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8004806:	2226      	movs	r2, #38	; 0x26
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f002 fe5c 	bl	80074c8 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8004810:	60e0      	str	r0, [r4, #12]
        if(draw_dsc->bg_img_src) {
 8004812:	b1d8      	cbz	r0, 800484c <lv_obj_init_draw_rect_dsc+0x18c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8004814:	2227      	movs	r2, #39	; 0x27
 8004816:	4629      	mov	r1, r5
 8004818:	4630      	mov	r0, r6
 800481a:	f002 fe55 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800481e:	b2c0      	uxtb	r0, r0
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8004820:	2802      	cmp	r0, #2
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8004822:	75a0      	strb	r0, [r4, #22]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8004824:	d912      	bls.n	800484c <lv_obj_init_draw_rect_dsc+0x18c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8004826:	68e0      	ldr	r0, [r4, #12]
 8004828:	f005 ff08 	bl	800a63c <lv_img_src_get_type>
 800482c:	2802      	cmp	r0, #2
 800482e:	d169      	bne.n	8004904 <lv_obj_init_draw_rect_dsc+0x244>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8004830:	f241 4259 	movw	r2, #5209	; 0x1459
 8004834:	4629      	mov	r1, r5
 8004836:	4630      	mov	r0, r6
 8004838:	f002 fe46 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 800483c:	f240 4257 	movw	r2, #1111	; 0x457
                    draw_dsc->bg_img_symbol_font= lv_obj_get_style_text_font(obj, part);
 8004840:	6120      	str	r0, [r4, #16]
 8004842:	4629      	mov	r1, r5
 8004844:	4630      	mov	r0, r6
 8004846:	f002 fe3f 	bl	80074c8 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color(obj, part);
 800484a:	82a0      	strh	r0, [r4, #20]
    if(draw_dsc->shadow_opa) {
 800484c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004850:	b39b      	cbz	r3, 80048ba <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004852:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8004856:	4629      	mov	r1, r5
 8004858:	4630      	mov	r0, r6
 800485a:	f002 fe35 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800485e:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8004860:	8560      	strh	r0, [r4, #42]	; 0x2a
        if(draw_dsc->shadow_width) {
 8004862:	b350      	cbz	r0, 80048ba <lv_obj_init_draw_rect_dsc+0x1fa>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8004864:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8004868:	2b02      	cmp	r3, #2
 800486a:	d926      	bls.n	80048ba <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 800486c:	f640 0245 	movw	r2, #2117	; 0x845
 8004870:	4629      	mov	r1, r5
 8004872:	4630      	mov	r0, r6
 8004874:	f002 fe28 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004878:	b2c0      	uxtb	r0, r0
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 800487a:	2802      	cmp	r0, #2
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 800487c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8004880:	d91b      	bls.n	80048ba <lv_obj_init_draw_rect_dsc+0x1fa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004882:	f640 0241 	movw	r2, #2113	; 0x841
 8004886:	4629      	mov	r1, r5
 8004888:	4630      	mov	r0, r6
 800488a:	f002 fe1d 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 800488e:	f640 0242 	movw	r2, #2114	; 0x842
 8004892:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8004894:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8004896:	4630      	mov	r0, r6
 8004898:	f002 fe16 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800489c:	f640 0243 	movw	r2, #2115	; 0x843
 80048a0:	4629      	mov	r1, r5
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 80048a2:	85e0      	strh	r0, [r4, #46]	; 0x2e
 80048a4:	4630      	mov	r0, r6
 80048a6:	f002 fe0f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR_FILTERED);
 80048aa:	f244 0244 	movw	r2, #16452	; 0x4044
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 80048ae:	8620      	strh	r0, [r4, #48]	; 0x30
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	f002 fe08 	bl	80074c8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 80048b8:	8520      	strh	r0, [r4, #40]	; 0x28
    if(main_opa < LV_OPA_MAX) {
 80048ba:	f1b8 0ffc 	cmp.w	r8, #252	; 0xfc
 80048be:	d837      	bhi.n	8004930 <lv_obj_init_draw_rect_dsc+0x270>
        opa = (uint16_t)((uint16_t) main_opa * opa) >> 8;
 80048c0:	fb18 f707 	smulbb	r7, r8, r7
 80048c4:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 80048c8:	b2bf      	uxth	r7, r7
 80048ca:	7aa3      	ldrb	r3, [r4, #10]
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80048cc:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa) >> 8;
 80048d0:	fb13 f307 	smulbb	r3, r3, r7
 80048d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80048d8:	72a3      	strb	r3, [r4, #10]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa) >> 8;
 80048da:	7fa3      	ldrb	r3, [r4, #30]
 80048dc:	fb13 f307 	smulbb	r3, r3, r7
 80048e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80048e4:	77a3      	strb	r3, [r4, #30]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 80048e6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80048ea:	fb13 f307 	smulbb	r3, r3, r7
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80048ee:	fb10 f707 	smulbb	r7, r0, r7
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 80048f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80048f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa) >> 8;
 80048fa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        draw_dsc->outline_opa = (uint16_t)((uint16_t)draw_dsc->outline_opa * opa) >> 8;
 80048fe:	f884 7026 	strb.w	r7, [r4, #38]	; 0x26
 8004902:	e6fd      	b.n	8004700 <lv_obj_init_draw_rect_dsc+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR);
 8004904:	2228      	movs	r2, #40	; 0x28
 8004906:	4629      	mov	r1, r5
 8004908:	4630      	mov	r0, r6
 800490a:	f002 fddd 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 800490e:	2229      	movs	r2, #41	; 0x29
 8004910:	4629      	mov	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor(obj, part);
 8004912:	82a0      	strh	r0, [r4, #20]
 8004914:	4630      	mov	r0, r6
 8004916:	f002 fdd7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800491a:	222a      	movs	r2, #42	; 0x2a
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 800491c:	75e0      	strb	r0, [r4, #23]
 800491e:	4629      	mov	r1, r5
 8004920:	4630      	mov	r0, r6
 8004922:	f002 fdd1 	bl	80074c8 <lv_obj_get_style_prop>
    return (bool)v.num;
 8004926:	3800      	subs	r0, #0
 8004928:	bf18      	it	ne
 800492a:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 800492c:	7620      	strb	r0, [r4, #24]
 800492e:	e78d      	b.n	800484c <lv_obj_init_draw_rect_dsc+0x18c>
    if(opa < LV_OPA_MAX) {
 8004930:	2ffc      	cmp	r7, #252	; 0xfc
 8004932:	f63f aee5 	bhi.w	8004700 <lv_obj_init_draw_rect_dsc+0x40>
 8004936:	e7c7      	b.n	80048c8 <lv_obj_init_draw_rect_dsc+0x208>

08004938 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 800493c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8004940:	4605      	mov	r5, r0
 8004942:	460e      	mov	r6, r1
 8004944:	f002 fdc0 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004948:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800494a:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 800494c:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800494e:	d952      	bls.n	80049f6 <lv_obj_init_draw_label_dsc+0xbe>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	f7ff fea7 	bl	80046a6 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 8004958:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 800495a:	bf9f      	itttt	ls
 800495c:	7ea3      	ldrbls	r3, [r4, #26]
 800495e:	fb13 f000 	smulbbls	r0, r3, r0
 8004962:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004966:	76a0      	strbls	r0, [r4, #26]
    }
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8004968:	7ea3      	ldrb	r3, [r4, #26]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d943      	bls.n	80049f6 <lv_obj_init_draw_label_dsc+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 800496e:	f244 4257 	movw	r2, #17495	; 0x4457
 8004972:	4631      	mov	r1, r6
 8004974:	4628      	mov	r0, r5
 8004976:	f002 fda7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800497a:	f241 425a 	movw	r2, #5210	; 0x145a
 800497e:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8004980:	81a0      	strh	r0, [r4, #12]
 8004982:	4628      	mov	r0, r5
 8004984:	f002 fda0 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8004988:	f241 425b 	movw	r2, #5211	; 0x145b
 800498c:	4631      	mov	r1, r6
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800498e:	82a0      	strh	r0, [r4, #20]
 8004990:	4628      	mov	r0, r5
 8004992:	f002 fd99 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8004996:	f240 425c 	movw	r2, #1116	; 0x45c
 800499a:	4631      	mov	r1, r6
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 800499c:	8260      	strh	r0, [r4, #18]
 800499e:	4628      	mov	r0, r5
 80049a0:	f002 fd92 	bl	80074c8 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80049a4:	7f63      	ldrb	r3, [r4, #29]
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049a6:	4631      	mov	r1, r6
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80049a8:	f360 0384 	bfi	r3, r0, #2, #3
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049ac:	4628      	mov	r0, r5
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80049ae:	7763      	strb	r3, [r4, #29]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80049b0:	f7ff fe80 	bl	80046b4 <lv_obj_get_style_blend_mode>
 80049b4:	7f63      	ldrb	r3, [r4, #29]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80049b6:	f241 4259 	movw	r2, #5209	; 0x1459
 80049ba:	4631      	mov	r1, r6
 80049bc:	f360 1347 	bfi	r3, r0, #5, #3
 80049c0:	4628      	mov	r0, r5
 80049c2:	7763      	strb	r3, [r4, #29]
 80049c4:	f002 fd80 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 80049c8:	f241 425d 	movw	r2, #5213	; 0x145d
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80049cc:	6020      	str	r0, [r4, #0]
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	f002 fd79 	bl	80074c8 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80049d6:	7f62      	ldrb	r2, [r4, #29]
 80049d8:	f360 0201 	bfi	r2, r0, #0, #2
    if(draw_dsc->align == LV_TEXT_ALIGN_AUTO) {
 80049dc:	b2d3      	uxtb	r3, r2
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80049de:	7762      	strb	r2, [r4, #29]
    if(draw_dsc->align == LV_TEXT_ALIGN_AUTO) {
 80049e0:	0792      	lsls	r2, r2, #30
 80049e2:	d108      	bne.n	80049f6 <lv_obj_init_draw_label_dsc+0xbe>
        if(draw_dsc->bidi_dir == LV_BASE_DIR_RTL) draw_dsc->align = LV_TEXT_ALIGN_RIGHT;
 80049e4:	7ee2      	ldrb	r2, [r4, #27]
 80049e6:	2a01      	cmp	r2, #1
        else draw_dsc->align = LV_TEXT_ALIGN_LEFT;
 80049e8:	bf16      	itet	ne
 80049ea:	2201      	movne	r2, #1
        if(draw_dsc->bidi_dir == LV_BASE_DIR_RTL) draw_dsc->align = LV_TEXT_ALIGN_RIGHT;
 80049ec:	f043 0303 	orreq.w	r3, r3, #3
        else draw_dsc->align = LV_TEXT_ALIGN_LEFT;
 80049f0:	f362 0301 	bfine	r3, r2, #0, #2
 80049f4:	7763      	strb	r3, [r4, #29]
    }
}
 80049f6:	bd70      	pop	{r4, r5, r6, pc}

080049f8 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80049fc:	2246      	movs	r2, #70	; 0x46
 80049fe:	4605      	mov	r5, r0
 8004a00:	460e      	mov	r6, r1
 8004a02:	f002 fd61 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004a06:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004a08:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 8004a0a:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004a0c:	d93b      	bls.n	8004a86 <lv_obj_init_draw_img_dsc+0x8e>

    lv_opa_t opa_scale = lv_obj_get_style_opa(obj, part);
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff fe48 	bl	80046a6 <lv_obj_get_style_opa>
    if(opa_scale < LV_OPA_MAX) {
 8004a16:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
 8004a18:	bf9f      	itttt	ls
 8004a1a:	7ae3      	ldrbls	r3, [r4, #11]
 8004a1c:	fb13 f000 	smulbbls	r0, r3, r0
 8004a20:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004a24:	72e0      	strbls	r0, [r4, #11]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004a26:	7ae3      	ldrb	r3, [r4, #11]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d92c      	bls.n	8004a86 <lv_obj_init_draw_img_dsc+0x8e>

    draw_dsc->angle = 0;
 8004a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	6023      	str	r3, [r4, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004a36:	8b2b      	ldrh	r3, [r5, #24]
 8004a38:	8aaa      	ldrh	r2, [r5, #20]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	1a9b      	subs	r3, r3, r2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8004a3e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004a42:	fa02 f383 	sxtah	r3, r2, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004a46:	8aea      	ldrh	r2, [r5, #22]
 8004a48:	105b      	asrs	r3, r3, #1
 8004a4a:	80a3      	strh	r3, [r4, #4]
 8004a4c:	8b6b      	ldrh	r3, [r5, #26]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8004a52:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8004a56:	fa02 f383 	sxtah	r3, r2, r3
 8004a5a:	2248      	movs	r2, #72	; 0x48
 8004a5c:	105b      	asrs	r3, r3, #1
 8004a5e:	80e3      	strh	r3, [r4, #6]
 8004a60:	f002 fd32 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004a64:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 8004a66:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8004a68:	b128      	cbz	r0, 8004a76 <lv_obj_init_draw_img_dsc+0x7e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR);
 8004a6a:	2247      	movs	r2, #71	; 0x47
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f002 fd2a 	bl	80074c8 <lv_obj_get_style_prop>
        draw_dsc->recolor = lv_obj_get_style_img_recolor(obj, part);
 8004a74:	8120      	strh	r0, [r4, #8]
    }
#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004a76:	4631      	mov	r1, r6
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fe1b 	bl	80046b4 <lv_obj_get_style_blend_mode>
 8004a7e:	7b23      	ldrb	r3, [r4, #12]
 8004a80:	f360 0303 	bfi	r3, r0, #0, #4
 8004a84:	7323      	strb	r3, [r4, #12]
#endif
}
 8004a86:	bd70      	pop	{r4, r5, r6, pc}

08004a88 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4614      	mov	r4, r2
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 8004a8c:	f640 0249 	movw	r2, #2121	; 0x849
 8004a90:	4605      	mov	r5, r0
 8004a92:	460e      	mov	r6, r1
 8004a94:	f002 fd18 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a98:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8004a9a:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d040      	beq.n	8004b22 <lv_obj_init_draw_line_dsc+0x9a>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_line_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 8004aa0:	224e      	movs	r2, #78	; 0x4e
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f002 fd0f 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004aaa:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004aac:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8004aae:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004ab0:	d937      	bls.n	8004b22 <lv_obj_init_draw_line_dsc+0x9a>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f7ff fdf6 	bl	80046a6 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 8004aba:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 8004abc:	bf9f      	itttt	ls
 8004abe:	7a23      	ldrbls	r3, [r4, #8]
 8004ac0:	fb13 f000 	smulbbls	r0, r3, r0
 8004ac4:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004ac8:	7220      	strbls	r0, [r4, #8]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004aca:	7a23      	ldrb	r3, [r4, #8]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d928      	bls.n	8004b22 <lv_obj_init_draw_line_dsc+0x9a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR);
 8004ad0:	224d      	movs	r2, #77	; 0x4d
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f002 fcf7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 8004ada:	224a      	movs	r2, #74	; 0x4a

    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
 8004adc:	8020      	strh	r0, [r4, #0]
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f002 fcf1 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004ae6:	b200      	sxth	r0, r0

    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8004ae8:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 8004aea:	b128      	cbz	r0, 8004af8 <lv_obj_init_draw_line_dsc+0x70>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 8004aec:	224b      	movs	r2, #75	; 0x4b
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	f002 fce9 	bl	80074c8 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8004af6:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 8004af8:	224c      	movs	r2, #76	; 0x4c
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	f002 fce3 	bl	80074c8 <lv_obj_get_style_prop>
    }

    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8004b02:	7a63      	ldrb	r3, [r4, #9]
 8004b04:	f000 0001 	and.w	r0, r0, #1
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004b08:	4631      	mov	r1, r6
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8004b0a:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 8004b0e:	f360 03c3 	bfi	r3, r0, #3, #1
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004b12:	4628      	mov	r0, r5
    draw_dsc->round_end = draw_dsc->round_start;
 8004b14:	7263      	strb	r3, [r4, #9]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004b16:	f7ff fdcd 	bl	80046b4 <lv_obj_get_style_blend_mode>
 8004b1a:	7a63      	ldrb	r3, [r4, #9]
 8004b1c:	f360 0301 	bfi	r3, r0, #0, #2
 8004b20:	7263      	strb	r3, [r4, #9]
#endif
}
 8004b22:	bd70      	pop	{r4, r5, r6, pc}

08004b24 <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4614      	mov	r4, r2
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8004b28:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	460e      	mov	r6, r1
 8004b30:	f002 fcca 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004b34:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 8004b36:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8004b38:	b3a0      	cbz	r0, 8004ba4 <lv_obj_init_draw_arc_dsc+0x80>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_arc_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 8004b3a:	2253      	movs	r2, #83	; 0x53
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f002 fcc2 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004b44:	b2c0      	uxtb	r0, r0

    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004b46:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 8004b48:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004b4a:	d92b      	bls.n	8004ba4 <lv_obj_init_draw_arc_dsc+0x80>

    lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7ff fda9 	bl	80046a6 <lv_obj_get_style_opa>
    if(opa < LV_OPA_MAX) {
 8004b54:	28fc      	cmp	r0, #252	; 0xfc
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa) >> 8;
 8004b56:	bf9f      	itttt	ls
 8004b58:	7a23      	ldrbls	r3, [r4, #8]
 8004b5a:	fb13 f000 	smulbbls	r0, r3, r0
 8004b5e:	f3c0 2007 	ubfxls	r0, r0, #8, #8
 8004b62:	7220      	strbls	r0, [r4, #8]
    }
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8004b64:	7a23      	ldrb	r3, [r4, #8]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d91c      	bls.n	8004ba4 <lv_obj_init_draw_arc_dsc+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR);
 8004b6a:	2252      	movs	r2, #82	; 0x52
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f002 fcaa 	bl	80074c8 <lv_obj_get_style_prop>
}

static inline const void * lv_obj_get_style_arc_img_src(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 8004b74:	2254      	movs	r2, #84	; 0x54
 8004b76:	4631      	mov	r1, r6

    draw_dsc->color = lv_obj_get_style_arc_color(obj, part);
 8004b78:	8020      	strh	r0, [r4, #0]
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f002 fca4 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8004b80:	2251      	movs	r2, #81	; 0x51
 8004b82:	4631      	mov	r1, r6
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 8004b84:	6060      	str	r0, [r4, #4]
 8004b86:	4628      	mov	r0, r5
 8004b88:	f002 fc9e 	bl	80074c8 <lv_obj_get_style_prop>

    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004b8c:	7a63      	ldrb	r3, [r4, #9]

#if LV_DRAW_COMPLEX
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004b8e:	4631      	mov	r1, r6
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004b90:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004b94:	4628      	mov	r0, r5
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8004b96:	7263      	strb	r3, [r4, #9]
    draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8004b98:	f7ff fd8c 	bl	80046b4 <lv_obj_get_style_blend_mode>
 8004b9c:	7a63      	ldrb	r3, [r4, #9]
 8004b9e:	f360 0301 	bfi	r3, r0, #0, #2
 8004ba2:	7263      	strb	r3, [r4, #9]
#endif
}
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}

08004ba6 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8004ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8004ba8:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8004bac:	4605      	mov	r5, r0
 8004bae:	460e      	mov	r6, r1
 8004bb0:	f002 fc8a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004bb4:	b207      	sxth	r7, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8004bb6:	bba7      	cbnz	r7, 8004c22 <lv_obj_calculate_ext_draw_size+0x7c>
    lv_coord_t s = 0;
 8004bb8:	2400      	movs	r4, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8004bba:	f640 023a 	movw	r2, #2106	; 0x83a
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f002 fc81 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004bc6:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8004bc8:	b1a7      	cbz	r7, 8004bf4 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8004bca:	f640 023c 	movw	r2, #2108	; 0x83c
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f002 fc79 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004bd6:	b2c0      	uxtb	r0, r0
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
        if(outline_opa > LV_OPA_MIN) {
 8004bd8:	2802      	cmp	r0, #2
 8004bda:	d90b      	bls.n	8004bf4 <lv_obj_calculate_ext_draw_size+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8004bdc:	f640 023d 	movw	r2, #2109	; 0x83d
 8004be0:	4631      	mov	r1, r6
 8004be2:	4628      	mov	r0, r5
 8004be4:	f002 fc70 	bl	80074c8 <lv_obj_get_style_prop>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
            s = LV_MAX(s, outline_pad + outline_width);
 8004be8:	fa07 f080 	sxtah	r0, r7, r0
 8004bec:	4284      	cmp	r4, r0
 8004bee:	bfb8      	it	lt
 8004bf0:	4604      	movlt	r4, r0
 8004bf2:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	f640 020a 	movw	r2, #2058	; 0x80a
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f002 fc64 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004c00:	f640 020b 	movw	r2, #2059	; 0x80b
    return (lv_coord_t)v.num;
 8004c04:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f002 fc5d 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004c0e:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 8004c10:	42b8      	cmp	r0, r7
 8004c12:	bfb8      	it	lt
 8004c14:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 8004c16:	2800      	cmp	r0, #0
 8004c18:	bfc4      	itt	gt
 8004c1a:	1824      	addgt	r4, r4, r0
 8004c1c:	b224      	sxthgt	r4, r4

    return s;
}
 8004c1e:	4620      	mov	r0, r4
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8004c22:	f640 0245 	movw	r2, #2117	; 0x845
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f002 fc4d 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004c2e:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8004c30:	2802      	cmp	r0, #2
 8004c32:	d9c1      	bls.n	8004bb8 <lv_obj_calculate_ext_draw_size+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8004c34:	f640 0243 	movw	r2, #2115	; 0x843
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8004c3c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8004c40:	f002 fc42 	bl	80074c8 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8004c44:	3001      	adds	r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8004c46:	f640 0241 	movw	r2, #2113	; 0x841
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	eb00 0767 	add.w	r7, r0, r7, asr #1
 8004c50:	4628      	mov	r0, r5
 8004c52:	f002 fc39 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004c56:	f640 0242 	movw	r2, #2114	; 0x842
 8004c5a:	b2bc      	uxth	r4, r7
 8004c5c:	4631      	mov	r1, r6
    return (lv_coord_t)v.num;
 8004c5e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8004c60:	4628      	mov	r0, r5
 8004c62:	f002 fc31 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004c66:	b200      	sxth	r0, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	bfb8      	it	lt
 8004c6c:	4240      	neglt	r0, r0
 8004c6e:	2f00      	cmp	r7, #0
 8004c70:	bfb8      	it	lt
 8004c72:	427f      	neglt	r7, r7
 8004c74:	b280      	uxth	r0, r0
 8004c76:	b2bf      	uxth	r7, r7
 8004c78:	42b8      	cmp	r0, r7
 8004c7a:	bf2c      	ite	cs
 8004c7c:	1824      	addcs	r4, r4, r0
 8004c7e:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 8004c80:	b224      	sxth	r4, r4
 8004c82:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004c86:	e798      	b.n	8004bba <lv_obj_calculate_ext_draw_size+0x14>

08004c88 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, const lv_area_t * clip_area)
{
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8004c8e:	2148      	movs	r1, #72	; 0x48
 8004c90:	f013 f840 	bl	8017d14 <lv_memset_00>
    dsc->clip_area = clip_area;
 8004c94:	6025      	str	r5, [r4, #0]
}
 8004c96:	bd38      	pop	{r3, r4, r5, pc}

08004c98 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8004c98:	6880      	ldr	r0, [r0, #8]
 8004c9a:	b108      	cbz	r0, 8004ca0 <_lv_obj_get_ext_draw_size+0x8>
 8004c9c:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
    else return 0;
}
 8004ca0:	4770      	bx	lr

08004ca2 <lv_obj_refresh_ext_draw_size>:
{
 8004ca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ca4:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004ca6:	f7ff fff7 	bl	8004c98 <_lv_obj_get_ext_draw_size>
    lv_coord_t s_new = 0;
 8004caa:	2300      	movs	r3, #0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8004cac:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8004cae:	f10d 0206 	add.w	r2, sp, #6
 8004cb2:	2113      	movs	r1, #19
 8004cb4:	4620      	mov	r0, r4
    lv_coord_t s_new = 0;
 8004cb6:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8004cba:	f7fd f9b5 	bl	8002028 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8004cbe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	d002      	beq.n	8004ccc <lv_obj_refresh_ext_draw_size+0x2a>
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	f000 fad6 	bl	8005278 <lv_obj_invalidate>
    if(obj->spec_attr) {
 8004ccc:	68a2      	ldr	r2, [r4, #8]
 8004cce:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004cd2:	b14a      	cbz	r2, 8004ce8 <lv_obj_refresh_ext_draw_size+0x46>
        obj->spec_attr->ext_draw_size = s_new;
 8004cd4:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 8004cd6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8004cda:	42ab      	cmp	r3, r5
 8004cdc:	d002      	beq.n	8004ce4 <lv_obj_refresh_ext_draw_size+0x42>
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 faca 	bl	8005278 <lv_obj_invalidate>
}
 8004ce4:	b003      	add	sp, #12
 8004ce6:	bd30      	pop	{r4, r5, pc}
    else if(s_new != 0) {
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f4      	beq.n	8004cd6 <lv_obj_refresh_ext_draw_size+0x34>
        lv_obj_allocate_spec_attr(obj);
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7ff fbe5 	bl	80044bc <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8004cf2:	68a3      	ldr	r3, [r4, #8]
 8004cf4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004cf8:	82da      	strh	r2, [r3, #22]
 8004cfa:	e7ec      	b.n	8004cd6 <lv_obj_refresh_ext_draw_size+0x34>

08004cfc <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004cfc:	f241 0232 	movw	r2, #4146	; 0x1032
 8004d00:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 8004d02:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004d04:	f002 fbe0 	bl	80074c8 <lv_obj_get_style_prop>
}
 8004d08:	b200      	sxth	r0, r0
 8004d0a:	bd08      	pop	{r3, pc}

08004d0c <lv_obj_get_style_pad_left.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004d0c:	f241 0212 	movw	r2, #4114	; 0x1012
 8004d10:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
 8004d12:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004d14:	f002 fbd8 	bl	80074c8 <lv_obj_get_style_prop>
}
 8004d18:	b200      	sxth	r0, r0
 8004d1a:	bd08      	pop	{r3, pc}

08004d1c <lv_obj_get_style_pad_top.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004d1c:	f241 0210 	movw	r2, #4112	; 0x1010
 8004d20:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
 8004d22:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004d24:	f002 fbd0 	bl	80074c8 <lv_obj_get_style_prop>
}
 8004d28:	b200      	sxth	r0, r0
 8004d2a:	bd08      	pop	{r3, pc}

08004d2c <lv_obj_set_width>:
    lv_obj_set_width(obj, w);
    lv_obj_set_height(obj, h);
}

void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 8004d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_w;
    lv_style_value_t v_w;

    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004d2e:	2300      	movs	r3, #0
{
 8004d30:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004d32:	aa01      	add	r2, sp, #4
 8004d34:	f241 0101 	movw	r1, #4097	; 0x1001
{
 8004d38:	4605      	mov	r5, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8004d3a:	f002 fd16 	bl	800776a <lv_obj_get_local_style_prop>

    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8004d3e:	2801      	cmp	r0, #1
 8004d40:	d104      	bne.n	8004d4c <lv_obj_set_width+0x20>
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	d103      	bne.n	8004d50 <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
    }
}
 8004d48:	b003      	add	sp, #12
 8004d4a:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d1fb      	bne.n	8004d48 <lv_obj_set_width+0x1c>
static inline void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 8004d50:	2300      	movs	r3, #0
 8004d52:	4622      	mov	r2, r4
 8004d54:	f241 0101 	movw	r1, #4097	; 0x1001
 8004d58:	4628      	mov	r0, r5
 8004d5a:	f002 fc99 	bl	8007690 <lv_obj_set_local_style_prop>
}
 8004d5e:	e7f3      	b.n	8004d48 <lv_obj_set_width+0x1c>

08004d60 <lv_obj_set_height>:

void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 8004d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_res_t res_h;
    lv_style_value_t v_h;

    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004d62:	2300      	movs	r3, #0
{
 8004d64:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004d66:	aa01      	add	r2, sp, #4
 8004d68:	f241 0104 	movw	r1, #4100	; 0x1004
{
 8004d6c:	4605      	mov	r5, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8004d6e:	f002 fcfc 	bl	800776a <lv_obj_get_local_style_prop>

    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004d72:	2801      	cmp	r0, #1
 8004d74:	d104      	bne.n	8004d80 <lv_obj_set_height+0x20>
 8004d76:	9b01      	ldr	r3, [sp, #4]
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d103      	bne.n	8004d84 <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
    }
}
 8004d7c:	b003      	add	sp, #12
 8004d7e:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1fb      	bne.n	8004d7c <lv_obj_set_height+0x1c>
static inline void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 8004d84:	2300      	movs	r3, #0
 8004d86:	4622      	mov	r2, r4
 8004d88:	f241 0104 	movw	r1, #4100	; 0x1004
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f002 fc7f 	bl	8007690 <lv_obj_set_local_style_prop>
}
 8004d92:	e7f3      	b.n	8004d7c <lv_obj_set_height+0x1c>

08004d94 <lv_obj_set_size>:
{
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 8004d9a:	f7ff ffc7 	bl	8004d2c <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4620      	mov	r0, r4
}
 8004da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_height(obj, h);
 8004da6:	f7ff bfdb 	b.w	8004d60 <lv_obj_set_height>

08004daa <lv_obj_set_content_height>:

    lv_obj_set_width(obj, w + pleft + pright + 2 * border_width);
}

void lv_obj_set_content_height(lv_obj_t * obj, lv_coord_t h)
{
 8004daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dac:	4605      	mov	r5, r0
 8004dae:	460c      	mov	r4, r1
    lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8004db0:	f7ff ffb4 	bl	8004d1c <lv_obj_get_style_pad_top.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8004db4:	2100      	movs	r1, #0
 8004db6:	4606      	mov	r6, r0
 8004db8:	f241 0211 	movw	r2, #4113	; 0x1011
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f002 fb83 	bl	80074c8 <lv_obj_get_style_prop>
 8004dc2:	4607      	mov	r7, r0
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f7ff ff99 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>

    lv_obj_set_height(obj, h + ptop + pbottom + 2 * border_width);
 8004dca:	19e1      	adds	r1, r4, r7
 8004dcc:	198c      	adds	r4, r1, r6
 8004dce:	eb04 0440 	add.w	r4, r4, r0, lsl #1
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	b221      	sxth	r1, r4
}
 8004dd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_obj_set_height(obj, h + ptop + pbottom + 2 * border_width);
 8004dda:	f7ff bfc1 	b.w	8004d60 <lv_obj_set_height>
	...

08004de0 <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8004de0:	b538      	push	{r3, r4, r5, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004de2:	490b      	ldr	r1, [pc, #44]	; (8004e10 <lv_obj_is_layout_positioned+0x30>)
{
 8004de4:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8004de6:	f7ff f8a3 	bl	8003f30 <lv_obj_has_flag_any>
 8004dea:	4604      	mov	r4, r0
 8004dec:	b108      	cbz	r0, 8004df2 <lv_obj_is_layout_positioned+0x12>
 8004dee:	2000      	movs	r0, #0
    if(parent == NULL) return false;

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
    if(layout) return true;
    else return false;
}
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004df2:	4628      	mov	r0, r5
 8004df4:	f002 feb2 	bl	8007b5c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0f8      	beq.n	8004dee <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004dfc:	f241 0269 	movw	r2, #4201	; 0x1069
 8004e00:	4621      	mov	r1, r4
 8004e02:	f002 fb61 	bl	80074c8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004e06:	b280      	uxth	r0, r0
    if(layout) return true;
 8004e08:	3800      	subs	r0, #0
 8004e0a:	bf18      	it	ne
 8004e0c:	2001      	movne	r0, #1
 8004e0e:	e7ef      	b.n	8004df0 <lv_obj_is_layout_positioned+0x10>
 8004e10:	00018001 	.word	0x00018001

08004e14 <lv_obj_set_x>:
{
 8004e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e16:	4604      	mov	r4, r0
 8004e18:	460d      	mov	r5, r1
    if(lv_obj_is_layout_positioned(obj)) {
 8004e1a:	f7ff ffe1 	bl	8004de0 <lv_obj_is_layout_positioned>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	b950      	cbnz	r0, 8004e38 <lv_obj_set_x+0x24>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8004e22:	aa01      	add	r2, sp, #4
 8004e24:	f241 0107 	movw	r1, #4103	; 0x1007
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f002 fc9e 	bl	800776a <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8004e2e:	2801      	cmp	r0, #1
 8004e30:	d104      	bne.n	8004e3c <lv_obj_set_x+0x28>
 8004e32:	9b01      	ldr	r3, [sp, #4]
 8004e34:	42ab      	cmp	r3, r5
 8004e36:	d103      	bne.n	8004e40 <lv_obj_set_x+0x2c>
}
 8004e38:	b003      	add	sp, #12
 8004e3a:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d1fb      	bne.n	8004e38 <lv_obj_set_x+0x24>
static inline void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 8004e40:	2300      	movs	r3, #0
 8004e42:	462a      	mov	r2, r5
 8004e44:	f241 0107 	movw	r1, #4103	; 0x1007
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f002 fc21 	bl	8007690 <lv_obj_set_local_style_prop>
}
 8004e4e:	e7f3      	b.n	8004e38 <lv_obj_set_x+0x24>

08004e50 <lv_obj_set_y>:
{
 8004e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e52:	4604      	mov	r4, r0
 8004e54:	460d      	mov	r5, r1
    if(lv_obj_is_layout_positioned(obj)) {
 8004e56:	f7ff ffc3 	bl	8004de0 <lv_obj_is_layout_positioned>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	b950      	cbnz	r0, 8004e74 <lv_obj_set_y+0x24>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8004e5e:	aa01      	add	r2, sp, #4
 8004e60:	f241 0108 	movw	r1, #4104	; 0x1008
 8004e64:	4620      	mov	r0, r4
 8004e66:	f002 fc80 	bl	800776a <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004e6a:	2801      	cmp	r0, #1
 8004e6c:	d104      	bne.n	8004e78 <lv_obj_set_y+0x28>
 8004e6e:	9b01      	ldr	r3, [sp, #4]
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	d103      	bne.n	8004e7c <lv_obj_set_y+0x2c>
}
 8004e74:	b003      	add	sp, #12
 8004e76:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d1fb      	bne.n	8004e74 <lv_obj_set_y+0x24>
static inline void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	462a      	mov	r2, r5
 8004e80:	f241 0108 	movw	r1, #4104	; 0x1008
 8004e84:	4620      	mov	r0, r4
 8004e86:	f002 fc03 	bl	8007690 <lv_obj_set_local_style_prop>
}
 8004e8a:	e7f3      	b.n	8004e74 <lv_obj_set_y+0x24>

08004e8c <lv_obj_set_pos>:
{
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 8004e92:	f7ff ffbf 	bl	8004e14 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8004e96:	4629      	mov	r1, r5
 8004e98:	4620      	mov	r0, r4
}
 8004e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_y(obj, y);
 8004e9e:	f7ff bfd7 	b.w	8004e50 <lv_obj_set_y>

08004ea2 <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
    obj->layout_inv = 1;
 8004ea2:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
{
 8004eaa:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 8004eac:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is an something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8004eb0:	f002 fe2d 	bl	8007b0e <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8004eb4:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004eb8:	f042 0202 	orr.w	r2, r2, #2
 8004ebc:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8004ec0:	f002 fe2c 	bl	8007b1c <lv_obj_get_disp>
    lv_timer_resume(disp->refr_timer);
 8004ec4:	6840      	ldr	r0, [r0, #4]
}
 8004ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_timer_resume(disp->refr_timer);
 8004eca:	f013 bdc8 	b.w	8018a5e <lv_timer_resume>
	...

08004ed0 <lv_layout_register>:

    mutex = false;
}

uint32_t lv_layout_register(lv_layout_update_cb_t cb, void * user_data)
{
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    layout_cnt++;
 8004ed2:	4e0c      	ldr	r6, [pc, #48]	; (8004f04 <lv_layout_register+0x34>)
{
 8004ed4:	4605      	mov	r5, r0
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ed6:	4f0c      	ldr	r7, [pc, #48]	; (8004f08 <lv_layout_register+0x38>)
{
 8004ed8:	460c      	mov	r4, r1
    layout_cnt++;
 8004eda:	6833      	ldr	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004edc:	6838      	ldr	r0, [r7, #0]
    layout_cnt++;
 8004ede:	3301      	adds	r3, #1
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ee0:	00d9      	lsls	r1, r3, #3
    layout_cnt++;
 8004ee2:	6033      	str	r3, [r6, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 8004ee4:	f012 feae 	bl	8017c44 <lv_mem_realloc>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	6038      	str	r0, [r7, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8004eec:	b900      	cbnz	r0, 8004ef0 <lv_layout_register+0x20>
 8004eee:	e7fe      	b.n	8004eee <lv_layout_register+0x1e>

    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 8004ef0:	6830      	ldr	r0, [r6, #0]
 8004ef2:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8004ef6:	3a01      	subs	r2, #1
 8004ef8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8004efc:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 8004f00:	604c      	str	r4, [r1, #4]
    return layout_cnt;  /*No -1 to skip 0th index*/
}
 8004f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f04:	200029a0 	.word	0x200029a0
 8004f08:	2000ae4c 	.word	0x2000ae4c

08004f0c <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4615      	mov	r5, r2
 8004f12:	461e      	mov	r6, r3
static inline void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8004f14:	460a      	mov	r2, r1
 8004f16:	2300      	movs	r3, #0
 8004f18:	f241 0109 	movw	r1, #4105	; 0x1009
 8004f1c:	f002 fbb8 	bl	8007690 <lv_obj_set_local_style_prop>
    lv_obj_set_style_align(obj, align, 0);
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8004f20:	4632      	mov	r2, r6
 8004f22:	4629      	mov	r1, r5
 8004f24:	4620      	mov	r0, r4
}
 8004f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8004f2a:	f7ff bfaf 	b.w	8004e8c <lv_obj_set_pos>

08004f2e <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8004f2e:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8004f32:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8004f34:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8004f38:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8004f3a:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004f3e:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8004f40:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8004f44:	80cb      	strh	r3, [r1, #6]
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
}
 8004f46:	4770      	bx	lr

08004f48 <lv_obj_get_x>:

lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004f4c:	f002 fe06 	bl	8007b5c <lv_obj_get_parent>
    if(parent) {
 8004f50:	4607      	mov	r7, r0
 8004f52:	b190      	cbz	r0, 8004f7a <lv_obj_get_x+0x32>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8004f54:	8aa6      	ldrh	r6, [r4, #20]
 8004f56:	8a85      	ldrh	r5, [r0, #20]
        rel_x += lv_obj_get_scroll_x(parent);
 8004f58:	f001 f868 	bl	800602c <lv_obj_get_scroll_x>
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8004f5c:	1b76      	subs	r6, r6, r5
 8004f5e:	b2b6      	uxth	r6, r6
        rel_x += lv_obj_get_scroll_x(parent);
 8004f60:	1835      	adds	r5, r6, r0
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff fed2 	bl	8004d0c <lv_obj_get_style_pad_left.constprop.0>
        rel_x += lv_obj_get_scroll_x(parent);
 8004f68:	b2ad      	uxth	r5, r5
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004f6a:	1a2c      	subs	r4, r5, r0
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff fec5 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 8004f72:	b2a4      	uxth	r4, r4
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004f74:	1a20      	subs	r0, r4, r0
 8004f76:	b200      	sxth	r0, r0
    }
    else {
        rel_x = obj->coords.x1;
    }
    return rel_x;
}
 8004f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_x = obj->coords.x1;
 8004f7a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8004f7e:	e7fb      	b.n	8004f78 <lv_obj_get_x+0x30>

08004f80 <lv_obj_get_y>:

    return lv_obj_get_x(obj) + lv_obj_get_width(obj);
}

lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8004f84:	f002 fdea 	bl	8007b5c <lv_obj_get_parent>
    if(parent) {
 8004f88:	4607      	mov	r7, r0
 8004f8a:	b190      	cbz	r0, 8004fb2 <lv_obj_get_y+0x32>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004f8c:	8ae6      	ldrh	r6, [r4, #22]
 8004f8e:	8ac5      	ldrh	r5, [r0, #22]
        rel_y += lv_obj_get_scroll_y(parent);
 8004f90:	f001 f85e 	bl	8006050 <lv_obj_get_scroll_y>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8004f94:	1b76      	subs	r6, r6, r5
 8004f96:	b2b6      	uxth	r6, r6
        rel_y += lv_obj_get_scroll_y(parent);
 8004f98:	1835      	adds	r5, r6, r0
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f7ff febe 	bl	8004d1c <lv_obj_get_style_pad_top.constprop.0>
        rel_y += lv_obj_get_scroll_y(parent);
 8004fa0:	b2ad      	uxth	r5, r5
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004fa2:	1a2c      	subs	r4, r5, r0
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f7ff fea9 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 8004faa:	b2a4      	uxth	r4, r4
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8004fac:	1a20      	subs	r0, r4, r0
 8004fae:	b200      	sxth	r0, r0
    }
    else {
        rel_y = obj->coords.y1;
    }
    return rel_y;
}
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rel_y = obj->coords.y1;
 8004fb2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8004fb6:	e7fb      	b.n	8004fb0 <lv_obj_get_y+0x30>

08004fb8 <lv_obj_get_y2>:

lv_coord_t lv_obj_get_y2(const lv_obj_t * obj)
{
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8004fbc:	f7ff ffe0 	bl	8004f80 <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004fc0:	8b63      	ldrh	r3, [r4, #26]
 8004fc2:	8ae2      	ldrh	r2, [r4, #22]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	4418      	add	r0, r3
}
 8004fca:	b200      	sxth	r0, r0
 8004fcc:	bd10      	pop	{r4, pc}

08004fce <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8004fce:	8b03      	ldrh	r3, [r0, #24]
 8004fd0:	8a80      	ldrh	r0, [r0, #20]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
}
 8004fd6:	b200      	sxth	r0, r0
 8004fd8:	4770      	bx	lr

08004fda <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8004fda:	8b43      	ldrh	r3, [r0, #26]
 8004fdc:	8ac0      	ldrh	r0, [r0, #22]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	1a18      	subs	r0, r3, r0
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
}
 8004fe2:	b200      	sxth	r0, r0
 8004fe4:	4770      	bx	lr

08004fe6 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8004fe6:	b570      	push	{r4, r5, r6, lr}
 8004fe8:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8004fea:	f7ff fe8f 	bl	8004d0c <lv_obj_get_style_pad_left.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004fee:	f241 0213 	movw	r2, #4115	; 0x1013
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f002 fa66 	bl	80074c8 <lv_obj_get_style_prop>
 8004ffc:	4604      	mov	r4, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8004ffe:	4628      	mov	r0, r5
 8005000:	f7ff fe7c 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8005004:	f1c4 0301 	rsb	r3, r4, #1
 8005008:	8b2c      	ldrh	r4, [r5, #24]
 800500a:	4423      	add	r3, r4
 800500c:	8aac      	ldrh	r4, [r5, #20]
 800500e:	1b1b      	subs	r3, r3, r4
 8005010:	1b9c      	subs	r4, r3, r6
 8005012:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
}
 8005016:	b200      	sxth	r0, r0
 8005018:	bd70      	pop	{r4, r5, r6, pc}

0800501a <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 800501a:	b570      	push	{r4, r5, r6, lr}
 800501c:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top((lv_obj_t *)obj, LV_PART_MAIN);
 800501e:	f7ff fe7d 	bl	8004d1c <lv_obj_get_style_pad_top.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005022:	f241 0211 	movw	r2, #4113	; 0x1011
 8005026:	4606      	mov	r6, r0
 8005028:	2100      	movs	r1, #0
 800502a:	4628      	mov	r0, r5
 800502c:	f002 fa4c 	bl	80074c8 <lv_obj_get_style_prop>
 8005030:	4604      	mov	r4, r0
    lv_coord_t bottom =  lv_obj_get_style_pad_bottom((lv_obj_t *)obj, LV_PART_MAIN);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8005032:	4628      	mov	r0, r5
 8005034:	f7ff fe62 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8005038:	f1c4 0301 	rsb	r3, r4, #1
 800503c:	8b6c      	ldrh	r4, [r5, #26]
 800503e:	4423      	add	r3, r4
 8005040:	8aec      	ldrh	r4, [r5, #22]
 8005042:	1b1b      	subs	r3, r3, r4
 8005044:	1b9c      	subs	r4, r3, r6
 8005046:	eba4 0040 	sub.w	r0, r4, r0, lsl #1
}
 800504a:	b200      	sxth	r0, r0
 800504c:	bd70      	pop	{r4, r5, r6, pc}

0800504e <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 800504e:	b538      	push	{r3, r4, r5, lr}
 8005050:	4605      	mov	r5, r0
 8005052:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8005054:	f7ff fe52 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>

    lv_obj_get_coords(obj, area);
    lv_area_increase(area, -border_width, -border_width);
 8005058:	4240      	negs	r0, r0
    dest->x1 = src->x1;
 800505a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 800505e:	b202      	sxth	r2, r0
 8005060:	4620      	mov	r0, r4
 8005062:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 8005064:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8005068:	4611      	mov	r1, r2
 800506a:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 800506c:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8005070:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 8005072:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8005076:	80e3      	strh	r3, [r4, #6]
 8005078:	f011 ffdd 	bl	8017036 <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800507c:	4628      	mov	r0, r5
 800507e:	f7ff fe45 	bl	8004d0c <lv_obj_get_style_pad_left.constprop.0>
 8005082:	8823      	ldrh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005084:	f241 0213 	movw	r2, #4115	; 0x1013
 8005088:	2100      	movs	r1, #0
 800508a:	4418      	add	r0, r3
 800508c:	8020      	strh	r0, [r4, #0]
 800508e:	4628      	mov	r0, r5
 8005090:	f002 fa1a 	bl	80074c8 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8005094:	88a3      	ldrh	r3, [r4, #4]
 8005096:	1a18      	subs	r0, r3, r0
 8005098:	80a0      	strh	r0, [r4, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800509a:	4628      	mov	r0, r5
 800509c:	f7ff fe3e 	bl	8004d1c <lv_obj_get_style_pad_top.constprop.0>
 80050a0:	8863      	ldrh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80050a2:	f241 0211 	movw	r2, #4113	; 0x1011
 80050a6:	2100      	movs	r1, #0
 80050a8:	4418      	add	r0, r3
 80050aa:	8060      	strh	r0, [r4, #2]
 80050ac:	4628      	mov	r0, r5
 80050ae:	f002 fa0b 	bl	80074c8 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80050b2:	88e3      	ldrh	r3, [r4, #6]
 80050b4:	1a18      	subs	r0, r3, r0
 80050b6:	80e0      	strh	r0, [r4, #6]

}
 80050b8:	bd38      	pop	{r3, r4, r5, pc}

080050ba <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
    lv_point_t p = {0, LV_COORD_MIN};
 80050ba:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
{
 80050be:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 80050c0:	2126      	movs	r1, #38	; 0x26
 80050c2:	aa01      	add	r2, sp, #4
    lv_point_t p = {0, LV_COORD_MIN};
 80050c4:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 80050c6:	f7fc ffaf 	bl	8002028 <lv_event_send>
    return p.x;
}
 80050ca:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80050ce:	b003      	add	sp, #12
 80050d0:	f85d fb04 	ldr.w	pc, [sp], #4

080050d4 <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
    lv_point_t p = {LV_COORD_MIN, 0};
 80050d4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
{
 80050d8:	b507      	push	{r0, r1, r2, lr}
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 80050da:	2126      	movs	r1, #38	; 0x26
 80050dc:	aa01      	add	r2, sp, #4
    lv_point_t p = {LV_COORD_MIN, 0};
 80050de:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t * )obj, LV_EVENT_GET_SELF_SIZE, &p);
 80050e0:	f7fc ffa2 	bl	8002028 <lv_event_send>
    return p.y;
}
 80050e4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80050e8:	b003      	add	sp, #12
 80050ea:	f85d fb04 	ldr.w	pc, [sp], #4

080050ee <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 80050ee:	b538      	push	{r3, r4, r5, lr}
 80050f0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80050f2:	f241 0201 	movw	r2, #4097	; 0x1001
 80050f6:	2100      	movs	r1, #0
 80050f8:	f002 f9e6 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80050fc:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8005100:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005102:	2100      	movs	r1, #0
 8005104:	4620      	mov	r0, r4
 8005106:	f002 f9df 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 800510a:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 800510e:	b200      	sxth	r0, r0
 8005110:	429d      	cmp	r5, r3
 8005112:	d001      	beq.n	8005118 <lv_obj_refresh_self_size+0x2a>
 8005114:	4298      	cmp	r0, r3
 8005116:	d104      	bne.n	8005122 <lv_obj_refresh_self_size+0x34>

    lv_obj_mark_layout_as_dirty(obj);
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff fec2 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
    return true;
 800511e:	2001      	movs	r0, #1
}
 8005120:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8005122:	2000      	movs	r0, #0
 8005124:	e7fc      	b.n	8005120 <lv_obj_refresh_self_size+0x32>

08005126 <lv_obj_move_children_by>:
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
    }
}

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 8005126:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512a:	4606      	mov	r6, r0
 800512c:	460f      	mov	r7, r1
 800512e:	4690      	mov	r8, r2
 8005130:	4699      	mov	r9, r3
    uint32_t i;
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005132:	2500      	movs	r5, #0
        lv_obj_t * child = lv_obj_get_child(obj, i);
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
        child->coords.x1 += x_diff;
 8005134:	fa1f fa81 	uxth.w	sl, r1
        child->coords.y1 += y_diff;
 8005138:	fa1f fb82 	uxth.w	fp, r2
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800513c:	4630      	mov	r0, r6
 800513e:	f002 fd1f 	bl	8007b80 <lv_obj_get_child_cnt>
 8005142:	42a8      	cmp	r0, r5
 8005144:	d801      	bhi.n	800514a <lv_obj_move_children_by+0x24>
        child->coords.x2 += x_diff;
        child->coords.y2 += y_diff;

        lv_obj_move_children_by(child, x_diff, y_diff, false);
    }
}
 8005146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 800514a:	4629      	mov	r1, r5
 800514c:	4630      	mov	r0, r6
 800514e:	f002 fd08 	bl	8007b62 <lv_obj_get_child>
 8005152:	4604      	mov	r4, r0
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	d113      	bne.n	8005182 <lv_obj_move_children_by+0x5c>
        child->coords.x1 += x_diff;
 800515a:	8aa3      	ldrh	r3, [r4, #20]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800515c:	4642      	mov	r2, r8
 800515e:	4639      	mov	r1, r7
 8005160:	4620      	mov	r0, r4
        child->coords.x1 += x_diff;
 8005162:	4453      	add	r3, sl
 8005164:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 8005166:	8ae3      	ldrh	r3, [r4, #22]
 8005168:	445b      	add	r3, fp
 800516a:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 800516c:	8b23      	ldrh	r3, [r4, #24]
 800516e:	4453      	add	r3, sl
 8005170:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8005172:	8b63      	ldrh	r3, [r4, #26]
 8005174:	445b      	add	r3, fp
 8005176:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8005178:	2300      	movs	r3, #0
 800517a:	f7ff ffd4 	bl	8005126 <lv_obj_move_children_by>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800517e:	3501      	adds	r5, #1
 8005180:	e7dc      	b.n	800513c <lv_obj_move_children_by+0x16>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8005182:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005186:	f7fe fecc 	bl	8003f22 <lv_obj_has_flag>
 800518a:	2800      	cmp	r0, #0
 800518c:	d0e5      	beq.n	800515a <lv_obj_move_children_by+0x34>
 800518e:	e7f6      	b.n	800517e <lv_obj_move_children_by+0x58>

08005190 <lv_obj_area_is_visible>:
    lv_obj_invalidate_area(obj, &obj_coords);

}

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 8005190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005192:	460d      	mov	r5, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8005194:	2101      	movs	r1, #1
{
 8005196:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8005198:	f7fe fec3 	bl	8003f22 <lv_obj_has_flag>
 800519c:	b118      	cbz	r0, 80051a6 <lv_obj_area_is_visible+0x16>
    obj_coords.y2 += ext_size;

    bool is_common;

    is_common = _lv_area_intersect(area, area, &obj_coords);
    if(is_common == false) return false;  /*The area is not on the object*/
 800519e:	2600      	movs	r6, #0

        par = lv_obj_get_parent(par);
    }

    return true;
}
 80051a0:	4630      	mov	r0, r6
 80051a2:	b003      	add	sp, #12
 80051a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80051a6:	4620      	mov	r0, r4
 80051a8:	f002 fcb1 	bl	8007b0e <lv_obj_get_screen>
 80051ac:	4606      	mov	r6, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80051ae:	f002 fcb5 	bl	8007b1c <lv_obj_get_disp>
 80051b2:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 80051b4:	f7fc fe93 	bl	8001ede <lv_disp_get_scr_act>
 80051b8:	4286      	cmp	r6, r0
 80051ba:	d133      	bne.n	8005224 <lv_obj_area_is_visible+0x94>
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff fd6b 	bl	8004c98 <_lv_obj_get_ext_draw_size>
 80051c2:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.x1 -= ext_size;
 80051c6:	b280      	uxth	r0, r0
    dest->y1 = src->y1;
 80051c8:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80051cc:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 80051d0:	8aa1      	ldrh	r1, [r4, #20]
    obj_coords.y1 -= ext_size;
 80051d2:	1a12      	subs	r2, r2, r0
    obj_coords.x2 += ext_size;
 80051d4:	4403      	add	r3, r0
    obj_coords.x1 -= ext_size;
 80051d6:	1a09      	subs	r1, r1, r0
    obj_coords.y2 += ext_size;
 80051d8:	4430      	add	r0, r6
    obj_coords.y1 -= ext_size;
 80051da:	f8ad 2002 	strh.w	r2, [sp, #2]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 80051de:	466a      	mov	r2, sp
    obj_coords.x1 -= ext_size;
 80051e0:	f8ad 1000 	strh.w	r1, [sp]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 80051e4:	4629      	mov	r1, r5
    obj_coords.y2 += ext_size;
 80051e6:	f8ad 0006 	strh.w	r0, [sp, #6]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 80051ea:	4628      	mov	r0, r5
    obj_coords.x2 += ext_size;
 80051ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    is_common = _lv_area_intersect(area, area, &obj_coords);
 80051f0:	f011 ff41 	bl	8017076 <_lv_area_intersect>
    if(is_common == false) return false;  /*The area is not on the object*/
 80051f4:	4606      	mov	r6, r0
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d0d1      	beq.n	800519e <lv_obj_area_is_visible+0xe>
        par = lv_obj_get_parent(par);
 80051fa:	4620      	mov	r0, r4
 80051fc:	f002 fcae 	bl	8007b5c <lv_obj_get_parent>
 8005200:	4604      	mov	r4, r0
    while(par != NULL) {
 8005202:	2800      	cmp	r0, #0
 8005204:	d0cc      	beq.n	80051a0 <lv_obj_area_is_visible+0x10>
        is_common = _lv_area_intersect(area, area, &par->coords);
 8005206:	f104 0214 	add.w	r2, r4, #20
 800520a:	4629      	mov	r1, r5
 800520c:	4628      	mov	r0, r5
 800520e:	f011 ff32 	bl	8017076 <_lv_area_intersect>
        if(is_common == false) return false;       /*If no common parts with parent break;*/
 8005212:	2800      	cmp	r0, #0
 8005214:	d0c3      	beq.n	800519e <lv_obj_area_is_visible+0xe>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8005216:	2101      	movs	r1, #1
 8005218:	4620      	mov	r0, r4
 800521a:	f7fe fe82 	bl	8003f22 <lv_obj_has_flag>
 800521e:	2800      	cmp	r0, #0
 8005220:	d0eb      	beq.n	80051fa <lv_obj_area_is_visible+0x6a>
 8005222:	e7bc      	b.n	800519e <lv_obj_area_is_visible+0xe>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8005224:	4638      	mov	r0, r7
 8005226:	f7fc fe61 	bl	8001eec <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800522a:	4286      	cmp	r6, r0
 800522c:	d0c6      	beq.n	80051bc <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800522e:	4638      	mov	r0, r7
 8005230:	f7fc fe6f 	bl	8001f12 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8005234:	4286      	cmp	r6, r0
 8005236:	d0c1      	beq.n	80051bc <lv_obj_area_is_visible+0x2c>
       obj_scr != lv_disp_get_layer_sys(disp))
 8005238:	4638      	mov	r0, r7
 800523a:	f7fc fe71 	bl	8001f20 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800523e:	4286      	cmp	r6, r0
 8005240:	d1ad      	bne.n	800519e <lv_obj_area_is_visible+0xe>
 8005242:	e7bb      	b.n	80051bc <lv_obj_area_is_visible+0x2c>

08005244 <lv_obj_invalidate_area>:
    dest->x1 = src->x1;
 8005244:	880b      	ldrh	r3, [r1, #0]
{
 8005246:	b513      	push	{r0, r1, r4, lr}
 8005248:	f8ad 3000 	strh.w	r3, [sp]
 800524c:	4604      	mov	r4, r0
    dest->y1 = src->y1;
 800524e:	884b      	ldrh	r3, [r1, #2]
 8005250:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8005254:	888b      	ldrh	r3, [r1, #4]
 8005256:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 800525a:	88cb      	ldrh	r3, [r1, #6]
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
 800525c:	4669      	mov	r1, sp
 800525e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005262:	f7ff ff95 	bl	8005190 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
 8005266:	b128      	cbz	r0, 8005274 <lv_obj_invalidate_area+0x30>
 8005268:	4620      	mov	r0, r4
 800526a:	f002 fc57 	bl	8007b1c <lv_obj_get_disp>
 800526e:	4669      	mov	r1, sp
 8005270:	f003 f8c3 	bl	80083fa <_lv_inv_area>
}
 8005274:	b002      	add	sp, #8
 8005276:	bd10      	pop	{r4, pc}

08005278 <lv_obj_invalidate>:
{
 8005278:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800527a:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800527c:	f7ff fd0c 	bl	8004c98 <_lv_obj_get_ext_draw_size>
    obj_coords.x1 -= ext_size;
 8005280:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 8005282:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    lv_obj_invalidate_area(obj, &obj_coords);
 8005286:	4620      	mov	r0, r4
    dest->x2 = src->x2;
 8005288:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 800528c:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.y1 -= ext_size;
 8005290:	1ac9      	subs	r1, r1, r3
    obj_coords.x1 -= ext_size;
 8005292:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.x2 += ext_size;
 8005294:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 8005296:	f8ad 1002 	strh.w	r1, [sp, #2]
    lv_obj_invalidate_area(obj, &obj_coords);
 800529a:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 800529c:	1aed      	subs	r5, r5, r3
    obj_coords.y2 += ext_size;
 800529e:	4433      	add	r3, r6
    obj_coords.x2 += ext_size;
 80052a0:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.x1 -= ext_size;
 80052a4:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.y2 += ext_size;
 80052a8:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 80052ac:	f7ff ffca 	bl	8005244 <lv_obj_invalidate_area>
}
 80052b0:	b002      	add	sp, #8
 80052b2:	bd70      	pop	{r4, r5, r6, pc}

080052b4 <lv_obj_move_to>:
{
 80052b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_t * parent = obj->parent;
 80052b8:	6847      	ldr	r7, [r0, #4]
{
 80052ba:	4604      	mov	r4, r0
    if(parent) {
 80052bc:	b31f      	cbz	r7, 8005306 <lv_obj_move_to+0x52>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 80052be:	4638      	mov	r0, r7
 80052c0:	b28e      	uxth	r6, r1
 80052c2:	fa1f f882 	uxth.w	r8, r2
 80052c6:	f7ff fd21 	bl	8004d0c <lv_obj_get_style_pad_left.constprop.0>
 80052ca:	4605      	mov	r5, r0
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff fd25 	bl	8004d1c <lv_obj_get_style_pad_top.constprop.0>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80052d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80052d6:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80052d8:	4620      	mov	r0, r4
 80052da:	f7fe fe22 	bl	8003f22 <lv_obj_has_flag>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d06b      	beq.n	80053ba <lv_obj_move_to+0x106>
            x += pad_left + parent->coords.x1;
 80052e2:	8abb      	ldrh	r3, [r7, #20]
            y += pad_top + parent->coords.y1;
 80052e4:	8afa      	ldrh	r2, [r7, #22]
            x += pad_left + parent->coords.x1;
 80052e6:	441e      	add	r6, r3
            y += pad_top + parent->coords.y1;
 80052e8:	4490      	add	r8, r2
            x += pad_left + parent->coords.x1;
 80052ea:	1970      	adds	r0, r6, r5
            y += pad_top + parent->coords.y1;
 80052ec:	44c8      	add	r8, r9
            x += pad_left + parent->coords.x1;
 80052ee:	b205      	sxth	r5, r0
            y += pad_top + parent->coords.y1;
 80052f0:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80052f4:	4638      	mov	r0, r7
 80052f6:	f7ff fd01 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>
        x += border_width;
 80052fa:	fa15 f180 	uxtah	r1, r5, r0
        y += border_width;
 80052fe:	fa18 f280 	uxtah	r2, r8, r0
        x += border_width;
 8005302:	b209      	sxth	r1, r1
        y += border_width;
 8005304:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
 8005306:	8aa3      	ldrh	r3, [r4, #20]
    diff.y = y - obj->coords.y1;
 8005308:	8ae0      	ldrh	r0, [r4, #22]
    diff.x = x - obj->coords.x1;
 800530a:	1ac9      	subs	r1, r1, r3
    diff.y = y - obj->coords.y1;
 800530c:	1a12      	subs	r2, r2, r0
    diff.x = x - obj->coords.x1;
 800530e:	fa1f f881 	uxth.w	r8, r1
    diff.y = y - obj->coords.y1;
 8005312:	fa1f fa82 	uxth.w	sl, r2
    diff.x = x - obj->coords.x1;
 8005316:	b20d      	sxth	r5, r1
    if(diff.x == 0 && diff.y == 0) return;
 8005318:	ea58 030a 	orrs.w	r3, r8, sl
    diff.y = y - obj->coords.y1;
 800531c:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
 800531e:	d049      	beq.n	80053b4 <lv_obj_move_to+0x100>
    lv_obj_invalidate(obj);
 8005320:	4620      	mov	r0, r4
 8005322:	f7ff ffa9 	bl	8005278 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8005326:	8aa3      	ldrh	r3, [r4, #20]
 8005328:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 800532c:	8ae3      	ldrh	r3, [r4, #22]
 800532e:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8005332:	8b23      	ldrh	r3, [r4, #24]
 8005334:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8005338:	8b63      	ldrh	r3, [r4, #26]
 800533a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(parent) {
 800533e:	2f00      	cmp	r7, #0
 8005340:	d051      	beq.n	80053e6 <lv_obj_move_to+0x132>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8005342:	a902      	add	r1, sp, #8
 8005344:	4638      	mov	r0, r7
 8005346:	f7ff fe82 	bl	800504e <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800534a:	2200      	movs	r2, #0
 800534c:	a902      	add	r1, sp, #8
 800534e:	4668      	mov	r0, sp
 8005350:	f011 ff90 	bl	8017274 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8005354:	4681      	mov	r9, r0
 8005356:	b910      	cbnz	r0, 800535e <lv_obj_move_to+0xaa>
 8005358:	4638      	mov	r0, r7
 800535a:	f001 fd48 	bl	8006dee <lv_obj_scrollbar_invalidate>
    obj->coords.x1 += diff.x;
 800535e:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8005360:	4632      	mov	r2, r6
 8005362:	4629      	mov	r1, r5
 8005364:	4620      	mov	r0, r4
    obj->coords.x1 += diff.x;
 8005366:	4443      	add	r3, r8
 8005368:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 800536a:	8ae3      	ldrh	r3, [r4, #22]
 800536c:	4453      	add	r3, sl
 800536e:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 8005370:	8b23      	ldrh	r3, [r4, #24]
 8005372:	4498      	add	r8, r3
    obj->coords.y2 += diff.y;
 8005374:	8b63      	ldrh	r3, [r4, #26]
 8005376:	449a      	add	sl, r3
    obj->coords.x2 += diff.x;
 8005378:	f8a4 8018 	strh.w	r8, [r4, #24]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 800537c:	2300      	movs	r3, #0
    obj->coords.y2 += diff.y;
 800537e:	f8a4 a01a 	strh.w	sl, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8005382:	f7ff fed0 	bl	8005126 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8005386:	b127      	cbz	r7, 8005392 <lv_obj_move_to+0xde>
 8005388:	4622      	mov	r2, r4
 800538a:	2122      	movs	r1, #34	; 0x22
 800538c:	4638      	mov	r0, r7
 800538e:	f7fc fe4b 	bl	8002028 <lv_event_send>
    lv_obj_invalidate(obj);
 8005392:	4620      	mov	r0, r4
 8005394:	f7ff ff70 	bl	8005278 <lv_obj_invalidate>
    if(parent) {
 8005398:	b167      	cbz	r7, 80053b4 <lv_obj_move_to+0x100>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	a902      	add	r1, sp, #8
 800539e:	f104 0014 	add.w	r0, r4, #20
 80053a2:	f011 ff67 	bl	8017274 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80053a6:	f1b9 0f00 	cmp.w	r9, #0
 80053aa:	d100      	bne.n	80053ae <lv_obj_move_to+0xfa>
 80053ac:	b110      	cbz	r0, 80053b4 <lv_obj_move_to+0x100>
 80053ae:	4638      	mov	r0, r7
 80053b0:	f001 fd1d 	bl	8006dee <lv_obj_scrollbar_invalidate>
}
 80053b4:	b004      	add	sp, #16
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80053ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053be:	4638      	mov	r0, r7
 80053c0:	441d      	add	r5, r3
 80053c2:	f000 fe33 	bl	800602c <lv_obj_get_scroll_x>
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80053c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80053ca:	1a2d      	subs	r5, r5, r0
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80053cc:	4638      	mov	r0, r7
 80053ce:	4499      	add	r9, r3
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 80053d0:	1971      	adds	r1, r6, r5
 80053d2:	b20d      	sxth	r5, r1
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 80053d4:	f000 fe3c 	bl	8006050 <lv_obj_get_scroll_y>
 80053d8:	eba9 0000 	sub.w	r0, r9, r0
 80053dc:	eb08 0200 	add.w	r2, r8, r0
 80053e0:	fa0f f882 	sxth.w	r8, r2
 80053e4:	e786      	b.n	80052f4 <lv_obj_move_to+0x40>
    bool on1 = false;
 80053e6:	46b9      	mov	r9, r7
 80053e8:	e7b9      	b.n	800535e <lv_obj_move_to+0xaa>

080053ea <lv_obj_refr_pos>:
{
 80053ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ee:	ed2d 8b02 	vpush	{d8}
 80053f2:	b087      	sub	sp, #28
 80053f4:	4680      	mov	r8, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 80053f6:	f7ff fcf3 	bl	8004de0 <lv_obj_is_layout_positioned>
 80053fa:	9001      	str	r0, [sp, #4]
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f040 811a 	bne.w	8005636 <lv_obj_refr_pos+0x24c>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005402:	4640      	mov	r0, r8
 8005404:	f002 fbaa 	bl	8007b5c <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8005408:	f241 0207 	movw	r2, #4103	; 0x1007
 800540c:	ee08 0a10 	vmov	s16, r0
 8005410:	9901      	ldr	r1, [sp, #4]
 8005412:	4640      	mov	r0, r8
 8005414:	f002 f858 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005418:	f241 0208 	movw	r2, #4104	; 0x1008
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800541c:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 800541e:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8005420:	9901      	ldr	r1, [sp, #4]
 8005422:	4640      	mov	r0, r8
 8005424:	f002 f850 	bl	80074c8 <lv_obj_get_style_prop>
    if(parent == NULL) {
 8005428:	ee18 3a10 	vmov	r3, s16
 800542c:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800542e:	fa0f fa80 	sxth.w	sl, r0
 8005432:	b94b      	cbnz	r3, 8005448 <lv_obj_refr_pos+0x5e>
        lv_obj_move_to(obj, x, y);
 8005434:	4652      	mov	r2, sl
        lv_obj_move_to(obj, x, y);
 8005436:	4621      	mov	r1, r4
 8005438:	4640      	mov	r0, r8
}
 800543a:	b007      	add	sp, #28
 800543c:	ecbd 8b02 	vpop	{d8}
 8005440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_move_to(obj, x, y);
 8005444:	f7ff bf36 	b.w	80052b4 <lv_obj_move_to>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8005448:	ee18 0a10 	vmov	r0, s16
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800544c:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8005450:	f7ff fdc9 	bl	8004fe6 <lv_obj_get_content_width>
 8005454:	4607      	mov	r7, r0
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8005456:	ee18 0a10 	vmov	r0, s16
 800545a:	f7ff fdde 	bl	800501a <lv_obj_get_content_height>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800545e:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8005462:	4606      	mov	r6, r0
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8005464:	d10f      	bne.n	8005486 <lv_obj_refr_pos+0x9c>
 8005466:	f424 43c0 	bic.w	r3, r4, #24576	; 0x6000
 800546a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800546e:	dc0a      	bgt.n	8005486 <lv_obj_refr_pos+0x9c>
 8005470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005474:	461c      	mov	r4, r3
 8005476:	bfc8      	it	gt
 8005478:	f5c3 747a 	rsbgt	r4, r3, #1000	; 0x3e8
 800547c:	2364      	movs	r3, #100	; 0x64
 800547e:	437c      	muls	r4, r7
 8005480:	fb94 f4f3 	sdiv	r4, r4, r3
 8005484:	b224      	sxth	r4, r4
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8005486:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 800548a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800548e:	d111      	bne.n	80054b4 <lv_obj_refr_pos+0xca>
 8005490:	f42a 45c0 	bic.w	r5, sl, #24576	; 0x6000
 8005494:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005498:	dc0c      	bgt.n	80054b4 <lv_obj_refr_pos+0xca>
 800549a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800549e:	46aa      	mov	sl, r5
 80054a0:	bfc8      	it	gt
 80054a2:	f5c5 7a7a 	rsbgt	sl, r5, #1000	; 0x3e8
 80054a6:	2564      	movs	r5, #100	; 0x64
 80054a8:	fb0a fa06 	mul.w	sl, sl, r6
 80054ac:	fb9a faf5 	sdiv	sl, sl, r5
 80054b0:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80054b4:	f243 020c 	movw	r2, #12300	; 0x300c
 80054b8:	2100      	movs	r1, #0
 80054ba:	4640      	mov	r0, r8
 80054bc:	f002 f804 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80054c0:	f243 020d 	movw	r2, #12301	; 0x300d
    return (lv_coord_t)v.num;
 80054c4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80054c6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80054c8:	2100      	movs	r1, #0
 80054ca:	4640      	mov	r0, r8
    return (lv_coord_t)v.num;
 80054cc:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80054ce:	f001 fffb 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80054d2:	f8b8 2018 	ldrh.w	r2, [r8, #24]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80054d6:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80054da:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 80054de:	fa0f fc80 	sxth.w	ip, r0
 80054e2:	3201      	adds	r2, #1
 80054e4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80054e8:	9302      	str	r3, [sp, #8]
 80054ea:	b293      	uxth	r3, r2
 80054ec:	9a02      	ldr	r2, [sp, #8]
 80054ee:	eba3 0202 	sub.w	r2, r3, r2
 80054f2:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80054f4:	f8b8 3016 	ldrh.w	r3, [r8, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80054f8:	fa0f fb82 	sxth.w	fp, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80054fc:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8005500:	9303      	str	r3, [sp, #12]
 8005502:	f102 0201 	add.w	r2, r2, #1
 8005506:	b293      	uxth	r3, r2
 8005508:	9a03      	ldr	r2, [sp, #12]
 800550a:	eba3 0902 	sub.w	r9, r3, r2
 800550e:	9304      	str	r3, [sp, #16]
 8005510:	9b05      	ldr	r3, [sp, #20]
 8005512:	fa0f f989 	sxth.w	r9, r9
 8005516:	d111      	bne.n	800553c <lv_obj_refr_pos+0x152>
 8005518:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 800551c:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 8005520:	dc0c      	bgt.n	800553c <lv_obj_refr_pos+0x152>
 8005522:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8005526:	460b      	mov	r3, r1
 8005528:	f04f 0264 	mov.w	r2, #100	; 0x64
 800552c:	bfc8      	it	gt
 800552e:	f5c1 737a 	rsbgt	r3, r1, #1000	; 0x3e8
 8005532:	fb03 f30b 	mul.w	r3, r3, fp
 8005536:	fb93 f3f2 	sdiv	r3, r3, r2
 800553a:	b21b      	sxth	r3, r3
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800553c:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8005540:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005544:	d111      	bne.n	800556a <lv_obj_refr_pos+0x180>
 8005546:	f42c 42c0 	bic.w	r2, ip, #24576	; 0x6000
 800554a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800554e:	dc0c      	bgt.n	800556a <lv_obj_refr_pos+0x180>
 8005550:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005554:	f04f 0564 	mov.w	r5, #100	; 0x64
 8005558:	bfc8      	it	gt
 800555a:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800555e:	fb02 f209 	mul.w	r2, r2, r9
 8005562:	fb92 f2f5 	sdiv	r2, r2, r5
 8005566:	fa0f fc82 	sxth.w	ip, r2
    x += tr_x;
 800556a:	441c      	add	r4, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800556c:	2100      	movs	r1, #0
 800556e:	f241 0209 	movw	r2, #4105	; 0x1009
 8005572:	4640      	mov	r0, r8
 8005574:	b2a3      	uxth	r3, r4
    y += tr_y;
 8005576:	eb0a 050c 	add.w	r5, sl, ip
    x += tr_x;
 800557a:	b224      	sxth	r4, r4
 800557c:	9305      	str	r3, [sp, #20]
 800557e:	f001 ffa3 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8005582:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    y += tr_y;
 8005586:	fa1f fa85 	uxth.w	sl, r5
    if(align == LV_ALIGN_DEFAULT) {
 800558a:	9b05      	ldr	r3, [sp, #20]
    y += tr_y;
 800558c:	b22d      	sxth	r5, r5
    if(align == LV_ALIGN_DEFAULT) {
 800558e:	d10c      	bne.n	80055aa <lv_obj_refr_pos+0x1c0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005590:	f241 426a 	movw	r2, #5226	; 0x146a
 8005594:	ee18 0a10 	vmov	r0, s16
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	f001 ff95 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800559e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	2801      	cmp	r0, #1
 80055a4:	d016      	beq.n	80055d4 <lv_obj_refr_pos+0x1ea>
        lv_obj_move_to(obj, x, y);
 80055a6:	462a      	mov	r2, r5
 80055a8:	e745      	b.n	8005436 <lv_obj_refr_pos+0x4c>
    if(align == LV_ALIGN_TOP_LEFT) {
 80055aa:	2901      	cmp	r1, #1
 80055ac:	d0fb      	beq.n	80055a6 <lv_obj_refr_pos+0x1bc>
        switch(align) {
 80055ae:	3902      	subs	r1, #2
 80055b0:	2907      	cmp	r1, #7
 80055b2:	d8f8      	bhi.n	80055a6 <lv_obj_refr_pos+0x1bc>
 80055b4:	e8df f001 	tbb	[pc, r1]
 80055b8:	131c0e04 	.word	0x131c0e04
 80055bc:	37282e23 	.word	0x37282e23
            x += pw / 2 - w / 2;
 80055c0:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80055c4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80055c8:	1064      	asrs	r4, r4, #1
 80055ca:	ebc4 0467 	rsb	r4, r4, r7, asr #1
            x += pw - w;
 80055ce:	441c      	add	r4, r3
 80055d0:	b224      	sxth	r4, r4
            break;
 80055d2:	e7e8      	b.n	80055a6 <lv_obj_refr_pos+0x1bc>
            x += pw - w;
 80055d4:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80055d8:	1a54      	subs	r4, r2, r1
 80055da:	443c      	add	r4, r7
 80055dc:	e7f7      	b.n	80055ce <lv_obj_refr_pos+0x1e4>
            x += pw / 2 - w / 2;
 80055de:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80055e2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80055e6:	1064      	asrs	r4, r4, #1
 80055e8:	ebc4 0467 	rsb	r4, r4, r7, asr #1
            x += pw - w;
 80055ec:	441c      	add	r4, r3
 80055ee:	b224      	sxth	r4, r4
            y += ph - h;
 80055f0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80055f4:	1a9d      	subs	r5, r3, r2
 80055f6:	4435      	add	r5, r6
            y += ph / 2 - h / 2;
 80055f8:	4455      	add	r5, sl
 80055fa:	b22d      	sxth	r5, r5
            break;
 80055fc:	e7d3      	b.n	80055a6 <lv_obj_refr_pos+0x1bc>
            x += pw - w;
 80055fe:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8005602:	1a54      	subs	r4, r2, r1
 8005604:	443c      	add	r4, r7
 8005606:	e7f1      	b.n	80055ec <lv_obj_refr_pos+0x202>
            x += pw - w;
 8005608:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800560c:	1a54      	subs	r4, r2, r1
 800560e:	443c      	add	r4, r7
            x += pw / 2 - w / 2;
 8005610:	441c      	add	r4, r3
 8005612:	b224      	sxth	r4, r4
            y += ph / 2 - h / 2;
 8005614:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 8005618:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800561c:	ea4f 0569 	mov.w	r5, r9, asr #1
 8005620:	ebc5 0566 	rsb	r5, r5, r6, asr #1
 8005624:	e7e8      	b.n	80055f8 <lv_obj_refr_pos+0x20e>
            x += pw / 2 - w / 2;
 8005626:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 800562a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800562e:	1064      	asrs	r4, r4, #1
 8005630:	ebc4 0467 	rsb	r4, r4, r7, asr #1
 8005634:	e7ec      	b.n	8005610 <lv_obj_refr_pos+0x226>
}
 8005636:	b007      	add	sp, #28
 8005638:	ecbd 8b02 	vpop	{d8}
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005640 <lv_obj_is_visible>:

bool lv_obj_is_visible(const lv_obj_t * obj)
{
 8005640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005642:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8005644:	f7ff fb28 	bl	8004c98 <_lv_obj_get_ext_draw_size>
    lv_area_copy(&obj_coords, &obj->coords);
    obj_coords.x1 -= ext_size;
 8005648:	b283      	uxth	r3, r0
    dest->y1 = src->y1;
 800564a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    obj_coords.y1 -= ext_size;
    obj_coords.x2 += ext_size;
    obj_coords.y2 += ext_size;

    return lv_obj_area_is_visible(obj, &obj_coords);
 800564e:	4620      	mov	r0, r4
    dest->x2 = src->x2;
 8005650:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8005654:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
    obj_coords.y1 -= ext_size;
 8005658:	1ac9      	subs	r1, r1, r3
    obj_coords.x1 -= ext_size;
 800565a:	8aa5      	ldrh	r5, [r4, #20]
    obj_coords.x2 += ext_size;
 800565c:	441a      	add	r2, r3
    obj_coords.y1 -= ext_size;
 800565e:	f8ad 1002 	strh.w	r1, [sp, #2]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005662:	4669      	mov	r1, sp
    obj_coords.x1 -= ext_size;
 8005664:	1aed      	subs	r5, r5, r3
    obj_coords.y2 += ext_size;
 8005666:	4433      	add	r3, r6
    obj_coords.x2 += ext_size;
 8005668:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.x1 -= ext_size;
 800566c:	f8ad 5000 	strh.w	r5, [sp]
    obj_coords.y2 += ext_size;
 8005670:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8005674:	f7ff fd8c 	bl	8005190 <lv_obj_area_is_visible>

}
 8005678:	b002      	add	sp, #8
 800567a:	bd70      	pop	{r4, r5, r6, pc}

0800567c <lv_obj_set_ext_click_area>:

void lv_obj_set_ext_click_area(lv_obj_t * obj, lv_coord_t size)
{
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4605      	mov	r5, r0
 8005680:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 8005682:	f7fe ff1b 	bl	80044bc <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 8005686:	68ab      	ldr	r3, [r5, #8]
 8005688:	829c      	strh	r4, [r3, #20]
}
 800568a:	bd38      	pop	{r3, r4, r5, pc}

0800568c <lv_obj_get_click_area>:
    dest->y1 = src->y1;
 800568c:	f9b0 2016 	ldrsh.w	r2, [r0, #22]

void lv_obj_get_click_area(const lv_obj_t * obj, lv_area_t * area)
{
    lv_area_copy(area, &obj->coords);
    if(obj->spec_attr) {
 8005690:	6883      	ldr	r3, [r0, #8]
{
 8005692:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 8005694:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    dest->x2 = src->x2;
 8005698:	f9b0 4018 	ldrsh.w	r4, [r0, #24]
    dest->y2 = src->y2;
 800569c:	f9b0 601a 	ldrsh.w	r6, [r0, #26]
    dest->x1 = src->x1;
 80056a0:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 80056a2:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 80056a4:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 80056a6:	80ce      	strh	r6, [r1, #6]
    if(obj->spec_attr) {
 80056a8:	b143      	cbz	r3, 80056bc <lv_obj_get_click_area+0x30>
        area->x1 -= obj->spec_attr->ext_click_pad;
 80056aa:	8a9b      	ldrh	r3, [r3, #20]
 80056ac:	1aed      	subs	r5, r5, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 80056ae:	441c      	add	r4, r3
        area->y1 -= obj->spec_attr->ext_click_pad;
 80056b0:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 80056b2:	4433      	add	r3, r6
        area->x1 -= obj->spec_attr->ext_click_pad;
 80056b4:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 80056b6:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 80056b8:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 80056ba:	80cb      	strh	r3, [r1, #6]
    }
}
 80056bc:	bd70      	pop	{r4, r5, r6, pc}

080056be <lv_obj_hit_test>:

bool lv_obj_hit_test(lv_obj_t * obj, const lv_point_t * point)
{
 80056be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80056c0:	460e      	mov	r6, r1
    lv_area_t a;
    lv_obj_get_click_area(obj, &a);
 80056c2:	4669      	mov	r1, sp
{
 80056c4:	4605      	mov	r5, r0
    lv_obj_get_click_area(obj, &a);
 80056c6:	f7ff ffe1 	bl	800568c <lv_obj_get_click_area>
    bool res = _lv_area_is_point_on(&a, point, 0);
 80056ca:	2200      	movs	r2, #0
 80056cc:	4631      	mov	r1, r6
 80056ce:	4668      	mov	r0, sp
 80056d0:	f011 fd1d 	bl	801710e <_lv_area_is_point_on>
    if(res == false) return false;
 80056d4:	4604      	mov	r4, r0
 80056d6:	b180      	cbz	r0, 80056fa <lv_obj_hit_test+0x3c>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 80056d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056dc:	4628      	mov	r0, r5
 80056de:	f7fe fc20 	bl	8003f22 <lv_obj_has_flag>
 80056e2:	b150      	cbz	r0, 80056fa <lv_obj_hit_test+0x3c>
        lv_hit_test_info_t hit_info;
        hit_info.point = point;
        hit_info.res = true;
 80056e4:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80056e6:	aa02      	add	r2, sp, #8
 80056e8:	2111      	movs	r1, #17
 80056ea:	4628      	mov	r0, r5
        hit_info.point = point;
 80056ec:	9602      	str	r6, [sp, #8]
        hit_info.res = true;
 80056ee:	f88d 300c 	strb.w	r3, [sp, #12]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80056f2:	f7fc fc99 	bl	8002028 <lv_event_send>
        return hit_info.res;
 80056f6:	f89d 400c 	ldrb.w	r4, [sp, #12]
    }

    return res;
}
 80056fa:	4620      	mov	r0, r4
 80056fc:	b004      	add	sp, #16
 80056fe:	bd70      	pop	{r4, r5, r6, pc}

08005700 <lv_clamp_width>:

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 8005700:	b530      	push	{r4, r5, lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8005702:	f401 44c0 	and.w	r4, r1, #24576	; 0x6000
 8005706:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800570a:	d110      	bne.n	800572e <lv_clamp_width+0x2e>
 800570c:	f421 45c0 	bic.w	r5, r1, #24576	; 0x6000
 8005710:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8005714:	dc0b      	bgt.n	800572e <lv_clamp_width+0x2e>
 8005716:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800571a:	4629      	mov	r1, r5
 800571c:	f04f 0464 	mov.w	r4, #100	; 0x64
 8005720:	bfc8      	it	gt
 8005722:	f5c5 717a 	rsbgt	r1, r5, #1000	; 0x3e8
 8005726:	4359      	muls	r1, r3
 8005728:	fb91 f1f4 	sdiv	r1, r1, r4
 800572c:	b209      	sxth	r1, r1
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 800572e:	f402 44c0 	and.w	r4, r2, #24576	; 0x6000
 8005732:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8005736:	d10e      	bne.n	8005756 <lv_clamp_width+0x56>
 8005738:	f422 44c0 	bic.w	r4, r2, #24576	; 0x6000
 800573c:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8005740:	dc09      	bgt.n	8005756 <lv_clamp_width+0x56>
 8005742:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8005746:	bfc8      	it	gt
 8005748:	f5c4 747a 	rsbgt	r4, r4, #1000	; 0x3e8
 800574c:	4363      	muls	r3, r4
 800574e:	2464      	movs	r4, #100	; 0x64
 8005750:	fb93 f4f4 	sdiv	r4, r3, r4
 8005754:	b222      	sxth	r2, r4
    return LV_CLAMP(min_width, width, max_width);
 8005756:	4290      	cmp	r0, r2
 8005758:	bfa8      	it	ge
 800575a:	4610      	movge	r0, r2
}
 800575c:	4288      	cmp	r0, r1
 800575e:	bfb8      	it	lt
 8005760:	4608      	movlt	r0, r1
 8005762:	bd30      	pop	{r4, r5, pc}

08005764 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
 8005764:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8005768:	f003 0306 	and.w	r3, r3, #6
 800576c:	2b06      	cmp	r3, #6
{
 800576e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	ed2d 8b02 	vpush	{d8}
 8005778:	b087      	sub	sp, #28
    if(obj->w_layout && obj->h_layout) return false;
 800577a:	d003      	beq.n	8005784 <lv_obj_refr_size+0x20>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800577c:	f002 f9ee 	bl	8007b5c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8005780:	4606      	mov	r6, r0
 8005782:	b908      	cbnz	r0, 8005788 <lv_obj_refr_size+0x24>
    if(obj->w_layout && obj->h_layout) return false;
 8005784:	2000      	movs	r0, #0
 8005786:	e0c6      	b.n	8005916 <lv_obj_refr_size+0x1b2>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fcc9 	bl	8006120 <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 800578e:	f894 7023 	ldrb.w	r7, [r4, #35]	; 0x23
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8005792:	4680      	mov	r8, r0
    if(obj->w_layout) {
 8005794:	f017 0704 	ands.w	r7, r7, #4
 8005798:	f000 80c2 	beq.w	8005920 <lv_obj_refr_size+0x1bc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800579c:	8b20      	ldrh	r0, [r4, #24]
    bool w_content = false;
 800579e:	f04f 0a00 	mov.w	sl, #0
 80057a2:	8aa3      	ldrh	r3, [r4, #20]
 80057a4:	3001      	adds	r0, #1
 80057a6:	1ac0      	subs	r0, r0, r3
 80057a8:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 fc61 	bl	8006074 <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 80057b2:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80057b6:	ee08 0a10 	vmov	s16, r0
    if(obj->h_layout) {
 80057ba:	f015 0502 	ands.w	r5, r5, #2
 80057be:	f000 810c 	beq.w	80059da <lv_obj_refr_size+0x276>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80057c2:	8b65      	ldrh	r5, [r4, #26]
 80057c4:	8ae0      	ldrh	r0, [r4, #22]
 80057c6:	3501      	adds	r5, #1
 80057c8:	1a2d      	subs	r5, r5, r0
 80057ca:	b22d      	sxth	r5, r5
    if(w_content || h_content) {
 80057cc:	f1ba 0f00 	cmp.w	sl, #0
 80057d0:	f040 8161 	bne.w	8005a96 <lv_obj_refr_size+0x332>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80057d4:	8b23      	ldrh	r3, [r4, #24]
 80057d6:	8aa2      	ldrh	r2, [r4, #20]
 80057d8:	3301      	adds	r3, #1
 80057da:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80057dc:	b21b      	sxth	r3, r3
 80057de:	454b      	cmp	r3, r9
 80057e0:	d106      	bne.n	80057f0 <lv_obj_refr_size+0x8c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80057e2:	8b63      	ldrh	r3, [r4, #26]
 80057e4:	8ae2      	ldrh	r2, [r4, #22]
 80057e6:	3301      	adds	r3, #1
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	b21b      	sxth	r3, r3
 80057ec:	42ab      	cmp	r3, r5
 80057ee:	d0c9      	beq.n	8005784 <lv_obj_refr_size+0x20>
    lv_obj_invalidate(obj);
 80057f0:	4620      	mov	r0, r4
    lv_area_copy(coords, &obj->coords);
 80057f2:	f104 0814 	add.w	r8, r4, #20
    lv_obj_invalidate(obj);
 80057f6:	f7ff fd3f 	bl	8005278 <lv_obj_invalidate>
    dest->x1 = src->x1;
 80057fa:	8aa3      	ldrh	r3, [r4, #20]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 80057fc:	a904      	add	r1, sp, #16
 80057fe:	4630      	mov	r0, r6
 8005800:	f8ad 3008 	strh.w	r3, [sp, #8]
    dest->y1 = src->y1;
 8005804:	8ae3      	ldrh	r3, [r4, #22]
 8005806:	f8ad 300a 	strh.w	r3, [sp, #10]
    dest->x2 = src->x2;
 800580a:	8b23      	ldrh	r3, [r4, #24]
 800580c:	f8ad 300c 	strh.w	r3, [sp, #12]
    dest->y2 = src->y2;
 8005810:	8b63      	ldrh	r3, [r4, #26]
 8005812:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005816:	f7ff fc1a 	bl	800504e <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800581a:	2200      	movs	r2, #0
 800581c:	a904      	add	r1, sp, #16
 800581e:	a802      	add	r0, sp, #8
 8005820:	f011 fd28 	bl	8017274 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8005824:	4607      	mov	r7, r0
 8005826:	b910      	cbnz	r0, 800582e <lv_obj_refr_size+0xca>
 8005828:	4630      	mov	r0, r6
 800582a:	f001 fae0 	bl	8006dee <lv_obj_scrollbar_invalidate>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800582e:	8ae0      	ldrh	r0, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005830:	f241 426a 	movw	r2, #5226	; 0x146a
 8005834:	2100      	movs	r1, #0
 8005836:	3801      	subs	r0, #1
 8005838:	4405      	add	r5, r0
 800583a:	4620      	mov	r0, r4
 800583c:	8365      	strh	r5, [r4, #26]
 800583e:	f001 fe43 	bl	80074c8 <lv_obj_get_style_prop>
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005842:	aa02      	add	r2, sp, #8
    return (lv_base_dir_t)v.num;
 8005844:	b2c0      	uxtb	r0, r0
 8005846:	2123      	movs	r1, #35	; 0x23
 8005848:	fa1f f389 	uxth.w	r3, r9
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800584c:	2801      	cmp	r0, #1
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800584e:	bf0b      	itete	eq
 8005850:	8b20      	ldrheq	r0, [r4, #24]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005852:	8aa0      	ldrhne	r0, [r4, #20]
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005854:	3001      	addeq	r0, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005856:	f100 30ff 	addne.w	r0, r0, #4294967295
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800585a:	bf0c      	ite	eq
 800585c:	1ac3      	subeq	r3, r0, r3
        obj->coords.x2 = obj->coords.x1 + w - 1;
 800585e:	181b      	addne	r3, r3, r0
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005860:	4620      	mov	r0, r4
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8005862:	bf0c      	ite	eq
 8005864:	82a3      	strheq	r3, [r4, #20]
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8005866:	8323      	strhne	r3, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8005868:	f7fc fbde 	bl	8002028 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800586c:	4622      	mov	r2, r4
 800586e:	2122      	movs	r1, #34	; 0x22
 8005870:	4630      	mov	r0, r6
 8005872:	f7fc fbd9 	bl	8002028 <lv_event_send>
    lv_obj_invalidate(obj);
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff fcfe 	bl	8005278 <lv_obj_invalidate>
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800587c:	4620      	mov	r0, r4
 800587e:	f000 fbcf 	bl	8006020 <lv_obj_get_scroll_snap_y>
 8005882:	4605      	mov	r5, r0
 8005884:	b9a8      	cbnz	r0, 80058b2 <lv_obj_refr_size+0x14e>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 8005886:	4620      	mov	r0, r4
 8005888:	f000 fbf4 	bl	8006074 <lv_obj_get_scroll_top>
 800588c:	4681      	mov	r9, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800588e:	4620      	mov	r0, r4
 8005890:	f000 fbf2 	bl	8006078 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 8005894:	1e01      	subs	r1, r0, #0
 8005896:	da0c      	bge.n	80058b2 <lv_obj_refr_size+0x14e>
 8005898:	f1b9 0f00 	cmp.w	r9, #0
 800589c:	dd09      	ble.n	80058b2 <lv_obj_refr_size+0x14e>
            sb = LV_MIN(st, -sb);
 800589e:	424a      	negs	r2, r1
            lv_obj_scroll_by(obj, 0, sb, LV_ANIM_OFF);
 80058a0:	462b      	mov	r3, r5
 80058a2:	4629      	mov	r1, r5
 80058a4:	4620      	mov	r0, r4
            sb = LV_MIN(st, -sb);
 80058a6:	454a      	cmp	r2, r9
 80058a8:	bfa8      	it	ge
 80058aa:	464a      	movge	r2, r9
            lv_obj_scroll_by(obj, 0, sb, LV_ANIM_OFF);
 80058ac:	b212      	sxth	r2, r2
 80058ae:	f000 fd27 	bl	8006300 <lv_obj_scroll_by>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 fbae 	bl	8006014 <lv_obj_get_scroll_snap_x>
 80058b8:	bb10      	cbnz	r0, 8005900 <lv_obj_refr_size+0x19c>
 80058ba:	9001      	str	r0, [sp, #4]
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fc2f 	bl	8006120 <lv_obj_get_scroll_left>
 80058c2:	4681      	mov	r9, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fc97 	bl	80061f8 <lv_obj_get_scroll_right>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80058ca:	9b01      	ldr	r3, [sp, #4]
 80058cc:	4605      	mov	r5, r0
 80058ce:	f241 426a 	movw	r2, #5226	; 0x146a
 80058d2:	4619      	mov	r1, r3
 80058d4:	4620      	mov	r0, r4
 80058d6:	f001 fdf7 	bl	80074c8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80058da:	9b01      	ldr	r3, [sp, #4]
    return (lv_base_dir_t)v.num;
 80058dc:	b2c0      	uxtb	r0, r0
 80058de:	2801      	cmp	r0, #1
 80058e0:	f000 80e6 	beq.w	8005ab0 <lv_obj_refr_size+0x34c>
            if(sr < 0 && sl > 0) {
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	da0b      	bge.n	8005900 <lv_obj_refr_size+0x19c>
 80058e8:	f1b9 0f00 	cmp.w	r9, #0
 80058ec:	dd08      	ble.n	8005900 <lv_obj_refr_size+0x19c>
                sr = LV_MIN(sl, -sr);
 80058ee:	426d      	negs	r5, r5
                lv_obj_scroll_by(obj, sr, 0, LV_ANIM_OFF);
 80058f0:	461a      	mov	r2, r3
                sr = LV_MIN(sl, -sr);
 80058f2:	454d      	cmp	r5, r9
 80058f4:	bfa8      	it	ge
 80058f6:	464d      	movge	r5, r9
                lv_obj_scroll_by(obj, sr, 0, LV_ANIM_OFF);
 80058f8:	b229      	sxth	r1, r5
                lv_obj_scroll_by(obj, sl, 0, LV_ANIM_OFF);
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fd00 	bl	8006300 <lv_obj_scroll_by>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8005900:	2200      	movs	r2, #0
 8005902:	a904      	add	r1, sp, #16
 8005904:	4640      	mov	r0, r8
 8005906:	f011 fcb5 	bl	8017274 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800590a:	b907      	cbnz	r7, 800590e <lv_obj_refr_size+0x1aa>
 800590c:	b110      	cbz	r0, 8005914 <lv_obj_refr_size+0x1b0>
 800590e:	4630      	mov	r0, r6
 8005910:	f001 fa6d 	bl	8006dee <lv_obj_scrollbar_invalidate>
    return true;
 8005914:	2001      	movs	r0, #1
}
 8005916:	b007      	add	sp, #28
 8005918:	ecbd 8b02 	vpop	{d8}
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005920:	f241 0201 	movw	r2, #4097	; 0x1001
 8005924:	4639      	mov	r1, r7
 8005926:	4620      	mov	r0, r4
 8005928:	f001 fdce 	bl	80074c8 <lv_obj_get_style_prop>
        w_content = w == LV_SIZE_CONTENT ? true : false;
 800592c:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8005930:	b205      	sxth	r5, r0
 8005932:	429d      	cmp	r5, r3
 8005934:	bf0c      	ite	eq
 8005936:	f04f 0a01 	moveq.w	sl, #1
 800593a:	f04f 0a00 	movne.w	sl, #0
        if(w_content) {
 800593e:	d112      	bne.n	8005966 <lv_obj_refr_size+0x202>
            lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8005940:	463a      	mov	r2, r7
 8005942:	4639      	mov	r1, r7
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fe97 	bl	8006678 <lv_obj_scroll_to_x>
static void calc_auto_size(lv_obj_t * obj, lv_coord_t * w_out, lv_coord_t * h_out)
{
    if(!w_out && !h_out) return;
    /*Get the bounding box of the children*/
    if(w_out) {
        lv_coord_t scroll_right = lv_obj_get_scroll_right(obj);
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fc54 	bl	80061f8 <lv_obj_get_scroll_right>
 8005950:	4607      	mov	r7, r0
        lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8005952:	4620      	mov	r0, r4
 8005954:	f000 fbe4 	bl	8006120 <lv_obj_get_scroll_left>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005958:	8b22      	ldrh	r2, [r4, #24]
 800595a:	8aa3      	ldrh	r3, [r4, #20]
 800595c:	3201      	adds	r2, #1
 800595e:	1ad2      	subs	r2, r2, r3
        *w_out = lv_obj_get_width(obj) + scroll_right + scroll_left;
 8005960:	19d3      	adds	r3, r2, r7
 8005962:	4418      	add	r0, r3
 8005964:	b205      	sxth	r5, r0
        bool pct_w = LV_COORD_IS_PCT(w) ? true : false;
 8005966:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 800596a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596e:	d131      	bne.n	80059d4 <lv_obj_refr_size+0x270>
 8005970:	f425 49c0 	bic.w	r9, r5, #24576	; 0x6000
 8005974:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 8005978:	bfcc      	ite	gt
 800597a:	f04f 0900 	movgt.w	r9, #0
 800597e:	f04f 0901 	movle.w	r9, #1
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff fb2f 	bl	8004fe6 <lv_obj_get_content_width>
 8005988:	4607      	mov	r7, r0
        if(pct_w) w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 800598a:	f1b9 0f00 	cmp.w	r9, #0
 800598e:	d00b      	beq.n	80059a8 <lv_obj_refr_size+0x244>
 8005990:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8005994:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005998:	bfc8      	it	gt
 800599a:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 800599e:	4345      	muls	r5, r0
 80059a0:	2064      	movs	r0, #100	; 0x64
 80059a2:	fb95 f5f0 	sdiv	r5, r5, r0
 80059a6:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80059a8:	f241 0202 	movw	r2, #4098	; 0x1002
 80059ac:	2100      	movs	r1, #0
 80059ae:	4620      	mov	r0, r4
 80059b0:	f001 fd8a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80059b4:	f241 0203 	movw	r2, #4099	; 0x1003
    return (lv_coord_t)v.num;
 80059b8:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80059bc:	2100      	movs	r1, #0
 80059be:	4620      	mov	r0, r4
 80059c0:	f001 fd82 	bl	80074c8 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 80059c4:	4649      	mov	r1, r9
 80059c6:	b202      	sxth	r2, r0
 80059c8:	463b      	mov	r3, r7
 80059ca:	4628      	mov	r0, r5
 80059cc:	f7ff fe98 	bl	8005700 <lv_clamp_width>
 80059d0:	4681      	mov	r9, r0
 80059d2:	e6eb      	b.n	80057ac <lv_obj_refr_size+0x48>
        bool pct_w = LV_COORD_IS_PCT(w) ? true : false;
 80059d4:	f04f 0900 	mov.w	r9, #0
 80059d8:	e7d3      	b.n	8005982 <lv_obj_refr_size+0x21e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80059da:	f241 0204 	movw	r2, #4100	; 0x1004
 80059de:	4629      	mov	r1, r5
 80059e0:	4620      	mov	r0, r4
 80059e2:	f001 fd71 	bl	80074c8 <lv_obj_get_style_prop>
        if(h_content) {
 80059e6:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 80059ea:	b207      	sxth	r7, r0
 80059ec:	429f      	cmp	r7, r3
 80059ee:	d15a      	bne.n	8005aa6 <lv_obj_refr_size+0x342>
            lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 80059f0:	462a      	mov	r2, r5
 80059f2:	4629      	mov	r1, r5
 80059f4:	4620      	mov	r0, r4
 80059f6:	f000 fe83 	bl	8006700 <lv_obj_scroll_to_y>
    }

    if(h_out) {
        lv_coord_t scroll_bottom = lv_obj_get_scroll_bottom(obj);
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fb3c 	bl	8006078 <lv_obj_get_scroll_bottom>
 8005a00:	4683      	mov	fp, r0
        lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 fb36 	bl	8006074 <lv_obj_get_scroll_top>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005a08:	8b62      	ldrh	r2, [r4, #26]
 8005a0a:	8ae3      	ldrh	r3, [r4, #22]
 8005a0c:	3201      	adds	r2, #1
 8005a0e:	1ad2      	subs	r2, r2, r3
        *h_out = lv_obj_get_height(obj) + scroll_bottom + scroll_top;
 8005a10:	eb02 030b 	add.w	r3, r2, fp
 8005a14:	4418      	add	r0, r3
 8005a16:	b205      	sxth	r5, r0
        bool pct_h = LV_COORD_IS_PCT(h) ? true : false;
 8005a18:	f405 43c0 	and.w	r3, r5, #24576	; 0x6000
 8005a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a20:	d143      	bne.n	8005aaa <lv_obj_refr_size+0x346>
 8005a22:	f425 4bc0 	bic.w	fp, r5, #24576	; 0x6000
 8005a26:	f5bb 6ffa 	cmp.w	fp, #2000	; 0x7d0
 8005a2a:	bfcc      	ite	gt
 8005a2c:	f04f 0b00 	movgt.w	fp, #0
 8005a30:	f04f 0b01 	movle.w	fp, #1
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8005a34:	4630      	mov	r0, r6
 8005a36:	f7ff faf0 	bl	800501a <lv_obj_get_content_height>
 8005a3a:	4603      	mov	r3, r0
        if(pct_h) h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8005a3c:	f1bb 0f00 	cmp.w	fp, #0
 8005a40:	d00b      	beq.n	8005a5a <lv_obj_refr_size+0x2f6>
 8005a42:	f425 45c0 	bic.w	r5, r5, #24576	; 0x6000
 8005a46:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8005a4a:	bfc8      	it	gt
 8005a4c:	f5c5 757a 	rsbgt	r5, r5, #1000	; 0x3e8
 8005a50:	4345      	muls	r5, r0
 8005a52:	2064      	movs	r0, #100	; 0x64
 8005a54:	fb95 f5f0 	sdiv	r5, r5, r0
 8005a58:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8005a5a:	f241 0205 	movw	r2, #4101	; 0x1005
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4620      	mov	r0, r4
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	f001 fd30 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005a68:	f241 0206 	movw	r2, #4102	; 0x1006
    return (lv_coord_t)v.num;
 8005a6c:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8005a70:	2100      	movs	r1, #0
 8005a72:	4620      	mov	r0, r4
 8005a74:	f001 fd28 	bl	80074c8 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	b202      	sxth	r2, r0
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f7ff fe3e 	bl	8005700 <lv_clamp_width>
 8005a84:	4605      	mov	r5, r0
    if(w_content || h_content) {
 8005a86:	f1ba 0f00 	cmp.w	sl, #0
 8005a8a:	d104      	bne.n	8005a96 <lv_obj_refr_size+0x332>
 8005a8c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8005a90:	429f      	cmp	r7, r3
 8005a92:	f47f ae9f 	bne.w	80057d4 <lv_obj_refr_size+0x70>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8005a96:	2300      	movs	r3, #0
 8005a98:	ee18 2a10 	vmov	r2, s16
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 fe56 	bl	8006750 <lv_obj_scroll_to>
 8005aa4:	e696      	b.n	80057d4 <lv_obj_refr_size+0x70>
 8005aa6:	463d      	mov	r5, r7
 8005aa8:	e7b6      	b.n	8005a18 <lv_obj_refr_size+0x2b4>
        bool pct_h = LV_COORD_IS_PCT(h) ? true : false;
 8005aaa:	f04f 0b00 	mov.w	fp, #0
 8005aae:	e7c1      	b.n	8005a34 <lv_obj_refr_size+0x2d0>
            if(sl < 0 && sr > 0) {
 8005ab0:	f1b9 0f00 	cmp.w	r9, #0
 8005ab4:	f6bf af24 	bge.w	8005900 <lv_obj_refr_size+0x19c>
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	f77f af21 	ble.w	8005900 <lv_obj_refr_size+0x19c>
                lv_obj_scroll_by(obj, sl, 0, LV_ANIM_OFF);
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	e71a      	b.n	80058fa <lv_obj_refr_size+0x196>

08005ac4 <layout_update_core>:
    }
}

static void layout_update_core(lv_obj_t * obj)
{
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4604      	mov	r4, r0
    uint32_t i;
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005ac8:	2500      	movs	r5, #0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f002 f858 	bl	8007b80 <lv_obj_get_child_cnt>
 8005ad0:	42a8      	cmp	r0, r5
 8005ad2:	d82b      	bhi.n	8005b2c <layout_update_core+0x68>
        lv_obj_t * child = lv_obj_get_child(obj, i);
        layout_update_core(child);
    }

    if(obj->layout_inv == 0) return;
 8005ad4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005ad8:	07da      	lsls	r2, r3, #31
 8005ada:	d52f      	bpl.n	8005b3c <layout_update_core+0x78>

    obj->layout_inv = 0;
 8005adc:	f36f 0300 	bfc	r3, #0, #1

    lv_obj_refr_size(obj);
 8005ae0:	4620      	mov	r0, r4
    obj->layout_inv = 0;
 8005ae2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_refr_size(obj);
 8005ae6:	f7ff fe3d 	bl	8005764 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff fc7d 	bl	80053ea <lv_obj_refr_pos>

    if(lv_obj_get_child_cnt(obj) > 0) {
 8005af0:	4620      	mov	r0, r4
 8005af2:	f002 f845 	bl	8007b80 <lv_obj_get_child_cnt>
 8005af6:	b308      	cbz	r0, 8005b3c <layout_update_core+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005af8:	f241 0269 	movw	r2, #4201	; 0x1069
 8005afc:	2100      	movs	r1, #0
 8005afe:	4620      	mov	r0, r4
 8005b00:	f001 fce2 	bl	80074c8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8005b04:	b280      	uxth	r0, r0
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8005b06:	b1c8      	cbz	r0, 8005b3c <layout_update_core+0x78>
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <layout_update_core+0x7c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4283      	cmp	r3, r0
 8005b0e:	d315      	bcc.n	8005b3c <layout_update_core+0x78>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id -1].user_data;
 8005b10:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <layout_update_core+0x80>)
 8005b16:	3801      	subs	r0, #1
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id -1].cb(obj, user_data);
 8005b1e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8005b22:	4620      	mov	r0, r4
 8005b24:	6851      	ldr	r1, [r2, #4]
        }
    }
}
 8005b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LV_GC_ROOT(_lv_layout_list)[layout_id -1].cb(obj, user_data);
 8005b2a:	4718      	bx	r3
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f002 f817 	bl	8007b62 <lv_obj_get_child>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005b34:	3501      	adds	r5, #1
        layout_update_core(child);
 8005b36:	f7ff ffc5 	bl	8005ac4 <layout_update_core>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8005b3a:	e7c6      	b.n	8005aca <layout_update_core+0x6>
}
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	bf00      	nop
 8005b40:	200029a0 	.word	0x200029a0
 8005b44:	2000ae4c 	.word	0x2000ae4c

08005b48 <lv_obj_update_layout>:
{
 8005b48:	b538      	push	{r3, r4, r5, lr}
    if(mutex) {
 8005b4a:	4c0b      	ldr	r4, [pc, #44]	; (8005b78 <lv_obj_update_layout+0x30>)
 8005b4c:	7823      	ldrb	r3, [r4, #0]
 8005b4e:	b953      	cbnz	r3, 8005b66 <lv_obj_update_layout+0x1e>
    mutex = true;
 8005b50:	2301      	movs	r3, #1
 8005b52:	7023      	strb	r3, [r4, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005b54:	f001 ffdb 	bl	8007b0e <lv_obj_get_screen>
 8005b58:	4605      	mov	r5, r0
    while(scr->scr_layout_inv) {
 8005b5a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8005b5e:	f013 0202 	ands.w	r2, r3, #2
 8005b62:	d101      	bne.n	8005b68 <lv_obj_update_layout+0x20>
    mutex = false;
 8005b64:	7022      	strb	r2, [r4, #0]
}
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
        scr->scr_layout_inv = 0;
 8005b68:	f36f 0341 	bfc	r3, #1, #1
        layout_update_core(scr);
 8005b6c:	4628      	mov	r0, r5
        scr->scr_layout_inv = 0;
 8005b6e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
        layout_update_core(scr);
 8005b72:	f7ff ffa7 	bl	8005ac4 <layout_update_core>
 8005b76:	e7f0      	b.n	8005b5a <lv_obj_update_layout+0x12>
 8005b78:	200029a4 	.word	0x200029a4

08005b7c <lv_obj_align_to>:
{
 8005b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	460e      	mov	r6, r1
 8005b82:	4605      	mov	r5, r0
 8005b84:	4614      	mov	r4, r2
 8005b86:	4698      	mov	r8, r3
 8005b88:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    lv_obj_update_layout(obj);
 8005b8c:	f7ff ffdc 	bl	8005b48 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8005b90:	b91e      	cbnz	r6, 8005b9a <lv_obj_align_to+0x1e>
 8005b92:	4628      	mov	r0, r5
 8005b94:	f001 ffe2 	bl	8007b5c <lv_obj_get_parent>
 8005b98:	4606      	mov	r6, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f001 ffde 	bl	8007b5c <lv_obj_get_parent>
 8005ba0:	4607      	mov	r7, r0
    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005ba2:	f7ff f8ab 	bl	8004cfc <lv_obj_get_style_border_width.constprop.0>
 8005ba6:	4683      	mov	fp, r0
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f7ff f8af 	bl	8004d0c <lv_obj_get_style_pad_left.constprop.0>
 8005bae:	4682      	mov	sl, r0
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f7ff f8b3 	bl	8004d1c <lv_obj_get_style_pad_top.constprop.0>
    if(align == LV_ALIGN_DEFAULT) {
 8005bb6:	b95c      	cbnz	r4, 8005bd0 <lv_obj_align_to+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8005bb8:	f241 426a 	movw	r2, #5226	; 0x146a
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	f001 fc82 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8005bc4:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8005bc6:	2801      	cmp	r0, #1
 8005bc8:	f000 8089 	beq.w	8005cde <lv_obj_align_to+0x162>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005bcc:	46a2      	mov	sl, r4
 8005bce:	e05c      	b.n	8005c8a <lv_obj_align_to+0x10e>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005bd0:	fa1a fa8b 	uxtah	sl, sl, fp
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005bd4:	fa10 f08b 	uxtah	r0, r0, fp
 8005bd8:	3c02      	subs	r4, #2
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8005bda:	fa1f fc8a 	uxth.w	ip, sl
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005bde:	b281      	uxth	r1, r0
    switch(align) {
 8005be0:	2c13      	cmp	r4, #19
 8005be2:	f200 81a4 	bhi.w	8005f2e <lv_obj_align_to+0x3b2>
 8005be6:	e8df f014 	tbh	[pc, r4, lsl #1]
 8005bea:	003a      	.short	0x003a
 8005bec:	0086007a 	.word	0x0086007a
 8005bf0:	00b10092 	.word	0x00b10092
 8005bf4:	00cf00bd 	.word	0x00cf00bd
 8005bf8:	00db0014 	.word	0x00db0014
 8005bfc:	00ff00e5 	.word	0x00ff00e5
 8005c00:	0114010c 	.word	0x0114010c
 8005c04:	013b012e 	.word	0x013b012e
 8005c08:	01670149 	.word	0x01670149
 8005c0c:	017e0178 	.word	0x017e0178
 8005c10:	019c      	.short	0x019c
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005c12:	4630      	mov	r0, r6
 8005c14:	f7ff f9e7 	bl	8004fe6 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005c18:	8b2b      	ldrh	r3, [r5, #24]
 8005c1a:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005c1e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005c22:	3301      	adds	r3, #1
 8005c24:	eba3 030a 	sub.w	r3, r3, sl
 8005c28:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005c2c:	fa0a fa83 	sxtah	sl, sl, r3
 8005c30:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005c34:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005c38:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff f9ec 	bl	800501a <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005c42:	8b6b      	ldrh	r3, [r5, #26]
 8005c44:	8aec      	ldrh	r4, [r5, #22]
 8005c46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	1b1b      	subs	r3, r3, r4
 8005c4e:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005c52:	fa04 f483 	sxtah	r4, r4, r3
 8005c56:	1064      	asrs	r4, r4, #1
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005c58:	ebc4 0460 	rsb	r4, r4, r0, asr #1
 8005c5c:	e10c      	b.n	8005e78 <lv_obj_align_to+0x2fc>
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff f9c1 	bl	8004fe6 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005c64:	8b2b      	ldrh	r3, [r5, #24]
 8005c66:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005c6a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005c6e:	3301      	adds	r3, #1
 8005c70:	eba3 030a 	sub.w	r3, r3, sl
 8005c74:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005c78:	fa0a fa83 	sxtah	sl, sl, r3
 8005c7c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005c80:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005c84:	fa0f fa8a 	sxth.w	sl, sl
        y = 0;
 8005c88:	2400      	movs	r4, #0
    x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent);
 8005c8a:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 8005c8e:	4480      	add	r8, r0
 8005c90:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005c94:	eba8 0800 	sub.w	r8, r8, r0
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f000 fa41 	bl	8006120 <lv_obj_get_scroll_left>
 8005c9e:	4440      	add	r0, r8
 8005ca0:	4482      	add	sl, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005ca2:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 8005ca6:	4481      	add	r9, r0
 8005ca8:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
    x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent);
 8005cac:	fa1f fa8a 	uxth.w	sl, sl
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005cb0:	eba9 0900 	sub.w	r9, r9, r0
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f000 f9dd 	bl	8006074 <lv_obj_get_scroll_top>
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4448      	add	r0, r9
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f241 0109 	movw	r1, #4105	; 0x1009
 8005cc4:	4404      	add	r4, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f001 fce2 	bl	8007690 <lv_obj_set_local_style_prop>
    lv_obj_set_pos(obj, x, y);
 8005ccc:	4628      	mov	r0, r5
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent);
 8005cce:	b2a4      	uxth	r4, r4
    lv_obj_set_pos(obj, x, y);
 8005cd0:	fa0f f18a 	sxth.w	r1, sl
 8005cd4:	b222      	sxth	r2, r4
}
 8005cd6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_set_pos(obj, x, y);
 8005cda:	f7ff b8d7 	b.w	8004e8c <lv_obj_set_pos>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff f981 	bl	8004fe6 <lv_obj_get_content_width>
 8005ce4:	8b2b      	ldrh	r3, [r5, #24]
 8005ce6:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	4453      	add	r3, sl
 8005cee:	4418      	add	r0, r3
 8005cf0:	fa0f fa80 	sxth.w	sl, r0
 8005cf4:	e7c8      	b.n	8005c88 <lv_obj_align_to+0x10c>
        y = lv_obj_get_content_height(base) - lv_obj_get_height(obj);
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f7ff f98f 	bl	800501a <lv_obj_get_content_height>
 8005cfc:	8b6b      	ldrh	r3, [r5, #26]
 8005cfe:	8aec      	ldrh	r4, [r5, #22]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	4423      	add	r3, r4
 8005d04:	4418      	add	r0, r3
 8005d06:	b204      	sxth	r4, r0
        x = 0;
 8005d08:	f04f 0a00 	mov.w	sl, #0
        break;
 8005d0c:	e7bd      	b.n	8005c8a <lv_obj_align_to+0x10e>
        x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f7ff f969 	bl	8004fe6 <lv_obj_get_content_width>
 8005d14:	8b2b      	ldrh	r3, [r5, #24]
 8005d16:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005d1a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005d1e:	3301      	adds	r3, #1
 8005d20:	eba3 030a 	sub.w	r3, r3, sl
 8005d24:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005d28:	fa0a fa83 	sxtah	sl, sl, r3
 8005d2c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8005d30:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005d34:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_content_height(base) - lv_obj_get_height(obj);
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f7ff f96e 	bl	800501a <lv_obj_get_content_height>
 8005d3e:	8b6b      	ldrh	r3, [r5, #26]
 8005d40:	8aec      	ldrh	r4, [r5, #22]
 8005d42:	43db      	mvns	r3, r3
 8005d44:	4423      	add	r3, r4
 8005d46:	4418      	add	r0, r3
 8005d48:	b204      	sxth	r4, r0
        break;
 8005d4a:	e79e      	b.n	8005c8a <lv_obj_align_to+0x10e>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff f94a 	bl	8004fe6 <lv_obj_get_content_width>
 8005d52:	8b2b      	ldrh	r3, [r5, #24]
 8005d54:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	4453      	add	r3, sl
 8005d5c:	4418      	add	r0, r3
 8005d5e:	fa0f fa80 	sxth.w	sl, r0
 8005d62:	e7e9      	b.n	8005d38 <lv_obj_align_to+0x1bc>
        y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005d64:	4630      	mov	r0, r6
 8005d66:	f7ff f958 	bl	800501a <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005d6a:	8b6b      	ldrh	r3, [r5, #26]
 8005d6c:	8aec      	ldrh	r4, [r5, #22]
 8005d6e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005d72:	3301      	adds	r3, #1
 8005d74:	1b1b      	subs	r3, r3, r4
 8005d76:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005d7a:	fa04 f483 	sxtah	r4, r4, r3
 8005d7e:	1064      	asrs	r4, r4, #1
 8005d80:	ebc4 0460 	rsb	r4, r4, r0, asr #1
 8005d84:	b224      	sxth	r4, r4
 8005d86:	e7bf      	b.n	8005d08 <lv_obj_align_to+0x18c>
        x = lv_obj_get_content_width(base) - lv_obj_get_width(obj);
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff f92c 	bl	8004fe6 <lv_obj_get_content_width>
 8005d8e:	8b2b      	ldrh	r3, [r5, #24]
 8005d90:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005d94:	43db      	mvns	r3, r3
 8005d96:	4453      	add	r3, sl
 8005d98:	4418      	add	r0, r3
 8005d9a:	fa0f fa80 	sxth.w	sl, r0
 8005d9e:	e74d      	b.n	8005c3c <lv_obj_align_to+0xc0>
        x = -pleft;
 8005da0:	f1cc 0a00 	rsb	sl, ip, #0
        y = -lv_obj_get_height(obj) - ptop;
 8005da4:	8aec      	ldrh	r4, [r5, #22]
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005da6:	fa0f fa8a 	sxth.w	sl, sl
        y = -lv_obj_get_height(obj) - ptop;
 8005daa:	8b6b      	ldrh	r3, [r5, #26]
 8005dac:	3c01      	subs	r4, #1
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005dae:	1ae4      	subs	r4, r4, r3
 8005db0:	1a64      	subs	r4, r4, r1
 8005db2:	e061      	b.n	8005e78 <lv_obj_align_to+0x2fc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005db4:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005db8:	8ab3      	ldrh	r3, [r6, #20]
 8005dba:	f10a 0a01 	add.w	sl, sl, #1
 8005dbe:	ebaa 0a03 	sub.w	sl, sl, r3
 8005dc2:	8b2b      	ldrh	r3, [r5, #24]
        x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2 - pleft;
 8005dc4:	f3ca 30c0 	ubfx	r0, sl, #15, #1
 8005dc8:	3301      	adds	r3, #1
 8005dca:	fa00 f08a 	sxtah	r0, r0, sl
 8005dce:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005dd2:	eba3 030a 	sub.w	r3, r3, sl
 8005dd6:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005dda:	fa0a fa83 	sxtah	sl, sl, r3
 8005dde:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 8005de2:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005de6:	e7dd      	b.n	8005da4 <lv_obj_align_to+0x228>
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005de8:	8b2b      	ldrh	r3, [r5, #24]
 8005dea:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005dee:	ebaa 0a03 	sub.w	sl, sl, r3
 8005df2:	8b33      	ldrh	r3, [r6, #24]
 8005df4:	449a      	add	sl, r3
 8005df6:	8ab3      	ldrh	r3, [r6, #20]
 8005df8:	ebaa 0a03 	sub.w	sl, sl, r3
 8005dfc:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005e00:	e7d0      	b.n	8005da4 <lv_obj_align_to+0x228>
        x = - pleft;
 8005e02:	f1cc 0a00 	rsb	sl, ip, #0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005e06:	8b74      	ldrh	r4, [r6, #26]
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005e08:	fa0f fa8a 	sxth.w	sl, sl
 8005e0c:	3401      	adds	r4, #1
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005e0e:	8af3      	ldrh	r3, [r6, #22]
 8005e10:	e7cd      	b.n	8005dae <lv_obj_align_to+0x232>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005e12:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005e16:	8ab3      	ldrh	r3, [r6, #20]
 8005e18:	f10a 0a01 	add.w	sl, sl, #1
 8005e1c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005e20:	8b2b      	ldrh	r3, [r5, #24]
        x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2 - pleft;
 8005e22:	f3ca 30c0 	ubfx	r0, sl, #15, #1
 8005e26:	3301      	adds	r3, #1
 8005e28:	fa00 f08a 	sxtah	r0, r0, sl
 8005e2c:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005e30:	eba3 030a 	sub.w	r3, r3, sl
 8005e34:	f3c3 3ac0 	ubfx	sl, r3, #15, #1
 8005e38:	fa0a fa83 	sxtah	sl, sl, r3
 8005e3c:	eb0c 0a6a 	add.w	sl, ip, sl, asr #1
 8005e40:	ebca 0a60 	rsb	sl, sl, r0, asr #1
 8005e44:	e7df      	b.n	8005e06 <lv_obj_align_to+0x28a>
        x = lv_obj_get_width(base) - lv_obj_get_width(obj) - pleft;
 8005e46:	8b2b      	ldrh	r3, [r5, #24]
 8005e48:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005e4c:	ebaa 0a03 	sub.w	sl, sl, r3
 8005e50:	8b33      	ldrh	r3, [r6, #24]
 8005e52:	449a      	add	sl, r3
 8005e54:	8ab3      	ldrh	r3, [r6, #20]
 8005e56:	ebaa 0a03 	sub.w	sl, sl, r3
 8005e5a:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005e5e:	e7d2      	b.n	8005e06 <lv_obj_align_to+0x28a>
        x = -lv_obj_get_width(obj) - pleft;
 8005e60:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005e64:	8b2b      	ldrh	r3, [r5, #24]
 8005e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e6a:	ebaa 0a03 	sub.w	sl, sl, r3
        y = - ptop;
 8005e6e:	424c      	negs	r4, r1
        x = lv_obj_get_width(base) - pleft;
 8005e70:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005e74:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005e78:	b224      	sxth	r4, r4
        break;
 8005e7a:	e706      	b.n	8005c8a <lv_obj_align_to+0x10e>
        x = -lv_obj_get_width(obj) - pleft;
 8005e7c:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005e80:	8b2b      	ldrh	r3, [r5, #24]
 8005e82:	f10a 3aff 	add.w	sl, sl, #4294967295
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005e86:	8b74      	ldrh	r4, [r6, #26]
 8005e88:	ebaa 0a03 	sub.w	sl, sl, r3
 8005e8c:	3401      	adds	r4, #1
 8005e8e:	8af3      	ldrh	r3, [r6, #22]
 8005e90:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005e94:	1ae4      	subs	r4, r4, r3
 8005e96:	8b6b      	ldrh	r3, [r5, #26]
 8005e98:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005e9c:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	fa00 f084 	sxtah	r0, r0, r4
 8005ea6:	8aec      	ldrh	r4, [r5, #22]
 8005ea8:	1b1b      	subs	r3, r3, r4
 8005eaa:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8005eae:	fa04 f383 	sxtah	r3, r4, r3
 8005eb2:	eb01 0463 	add.w	r4, r1, r3, asr #1
 8005eb6:	e6cf      	b.n	8005c58 <lv_obj_align_to+0xdc>
        x = -lv_obj_get_width(obj) - pleft;
 8005eb8:	f8b5 a014 	ldrh.w	sl, [r5, #20]
 8005ebc:	8b2b      	ldrh	r3, [r5, #24]
 8005ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005ec2:	ebaa 0a03 	sub.w	sl, sl, r3
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005ec6:	8aec      	ldrh	r4, [r5, #22]
 8005ec8:	8b6b      	ldrh	r3, [r5, #26]
        x = lv_obj_get_width(base) - pleft;
 8005eca:	ebaa 0a0c 	sub.w	sl, sl, ip
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005ece:	1ae4      	subs	r4, r4, r3
 8005ed0:	8b73      	ldrh	r3, [r6, #26]
        x = lv_obj_get_width(base) - pleft;
 8005ed2:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) - lv_obj_get_height(obj) - ptop;
 8005ed6:	441c      	add	r4, r3
 8005ed8:	e799      	b.n	8005e0e <lv_obj_align_to+0x292>
 8005eda:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005ede:	8ab3      	ldrh	r3, [r6, #20]
 8005ee0:	f10a 0a01 	add.w	sl, sl, #1
 8005ee4:	e7c1      	b.n	8005e6a <lv_obj_align_to+0x2ee>
 8005ee6:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005eea:	8ab3      	ldrh	r3, [r6, #20]
 8005eec:	f10a 0a01 	add.w	sl, sl, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ef0:	8b74      	ldrh	r4, [r6, #26]
 8005ef2:	8b6a      	ldrh	r2, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005ef4:	ebaa 0a03 	sub.w	sl, sl, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005ef8:	3401      	adds	r4, #1
 8005efa:	8af3      	ldrh	r3, [r6, #22]
 8005efc:	3201      	adds	r2, #1
        x = lv_obj_get_width(base) - pleft;
 8005efe:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005f02:	1ae4      	subs	r4, r4, r3
 8005f04:	fa0f fa8a 	sxth.w	sl, sl
        y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2 - ptop;
 8005f08:	f3c4 30c0 	ubfx	r0, r4, #15, #1
 8005f0c:	fa00 f084 	sxtah	r0, r0, r4
 8005f10:	8aec      	ldrh	r4, [r5, #22]
 8005f12:	1b12      	subs	r2, r2, r4
 8005f14:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8005f18:	fa04 f282 	sxtah	r2, r4, r2
 8005f1c:	eb01 0462 	add.w	r4, r1, r2, asr #1
 8005f20:	e69a      	b.n	8005c58 <lv_obj_align_to+0xdc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005f22:	f8b6 a018 	ldrh.w	sl, [r6, #24]
 8005f26:	8ab3      	ldrh	r3, [r6, #20]
 8005f28:	f10a 0a01 	add.w	sl, sl, #1
 8005f2c:	e7c9      	b.n	8005ec2 <lv_obj_align_to+0x346>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8005f2e:	2400      	movs	r4, #0
 8005f30:	e64c      	b.n	8005bcc <lv_obj_align_to+0x50>

08005f32 <scroll_by_raw>:
 *   STATIC FUNCTIONS
 **********************/

static void scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
    if(x == 0 && y == 0) return;
 8005f32:	ea51 0302 	orrs.w	r3, r1, r2
{
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	4616      	mov	r6, r2
    if(x == 0 && y == 0) return;
 8005f3e:	d01a      	beq.n	8005f76 <scroll_by_raw+0x44>

    lv_obj_allocate_spec_attr(obj);
 8005f40:	f7fe fabc 	bl	80044bc <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 8005f44:	68a3      	ldr	r3, [r4, #8]
    obj->spec_attr->scroll.y += y;

    lv_obj_move_children_by(obj, x, y, true);
 8005f46:	4629      	mov	r1, r5
 8005f48:	4620      	mov	r0, r4
    obj->spec_attr->scroll.x += x;
 8005f4a:	8a1a      	ldrh	r2, [r3, #16]
 8005f4c:	442a      	add	r2, r5
 8005f4e:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8005f50:	8a5a      	ldrh	r2, [r3, #18]
 8005f52:	4432      	add	r2, r6
 8005f54:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8005f56:	2301      	movs	r3, #1
 8005f58:	4632      	mov	r2, r6
 8005f5a:	f7ff f8e4 	bl	8005126 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8005f5e:	2200      	movs	r2, #0
 8005f60:	210b      	movs	r1, #11
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7fc f860 	bl	8002028 <lv_event_send>
    if(res != LV_RES_OK) return;
 8005f68:	2801      	cmp	r0, #1
 8005f6a:	d104      	bne.n	8005f76 <scroll_by_raw+0x44>
    lv_obj_invalidate(obj);
 8005f6c:	4620      	mov	r0, r4
}
 8005f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(obj);
 8005f72:	f7ff b981 	b.w	8005278 <lv_obj_invalidate>
}
 8005f76:	bd70      	pop	{r4, r5, r6, pc}

08005f78 <scroll_anim_ready_cb>:
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	210a      	movs	r1, #10
 8005f7c:	6800      	ldr	r0, [r0, #0]
 8005f7e:	f7fc b853 	b.w	8002028 <lv_event_send>

08005f82 <lv_obj_set_scrollbar_mode>:
{
 8005f82:	b538      	push	{r3, r4, r5, lr}
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 8005f88:	f7fe fa98 	bl	80044bc <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8005f8c:	68a2      	ldr	r2, [r4, #8]
 8005f8e:	7e13      	ldrb	r3, [r2, #24]
 8005f90:	f003 0103 	and.w	r1, r3, #3
 8005f94:	42a9      	cmp	r1, r5
 8005f96:	d007      	beq.n	8005fa8 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 8005f98:	f365 0301 	bfi	r3, r5, #0, #2
    lv_obj_invalidate(obj);
 8005f9c:	4620      	mov	r0, r4
    obj->spec_attr->scrollbar_mode = mode;
 8005f9e:	7613      	strb	r3, [r2, #24]
}
 8005fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(obj);
 8005fa4:	f7ff b968 	b.w	8005278 <lv_obj_invalidate>
}
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}

08005faa <lv_obj_set_scroll_dir>:
{
 8005faa:	b538      	push	{r3, r4, r5, lr}
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005fb0:	f7fe fa84 	bl	80044bc <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 8005fb4:	68aa      	ldr	r2, [r5, #8]
 8005fb6:	7e53      	ldrb	r3, [r2, #25]
 8005fb8:	f003 010f 	and.w	r1, r3, #15
 8005fbc:	42a1      	cmp	r1, r4
        obj->spec_attr->scroll_dir = dir;
 8005fbe:	bf1c      	itt	ne
 8005fc0:	f364 0303 	bfine	r3, r4, #0, #4
 8005fc4:	7653      	strbne	r3, [r2, #25]
}
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}

08005fc8 <lv_obj_set_scroll_snap_x>:
{
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4605      	mov	r5, r0
 8005fcc:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005fce:	f7fe fa75 	bl	80044bc <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 8005fd2:	68ab      	ldr	r3, [r5, #8]
 8005fd4:	7e1a      	ldrb	r2, [r3, #24]
 8005fd6:	f364 0283 	bfi	r2, r4, #2, #2
 8005fda:	761a      	strb	r2, [r3, #24]
}
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}

08005fde <lv_obj_set_scroll_snap_y>:
{
 8005fde:	b538      	push	{r3, r4, r5, lr}
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8005fe4:	f7fe fa6a 	bl	80044bc <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 8005fe8:	68ab      	ldr	r3, [r5, #8]
 8005fea:	7e1a      	ldrb	r2, [r3, #24]
 8005fec:	f364 1205 	bfi	r2, r4, #4, #2
 8005ff0:	761a      	strb	r2, [r3, #24]
}
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}

08005ff4 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8005ff4:	6883      	ldr	r3, [r0, #8]
 8005ff6:	b11b      	cbz	r3, 8006000 <lv_obj_get_scrollbar_mode+0xc>
 8005ff8:	7e18      	ldrb	r0, [r3, #24]
 8005ffa:	f000 0003 	and.w	r0, r0, #3
 8005ffe:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8006000:	2003      	movs	r0, #3
}
 8006002:	4770      	bx	lr

08006004 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8006004:	6883      	ldr	r3, [r0, #8]
 8006006:	b11b      	cbz	r3, 8006010 <lv_obj_get_scroll_dir+0xc>
 8006008:	7e58      	ldrb	r0, [r3, #25]
 800600a:	f000 000f 	and.w	r0, r0, #15
 800600e:	4770      	bx	lr
    else return LV_DIR_ALL;
 8006010:	200f      	movs	r0, #15
}
 8006012:	4770      	bx	lr

08006014 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8006014:	6880      	ldr	r0, [r0, #8]
 8006016:	b110      	cbz	r0, 800601e <lv_obj_get_scroll_snap_x+0xa>
 8006018:	7e00      	ldrb	r0, [r0, #24]
 800601a:	f3c0 0081 	ubfx	r0, r0, #2, #2
}
 800601e:	4770      	bx	lr

08006020 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8006020:	6880      	ldr	r0, [r0, #8]
 8006022:	b110      	cbz	r0, 800602a <lv_obj_get_scroll_snap_y+0xa>
 8006024:	7e00      	ldrb	r0, [r0, #24]
 8006026:	f3c0 1001 	ubfx	r0, r0, #4, #2
}
 800602a:	4770      	bx	lr

0800602c <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 800602c:	6880      	ldr	r0, [r0, #8]
 800602e:	b110      	cbz	r0, 8006036 <lv_obj_get_scroll_x+0xa>
    return -obj->spec_attr->scroll.x;
 8006030:	8a00      	ldrh	r0, [r0, #16]
 8006032:	4240      	negs	r0, r0
 8006034:	b200      	sxth	r0, r0
}
 8006036:	4770      	bx	lr

08006038 <scroll_x_anim>:
{
 8006038:	b508      	push	{r3, lr}
 800603a:	4603      	mov	r3, r0
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800603c:	f7ff fff6 	bl	800602c <lv_obj_get_scroll_x>
 8006040:	4401      	add	r1, r0
 8006042:	2200      	movs	r2, #0
 8006044:	4618      	mov	r0, r3
 8006046:	b209      	sxth	r1, r1
}
 8006048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800604c:	f7ff bf71 	b.w	8005f32 <scroll_by_raw>

08006050 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8006050:	6880      	ldr	r0, [r0, #8]
 8006052:	b110      	cbz	r0, 800605a <lv_obj_get_scroll_y+0xa>
    return -obj->spec_attr->scroll.y;
 8006054:	8a40      	ldrh	r0, [r0, #18]
 8006056:	4240      	negs	r0, r0
 8006058:	b200      	sxth	r0, r0
}
 800605a:	4770      	bx	lr

0800605c <scroll_y_anim>:
{
 800605c:	b508      	push	{r3, lr}
 800605e:	4603      	mov	r3, r0
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8006060:	f7ff fff6 	bl	8006050 <lv_obj_get_scroll_y>
 8006064:	4401      	add	r1, r0
 8006066:	4618      	mov	r0, r3
 8006068:	b20a      	sxth	r2, r1
 800606a:	2100      	movs	r1, #0
}
 800606c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8006070:	f7ff bf5f 	b.w	8005f32 <scroll_by_raw>

08006074 <lv_obj_get_scroll_top>:
 8006074:	f7ff bfec 	b.w	8006050 <lv_obj_get_scroll_y>

08006078 <lv_obj_get_scroll_bottom>:
{
 8006078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800607c:	4606      	mov	r6, r0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800607e:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8006080:	4d26      	ldr	r5, [pc, #152]	; (800611c <lv_obj_get_scroll_bottom+0xa4>)
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006082:	4630      	mov	r0, r6
 8006084:	f001 fd7c 	bl	8007b80 <lv_obj_get_child_cnt>
 8006088:	42a0      	cmp	r0, r4
 800608a:	d835      	bhi.n	80060f8 <lv_obj_get_scroll_bottom+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800608c:	f241 0210 	movw	r2, #4112	; 0x1010
 8006090:	2100      	movs	r1, #0
 8006092:	4630      	mov	r0, r6
 8006094:	f001 fa18 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006098:	f241 0211 	movw	r2, #4113	; 0x1011
 800609c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800609e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80060a0:	4630      	mov	r0, r6
 80060a2:	f001 fa11 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80060a6:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80060aa:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80060ac:	2100      	movs	r1, #0
 80060ae:	4630      	mov	r0, r6
 80060b0:	f001 fa0a 	bl	80074c8 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 80060b4:	f515 4fc0 	cmn.w	r5, #24576	; 0x6000
 80060b8:	4681      	mov	r9, r0
 80060ba:	d005      	beq.n	80060c8 <lv_obj_get_scroll_bottom+0x50>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 80060bc:	eb08 0700 	add.w	r7, r8, r0
 80060c0:	8b73      	ldrh	r3, [r6, #26]
 80060c2:	1aff      	subs	r7, r7, r3
 80060c4:	443d      	add	r5, r7
 80060c6:	b22d      	sxth	r5, r5
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 80060c8:	4630      	mov	r0, r6
 80060ca:	f7ff f803 	bl	80050d4 <lv_obj_get_self_height>
 80060ce:	4607      	mov	r7, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7fe ff82 	bl	8004fda <lv_obj_get_height>
 80060d6:	eb04 0108 	add.w	r1, r4, r8
 80060da:	eb01 0249 	add.w	r2, r1, r9, lsl #1
 80060de:	19d4      	adds	r4, r2, r7
 80060e0:	1a23      	subs	r3, r4, r0
    self_h -= lv_obj_get_scroll_y(obj);
 80060e2:	4630      	mov	r0, r6
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 80060e4:	b29b      	uxth	r3, r3
    self_h -= lv_obj_get_scroll_y(obj);
 80060e6:	f7ff ffb3 	bl	8006050 <lv_obj_get_scroll_y>
 80060ea:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_h);
 80060ec:	b200      	sxth	r0, r0
}
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	bfb8      	it	lt
 80060f2:	4628      	movlt	r0, r5
 80060f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80060f8:	4621      	mov	r1, r4
 80060fa:	4630      	mov	r0, r6
 80060fc:	f001 fd31 	bl	8007b62 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006100:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8006104:	4607      	mov	r7, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006106:	f7fd ff13 	bl	8003f30 <lv_obj_has_flag_any>
 800610a:	b920      	cbnz	r0, 8006116 <lv_obj_get_scroll_bottom+0x9e>
        child_res = LV_MAX(child_res, child->coords.y2);
 800610c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006110:	429d      	cmp	r5, r3
 8006112:	bfb8      	it	lt
 8006114:	461d      	movlt	r5, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006116:	3401      	adds	r4, #1
 8006118:	e7b3      	b.n	8006082 <lv_obj_get_scroll_bottom+0xa>
 800611a:	bf00      	nop
 800611c:	ffffa000 	.word	0xffffa000

08006120 <lv_obj_get_scroll_left>:
{
 8006120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006124:	f241 426a 	movw	r2, #5226	; 0x146a
 8006128:	2100      	movs	r1, #0
 800612a:	4605      	mov	r5, r0
 800612c:	f001 f9cc 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006130:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006132:	2801      	cmp	r0, #1
 8006134:	d006      	beq.n	8006144 <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 8006136:	68a8      	ldr	r0, [r5, #8]
 8006138:	b110      	cbz	r0, 8006140 <lv_obj_get_scroll_left+0x20>
        return -obj->spec_attr->scroll.x;
 800613a:	8a00      	ldrh	r0, [r0, #16]
 800613c:	4240      	negs	r0, r0
 800613e:	b200      	sxth	r0, r0
}
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006144:	f241 0213 	movw	r2, #4115	; 0x1013
 8006148:	2100      	movs	r1, #0
 800614a:	4628      	mov	r0, r5
    lv_coord_t x1 = LV_COORD_MAX;
 800614c:	f44f 49c0 	mov.w	r9, #24576	; 0x6000
 8006150:	f001 f9ba 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006154:	f241 0212 	movw	r2, #4114	; 0x1012
 8006158:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800615a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800615c:	4628      	mov	r0, r5
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 800615e:	2600      	movs	r6, #0
 8006160:	f001 f9b2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006164:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006168:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800616a:	2100      	movs	r1, #0
 800616c:	4628      	mov	r0, r5
 800616e:	f001 f9ab 	bl	80074c8 <lv_obj_get_style_prop>
 8006172:	4680      	mov	r8, r0
 8006174:	4628      	mov	r0, r5
 8006176:	f001 fd03 	bl	8007b80 <lv_obj_get_child_cnt>
 800617a:	4286      	cmp	r6, r0
 800617c:	d328      	bcc.n	80061d0 <lv_obj_get_scroll_left+0xb0>
    if(x1 != LV_COORD_MAX) {
 800617e:	f5b9 4fc0 	cmp.w	r9, #24576	; 0x6000
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006182:	fa1f fa8a 	uxth.w	sl, sl
 8006186:	fa1f f888 	uxth.w	r8, r8
 800618a:	bf1b      	ittet	ne
 800618c:	8aa8      	ldrhne	r0, [r5, #20]
 800618e:	eb0a 0608 	addne.w	r6, sl, r8
        child_res = LV_COORD_MIN;
 8006192:	4e18      	ldreq	r6, [pc, #96]	; (80061f4 <lv_obj_get_scroll_left+0xd4>)
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006194:	1836      	addne	r6, r6, r0
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8006196:	4628      	mov	r0, r5
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8006198:	bf1c      	itt	ne
 800619a:	eba6 0609 	subne.w	r6, r6, r9
 800619e:	b236      	sxthne	r6, r6
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 80061a0:	f7fe ff8b 	bl	80050ba <lv_obj_get_self_width>
 80061a4:	4681      	mov	r9, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fe ff11 	bl	8004fce <lv_obj_get_width>
 80061ac:	eb0a 0307 	add.w	r3, sl, r7
 80061b0:	4602      	mov	r2, r0
    self_w += lv_obj_get_scroll_x(obj);
 80061b2:	4628      	mov	r0, r5
 80061b4:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 80061b8:	eb03 0409 	add.w	r4, r3, r9
 80061bc:	f7ff ff36 	bl	800602c <lv_obj_get_scroll_x>
 80061c0:	b2a4      	uxth	r4, r4
 80061c2:	4404      	add	r4, r0
 80061c4:	1aa0      	subs	r0, r4, r2
    return LV_MAX(child_res, self_w);
 80061c6:	b200      	sxth	r0, r0
 80061c8:	42b0      	cmp	r0, r6
 80061ca:	bfb8      	it	lt
 80061cc:	4630      	movlt	r0, r6
 80061ce:	e7b7      	b.n	8006140 <lv_obj_get_scroll_left+0x20>
       lv_obj_t * child = lv_obj_get_child(obj, i);
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	f001 fcc5 	bl	8007b62 <lv_obj_get_child>
       if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80061d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
       lv_obj_t * child = lv_obj_get_child(obj, i);
 80061dc:	4604      	mov	r4, r0
       if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80061de:	f7fd fea7 	bl	8003f30 <lv_obj_has_flag_any>
 80061e2:	b920      	cbnz	r0, 80061ee <lv_obj_get_scroll_left+0xce>
        x1 = LV_MIN(x1, child->coords.x1);
 80061e4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80061e8:	4599      	cmp	r9, r3
 80061ea:	bfa8      	it	ge
 80061ec:	4699      	movge	r9, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7c0      	b.n	8006174 <lv_obj_get_scroll_left+0x54>
 80061f2:	bf00      	nop
 80061f4:	ffffa000 	.word	0xffffa000

080061f8 <lv_obj_get_scroll_right>:
{
 80061f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80061fc:	f241 426a 	movw	r2, #5226	; 0x146a
 8006200:	2100      	movs	r1, #0
 8006202:	4606      	mov	r6, r0
 8006204:	f001 f960 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006208:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800620a:	2801      	cmp	r0, #1
 800620c:	d14f      	bne.n	80062ae <lv_obj_get_scroll_right+0xb6>
        if(obj->spec_attr == NULL) return 0;
 800620e:	68b0      	ldr	r0, [r6, #8]
 8006210:	b108      	cbz	r0, 8006216 <lv_obj_get_scroll_right+0x1e>
        return obj->spec_attr->scroll.x;
 8006212:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
}
 8006216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 800621a:	4621      	mov	r1, r4
 800621c:	4630      	mov	r0, r6
 800621e:	f001 fca0 	bl	8007b62 <lv_obj_get_child>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8006226:	4605      	mov	r5, r0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006228:	f7fd fe82 	bl	8003f30 <lv_obj_has_flag_any>
 800622c:	b920      	cbnz	r0, 8006238 <lv_obj_get_scroll_right+0x40>
        child_res = LV_MAX(child_res, child->coords.x2);
 800622e:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8006232:	4598      	cmp	r8, r3
 8006234:	bfb8      	it	lt
 8006236:	4698      	movlt	r8, r3
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006238:	3401      	adds	r4, #1
 800623a:	4630      	mov	r0, r6
 800623c:	f001 fca0 	bl	8007b80 <lv_obj_get_child_cnt>
 8006240:	4284      	cmp	r4, r0
 8006242:	d3ea      	bcc.n	800621a <lv_obj_get_scroll_right+0x22>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006244:	f241 0213 	movw	r2, #4115	; 0x1013
 8006248:	2100      	movs	r1, #0
 800624a:	4630      	mov	r0, r6
 800624c:	f001 f93c 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006250:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006254:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006256:	2100      	movs	r1, #0
 8006258:	4630      	mov	r0, r6
 800625a:	f001 f935 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800625e:	f241 0232 	movw	r2, #4146	; 0x1032
 8006262:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006264:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006266:	4630      	mov	r0, r6
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8006268:	b2ac      	uxth	r4, r5
 800626a:	f001 f92d 	bl	80074c8 <lv_obj_get_style_prop>
 800626e:	fa1f f980 	uxth.w	r9, r0
 8006272:	8b30      	ldrh	r0, [r6, #24]
 8006274:	fa19 f585 	uxtah	r5, r9, r5
 8006278:	1a2d      	subs	r5, r5, r0
    self_w = lv_obj_get_self_width(obj);
 800627a:	4630      	mov	r0, r6
 800627c:	f7fe ff1d 	bl	80050ba <lv_obj_get_self_width>
    child_res -= (obj->coords.x2 - pad_right - border_width);
 8006280:	4445      	add	r5, r8
    self_w = lv_obj_get_self_width(obj);
 8006282:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006284:	4630      	mov	r0, r6
 8006286:	f7fe fea2 	bl	8004fce <lv_obj_get_width>
 800628a:	19e2      	adds	r2, r4, r7
    child_res -= (obj->coords.x2 - pad_right - border_width);
 800628c:	b2ad      	uxth	r5, r5
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800628e:	eb02 0249 	add.w	r2, r2, r9, lsl #1
    return LV_MAX(child_res, self_w);
 8006292:	b22d      	sxth	r5, r5
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8006294:	eb02 0408 	add.w	r4, r2, r8
 8006298:	1a23      	subs	r3, r4, r0
    self_w -= lv_obj_get_scroll_x(obj);
 800629a:	4630      	mov	r0, r6
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800629c:	b29b      	uxth	r3, r3
    self_w -= lv_obj_get_scroll_x(obj);
 800629e:	f7ff fec5 	bl	800602c <lv_obj_get_scroll_x>
 80062a2:	1a18      	subs	r0, r3, r0
    return LV_MAX(child_res, self_w);
 80062a4:	b200      	sxth	r0, r0
 80062a6:	42a8      	cmp	r0, r5
 80062a8:	bfb8      	it	lt
 80062aa:	4628      	movlt	r0, r5
 80062ac:	e7b3      	b.n	8006216 <lv_obj_get_scroll_right+0x1e>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80062ae:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80062b0:	f8df 8004 	ldr.w	r8, [pc, #4]	; 80062b8 <lv_obj_get_scroll_right+0xc0>
 80062b4:	e7c1      	b.n	800623a <lv_obj_get_scroll_right+0x42>
 80062b6:	bf00      	nop
 80062b8:	ffffa000 	.word	0xffffa000

080062bc <lv_obj_get_scroll_end>:
{
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	460c      	mov	r4, r1
    a = lv_anim_get(obj, scroll_x_anim);
 80062c0:	490d      	ldr	r1, [pc, #52]	; (80062f8 <lv_obj_get_scroll_end+0x3c>)
{
 80062c2:	4605      	mov	r5, r0
    a = lv_anim_get(obj, scroll_x_anim);
 80062c4:	f010 fe36 	bl	8016f34 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 80062c8:	b168      	cbz	r0, 80062e6 <lv_obj_get_scroll_end+0x2a>
 80062ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062cc:	425b      	negs	r3, r3
 80062ce:	b218      	sxth	r0, r3
 80062d0:	8020      	strh	r0, [r4, #0]
    a = lv_anim_get(obj, scroll_y_anim);
 80062d2:	4628      	mov	r0, r5
 80062d4:	4909      	ldr	r1, [pc, #36]	; (80062fc <lv_obj_get_scroll_end+0x40>)
 80062d6:	f010 fe2d 	bl	8016f34 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 80062da:	b140      	cbz	r0, 80062ee <lv_obj_get_scroll_end+0x32>
 80062dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80062de:	4240      	negs	r0, r0
 80062e0:	b200      	sxth	r0, r0
 80062e2:	8060      	strh	r0, [r4, #2]
}
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7ff fea0 	bl	800602c <lv_obj_get_scroll_x>
 80062ec:	e7f0      	b.n	80062d0 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7ff feae 	bl	8006050 <lv_obj_get_scroll_y>
 80062f4:	e7f5      	b.n	80062e2 <lv_obj_get_scroll_end+0x26>
 80062f6:	bf00      	nop
 80062f8:	08006039 	.word	0x08006039
 80062fc:	0800605d 	.word	0x0800605d

08006300 <lv_obj_scroll_by>:
{
 8006300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006302:	4616      	mov	r6, r2
 8006304:	b093      	sub	sp, #76	; 0x4c
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
    if(x == 0 && y == 0) return;
 800630a:	ea51 0206 	orrs.w	r2, r1, r6
 800630e:	d05c      	beq.n	80063ca <lv_obj_scroll_by+0xca>
    if(anim_en == LV_ANIM_ON) {
 8006310:	2b01      	cmp	r3, #1
 8006312:	d15c      	bne.n	80063ce <lv_obj_scroll_by+0xce>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8006314:	f001 fc02 	bl	8007b1c <lv_obj_get_disp>
 8006318:	4607      	mov	r7, r0
        lv_anim_init(&a);
 800631a:	a801      	add	r0, sp, #4
 800631c:	f010 fd7e 	bl	8016e1c <lv_anim_init>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8006320:	4b31      	ldr	r3, [pc, #196]	; (80063e8 <lv_obj_scroll_by+0xe8>)
    a->var = var;
 8006322:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8006324:	9304      	str	r3, [sp, #16]
        if(x) {
 8006326:	b33d      	cbz	r5, 8006378 <lv_obj_scroll_by+0x78>
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8006328:	2200      	movs	r2, #0
 800632a:	2109      	movs	r1, #9
 800632c:	4620      	mov	r0, r4
 800632e:	f7fb fe7b 	bl	8002028 <lv_event_send>
            if(res != LV_RES_OK) return;
 8006332:	2801      	cmp	r0, #1
 8006334:	d149      	bne.n	80063ca <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, x);
 8006336:	4638      	mov	r0, r7
 8006338:	f010 fbac 	bl	8016a94 <lv_disp_get_hor_res>
 800633c:	462a      	mov	r2, r5
 800633e:	2100      	movs	r1, #0
 8006340:	f340 005d 	sbfx	r0, r0, #1, #30
 8006344:	f010 fe0c 	bl	8016f60 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8006348:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800634c:	bf28      	it	cs
 800634e:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8006352:	28c8      	cmp	r0, #200	; 0xc8
 8006354:	bf38      	it	cc
 8006356:	20c8      	movcc	r0, #200	; 0xc8
 8006358:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fe66 	bl	800602c <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + x);
 8006360:	4243      	negs	r3, r0
 8006362:	1a2d      	subs	r5, r5, r0
            lv_anim_start(&a);
 8006364:	a801      	add	r0, sp, #4
    a->current_value = start;
 8006366:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->exec_cb = exec_cb;
 800636a:	4b20      	ldr	r3, [pc, #128]	; (80063ec <lv_obj_scroll_by+0xec>)
    a->end_value = end;
 800636c:	950a      	str	r5, [sp, #40]	; 0x28
    a->exec_cb = exec_cb;
 800636e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8006370:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <lv_obj_scroll_by+0xf0>)
 8006372:	9307      	str	r3, [sp, #28]
 8006374:	f010 fd98 	bl	8016ea8 <lv_anim_start>
        if(y) {
 8006378:	b33e      	cbz	r6, 80063ca <lv_obj_scroll_by+0xca>
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800637a:	2200      	movs	r2, #0
 800637c:	2109      	movs	r1, #9
 800637e:	4620      	mov	r0, r4
 8006380:	f7fb fe52 	bl	8002028 <lv_event_send>
            if(res != LV_RES_OK) return;
 8006384:	2801      	cmp	r0, #1
 8006386:	d120      	bne.n	80063ca <lv_obj_scroll_by+0xca>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, y);
 8006388:	4638      	mov	r0, r7
 800638a:	f010 fb93 	bl	8016ab4 <lv_disp_get_ver_res>
 800638e:	4632      	mov	r2, r6
 8006390:	2100      	movs	r1, #0
 8006392:	f340 005d 	sbfx	r0, r0, #1, #30
 8006396:	f010 fde3 	bl	8016f60 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800639a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800639e:	bf28      	it	cs
 80063a0:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 80063a4:	28c8      	cmp	r0, #200	; 0xc8
 80063a6:	bf38      	it	cc
 80063a8:	20c8      	movcc	r0, #200	; 0xc8
 80063aa:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff fe4f 	bl	8006050 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + y);
 80063b2:	4243      	negs	r3, r0
 80063b4:	1a30      	subs	r0, r6, r0
    a->current_value = start;
 80063b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->exec_cb = exec_cb;
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <lv_obj_scroll_by+0xf4>)
    a->end_value = end;
 80063bc:	900a      	str	r0, [sp, #40]	; 0x28
            lv_anim_start(&a);
 80063be:	a801      	add	r0, sp, #4
    a->exec_cb = exec_cb;
 80063c0:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <lv_obj_scroll_by+0xf0>)
 80063c4:	9307      	str	r3, [sp, #28]
 80063c6:	f010 fd6f 	bl	8016ea8 <lv_anim_start>
}
 80063ca:	b013      	add	sp, #76	; 0x4c
 80063cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(obj, scroll_y_anim);
 80063ce:	4909      	ldr	r1, [pc, #36]	; (80063f4 <lv_obj_scroll_by+0xf4>)
 80063d0:	f010 fd3e 	bl	8016e50 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 80063d4:	4905      	ldr	r1, [pc, #20]	; (80063ec <lv_obj_scroll_by+0xec>)
 80063d6:	4620      	mov	r0, r4
 80063d8:	f010 fd3a 	bl	8016e50 <lv_anim_del>
        scroll_by_raw(obj, x, y);
 80063dc:	4632      	mov	r2, r6
 80063de:	4629      	mov	r1, r5
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7ff fda6 	bl	8005f32 <scroll_by_raw>
 80063e6:	e7f0      	b.n	80063ca <lv_obj_scroll_by+0xca>
 80063e8:	08005f79 	.word	0x08005f79
 80063ec:	08006039 	.word	0x08006039
 80063f0:	08016f7d 	.word	0x08016f7d
 80063f4:	0800605d 	.word	0x0800605d

080063f8 <scroll_area_into_view>:
}

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value, lv_anim_enable_t anim_en)
{
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	b089      	sub	sp, #36	; 0x24
 80063fe:	4680      	mov	r8, r0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006400:	4608      	mov	r0, r1
{
 8006402:	4691      	mov	r9, r2
 8006404:	9101      	str	r1, [sp, #4]
 8006406:	9303      	str	r3, [sp, #12]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006408:	f001 fba8 	bl	8007b5c <lv_obj_get_parent>
 800640c:	4606      	mov	r6, r0
    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800640e:	f7ff fdf9 	bl	8006004 <lv_obj_get_scroll_dir>
 8006412:	9000      	str	r0, [sp, #0]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8006414:	4630      	mov	r0, r6
 8006416:	f7ff fe03 	bl	8006020 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800641a:	4682      	mov	sl, r0
 800641c:	2800      	cmp	r0, #0
 800641e:	f000 80ca 	beq.w	80065b6 <scroll_area_into_view+0x1be>
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	f103 0714 	add.w	r7, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006428:	f241 0210 	movw	r2, #4112	; 0x1010
 800642c:	2100      	movs	r1, #0
 800642e:	4630      	mov	r0, r6
 8006430:	f001 f84a 	bl	80074c8 <lv_obj_get_style_prop>
 8006434:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006436:	f241 0211 	movw	r2, #4113	; 0x1011
 800643a:	2100      	movs	r1, #0
 800643c:	4630      	mov	r0, r6
    else area_tmp = area;

    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN);
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800643e:	b2a4      	uxth	r4, r4
 8006440:	f001 f842 	bl	80074c8 <lv_obj_get_style_prop>
 8006444:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8006448:	8af1      	ldrh	r1, [r6, #22]
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800644a:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800644e:	1aa5      	subs	r5, r4, r2
 8006450:	fa12 f280 	uxtah	r2, r2, r0
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8006454:	88fb      	ldrh	r3, [r7, #6]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006456:	4630      	mov	r0, r6
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8006458:	440d      	add	r5, r1
 800645a:	8879      	ldrh	r1, [r7, #2]
 800645c:	b292      	uxth	r2, r2
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800645e:	9306      	str	r3, [sp, #24]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8006460:	1a6d      	subs	r5, r5, r1
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8006462:	8b71      	ldrh	r1, [r6, #26]
 8006464:	9207      	str	r2, [sp, #28]
 8006466:	9102      	str	r1, [sp, #8]
 8006468:	1a51      	subs	r1, r2, r1
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800646a:	b22d      	sxth	r5, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800646c:	4419      	add	r1, r3
 800646e:	b209      	sxth	r1, r1
 8006470:	9105      	str	r1, [sp, #20]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8006472:	f7fe fdb2 	bl	8004fda <lv_obj_get_height>
    if((top_diff > 0 && bottom_diff > 0)) y_scroll = 0;
 8006476:	2d00      	cmp	r5, #0
 8006478:	9a07      	ldr	r2, [sp, #28]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800647a:	9004      	str	r0, [sp, #16]
    if((top_diff > 0 && bottom_diff > 0)) y_scroll = 0;
 800647c:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8006480:	f340 809b 	ble.w	80065ba <scroll_area_into_view+0x1c2>
 8006484:	2900      	cmp	r1, #0
 8006486:	dc05      	bgt.n	8006494 <scroll_area_into_view+0x9c>
    else if(top_diff > 0) {
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff fde1 	bl	8006050 <lv_obj_get_scroll_y>
        if(st - y_scroll < 0) y_scroll = 0;
 800648e:	1b40      	subs	r0, r0, r5
 8006490:	2800      	cmp	r0, #0
 8006492:	da00      	bge.n	8006496 <scroll_area_into_view+0x9e>
 8006494:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8006496:	f1ba 0f02 	cmp.w	sl, #2
 800649a:	f000 809c 	beq.w	80065d6 <scroll_area_into_view+0x1de>
 800649e:	f1ba 0f03 	cmp.w	sl, #3
 80064a2:	f000 809e 	beq.w	80065e2 <scroll_area_into_view+0x1ea>
 80064a6:	f1ba 0f01 	cmp.w	sl, #1
 80064aa:	d104      	bne.n	80064b6 <scroll_area_into_view+0xbe>
    case LV_SCROLL_SNAP_START:
        snap_goal = parent->coords.y1 + ptop;
        act = area_tmp->y1 + y_scroll;
        y_scroll += snap_goal - act;
 80064ac:	8af5      	ldrh	r5, [r6, #22]
 80064ae:	4425      	add	r5, r4
 80064b0:	887c      	ldrh	r4, [r7, #2]
 80064b2:	1b2d      	subs	r5, r5, r4
        y_scroll += snap_goal - act;
        break;
    case LV_SCROLL_SNAP_CENTER:
        snap_goal = parent->coords.y1 + ptop + parent_h / 2;
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
        y_scroll += snap_goal - act;
 80064b4:	b22d      	sxth	r5, r5
        break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff fdac 	bl	8006014 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 80064bc:	4682      	mov	sl, r0
 80064be:	b110      	cbz	r0, 80064c6 <scroll_area_into_view+0xce>
 80064c0:	9b01      	ldr	r3, [sp, #4]
 80064c2:	f103 0814 	add.w	r8, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80064c6:	f241 0212 	movw	r2, #4114	; 0x1012
 80064ca:	2100      	movs	r1, #0
 80064cc:	4630      	mov	r0, r6
 80064ce:	f000 fffb 	bl	80074c8 <lv_obj_get_style_prop>
 80064d2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80064d4:	f241 0213 	movw	r2, #4115	; 0x1013
 80064d8:	2100      	movs	r1, #0
 80064da:	4630      	mov	r0, r6
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN);
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80064dc:	b2bf      	uxth	r7, r7
 80064de:	f000 fff3 	bl	80074c8 <lv_obj_get_style_prop>
 80064e2:	f8b9 2000 	ldrh.w	r2, [r9]
 80064e6:	8ab3      	ldrh	r3, [r6, #20]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 80064e8:	fa1f fb80 	uxth.w	fp, r0
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80064ec:	1abc      	subs	r4, r7, r2
 80064ee:	fa12 f080 	uxtah	r0, r2, r0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 80064f2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80064f6:	441c      	add	r4, r3
 80064f8:	f8b8 3000 	ldrh.w	r3, [r8]
 80064fc:	b280      	uxth	r0, r0
 80064fe:	1ae4      	subs	r4, r4, r3
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8006500:	8b33      	ldrh	r3, [r6, #24]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8006502:	b224      	sxth	r4, r4
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8006504:	1ac2      	subs	r2, r0, r3
    if((left_diff > 0 && right_diff > 0)) x_scroll = 0;
 8006506:	2c00      	cmp	r4, #0
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2- scroll_value->x);
 8006508:	440a      	add	r2, r1
 800650a:	b212      	sxth	r2, r2
    if((left_diff > 0 && right_diff > 0)) x_scroll = 0;
 800650c:	f340 8082 	ble.w	8006614 <scroll_area_into_view+0x21c>
 8006510:	2a00      	cmp	r2, #0
 8006512:	dc05      	bgt.n	8006520 <scroll_area_into_view+0x128>
    else if(left_diff > 0) {
        x_scroll = left_diff;
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8006514:	4630      	mov	r0, r6
 8006516:	f7ff fe03 	bl	8006120 <lv_obj_get_scroll_left>
        if(sl + x_scroll > 0) x_scroll = 0;
 800651a:	4420      	add	r0, r4
 800651c:	2800      	cmp	r0, #0
 800651e:	dd00      	ble.n	8006522 <scroll_area_into_view+0x12a>
 8006520:	2400      	movs	r4, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8006522:	4630      	mov	r0, r6
 8006524:	f7fe fd53 	bl	8004fce <lv_obj_get_width>
    switch(snap_x) {
 8006528:	f1ba 0f02 	cmp.w	sl, #2
 800652c:	d07e      	beq.n	800662c <scroll_area_into_view+0x234>
 800652e:	f1ba 0f03 	cmp.w	sl, #3
 8006532:	f000 8083 	beq.w	800663c <scroll_area_into_view+0x244>
 8006536:	f1ba 0f01 	cmp.w	sl, #1
 800653a:	d105      	bne.n	8006548 <scroll_area_into_view+0x150>
    case LV_SCROLL_SNAP_START:
        snap_goal = parent->coords.x1 + pleft;
        act = area_tmp->x1 + x_scroll;
        x_scroll += snap_goal - act;
 800653c:	8ab4      	ldrh	r4, [r6, #20]
 800653e:	443c      	add	r4, r7
 8006540:	f8b8 7000 	ldrh.w	r7, [r8]
 8006544:	1be4      	subs	r4, r4, r7
        break;
    case LV_SCROLL_SNAP_END:
        snap_goal = parent->coords.x2 - pright;
        act = area_tmp->x2 + x_scroll;
        x_scroll += snap_goal - act;
 8006546:	b224      	sxth	r4, r4
        x_scroll += snap_goal - act;
        break;
    }

    /*Remove any pending scroll animations.*/
    lv_anim_del(parent, scroll_x_anim);
 8006548:	4949      	ldr	r1, [pc, #292]	; (8006670 <scroll_area_into_view+0x278>)
 800654a:	4630      	mov	r0, r6
 800654c:	f010 fc80 	bl	8016e50 <lv_anim_del>
    lv_anim_del(parent, scroll_y_anim);
 8006550:	4948      	ldr	r1, [pc, #288]	; (8006674 <scroll_area_into_view+0x27c>)
 8006552:	4630      	mov	r0, r6
 8006554:	f010 fc7c 	bl	8016e50 <lv_anim_del>

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8006558:	9b00      	ldr	r3, [sp, #0]
 800655a:	07d8      	lsls	r0, r3, #31
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800655c:	9b00      	ldr	r3, [sp, #0]
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800655e:	4630      	mov	r0, r6
 8006560:	bf58      	it	pl
 8006562:	ea24 74e4 	bicpl.w	r4, r4, r4, asr #31
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8006566:	0799      	lsls	r1, r3, #30
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8006568:	9b00      	ldr	r3, [sp, #0]
 800656a:	bf58      	it	pl
 800656c:	ea04 74e4 	andpl.w	r4, r4, r4, asr #31
 8006570:	075a      	lsls	r2, r3, #29
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8006572:	9b00      	ldr	r3, [sp, #0]
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006574:	9a03      	ldr	r2, [sp, #12]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8006576:	4621      	mov	r1, r4
 8006578:	bf58      	it	pl
 800657a:	ea25 75e5 	bicpl.w	r5, r5, r5, asr #31
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800657e:	071b      	lsls	r3, r3, #28
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8006580:	f8b9 3000 	ldrh.w	r3, [r9]
 8006584:	bf58      	it	pl
 8006586:	ea05 75e5 	andpl.w	r5, r5, r5, asr #31
 800658a:	2a00      	cmp	r2, #0
 800658c:	bf14      	ite	ne
 800658e:	4622      	movne	r2, r4
 8006590:	2200      	moveq	r2, #0
 8006592:	4413      	add	r3, r2
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8006594:	bf14      	ite	ne
 8006596:	462a      	movne	r2, r5
 8006598:	2200      	moveq	r2, #0
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800659a:	f8a9 3000 	strh.w	r3, [r9]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800659e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80065a2:	4413      	add	r3, r2
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 80065a4:	462a      	mov	r2, r5
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 80065a6:	f8a9 3002 	strh.w	r3, [r9, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 80065aa:	9b03      	ldr	r3, [sp, #12]
}
 80065ac:	b009      	add	sp, #36	; 0x24
 80065ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 80065b2:	f7ff bea5 	b.w	8006300 <lv_obj_scroll_by>
    else area_tmp = area;
 80065b6:	4647      	mov	r7, r8
 80065b8:	e736      	b.n	8006428 <scroll_area_into_view+0x30>
    else if(bottom_diff > 0) {
 80065ba:	2900      	cmp	r1, #0
 80065bc:	f77f af6a 	ble.w	8006494 <scroll_area_into_view+0x9c>
        y_scroll = -bottom_diff;
 80065c0:	9902      	ldr	r1, [sp, #8]
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 80065c2:	4630      	mov	r0, r6
        y_scroll = -bottom_diff;
 80065c4:	1a8d      	subs	r5, r1, r2
 80065c6:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 80065c8:	f7ff fd56 	bl	8006078 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 80065cc:	b22d      	sxth	r5, r5
        if(sb + y_scroll < 0) y_scroll = 0;
 80065ce:	42e8      	cmn	r0, r5
 80065d0:	f57f af61 	bpl.w	8006496 <scroll_area_into_view+0x9e>
 80065d4:	e75e      	b.n	8006494 <scroll_area_into_view+0x9c>
        y_scroll += snap_goal - act;
 80065d6:	8b75      	ldrh	r5, [r6, #26]
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	eba5 050b 	sub.w	r5, r5, fp
 80065de:	1aed      	subs	r5, r5, r3
 80065e0:	e768      	b.n	80064b4 <scroll_area_into_view+0xbc>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 80065e2:	eb04 050b 	add.w	r5, r4, fp
 80065e6:	9b04      	ldr	r3, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80065e8:	887a      	ldrh	r2, [r7, #2]
 80065ea:	eba3 0b05 	sub.w	fp, r3, r5
 80065ee:	88fb      	ldrh	r3, [r7, #6]
        snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 80065f0:	f3cb 35c0 	ubfx	r5, fp, #15, #1
 80065f4:	3301      	adds	r3, #1
 80065f6:	fa05 fb8b 	sxtah	fp, r5, fp
        y_scroll += snap_goal - act;
 80065fa:	8af5      	ldrh	r5, [r6, #22]
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	4425      	add	r5, r4
 8006600:	1aad      	subs	r5, r5, r2
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 8006602:	f3c3 32c0 	ubfx	r2, r3, #15, #1
        y_scroll += snap_goal - act;
 8006606:	eb05 056b 	add.w	r5, r5, fp, asr #1
        act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800660a:	fa02 f383 	sxtah	r3, r2, r3
        y_scroll += snap_goal - act;
 800660e:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 8006612:	e74f      	b.n	80064b4 <scroll_area_into_view+0xbc>
    else if(right_diff > 0) {
 8006614:	2a00      	cmp	r2, #0
 8006616:	dd83      	ble.n	8006520 <scroll_area_into_view+0x128>
        x_scroll = -right_diff;
 8006618:	1a1c      	subs	r4, r3, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800661a:	4630      	mov	r0, r6
        x_scroll = -right_diff;
 800661c:	1a64      	subs	r4, r4, r1
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800661e:	f7ff fdeb 	bl	80061f8 <lv_obj_get_scroll_right>
        x_scroll = -right_diff;
 8006622:	b224      	sxth	r4, r4
        if(sr + x_scroll < 0) x_scroll = 0;
 8006624:	42e0      	cmn	r0, r4
 8006626:	f57f af7c 	bpl.w	8006522 <scroll_area_into_view+0x12a>
 800662a:	e779      	b.n	8006520 <scroll_area_into_view+0x128>
        x_scroll += snap_goal - act;
 800662c:	8b34      	ldrh	r4, [r6, #24]
 800662e:	eba4 040b 	sub.w	r4, r4, fp
 8006632:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006636:	eba4 040b 	sub.w	r4, r4, fp
 800663a:	e784      	b.n	8006546 <scroll_area_into_view+0x14e>
        x_scroll += snap_goal - act;
 800663c:	8ab3      	ldrh	r3, [r6, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800663e:	f8b8 2000 	ldrh.w	r2, [r8]
 8006642:	443b      	add	r3, r7
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8006644:	445f      	add	r7, fp
        x_scroll += snap_goal - act;
 8006646:	1a9c      	subs	r4, r3, r2
 8006648:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800664c:	1bc0      	subs	r0, r0, r7
 800664e:	3301      	adds	r3, #1
 8006650:	1a9b      	subs	r3, r3, r2
        act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8006652:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006656:	fa02 f383 	sxtah	r3, r2, r3
        x_scroll += snap_goal - act;
 800665a:	eba4 0363 	sub.w	r3, r4, r3, asr #1
        snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800665e:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8006662:	fa04 f080 	sxtah	r0, r4, r0
        x_scroll += snap_goal - act;
 8006666:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800666a:	b204      	sxth	r4, r0
        break;
 800666c:	e76c      	b.n	8006548 <scroll_area_into_view+0x150>
 800666e:	bf00      	nop
 8006670:	08006039 	.word	0x08006039
 8006674:	0800605d 	.word	0x0800605d

08006678 <lv_obj_scroll_to_x>:
{
 8006678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	4605      	mov	r5, r0
 800667e:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_x_anim);
 8006680:	491e      	ldr	r1, [pc, #120]	; (80066fc <lv_obj_scroll_to_x+0x84>)
{
 8006682:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_x_anim);
 8006684:	f010 fbe4 	bl	8016e50 <lv_anim_del>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006688:	f241 426a 	movw	r2, #5226	; 0x146a
 800668c:	2100      	movs	r1, #0
 800668e:	4628      	mov	r0, r5
 8006690:	f000 ff1a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006694:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8006696:	2801      	cmp	r0, #1
 8006698:	d01b      	beq.n	80066d2 <lv_obj_scroll_to_x+0x5a>
        if(x > 0) {
 800669a:	2f00      	cmp	r7, #0
 800669c:	dd2b      	ble.n	80066f6 <lv_obj_scroll_to_x+0x7e>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800669e:	4628      	mov	r0, r5
 80066a0:	f7ff fd3e 	bl	8006120 <lv_obj_get_scroll_left>
 80066a4:	4604      	mov	r4, r0
 80066a6:	4628      	mov	r0, r5
 80066a8:	f7ff fda6 	bl	80061f8 <lv_obj_get_scroll_right>
 80066ac:	4404      	add	r4, r0
 80066ae:	b224      	sxth	r4, r4
            if(x > scroll_max) x = scroll_max;
 80066b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80066b4:	42a7      	cmp	r7, r4
 80066b6:	bfa8      	it	ge
 80066b8:	4627      	movge	r7, r4
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7ff fcb6 	bl	800602c <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 80066c0:	1bc0      	subs	r0, r0, r7
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 80066c2:	4633      	mov	r3, r6
 80066c4:	2200      	movs	r2, #0
 80066c6:	b201      	sxth	r1, r0
 80066c8:	4628      	mov	r0, r5
}
 80066ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, diff, 0, anim_en);
 80066ce:	f7ff be17 	b.w	8006300 <lv_obj_scroll_by>
        if(x < 0) {
 80066d2:	2f00      	cmp	r7, #0
 80066d4:	da0f      	bge.n	80066f6 <lv_obj_scroll_to_x+0x7e>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 80066d6:	4628      	mov	r0, r5
 80066d8:	f7ff fd22 	bl	8006120 <lv_obj_get_scroll_left>
 80066dc:	4604      	mov	r4, r0
 80066de:	4628      	mov	r0, r5
 80066e0:	f7ff fd8a 	bl	80061f8 <lv_obj_get_scroll_right>
 80066e4:	1823      	adds	r3, r4, r0
 80066e6:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 80066e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x < -scroll_max) x = -scroll_max;
 80066ec:	425b      	negs	r3, r3
 80066ee:	429f      	cmp	r7, r3
 80066f0:	dae3      	bge.n	80066ba <lv_obj_scroll_to_x+0x42>
 80066f2:	b21f      	sxth	r7, r3
 80066f4:	e7e1      	b.n	80066ba <lv_obj_scroll_to_x+0x42>
 80066f6:	2700      	movs	r7, #0
 80066f8:	e7df      	b.n	80066ba <lv_obj_scroll_to_x+0x42>
 80066fa:	bf00      	nop
 80066fc:	08006039 	.word	0x08006039

08006700 <lv_obj_scroll_to_y>:
{
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	460f      	mov	r7, r1
    lv_anim_del(obj, scroll_y_anim);
 8006706:	4911      	ldr	r1, [pc, #68]	; (800674c <lv_obj_scroll_to_y+0x4c>)
{
 8006708:	4605      	mov	r5, r0
 800670a:	4616      	mov	r6, r2
    lv_anim_del(obj, scroll_y_anim);
 800670c:	f010 fba0 	bl	8016e50 <lv_anim_del>
    if(y > 0) {
 8006710:	2f00      	cmp	r7, #0
 8006712:	dd19      	ble.n	8006748 <lv_obj_scroll_to_y+0x48>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8006714:	4628      	mov	r0, r5
 8006716:	f7ff fc9b 	bl	8006050 <lv_obj_get_scroll_y>
 800671a:	4604      	mov	r4, r0
 800671c:	4628      	mov	r0, r5
 800671e:	f7ff fcab 	bl	8006078 <lv_obj_get_scroll_bottom>
 8006722:	4404      	add	r4, r0
 8006724:	b224      	sxth	r4, r4
        if(y > scroll_max) y = scroll_max;
 8006726:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800672a:	42bc      	cmp	r4, r7
 800672c:	bfa8      	it	ge
 800672e:	463c      	movge	r4, r7
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8006730:	4628      	mov	r0, r5
 8006732:	f7ff fc8d 	bl	8006050 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 8006736:	1b00      	subs	r0, r0, r4
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 8006738:	4633      	mov	r3, r6
 800673a:	2100      	movs	r1, #0
 800673c:	b202      	sxth	r2, r0
 800673e:	4628      	mov	r0, r5
}
 8006740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_scroll_by(obj, 0, diff, anim_en);
 8006744:	f7ff bddc 	b.w	8006300 <lv_obj_scroll_by>
 8006748:	2400      	movs	r4, #0
 800674a:	e7f1      	b.n	8006730 <lv_obj_scroll_to_y+0x30>
 800674c:	0800605d 	.word	0x0800605d

08006750 <lv_obj_scroll_to>:
{
 8006750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	4615      	mov	r5, r2
 8006756:	461a      	mov	r2, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	f7ff ff8d 	bl	8006678 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800675e:	9a01      	ldr	r2, [sp, #4]
 8006760:	4629      	mov	r1, r5
 8006762:	4620      	mov	r0, r4
}
 8006764:	b003      	add	sp, #12
 8006766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_scroll_to_y(obj, y, anim_en);
 800676a:	f7ff bfc9 	b.w	8006700 <lv_obj_scroll_to_y>

0800676e <lv_obj_scroll_to_view_recursive>:
{
 800676e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006770:	4604      	mov	r4, r0
 8006772:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 8006774:	f7ff f9e8 	bl	8005b48 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8006778:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 800677a:	4620      	mov	r0, r4
    lv_point_t p = {0, 0};
 800677c:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800677e:	f001 f9ed 	bl	8007b5c <lv_obj_get_parent>
    lv_obj_t * child = obj;
 8006782:	4621      	mov	r1, r4
    lv_obj_t * parent = lv_obj_get_parent(child);
 8006784:	4605      	mov	r5, r0
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8006786:	3414      	adds	r4, #20
    while(parent) {
 8006788:	b90d      	cbnz	r5, 800678e <lv_obj_scroll_to_view_recursive+0x20>
}
 800678a:	b002      	add	sp, #8
 800678c:	bd70      	pop	{r4, r5, r6, pc}
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800678e:	4633      	mov	r3, r6
 8006790:	aa01      	add	r2, sp, #4
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff fe30 	bl	80063f8 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8006798:	4628      	mov	r0, r5
 800679a:	f001 f9df 	bl	8007b5c <lv_obj_get_parent>
 800679e:	4629      	mov	r1, r5
 80067a0:	4605      	mov	r5, r0
 80067a2:	e7f1      	b.n	8006788 <lv_obj_scroll_to_view_recursive+0x1a>

080067a4 <lv_obj_get_scrollbar_area>:
{
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 80067a8:	f04f 37ff 	mov.w	r7, #4294967295
{
 80067ac:	b08f      	sub	sp, #60	; 0x3c
 80067ae:	460d      	mov	r5, r1
 80067b0:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 80067b2:	2200      	movs	r2, #0
{
 80067b4:	4604      	mov	r4, r0
    lv_area_set(hor_area, 0, 0, -1, -1);
 80067b6:	463b      	mov	r3, r7
 80067b8:	4628      	mov	r0, r5
 80067ba:	4611      	mov	r1, r2
 80067bc:	9700      	str	r7, [sp, #0]
 80067be:	f010 fc1b 	bl	8016ff8 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 80067c2:	2200      	movs	r2, #0
 80067c4:	463b      	mov	r3, r7
 80067c6:	4630      	mov	r0, r6
 80067c8:	4611      	mov	r1, r2
 80067ca:	9700      	str	r7, [sp, #0]
 80067cc:	f010 fc14 	bl	8016ff8 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 80067d0:	2110      	movs	r1, #16
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7fd fba5 	bl	8003f22 <lv_obj_has_flag>
 80067d8:	9002      	str	r0, [sp, #8]
 80067da:	2800      	cmp	r0, #0
 80067dc:	d047      	beq.n	800686e <lv_obj_get_scrollbar_area+0xca>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 80067de:	4620      	mov	r0, r4
 80067e0:	f7ff fc08 	bl	8005ff4 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 80067e4:	4680      	mov	r8, r0
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d041      	beq.n	800686e <lv_obj_get_scrollbar_area+0xca>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80067ea:	2000      	movs	r0, #0
 80067ec:	f010 f9ca 	bl	8016b84 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 80067f0:	f1b8 0f02 	cmp.w	r8, #2
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80067f4:	4682      	mov	sl, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 80067f6:	d037      	beq.n	8006868 <lv_obj_get_scrollbar_area+0xc4>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff fc29 	bl	8006050 <lv_obj_get_scroll_y>
 80067fe:	4607      	mov	r7, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8006800:	4620      	mov	r0, r4
 8006802:	f7ff fc39 	bl	8006078 <lv_obj_get_scroll_bottom>
 8006806:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006808:	4620      	mov	r0, r4
 800680a:	f7ff fc89 	bl	8006120 <lv_obj_get_scroll_left>
 800680e:	900c      	str	r0, [sp, #48]	; 0x30
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006810:	4620      	mov	r0, r4
 8006812:	f7ff fcf1 	bl	80061f8 <lv_obj_get_scroll_right>
 8006816:	900a      	str	r0, [sp, #40]	; 0x28
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8006818:	4620      	mov	r0, r4
 800681a:	f7ff fbf3 	bl	8006004 <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 800681e:	f010 090c 	ands.w	r9, r0, #12
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8006822:	4683      	mov	fp, r0
    if((dir & LV_DIR_VER) &&
 8006824:	d00e      	beq.n	8006844 <lv_obj_get_scrollbar_area+0xa0>
 8006826:	f1b8 0f01 	cmp.w	r8, #1
 800682a:	d030      	beq.n	800688e <lv_obj_get_scrollbar_area+0xea>
            ((sm == LV_SCROLLBAR_MODE_ON) ||
 800682c:	f1b8 0f03 	cmp.w	r8, #3
 8006830:	d120      	bne.n	8006874 <lv_obj_get_scrollbar_area+0xd0>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006832:	2f00      	cmp	r7, #0
 8006834:	dc2b      	bgt.n	800688e <lv_obj_get_scrollbar_area+0xea>
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfd4      	ite	le
 800683c:	f04f 0900 	movle.w	r9, #0
 8006840:	f04f 0901 	movgt.w	r9, #1
    if((dir & LV_DIR_HOR) &&
 8006844:	f01b 0f03 	tst.w	fp, #3
 8006848:	d127      	bne.n	800689a <lv_obj_get_scrollbar_area+0xf6>
    if(!hor_draw && !ver_draw) return;
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d00e      	beq.n	800686e <lv_obj_get_scrollbar_area+0xca>
 8006850:	2300      	movs	r3, #0
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	e02e      	b.n	80068b4 <lv_obj_get_scrollbar_area+0x110>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8006856:	4650      	mov	r0, sl
 8006858:	f7fb ff00 	bl	800265c <lv_indev_get_scroll_obj>
 800685c:	4284      	cmp	r4, r0
 800685e:	d0cb      	beq.n	80067f8 <lv_obj_get_scrollbar_area+0x54>
            indev = lv_indev_get_next(indev);
 8006860:	4650      	mov	r0, sl
 8006862:	f010 f98f 	bl	8016b84 <lv_indev_get_next>
 8006866:	4682      	mov	sl, r0
        while(indev) {
 8006868:	f1ba 0f00 	cmp.w	sl, #0
 800686c:	d1f3      	bne.n	8006856 <lv_obj_get_scrollbar_area+0xb2>
}
 800686e:	b00f      	add	sp, #60	; 0x3c
 8006870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8006874:	f1b8 0f02 	cmp.w	r8, #2
 8006878:	d10c      	bne.n	8006894 <lv_obj_get_scrollbar_area+0xf0>
                    (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800687a:	4650      	mov	r0, sl
 800687c:	f7fb fee0 	bl	8002640 <lv_indev_get_scroll_dir>
 8006880:	f1a0 030c 	sub.w	r3, r0, #12
 8006884:	f1d3 0900 	rsbs	r9, r3, #0
 8006888:	eb49 0903 	adc.w	r9, r9, r3
 800688c:	e7da      	b.n	8006844 <lv_obj_get_scrollbar_area+0xa0>
        ver_draw = true;
 800688e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006892:	e7d7      	b.n	8006844 <lv_obj_get_scrollbar_area+0xa0>
    bool ver_draw = false;
 8006894:	f04f 0900 	mov.w	r9, #0
 8006898:	e7d4      	b.n	8006844 <lv_obj_get_scrollbar_area+0xa0>
    if((dir & LV_DIR_HOR) &&
 800689a:	f1b8 0f01 	cmp.w	r8, #1
 800689e:	d009      	beq.n	80068b4 <lv_obj_get_scrollbar_area+0x110>
            ((sm == LV_SCROLLBAR_MODE_ON) ||
 80068a0:	f1b8 0f03 	cmp.w	r8, #3
 80068a4:	f040 80c1 	bne.w	8006a2a <lv_obj_get_scrollbar_area+0x286>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80068a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dc02      	bgt.n	80068b4 <lv_obj_get_scrollbar_area+0x110>
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	ddca      	ble.n	800684a <lv_obj_get_scrollbar_area+0xa6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80068b4:	f241 0210 	movw	r2, #4112	; 0x1010
 80068b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fe03 	bl	80074c8 <lv_obj_get_style_prop>
 80068c2:	9008      	str	r0, [sp, #32]
    return (lv_coord_t)v.num;
 80068c4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80068c8:	f241 0213 	movw	r2, #4115	; 0x1013
 80068cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80068d0:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 80068d2:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80068d4:	f000 fdf8 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80068d8:	f241 0201 	movw	r2, #4097	; 0x1001
 80068dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80068e0:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80068e2:	4620      	mov	r0, r4
 80068e4:	f000 fdf0 	bl	80074c8 <lv_obj_get_style_prop>
 80068e8:	9006      	str	r0, [sp, #24]
    lv_coord_t obj_h = lv_obj_get_height(obj);
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7fe fb75 	bl	8004fda <lv_obj_get_height>
 80068f0:	4680      	mov	r8, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 80068f2:	4620      	mov	r0, r4
 80068f4:	f7fe fb6b 	bl	8004fce <lv_obj_get_width>
 80068f8:	9004      	str	r0, [sp, #16]
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 80068fa:	f1b9 0f00 	cmp.w	r9, #0
 80068fe:	f000 809f 	beq.w	8006a40 <lv_obj_get_scrollbar_area+0x29c>
 8006902:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006906:	4413      	add	r3, r2
 8006908:	b21b      	sxth	r3, r3
 800690a:	9305      	str	r3, [sp, #20]
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 800690c:	9b02      	ldr	r3, [sp, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8099 	beq.w	8006a46 <lv_obj_get_scrollbar_area+0x2a2>
 8006914:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006918:	4413      	add	r3, r2
 800691a:	fa0f fa83 	sxth.w	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800691e:	2221      	movs	r2, #33	; 0x21
 8006920:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fdcf 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800692a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800692c:	2801      	cmp	r0, #1
 800692e:	f240 808d 	bls.w	8006a4c <lv_obj_get_scrollbar_area+0x2a8>
    if(ver_draw && content_h) {
 8006932:	f1b9 0f00 	cmp.w	r9, #0
 8006936:	f040 8094 	bne.w	8006a62 <lv_obj_get_scrollbar_area+0x2be>
    if(hor_draw && content_w) {
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d096      	beq.n	800686e <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_w = obj_w + sl + sr;
 8006940:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006946:	9302      	str	r3, [sp, #8]
 8006948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800694a:	4413      	add	r3, r2
 800694c:	fa1f f983 	uxth.w	r9, r3
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	fa19 f383 	uxtah	r3, r9, r3
 8006956:	b219      	sxth	r1, r3
    if(hor_draw && content_w) {
 8006958:	2900      	cmp	r1, #0
 800695a:	d088      	beq.n	800686e <lv_obj_get_scrollbar_area+0xca>
        hor_area->y2 = obj->coords.y2 - side_space;
 800695c:	8b62      	ldrh	r2, [r4, #26]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800695e:	2000      	movs	r0, #0
        hor_area->y2 = obj->coords.y2 - side_space;
 8006960:	f8bd a01c 	ldrh.w	sl, [sp, #28]
        hor_area->x1 = obj->coords.x1;
 8006964:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006968:	eba2 020a 	sub.w	r2, r2, sl
        hor_area->y1 = hor_area->y2 - tickness;
 800696c:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        hor_area->x1 = obj->coords.x1;
 8006970:	802b      	strh	r3, [r5, #0]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006972:	b292      	uxth	r2, r2
        hor_area->x2 = obj->coords.x2;
 8006974:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
        hor_area->y2 = obj->coords.y2 - side_space;
 8006978:	80ea      	strh	r2, [r5, #6]
        hor_area->y1 = hor_area->y2 - tickness;
 800697a:	eba2 0208 	sub.w	r2, r2, r8
        hor_area->x2 = obj->coords.x2;
 800697e:	80ab      	strh	r3, [r5, #4]
        hor_area->y1 = hor_area->y2 - tickness;
 8006980:	806a      	strh	r2, [r5, #2]
        lv_coord_t sb_w = ((obj_w - end_space * 2 - ver_reg_space) * obj_w) / content_w;
 8006982:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8006986:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800698a:	9a05      	ldr	r2, [sp, #20]
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	9a04      	ldr	r2, [sp, #16]
 8006990:	4353      	muls	r3, r2
 8006992:	fb93 f3f1 	sdiv	r3, r3, r1
 8006996:	b21f      	sxth	r7, r3
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006998:	f010 f89c 	bl	8016ad4 <lv_disp_get_dpi>
 800699c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069a0:	0040      	lsls	r0, r0, #1
 80069a2:	28ef      	cmp	r0, #239	; 0xef
 80069a4:	f340 817a 	ble.w	8006c9c <lv_obj_get_scrollbar_area+0x4f8>
 80069a8:	2000      	movs	r0, #0
 80069aa:	f010 f893 	bl	8016ad4 <lv_disp_get_dpi>
 80069ae:	220a      	movs	r2, #10
 80069b0:	2150      	movs	r1, #80	; 0x50
 80069b2:	fb00 1002 	mla	r0, r0, r2, r1
 80069b6:	22a0      	movs	r2, #160	; 0xa0
 80069b8:	fb90 f0f2 	sdiv	r0, r0, r2
 80069bc:	4287      	cmp	r7, r0
 80069be:	dc13      	bgt.n	80069e8 <lv_obj_get_scrollbar_area+0x244>
 80069c0:	2000      	movs	r0, #0
 80069c2:	f010 f887 	bl	8016ad4 <lv_disp_get_dpi>
 80069c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069ca:	0040      	lsls	r0, r0, #1
 80069cc:	28ef      	cmp	r0, #239	; 0xef
 80069ce:	f340 8167 	ble.w	8006ca0 <lv_obj_get_scrollbar_area+0x4fc>
 80069d2:	2000      	movs	r0, #0
 80069d4:	f010 f87e 	bl	8016ad4 <lv_disp_get_dpi>
 80069d8:	220a      	movs	r2, #10
 80069da:	2150      	movs	r1, #80	; 0x50
 80069dc:	23a0      	movs	r3, #160	; 0xa0
 80069de:	fb00 1002 	mla	r0, r0, r2, r1
 80069e2:	fb90 f3f3 	sdiv	r3, r0, r3
 80069e6:	b21f      	sxth	r7, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 80069e8:	fa0f f989 	sxth.w	r9, r9
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 80069ec:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80069f0:	f8bd b014 	ldrh.w	fp, [sp, #20]
        if(scroll_w <= 0) {
 80069f4:	f1b9 0f00 	cmp.w	r9, #0
 80069f8:	8b62      	ldrh	r2, [r4, #26]
 80069fa:	f300 8153 	bgt.w	8006ca4 <lv_obj_get_scrollbar_area+0x500>
            hor_area->x1 = obj->coords.x1 + end_space;
 80069fe:	8aa3      	ldrh	r3, [r4, #20]
            hor_area->y2 = obj->coords.y2 - side_space;
 8006a00:	eba2 0a0a 	sub.w	sl, r2, sl
            hor_area->y1 = hor_area->y2 - tickness + 1;
 8006a04:	f1c8 0801 	rsb	r8, r8, #1
            hor_area->x1 = obj->coords.x1 + end_space;
 8006a08:	4433      	add	r3, r6
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 8006a0a:	43f6      	mvns	r6, r6
            hor_area->y2 = obj->coords.y2 - side_space;
 8006a0c:	fa1f fa8a 	uxth.w	sl, sl
            hor_area->x1 = obj->coords.x1 + end_space;
 8006a10:	802b      	strh	r3, [r5, #0]
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 8006a12:	8b23      	ldrh	r3, [r4, #24]
            hor_area->y2 = obj->coords.y2 - side_space;
 8006a14:	f8a5 a006 	strh.w	sl, [r5, #6]
            hor_area->y1 = hor_area->y2 - tickness + 1;
 8006a18:	44c2      	add	sl, r8
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 8006a1a:	441e      	add	r6, r3
            hor_area->y1 = hor_area->y2 - tickness + 1;
 8006a1c:	f8a5 a002 	strh.w	sl, [r5, #2]
            hor_area->x2 = obj->coords.x2 - end_space - ver_reg_space - 1;
 8006a20:	eba6 0b0b 	sub.w	fp, r6, fp
 8006a24:	f8a5 b004 	strh.w	fp, [r5, #4]
 8006a28:	e721      	b.n	800686e <lv_obj_get_scrollbar_area+0xca>
                    (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8006a2a:	f1b8 0f02 	cmp.w	r8, #2
 8006a2e:	f47f af0c 	bne.w	800684a <lv_obj_get_scrollbar_area+0xa6>
                    (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8006a32:	4650      	mov	r0, sl
 8006a34:	f7fb fe04 	bl	8002640 <lv_indev_get_scroll_dir>
 8006a38:	2803      	cmp	r0, #3
 8006a3a:	f47f af06 	bne.w	800684a <lv_obj_get_scrollbar_area+0xa6>
 8006a3e:	e739      	b.n	80068b4 <lv_obj_get_scrollbar_area+0x110>
    lv_coord_t ver_reg_space = ver_draw ? tickness + side_space : 0;
 8006a40:	f8cd 9014 	str.w	r9, [sp, #20]
 8006a44:	e762      	b.n	800690c <lv_obj_get_scrollbar_area+0x168>
    lv_coord_t hor_req_space = hor_draw ? tickness + side_space : 0;
 8006a46:	f8dd a008 	ldr.w	sl, [sp, #8]
 8006a4a:	e768      	b.n	800691e <lv_obj_get_scrollbar_area+0x17a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8006a4c:	2231      	movs	r2, #49	; 0x31
 8006a4e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fd38 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006a58:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8006a5a:	2801      	cmp	r0, #1
 8006a5c:	f63f af69 	bhi.w	8006932 <lv_obj_get_scrollbar_area+0x18e>
 8006a60:	e705      	b.n	800686e <lv_obj_get_scrollbar_area+0xca>
    lv_coord_t content_h = obj_h + st + sb;
 8006a62:	fa1f f388 	uxth.w	r3, r8
 8006a66:	930d      	str	r3, [sp, #52]	; 0x34
 8006a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6a:	441f      	add	r7, r3
 8006a6c:	b2bf      	uxth	r7, r7
 8006a6e:	fa17 f388 	uxtah	r3, r7, r8
 8006a72:	b219      	sxth	r1, r3
    if(ver_draw && content_h) {
 8006a74:	2900      	cmp	r1, #0
 8006a76:	f43f af60 	beq.w	800693a <lv_obj_get_scrollbar_area+0x196>
       ver_area->y1 = obj->coords.y1;
 8006a7a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006a7e:	2000      	movs	r0, #0
       ver_area->x2 = obj->coords.x2 - side_space;
 8006a80:	8b22      	ldrh	r2, [r4, #24]
       ver_area->y1 = obj->coords.y1;
 8006a82:	8073      	strh	r3, [r6, #2]
       ver_area->y2 = obj->coords.y2;
 8006a84:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
       ver_area->x2 = obj->coords.x2 - side_space;
 8006a88:	f8bd b01c 	ldrh.w	fp, [sp, #28]
       ver_area->y2 = obj->coords.y2;
 8006a8c:	80f3      	strh	r3, [r6, #6]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006a8e:	9b03      	ldr	r3, [sp, #12]
       ver_area->x2 = obj->coords.x2 - side_space;
 8006a90:	eba2 020b 	sub.w	r2, r2, fp
       ver_area->x1 =ver_area->x2 - tickness;
 8006a94:	f8bd 9018 	ldrh.w	r9, [sp, #24]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006a98:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
       ver_area->x2 = obj->coords.x2 - side_space;
 8006a9c:	b292      	uxth	r2, r2
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006a9e:	eba3 030a 	sub.w	r3, r3, sl
       ver_area->x2 = obj->coords.x2 - side_space;
 8006aa2:	80b2      	strh	r2, [r6, #4]
       ver_area->x1 =ver_area->x2 - tickness;
 8006aa4:	eba2 0209 	sub.w	r2, r2, r9
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006aa8:	fb08 f303 	mul.w	r3, r8, r3
       ver_area->x1 =ver_area->x2 - tickness;
 8006aac:	8032      	strh	r2, [r6, #0]
        lv_coord_t sb_h = ((obj_h - end_space * 2 - hor_req_space) * obj_h) / content_h;
 8006aae:	fb93 f3f1 	sdiv	r3, r3, r1
 8006ab2:	b21b      	sxth	r3, r3
 8006ab4:	930b      	str	r3, [sp, #44]	; 0x2c
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006ab6:	f010 f80d 	bl	8016ad4 <lv_disp_get_dpi>
 8006aba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac0:	0040      	lsls	r0, r0, #1
 8006ac2:	28ef      	cmp	r0, #239	; 0xef
 8006ac4:	dd43      	ble.n	8006b4e <lv_obj_get_scrollbar_area+0x3aa>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	f010 f804 	bl	8016ad4 <lv_disp_get_dpi>
 8006acc:	220a      	movs	r2, #10
 8006ace:	2150      	movs	r1, #80	; 0x50
 8006ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad2:	fb00 1002 	mla	r0, r0, r2, r1
 8006ad6:	22a0      	movs	r2, #160	; 0xa0
 8006ad8:	fb90 f0f2 	sdiv	r0, r0, r2
 8006adc:	4283      	cmp	r3, r0
 8006ade:	dc12      	bgt.n	8006b06 <lv_obj_get_scrollbar_area+0x362>
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f00f fff7 	bl	8016ad4 <lv_disp_get_dpi>
 8006ae6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006aea:	0040      	lsls	r0, r0, #1
 8006aec:	28ef      	cmp	r0, #239	; 0xef
 8006aee:	dd30      	ble.n	8006b52 <lv_obj_get_scrollbar_area+0x3ae>
 8006af0:	2000      	movs	r0, #0
 8006af2:	f00f ffef 	bl	8016ad4 <lv_disp_get_dpi>
 8006af6:	220a      	movs	r2, #10
 8006af8:	2150      	movs	r1, #80	; 0x50
 8006afa:	23a0      	movs	r3, #160	; 0xa0
 8006afc:	fb00 1002 	mla	r0, r0, r2, r1
 8006b00:	fb90 f3f3 	sdiv	r3, r0, r3
 8006b04:	b21b      	sxth	r3, r3
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b06:	fa1f f28a 	uxth.w	r2, sl
 8006b0a:	9908      	ldr	r1, [sp, #32]
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8006b0c:	b23f      	sxth	r7, r7
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b0e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8006b12:	920b      	str	r2, [sp, #44]	; 0x2c
        if(scroll_h <= 0) {
 8006b14:	8ae2      	ldrh	r2, [r4, #22]
 8006b16:	2f00      	cmp	r7, #0
 8006b18:	fa12 f281 	uxtah	r2, r2, r1
 8006b1c:	b291      	uxth	r1, r2
 8006b1e:	dc1a      	bgt.n	8006b56 <lv_obj_get_scrollbar_area+0x3b2>
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 8006b20:	8b63      	ldrh	r3, [r4, #26]
 8006b22:	ea6f 0808 	mvn.w	r8, r8
           ver_area->x1 =ver_area->x2 - tickness + 1;
 8006b26:	f1c9 0901 	rsb	r9, r9, #1
           ver_area->y1 = obj->coords.y1 + end_space;
 8006b2a:	8071      	strh	r1, [r6, #2]
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 8006b2c:	4498      	add	r8, r3
 8006b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b30:	eba8 0a03 	sub.w	sl, r8, r3
           ver_area->x2 = obj->coords.x2 - side_space;
 8006b34:	8b23      	ldrh	r3, [r4, #24]
 8006b36:	eba3 0b0b 	sub.w	fp, r3, fp
           ver_area->y2 = obj->coords.y2 - end_space - hor_req_space - 1;
 8006b3a:	f8a6 a006 	strh.w	sl, [r6, #6]
           ver_area->x2 = obj->coords.x2 - side_space;
 8006b3e:	fa1f fb8b 	uxth.w	fp, fp
 8006b42:	f8a6 b004 	strh.w	fp, [r6, #4]
           ver_area->x1 =ver_area->x2 - tickness + 1;
 8006b46:	44cb      	add	fp, r9
 8006b48:	f8a6 b000 	strh.w	fp, [r6]
 8006b4c:	e6f5      	b.n	800693a <lv_obj_get_scrollbar_area+0x196>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8006b4e:	2001      	movs	r0, #1
 8006b50:	e7c4      	b.n	8006adc <lv_obj_get_scrollbar_area+0x338>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7d7      	b.n	8006b06 <lv_obj_get_scrollbar_area+0x362>
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006b5c:	eba2 0248 	sub.w	r2, r2, r8, lsl #1
 8006b60:	1a12      	subs	r2, r2, r0
 8006b62:	1ad2      	subs	r2, r2, r3
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006b64:	3b01      	subs	r3, #1
        rem = (obj_h - end_space * 2 - hor_req_space) - sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006b66:	b290      	uxth	r0, r2
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006b68:	fa11 f282 	uxtah	r2, r1, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8006b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b6e:	fb10 f001 	smulbb	r0, r0, r1
 8006b72:	fb90 f7f7 	sdiv	r7, r0, r7
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006b76:	1bd7      	subs	r7, r2, r7
 8006b78:	b23a      	sxth	r2, r7
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006b7a:	fa13 f787 	uxtah	r7, r3, r7
           ver_area->x2 = obj->coords.x2 - side_space;
 8006b7e:	8b23      	ldrh	r3, [r4, #24]
           ver_area->y1 = obj->coords.y1 + sb_y + end_space;
 8006b80:	8072      	strh	r2, [r6, #2]
           ver_area->x2 = obj->coords.x2 - side_space;
 8006b82:	eba3 0b0b 	sub.w	fp, r3, fp
           ver_area->y2 =ver_area->y1 + sb_h - 1;
 8006b86:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
           ver_area->x2 = obj->coords.x2 - side_space;
 8006b8e:	fa1f fb8b 	uxth.w	fp, fp
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006b92:	18fb      	adds	r3, r7, r3
           ver_area->x2 = obj->coords.x2 - side_space;
 8006b94:	f8a6 b004 	strh.w	fp, [r6, #4]
           ver_area->x1 =ver_area->x2 - tickness;
 8006b98:	ebab 0b09 	sub.w	fp, fp, r9
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006b9c:	429a      	cmp	r2, r3
           ver_area->x1 =ver_area->x2 - tickness;
 8006b9e:	f8a6 b000 	strh.w	fp, [r6]
            if(ver_area->y1 < obj->coords.y1 + end_space) {
 8006ba2:	da2f      	bge.n	8006c04 <lv_obj_get_scrollbar_area+0x460>
               ver_area->y1 = obj->coords.y1 + end_space;
 8006ba4:	4447      	add	r7, r8
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006ba6:	2000      	movs	r0, #0
               ver_area->y1 = obj->coords.y1 + end_space;
 8006ba8:	b23f      	sxth	r7, r7
 8006baa:	8077      	strh	r7, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006bac:	f00f ff92 	bl	8016ad4 <lv_disp_get_dpi>
 8006bb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006bb4:	0040      	lsls	r0, r0, #1
 8006bb6:	28ef      	cmp	r0, #239	; 0xef
 8006bb8:	dd68      	ble.n	8006c8c <lv_obj_get_scrollbar_area+0x4e8>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	f00f ff8a 	bl	8016ad4 <lv_disp_get_dpi>
 8006bc0:	230a      	movs	r3, #10
 8006bc2:	2250      	movs	r2, #80	; 0x50
 8006bc4:	fb00 2003 	mla	r0, r0, r3, r2
 8006bc8:	23a0      	movs	r3, #160	; 0xa0
 8006bca:	fb90 f0f3 	sdiv	r0, r0, r3
 8006bce:	4407      	add	r7, r0
 8006bd0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8006bd4:	429f      	cmp	r7, r3
 8006bd6:	dd15      	ble.n	8006c04 <lv_obj_get_scrollbar_area+0x460>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	8877      	ldrh	r7, [r6, #2]
 8006bdc:	f00f ff7a 	bl	8016ad4 <lv_disp_get_dpi>
 8006be0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006be4:	0040      	lsls	r0, r0, #1
 8006be6:	28ef      	cmp	r0, #239	; 0xef
 8006be8:	dd52      	ble.n	8006c90 <lv_obj_get_scrollbar_area+0x4ec>
 8006bea:	2000      	movs	r0, #0
 8006bec:	f00f ff72 	bl	8016ad4 <lv_disp_get_dpi>
 8006bf0:	230a      	movs	r3, #10
 8006bf2:	2250      	movs	r2, #80	; 0x50
 8006bf4:	fb00 2003 	mla	r0, r0, r3, r2
 8006bf8:	23a0      	movs	r3, #160	; 0xa0
 8006bfa:	fb90 f0f3 	sdiv	r0, r0, r3
 8006bfe:	b280      	uxth	r0, r0
 8006c00:	4407      	add	r7, r0
 8006c02:	80f7      	strh	r7, [r6, #6]
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - end_space) {
 8006c04:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8006c08:	9803      	ldr	r0, [sp, #12]
 8006c0a:	eba2 030a 	sub.w	r3, r2, sl
 8006c0e:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8006c12:	1a1b      	subs	r3, r3, r0
 8006c14:	4299      	cmp	r1, r3
 8006c16:	f77f ae90 	ble.w	800693a <lv_obj_get_scrollbar_area+0x196>
               ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 8006c1a:	eba2 0808 	sub.w	r8, r2, r8
 8006c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006c20:	2000      	movs	r0, #0
               ver_area->y2 = obj->coords.y2 - hor_req_space - end_space;
 8006c22:	eba8 0a03 	sub.w	sl, r8, r3
 8006c26:	fa0f fa8a 	sxth.w	sl, sl
 8006c2a:	f8a6 a006 	strh.w	sl, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006c2e:	f00f ff51 	bl	8016ad4 <lv_disp_get_dpi>
 8006c32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c36:	0040      	lsls	r0, r0, #1
 8006c38:	28ef      	cmp	r0, #239	; 0xef
 8006c3a:	dd2b      	ble.n	8006c94 <lv_obj_get_scrollbar_area+0x4f0>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	f00f ff49 	bl	8016ad4 <lv_disp_get_dpi>
 8006c42:	230a      	movs	r3, #10
 8006c44:	2250      	movs	r2, #80	; 0x50
 8006c46:	fb00 2003 	mla	r0, r0, r3, r2
 8006c4a:	23a0      	movs	r3, #160	; 0xa0
 8006c4c:	fb90 f0f3 	sdiv	r0, r0, r3
 8006c50:	ebaa 0a00 	sub.w	sl, sl, r0
 8006c54:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006c58:	459a      	cmp	sl, r3
 8006c5a:	f6bf ae6e 	bge.w	800693a <lv_obj_get_scrollbar_area+0x196>
 8006c5e:	2000      	movs	r0, #0
 8006c60:	88f7      	ldrh	r7, [r6, #6]
 8006c62:	f00f ff37 	bl	8016ad4 <lv_disp_get_dpi>
 8006c66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c6a:	0040      	lsls	r0, r0, #1
 8006c6c:	28ef      	cmp	r0, #239	; 0xef
 8006c6e:	dd13      	ble.n	8006c98 <lv_obj_get_scrollbar_area+0x4f4>
 8006c70:	2000      	movs	r0, #0
 8006c72:	f00f ff2f 	bl	8016ad4 <lv_disp_get_dpi>
 8006c76:	230a      	movs	r3, #10
 8006c78:	2250      	movs	r2, #80	; 0x50
 8006c7a:	fb00 2003 	mla	r0, r0, r3, r2
 8006c7e:	23a0      	movs	r3, #160	; 0xa0
 8006c80:	fb90 f0f3 	sdiv	r0, r0, r3
 8006c84:	b280      	uxth	r0, r0
 8006c86:	1a3f      	subs	r7, r7, r0
 8006c88:	8077      	strh	r7, [r6, #2]
 8006c8a:	e656      	b.n	800693a <lv_obj_get_scrollbar_area+0x196>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE >ver_area->y2)ver_area->y2 =ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	e79e      	b.n	8006bce <lv_obj_get_scrollbar_area+0x42a>
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7b5      	b.n	8006c00 <lv_obj_get_scrollbar_area+0x45c>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE <ver_area->y1)ver_area->y1 =ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8006c94:	2001      	movs	r0, #1
 8006c96:	e7db      	b.n	8006c50 <lv_obj_get_scrollbar_area+0x4ac>
 8006c98:	2001      	movs	r0, #1
 8006c9a:	e7f4      	b.n	8006c86 <lv_obj_get_scrollbar_area+0x4e2>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	e68d      	b.n	80069bc <lv_obj_get_scrollbar_area+0x218>
 8006ca0:	2701      	movs	r7, #1
 8006ca2:	e6a1      	b.n	80069e8 <lv_obj_get_scrollbar_area+0x244>
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006ca4:	9902      	ldr	r1, [sp, #8]
 8006ca6:	b2bb      	uxth	r3, r7
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006ca8:	8aa0      	ldrh	r0, [r4, #20]
            hor_area->y2 = obj->coords.y2 - side_space;
 8006caa:	eba2 0a0a 	sub.w	sl, r2, sl
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006cae:	eba1 0746 	sub.w	r7, r1, r6, lsl #1
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006cb2:	4430      	add	r0, r6
            hor_area->y2 = obj->coords.y2 - side_space;
 8006cb4:	fa1f fa8a 	uxth.w	sl, sl
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006cb8:	eba7 070b 	sub.w	r7, r7, fp
            hor_area->y2 = obj->coords.y2 - side_space;
 8006cbc:	f8a5 a006 	strh.w	sl, [r5, #6]
            hor_area->y1 = hor_area->y2 - tickness;
 8006cc0:	ebaa 0a08 	sub.w	sl, sl, r8
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006cc4:	1aff      	subs	r7, r7, r3
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006cc6:	3b01      	subs	r3, #1
            hor_area->y1 = hor_area->y2 - tickness;
 8006cc8:	f8a5 a002 	strh.w	sl, [r5, #2]
        rem = (obj_w - end_space * 2 - ver_reg_space) - sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
 8006ccc:	b2b9      	uxth	r1, r7
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006cce:	fa10 f787 	uxtah	r7, r0, r7
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 8006cd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006cd4:	fb11 f100 	smulbb	r1, r1, r0
 8006cd8:	fb91 f1f9 	sdiv	r1, r1, r9
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006cdc:	eba7 0901 	sub.w	r9, r7, r1
 8006ce0:	fa0f f189 	sxth.w	r1, r9
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006ce4:	fa13 f989 	uxtah	r9, r3, r9
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 8006ce8:	9b03      	ldr	r3, [sp, #12]
            hor_area->x1 = obj->coords.x1 + sb_x + end_space;
 8006cea:	8029      	strh	r1, [r5, #0]
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 8006cec:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
            hor_area->x2 = hor_area->x1 + sb_w - 1;
 8006cf0:	f8a5 9004 	strh.w	r9, [r5, #4]
            if(hor_area->x1 < obj->coords.x1 + end_space) {
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	da2f      	bge.n	8006d5a <lv_obj_get_scrollbar_area+0x5b6>
                hor_area->x1 = obj->coords.x1 + end_space;
 8006cfa:	4437      	add	r7, r6
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006cfc:	2000      	movs	r0, #0
                hor_area->x1 = obj->coords.x1 + end_space;
 8006cfe:	b23f      	sxth	r7, r7
 8006d00:	802f      	strh	r7, [r5, #0]
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006d02:	f00f fee7 	bl	8016ad4 <lv_disp_get_dpi>
 8006d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d0a:	0040      	lsls	r0, r0, #1
 8006d0c:	28ef      	cmp	r0, #239	; 0xef
 8006d0e:	dd66      	ble.n	8006dde <lv_obj_get_scrollbar_area+0x63a>
 8006d10:	2000      	movs	r0, #0
 8006d12:	f00f fedf 	bl	8016ad4 <lv_disp_get_dpi>
 8006d16:	230a      	movs	r3, #10
 8006d18:	2250      	movs	r2, #80	; 0x50
 8006d1a:	fb00 2003 	mla	r0, r0, r3, r2
 8006d1e:	23a0      	movs	r3, #160	; 0xa0
 8006d20:	fb90 f0f3 	sdiv	r0, r0, r3
 8006d24:	4407      	add	r7, r0
 8006d26:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006d2a:	429f      	cmp	r7, r3
 8006d2c:	dd15      	ble.n	8006d5a <lv_obj_get_scrollbar_area+0x5b6>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	882f      	ldrh	r7, [r5, #0]
 8006d32:	f00f fecf 	bl	8016ad4 <lv_disp_get_dpi>
 8006d36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d3a:	0040      	lsls	r0, r0, #1
 8006d3c:	28ef      	cmp	r0, #239	; 0xef
 8006d3e:	dd50      	ble.n	8006de2 <lv_obj_get_scrollbar_area+0x63e>
 8006d40:	2000      	movs	r0, #0
 8006d42:	f00f fec7 	bl	8016ad4 <lv_disp_get_dpi>
 8006d46:	230a      	movs	r3, #10
 8006d48:	2250      	movs	r2, #80	; 0x50
 8006d4a:	fb00 2003 	mla	r0, r0, r3, r2
 8006d4e:	23a0      	movs	r3, #160	; 0xa0
 8006d50:	fb90 f0f3 	sdiv	r0, r0, r3
 8006d54:	b280      	uxth	r0, r0
 8006d56:	4438      	add	r0, r7
 8006d58:	80a8      	strh	r0, [r5, #4]
            if(hor_area->x2 > obj->coords.x2 - ver_reg_space - end_space) {
 8006d5a:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 8006d5e:	9b05      	ldr	r3, [sp, #20]
 8006d60:	9903      	ldr	r1, [sp, #12]
 8006d62:	1ac3      	subs	r3, r0, r3
 8006d64:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8006d68:	1a5b      	subs	r3, r3, r1
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	f77f ad7f 	ble.w	800686e <lv_obj_get_scrollbar_area+0xca>
                hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 8006d70:	1b86      	subs	r6, r0, r6
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006d72:	2000      	movs	r0, #0
                hor_area->x2 = obj->coords.x2 - ver_reg_space - end_space;
 8006d74:	eba6 0b0b 	sub.w	fp, r6, fp
 8006d78:	fa0f fb8b 	sxth.w	fp, fp
 8006d7c:	f8a5 b004 	strh.w	fp, [r5, #4]
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006d80:	f00f fea8 	bl	8016ad4 <lv_disp_get_dpi>
 8006d84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d88:	0040      	lsls	r0, r0, #1
 8006d8a:	28ef      	cmp	r0, #239	; 0xef
 8006d8c:	dd2b      	ble.n	8006de6 <lv_obj_get_scrollbar_area+0x642>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f00f fea0 	bl	8016ad4 <lv_disp_get_dpi>
 8006d94:	230a      	movs	r3, #10
 8006d96:	2250      	movs	r2, #80	; 0x50
 8006d98:	fb00 2003 	mla	r0, r0, r3, r2
 8006d9c:	23a0      	movs	r3, #160	; 0xa0
 8006d9e:	fb90 f0f3 	sdiv	r0, r0, r3
 8006da2:	ebab 0b00 	sub.w	fp, fp, r0
 8006da6:	f9b5 3000 	ldrsh.w	r3, [r5]
 8006daa:	459b      	cmp	fp, r3
 8006dac:	f6bf ad5f 	bge.w	800686e <lv_obj_get_scrollbar_area+0xca>
 8006db0:	2000      	movs	r0, #0
 8006db2:	88ac      	ldrh	r4, [r5, #4]
 8006db4:	f00f fe8e 	bl	8016ad4 <lv_disp_get_dpi>
 8006db8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006dbc:	0040      	lsls	r0, r0, #1
 8006dbe:	28ef      	cmp	r0, #239	; 0xef
 8006dc0:	dd13      	ble.n	8006dea <lv_obj_get_scrollbar_area+0x646>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f00f fe86 	bl	8016ad4 <lv_disp_get_dpi>
 8006dc8:	230a      	movs	r3, #10
 8006dca:	2250      	movs	r2, #80	; 0x50
 8006dcc:	fb00 2003 	mla	r0, r0, r3, r2
 8006dd0:	23a0      	movs	r3, #160	; 0xa0
 8006dd2:	fb90 f0f3 	sdiv	r0, r0, r3
 8006dd6:	b280      	uxth	r0, r0
 8006dd8:	1a20      	subs	r0, r4, r0
 8006dda:	8028      	strh	r0, [r5, #0]
 8006ddc:	e547      	b.n	800686e <lv_obj_get_scrollbar_area+0xca>
                if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8006dde:	2001      	movs	r0, #1
 8006de0:	e7a0      	b.n	8006d24 <lv_obj_get_scrollbar_area+0x580>
 8006de2:	2001      	movs	r0, #1
 8006de4:	e7b7      	b.n	8006d56 <lv_obj_get_scrollbar_area+0x5b2>
                if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8006de6:	2001      	movs	r0, #1
 8006de8:	e7db      	b.n	8006da2 <lv_obj_get_scrollbar_area+0x5fe>
 8006dea:	2001      	movs	r0, #1
 8006dec:	e7f4      	b.n	8006dd8 <lv_obj_get_scrollbar_area+0x634>

08006dee <lv_obj_scrollbar_invalidate>:
{
 8006dee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006df0:	aa02      	add	r2, sp, #8
 8006df2:	4669      	mov	r1, sp
{
 8006df4:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006df6:	f7ff fcd5 	bl	80067a4 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006dfa:	4668      	mov	r0, sp
 8006dfc:	f010 f90d 	bl	801701a <lv_area_get_size>
 8006e00:	b918      	cbnz	r0, 8006e0a <lv_obj_scrollbar_invalidate+0x1c>
 8006e02:	a802      	add	r0, sp, #8
 8006e04:	f010 f909 	bl	801701a <lv_area_get_size>
 8006e08:	b178      	cbz	r0, 8006e2a <lv_obj_scrollbar_invalidate+0x3c>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8006e0a:	4668      	mov	r0, sp
 8006e0c:	f010 f905 	bl	801701a <lv_area_get_size>
 8006e10:	b118      	cbz	r0, 8006e1a <lv_obj_scrollbar_invalidate+0x2c>
 8006e12:	4669      	mov	r1, sp
 8006e14:	4620      	mov	r0, r4
 8006e16:	f7fe fa15 	bl	8005244 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8006e1a:	a802      	add	r0, sp, #8
 8006e1c:	f010 f8fd 	bl	801701a <lv_area_get_size>
 8006e20:	b118      	cbz	r0, 8006e2a <lv_obj_scrollbar_invalidate+0x3c>
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7fe fa0d 	bl	8005244 <lv_obj_invalidate_area>
}
 8006e2a:	b004      	add	sp, #16
 8006e2c:	bd10      	pop	{r4, pc}
	...

08006e30 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 8006e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	4607      	mov	r7, r0
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006e36:	4829      	ldr	r0, [pc, #164]	; (8006edc <trans_del+0xac>)
{
 8006e38:	4690      	mov	r8, r2
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	4699      	mov	r9, r3
    while(tr != NULL) {
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006e3e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8006edc <trans_del+0xac>
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006e42:	f010 fc67 	bl	8017714 <_lv_ll_get_tail>
    bool removed = false;
 8006e46:	2200      	movs	r2, #0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8006e48:	4604      	mov	r4, r0
    while(tr != NULL) {
 8006e4a:	b91c      	cbnz	r4, 8006e54 <trans_del+0x24>

        }
        tr = tr_prev;
    }
    return removed;
}
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	b003      	add	sp, #12
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(tr == tr_limit) break;
 8006e54:	454c      	cmp	r4, r9
 8006e56:	d0f9      	beq.n	8006e4c <trans_del+0x1c>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4658      	mov	r0, fp
 8006e5c:	9201      	str	r2, [sp, #4]
 8006e5e:	f010 fc60 	bl	8017722 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006e62:	6823      	ldr	r3, [r4, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006e64:	4682      	mov	sl, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8006e66:	9a01      	ldr	r2, [sp, #4]
 8006e68:	42bb      	cmp	r3, r7
 8006e6a:	d135      	bne.n	8006ed8 <trans_del+0xa8>
 8006e6c:	68a3      	ldr	r3, [r4, #8]
 8006e6e:	42ab      	cmp	r3, r5
 8006e70:	d002      	beq.n	8006e78 <trans_del+0x48>
 8006e72:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006e76:	d12f      	bne.n	8006ed8 <trans_del+0xa8>
 8006e78:	88a3      	ldrh	r3, [r4, #4]
 8006e7a:	4543      	cmp	r3, r8
 8006e7c:	d003      	beq.n	8006e86 <trans_del+0x56>
 8006e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e82:	4598      	cmp	r8, r3
 8006e84:	d128      	bne.n	8006ed8 <trans_del+0xa8>
 8006e86:	2600      	movs	r6, #0
 8006e88:	e021      	b.n	8006ece <trans_del+0x9e>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8006e90:	eb00 03c6 	add.w	r3, r0, r6, lsl #3
 8006e94:	79d9      	ldrb	r1, [r3, #7]
 8006e96:	0789      	lsls	r1, r1, #30
 8006e98:	d518      	bpl.n	8006ecc <trans_del+0x9c>
 8006e9a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 8006e9e:	d004      	beq.n	8006eaa <trans_del+0x7a>
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8006ea6:	42ab      	cmp	r3, r5
 8006ea8:	d110      	bne.n	8006ecc <trans_del+0x9c>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 8006eaa:	f850 000c 	ldr.w	r0, [r0, ip]
 8006eae:	88a1      	ldrh	r1, [r4, #4]
 8006eb0:	f011 fb66 	bl	8018580 <lv_style_remove_prop>
                    lv_anim_del(tr, NULL);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f00f ffca 	bl	8016e50 <lv_anim_del>
                    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	f010 fbea 	bl	8017698 <_lv_ll_remove>
                    lv_mem_free(tr);
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f010 fd25 	bl	8017914 <lv_mem_free>
                    removed = true;
 8006eca:	2201      	movs	r2, #1
            for(i = 0; i < obj->style_cnt; i++) {
 8006ecc:	3601      	adds	r6, #1
 8006ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ed0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006ed4:	42b3      	cmp	r3, r6
 8006ed6:	d8d8      	bhi.n	8006e8a <trans_del+0x5a>
 8006ed8:	4654      	mov	r4, sl
 8006eda:	e7b6      	b.n	8006e4a <trans_del+0x1a>
 8006edc:	2000ae04 	.word	0x2000ae04

08006ee0 <refresh_children_style>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4606      	mov	r6, r0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006ee4:	2500      	movs	r5, #0
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	f000 fe4a 	bl	8007b80 <lv_obj_get_child_cnt>
 8006eec:	42a8      	cmp	r0, r5
 8006eee:	d800      	bhi.n	8006ef2 <refresh_children_style+0x12>
}
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_t * child = lv_obj_get_child(obj, i);
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 fe34 	bl	8007b62 <lv_obj_get_child>
 8006efa:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
 8006efc:	f7fe f9bc 	bl	8005278 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8006f00:	2200      	movs	r2, #0
 8006f02:	2124      	movs	r1, #36	; 0x24
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7fb f88f 	bl	8002028 <lv_event_send>
        lv_obj_invalidate(child);
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7fe f9b4 	bl	8005278 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8006f10:	4620      	mov	r0, r4
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006f12:	3501      	adds	r5, #1
        refresh_children_style(child); /*Check children too*/
 8006f14:	f7ff ffe4 	bl	8006ee0 <refresh_children_style>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8006f18:	e7e5      	b.n	8006ee6 <refresh_children_style+0x6>

08006f1a <get_trans_style>:
{
 8006f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8006f1c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
{
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	68c0      	ldr	r0, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 8006f24:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d803      	bhi.n	8006f36 <get_trans_style+0x1c>
    if(i != obj->style_cnt) return &obj->styles[i];
 8006f2e:	d00e      	beq.n	8006f4e <get_trans_style+0x34>
 8006f30:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 8006f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8006f36:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006f3a:	79ce      	ldrb	r6, [r1, #7]
 8006f3c:	07b6      	lsls	r6, r6, #30
 8006f3e:	d504      	bpl.n	8006f4a <get_trans_style+0x30>
 8006f40:	6849      	ldr	r1, [r1, #4]
 8006f42:	f3c1 0117 	ubfx	r1, r1, #0, #24
 8006f46:	42a9      	cmp	r1, r5
 8006f48:	d0f2      	beq.n	8006f30 <get_trans_style+0x16>
    for(i = 0; i < obj->style_cnt; i++) {
 8006f4a:	3201      	adds	r2, #1
 8006f4c:	e7ed      	b.n	8006f2a <get_trans_style+0x10>
    obj->style_cnt++;
 8006f4e:	3301      	adds	r3, #1
 8006f50:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8006f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f56:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f5a:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 8006f5c:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f5e:	f010 fe71 	bl	8017c44 <lv_mem_realloc>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006f62:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f64:	4602      	mov	r2, r0
        obj->styles[i] = obj->styles[i - 1];
 8006f66:	f1a0 0708 	sub.w	r7, r0, #8
 8006f6a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8006f6e:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006f70:	3b01      	subs	r3, #1
 8006f72:	d116      	bne.n	8006fa2 <get_trans_style+0x88>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8006f74:	4610      	mov	r0, r2
 8006f76:	2108      	movs	r1, #8
 8006f78:	f010 fecc 	bl	8017d14 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8006f7c:	2008      	movs	r0, #8
 8006f7e:	68e6      	ldr	r6, [r4, #12]
 8006f80:	f010 fe4a 	bl	8017c18 <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 8006f84:	68e3      	ldr	r3, [r4, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8006f86:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f011 fada 	bl	8018542 <lv_style_init>
    obj->styles[0].is_trans = 1;
 8006f8e:	68e0      	ldr	r0, [r4, #12]
 8006f90:	79c3      	ldrb	r3, [r0, #7]
 8006f92:	f043 0302 	orr.w	r3, r3, #2
 8006f96:	71c3      	strb	r3, [r0, #7]
    obj->styles[0].selector = selector;
 8006f98:	6843      	ldr	r3, [r0, #4]
 8006f9a:	f365 0317 	bfi	r3, r5, #0, #24
 8006f9e:	6043      	str	r3, [r0, #4]
    return &obj->styles[0];
 8006fa0:	e7c8      	b.n	8006f34 <get_trans_style+0x1a>
        obj->styles[i] = obj->styles[i - 1];
 8006fa2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8006fa6:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006faa:	c903      	ldmia	r1, {r0, r1}
 8006fac:	e886 0003 	stmia.w	r6, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8006fb0:	e7de      	b.n	8006f70 <get_trans_style+0x56>
	...

08006fb4 <_lv_obj_style_init>:
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 8006fb4:	2114      	movs	r1, #20
 8006fb6:	4801      	ldr	r0, [pc, #4]	; (8006fbc <_lv_obj_style_init+0x8>)
 8006fb8:	f010 bb2f 	b.w	801761a <_lv_ll_init>
 8006fbc:	2000ae04 	.word	0x2000ae04

08006fc0 <lv_obj_refresh_style>:
    if(!style_refr) return;
 8006fc0:	4b29      	ldr	r3, [pc, #164]	; (8007068 <lv_obj_refresh_style+0xa8>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
{
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4615      	mov	r5, r2
    if(!style_refr) return;
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d049      	beq.n	8007064 <lv_obj_refresh_style+0xa4>
    return selector & 0xFF0000;
 8006fd0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
    lv_obj_invalidate(obj);
 8006fd4:	f7fe f950 	bl	8005278 <lv_obj_invalidate>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_LAYOUT_REFR))) {
 8006fd8:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8006fdc:	d000      	beq.n	8006fe0 <lv_obj_refresh_style+0x20>
 8006fde:	b9ec      	cbnz	r4, 800701c <lv_obj_refresh_style+0x5c>
 8006fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	d001      	beq.n	8006fec <lv_obj_refresh_style+0x2c>
 8006fe8:	04e8      	lsls	r0, r5, #19
 8006fea:	d51f      	bpl.n	800702c <lv_obj_refresh_style+0x6c>
        lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8006fec:	2200      	movs	r2, #0
 8006fee:	2124      	movs	r1, #36	; 0x24
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7fb f819 	bl	8002028 <lv_event_send>
        lv_obj_mark_layout_as_dirty(obj);
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7fd ff53 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8006ffc:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8007000:	d10a      	bne.n	8007018 <lv_obj_refresh_style+0x58>
 8007002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007006:	429d      	cmp	r5, r3
 8007008:	d114      	bne.n	8007034 <lv_obj_refresh_style+0x74>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800700a:	4630      	mov	r0, r6
 800700c:	f000 fda6 	bl	8007b5c <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8007010:	b120      	cbz	r0, 800701c <lv_obj_refresh_style+0x5c>
 8007012:	f7fd ff46 	bl	8004ea2 <lv_obj_mark_layout_as_dirty>
 8007016:	e001      	b.n	800701c <lv_obj_refresh_style+0x5c>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 8007018:	2c00      	cmp	r4, #0
 800701a:	d0f2      	beq.n	8007002 <lv_obj_refresh_style+0x42>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 800701c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007020:	429d      	cmp	r5, r3
 8007022:	d109      	bne.n	8007038 <lv_obj_refresh_style+0x78>
        lv_obj_refresh_ext_draw_size(obj);
 8007024:	4630      	mov	r0, r6
 8007026:	f7fd fe3c 	bl	8004ca2 <lv_obj_refresh_ext_draw_size>
 800702a:	e007      	b.n	800703c <lv_obj_refresh_style+0x7c>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_PARENT_LAYOUT_REFR))) {
 800702c:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 8007030:	d000      	beq.n	8007034 <lv_obj_refresh_style+0x74>
 8007032:	b90c      	cbnz	r4, 8007038 <lv_obj_refresh_style+0x78>
 8007034:	04a9      	lsls	r1, r5, #18
 8007036:	d4e8      	bmi.n	800700a <lv_obj_refresh_style+0x4a>
    if(prop == LV_STYLE_PROP_ANY || (prop & LV_STYLE_PROP_EXT_DRAW)) {
 8007038:	052a      	lsls	r2, r5, #20
 800703a:	d4f3      	bmi.n	8007024 <lv_obj_refresh_style+0x64>
    lv_obj_invalidate(obj);
 800703c:	4630      	mov	r0, r6
 800703e:	f7fe f91b 	bl	8005278 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY ||
 8007042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007046:	429d      	cmp	r5, r3
 8007048:	d004      	beq.n	8007054 <lv_obj_refresh_style+0x94>
 800704a:	056b      	lsls	r3, r5, #21
 800704c:	d50a      	bpl.n	8007064 <lv_obj_refresh_style+0xa4>
      ((prop & LV_STYLE_PROP_INHERIT) && ((prop & LV_STYLE_PROP_EXT_DRAW) || (prop & LV_STYLE_PROP_LAYOUT_REFR))))
 800704e:	f415 5fc0 	tst.w	r5, #6144	; 0x1800
 8007052:	d007      	beq.n	8007064 <lv_obj_refresh_style+0xa4>
        if(part != LV_PART_SCROLLBAR) {
 8007054:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8007058:	d004      	beq.n	8007064 <lv_obj_refresh_style+0xa4>
            refresh_children_style(obj);
 800705a:	4630      	mov	r0, r6
}
 800705c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            refresh_children_style(obj);
 8007060:	f7ff bf3e 	b.w	8006ee0 <refresh_children_style>
}
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	bf00      	nop
 8007068:	20000004 	.word	0x20000004

0800706c <lv_obj_add_style>:
{
 800706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007070:	4615      	mov	r5, r2
 8007072:	4604      	mov	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8007074:	2300      	movs	r3, #0
{
 8007076:	460e      	mov	r6, r1
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8007078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800707c:	4629      	mov	r1, r5
 800707e:	f7ff fed7 	bl	8006e30 <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 8007082:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007084:	68e0      	ldr	r0, [r4, #12]
 8007086:	2700      	movs	r7, #0
 8007088:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800708c:	42bb      	cmp	r3, r7
 800708e:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8007092:	d829      	bhi.n	80070e8 <lv_obj_add_style+0x7c>
    obj->style_cnt++;
 8007094:	3301      	adds	r3, #1
 8007096:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8007098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800709c:	f363 02c8 	bfi	r2, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80070a0:	00d9      	lsls	r1, r3, #3
    obj->style_cnt++;
 80070a2:	8462      	strh	r2, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80070a4:	f010 fdce 	bl	8017c44 <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80070a8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80070aa:	4602      	mov	r2, r0
        obj->styles[j] = obj->styles[j - 1];
 80070ac:	f1a0 0e08 	sub.w	lr, r0, #8
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80070b0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80070b4:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80070b6:	3b01      	subs	r3, #1
 80070b8:	429f      	cmp	r7, r3
 80070ba:	d31c      	bcc.n	80070f6 <lv_obj_add_style+0x8a>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 80070bc:	eb02 0008 	add.w	r0, r2, r8
 80070c0:	2108      	movs	r1, #8
 80070c2:	f010 fe27 	bl	8017d14 <lv_memset_00>
    obj->styles[i].style = style;
 80070c6:	68e2      	ldr	r2, [r4, #12]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 80070c8:	4629      	mov	r1, r5
 80070ca:	4620      	mov	r0, r4
    obj->styles[i].style = style;
 80070cc:	eb02 0308 	add.w	r3, r2, r8
 80070d0:	f842 6008 	str.w	r6, [r2, r8]
    obj->styles[i].selector = selector;
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	f365 0217 	bfi	r2, r5, #0, #24
 80070da:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 80070dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 80070e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 80070e4:	f7ff bf6c 	b.w	8006fc0 <lv_obj_refresh_style>
        if(obj->styles[i].is_trans) continue;
 80070e8:	eb00 0208 	add.w	r2, r0, r8
        if(obj->styles[i].is_local) continue;
 80070ec:	79d2      	ldrb	r2, [r2, #7]
 80070ee:	0792      	lsls	r2, r2, #30
 80070f0:	d0d0      	beq.n	8007094 <lv_obj_add_style+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
 80070f2:	3701      	adds	r7, #1
 80070f4:	e7ca      	b.n	800708c <lv_obj_add_style+0x20>
        obj->styles[j] = obj->styles[j - 1];
 80070f6:	eb0e 01c3 	add.w	r1, lr, r3, lsl #3
 80070fa:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
    for(j = obj->style_cnt - 1; j > i ; j--) {
 80070fe:	3b01      	subs	r3, #1
        obj->styles[j] = obj->styles[j - 1];
 8007100:	c903      	ldmia	r1, {r0, r1}
 8007102:	e88c 0003 	stmia.w	ip, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8007106:	e7d7      	b.n	80070b8 <lv_obj_add_style+0x4c>

08007108 <report_style_change_core>:
    for(i = 0; i < obj->style_cnt; i++) {
 8007108:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 800710a:	2300      	movs	r3, #0
{
 800710c:	b570      	push	{r4, r5, r6, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800710e:	f3c2 02c5 	ubfx	r2, r2, #3, #6
{
 8007112:	4605      	mov	r5, r0
 8007114:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8007116:	429a      	cmp	r2, r3
 8007118:	d90c      	bls.n	8007134 <report_style_change_core+0x2c>
        if(style == NULL || obj->styles[i].style == style) {
 800711a:	b125      	cbz	r5, 8007126 <report_style_change_core+0x1e>
 800711c:	68e1      	ldr	r1, [r4, #12]
 800711e:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8007122:	42a9      	cmp	r1, r5
 8007124:	d10d      	bne.n	8007142 <report_style_change_core+0x3a>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8007126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800712a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800712e:	4620      	mov	r0, r4
 8007130:	f7ff ff46 	bl	8006fc0 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 8007134:	2600      	movs	r6, #0
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007136:	4620      	mov	r0, r4
 8007138:	f000 fd22 	bl	8007b80 <lv_obj_get_child_cnt>
 800713c:	42b0      	cmp	r0, r6
 800713e:	d802      	bhi.n	8007146 <report_style_change_core+0x3e>
}
 8007140:	bd70      	pop	{r4, r5, r6, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8007142:	3301      	adds	r3, #1
 8007144:	e7e7      	b.n	8007116 <report_style_change_core+0xe>
        report_style_change_core(style, lv_obj_get_child(obj, i));
 8007146:	4631      	mov	r1, r6
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fd0a 	bl	8007b62 <lv_obj_get_child>
 800714e:	4601      	mov	r1, r0
 8007150:	4628      	mov	r0, r5
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007152:	3601      	adds	r6, #1
        report_style_change_core(style, lv_obj_get_child(obj, i));
 8007154:	f7ff ffd8 	bl	8007108 <report_style_change_core>
    for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007158:	e7ed      	b.n	8007136 <report_style_change_core+0x2e>
	...

0800715c <lv_obj_report_style_change>:
    if(!style_refr) return;
 800715c:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <lv_obj_report_style_change+0x34>)
 800715e:	781b      	ldrb	r3, [r3, #0]
{
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4606      	mov	r6, r0
    if(!style_refr) return;
 8007164:	b123      	cbz	r3, 8007170 <lv_obj_report_style_change+0x14>
    lv_disp_t * d = lv_disp_get_next(NULL);
 8007166:	2000      	movs	r0, #0
        d = lv_disp_get_next(d);
 8007168:	f00f fcc8 	bl	8016afc <lv_disp_get_next>
 800716c:	4604      	mov	r4, r0
    while(d) {
 800716e:	b960      	cbnz	r0, 800718a <lv_obj_report_style_change+0x2e>
}
 8007170:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 8007172:	68e3      	ldr	r3, [r4, #12]
 8007174:	4630      	mov	r0, r6
 8007176:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        for(i = 0; i < d->screen_cnt; i++) {
 800717a:	3501      	adds	r5, #1
            report_style_change_core(style, d->screens[i]);
 800717c:	f7ff ffc4 	bl	8007108 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 8007180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007182:	42ab      	cmp	r3, r5
 8007184:	d8f5      	bhi.n	8007172 <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 8007186:	4620      	mov	r0, r4
 8007188:	e7ee      	b.n	8007168 <lv_obj_report_style_change+0xc>
        for(i = 0; i < d->screen_cnt; i++) {
 800718a:	2500      	movs	r5, #0
 800718c:	e7f8      	b.n	8007180 <lv_obj_report_style_change+0x24>
 800718e:	bf00      	nop
 8007190:	20000004 	.word	0x20000004

08007194 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 8007194:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    trans_t * tr = _tr;
    lv_obj_t * obj = tr->obj;

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 8007198:	2300      	movs	r3, #0
{
 800719a:	4604      	mov	r4, r0
    lv_obj_t * obj = tr->obj;
 800719c:	6806      	ldr	r6, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 800719e:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 80071a0:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d942      	bls.n	800722e <trans_anim_cb+0x9a>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 80071a8:	68f0      	ldr	r0, [r6, #12]
 80071aa:	00df      	lsls	r7, r3, #3
 80071ac:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80071b0:	79c2      	ldrb	r2, [r0, #7]
 80071b2:	0792      	lsls	r2, r2, #30
 80071b4:	d505      	bpl.n	80071c2 <trans_anim_cb+0x2e>
 80071b6:	6842      	ldr	r2, [r0, #4]
 80071b8:	68a5      	ldr	r5, [r4, #8]
 80071ba:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80071be:	42aa      	cmp	r2, r5
 80071c0:	d001      	beq.n	80071c6 <trans_anim_cb+0x32>
    for(i = 0; i < obj->style_cnt; i++) {
 80071c2:	3301      	adds	r3, #1
 80071c4:	e7eb      	b.n	800719e <trans_anim_cb+0xa>

        lv_style_value_t value_final;
        switch (tr->prop) {
 80071c6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80071ca:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
 80071ce:	d04d      	beq.n	800726c <trans_anim_cb+0xd8>
 80071d0:	d830      	bhi.n	8007234 <trans_anim_cb+0xa0>
 80071d2:	f1bc 0f20 	cmp.w	ip, #32
 80071d6:	d054      	beq.n	8007282 <trans_anim_cb+0xee>
 80071d8:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 80071dc:	b29a      	uxth	r2, r3
 80071de:	2a17      	cmp	r2, #23
 80071e0:	d82f      	bhi.n	8007242 <trans_anim_cb+0xae>
 80071e2:	2301      	movs	r3, #1
 80071e4:	4093      	lsls	r3, r2
 80071e6:	4a49      	ldr	r2, [pc, #292]	; (800730c <trans_anim_cb+0x178>)
 80071e8:	4213      	tst	r3, r2
 80071ea:	d14a      	bne.n	8007282 <trans_anim_cb+0xee>
 80071ec:	f013 0f18 	tst.w	r3, #24
 80071f0:	d027      	beq.n	8007242 <trans_anim_cb+0xae>
                if(v < 255) value_final.num = tr->start_value.num;
                else value_final.num = tr->end_value.num;
                break;
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 80071f2:	29fe      	cmp	r1, #254	; 0xfe
 80071f4:	dc38      	bgt.n	8007268 <trans_anim_cb+0xd4>
 80071f6:	68e5      	ldr	r5, [r4, #12]
                break;
        }

        lv_style_value_t old_value;
        bool refr = true;
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 80071f8:	aa01      	add	r2, sp, #4
 80071fa:	4661      	mov	r1, ip
 80071fc:	6800      	ldr	r0, [r0, #0]
 80071fe:	f011 fa20 	bl	8018642 <lv_style_get_prop>
 8007202:	2800      	cmp	r0, #0
 8007204:	d07e      	beq.n	8007304 <trans_anim_cb+0x170>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full && value_final.num == old_value.num) {
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	ebb3 0805 	subs.w	r8, r3, r5
 800720c:	bf18      	it	ne
 800720e:	f04f 0801 	movne.w	r8, #1
                refr = false;
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8007212:	68f3      	ldr	r3, [r6, #12]
 8007214:	462a      	mov	r2, r5
 8007216:	88a1      	ldrh	r1, [r4, #4]
 8007218:	59d8      	ldr	r0, [r3, r7]
 800721a:	f011 faba 	bl	8018792 <lv_style_set_prop>
        if (refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800721e:	f1b8 0f00 	cmp.w	r8, #0
 8007222:	d004      	beq.n	800722e <trans_anim_cb+0x9a>
 8007224:	88a2      	ldrh	r2, [r4, #4]
 8007226:	68a1      	ldr	r1, [r4, #8]
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	f7ff fec9 	bl	8006fc0 <lv_obj_refresh_style>
        break;

    }

}
 800722e:	b002      	add	sp, #8
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (tr->prop) {
 8007234:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 8007238:	d0db      	beq.n	80071f2 <trans_anim_cb+0x5e>
 800723a:	d80d      	bhi.n	8007258 <trans_anim_cb+0xc4>
 800723c:	f1bc 0f67 	cmp.w	ip, #103	; 0x67
 8007240:	d0d7      	beq.n	80071f2 <trans_anim_cb+0x5e>
                if(v == 0) value_final.num = tr->start_value.num;
 8007242:	2900      	cmp	r1, #0
 8007244:	d0d7      	beq.n	80071f6 <trans_anim_cb+0x62>
                else if(v == 255) value_final.num = tr->end_value.num;
 8007246:	29ff      	cmp	r1, #255	; 0xff
 8007248:	d00e      	beq.n	8007268 <trans_anim_cb+0xd4>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800724a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 800724e:	1a9d      	subs	r5, r3, r2
 8007250:	434d      	muls	r5, r1
 8007252:	eb02 2525 	add.w	r5, r2, r5, asr #8
 8007256:	e7cf      	b.n	80071f8 <trans_anim_cb+0x64>
        switch (tr->prop) {
 8007258:	f240 4357 	movw	r3, #1111	; 0x457
 800725c:	459c      	cmp	ip, r3
 800725e:	d010      	beq.n	8007282 <trans_anim_cb+0xee>
 8007260:	f241 4359 	movw	r3, #5209	; 0x1459
 8007264:	459c      	cmp	ip, r3
 8007266:	e7eb      	b.n	8007240 <trans_anim_cb+0xac>
                else value_final.ptr = tr->end_value.ptr;
 8007268:	6925      	ldr	r5, [r4, #16]
 800726a:	e7c5      	b.n	80071f8 <trans_anim_cb+0x64>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800726c:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8007270:	b90d      	cbnz	r5, 8007276 <trans_anim_cb+0xe2>
 8007272:	461d      	mov	r5, r3
 8007274:	e7c0      	b.n	80071f8 <trans_anim_cb+0x64>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0be      	beq.n	80071f8 <trans_anim_cb+0x64>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800727a:	297f      	cmp	r1, #127	; 0x7f
 800727c:	bfc8      	it	gt
 800727e:	461d      	movgt	r5, r3
 8007280:	e7ba      	b.n	80071f8 <trans_anim_cb+0x64>
                if(v <= 0) value_final.color = tr->start_value.color;
 8007282:	2900      	cmp	r1, #0
 8007284:	dc04      	bgt.n	8007290 <trans_anim_cb+0xfc>
 8007286:	89a3      	ldrh	r3, [r4, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
 8007288:	2500      	movs	r5, #0
 800728a:	f363 050f 	bfi	r5, r3, #0, #16
 800728e:	e7b3      	b.n	80071f8 <trans_anim_cb+0x64>
 8007290:	29fe      	cmp	r1, #254	; 0xfe
 8007292:	dd01      	ble.n	8007298 <trans_anim_cb+0x104>
 8007294:	8a23      	ldrh	r3, [r4, #16]
 8007296:	e7f7      	b.n	8007288 <trans_anim_cb+0xf4>
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8007298:	89a5      	ldrh	r5, [r4, #12]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800729a:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800729e:	8a23      	ldrh	r3, [r4, #16]
 80072a0:	f248 0281 	movw	r2, #32897	; 0x8081
 80072a4:	f3c5 1545 	ubfx	r5, r5, #5, #6
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80072a8:	f894 800c 	ldrb.w	r8, [r4, #12]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80072ac:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80072b0:	fb0e f505 	mul.w	r5, lr, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80072b4:	f008 081f 	and.w	r8, r8, #31
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80072b8:	fb01 5303 	mla	r3, r1, r3, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80072bc:	fb0e f808 	mul.w	r8, lr, r8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 80072c0:	3380      	adds	r3, #128	; 0x80
 80072c2:	4353      	muls	r3, r2
 80072c4:	f3c3 55c5 	ubfx	r5, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80072c8:	7c23      	ldrb	r3, [r4, #16]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	fb01 8303 	mla	r3, r1, r3, r8
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80072d2:	f894 800d 	ldrb.w	r8, [r4, #13]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80072d6:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80072d8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80072dc:	4353      	muls	r3, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80072de:	fb0e fe08 	mul.w	lr, lr, r8
 80072e2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 80072e6:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80072ea:	7c65      	ldrb	r5, [r4, #17]
 80072ec:	08ed      	lsrs	r5, r5, #3
 80072ee:	fb01 e105 	mla	r1, r1, r5, lr
 80072f2:	2500      	movs	r5, #0
 80072f4:	3180      	adds	r1, #128	; 0x80
 80072f6:	434a      	muls	r2, r1
 80072f8:	0dd2      	lsrs	r2, r2, #23
 80072fa:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 80072fe:	f362 050f 	bfi	r5, r2, #0, #16
 8007302:	e779      	b.n	80071f8 <trans_anim_cb+0x64>
        bool refr = true;
 8007304:	f04f 0801 	mov.w	r8, #1
 8007308:	e783      	b.n	8007212 <trans_anim_cb+0x7e>
 800730a:	bf00      	nop
 800730c:	00900801 	.word	0x00900801

08007310 <lv_obj_remove_style>:
{
 8007310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 8007316:	fa1f fa82 	uxth.w	sl, r2
    return selector & 0xFF0000;
 800731a:	f402 057f 	and.w	r5, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800731e:	4688      	mov	r8, r1
 8007320:	b1d1      	cbz	r1, 8007358 <lv_obj_remove_style+0x48>
 8007322:	79ce      	ldrb	r6, [r1, #7]
 8007324:	3e00      	subs	r6, #0
 8007326:	bf18      	it	ne
 8007328:	2601      	movne	r6, #1
 800732a:	4276      	negs	r6, r6
 800732c:	b2b6      	uxth	r6, r6
    bool deleted = false;
 800732e:	2200      	movs	r2, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 8007330:	f64f 7bff 	movw	fp, #65535	; 0xffff
    uint32_t i = 0;
 8007334:	4617      	mov	r7, r2
    while(i <  obj->style_cnt) {
 8007336:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007338:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800733c:	42bb      	cmp	r3, r7
 800733e:	d80e      	bhi.n	800735e <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 8007340:	2a00      	cmp	r2, #0
 8007342:	d064      	beq.n	800740e <lv_obj_remove_style+0xfe>
 8007344:	2e00      	cmp	r6, #0
 8007346:	d062      	beq.n	800740e <lv_obj_remove_style+0xfe>
        lv_obj_refresh_style(obj, part, prop);
 8007348:	4629      	mov	r1, r5
 800734a:	4620      	mov	r0, r4
 800734c:	f64f 72ff 	movw	r2, #65535	; 0xffff
}
 8007350:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        lv_obj_refresh_style(obj, part, prop);
 8007354:	f7ff be34 	b.w	8006fc0 <lv_obj_refresh_style>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8007358:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800735c:	e7e7      	b.n	800732e <lv_obj_remove_style+0x1e>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800735e:	68e0      	ldr	r0, [r4, #12]
        if((state != LV_STATE_ANY && state_act != state) ||
 8007360:	45da      	cmp	sl, fp
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007362:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8007366:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
 800736a:	684b      	ldr	r3, [r1, #4]
 800736c:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 8007370:	d003      	beq.n	800737a <lv_obj_remove_style+0x6a>
 8007372:	fa1f fc83 	uxth.w	ip, r3
 8007376:	45d4      	cmp	ip, sl
 8007378:	d10d      	bne.n	8007396 <lv_obj_remove_style+0x86>
 800737a:	f5b5 2f70 	cmp.w	r5, #983040	; 0xf0000
 800737e:	d003      	beq.n	8007388 <lv_obj_remove_style+0x78>
    return selector & 0xFF0000;
 8007380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 8007384:	42ab      	cmp	r3, r5
 8007386:	d106      	bne.n	8007396 <lv_obj_remove_style+0x86>
 8007388:	f1b8 0f00 	cmp.w	r8, #0
 800738c:	d005      	beq.n	800739a <lv_obj_remove_style+0x8a>
           (style != NULL && style != obj->styles[i].style))
 800738e:	f850 3009 	ldr.w	r3, [r0, r9]
 8007392:	4543      	cmp	r3, r8
 8007394:	d001      	beq.n	800739a <lv_obj_remove_style+0x8a>
            i++;
 8007396:	3701      	adds	r7, #1
            continue;
 8007398:	e7cd      	b.n	8007336 <lv_obj_remove_style+0x26>
        if(obj->styles[i].is_trans) {
 800739a:	79cb      	ldrb	r3, [r1, #7]
 800739c:	0799      	lsls	r1, r3, #30
 800739e:	d506      	bpl.n	80073ae <lv_obj_remove_style+0x9e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 80073a0:	2300      	movs	r3, #0
 80073a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073a6:	4629      	mov	r1, r5
 80073a8:	4620      	mov	r0, r4
 80073aa:	f7ff fd41 	bl	8006e30 <trans_del>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	eb03 0209 	add.w	r2, r3, r9
 80073b4:	79d2      	ldrb	r2, [r2, #7]
 80073b6:	0792      	lsls	r2, r2, #30
 80073b8:	d00c      	beq.n	80073d4 <lv_obj_remove_style+0xc4>
            lv_style_reset(obj->styles[i].style);
 80073ba:	f853 0009 	ldr.w	r0, [r3, r9]
 80073be:	f011 f8c3 	bl	8018548 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 80073c2:	68e3      	ldr	r3, [r4, #12]
 80073c4:	f853 0009 	ldr.w	r0, [r3, r9]
 80073c8:	f010 faa4 	bl	8017914 <lv_mem_free>
            obj->styles[i].style = NULL;
 80073cc:	68e3      	ldr	r3, [r4, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f843 2009 	str.w	r2, [r3, r9]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 80073d4:	463a      	mov	r2, r7
 80073d6:	e006      	b.n	80073e6 <lv_obj_remove_style+0xd6>
            obj->styles[j] = obj->styles[j + 1];
 80073d8:	3201      	adds	r2, #1
 80073da:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 80073de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80073e2:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 80073e6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80073e8:	68e0      	ldr	r0, [r4, #12]
 80073ea:	f3c3 01c5 	ubfx	r1, r3, #3, #6
 80073ee:	f101 3cff 	add.w	ip, r1, #4294967295
 80073f2:	4594      	cmp	ip, r2
 80073f4:	d8f0      	bhi.n	80073d8 <lv_obj_remove_style+0xc8>
        obj->style_cnt--;
 80073f6:	313f      	adds	r1, #63	; 0x3f
 80073f8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80073fc:	f361 03c8 	bfi	r3, r1, #3, #6
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007400:	00c9      	lsls	r1, r1, #3
        obj->style_cnt--;
 8007402:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8007404:	f010 fc1e 	bl	8017c44 <lv_mem_realloc>
        deleted = true;
 8007408:	2201      	movs	r2, #1
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800740a:	60e0      	str	r0, [r4, #12]
        deleted = true;
 800740c:	e793      	b.n	8007336 <lv_obj_remove_style+0x26>
}
 800740e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08007414 <trans_anim_ready_cb>:
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
 8007414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 8007418:	6804      	ldr	r4, [r0, #0]
    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800741a:	4e27      	ldr	r6, [pc, #156]	; (80074b8 <trans_anim_ready_cb+0xa4>)
 800741c:	4826      	ldr	r0, [pc, #152]	; (80074b8 <trans_anim_ready_cb+0xa4>)
    lv_obj_t * obj = tr->obj;
 800741e:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 8007420:	88a7      	ldrh	r7, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007422:	f010 f974 	bl	801770e <_lv_ll_get_head>
 8007426:	b930      	cbnz	r0, 8007436 <trans_anim_ready_cb+0x22>
        }
    }

    if(!running) {
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 8007428:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 800742a:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 800742e:	4282      	cmp	r2, r0
 8007430:	d814      	bhi.n	800745c <trans_anim_ready_cb+0x48>
                }
                break;
            }
        }
    }
}
 8007432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 8007436:	42a0      	cmp	r0, r4
 8007438:	d00b      	beq.n	8007452 <trans_anim_ready_cb+0x3e>
 800743a:	6802      	ldr	r2, [r0, #0]
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d107      	bne.n	8007452 <trans_anim_ready_cb+0x3e>
 8007442:	6882      	ldr	r2, [r0, #8]
 8007444:	68a3      	ldr	r3, [r4, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	d103      	bne.n	8007452 <trans_anim_ready_cb+0x3e>
 800744a:	8882      	ldrh	r2, [r0, #4]
 800744c:	88a3      	ldrh	r3, [r4, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d0ef      	beq.n	8007432 <trans_anim_ready_cb+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8007452:	4601      	mov	r1, r0
 8007454:	4630      	mov	r0, r6
 8007456:	f010 f960 	bl	801771a <_lv_ll_get_next>
 800745a:	e7e4      	b.n	8007426 <trans_anim_ready_cb+0x12>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800745c:	68eb      	ldr	r3, [r5, #12]
 800745e:	00c6      	lsls	r6, r0, #3
 8007460:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007464:	79d9      	ldrb	r1, [r3, #7]
 8007466:	0789      	lsls	r1, r1, #30
 8007468:	d523      	bpl.n	80074b2 <trans_anim_ready_cb+0x9e>
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	68a1      	ldr	r1, [r4, #8]
 800746e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8007472:	428b      	cmp	r3, r1
 8007474:	d11d      	bne.n	80074b2 <trans_anim_ready_cb+0x9e>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8007476:	4621      	mov	r1, r4
 8007478:	480f      	ldr	r0, [pc, #60]	; (80074b8 <trans_anim_ready_cb+0xa4>)
 800747a:	f010 f90d 	bl	8017698 <_lv_ll_remove>
                lv_mem_free(tr);
 800747e:	4620      	mov	r0, r4
 8007480:	f010 fa48 	bl	8017914 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8007484:	68ec      	ldr	r4, [r5, #12]
                lv_style_remove_prop(obj_style->style, prop);
 8007486:	4639      	mov	r1, r7
 8007488:	59a0      	ldr	r0, [r4, r6]
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800748a:	eb04 0806 	add.w	r8, r4, r6
                lv_style_remove_prop(obj_style->style, prop);
 800748e:	f011 f877 	bl	8018580 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 8007492:	68eb      	ldr	r3, [r5, #12]
 8007494:	5998      	ldr	r0, [r3, r6]
 8007496:	f011 f96f 	bl	8018778 <lv_style_is_empty>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0c9      	beq.n	8007432 <trans_anim_ready_cb+0x1e>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800749e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80074a2:	4628      	mov	r0, r5
 80074a4:	59a1      	ldr	r1, [r4, r6]
 80074a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
}
 80074aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 80074ae:	f7ff bf2f 	b.w	8007310 <lv_obj_remove_style>
        for(i = 0; i < obj->style_cnt; i++) {
 80074b2:	3001      	adds	r0, #1
 80074b4:	e7bb      	b.n	800742e <trans_anim_ready_cb+0x1a>
 80074b6:	bf00      	nop
 80074b8:	2000ae04 	.word	0x2000ae04

080074bc <lv_obj_enable_style_refresh>:
    style_refr = en;
 80074bc:	4b01      	ldr	r3, [pc, #4]	; (80074c4 <lv_obj_enable_style_refresh+0x8>)
 80074be:	7018      	strb	r0, [r3, #0]
}
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000004 	.word	0x20000004

080074c8 <lv_obj_get_style_prop>:
{
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 80074cc:	f3c2 2380 	ubfx	r3, r2, #10, #1
{
 80074d0:	b087      	sub	sp, #28
    if(filter) {
 80074d2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
{
 80074d6:	4604      	mov	r4, r0
    bool inherit = prop & LV_STYLE_PROP_INHERIT ? true : false;
 80074d8:	9301      	str	r3, [sp, #4]
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 80074da:	f3c2 3380 	ubfx	r3, r2, #14, #1
{
 80074de:	460e      	mov	r6, r1
 80074e0:	4693      	mov	fp, r2
    bool filter = prop & LV_STYLE_PROP_FILTER ? true : false;
 80074e2:	9302      	str	r3, [sp, #8]
    if(filter) {
 80074e4:	d003      	beq.n	80074ee <lv_obj_get_style_prop+0x26>
        prop &= ~LV_STYLE_PROP_FILTER;
 80074e6:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
 80074ea:	fa1f fb81 	uxth.w	fp, r1
    while(obj) {
 80074ee:	b92c      	cbnz	r4, 80074fc <lv_obj_get_style_prop+0x34>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	d076      	beq.n	80075e2 <lv_obj_get_style_prop+0x11a>
            value_act = lv_style_prop_get_default(prop);
 80074f4:	4658      	mov	r0, fp
 80074f6:	f011 f8e9 	bl	80186cc <lv_style_prop_get_default>
 80074fa:	e034      	b.n	8007566 <lv_obj_get_style_prop+0x9e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 80074fc:	4658      	mov	r0, fp
    for(i = 0; i < obj->style_cnt; i++) {
 80074fe:	2500      	movs	r5, #0
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8007500:	f011 f93f 	bl	8018782 <_lv_style_get_prop_group>
 8007504:	2301      	movs	r3, #1
    lv_state_t state = obj->state;
 8007506:	f8b4 a020 	ldrh.w	sl, [r4, #32]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800750a:	fa03 f000 	lsl.w	r0, r3, r0
    bool skip_trans = obj->skip_trans;
 800750e:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
    lv_state_t state_inv = ~state;
 8007512:	ea6f 090a 	mvn.w	r9, sl
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8007516:	b2c7      	uxtb	r7, r0
    bool skip_trans = obj->skip_trans;
 8007518:	f3c8 0880 	ubfx	r8, r8, #2, #1
    lv_state_t state_inv = ~state;
 800751c:	fa1f f989 	uxth.w	r9, r9
    for(i = 0; i < obj->style_cnt; i++) {
 8007520:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8007522:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8007526:	429d      	cmp	r5, r3
 8007528:	d302      	bcc.n	8007530 <lv_obj_get_style_prop+0x68>
 800752a:	f04f 38ff 	mov.w	r8, #4294967295
 800752e:	e045      	b.n	80075bc <lv_obj_get_style_prop+0xf4>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8007530:	68e2      	ldr	r2, [r4, #12]
 8007532:	00e8      	lsls	r0, r5, #3
 8007534:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
        if(obj_style->is_trans == false) break;
 8007538:	f893 c007 	ldrb.w	ip, [r3, #7]
 800753c:	f01c 0f02 	tst.w	ip, #2
 8007540:	d0f3      	beq.n	800752a <lv_obj_get_style_prop+0x62>
        if(skip_trans) continue;
 8007542:	f1b8 0f00 	cmp.w	r8, #0
 8007546:	d117      	bne.n	8007578 <lv_obj_get_style_prop+0xb0>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007548:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 800754a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800754e:	429e      	cmp	r6, r3
 8007550:	d112      	bne.n	8007578 <lv_obj_get_style_prop+0xb0>
        if((obj_style->style->has_group & group) == 0) continue;
 8007552:	5810      	ldr	r0, [r2, r0]
 8007554:	7983      	ldrb	r3, [r0, #6]
 8007556:	421f      	tst	r7, r3
 8007558:	d00e      	beq.n	8007578 <lv_obj_get_style_prop+0xb0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800755a:	aa05      	add	r2, sp, #20
 800755c:	4659      	mov	r1, fp
 800755e:	f011 f870 	bl	8018642 <lv_style_get_prop>
        if(found) {
 8007562:	b148      	cbz	r0, 8007578 <lv_obj_get_style_prop+0xb0>
        *v = value_tmp;
 8007564:	9805      	ldr	r0, [sp, #20]
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	b11b      	cbz	r3, 8007572 <lv_obj_get_style_prop+0xaa>
 800756a:	4605      	mov	r5, r0
    if(obj == NULL) return v;
 800756c:	2c00      	cmp	r4, #0
 800756e:	d152      	bne.n	8007616 <lv_obj_get_style_prop+0x14e>
    if(filter) value_act = apply_color_filter(obj, part, value_act);
 8007570:	4628      	mov	r0, r5
}
 8007572:	b007      	add	sp, #28
 8007574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 8007578:	3501      	adds	r5, #1
 800757a:	e7d1      	b.n	8007520 <lv_obj_get_style_prop+0x58>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800757c:	68e0      	ldr	r0, [r4, #12]
 800757e:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 8007588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800758c:	429e      	cmp	r6, r3
 800758e:	d114      	bne.n	80075ba <lv_obj_get_style_prop+0xf2>
        if((obj_style->style->has_group & group) == 0) continue;
 8007590:	f850 0035 	ldr.w	r0, [r0, r5, lsl #3]
 8007594:	7983      	ldrb	r3, [r0, #6]
 8007596:	421f      	tst	r7, r3
 8007598:	d00f      	beq.n	80075ba <lv_obj_get_style_prop+0xf2>
        if((state_act & state_inv)) continue;
 800759a:	ea12 0f09 	tst.w	r2, r9
    return selector & 0xFFFF;
 800759e:	b293      	uxth	r3, r2
        if((state_act & state_inv)) continue;
 80075a0:	d10b      	bne.n	80075ba <lv_obj_get_style_prop+0xf2>
        if(state_act <= weight) continue;
 80075a2:	4543      	cmp	r3, r8
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	dd08      	ble.n	80075ba <lv_obj_get_style_prop+0xf2>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 80075a8:	aa05      	add	r2, sp, #20
 80075aa:	4659      	mov	r1, fp
 80075ac:	f011 f849 	bl	8018642 <lv_style_get_prop>
        if(found) {
 80075b0:	b118      	cbz	r0, 80075ba <lv_obj_get_style_prop+0xf2>
            if(state_act == state) {
 80075b2:	9b03      	ldr	r3, [sp, #12]
 80075b4:	459a      	cmp	sl, r3
 80075b6:	d0d5      	beq.n	8007564 <lv_obj_get_style_prop+0x9c>
 80075b8:	4698      	mov	r8, r3
    for(; i < obj->style_cnt; i++) {
 80075ba:	3501      	adds	r5, #1
 80075bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80075be:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80075c2:	429d      	cmp	r5, r3
 80075c4:	d3da      	bcc.n	800757c <lv_obj_get_style_prop+0xb4>
    if(weight >= 0) {
 80075c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80075ca:	d1cb      	bne.n	8007564 <lv_obj_get_style_prop+0x9c>
        if(!inherit) break;
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d08e      	beq.n	80074f0 <lv_obj_get_style_prop+0x28>
        if(part != LV_PART_MAIN) {
 80075d2:	b926      	cbnz	r6, 80075de <lv_obj_get_style_prop+0x116>
        obj = lv_obj_get_parent(obj);
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fac1 	bl	8007b5c <lv_obj_get_parent>
 80075da:	4604      	mov	r4, r0
 80075dc:	e787      	b.n	80074ee <lv_obj_get_style_prop+0x26>
 80075de:	2600      	movs	r6, #0
 80075e0:	e785      	b.n	80074ee <lv_obj_get_style_prop+0x26>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 80075e2:	f241 0301 	movw	r3, #4097	; 0x1001
 80075e6:	459b      	cmp	fp, r3
 80075e8:	d003      	beq.n	80075f2 <lv_obj_get_style_prop+0x12a>
 80075ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80075ee:	459b      	cmp	fp, r3
 80075f0:	d180      	bne.n	80074f4 <lv_obj_get_style_prop+0x2c>
            const lv_obj_class_t * cls = obj->class_p;
 80075f2:	6823      	ldr	r3, [r4, #0]
            while(cls) {
 80075f4:	f241 0201 	movw	r2, #4097	; 0x1001
 80075f8:	b91b      	cbnz	r3, 8007602 <lv_obj_get_style_prop+0x13a>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 80075fa:	4593      	cmp	fp, r2
 80075fc:	d125      	bne.n	800764a <lv_obj_get_style_prop+0x182>
 80075fe:	8a9b      	ldrh	r3, [r3, #20]
 8007600:	deff      	udf	#255	; 0xff
                if(prop == LV_STYLE_WIDTH) {
 8007602:	4593      	cmp	fp, r2
                    if(cls->width_def != 0) break;
 8007604:	bf0c      	ite	eq
 8007606:	f9b3 0014 	ldrsheq.w	r0, [r3, #20]
                    if(cls->height_def != 0) break;
 800760a:	f9b3 0016 	ldrshne.w	r0, [r3, #22]
 800760e:	2800      	cmp	r0, #0
 8007610:	d1a9      	bne.n	8007566 <lv_obj_get_style_prop+0x9e>
                cls = cls->base_class;
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	e7f0      	b.n	80075f8 <lv_obj_get_style_prop+0x130>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 8007616:	2263      	movs	r2, #99	; 0x63
 8007618:	4631      	mov	r1, r6
 800761a:	4620      	mov	r0, r4
 800761c:	f7ff ff54 	bl	80074c8 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 8007620:	4607      	mov	r7, r0
 8007622:	2800      	cmp	r0, #0
 8007624:	d0a4      	beq.n	8007570 <lv_obj_get_style_prop+0xa8>
 8007626:	6803      	ldr	r3, [r0, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0a1      	beq.n	8007570 <lv_obj_get_style_prop+0xa8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800762c:	2264      	movs	r2, #100	; 0x64
 800762e:	4631      	mov	r1, r6
 8007630:	4620      	mov	r0, r4
 8007632:	f7ff ff49 	bl	80074c8 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 8007636:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 800763a:	d099      	beq.n	8007570 <lv_obj_get_style_prop+0xa8>
 800763c:	4629      	mov	r1, r5
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	4638      	mov	r0, r7
 8007642:	4798      	blx	r3
 8007644:	f360 050f 	bfi	r5, r0, #0, #16
 8007648:	e792      	b.n	8007570 <lv_obj_get_style_prop+0xa8>
            value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800764a:	8adb      	ldrh	r3, [r3, #22]
 800764c:	e7d8      	b.n	8007600 <lv_obj_get_style_prop+0x138>

0800764e <trans_anim_start_cb>:
{
 800764e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    trans_t * tr = a->var;
 8007650:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 8007652:	68a1      	ldr	r1, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 8007654:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 8007656:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800765a:	6820      	ldr	r0, [r4, #0]
 800765c:	9101      	str	r1, [sp, #4]
 800765e:	f7ff ff33 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_prop_t prop_tmp = tr->prop;
 8007662:	88a5      	ldrh	r5, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 8007664:	2300      	movs	r3, #0
    trans_del(tr->obj, part, prop_tmp, tr);
 8007666:	9901      	ldr	r1, [sp, #4]
 8007668:	462a      	mov	r2, r5
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800766a:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 800766c:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800766e:	4623      	mov	r3, r4
 8007670:	6820      	ldr	r0, [r4, #0]
 8007672:	f7ff fbdd 	bl	8006e30 <trans_del>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 8007676:	68a1      	ldr	r1, [r4, #8]
 8007678:	6820      	ldr	r0, [r4, #0]
    tr->prop = prop_tmp;
 800767a:	80a5      	strh	r5, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800767c:	f7ff fc4d 	bl	8006f1a <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 8007680:	68e2      	ldr	r2, [r4, #12]
 8007682:	88a1      	ldrh	r1, [r4, #4]
 8007684:	6800      	ldr	r0, [r0, #0]
}
 8007686:	b003      	add	sp, #12
 8007688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800768c:	f011 b881 	b.w	8018792 <lv_style_set_prop>

08007690 <lv_obj_set_local_style_prop>:
{
 8007690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8007694:	8c44      	ldrh	r4, [r0, #34]	; 0x22
{
 8007696:	4605      	mov	r5, r0
 8007698:	461e      	mov	r6, r3
 800769a:	460f      	mov	r7, r1
 800769c:	4690      	mov	r8, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800769e:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 80076a2:	68c0      	ldr	r0, [r0, #12]
 80076a4:	2300      	movs	r3, #0
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	d30d      	bcc.n	80076c6 <lv_obj_set_local_style_prop+0x36>
    obj->style_cnt++;
 80076aa:	3401      	adds	r4, #1
 80076ac:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80076ae:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80076b2:	f364 03c8 	bfi	r3, r4, #3, #6
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80076b6:	00e1      	lsls	r1, r4, #3
    obj->style_cnt++;
 80076b8:	846b      	strh	r3, [r5, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80076ba:	f010 fac3 	bl	8017c44 <lv_mem_realloc>
 80076be:	4602      	mov	r2, r0
 80076c0:	60e8      	str	r0, [r5, #12]
    LV_ASSERT_MALLOC(obj->styles);
 80076c2:	b9c0      	cbnz	r0, 80076f6 <lv_obj_set_local_style_prop+0x66>
 80076c4:	e7fe      	b.n	80076c4 <lv_obj_set_local_style_prop+0x34>
        if(obj->styles[i].is_local &&
 80076c6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80076ca:	79d1      	ldrb	r1, [r2, #7]
 80076cc:	07c9      	lsls	r1, r1, #31
 80076ce:	d510      	bpl.n	80076f2 <lv_obj_set_local_style_prop+0x62>
           obj->styles[i].selector == selector)
 80076d0:	6851      	ldr	r1, [r2, #4]
 80076d2:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 80076d6:	428e      	cmp	r6, r1
 80076d8:	d10b      	bne.n	80076f2 <lv_obj_set_local_style_prop+0x62>
            return obj->styles[i].style;
 80076da:	6810      	ldr	r0, [r2, #0]
    lv_style_set_prop(style, prop, value);
 80076dc:	4642      	mov	r2, r8
 80076de:	4639      	mov	r1, r7
 80076e0:	f011 f857 	bl	8018792 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 80076e4:	463a      	mov	r2, r7
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
}
 80076ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_obj_refresh_style(obj, selector, prop);
 80076ee:	f7ff bc67 	b.w	8006fc0 <lv_obj_refresh_style>
    for(i = 0; i < obj->style_cnt; i++) {
 80076f2:	3301      	adds	r3, #1
 80076f4:	e7d7      	b.n	80076a6 <lv_obj_set_local_style_prop+0x16>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 80076f6:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
 80076f8:	f3c4 04c5 	ubfx	r4, r4, #3, #6
 80076fc:	f104 3aff 	add.w	sl, r4, #4294967295
 8007700:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
 8007704:	3c02      	subs	r4, #2
 8007706:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800770a:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 800770e:	f1ba 0f00 	cmp.w	sl, #0
 8007712:	d11d      	bne.n	8007750 <lv_obj_set_local_style_prop+0xc0>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8007714:	eb02 0009 	add.w	r0, r2, r9
 8007718:	2108      	movs	r1, #8
 800771a:	f010 fafb 	bl	8017d14 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800771e:	2008      	movs	r0, #8
 8007720:	68ec      	ldr	r4, [r5, #12]
 8007722:	f010 fa79 	bl	8017c18 <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 8007726:	68eb      	ldr	r3, [r5, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 8007728:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
    lv_style_init(obj->styles[i].style);
 800772c:	f853 003a 	ldr.w	r0, [r3, sl, lsl #3]
 8007730:	f010 ff07 	bl	8018542 <lv_style_init>
    obj->styles[i].is_local = 1;
 8007734:	68e9      	ldr	r1, [r5, #12]
 8007736:	eb01 0309 	add.w	r3, r1, r9
 800773a:	79da      	ldrb	r2, [r3, #7]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	f366 0217 	bfi	r2, r6, #0, #24
 8007748:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 800774a:	f851 003a 	ldr.w	r0, [r1, sl, lsl #3]
 800774e:	e7c5      	b.n	80076dc <lv_obj_set_local_style_prop+0x4c>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8007750:	79e3      	ldrb	r3, [r4, #7]
 8007752:	3c08      	subs	r4, #8
 8007754:	079b      	lsls	r3, r3, #30
 8007756:	d1dd      	bne.n	8007714 <lv_obj_set_local_style_prop+0x84>
        obj->styles[i] = obj->styles[i - 1];
 8007758:	eb02 0309 	add.w	r3, r2, r9
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800775c:	f10a 3aff 	add.w	sl, sl, #4294967295
        obj->styles[i] = obj->styles[i - 1];
 8007760:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8007764:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8007768:	e7cf      	b.n	800770a <lv_obj_set_local_style_prop+0x7a>

0800776a <lv_obj_get_local_style_prop>:
{
 800776a:	b4f0      	push	{r4, r5, r6, r7}
    for(i = 0; i < obj->style_cnt; i++) {
 800776c:	8c46      	ldrh	r6, [r0, #34]	; 0x22
 800776e:	2500      	movs	r5, #0
 8007770:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 8007774:	42ae      	cmp	r6, r5
 8007776:	d802      	bhi.n	800777e <lv_obj_get_local_style_prop+0x14>
}
 8007778:	2000      	movs	r0, #0
 800777a:	bcf0      	pop	{r4, r5, r6, r7}
 800777c:	4770      	bx	lr
        if(obj->styles[i].is_local &&
 800777e:	68c4      	ldr	r4, [r0, #12]
 8007780:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007784:	79e7      	ldrb	r7, [r4, #7]
 8007786:	07ff      	lsls	r7, r7, #31
 8007788:	d508      	bpl.n	800779c <lv_obj_get_local_style_prop+0x32>
           obj->styles[i].selector ==  selector)
 800778a:	6867      	ldr	r7, [r4, #4]
 800778c:	f3c7 0717 	ubfx	r7, r7, #0, #24
        if(obj->styles[i].is_local &&
 8007790:	429f      	cmp	r7, r3
 8007792:	d103      	bne.n	800779c <lv_obj_get_local_style_prop+0x32>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007794:	6820      	ldr	r0, [r4, #0]
}
 8007796:	bcf0      	pop	{r4, r5, r6, r7}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 8007798:	f010 bf53 	b.w	8018642 <lv_style_get_prop>
    for(i = 0; i < obj->style_cnt; i++) {
 800779c:	3501      	adds	r5, #1
 800779e:	e7e9      	b.n	8007774 <lv_obj_get_local_style_prop+0xa>

080077a0 <_lv_obj_style_create_transition>:
{
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	461f      	mov	r7, r3
 80077a6:	b092      	sub	sp, #72	; 0x48
    obj->skip_trans = 1;
 80077a8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
{
 80077ac:	4604      	mov	r4, r0
 80077ae:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80077b0:	4688      	mov	r8, r1
    obj->skip_trans = 1;
 80077b2:	f043 0304 	orr.w	r3, r3, #4
    obj->state = prev_state;
 80077b6:	8402      	strh	r2, [r0, #32]
{
 80077b8:	4691      	mov	r9, r2
    obj->skip_trans = 1;
 80077ba:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077be:	892a      	ldrh	r2, [r5, #8]
 80077c0:	f7ff fe82 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077c4:	892a      	ldrh	r2, [r5, #8]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077c6:	4682      	mov	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077c8:	4641      	mov	r1, r8
 80077ca:	4620      	mov	r0, r4
    obj->state = new_state;
 80077cc:	8427      	strh	r7, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077ce:	f7ff fe7b 	bl	80074c8 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 80077d2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80077d6:	4582      	cmp	sl, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077d8:	4606      	mov	r6, r0
    obj->skip_trans = 0;
 80077da:	f36f 0382 	bfc	r3, #2, #1
 80077de:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 80077e2:	d06c      	beq.n	80078be <_lv_obj_style_create_transition+0x11e>
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077e4:	892a      	ldrh	r2, [r5, #8]
 80077e6:	4641      	mov	r1, r8
    obj->state = prev_state;
 80077e8:	f8a4 9020 	strh.w	r9, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff fe6b 	bl	80074c8 <lv_obj_get_style_prop>
 80077f2:	4681      	mov	r9, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 80077f4:	4641      	mov	r1, r8
 80077f6:	4620      	mov	r0, r4
    obj->state = new_state;
 80077f8:	8427      	strh	r7, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 80077fa:	f7ff fb8e 	bl	8006f1a <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 80077fe:	464a      	mov	r2, r9
 8007800:	8929      	ldrh	r1, [r5, #8]
 8007802:	6800      	ldr	r0, [r0, #0]
 8007804:	f010 ffc5 	bl	8018792 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 8007808:	892b      	ldrh	r3, [r5, #8]
 800780a:	2b60      	cmp	r3, #96	; 0x60
 800780c:	d11e      	bne.n	800784c <_lv_obj_style_create_transition+0xac>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800780e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007812:	4599      	cmp	r9, r3
 8007814:	d001      	beq.n	800781a <_lv_obj_style_create_transition+0x7a>
 8007816:	429e      	cmp	r6, r3
 8007818:	d118      	bne.n	800784c <_lv_obj_style_create_transition+0xac>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800781a:	4620      	mov	r0, r4
 800781c:	f7fd fbd7 	bl	8004fce <lv_obj_get_width>
 8007820:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007824:	f340 074f 	sbfx	r7, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007828:	4620      	mov	r0, r4
 800782a:	f7fd fbd0 	bl	8004fce <lv_obj_get_width>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800782e:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007832:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007836:	4591      	cmp	r9, r2
            lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
 8007838:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800783c:	d112      	bne.n	8007864 <_lv_obj_style_create_transition+0xc4>
 800783e:	429f      	cmp	r7, r3
 8007840:	da0a      	bge.n	8007858 <_lv_obj_style_create_transition+0xb8>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007842:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 8007844:	f107 0901 	add.w	r9, r7, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007848:	d100      	bne.n	800784c <_lv_obj_style_create_transition+0xac>
 800784a:	1c7e      	adds	r6, r7, #1
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800784c:	481d      	ldr	r0, [pc, #116]	; (80078c4 <_lv_obj_style_create_transition+0x124>)
 800784e:	f00f feec 	bl	801762a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 8007852:	4607      	mov	r7, r0
 8007854:	b958      	cbnz	r0, 800786e <_lv_obj_style_create_transition+0xce>
 8007856:	e7fe      	b.n	8007856 <_lv_obj_style_create_transition+0xb6>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 8007858:	4296      	cmp	r6, r2
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800785a:	f103 0901 	add.w	r9, r3, #1
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800785e:	d1f5      	bne.n	800784c <_lv_obj_style_create_transition+0xac>
 8007860:	1c5e      	adds	r6, r3, #1
 8007862:	e7f3      	b.n	800784c <_lv_obj_style_create_transition+0xac>
 8007864:	4296      	cmp	r6, r2
 8007866:	d1f1      	bne.n	800784c <_lv_obj_style_create_transition+0xac>
 8007868:	429f      	cmp	r7, r3
 800786a:	dbee      	blt.n	800784a <_lv_obj_style_create_transition+0xaa>
 800786c:	e7f8      	b.n	8007860 <_lv_obj_style_create_transition+0xc0>
        tr->prop = tr_dsc->prop;
 800786e:	892b      	ldrh	r3, [r5, #8]
        tr->obj = obj;
 8007870:	6004      	str	r4, [r0, #0]
        tr->prop = tr_dsc->prop;
 8007872:	8083      	strh	r3, [r0, #4]
        tr->selector = part;
 8007874:	f8c0 8008 	str.w	r8, [r0, #8]
    tr->end_value = v2;
 8007878:	e9c0 9603 	strd	r9, r6, [r0, #12]
        lv_anim_init(&a);
 800787c:	a801      	add	r0, sp, #4
 800787e:	f00f facd 	bl	8016e1c <lv_anim_init>
    a->end_value = end;
 8007882:	22ff      	movs	r2, #255	; 0xff
    a->exec_cb = exec_cb;
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <_lv_obj_style_create_transition+0x128>)
        lv_anim_start(&a);
 8007886:	a801      	add	r0, sp, #4
    a->end_value = end;
 8007888:	920a      	str	r2, [sp, #40]	; 0x28
    a->time = duration;
 800788a:	882a      	ldrh	r2, [r5, #0]
    a->exec_cb = exec_cb;
 800788c:	9302      	str	r3, [sp, #8]
    a->time = duration;
 800788e:	920b      	str	r2, [sp, #44]	; 0x2c
    a->act_time = -(int32_t)(delay);
 8007890:	886a      	ldrh	r2, [r5, #2]
    a->start_cb = start_cb;
 8007892:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <_lv_obj_style_create_transition+0x12c>)
    a->act_time = -(int32_t)(delay);
 8007894:	4252      	negs	r2, r2
    a->var = var;
 8007896:	9701      	str	r7, [sp, #4]
    a->start_cb = start_cb;
 8007898:	9303      	str	r3, [sp, #12]
    a->act_time = -(int32_t)(delay);
 800789a:	920c      	str	r2, [sp, #48]	; 0x30
    a->ready_cb = ready_cb;
 800789c:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <_lv_obj_style_create_transition+0x130>)
    a->path_cb = path_cb;
 800789e:	68ea      	ldr	r2, [r5, #12]
    a->ready_cb = ready_cb;
 80078a0:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 80078a2:	2300      	movs	r3, #0
    a->path_cb = path_cb;
 80078a4:	9207      	str	r2, [sp, #28]
 * @param en true: apply the start value immediately in `lv_anim_start`;
 *        false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 80078a6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    a->current_value = start;
 80078aa:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->early_apply = en;
 80078ae:	f363 0200 	bfi	r2, r3, #0, #1
        a.user_data = tr_dsc->user_data;
 80078b2:	692b      	ldr	r3, [r5, #16]
 80078b4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 80078b8:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
 80078ba:	f00f faf5 	bl	8016ea8 <lv_anim_start>
}
 80078be:	b012      	add	sp, #72	; 0x48
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	2000ae04 	.word	0x2000ae04
 80078c8:	08007195 	.word	0x08007195
 80078cc:	0800764f 	.word	0x0800764f
 80078d0:	08007415 	.word	0x08007415

080078d4 <_lv_obj_style_state_compare>:
{
 80078d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 80078d8:	2600      	movs	r6, #0
{
 80078da:	4607      	mov	r7, r0
        bool valid1 = state_act & (~state1) ? false : true;
 80078dc:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 80078e0:	ea6f 0902 	mvn.w	r9, r2
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 80078e4:	4635      	mov	r5, r6
    for(i = 0; i < obj->style_cnt; i++) {
 80078e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078e8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 80078ec:	42b3      	cmp	r3, r6
 80078ee:	f240 80a1 	bls.w	8007a34 <_lv_obj_style_state_compare+0x160>
        if(obj->styles[i].is_trans) continue;
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	00f1      	lsls	r1, r6, #3
 80078f6:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 80078fa:	79d8      	ldrb	r0, [r3, #7]
 80078fc:	0784      	lsls	r4, r0, #30
 80078fe:	f100 8093 	bmi.w	8007a28 <_lv_obj_style_state_compare+0x154>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f3c3 0a17 	ubfx	sl, r3, #0, #24
        bool valid1 = state_act & (~state1) ? false : true;
 8007908:	b29b      	uxth	r3, r3
 800790a:	ea18 0f03 	tst.w	r8, r3
 800790e:	bf0c      	ite	eq
 8007910:	2001      	moveq	r0, #1
 8007912:	2000      	movne	r0, #0
        bool valid2 = state_act & (~state2) ? false : true;
 8007914:	ea19 0f03 	tst.w	r9, r3
        if(valid1 != valid2) {
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	4298      	cmp	r0, r3
 8007920:	f000 8082 	beq.w	8007a28 <_lv_obj_style_state_compare+0x154>
            lv_style_t * style = obj->styles[i].style;
 8007924:	5854      	ldr	r4, [r2, r1]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 8007926:	aa01      	add	r2, sp, #4
 8007928:	f241 0110 	movw	r1, #4112	; 0x1010
 800792c:	4620      	mov	r0, r4
 800792e:	f010 fe88 	bl	8018642 <lv_style_get_prop>
 8007932:	2800      	cmp	r0, #0
 8007934:	d17a      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 8007936:	aa01      	add	r2, sp, #4
 8007938:	f241 0111 	movw	r1, #4113	; 0x1011
 800793c:	4620      	mov	r0, r4
 800793e:	f010 fe80 	bl	8018642 <lv_style_get_prop>
 8007942:	2800      	cmp	r0, #0
 8007944:	d172      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 8007946:	aa01      	add	r2, sp, #4
 8007948:	f241 0112 	movw	r1, #4114	; 0x1012
 800794c:	4620      	mov	r0, r4
 800794e:	f010 fe78 	bl	8018642 <lv_style_get_prop>
 8007952:	2800      	cmp	r0, #0
 8007954:	d16a      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 8007956:	aa01      	add	r2, sp, #4
 8007958:	f241 0113 	movw	r1, #4115	; 0x1013
 800795c:	4620      	mov	r0, r4
 800795e:	f010 fe70 	bl	8018642 <lv_style_get_prop>
 8007962:	2800      	cmp	r0, #0
 8007964:	d162      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 8007966:	aa01      	add	r2, sp, #4
 8007968:	f241 0115 	movw	r1, #4117	; 0x1015
 800796c:	4620      	mov	r0, r4
 800796e:	f010 fe68 	bl	8018642 <lv_style_get_prop>
 8007972:	2800      	cmp	r0, #0
 8007974:	d15a      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 8007976:	aa01      	add	r2, sp, #4
 8007978:	f241 0114 	movw	r1, #4116	; 0x1014
 800797c:	4620      	mov	r0, r4
 800797e:	f010 fe60 	bl	8018642 <lv_style_get_prop>
 8007982:	2800      	cmp	r0, #0
 8007984:	d152      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 8007986:	aa01      	add	r2, sp, #4
 8007988:	f241 0169 	movw	r1, #4201	; 0x1069
 800798c:	4620      	mov	r0, r4
 800798e:	f010 fe58 	bl	8018642 <lv_style_get_prop>
 8007992:	2800      	cmp	r0, #0
 8007994:	d14a      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 8007996:	aa01      	add	r2, sp, #4
 8007998:	f243 010c 	movw	r1, #12300	; 0x300c
 800799c:	4620      	mov	r0, r4
 800799e:	f010 fe50 	bl	8018642 <lv_style_get_prop>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d142      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 80079a6:	aa01      	add	r2, sp, #4
 80079a8:	f243 010d 	movw	r1, #12301	; 0x300d
 80079ac:	4620      	mov	r0, r4
 80079ae:	f010 fe48 	bl	8018642 <lv_style_get_prop>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d13a      	bne.n	8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 80079b6:	aa01      	add	r2, sp, #4
 80079b8:	f241 0101 	movw	r1, #4097	; 0x1001
 80079bc:	4620      	mov	r0, r4
 80079be:	f010 fe40 	bl	8018642 <lv_style_get_prop>
 80079c2:	bb98      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 80079c4:	aa01      	add	r2, sp, #4
 80079c6:	f241 0104 	movw	r1, #4100	; 0x1004
 80079ca:	4620      	mov	r0, r4
 80079cc:	f010 fe39 	bl	8018642 <lv_style_get_prop>
 80079d0:	bb60      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 80079d2:	aa01      	add	r2, sp, #4
 80079d4:	f241 0102 	movw	r1, #4098	; 0x1002
 80079d8:	4620      	mov	r0, r4
 80079da:	f010 fe32 	bl	8018642 <lv_style_get_prop>
 80079de:	bb28      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 80079e0:	aa01      	add	r2, sp, #4
 80079e2:	f241 0103 	movw	r1, #4099	; 0x1003
 80079e6:	4620      	mov	r0, r4
 80079e8:	f010 fe2b 	bl	8018642 <lv_style_get_prop>
 80079ec:	b9f0      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 80079ee:	aa01      	add	r2, sp, #4
 80079f0:	f241 0105 	movw	r1, #4101	; 0x1005
 80079f4:	4620      	mov	r0, r4
 80079f6:	f010 fe24 	bl	8018642 <lv_style_get_prop>
 80079fa:	b9b8      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 80079fc:	aa01      	add	r2, sp, #4
 80079fe:	f241 0106 	movw	r1, #4102	; 0x1006
 8007a02:	4620      	mov	r0, r4
 8007a04:	f010 fe1d 	bl	8018642 <lv_style_get_prop>
 8007a08:	b980      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 8007a0a:	aa01      	add	r2, sp, #4
 8007a0c:	f241 0132 	movw	r1, #4146	; 0x1032
 8007a10:	4620      	mov	r0, r4
 8007a12:	f010 fe16 	bl	8018642 <lv_style_get_prop>
 8007a16:	b948      	cbnz	r0, 8007a2c <_lv_obj_style_state_compare+0x158>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a18:	aa01      	add	r2, sp, #4
 8007a1a:	f640 010a 	movw	r1, #2058	; 0x80a
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f010 fe0f 	bl	8018642 <lv_style_get_prop>
 8007a24:	b150      	cbz	r0, 8007a3c <_lv_obj_style_state_compare+0x168>
                    res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a26:	2502      	movs	r5, #2
    for(i = 0; i < obj->style_cnt; i++) {
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e75c      	b.n	80078e6 <_lv_obj_style_state_compare+0x12>
                if(part_act == LV_PART_MAIN) {
 8007a2c:	f41a 0f7f 	tst.w	sl, #16711680	; 0xff0000
 8007a30:	d1f9      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
                    return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 8007a32:	2503      	movs	r5, #3
}
 8007a34:	4628      	mov	r0, r5
 8007a36:	b002      	add	sp, #8
 8007a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a3c:	aa01      	add	r2, sp, #4
 8007a3e:	f640 010b 	movw	r1, #2059	; 0x80b
 8007a42:	4620      	mov	r0, r4
 8007a44:	f010 fdfd 	bl	8018642 <lv_style_get_prop>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d1ec      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a4c:	aa01      	add	r2, sp, #4
 8007a4e:	f640 010f 	movw	r1, #2063	; 0x80f
 8007a52:	4620      	mov	r0, r4
 8007a54:	f010 fdf5 	bl	8018642 <lv_style_get_prop>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1e4      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a5c:	aa01      	add	r2, sp, #4
 8007a5e:	f640 010e 	movw	r1, #2062	; 0x80e
 8007a62:	4620      	mov	r0, r4
 8007a64:	f010 fded 	bl	8018642 <lv_style_get_prop>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d1dc      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a6c:	aa01      	add	r2, sp, #4
 8007a6e:	f640 013c 	movw	r1, #2108	; 0x83c
 8007a72:	4620      	mov	r0, r4
 8007a74:	f010 fde5 	bl	8018642 <lv_style_get_prop>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d1d4      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a7c:	aa01      	add	r2, sp, #4
 8007a7e:	f640 013d 	movw	r1, #2109	; 0x83d
 8007a82:	4620      	mov	r0, r4
 8007a84:	f010 fddd 	bl	8018642 <lv_style_get_prop>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d1cc      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a8c:	aa01      	add	r2, sp, #4
 8007a8e:	f640 013a 	movw	r1, #2106	; 0x83a
 8007a92:	4620      	mov	r0, r4
 8007a94:	f010 fdd5 	bl	8018642 <lv_style_get_prop>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1c4      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007a9c:	aa01      	add	r2, sp, #4
 8007a9e:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f010 fdcd 	bl	8018642 <lv_style_get_prop>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d1bc      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007aac:	aa01      	add	r2, sp, #4
 8007aae:	f640 0145 	movw	r1, #2117	; 0x845
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f010 fdc5 	bl	8018642 <lv_style_get_prop>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d1b4      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007abc:	aa01      	add	r2, sp, #4
 8007abe:	f640 0141 	movw	r1, #2113	; 0x841
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f010 fdbd 	bl	8018642 <lv_style_get_prop>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d1ac      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007acc:	aa01      	add	r2, sp, #4
 8007ace:	f640 0142 	movw	r1, #2114	; 0x842
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f010 fdb5 	bl	8018642 <lv_style_get_prop>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d1a4      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007adc:	aa01      	add	r2, sp, #4
 8007ade:	f640 0143 	movw	r1, #2115	; 0x843
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f010 fdad 	bl	8018642 <lv_style_get_prop>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d19c      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 8007aec:	aa01      	add	r2, sp, #4
 8007aee:	f640 0149 	movw	r1, #2121	; 0x849
 8007af2:	4620      	mov	r0, r4
 8007af4:	f010 fda5 	bl	8018642 <lv_style_get_prop>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d194      	bne.n	8007a26 <_lv_obj_style_state_compare+0x152>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 8007afc:	2d01      	cmp	r5, #1
 8007afe:	bf38      	it	cc
 8007b00:	2501      	movcc	r5, #1
 8007b02:	e791      	b.n	8007a28 <_lv_obj_style_state_compare+0x154>

08007b04 <lv_obj_style_get_selector_state>:
}
 8007b04:	b280      	uxth	r0, r0
 8007b06:	4770      	bx	lr

08007b08 <lv_obj_style_get_selector_part>:
}
 8007b08:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8007b0c:	4770      	bx	lr

08007b0e <lv_obj_get_screen>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 8007b0e:	b108      	cbz	r0, 8007b14 <lv_obj_get_screen+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 8007b10:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 8007b12:	b903      	cbnz	r3, 8007b16 <lv_obj_get_screen+0x8>
}
 8007b14:	4770      	bx	lr
 8007b16:	4618      	mov	r0, r3
 8007b18:	e7f9      	b.n	8007b0e <lv_obj_get_screen>
	...

08007b1c <lv_obj_get_disp>:
{
 8007b1c:	b538      	push	{r3, r4, r5, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8007b1e:	6843      	ldr	r3, [r0, #4]
{
 8007b20:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 8007b22:	b113      	cbz	r3, 8007b2a <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8007b24:	f7ff fff3 	bl	8007b0e <lv_obj_get_screen>
 8007b28:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8007b2a:	4d0b      	ldr	r5, [pc, #44]	; (8007b58 <lv_obj_get_disp+0x3c>)
 8007b2c:	480a      	ldr	r0, [pc, #40]	; (8007b58 <lv_obj_get_disp+0x3c>)
 8007b2e:	f00f fdee 	bl	801770e <_lv_ll_get_head>
 8007b32:	b178      	cbz	r0, 8007b54 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8007b34:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007b36:	2300      	movs	r3, #0
 8007b38:	e005      	b.n	8007b46 <lv_obj_get_disp+0x2a>
            if(d->screens[i] == scr) return d;
 8007b3a:	68c1      	ldr	r1, [r0, #12]
 8007b3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007b40:	42a1      	cmp	r1, r4
 8007b42:	d007      	beq.n	8007b54 <lv_obj_get_disp+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 8007b44:	3301      	adds	r3, #1
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d1f7      	bne.n	8007b3a <lv_obj_get_disp+0x1e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f00f fde4 	bl	801771a <_lv_ll_get_next>
 8007b52:	e7ee      	b.n	8007b32 <lv_obj_get_disp+0x16>
}
 8007b54:	bd38      	pop	{r3, r4, r5, pc}
 8007b56:	bf00      	nop
 8007b58:	2000adf8 	.word	0x2000adf8

08007b5c <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 8007b5c:	b100      	cbz	r0, 8007b60 <lv_obj_get_parent+0x4>
    return obj->parent;
 8007b5e:	6840      	ldr	r0, [r0, #4]
}
 8007b60:	4770      	bx	lr

08007b62 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8007b62:	6880      	ldr	r0, [r0, #8]
 8007b64:	b158      	cbz	r0, 8007b7e <lv_obj_get_child+0x1c>

    uint32_t idu;
    if(id < 0) {
 8007b66:	2900      	cmp	r1, #0
 8007b68:	6843      	ldr	r3, [r0, #4]
 8007b6a:	da01      	bge.n	8007b70 <lv_obj_get_child+0xe>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
 8007b6c:	18c9      	adds	r1, r1, r3
 8007b6e:	d405      	bmi.n	8007b7c <lv_obj_get_child+0x1a>
        idu = (uint32_t) id;
    } else {
        idu = id;
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d203      	bcs.n	8007b7c <lv_obj_get_child+0x1a>
    else return obj->spec_attr->children[id];
 8007b74:	6803      	ldr	r3, [r0, #0]
 8007b76:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007b7a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return NULL;
 8007b7c:	2000      	movs	r0, #0
}
 8007b7e:	4770      	bx	lr

08007b80 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8007b80:	6880      	ldr	r0, [r0, #8]
 8007b82:	b100      	cbz	r0, 8007b86 <lv_obj_get_child_cnt+0x6>
    return obj->spec_attr->child_cnt;
 8007b84:	6840      	ldr	r0, [r0, #4]
}
 8007b86:	4770      	bx	lr

08007b88 <lv_obj_get_child_id>:

uint32_t lv_obj_get_child_id(const lv_obj_t * obj)
{
 8007b88:	b570      	push	{r4, r5, r6, lr}
    if(obj == NULL) return NULL;
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	b1a0      	cbz	r0, 8007bb8 <lv_obj_get_child_id+0x30>
    return obj->parent;
 8007b8e:	6845      	ldr	r5, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 8007b90:	b1a5      	cbz	r5, 8007bbc <lv_obj_get_child_id+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7ff fff4 	bl	8007b80 <lv_obj_get_child_cnt>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	4296      	cmp	r6, r2
 8007b9e:	d103      	bne.n	8007ba8 <lv_obj_get_child_id+0x20>
        if(lv_obj_get_child(parent, i) == obj) return i;
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 8007ba0:	f04f 32ff 	mov.w	r2, #4294967295
}
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_get_child(parent, i) == obj) return i;
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff ffd9 	bl	8007b62 <lv_obj_get_child>
 8007bb0:	4284      	cmp	r4, r0
 8007bb2:	d0f7      	beq.n	8007ba4 <lv_obj_get_child_id+0x1c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8007bb4:	3201      	adds	r2, #1
 8007bb6:	e7f1      	b.n	8007b9c <lv_obj_get_child_id+0x14>
    if(parent == NULL) return 0;
 8007bb8:	4602      	mov	r2, r0
 8007bba:	e7f3      	b.n	8007ba4 <lv_obj_get_child_id+0x1c>
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	e7f1      	b.n	8007ba4 <lv_obj_get_child_id+0x1c>

08007bc0 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2121      	movs	r1, #33	; 0x21
{
 8007bc6:	4605      	mov	r5, r0
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8007bc8:	f7fa fa2e 	bl	8002028 <lv_event_send>
    if(res == LV_RES_INV) return;
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	f000 8084 	beq.w	8007cda <obj_del_core+0x11a>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f7fc f9b4 	bl	8003f40 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8007bd8:	4607      	mov	r7, r0
 8007bda:	b110      	cbz	r0, 8007be2 <obj_del_core+0x22>
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f7fa fb86 	bl	80022ee <lv_group_remove_obj>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 8007be2:	2100      	movs	r1, #0
 8007be4:	4628      	mov	r0, r5
 8007be6:	f00f f933 	bl	8016e50 <lv_anim_del>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 8007bea:	2100      	movs	r1, #0
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7ff ffb8 	bl	8007b62 <lv_obj_get_child>
 8007bf2:	4606      	mov	r6, r0
    while(child) {
 8007bf4:	bb20      	cbnz	r0, 8007c40 <obj_del_core+0x80>
    }

    _lv_event_mark_deleted(obj);
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f7fa fa3c 	bl	8002074 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fc5d 	bl	80074bc <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8007c02:	4a36      	ldr	r2, [pc, #216]	; (8007cdc <obj_del_core+0x11c>)
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7ff fb82 	bl	8007310 <lv_obj_remove_style>
    lv_obj_remove_style_all(obj);
    lv_obj_enable_style_refresh(true);
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	f7ff fc55 	bl	80074bc <lv_obj_enable_style_refresh>

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8007c12:	4630      	mov	r0, r6
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 8007c14:	f00e ffb6 	bl	8016b84 <lv_indev_get_next>
 8007c18:	4604      	mov	r4, r0
    while(indev) {
 8007c1a:	b9a8      	cbnz	r0, 8007c48 <obj_del_core+0x88>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destructor(obj);
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f7fc fced 	bl	80045fc <_lv_obj_destructor>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 8007c22:	686b      	ldr	r3, [r5, #4]
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8007c24:	4628      	mov	r0, r5
    if(obj->parent == NULL) {
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d13f      	bne.n	8007caa <obj_del_core+0xea>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8007c2a:	f7ff ff77 	bl	8007b1c <lv_obj_get_disp>
 8007c2e:	4606      	mov	r6, r0
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 8007c30:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007c32:	68c0      	ldr	r0, [r0, #12]
 8007c34:	428c      	cmp	r4, r1
 8007c36:	d122      	bne.n	8007c7e <obj_del_core+0xbe>
 8007c38:	eb00 0384 	add.w	r3, r0, r4, lsl #2
            if(disp->screens[i] == obj) break;
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 8007c3c:	3901      	subs	r1, #1
 8007c3e:	e028      	b.n	8007c92 <obj_del_core+0xd2>
        obj_del_core(child);
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff ffbd 	bl	8007bc0 <obj_del_core>
 8007c46:	e7d0      	b.n	8007bea <obj_del_core+0x2a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8007c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c4a:	429d      	cmp	r5, r3
 8007c4c:	d002      	beq.n	8007c54 <obj_del_core+0x94>
 8007c4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c50:	429d      	cmp	r5, r3
 8007c52:	d103      	bne.n	8007c5c <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 8007c54:	4629      	mov	r1, r5
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7fa fc86 	bl	8002568 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 8007c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c5e:	429d      	cmp	r5, r3
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007c60:	6d23      	ldr	r3, [r4, #80]	; 0x50
            indev->proc.types.pointer.last_pressed = NULL;
 8007c62:	bf08      	it	eq
 8007c64:	6326      	streq	r6, [r4, #48]	; 0x30
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8007c66:	429f      	cmp	r7, r3
 8007c68:	d107      	bne.n	8007c7a <obj_del_core+0xba>
 8007c6a:	f7fa fd19 	bl	80026a0 <lv_indev_get_obj_act>
 8007c6e:	4285      	cmp	r5, r0
 8007c70:	d103      	bne.n	8007c7a <obj_del_core+0xba>
            lv_indev_reset(indev, obj);
 8007c72:	4629      	mov	r1, r5
 8007c74:	4620      	mov	r0, r4
 8007c76:	f7fa fc77 	bl	8002568 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	e7ca      	b.n	8007c14 <obj_del_core+0x54>
            if(disp->screens[i] == obj) break;
 8007c7e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8007c82:	429d      	cmp	r5, r3
 8007c84:	d0d8      	beq.n	8007c38 <obj_del_core+0x78>
        for(i = 0; i < disp->screen_cnt; i++) {
 8007c86:	3401      	adds	r4, #1
 8007c88:	e7d4      	b.n	8007c34 <obj_del_core+0x74>
            disp->screens[i] = disp->screens[i + 1];
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	3401      	adds	r4, #1
 8007c8e:	f843 2b04 	str.w	r2, [r3], #4
        for(i = id; i < disp->screen_cnt - 1; i++) {
 8007c92:	428c      	cmp	r4, r1
 8007c94:	d3f9      	bcc.n	8007c8a <obj_del_core+0xca>
        }
        disp->screen_cnt--;
 8007c96:	6271      	str	r1, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 8007c98:	0089      	lsls	r1, r1, #2
 8007c9a:	f00f ffd3 	bl	8017c44 <lv_mem_realloc>
 8007c9e:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->child_cnt--;
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children, obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 8007ca0:	4628      	mov	r0, r5
}
 8007ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_mem_free(obj);
 8007ca6:	f00f be35 	b.w	8017914 <lv_mem_free>
        uint32_t id = lv_obj_get_child_id(obj);
 8007caa:	f7ff ff6d 	bl	8007b88 <lv_obj_get_child_id>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 8007cae:	686b      	ldr	r3, [r5, #4]
 8007cb0:	689c      	ldr	r4, [r3, #8]
 8007cb2:	6861      	ldr	r1, [r4, #4]
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	3901      	subs	r1, #1
 8007cb8:	4288      	cmp	r0, r1
 8007cba:	d306      	bcc.n	8007cca <obj_del_core+0x10a>
        obj->parent->spec_attr->child_cnt--;
 8007cbc:	6061      	str	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children, obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	0089      	lsls	r1, r1, #2
 8007cc2:	f00f ffbf 	bl	8017c44 <lv_mem_realloc>
 8007cc6:	6020      	str	r0, [r4, #0]
 8007cc8:	e7ea      	b.n	8007ca0 <obj_del_core+0xe0>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8007cd0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007cd4:	f843 2c04 	str.w	r2, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 8007cd8:	e7e9      	b.n	8007cae <obj_del_core+0xee>
}
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	000fffff 	.word	0x000fffff

08007ce0 <lv_obj_del>:
{
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
 8007ce4:	f7fd fac8 	bl	8005278 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 8007ce8:	b1ed      	cbz	r5, 8007d26 <lv_obj_del+0x46>
    return obj->parent;
 8007cea:	686c      	ldr	r4, [r5, #4]
    if(par) {
 8007cec:	b1dc      	cbz	r4, 8007d26 <lv_obj_del+0x46>
    bool act_scr_del = false;
 8007cee:	2700      	movs	r7, #0
        lv_obj_scrollbar_invalidate(par);
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7ff f87c 	bl	8006dee <lv_obj_scrollbar_invalidate>
    lv_disp_t * disp = NULL;
 8007cf6:	463e      	mov	r6, r7
    obj_del_core(obj);
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7ff ff61 	bl	8007bc0 <obj_del_core>
    if(par) {
 8007cfe:	b174      	cbz	r4, 8007d1e <lv_obj_del+0x3e>
        lv_obj_scroll_to(par, 0, 0, LV_ANIM_OFF);
 8007d00:	2300      	movs	r3, #0
 8007d02:	4620      	mov	r0, r4
 8007d04:	461a      	mov	r2, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	f7fe fd22 	bl	8006750 <lv_obj_scroll_to>
        if(par->spec_attr) {
 8007d0c:	68a3      	ldr	r3, [r4, #8]
 8007d0e:	b10b      	cbz	r3, 8007d14 <lv_obj_del+0x34>
                par->spec_attr->scroll.x = 0;
 8007d10:	2200      	movs	r2, #0
 8007d12:	611a      	str	r2, [r3, #16]
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 8007d14:	2200      	movs	r2, #0
 8007d16:	2122      	movs	r1, #34	; 0x22
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f7fa f985 	bl	8002028 <lv_event_send>
    if(act_scr_del)  {
 8007d1e:	b10f      	cbz	r7, 8007d24 <lv_obj_del+0x44>
        disp->act_scr = NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	6133      	str	r3, [r6, #16]
}
 8007d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7ff fef8 	bl	8007b1c <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d0f8      	beq.n	8007d24 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
 8007d32:	6907      	ldr	r7, [r0, #16]
 8007d34:	2400      	movs	r4, #0
 8007d36:	1b7b      	subs	r3, r7, r5
 8007d38:	425f      	negs	r7, r3
 8007d3a:	415f      	adcs	r7, r3
 8007d3c:	e7dc      	b.n	8007cf8 <lv_obj_del+0x18>

08007d3e <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 8007d3e:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too*/
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007d40:	2200      	movs	r2, #0
{
 8007d42:	460e      	mov	r6, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007d44:	3114      	adds	r1, #20
{
 8007d46:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007d48:	f00f fa94 	bl	8017274 <_lv_area_is_in>
 8007d4c:	b910      	cbnz	r0, 8007d54 <lv_refr_get_top_obj+0x16>
    lv_obj_t * found_p = NULL;
 8007d4e:	2000      	movs	r0, #0
            }
        }
    }

    return found_p;
}
 8007d50:	b002      	add	sp, #8
 8007d52:	bdd0      	pop	{r4, r6, r7, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN) == false) {
 8007d54:	2101      	movs	r1, #1
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7fc f8e3 	bl	8003f22 <lv_obj_has_flag>
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1f5      	bne.n	8007d4e <lv_refr_get_top_obj+0x10>
        info.res = LV_COVER_RES_COVER;
 8007d62:	f88d 0000 	strb.w	r0, [sp]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8007d66:	466a      	mov	r2, sp
 8007d68:	2112      	movs	r1, #18
 8007d6a:	4630      	mov	r0, r6
        info.area = area_p;
 8007d6c:	9701      	str	r7, [sp, #4]
        lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8007d6e:	f7fa f95b 	bl	8002028 <lv_event_send>
        if(info.res == LV_COVER_RES_MASKED) return NULL;
 8007d72:	f89d 3000 	ldrb.w	r3, [sp]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d0e9      	beq.n	8007d4e <lv_refr_get_top_obj+0x10>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ff00 	bl	8007b80 <lv_obj_get_child_cnt>
 8007d80:	4284      	cmp	r4, r0
 8007d82:	d306      	bcc.n	8007d92 <lv_refr_get_top_obj+0x54>
            if(info.res == LV_COVER_RES_COVER) {
 8007d84:	f89d 3000 	ldrb.w	r3, [sp]
                found_p = obj;
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf0c      	ite	eq
 8007d8c:	4630      	moveq	r0, r6
 8007d8e:	2000      	movne	r0, #0
 8007d90:	e7de      	b.n	8007d50 <lv_refr_get_top_obj+0x12>
            lv_obj_t * child = lv_obj_get_child(obj, i);
 8007d92:	4621      	mov	r1, r4
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff fee4 	bl	8007b62 <lv_obj_get_child>
 8007d9a:	4601      	mov	r1, r0
            found_p = lv_refr_get_top_obj(area_p, child);
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff ffce 	bl	8007d3e <lv_refr_get_top_obj>
            if(found_p != NULL) {
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d1d4      	bne.n	8007d50 <lv_refr_get_top_obj+0x12>
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007da6:	3401      	adds	r4, #1
 8007da8:	e7e7      	b.n	8007d7a <lv_refr_get_top_obj+0x3c>

08007daa <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 8007daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dac:	460f      	mov	r7, r1
 8007dae:	b08b      	sub	sp, #44	; 0x2c
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 8007db0:	2101      	movs	r1, #1
{
 8007db2:	4604      	mov	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 8007db4:	f7fc f8b5 	bl	8003f22 <lv_obj_has_flag>
 8007db8:	4606      	mov	r6, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d14b      	bne.n	8007e56 <lv_refr_obj+0xac>
    /*Truncate the original mask to the coordinates of the parent
     *because the parent and its children are visible only here*/
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7fc ff6a 	bl	8004c98 <_lv_obj_get_ext_draw_size>
 8007dc4:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_area);
 8007dc6:	a904      	add	r1, sp, #16
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7fd f8b0 	bl	8004f2e <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8007dce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007dd2:	b2ab      	uxth	r3, r5
    obj_area.y1 -= ext_size;
    obj_area.x2 += ext_size;
    obj_area.y2 += ext_size;
 8007dd4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007dd8:	4639      	mov	r1, r7
    obj_area.x1 -= ext_size;
 8007dda:	1ad2      	subs	r2, r2, r3
 8007ddc:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
 8007de0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8007de4:	1ad2      	subs	r2, r2, r3
 8007de6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
 8007dea:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8007dee:	441a      	add	r2, r3
    obj_area.y2 += ext_size;
 8007df0:	4403      	add	r3, r0
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007df2:	a802      	add	r0, sp, #8
    obj_area.x2 += ext_size;
 8007df4:	f8ad 2014 	strh.w	r2, [sp, #20]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007df8:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
 8007dfa:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007dfe:	f00f f93a 	bl	8017076 <_lv_area_intersect>

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 8007e02:	b340      	cbz	r0, 8007e56 <lv_refr_obj+0xac>
        /*Redraw the object*/
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, &obj_ext_mask);
 8007e04:	aa02      	add	r2, sp, #8
 8007e06:	2114      	movs	r1, #20
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7fa f90d 	bl	8002028 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, &obj_ext_mask);
 8007e0e:	aa02      	add	r2, sp, #8
 8007e10:	2115      	movs	r1, #21
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7fa f908 	bl	8002028 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &obj_ext_mask);
 8007e18:	aa02      	add	r2, sp, #8
 8007e1a:	2116      	movs	r1, #22
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f7fa f903 	bl	8002028 <lv_event_send>
        draw_dsc.border_opa = LV_OPA_30;
        draw_dsc.border_color = debug_color;
        lv_draw_rect(&obj_ext_mask, &obj_ext_mask, &draw_dsc);
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 8007e22:	a904      	add	r1, sp, #16
 8007e24:	4620      	mov	r0, r4
 8007e26:	f7fd f882 	bl	8004f2e <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 8007e2a:	aa04      	add	r2, sp, #16
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	4668      	mov	r0, sp
 8007e30:	f00f f921 	bl	8017076 <_lv_area_intersect>
        if(union_ok != false) {
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d141      	bne.n	8007ebc <lv_refr_obj+0x112>
                }
            }
        }

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, &obj_ext_mask);
 8007e38:	aa02      	add	r2, sp, #8
 8007e3a:	2117      	movs	r1, #23
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f7fa f8f3 	bl	8002028 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, &obj_ext_mask);
 8007e42:	aa02      	add	r2, sp, #8
 8007e44:	2118      	movs	r1, #24
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7fa f8ee 	bl	8002028 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, &obj_ext_mask);
 8007e4c:	aa02      	add	r2, sp, #8
 8007e4e:	2119      	movs	r1, #25
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7fa f8e9 	bl	8002028 <lv_event_send>
    }
}
 8007e56:	b00b      	add	sp, #44	; 0x2c
 8007e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_t * child = lv_obj_get_child(obj, i);
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f7ff fe80 	bl	8007b62 <lv_obj_get_child>
 8007e62:	4606      	mov	r6, r0
                lv_obj_get_coords(child, &child_area);
 8007e64:	a908      	add	r1, sp, #32
 8007e66:	f7fd f862 	bl	8004f2e <lv_obj_get_coords>
                ext_size = _lv_obj_get_ext_draw_size(child);
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7fc ff14 	bl	8004c98 <_lv_obj_get_ext_draw_size>
                child_area.x1 -= ext_size;
 8007e70:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007e74:	b283      	uxth	r3, r0
                child_area.y2 += ext_size;
 8007e76:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007e7a:	4669      	mov	r1, sp
                child_area.x1 -= ext_size;
 8007e7c:	1ad2      	subs	r2, r2, r3
 8007e7e:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
 8007e82:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8007e86:	1ad2      	subs	r2, r2, r3
 8007e88:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
 8007e8c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007e90:	441a      	add	r2, r3
                child_area.y2 += ext_size;
 8007e92:	4403      	add	r3, r0
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007e94:	a806      	add	r0, sp, #24
                child_area.x2 += ext_size;
 8007e96:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007e9a:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
 8007e9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
 8007ea0:	f00f f8e9 	bl	8017076 <_lv_area_intersect>
                if(union_ok) {
 8007ea4:	b118      	cbz	r0, 8007eae <lv_refr_obj+0x104>
                    lv_refr_obj(child, &mask_child);
 8007ea6:	a906      	add	r1, sp, #24
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ff7e 	bl	8007daa <lv_refr_obj>
            for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8007eae:	3501      	adds	r5, #1
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f7ff fe65 	bl	8007b80 <lv_obj_get_child_cnt>
 8007eb6:	4285      	cmp	r5, r0
 8007eb8:	d3cf      	bcc.n	8007e5a <lv_refr_obj+0xb0>
 8007eba:	e7bd      	b.n	8007e38 <lv_refr_obj+0x8e>
 8007ebc:	4635      	mov	r5, r6
 8007ebe:	e7f7      	b.n	8007eb0 <lv_refr_obj+0x106>

08007ec0 <lv_refr_obj_and_children>:
{
 8007ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec4:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	b928      	cbnz	r0, 8007ed6 <lv_refr_obj_and_children+0x16>
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <lv_refr_obj_and_children+0x88>)
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f7fa f806 	bl	8001ede <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	b140      	cbz	r0, 8007ee8 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	4631      	mov	r1, r6
 8007eda:	f7ff ff66 	bl	8007daa <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f7ff fe3c 	bl	8007b5c <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
 8007ee4:	4604      	mov	r4, r0
    while(par != NULL) {
 8007ee6:	bb58      	cbnz	r0, 8007f40 <lv_refr_obj_and_children+0x80>
}
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lv_obj_t * child = lv_obj_get_child(par, i);
 8007eec:	4639      	mov	r1, r7
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff fe37 	bl	8007b62 <lv_obj_get_child>
            if(!go) {
 8007ef4:	f1b8 0f00 	cmp.w	r8, #0
 8007ef8:	d11e      	bne.n	8007f38 <lv_refr_obj_and_children+0x78>
                if(child == border_p) go = true;
 8007efa:	1a2b      	subs	r3, r5, r0
 8007efc:	f1d3 0800 	rsbs	r8, r3, #0
 8007f00:	eb48 0803 	adc.w	r8, r8, r3
        for(i = 0; i < lv_obj_get_child_cnt(par); i++) {
 8007f04:	3701      	adds	r7, #1
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7ff fe3a 	bl	8007b80 <lv_obj_get_child_cnt>
 8007f0c:	42b8      	cmp	r0, r7
 8007f0e:	d8ed      	bhi.n	8007eec <lv_refr_obj_and_children+0x2c>
        lv_event_send(par, LV_EVENT_DRAW_POST_BEGIN, (void*)mask_p);
 8007f10:	4632      	mov	r2, r6
 8007f12:	2117      	movs	r1, #23
 8007f14:	4620      	mov	r0, r4
        par = lv_obj_get_parent(par);
 8007f16:	4625      	mov	r5, r4
        lv_event_send(par, LV_EVENT_DRAW_POST_BEGIN, (void*)mask_p);
 8007f18:	f7fa f886 	bl	8002028 <lv_event_send>
        lv_event_send(par, LV_EVENT_DRAW_POST, (void*)mask_p);
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	2118      	movs	r1, #24
 8007f20:	4620      	mov	r0, r4
 8007f22:	f7fa f881 	bl	8002028 <lv_event_send>
        lv_event_send(par, LV_EVENT_DRAW_POST_END, (void*)mask_p);
 8007f26:	4632      	mov	r2, r6
 8007f28:	2119      	movs	r1, #25
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7fa f87c 	bl	8002028 <lv_event_send>
        par = lv_obj_get_parent(par);
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7ff fe13 	bl	8007b5c <lv_obj_get_parent>
 8007f36:	e7d5      	b.n	8007ee4 <lv_refr_obj_and_children+0x24>
                lv_refr_obj(child, mask_p);
 8007f38:	4631      	mov	r1, r6
 8007f3a:	f7ff ff36 	bl	8007daa <lv_refr_obj>
 8007f3e:	e7e1      	b.n	8007f04 <lv_refr_obj_and_children+0x44>
        for(i = 0; i < lv_obj_get_child_cnt(par); i++) {
 8007f40:	2700      	movs	r7, #0
        bool go = false;
 8007f42:	46b8      	mov	r8, r7
 8007f44:	e7df      	b.n	8007f06 <lv_refr_obj_and_children+0x46>
 8007f46:	bf00      	nop
 8007f48:	200029a8 	.word	0x200029a8

08007f4c <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(void)
{
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007f50:	4dad      	ldr	r5, [pc, #692]	; (8008208 <draw_buf_flush+0x2bc>)
{
 8007f52:	ed2d 8b02 	vpush	{d8}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007f56:	6828      	ldr	r0, [r5, #0]
{
 8007f58:	b091      	sub	sp, #68	; 0x44
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007f5a:	f00e fdd9 	bl	8016b10 <lv_disp_get_draw_buf>
    lv_color_t * color_p = draw_buf->buf_act;

    draw_buf->flushing = 1;
 8007f5e:	2301      	movs	r3, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007f60:	682f      	ldr	r7, [r5, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8007f62:	4604      	mov	r4, r0
    draw_buf->flushing = 1;
 8007f64:	6183      	str	r3, [r0, #24]
    lv_color_t * color_p = draw_buf->buf_act;
 8007f66:	6882      	ldr	r2, [r0, #8]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8007f68:	6838      	ldr	r0, [r7, #0]
 8007f6a:	6841      	ldr	r1, [r0, #4]
 8007f6c:	6a0e      	ldr	r6, [r1, #32]
 8007f6e:	f016 0f01 	tst.w	r6, #1
 8007f72:	462e      	mov	r6, r5
 8007f74:	d04d      	beq.n	8008012 <draw_buf_flush+0xc6>
 8007f76:	6a09      	ldr	r1, [r1, #32]
 8007f78:	078d      	lsls	r5, r1, #30
 8007f7a:	d54a      	bpl.n	8008012 <draw_buf_flush+0xc6>
    else draw_buf->flushing_last = 0;
 8007f7c:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 8007f7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007f80:	b113      	cbz	r3, 8007f88 <draw_buf_flush+0x3c>
 8007f82:	9201      	str	r2, [sp, #4]
 8007f84:	4798      	blx	r3
 8007f86:	9a01      	ldr	r2, [sp, #4]

    if(disp->driver->flush_cb) {
 8007f88:	6838      	ldr	r0, [r7, #0]
 8007f8a:	68c3      	ldr	r3, [r0, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80a0 	beq.w	80080d2 <draw_buf_flush+0x186>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8007f92:	7a01      	ldrb	r1, [r0, #8]
 8007f94:	f104 0510 	add.w	r5, r4, #16
 8007f98:	f011 0f18 	tst.w	r1, #24
 8007f9c:	ee08 5a10 	vmov	s16, r5
 8007fa0:	f000 8197 	beq.w	80082d2 <draw_buf_flush+0x386>
 8007fa4:	0789      	lsls	r1, r1, #30
 8007fa6:	f140 8194 	bpl.w	80082d2 <draw_buf_flush+0x386>
    lv_disp_drv_t * drv = disp_refr->driver;
 8007faa:	6830      	ldr	r0, [r6, #0]
            draw_buf_rotate(&draw_buf->area, draw_buf->buf_act);
 8007fac:	68a5      	ldr	r5, [r4, #8]
    lv_disp_drv_t * drv = disp_refr->driver;
 8007fae:	6807      	ldr	r7, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8007fb0:	7a3b      	ldrb	r3, [r7, #8]
 8007fb2:	f003 0203 	and.w	r2, r3, #3
 8007fb6:	2a03      	cmp	r2, #3
 8007fb8:	f000 808b 	beq.w	80080d2 <draw_buf_flush+0x186>
    if(drv->rotated == LV_DISP_ROT_180) {
 8007fbc:	f003 0218 	and.w	r2, r3, #24
 8007fc0:	2a10      	cmp	r2, #16
 8007fc2:	d133      	bne.n	800802c <draw_buf_flush+0xe0>
 8007fc4:	8aa0      	ldrh	r0, [r4, #20]
    uint32_t i = total - 1, j = 0;
 8007fc6:	f04f 3eff 	mov.w	lr, #4294967295
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007fca:	f8b4 c016 	ldrh.w	ip, [r4, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007fce:	8a21      	ldrh	r1, [r4, #16]
 8007fd0:	1c43      	adds	r3, r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007fd2:	8a66      	ldrh	r6, [r4, #18]
 8007fd4:	f10c 0201 	add.w	r2, ip, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007fd8:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007fda:	1b92      	subs	r2, r2, r6
 8007fdc:	fb13 e302 	smlabb	r3, r3, r2, lr
 8007fe0:	2200      	movs	r2, #0
    while(i > j) {
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d817      	bhi.n	8008016 <draw_buf_flush+0xca>
    area->y2 = drv->ver_res - area->y1 - 1;
 8007fe6:	887a      	ldrh	r2, [r7, #2]
 8007fe8:	883b      	ldrh	r3, [r7, #0]
 8007fea:	3a01      	subs	r2, #1
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b292      	uxth	r2, r2
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	1b96      	subs	r6, r2, r6
    area->y1 = drv->ver_res - tmp_coord - 1;
 8007ff4:	eba2 020c 	sub.w	r2, r2, ip
    area->x2 = drv->hor_res - area->x1 - 1;
 8007ff8:	1a59      	subs	r1, r3, r1
    area->x1 = drv->hor_res - tmp_coord - 1;
 8007ffa:	1a1b      	subs	r3, r3, r0
    area->y1 = drv->ver_res - tmp_coord - 1;
 8007ffc:	8262      	strh	r2, [r4, #18]
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
    TRACE_REFR("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2, color_p);
    drv->flush_cb(drv, area, color_p);
 8007ffe:	4638      	mov	r0, r7
    area->x2 = drv->hor_res - area->x1 - 1;
 8008000:	82a1      	strh	r1, [r4, #20]
    drv->flush_cb(drv, area, color_p);
 8008002:	462a      	mov	r2, r5
    area->x1 = drv->hor_res - tmp_coord - 1;
 8008004:	8223      	strh	r3, [r4, #16]
    drv->flush_cb(drv, area, color_p);
 8008006:	ee18 1a10 	vmov	r1, s16
 800800a:	68fb      	ldr	r3, [r7, #12]
    area->y2 = drv->ver_res - area->y1 - 1;
 800800c:	82e6      	strh	r6, [r4, #22]
    drv->flush_cb(drv, area, color_p);
 800800e:	4798      	blx	r3
}
 8008010:	e05f      	b.n	80080d2 <draw_buf_flush+0x186>
    else draw_buf->flushing_last = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	e7b2      	b.n	8007f7c <draw_buf_flush+0x30>
        tmp = color_p[i];
 8008016:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
        color_p[i] = color_p[j];
 800801a:	f835 8012 	ldrh.w	r8, [r5, r2, lsl #1]
 800801e:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
        i--;
 8008022:	3b01      	subs	r3, #1
        color_p[j] = tmp;
 8008024:	f825 e012 	strh.w	lr, [r5, r2, lsl #1]
        j++;
 8008028:	3201      	adds	r2, #1
 800802a:	e7da      	b.n	8007fe2 <draw_buf_flush+0x96>
    } else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800802c:	071b      	lsls	r3, r3, #28
 800802e:	d550      	bpl.n	80080d2 <draw_buf_flush+0x186>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008030:	f00e fd6e 	bl	8016b10 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008034:	8a23      	ldrh	r3, [r4, #16]
 8008036:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	1c53      	adds	r3, r2, #1
 800803e:	9004      	str	r0, [sp, #16]
 8008040:	9805      	ldr	r0, [sp, #20]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8008048:	1a1e      	subs	r6, r3, r0
 800804a:	9306      	str	r3, [sp, #24]
 800804c:	b2b3      	uxth	r3, r6
 800804e:	b236      	sxth	r6, r6
 8008050:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008052:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8008056:	930a      	str	r3, [sp, #40]	; 0x28
 8008058:	8a63      	ldrh	r3, [r4, #18]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	8ae3      	ldrh	r3, [r4, #22]
 800805e:	9801      	ldr	r0, [sp, #4]
 8008060:	3301      	adds	r3, #1
 8008062:	1a1b      	subs	r3, r3, r0
 8008064:	b21b      	sxth	r3, r3
 8008066:	9302      	str	r3, [sp, #8]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF/sizeof(lv_color_t)) / area_w), area_h);
 8008068:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800806c:	9802      	ldr	r0, [sp, #8]
 800806e:	fbb3 f3f6 	udiv	r3, r3, r6
 8008072:	4283      	cmp	r3, r0
 8008074:	bfa8      	it	ge
 8008076:	4603      	movge	r3, r0
 8008078:	930b      	str	r3, [sp, #44]	; 0x2c
        if(drv->rotated == LV_DISP_ROT_90) {
 800807a:	7a3b      	ldrb	r3, [r7, #8]
 800807c:	f003 0318 	and.w	r3, r3, #24
 8008080:	2b08      	cmp	r3, #8
 8008082:	d134      	bne.n	80080ee <draw_buf_flush+0x1a2>
            area->y2 = drv->ver_res - area->x1 - 1;
 8008084:	887b      	ldrh	r3, [r7, #2]
 8008086:	9905      	ldr	r1, [sp, #20]
 8008088:	1e5a      	subs	r2, r3, #1
 800808a:	1a52      	subs	r2, r2, r1
 800808c:	82e2      	strh	r2, [r4, #22]
            area->y1 = area->y2 - area_w + 1;
 800808e:	9a06      	ldr	r2, [sp, #24]
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	8263      	strh	r3, [r4, #18]
        draw_buf->flushing = 0;
 8008094:	2200      	movs	r2, #0
 8008096:	9b04      	ldr	r3, [sp, #16]
 8008098:	619a      	str	r2, [r3, #24]
    for(lv_coord_t i = 0; i < w/2; i++) {
 800809a:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
        lv_coord_t row = 0;
 800809e:	4690      	mov	r8, r2
        lv_color_t * rot_buf = NULL;
 80080a0:	4693      	mov	fp, r2
    for(lv_coord_t i = 0; i < w/2; i++) {
 80080a2:	105b      	asrs	r3, r3, #1
 80080a4:	930f      	str	r3, [sp, #60]	; 0x3c
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 80080a6:	1c73      	adds	r3, r6, #1
 80080a8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80080ac:	105b      	asrs	r3, r3, #1
 80080ae:	930e      	str	r3, [sp, #56]	; 0x38
 80080b0:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	930d      	str	r3, [sp, #52]	; 0x34
 80080b8:	9b07      	ldr	r3, [sp, #28]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	9309      	str	r3, [sp, #36]	; 0x24
        while(row < area_h) {
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	4543      	cmp	r3, r8
 80080c4:	dc16      	bgt.n	80080f4 <draw_buf_flush+0x1a8>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 80080c6:	f1bb 0f00 	cmp.w	fp, #0
 80080ca:	d002      	beq.n	80080d2 <draw_buf_flush+0x186>
 80080cc:	4658      	mov	r0, fp
 80080ce:	f00f fc2f 	bl	8017930 <lv_mem_buf_release>
    if(draw_buf->buf1 && draw_buf->buf2) {
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	b133      	cbz	r3, 80080e4 <draw_buf_flush+0x198>
 80080d6:	6862      	ldr	r2, [r4, #4]
 80080d8:	b122      	cbz	r2, 80080e4 <draw_buf_flush+0x198>
        if(draw_buf->buf_act == draw_buf->buf1)
 80080da:	68a1      	ldr	r1, [r4, #8]
            draw_buf->buf_act = draw_buf->buf2;
 80080dc:	428b      	cmp	r3, r1
 80080de:	bf08      	it	eq
 80080e0:	4613      	moveq	r3, r2
 80080e2:	60a3      	str	r3, [r4, #8]
}
 80080e4:	b011      	add	sp, #68	; 0x44
 80080e6:	ecbd 8b02 	vpop	{d8}
 80080ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            area->y1 = area->x1;
 80080ee:	8261      	strh	r1, [r4, #18]
            area->y2 = area->y1 + area_w - 1;
 80080f0:	82e2      	strh	r2, [r4, #22]
 80080f2:	e7cf      	b.n	8008094 <draw_buf_flush+0x148>
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080f8:	eba3 0308 	sub.w	r3, r3, r8
 80080fc:	4293      	cmp	r3, r2
 80080fe:	bfa8      	it	ge
 8008100:	4613      	movge	r3, r2
            draw_buf->flushing = 1;
 8008102:	9a04      	ldr	r2, [sp, #16]
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8008104:	9303      	str	r3, [sp, #12]
            draw_buf->flushing = 1;
 8008106:	2301      	movs	r3, #1
            lv_coord_t height = LV_MIN(max_row, area_h-row);
 8008108:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
            draw_buf->flushing = 1;
 800810c:	6193      	str	r3, [r2, #24]
            if((row == 0) && (area_h >= area_w)) {
 800810e:	f1b8 0f00 	cmp.w	r8, #0
 8008112:	f040 8088 	bne.w	8008226 <draw_buf_flush+0x2da>
 8008116:	9b02      	ldr	r3, [sp, #8]
 8008118:	429e      	cmp	r6, r3
 800811a:	f300 8084 	bgt.w	8008226 <draw_buf_flush+0x2da>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800811e:	7a3b      	ldrb	r3, [r7, #8]
    for(lv_coord_t i = 0; i < w/2; i++) {
 8008120:	46c1      	mov	r9, r8
 8008122:	4641      	mov	r1, r8
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8008124:	f003 0318 	and.w	r3, r3, #24
 8008128:	930c      	str	r3, [sp, #48]	; 0x30
    for(lv_coord_t i = 0; i < w/2; i++) {
 800812a:	b20b      	sxth	r3, r1
 800812c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800812e:	4293      	cmp	r3, r2
 8008130:	da46      	bge.n	80081c0 <draw_buf_flush+0x274>
 8008132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008134:	eba3 0c01 	sub.w	ip, r3, r1
 8008138:	2300      	movs	r3, #0
 800813a:	fa0f fc8c 	sxth.w	ip, ip
 800813e:	e023      	b.n	8008188 <draw_buf_flush+0x23c>
            lv_coord_t inv_j = (w - 1) - j;
 8008140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008142:	eb02 0a09 	add.w	sl, r2, r9
 8008146:	fb06 c202 	mla	r2, r6, r2, ip
 800814a:	1ac3      	subs	r3, r0, r3
            if(is_270) {
 800814c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800814e:	b21b      	sxth	r3, r3
 8008150:	2818      	cmp	r0, #24
 8008152:	f835 001a 	ldrh.w	r0, [r5, sl, lsl #1]
 8008156:	fb06 3e0c 	mla	lr, r6, ip, r3
 800815a:	f8ad 0020 	strh.w	r0, [sp, #32]
 800815e:	fb06 1303 	mla	r3, r6, r3, r1
 8008162:	d11c      	bne.n	800819e <draw_buf_flush+0x252>
    *a = *b;
 8008164:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8008168:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
    *b = *c;
 800816c:	f835 a01e 	ldrh.w	sl, [r5, lr, lsl #1]
 8008170:	f825 a013 	strh.w	sl, [r5, r3, lsl #1]
    *c = *d;
 8008174:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8008178:	f825 301e 	strh.w	r3, [r5, lr, lsl #1]
    *d = tmp;
 800817c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008180:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1)/2; j++) {
 8008184:	9b03      	ldr	r3, [sp, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800818c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8008190:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008194:	4282      	cmp	r2, r0
 8008196:	dbd3      	blt.n	8008140 <draw_buf_flush+0x1f4>
    for(lv_coord_t i = 0; i < w/2; i++) {
 8008198:	3101      	adds	r1, #1
 800819a:	44b1      	add	r9, r6
 800819c:	e7c5      	b.n	800812a <draw_buf_flush+0x1de>
    *a = *b;
 800819e:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 80081a2:	f825 001a 	strh.w	r0, [r5, sl, lsl #1]
    *b = *c;
 80081a6:	f835 a01e 	ldrh.w	sl, [r5, lr, lsl #1]
 80081aa:	f825 a012 	strh.w	sl, [r5, r2, lsl #1]
    *c = *d;
 80081ae:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 80081b2:	f825 201e 	strh.w	r2, [r5, lr, lsl #1]
    *d = tmp;
 80081b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80081ba:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
}
 80081be:	e7e1      	b.n	8008184 <draw_buf_flush+0x238>
                if(drv->rotated == LV_DISP_ROT_90) {
 80081c0:	7a3b      	ldrb	r3, [r7, #8]
 80081c2:	f003 0318 	and.w	r3, r3, #24
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d120      	bne.n	800820c <draw_buf_flush+0x2c0>
                    area->x1 = init_y_off;
 80081ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                    area->x2 = init_y_off + area_w - 1;
 80081cc:	9a07      	ldr	r2, [sp, #28]
                    area->x1 = init_y_off;
 80081ce:	8223      	strh	r3, [r4, #16]
                    area->x2 = init_y_off + area_w - 1;
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	4413      	add	r3, r2
 80081d6:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - area_w + 1;
 80081d8:	46b1      	mov	r9, r6
    drv->flush_cb(drv, area, color_p);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f1bb 0f00 	cmp.w	fp, #0
 80081e0:	bf14      	ite	ne
 80081e2:	465a      	movne	r2, fp
 80081e4:	462a      	moveq	r2, r5
 80081e6:	ee18 1a10 	vmov	r1, s16
 80081ea:	4638      	mov	r0, r7
 80081ec:	4798      	blx	r3
            while(draw_buf->flushing) {
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d167      	bne.n	80082c6 <draw_buf_flush+0x37a>
            color_p += area_w * height;
 80081f6:	fb09 f306 	mul.w	r3, r9, r6
            row += height;
 80081fa:	44c8      	add	r8, r9
            color_p += area_w * height;
 80081fc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            row += height;
 8008200:	fa0f f888 	sxth.w	r8, r8
 8008204:	e75c      	b.n	80080c0 <draw_buf_flush+0x174>
 8008206:	bf00      	nop
 8008208:	200029a8 	.word	0x200029a8
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800820c:	883b      	ldrh	r3, [r7, #0]
 800820e:	9a01      	ldr	r2, [sp, #4]
 8008210:	3b01      	subs	r3, #1
 8008212:	1a9b      	subs	r3, r3, r2
                    area->x1 = area->x2 - area_w + 1;
 8008214:	9a05      	ldr	r2, [sp, #20]
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8008216:	b29b      	uxth	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 8008218:	3201      	adds	r2, #1
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800821a:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - area_w + 1;
 800821c:	4413      	add	r3, r2
 800821e:	9a06      	ldr	r2, [sp, #24]
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	8223      	strh	r3, [r4, #16]
 8008224:	e7d8      	b.n	80081d8 <draw_buf_flush+0x28c>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8008226:	f1bb 0f00 	cmp.w	fp, #0
 800822a:	d104      	bne.n	8008236 <draw_buf_flush+0x2ea>
 800822c:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8008230:	f00f fd22 	bl	8017c78 <lv_mem_buf_get>
 8008234:	4683      	mov	fp, r0
    uint32_t invert = (area_w * area_h) - 1;
 8008236:	fb06 f309 	mul.w	r3, r6, r9
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800823a:	7a38      	ldrb	r0, [r7, #8]
    for(lv_coord_t y = 0; y < area_h; y++) {
 800823c:	46ae      	mov	lr, r5
 800823e:	2100      	movs	r1, #0
    uint32_t initial_i = ((area_w - 1) * area_h);
 8008240:	eba3 0a09 	sub.w	sl, r3, r9
 8008244:	3b01      	subs	r3, #1
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8008246:	f000 0018 	and.w	r0, r0, #24
    for(lv_coord_t y = 0; y < area_h; y++) {
 800824a:	eba3 030a 	sub.w	r3, r3, sl
 800824e:	9308      	str	r3, [sp, #32]
 8008250:	b20a      	sxth	r2, r1
 8008252:	4591      	cmp	r9, r2
 8008254:	dc10      	bgt.n	8008278 <draw_buf_flush+0x32c>
                if(drv->rotated == LV_DISP_ROT_90) {
 8008256:	7a3b      	ldrb	r3, [r7, #8]
 8008258:	fa1f f188 	uxth.w	r1, r8
 800825c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008260:	f003 0318 	and.w	r3, r3, #24
 8008264:	2b08      	cmp	r3, #8
 8008266:	d123      	bne.n	80082b0 <draw_buf_flush+0x364>
                    area->x1 = init_y_off + row;
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	440b      	add	r3, r1
 800826c:	b29b      	uxth	r3, r3
 800826e:	8223      	strh	r3, [r4, #16]
                    area->x2 = init_y_off + row + height - 1;
 8008270:	3b01      	subs	r3, #1
 8008272:	4413      	add	r3, r2
 8008274:	82a3      	strh	r3, [r4, #20]
 8008276:	e7b0      	b.n	80081da <draw_buf_flush+0x28e>
        if(invert_i)
 8008278:	2818      	cmp	r0, #24
 800827a:	eb01 020a 	add.w	r2, r1, sl
    for(lv_coord_t i = 0; i < w/2; i++) {
 800827e:	f04f 0c00 	mov.w	ip, #0
 8008282:	bf04      	itt	eq
 8008284:	9b08      	ldreq	r3, [sp, #32]
 8008286:	1a5a      	subeq	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 8008288:	fa0f f38c 	sxth.w	r3, ip
 800828c:	429e      	cmp	r6, r3
 800828e:	dc03      	bgt.n	8008298 <draw_buf_flush+0x34c>
 8008290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008292:	3101      	adds	r1, #1
 8008294:	449e      	add	lr, r3
    for(lv_coord_t y = 0; y < area_h; y++) {
 8008296:	e7db      	b.n	8008250 <draw_buf_flush+0x304>
            rot_buf[i] = *(orig_color_p++);
 8008298:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
            if(invert_i)
 800829c:	2818      	cmp	r0, #24
 800829e:	f10c 0c01 	add.w	ip, ip, #1
            rot_buf[i] = *(orig_color_p++);
 80082a2:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
                i += area_h;
 80082a6:	bf0c      	ite	eq
 80082a8:	444a      	addeq	r2, r9
                i -= area_h;
 80082aa:	eba2 0209 	subne.w	r2, r2, r9
        for(lv_coord_t x = 0; x < area_w; x++) {
 80082ae:	e7eb      	b.n	8008288 <draw_buf_flush+0x33c>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 80082b0:	883b      	ldrh	r3, [r7, #0]
 80082b2:	9801      	ldr	r0, [sp, #4]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	1a1b      	subs	r3, r3, r0
 80082b8:	1a5b      	subs	r3, r3, r1
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	82a3      	strh	r3, [r4, #20]
                    area->x1 = area->x2 - height + 1;
 80082be:	3301      	adds	r3, #1
 80082c0:	1a9b      	subs	r3, r3, r2
 80082c2:	8223      	strh	r3, [r4, #16]
 80082c4:	e789      	b.n	80081da <draw_buf_flush+0x28e>
                if(drv->wait_cb) drv->wait_cb(drv);
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d090      	beq.n	80081ee <draw_buf_flush+0x2a2>
 80082cc:	4638      	mov	r0, r7
 80082ce:	4798      	blx	r3
 80082d0:	e78d      	b.n	80081ee <draw_buf_flush+0x2a2>
    drv->flush_cb(drv, area, color_p);
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	e69a      	b.n	800800e <draw_buf_flush+0xc2>

080082d8 <lv_refr_area_part>:
{
 80082d8:	b570      	push	{r4, r5, r6, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80082da:	4c46      	ldr	r4, [pc, #280]	; (80083f4 <lv_refr_area_part+0x11c>)
{
 80082dc:	b094      	sub	sp, #80	; 0x50
 80082de:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	f00e fc15 	bl	8016b10 <lv_disp_get_draw_buf>
 80082e6:	4605      	mov	r5, r0
        if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 80082e8:	6822      	ldr	r2, [r4, #0]
    while(draw_buf->flushing) {
 80082ea:	69ab      	ldr	r3, [r5, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d168      	bne.n	80083c2 <lv_refr_area_part+0xea>
    _lv_area_intersect(&start_mask, area_p, &draw_buf->area);
 80082f0:	f105 0210 	add.w	r2, r5, #16
 80082f4:	4631      	mov	r1, r6
 80082f6:	a803      	add	r0, sp, #12
 80082f8:	f00e febd 	bl	8017076 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	f7f9 fdee 	bl	8001ede <lv_disp_get_scr_act>
 8008302:	4601      	mov	r1, r0
 8008304:	a803      	add	r0, sp, #12
 8008306:	f7ff fd1a 	bl	8007d3e <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
 800830a:	6823      	ldr	r3, [r4, #0]
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 800830c:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 800830e:	695d      	ldr	r5, [r3, #20]
 8008310:	2d00      	cmp	r5, #0
 8008312:	d06c      	beq.n	80083ee <lv_refr_area_part+0x116>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
 8008314:	4629      	mov	r1, r5
 8008316:	a803      	add	r0, sp, #12
 8008318:	f7ff fd11 	bl	8007d3e <lv_refr_get_top_obj>
 800831c:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800831e:	bb5e      	cbnz	r6, 8008378 <lv_refr_area_part+0xa0>
 8008320:	bb50      	cbnz	r0, 8008378 <lv_refr_area_part+0xa0>
        if(disp_refr->bg_img) {
 8008322:	6823      	ldr	r3, [r4, #0]
            lv_draw_img_dsc_init(&dsc);
 8008324:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
 8008326:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8008328:	2d00      	cmp	r5, #0
 800832a:	d050      	beq.n	80083ce <lv_refr_area_part+0xf6>
            lv_draw_img_dsc_init(&dsc);
 800832c:	f002 f864 	bl	800a3f8 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
 8008330:	6823      	ldr	r3, [r4, #0]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8008332:	a902      	add	r1, sp, #8
            dsc.opa = disp_refr->bg_opa;
 8008334:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8008338:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800833c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800833e:	f006 ffdd 	bl	800f2fc <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8008342:	2801      	cmp	r0, #1
 8008344:	d117      	bne.n	8008376 <lv_refr_area_part+0x9e>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
 8008346:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800834a:	a805      	add	r0, sp, #20
 800834c:	9b02      	ldr	r3, [sp, #8]
 800834e:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8008352:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8008356:	3a01      	subs	r2, #1
 8008358:	3b01      	subs	r3, #1
 800835a:	b212      	sxth	r2, r2
 800835c:	b21b      	sxth	r3, r3
 800835e:	9200      	str	r2, [sp, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	4611      	mov	r1, r2
 8008364:	f00e fe48 	bl	8016ff8 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	ab07      	add	r3, sp, #28
 800836c:	a903      	add	r1, sp, #12
 800836e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008370:	a805      	add	r0, sp, #20
 8008372:	f002 f875 	bl	800a460 <lv_draw_img>
            }
 8008376:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	6958      	ldr	r0, [r3, #20]
 800837c:	b128      	cbz	r0, 800838a <lv_refr_area_part+0xb2>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
 800837e:	a903      	add	r1, sp, #12
 8008380:	2d00      	cmp	r5, #0
 8008382:	bf18      	it	ne
 8008384:	4628      	movne	r0, r5
 8008386:	f7ff fd9b 	bl	8007ec0 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
 800838a:	b90e      	cbnz	r6, 8008390 <lv_refr_area_part+0xb8>
        top_act_scr = disp_refr->act_scr;
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	691e      	ldr	r6, [r3, #16]
    lv_refr_obj_and_children(top_act_scr, &start_mask);
 8008390:	a903      	add	r1, sp, #12
 8008392:	4630      	mov	r0, r6
 8008394:	f7ff fd94 	bl	8007ec0 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	f7f9 fdba 	bl	8001f12 <lv_disp_get_layer_top>
 800839e:	a903      	add	r1, sp, #12
 80083a0:	f7ff fd8e 	bl	8007ec0 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	f7f9 fdbb 	bl	8001f20 <lv_disp_get_layer_sys>
 80083aa:	a903      	add	r1, sp, #12
 80083ac:	f7ff fd88 	bl	8007ec0 <lv_refr_obj_and_children>
    if(disp_refr->driver->full_refresh == false) {
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	7a1b      	ldrb	r3, [r3, #8]
 80083b6:	07db      	lsls	r3, r3, #31
 80083b8:	d401      	bmi.n	80083be <lv_refr_area_part+0xe6>
        draw_buf_flush();
 80083ba:	f7ff fdc7 	bl	8007f4c <draw_buf_flush>
}
 80083be:	b014      	add	sp, #80	; 0x50
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
        if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 80083c2:	6810      	ldr	r0, [r2, #0]
 80083c4:	69c3      	ldr	r3, [r0, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d08f      	beq.n	80082ea <lv_refr_area_part+0x12>
 80083ca:	4798      	blx	r3
 80083cc:	e78c      	b.n	80082e8 <lv_refr_area_part+0x10>
            lv_draw_rect_dsc_init(&dsc);
 80083ce:	f004 fc0b 	bl	800cbe8 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 80083d2:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 80083d4:	a903      	add	r1, sp, #12
            dsc.bg_color = disp_refr->bg_color;
 80083d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 80083d8:	4608      	mov	r0, r1
            dsc.bg_color = disp_refr->bg_color;
 80083da:	f8ad 2020 	strh.w	r2, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 80083de:	aa07      	add	r2, sp, #28
            dsc.bg_opa = disp_refr->bg_opa;
 80083e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80083e4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
            lv_draw_rect(&start_mask, &start_mask, &dsc);
 80083e8:	f004 fc20 	bl	800cc2c <lv_draw_rect>
 80083ec:	e7c4      	b.n	8008378 <lv_refr_area_part+0xa0>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d1c2      	bne.n	8008378 <lv_refr_area_part+0xa0>
 80083f2:	e796      	b.n	8008322 <lv_refr_area_part+0x4a>
 80083f4:	200029a8 	.word	0x200029a8

080083f8 <_lv_refr_init>:
}
 80083f8:	4770      	bx	lr

080083fa <_lv_inv_area>:
{
 80083fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083fc:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 80083fe:	4604      	mov	r4, r0
 8008400:	b918      	cbnz	r0, 800840a <_lv_inv_area+0x10>
 8008402:	f00e fb41 	bl	8016a88 <lv_disp_get_default>
    if(!disp) return;
 8008406:	4604      	mov	r4, r0
 8008408:	b110      	cbz	r0, 8008410 <_lv_inv_area+0x16>
    if(area_p == NULL) {
 800840a:	b91d      	cbnz	r5, 8008414 <_lv_inv_area+0x1a>
        disp->inv_p = 0;
 800840c:	f8a4 5150 	strh.w	r5, [r4, #336]	; 0x150
}
 8008410:	b004      	add	sp, #16
 8008412:	bd70      	pop	{r4, r5, r6, pc}
    scr_area.x1 = 0;
 8008414:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8008416:	4620      	mov	r0, r4
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8008418:	466e      	mov	r6, sp
    scr_area.x1 = 0;
 800841a:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800841c:	f00e fb3a 	bl	8016a94 <lv_disp_get_hor_res>
 8008420:	3801      	subs	r0, #1
 8008422:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008426:	4620      	mov	r0, r4
 8008428:	f00e fb44 	bl	8016ab4 <lv_disp_get_ver_res>
 800842c:	3801      	subs	r0, #1
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800842e:	4632      	mov	r2, r6
 8008430:	4629      	mov	r1, r5
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8008432:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 8008436:	a802      	add	r0, sp, #8
 8008438:	f00e fe1d 	bl	8017076 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 800843c:	2800      	cmp	r0, #0
 800843e:	d0e7      	beq.n	8008410 <_lv_inv_area+0x16>
    if(disp->driver->full_refresh) {
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	7a03      	ldrb	r3, [r0, #8]
 8008444:	07db      	lsls	r3, r3, #31
 8008446:	d50c      	bpl.n	8008462 <_lv_inv_area+0x68>
        disp->inv_areas[0] = scr_area;
 8008448:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800844c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008450:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 8008454:	2301      	movs	r3, #1
    lv_timer_resume(disp->refr_timer);
 8008456:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 8008458:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    lv_timer_resume(disp->refr_timer);
 800845c:	f010 faff 	bl	8018a5e <lv_timer_resume>
 8008460:	e7d6      	b.n	8008410 <_lv_inv_area+0x16>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 8008462:	6903      	ldr	r3, [r0, #16]
 8008464:	b10b      	cbz	r3, 800846a <_lv_inv_area+0x70>
 8008466:	a902      	add	r1, sp, #8
 8008468:	4798      	blx	r3
{
 800846a:	2500      	movs	r5, #0
    for(i = 0; i < disp->inv_p; i++) {
 800846c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 8008470:	b2aa      	uxth	r2, r5
 8008472:	4293      	cmp	r3, r2
 8008474:	d813      	bhi.n	800849e <_lv_inv_area+0xa4>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 8008476:	2b1f      	cmp	r3, #31
 8008478:	d81d      	bhi.n	80084b6 <_lv_inv_area+0xbc>
    dest->x1 = src->x1;
 800847a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800847e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8008482:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 8008484:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8008488:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 800848a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800848e:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 8008490:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8008494:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 8008496:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800849a:	3301      	adds	r3, #1
 800849c:	e7db      	b.n	8008456 <_lv_inv_area+0x5c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800849e:	b2a9      	uxth	r1, r5
 80084a0:	2200      	movs	r2, #0
 80084a2:	a802      	add	r0, sp, #8
 80084a4:	3501      	adds	r5, #1
 80084a6:	3106      	adds	r1, #6
 80084a8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80084ac:	f00e fee2 	bl	8017274 <_lv_area_is_in>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0db      	beq.n	800846c <_lv_inv_area+0x72>
 80084b4:	e7ac      	b.n	8008410 <_lv_inv_area+0x16>
        disp->inv_p = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 80084bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80084c0:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 80084c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80084c6:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 80084c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80084cc:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 80084ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80084d2:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 80084d4:	e7df      	b.n	8008496 <_lv_inv_area+0x9c>
	...

080084d8 <_lv_refr_get_disp_refreshing>:
}
 80084d8:	4b01      	ldr	r3, [pc, #4]	; (80084e0 <_lv_refr_get_disp_refreshing+0x8>)
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	200029a8 	.word	0x200029a8

080084e4 <_lv_disp_refr_timer>:
{
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	4605      	mov	r5, r0
    disp_refr = tmr->user_data;
 80084ea:	4cb9      	ldr	r4, [pc, #740]	; (80087d0 <_lv_disp_refr_timer+0x2ec>)
{
 80084ec:	ed2d 8b02 	vpush	{d8}
 80084f0:	b089      	sub	sp, #36	; 0x24
    uint32_t start = lv_tick_get();
 80084f2:	f00e fb7d 	bl	8016bf0 <lv_tick_get>
    disp_refr = tmr->user_data;
 80084f6:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
 80084f8:	ee08 0a90 	vmov	s17, r0
    lv_timer_pause(tmr);
 80084fc:	4628      	mov	r0, r5
    disp_refr = tmr->user_data;
 80084fe:	6023      	str	r3, [r4, #0]
    lv_timer_pause(tmr);
 8008500:	f010 faa8 	bl	8018a54 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	6918      	ldr	r0, [r3, #16]
 8008508:	f7fd fb1e 	bl	8005b48 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	6958      	ldr	r0, [r3, #20]
 8008510:	b108      	cbz	r0, 8008516 <_lv_disp_refr_timer+0x32>
 8008512:	f7fd fb19 	bl	8005b48 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	69d8      	ldr	r0, [r3, #28]
 800851a:	f7fd fb15 	bl	8005b48 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6a18      	ldr	r0, [r3, #32]
 8008522:	f7fd fb11 	bl	8005b48 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	2a00      	cmp	r2, #0
 800852c:	d167      	bne.n	80085fe <_lv_disp_refr_timer+0x11a>
        disp_refr->inv_p = 0;
 800852e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 8008532:	b009      	add	sp, #36	; 0x24
 8008534:	ecbd 8b02 	vpop	{d8}
 8008538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800853c:	4433      	add	r3, r6
 800853e:	f893 5130 	ldrb.w	r5, [r3, #304]	; 0x130
 8008542:	b1b5      	cbz	r5, 8008572 <_lv_disp_refr_timer+0x8e>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8008544:	3601      	adds	r6, #1
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f8b3 7150 	ldrh.w	r7, [r3, #336]	; 0x150
 800854c:	42be      	cmp	r6, r7
 800854e:	d3f5      	bcc.n	800853c <_lv_disp_refr_timer+0x58>
    px_num = 0;
 8008550:	4aa0      	ldr	r2, [pc, #640]	; (80087d4 <_lv_disp_refr_timer+0x2f0>)
 8008552:	2100      	movs	r1, #0
 8008554:	6011      	str	r1, [r2, #0]
    if(disp_refr->inv_p == 0) return;
 8008556:	2f00      	cmp	r7, #0
 8008558:	d155      	bne.n	8008606 <_lv_disp_refr_timer+0x122>
    if(disp_refr->inv_p != 0) {
 800855a:	4b9d      	ldr	r3, [pc, #628]	; (80087d0 <_lv_disp_refr_timer+0x2ec>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 8008562:	2a00      	cmp	r2, #0
 8008564:	f040 8165 	bne.w	8008832 <_lv_disp_refr_timer+0x34e>
    lv_mem_buf_free_all();
 8008568:	f00f f9f6 	bl	8017958 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800856c:	f00e f9e6 	bl	801693c <_lv_font_clean_up_fmt_txt>
    TRACE_REFR("finished");
 8008570:	e7df      	b.n	8008532 <_lv_disp_refr_timer+0x4e>
 8008572:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 8008576:	f10a 0930 	add.w	r9, sl, #48	; 0x30
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800857a:	6820      	ldr	r0, [r4, #0]
 800857c:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 8008580:	429d      	cmp	r5, r3
 8008582:	d2df      	bcs.n	8008544 <_lv_disp_refr_timer+0x60>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8008584:	1943      	adds	r3, r0, r5
 8008586:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800858a:	2b00      	cmp	r3, #0
 800858c:	d135      	bne.n	80085fa <_lv_disp_refr_timer+0x116>
 800858e:	42ae      	cmp	r6, r5
 8008590:	d033      	beq.n	80085fa <_lv_disp_refr_timer+0x116>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8008592:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8008596:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800859a:	eb00 010b 	add.w	r1, r0, fp
 800859e:	4448      	add	r0, r9
 80085a0:	f00e fe4b 	bl	801723a <_lv_area_is_on>
 80085a4:	b348      	cbz	r0, 80085fa <_lv_disp_refr_timer+0x116>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 80085a6:	6821      	ldr	r1, [r4, #0]
 80085a8:	a806      	add	r0, sp, #24
 80085aa:	eb01 020b 	add.w	r2, r1, fp
 80085ae:	4449      	add	r1, r9
 80085b0:	f00e fd8b 	bl	80170ca <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80085b4:	a806      	add	r0, sp, #24
 80085b6:	f00e fd30 	bl	801701a <lv_area_get_size>
 80085ba:	9001      	str	r0, [sp, #4]
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	4448      	add	r0, r9
 80085c0:	f00e fd2b 	bl	801701a <lv_area_get_size>
 80085c4:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80085c6:	6820      	ldr	r0, [r4, #0]
 80085c8:	4458      	add	r0, fp
 80085ca:	f00e fd26 	bl	801701a <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	4407      	add	r7, r0
 80085d2:	42bb      	cmp	r3, r7
 80085d4:	d211      	bcs.n	80085fa <_lv_disp_refr_timer+0x116>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80085d6:	6823      	ldr	r3, [r4, #0]
    dest->x1 = src->x1;
 80085d8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80085dc:	eb03 020a 	add.w	r2, r3, sl
                disp_refr->inv_area_joined[join_from] = 1;
 80085e0:	442b      	add	r3, r5
 80085e2:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 80085e4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80085e8:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 80085ea:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80085ee:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 80085f0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80085f4:	86d1      	strh	r1, [r2, #54]	; 0x36
 80085f6:	f883 8130 	strb.w	r8, [r3, #304]	; 0x130
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80085fa:	3501      	adds	r5, #1
 80085fc:	e7bd      	b.n	800857a <_lv_disp_refr_timer+0x96>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 80085fe:	2600      	movs	r6, #0
                disp_refr->inv_area_joined[join_from] = 1;
 8008600:	f04f 0801 	mov.w	r8, #1
 8008604:	e79f      	b.n	8008546 <_lv_disp_refr_timer+0x62>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8008606:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
 8008608:	f503 7298 	add.w	r2, r3, #304	; 0x130
 800860c:	5dd1      	ldrb	r1, [r2, r7]
 800860e:	b111      	cbz	r1, 8008616 <_lv_disp_refr_timer+0x132>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8008610:	3f01      	subs	r7, #1
 8008612:	d2fb      	bcs.n	800860c <_lv_disp_refr_timer+0x128>
    int32_t last_i = 0;
 8008614:	2700      	movs	r7, #0
    disp_refr->driver->draw_buf->last_area = 0;
 8008616:	681b      	ldr	r3, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8008618:	f04f 0b00 	mov.w	fp, #0
 800861c:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80087d0 <_lv_disp_refr_timer+0x2ec>
    disp_refr->driver->draw_buf->last_area = 0;
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008626:	f36f 0200 	bfc	r2, #0, #1
 800862a:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver->draw_buf->last_part = 0;
 800862e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008632:	f36f 0241 	bfc	r2, #1, #1
 8008636:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800863a:	f8d9 5000 	ldr.w	r5, [r9]
 800863e:	f8b5 3150 	ldrh.w	r3, [r5, #336]	; 0x150
 8008642:	459b      	cmp	fp, r3
 8008644:	da89      	bge.n	800855a <_lv_disp_refr_timer+0x76>
        if(disp_refr->inv_area_joined[i] == 0) {
 8008646:	eb05 030b 	add.w	r3, r5, fp
 800864a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800864e:	2b00      	cmp	r3, #0
 8008650:	f040 8098 	bne.w	8008784 <_lv_disp_refr_timer+0x2a0>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 8008654:	6829      	ldr	r1, [r5, #0]
 8008656:	45bb      	cmp	fp, r7
 8008658:	684b      	ldr	r3, [r1, #4]
 800865a:	d105      	bne.n	8008668 <_lv_disp_refr_timer+0x184>
 800865c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008660:	f042 0201 	orr.w	r2, r2, #1
 8008664:	f883 2020 	strb.w	r2, [r3, #32]
            disp_refr->driver->draw_buf->last_part = 0;
 8008668:	f893 2020 	ldrb.w	r2, [r3, #32]
 800866c:	ea4f 08cb 	mov.w	r8, fp, lsl #3
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8008670:	4628      	mov	r0, r5
            disp_refr->driver->draw_buf->last_part = 0;
 8008672:	f36f 0241 	bfc	r2, #1, #1
 8008676:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
 800867a:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800867e:	9302      	str	r3, [sp, #8]
 8008680:	18eb      	adds	r3, r5, r3
 8008682:	ee08 3a10 	vmov	s16, r3
    if(disp_refr->driver->full_refresh) {
 8008686:	7a0b      	ldrb	r3, [r1, #8]
 8008688:	07da      	lsls	r2, r3, #31
 800868a:	d51d      	bpl.n	80086c8 <_lv_disp_refr_timer+0x1e4>
        draw_buf->area.x1        = 0;
 800868c:	2600      	movs	r6, #0
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800868e:	f00e fa3f 	bl	8016b10 <lv_disp_get_draw_buf>
 8008692:	4605      	mov	r5, r0
        draw_buf->area.x1        = 0;
 8008694:	8206      	strh	r6, [r0, #16]
        draw_buf->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 8008696:	6820      	ldr	r0, [r4, #0]
 8008698:	f00e f9fc 	bl	8016a94 <lv_disp_get_hor_res>
 800869c:	3801      	subs	r0, #1
        draw_buf->area.y1        = 0;
 800869e:	826e      	strh	r6, [r5, #18]
        draw_buf->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 80086a0:	82a8      	strh	r0, [r5, #20]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 80086a2:	6820      	ldr	r0, [r4, #0]
 80086a4:	f00e fa06 	bl	8016ab4 <lv_disp_get_ver_res>
        disp_refr->driver->draw_buf->last_part = 1;
 80086a8:	6823      	ldr	r3, [r4, #0]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 80086aa:	3801      	subs	r0, #1
        disp_refr->driver->draw_buf->last_part = 1;
 80086ac:	681b      	ldr	r3, [r3, #0]
        draw_buf->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 80086ae:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver->draw_buf->last_part = 1;
 80086b0:	685a      	ldr	r2, [r3, #4]
            lv_refr_area_part(area_p);
 80086b2:	ee18 0a10 	vmov	r0, s16
            disp_refr->driver->draw_buf->last_part = 1;
 80086b6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80086ba:	f043 0302 	orr.w	r3, r3, #2
 80086be:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
 80086c2:	f7ff fe09 	bl	80082d8 <lv_refr_area_part>
 80086c6:	e053      	b.n	8008770 <_lv_disp_refr_timer+0x28c>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 80086c8:	4445      	add	r5, r8
 80086ca:	f00e fa21 	bl	8016b10 <lv_disp_get_draw_buf>
 80086ce:	4606      	mov	r6, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80086d0:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
 80086d4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80086d6:	f108 0801 	add.w	r8, r8, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80086da:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80086dc:	eba8 0803 	sub.w	r8, r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80086e0:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
 80086e4:	f103 0a01 	add.w	sl, r3, #1
 80086e8:	9301      	str	r3, [sp, #4]
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 80086ea:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <_lv_disp_refr_timer+0x2ec>)
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80086ec:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80086f0:	ebaa 0a02 	sub.w	sl, sl, r2
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	f00e f9dd 	bl	8016ab4 <lv_disp_get_ver_res>
        lv_coord_t y2 =
 80086fa:	9b01      	ldr	r3, [sp, #4]
 80086fc:	fa0f fa8a 	sxth.w	sl, sl
 8008700:	4283      	cmp	r3, r0
 8008702:	db42      	blt.n	800878a <_lv_disp_refr_timer+0x2a6>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8008704:	4b32      	ldr	r3, [pc, #200]	; (80087d0 <_lv_disp_refr_timer+0x2ec>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	f00e f9d4 	bl	8016ab4 <lv_disp_get_ver_res>
 800870c:	3801      	subs	r0, #1
        lv_coord_t y2 =
 800870e:	b203      	sxth	r3, r0
        int32_t max_row = (uint32_t)draw_buf->size / w;
 8008710:	68f2      	ldr	r2, [r6, #12]
 8008712:	fbb2 f8f8 	udiv	r8, r2, r8
        if(max_row > h) max_row = h;
 8008716:	45c2      	cmp	sl, r8
 8008718:	4652      	mov	r2, sl
 800871a:	bfa8      	it	ge
 800871c:	4642      	movge	r2, r8
 800871e:	9201      	str	r2, [sp, #4]
        if(disp_refr->driver->rounder_cb) {
 8008720:	4a2b      	ldr	r2, [pc, #172]	; (80087d0 <_lv_disp_refr_timer+0x2ec>)
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	6912      	ldr	r2, [r2, #16]
 8008728:	2a00      	cmp	r2, #0
 800872a:	d035      	beq.n	8008798 <_lv_disp_refr_timer+0x2b4>
            tmp.x1 = 0;
 800872c:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
 800872e:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
            tmp.x1 = 0;
 8008732:	9206      	str	r2, [sp, #24]
            tmp.x2 = 0;
 8008734:	f8ad 201c 	strh.w	r2, [sp, #28]
                disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8008738:	f8d9 2000 	ldr.w	r2, [r9]
 800873c:	46c2      	mov	sl, r8
 800873e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008742:	a906      	add	r1, sp, #24
 8008744:	6810      	ldr	r0, [r2, #0]
 8008746:	fa0f f888 	sxth.w	r8, r8
 800874a:	9303      	str	r3, [sp, #12]
 800874c:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
 800874e:	f8ad 801e 	strh.w	r8, [sp, #30]
                disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 8008752:	4790      	blx	r2
 8008754:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8008758:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800875c:	3101      	adds	r1, #1
                if(lv_area_get_height(&tmp) <= max_row) break;
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	1a8a      	subs	r2, r1, r2
 8008762:	b212      	sxth	r2, r2
 8008764:	4293      	cmp	r3, r2
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	da12      	bge.n	8008790 <_lv_disp_refr_timer+0x2ac>
            } while(h_tmp > 0);
 800876a:	f1b8 0f00 	cmp.w	r8, #0
 800876e:	dce3      	bgt.n	8008738 <_lv_disp_refr_timer+0x254>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	f8d9 0000 	ldr.w	r0, [r9]
 8008776:	4418      	add	r0, r3
 8008778:	f00e fc4f 	bl	801701a <lv_area_get_size>
 800877c:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <_lv_disp_refr_timer+0x2f0>)
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	4418      	add	r0, r3
 8008782:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8008784:	f10b 0b01 	add.w	fp, fp, #1
 8008788:	e757      	b.n	800863a <_lv_disp_refr_timer+0x156>
        lv_coord_t y2 =
 800878a:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
 800878e:	e7bf      	b.n	8008710 <_lv_disp_refr_timer+0x22c>
            if(h_tmp <= 0) {
 8008790:	f1ba 0f00 	cmp.w	sl, #0
 8008794:	ddec      	ble.n	8008770 <_lv_disp_refr_timer+0x28c>
                max_row = tmp.y2 + 1;
 8008796:	9101      	str	r1, [sp, #4]
            draw_buf->area.y2 = row + max_row - 1;
 8008798:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        lv_coord_t row_last = 0;
 800879c:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 80087a0:	f9b5 0032 	ldrsh.w	r0, [r5, #50]	; 0x32
 80087a4:	1e51      	subs	r1, r2, #1
 80087a6:	9103      	str	r1, [sp, #12]
 80087a8:	9901      	ldr	r1, [sp, #4]
 80087aa:	eb00 0c01 	add.w	ip, r0, r1
 80087ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087b2:	459c      	cmp	ip, r3
 80087b4:	dd10      	ble.n	80087d8 <_lv_disp_refr_timer+0x2f4>
        if(y2 != row_last) {
 80087b6:	4543      	cmp	r3, r8
 80087b8:	d0da      	beq.n	8008770 <_lv_disp_refr_timer+0x28c>
            draw_buf->area.x1 = area_p->x1;
 80087ba:	f9b5 1030 	ldrsh.w	r1, [r5, #48]	; 0x30
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	8231      	strh	r1, [r6, #16]
            draw_buf->area.x2 = area_p->x2;
 80087c2:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
            draw_buf->area.y2 = y2;
 80087c6:	82f3      	strh	r3, [r6, #22]
            draw_buf->area.x2 = area_p->x2;
 80087c8:	82b1      	strh	r1, [r6, #20]
            disp_refr->driver->draw_buf->last_part = 1;
 80087ca:	6813      	ldr	r3, [r2, #0]
            draw_buf->area.y1 = row;
 80087cc:	8270      	strh	r0, [r6, #18]
            disp_refr->driver->draw_buf->last_part = 1;
 80087ce:	e76f      	b.n	80086b0 <_lv_disp_refr_timer+0x1cc>
 80087d0:	200029a8 	.word	0x200029a8
 80087d4:	200029ac 	.word	0x200029ac
            draw_buf->area.x1 = area_p->x1;
 80087d8:	9903      	ldr	r1, [sp, #12]
 80087da:	fa1f fa80 	uxth.w	sl, r0
 80087de:	f9b5 c030 	ldrsh.w	ip, [r5, #48]	; 0x30
 80087e2:	fa11 f880 	uxtah	r8, r1, r0
 80087e6:	f8a6 c010 	strh.w	ip, [r6, #16]
            draw_buf->area.x2 = area_p->x2;
 80087ea:	fa0f f888 	sxth.w	r8, r8
 80087ee:	f9b5 c034 	ldrsh.w	ip, [r5, #52]	; 0x34
            draw_buf->area.y1 = row;
 80087f2:	8270      	strh	r0, [r6, #18]
            draw_buf->area.y2 = row + max_row - 1;
 80087f4:	4598      	cmp	r8, r3
            draw_buf->area.x2 = area_p->x2;
 80087f6:	f8a6 c014 	strh.w	ip, [r6, #20]
            draw_buf->area.y2 = row + max_row - 1;
 80087fa:	bfa8      	it	ge
 80087fc:	4698      	movge	r8, r3
            if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 80087fe:	4543      	cmp	r3, r8
            draw_buf->area.y2 = row + max_row - 1;
 8008800:	f8a6 8016 	strh.w	r8, [r6, #22]
            if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 8008804:	d109      	bne.n	800881a <_lv_disp_refr_timer+0x336>
 8008806:	f8d9 0000 	ldr.w	r0, [r9]
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	6841      	ldr	r1, [r0, #4]
 800880e:	f891 0020 	ldrb.w	r0, [r1, #32]
 8008812:	f040 0002 	orr.w	r0, r0, #2
 8008816:	f881 0020 	strb.w	r0, [r1, #32]
            lv_refr_area_part(area_p);
 800881a:	ee18 0a10 	vmov	r0, s16
 800881e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8008822:	f7ff fd59 	bl	80082d8 <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8008826:	9a05      	ldr	r2, [sp, #20]
 8008828:	9b04      	ldr	r3, [sp, #16]
 800882a:	4492      	add	sl, r2
 800882c:	fa0f f08a 	sxth.w	r0, sl
 8008830:	e7ba      	b.n	80087a8 <_lv_disp_refr_timer+0x2c4>
        if(disp_refr->driver->full_refresh) {
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	7a1b      	ldrb	r3, [r3, #8]
 8008836:	07db      	lsls	r3, r3, #31
 8008838:	d501      	bpl.n	800883e <_lv_disp_refr_timer+0x35a>
            draw_buf_flush();
 800883a:	f7ff fb87 	bl	8007f4c <draw_buf_flush>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008844:	3030      	adds	r0, #48	; 0x30
 8008846:	f00f fa65 	bl	8017d14 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	2120      	movs	r1, #32
 800884e:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8008852:	f00f fa5f 	bl	8017d14 <lv_memset_00>
        disp_refr->inv_p = 0;
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	2200      	movs	r2, #0
        elaps = lv_tick_elaps(start);
 800885a:	ee18 0a90 	vmov	r0, s17
        disp_refr->inv_p = 0;
 800885e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 8008862:	f00e f9d3 	bl	8016c0c <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 8008866:	6823      	ldr	r3, [r4, #0]
        elaps = lv_tick_elaps(start);
 8008868:	4601      	mov	r1, r0
        if(disp_refr->driver->monitor_cb) {
 800886a:	6818      	ldr	r0, [r3, #0]
 800886c:	6983      	ldr	r3, [r0, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	f43f ae7a 	beq.w	8008568 <_lv_disp_refr_timer+0x84>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8008874:	4a01      	ldr	r2, [pc, #4]	; (800887c <_lv_disp_refr_timer+0x398>)
 8008876:	6812      	ldr	r2, [r2, #0]
 8008878:	4798      	blx	r3
 800887a:	e675      	b.n	8008568 <_lv_disp_refr_timer+0x84>
 800887c:	200029ac 	.word	0x200029ac

08008880 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	4604      	mov	r4, r0
    if(th->parent) apply_theme(th->parent, obj);
 8008884:	6840      	ldr	r0, [r0, #4]
{
 8008886:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8008888:	b108      	cbz	r0, 800888e <apply_theme+0xe>
 800888a:	f7ff fff9 	bl	8008880 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	b123      	cbz	r3, 800889c <apply_theme+0x1c>
 8008892:	4629      	mov	r1, r5
 8008894:	4620      	mov	r0, r4
}
 8008896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(th->apply_cb) th->apply_cb(th, obj);
 800889a:	4718      	bx	r3
}
 800889c:	bd70      	pop	{r4, r5, r6, pc}

0800889e <lv_theme_get_from_obj>:
{
 800889e:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 80088a0:	b128      	cbz	r0, 80088ae <lv_theme_get_from_obj+0x10>
 80088a2:	f7ff f93b 	bl	8007b1c <lv_obj_get_disp>
}
 80088a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_theme(disp);
 80088aa:	f7f9 bb40 	b.w	8001f2e <lv_disp_get_theme>
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 80088ae:	f00e f8eb 	bl	8016a88 <lv_disp_get_default>
 80088b2:	e7f8      	b.n	80088a6 <lv_theme_get_from_obj+0x8>

080088b4 <lv_theme_apply>:
{
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4605      	mov	r5, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 80088b8:	f7ff fff1 	bl	800889e <lv_theme_get_from_obj>
    if(th == NULL) return;
 80088bc:	4604      	mov	r4, r0
 80088be:	b150      	cbz	r0, 80088d6 <lv_theme_apply+0x22>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80088c0:	4628      	mov	r0, r5
 80088c2:	2100      	movs	r1, #0
 80088c4:	4a04      	ldr	r2, [pc, #16]	; (80088d8 <lv_theme_apply+0x24>)
 80088c6:	f7fe fd23 	bl	8007310 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 80088ca:	4629      	mov	r1, r5
 80088cc:	4620      	mov	r0, r4
}
 80088ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 80088d2:	f7ff bfd5 	b.w	8008880 <apply_theme>
}
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	000fffff 	.word	0x000fffff

080088dc <lv_theme_get_color_primary>:
{
 80088dc:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 80088de:	f7ff ffde 	bl	800889e <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80088e2:	b108      	cbz	r0, 80088e8 <lv_theme_get_color_primary+0xc>
 80088e4:	8a00      	ldrh	r0, [r0, #16]
}
 80088e6:	bd08      	pop	{r3, pc}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80088e8:	2011      	movs	r0, #17
}
 80088ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80088ee:	f00e bdc5 	b.w	801747c <lv_palette_main>

080088f2 <get_rounded_area>:
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
    }
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 80088f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f6:	4607      	mov	r7, r0
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80088f8:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80088fc:	eba1 0952 	sub.w	r9, r1, r2, lsr #1
{
 8008900:	4690      	mov	r8, r2
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8008902:	b200      	sxth	r0, r0
{
 8008904:	461d      	mov	r5, r3
    int32_t thick_half = thickness / 2;
 8008906:	0856      	lsrs	r6, r2, #1
    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8008908:	f00e ff28 	bl	801775c <lv_trigo_sin>
 800890c:	fb09 f000 	mul.w	r0, r9, r0
 8008910:	b2b6      	uxth	r6, r6
 8008912:	11c4      	asrs	r4, r0, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 8008914:	4638      	mov	r0, r7
 8008916:	f00e ff21 	bl	801775c <lv_trigo_sin>
 800891a:	ea6f 0208 	mvn.w	r2, r8
 800891e:	fb09 f000 	mul.w	r0, r9, r0

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8008922:	2c00      	cmp	r4, #0
 8008924:	f002 0301 	and.w	r3, r2, #1
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 8008928:	ea4f 10e0 	mov.w	r0, r0, asr #7
    if(cir_x > 0) {
 800892c:	dd14      	ble.n	8008958 <get_rounded_area+0x66>
        cir_x = (cir_x - pa) >> ps;
 800892e:	3c7f      	subs	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 8008930:	1b9a      	subs	r2, r3, r6
 8008932:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8008936:	4422      	add	r2, r4
        res_area->x2 = cir_x + thick_half;
 8008938:	4434      	add	r4, r6
        res_area->x1 = cir_x - thick_half + thick_corr;
 800893a:	802a      	strh	r2, [r5, #0]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 800893c:	2800      	cmp	r0, #0
        res_area->x2 = cir_x + thick_half - thick_corr;
 800893e:	80ac      	strh	r4, [r5, #4]
    if(cir_y > 0) {
 8008940:	dd12      	ble.n	8008968 <get_rounded_area+0x76>
        cir_y = (cir_y - pa) >> ps;
 8008942:	f1a0 017f 	sub.w	r1, r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 8008946:	1b9a      	subs	r2, r3, r6
 8008948:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800894c:	440a      	add	r2, r1
        res_area->y2 = cir_y + thick_half;
 800894e:	4431      	add	r1, r6
        res_area->y1 = cir_y - thick_half + thick_corr;
 8008950:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 8008952:	80e9      	strh	r1, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 8008954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 8008958:	347f      	adds	r4, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 800895a:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800895e:	1ba2      	subs	r2, r4, r6
 8008960:	802a      	strh	r2, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8008962:	1af2      	subs	r2, r6, r3
 8008964:	4414      	add	r4, r2
 8008966:	e7e9      	b.n	800893c <get_rounded_area+0x4a>
        cir_y = (cir_y + pa) >> ps;
 8008968:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 800896a:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800896e:	1b82      	subs	r2, r0, r6
 8008970:	806a      	strh	r2, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8008972:	1af2      	subs	r2, r6, r3
 8008974:	4410      	add	r0, r2
 8008976:	80e8      	strh	r0, [r5, #6]
}
 8008978:	e7ec      	b.n	8008954 <get_rounded_area+0x62>

0800897a <lv_draw_arc_dsc_init>:
{
 800897a:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 800897c:	210c      	movs	r1, #12
{
 800897e:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 8008980:	f00f f9c8 	bl	8017d14 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8008984:	23ff      	movs	r3, #255	; 0xff
 8008986:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 8008988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800898c:	6023      	str	r3, [r4, #0]
}
 800898e:	bd10      	pop	{r4, pc}

08008990 <lv_draw_arc>:
{
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	ed2d 8b04 	vpush	{d8-d9}
 8008998:	b0d5      	sub	sp, #340	; 0x154
 800899a:	461d      	mov	r5, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800899c:	e9dd 8363 	ldrd	r8, r3, [sp, #396]	; 0x18c
{
 80089a0:	f8bd 4188 	ldrh.w	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
 80089a4:	7a1b      	ldrb	r3, [r3, #8]
{
 80089a6:	9205      	str	r2, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
 80089a8:	2b02      	cmp	r3, #2
{
 80089aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
    if(dsc->opa <= LV_OPA_MIN) return;
 80089ae:	d972      	bls.n	8008a96 <lv_draw_arc+0x106>
    if(dsc->width == 0) return;
 80089b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80089b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80089b6:	9304      	str	r3, [sp, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d06c      	beq.n	8008a96 <lv_draw_arc+0x106>
    if(start_angle == end_angle) return;
 80089bc:	42a5      	cmp	r5, r4
 80089be:	d06a      	beq.n	8008a96 <lv_draw_arc+0x106>
    if(width > radius) width = radius;
 80089c0:	4293      	cmp	r3, r2
    lv_draw_rect_dsc_init(&cir_dsc);
 80089c2:	a82c      	add	r0, sp, #176	; 0xb0
    if(width > radius) width = radius;
 80089c4:	bfc4      	itt	gt
 80089c6:	f9bd 3014 	ldrshgt.w	r3, [sp, #20]
 80089ca:	9304      	strgt	r3, [sp, #16]
    lv_draw_rect_dsc_init(&cir_dsc);
 80089cc:	f004 f90c 	bl	800cbe8 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 80089d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80089d2:	7a5b      	ldrb	r3, [r3, #9]
 80089d4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80089d8:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
    if(dsc->img_src) {
 80089dc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	7a1b      	ldrb	r3, [r3, #8]
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	d05c      	beq.n	8008aa0 <lv_draw_arc+0x110>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 80089e6:	2100      	movs	r1, #0
        cir_dsc.bg_img_src = dsc->img_src;
 80089e8:	922f      	str	r2, [sp, #188]	; 0xbc
        cir_dsc.bg_img_opa = dsc->opa;
 80089ea:	f88d 30c6 	strb.w	r3, [sp, #198]	; 0xc6
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 80089ee:	f88d 10ba 	strb.w	r1, [sp, #186]	; 0xba
    area_out.x1 = center_x - radius;
 80089f2:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80089f6:	9b05      	ldr	r3, [sp, #20]
    area_out.y1 = center_y - radius;
 80089f8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
    area_out.x1 = center_x - radius;
 80089fc:	ebaa 0c03 	sub.w	ip, sl, r3
    area_in.x1 += dsc->width;
 8008a00:	9964      	ldr	r1, [sp, #400]	; 0x190
    area_out.x1 = center_x - radius;
 8008a02:	fa0f f38c 	sxth.w	r3, ip
    area_in.x1 += dsc->width;
 8008a06:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8008a0a:	8849      	ldrh	r1, [r1, #2]
    area_out.x1 = center_x - radius;
 8008a0c:	9308      	str	r3, [sp, #32]
 8008a0e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    area_in.x1 += dsc->width;
 8008a12:	fa11 fc8c 	uxtah	ip, r1, ip
    area_out.y1 = center_y - radius;
 8008a16:	9b05      	ldr	r3, [sp, #20]
    area_in.x1 += dsc->width;
 8008a18:	f8ad c044 	strh.w	ip, [sp, #68]	; 0x44
    area_out.y1 = center_y - radius;
 8008a1c:	1afe      	subs	r6, r7, r3
 8008a1e:	b233      	sxth	r3, r6
    area_in.y1 += dsc->width;
 8008a20:	fa11 f686 	uxtah	r6, r1, r6
    area_out.y1 = center_y - radius;
 8008a24:	9309      	str	r3, [sp, #36]	; 0x24
 8008a26:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 8008a2a:	9b05      	ldr	r3, [sp, #20]
    area_in.y1 += dsc->width;
 8008a2c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 8008a30:	4453      	add	r3, sl
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	1e5a      	subs	r2, r3, #1
 8008a36:	930a      	str	r3, [sp, #40]	; 0x28
    area_out.y2 = center_y + radius - 1;
 8008a38:	9b05      	ldr	r3, [sp, #20]
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 8008a3a:	b292      	uxth	r2, r2
    area_out.y2 = center_y + radius - 1;
 8008a3c:	18fb      	adds	r3, r7, r3
    area_out.x2 = center_x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 8008a3e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    area_in.x2 -= dsc->width;
 8008a42:	1a52      	subs	r2, r2, r1
    area_out.y2 = center_y + radius - 1;
 8008a44:	b29b      	uxth	r3, r3
    area_in.x2 -= dsc->width;
 8008a46:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    area_out.y2 = center_y + radius - 1;
 8008a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    area_in.y2 -= dsc->width;
 8008a54:	1a5b      	subs	r3, r3, r1
 8008a56:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 8008a5a:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 8008a5e:	42a3      	cmp	r3, r4
 8008a60:	d003      	beq.n	8008a6a <lv_draw_arc+0xda>
 8008a62:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8008a66:	429d      	cmp	r5, r3
 8008a68:	d124      	bne.n	8008ab4 <lv_draw_arc+0x124>
        cir_dsc.border_color = dsc->color;
 8008a6a:	9b64      	ldr	r3, [sp, #400]	; 0x190
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008a6c:	aa2c      	add	r2, sp, #176	; 0xb0
        cir_dsc.border_width = dsc->width;
 8008a6e:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008a72:	4641      	mov	r1, r8
        cir_dsc.border_color = dsc->color;
 8008a74:	881b      	ldrh	r3, [r3, #0]
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008a76:	a80f      	add	r0, sp, #60	; 0x3c
        cir_dsc.border_color = dsc->color;
 8008a78:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        cir_dsc.border_opa = dsc->opa;
 8008a7c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008a7e:	7a1b      	ldrb	r3, [r3, #8]
 8008a80:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 8008a84:	2300      	movs	r3, #0
 8008a86:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8008a8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008a8e:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8008a92:	f004 f8cb 	bl	800cc2c <lv_draw_rect>
}
 8008a96:	b055      	add	sp, #340	; 0x154
 8008a98:	ecbd 8b04 	vpop	{d8-d9}
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 8008aa0:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
        cir_dsc.bg_color = dsc->color;
 8008aa4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
 8008aac:	e7a1      	b.n	80089f2 <lv_draw_arc+0x62>
    while(start_angle >= 360) start_angle -= 360;
 8008aae:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8008ab2:	b2ad      	uxth	r5, r5
 8008ab4:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8008ab8:	d2f9      	bcs.n	8008aae <lv_draw_arc+0x11e>
    while(end_angle >= 360) end_angle -= 360;
 8008aba:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8008abe:	f080 8086 	bcs.w	8008bce <lv_draw_arc+0x23e>
    lv_draw_mask_angle_init(&mask_angle_param, center_x, center_y, start_angle, end_angle);
 8008ac2:	b223      	sxth	r3, r4
 8008ac4:	a839      	add	r0, sp, #228	; 0xe4
 8008ac6:	fa0f f985 	sxth.w	r9, r5
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	ee08 3a10 	vmov	s16, r3
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008ad6:	f003 fca5 	bl	800c424 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8008ada:	2100      	movs	r1, #0
 8008adc:	a839      	add	r0, sp, #228	; 0xe4
 8008ade:	f003 fb7f 	bl	800c1e0 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ae8:	a911      	add	r1, sp, #68	; 0x44
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8008aea:	ee08 0a90 	vmov	s17, r0
    lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 8008aee:	a817      	add	r0, sp, #92	; 0x5c
 8008af0:	f003 fcdc 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8008af4:	2100      	movs	r1, #0
 8008af6:	a817      	add	r0, sp, #92	; 0x5c
 8008af8:	f003 fb72 	bl	800c1e0 <lv_draw_mask_add>
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8008afc:	2300      	movs	r3, #0
 8008afe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b02:	a90f      	add	r1, sp, #60	; 0x3c
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8008b04:	ee09 0a10 	vmov	s18, r0
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8008b08:	a81e      	add	r0, sp, #120	; 0x78
 8008b0a:	f003 fccf 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8008b0e:	2100      	movs	r1, #0
 8008b10:	a81e      	add	r0, sp, #120	; 0x78
 8008b12:	f003 fb65 	bl	800c1e0 <lv_draw_mask_add>
    if(end_angle > start_angle) {
 8008b16:	42a5      	cmp	r5, r4
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8008b18:	ee09 0a90 	vmov	s19, r0
        angle_gap = 360 - (end_angle - start_angle);
 8008b1c:	bf36      	itet	cc
 8008b1e:	1b63      	subcc	r3, r4, r5
        angle_gap = start_angle - end_angle;
 8008b20:	1b2b      	subcs	r3, r5, r4
        angle_gap = 360 - (end_angle - start_angle);
 8008b22:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8008b26:	2b3c      	cmp	r3, #60	; 0x3c
 8008b28:	f340 8385 	ble.w	8009236 <lv_draw_arc+0x8a6>
 8008b2c:	9b05      	ldr	r3, [sp, #20]
 8008b2e:	2b0a      	cmp	r3, #10
 8008b30:	f240 8381 	bls.w	8009236 <lv_draw_arc+0x8a6>
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8008b34:	235a      	movs	r3, #90	; 0x5a
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8008b36:	2d59      	cmp	r5, #89	; 0x59
        q_dsc.radius = radius;
 8008b38:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8008b3c:	fbb5 f2f3 	udiv	r2, r5, r3
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 8008b40:	fbb4 fbf3 	udiv	fp, r4, r3
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8008b44:	9203      	str	r2, [sp, #12]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8008b46:	d846      	bhi.n	8008bd6 <lv_draw_arc+0x246>
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	2c59      	cmp	r4, #89	; 0x59
 8008b4c:	eba6 0303 	sub.w	r3, r6, r3
 8008b50:	930c      	str	r3, [sp, #48]	; 0x30
 8008b52:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 8008b56:	b21b      	sxth	r3, r3
 8008b58:	930d      	str	r3, [sp, #52]	; 0x34
 8008b5a:	f200 816a 	bhi.w	8008e32 <lv_draw_arc+0x4a2>
 8008b5e:	42a5      	cmp	r5, r4
 8008b60:	f080 8167 	bcs.w	8008e32 <lv_draw_arc+0x4a2>
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b64:	4648      	mov	r0, r9
 8008b66:	f00e fdf9 	bl	801775c <lv_trigo_sin>
 8008b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6c:	4358      	muls	r0, r3
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b70:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008b74:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f00e fdef 	bl	801775c <lv_trigo_sin>
 8008b7e:	4370      	muls	r0, r6
 8008b80:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008b84:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008b88:	ee18 0a10 	vmov	r0, s16
 8008b8c:	f00e fde6 	bl	801775c <lv_trigo_sin>
 8008b90:	4370      	muls	r0, r6
 8008b92:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008b96:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008b9a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008b9e:	b200      	sxth	r0, r0
 8008ba0:	f00e fddc 	bl	801775c <lv_trigo_sin>
 8008ba4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008ba6:	a925      	add	r1, sp, #148	; 0x94
 8008ba8:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008baa:	4358      	muls	r0, r3
 8008bac:	eb0a 33e0 	add.w	r3, sl, r0, asr #15
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bb0:	4608      	mov	r0, r1
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008bb2:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008bb6:	f00e fa5e 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008bba:	b120      	cbz	r0, 8008bc6 <lv_draw_arc+0x236>
 8008bbc:	aa2c      	add	r2, sp, #176	; 0xb0
 8008bbe:	a925      	add	r1, sp, #148	; 0x94
 8008bc0:	a80f      	add	r0, sp, #60	; 0x3c
 8008bc2:	f004 f833 	bl	800cc2c <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8008bc6:	42a5      	cmp	r5, r4
 8008bc8:	f200 82a6 	bhi.w	8009118 <lv_draw_arc+0x788>
 8008bcc:	e25c      	b.n	8009088 <lv_draw_arc+0x6f8>
    while(end_angle >= 360) end_angle -= 360;
 8008bce:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 8008bd2:	b2a4      	uxth	r4, r4
 8008bd4:	e771      	b.n	8008aba <lv_draw_arc+0x12a>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8008bd6:	2c59      	cmp	r4, #89	; 0x59
 8008bd8:	f200 81af 	bhi.w	8008f3a <lv_draw_arc+0x5aa>
            quarter_area.x2 = q->center_x + q->radius;
 8008bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008bde:	ee18 0a10 	vmov	r0, s16
            quarter_area.x2 = q->center_x + q->radius;
 8008be2:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y1 = q->center_y;
 8008be6:	9b07      	ldr	r3, [sp, #28]
 8008be8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8008bec:	f00e fdb6 	bl	801775c <lv_trigo_sin>
 8008bf0:	4370      	muls	r0, r6
 8008bf2:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008bf6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008bfa:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008bfe:	b200      	sxth	r0, r0
 8008c00:	f00e fdac 	bl	801775c <lv_trigo_sin>
 8008c04:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008c06:	a925      	add	r1, sp, #148	; 0x94
 8008c08:	4642      	mov	r2, r8
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c0a:	1af3      	subs	r3, r6, r3
 8008c0c:	4358      	muls	r0, r3
 8008c0e:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008c12:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008c16:	4608      	mov	r0, r1
 8008c18:	f00e fa2d 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008c1c:	b120      	cbz	r0, 8008c28 <lv_draw_arc+0x298>
 8008c1e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008c20:	a925      	add	r1, sp, #148	; 0x94
 8008c22:	a80f      	add	r0, sp, #60	; 0x3c
 8008c24:	f004 f802 	bl	800cc2c <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	f040 81b3 	bne.w	8008f96 <lv_draw_arc+0x606>
            quarter_area.x1 = q->center_x - q->radius;
 8008c30:	9b08      	ldr	r3, [sp, #32]
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008c32:	4648      	mov	r0, r9
            quarter_area.x1 = q->center_x - q->radius;
 8008c34:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y1 = q->center_y;
 8008c38:	9b07      	ldr	r3, [sp, #28]
 8008c3a:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008c3e:	f00e fd8d 	bl	801775c <lv_trigo_sin>
 8008c42:	4370      	muls	r0, r6
 8008c44:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008c48:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c4c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008c50:	b200      	sxth	r0, r0
 8008c52:	f00e fd83 	bl	801775c <lv_trigo_sin>
 8008c56:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008c58:	a925      	add	r1, sp, #148	; 0x94
 8008c5a:	4642      	mov	r2, r8
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c5c:	1af3      	subs	r3, r6, r3
 8008c5e:	4358      	muls	r0, r3
 8008c60:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008c64:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008c68:	4608      	mov	r0, r1
 8008c6a:	f00e fa04 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008c6e:	b120      	cbz	r0, 8008c7a <lv_draw_arc+0x2ea>
 8008c70:	aa2c      	add	r2, sp, #176	; 0xb0
 8008c72:	a925      	add	r1, sp, #148	; 0x94
 8008c74:	a80f      	add	r0, sp, #60	; 0x3c
 8008c76:	f003 ffd9 	bl	800cc2c <lv_draw_rect>
        if(q->end_quarter == 1) {
 8008c7a:	f1bb 0f01 	cmp.w	fp, #1
 8008c7e:	f000 818d 	beq.w	8008f9c <lv_draw_arc+0x60c>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8008c82:	f1bb 0f02 	cmp.w	fp, #2
 8008c86:	f040 8267 	bne.w	8009158 <lv_draw_arc+0x7c8>
            quarter_area.x1 = q->center_x - q->radius;
 8008c8a:	9b08      	ldr	r3, [sp, #32]
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c8c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
            quarter_area.x1 = q->center_x - q->radius;
 8008c90:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y - 1;
 8008c94:	1e7b      	subs	r3, r7, #1
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c96:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center_y - 1;
 8008c98:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008c9c:	f00e fd5e 	bl	801775c <lv_trigo_sin>
 8008ca0:	9b04      	ldr	r3, [sp, #16]
 8008ca2:	1af3      	subs	r3, r6, r3
 8008ca4:	4358      	muls	r0, r3
 8008ca6:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008caa:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008cae:	ee18 0a10 	vmov	r0, s16
 8008cb2:	f00e fd53 	bl	801775c <lv_trigo_sin>
 8008cb6:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008cb8:	a925      	add	r1, sp, #148	; 0x94
 8008cba:	4642      	mov	r2, r8
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008cbc:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008cc0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	f00e f9d6 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008cca:	b120      	cbz	r0, 8008cd6 <lv_draw_arc+0x346>
 8008ccc:	aa2c      	add	r2, sp, #176	; 0xb0
 8008cce:	a925      	add	r1, sp, #148	; 0x94
 8008cd0:	a80f      	add	r0, sp, #60	; 0x3c
 8008cd2:	f003 ffab 	bl	800cc2c <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	f040 824d 	bne.w	8009178 <lv_draw_arc+0x7e8>
            quarter_area.x2 = q->center_x + q->radius;
 8008cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008ce0:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x2 = q->center_x + q->radius;
 8008ce4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y - 1;
 8008ce8:	1e7b      	subs	r3, r7, #1
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008cea:	b200      	sxth	r0, r0
            quarter_area.y2 = q->center_y - 1;
 8008cec:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008cf0:	f00e fd34 	bl	801775c <lv_trigo_sin>
 8008cf4:	9b04      	ldr	r3, [sp, #16]
 8008cf6:	1af3      	subs	r3, r6, r3
 8008cf8:	4358      	muls	r0, r3
 8008cfa:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008cfe:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008d02:	4648      	mov	r0, r9
 8008d04:	f00e fd2a 	bl	801775c <lv_trigo_sin>
 8008d08:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008d0a:	a925      	add	r1, sp, #148	; 0x94
 8008d0c:	4642      	mov	r2, r8
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008d0e:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008d12:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008d16:	4608      	mov	r0, r1
 8008d18:	f00e f9ad 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008d1c:	b120      	cbz	r0, 8008d28 <lv_draw_arc+0x398>
 8008d1e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008d20:	a925      	add	r1, sp, #148	; 0x94
 8008d22:	a80f      	add	r0, sp, #60	; 0x3c
 8008d24:	f003 ff82 	bl	800cc2c <lv_draw_rect>
        if(q->end_quarter == 3) {
 8008d28:	f1bb 0f03 	cmp.w	fp, #3
 8008d2c:	f000 818f 	beq.w	800904e <lv_draw_arc+0x6be>
    lv_draw_mask_remove_id(mask_angle_id);
 8008d30:	ee18 0a90 	vmov	r0, s17
 8008d34:	f003 fa8c 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8008d38:	ee19 0a90 	vmov	r0, s19
 8008d3c:	f003 fa88 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8008d40:	ee19 0a10 	vmov	r0, s18
 8008d44:	f003 fa84 	bl	800c250 <lv_draw_mask_remove_id>
    if(dsc->rounded) {
 8008d48:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8008d4a:	7a5b      	ldrb	r3, [r3, #9]
 8008d4c:	075b      	lsls	r3, r3, #29
 8008d4e:	f57f aea2 	bpl.w	8008a96 <lv_draw_arc+0x106>
        get_rounded_area(start_angle, radius, width, &round_area);
 8008d52:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8008d56:	ab13      	add	r3, sp, #76	; 0x4c
 8008d58:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8008d5c:	4648      	mov	r0, r9
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4632      	mov	r2, r6
 8008d62:	f7ff fdc6 	bl	80088f2 <get_rounded_area>
        round_area.x1 += center_x;
 8008d66:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008d6a:	aa13      	add	r2, sp, #76	; 0x4c
 8008d6c:	4641      	mov	r1, r8
        round_area.x1 += center_x;
 8008d6e:	4453      	add	r3, sl
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008d70:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center_x;
 8008d72:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.x2 += center_x;
 8008d76:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8008d7a:	4453      	add	r3, sl
 8008d7c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center_y;
 8008d80:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008d84:	443b      	add	r3, r7
 8008d86:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        round_area.y2 += center_y;
 8008d8a:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8008d8e:	443b      	add	r3, r7
 8008d90:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008d94:	f00e f96f 	bl	8017076 <_lv_area_intersect>
 8008d98:	b198      	cbz	r0, 8008dc2 <lv_draw_arc+0x432>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008da0:	a913      	add	r1, sp, #76	; 0x4c
 8008da2:	a825      	add	r0, sp, #148	; 0x94
 8008da4:	f003 fb82 	bl	800c4ac <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8008da8:	2100      	movs	r1, #0
 8008daa:	a825      	add	r0, sp, #148	; 0x94
 8008dac:	f003 fa18 	bl	800c1e0 <lv_draw_mask_add>
 8008db0:	4604      	mov	r4, r0
            lv_draw_rect(&area_out, &clip_area2, &cir_dsc);
 8008db2:	aa2c      	add	r2, sp, #176	; 0xb0
 8008db4:	a80f      	add	r0, sp, #60	; 0x3c
 8008db6:	a915      	add	r1, sp, #84	; 0x54
 8008db8:	f003 ff38 	bl	800cc2c <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f003 fa47 	bl	800c250 <lv_draw_mask_remove_id>
        get_rounded_area(end_angle, radius, width, &round_area);
 8008dc2:	ab13      	add	r3, sp, #76	; 0x4c
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	ee18 0a10 	vmov	r0, s16
 8008dcc:	f7ff fd91 	bl	80088f2 <get_rounded_area>
        round_area.x1 += center_x;
 8008dd0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008dd4:	aa13      	add	r2, sp, #76	; 0x4c
 8008dd6:	4641      	mov	r1, r8
        round_area.x1 += center_x;
 8008dd8:	4453      	add	r3, sl
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008dda:	a815      	add	r0, sp, #84	; 0x54
        round_area.x1 += center_x;
 8008ddc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        round_area.x2 += center_x;
 8008de0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8008de4:	4453      	add	r3, sl
 8008de6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        round_area.y1 += center_y;
 8008dea:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8008dee:	443b      	add	r3, r7
 8008df0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        round_area.y2 += center_y;
 8008df4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8008df8:	441f      	add	r7, r3
 8008dfa:	f8ad 7052 	strh.w	r7, [sp, #82]	; 0x52
        if(_lv_area_intersect(&clip_area2, clip_area, &round_area)) {
 8008dfe:	f00e f93a 	bl	8017076 <_lv_area_intersect>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f43f ae47 	beq.w	8008a96 <lv_draw_arc+0x106>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e0e:	a913      	add	r1, sp, #76	; 0x4c
 8008e10:	a825      	add	r0, sp, #148	; 0x94
 8008e12:	f003 fb4b 	bl	800c4ac <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8008e16:	2100      	movs	r1, #0
 8008e18:	a825      	add	r0, sp, #148	; 0x94
 8008e1a:	f003 f9e1 	bl	800c1e0 <lv_draw_mask_add>
 8008e1e:	4604      	mov	r4, r0
            lv_draw_rect(&area_out, &clip_area2, &cir_dsc);
 8008e20:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e22:	a80f      	add	r0, sp, #60	; 0x3c
 8008e24:	a915      	add	r1, sp, #84	; 0x54
 8008e26:	f003 ff01 	bl	800cc2c <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f003 fa10 	bl	800c250 <lv_draw_mask_remove_id>
 8008e30:	e631      	b.n	8008a96 <lv_draw_arc+0x106>
            quarter_area.x1 = q->center_x;
 8008e32:	9b06      	ldr	r3, [sp, #24]
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008e34:	4648      	mov	r0, r9
            quarter_area.x1 = q->center_x;
 8008e36:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y + q->radius;
 8008e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e3c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008e40:	f00e fc8c 	bl	801775c <lv_trigo_sin>
 8008e44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e46:	4343      	muls	r3, r0
 8008e48:	eb07 30e3 	add.w	r0, r7, r3, asr #15
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008e4e:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e52:	4618      	mov	r0, r3
 8008e54:	f00e fc82 	bl	801775c <lv_trigo_sin>
 8008e58:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008e5a:	a925      	add	r1, sp, #148	; 0x94
 8008e5c:	4642      	mov	r2, r8
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e5e:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008e62:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008e66:	4608      	mov	r0, r1
 8008e68:	f00e f905 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008e6c:	b120      	cbz	r0, 8008e78 <lv_draw_arc+0x4e8>
 8008e6e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008e70:	a925      	add	r1, sp, #148	; 0x94
 8008e72:	a80f      	add	r0, sp, #60	; 0x3c
 8008e74:	f003 feda 	bl	800cc2c <lv_draw_rect>
        if(q->end_quarter == 0) {
 8008e78:	2c59      	cmp	r4, #89	; 0x59
 8008e7a:	f67f aeaf 	bls.w	8008bdc <lv_draw_arc+0x24c>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8008e7e:	9b03      	ldr	r3, [sp, #12]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	f040 8088 	bne.w	8008f96 <lv_draw_arc+0x606>
 8008e86:	f1bb 0f01 	cmp.w	fp, #1
 8008e8a:	f47f aed1 	bne.w	8008c30 <lv_draw_arc+0x2a0>
 8008e8e:	42a5      	cmp	r5, r4
 8008e90:	f4bf aece 	bcs.w	8008c30 <lv_draw_arc+0x2a0>
 8008e94:	9b04      	ldr	r3, [sp, #16]
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008e96:	4648      	mov	r0, r9
 8008e98:	1af3      	subs	r3, r6, r3
 8008e9a:	9307      	str	r3, [sp, #28]
 8008e9c:	f00e fc5e 	bl	801775c <lv_trigo_sin>
 8008ea0:	4370      	muls	r0, r6
 8008ea2:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008ea6:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008eaa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8008eae:	b200      	sxth	r0, r0
 8008eb0:	f00e fc54 	bl	801775c <lv_trigo_sin>
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	4358      	muls	r0, r3
 8008eb8:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008ebc:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	f00e fc4a 	bl	801775c <lv_trigo_sin>
 8008ec8:	9b07      	ldr	r3, [sp, #28]
 8008eca:	4358      	muls	r0, r3
 8008ecc:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008ed0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ed4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008ed8:	b200      	sxth	r0, r0
 8008eda:	f00e fc3f 	bl	801775c <lv_trigo_sin>
 8008ede:	4370      	muls	r0, r6
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008ee0:	a925      	add	r1, sp, #148	; 0x94
 8008ee2:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ee4:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008ee8:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008eec:	4608      	mov	r0, r1
 8008eee:	f00e f8c2 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008ef2:	b120      	cbz	r0, 8008efe <lv_draw_arc+0x56e>
 8008ef4:	aa2c      	add	r2, sp, #176	; 0xb0
 8008ef6:	a925      	add	r1, sp, #148	; 0x94
 8008ef8:	a80f      	add	r0, sp, #60	; 0x3c
 8008efa:	f003 fe97 	bl	800cc2c <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8008efe:	42a5      	cmp	r5, r4
 8008f00:	f240 812e 	bls.w	8009160 <lv_draw_arc+0x7d0>
        quarter_area.x1 = q->center_x - q->radius;
 8008f04:	9b08      	ldr	r3, [sp, #32]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f06:	a925      	add	r1, sp, #148	; 0x94
 8008f08:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x - q->radius;
 8008f0a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f0e:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y - q->radius;
 8008f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f12:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x - 1;
 8008f16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f1a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y - 1;
 8008f1e:	1e7b      	subs	r3, r7, #1
 8008f20:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f24:	f00e f8a7 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	f000 8132 	beq.w	8009192 <lv_draw_arc+0x802>
 8008f2e:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f30:	a925      	add	r1, sp, #148	; 0x94
 8008f32:	a80f      	add	r0, sp, #60	; 0x3c
 8008f34:	f003 fe7a 	bl	800cc2c <lv_draw_rect>
 8008f38:	e12b      	b.n	8009192 <lv_draw_arc+0x802>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	455b      	cmp	r3, fp
 8008f3e:	d101      	bne.n	8008f44 <lv_draw_arc+0x5b4>
 8008f40:	42a5      	cmp	r5, r4
 8008f42:	d806      	bhi.n	8008f52 <lv_draw_arc+0x5c2>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d11c      	bne.n	8008f84 <lv_draw_arc+0x5f4>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8008f4a:	f1bb 0f01 	cmp.w	fp, #1
 8008f4e:	f040 8096 	bne.w	800907e <lv_draw_arc+0x6ee>
        quarter_area.x1 = q->center_x;
 8008f52:	9b06      	ldr	r3, [sp, #24]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f54:	a925      	add	r1, sp, #148	; 0x94
 8008f56:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x;
 8008f58:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f5c:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y;
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + q->radius;
 8008f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f66:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + q->radius;
 8008f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f6c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008f70:	f00e f881 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d082      	beq.n	8008e7e <lv_draw_arc+0x4ee>
 8008f78:	aa2c      	add	r2, sp, #176	; 0xb0
 8008f7a:	a925      	add	r1, sp, #148	; 0x94
 8008f7c:	a80f      	add	r0, sp, #60	; 0x3c
 8008f7e:	f003 fe55 	bl	800cc2c <lv_draw_rect>
 8008f82:	e77c      	b.n	8008e7e <lv_draw_arc+0x4ee>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	f47f af79 	bne.w	8008e7e <lv_draw_arc+0x4ee>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8008f8c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d9dd      	bls.n	8008f52 <lv_draw_arc+0x5c2>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8008f96:	f1bb 0f01 	cmp.w	fp, #1
 8008f9a:	d170      	bne.n	800907e <lv_draw_arc+0x6ee>
            quarter_area.x2 = q->center_x - 1;
 8008f9c:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008fa0:	ee18 0a10 	vmov	r0, s16
            quarter_area.x2 = q->center_x - 1;
 8008fa4:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y + q->radius;
 8008fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008faa:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8008fae:	f00e fbd5 	bl	801775c <lv_trigo_sin>
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	1af3      	subs	r3, r6, r3
 8008fb6:	4358      	muls	r0, r3
 8008fb8:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8008fbc:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008fc0:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8008fc4:	b200      	sxth	r0, r0
 8008fc6:	f00e fbc9 	bl	801775c <lv_trigo_sin>
 8008fca:	4370      	muls	r0, r6
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008fcc:	a925      	add	r1, sp, #148	; 0x94
 8008fce:	4642      	mov	r2, r8
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008fd0:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8008fd4:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8008fd8:	4608      	mov	r0, r1
 8008fda:	f00e f84c 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8008fde:	b120      	cbz	r0, 8008fea <lv_draw_arc+0x65a>
 8008fe0:	aa2c      	add	r2, sp, #176	; 0xb0
 8008fe2:	a925      	add	r1, sp, #148	; 0x94
 8008fe4:	a80f      	add	r0, sp, #60	; 0x3c
 8008fe6:	f003 fe21 	bl	800cc2c <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	f040 80b3 	bne.w	8009158 <lv_draw_arc+0x7c8>
            quarter_area.x2 = q->center_x - 1;
 8008ff2:	f10a 33ff 	add.w	r3, sl, #4294967295
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ff6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
            quarter_area.x2 = q->center_x - 1;
 8008ffa:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8008ffe:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center_y - q->radius;
 8009000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009002:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009006:	f00e fba9 	bl	801775c <lv_trigo_sin>
 800900a:	4370      	muls	r0, r6
 800900c:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 8009010:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009014:	4648      	mov	r0, r9
 8009016:	f00e fba1 	bl	801775c <lv_trigo_sin>
 800901a:	9b04      	ldr	r3, [sp, #16]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 800901c:	a925      	add	r1, sp, #148	; 0x94
 800901e:	4642      	mov	r2, r8
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009020:	1af3      	subs	r3, r6, r3
 8009022:	4358      	muls	r0, r3
 8009024:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 8009028:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 800902c:	4608      	mov	r0, r1
 800902e:	f00e f822 	bl	8017076 <_lv_area_intersect>
            if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8009032:	b120      	cbz	r0, 800903e <lv_draw_arc+0x6ae>
 8009034:	aa2c      	add	r2, sp, #176	; 0xb0
 8009036:	a925      	add	r1, sp, #148	; 0x94
 8009038:	a80f      	add	r0, sp, #60	; 0x3c
 800903a:	f003 fdf7 	bl	800cc2c <lv_draw_rect>
        if(q->end_quarter == 2) {
 800903e:	f1bb 0f02 	cmp.w	fp, #2
 8009042:	f43f ae22 	beq.w	8008c8a <lv_draw_arc+0x2fa>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8009046:	f1bb 0f03 	cmp.w	fp, #3
 800904a:	f040 8095 	bne.w	8009178 <lv_draw_arc+0x7e8>
            quarter_area.x1 = q->center_x;
 800904e:	9b06      	ldr	r3, [sp, #24]
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009050:	f104 005a 	add.w	r0, r4, #90	; 0x5a
            quarter_area.x1 = q->center_x;
 8009054:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009058:	b200      	sxth	r0, r0
            quarter_area.y1 = q->center_y - q->radius;
 800905a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905c:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
            quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009060:	f00e fb7c 	bl	801775c <lv_trigo_sin>
 8009064:	4370      	muls	r0, r6
 8009066:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 800906a:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
            quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800906e:	ee18 0a10 	vmov	r0, s16
 8009072:	f00e fb73 	bl	801775c <lv_trigo_sin>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	1af6      	subs	r6, r6, r3
 800907a:	4370      	muls	r0, r6
 800907c:	e0ba      	b.n	80091f4 <lv_draw_arc+0x864>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	455b      	cmp	r3, fp
 8009082:	d047      	beq.n	8009114 <lv_draw_arc+0x784>
 8009084:	2d59      	cmp	r5, #89	; 0x59
 8009086:	d861      	bhi.n	800914c <lv_draw_arc+0x7bc>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8009088:	f1ab 0302 	sub.w	r3, fp, #2
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b01      	cmp	r3, #1
 8009090:	d942      	bls.n	8009118 <lv_draw_arc+0x788>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	2b02      	cmp	r3, #2
 8009096:	f47f adf4 	bne.w	8008c82 <lv_draw_arc+0x2f2>
 800909a:	f1bb 0f02 	cmp.w	fp, #2
 800909e:	d1a8      	bne.n	8008ff2 <lv_draw_arc+0x662>
 80090a0:	42a5      	cmp	r5, r4
 80090a2:	d2a6      	bcs.n	8008ff2 <lv_draw_arc+0x662>
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80090a4:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80090a8:	9b04      	ldr	r3, [sp, #16]
 80090aa:	b200      	sxth	r0, r0
 80090ac:	eba6 0b03 	sub.w	fp, r6, r3
 80090b0:	f00e fb54 	bl	801775c <lv_trigo_sin>
 80090b4:	4370      	muls	r0, r6
 80090b6:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 80090ba:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80090be:	4648      	mov	r0, r9
 80090c0:	f00e fb4c 	bl	801775c <lv_trigo_sin>
 80090c4:	fb0b f000 	mul.w	r0, fp, r0
 80090c8:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 80090cc:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80090d0:	ee18 0a10 	vmov	r0, s16
 80090d4:	f00e fb42 	bl	801775c <lv_trigo_sin>
 80090d8:	4370      	muls	r0, r6
 80090da:	eb07 36e0 	add.w	r6, r7, r0, asr #15
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80090de:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80090e2:	b200      	sxth	r0, r0
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80090e4:	f8ad 6096 	strh.w	r6, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80090e8:	f00e fb38 	bl	801775c <lv_trigo_sin>
 80090ec:	fb0b f000 	mul.w	r0, fp, r0
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80090f0:	a925      	add	r1, sp, #148	; 0x94
 80090f2:	4642      	mov	r2, r8
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80090f4:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 80090f8:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80090fc:	4608      	mov	r0, r1
 80090fe:	f00d ffba 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8009102:	b120      	cbz	r0, 800910e <lv_draw_arc+0x77e>
 8009104:	aa2c      	add	r2, sp, #176	; 0xb0
 8009106:	a925      	add	r1, sp, #148	; 0x94
 8009108:	a80f      	add	r0, sp, #60	; 0x3c
 800910a:	f003 fd8f 	bl	800cc2c <lv_draw_rect>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 800910e:	42a5      	cmp	r5, r4
 8009110:	d938      	bls.n	8009184 <lv_draw_arc+0x7f4>
 8009112:	e083      	b.n	800921c <lv_draw_arc+0x88c>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8009114:	42a5      	cmp	r5, r4
 8009116:	d9b5      	bls.n	8009084 <lv_draw_arc+0x6f4>
        quarter_area.x1 = q->center_x - q->radius;
 8009118:	9b08      	ldr	r3, [sp, #32]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 800911a:	a925      	add	r1, sp, #148	; 0x94
 800911c:	4642      	mov	r2, r8
        quarter_area.x1 = q->center_x - q->radius;
 800911e:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8009122:	4608      	mov	r0, r1
        quarter_area.y1 = q->center_y;
 8009124:	9b07      	ldr	r3, [sp, #28]
 8009126:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x - 1;
 800912a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800912e:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + q->radius;
 8009132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009134:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8009138:	f00d ff9d 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 800913c:	2800      	cmp	r0, #0
 800913e:	d0a8      	beq.n	8009092 <lv_draw_arc+0x702>
 8009140:	aa2c      	add	r2, sp, #176	; 0xb0
 8009142:	a925      	add	r1, sp, #148	; 0x94
 8009144:	a80f      	add	r0, sp, #60	; 0x3c
 8009146:	f003 fd71 	bl	800cc2c <lv_draw_rect>
 800914a:	e7a2      	b.n	8009092 <lv_draw_arc+0x702>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	2b03      	cmp	r3, #3
 8009150:	d19f      	bne.n	8009092 <lv_draw_arc+0x702>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8009152:	f1bb 0f02 	cmp.w	fp, #2
 8009156:	d0df      	beq.n	8009118 <lv_draw_arc+0x788>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	455b      	cmp	r3, fp
 800915c:	f43f aecf 	beq.w	8008efe <lv_draw_arc+0x56e>
 8009160:	2d59      	cmp	r5, #89	; 0x59
 8009162:	d912      	bls.n	800918a <lv_draw_arc+0x7fa>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d113      	bne.n	8009192 <lv_draw_arc+0x802>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 800916a:	f1bb 0f03 	cmp.w	fp, #3
 800916e:	f43f aec9 	beq.w	8008f04 <lv_draw_arc+0x574>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8009172:	2c59      	cmp	r4, #89	; 0x59
 8009174:	f67f aec6 	bls.w	8008f04 <lv_draw_arc+0x574>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	455b      	cmp	r3, fp
 800917c:	d04c      	beq.n	8009218 <lv_draw_arc+0x888>
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d15b      	bne.n	800923c <lv_draw_arc+0x8ac>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8009184:	2cb3      	cmp	r4, #179	; 0xb3
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8009186:	d949      	bls.n	800921c <lv_draw_arc+0x88c>
 8009188:	e5d2      	b.n	8008d30 <lv_draw_arc+0x3a0>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800918a:	f1bb 0f03 	cmp.w	fp, #3
 800918e:	f43f aeb9 	beq.w	8008f04 <lv_draw_arc+0x574>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	2b03      	cmp	r3, #3
 8009196:	f47f af56 	bne.w	8009046 <lv_draw_arc+0x6b6>
 800919a:	f1bb 0f03 	cmp.w	fp, #3
 800919e:	f47f ad9e 	bne.w	8008cde <lv_draw_arc+0x34e>
 80091a2:	42a5      	cmp	r5, r4
 80091a4:	f4bf ad9b 	bcs.w	8008cde <lv_draw_arc+0x34e>
 80091a8:	9b04      	ldr	r3, [sp, #16]
        quarter_area.x1 = q->center_x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80091aa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80091ae:	eba6 0b03 	sub.w	fp, r6, r3
 80091b2:	b200      	sxth	r0, r0
 80091b4:	f00e fad2 	bl	801775c <lv_trigo_sin>
 80091b8:	fb0b f000 	mul.w	r0, fp, r0
 80091bc:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
 80091c0:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
        quarter_area.y1 = q->center_y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80091c4:	4648      	mov	r0, r9
 80091c6:	f00e fac9 	bl	801775c <lv_trigo_sin>
 80091ca:	4370      	muls	r0, r6
 80091cc:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 80091d0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80091d4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80091d8:	b200      	sxth	r0, r0
 80091da:	f00e fabf 	bl	801775c <lv_trigo_sin>
 80091de:	4370      	muls	r0, r6
 80091e0:	eb0a 36e0 	add.w	r6, sl, r0, asr #15
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80091e4:	ee18 0a10 	vmov	r0, s16
        quarter_area.x2 = q->center_x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80091e8:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80091ec:	f00e fab6 	bl	801775c <lv_trigo_sin>
 80091f0:	fb0b f000 	mul.w	r0, fp, r0
 80091f4:	eb07 30e0 	add.w	r0, r7, r0, asr #15
 80091f8:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 80091fc:	a925      	add	r1, sp, #148	; 0x94
 80091fe:	4642      	mov	r2, r8
 8009200:	4608      	mov	r0, r1
 8009202:	f00d ff38 	bl	8017076 <_lv_area_intersect>
        if(ok) lv_draw_rect(q->draw_area, &quarter_area, q->draw_dsc);
 8009206:	2800      	cmp	r0, #0
 8009208:	f43f ad92 	beq.w	8008d30 <lv_draw_arc+0x3a0>
 800920c:	aa2c      	add	r2, sp, #176	; 0xb0
 800920e:	a925      	add	r1, sp, #148	; 0x94
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8009210:	a80f      	add	r0, sp, #60	; 0x3c
 8009212:	f003 fd0b 	bl	800cc2c <lv_draw_rect>
 8009216:	e58b      	b.n	8008d30 <lv_draw_arc+0x3a0>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8009218:	42a5      	cmp	r5, r4
 800921a:	d9b0      	bls.n	800917e <lv_draw_arc+0x7ee>
        quarter_area.x1 = q->center_x;
 800921c:	9b06      	ldr	r3, [sp, #24]
 800921e:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
        quarter_area.y1 = q->center_y - q->radius;
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        quarter_area.x2 = q->center_x + q->radius;
 8009228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800922a:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        quarter_area.y2 = q->center_y - 1;
 800922e:	1e7b      	subs	r3, r7, #1
 8009230:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, q->clip_area);
 8009234:	e7e2      	b.n	80091fc <lv_draw_arc+0x86c>
        lv_draw_rect(&area_out, clip_area, &cir_dsc);
 8009236:	aa2c      	add	r2, sp, #176	; 0xb0
 8009238:	4641      	mov	r1, r8
 800923a:	e7e9      	b.n	8009210 <lv_draw_arc+0x880>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	2b01      	cmp	r3, #1
 8009240:	f47f ad76 	bne.w	8008d30 <lv_draw_arc+0x3a0>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8009244:	2c59      	cmp	r4, #89	; 0x59
 8009246:	e79e      	b.n	8009186 <lv_draw_arc+0x7f6>

08009248 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8009248:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800924a:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800924e:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8009252:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8009256:	f248 0681 	movw	r6, #32897	; 0x8081
 800925a:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800925c:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009260:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8009264:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009268:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800926a:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800926c:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800926e:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8009270:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009274:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009278:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800927c:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009280:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009284:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009286:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8009288:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800928a:	4372      	muls	r2, r6
    return ret;
 800928c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8009290:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8009292:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8009296:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 800929a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800929c <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800929c:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 800929e:	2a02      	cmp	r2, #2
{
 80092a0:	b4f0      	push	{r4, r5, r6, r7}
 80092a2:	f003 071f 	and.w	r7, r3, #31
 80092a6:	f3c3 1545 	ubfx	r5, r3, #5, #6
 80092aa:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 80092ae:	d802      	bhi.n	80092b6 <color_blend_true_color_additive+0x1a>
 80092b0:	4608      	mov	r0, r1
#endif

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 80092b2:	bcf0      	pop	{r4, r5, r6, r7}
 80092b4:	4770      	bx	lr
    tmp = bg.ch.red + fg.ch.red;
 80092b6:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80092ba:	4423      	add	r3, r4
    tmp = bg.ch.green + fg.ch.green;
 80092bc:	f3c0 1445 	ubfx	r4, r0, #5, #6
    fg.ch.red = LV_MIN(tmp, 31);
 80092c0:	2b1f      	cmp	r3, #31
    tmp = bg.ch.green + fg.ch.green;
 80092c2:	442c      	add	r4, r5
    tmp = bg.ch.blue + fg.ch.blue;
 80092c4:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MIN(tmp, 31);
 80092c8:	bf28      	it	cs
 80092ca:	231f      	movcs	r3, #31
    fg.ch.green = LV_MIN(tmp, 63);
 80092cc:	2c3f      	cmp	r4, #63	; 0x3f
    tmp = bg.ch.blue + fg.ch.blue;
 80092ce:	443d      	add	r5, r7
    fg.ch.green = LV_MIN(tmp, 63);
 80092d0:	bf28      	it	cs
 80092d2:	243f      	movcs	r4, #63	; 0x3f
    fg.ch.red = LV_MIN(tmp, 31);
 80092d4:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MIN(tmp, 31);
 80092d8:	2d1f      	cmp	r5, #31
    fg.ch.green = LV_MIN(tmp, 63);
 80092da:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MIN(tmp, 31);
 80092de:	bf28      	it	cs
 80092e0:	251f      	movcs	r5, #31
    if(opa == LV_OPA_COVER) return fg;
 80092e2:	2aff      	cmp	r2, #255	; 0xff
    fg.ch.blue = LV_MIN(tmp, 31);
 80092e4:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 80092e8:	d108      	bne.n	80092fc <color_blend_true_color_additive+0x60>
 80092ea:	f04f 0000 	mov.w	r0, #0
 80092ee:	f365 0004 	bfi	r0, r5, #0, #5
 80092f2:	f364 104a 	bfi	r0, r4, #5, #6
 80092f6:	f363 20cf 	bfi	r0, r3, #11, #5
 80092fa:	e7da      	b.n	80092b2 <color_blend_true_color_additive+0x16>
    return lv_color_mix(fg, bg, opa);
 80092fc:	f365 0004 	bfi	r0, r5, #0, #5
 8009300:	f364 104a 	bfi	r0, r4, #5, #6
}
 8009304:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8009306:	f363 20cf 	bfi	r0, r3, #11, #5
 800930a:	f7ff bf9d 	b.w	8009248 <lv_color_mix>

0800930e <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 800930e:	460b      	mov	r3, r1

    if(opa <= LV_OPA_MIN) return bg;
 8009310:	2a02      	cmp	r2, #2
{
 8009312:	b4f0      	push	{r4, r5, r6, r7}
 8009314:	f003 061f 	and.w	r6, r3, #31
 8009318:	f3c3 1545 	ubfx	r5, r3, #5, #6
 800931c:	f3c3 24c4 	ubfx	r4, r3, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8009320:	d802      	bhi.n	8009328 <color_blend_true_color_subtractive+0x1a>
 8009322:	4608      	mov	r0, r1
    fg.ch.blue = LV_MAX(tmp, 0);

    if(opa == LV_OPA_COVER) return fg;

    return lv_color_mix(fg, bg, opa);
}
 8009324:	bcf0      	pop	{r4, r5, r6, r7}
 8009326:	4770      	bx	lr
    tmp = bg.ch.red - fg.ch.red;
 8009328:	f3c0 23c4 	ubfx	r3, r0, #11, #5
    if(opa == LV_OPA_COVER) return fg;
 800932c:	2aff      	cmp	r2, #255	; 0xff
    tmp = bg.ch.red - fg.ch.red;
 800932e:	eba4 0303 	sub.w	r3, r4, r3
    tmp = bg.ch.green - fg.ch.green;
 8009332:	f3c0 1445 	ubfx	r4, r0, #5, #6
 8009336:	eba5 0404 	sub.w	r4, r5, r4
    tmp = bg.ch.blue - fg.ch.blue;
 800933a:	f000 051f 	and.w	r5, r0, #31
    fg.ch.red = LV_MAX(tmp, 0);
 800933e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    tmp = bg.ch.blue - fg.ch.blue;
 8009342:	eba6 0505 	sub.w	r5, r6, r5
    fg.ch.green = LV_MAX(tmp, 0);
 8009346:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    fg.ch.red = LV_MAX(tmp, 0);
 800934a:	f003 031f 	and.w	r3, r3, #31
    fg.ch.blue = LV_MAX(tmp, 0);
 800934e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fg.ch.green = LV_MAX(tmp, 0);
 8009352:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    fg.ch.blue = LV_MAX(tmp, 0);
 8009356:	f005 051f 	and.w	r5, r5, #31
    if(opa == LV_OPA_COVER) return fg;
 800935a:	d108      	bne.n	800936e <color_blend_true_color_subtractive+0x60>
 800935c:	f04f 0000 	mov.w	r0, #0
 8009360:	f365 0004 	bfi	r0, r5, #0, #5
 8009364:	f364 104a 	bfi	r0, r4, #5, #6
 8009368:	f363 20cf 	bfi	r0, r3, #11, #5
 800936c:	e7da      	b.n	8009324 <color_blend_true_color_subtractive+0x16>
    return lv_color_mix(fg, bg, opa);
 800936e:	f365 0004 	bfi	r0, r5, #0, #5
 8009372:	f364 104a 	bfi	r0, r4, #5, #6
}
 8009376:	bcf0      	pop	{r4, r5, r6, r7}
    return lv_color_mix(fg, bg, opa);
 8009378:	f363 20cf 	bfi	r0, r3, #11, #5
 800937c:	f7ff bf64 	b.w	8009248 <lv_color_mix>

08009380 <_lv_blend_fill>:
{
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	b08d      	sub	sp, #52	; 0x34
 8009386:	4699      	mov	r9, r3
 8009388:	4607      	mov	r7, r0
 800938a:	4688      	mov	r8, r1
 800938c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009390:	4614      	mov	r4, r2
 8009392:	f89d b060 	ldrb.w	fp, [sp, #96]	; 0x60
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    if(opa < LV_OPA_MIN) return;
 800939c:	2b01      	cmp	r3, #1
{
 800939e:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
 80093a0:	f240 80a7 	bls.w	80094f2 <_lv_blend_fill+0x172>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80093a4:	9b07      	ldr	r3, [sp, #28]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 80a3 	beq.w	80094f2 <_lv_blend_fill+0x172>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80093ac:	f7ff f894 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 80093b0:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 80093b2:	f00d fbad 	bl	8016b10 <lv_disp_get_draw_buf>
 80093b6:	4606      	mov	r6, r0
    lv_color_t * disp_buf = draw_buf->buf_act;
 80093b8:	f8d0 a008 	ldr.w	sl, [r0, #8]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 80093bc:	6828      	ldr	r0, [r5, #0]
 80093be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80093c0:	b103      	cbz	r3, 80093c4 <_lv_blend_fill+0x44>
 80093c2:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
 80093c4:	4642      	mov	r2, r8
 80093c6:	4639      	mov	r1, r7
 80093c8:	a80a      	add	r0, sp, #40	; 0x28
 80093ca:	f00d fe54 	bl	8017076 <_lv_area_intersect>
    if(!is_common) return;
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f000 808f 	beq.w	80094f2 <_lv_blend_fill+0x172>
    draw_area.x1 -= disp_area->x1;
 80093d4:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 80093d8:	8a31      	ldrh	r1, [r6, #16]
    draw_area.x2 -= disp_area->x1;
 80093da:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
 80093de:	1a43      	subs	r3, r0, r1
    draw_area.y1 -= disp_area->y1;
 80093e0:	f8b6 c012 	ldrh.w	ip, [r6, #18]
 80093e4:	f8bd 702a 	ldrh.w	r7, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
 80093e8:	1a51      	subs	r1, r2, r1
    draw_area.x1 -= disp_area->x1;
 80093ea:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
 80093ec:	eba7 070c 	sub.w	r7, r7, ip
    draw_area.x2 -= disp_area->x1;
 80093f0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
 80093f4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    draw_area.y1 -= disp_area->y1;
 80093f8:	b23f      	sxth	r7, r7
    draw_area.x1 -= disp_area->x1;
 80093fa:	9306      	str	r3, [sp, #24]
    draw_area.y2 -= disp_area->y1;
 80093fc:	eba1 0c0c 	sub.w	ip, r1, ip
    draw_area.x1 -= disp_area->x1;
 8009400:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
 8009404:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
 8009408:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
    if(mask && disp->driver->antialiasing == 0 && mask) {
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	d140      	bne.n	8009494 <_lv_blend_fill+0x114>
    if(disp->driver->set_px_cb) {
 8009412:	6829      	ldr	r1, [r5, #0]
 8009414:	6949      	ldr	r1, [r1, #20]
 8009416:	2900      	cmp	r1, #0
 8009418:	d15a      	bne.n	80094d0 <_lv_blend_fill+0x150>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 800941a:	f1bb 0f00 	cmp.w	fp, #0
 800941e:	f040 81e5 	bne.w	80097ec <_lv_blend_fill+0x46c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009422:	f7ff f859 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009426:	8ab3      	ldrh	r3, [r6, #20]
 8009428:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800942c:	4680      	mov	r8, r0
 800942e:	3301      	adds	r3, #1
 8009430:	8a36      	ldrh	r6, [r6, #16]
 8009432:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009434:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009438:	1b9e      	subs	r6, r3, r6
 800943a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	b236      	sxth	r6, r6
 8009442:	b212      	sxth	r2, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8009444:	fb06 3307 	mla	r3, r6, r7, r3
 8009448:	9206      	str	r2, [sp, #24]
 800944a:	eb0a 0543 	add.w	r5, sl, r3, lsl #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800944e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8009452:	3201      	adds	r2, #1
 8009454:	1bd2      	subs	r2, r2, r7
    int32_t draw_area_h = lv_area_get_height(draw_area);
 8009456:	b212      	sxth	r2, r2
 8009458:	9208      	str	r2, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 800945a:	9a07      	ldr	r2, [sp, #28]
 800945c:	2a01      	cmp	r2, #1
 800945e:	f040 8109 	bne.w	8009674 <_lv_blend_fill+0x2f4>
        if(opa > LV_OPA_MAX) {
 8009462:	9b05      	ldr	r3, [sp, #20]
 8009464:	2bfd      	cmp	r3, #253	; 0xfd
 8009466:	f240 80a0 	bls.w	80095aa <_lv_blend_fill+0x22a>
            if(disp->driver->gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
 800946a:	6803      	ldr	r3, [r0, #0]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 8098 	beq.w	80095a4 <_lv_blend_fill+0x224>
 8009474:	a80a      	add	r0, sp, #40	; 0x28
 8009476:	f00d fdd0 	bl	801701a <lv_area_get_size>
 800947a:	28f0      	cmp	r0, #240	; 0xf0
 800947c:	f240 8092 	bls.w	80095a4 <_lv_blend_fill+0x224>
                disp->driver->gpu_fill_cb(disp->driver, disp_buf, disp_w, draw_area, color);
 8009480:	f8d8 0000 	ldr.w	r0, [r8]
 8009484:	ab0a      	add	r3, sp, #40	; 0x28
 8009486:	f8ad 4000 	strh.w	r4, [sp]
 800948a:	4632      	mov	r2, r6
 800948c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800948e:	4651      	mov	r1, sl
 8009490:	47a0      	blx	r4
                return;
 8009492:	e02e      	b.n	80094f2 <_lv_blend_fill+0x172>
    if(mask && disp->driver->antialiasing == 0 && mask) {
 8009494:	6829      	ldr	r1, [r5, #0]
 8009496:	7a09      	ldrb	r1, [r1, #8]
 8009498:	0749      	lsls	r1, r1, #29
 800949a:	d4ba      	bmi.n	8009412 <_lv_blend_fill+0x92>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800949c:	f102 0801 	add.w	r8, r2, #1
 80094a0:	f109 31ff 	add.w	r1, r9, #4294967295
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80094a4:	f1c9 0e01 	rsb	lr, r9, #1
 80094a8:	eba8 0800 	sub.w	r8, r8, r0
        int32_t mask_w = lv_area_get_width(&draw_area);
 80094ac:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80094b0:	eb0e 0c01 	add.w	ip, lr, r1
 80094b4:	45e0      	cmp	r8, ip
 80094b6:	ddac      	ble.n	8009412 <_lv_blend_fill+0x92>
 80094b8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80094bc:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 80094c0:	f04f 3cff 	mov.w	ip, #4294967295
 80094c4:	bf98      	it	ls
 80094c6:	f04f 0c00 	movls.w	ip, #0
 80094ca:	f881 c000 	strb.w	ip, [r1]
 80094ce:	e7ef      	b.n	80094b0 <_lv_blend_fill+0x130>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80094d0:	f7ff f802 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 80094d4:	8ab2      	ldrh	r2, [r6, #20]
 80094d6:	8a33      	ldrh	r3, [r6, #16]
 80094d8:	3201      	adds	r2, #1
 80094da:	f9bd 502a 	ldrsh.w	r5, [sp, #42]	; 0x2a
 80094de:	9006      	str	r0, [sp, #24]
 80094e0:	1ad2      	subs	r2, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	b212      	sxth	r2, r2
 80094e8:	d121      	bne.n	800952e <_lv_blend_fill+0x1ae>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80094ea:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80094ee:	429d      	cmp	r5, r3
 80094f0:	dd02      	ble.n	80094f8 <_lv_blend_fill+0x178>
}
 80094f2:	b00d      	add	sp, #52	; 0x34
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80094f8:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 80094fc:	fa0f f885 	sxth.w	r8, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009500:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8009504:	429e      	cmp	r6, r3
 8009506:	dd01      	ble.n	800950c <_lv_blend_fill+0x18c>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009508:	3501      	adds	r5, #1
 800950a:	e7ee      	b.n	80094ea <_lv_blend_fill+0x16a>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 800950c:	9b06      	ldr	r3, [sp, #24]
 800950e:	4651      	mov	r1, sl
 8009510:	9207      	str	r2, [sp, #28]
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	9b05      	ldr	r3, [sp, #20]
 8009516:	f8ad 4004 	strh.w	r4, [sp, #4]
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	b233      	sxth	r3, r6
 800951e:	f8cd 8000 	str.w	r8, [sp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009522:	3601      	adds	r6, #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
 8009524:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8009528:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800952a:	9a07      	ldr	r2, [sp, #28]
 800952c:	e7e8      	b.n	8009500 <_lv_blend_fill+0x180>
 800952e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009532:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8009536:	3301      	adds	r3, #1
 8009538:	eba9 0901 	sub.w	r9, r9, r1
 800953c:	1a5b      	subs	r3, r3, r1
 800953e:	fa0f f883 	sxth.w	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009542:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009546:	429d      	cmp	r5, r3
 8009548:	dcd3      	bgt.n	80094f2 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800954a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800954e:	fa0f fb85 	sxth.w	fp, r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009552:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8009556:	429e      	cmp	r6, r3
 8009558:	dd02      	ble.n	8009560 <_lv_blend_fill+0x1e0>
            mask_tmp += draw_area_w;
 800955a:	44c1      	add	r9, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800955c:	3501      	adds	r5, #1
 800955e:	e7f0      	b.n	8009542 <_lv_blend_fill+0x1c2>
                if(mask_tmp[x]) {
 8009560:	f819 3006 	ldrb.w	r3, [r9, r6]
 8009564:	b18b      	cbz	r3, 800958a <_lv_blend_fill+0x20a>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009566:	9906      	ldr	r1, [sp, #24]
 8009568:	9207      	str	r2, [sp, #28]
 800956a:	6808      	ldr	r0, [r1, #0]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 800956c:	9905      	ldr	r1, [sp, #20]
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 800956e:	f8ad 4004 	strh.w	r4, [sp, #4]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8009572:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, color,
 8009576:	f8cd b000 	str.w	fp, [sp]
 800957a:	4651      	mov	r1, sl
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	6943      	ldr	r3, [r0, #20]
 8009582:	461f      	mov	r7, r3
 8009584:	b233      	sxth	r3, r6
 8009586:	47b8      	blx	r7
 8009588:	9a07      	ldr	r2, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 800958a:	3601      	adds	r6, #1
 800958c:	e7e1      	b.n	8009552 <_lv_blend_fill+0x1d2>
                lv_color_fill(disp_buf_first, color, draw_area_w);
 800958e:	4628      	mov	r0, r5
            for(y = 0; y < draw_area_h; y++) {
 8009590:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
 8009592:	4435      	add	r5, r6
                lv_color_fill(disp_buf_first, color, draw_area_w);
 8009594:	9a06      	ldr	r2, [sp, #24]
 8009596:	4621      	mov	r1, r4
 8009598:	f00d fedf 	bl	801735a <lv_color_fill>
            for(y = 0; y < draw_area_h; y++) {
 800959c:	9b08      	ldr	r3, [sp, #32]
 800959e:	42bb      	cmp	r3, r7
 80095a0:	dcf5      	bgt.n	800958e <_lv_blend_fill+0x20e>
 80095a2:	e7a6      	b.n	80094f2 <_lv_blend_fill+0x172>
                disp_buf_first += disp_w;
 80095a4:	0076      	lsls	r6, r6, #1
 80095a6:	2700      	movs	r7, #0
 80095a8:	e7f8      	b.n	800959c <_lv_blend_fill+0x21c>
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80095aa:	9a05      	ldr	r2, [sp, #20]
 80095ac:	4659      	mov	r1, fp
 80095ae:	4620      	mov	r0, r4
 80095b0:	f7ff fe4a 	bl	8009248 <lv_color_mix>

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 80095b4:	9f05      	ldr	r7, [sp, #20]
 80095b6:	f3c4 22c4 	ubfx	r2, r4, #11, #5
 80095ba:	f000 031f 	and.w	r3, r0, #31
 80095be:	f3c0 1145 	ubfx	r1, r0, #5, #6
            for(y = 0; y < draw_area_h; y++) {
 80095c2:	46dc      	mov	ip, fp
 80095c4:	437a      	muls	r2, r7
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 80095c6:	f3c0 20c4 	ubfx	r0, r0, #11, #5
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80095ca:	f248 0e81 	movw	lr, #32897	; 0x8081
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 80095ce:	9207      	str	r2, [sp, #28]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80095d0:	f3c4 1245 	ubfx	r2, r4, #5, #6
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80095d4:	f004 041f 	and.w	r4, r4, #31
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80095d8:	437a      	muls	r2, r7
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 80095da:	fb04 fa07 	mul.w	sl, r4, r7
            lv_opa_t opa_inv = 255 - opa;
 80095de:	43fc      	mvns	r4, r7
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 80095e0:	9209      	str	r2, [sp, #36]	; 0x24
                disp_buf_first += disp_w;
 80095e2:	0072      	lsls	r2, r6, #1
            lv_opa_t opa_inv = 255 - opa;
 80095e4:	b2e4      	uxtb	r4, r4
                disp_buf_first += disp_w;
 80095e6:	9205      	str	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 80095e8:	9a08      	ldr	r2, [sp, #32]
 80095ea:	4562      	cmp	r2, ip
 80095ec:	dd81      	ble.n	80094f2 <_lv_blend_fill+0x172>
 80095ee:	462f      	mov	r7, r5
                for(x = 0; x < draw_area_w; x++) {
 80095f0:	2600      	movs	r6, #0
 80095f2:	e037      	b.n	8009664 <_lv_blend_fill+0x2e4>
                    if(last_dest_color.full != disp_buf_first[x].full) {
 80095f4:	463a      	mov	r2, r7
 80095f6:	f837 8b02 	ldrh.w	r8, [r7], #2
 80095fa:	45d8      	cmp	r8, fp
 80095fc:	d01e      	beq.n	800963c <_lv_blend_fill+0x2bc>
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80095fe:	7850      	ldrb	r0, [r2, #1]
 8009600:	9b07      	ldr	r3, [sp, #28]
 8009602:	08c0      	lsrs	r0, r0, #3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009604:	8811      	ldrh	r1, [r2, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009606:	fb00 3004 	mla	r0, r0, r4, r3
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800960a:	f3c1 1145 	ubfx	r1, r1, #5, #6
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009610:	3080      	adds	r0, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009612:	fb01 3104 	mla	r1, r1, r4, r3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009616:	7813      	ldrb	r3, [r2, #0]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009618:	fb0e f000 	mul.w	r0, lr, r0
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800961c:	f003 031f 	and.w	r3, r3, #31
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009620:	3180      	adds	r1, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009622:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009626:	fb03 a304 	mla	r3, r3, r4, sl
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800962a:	fb0e f101 	mul.w	r1, lr, r1
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800962e:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009630:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8009634:	fb0e f303 	mul.w	r3, lr, r3
 8009638:	f3c3 53c4 	ubfx	r3, r3, #23, #5
                    disp_buf_first[x] = last_res_color;
 800963c:	f892 9000 	ldrb.w	r9, [r2]
                for(x = 0; x < draw_area_w; x++) {
 8009640:	3601      	adds	r6, #1
                    if(last_dest_color.full != disp_buf_first[x].full) {
 8009642:	46c3      	mov	fp, r8
                    disp_buf_first[x] = last_res_color;
 8009644:	f363 0904 	bfi	r9, r3, #0, #5
 8009648:	f882 9000 	strb.w	r9, [r2]
 800964c:	f8b2 9000 	ldrh.w	r9, [r2]
 8009650:	f361 194a 	bfi	r9, r1, #5, #6
 8009654:	f8a2 9000 	strh.w	r9, [r2]
 8009658:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800965c:	f360 09c7 	bfi	r9, r0, #3, #5
 8009660:	f882 9001 	strb.w	r9, [r2, #1]
                for(x = 0; x < draw_area_w; x++) {
 8009664:	9a06      	ldr	r2, [sp, #24]
 8009666:	42b2      	cmp	r2, r6
 8009668:	dcc4      	bgt.n	80095f4 <_lv_blend_fill+0x274>
                disp_buf_first += disp_w;
 800966a:	9a05      	ldr	r2, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800966c:	f10c 0c01 	add.w	ip, ip, #1
                disp_buf_first += disp_w;
 8009670:	4415      	add	r5, r2
            for(y = 0; y < draw_area_h; y++) {
 8009672:	e7b9      	b.n	80095e8 <_lv_blend_fill+0x268>
        if(opa > LV_OPA_MAX) {
 8009674:	9a05      	ldr	r2, [sp, #20]
 8009676:	0076      	lsls	r6, r6, #1
 8009678:	2afd      	cmp	r2, #253	; 0xfd
 800967a:	d80d      	bhi.n	8009698 <_lv_blend_fill+0x318>
        last_dest_color.full = disp_buf_first[0].full;
 800967c:	f83a c013 	ldrh.w	ip, [sl, r3, lsl #1]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8009680:	465a      	mov	r2, fp
        last_res_color.full = disp_buf_first[0].full;
 8009682:	4660      	mov	r0, ip
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009684:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009688:	429f      	cmp	r7, r3
 800968a:	f73f af32 	bgt.w	80094f2 <_lv_blend_fill+0x172>
 800968e:	f109 3aff 	add.w	sl, r9, #4294967295
                for(x = 0; x < draw_area_w; x++) {
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	e0a2      	b.n	80097de <_lv_blend_fill+0x45e>
        int32_t x_end4 = draw_area_w - 4;
 8009698:	9b06      	ldr	r3, [sp, #24]
 800969a:	3b04      	subs	r3, #4
 800969c:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
 800969e:	9b08      	ldr	r3, [sp, #32]
 80096a0:	455b      	cmp	r3, fp
 80096a2:	f77f af26 	ble.w	80094f2 <_lv_blend_fill+0x172>
 80096a6:	464f      	mov	r7, r9
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80096a8:	f04f 0800 	mov.w	r8, #0
 80096ac:	e008      	b.n	80096c0 <_lv_blend_fill+0x340>
                    FILL_NORMAL_MASK_PX(x, color)
 80096ae:	f817 2b01 	ldrb.w	r2, [r7], #1
 80096b2:	b11a      	cbz	r2, 80096bc <_lv_blend_fill+0x33c>
 80096b4:	2aff      	cmp	r2, #255	; 0xff
 80096b6:	d118      	bne.n	80096ea <_lv_blend_fill+0x36a>
 80096b8:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80096bc:	f108 0801 	add.w	r8, r8, #1
 80096c0:	9b06      	ldr	r3, [sp, #24]
 80096c2:	46ba      	mov	sl, r7
 80096c4:	4543      	cmp	r3, r8
 80096c6:	dd01      	ble.n	80096cc <_lv_blend_fill+0x34c>
 80096c8:	07bb      	lsls	r3, r7, #30
 80096ca:	d1f0      	bne.n	80096ae <_lv_blend_fill+0x32e>
 80096cc:	eb05 0748 	add.w	r7, r5, r8, lsl #1
                for(; x <= x_end4; x += 4) {
 80096d0:	9b05      	ldr	r3, [sp, #20]
 80096d2:	4543      	cmp	r3, r8
 80096d4:	da11      	bge.n	80096fa <_lv_blend_fill+0x37a>
 80096d6:	f10a 37ff 	add.w	r7, sl, #4294967295
                for(; x < draw_area_w ; x++) {
 80096da:	9b06      	ldr	r3, [sp, #24]
 80096dc:	4543      	cmp	r3, r8
 80096de:	dc4b      	bgt.n	8009778 <_lv_blend_fill+0x3f8>
                disp_buf_first += disp_w;
 80096e0:	4435      	add	r5, r6
                mask += draw_area_w;
 80096e2:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
 80096e4:	f10b 0b01 	add.w	fp, fp, #1
 80096e8:	e7d9      	b.n	800969e <_lv_blend_fill+0x31e>
                    FILL_NORMAL_MASK_PX(x, color)
 80096ea:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff fdaa 	bl	8009248 <lv_color_mix>
 80096f4:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
 80096f8:	e7e0      	b.n	80096bc <_lv_blend_fill+0x33c>
                    if(*mask32) {
 80096fa:	f8da 2000 	ldr.w	r2, [sl]
 80096fe:	b12a      	cbz	r2, 800970c <_lv_blend_fill+0x38c>
                        if((*mask32) == 0xFFFFFFFF) {
 8009700:	3201      	adds	r2, #1
 8009702:	d109      	bne.n	8009718 <_lv_blend_fill+0x398>
                            disp_buf_first[x] = color;
 8009704:	803c      	strh	r4, [r7, #0]
                            disp_buf_first[x + 1] = color;
 8009706:	807c      	strh	r4, [r7, #2]
                            disp_buf_first[x + 2] = color;
 8009708:	80bc      	strh	r4, [r7, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800970a:	80fc      	strh	r4, [r7, #6]
                    mask32++;
 800970c:	f10a 0a04 	add.w	sl, sl, #4
                for(; x <= x_end4; x += 4) {
 8009710:	f108 0804 	add.w	r8, r8, #4
 8009714:	3708      	adds	r7, #8
 8009716:	e7db      	b.n	80096d0 <_lv_blend_fill+0x350>
                            FILL_NORMAL_MASK_PX(x, color)
 8009718:	f89a 2000 	ldrb.w	r2, [sl]
 800971c:	b112      	cbz	r2, 8009724 <_lv_blend_fill+0x3a4>
 800971e:	2aff      	cmp	r2, #255	; 0xff
 8009720:	d118      	bne.n	8009754 <_lv_blend_fill+0x3d4>
 8009722:	803c      	strh	r4, [r7, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8009724:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009728:	b112      	cbz	r2, 8009730 <_lv_blend_fill+0x3b0>
 800972a:	2aff      	cmp	r2, #255	; 0xff
 800972c:	d118      	bne.n	8009760 <_lv_blend_fill+0x3e0>
 800972e:	807c      	strh	r4, [r7, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
 8009730:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009734:	b112      	cbz	r2, 800973c <_lv_blend_fill+0x3bc>
 8009736:	2aff      	cmp	r2, #255	; 0xff
 8009738:	d118      	bne.n	800976c <_lv_blend_fill+0x3ec>
 800973a:	80bc      	strh	r4, [r7, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
 800973c:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8009740:	2a00      	cmp	r2, #0
 8009742:	d0e3      	beq.n	800970c <_lv_blend_fill+0x38c>
 8009744:	2aff      	cmp	r2, #255	; 0xff
 8009746:	d0e0      	beq.n	800970a <_lv_blend_fill+0x38a>
 8009748:	88f9      	ldrh	r1, [r7, #6]
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff fd7c 	bl	8009248 <lv_color_mix>
 8009750:	80f8      	strh	r0, [r7, #6]
 8009752:	e7db      	b.n	800970c <_lv_blend_fill+0x38c>
                            FILL_NORMAL_MASK_PX(x, color)
 8009754:	8839      	ldrh	r1, [r7, #0]
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff fd76 	bl	8009248 <lv_color_mix>
 800975c:	8038      	strh	r0, [r7, #0]
 800975e:	e7e1      	b.n	8009724 <_lv_blend_fill+0x3a4>
                            FILL_NORMAL_MASK_PX(x + 1, color)
 8009760:	8879      	ldrh	r1, [r7, #2]
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff fd70 	bl	8009248 <lv_color_mix>
 8009768:	8078      	strh	r0, [r7, #2]
 800976a:	e7e1      	b.n	8009730 <_lv_blend_fill+0x3b0>
                            FILL_NORMAL_MASK_PX(x + 2, color)
 800976c:	88b9      	ldrh	r1, [r7, #4]
 800976e:	4620      	mov	r0, r4
 8009770:	f7ff fd6a 	bl	8009248 <lv_color_mix>
 8009774:	80b8      	strh	r0, [r7, #4]
 8009776:	e7e1      	b.n	800973c <_lv_blend_fill+0x3bc>
                    FILL_NORMAL_MASK_PX(x, color)
 8009778:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800977c:	b11a      	cbz	r2, 8009786 <_lv_blend_fill+0x406>
 800977e:	2aff      	cmp	r2, #255	; 0xff
 8009780:	d104      	bne.n	800978c <_lv_blend_fill+0x40c>
 8009782:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
                for(; x < draw_area_w ; x++) {
 8009786:	f108 0801 	add.w	r8, r8, #1
 800978a:	e7a6      	b.n	80096da <_lv_blend_fill+0x35a>
                    FILL_NORMAL_MASK_PX(x, color)
 800978c:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8009790:	4620      	mov	r0, r4
 8009792:	f7ff fd59 	bl	8009248 <lv_color_mix>
 8009796:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
 800979a:	e7f4      	b.n	8009786 <_lv_blend_fill+0x406>
                    if(*mask_tmp_x) {
 800979c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80097a0:	b1db      	cbz	r3, 80097da <_lv_blend_fill+0x45a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 80097a2:	455b      	cmp	r3, fp
 80097a4:	eb05 0148 	add.w	r1, r5, r8, lsl #1
 80097a8:	d011      	beq.n	80097ce <_lv_blend_fill+0x44e>
 80097aa:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 80097ac:	9a05      	ldr	r2, [sp, #20]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 80097ae:	d002      	beq.n	80097b6 <_lv_blend_fill+0x436>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
 80097b0:	fb13 f202 	smulbb	r2, r3, r2
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
 80097b4:	0a12      	lsrs	r2, r2, #8
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 80097b6:	8809      	ldrh	r1, [r1, #0]
 80097b8:	4620      	mov	r0, r4
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	f7ff fd44 	bl	8009248 <lv_color_mix>
                            last_mask = *mask_tmp_x;
 80097c0:	f89a b000 	ldrb.w	fp, [sl]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
 80097c4:	b280      	uxth	r0, r0
                            last_dest_color.full = disp_buf_first[x].full;
 80097c6:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
 80097ca:	9a07      	ldr	r2, [sp, #28]
 80097cc:	e003      	b.n	80097d6 <_lv_blend_fill+0x456>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
 80097ce:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 80097d2:	4563      	cmp	r3, ip
 80097d4:	d1ef      	bne.n	80097b6 <_lv_blend_fill+0x436>
                        disp_buf_first[x] = last_res_color;
 80097d6:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 80097da:	f108 0801 	add.w	r8, r8, #1
 80097de:	9b06      	ldr	r3, [sp, #24]
 80097e0:	4543      	cmp	r3, r8
 80097e2:	dcdb      	bgt.n	800979c <_lv_blend_fill+0x41c>
                disp_buf_first += disp_w;
 80097e4:	4435      	add	r5, r6
                mask += draw_area_w;
 80097e6:	4499      	add	r9, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80097e8:	3701      	adds	r7, #1
 80097ea:	e74b      	b.n	8009684 <_lv_blend_fill+0x304>
    switch(mode) {
 80097ec:	f1bb 0f01 	cmp.w	fp, #1
 80097f0:	d02d      	beq.n	800984e <_lv_blend_fill+0x4ce>
 80097f2:	f1bb 0f02 	cmp.w	fp, #2
 80097f6:	f47f ae7c 	bne.w	80094f2 <_lv_blend_fill+0x172>
 80097fa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80098f0 <_lv_blend_fill+0x570>
 80097fe:	8ab5      	ldrh	r5, [r6, #20]
 8009800:	8a31      	ldrh	r1, [r6, #16]
 8009802:	3501      	adds	r5, #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	1a6d      	subs	r5, r5, r1
 8009808:	2b01      	cmp	r3, #1
 800980a:	b22d      	sxth	r5, r5
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 800980c:	fb05 f107 	mul.w	r1, r5, r7
 8009810:	ea4f 0545 	mov.w	r5, r5, lsl #1
 8009814:	eb0a 0641 	add.w	r6, sl, r1, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009818:	d12b      	bne.n	8009872 <_lv_blend_fill+0x4f2>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800981a:	f04f 0a00 	mov.w	sl, #0
        lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800981e:	9a05      	ldr	r2, [sp, #20]
 8009820:	4620      	mov	r0, r4
 8009822:	4651      	mov	r1, sl
 8009824:	f7ff fd10 	bl	8009248 <lv_color_mix>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009828:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 800982c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8009830:	4599      	cmp	r9, r3
 8009832:	f73f ae5e 	bgt.w	80094f2 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009836:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800983a:	eb06 0b47 	add.w	fp, r6, r7, lsl #1
 800983e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8009842:	429f      	cmp	r7, r3
 8009844:	dd06      	ble.n	8009854 <_lv_blend_fill+0x4d4>
            disp_buf_tmp += disp_w;
 8009846:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009848:	f109 0901 	add.w	r9, r9, #1
 800984c:	e7ee      	b.n	800982c <_lv_blend_fill+0x4ac>
            blend_fp = color_blend_true_color_additive;
 800984e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80098f4 <_lv_blend_fill+0x574>
 8009852:	e7d4      	b.n	80097fe <_lv_blend_fill+0x47e>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 8009854:	f8bb 3000 	ldrh.w	r3, [fp]
 8009858:	4553      	cmp	r3, sl
 800985a:	d005      	beq.n	8009868 <_lv_blend_fill+0x4e8>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
 800985c:	4619      	mov	r1, r3
 800985e:	9a05      	ldr	r2, [sp, #20]
 8009860:	4620      	mov	r0, r4
 8009862:	9306      	str	r3, [sp, #24]
 8009864:	47c0      	blx	r8
 8009866:	9b06      	ldr	r3, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009868:	3701      	adds	r7, #1
                if(last_dest_color.full != disp_buf_tmp[x].full) {
 800986a:	469a      	mov	sl, r3
                disp_buf_tmp[x] = last_res_color;
 800986c:	f82b 0b02 	strh.w	r0, [fp], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009870:	e7e5      	b.n	800983e <_lv_blend_fill+0x4be>
 8009872:	f1c0 0001 	rsb	r0, r0, #1
 8009876:	4402      	add	r2, r0
 8009878:	b213      	sxth	r3, r2
 800987a:	9307      	str	r3, [sp, #28]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 800987c:	9b06      	ldr	r3, [sp, #24]
 800987e:	eba9 0903 	sub.w	r9, r9, r3
        last_dest_color.full = disp_buf_tmp[0].full;
 8009882:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8009886:	2100      	movs	r1, #0
        last_res_color.full = disp_buf_tmp[0].full;
 8009888:	4618      	mov	r0, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 800988a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 800988e:	4297      	cmp	r7, r2
 8009890:	f73f ae2f 	bgt.w	80094f2 <_lv_blend_fill+0x172>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009894:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8009898:	eb06 0b4a 	add.w	fp, r6, sl, lsl #1
 800989c:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80098a0:	4592      	cmp	sl, r2
 80098a2:	dd04      	ble.n	80098ae <_lv_blend_fill+0x52e>
            mask_tmp += draw_area_w;
 80098a4:	9a07      	ldr	r2, [sp, #28]
            disp_buf_tmp += disp_w;
 80098a6:	442e      	add	r6, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80098a8:	3701      	adds	r7, #1
            mask_tmp += draw_area_w;
 80098aa:	4491      	add	r9, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 80098ac:	e7ed      	b.n	800988a <_lv_blend_fill+0x50a>
                if(mask_tmp[x] == 0) continue;
 80098ae:	f819 200a 	ldrb.w	r2, [r9, sl]
 80098b2:	b1ba      	cbz	r2, 80098e4 <_lv_blend_fill+0x564>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
 80098b4:	428a      	cmp	r2, r1
 80098b6:	d103      	bne.n	80098c0 <_lv_blend_fill+0x540>
 80098b8:	f8bb c000 	ldrh.w	ip, [fp]
 80098bc:	459c      	cmp	ip, r3
 80098be:	d00f      	beq.n	80098e0 <_lv_blend_fill+0x560>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 80098c0:	2afc      	cmp	r2, #252	; 0xfc
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 80098c2:	f8bb 1000 	ldrh.w	r1, [fp]
 80098c6:	4620      	mov	r0, r4
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
 80098c8:	bf97      	itett	ls
 80098ca:	9b05      	ldrls	r3, [sp, #20]
 80098cc:	9a05      	ldrhi	r2, [sp, #20]
 80098ce:	fb12 f203 	smulbbls	r2, r2, r3
 80098d2:	0a12      	lsrls	r2, r2, #8
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 80098d4:	47c0      	blx	r8
                    last_mask = mask_tmp[x];
 80098d6:	f819 100a 	ldrb.w	r1, [r9, sl]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
 80098da:	b280      	uxth	r0, r0
                    last_dest_color.full = disp_buf_tmp[x].full;
 80098dc:	f8bb 3000 	ldrh.w	r3, [fp]
                disp_buf_tmp[x] = last_res_color;
 80098e0:	f8ab 0000 	strh.w	r0, [fp]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 80098e4:	f10a 0a01 	add.w	sl, sl, #1
 80098e8:	f10b 0b02 	add.w	fp, fp, #2
 80098ec:	e7d6      	b.n	800989c <_lv_blend_fill+0x51c>
 80098ee:	bf00      	nop
 80098f0:	0800930f 	.word	0x0800930f
 80098f4:	0800929d 	.word	0x0800929d

080098f8 <_lv_blend_map>:
{
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	b08f      	sub	sp, #60	; 0x3c
 80098fe:	468b      	mov	fp, r1
 8009900:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
 8009904:	9304      	str	r3, [sp, #16]
    if(opa < LV_OPA_MIN) return;
 8009906:	f1ba 0f01 	cmp.w	sl, #1
{
 800990a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800990e:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8009912:	9209      	str	r2, [sp, #36]	; 0x24
 8009914:	9308      	str	r3, [sp, #32]
    if(opa < LV_OPA_MIN) return;
 8009916:	f240 80d1 	bls.w	8009abc <_lv_blend_map+0x1c4>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 80ce 	beq.w	8009abc <_lv_blend_map+0x1c4>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
 8009920:	460a      	mov	r2, r1
 8009922:	4601      	mov	r1, r0
 8009924:	a80c      	add	r0, sp, #48	; 0x30
 8009926:	f00d fba6 	bl	8017076 <_lv_area_intersect>
    if(!is_common) return;
 800992a:	2800      	cmp	r0, #0
 800992c:	f000 80c6 	beq.w	8009abc <_lv_blend_map+0x1c4>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009930:	f7fe fdd2 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 8009934:	4607      	mov	r7, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009936:	f00d f8eb 	bl	8016b10 <lv_disp_get_draw_buf>
    lv_color_t * disp_buf = draw_buf->buf_act;
 800993a:	6883      	ldr	r3, [r0, #8]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800993c:	4604      	mov	r4, r0
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 800993e:	6838      	ldr	r0, [r7, #0]
    lv_color_t * disp_buf = draw_buf->buf_act;
 8009940:	9307      	str	r3, [sp, #28]
    if(disp->driver->gpu_wait_cb) disp->driver->gpu_wait_cb(disp->driver);
 8009942:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009944:	b103      	cbz	r3, 8009948 <_lv_blend_map+0x50>
 8009946:	4798      	blx	r3
    draw_area.y1 -= disp_area->y1;
 8009948:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    draw_area.y2 -= disp_area->y1;
 800994c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    draw_area.y1 -= disp_area->y1;
 8009950:	930a      	str	r3, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 8009952:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8009956:	8a20      	ldrh	r0, [r4, #16]
    draw_area.y1 -= disp_area->y1;
 8009958:	8a63      	ldrh	r3, [r4, #18]
 800995a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    draw_area.x1 -= disp_area->x1;
 800995c:	ebae 0c00 	sub.w	ip, lr, r0
    draw_area.y2 -= disp_area->y1;
 8009960:	910b      	str	r1, [sp, #44]	; 0x2c
    draw_area.y1 -= disp_area->y1;
 8009962:	1ad6      	subs	r6, r2, r3
    draw_area.x2 -= disp_area->x1;
 8009964:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    draw_area.y2 -= disp_area->y1;
 8009968:	1acb      	subs	r3, r1, r3
    draw_area.x1 -= disp_area->x1;
 800996a:	fa0f fc8c 	sxth.w	ip, ip
    draw_area.y1 -= disp_area->y1;
 800996e:	b236      	sxth	r6, r6
    draw_area.x2 -= disp_area->x1;
 8009970:	1a10      	subs	r0, r2, r0
    draw_area.y2 -= disp_area->y1;
 8009972:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if(mask && disp->driver->antialiasing == 0)
 8009976:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8009978:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800997c:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 8009980:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    if(mask && disp->driver->antialiasing == 0)
 8009984:	2b00      	cmp	r3, #0
 8009986:	d156      	bne.n	8009a36 <_lv_blend_map+0x13e>
    if(disp->driver->set_px_cb) {
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d16b      	bne.n	8009a68 <_lv_blend_map+0x170>
    else if(mode == LV_BLEND_MODE_NORMAL) {
 8009990:	f1ce 0e01 	rsb	lr, lr, #1
 8009994:	8aa7      	ldrh	r7, [r4, #20]
 8009996:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800999a:	4496      	add	lr, r2
 800999c:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80099a0:	3701      	adds	r7, #1
 80099a2:	f9bb 1000 	ldrsh.w	r1, [fp]
 80099a6:	fa0f f28e 	sxth.w	r2, lr
 80099aa:	f109 0901 	add.w	r9, r9, #1
 80099ae:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
 80099b2:	1aff      	subs	r7, r7, r3
 80099b4:	9205      	str	r2, [sp, #20]
 80099b6:	eba9 0901 	sub.w	r9, r9, r1
 80099ba:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 80099be:	b23f      	sxth	r7, r7
 80099c0:	fa0f f989 	sxth.w	r9, r9
 80099c4:	9606      	str	r6, [sp, #24]
 80099c6:	1b14      	subs	r4, r2, r4
 80099c8:	fb07 f506 	mul.w	r5, r7, r6
 80099cc:	1b34      	subs	r4, r6, r4
 80099ce:	fb09 f404 	mul.w	r4, r9, r4
 80099d2:	f1b8 0f00 	cmp.w	r8, #0
 80099d6:	f040 81ad 	bne.w	8009d34 <_lv_blend_map+0x43c>
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80099da:	1acb      	subs	r3, r1, r3
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 80099dc:	fb07 c506 	mla	r5, r7, r6, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80099e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e2:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
 80099e6:	ebac 0c03 	sub.w	ip, ip, r3
 80099ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ec:	f1c2 0b01 	rsb	fp, r2, #1
 80099f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099f2:	4464      	add	r4, ip
 80099f4:	445a      	add	r2, fp
 80099f6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80099fa:	007b      	lsls	r3, r7, #1
    int32_t draw_area_h = lv_area_get_height(draw_area);
 80099fc:	fa0f fb82 	sxth.w	fp, r2
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8009a00:	9a07      	ldr	r2, [sp, #28]
 8009a02:	9306      	str	r3, [sp, #24]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009a04:	9b08      	ldr	r3, [sp, #32]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
 8009a06:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	f040 80bf 	bne.w	8009b8e <_lv_blend_map+0x296>
        if(opa > LV_OPA_MAX) {
 8009a10:	f1ba 0ffd 	cmp.w	sl, #253	; 0xfd
 8009a14:	f240 80b7 	bls.w	8009b86 <_lv_blend_map+0x28e>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8009a18:	9b05      	ldr	r3, [sp, #20]
 8009a1a:	005e      	lsls	r6, r3, #1
            for(y = 0; y < draw_area_h; y++) {
 8009a1c:	45c3      	cmp	fp, r8
 8009a1e:	dd4d      	ble.n	8009abc <_lv_blend_map+0x1c4>
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8009a20:	4621      	mov	r1, r4
 8009a22:	4628      	mov	r0, r5
 8009a24:	4632      	mov	r2, r6
                map_buf_first += map_w;
 8009a26:	444c      	add	r4, r9
                lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
 8009a28:	f00d ffae 	bl	8017988 <lv_memcpy>
                disp_buf_first += disp_w;
 8009a2c:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
 8009a2e:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009a32:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
 8009a34:	e7f2      	b.n	8009a1c <_lv_blend_map+0x124>
    if(mask && disp->driver->antialiasing == 0)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	7a1b      	ldrb	r3, [r3, #8]
 8009a3a:	075b      	lsls	r3, r3, #29
 8009a3c:	d4a4      	bmi.n	8009988 <_lv_blend_map+0x90>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009a3e:	1c53      	adds	r3, r2, #1
 8009a40:	9904      	ldr	r1, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009a42:	9804      	ldr	r0, [sp, #16]
 8009a44:	eba3 030e 	sub.w	r3, r3, lr
 8009a48:	3901      	subs	r1, #1
 8009a4a:	f1c0 0501 	rsb	r5, r0, #1
        int32_t mask_w = lv_area_get_width(&draw_area);
 8009a4e:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8009a50:	1868      	adds	r0, r5, r1
 8009a52:	4283      	cmp	r3, r0
 8009a54:	dd98      	ble.n	8009988 <_lv_blend_map+0x90>
 8009a56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a5a:	2880      	cmp	r0, #128	; 0x80
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	bf98      	it	ls
 8009a62:	2000      	movls	r0, #0
 8009a64:	7008      	strb	r0, [r1, #0]
 8009a66:	e7f3      	b.n	8009a50 <_lv_blend_map+0x158>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009a68:	f7fe fd36 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 8009a6c:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8009a70:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8009a74:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009a78:	3501      	adds	r5, #1
 8009a7a:	8aa2      	ldrh	r2, [r4, #20]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009a7c:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
 8009a80:	1aed      	subs	r5, r5, r3
 8009a82:	f9b4 4012 	ldrsh.w	r4, [r4, #18]
 8009a86:	3201      	adds	r2, #1
 8009a88:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8009a8c:	b22d      	sxth	r5, r5
 8009a8e:	1b3c      	subs	r4, r7, r4
 8009a90:	1a52      	subs	r2, r2, r1
    map_buf_tmp -= draw_area->x1;
 8009a92:	1ac9      	subs	r1, r1, r3
 8009a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009a96:	1b34      	subs	r4, r6, r4
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009a98:	9005      	str	r0, [sp, #20]
 8009a9a:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
 8009a9e:	b212      	sxth	r2, r2
    map_buf_tmp -= draw_area->x1;
 8009aa0:	fb05 1404 	mla	r4, r5, r4, r1
 8009aa4:	006d      	lsls	r5, r5, #1
 8009aa6:	f1c0 0900 	rsb	r9, r0, #0
 8009aaa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009aae:	9b08      	ldr	r3, [sp, #32]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d124      	bne.n	8009afe <_lv_blend_map+0x206>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009ab4:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009ab8:	429e      	cmp	r6, r3
 8009aba:	dd02      	ble.n	8009ac2 <_lv_blend_map+0x1ca>
}
 8009abc:	b00f      	add	sp, #60	; 0x3c
 8009abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009ac2:	f9bd 7030 	ldrsh.w	r7, [sp, #48]	; 0x30
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009ac6:	fa0f f886 	sxth.w	r8, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009aca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009ace:	429f      	cmp	r7, r3
 8009ad0:	dd02      	ble.n	8009ad8 <_lv_blend_map+0x1e0>
            map_buf_tmp += map_w;
 8009ad2:	442c      	add	r4, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	e7ed      	b.n	8009ab4 <_lv_blend_map+0x1bc>
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009ad8:	9b05      	ldr	r3, [sp, #20]
 8009ada:	9907      	ldr	r1, [sp, #28]
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	f8cd a008 	str.w	sl, [sp, #8]
 8009ae2:	f834 3017 	ldrh.w	r3, [r4, r7, lsl #1]
 8009ae6:	f8cd 8000 	str.w	r8, [sp]
 8009aea:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009aee:	b23b      	sxth	r3, r7
 8009af0:	f8d0 9014 	ldr.w	r9, [r0, #20]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009af4:	3701      	adds	r7, #1
                disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
 8009af6:	9204      	str	r2, [sp, #16]
 8009af8:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009afa:	9a04      	ldr	r2, [sp, #16]
 8009afc:	e7e5      	b.n	8009aca <_lv_blend_map+0x1d2>
 8009afe:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	3701      	adds	r7, #1
 8009b06:	444b      	add	r3, r9
 8009b08:	1a3f      	subs	r7, r7, r0
 8009b0a:	4699      	mov	r9, r3
 8009b0c:	b23f      	sxth	r7, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009b0e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009b12:	429e      	cmp	r6, r3
 8009b14:	dcd2      	bgt.n	8009abc <_lv_blend_map+0x1c4>
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 8009b16:	b233      	sxth	r3, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009b18:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 8009b1c:	9304      	str	r3, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009b1e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009b22:	4598      	cmp	r8, r3
 8009b24:	dd03      	ble.n	8009b2e <_lv_blend_map+0x236>
            mask_tmp += draw_area_w;
 8009b26:	44b9      	add	r9, r7
            map_buf_tmp += map_w;
 8009b28:	442c      	add	r4, r5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ef      	b.n	8009b0e <_lv_blend_map+0x216>
                if(mask_tmp[x]) {
 8009b2e:	f819 3008 	ldrb.w	r3, [r9, r8]
 8009b32:	b19b      	cbz	r3, 8009b5c <_lv_blend_map+0x264>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
 8009b34:	fb1a f303 	smulbb	r3, sl, r3
                    disp->driver->set_px_cb(disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
 8009b38:	9905      	ldr	r1, [sp, #20]
 8009b3a:	9206      	str	r2, [sp, #24]
 8009b3c:	0a1b      	lsrs	r3, r3, #8
 8009b3e:	6808      	ldr	r0, [r1, #0]
 8009b40:	9907      	ldr	r1, [sp, #28]
 8009b42:	9302      	str	r3, [sp, #8]
 8009b44:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
 8009b48:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	fa0f f388 	sxth.w	r3, r8
 8009b54:	f8d0 b014 	ldr.w	fp, [r0, #20]
 8009b58:	47d8      	blx	fp
 8009b5a:	9a06      	ldr	r2, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009b5c:	f108 0801 	add.w	r8, r8, #1
 8009b60:	e7dd      	b.n	8009b1e <_lv_blend_map+0x226>
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
 8009b62:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009b66:	4652      	mov	r2, sl
 8009b68:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009b6c:	f7ff fb6c 	bl	8009248 <lv_color_mix>
 8009b70:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 8009b74:	3601      	adds	r6, #1
 8009b76:	9b05      	ldr	r3, [sp, #20]
 8009b78:	42b3      	cmp	r3, r6
 8009b7a:	dcf2      	bgt.n	8009b62 <_lv_blend_map+0x26a>
                disp_buf_first += disp_w;
 8009b7c:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 8009b7e:	444c      	add	r4, r9
            for(y = 0; y < draw_area_h; y++) {
 8009b80:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009b84:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
 8009b86:	45c3      	cmp	fp, r8
 8009b88:	dd98      	ble.n	8009abc <_lv_blend_map+0x1c4>
                for(x = 0; x < draw_area_w; x++) {
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	e7f3      	b.n	8009b76 <_lv_blend_map+0x27e>
        if(opa > LV_OPA_MAX) {
 8009b8e:	f1ba 0ffd 	cmp.w	sl, #253	; 0xfd
 8009b92:	f240 80ca 	bls.w	8009d2a <_lv_blend_map+0x432>
            int32_t x_end4 = draw_area_w - 4;
 8009b96:	9b05      	ldr	r3, [sp, #20]
 8009b98:	3b04      	subs	r3, #4
            for(y = 0; y < draw_area_h; y++) {
 8009b9a:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8009b9e:	9b07      	ldr	r3, [sp, #28]
 8009ba0:	459b      	cmp	fp, r3
 8009ba2:	dd8b      	ble.n	8009abc <_lv_blend_map+0x1c4>
 8009ba4:	f8dd 8010 	ldr.w	r8, [sp, #16]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009ba8:	2600      	movs	r6, #0
 8009baa:	e009      	b.n	8009bc0 <_lv_blend_map+0x2c8>
                    MAP_NORMAL_MASK_PX(x)
 8009bac:	f818 2b01 	ldrb.w	r2, [r8], #1
 8009bb0:	b12a      	cbz	r2, 8009bbe <_lv_blend_map+0x2c6>
 8009bb2:	2aff      	cmp	r2, #255	; 0xff
 8009bb4:	d122      	bne.n	8009bfc <_lv_blend_map+0x304>
 8009bb6:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8009bba:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	4647      	mov	r7, r8
 8009bc4:	42b3      	cmp	r3, r6
 8009bc6:	dd02      	ble.n	8009bce <_lv_blend_map+0x2d6>
 8009bc8:	f018 0f03 	tst.w	r8, #3
 8009bcc:	d1ee      	bne.n	8009bac <_lv_blend_map+0x2b4>
 8009bce:	eb05 0846 	add.w	r8, r5, r6, lsl #1
 8009bd2:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
                for(; x < x_end4; x += 4) {
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	42b3      	cmp	r3, r6
 8009bda:	dc18      	bgt.n	8009c0e <_lv_blend_map+0x316>
 8009bdc:	f107 38ff 	add.w	r8, r7, #4294967295
                for(; x < draw_area_w ; x++) {
 8009be0:	9b05      	ldr	r3, [sp, #20]
 8009be2:	42b3      	cmp	r3, r6
 8009be4:	dc6f      	bgt.n	8009cc6 <_lv_blend_map+0x3ce>
                disp_buf_first += disp_w;
 8009be6:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 8009be8:	444c      	add	r4, r9
                disp_buf_first += disp_w;
 8009bea:	441d      	add	r5, r3
                mask += draw_area_w;
 8009bec:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8009bf4:	9b07      	ldr	r3, [sp, #28]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	e7d0      	b.n	8009b9e <_lv_blend_map+0x2a6>
                    MAP_NORMAL_MASK_PX(x)
 8009bfc:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009c00:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009c04:	f7ff fb20 	bl	8009248 <lv_color_mix>
 8009c08:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 8009c0c:	e7d7      	b.n	8009bbe <_lv_blend_map+0x2c6>
                    if(*mask32) {
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	b18a      	cbz	r2, 8009c36 <_lv_blend_map+0x33e>
                        if((*mask32) == 0xFFFFFFFF) {
 8009c12:	3201      	adds	r2, #1
 8009c14:	d116      	bne.n	8009c44 <_lv_blend_map+0x34c>
                            disp_buf_first[x] = map_buf_first[x];
 8009c16:	f8ba 2000 	ldrh.w	r2, [sl]
 8009c1a:	f8a8 2000 	strh.w	r2, [r8]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
 8009c1e:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009c22:	f8a8 2002 	strh.w	r2, [r8, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
 8009c26:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009c2a:	f8a8 2004 	strh.w	r2, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009c2e:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009c32:	f8a8 2006 	strh.w	r2, [r8, #6]
                    mask32++;
 8009c36:	3704      	adds	r7, #4
                for(; x < x_end4; x += 4) {
 8009c38:	3604      	adds	r6, #4
 8009c3a:	f108 0808 	add.w	r8, r8, #8
 8009c3e:	f10a 0a08 	add.w	sl, sl, #8
 8009c42:	e7c8      	b.n	8009bd6 <_lv_blend_map+0x2de>
                            MAP_NORMAL_MASK_PX(x)
 8009c44:	783a      	ldrb	r2, [r7, #0]
 8009c46:	b12a      	cbz	r2, 8009c54 <_lv_blend_map+0x35c>
 8009c48:	2aff      	cmp	r2, #255	; 0xff
 8009c4a:	d121      	bne.n	8009c90 <_lv_blend_map+0x398>
 8009c4c:	f8ba 2000 	ldrh.w	r2, [sl]
 8009c50:	f8a8 2000 	strh.w	r2, [r8]
                            MAP_NORMAL_MASK_PX(x + 1)
 8009c54:	787a      	ldrb	r2, [r7, #1]
 8009c56:	b12a      	cbz	r2, 8009c64 <_lv_blend_map+0x36c>
 8009c58:	2aff      	cmp	r2, #255	; 0xff
 8009c5a:	d122      	bne.n	8009ca2 <_lv_blend_map+0x3aa>
 8009c5c:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 8009c60:	f8a8 2002 	strh.w	r2, [r8, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8009c64:	78ba      	ldrb	r2, [r7, #2]
 8009c66:	b12a      	cbz	r2, 8009c74 <_lv_blend_map+0x37c>
 8009c68:	2aff      	cmp	r2, #255	; 0xff
 8009c6a:	d123      	bne.n	8009cb4 <_lv_blend_map+0x3bc>
 8009c6c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009c70:	f8a8 2004 	strh.w	r2, [r8, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8009c74:	78fa      	ldrb	r2, [r7, #3]
 8009c76:	2a00      	cmp	r2, #0
 8009c78:	d0dd      	beq.n	8009c36 <_lv_blend_map+0x33e>
 8009c7a:	2aff      	cmp	r2, #255	; 0xff
 8009c7c:	d0d7      	beq.n	8009c2e <_lv_blend_map+0x336>
 8009c7e:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8009c82:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8009c86:	f7ff fadf 	bl	8009248 <lv_color_mix>
 8009c8a:	f8a8 0006 	strh.w	r0, [r8, #6]
 8009c8e:	e7d2      	b.n	8009c36 <_lv_blend_map+0x33e>
                            MAP_NORMAL_MASK_PX(x)
 8009c90:	f8b8 1000 	ldrh.w	r1, [r8]
 8009c94:	f8ba 0000 	ldrh.w	r0, [sl]
 8009c98:	f7ff fad6 	bl	8009248 <lv_color_mix>
 8009c9c:	f8a8 0000 	strh.w	r0, [r8]
 8009ca0:	e7d8      	b.n	8009c54 <_lv_blend_map+0x35c>
                            MAP_NORMAL_MASK_PX(x + 1)
 8009ca2:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8009ca6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8009caa:	f7ff facd 	bl	8009248 <lv_color_mix>
 8009cae:	f8a8 0002 	strh.w	r0, [r8, #2]
 8009cb2:	e7d7      	b.n	8009c64 <_lv_blend_map+0x36c>
                            MAP_NORMAL_MASK_PX(x + 2)
 8009cb4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8009cb8:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8009cbc:	f7ff fac4 	bl	8009248 <lv_color_mix>
 8009cc0:	f8a8 0004 	strh.w	r0, [r8, #4]
 8009cc4:	e7d6      	b.n	8009c74 <_lv_blend_map+0x37c>
                    MAP_NORMAL_MASK_PX(x)
 8009cc6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8009cca:	b12a      	cbz	r2, 8009cd8 <_lv_blend_map+0x3e0>
 8009ccc:	2aff      	cmp	r2, #255	; 0xff
 8009cce:	d105      	bne.n	8009cdc <_lv_blend_map+0x3e4>
 8009cd0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8009cd4:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(; x < draw_area_w ; x++) {
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e781      	b.n	8009be0 <_lv_blend_map+0x2e8>
                    MAP_NORMAL_MASK_PX(x)
 8009cdc:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009ce0:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009ce4:	f7ff fab0 	bl	8009248 <lv_color_mix>
 8009ce8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 8009cec:	e7f4      	b.n	8009cd8 <_lv_blend_map+0x3e0>
                    if(mask[x]) {
 8009cee:	9b04      	ldr	r3, [sp, #16]
 8009cf0:	5d9a      	ldrb	r2, [r3, r6]
 8009cf2:	b16a      	cbz	r2, 8009d10 <_lv_blend_map+0x418>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009cf4:	2afc      	cmp	r2, #252	; 0xfc
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 8009cf6:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009cfa:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8009cfe:	bf96      	itet	ls
 8009d00:	fb1a f202 	smulbbls	r2, sl, r2
 8009d04:	4652      	movhi	r2, sl
 8009d06:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
 8009d08:	f7ff fa9e 	bl	8009248 <lv_color_mix>
 8009d0c:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
 8009d10:	3601      	adds	r6, #1
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	42b3      	cmp	r3, r6
 8009d16:	dcea      	bgt.n	8009cee <_lv_blend_map+0x3f6>
                disp_buf_first += disp_w;
 8009d18:	9b06      	ldr	r3, [sp, #24]
                map_buf_first += map_w;
 8009d1a:	444c      	add	r4, r9
            for(y = 0; y < draw_area_h; y++) {
 8009d1c:	f108 0801 	add.w	r8, r8, #1
                disp_buf_first += disp_w;
 8009d20:	441d      	add	r5, r3
                mask += draw_area_w;
 8009d22:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009d26:	4413      	add	r3, r2
 8009d28:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
 8009d2a:	45c3      	cmp	fp, r8
 8009d2c:	f77f aec6 	ble.w	8009abc <_lv_blend_map+0x1c4>
                for(x = 0; x < draw_area_w; x++) {
 8009d30:	2600      	movs	r6, #0
 8009d32:	e7ee      	b.n	8009d12 <_lv_blend_map+0x41a>
    switch(mode) {
 8009d34:	f1b8 0f01 	cmp.w	r8, #1
 8009d38:	d026      	beq.n	8009d88 <_lv_blend_map+0x490>
 8009d3a:	f1b8 0f02 	cmp.w	r8, #2
 8009d3e:	f47f aebd 	bne.w	8009abc <_lv_blend_map+0x1c4>
 8009d42:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009dfc <_lv_blend_map+0x504>
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
 8009d46:	9a07      	ldr	r2, [sp, #28]
 8009d48:	007f      	lsls	r7, r7, #1
 8009d4a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8009d4e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
 8009d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
 8009d58:	9a08      	ldr	r2, [sp, #32]
 8009d5a:	2a01      	cmp	r2, #1
 8009d5c:	d121      	bne.n	8009da2 <_lv_blend_map+0x4aa>
        map_buf_tmp -= draw_area->x1;
 8009d5e:	1a5b      	subs	r3, r3, r1
 8009d60:	eb04 0443 	add.w	r4, r4, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009d64:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009d68:	9a06      	ldr	r2, [sp, #24]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	f73f aea6 	bgt.w	8009abc <_lv_blend_map+0x1c4>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009d70:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
 8009d74:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009d78:	429e      	cmp	r6, r3
 8009d7a:	dd08      	ble.n	8009d8e <_lv_blend_map+0x496>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009d7c:	9b06      	ldr	r3, [sp, #24]
            disp_buf_tmp += disp_w;
 8009d7e:	443d      	add	r5, r7
            map_buf_tmp += map_w;
 8009d80:	444c      	add	r4, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009d82:	3301      	adds	r3, #1
 8009d84:	9306      	str	r3, [sp, #24]
 8009d86:	e7ed      	b.n	8009d64 <_lv_blend_map+0x46c>
            blend_fp = color_blend_true_color_additive;
 8009d88:	f8df b074 	ldr.w	fp, [pc, #116]	; 8009e00 <_lv_blend_map+0x508>
 8009d8c:	e7db      	b.n	8009d46 <_lv_blend_map+0x44e>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
 8009d8e:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 8009d92:	4652      	mov	r2, sl
 8009d94:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
 8009d98:	47d8      	blx	fp
 8009d9a:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009d9e:	3601      	adds	r6, #1
 8009da0:	e7e8      	b.n	8009d74 <_lv_blend_map+0x47c>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009da2:	9b04      	ldr	r3, [sp, #16]
        map_buf_tmp -= draw_area->x1;
 8009da4:	eba4 044c 	sub.w	r4, r4, ip, lsl #1
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
 8009da8:	eba3 060c 	sub.w	r6, r3, ip
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009dac:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8009db0:	9a06      	ldr	r2, [sp, #24]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	f73f ae82 	bgt.w	8009abc <_lv_blend_map+0x1c4>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009db8:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8009dbc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8009dc0:	4598      	cmp	r8, r3
 8009dc2:	dd07      	ble.n	8009dd4 <_lv_blend_map+0x4dc>
            mask_tmp += draw_area_w;
 8009dc4:	9b05      	ldr	r3, [sp, #20]
            disp_buf_tmp += disp_w;
 8009dc6:	443d      	add	r5, r7
            map_buf_tmp += map_w;
 8009dc8:	444c      	add	r4, r9
            mask_tmp += draw_area_w;
 8009dca:	441e      	add	r6, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
 8009dcc:	9b06      	ldr	r3, [sp, #24]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	9306      	str	r3, [sp, #24]
 8009dd2:	e7eb      	b.n	8009dac <_lv_blend_map+0x4b4>
                if(mask_tmp[x] == 0) continue;
 8009dd4:	f816 2008 	ldrb.w	r2, [r6, r8]
 8009dd8:	b162      	cbz	r2, 8009df4 <_lv_blend_map+0x4fc>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 8009dda:	2afc      	cmp	r2, #252	; 0xfc
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 8009ddc:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8009de0:	f834 0018 	ldrh.w	r0, [r4, r8, lsl #1]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
 8009de4:	bf96      	itet	ls
 8009de6:	fb1a f202 	smulbbls	r2, sl, r2
 8009dea:	4652      	movhi	r2, sl
 8009dec:	0a12      	lsrls	r2, r2, #8
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
 8009dee:	47d8      	blx	fp
 8009df0:	f825 0018 	strh.w	r0, [r5, r8, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
 8009df4:	f108 0801 	add.w	r8, r8, #1
 8009df8:	e7e0      	b.n	8009dbc <_lv_blend_map+0x4c4>
 8009dfa:	bf00      	nop
 8009dfc:	0800930f 	.word	0x0800930f
 8009e00:	0800929d 	.word	0x0800929d

08009e04 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
 8009e04:	b510      	push	{r4, lr}
 8009e06:	b09a      	sub	sp, #104	; 0x68
 8009e08:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8009e0a:	a80d      	add	r0, sp, #52	; 0x34
{
 8009e0c:	9102      	str	r1, [sp, #8]
 8009e0e:	9203      	str	r2, [sp, #12]
    lv_draw_rect_dsc_init(&rect_dsc);
 8009e10:	f002 feea 	bl	800cbe8 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 8009e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8009e18:	9902      	ldr	r1, [sp, #8]
 8009e1a:	4620      	mov	r0, r4
    rect_dsc.bg_color = lv_color_white();
 8009e1c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    lv_draw_rect(coords, clip_area, &rect_dsc);
 8009e20:	aa0d      	add	r2, sp, #52	; 0x34
 8009e22:	f002 ff03 	bl	800cc2c <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 8009e26:	a805      	add	r0, sp, #20
 8009e28:	f000 fc2a 	bl	800a680 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	4620      	mov	r0, r4
 8009e32:	9200      	str	r2, [sp, #0]
 8009e34:	aa05      	add	r2, sp, #20
 8009e36:	9902      	ldr	r1, [sp, #8]
 8009e38:	f000 fdfa 	bl	800aa30 <lv_draw_label>
}
 8009e3c:	b01a      	add	sp, #104	; 0x68
 8009e3e:	bd10      	pop	{r4, pc}

08009e40 <lv_draw_map>:
{
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	ed2d 8b02 	vpush	{d8}
 8009e48:	b0b3      	sub	sp, #204	; 0xcc
 8009e4a:	461c      	mov	r4, r3
 8009e4c:	468b      	mov	fp, r1
 8009e4e:	4615      	mov	r5, r2
 8009e50:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8009e54:	4680      	mov	r8, r0
 8009e56:	9309      	str	r3, [sp, #36]	; 0x24
 8009e58:	f89d 30fc 	ldrb.w	r3, [sp, #252]	; 0xfc
 8009e5c:	9306      	str	r3, [sp, #24]
    dest->x1 = src->x1;
 8009e5e:	680b      	ldr	r3, [r1, #0]
 8009e60:	931b      	str	r3, [sp, #108]	; 0x6c
    dest->x2 = src->x2;
 8009e62:	684b      	ldr	r3, [r1, #4]
 8009e64:	931c      	str	r3, [sp, #112]	; 0x70
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8009e66:	f7fe fb37 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 8009e6a:	4606      	mov	r6, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009e6c:	f00c fe50 	bl	8016b10 <lv_disp_get_draw_buf>
    draw_area.x1 -= disp_area->x1;
 8009e70:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8009e74:	8a07      	ldrh	r7, [r0, #16]
    draw_area.y1 -= disp_area->y1;
 8009e76:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    draw_area.x1 -= disp_area->x1;
 8009e7a:	1bdb      	subs	r3, r3, r7
    draw_area.x2 -= disp_area->x1;
 8009e7c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 8009e80:	9004      	str	r0, [sp, #16]
    draw_area.x1 -= disp_area->x1;
 8009e82:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.x2 -= disp_area->x1;
 8009e86:	1bd2      	subs	r2, r2, r7
    draw_area.y1 -= disp_area->y1;
 8009e88:	8a40      	ldrh	r0, [r0, #18]
    draw_area.y2 -= disp_area->y1;
 8009e8a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    draw_area.y1 -= disp_area->y1;
 8009e8e:	1a09      	subs	r1, r1, r0
    draw_area.x2 -= disp_area->x1;
 8009e90:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y2 -= disp_area->y1;
 8009e94:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
 8009e96:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
    draw_area.y2 -= disp_area->y1;
 8009e9a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 8009e9e:	f002 f9ff 	bl	800c2a0 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
 8009ea2:	9008      	str	r0, [sp, #32]
 8009ea4:	b9f8      	cbnz	r0, 8009ee6 <lv_draw_map+0xa6>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eac:	d11b      	bne.n	8009ee6 <lv_draw_map+0xa6>
 8009eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb0:	b9cb      	cbnz	r3, 8009ee6 <lv_draw_map+0xa6>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8009eb2:	9b06      	ldr	r3, [sp, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 809c 	bne.w	8009ff2 <lv_draw_map+0x1b2>
 8009eba:	7aa3      	ldrb	r3, [r4, #10]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f040 809a 	bne.w	8009ff6 <lv_draw_map+0x1b6>
                      draw_dsc->blend_mode);
 8009ec2:	7b22      	ldrb	r2, [r4, #12]
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
 8009ec4:	4641      	mov	r1, r8
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f002 020f 	and.w	r2, r2, #15
 8009ecc:	9202      	str	r2, [sp, #8]
 8009ece:	7ae2      	ldrb	r2, [r4, #11]
 8009ed0:	9201      	str	r2, [sp, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	9200      	str	r2, [sp, #0]
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	f7ff fd0e 	bl	80098f8 <_lv_blend_map>
}
 8009edc:	b033      	add	sp, #204	; 0xcc
 8009ede:	ecbd 8b02 	vpop	{d8}
 8009ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bf14      	ite	ne
 8009eec:	2303      	movne	r3, #3
 8009eee:	2302      	moveq	r3, #2
 8009ef0:	9305      	str	r3, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009ef2:	f8b8 9004 	ldrh.w	r9, [r8, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	f9b8 0000 	ldrsh.w	r0, [r8]
 8009efc:	f109 0901 	add.w	r9, r9, #1
 8009f00:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8009f04:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8009f08:	eba9 0900 	sub.w	r9, r9, r0
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009f0c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009f10:	f9bd 706e 	ldrsh.w	r7, [sp, #110]	; 0x6e
 8009f14:	1a89      	subs	r1, r1, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009f16:	f9bd c06c 	ldrsh.w	ip, [sp, #108]	; 0x6c
 8009f1a:	1ac0      	subs	r0, r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
 8009f1c:	1a79      	subs	r1, r7, r1
 8009f1e:	fa0f f989 	sxth.w	r9, r9
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009f22:	ebac 0000 	sub.w	r0, ip, r0
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009f26:	fa13 f38c 	uxtah	r3, r3, ip
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009f2a:	fa12 f287 	uxtah	r2, r2, r7
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009f2e:	fb09 0001 	mla	r0, r9, r1, r0
 8009f32:	9905      	ldr	r1, [sp, #20]
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009f34:	b29b      	uxth	r3, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009f36:	fb00 5101 	mla	r1, r0, r1, r5
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009f3a:	b212      	sxth	r2, r2
        blend_area.x1 = draw_area.x1 + disp_area->x1;
 8009f3c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
 8009f40:	9107      	str	r1, [sp, #28]
 8009f42:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
        blend_area.y1 = disp_area->y1 + draw_area.y1;
 8009f46:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 8009f4a:	3101      	adds	r1, #1
        blend_area.y2 = blend_area.y1;
 8009f4c:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
 8009f50:	eba1 0c0c 	sub.w	ip, r1, ip
 8009f54:	fa1f f18c 	uxth.w	r1, ip
 8009f58:	fa0f f08c 	sxth.w	r0, ip
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
 8009f5c:	3901      	subs	r1, #1
 8009f5e:	900d      	str	r0, [sp, #52]	; 0x34
 8009f60:	440b      	add	r3, r1
 8009f62:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009f66:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	1bdf      	subs	r7, r3, r7
 8009f6e:	b23b      	sxth	r3, r7
 8009f70:	9312      	str	r3, [sp, #72]	; 0x48
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	930e      	str	r3, [sp, #56]	; 0x38
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f040 809e 	bne.w	800a0ba <lv_draw_map+0x27a>
 8009f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f84:	f040 8099 	bne.w	800a0ba <lv_draw_map+0x27a>
 8009f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 8095 	bne.w	800a0ba <lv_draw_map+0x27a>
 8009f90:	7aa3      	ldrb	r3, [r4, #10]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f040 8091 	bne.w	800a0ba <lv_draw_map+0x27a>
 8009f98:	9b06      	ldr	r3, [sp, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 808d 	beq.w	800a0ba <lv_draw_map+0x27a>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f00c fd77 	bl	8016a94 <lv_disp_get_hor_res>
 8009fa6:	4605      	mov	r5, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
 8009fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8009faa:	f00d f836 	bl	801701a <lv_area_get_size>
 8009fae:	42a8      	cmp	r0, r5
 8009fb0:	d803      	bhi.n	8009fba <lv_draw_map+0x17a>
 8009fb2:	a81b      	add	r0, sp, #108	; 0x6c
 8009fb4:	f00d f831 	bl	801701a <lv_area_get_size>
 8009fb8:	4605      	mov	r5, r0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009fba:	0068      	lsls	r0, r5, #1
            for(y = 0; y < draw_area_h; y++) {
 8009fbc:	f04f 0800 	mov.w	r8, #0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 8009fc0:	f00d fe5a 	bl	8017c78 <lv_mem_buf_get>
 8009fc4:	4606      	mov	r6, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f00d fe56 	bl	8017c78 <lv_mem_buf_get>
                map_buf_tmp += map_w * px_size_byte;
 8009fcc:	9b05      	ldr	r3, [sp, #20]
 8009fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8009fd0:	4607      	mov	r7, r0
                map_buf_tmp += map_w * px_size_byte;
 8009fd2:	fb13 f909 	smulbb	r9, r3, r9
        uint32_t px_i = 0;
 8009fd6:	4643      	mov	r3, r8
 8009fd8:	ea22 7ae2 	bic.w	sl, r2, r2, asr #31
            for(y = 0; y < draw_area_h; y++) {
 8009fdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fde:	4542      	cmp	r2, r8
 8009fe0:	dd4d      	ble.n	800a07e <lv_draw_map+0x23e>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	eb07 0c03 	add.w	ip, r7, r3
 8009fe8:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
                map_px = map_buf_tmp;
 8009fec:	9a07      	ldr	r2, [sp, #28]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 8009fee:	9104      	str	r1, [sp, #16]
 8009ff0:	e013      	b.n	800a01a <lv_draw_map+0x1da>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e77c      	b.n	8009ef0 <lv_draw_map+0xb0>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e77a      	b.n	8009ef0 <lv_draw_map+0xb0>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8009ffa:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
 8009ffc:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
 800a000:	b130      	cbz	r0, 800a010 <lv_draw_map+0x1d0>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
 800a002:	7811      	ldrb	r1, [r2, #0]
 800a004:	7850      	ldrb	r0, [r2, #1]
 800a006:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 800a00a:	9904      	ldr	r1, [sp, #16]
 800a00c:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	3101      	adds	r1, #1
 800a016:	4402      	add	r2, r0
 800a018:	9104      	str	r1, [sp, #16]
 800a01a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a01c:	9904      	ldr	r1, [sp, #16]
 800a01e:	4288      	cmp	r0, r1
 800a020:	dceb      	bgt.n	8009ffa <lv_draw_map+0x1ba>
                map_buf_tmp += map_w * px_size_byte;
 800a022:	9a07      	ldr	r2, [sp, #28]
 800a024:	4453      	add	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a026:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 800a02a:	444a      	add	r2, r9
 800a02c:	9207      	str	r2, [sp, #28]
 800a02e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800a032:	3201      	adds	r2, #1
 800a034:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800a036:	fa03 f282 	sxtah	r2, r3, r2
 800a03a:	42aa      	cmp	r2, r5
 800a03c:	d207      	bcs.n	800a04e <lv_draw_map+0x20e>
                    blend_area.y2 ++;
 800a03e:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800a042:	3201      	adds	r2, #1
 800a044:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            for(y = 0; y < draw_area_h; y++) {
 800a048:	f108 0801 	add.w	r8, r8, #1
 800a04c:	e7c6      	b.n	8009fdc <lv_draw_map+0x19c>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800a04e:	7b23      	ldrb	r3, [r4, #12]
 800a050:	4632      	mov	r2, r6
 800a052:	a91d      	add	r1, sp, #116	; 0x74
 800a054:	4658      	mov	r0, fp
 800a056:	f003 030f 	and.w	r3, r3, #15
 800a05a:	9302      	str	r3, [sp, #8]
 800a05c:	7ae3      	ldrb	r3, [r4, #11]
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	2302      	movs	r3, #2
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	463b      	mov	r3, r7
 800a066:	f7ff fc47 	bl	80098f8 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800a06a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800a06e:	3301      	adds	r3, #1
 800a070:	b21b      	sxth	r3, r3
 800a072:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    blend_area.y2 = blend_area.y1;
 800a076:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    px_i = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e7e4      	b.n	800a048 <lv_draw_map+0x208>
            if(blend_area.y1 != blend_area.y2) {
 800a07e:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 800a082:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800a086:	429a      	cmp	r2, r3
 800a088:	d010      	beq.n	800a0ac <lv_draw_map+0x26c>
                blend_area.y2--;
 800a08a:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800a08c:	4632      	mov	r2, r6
 800a08e:	a91d      	add	r1, sp, #116	; 0x74
 800a090:	4658      	mov	r0, fp
                blend_area.y2--;
 800a092:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
 800a096:	7b23      	ldrb	r3, [r4, #12]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	9302      	str	r3, [sp, #8]
 800a09e:	7ae3      	ldrb	r3, [r4, #11]
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	f7ff fc26 	bl	80098f8 <_lv_blend_map>
            lv_mem_buf_release(mask_buf);
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f00d fc3f 	bl	8017930 <lv_mem_buf_release>
            lv_mem_buf_release(map2);
 800a0b2:	4630      	mov	r0, r6
            lv_mem_buf_release(map2);
 800a0b4:	f00d fc3c 	bl	8017930 <lv_mem_buf_release>
}
 800a0b8:	e710      	b.n	8009edc <lv_draw_map+0x9c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f00c fcea 	bl	8016a94 <lv_disp_get_hor_res>
 800a0c0:	4682      	mov	sl, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
 800a0c2:	a81b      	add	r0, sp, #108	; 0x6c
 800a0c4:	f00c ffa9 	bl	801701a <lv_area_get_size>
 800a0c8:	4550      	cmp	r0, sl
 800a0ca:	d803      	bhi.n	800a0d4 <lv_draw_map+0x294>
 800a0cc:	a81b      	add	r0, sp, #108	; 0x6c
 800a0ce:	f00c ffa4 	bl	801701a <lv_area_get_size>
 800a0d2:	4682      	mov	sl, r0
            lv_color_t * map2 = lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
 800a0d4:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800a0d8:	f00d fdce 	bl	8017c78 <lv_mem_buf_get>
 800a0dc:	ee08 0a10 	vmov	s16, r0
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	f00d fdc9 	bl	8017c78 <lv_mem_buf_get>
            lv_memset_00(&trans_dsc, sizeof(_lv_img_transform_dsc_t));
 800a0e6:	214c      	movs	r1, #76	; 0x4c
            lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a0e8:	4606      	mov	r6, r0
            lv_memset_00(&trans_dsc, sizeof(_lv_img_transform_dsc_t));
 800a0ea:	a81f      	add	r0, sp, #124	; 0x7c
 800a0ec:	f00d fe12 	bl	8017d14 <lv_memset_00>
            if(transform) {
 800a0f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0f6:	d023      	beq.n	800a140 <lv_draw_map+0x300>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d17b      	bne.n	800a1f6 <lv_draw_map+0x3b6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a100:	2b00      	cmp	r3, #0
 800a102:	bf0c      	ite	eq
 800a104:	2204      	moveq	r2, #4
 800a106:	2206      	movne	r2, #6
                trans_dsc.cfg.angle = draw_dsc->angle;
 800a108:	6823      	ldr	r3, [r4, #0]
                _lv_img_buf_transform_init(&trans_dsc);
 800a10a:	a81f      	add	r0, sp, #124	; 0x7c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a10c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
                trans_dsc.cfg.angle = draw_dsc->angle;
 800a110:	9322      	str	r3, [sp, #136]	; 0x88
 800a112:	f8b8 3006 	ldrh.w	r3, [r8, #6]
                trans_dsc.cfg.src = map_p;
 800a116:	951f      	str	r5, [sp, #124]	; 0x7c
 800a118:	3301      	adds	r3, #1
                trans_dsc.cfg.src_w = map_w;
 800a11a:	f8ad 9080 	strh.w	r9, [sp, #128]	; 0x80
                trans_dsc.cfg.cf = cf;
 800a11e:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 800a122:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
 800a124:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
 800a128:	6863      	ldr	r3, [r4, #4]
 800a12a:	9321      	str	r3, [sp, #132]	; 0x84
                trans_dsc.cfg.color = draw_dsc->recolor;
 800a12c:	8923      	ldrh	r3, [r4, #8]
 800a12e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                trans_dsc.cfg.antialias = draw_dsc->antialias;
 800a132:	7d23      	ldrb	r3, [r4, #20]
 800a134:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a138:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
                _lv_img_buf_transform_init(&trans_dsc);
 800a13c:	f004 fa9a 	bl	800e674 <_lv_img_buf_transform_init>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
 800a140:	7aa3      	ldrb	r3, [r4, #10]
 800a142:	43da      	mvns	r2, r3
 800a144:	b2d2      	uxtb	r2, r2
 800a146:	920f      	str	r2, [sp, #60]	; 0x3c
            if(draw_dsc->recolor_opa != 0) {
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d056      	beq.n	800a1fa <lv_draw_map+0x3ba>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
 800a14c:	7a62      	ldrb	r2, [r4, #9]
 800a14e:	08d2      	lsrs	r2, r2, #3
 800a150:	435a      	muls	r2, r3
 800a152:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
 800a154:	8922      	ldrh	r2, [r4, #8]
 800a156:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800a15a:	435a      	muls	r2, r3
 800a15c:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
 800a15e:	7a22      	ldrb	r2, [r4, #8]
 800a160:	f002 021f 	and.w	r2, r2, #31
 800a164:	4353      	muls	r3, r2
 800a166:	930c      	str	r3, [sp, #48]	; 0x30
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a168:	9b06      	ldr	r3, [sp, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d149      	bne.n	800a202 <lv_draw_map+0x3c2>
 800a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a170:	2b00      	cmp	r3, #0
 800a172:	d146      	bne.n	800a202 <lv_draw_map+0x3c2>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a17a:	bf14      	ite	ne
 800a17c:	2502      	movne	r5, #2
 800a17e:	2501      	moveq	r5, #1
            if(other_mask_cnt) {
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	b11b      	cbz	r3, 800a18c <lv_draw_map+0x34c>
                lv_memset_ff(mask_buf, mask_buf_size);
 800a184:	4651      	mov	r1, sl
 800a186:	4630      	mov	r0, r6
 800a188:	f00d fdf3 	bl	8017d72 <lv_memset_ff>
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
 800a18c:	9b04      	ldr	r3, [sp, #16]
 800a18e:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800a192:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a196:	4413      	add	r3, r2
 800a198:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800a19c:	1a9b      	subs	r3, r3, r2
 800a19e:	9313      	str	r3, [sp, #76]	; 0x4c
                map_buf_tmp += map_w * px_size_byte;
 800a1a0:	9b05      	ldr	r3, [sp, #20]
 800a1a2:	fb13 f309 	smulbb	r3, r3, r9
            for(y = 0; y < draw_area_h; y++) {
 800a1a6:	f04f 0900 	mov.w	r9, #0
                map_buf_tmp += map_w * px_size_byte;
 800a1aa:	9315      	str	r3, [sp, #84]	; 0x54
        uint32_t px_i = 0;
 800a1ac:	464f      	mov	r7, r9
 800a1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a1b4:	9317      	str	r3, [sp, #92]	; 0x5c
            for(y = 0; y < draw_area_h; y++) {
 800a1b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1b8:	454b      	cmp	r3, r9
 800a1ba:	dc24      	bgt.n	800a206 <lv_draw_map+0x3c6>
            if(blend_area.y1 != blend_area.y2) {
 800a1bc:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 800a1c0:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d010      	beq.n	800a1ea <lv_draw_map+0x3aa>
                blend_area.y2--;
 800a1c8:	3b01      	subs	r3, #1
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800a1ca:	ee18 2a10 	vmov	r2, s16
 800a1ce:	a91d      	add	r1, sp, #116	; 0x74
 800a1d0:	4658      	mov	r0, fp
                blend_area.y2--;
 800a1d2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800a1d6:	7b23      	ldrb	r3, [r4, #12]
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	9302      	str	r3, [sp, #8]
 800a1de:	7ae3      	ldrb	r3, [r4, #11]
 800a1e0:	e9cd 5300 	strd	r5, r3, [sp]
 800a1e4:	4633      	mov	r3, r6
 800a1e6:	f7ff fb87 	bl	80098f8 <_lv_blend_map>
            lv_mem_buf_release(mask_buf);
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f00d fba0 	bl	8017930 <lv_mem_buf_release>
            lv_mem_buf_release(map2);
 800a1f0:	ee18 0a10 	vmov	r0, s16
 800a1f4:	e75e      	b.n	800a0b4 <lv_draw_map+0x274>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800a1f6:	2205      	movs	r2, #5
 800a1f8:	e786      	b.n	800a108 <lv_draw_map+0x2c8>
            uint16_t recolor_premult[3] = {0};
 800a1fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a1fc:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800a200:	e7b2      	b.n	800a168 <lv_draw_map+0x328>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a202:	2502      	movs	r5, #2
 800a204:	e7bc      	b.n	800a180 <lv_draw_map+0x340>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
 800a206:	9b04      	ldr	r3, [sp, #16]
 800a208:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800a20c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800a210:	4413      	add	r3, r2
 800a212:	f9b8 2000 	ldrsh.w	r2, [r8]
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	ee18 2a10 	vmov	r2, s16
 800a21c:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 800a220:	9314      	str	r3, [sp, #80]	; 0x50
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a222:	19f3      	adds	r3, r6, r7
 800a224:	9216      	str	r2, [sp, #88]	; 0x58
                map_px = map_buf_tmp;
 800a226:	9a07      	ldr	r2, [sp, #28]
 800a228:	ee08 3a90 	vmov	s17, r3
 800a22c:	920a      	str	r2, [sp, #40]	; 0x28
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a22e:	2200      	movs	r2, #0
 800a230:	920b      	str	r2, [sp, #44]	; 0x2c
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800a232:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a234:	444a      	add	r2, r9
 800a236:	b212      	sxth	r2, r2
 800a238:	ee07 2a90 	vmov	s15, r2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a23c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a23e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a240:	428a      	cmp	r2, r1
 800a242:	dc3e      	bgt.n	800a2c2 <lv_draw_map+0x482>
 800a244:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a246:	441f      	add	r7, r3
                if(other_mask_cnt) {
 800a248:	9b08      	ldr	r3, [sp, #32]
 800a24a:	b323      	cbz	r3, 800a296 <lv_draw_map+0x456>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + draw_buf->area.x1, y + draw_area.y1 + draw_buf->area.y1,
 800a24c:	9804      	ldr	r0, [sp, #16]
 800a24e:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800a252:	8a40      	ldrh	r0, [r0, #18]
 800a254:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800a258:	4402      	add	r2, r0
 800a25a:	9804      	ldr	r0, [sp, #16]
 800a25c:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 800a260:	3301      	adds	r3, #1
 800a262:	8a00      	ldrh	r0, [r0, #16]
 800a264:	444a      	add	r2, r9
 800a266:	1a5b      	subs	r3, r3, r1
 800a268:	4401      	add	r1, r0
 800a26a:	b212      	sxth	r2, r2
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	ee18 0a90 	vmov	r0, s17
 800a272:	b209      	sxth	r1, r1
 800a274:	f001 ffca 	bl	800c20c <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
 800a278:	2800      	cmp	r0, #0
 800a27a:	f040 808d 	bne.w	800a398 <lv_draw_map+0x558>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a27e:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a282:	2502      	movs	r5, #2
 800a284:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
                        lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
 800a288:	ee18 0a90 	vmov	r0, s17
 800a28c:	3101      	adds	r1, #1
 800a28e:	1ac9      	subs	r1, r1, r3
 800a290:	b209      	sxth	r1, r1
 800a292:	f00d fd3f 	bl	8017d14 <lv_memset_00>
                map_buf_tmp += map_w * px_size_byte;
 800a296:	9b07      	ldr	r3, [sp, #28]
 800a298:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a29a:	4413      	add	r3, r2
 800a29c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800a2a0:	9307      	str	r3, [sp, #28]
 800a2a2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
 800a2aa:	fa07 f383 	sxtah	r3, r7, r3
 800a2ae:	4553      	cmp	r3, sl
 800a2b0:	d276      	bcs.n	800a3a0 <lv_draw_map+0x560>
                    blend_area.y2 ++;
 800a2b2:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < draw_area_h; y++) {
 800a2bc:	f109 0901 	add.w	r9, r9, #1
 800a2c0:	e779      	b.n	800a1b6 <lv_draw_map+0x376>
                    if(transform) {
 800a2c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2c4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a2c8:	d04d      	beq.n	800a366 <lv_draw_map+0x526>
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
 800a2ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2cc:	a81f      	add	r0, sp, #124	; 0x7c
 800a2ce:	9319      	str	r3, [sp, #100]	; 0x64
 800a2d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2d2:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 800a2d6:	1899      	adds	r1, r3, r2
 800a2d8:	ee17 2a90 	vmov	r2, s15
 800a2dc:	b209      	sxth	r1, r1
 800a2de:	f004 fc7e 	bl	800ebde <_lv_img_buf_transform>
                        if(ret == false) {
 800a2e2:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 800a2e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2e8:	b948      	cbnz	r0, 800a2fe <lv_draw_map+0x4be>
                            mask_buf[px_i] = LV_OPA_TRANSP;
 800a2ea:	7018      	strb	r0, [r3, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
 800a2ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	9905      	ldr	r1, [sp, #20]
 800a2f2:	3201      	adds	r2, #1
 800a2f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2f8:	440a      	add	r2, r1
 800a2fa:	920a      	str	r2, [sp, #40]	; 0x28
 800a2fc:	e79e      	b.n	800a23c <lv_draw_map+0x3fc>
                            mask_buf[px_i] = trans_dsc.res.opa;
 800a2fe:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
 800a302:	7019      	strb	r1, [r3, #0]
                            c.full = trans_dsc.res.color.full;
 800a304:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
                    if(draw_dsc->recolor_opa != 0) {
 800a308:	7aa0      	ldrb	r0, [r4, #10]
 800a30a:	b338      	cbz	r0, 800a35c <lv_draw_map+0x51c>
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a30c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a30e:	f3c1 1045 	ubfx	r0, r1, #5, #6
 800a312:	4694      	mov	ip, r2
 800a314:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a316:	fb00 200c 	mla	r0, r0, ip, r2
 800a31a:	f248 0281 	movw	r2, #32897	; 0x8081
 800a31e:	3080      	adds	r0, #128	; 0x80
 800a320:	4350      	muls	r0, r2
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a324:	f3c0 5cc5 	ubfx	ip, r0, #23, #6
 800a328:	4696      	mov	lr, r2
 800a32a:	f001 001f 	and.w	r0, r1, #31
 800a32e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a330:	0ac9      	lsrs	r1, r1, #11
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a332:	fb00 200e 	mla	r0, r0, lr, r2
 800a336:	f248 0281 	movw	r2, #32897	; 0x8081
 800a33a:	3080      	adds	r0, #128	; 0x80
 800a33c:	4350      	muls	r0, r2
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800a33e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a340:	fb01 210e 	mla	r1, r1, lr, r2
 800a344:	f248 0281 	movw	r2, #32897	; 0x8081
 800a348:	f3c0 50c4 	ubfx	r0, r0, #23, #5
 800a34c:	3180      	adds	r1, #128	; 0x80
 800a34e:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
 800a352:	4351      	muls	r1, r2
 800a354:	0dc9      	lsrs	r1, r1, #23
 800a356:	ea40 21c1 	orr.w	r1, r0, r1, lsl #11
 800a35a:	b289      	uxth	r1, r1
                    map2[px_i].full = c.full;
 800a35c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a35e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a360:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
 800a364:	e7c2      	b.n	800a2ec <lv_draw_map+0x4ac>
                        if(alpha_byte) {
 800a366:	9a06      	ldr	r2, [sp, #24]
 800a368:	b19a      	cbz	r2, 800a392 <lv_draw_map+0x552>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800a36a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a36c:	7891      	ldrb	r1, [r2, #2]
                            mask_buf[px_i] = px_opa;
 800a36e:	7019      	strb	r1, [r3, #0]
                            if(px_opa == 0) {
 800a370:	2900      	cmp	r1, #0
 800a372:	d0bb      	beq.n	800a2ec <lv_draw_map+0x4ac>
                        c.full =  map_px[0] + (map_px[1] << 8);
 800a374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a376:	7850      	ldrb	r0, [r2, #1]
 800a378:	7811      	ldrb	r1, [r2, #0]
                        if(chroma_key) {
 800a37a:	9a09      	ldr	r2, [sp, #36]	; 0x24
                        c.full =  map_px[0] + (map_px[1] << 8);
 800a37c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800a380:	b289      	uxth	r1, r1
                        if(chroma_key) {
 800a382:	2a00      	cmp	r2, #0
 800a384:	d0c0      	beq.n	800a308 <lv_draw_map+0x4c8>
                            if(c.full == chroma_keyed_color.full) {
 800a386:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 800a38a:	d1bd      	bne.n	800a308 <lv_draw_map+0x4c8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
 800a38c:	2100      	movs	r1, #0
 800a38e:	7019      	strb	r1, [r3, #0]
                                continue;
 800a390:	e7ac      	b.n	800a2ec <lv_draw_map+0x4ac>
                            mask_buf[px_i] = 0xFF;
 800a392:	21ff      	movs	r1, #255	; 0xff
 800a394:	7019      	strb	r1, [r3, #0]
 800a396:	e7ed      	b.n	800a374 <lv_draw_map+0x534>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
 800a398:	2802      	cmp	r0, #2
 800a39a:	bf08      	it	eq
 800a39c:	2502      	moveq	r5, #2
 800a39e:	e77a      	b.n	800a296 <lv_draw_map+0x456>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
 800a3a0:	7b23      	ldrb	r3, [r4, #12]
 800a3a2:	ee18 2a10 	vmov	r2, s16
 800a3a6:	a91d      	add	r1, sp, #116	; 0x74
 800a3a8:	4658      	mov	r0, fp
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	9302      	str	r3, [sp, #8]
 800a3b0:	7ae3      	ldrb	r3, [r4, #11]
 800a3b2:	e9cd 5300 	strd	r5, r3, [sp]
 800a3b6:	4633      	mov	r3, r6
 800a3b8:	f7ff fa9e 	bl	80098f8 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
 800a3bc:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	b21b      	sxth	r3, r3
 800a3c4:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                    blend_area.y2 = blend_area.y1;
 800a3c8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	b97b      	cbnz	r3, 800a3f0 <lv_draw_map+0x5b0>
 800a3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d2:	b96b      	cbnz	r3, 800a3f0 <lv_draw_map+0x5b0>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3da:	bf14      	ite	ne
 800a3dc:	2502      	movne	r5, #2
 800a3de:	2501      	moveq	r5, #1
                    if(other_mask_cnt) {
 800a3e0:	9b08      	ldr	r3, [sp, #32]
 800a3e2:	b13b      	cbz	r3, 800a3f4 <lv_draw_map+0x5b4>
                        lv_memset_ff(mask_buf, mask_buf_size);
 800a3e4:	4651      	mov	r1, sl
 800a3e6:	4630      	mov	r0, r6
                    px_i = 0;
 800a3e8:	2700      	movs	r7, #0
                        lv_memset_ff(mask_buf, mask_buf_size);
 800a3ea:	f00d fcc2 	bl	8017d72 <lv_memset_ff>
 800a3ee:	e765      	b.n	800a2bc <lv_draw_map+0x47c>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
 800a3f0:	2502      	movs	r5, #2
 800a3f2:	e7f5      	b.n	800a3e0 <lv_draw_map+0x5a0>
                    px_i = 0;
 800a3f4:	9f08      	ldr	r7, [sp, #32]
 800a3f6:	e761      	b.n	800a2bc <lv_draw_map+0x47c>

0800a3f8 <lv_draw_img_dsc_init>:
{
 800a3f8:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800a3fa:	2118      	movs	r1, #24
{
 800a3fc:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800a3fe:	f00d fc89 	bl	8017d14 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800a402:	2300      	movs	r3, #0
 800a404:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 800a406:	23ff      	movs	r3, #255	; 0xff
 800a408:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800a40a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a40e:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800a410:	7d23      	ldrb	r3, [r4, #20]
 800a412:	f043 0301 	orr.w	r3, r3, #1
 800a416:	7523      	strb	r3, [r4, #20]
}
 800a418:	bd10      	pop	{r4, pc}
	...

0800a41c <lv_img_cf_get_px_size>:
    switch(cf) {
 800a41c:	3804      	subs	r0, #4
 800a41e:	b2c0      	uxtb	r0, r0
 800a420:	280a      	cmp	r0, #10
 800a422:	bf9a      	itte	ls
 800a424:	4b01      	ldrls	r3, [pc, #4]	; (800a42c <lv_img_cf_get_px_size+0x10>)
 800a426:	5c18      	ldrbls	r0, [r3, r0]
{
 800a428:	2000      	movhi	r0, #0
}
 800a42a:	4770      	bx	lr
 800a42c:	08025900 	.word	0x08025900

0800a430 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 800a430:	2803      	cmp	r0, #3
 800a432:	d005      	beq.n	800a440 <lv_img_cf_is_chroma_keyed+0x10>
 800a434:	3806      	subs	r0, #6
 800a436:	2804      	cmp	r0, #4
 800a438:	bf8c      	ite	hi
 800a43a:	2000      	movhi	r0, #0
 800a43c:	2001      	movls	r0, #1
 800a43e:	4770      	bx	lr
            is_chroma_keyed = true;
 800a440:	2001      	movs	r0, #1
}
 800a442:	4770      	bx	lr

0800a444 <lv_img_cf_has_alpha>:
    switch(cf) {
 800a444:	280e      	cmp	r0, #14
 800a446:	d809      	bhi.n	800a45c <lv_img_cf_has_alpha+0x18>
 800a448:	2301      	movs	r3, #1
 800a44a:	fa03 f000 	lsl.w	r0, r3, r0
 800a44e:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800a452:	4218      	tst	r0, r3
 800a454:	bf14      	ite	ne
 800a456:	2001      	movne	r0, #1
 800a458:	2000      	moveq	r0, #0
 800a45a:	4770      	bx	lr
{
 800a45c:	2000      	movs	r0, #0
}
 800a45e:	4770      	bx	lr

0800a460 <lv_draw_img>:
{
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	4604      	mov	r4, r0
 800a466:	4688      	mov	r8, r1
 800a468:	461e      	mov	r6, r3
    if(src == NULL) {
 800a46a:	4610      	mov	r0, r2
{
 800a46c:	ed2d 8b02 	vpush	{d8}
 800a470:	b08d      	sub	sp, #52	; 0x34
    if(src == NULL) {
 800a472:	b94a      	cbnz	r2, 800a488 <lv_draw_img+0x28>
        show_error(coords, mask, "No\ndata");
 800a474:	4a70      	ldr	r2, [pc, #448]	; (800a638 <lv_draw_img+0x1d8>)
 800a476:	4641      	mov	r1, r8
 800a478:	4620      	mov	r0, r4
 800a47a:	f7ff fcc3 	bl	8009e04 <show_error>
}
 800a47e:	b00d      	add	sp, #52	; 0x34
 800a480:	ecbd 8b02 	vpop	{d8}
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->opa <= LV_OPA_MIN) return;
 800a488:	7adb      	ldrb	r3, [r3, #11]
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d9f7      	bls.n	800a47e <lv_draw_img+0x1e>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800a48e:	6932      	ldr	r2, [r6, #16]
 800a490:	8931      	ldrh	r1, [r6, #8]
 800a492:	f004 fc43 	bl	800ed1c <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800a496:	4605      	mov	r5, r0
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0eb      	beq.n	800a474 <lv_draw_img+0x14>
    if(cdsc->dec_dsc.error_msg != NULL) {
 800a49c:	6a02      	ldr	r2, [r0, #32]
 800a49e:	b13a      	cbz	r2, 800a4b0 <lv_draw_img+0x50>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
 800a4a0:	4641      	mov	r1, r8
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7ff fcae 	bl	8009e04 <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f004 ffb1 	bl	800f410 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800a4ae:	e7e6      	b.n	800a47e <lv_draw_img+0x1e>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
 800a4b0:	7d03      	ldrb	r3, [r0, #20]
 800a4b2:	f003 031f 	and.w	r3, r3, #31
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff ffba 	bl	800a430 <lv_img_cf_is_chroma_keyed>
 800a4bc:	9004      	str	r0, [sp, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff ffc0 	bl	800a444 <lv_img_cf_has_alpha>
    else if(cdsc->dec_dsc.img_data) {
 800a4c4:	69ab      	ldr	r3, [r5, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
 800a4c6:	9005      	str	r0, [sp, #20]
    else if(cdsc->dec_dsc.img_data) {
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d04b      	beq.n	800a564 <lv_draw_img+0x104>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800a4cc:	6833      	ldr	r3, [r6, #0]
    dest->x1 = src->x1;
 800a4ce:	f9b4 1000 	ldrsh.w	r1, [r4]
    dest->y1 = src->y1;
 800a4d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a4d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dest->x2 = src->x2;
 800a4da:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
    dest->y2 = src->y2;
 800a4de:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
    dest->x1 = src->x1;
 800a4e2:	f8ad 1020 	strh.w	r1, [sp, #32]
    dest->y1 = src->y1;
 800a4e6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 800a4ea:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 800a4ee:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
 800a4f2:	d025      	beq.n	800a540 <lv_draw_img+0xe0>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800a4f4:	46b4      	mov	ip, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a4f6:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a4f8:	3701      	adds	r7, #1
 800a4fa:	f93c 3b04 	ldrsh.w	r3, [ip], #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a4fe:	1a41      	subs	r1, r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a500:	1aba      	subs	r2, r7, r2
 800a502:	8870      	ldrh	r0, [r6, #2]
 800a504:	b209      	sxth	r1, r1
 800a506:	f8cd c004 	str.w	ip, [sp, #4]
 800a50a:	b212      	sxth	r2, r2
 800a50c:	9000      	str	r0, [sp, #0]
 800a50e:	a808      	add	r0, sp, #32
 800a510:	f004 f92c 	bl	800e76c <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800a514:	8822      	ldrh	r2, [r4, #0]
 800a516:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800a51a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
 800a51e:	4413      	add	r3, r2
 800a520:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800a524:	8863      	ldrh	r3, [r4, #2]
 800a526:	4419      	add	r1, r3
 800a528:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 800a52c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800a530:	440a      	add	r2, r1
 800a532:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 800a536:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a53a:	4413      	add	r3, r2
 800a53c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
 800a540:	aa08      	add	r2, sp, #32
 800a542:	4641      	mov	r1, r8
 800a544:	a80a      	add	r0, sp, #40	; 0x28
 800a546:	f00c fd96 	bl	8017076 <_lv_area_intersect>
        if(union_ok == false) {
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d0ac      	beq.n	800a4a8 <lv_draw_img+0x48>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
 800a54e:	9b05      	ldr	r3, [sp, #20]
 800a550:	a90a      	add	r1, sp, #40	; 0x28
 800a552:	4620      	mov	r0, r4
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	4633      	mov	r3, r6
 800a55c:	69aa      	ldr	r2, [r5, #24]
 800a55e:	f7ff fc6f 	bl	8009e40 <lv_draw_map>
 800a562:	e7a1      	b.n	800a4a8 <lv_draw_img+0x48>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
 800a564:	4622      	mov	r2, r4
 800a566:	4641      	mov	r1, r8
 800a568:	a806      	add	r0, sp, #24
 800a56a:	f00c fd84 	bl	8017076 <_lv_area_intersect>
        if(union_ok == false) {
 800a56e:	2800      	cmp	r0, #0
 800a570:	d09a      	beq.n	800a4a8 <lv_draw_img+0x48>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a572:	f8bd 701c 	ldrh.w	r7, [sp, #28]
        lv_area_set_height(&line, 1);
 800a576:	f10d 0a20 	add.w	sl, sp, #32
 800a57a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a57e:	3701      	adds	r7, #1
 800a580:	1aff      	subs	r7, r7, r3
 800a582:	b23f      	sxth	r7, r7
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800a584:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800a588:	f00d fb76 	bl	8017c78 <lv_mem_buf_get>
    dest->x1 = src->x1;
 800a58c:	9b06      	ldr	r3, [sp, #24]
        lv_area_set_height(&line, 1);
 800a58e:	2101      	movs	r1, #1
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800a590:	4681      	mov	r9, r0
 800a592:	9308      	str	r3, [sp, #32]
        lv_area_set_height(&line, 1);
 800a594:	4650      	mov	r0, sl
    dest->x2 = src->x2;
 800a596:	9b07      	ldr	r3, [sp, #28]
 800a598:	9309      	str	r3, [sp, #36]	; 0x24
 800a59a:	f00c fd39 	bl	8017010 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800a59e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a5a2:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
 800a5a6:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a5aa:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
 800a5ac:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a5b0:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
 800a5b2:	ebab 0101 	sub.w	r1, fp, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a5b6:	ee08 3a10 	vmov	s16, r3
        int32_t y = mask_com.y1 - coords->y1;
 800a5ba:	9103      	str	r1, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a5bc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a5c0:	459b      	cmp	fp, r3
 800a5c2:	dd03      	ble.n	800a5cc <lv_draw_img+0x16c>
        lv_mem_buf_release(buf);
 800a5c4:	4648      	mov	r0, r9
 800a5c6:	f00d f9b3 	bl	8017930 <lv_mem_buf_release>
 800a5ca:	e76d      	b.n	800a4a8 <lv_draw_img+0x48>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
 800a5cc:	4652      	mov	r2, sl
 800a5ce:	4641      	mov	r1, r8
 800a5d0:	a80a      	add	r0, sp, #40	; 0x28
 800a5d2:	f00c fd50 	bl	8017076 <_lv_area_intersect>
            if(union_ok == false) continue;
 800a5d6:	b360      	cbz	r0, 800a632 <lv_draw_img+0x1d2>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800a5d8:	463b      	mov	r3, r7
 800a5da:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800a5de:	ee18 1a10 	vmov	r1, s16
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f8cd 9000 	str.w	r9, [sp]
 800a5e8:	f004 ff02 	bl	800f3f0 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800a5ec:	2801      	cmp	r0, #1
 800a5ee:	d009      	beq.n	800a604 <lv_draw_img+0x1a4>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f004 ff0d 	bl	800f410 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800a5f6:	4648      	mov	r0, r9
 800a5f8:	f00d f99a 	bl	8017930 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f004 ff07 	bl	800f410 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800a602:	e737      	b.n	800a474 <lv_draw_img+0x14>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
 800a604:	9b05      	ldr	r3, [sp, #20]
 800a606:	464a      	mov	r2, r9
 800a608:	a90a      	add	r1, sp, #40	; 0x28
 800a60a:	4650      	mov	r0, sl
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	9b04      	ldr	r3, [sp, #16]
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4633      	mov	r3, r6
 800a614:	f7ff fc14 	bl	8009e40 <lv_draw_map>
            line.y1++;
 800a618:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800a61c:	3301      	adds	r3, #1
 800a61e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 800a622:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a626:	3301      	adds	r3, #1
 800a628:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	3301      	adds	r3, #1
 800a630:	9303      	str	r3, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800a632:	f10b 0b01 	add.w	fp, fp, #1
 800a636:	e7c1      	b.n	800a5bc <lv_draw_img+0x15c>
 800a638:	080258f8 	.word	0x080258f8

0800a63c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800a63c:	b150      	cbz	r0, 800a654 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800a63e:	7803      	ldrb	r3, [r0, #0]
 800a640:	f1a3 0220 	sub.w	r2, r3, #32
 800a644:	2a5f      	cmp	r2, #95	; 0x5f
 800a646:	d907      	bls.n	800a658 <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
 800a648:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800a64c:	bf14      	ite	ne
 800a64e:	2002      	movne	r0, #2
 800a650:	2000      	moveq	r0, #0
 800a652:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800a654:	2003      	movs	r0, #3
 800a656:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800a658:	2001      	movs	r0, #1
}
 800a65a:	4770      	bx	lr

0800a65c <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800a65c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b09      	cmp	r3, #9
 800a664:	d90a      	bls.n	800a67c <hex_char_to_num+0x20>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800a666:	2860      	cmp	r0, #96	; 0x60
 800a668:	bf84      	itt	hi
 800a66a:	3820      	subhi	r0, #32
 800a66c:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
 800a66e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a672:	2b05      	cmp	r3, #5
 800a674:	bf96      	itet	ls
 800a676:	3837      	subls	r0, #55	; 0x37
{
 800a678:	2300      	movhi	r3, #0
 800a67a:	b2c3      	uxtbls	r3, r0
                break;
        }
    }

    return result;
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	4770      	bx	lr

0800a680 <lv_draw_label_dsc_init>:
{
 800a680:	b538      	push	{r3, r4, r5, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800a682:	2120      	movs	r1, #32
{
 800a684:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800a686:	f00d fb45 	bl	8017d14 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800a68a:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 800a68c:	2500      	movs	r5, #0
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a68e:	2005      	movs	r0, #5
    dsc->opa = LV_OPA_COVER;
 800a690:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 800a692:	4b06      	ldr	r3, [pc, #24]	; (800a6ac <lv_draw_label_dsc_init+0x2c>)
    dsc->color = lv_color_black();
 800a694:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800a696:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800a698:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800a69c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a6a0:	f00c feec 	bl	801747c <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800a6a4:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800a6a6:	8220      	strh	r0, [r4, #16]
}
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	080294fc 	.word	0x080294fc

0800a6b0 <lv_draw_letter>:
{
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	b099      	sub	sp, #100	; 0x64
 800a6b6:	461f      	mov	r7, r3
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
    if(opa < LV_OPA_MIN) return;
 800a6c6:	2c01      	cmp	r4, #1
{
 800a6c8:	930d      	str	r3, [sp, #52]	; 0x34
    if(opa < LV_OPA_MIN) return;
 800a6ca:	f240 8100 	bls.w	800a8ce <lv_draw_letter+0x21e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800a6ce:	2cfe      	cmp	r4, #254	; 0xfe
 800a6d0:	bf28      	it	cs
 800a6d2:	24ff      	movcs	r4, #255	; 0xff
    if(font_p == NULL) {
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	f000 80fa 	beq.w	800a8ce <lv_draw_letter+0x21e>
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 800a6da:	2300      	movs	r3, #0
 800a6dc:	463a      	mov	r2, r7
 800a6de:	a915      	add	r1, sp, #84	; 0x54
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f00b ffd9 	bl	8016698 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f000 80f1 	beq.w	800a8ce <lv_draw_letter+0x21e>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800a6ec:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80ec 	beq.w	800a8ce <lv_draw_letter+0x21e>
 800a6f6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800a6fa:	2a00      	cmp	r2, #0
 800a6fc:	f000 80e7 	beq.w	800a8ce <lv_draw_letter+0x21e>
    int32_t pos_x = pos_p->x + g.ofs_x;
 800a700:	f9bd 105a 	ldrsh.w	r1, [sp, #90]	; 0x5a
 800a704:	f9b8 b000 	ldrsh.w	fp, [r8]
 800a708:	448b      	add	fp, r1
    if(pos_x + g.box_w < clip_area->x1 ||
 800a70a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800a70e:	445a      	add	r2, fp
 800a710:	428a      	cmp	r2, r1
 800a712:	f2c0 80dc 	blt.w	800a8ce <lv_draw_letter+0x21e>
       pos_x > clip_area->x2 ||
 800a716:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
 800a71a:	455a      	cmp	r2, fp
 800a71c:	f2c0 80d7 	blt.w	800a8ce <lv_draw_letter+0x21e>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 800a720:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800a724:	f9b6 9008 	ldrsh.w	r9, [r6, #8]
 800a728:	eba9 0902 	sub.w	r9, r9, r2
 800a72c:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800a730:	4491      	add	r9, r2
 800a732:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 800a736:	eba9 0903 	sub.w	r9, r9, r3
 800a73a:	eba9 0902 	sub.w	r9, r9, r2
       pos_y + g.box_h < clip_area->y1 ||
 800a73e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a742:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
 800a744:	4293      	cmp	r3, r2
 800a746:	f2c0 80c2 	blt.w	800a8ce <lv_draw_letter+0x21e>
       pos_y > clip_area->y2)  {
 800a74a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
       pos_y + g.box_h < clip_area->y1 ||
 800a74e:	454b      	cmp	r3, r9
 800a750:	f2c0 80bd 	blt.w	800a8ce <lv_draw_letter+0x21e>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800a754:	4639      	mov	r1, r7
 800a756:	4630      	mov	r0, r6
 800a758:	f00b ff9c 	bl	8016694 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800a75c:	2800      	cmp	r0, #0
 800a75e:	f000 80b6 	beq.w	800a8ce <lv_draw_letter+0x21e>
    if(font_p->subpx) {
 800a762:	7b33      	ldrb	r3, [r6, #12]
 800a764:	079e      	lsls	r6, r3, #30
 800a766:	f040 80b2 	bne.w	800a8ce <lv_draw_letter+0x21e>
    uint32_t bpp = g->bpp;
 800a76a:	f89d 305e 	ldrb.w	r3, [sp, #94]	; 0x5e
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
 800a76e:	fa0f f18b 	sxth.w	r1, fp
 800a772:	fa0f f289 	sxth.w	r2, r9
    if(bpp == 3) bpp = 4;
 800a776:	2b03      	cmp	r3, #3
 800a778:	f000 80b3 	beq.w	800a8e2 <lv_draw_letter+0x232>
    switch(bpp) {
 800a77c:	3b01      	subs	r3, #1
 800a77e:	2b07      	cmp	r3, #7
 800a780:	f200 80a5 	bhi.w	800a8ce <lv_draw_letter+0x21e>
 800a784:	e8df f003 	tbb	[pc, r3]
 800a788:	ada3b304 	.word	0xada3b304
 800a78c:	a6a3a3a3 	.word	0xa6a3a3a3
    if(bpp == 3) bpp = 4;
 800a790:	2780      	movs	r7, #128	; 0x80
 800a792:	2601      	movs	r6, #1
 800a794:	2302      	movs	r3, #2
 800a796:	9708      	str	r7, [sp, #32]
 800a798:	4f9e      	ldr	r7, [pc, #632]	; (800aa14 <lv_draw_letter+0x364>)
    if(opa < LV_OPA_MAX) {
 800a79a:	2cfc      	cmp	r4, #252	; 0xfc
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a79c:	9705      	str	r7, [sp, #20]
    if(opa < LV_OPA_MAX) {
 800a79e:	d811      	bhi.n	800a7c4 <lv_draw_letter+0x114>
        if(prev_opa != opa || prev_bpp != bpp) {
 800a7a0:	4f9d      	ldr	r7, [pc, #628]	; (800aa18 <lv_draw_letter+0x368>)
 800a7a2:	f897 c000 	ldrb.w	ip, [r7]
 800a7a6:	45a4      	cmp	ip, r4
 800a7a8:	46bc      	mov	ip, r7
 800a7aa:	f040 80a6 	bne.w	800a8fa <lv_draw_letter+0x24a>
 800a7ae:	4f9b      	ldr	r7, [pc, #620]	; (800aa1c <lv_draw_letter+0x36c>)
 800a7b0:	683f      	ldr	r7, [r7, #0]
 800a7b2:	42b7      	cmp	r7, r6
 800a7b4:	f040 80a1 	bne.w	800a8fa <lv_draw_letter+0x24a>
        prev_bpp = bpp;
 800a7b8:	4b98      	ldr	r3, [pc, #608]	; (800aa1c <lv_draw_letter+0x36c>)
        prev_opa = opa;
 800a7ba:	f88c 4000 	strb.w	r4, [ip]
        prev_bpp = bpp;
 800a7be:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
 800a7c0:	4b97      	ldr	r3, [pc, #604]	; (800aa20 <lv_draw_letter+0x370>)
 800a7c2:	9305      	str	r3, [sp, #20]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a7c4:	f9b5 7000 	ldrsh.w	r7, [r5]
    int32_t box_w = g->box_w;
 800a7c8:	f8bd a056 	ldrh.w	sl, [sp, #86]	; 0x56
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a7cc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a7d0:	42b9      	cmp	r1, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a7d2:	eb0a 0c01 	add.w	ip, sl, r1
    int32_t box_h = g->box_h;
 800a7d6:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
 800a7da:	bfb4      	ite	lt
 800a7dc:	1a7f      	sublt	r7, r7, r1
 800a7de:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a7e0:	459c      	cmp	ip, r3
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800a7e2:	fb06 f40a 	mul.w	r4, r6, sl
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a7e6:	bfcc      	ite	gt
 800a7e8:	1a5b      	subgt	r3, r3, r1
 800a7ea:	f8cd a01c 	strle.w	sl, [sp, #28]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a7ee:	eb08 0102 	add.w	r1, r8, r2
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
 800a7f2:	bfc4      	itt	gt
 800a7f4:	3301      	addgt	r3, #1
 800a7f6:	9307      	strgt	r3, [sp, #28]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
 800a7f8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	bfb4      	ite	lt
 800a800:	1a9b      	sublt	r3, r3, r2
 800a802:	2300      	movge	r3, #0
 800a804:	9306      	str	r3, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a806:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a80a:	4299      	cmp	r1, r3
 800a80c:	bfc8      	it	gt
 800a80e:	1a9b      	subgt	r3, r3, r2
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a810:	9a06      	ldr	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
 800a812:	bfd2      	itee	le
 800a814:	f8cd 8030 	strle.w	r8, [sp, #48]	; 0x30
 800a818:	3301      	addgt	r3, #1
 800a81a:	930c      	strgt	r3, [sp, #48]	; 0x30
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800a81c:	fb07 f306 	mul.w	r3, r7, r6
 800a820:	fb02 3404 	mla	r4, r2, r4, r3
    map_p += bit_ofs >> 3;
 800a824:	eb00 03d4 	add.w	r3, r0, r4, lsr #3
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800a828:	f004 0407 	and.w	r4, r4, #7
    map_p += bit_ofs >> 3;
 800a82c:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800a82e:	f7fd fe53 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 800a832:	f00c f92f 	bl	8016a94 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a836:	fb08 f30a 	mul.w	r3, r8, sl
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a83a:	44ba      	add	sl, r7
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a83c:	4283      	cmp	r3, r0
 800a83e:	bfa8      	it	ge
 800a840:	4603      	movge	r3, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a842:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800a844:	930a      	str	r3, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a846:	f00d fa17 	bl	8017c78 <lv_mem_buf_get>
    fill_area.x2 = col_end  + pos_x - 1;
 800a84a:	9a07      	ldr	r2, [sp, #28]
    fill_area.x1 = col_start + pos_x;
 800a84c:	fa1f f38b 	uxth.w	r3, fp
 800a850:	fa17 fb8b 	uxtah	fp, r7, fp
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800a854:	4680      	mov	r8, r0
    fill_area.x2 = col_end  + pos_x - 1;
 800a856:	3b01      	subs	r3, #1
    fill_area.x1 = col_start + pos_x;
 800a858:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
    fill_area.x2 = col_end  + pos_x - 1;
 800a85c:	4413      	add	r3, r2
 800a85e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    fill_area.y1 = row_start + pos_y;
 800a862:	9b06      	ldr	r3, [sp, #24]
 800a864:	4499      	add	r9, r3
 800a866:	fa0f f989 	sxth.w	r9, r9
 800a86a:	f8ad 904e 	strh.w	r9, [sp, #78]	; 0x4e
    fill_area.y2 = fill_area.y1;
 800a86e:	f8ad 9052 	strh.w	r9, [sp, #82]	; 0x52
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a872:	f001 fd15 	bl	800c2a0 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
 800a876:	f1c6 0308 	rsb	r3, r6, #8
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800a87a:	900f      	str	r0, [sp, #60]	; 0x3c
    uint32_t col_bit_max = 8 - bpp;
 800a87c:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a87e:	9b07      	ldr	r3, [sp, #28]
 800a880:	ebaa 0a03 	sub.w	sl, sl, r3
 800a884:	fb06 f30a 	mul.w	r3, r6, sl
    int32_t mask_p = 0;
 800a888:	f04f 0a00 	mov.w	sl, #0
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800a88c:	9310      	str	r3, [sp, #64]	; 0x40
    for(row = row_start ; row < row_end; row++) {
 800a88e:	9b07      	ldr	r3, [sp, #28]
 800a890:	1bdb      	subs	r3, r3, r7
 800a892:	930e      	str	r3, [sp, #56]	; 0x38
 800a894:	9b06      	ldr	r3, [sp, #24]
 800a896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a898:	4293      	cmp	r3, r2
 800a89a:	db41      	blt.n	800a920 <lv_draw_letter+0x270>
    if(fill_area.y1 != fill_area.y2) {
 800a89c:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 800a8a0:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d00f      	beq.n	800a8c8 <lv_draw_letter+0x218>
        fill_area.y2--;
 800a8a8:	3b01      	subs	r3, #1
        _lv_blend_fill(clip_area, &fill_area,
 800a8aa:	22ff      	movs	r2, #255	; 0xff
 800a8ac:	a913      	add	r1, sp, #76	; 0x4c
 800a8ae:	4628      	mov	r0, r5
        fill_area.y2--;
 800a8b0:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        _lv_blend_fill(clip_area, &fill_area,
 800a8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e9cd 3200 	strd	r3, r2, [sp]
 800a8be:	4643      	mov	r3, r8
 800a8c0:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800a8c4:	f7fe fd5c 	bl	8009380 <_lv_blend_fill>
    lv_mem_buf_release(mask_buf);
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	f00d f831 	bl	8017930 <lv_mem_buf_release>
}
 800a8ce:	b019      	add	sp, #100	; 0x64
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            bitmask_init  = 0xFF;
 800a8d4:	27ff      	movs	r7, #255	; 0xff
            break;       /*No opa table, pixel value will be used directly*/
 800a8d6:	2608      	movs	r6, #8
            shades = 256;
 800a8d8:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 800a8dc:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800a8de:	4f51      	ldr	r7, [pc, #324]	; (800aa24 <lv_draw_letter+0x374>)
 800a8e0:	e75b      	b.n	800a79a <lv_draw_letter+0xea>
            bitmask_init  = 0xF0;
 800a8e2:	27f0      	movs	r7, #240	; 0xf0
    if(bpp == 3) bpp = 4;
 800a8e4:	2604      	movs	r6, #4
            shades = 16;
 800a8e6:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 800a8e8:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800a8ea:	4f4f      	ldr	r7, [pc, #316]	; (800aa28 <lv_draw_letter+0x378>)
 800a8ec:	e755      	b.n	800a79a <lv_draw_letter+0xea>
            bitmask_init  = 0xC0;
 800a8ee:	27c0      	movs	r7, #192	; 0xc0
    if(bpp == 3) bpp = 4;
 800a8f0:	2602      	movs	r6, #2
            shades = 4;
 800a8f2:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
 800a8f4:	9708      	str	r7, [sp, #32]
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800a8f6:	4f4d      	ldr	r7, [pc, #308]	; (800aa2c <lv_draw_letter+0x37c>)
 800a8f8:	e74f      	b.n	800a79a <lv_draw_letter+0xea>
 800a8fa:	f8dd e014 	ldr.w	lr, [sp, #20]
 800a8fe:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800aa20 <lv_draw_letter+0x370>
 800a902:	4473      	add	r3, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a904:	f81e 7b01 	ldrb.w	r7, [lr], #1
 800a908:	2fff      	cmp	r7, #255	; 0xff
 800a90a:	bf16      	itet	ne
 800a90c:	fb17 f704 	smulbbne	r7, r7, r4
 800a910:	4627      	moveq	r7, r4
 800a912:	f3c7 2707 	ubfxne	r7, r7, #8, #8
            for(i = 0; i < shades; i++) {
 800a916:	4573      	cmp	r3, lr
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800a918:	f808 7b01 	strb.w	r7, [r8], #1
            for(i = 0; i < shades; i++) {
 800a91c:	d1f2      	bne.n	800a904 <lv_draw_letter+0x254>
 800a91e:	e74b      	b.n	800a7b8 <lv_draw_letter+0x108>
        bitmask = bitmask_init >> col_bit;
 800a920:	9b08      	ldr	r3, [sp, #32]
 800a922:	eb08 0b0a 	add.w	fp, r8, sl
        for(col = col_start; col < col_end; col++) {
 800a926:	46be      	mov	lr, r7
 800a928:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
        bitmask = bitmask_init >> col_bit;
 800a92c:	fa23 f204 	lsr.w	r2, r3, r4
        for(col = col_start; col < col_end; col++) {
 800a930:	4659      	mov	r1, fp
 800a932:	9b07      	ldr	r3, [sp, #28]
 800a934:	4573      	cmp	r3, lr
 800a936:	dc37      	bgt.n	800a9a8 <lv_draw_letter+0x2f8>
 800a938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a93a:	9a07      	ldr	r2, [sp, #28]
 800a93c:	4297      	cmp	r7, r2
 800a93e:	bfc8      	it	gt
 800a940:	2300      	movgt	r3, #0
 800a942:	4699      	mov	r9, r3
 800a944:	449a      	add	sl, r3
        if(other_mask_cnt) {
 800a946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a948:	b1b3      	cbz	r3, 800a978 <lv_draw_letter+0x2c8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a94a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800a94e:	4658      	mov	r0, fp
 800a950:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 800a954:	3301      	adds	r3, #1
 800a956:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
 800a95a:	1a5b      	subs	r3, r3, r1
 800a95c:	b21b      	sxth	r3, r3
 800a95e:	f001 fc55 	bl	800c20c <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800a962:	b948      	cbnz	r0, 800a978 <lv_draw_letter+0x2c8>
 800a964:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
                lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
 800a968:	4658      	mov	r0, fp
 800a96a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a96e:	3101      	adds	r1, #1
 800a970:	1ac9      	subs	r1, r1, r3
 800a972:	b209      	sxth	r1, r1
 800a974:	f00d f9ce 	bl	8017d14 <lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800a978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a97a:	4499      	add	r9, r3
 800a97c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a97e:	4499      	add	r9, r3
 800a980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a982:	454b      	cmp	r3, r9
 800a984:	d92e      	bls.n	800a9e4 <lv_draw_letter+0x334>
            fill_area.y2 ++;
 800a986:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800a98a:	3301      	adds	r3, #1
 800a98c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        col_bit += col_bit_row_ofs;
 800a990:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a992:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
        col_bit = col_bit & 0x7;
 800a99a:	f004 0407 	and.w	r4, r4, #7
        map_p += (col_bit >> 3);
 800a99e:	9309      	str	r3, [sp, #36]	; 0x24
    for(row = row_start ; row < row_end; row++) {
 800a9a0:	9b06      	ldr	r3, [sp, #24]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	9306      	str	r3, [sp, #24]
 800a9a6:	e775      	b.n	800a894 <lv_draw_letter+0x1e4>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800a9aa:	f10e 0e01 	add.w	lr, lr, #1
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800a9ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	eba0 0c04 	sub.w	ip, r0, r4
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
 800a9be:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800a9c2:	bf1c      	itt	ne
 800a9c4:	9805      	ldrne	r0, [sp, #20]
 800a9c6:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
 800a9c8:	f801 3c01 	strb.w	r3, [r1, #-1]
            if(col_bit < col_bit_max) {
 800a9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ce:	42a3      	cmp	r3, r4
                map_p++;
 800a9d0:	bf93      	iteet	ls
 800a9d2:	9b09      	ldrls	r3, [sp, #36]	; 0x24
                col_bit += bpp;
 800a9d4:	19a4      	addhi	r4, r4, r6
                bitmask = bitmask >> bpp;
 800a9d6:	40f2      	lsrhi	r2, r6
                bitmask = bitmask_init;
 800a9d8:	9a08      	ldrls	r2, [sp, #32]
                map_p++;
 800a9da:	bf9e      	ittt	ls
 800a9dc:	3301      	addls	r3, #1
                col_bit = 0;
 800a9de:	2400      	movls	r4, #0
                map_p++;
 800a9e0:	9309      	strls	r3, [sp, #36]	; 0x24
        for(col = col_start; col < col_end; col++) {
 800a9e2:	e7a6      	b.n	800a932 <lv_draw_letter+0x282>
            _lv_blend_fill(clip_area, &fill_area,
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e6:	21ff      	movs	r1, #255	; 0xff
 800a9e8:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	9302      	str	r3, [sp, #8]
 800a9f0:	2302      	movs	r3, #2
            mask_p = 0;
 800a9f2:	f04f 0a00 	mov.w	sl, #0
            _lv_blend_fill(clip_area, &fill_area,
 800a9f6:	e9cd 3100 	strd	r3, r1, [sp]
 800a9fa:	4643      	mov	r3, r8
 800a9fc:	a913      	add	r1, sp, #76	; 0x4c
 800a9fe:	f7fe fcbf 	bl	8009380 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800aa02:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800aa06:	3301      	adds	r3, #1
 800aa08:	b21b      	sxth	r3, r3
 800aa0a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area.y2 = fill_area.y1;
 800aa0e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            mask_p = 0;
 800aa12:	e7bd      	b.n	800a990 <lv_draw_letter+0x2e0>
 800aa14:	0802590b 	.word	0x0802590b
 800aa18:	20002ab4 	.word	0x20002ab4
 800aa1c:	20002ab0 	.word	0x20002ab0
 800aa20:	200029b0 	.word	0x200029b0
 800aa24:	08025921 	.word	0x08025921
 800aa28:	08025911 	.word	0x08025911
 800aa2c:	0802590d 	.word	0x0802590d

0800aa30 <lv_draw_label>:
{
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	469b      	mov	fp, r3
 800aa36:	2300      	movs	r3, #0
 800aa38:	4605      	mov	r5, r0
 800aa3a:	468a      	mov	sl, r1
 800aa3c:	4614      	mov	r4, r2
 800aa3e:	ed2d 8b02 	vpush	{d8}
 800aa42:	b0ab      	sub	sp, #172	; 0xac
 800aa44:	930b      	str	r3, [sp, #44]	; 0x2c
    if(dsc->opa <= LV_OPA_MIN) return;
 800aa46:	7e93      	ldrb	r3, [r2, #26]
{
 800aa48:	f8dd 90d8 	ldr.w	r9, [sp, #216]	; 0xd8
    if(dsc->opa <= LV_OPA_MIN) return;
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	f240 80a7 	bls.w	800aba0 <lv_draw_label+0x170>
    if (txt == NULL || txt[0] == '\0')
 800aa52:	f1bb 0f00 	cmp.w	fp, #0
 800aa56:	f000 80a3 	beq.w	800aba0 <lv_draw_label+0x170>
 800aa5a:	f89b 3000 	ldrb.w	r3, [fp]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 809e 	beq.w	800aba0 <lv_draw_label+0x170>
    const lv_font_t * font = dsc->font;
 800aa64:	f8d2 8000 	ldr.w	r8, [r2]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
 800aa68:	460a      	mov	r2, r1
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	a816      	add	r0, sp, #88	; 0x58
 800aa6e:	f00c fb02 	bl	8017076 <_lv_area_intersect>
    if(!clip_ok) return;
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f000 8094 	beq.w	800aba0 <lv_draw_label+0x170>
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800aa78:	7f23      	ldrb	r3, [r4, #28]
 800aa7a:	0799      	lsls	r1, r3, #30
 800aa7c:	f100 8095 	bmi.w	800abaa <lv_draw_label+0x17a>
 800aa80:	88ab      	ldrh	r3, [r5, #4]
 800aa82:	882a      	ldrh	r2, [r5, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 800aa88:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 800aa8a:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
    pos.y = coords->y1;
 800aa8e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    int32_t line_height_font = lv_font_get_line_height(font);
 800aa92:	9206      	str	r2, [sp, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 800aa94:	9906      	ldr	r1, [sp, #24]
 800aa96:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800aa9a:	440a      	add	r2, r1
    y_ofs = dsc->ofs_y;
 800aa9c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    int32_t line_height = line_height_font + dsc->line_space;
 800aaa0:	9208      	str	r2, [sp, #32]
    pos.x = coords->x1;
 800aaa2:	882a      	ldrh	r2, [r5, #0]
 800aaa4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    x_ofs = dsc->ofs_x;
 800aaa8:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800aaac:	920e      	str	r2, [sp, #56]	; 0x38
    pos.y += y_ofs;
 800aaae:	1842      	adds	r2, r0, r1
 800aab0:	b292      	uxth	r2, r2
 800aab2:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800aab6:	f1b9 0f00 	cmp.w	r9, #0
 800aaba:	f040 8087 	bne.w	800abcc <lv_draw_label+0x19c>
    uint32_t line_start     = 0;
 800aabe:	2600      	movs	r6, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800aac0:	b21b      	sxth	r3, r3
 800aac2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800aac6:	4641      	mov	r1, r8
 800aac8:	eb0b 0006 	add.w	r0, fp, r6
 800aacc:	ee08 3a10 	vmov	s16, r3
 800aad0:	7f23      	ldrb	r3, [r4, #28]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	ee18 3a10 	vmov	r3, s16
 800aad8:	f00e fca2 	bl	8019420 <_lv_txt_get_next_line>
 800aadc:	1987      	adds	r7, r0, r6
    while(pos.y + line_height_font < mask->y1) {
 800aade:	9a06      	ldr	r2, [sp, #24]
 800aae0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 800aae4:	4413      	add	r3, r2
 800aae6:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 800aaea:	4293      	cmp	r3, r2
 800aaec:	f2c0 808f 	blt.w	800ac0e <lv_draw_label+0x1de>
    if(dsc->align == LV_TEXT_ALIGN_CENTER) {
 800aaf0:	7f63      	ldrb	r3, [r4, #29]
 800aaf2:	eb0b 0006 	add.w	r0, fp, r6
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	f040 80b4 	bne.w	800ac68 <lv_draw_label+0x238>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ab00:	7f23      	ldrb	r3, [r4, #28]
 800ab02:	4642      	mov	r2, r8
 800ab04:	1bb9      	subs	r1, r7, r6
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ab0c:	f00e fdd0 	bl	80196b0 <lv_txt_get_width>
 800ab10:	88ab      	ldrh	r3, [r5, #4]
 800ab12:	882a      	ldrh	r2, [r5, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ab18:	b21b      	sxth	r3, r3
 800ab1a:	1a18      	subs	r0, r3, r0
 800ab1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ab20:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ab24:	eb03 0060 	add.w	r0, r3, r0, asr #1
        pos.x += lv_area_get_width(coords) - line_width;
 800ab28:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_opa_t opa = dsc->opa;
 800ab2c:	7ea3      	ldrb	r3, [r4, #26]
 800ab2e:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t sel_start = dsc->sel_start;
 800ab30:	6863      	ldr	r3, [r4, #4]
 800ab32:	9305      	str	r3, [sp, #20]
    uint32_t sel_end = dsc->sel_end;
 800ab34:	68a3      	ldr	r3, [r4, #8]
 800ab36:	9306      	str	r3, [sp, #24]
    if(sel_start > sel_end) {
 800ab38:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	bf88      	it	hi
 800ab40:	e9cd 2305 	strdhi	r2, r3, [sp, #20]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800ab44:	7f63      	ldrb	r3, [r4, #29]
 800ab46:	f013 0f0c 	tst.w	r3, #12
 800ab4a:	d017      	beq.n	800ab7c <lv_draw_label+0x14c>
        lv_draw_line_dsc_init(&line_dsc);
 800ab4c:	a81a      	add	r0, sp, #104	; 0x68
 800ab4e:	f000 fa11 	bl	800af74 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800ab52:	89a3      	ldrh	r3, [r4, #12]
        line_dsc.blend_mode = dsc->blend_mode;
 800ab54:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
        line_dsc.color = dsc->color;
 800ab58:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800ab5c:	f998 300e 	ldrsb.w	r3, [r8, #14]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bf08      	it	eq
 800ab64:	2301      	moveq	r3, #1
 800ab66:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        line_dsc.opa = dsc->opa;
 800ab6a:	7ea3      	ldrb	r3, [r4, #26]
 800ab6c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        line_dsc.blend_mode = dsc->blend_mode;
 800ab70:	7f63      	ldrb	r3, [r4, #29]
 800ab72:	095b      	lsrs	r3, r3, #5
 800ab74:	f363 0201 	bfi	r2, r3, #0, #2
 800ab78:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800ab7c:	a81d      	add	r0, sp, #116	; 0x74
 800ab7e:	f002 f833 	bl	800cbe8 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800ab82:	8a23      	ldrh	r3, [r4, #16]
 800ab84:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    int32_t pos_x_start = pos.x;
 800ab88:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800ab8c:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t par_start = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	930a      	str	r3, [sp, #40]	; 0x28
    while(txt[line_start] != '\0') {
 800ab92:	eb0b 0306 	add.w	r3, fp, r6
 800ab96:	930d      	str	r3, [sp, #52]	; 0x34
 800ab98:	f81b 3006 	ldrb.w	r3, [fp, r6]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d178      	bne.n	800ac92 <lv_draw_label+0x262>
}
 800aba0:	b02b      	add	sp, #172	; 0xac
 800aba2:	ecbd 8b02 	vpop	{d8}
 800aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	4659      	mov	r1, fp
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	a81d      	add	r0, sp, #116	; 0x74
 800abb8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800abc2:	f00e fdb8 	bl	8019736 <lv_txt_get_size>
        w = p.x;
 800abc6:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 800abca:	e75e      	b.n	800aa8a <lv_draw_label+0x5a>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800abcc:	2900      	cmp	r1, #0
 800abce:	f47f af76 	bne.w	800aabe <lv_draw_label+0x8e>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	f6bf af73 	bge.w	800aabe <lv_draw_label+0x8e>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800abd8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800abdc:	1a09      	subs	r1, r1, r0
 800abde:	9808      	ldr	r0, [sp, #32]
 800abe0:	2900      	cmp	r1, #0
 800abe2:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 800abe6:	bfb8      	it	lt
 800abe8:	4249      	neglt	r1, r1
 800abea:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
            hint->line_start = -1;
 800abee:	bfc4      	itt	gt
 800abf0:	f04f 31ff 	movgt.w	r1, #4294967295
 800abf4:	f8c9 1000 	strgt.w	r1, [r9]
        last_line_start = hint->line_start;
 800abf8:	f8d9 6000 	ldr.w	r6, [r9]
    if(hint && last_line_start >= 0) {
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	f6ff af5e 	blt.w	800aabe <lv_draw_label+0x8e>
        pos.y += hint->y;
 800ac02:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac06:	440a      	add	r2, r1
 800ac08:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800ac0c:	e758      	b.n	800aac0 <lv_draw_label+0x90>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ac0e:	eb0b 0307 	add.w	r3, fp, r7
 800ac12:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800ac16:	4641      	mov	r1, r8
 800ac18:	9305      	str	r3, [sp, #20]
 800ac1a:	7f23      	ldrb	r3, [r4, #28]
 800ac1c:	9805      	ldr	r0, [sp, #20]
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	ee18 3a10 	vmov	r3, s16
 800ac24:	f00e fbfc 	bl	8019420 <_lv_txt_get_next_line>
        pos.y += line_height;
 800ac28:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800ac2c:	9a08      	ldr	r2, [sp, #32]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ac2e:	4438      	add	r0, r7
        pos.y += line_height;
 800ac30:	4413      	add	r3, r2
 800ac32:	b21b      	sxth	r3, r3
 800ac34:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800ac38:	f1b9 0f00 	cmp.w	r9, #0
 800ac3c:	d00d      	beq.n	800ac5a <lv_draw_label+0x22a>
 800ac3e:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800ac42:	db0a      	blt.n	800ac5a <lv_draw_label+0x22a>
 800ac44:	f8d9 2000 	ldr.w	r2, [r9]
 800ac48:	2a00      	cmp	r2, #0
            hint->y          = pos.y - coords->y1;
 800ac4a:	bfbf      	itttt	lt
 800ac4c:	f9b5 2002 	ldrshlt.w	r2, [r5, #2]
            hint->line_start = line_start;
 800ac50:	f8c9 7000 	strlt.w	r7, [r9]
            hint->y          = pos.y - coords->y1;
 800ac54:	1a9b      	sublt	r3, r3, r2
            hint->coord_y    = coords->y1;
 800ac56:	e9c9 3201 	strdlt	r3, r2, [r9, #4]
        if(txt[line_start] == '\0') return;
 800ac5a:	9b05      	ldr	r3, [sp, #20]
 800ac5c:	463e      	mov	r6, r7
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d09d      	beq.n	800aba0 <lv_draw_label+0x170>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ac64:	4607      	mov	r7, r0
 800ac66:	e73a      	b.n	800aade <lv_draw_label+0xae>
    else if(dsc->align == LV_TEXT_ALIGN_RIGHT) {
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	f47f af5f 	bne.w	800ab2c <lv_draw_label+0xfc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ac6e:	7f23      	ldrb	r3, [r4, #28]
 800ac70:	4642      	mov	r2, r8
 800ac72:	1bb9      	subs	r1, r7, r6
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ac7a:	f00e fd19 	bl	80196b0 <lv_txt_get_width>
 800ac7e:	88ab      	ldrh	r3, [r5, #4]
 800ac80:	882a      	ldrh	r2, [r5, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800ac86:	b21b      	sxth	r3, r3
 800ac88:	1a18      	subs	r0, r3, r0
 800ac8a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ac8e:	4418      	add	r0, r3
 800ac90:	e74a      	b.n	800ab28 <lv_draw_label+0xf8>
        pos.x += x_ofs;
 800ac92:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ac96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac98:	4413      	add	r3, r2
 800ac9a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        i         = 0;
 800ac9e:	2300      	movs	r3, #0
        cmd_state = CMD_STATE_WAIT;
 800aca0:	4699      	mov	r9, r3
        i         = 0;
 800aca2:	9313      	str	r3, [sp, #76]	; 0x4c
        while(i < line_end - line_start) {
 800aca4:	1bbb      	subs	r3, r7, r6
 800aca6:	9310      	str	r3, [sp, #64]	; 0x40
 800aca8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800acaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acac:	428b      	cmp	r3, r1
 800acae:	f200 8082 	bhi.w	800adb6 <lv_draw_label+0x386>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800acb2:	7f63      	ldrb	r3, [r4, #29]
 800acb4:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800acb8:	079a      	lsls	r2, r3, #30
 800acba:	d520      	bpl.n	800acfe <lv_draw_label+0x2ce>
            p1.x = pos_x_start;
 800acbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800acbe:	a918      	add	r1, sp, #96	; 0x60
 800acc0:	a815      	add	r0, sp, #84	; 0x54
            p1.x = pos_x_start;
 800acc2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800acc6:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800acca:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 800acce:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800acd2:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800acdc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800ace0:	eb03 0362 	add.w	r3, r3, r2, asr #1
            p2.x = pos.x;
 800ace4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800ace8:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800acea:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800acee:	4652      	mov	r2, sl
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800acf0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.y = p1.y;
 800acf4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800acf8:	ab1a      	add	r3, sp, #104	; 0x68
 800acfa:	f000 f947 	bl	800af8c <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800acfe:	7f63      	ldrb	r3, [r4, #29]
 800ad00:	075b      	lsls	r3, r3, #29
 800ad02:	d51b      	bpl.n	800ad3c <lv_draw_label+0x30c>
            p1.x = pos_x_start;
 800ad04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ad06:	a815      	add	r0, sp, #84	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ad08:	6822      	ldr	r2, [r4, #0]
            p1.x = pos_x_start;
 800ad0a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ad0e:	8911      	ldrh	r1, [r2, #8]
 800ad10:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800ad14:	8952      	ldrh	r2, [r2, #10]
 800ad16:	440b      	add	r3, r1
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ad18:	a918      	add	r1, sp, #96	; 0x60
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	f998 200d 	ldrsb.w	r2, [r8, #13]
 800ad20:	1a9b      	subs	r3, r3, r2
            p2.x = pos.x;
 800ad22:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ad26:	b21b      	sxth	r3, r3
            p2.x = pos.x;
 800ad28:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ad2c:	4652      	mov	r2, sl
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800ad2e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            p2.y = p1.y;
 800ad32:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
 800ad36:	ab1a      	add	r3, sp, #104	; 0x68
 800ad38:	f000 f928 	bl	800af8c <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ad3c:	7f23      	ldrb	r3, [r4, #28]
 800ad3e:	eb0b 0607 	add.w	r6, fp, r7
 800ad42:	4641      	mov	r1, r8
 800ad44:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	ee18 3a10 	vmov	r3, s16
 800ad50:	f00e fb66 	bl	8019420 <_lv_txt_get_next_line>
        pos.x = coords->x1;
 800ad54:	882b      	ldrh	r3, [r5, #0]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800ad56:	4601      	mov	r1, r0
 800ad58:	eb07 0900 	add.w	r9, r7, r0
        pos.x = coords->x1;
 800ad5c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        if(dsc->align == LV_TEXT_ALIGN_CENTER) {
 800ad60:	7f63      	ldrb	r3, [r4, #29]
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	f040 80ed 	bne.w	800af46 <lv_draw_label+0x516>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ad6c:	7f23      	ldrb	r3, [r4, #28]
 800ad6e:	4642      	mov	r2, r8
 800ad70:	4630      	mov	r0, r6
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ad78:	f00e fc9a 	bl	80196b0 <lv_txt_get_width>
 800ad7c:	88ab      	ldrh	r3, [r5, #4]
 800ad7e:	882a      	ldrh	r2, [r5, #0]
 800ad80:	3301      	adds	r3, #1
 800ad82:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ad84:	b21b      	sxth	r3, r3
 800ad86:	1a18      	subs	r0, r3, r0
 800ad88:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ad8c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ad90:	eb03 0060 	add.w	r0, r3, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
 800ad94:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
        pos.y += line_height;
 800ad98:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
        line_start = line_end;
 800ad9c:	463e      	mov	r6, r7
        pos.y += line_height;
 800ad9e:	9a08      	ldr	r2, [sp, #32]
 800ada0:	4413      	add	r3, r2
        if(pos.y > mask->y2) return;
 800ada2:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        pos.y += line_height;
 800ada6:	b21b      	sxth	r3, r3
        if(pos.y > mask->y2) return;
 800ada8:	429a      	cmp	r2, r3
        pos.y += line_height;
 800adaa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        if(pos.y > mask->y2) return;
 800adae:	f6ff aef7 	blt.w	800aba0 <lv_draw_label+0x170>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
 800adb2:	464f      	mov	r7, r9
 800adb4:	e6ed      	b.n	800ab92 <lv_draw_label+0x162>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800adb6:	9b05      	ldr	r3, [sp, #20]
 800adb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d01c      	beq.n	800adfa <lv_draw_label+0x3ca>
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d019      	beq.n	800adfa <lv_draw_label+0x3ca>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800adc6:	4b6a      	ldr	r3, [pc, #424]	; (800af70 <lv_draw_label+0x540>)
 800adc8:	4431      	add	r1, r6
 800adca:	4658      	mov	r0, fp
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4798      	blx	r3
 800add0:	9007      	str	r0, [sp, #28]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800add2:	ab13      	add	r3, sp, #76	; 0x4c
 800add4:	aa15      	add	r2, sp, #84	; 0x54
 800add6:	a914      	add	r1, sp, #80	; 0x50
 800add8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adda:	f00e fc4f 	bl	801967c <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800adde:	7f23      	ldrb	r3, [r4, #28]
 800ade0:	f013 0301 	ands.w	r3, r3, #1
 800ade4:	d05c      	beq.n	800aea0 <lv_draw_label+0x470>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800ade6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ade8:	2a23      	cmp	r2, #35	; 0x23
 800adea:	d112      	bne.n	800ae12 <lv_draw_label+0x3e2>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800adec:	f1b9 0f00 	cmp.w	r9, #0
 800adf0:	d106      	bne.n	800ae00 <lv_draw_label+0x3d0>
                        par_start = i;
 800adf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_PAR;
 800adf4:	4699      	mov	r9, r3
                        par_start = i;
 800adf6:	920a      	str	r2, [sp, #40]	; 0x28
                        continue;
 800adf8:	e756      	b.n	800aca8 <lv_draw_label+0x278>
            uint32_t logical_char_pos = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	e7e8      	b.n	800add2 <lv_draw_label+0x3a2>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800ae00:	f1b9 0f01 	cmp.w	r9, #1
 800ae04:	d052      	beq.n	800aeac <lv_draw_label+0x47c>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800ae06:	f1b9 0f02 	cmp.w	r9, #2
 800ae0a:	d151      	bne.n	800aeb0 <lv_draw_label+0x480>
                        cmd_state = CMD_STATE_WAIT;
 800ae0c:	f04f 0900 	mov.w	r9, #0
 800ae10:	e74a      	b.n	800aca8 <lv_draw_label+0x278>
                if(cmd_state == CMD_STATE_PAR) {
 800ae12:	f1b9 0f01 	cmp.w	r9, #1
 800ae16:	d143      	bne.n	800aea0 <lv_draw_label+0x470>
                    if(letter == ' ') {
 800ae18:	2a20      	cmp	r2, #32
 800ae1a:	f47f af45 	bne.w	800aca8 <lv_draw_label+0x278>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800ae1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae22:	1a9b      	subs	r3, r3, r2
 800ae24:	2b07      	cmp	r3, #7
 800ae26:	d139      	bne.n	800ae9c <lv_draw_label+0x46c>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800ae28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 800ae2a:	a918      	add	r1, sp, #96	; 0x60
 800ae2c:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800ae2e:	1e5a      	subs	r2, r3, #1
 800ae30:	3305      	adds	r3, #5
        *d8 = *s8;
 800ae32:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    while(len) {
 800ae36:	4293      	cmp	r3, r2
        *d8 = *s8;
 800ae38:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
 800ae3c:	d1f9      	bne.n	800ae32 <lv_draw_label+0x402>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ae3e:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800ae42:	f7ff fc0b 	bl	800a65c <hex_char_to_num>
 800ae46:	4602      	mov	r2, r0
 800ae48:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 800ae4c:	f7ff fc06 	bl	800a65c <hex_char_to_num>
 800ae50:	eb00 1202 	add.w	r2, r0, r2, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800ae54:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
 800ae58:	f7ff fc00 	bl	800a65c <hex_char_to_num>
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
 800ae62:	f7ff fbfb 	bl	800a65c <hex_char_to_num>
 800ae66:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800ae6a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800ae6e:	f7ff fbf5 	bl	800a65c <hex_char_to_num>
 800ae72:	4681      	mov	r9, r0
 800ae74:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
 800ae78:	f7ff fbf0 	bl	800a65c <hex_char_to_num>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800ae7c:	f3c1 0185 	ubfx	r1, r1, #2, #6
 800ae80:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800ae84:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800ae88:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800ae8c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800ae90:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ae94:	f04f 0902 	mov.w	r9, #2
                            recolor.full = dsc->color.full;
 800ae98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae9a:	e705      	b.n	800aca8 <lv_draw_label+0x278>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	e7f9      	b.n	800ae94 <lv_draw_label+0x464>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800aea0:	f1b9 0f02 	cmp.w	r9, #2
 800aea4:	d104      	bne.n	800aeb0 <lv_draw_label+0x480>
 800aea6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800aeaa:	e002      	b.n	800aeb2 <lv_draw_label+0x482>
                        cmd_state = CMD_STATE_WAIT;
 800aeac:	f04f 0900 	mov.w	r9, #0
            lv_color_t color = dsc->color;
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	9311      	str	r3, [sp, #68]	; 0x44
 800aeb6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800aeba:	f00b fbf3 	bl	80166a4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	f64f 71ff 	movw	r1, #65535	; 0xffff
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800aec4:	9009      	str	r0, [sp, #36]	; 0x24
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800aec6:	428b      	cmp	r3, r1
 800aec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeca:	d022      	beq.n	800af12 <lv_draw_label+0x4e2>
 800aecc:	9a06      	ldr	r2, [sp, #24]
 800aece:	428a      	cmp	r2, r1
 800aed0:	d01f      	beq.n	800af12 <lv_draw_label+0x4e2>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800aed2:	9a05      	ldr	r2, [sp, #20]
 800aed4:	9907      	ldr	r1, [sp, #28]
 800aed6:	428a      	cmp	r2, r1
 800aed8:	d81b      	bhi.n	800af12 <lv_draw_label+0x4e2>
 800aeda:	9a06      	ldr	r2, [sp, #24]
 800aedc:	428a      	cmp	r2, r1
 800aede:	d918      	bls.n	800af12 <lv_draw_label+0x4e2>
                    sel_coords.x1 = pos.x;
 800aee0:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800aee4:	8aa1      	ldrh	r1, [r4, #20]
                    sel_coords.x1 = pos.x;
 800aee6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800aeea:	3b01      	subs	r3, #1
                    sel_coords.y1 = pos.y;
 800aeec:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800aef0:	440b      	add	r3, r1
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800aef2:	4651      	mov	r1, sl
                    sel_coords.y1 = pos.y;
 800aef4:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.y2 = pos.y + line_height - 1;
 800aef8:	3a01      	subs	r2, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800aefa:	4403      	add	r3, r0
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800aefc:	a818      	add	r0, sp, #96	; 0x60
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800aefe:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	441a      	add	r2, r3
 800af06:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
 800af0a:	aa1d      	add	r2, sp, #116	; 0x74
 800af0c:	f001 fe8e 	bl	800cc2c <lv_draw_rect>
                    color = dsc->sel_color;
 800af10:	89e3      	ldrh	r3, [r4, #14]
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
 800af12:	7f62      	ldrb	r2, [r4, #29]
 800af14:	4651      	mov	r1, sl
 800af16:	f8ad 3000 	strh.w	r3, [sp]
 800af1a:	a812      	add	r0, sp, #72	; 0x48
 800af1c:	0952      	lsrs	r2, r2, #5
 800af1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af20:	9202      	str	r2, [sp, #8]
 800af22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af24:	9201      	str	r2, [sp, #4]
 800af26:	4642      	mov	r2, r8
 800af28:	f7ff fbc2 	bl	800a6b0 <lv_draw_letter>
            if(letter_w > 0) {
 800af2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f43f aeba 	beq.w	800aca8 <lv_draw_label+0x278>
                pos.x += letter_w + dsc->letter_space;
 800af34:	f8bd 0048 	ldrh.w	r0, [sp, #72]	; 0x48
 800af38:	8aa3      	ldrh	r3, [r4, #20]
 800af3a:	4418      	add	r0, r3
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	4403      	add	r3, r0
 800af40:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 800af44:	e6b0      	b.n	800aca8 <lv_draw_label+0x278>
        else if(dsc->align == LV_TEXT_ALIGN_RIGHT) {
 800af46:	2b03      	cmp	r3, #3
 800af48:	f47f af26 	bne.w	800ad98 <lv_draw_label+0x368>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800af4c:	7f23      	ldrb	r3, [r4, #28]
 800af4e:	4642      	mov	r2, r8
 800af50:	4630      	mov	r0, r6
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800af58:	f00e fbaa 	bl	80196b0 <lv_txt_get_width>
 800af5c:	88ab      	ldrh	r3, [r5, #4]
 800af5e:	882a      	ldrh	r2, [r5, #0]
 800af60:	3301      	adds	r3, #1
 800af62:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800af64:	b21b      	sxth	r3, r3
 800af66:	1a18      	subs	r0, r3, r0
 800af68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800af6c:	4418      	add	r0, r3
 800af6e:	e711      	b.n	800ad94 <lv_draw_label+0x364>
 800af70:	2000003c 	.word	0x2000003c

0800af74 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800af74:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800af76:	210a      	movs	r1, #10
{
 800af78:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800af7a:	f00c fecb 	bl	8017d14 <lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 800af7e:	23ff      	movs	r3, #255	; 0xff
 800af80:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800af82:	2300      	movs	r3, #0
 800af84:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 800af86:	2301      	movs	r3, #1
 800af88:	8063      	strh	r3, [r4, #2]
}
 800af8a:	bd10      	pop	{r4, pc}

0800af8c <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
 800af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	469b      	mov	fp, r3
    if(dsc->width == 0) return;
 800af92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
 800af96:	ed2d 8b04 	vpush	{d8-d9}
 800af9a:	b0bf      	sub	sp, #252	; 0xfc
 800af9c:	ee08 2a10 	vmov	s16, r2
 800afa0:	e9cd 0105 	strd	r0, r1, [sp, #20]
    if(dsc->width == 0) return;
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 80dd 	beq.w	800b164 <lv_draw_line+0x1d8>
    if(dsc->opa <= LV_OPA_MIN) return;
 800afaa:	f89b 2008 	ldrb.w	r2, [fp, #8]
 800afae:	2a02      	cmp	r2, #2
 800afb0:	f240 80d8 	bls.w	800b164 <lv_draw_line+0x1d8>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800afb4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800afb8:	f9b1 4000 	ldrsh.w	r4, [r1]
 800afbc:	9906      	ldr	r1, [sp, #24]
 800afbe:	42a2      	cmp	r2, r4
 800afc0:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 800afc4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800afc8:	d102      	bne.n	800afd0 <lv_draw_line+0x44>
 800afca:	4288      	cmp	r0, r1
 800afcc:	f000 80ca 	beq.w	800b164 <lv_draw_line+0x1d8>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800afd0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800afd4:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800afd8:	42a2      	cmp	r2, r4
 800afda:	bfd4      	ite	le
 800afdc:	ebc3 0502 	rsble	r5, r3, r2
 800afe0:	ebc3 0504 	rsbgt	r5, r3, r4
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800afe4:	42a2      	cmp	r2, r4
 800afe6:	bfac      	ite	ge
 800afe8:	189a      	addge	r2, r3, r2
 800afea:	191a      	addlt	r2, r3, r4
 800afec:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800aff0:	4288      	cmp	r0, r1
 800aff2:	bfd4      	ite	le
 800aff4:	ebc3 0200 	rsble	r2, r3, r0
 800aff8:	ebc3 0201 	rsbgt	r2, r3, r1
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800affc:	4288      	cmp	r0, r1
 800affe:	bfac      	ite	ge
 800b000:	181b      	addge	r3, r3, r0
 800b002:	185b      	addlt	r3, r3, r1

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800b004:	a90a      	add	r1, sp, #40	; 0x28
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800b006:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800b00a:	ee18 2a10 	vmov	r2, s16
 800b00e:	4608      	mov	r0, r1
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800b010:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800b014:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
 800b018:	f00c f82d 	bl	8017076 <_lv_area_intersect>
    if(!is_common) return;
 800b01c:	2800      	cmp	r0, #0
 800b01e:	f000 80a1 	beq.w	800b164 <lv_draw_line+0x1d8>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
 800b022:	9b05      	ldr	r3, [sp, #20]
 800b024:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
 800b028:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800b02c:	9b06      	ldr	r3, [sp, #24]
 800b02e:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800b032:	45c1      	cmp	r9, r8
 800b034:	f040 813b 	bne.w	800b2ae <lv_draw_line+0x322>
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;

    int32_t w = dsc->width - 1;
 800b038:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b03a:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    lv_opa_t opa = dsc->opa;
 800b03e:	f89b 6008 	ldrb.w	r6, [fp, #8]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b042:	f004 0301 	and.w	r3, r4, #1
    int32_t w_half0 = w >> 1;
 800b046:	1067      	asrs	r7, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b048:	eb03 0464 	add.w	r4, r3, r4, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b04c:	b125      	cbz	r5, 800b058 <lv_draw_line+0xcc>
 800b04e:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
 800b052:	3d00      	subs	r5, #0
 800b054:	bf18      	it	ne
 800b056:	2501      	movne	r5, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b058:	f001 f922 	bl	800c2a0 <lv_draw_mask_get_cnt>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f040 8086 	bne.w	800b16e <lv_draw_line+0x1e2>
    else if(dashed) simple_mode = false;
 800b062:	f085 0201 	eor.w	r2, r5, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MIN(point1->x, point2->x);
 800b066:	9b06      	ldr	r3, [sp, #24]
 800b068:	9905      	ldr	r1, [sp, #20]
 800b06a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b06e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b072:	4618      	mov	r0, r3
 800b074:	428b      	cmp	r3, r1
 800b076:	bfa8      	it	ge
 800b078:	4608      	movge	r0, r1
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800b07a:	428b      	cmp	r3, r1
 800b07c:	bfb8      	it	lt
 800b07e:	460b      	movlt	r3, r1
    draw_area.x1 = LV_MIN(point1->x, point2->x);
 800b080:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
    draw_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800b084:	3b01      	subs	r3, #1
 800b086:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = point1->y - w_half1;
 800b08a:	9b05      	ldr	r3, [sp, #20]
 800b08c:	885b      	ldrh	r3, [r3, #2]
 800b08e:	1b1c      	subs	r4, r3, r4
    draw_area.y2 = point1->y + w_half0;
 800b090:	441f      	add	r7, r3
    draw_area.y1 = point1->y - w_half1;
 800b092:	f8ad 409a 	strh.w	r4, [sp, #154]	; 0x9a
    draw_area.y2 = point1->y + w_half0;
 800b096:	f8ad 709e 	strh.w	r7, [sp, #158]	; 0x9e

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800b09a:	2a00      	cmp	r2, #0
 800b09c:	d069      	beq.n	800b172 <lv_draw_line+0x1e6>

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
 800b09e:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
 800b0a2:	a926      	add	r1, sp, #152	; 0x98
 800b0a4:	f8bb 2000 	ldrh.w	r2, [fp]
 800b0a8:	a80a      	add	r0, sp, #40	; 0x28
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f7fe f962 	bl	8009380 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
 800b0bc:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800b0c0:	f013 0f0c 	tst.w	r3, #12
 800b0c4:	d04e      	beq.n	800b164 <lv_draw_line+0x1d8>
        lv_draw_rect_dsc_init(&cir_dsc);
 800b0c6:	a831      	add	r0, sp, #196	; 0xc4
 800b0c8:	f001 fd8e 	bl	800cbe8 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800b0cc:	f8bb 3000 	ldrh.w	r3, [fp]
 800b0d0:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800b0d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b0d8:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        cir_dsc.bg_opa = dsc->opa;
 800b0dc:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b0e0:	f88d 30ce 	strb.w	r3, [sp, #206]	; 0xce
        int32_t r = (dsc->width >> 1);
 800b0e4:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 800b0e8:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800b0ea:	43db      	mvns	r3, r3
 800b0ec:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
 800b0f0:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800b0f4:	075a      	lsls	r2, r3, #29
 800b0f6:	d518      	bpl.n	800b12a <lv_draw_line+0x19e>
            cir_area.x1 = point1->x - r;
 800b0f8:	9b05      	ldr	r3, [sp, #20]
 800b0fa:	881a      	ldrh	r2, [r3, #0]
 800b0fc:	b2a3      	uxth	r3, r4
 800b0fe:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point1->x + r - r_corr;
 800b100:	441a      	add	r2, r3
            cir_area.x1 = point1->x - r;
 800b102:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point1->x + r - r_corr;
 800b106:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point1->y - r;
 800b108:	9905      	ldr	r1, [sp, #20]
            cir_area.x2 = point1->x + r - r_corr;
 800b10a:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b10e:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point1->y - r;
 800b110:	8849      	ldrh	r1, [r1, #2]
 800b112:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point1->y + r - r_corr ;
 800b114:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b116:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point1->y + r - r_corr ;
 800b11a:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point1->y - r;
 800b11c:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b120:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point1->y + r - r_corr ;
 800b122:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b126:	f001 fd81 	bl	800cc2c <lv_draw_rect>
        if(dsc->round_end) {
 800b12a:	f89b 3009 	ldrb.w	r3, [fp, #9]
 800b12e:	071b      	lsls	r3, r3, #28
 800b130:	d518      	bpl.n	800b164 <lv_draw_line+0x1d8>
            cir_area.x1 = point2->x - r;
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	881a      	ldrh	r2, [r3, #0]
 800b136:	b2a3      	uxth	r3, r4
 800b138:	1ad1      	subs	r1, r2, r3
            cir_area.x2 = point2->x + r - r_corr;
 800b13a:	441a      	add	r2, r3
            cir_area.x1 = point2->x - r;
 800b13c:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
            cir_area.x2 = point2->x + r - r_corr;
 800b140:	1b52      	subs	r2, r2, r5
            cir_area.y1 = point2->y - r;
 800b142:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
 800b144:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b148:	aa31      	add	r2, sp, #196	; 0xc4
            cir_area.y1 = point2->y - r;
 800b14a:	8849      	ldrh	r1, [r1, #2]
 800b14c:	1ac8      	subs	r0, r1, r3
            cir_area.y2 = point2->y + r - r_corr ;
 800b14e:	440b      	add	r3, r1
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b150:	ee18 1a10 	vmov	r1, s16
            cir_area.y2 = point2->y + r - r_corr ;
 800b154:	1b5b      	subs	r3, r3, r5
            cir_area.y1 = point2->y - r;
 800b156:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b15a:	a826      	add	r0, sp, #152	; 0x98
            cir_area.y2 = point2->y + r - r_corr ;
 800b15c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            lv_draw_rect(&cir_area, clip, &cir_dsc);
 800b160:	f001 fd64 	bl	800cc2c <lv_draw_rect>
}
 800b164:	b03f      	add	sp, #252	; 0xfc
 800b166:	ecbd 8b04 	vpop	{d8-d9}
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b16e:	2200      	movs	r2, #0
 800b170:	e779      	b.n	800b066 <lv_draw_line+0xda>
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b172:	f7fd f9b1 	bl	80084d8 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b176:	f00b fccb 	bl	8016b10 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b17a:	aa26      	add	r2, sp, #152	; 0x98
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b17c:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b17e:	a90a      	add	r1, sp, #40	; 0x28
 800b180:	4610      	mov	r0, r2
 800b182:	f00b ff78 	bl	8017076 <_lv_area_intersect>
        if(!is_common) return;
 800b186:	2800      	cmp	r0, #0
 800b188:	d098      	beq.n	800b0bc <lv_draw_line+0x130>
        draw_area.y1 -= disp_area->y1;
 800b18a:	8a7c      	ldrh	r4, [r7, #18]
 800b18c:	f9bd 009a 	ldrsh.w	r0, [sp, #154]	; 0x9a
        draw_area.x1 -= disp_area->x1;
 800b190:	8a39      	ldrh	r1, [r7, #16]
        draw_area.y1 -= disp_area->y1;
 800b192:	1b03      	subs	r3, r0, r4
        draw_area.x1 -= disp_area->x1;
 800b194:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
 800b198:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
        draw_area.y1 -= disp_area->y1;
 800b19c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        draw_area.x2 -= disp_area->x1;
 800b1a0:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
        draw_area.x1 -= disp_area->x1;
 800b1a4:	1a72      	subs	r2, r6, r1
        draw_area.x2 -= disp_area->x1;
 800b1a6:	f9bd c09c 	ldrsh.w	ip, [sp, #156]	; 0x9c
 800b1aa:	1a59      	subs	r1, r3, r1
        draw_area.x1 -= disp_area->x1;
 800b1ac:	f9bd e098 	ldrsh.w	lr, [sp, #152]	; 0x98
 800b1b0:	b212      	sxth	r2, r2
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b1b2:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
        draw_area.x2 -= disp_area->x1;
 800b1b6:	f8ad 109c 	strh.w	r1, [sp, #156]	; 0x9c
        draw_area.y2 -= disp_area->y1;
 800b1ba:	f8bd 109e 	ldrh.w	r1, [sp, #158]	; 0x9e
        draw_area.x1 -= disp_area->x1;
 800b1be:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
        draw_area.y2 -= disp_area->y1;
 800b1c2:	1b0c      	subs	r4, r1, r4
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b1c4:	f8ad e0c4 	strh.w	lr, [sp, #196]	; 0xc4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b1c8:	f8ad 00c6 	strh.w	r0, [sp, #198]	; 0xc6
        draw_area.y2 -= disp_area->y1;
 800b1cc:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
 800b1d0:	1c5c      	adds	r4, r3, #1
        fill_area.y2 = fill_area.y1;
 800b1d2:	f8ad 00ca 	strh.w	r0, [sp, #202]	; 0xca
 800b1d6:	1ba4      	subs	r4, r4, r6
 800b1d8:	b224      	sxth	r4, r4
        if(dashed) {
 800b1da:	b1dd      	cbz	r5, 800b214 <lv_draw_line+0x288>
            dash_start = (draw_buf->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800b1dc:	4490      	add	r8, r2
 800b1de:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800b1e2:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	fb98 f2f3 	sdiv	r2, r8, r3
 800b1ec:	fb03 8812 	mls	r8, r3, r2, r8
 800b1f0:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b1f4:	4620      	mov	r0, r4
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800b1f6:	f04f 0a00 	mov.w	sl, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b1fa:	f00c fd3d 	bl	8017c78 <lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b1fe:	f9bd 909a 	ldrsh.w	r9, [sp, #154]	; 0x9a
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b202:	4606      	mov	r6, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b204:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 800b208:	4599      	cmp	r9, r3
 800b20a:	dd05      	ble.n	800b218 <lv_draw_line+0x28c>
        lv_mem_buf_release(mask_buf);
 800b20c:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
 800b20e:	f00c fb8f 	bl	8017930 <lv_mem_buf_release>
 800b212:	e753      	b.n	800b0bc <lv_draw_line+0x130>
        lv_coord_t dash_start = 0;
 800b214:	46a8      	mov	r8, r5
 800b216:	e7ed      	b.n	800b1f4 <lv_draw_line+0x268>
            lv_memset_ff(mask_buf, draw_area_w);
 800b218:	4621      	mov	r1, r4
 800b21a:	4630      	mov	r0, r6
 800b21c:	f00c fda9 	bl	8017d72 <lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800b220:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800b224:	8a7a      	ldrh	r2, [r7, #18]
 800b226:	4630      	mov	r0, r6
 800b228:	8a39      	ldrh	r1, [r7, #16]
 800b22a:	444a      	add	r2, r9
 800b22c:	4419      	add	r1, r3
 800b22e:	4623      	mov	r3, r4
 800b230:	b212      	sxth	r2, r2
 800b232:	b209      	sxth	r1, r1
 800b234:	f000 ffea 	bl	800c20c <lv_draw_mask_apply>
 800b238:	4602      	mov	r2, r0
            if(dashed) {
 800b23a:	b18d      	cbz	r5, 800b260 <lv_draw_line+0x2d4>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800b23c:	b180      	cbz	r0, 800b260 <lv_draw_line+0x2d4>
                    lv_coord_t dash_cnt = dash_start;
 800b23e:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800b240:	2300      	movs	r3, #0
 800b242:	e00a      	b.n	800b25a <lv_draw_line+0x2ce>
                        if(dash_cnt <= dsc->dash_width) {
 800b244:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800b248:	428a      	cmp	r2, r1
 800b24a:	db26      	blt.n	800b29a <lv_draw_line+0x30e>
                            i += diff;
 800b24c:	4413      	add	r3, r2
 800b24e:	1a5b      	subs	r3, r3, r1
 800b250:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
 800b252:	3301      	adds	r3, #1
 800b254:	3201      	adds	r2, #1
 800b256:	b21b      	sxth	r3, r3
 800b258:	b211      	sxth	r1, r2
 800b25a:	429c      	cmp	r4, r3
 800b25c:	dcf2      	bgt.n	800b244 <lv_draw_line+0x2b8>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
 800b25e:	2202      	movs	r2, #2
                           dsc->blend_mode);
 800b260:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(clip, &fill_area,
 800b264:	a931      	add	r1, sp, #196	; 0xc4
 800b266:	a80a      	add	r0, sp, #40	; 0x28
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b268:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fill_area,
 800b26c:	f003 0303 	and.w	r3, r3, #3
 800b270:	9302      	str	r3, [sp, #8]
 800b272:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b276:	e9cd 2300 	strd	r2, r3, [sp]
 800b27a:	4633      	mov	r3, r6
 800b27c:	f8bb 2000 	ldrh.w	r2, [fp]
 800b280:	f7fe f87e 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
 800b284:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
 800b288:	3301      	adds	r3, #1
 800b28a:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
 800b28e:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
 800b292:	3301      	adds	r3, #1
 800b294:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b298:	e7b4      	b.n	800b204 <lv_draw_line+0x278>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b29a:	f9bb 0006 	ldrsh.w	r0, [fp, #6]
 800b29e:	4402      	add	r2, r0
 800b2a0:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
 800b2a2:	bfb6      	itet	lt
 800b2a4:	460a      	movlt	r2, r1
                            dash_cnt = 0;
 800b2a6:	2200      	movge	r2, #0
                            mask_buf[i] = 0x00;
 800b2a8:	f806 a003 	strblt.w	sl, [r6, r3]
 800b2ac:	e7d1      	b.n	800b252 <lv_draw_line+0x2c6>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
 800b2ae:	9b05      	ldr	r3, [sp, #20]
 800b2b0:	f9b3 7000 	ldrsh.w	r7, [r3]
 800b2b4:	9b06      	ldr	r3, [sp, #24]
 800b2b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2ba:	42b7      	cmp	r7, r6
 800b2bc:	f040 80c1 	bne.w	800b442 <lv_draw_line+0x4b6>
    int32_t w = dsc->width - 1;
 800b2c0:	3c01      	subs	r4, #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b2c2:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    lv_opa_t opa = dsc->opa;
 800b2c6:	f89b 6008 	ldrb.w	r6, [fp, #8]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b2ca:	f004 0301 	and.w	r3, r4, #1
    int32_t w_half0 = w >> 1;
 800b2ce:	1067      	asrs	r7, r4, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b2d0:	eb03 0464 	add.w	r4, r3, r4, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800b2d4:	b125      	cbz	r5, 800b2e0 <lv_draw_line+0x354>
 800b2d6:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
 800b2da:	3d00      	subs	r5, #0
 800b2dc:	bf18      	it	ne
 800b2de:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b2e0:	f000 ffde 	bl	800c2a0 <lv_draw_mask_get_cnt>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d16e      	bne.n	800b3c6 <lv_draw_line+0x43a>
    else if(dashed) simple_mode = false;
 800b2e8:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
 800b2ec:	9b05      	ldr	r3, [sp, #20]
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b2ee:	9905      	ldr	r1, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
 800b2f0:	881b      	ldrh	r3, [r3, #0]
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b2f2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
 800b2f6:	1b1c      	subs	r4, r3, r4
    draw_area.x2 = point1->x + w_half0;
 800b2f8:	443b      	add	r3, r7
 800b2fa:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b2fe:	9b06      	ldr	r3, [sp, #24]
    draw_area.x1 = point1->x - w_half1;
 800b300:	f8ad 4098 	strh.w	r4, [sp, #152]	; 0x98
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b308:	428b      	cmp	r3, r1
 800b30a:	4618      	mov	r0, r3
 800b30c:	bfa8      	it	ge
 800b30e:	4608      	movge	r0, r1
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800b310:	428b      	cmp	r3, r1
 800b312:	bfb8      	it	lt
 800b314:	460b      	movlt	r3, r1
    draw_area.y1 = LV_MIN(point1->y, point2->y);
 800b316:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
    draw_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800b31a:	3b01      	subs	r3, #1
 800b31c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    if(simple_mode) {
 800b320:	2a00      	cmp	r2, #0
 800b322:	f47f aebc 	bne.w	800b09e <lv_draw_line+0x112>
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b326:	f7fd f8d7 	bl	80084d8 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b32a:	f00b fbf1 	bl	8016b10 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b32e:	aa26      	add	r2, sp, #152	; 0x98
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b330:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
 800b332:	a90a      	add	r1, sp, #40	; 0x28
 800b334:	4610      	mov	r0, r2
 800b336:	f00b fe9e 	bl	8017076 <_lv_area_intersect>
        if(!is_common) return;
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f43f aebe 	beq.w	800b0bc <lv_draw_line+0x130>
        draw_area.x1 -= draw_buf->area.x1;
 800b340:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 800b344:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
        draw_area.y1 -= draw_buf->area.y1;
 800b348:	f8b8 6012 	ldrh.w	r6, [r8, #18]
 800b34c:	f9bd 109a 	ldrsh.w	r1, [sp, #154]	; 0x9a
        draw_area.x1 -= draw_buf->area.x1;
 800b350:	1abb      	subs	r3, r7, r2
 800b352:	f9bd 4098 	ldrsh.w	r4, [sp, #152]	; 0x98
 800b356:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        draw_area.y1 -= draw_buf->area.y1;
 800b35a:	1b8b      	subs	r3, r1, r6
        draw_area.x2 -= draw_buf->area.x1;
 800b35c:	f9bd 009c 	ldrsh.w	r0, [sp, #156]	; 0x9c
        draw_area.y1 -= draw_buf->area.y1;
 800b360:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        draw_area.x2 -= draw_buf->area.x1;
 800b364:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
        fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b368:	f8ad 00c8 	strh.w	r0, [sp, #200]	; 0xc8
        draw_area.x2 -= draw_buf->area.x1;
 800b36c:	1a9a      	subs	r2, r3, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b36e:	f8ad 40c4 	strh.w	r4, [sp, #196]	; 0xc4
        fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b372:	f8ad 10c6 	strh.w	r1, [sp, #198]	; 0xc6
        draw_area.x2 -= draw_buf->area.x1;
 800b376:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
        draw_area.y2 -= draw_buf->area.y1;
 800b37a:	f8bd 209e 	ldrh.w	r2, [sp, #158]	; 0x9e
        fill_area.y2 = fill_area.y1;
 800b37e:	f8ad 10ca 	strh.w	r1, [sp, #202]	; 0xca
        draw_area.y2 -= draw_buf->area.y1;
 800b382:	1b92      	subs	r2, r2, r6
 800b384:	1c5e      	adds	r6, r3, #1
 800b386:	1bf6      	subs	r6, r6, r7
 800b388:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
 800b38c:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800b38e:	4630      	mov	r0, r6
 800b390:	f00c fc72 	bl	8017c78 <lv_mem_buf_get>
 800b394:	f9bd 709a 	ldrsh.w	r7, [sp, #154]	; 0x9a
 800b398:	4681      	mov	r9, r0
        if(dashed) {
 800b39a:	b1b5      	cbz	r5, 800b3ca <lv_draw_line+0x43e>
            dash_start = (draw_buf->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800b39c:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
 800b3a0:	f9b8 2012 	ldrsh.w	r2, [r8, #18]
 800b3a4:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800b3a8:	443a      	add	r2, r7
 800b3aa:	4423      	add	r3, r4
 800b3ac:	fb92 f4f3 	sdiv	r4, r2, r3
 800b3b0:	fb03 2414 	mls	r4, r3, r4, r2
 800b3b4:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
 800b3b6:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b3ba:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 800b3be:	429f      	cmp	r7, r3
 800b3c0:	dd05      	ble.n	800b3ce <lv_draw_line+0x442>
        lv_mem_buf_release(mask_buf);
 800b3c2:	4648      	mov	r0, r9
 800b3c4:	e723      	b.n	800b20e <lv_draw_line+0x282>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	e790      	b.n	800b2ec <lv_draw_line+0x360>
        lv_coord_t dash_start = 0;
 800b3ca:	462c      	mov	r4, r5
 800b3cc:	e7f3      	b.n	800b3b6 <lv_draw_line+0x42a>
            lv_memset_ff(mask_buf, draw_area_w);
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4648      	mov	r0, r9
 800b3d2:	f00c fcce 	bl	8017d72 <lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800b3d6:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800b3da:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 800b3de:	4648      	mov	r0, r9
 800b3e0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 800b3e4:	443a      	add	r2, r7
 800b3e6:	4419      	add	r1, r3
 800b3e8:	4633      	mov	r3, r6
 800b3ea:	b212      	sxth	r2, r2
 800b3ec:	b209      	sxth	r1, r1
 800b3ee:	f000 ff0d 	bl	800c20c <lv_draw_mask_apply>
            if(dashed) {
 800b3f2:	b16d      	cbz	r5, 800b410 <lv_draw_line+0x484>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800b3f4:	b150      	cbz	r0, 800b40c <lv_draw_line+0x480>
                    if(dash_cnt > dsc->dash_width) {
 800b3f6:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b3fa:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
 800b3fe:	42a2      	cmp	r2, r4
 800b400:	bfb8      	it	lt
 800b402:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800b404:	4413      	add	r3, r2
                        dash_cnt = 0;
 800b406:	429c      	cmp	r4, r3
 800b408:	bfa8      	it	ge
 800b40a:	2400      	movge	r4, #0
                dash_cnt ++;
 800b40c:	3401      	adds	r4, #1
 800b40e:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
 800b410:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b414:	a931      	add	r1, sp, #196	; 0xc4
 800b416:	f8bb 2000 	ldrh.w	r2, [fp]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b41a:	3701      	adds	r7, #1
            _lv_blend_fill(clip, &fill_area,
 800b41c:	f8cd a008 	str.w	sl, [sp, #8]
 800b420:	e9cd 0300 	strd	r0, r3, [sp]
 800b424:	464b      	mov	r3, r9
 800b426:	a80a      	add	r0, sp, #40	; 0x28
 800b428:	f7fd ffaa 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
 800b42c:	f8bd 30c6 	ldrh.w	r3, [sp, #198]	; 0xc6
 800b430:	3301      	adds	r3, #1
 800b432:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
            fill_area.y2++;
 800b436:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
 800b43a:	3301      	adds	r3, #1
 800b43c:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800b440:	e7bb      	b.n	800b3ba <lv_draw_line+0x42e>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800b442:	45c1      	cmp	r9, r8
 800b444:	db05      	blt.n	800b452 <lv_draw_line+0x4c6>
 800b446:	464b      	mov	r3, r9
 800b448:	46c1      	mov	r9, r8
 800b44a:	4698      	mov	r8, r3
 800b44c:	463b      	mov	r3, r7
 800b44e:	4637      	mov	r7, r6
 800b450:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800b452:	1bf3      	subs	r3, r6, r7
    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b454:	213f      	movs	r1, #63	; 0x3f
    int32_t xdiff = p2.x - p1.x;
 800b456:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
 800b458:	eba8 0309 	sub.w	r3, r8, r9
 800b45c:	9308      	str	r3, [sp, #32]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800b45e:	1bf3      	subs	r3, r6, r7
 800b460:	2b00      	cmp	r3, #0
 800b462:	bfb8      	it	lt
 800b464:	425b      	neglt	r3, r3
 800b466:	9307      	str	r3, [sp, #28]
 800b468:	9b08      	ldr	r3, [sp, #32]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bfb8      	it	lt
 800b46e:	425b      	neglt	r3, r3
 800b470:	469a      	mov	sl, r3
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	4553      	cmp	r3, sl
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b476:	bfd3      	iteet	le
 800b478:	9b07      	ldrle	r3, [sp, #28]
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b47a:	ea4f 134a 	movgt.w	r3, sl, lsl #5
 800b47e:	9a07      	ldrgt	r2, [sp, #28]
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b480:	015b      	lslle	r3, r3, #5
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800b482:	bfcc      	ite	gt
 800b484:	fbb3 f3f2 	udivgt	r3, r3, r2
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800b488:	fbb3 f3fa 	udivle	r3, r3, sl
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b48c:	4ac3      	ldr	r2, [pc, #780]	; (800b79c <lv_draw_line+0x810>)
 800b48e:	5cd3      	ldrb	r3, [r2, r3]
 800b490:	fb14 1403 	smlabb	r4, r4, r3, r1
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b494:	a90c      	add	r1, sp, #48	; 0x30
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800b496:	f3c4 13cf 	ubfx	r3, r4, #7, #16
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b49a:	4608      	mov	r0, r1
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800b49c:	11e5      	asrs	r5, r4, #7
    draw_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800b49e:	42be      	cmp	r6, r7
 800b4a0:	bfd4      	ite	le
 800b4a2:	ebc3 0206 	rsble	r2, r3, r6
 800b4a6:	ebc3 0207 	rsbgt	r2, r3, r7
 800b4aa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    draw_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800b4ae:	42be      	cmp	r6, r7
 800b4b0:	bfac      	ite	ge
 800b4b2:	199a      	addge	r2, r3, r6
 800b4b4:	19da      	addlt	r2, r3, r7
 800b4b6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800b4ba:	45c8      	cmp	r8, r9
 800b4bc:	bfd4      	ite	le
 800b4be:	ebc3 0208 	rsble	r2, r3, r8
 800b4c2:	ebc3 0209 	rsbgt	r2, r3, r9
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800b4c6:	45c8      	cmp	r8, r9
 800b4c8:	bfac      	ite	ge
 800b4ca:	4443      	addge	r3, r8
 800b4cc:	444b      	addlt	r3, r9
    draw_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800b4ce:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b4d2:	aa0a      	add	r2, sp, #40	; 0x28
    draw_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800b4d4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
 800b4d8:	f00b fdcd 	bl	8017076 <_lv_area_intersect>
    if(is_common == false) return;
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f43f aded 	beq.w	800b0bc <lv_draw_line+0x130>
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b4e2:	f005 0501 	and.w	r5, r5, #1
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800b4e6:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800b4e8:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
 800b4ec:	4553      	cmp	r3, sl
 800b4ee:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800b4f2:	b2ad      	uxth	r5, r5
 800b4f4:	f340 80f3 	ble.w	800b6de <lv_draw_line+0x752>
        if(xdiff > 0) {
 800b4f8:	fa15 f389 	uxtah	r3, r5, r9
 800b4fc:	eba9 0a04 	sub.w	sl, r9, r4
 800b500:	fa15 f588 	uxtah	r5, r5, r8
 800b504:	eba8 0404 	sub.w	r4, r8, r4
 800b508:	b21b      	sxth	r3, r3
 800b50a:	b22d      	sxth	r5, r5
 800b50c:	ee08 3a90 	vmov	s17, r3
 800b510:	1bf3      	subs	r3, r6, r7
 800b512:	fa0f fa8a 	sxth.w	sl, sl
 800b516:	2b00      	cmp	r3, #0
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b51e:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
 800b520:	f340 80cf 	ble.w	800b6c2 <lv_draw_line+0x736>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b524:	4633      	mov	r3, r6
 800b526:	4652      	mov	r2, sl
 800b528:	4639      	mov	r1, r7
 800b52a:	a810      	add	r0, sp, #64	; 0x40
 800b52c:	9400      	str	r4, [sp, #0]
 800b52e:	f000 fec5 	bl	800c2bc <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b532:	2301      	movs	r3, #1
 800b534:	ee18 2a90 	vmov	r2, s17
 800b538:	e9cd 5300 	strd	r5, r3, [sp]
 800b53c:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b53e:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b540:	a81b      	add	r0, sp, #108	; 0x6c
 800b542:	f000 febb 	bl	800c2bc <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b546:	2100      	movs	r1, #0
 800b548:	a810      	add	r0, sp, #64	; 0x40
 800b54a:	f000 fe49 	bl	800c1e0 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b54e:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800b550:	ee09 0a10 	vmov	s18, r0
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b554:	a81b      	add	r0, sp, #108	; 0x6c
 800b556:	f000 fe43 	bl	800c1e0 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800b55a:	f89b 5009 	ldrb.w	r5, [fp, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800b55e:	ee09 0a90 	vmov	s19, r0
    if(!dsc->raw_end) {
 800b562:	f015 0510 	ands.w	r5, r5, #16
 800b566:	f040 80d4 	bne.w	800b712 <lv_draw_line+0x786>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b56a:	2203      	movs	r2, #3
 800b56c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800b570:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800b574:	4639      	mov	r1, r7
 800b576:	9201      	str	r2, [sp, #4]
 800b578:	1bf2      	subs	r2, r6, r7
 800b57a:	1b3b      	subs	r3, r7, r4
 800b57c:	a826      	add	r0, sp, #152	; 0x98
 800b57e:	fa19 f282 	uxtah	r2, r9, r2
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b582:	44c2      	add	sl, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800b584:	b21b      	sxth	r3, r3
 800b586:	b212      	sxth	r2, r2
 800b588:	9200      	str	r2, [sp, #0]
 800b58a:	464a      	mov	r2, r9
 800b58c:	f000 fe96 	bl	800c2bc <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800b590:	2202      	movs	r2, #2
 800b592:	1b33      	subs	r3, r6, r4
 800b594:	4631      	mov	r1, r6
 800b596:	9201      	str	r2, [sp, #4]
 800b598:	fa0f f28a 	sxth.w	r2, sl
 800b59c:	b21b      	sxth	r3, r3
 800b59e:	a831      	add	r0, sp, #196	; 0xc4
 800b5a0:	9200      	str	r2, [sp, #0]
 800b5a2:	4642      	mov	r2, r8
 800b5a4:	f000 fe8a 	bl	800c2bc <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	a826      	add	r0, sp, #152	; 0x98
 800b5ac:	f000 fe18 	bl	800c1e0 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b5b0:	4629      	mov	r1, r5
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800b5b2:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800b5b4:	a831      	add	r0, sp, #196	; 0xc4
 800b5b6:	f000 fe13 	bl	800c1e0 <lv_draw_mask_add>
 800b5ba:	4681      	mov	r9, r0
    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b5bc:	f7fc ff8c 	bl	80084d8 <_lv_refr_get_disp_refreshing>
 800b5c0:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b5c2:	f00b faa5 	bl	8016b10 <lv_disp_get_draw_buf>

    const lv_area_t * disp_area = &draw_buf->area;

    /*Store the coordinates of the `draw_a` relative to the draw_buf*/
    draw_area.x1 -= disp_area->x1;
 800b5c6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800b5ca:	8a02      	ldrh	r2, [r0, #16]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800b5cc:	4606      	mov	r6, r0
    draw_area.y1 -= disp_area->y1;
 800b5ce:	8a40      	ldrh	r0, [r0, #18]
    draw_area.x1 -= disp_area->x1;
 800b5d0:	1a8b      	subs	r3, r1, r2
 800b5d2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    draw_area.y1 -= disp_area->y1;
 800b5d6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b5da:	1a1b      	subs	r3, r3, r0
 800b5dc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    draw_area.x2 -= disp_area->x1;
 800b5e0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800b5e4:	1a9a      	subs	r2, r3, r2
 800b5e6:	1c5c      	adds	r4, r3, #1
 800b5e8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800b5ec:	1a64      	subs	r4, r4, r1
    draw_area.y2 -= disp_area->y1;
 800b5ee:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 800b5f2:	b224      	sxth	r4, r4
 800b5f4:	1a12      	subs	r2, r2, r0
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800b5f6:	4628      	mov	r0, r5
    draw_area.y2 -= disp_area->y1;
 800b5f8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
 800b5fc:	f00b fa4a 	bl	8016a94 <lv_disp_get_hor_res>
 800b600:	4605      	mov	r5, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&draw_area), hor_res);
 800b602:	a80c      	add	r0, sp, #48	; 0x30
 800b604:	f00b fd09 	bl	801701a <lv_area_get_size>
 800b608:	4285      	cmp	r5, r0
 800b60a:	d903      	bls.n	800b614 <lv_draw_line+0x688>
 800b60c:	a80c      	add	r0, sp, #48	; 0x30
 800b60e:	f00b fd04 	bl	801701a <lv_area_get_size>
 800b612:	4605      	mov	r5, r0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b614:	4628      	mov	r0, r5
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    fill_area.y2 = fill_area.y1;

    int32_t x = draw_buf->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;
 800b616:	f04f 0800 	mov.w	r8, #0
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b61a:	f00c fb2d 	bl	8017c78 <lv_mem_buf_get>
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b61e:	8a33      	ldrh	r3, [r6, #16]
 800b620:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30

    lv_memset_ff(mask_buf, mask_buf_size);
 800b624:	4629      	mov	r1, r5
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800b626:	4607      	mov	r7, r0
    fill_area.x1 = draw_area.x1 + disp_area->x1;
 800b628:	441a      	add	r2, r3
 800b62a:	b212      	sxth	r2, r2
 800b62c:	9207      	str	r2, [sp, #28]
 800b62e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b632:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800b636:	4413      	add	r3, r2
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b638:	8a72      	ldrh	r2, [r6, #18]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
 800b63a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    fill_area.y1 = draw_area.y1 + disp_area->y1;
 800b63e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 800b642:	4413      	add	r3, r2
 800b644:	b21b      	sxth	r3, r3
 800b646:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    fill_area.y2 = fill_area.y1;
 800b64a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    lv_memset_ff(mask_buf, mask_buf_size);
 800b64e:	f00c fb90 	bl	8017d72 <lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800b652:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800b656:	f9b6 a012 	ldrsh.w	sl, [r6, #18]
 800b65a:	449a      	add	sl, r3
 800b65c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 800b660:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 800b664:	4413      	add	r3, r2
 800b666:	459a      	cmp	sl, r3
 800b668:	dd58      	ble.n	800b71c <lv_draw_line+0x790>
            lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800b66a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800b66e:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 800b672:	429a      	cmp	r2, r3
 800b674:	d013      	beq.n	800b69e <lv_draw_line+0x712>
        fill_area.y2--;
 800b676:	3b01      	subs	r3, #1
        _lv_blend_fill(&fill_area, clip,
 800b678:	f8bb 2000 	ldrh.w	r2, [fp]
 800b67c:	a90a      	add	r1, sp, #40	; 0x28
 800b67e:	a80e      	add	r0, sp, #56	; 0x38
        fill_area.y2--;
 800b680:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
 800b684:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(&fill_area, clip,
 800b688:	f003 0303 	and.w	r3, r3, #3
 800b68c:	9302      	str	r3, [sp, #8]
 800b68e:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2302      	movs	r3, #2
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	463b      	mov	r3, r7
 800b69a:	f7fd fe71 	bl	8009380 <_lv_blend_fill>

    }

    lv_mem_buf_release(mask_buf);
 800b69e:	4638      	mov	r0, r7
 800b6a0:	f00c f946 	bl	8017930 <lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
 800b6a4:	ee19 0a10 	vmov	r0, s18
 800b6a8:	f000 fdd2 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800b6ac:	ee19 0a90 	vmov	r0, s19
 800b6b0:	f000 fdce 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800b6b4:	9808      	ldr	r0, [sp, #32]
 800b6b6:	f000 fdcb 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800b6ba:	4648      	mov	r0, r9
 800b6bc:	f000 fdc8 	bl	800c250 <lv_draw_mask_remove_id>
 800b6c0:	e4fc      	b.n	800b0bc <lv_draw_line+0x130>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800b6c2:	4633      	mov	r3, r6
 800b6c4:	ee18 2a90 	vmov	r2, s17
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	a810      	add	r0, sp, #64	; 0x40
 800b6cc:	9500      	str	r5, [sp, #0]
 800b6ce:	f000 fdf5 	bl	800c2bc <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4652      	mov	r2, sl
 800b6d6:	e9cd 4300 	strd	r4, r3, [sp]
 800b6da:	4633      	mov	r3, r6
 800b6dc:	e72f      	b.n	800b53e <lv_draw_line+0x5b2>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800b6de:	fa15 f386 	uxtah	r3, r5, r6
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	fa15 f587 	uxtah	r5, r5, r7
 800b6e8:	a810      	add	r0, sp, #64	; 0x40
 800b6ea:	b21b      	sxth	r3, r3
 800b6ec:	b229      	sxth	r1, r5
 800b6ee:	fa1f fa87 	uxth.w	sl, r7
 800b6f2:	e9cd 8200 	strd	r8, r2, [sp]
 800b6f6:	464a      	mov	r2, r9
 800b6f8:	f000 fde0 	bl	800c2bc <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	b2b3      	uxth	r3, r6
 800b700:	ebaa 0104 	sub.w	r1, sl, r4
 800b704:	1b1b      	subs	r3, r3, r4
 800b706:	b209      	sxth	r1, r1
 800b708:	e9cd 8200 	strd	r8, r2, [sp]
 800b70c:	b21b      	sxth	r3, r3
 800b70e:	464a      	mov	r2, r9
 800b710:	e716      	b.n	800b540 <lv_draw_line+0x5b4>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800b712:	f04f 39ff 	mov.w	r9, #4294967295
    int16_t mask_top_id = LV_MASK_ID_INV;
 800b716:	f8cd 9020 	str.w	r9, [sp, #32]
 800b71a:	e74f      	b.n	800b5bc <lv_draw_line+0x630>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
 800b71c:	eb07 0308 	add.w	r3, r7, r8
 800b720:	fa0f f28a 	sxth.w	r2, sl
 800b724:	9907      	ldr	r1, [sp, #28]
 800b726:	ee08 3a90 	vmov	s17, r3
 800b72a:	4623      	mov	r3, r4
 800b72c:	ee18 0a90 	vmov	r0, s17
 800b730:	f000 fd6c 	bl	800c20c <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800b734:	b920      	cbnz	r0, 800b740 <lv_draw_line+0x7b4>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800b736:	4621      	mov	r1, r4
 800b738:	ee18 0a90 	vmov	r0, s17
 800b73c:	f00c faea 	bl	8017d14 <lv_memset_00>
        mask_p += draw_area_w;
 800b740:	44a0      	add	r8, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800b742:	eb08 0304 	add.w	r3, r8, r4
 800b746:	429d      	cmp	r5, r3
 800b748:	d907      	bls.n	800b75a <lv_draw_line+0x7ce>
            fill_area.y2 ++;
 800b74a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b74e:	3301      	adds	r3, #1
 800b750:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
 800b754:	f10a 0a01 	add.w	sl, sl, #1
 800b758:	e780      	b.n	800b65c <lv_draw_line+0x6d0>
                           dsc->blend_mode);
 800b75a:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(&fill_area, clip,
 800b75e:	a90a      	add	r1, sp, #40	; 0x28
 800b760:	f8bb 2000 	ldrh.w	r2, [fp]
 800b764:	a80e      	add	r0, sp, #56	; 0x38
 800b766:	f003 0303 	and.w	r3, r3, #3
            mask_p = 0;
 800b76a:	f04f 0800 	mov.w	r8, #0
            _lv_blend_fill(&fill_area, clip,
 800b76e:	9302      	str	r3, [sp, #8]
 800b770:	f89b 3008 	ldrb.w	r3, [fp, #8]
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	2302      	movs	r3, #2
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	463b      	mov	r3, r7
 800b77c:	f7fd fe00 	bl	8009380 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
 800b780:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
            lv_memset_ff(mask_buf, mask_buf_size);
 800b784:	4629      	mov	r1, r5
 800b786:	4638      	mov	r0, r7
            fill_area.y1 = fill_area.y2 + 1;
 800b788:	3301      	adds	r3, #1
 800b78a:	b21b      	sxth	r3, r3
 800b78c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            fill_area.y2 = fill_area.y1;
 800b790:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            lv_memset_ff(mask_buf, mask_buf_size);
 800b794:	f00c faed 	bl	8017d72 <lv_memset_ff>
 800b798:	e7dc      	b.n	800b754 <lv_draw_line+0x7c8>
 800b79a:	bf00      	nop
 800b79c:	08025a21 	.word	0x08025a21

0800b7a0 <mask_mix>:
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800b7a0:	29fc      	cmp	r1, #252	; 0xfc
 800b7a2:	d80a      	bhi.n	800b7ba <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800b7a4:	2902      	cmp	r1, #2
 800b7a6:	d907      	bls.n	800b7b8 <mask_mix+0x18>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800b7a8:	fb10 f001 	smulbb	r0, r0, r1
 800b7ac:	f248 0181 	movw	r1, #32897	; 0x8081
 800b7b0:	4348      	muls	r0, r1
 800b7b2:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 800b7b6:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
 800b7b8:	2000      	movs	r0, #0
}
 800b7ba:	4770      	bx	lr

0800b7bc <lv_draw_mask_line>:
{
 800b7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c0:	9e08      	ldr	r6, [sp, #32]
 800b7c2:	4605      	mov	r5, r0
    abs_y -= p->origo.y;
 800b7c4:	8ab4      	ldrh	r4, [r6, #20]
    abs_x -= p->origo.x;
 800b7c6:	f8b6 8012 	ldrh.w	r8, [r6, #18]
    abs_y -= p->origo.y;
 800b7ca:	1b12      	subs	r2, r2, r4
    abs_x -= p->origo.x;
 800b7cc:	eba1 0108 	sub.w	r1, r1, r8
    abs_y -= p->origo.y;
 800b7d0:	b214      	sxth	r4, r2
    abs_x -= p->origo.x;
 800b7d2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800b7d6:	fa0f f881 	sxth.w	r8, r1
    if(p->steep == 0) {
 800b7da:	6a31      	ldr	r1, [r6, #32]
 800b7dc:	f002 0001 	and.w	r0, r2, #1
 800b7e0:	2900      	cmp	r1, #0
 800b7e2:	d13a      	bne.n	800b85a <lv_draw_mask_line+0x9e>
        if(p->flat) {
 800b7e4:	7c32      	ldrb	r2, [r6, #16]
 800b7e6:	f002 0602 	and.w	r6, r2, #2
 800b7ea:	b180      	cbz	r0, 800b80e <lv_draw_mask_line+0x52>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800b7ec:	b13e      	cbz	r6, 800b7fe <lv_draw_mask_line+0x42>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b7ee:	f002 0203 	and.w	r2, r2, #3
 800b7f2:	2a02      	cmp	r2, #2
 800b7f4:	d105      	bne.n	800b802 <lv_draw_mask_line+0x46>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b7f6:	3401      	adds	r4, #1
 800b7f8:	bfac      	ite	ge
 800b7fa:	2000      	movge	r0, #0
 800b7fc:	2001      	movlt	r0, #1
}
 800b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b802:	2a03      	cmp	r2, #3
 800b804:	d101      	bne.n	800b80a <lv_draw_mask_line+0x4e>
 800b806:	2c00      	cmp	r4, #0
 800b808:	dcf9      	bgt.n	800b7fe <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
 800b80a:	2000      	movs	r0, #0
 800b80c:	e7f7      	b.n	800b7fe <lv_draw_mask_line+0x42>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800b80e:	2e00      	cmp	r6, #0
 800b810:	f040 8173 	bne.w	800bafa <lv_draw_mask_line+0x33e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b814:	f002 0003 	and.w	r0, r2, #3
 800b818:	2801      	cmp	r0, #1
 800b81a:	d10e      	bne.n	800b83a <lv_draw_mask_line+0x7e>
 800b81c:	f1b8 0f00 	cmp.w	r8, #0
 800b820:	dced      	bgt.n	800b7fe <lv_draw_mask_line+0x42>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b822:	eb18 0f03 	cmn.w	r8, r3
 800b826:	d4f0      	bmi.n	800b80a <lv_draw_mask_line+0x4e>
                    if(k < 0) k = 0;
 800b828:	f1b8 0f00 	cmp.w	r8, #0
 800b82c:	f300 8167 	bgt.w	800bafe <lv_draw_mask_line+0x342>
                    int32_t k = - abs_x;
 800b830:	f1c8 0100 	rsb	r1, r8, #0
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800b834:	428b      	cmp	r3, r1
 800b836:	dde8      	ble.n	800b80a <lv_draw_mask_line+0x4e>
 800b838:	e0a3      	b.n	800b982 <lv_draw_mask_line+0x1c6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d1f1      	bne.n	800b822 <lv_draw_mask_line+0x66>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800b83e:	eb13 0108 	adds.w	r1, r3, r8
 800b842:	f100 815a 	bmi.w	800bafa <lv_draw_mask_line+0x33e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800b846:	f1b8 0f00 	cmp.w	r8, #0
 800b84a:	dcde      	bgt.n	800b80a <lv_draw_mask_line+0x4e>
                    int32_t k = - abs_x;
 800b84c:	f1c8 0000 	rsb	r0, r8, #0
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800b850:	4298      	cmp	r0, r3
 800b852:	f2c0 80a1 	blt.w	800b998 <lv_draw_mask_line+0x1dc>
    return LV_DRAW_MASK_RES_CHANGED;
 800b856:	2002      	movs	r0, #2
 800b858:	e7d1      	b.n	800b7fe <lv_draw_mask_line+0x42>
    if(p->flat) {
 800b85a:	f002 0202 	and.w	r2, r2, #2
 800b85e:	2800      	cmp	r0, #0
 800b860:	f000 809e 	beq.w	800b9a0 <lv_draw_mask_line+0x1e4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b864:	69f0      	ldr	r0, [r6, #28]
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	fb08 f100 	mul.w	r1, r8, r0
    if(p->yx_steep > 0) {
 800b86c:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800b86e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800b872:	dd05      	ble.n	800b880 <lv_draw_mask_line+0xc4>
        if(y_at_x > abs_y) {
 800b874:	42a1      	cmp	r1, r4
 800b876:	dd05      	ble.n	800b884 <lv_draw_mask_line+0xc8>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b878:	1e10      	subs	r0, r2, #0
 800b87a:	bf18      	it	ne
 800b87c:	2001      	movne	r0, #1
 800b87e:	e7be      	b.n	800b7fe <lv_draw_mask_line+0x42>
        if(y_at_x < abs_y) {
 800b880:	42a1      	cmp	r1, r4
 800b882:	dbf9      	blt.n	800b878 <lv_draw_mask_line+0xbc>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b884:	eb03 0108 	add.w	r1, r3, r8
    if(p->yx_steep > 0) {
 800b888:	2800      	cmp	r0, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800b88a:	fb00 f101 	mul.w	r1, r0, r1
 800b88e:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
 800b892:	dd05      	ble.n	800b8a0 <lv_draw_mask_line+0xe4>
        if(y_at_x < abs_y) {
 800b894:	42a1      	cmp	r1, r4
 800b896:	da09      	bge.n	800b8ac <lv_draw_mask_line+0xf0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800b898:	fab2 f082 	clz	r0, r2
 800b89c:	0940      	lsrs	r0, r0, #5
 800b89e:	e7ae      	b.n	800b7fe <lv_draw_mask_line+0x42>
        if(y_at_x > abs_y) {
 800b8a0:	42a1      	cmp	r1, r4
 800b8a2:	dcf9      	bgt.n	800b898 <lv_draw_mask_line+0xdc>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b8a4:	69b1      	ldr	r1, [r6, #24]
 800b8a6:	fb04 1401 	mla	r4, r4, r1, r1
 800b8aa:	e001      	b.n	800b8b0 <lv_draw_mask_line+0xf4>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 800b8ac:	69b1      	ldr	r1, [r6, #24]
 800b8ae:	434c      	muls	r4, r1
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b8b0:	f344 0495 	sbfx	r4, r4, #2, #22
    if(xef == 0) px_h = 255;
 800b8b4:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
    int32_t xei = xe >> 8;
 800b8b8:	ea4f 2124 	mov.w	r1, r4, asr #8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b8bc:	bf1a      	itte	ne
 800b8be:	6a70      	ldrne	r0, [r6, #36]	; 0x24
 800b8c0:	f1c7 04ff 	rsbne	r4, r7, #255	; 0xff
    if(xef == 0) px_h = 255;
 800b8c4:	24ff      	moveq	r4, #255	; 0xff
    int32_t k = xei - abs_x;
 800b8c6:	eba1 0808 	sub.w	r8, r1, r8
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800b8ca:	bf1e      	ittt	ne
 800b8cc:	4344      	mulne	r4, r0
 800b8ce:	1224      	asrne	r4, r4, #8
 800b8d0:	f1c4 04ff 	rsbne	r4, r4, #255	; 0xff
    if(xef) {
 800b8d4:	2f00      	cmp	r7, #0
 800b8d6:	d056      	beq.n	800b986 <lv_draw_mask_line+0x1ca>
        if(k >= 0 && k < len) {
 800b8d8:	f1b8 0f00 	cmp.w	r8, #0
 800b8dc:	db11      	blt.n	800b902 <lv_draw_mask_line+0x146>
 800b8de:	4543      	cmp	r3, r8
 800b8e0:	dd0f      	ble.n	800b902 <lv_draw_mask_line+0x146>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b8e2:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
 800b8e6:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800b8ea:	434f      	muls	r7, r1
 800b8ec:	f3c7 2147 	ubfx	r1, r7, #9, #8
            if(p->inv) m = 255 - m;
 800b8f0:	b90a      	cbnz	r2, 800b8f6 <lv_draw_mask_line+0x13a>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800b8f2:	43c9      	mvns	r1, r1
 800b8f4:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b8f6:	f815 0008 	ldrb.w	r0, [r5, r8]
 800b8fa:	f7ff ff51 	bl	800b7a0 <mask_mix>
 800b8fe:	f805 0008 	strb.w	r0, [r5, r8]
        k++;
 800b902:	f108 0201 	add.w	r2, r8, #1
    while(px_h > p->spx) {
 800b906:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800b908:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 800b90c:	428c      	cmp	r4, r1
 800b90e:	f000 0002 	and.w	r0, r0, #2
 800b912:	dc16      	bgt.n	800b942 <lv_draw_mask_line+0x186>
    if(k < len && k >= 0) {
 800b914:	4293      	cmp	r3, r2
 800b916:	dd28      	ble.n	800b96a <lv_draw_mask_line+0x1ae>
 800b918:	2a00      	cmp	r2, #0
 800b91a:	db26      	blt.n	800b96a <lv_draw_mask_line+0x1ae>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800b91c:	69b1      	ldr	r1, [r6, #24]
 800b91e:	4361      	muls	r1, r4
 800b920:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
 800b922:	4361      	muls	r1, r4
        if(p->yx_steep < 0) m = 255 - m;
 800b924:	69f4      	ldr	r4, [r6, #28]
        m = (x_inters * px_h) >> 9;
 800b926:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800b92a:	2c00      	cmp	r4, #0
 800b92c:	bfbc      	itt	lt
 800b92e:	43c9      	mvnlt	r1, r1
 800b930:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
 800b932:	b108      	cbz	r0, 800b938 <lv_draw_mask_line+0x17c>
 800b934:	43c9      	mvns	r1, r1
 800b936:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800b938:	5ca8      	ldrb	r0, [r5, r2]
 800b93a:	f7ff ff31 	bl	800b7a0 <mask_mix>
 800b93e:	54a8      	strb	r0, [r5, r2]
 800b940:	e013      	b.n	800b96a <lv_draw_mask_line+0x1ae>
        if(k >= 0 && k < len) {
 800b942:	2a00      	cmp	r2, #0
 800b944:	db0b      	blt.n	800b95e <lv_draw_mask_line+0x1a2>
 800b946:	4293      	cmp	r3, r2
 800b948:	dd09      	ble.n	800b95e <lv_draw_mask_line+0x1a2>
            m = px_h - (p->spx >> 1);
 800b94a:	eba4 0161 	sub.w	r1, r4, r1, asr #1
 800b94e:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
 800b950:	b108      	cbz	r0, 800b956 <lv_draw_mask_line+0x19a>
 800b952:	43c9      	mvns	r1, r1
 800b954:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800b956:	5ca8      	ldrb	r0, [r5, r2]
 800b958:	f7ff ff22 	bl	800b7a0 <mask_mix>
 800b95c:	54a8      	strb	r0, [r5, r2]
        k++;
 800b95e:	3201      	adds	r2, #1
        px_h -= p->spx;
 800b960:	6a71      	ldr	r1, [r6, #36]	; 0x24
        if(k >= len) break;
 800b962:	4293      	cmp	r3, r2
        px_h -= p->spx;
 800b964:	eba4 0401 	sub.w	r4, r4, r1
        if(k >= len) break;
 800b968:	dccd      	bgt.n	800b906 <lv_draw_mask_line+0x14a>
    if(p->inv) {
 800b96a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800b96e:	0789      	lsls	r1, r1, #30
 800b970:	d50b      	bpl.n	800b98a <lv_draw_mask_line+0x1ce>
        if(k > len) {
 800b972:	4543      	cmp	r3, r8
 800b974:	f6ff af49 	blt.w	800b80a <lv_draw_mask_line+0x4e>
        if(k >= 0) {
 800b978:	f1b8 0f00 	cmp.w	r8, #0
 800b97c:	f6ff af6b 	blt.w	800b856 <lv_draw_mask_line+0x9a>
            lv_memset_00(&mask_buf[0], k);
 800b980:	4641      	mov	r1, r8
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800b982:	4628      	mov	r0, r5
 800b984:	e009      	b.n	800b99a <lv_draw_mask_line+0x1de>
    int32_t k = xei - abs_x;
 800b986:	4642      	mov	r2, r8
 800b988:	e7bd      	b.n	800b906 <lv_draw_mask_line+0x14a>
        if(k < 0) {
 800b98a:	1c50      	adds	r0, r2, #1
 800b98c:	f53f af3d 	bmi.w	800b80a <lv_draw_mask_line+0x4e>
        if(k <= len) {
 800b990:	4283      	cmp	r3, r0
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800b992:	f6ff af60 	blt.w	800b856 <lv_draw_mask_line+0x9a>
 800b996:	1a19      	subs	r1, r3, r0
 800b998:	4428      	add	r0, r5
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800b99a:	f00c f9bb 	bl	8017d14 <lv_memset_00>
 800b99e:	e75a      	b.n	800b856 <lv_draw_mask_line+0x9a>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b9a0:	69b0      	ldr	r0, [r6, #24]
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	4344      	muls	r4, r0
    if(p->xy_steep > 0) x_at_y++;
 800b9a6:	2800      	cmp	r0, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b9a8:	ea4f 21a4 	mov.w	r1, r4, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800b9ac:	bfcc      	ite	gt
 800b9ae:	1c4f      	addgt	r7, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800b9b0:	460f      	movle	r7, r1
    if(x_at_y < abs_x) {
 800b9b2:	4547      	cmp	r7, r8
 800b9b4:	f6ff af60 	blt.w	800b878 <lv_draw_mask_line+0xbc>
    if(x_at_y > abs_x + len) {
 800b9b8:	eb03 0708 	add.w	r7, r3, r8
 800b9bc:	42b9      	cmp	r1, r7
 800b9be:	f73f af6b 	bgt.w	800b898 <lv_draw_mask_line+0xdc>
    int32_t xsi = xs >> 8;
 800b9c2:	f344 2c8d 	sbfx	ip, r4, #10, #14
    int32_t xsf = xs & 0xFF;
 800b9c6:	f3c4 0787 	ubfx	r7, r4, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b9ca:	4404      	add	r4, r0
    int32_t xei = xe >> 8;
 800b9cc:	f344 298d 	sbfx	r9, r4, #10, #14
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800b9d0:	0221      	lsls	r1, r4, #8
    k = xsi - abs_x;
 800b9d2:	ebac 0408 	sub.w	r4, ip, r8
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800b9d6:	45cc      	cmp	ip, r9
 800b9d8:	f000 8095 	beq.w	800bb06 <lv_draw_mask_line+0x34a>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	da52      	bge.n	800ba86 <lv_draw_mask_line+0x2ca>
 800b9e0:	f104 3aff 	add.w	sl, r4, #4294967295
 800b9e4:	2f00      	cmp	r7, #0
 800b9e6:	f000 808c 	beq.w	800bb02 <lv_draw_mask_line+0x346>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b9ea:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 800b9ec:	2c00      	cmp	r4, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800b9ee:	f1c1 0100 	rsb	r1, r1, #0
 800b9f2:	fb07 f101 	mul.w	r1, r7, r1
 800b9f6:	ea4f 28a1 	mov.w	r8, r1, asr #10
            if(k >= 0 && k < len) {
 800b9fa:	db0c      	blt.n	800ba16 <lv_draw_mask_line+0x25a>
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	dd0a      	ble.n	800ba16 <lv_draw_mask_line+0x25a>
                m = (y_inters * xsf) >> 9;
 800ba00:	fb08 f107 	mul.w	r1, r8, r7
 800ba04:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800ba08:	b10a      	cbz	r2, 800ba0e <lv_draw_mask_line+0x252>
 800ba0a:	43c9      	mvns	r1, r1
 800ba0c:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ba0e:	5d28      	ldrb	r0, [r5, r4]
 800ba10:	f7ff fec6 	bl	800b7a0 <mask_mix>
 800ba14:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800ba16:	f1ba 0f00 	cmp.w	sl, #0
 800ba1a:	db16      	blt.n	800ba4a <lv_draw_mask_line+0x28e>
 800ba1c:	4553      	cmp	r3, sl
 800ba1e:	dd14      	ble.n	800ba4a <lv_draw_mask_line+0x28e>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800ba20:	69b2      	ldr	r2, [r6, #24]
 800ba22:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ba26:	f815 000a 	ldrb.w	r0, [r5, sl]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800ba2a:	4252      	negs	r2, r2
 800ba2c:	434a      	muls	r2, r1
 800ba2e:	1292      	asrs	r2, r2, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800ba30:	4351      	muls	r1, r2
                if(p->inv) m = 255 - m;
 800ba32:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800ba36:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800ba3a:	0797      	lsls	r7, r2, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800ba3c:	bf5c      	itt	pl
 800ba3e:	43c9      	mvnpl	r1, r1
 800ba40:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800ba42:	f7ff fead 	bl	800b7a0 <mask_mix>
 800ba46:	f805 000a 	strb.w	r0, [r5, sl]
            if(p->inv) {
 800ba4a:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800ba4e:	0796      	lsls	r6, r2, #30
 800ba50:	d514      	bpl.n	800ba7c <lv_draw_mask_line+0x2c0>
                if(k > len) k = len;
 800ba52:	4553      	cmp	r3, sl
 800ba54:	f6ff aeff 	blt.w	800b856 <lv_draw_mask_line+0x9a>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800ba58:	f1ba 0f00 	cmp.w	sl, #0
 800ba5c:	f77f aefb 	ble.w	800b856 <lv_draw_mask_line+0x9a>
 800ba60:	4651      	mov	r1, sl
 800ba62:	e78e      	b.n	800b982 <lv_draw_mask_line+0x1c6>
        k++;
 800ba64:	3401      	adds	r4, #1
 800ba66:	429c      	cmp	r4, r3
 800ba68:	bfa8      	it	ge
 800ba6a:	461c      	movge	r4, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800ba6c:	2c00      	cmp	r4, #0
 800ba6e:	f43f aecc 	beq.w	800b80a <lv_draw_mask_line+0x4e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800ba72:	f77f aef0 	ble.w	800b856 <lv_draw_mask_line+0x9a>
 800ba76:	1b19      	subs	r1, r3, r4
 800ba78:	1928      	adds	r0, r5, r4
 800ba7a:	e78e      	b.n	800b99a <lv_draw_mask_line+0x1de>
            k += 2;
 800ba7c:	1c60      	adds	r0, r4, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800ba7e:	4283      	cmp	r3, r0
 800ba80:	db3b      	blt.n	800bafa <lv_draw_mask_line+0x33e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800ba82:	2800      	cmp	r0, #0
 800ba84:	e785      	b.n	800b992 <lv_draw_mask_line+0x1d6>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800ba86:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800ba8a:	69f1      	ldr	r1, [r6, #28]
            if(k >= 0 && k < len) {
 800ba8c:	2c00      	cmp	r4, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800ba8e:	fb01 f107 	mul.w	r1, r1, r7
 800ba92:	ea4f 28a1 	mov.w	r8, r1, asr #10
            if(k >= 0 && k < len) {
 800ba96:	db0c      	blt.n	800bab2 <lv_draw_mask_line+0x2f6>
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	dd0a      	ble.n	800bab2 <lv_draw_mask_line+0x2f6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800ba9c:	fb08 f707 	mul.w	r7, r8, r7
 800baa0:	f3c7 2147 	ubfx	r1, r7, #9, #8
                if(p->inv) m = 255 - m;
 800baa4:	b90a      	cbnz	r2, 800baaa <lv_draw_mask_line+0x2ee>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800baa6:	43c9      	mvns	r1, r1
 800baa8:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800baaa:	5d28      	ldrb	r0, [r5, r4]
 800baac:	f7ff fe78 	bl	800b7a0 <mask_mix>
 800bab0:	5528      	strb	r0, [r5, r4]
            if(k >= 0 && k < len) {
 800bab2:	1c62      	adds	r2, r4, #1
 800bab4:	d413      	bmi.n	800bade <lv_draw_mask_line+0x322>
 800bab6:	4293      	cmp	r3, r2
 800bab8:	dd11      	ble.n	800bade <lv_draw_mask_line+0x322>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800baba:	f1c8 01ff 	rsb	r1, r8, #255	; 0xff
 800babe:	69b0      	ldr	r0, [r6, #24]
 800bac0:	4348      	muls	r0, r1
 800bac2:	1280      	asrs	r0, r0, #10
                m = ((255 - y_inters) * x_inters) >> 9;
 800bac4:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
 800bac6:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = ((255 - y_inters) * x_inters) >> 9;
 800baca:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
 800bace:	0780      	lsls	r0, r0, #30
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800bad0:	5ca8      	ldrb	r0, [r5, r2]
                if(p->inv) m = 255 - m;
 800bad2:	bf44      	itt	mi
 800bad4:	43c9      	mvnmi	r1, r1
 800bad6:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800bad8:	f7ff fe62 	bl	800b7a0 <mask_mix>
 800badc:	54a8      	strb	r0, [r5, r2]
            if(p->inv) {
 800bade:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800bae2:	0792      	lsls	r2, r2, #30
 800bae4:	d507      	bpl.n	800baf6 <lv_draw_mask_line+0x33a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	f6ff ae8f 	blt.w	800b80a <lv_draw_mask_line+0x4e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800baec:	2c00      	cmp	r4, #0
 800baee:	f6ff aeb2 	blt.w	800b856 <lv_draw_mask_line+0x9a>
 800baf2:	4621      	mov	r1, r4
 800baf4:	e745      	b.n	800b982 <lv_draw_mask_line+0x1c6>
            k++;
 800baf6:	3402      	adds	r4, #2
 800baf8:	e7b5      	b.n	800ba66 <lv_draw_mask_line+0x2aa>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800bafa:	2001      	movs	r0, #1
 800bafc:	e67f      	b.n	800b7fe <lv_draw_mask_line+0x42>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	e699      	b.n	800b836 <lv_draw_mask_line+0x7a>
 800bb02:	4654      	mov	r4, sl
        xsf = 0xFF;
 800bb04:	27ff      	movs	r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800bb06:	2c00      	cmp	r4, #0
 800bb08:	db0d      	blt.n	800bb26 <lv_draw_mask_line+0x36a>
 800bb0a:	42a3      	cmp	r3, r4
 800bb0c:	dd0b      	ble.n	800bb26 <lv_draw_mask_line+0x36a>
    int32_t xef = xe & 0xFF;
 800bb0e:	f3c1 2187 	ubfx	r1, r1, #10, #8
            m = (xsf + xef) >> 1;
 800bb12:	4439      	add	r1, r7
 800bb14:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
 800bb18:	b10a      	cbz	r2, 800bb1e <lv_draw_mask_line+0x362>
 800bb1a:	43c9      	mvns	r1, r1
 800bb1c:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800bb1e:	5d28      	ldrb	r0, [r5, r4]
 800bb20:	f7ff fe3e 	bl	800b7a0 <mask_mix>
 800bb24:	5528      	strb	r0, [r5, r4]
        if(p->inv) {
 800bb26:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 800bb2a:	0792      	lsls	r2, r2, #30
 800bb2c:	d59a      	bpl.n	800ba64 <lv_draw_mask_line+0x2a8>
            k = xsi - abs_x;
 800bb2e:	eba9 0108 	sub.w	r1, r9, r8
            if(k >= len) {
 800bb32:	428b      	cmp	r3, r1
 800bb34:	f77f ae69 	ble.w	800b80a <lv_draw_mask_line+0x4e>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800bb38:	2900      	cmp	r1, #0
 800bb3a:	f6ff ae8c 	blt.w	800b856 <lv_draw_mask_line+0x9a>
 800bb3e:	e720      	b.n	800b982 <lv_draw_mask_line+0x1c6>

0800bb40 <lv_draw_mask_angle>:
{
 800bb40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb46:	4606      	mov	r6, r0
 800bb48:	4691      	mov	r9, r2
 800bb4a:	4688      	mov	r8, r1
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800bb4c:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
{
 800bb50:	461f      	mov	r7, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800bb52:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800bb56:	eba2 0c00 	sub.w	ip, r2, r0
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800bb5a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800bb5e:	1b09      	subs	r1, r1, r4
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800bb60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb64:	2ab3      	cmp	r2, #179	; 0xb3
 800bb66:	dc6c      	bgt.n	800bc42 <lv_draw_mask_angle+0x102>
 800bb68:	2bb3      	cmp	r3, #179	; 0xb3
 800bb6a:	f300 80ce 	bgt.w	800bd0a <lv_draw_mask_angle+0x1ca>
 800bb6e:	2a00      	cmp	r2, #0
 800bb70:	f000 80cc 	beq.w	800bd0c <lv_draw_mask_angle+0x1cc>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 80ce 	beq.w	800bd16 <lv_draw_mask_angle+0x1d6>
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	f340 80cb 	ble.w	800bd16 <lv_draw_mask_angle+0x1d6>
        if(abs_y < p->cfg.vertex_p.y) {
 800bb80:	4548      	cmp	r0, r9
 800bb82:	dd04      	ble.n	800bb8e <lv_draw_mask_angle+0x4e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800bb84:	2501      	movs	r5, #1
}
 800bb86:	4628      	mov	r0, r5
 800bb88:	b002      	add	sp, #8
 800bb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bb8e:	6d68      	ldr	r0, [r5, #84]	; 0x54
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bb90:	b292      	uxth	r2, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bb92:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bb94:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bb98:	fb0c 4404 	mla	r4, ip, r4, r4
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800bb9c:	f102 3cff 	add.w	ip, r2, #4294967295
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bba0:	1280      	asrs	r0, r0, #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800bba2:	f1bc 0f59 	cmp.w	ip, #89	; 0x59
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bba6:	ea4f 24a4 	mov.w	r4, r4, asr #10
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800bbaa:	d83b      	bhi.n	800bc24 <lv_draw_mask_angle+0xe4>
 800bbac:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bbb0:	b29b      	uxth	r3, r3
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800bbb2:	1e5a      	subs	r2, r3, #1
 800bbb4:	2a59      	cmp	r2, #89	; 0x59
 800bbb6:	d83b      	bhi.n	800bc30 <lv_draw_mask_angle+0xf0>
 800bbb8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800bbbc:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800bbbe:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800bbc2:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800bbc4:	42bc      	cmp	r4, r7
 800bbc6:	bfa8      	it	ge
 800bbc8:	463c      	movge	r4, r7
        if(tmp > 0) {
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	dd36      	ble.n	800bc3c <lv_draw_mask_angle+0xfc>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 800bbce:	f105 0310 	add.w	r3, r5, #16
 800bbd2:	464a      	mov	r2, r9
 800bbd4:	4641      	mov	r1, r8
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	b223      	sxth	r3, r4
 800bbdc:	f7ff fdee 	bl	800b7bc <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800bbe0:	4682      	mov	sl, r0
 800bbe2:	b918      	cbnz	r0, 800bbec <lv_draw_mask_angle+0xac>
                lv_memset_00(&mask_buf[0], tmp);
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f00c f894 	bl	8017d14 <lv_memset_00>
        if(tmp > len) tmp = len;
 800bbec:	42bc      	cmp	r4, r7
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800bbee:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800bbf2:	bfa8      	it	ge
 800bbf4:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800bbf6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800bbfa:	b2a1      	uxth	r1, r4
 800bbfc:	4426      	add	r6, r4
 800bbfe:	1a7b      	subs	r3, r7, r1
 800bc00:	4441      	add	r1, r8
 800bc02:	9500      	str	r5, [sp, #0]
 800bc04:	b21b      	sxth	r3, r3
 800bc06:	464a      	mov	r2, r9
 800bc08:	b209      	sxth	r1, r1
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7ff fdd6 	bl	800b7bc <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800bc10:	4605      	mov	r5, r0
 800bc12:	b918      	cbnz	r0, 800bc1c <lv_draw_mask_angle+0xdc>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800bc14:	1b39      	subs	r1, r7, r4
 800bc16:	4630      	mov	r0, r6
 800bc18:	f00c f87c 	bl	8017d14 <lv_memset_00>
        if(res1 == res2) return res1;
 800bc1c:	45aa      	cmp	sl, r5
 800bc1e:	d0b2      	beq.n	800bb86 <lv_draw_mask_angle+0x46>
        else return LV_DRAW_MASK_RES_CHANGED;
 800bc20:	2502      	movs	r5, #2
 800bc22:	e7b0      	b.n	800bb86 <lv_draw_mask_angle+0x46>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bc24:	3a5b      	subs	r2, #91	; 0x5b
 800bc26:	2ab2      	cmp	r2, #178	; 0xb2
 800bc28:	bf98      	it	ls
 800bc2a:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bc2e:	e7bf      	b.n	800bbb0 <lv_draw_mask_angle+0x70>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bc30:	3b5b      	subs	r3, #91	; 0x5b
 800bc32:	2bb2      	cmp	r3, #178	; 0xb2
 800bc34:	bf98      	it	ls
 800bc36:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bc3a:	e7bf      	b.n	800bbbc <lv_draw_mask_angle+0x7c>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800bc3c:	f04f 0a01 	mov.w	sl, #1
 800bc40:	e7d4      	b.n	800bbec <lv_draw_mask_angle+0xac>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 800bc42:	2ab4      	cmp	r2, #180	; 0xb4
 800bc44:	d051      	beq.n	800bcea <lv_draw_mask_angle+0x1aa>
 800bc46:	2bb4      	cmp	r3, #180	; 0xb4
 800bc48:	dd72      	ble.n	800bd30 <lv_draw_mask_angle+0x1f0>
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	dd70      	ble.n	800bd30 <lv_draw_mask_angle+0x1f0>
        if(abs_y > p->cfg.vertex_p.y) {
 800bc4e:	4548      	cmp	r0, r9
 800bc50:	db98      	blt.n	800bb84 <lv_draw_mask_angle+0x44>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bc52:	6d68      	ldr	r0, [r5, #84]	; 0x54
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bc54:	b292      	uxth	r2, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bc56:	6aac      	ldr	r4, [r5, #40]	; 0x28
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bc58:	fb00 f00c 	mul.w	r0, r0, ip
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bc5c:	fb0c 4404 	mla	r4, ip, r4, r4
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bc60:	f46f 7c87 	mvn.w	ip, #270	; 0x10e
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800bc64:	1280      	asrs	r0, r0, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bc66:	4494      	add	ip, r2
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800bc68:	12a4      	asrs	r4, r4, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bc6a:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
 800bc6e:	d82d      	bhi.n	800bccc <lv_draw_mask_angle+0x18c>
 800bc70:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	f46f 7287 	mvn.w	r2, #270	; 0x10e
 800bc7a:	189a      	adds	r2, r3, r2
 800bc7c:	2a58      	cmp	r2, #88	; 0x58
 800bc7e:	d82b      	bhi.n	800bcd8 <lv_draw_mask_angle+0x198>
 800bc80:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800bc84:	1b00      	subs	r0, r0, r4
        int32_t tmp = start_angle_last + dist - rel_x;
 800bc86:	eb04 0460 	add.w	r4, r4, r0, asr #1
 800bc8a:	1a64      	subs	r4, r4, r1
        if(tmp > len) tmp = len;
 800bc8c:	42bc      	cmp	r4, r7
 800bc8e:	bfa8      	it	ge
 800bc90:	463c      	movge	r4, r7
        if(tmp > 0) {
 800bc92:	2c00      	cmp	r4, #0
 800bc94:	dd26      	ble.n	800bce4 <lv_draw_mask_angle+0x1a4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 800bc96:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800bc9a:	464a      	mov	r2, r9
 800bc9c:	4641      	mov	r1, r8
 800bc9e:	4630      	mov	r0, r6
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	b223      	sxth	r3, r4
 800bca4:	f7ff fd8a 	bl	800b7bc <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800bca8:	4682      	mov	sl, r0
 800bcaa:	b918      	cbnz	r0, 800bcb4 <lv_draw_mask_angle+0x174>
                lv_memset_00(&mask_buf[0], tmp);
 800bcac:	4621      	mov	r1, r4
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f00c f830 	bl	8017d14 <lv_memset_00>
        if(tmp > len) tmp = len;
 800bcb4:	42bc      	cmp	r4, r7
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800bcb6:	f105 0510 	add.w	r5, r5, #16
 800bcba:	bfa8      	it	ge
 800bcbc:	463c      	movge	r4, r7
        if(tmp < 0) tmp = 0;
 800bcbe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800bcc2:	b2a1      	uxth	r1, r4
 800bcc4:	4426      	add	r6, r4
 800bcc6:	1a7b      	subs	r3, r7, r1
 800bcc8:	4441      	add	r1, r8
 800bcca:	e79a      	b.n	800bc02 <lv_draw_mask_angle+0xc2>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bccc:	3a5b      	subs	r2, #91	; 0x5b
 800bcce:	2ab2      	cmp	r2, #178	; 0xb2
 800bcd0:	bf98      	it	ls
 800bcd2:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bcd6:	e7cd      	b.n	800bc74 <lv_draw_mask_angle+0x134>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800bcd8:	3b5b      	subs	r3, #91	; 0x5b
 800bcda:	2bb2      	cmp	r3, #178	; 0xb2
 800bcdc:	bf98      	it	ls
 800bcde:	ea04 74e4 	andls.w	r4, r4, r4, asr #31
 800bce2:	e7cf      	b.n	800bc84 <lv_draw_mask_angle+0x144>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800bce4:	f04f 0a01 	mov.w	sl, #1
 800bce8:	e7e4      	b.n	800bcb4 <lv_draw_mask_angle+0x174>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800bcea:	4548      	cmp	r0, r9
 800bcec:	bfcc      	ite	gt
 800bcee:	2401      	movgt	r4, #1
 800bcf0:	2403      	movle	r4, #3
        if(p->cfg.end_angle == 180) {
 800bcf2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcf6:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 800bcfa:	2bb4      	cmp	r3, #180	; 0xb4
 800bcfc:	d11c      	bne.n	800bd38 <lv_draw_mask_angle+0x1f8>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800bcfe:	4548      	cmp	r0, r9
 800bd00:	bfcc      	ite	gt
 800bd02:	2003      	movgt	r0, #3
 800bd04:	2001      	movle	r0, #1
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800bd06:	bb5c      	cbnz	r4, 800bd60 <lv_draw_mask_angle+0x220>
 800bd08:	e02f      	b.n	800bd6a <lv_draw_mask_angle+0x22a>
        else if(p->cfg.start_angle == 0) {
 800bd0a:	b922      	cbnz	r2, 800bd16 <lv_draw_mask_angle+0x1d6>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800bd0c:	4548      	cmp	r0, r9
 800bd0e:	bfcc      	ite	gt
 800bd10:	2403      	movgt	r4, #3
 800bd12:	2401      	movle	r4, #1
 800bd14:	e7ed      	b.n	800bcf2 <lv_draw_mask_angle+0x1b2>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800bd16:	4548      	cmp	r0, r9
 800bd18:	dc0c      	bgt.n	800bd34 <lv_draw_mask_angle+0x1f4>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 800bd1a:	f105 0310 	add.w	r3, r5, #16
 800bd1e:	464a      	mov	r2, r9
 800bd20:	4641      	mov	r1, r8
 800bd22:	4630      	mov	r0, r6
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	463b      	mov	r3, r7
 800bd28:	f7ff fd48 	bl	800b7bc <lv_draw_mask_line>
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	e7e0      	b.n	800bcf2 <lv_draw_mask_angle+0x1b2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800bd30:	4548      	cmp	r0, r9
 800bd32:	dcf2      	bgt.n	800bd1a <lv_draw_mask_angle+0x1da>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800bd34:	2403      	movs	r4, #3
 800bd36:	e7dc      	b.n	800bcf2 <lv_draw_mask_angle+0x1b2>
        else if(p->cfg.end_angle == 0) {
 800bd38:	b923      	cbnz	r3, 800bd44 <lv_draw_mask_angle+0x204>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800bd3a:	4548      	cmp	r0, r9
 800bd3c:	bfd4      	ite	le
 800bd3e:	2003      	movle	r0, #3
 800bd40:	2001      	movgt	r0, #1
 800bd42:	e7e0      	b.n	800bd06 <lv_draw_mask_angle+0x1c6>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800bd44:	2bb3      	cmp	r3, #179	; 0xb3
 800bd46:	dc12      	bgt.n	800bd6e <lv_draw_mask_angle+0x22e>
 800bd48:	4548      	cmp	r0, r9
 800bd4a:	dc12      	bgt.n	800bd72 <lv_draw_mask_angle+0x232>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800bd4c:	353c      	adds	r5, #60	; 0x3c
 800bd4e:	463b      	mov	r3, r7
 800bd50:	464a      	mov	r2, r9
 800bd52:	4641      	mov	r1, r8
 800bd54:	4630      	mov	r0, r6
 800bd56:	9500      	str	r5, [sp, #0]
 800bd58:	f7ff fd30 	bl	800b7bc <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800bd5c:	b12c      	cbz	r4, 800bd6a <lv_draw_mask_angle+0x22a>
 800bd5e:	b120      	cbz	r0, 800bd6a <lv_draw_mask_angle+0x22a>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 800bd60:	2c03      	cmp	r4, #3
 800bd62:	d108      	bne.n	800bd76 <lv_draw_mask_angle+0x236>
 800bd64:	2803      	cmp	r0, #3
 800bd66:	f47f af5b 	bne.w	800bc20 <lv_draw_mask_angle+0xe0>
 800bd6a:	2500      	movs	r5, #0
 800bd6c:	e70b      	b.n	800bb86 <lv_draw_mask_angle+0x46>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800bd6e:	4548      	cmp	r0, r9
 800bd70:	dcec      	bgt.n	800bd4c <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800bd72:	2003      	movs	r0, #3
 800bd74:	e7c7      	b.n	800bd06 <lv_draw_mask_angle+0x1c6>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 800bd76:	2c01      	cmp	r4, #1
 800bd78:	f47f af52 	bne.w	800bc20 <lv_draw_mask_angle+0xe0>
 800bd7c:	2801      	cmp	r0, #1
 800bd7e:	f47f af4f 	bne.w	800bc20 <lv_draw_mask_angle+0xe0>
 800bd82:	e6ff      	b.n	800bb84 <lv_draw_mask_angle+0x44>

0800bd84 <lv_draw_mask_radius>:
{
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	b08b      	sub	sp, #44	; 0x2c
 800bd8a:	460f      	mov	r7, r1
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	461c      	mov	r4, r3
 800bd90:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
 800bd94:	f89a b012 	ldrb.w	fp, [sl, #18]
    dest->y1 = src->y1;
 800bd98:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
    if(outer == false) {
 800bd9c:	f01b 0101 	ands.w	r1, fp, #1
    dest->y2 = src->y2;
 800bda0:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 800bda4:	9101      	str	r1, [sp, #4]
 800bda6:	d134      	bne.n	800be12 <lv_draw_mask_radius+0x8e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800bda8:	4282      	cmp	r2, r0
 800bdaa:	da01      	bge.n	800bdb0 <lv_draw_mask_radius+0x2c>
                    return LV_DRAW_MASK_RES_TRANSP;
 800bdac:	2000      	movs	r0, #0
 800bdae:	e033      	b.n	800be18 <lv_draw_mask_radius+0x94>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	dcfb      	bgt.n	800bdac <lv_draw_mask_radius+0x28>
    dest->x1 = src->x1;
 800bdb4:	f9ba c008 	ldrsh.w	ip, [sl, #8]
    int32_t radius = p->cfg.radius;
 800bdb8:	f9ba 9010 	ldrsh.w	r9, [sl, #16]
    dest->x2 = src->x2;
 800bdbc:	f9ba 600c 	ldrsh.w	r6, [sl, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800bdc0:	ebac 0807 	sub.w	r8, ip, r7
 800bdc4:	eb0c 0109 	add.w	r1, ip, r9
 800bdc8:	428f      	cmp	r7, r1
 800bdca:	db04      	blt.n	800bdd6 <lv_draw_mask_radius+0x52>
 800bdcc:	19e1      	adds	r1, r4, r7
 800bdce:	eba6 0e09 	sub.w	lr, r6, r9
 800bdd2:	4571      	cmp	r1, lr
 800bdd4:	dd07      	ble.n	800bde6 <lv_draw_mask_radius+0x62>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800bdd6:	eb00 0109 	add.w	r1, r0, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800bdda:	428a      	cmp	r2, r1
 800bddc:	db37      	blt.n	800be4e <lv_draw_mask_radius+0xca>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800bdde:	eba3 0109 	sub.w	r1, r3, r9
 800bde2:	428a      	cmp	r2, r1
 800bde4:	dc33      	bgt.n	800be4e <lv_draw_mask_radius+0xca>
        if(outer == false) {
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	bb1b      	cbnz	r3, 800be32 <lv_draw_mask_radius+0xae>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800bdea:	4544      	cmp	r4, r8
 800bdec:	dbde      	blt.n	800bdac <lv_draw_mask_radius+0x28>
            if(last >= 0) {
 800bdee:	f1b8 0f00 	cmp.w	r8, #0
 800bdf2:	db03      	blt.n	800bdfc <lv_draw_mask_radius+0x78>
                lv_memset_00(&mask_buf[0], last);
 800bdf4:	4641      	mov	r1, r8
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f00b ff8c 	bl	8017d14 <lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
 800bdfc:	1bf1      	subs	r1, r6, r7
 800bdfe:	1c48      	adds	r0, r1, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800be00:	2800      	cmp	r0, #0
 800be02:	ddd3      	ble.n	800bdac <lv_draw_mask_radius+0x28>
            else if(first < len) {
 800be04:	4284      	cmp	r4, r0
 800be06:	dd0d      	ble.n	800be24 <lv_draw_mask_radius+0xa0>
                lv_memset_00(&mask_buf[first], len - first);
 800be08:	1a21      	subs	r1, r4, r0
                    lv_memset_00(&mask_buf[first], len_tmp);
 800be0a:	4428      	add	r0, r5
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800be0c:	f00b ff82 	bl	8017d14 <lv_memset_00>
 800be10:	e00d      	b.n	800be2e <lv_draw_mask_radius+0xaa>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800be12:	4282      	cmp	r2, r0
 800be14:	da03      	bge.n	800be1e <lv_draw_mask_radius+0x9a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800be16:	2001      	movs	r0, #1
}
 800be18:	b00b      	add	sp, #44	; 0x2c
 800be1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800be1e:	429a      	cmp	r2, r3
 800be20:	ddc8      	ble.n	800bdb4 <lv_draw_mask_radius+0x30>
 800be22:	e7f8      	b.n	800be16 <lv_draw_mask_radius+0x92>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800be24:	f1b8 0f00 	cmp.w	r8, #0
 800be28:	d101      	bne.n	800be2e <lv_draw_mask_radius+0xaa>
 800be2a:	4284      	cmp	r4, r0
 800be2c:	d0f3      	beq.n	800be16 <lv_draw_mask_radius+0x92>
    return LV_DRAW_MASK_RES_CHANGED;
 800be2e:	2002      	movs	r0, #2
 800be30:	e7f2      	b.n	800be18 <lv_draw_mask_radius+0x94>
            if(first < 0) first = 0;
 800be32:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
            if(first <= len) {
 800be36:	42a0      	cmp	r0, r4
 800be38:	dcf9      	bgt.n	800be2e <lv_draw_mask_radius+0xaa>
                int32_t last =  rect.x2 - abs_x - first + 1;
 800be3a:	1bf1      	subs	r1, r6, r7
 800be3c:	1a09      	subs	r1, r1, r0
 800be3e:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800be40:	1843      	adds	r3, r0, r1
 800be42:	42a3      	cmp	r3, r4
 800be44:	dd00      	ble.n	800be48 <lv_draw_mask_radius+0xc4>
 800be46:	1a21      	subs	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800be48:	2900      	cmp	r1, #0
 800be4a:	dbf0      	blt.n	800be2e <lv_draw_mask_radius+0xaa>
 800be4c:	e7dd      	b.n	800be0a <lv_draw_mask_radius+0x86>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800be4e:	1c71      	adds	r1, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800be50:	b286      	uxth	r6, r0
 800be52:	1c58      	adds	r0, r3, #1
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
 800be54:	fb09 fb09 	mul.w	fp, r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800be58:	eba1 070c 	sub.w	r7, r1, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800be5c:	1b80      	subs	r0, r0, r6
    abs_y -= rect.y1;
 800be5e:	1b96      	subs	r6, r2, r6
    int32_t w = lv_area_get_width(&rect);
 800be60:	b23f      	sxth	r7, r7
    abs_y -= rect.y1;
 800be62:	b236      	sxth	r6, r6
    int32_t h = lv_area_get_height(&rect);
 800be64:	b200      	sxth	r0, r0
    if(abs_y < radius || abs_y > h - radius - 1) {
 800be66:	45b1      	cmp	r9, r6
 800be68:	f300 81a4 	bgt.w	800c1b4 <lv_draw_mask_radius+0x430>
 800be6c:	eba0 0309 	sub.w	r3, r0, r9
 800be70:	429e      	cmp	r6, r3
 800be72:	dbdc      	blt.n	800be2e <lv_draw_mask_radius+0xaa>
            y = radius - (h - abs_y) + 1;
 800be74:	1b86      	subs	r6, r0, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800be76:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            if((y - 1) == p->y_prev) {
 800be7a:	f8da 3014 	ldr.w	r3, [sl, #20]
            y = radius - (h - abs_y) + 1;
 800be7e:	eba9 0006 	sub.w	r0, r9, r6
        if(radius <= 256) sqrt_mask = 0x800;
 800be82:	bfd4      	ite	le
 800be84:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800be88:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
 800be8c:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
 800be8e:	f100 0601 	add.w	r6, r0, #1
            if((y - 1) == p->y_prev) {
 800be92:	d06c      	beq.n	800bf6e <lv_draw_mask_radius+0x1ea>
                lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800be94:	a907      	add	r1, sp, #28
 800be96:	fb00 b010 	mls	r0, r0, r0, fp
 800be9a:	9202      	str	r2, [sp, #8]
 800be9c:	f00b fcae 	bl	80177fc <lv_sqrt>
 800bea0:	9a02      	ldr	r2, [sp, #8]
 800bea2:	e067      	b.n	800bf74 <lv_draw_mask_radius+0x1f0>
                x0.i = p->y_prev_x.i;
 800bea4:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bea8:	9306      	str	r3, [sp, #24]
            lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
 800beaa:	1e73      	subs	r3, r6, #1
 800beac:	a907      	add	r1, sp, #28
 800beae:	9203      	str	r2, [sp, #12]
 800beb0:	fb03 b013 	mls	r0, r3, r3, fp
 800beb4:	9302      	str	r3, [sp, #8]
 800beb6:	f00b fca1 	bl	80177fc <lv_sqrt>
            p->y_prev = y - 1;
 800beba:	9b02      	ldr	r3, [sp, #8]
 800bebc:	9a03      	ldr	r2, [sp, #12]
 800bebe:	f8ca 3014 	str.w	r3, [sl, #20]
            p->y_prev_x.i = x1.i;
 800bec2:	9b07      	ldr	r3, [sp, #28]
 800bec4:	f8ca 3018 	str.w	r3, [sl, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
 800bec8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800becc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800bed0:	3901      	subs	r1, #1
 800bed2:	428b      	cmp	r3, r1
 800bed4:	d107      	bne.n	800bee6 <lv_draw_mask_radius+0x162>
 800bed6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800beda:	b921      	cbnz	r1, 800bee6 <lv_draw_mask_radius+0x162>
            x1.f = 0xFF;
 800bedc:	21ff      	movs	r1, #255	; 0xff
            x1.i--;
 800bede:	f8ad 301c 	strh.w	r3, [sp, #28]
            x1.f = 0xFF;
 800bee2:	f8ad 101e 	strh.w	r1, [sp, #30]
        if(x0.i == x1.i) {
 800bee6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800beea:	4299      	cmp	r1, r3
 800beec:	d15b      	bne.n	800bfa6 <lv_draw_mask_radius+0x222>
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800beee:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800bef2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800bef6:	440a      	add	r2, r1
            if(outer) m = 255 - m;
 800bef8:	9901      	ldr	r1, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
 800befa:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
 800befe:	b109      	cbz	r1, 800bf04 <lv_draw_mask_radius+0x180>
 800bf00:	43d2      	mvns	r2, r2
 800bf02:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
 800bf04:	eba9 0903 	sub.w	r9, r9, r3
 800bf08:	f109 39ff 	add.w	r9, r9, #4294967295
            if(kl >= 0 && kl < len) {
 800bf0c:	eb18 0609 	adds.w	r6, r8, r9
 800bf10:	d406      	bmi.n	800bf20 <lv_draw_mask_radius+0x19c>
 800bf12:	42b4      	cmp	r4, r6
 800bf14:	dd04      	ble.n	800bf20 <lv_draw_mask_radius+0x19c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800bf16:	5da8      	ldrb	r0, [r5, r6]
 800bf18:	4611      	mov	r1, r2
 800bf1a:	f7ff fc41 	bl	800b7a0 <mask_mix>
 800bf1e:	55a8      	strb	r0, [r5, r6]
            int32_t kr = k + (w - ofs - 1);
 800bf20:	eba7 0909 	sub.w	r9, r7, r9
 800bf24:	f109 30ff 	add.w	r0, r9, #4294967295
            if(kr >= 0 && kr < len) {
 800bf28:	eb10 0808 	adds.w	r8, r0, r8
 800bf2c:	d408      	bmi.n	800bf40 <lv_draw_mask_radius+0x1bc>
 800bf2e:	4544      	cmp	r4, r8
 800bf30:	dd06      	ble.n	800bf40 <lv_draw_mask_radius+0x1bc>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800bf32:	f815 0008 	ldrb.w	r0, [r5, r8]
 800bf36:	4611      	mov	r1, r2
 800bf38:	f7ff fc32 	bl	800b7a0 <mask_mix>
 800bf3c:	f805 0008 	strb.w	r0, [r5, r8]
            if(outer == false) {
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	bb23      	cbnz	r3, 800bf8e <lv_draw_mask_radius+0x20a>
                if(kl > len)  {
 800bf44:	42b4      	cmp	r4, r6
 800bf46:	f6ff af31 	blt.w	800bdac <lv_draw_mask_radius+0x28>
                if(kl >= 0) {
 800bf4a:	2e00      	cmp	r6, #0
 800bf4c:	db03      	blt.n	800bf56 <lv_draw_mask_radius+0x1d2>
                    lv_memset_00(&mask_buf[0], kl);
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
 800bf52:	f00b fedf 	bl	8017d14 <lv_memset_00>
                if(kr < 0) {
 800bf56:	f118 0801 	adds.w	r8, r8, #1
 800bf5a:	f53f af27 	bmi.w	800bdac <lv_draw_mask_radius+0x28>
                if(kr <= len) {
 800bf5e:	4544      	cmp	r4, r8
 800bf60:	f6ff af65 	blt.w	800be2e <lv_draw_mask_radius+0xaa>
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800bf64:	eba4 0108 	sub.w	r1, r4, r8
 800bf68:	eb05 0008 	add.w	r0, r5, r8
 800bf6c:	e74e      	b.n	800be0c <lv_draw_mask_radius+0x88>
                x1.i = p->y_prev_x.i;
 800bf6e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bf72:	9307      	str	r3, [sp, #28]
            lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800bf74:	a906      	add	r1, sp, #24
 800bf76:	fb06 b016 	mls	r0, r6, r6, fp
 800bf7a:	9202      	str	r2, [sp, #8]
 800bf7c:	f00b fc3e 	bl	80177fc <lv_sqrt>
            p->y_prev_x.i = x0.i;
 800bf80:	9b06      	ldr	r3, [sp, #24]
 800bf82:	9a02      	ldr	r2, [sp, #8]
            p->y_prev = y;
 800bf84:	f8ca 6014 	str.w	r6, [sl, #20]
            p->y_prev_x.i = x0.i;
 800bf88:	f8ca 3018 	str.w	r3, [sl, #24]
 800bf8c:	e79c      	b.n	800bec8 <lv_draw_mask_radius+0x144>
                kl++;
 800bf8e:	1c70      	adds	r0, r6, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800bf90:	4544      	cmp	r4, r8
 800bf92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800bf96:	bfac      	ite	ge
 800bf98:	eba8 0100 	subge.w	r1, r8, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800bf9c:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800bf9e:	42a0      	cmp	r0, r4
 800bfa0:	f6bf af45 	bge.w	800be2e <lv_draw_mask_radius+0xaa>
 800bfa4:	e750      	b.n	800be48 <lv_draw_mask_radius+0xc4>
            int32_t ofs = radius - (x0.i + 1);
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	eba9 0903 	sub.w	r9, r9, r3
            if(outer) {
 800bfac:	9b01      	ldr	r3, [sp, #4]
            int32_t kl = k + ofs;
 800bfae:	eb08 0a09 	add.w	sl, r8, r9
            int32_t kr = k + (w - ofs - 1);
 800bfb2:	eba7 0909 	sub.w	r9, r7, r9
 800bfb6:	f109 39ff 	add.w	r9, r9, #4294967295
 800bfba:	44c8      	add	r8, r9
            if(outer) {
 800bfbc:	b18b      	cbz	r3, 800bfe2 <lv_draw_mask_radius+0x25e>
                int32_t first = kl + 1;
 800bfbe:	f10a 0001 	add.w	r0, sl, #1
                if(len_tmp + first > len) len_tmp = len - first;
 800bfc2:	4544      	cmp	r4, r8
 800bfc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                int32_t len_tmp = kr - first;
 800bfc8:	bfac      	ite	ge
 800bfca:	eba8 0100 	subge.w	r1, r8, r0
                if(len_tmp + first > len) len_tmp = len - first;
 800bfce:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
 800bfd0:	42a0      	cmp	r0, r4
 800bfd2:	da06      	bge.n	800bfe2 <lv_draw_mask_radius+0x25e>
 800bfd4:	2900      	cmp	r1, #0
 800bfd6:	db04      	blt.n	800bfe2 <lv_draw_mask_radius+0x25e>
                    lv_memset_00(&mask_buf[first], len_tmp);
 800bfd8:	4428      	add	r0, r5
 800bfda:	9202      	str	r2, [sp, #8]
 800bfdc:	f00b fe9a 	bl	8017d14 <lv_memset_00>
 800bfe0:	9a02      	ldr	r2, [sp, #8]
            uint32_t i = x0.i + 1;
 800bfe2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800bfe6:	a908      	add	r1, sp, #32
 800bfe8:	9202      	str	r2, [sp, #8]
 800bfea:	fb07 b017 	mls	r0, r7, r7, fp
            uint32_t i = x0.i + 1;
 800bfee:	f107 0901 	add.w	r9, r7, #1
            lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
 800bff2:	f00b fc03 	bl	80177fc <lv_sqrt>
            if(y_prev.f == 0) {
 800bff6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800bffa:	9a02      	ldr	r2, [sp, #8]
 800bffc:	b93b      	cbnz	r3, 800c00e <lv_draw_mask_radius+0x28a>
                y_prev.i--;
 800bffe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c002:	3b01      	subs	r3, #1
 800c004:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
 800c008:	23ff      	movs	r3, #255	; 0xff
 800c00a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
 800c00e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c012:	42b3      	cmp	r3, r6
 800c014:	db33      	blt.n	800c07e <lv_draw_mask_radius+0x2fa>
                lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
 800c016:	a909      	add	r1, sp, #36	; 0x24
 800c018:	fb09 b019 	mls	r0, r9, r9, fp
 800c01c:	f00b fbee 	bl	80177fc <lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800c020:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800c024:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800c028:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
 800c02c:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 800c030:	434b      	muls	r3, r1
                if(outer) m = 255 - m;
 800c032:	9901      	ldr	r1, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800c034:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800c038:	b909      	cbnz	r1, 800c03e <lv_draw_mask_radius+0x2ba>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
 800c03a:	43db      	mvns	r3, r3
 800c03c:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800c03e:	f1ba 0f00 	cmp.w	sl, #0
 800c042:	db08      	blt.n	800c056 <lv_draw_mask_radius+0x2d2>
 800c044:	4554      	cmp	r4, sl
 800c046:	dd06      	ble.n	800c056 <lv_draw_mask_radius+0x2d2>
 800c048:	f815 000a 	ldrb.w	r0, [r5, sl]
 800c04c:	4619      	mov	r1, r3
 800c04e:	f7ff fba7 	bl	800b7a0 <mask_mix>
 800c052:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800c056:	f1b8 0f00 	cmp.w	r8, #0
 800c05a:	db08      	blt.n	800c06e <lv_draw_mask_radius+0x2ea>
 800c05c:	4544      	cmp	r4, r8
 800c05e:	dd06      	ble.n	800c06e <lv_draw_mask_radius+0x2ea>
 800c060:	f815 0008 	ldrb.w	r0, [r5, r8]
 800c064:	4619      	mov	r1, r3
 800c066:	f7ff fb9b 	bl	800b7a0 <mask_mix>
 800c06a:	f805 0008 	strb.w	r0, [r5, r8]
                kl--;
 800c06e:	f10a 3aff 	add.w	sl, sl, #4294967295
                kr++;
 800c072:	f108 0801 	add.w	r8, r8, #1
                i++;
 800c076:	f107 0902 	add.w	r9, r7, #2
                y_prev.f = y_next.f;
 800c07a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
            for(; i <= x1.i; i++) {
 800c07e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800c082:	464f      	mov	r7, r9
 800c084:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
 800c088:	4646      	mov	r6, r8
            for(; i <= x1.i; i++) {
 800c08a:	9302      	str	r3, [sp, #8]
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800c08c:	4652      	mov	r2, sl
 800c08e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c092:	2100      	movs	r1, #0
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800c09c:	9303      	str	r3, [sp, #12]
 800c09e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            for(; i <= x1.i; i++) {
 800c0a2:	9802      	ldr	r0, [sp, #8]
 800c0a4:	42b8      	cmp	r0, r7
 800c0a6:	d251      	bcs.n	800c14c <lv_draw_mask_radius+0x3c8>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	3201      	adds	r2, #1
 800c0ac:	4591      	cmp	r9, r2
 800c0ae:	eba2 0009 	sub.w	r0, r2, r9
 800c0b2:	eba9 0602 	sub.w	r6, r9, r2
 800c0b6:	bf84      	itt	hi
 800c0b8:	2000      	movhi	r0, #0
 800c0ba:	2600      	movhi	r6, #0
 800c0bc:	4480      	add	r8, r0
 800c0be:	44b2      	add	sl, r6
 800c0c0:	b131      	cbz	r1, 800c0d0 <lv_draw_mask_radius+0x34c>
 800c0c2:	9a03      	ldr	r2, [sp, #12]
 800c0c4:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
 800c0c8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800c0cc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
 800c0d0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800c0d4:	b323      	cbz	r3, 800c120 <lv_draw_mask_radius+0x39c>
                m = (y_prev.f * x1.f) >> 9;
 800c0d6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
                if(outer) m = 255 - m;
 800c0da:	9a01      	ldr	r2, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
 800c0dc:	434b      	muls	r3, r1
 800c0de:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
 800c0e2:	b10a      	cbz	r2, 800c0e8 <lv_draw_mask_radius+0x364>
 800c0e4:	43db      	mvns	r3, r3
 800c0e6:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800c0e8:	f1ba 0f00 	cmp.w	sl, #0
 800c0ec:	db08      	blt.n	800c100 <lv_draw_mask_radius+0x37c>
 800c0ee:	4554      	cmp	r4, sl
 800c0f0:	dd06      	ble.n	800c100 <lv_draw_mask_radius+0x37c>
 800c0f2:	f815 000a 	ldrb.w	r0, [r5, sl]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	f7ff fb52 	bl	800b7a0 <mask_mix>
 800c0fc:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800c100:	f1b8 0f00 	cmp.w	r8, #0
 800c104:	db08      	blt.n	800c118 <lv_draw_mask_radius+0x394>
 800c106:	4544      	cmp	r4, r8
 800c108:	dd06      	ble.n	800c118 <lv_draw_mask_radius+0x394>
 800c10a:	f815 0008 	ldrb.w	r0, [r5, r8]
 800c10e:	4619      	mov	r1, r3
 800c110:	f7ff fb46 	bl	800b7a0 <mask_mix>
 800c114:	f805 0008 	strb.w	r0, [r5, r8]
                kl--;
 800c118:	f10a 3aff 	add.w	sl, sl, #4294967295
                kr++;
 800c11c:	f108 0801 	add.w	r8, r8, #1
            if(outer == 0) {
 800c120:	9b01      	ldr	r3, [sp, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f47f ae83 	bne.w	800be2e <lv_draw_mask_radius+0xaa>
                kl++;
 800c128:	f10a 0101 	add.w	r1, sl, #1
                if(kl > len) {
 800c12c:	428c      	cmp	r4, r1
 800c12e:	f6ff ae3d 	blt.w	800bdac <lv_draw_mask_radius+0x28>
                if(kl >= 0) lv_memset_00(&mask_buf[0], kl);
 800c132:	2900      	cmp	r1, #0
 800c134:	db02      	blt.n	800c13c <lv_draw_mask_radius+0x3b8>
 800c136:	4628      	mov	r0, r5
 800c138:	f00b fdec 	bl	8017d14 <lv_memset_00>
                if(kr < 0) {
 800c13c:	f1b8 0f00 	cmp.w	r8, #0
 800c140:	f6ff ae34 	blt.w	800bdac <lv_draw_mask_radius+0x28>
                if(kr < len) lv_memset_00(&mask_buf[kr], len - kr);
 800c144:	4544      	cmp	r4, r8
 800c146:	f77f ae72 	ble.w	800be2e <lv_draw_mask_radius+0xaa>
 800c14a:	e70b      	b.n	800bf64 <lv_draw_mask_radius+0x1e0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
 800c14c:	f3cc 130f 	ubfx	r3, ip, #4, #16
 800c150:	9904      	ldr	r1, [sp, #16]
 800c152:	1859      	adds	r1, r3, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
 800c154:	fb07 b317 	mls	r3, r7, r7, fp
    uint32_t raw2 = raw * raw;
 800c158:	fb01 f001 	mul.w	r0, r1, r1

    int32_t d = x - raw2;
 800c15c:	ebc0 2303 	rsb	r3, r0, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
 800c160:	0048      	lsls	r0, r1, #1
 800c162:	fb93 f3f0 	sdiv	r3, r3, r0
 800c166:	440b      	add	r3, r1
                if(outer) m = 255 - m;
 800c168:	9801      	ldr	r0, [sp, #4]

    q->i = d >> 4;
 800c16a:	f3c3 110f 	ubfx	r1, r3, #4, #16
    q->f = (d & 0xF) << 4;
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    q->i = d >> 4;
 800c174:	9103      	str	r1, [sp, #12]
                m = (y_prev.f + y_next.f) >> 1;
 800c176:	eb0c 0103 	add.w	r1, ip, r3
 800c17a:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
 800c17e:	b108      	cbz	r0, 800c184 <lv_draw_mask_radius+0x400>
 800c180:	43c9      	mvns	r1, r1
 800c182:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
 800c184:	2a00      	cmp	r2, #0
 800c186:	db07      	blt.n	800c198 <lv_draw_mask_radius+0x414>
 800c188:	4294      	cmp	r4, r2
 800c18a:	dd05      	ble.n	800c198 <lv_draw_mask_radius+0x414>
 800c18c:	5ca8      	ldrb	r0, [r5, r2]
 800c18e:	9105      	str	r1, [sp, #20]
 800c190:	f7ff fb06 	bl	800b7a0 <mask_mix>
 800c194:	9905      	ldr	r1, [sp, #20]
 800c196:	54a8      	strb	r0, [r5, r2]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
 800c198:	2e00      	cmp	r6, #0
 800c19a:	db05      	blt.n	800c1a8 <lv_draw_mask_radius+0x424>
 800c19c:	42b4      	cmp	r4, r6
 800c19e:	dd03      	ble.n	800c1a8 <lv_draw_mask_radius+0x424>
 800c1a0:	5da8      	ldrb	r0, [r5, r6]
 800c1a2:	f7ff fafd 	bl	800b7a0 <mask_mix>
 800c1a6:	55a8      	strb	r0, [r5, r6]
                kl--;
 800c1a8:	3a01      	subs	r2, #1
                kr++;
 800c1aa:	3601      	adds	r6, #1
            for(; i <= x1.i; i++) {
 800c1ac:	3701      	adds	r7, #1
                y_prev.f = y_next.f;
 800c1ae:	469c      	mov	ip, r3
            for(; i <= x1.i; i++) {
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	e776      	b.n	800c0a2 <lv_draw_mask_radius+0x31e>
        if(radius <= 256) sqrt_mask = 0x800;
 800c1b4:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
            y = radius - abs_y;
 800c1b8:	eba9 0606 	sub.w	r6, r9, r6
            if(y == p->y_prev) {
 800c1bc:	f8da 3014 	ldr.w	r3, [sl, #20]
        if(radius <= 256) sqrt_mask = 0x800;
 800c1c0:	bfd4      	ite	le
 800c1c2:	f44f 6200 	movle.w	r2, #2048	; 0x800
 800c1c6:	f44f 4200 	movgt.w	r2, #32768	; 0x8000
            if(y == p->y_prev) {
 800c1ca:	42b3      	cmp	r3, r6
 800c1cc:	f43f ae6a 	beq.w	800bea4 <lv_draw_mask_radius+0x120>
                lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
 800c1d0:	a906      	add	r1, sp, #24
 800c1d2:	fb06 b016 	mls	r0, r6, r6, fp
 800c1d6:	9202      	str	r2, [sp, #8]
 800c1d8:	f00b fb10 	bl	80177fc <lv_sqrt>
 800c1dc:	9a02      	ldr	r2, [sp, #8]
 800c1de:	e664      	b.n	800beaa <lv_draw_mask_radius+0x126>

0800c1e0 <lv_draw_mask_add>:
{
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800c1e4:	4c08      	ldr	r4, [pc, #32]	; (800c208 <lv_draw_mask_add+0x28>)
 800c1e6:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800c1f0:	b12e      	cbz	r6, 800c1fe <lv_draw_mask_add+0x1e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	2b10      	cmp	r3, #16
 800c1f6:	d1f6      	bne.n	800c1e6 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800c1fe:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    return i;
 800c202:	b210      	sxth	r0, r2
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800c204:	6069      	str	r1, [r5, #4]
    return i;
 800c206:	e7f9      	b.n	800c1fc <lv_draw_mask_add+0x1c>
 800c208:	2000ae5c 	.word	0x2000ae5c

0800c20c <lv_draw_mask_apply>:
{
 800c20c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c210:	4607      	mov	r7, r0
 800c212:	4688      	mov	r8, r1
 800c214:	4691      	mov	r9, r2
 800c216:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 800c218:	4e0c      	ldr	r6, [pc, #48]	; (800c24c <lv_draw_mask_apply+0x40>)
    bool changed = false;
 800c21a:	2500      	movs	r5, #0
    while(m->param) {
 800c21c:	6834      	ldr	r4, [r6, #0]
 800c21e:	b934      	cbnz	r4, 800c22e <lv_draw_mask_apply+0x22>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800c220:	2d00      	cmp	r5, #0
 800c222:	bf14      	ite	ne
 800c224:	2002      	movne	r0, #2
 800c226:	2001      	moveq	r0, #1
}
 800c228:	b002      	add	sp, #8
 800c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800c22e:	9400      	str	r4, [sp, #0]
 800c230:	4653      	mov	r3, sl
 800c232:	6824      	ldr	r4, [r4, #0]
 800c234:	464a      	mov	r2, r9
 800c236:	4641      	mov	r1, r8
 800c238:	4638      	mov	r0, r7
 800c23a:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0f3      	beq.n	800c228 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800c240:	2802      	cmp	r0, #2
        m++;
 800c242:	f106 0608 	add.w	r6, r6, #8
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800c246:	bf08      	it	eq
 800c248:	2501      	moveq	r5, #1
        m++;
 800c24a:	e7e7      	b.n	800c21c <lv_draw_mask_apply+0x10>
 800c24c:	2000ae5c 	.word	0x2000ae5c

0800c250 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	f04f 0200 	mov.w	r2, #0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800c256:	bf17      	itett	ne
 800c258:	4b06      	ldrne	r3, [pc, #24]	; (800c274 <lv_draw_mask_remove_id+0x24>)
    void * p = NULL;
 800c25a:	4611      	moveq	r1, r2
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800c25c:	f853 1030 	ldrne.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800c260:	f843 2030 	strne.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800c264:	bf18      	it	ne
 800c266:	eb03 03c0 	addne.w	r3, r3, r0, lsl #3
}
 800c26a:	4608      	mov	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800c26c:	bf18      	it	ne
 800c26e:	605a      	strne	r2, [r3, #4]
}
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	2000ae5c 	.word	0x2000ae5c

0800c278 <lv_draw_mask_remove_custom>:
{
 800c278:	2200      	movs	r2, #0
 800c27a:	4b08      	ldr	r3, [pc, #32]	; (800c29c <lv_draw_mask_remove_custom+0x24>)
 800c27c:	b530      	push	{r4, r5, lr}
    void * p = NULL;
 800c27e:	4611      	mov	r1, r2
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
 800c280:	4614      	mov	r4, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800c282:	685d      	ldr	r5, [r3, #4]
 800c284:	3201      	adds	r2, #1
 800c286:	4285      	cmp	r5, r0
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800c288:	bf04      	itt	eq
 800c28a:	6819      	ldreq	r1, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
 800c28c:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800c290:	2a10      	cmp	r2, #16
 800c292:	f103 0308 	add.w	r3, r3, #8
 800c296:	d1f4      	bne.n	800c282 <lv_draw_mask_remove_custom+0xa>
}
 800c298:	4608      	mov	r0, r1
 800c29a:	bd30      	pop	{r4, r5, pc}
 800c29c:	2000ae5c 	.word	0x2000ae5c

0800c2a0 <lv_draw_mask_get_cnt>:
{
 800c2a0:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800c2a2:	4a05      	ldr	r2, [pc, #20]	; (800c2b8 <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
 800c2a4:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
 800c2a6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c2aa:	b109      	cbz	r1, 800c2b0 <lv_draw_mask_get_cnt+0x10>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	2b10      	cmp	r3, #16
 800c2b4:	d1f7      	bne.n	800c2a6 <lv_draw_mask_get_cnt+0x6>
}
 800c2b6:	4770      	bx	lr
 800c2b8:	2000ae5c 	.word	0x2000ae5c

0800c2bc <lv_draw_mask_line_points_init>:
{
 800c2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c0:	4615      	mov	r5, r2
 800c2c2:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800c2c6:	460f      	mov	r7, r1
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800c2c8:	212c      	movs	r1, #44	; 0x2c
{
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4698      	mov	r8, r3
 800c2ce:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800c2d2:	f00b fd1f 	bl	8017d14 <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800c2d6:	42b5      	cmp	r5, r6
 800c2d8:	d106      	bne.n	800c2e8 <lv_draw_mask_line_points_init+0x2c>
 800c2da:	f1b9 0f03 	cmp.w	r9, #3
 800c2de:	d10b      	bne.n	800c2f8 <lv_draw_mask_line_points_init+0x3c>
        p1y--;
 800c2e0:	3d01      	subs	r5, #1
        p2y--;
 800c2e2:	3e01      	subs	r6, #1
        p1y--;
 800c2e4:	b22d      	sxth	r5, r5
        p2y--;
 800c2e6:	b236      	sxth	r6, r6
    if(p1y > p2y) {
 800c2e8:	42b5      	cmp	r5, r6
 800c2ea:	dd05      	ble.n	800c2f8 <lv_draw_mask_line_points_init+0x3c>
 800c2ec:	462a      	mov	r2, r5
 800c2ee:	4635      	mov	r5, r6
 800c2f0:	4616      	mov	r6, r2
 800c2f2:	463a      	mov	r2, r7
        p1x = t;
 800c2f4:	4647      	mov	r7, r8
        p2x = p1x;
 800c2f6:	4690      	mov	r8, r2
    param->cfg.side = side;
 800c2f8:	7c22      	ldrb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c2fa:	eba8 0307 	sub.w	r3, r8, r7
    param->cfg.p1.y = p1y;
 800c2fe:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
 800c300:	f369 0201 	bfi	r2, r9, #0, #2
    param->origo.y = p1y;
 800c304:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c306:	1b75      	subs	r5, r6, r5
 800c308:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    param->cfg.side = side;
 800c30c:	7422      	strb	r2, [r4, #16]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c30e:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800c312:	482f      	ldr	r0, [pc, #188]	; (800c3d0 <lv_draw_mask_line_points_init+0x114>)
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c314:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
    param->cfg.p1.x = p1x;
 800c318:	8127      	strh	r7, [r4, #8]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c31a:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
    param->cfg.p2.x = p2x;
 800c31e:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800c322:	81e6      	strh	r6, [r4, #14]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c324:	4291      	cmp	r1, r2
 800c326:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    param->origo.x = p1x;
 800c32a:	8267      	strh	r7, [r4, #18]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c32c:	bfd4      	ite	le
 800c32e:	2100      	movle	r1, #0
 800c330:	2101      	movgt	r1, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800c332:	6020      	str	r0, [r4, #0]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c334:	f361 0200 	bfi	r2, r1, #0, #1
    param->yx_steep = 0;
 800c338:	2100      	movs	r1, #0
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800c33a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if(param->flat) {
 800c33e:	07d2      	lsls	r2, r2, #31
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800c340:	7121      	strb	r1, [r4, #4]
    param->xy_steep = 0;
 800c342:	e9c4 1106 	strd	r1, r1, [r4, #24]
    if(param->flat) {
 800c346:	d524      	bpl.n	800c392 <lv_draw_mask_line_points_init+0xd6>
        if(dx) {
 800c348:	b133      	cbz	r3, 800c358 <lv_draw_mask_line_points_init+0x9c>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800c34a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c34e:	fb92 f2f3 	sdiv	r2, r2, r3
            param->yx_steep = (m * dy) >> 10;
 800c352:	436a      	muls	r2, r5
 800c354:	1292      	asrs	r2, r2, #10
 800c356:	61e2      	str	r2, [r4, #28]
        if(dy) {
 800c358:	b135      	cbz	r5, 800c368 <lv_draw_mask_line_points_init+0xac>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800c35a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 800c35e:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
 800c362:	436b      	muls	r3, r5
 800c364:	129b      	asrs	r3, r3, #10
 800c366:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 800c368:	69e3      	ldr	r3, [r4, #28]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800c36a:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
 800c36c:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800c36e:	f012 0203 	ands.w	r2, r2, #3
 800c372:	6a21      	ldr	r1, [r4, #32]
 800c374:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c378:	d11d      	bne.n	800c3b6 <lv_draw_mask_line_points_init+0xfa>
 800c37a:	f36f 0341 	bfc	r3, #1, #1
    if(param->steep < 0) param->spx = -param->spx;
 800c37e:	2900      	cmp	r1, #0
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800c380:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800c384:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
 800c388:	bfb8      	it	lt
 800c38a:	425b      	neglt	r3, r3
 800c38c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(dy) {
 800c392:	b135      	cbz	r5, 800c3a2 <lv_draw_mask_line_points_init+0xe6>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800c394:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c398:	fb92 f2f5 	sdiv	r2, r2, r5
            param->xy_steep = (m * dx) >> 10;
 800c39c:	435a      	muls	r2, r3
 800c39e:	1292      	asrs	r2, r2, #10
 800c3a0:	61a2      	str	r2, [r4, #24]
        if(dx) {
 800c3a2:	b133      	cbz	r3, 800c3b2 <lv_draw_mask_line_points_init+0xf6>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800c3a4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800c3a8:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
 800c3ac:	435d      	muls	r5, r3
 800c3ae:	12ad      	asrs	r5, r5, #10
 800c3b0:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800c3b2:	69a3      	ldr	r3, [r4, #24]
 800c3b4:	e7d9      	b.n	800c36a <lv_draw_mask_line_points_init+0xae>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800c3b6:	2a01      	cmp	r2, #1
 800c3b8:	d102      	bne.n	800c3c0 <lv_draw_mask_line_points_init+0x104>
 800c3ba:	f043 0302 	orr.w	r3, r3, #2
 800c3be:	e7de      	b.n	800c37e <lv_draw_mask_line_points_init+0xc2>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800c3c0:	2a02      	cmp	r2, #2
 800c3c2:	d102      	bne.n	800c3ca <lv_draw_mask_line_points_init+0x10e>
        if(param->steep > 0) param->inv = 1;
 800c3c4:	2900      	cmp	r1, #0
 800c3c6:	dcf8      	bgt.n	800c3ba <lv_draw_mask_line_points_init+0xfe>
 800c3c8:	e7d7      	b.n	800c37a <lv_draw_mask_line_points_init+0xbe>
        if(param->steep > 0) param->inv = 0;
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	dcd5      	bgt.n	800c37a <lv_draw_mask_line_points_init+0xbe>
 800c3ce:	e7f4      	b.n	800c3ba <lv_draw_mask_line_points_init+0xfe>
 800c3d0:	0800b7bd 	.word	0x0800b7bd

0800c3d4 <lv_draw_mask_line_angle_init>:
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800c3d4:	2bb4      	cmp	r3, #180	; 0xb4
{
 800c3d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c3da:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800c3dc:	bfc8      	it	gt
 800c3de:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
{
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	4690      	mov	r8, r2
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800c3e6:	bfc8      	it	gt
 800c3e8:	b224      	sxthgt	r4, r4
{
 800c3ea:	460f      	mov	r7, r1
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800c3ec:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800c3f0:	b200      	sxth	r0, r0
 800c3f2:	f00b f9b3 	bl	801775c <lv_trigo_sin>
 800c3f6:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f00b f9af 	bl	801775c <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 800c3fe:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c402:	eb08 1060 	add.w	r0, r8, r0, asr #5
 800c406:	4639      	mov	r1, r7
 800c408:	eb07 1365 	add.w	r3, r7, r5, asr #5
 800c40c:	9201      	str	r2, [sp, #4]
 800c40e:	b200      	sxth	r0, r0
 800c410:	4642      	mov	r2, r8
 800c412:	b21b      	sxth	r3, r3
 800c414:	9000      	str	r0, [sp, #0]
 800c416:	4630      	mov	r0, r6
 800c418:	f7ff ff50 	bl	800c2bc <lv_draw_mask_line_points_init>
}
 800c41c:	b002      	add	sp, #8
 800c41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c424 <lv_draw_mask_angle_init>:
{
 800c424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c426:	f240 1567 	movw	r5, #359	; 0x167
 800c42a:	b085      	sub	sp, #20
 800c42c:	4604      	mov	r4, r0
 800c42e:	42ab      	cmp	r3, r5
 800c430:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 800c434:	bfa8      	it	ge
 800c436:	462b      	movge	r3, r5
 800c438:	42b5      	cmp	r5, r6
 800c43a:	bfa8      	it	ge
 800c43c:	4635      	movge	r5, r6
 800c43e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 800c442:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 800c446:	b29f      	uxth	r7, r3
 800c448:	429d      	cmp	r5, r3
 800c44a:	da28      	bge.n	800c49e <lv_draw_mask_angle_init+0x7a>
        param->delta_deg = 360 - start_angle + end_angle;
 800c44c:	f505 70b4 	add.w	r0, r5, #360	; 0x168
 800c450:	1bc0      	subs	r0, r0, r7
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800c452:	b280      	uxth	r0, r0
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c454:	2fb3      	cmp	r7, #179	; 0xb3
    param->cfg.start_angle = start_angle;
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c45c:	bf98      	it	ls
 800c45e:	2700      	movls	r7, #0
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800c460:	4811      	ldr	r0, [pc, #68]	; (800c4a8 <lv_draw_mask_angle_init+0x84>)
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c462:	bf88      	it	hi
 800c464:	2701      	movhi	r7, #1
    param->cfg.vertex_p.x = vertex_x;
 800c466:	8121      	strh	r1, [r4, #8]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800c468:	6020      	str	r0, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800c46a:	2001      	movs	r0, #1
    param->cfg.vertex_p.y = vertex_y;
 800c46c:	8162      	strh	r2, [r4, #10]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800c46e:	7120      	strb	r0, [r4, #4]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c470:	f104 0010 	add.w	r0, r4, #16
    param->cfg.end_angle = end_angle;
 800c474:	81e5      	strh	r5, [r4, #14]
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800c476:	9700      	str	r7, [sp, #0]
 800c478:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c47c:	f7ff ffaa 	bl	800c3d4 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800c480:	2eb3      	cmp	r6, #179	; 0xb3
 800c482:	462b      	mov	r3, r5
 800c484:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800c488:	bfcc      	ite	gt
 800c48a:	2600      	movgt	r6, #0
 800c48c:	2601      	movle	r6, #1
 800c48e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c492:	960a      	str	r6, [sp, #40]	; 0x28
}
 800c494:	b005      	add	sp, #20
 800c496:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800c49a:	f7ff bf9b 	b.w	800c3d4 <lv_draw_mask_line_angle_init>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800c49e:	1ae8      	subs	r0, r5, r3
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	bfb8      	it	lt
 800c4a4:	4240      	neglt	r0, r0
 800c4a6:	e7d4      	b.n	800c452 <lv_draw_mask_angle_init+0x2e>
 800c4a8:	0800bb41 	.word	0x0800bb41

0800c4ac <lv_draw_mask_radius_init>:
{
 800c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c4ae:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c4b2:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c4b6:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c4ba:	1c74      	adds	r4, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c4bc:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 800c4c0:	1c69      	adds	r1, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c4c2:	1be4      	subs	r4, r4, r7
    dest->x1 = src->x1;
 800c4c4:	8107      	strh	r7, [r0, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c4c6:	eba1 010c 	sub.w	r1, r1, ip
    dest->y1 = src->y1;
 800c4ca:	f8a0 c00a 	strh.w	ip, [r0, #10]
    int32_t short_side = LV_MIN(w, h);
 800c4ce:	b224      	sxth	r4, r4
    dest->x2 = src->x2;
 800c4d0:	8186      	strh	r6, [r0, #12]
 800c4d2:	b209      	sxth	r1, r1
    dest->y2 = src->y2;
 800c4d4:	81c5      	strh	r5, [r0, #14]
 800c4d6:	42a1      	cmp	r1, r4
 800c4d8:	bfa8      	it	ge
 800c4da:	4621      	movge	r1, r4
    if(radius > short_side >> 1) radius = short_side >> 1;
 800c4dc:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 800c4e0:	ea4f 0461 	mov.w	r4, r1, asr #1
 800c4e4:	bfc8      	it	gt
 800c4e6:	b222      	sxthgt	r2, r4
    param->cfg.radius = radius;
 800c4e8:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
 800c4ea:	7c82      	ldrb	r2, [r0, #18]
 800c4ec:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800c4f0:	4b05      	ldr	r3, [pc, #20]	; (800c508 <lv_draw_mask_radius_init+0x5c>)
 800c4f2:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800c4f4:	2302      	movs	r3, #2
    param->cfg.outer = inv ? 1 : 0;
 800c4f6:	7482      	strb	r2, [r0, #18]
    param->y_prev_x.i = 0;
 800c4f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800c4fc:	7103      	strb	r3, [r0, #4]
    param->y_prev_x.i = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	e9c0 2305 	strd	r2, r3, [r0, #20]
}
 800c504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c506:	bf00      	nop
 800c508:	0800bd85 	.word	0x0800bd85

0800c50c <lv_area_copy>:
    dest->x1 = src->x1;
 800c50c:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c510:	8003      	strh	r3, [r0, #0]
    dest->y1 = src->y1;
 800c512:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800c516:	8043      	strh	r3, [r0, #2]
    dest->x2 = src->x2;
 800c518:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c51c:	8083      	strh	r3, [r0, #4]
    dest->y2 = src->y2;
 800c51e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c522:	80c3      	strh	r3, [r0, #6]
}
 800c524:	4770      	bx	lr

0800c526 <grad_get>:
#endif
}

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
 800c526:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800c528:	7a04      	ldrb	r4, [r0, #8]
 800c52a:	fb14 f301 	smulbb	r3, r4, r1
    if(i <= min) return dsc->bg_color;
 800c52e:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
 800c532:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
 800c536:	dc01      	bgt.n	800c53c <grad_get+0x16>
 800c538:	8880      	ldrh	r0, [r0, #4]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
 800c53c:	7a43      	ldrb	r3, [r0, #9]
 800c53e:	fb13 f601 	smulbb	r6, r3, r1
    if(i >= max) return dsc->bg_grad_color;
 800c542:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800c546:	db01      	blt.n	800c54c <grad_get+0x26>
 800c548:	88c0      	ldrh	r0, [r0, #6]
 800c54a:	e7f6      	b.n	800c53a <grad_get+0x14>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
 800c54c:	1b1b      	subs	r3, r3, r4
    i -= min;
 800c54e:	1b52      	subs	r2, r2, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c550:	f248 0581 	movw	r5, #32897	; 0x8081
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c554:	7906      	ldrb	r6, [r0, #4]
    d = (s * d) >> 8;
 800c556:	434b      	muls	r3, r1
    lv_opa_t mix = (i * 255) / d;
 800c558:	b212      	sxth	r2, r2
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c55a:	8881      	ldrh	r1, [r0, #4]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c55c:	f006 061f 	and.w	r6, r6, #31
 800c560:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
 800c564:	121b      	asrs	r3, r3, #8
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c566:	f3c1 1145 	ubfx	r1, r1, #5, #6
    lv_opa_t mix = (i * 255) / d;
 800c56a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	88c2      	ldrh	r2, [r0, #6]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c572:	f1c3 04ff 	rsb	r4, r3, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c576:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800c57a:	4361      	muls	r1, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c57c:	4366      	muls	r6, r4
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800c57e:	fb03 1202 	mla	r2, r3, r2, r1
 800c582:	3280      	adds	r2, #128	; 0x80
 800c584:	436a      	muls	r2, r5
 800c586:	f3c2 51c5 	ubfx	r1, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800c58a:	7982      	ldrb	r2, [r0, #6]
 800c58c:	f002 021f 	and.w	r2, r2, #31
 800c590:	fb03 6202 	mla	r2, r3, r2, r6
 800c594:	3280      	adds	r2, #128	; 0x80
 800c596:	436a      	muls	r2, r5
 800c598:	f3c2 52c4 	ubfx	r2, r2, #23, #5
 800c59c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800c5a0:	79c1      	ldrb	r1, [r0, #7]
 800c5a2:	7940      	ldrb	r0, [r0, #5]
 800c5a4:	08c9      	lsrs	r1, r1, #3
 800c5a6:	08c0      	lsrs	r0, r0, #3
 800c5a8:	4360      	muls	r0, r4
 800c5aa:	fb03 0001 	mla	r0, r3, r1, r0
 800c5ae:	3080      	adds	r0, #128	; 0x80
 800c5b0:	4368      	muls	r0, r5
 800c5b2:	0dc0      	lsrs	r0, r0, #23
 800c5b4:	ea42 20c0 	orr.w	r0, r2, r0, lsl #11
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
 800c5b8:	e7bf      	b.n	800c53a <grad_get+0x14>

0800c5ba <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 800c5ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5be:	4614      	mov	r4, r2
    int32_t s_left = sw >> 1;
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c5c0:	0042      	lsls	r2, r0, #1
{
 800c5c2:	b087      	sub	sp, #28
    int32_t s_left = sw >> 1;
 800c5c4:	ea4f 0861 	mov.w	r8, r1, asr #1
    if((sw & 1) == 0) s_left--;
 800c5c8:	07cb      	lsls	r3, r1, #31
{
 800c5ca:	4605      	mov	r5, r0
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c5cc:	4610      	mov	r0, r2
    int32_t s_left = sw >> 1;
 800c5ce:	46c2      	mov	sl, r8
{
 800c5d0:	460e      	mov	r6, r1
    if((sw & 1) == 0) s_left--;
 800c5d2:	bf58      	it	pl
 800c5d4:	f108 3aff 	addpl.w	sl, r8, #4294967295
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c5d8:	9201      	str	r2, [sp, #4]
 800c5da:	f00b fb4d 	bl	8017c78 <lv_mem_buf_get>
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c5de:	9a01      	ldr	r2, [sp, #4]
 800c5e0:	f06f 0701 	mvn.w	r7, #1
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800c5e4:	4601      	mov	r1, r0
    for(y = 0; y < size; y++) {
 800c5e6:	46a1      	mov	r9, r4
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c5e8:	1e93      	subs	r3, r2, #2
 800c5ea:	fb0a 7707 	mla	r7, sl, r7, r7
    for(y = 0; y < size; y++) {
 800c5ee:	f04f 0b00 	mov.w	fp, #0
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	f10a 0301 	add.w	r3, sl, #1
 800c5f8:	4427      	add	r7, r4
 800c5fa:	9302      	str	r3, [sp, #8]
 800c5fc:	eb04 0348 	add.w	r3, r4, r8, lsl #1
    for(y = 0; y < size; y++) {
 800c600:	455d      	cmp	r5, fp
 800c602:	dc1f      	bgt.n	800c644 <shadow_blur_corner+0x8a>
        sh_ups_tmp_buf += size;
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800c604:	8823      	ldrh	r3, [r4, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c606:	fb05 fe05 	mul.w	lr, r5, r5
 800c60a:	2701      	movs	r7, #1
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
 800c60c:	fb93 f3f6 	sdiv	r3, r3, r6
 800c610:	8023      	strh	r3, [r4, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c612:	4623      	mov	r3, r4
 800c614:	45be      	cmp	lr, r7
 800c616:	d842      	bhi.n	800c69e <shadow_blur_corner+0xe4>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c618:	1e6f      	subs	r7, r5, #1
    for(x = 0; x < size; x++) {
 800c61a:	f04f 0c00 	mov.w	ip, #0
 800c61e:	fb02 4307 	mla	r3, r2, r7, r4
 800c622:	3c02      	subs	r4, #2
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	9b02      	ldr	r3, [sp, #8]
 800c628:	4353      	muls	r3, r2
 800c62a:	9303      	str	r3, [sp, #12]
 800c62c:	f1c8 0300 	rsb	r3, r8, #0
 800c630:	4353      	muls	r3, r2
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	4565      	cmp	r5, ip
 800c636:	dc3f      	bgt.n	800c6b8 <shadow_blur_corner+0xfe>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 800c638:	4608      	mov	r0, r1
}
 800c63a:	b007      	add	sp, #28
 800c63c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_mem_buf_release(sh_ups_blur_buf);
 800c640:	f00b b976 	b.w	8017930 <lv_mem_buf_release>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c644:	9801      	ldr	r0, [sp, #4]
 800c646:	f839 c000 	ldrh.w	ip, [r9, r0]
        for(x = size - 1; x >= 0; x--) {
 800c64a:	1e68      	subs	r0, r5, #1
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800c64c:	fb06 fc0c 	mul.w	ip, r6, ip
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800c650:	eb00 0e08 	add.w	lr, r0, r8
            sh_ups_blur_buf[x] = v;
 800c654:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800c658:	4575      	cmp	r5, lr
 800c65a:	bfcc      	ite	gt
 800c65c:	f833 e010 	ldrhgt.w	lr, [r3, r0, lsl #1]
            uint32_t right_val = 0;
 800c660:	f04f 0e00 	movle.w	lr, #0
            v -= right_val;
 800c664:	ebac 0e0e 	sub.w	lr, ip, lr
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800c668:	eba0 0c0a 	sub.w	ip, r0, sl
 800c66c:	f1bc 0f00 	cmp.w	ip, #0
 800c670:	bfd4      	ite	le
 800c672:	f8b9 c000 	ldrhle.w	ip, [r9]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800c676:	f837 c010 	ldrhgt.w	ip, [r7, r0, lsl #1]
        for(x = size - 1; x >= 0; x--) {
 800c67a:	3801      	subs	r0, #1
            v += left_val;
 800c67c:	44f4      	add	ip, lr
        for(x = size - 1; x >= 0; x--) {
 800c67e:	d2e7      	bcs.n	800c650 <shadow_blur_corner+0x96>
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800c680:	4648      	mov	r0, r9
 800c682:	9103      	str	r1, [sp, #12]
    for(y = 0; y < size; y++) {
 800c684:	f10b 0b01 	add.w	fp, fp, #1
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800c688:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c68c:	f00b f97c 	bl	8017988 <lv_memcpy>
        sh_ups_tmp_buf += size;
 800c690:	9a04      	ldr	r2, [sp, #16]
 800c692:	9b05      	ldr	r3, [sp, #20]
 800c694:	4491      	add	r9, r2
    for(y = 0; y < size; y++) {
 800c696:	4417      	add	r7, r2
 800c698:	4413      	add	r3, r2
 800c69a:	9903      	ldr	r1, [sp, #12]
 800c69c:	e7b0      	b.n	800c600 <shadow_blur_corner+0x46>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800c69e:	8858      	ldrh	r0, [r3, #2]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c6a0:	3701      	adds	r7, #1
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
 800c6a2:	f833 cb02 	ldrh.w	ip, [r3], #2
 800c6a6:	4560      	cmp	r0, ip
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800c6a8:	bf1c      	itt	ne
 800c6aa:	fb90 f0f6 	sdivne	r0, r0, r6
 800c6ae:	fa1f fc80 	uxthne.w	ip, r0
 800c6b2:	f8a3 c000 	strh.w	ip, [r3]
    for(i = 1; i < (uint32_t)size * size; i++) {
 800c6b6:	e7ad      	b.n	800c614 <shadow_blur_corner+0x5a>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800c6b8:	3402      	adds	r4, #2
 800c6ba:	9803      	ldr	r0, [sp, #12]
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800c6bc:	8823      	ldrh	r3, [r4, #0]
 800c6be:	1820      	adds	r0, r4, r0
 800c6c0:	46a6      	mov	lr, r4
 800c6c2:	4373      	muls	r3, r6
 800c6c4:	46a2      	mov	sl, r4
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	9804      	ldr	r0, [sp, #16]
 800c6ca:	eb04 0900 	add.w	r9, r4, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c6ce:	2000      	movs	r0, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bfac      	ite	ge
 800c6d4:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 800c6d8:	f04f 0b00 	movlt.w	fp, #0
 800c6dc:	f821 b010 	strh.w	fp, [r1, r0, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800c6e0:	eba0 0b08 	sub.w	fp, r0, r8
 800c6e4:	f1bb 0f00 	cmp.w	fp, #0
 800c6e8:	bfd8      	it	le
 800c6ea:	f8ba b000 	ldrhle.w	fp, [sl]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c6ee:	4492      	add	sl, r2
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800c6f0:	bfc8      	it	gt
 800c6f2:	f8b9 b000 	ldrhgt.w	fp, [r9]
            v -= top_val;
 800c6f6:	4491      	add	r9, r2
 800c6f8:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800c6fc:	9b02      	ldr	r3, [sp, #8]
 800c6fe:	18c3      	adds	r3, r0, r3
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c700:	3001      	adds	r0, #1
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800c702:	429d      	cmp	r5, r3
 800c704:	bfcc      	ite	gt
 800c706:	463b      	movgt	r3, r7
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c708:	9b01      	ldrle	r3, [sp, #4]
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c70a:	4285      	cmp	r5, r0
 800c70c:	4417      	add	r7, r2
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800c70e:	881b      	ldrh	r3, [r3, #0]
            v += bottom_val;
 800c710:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800c712:	dcdd      	bgt.n	800c6d0 <shadow_blur_corner+0x116>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c714:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800c716:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c71a:	3301      	adds	r3, #1
 800c71c:	429d      	cmp	r5, r3
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800c71e:	f8ae 0000 	strh.w	r0, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800c722:	4496      	add	lr, r2
 800c724:	dcf7      	bgt.n	800c716 <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	f10c 0c01 	add.w	ip, ip, #1
 800c72c:	3302      	adds	r3, #2
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	e780      	b.n	800c634 <shadow_blur_corner+0x7a>

0800c732 <draw_full_border>:
}

#if LV_DRAW_COMPLEX
static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 800c732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c736:	ed2d 8b02 	vpush	{d8}
 800c73a:	b0a3      	sub	sp, #140	; 0x8c
 800c73c:	461d      	mov	r5, r3
 800c73e:	4680      	mov	r8, r0
 800c740:	460c      	mov	r4, r1
 800c742:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 800c746:	4617      	mov	r7, r2
 800c748:	f89d 60b8 	ldrb.w	r6, [sp, #184]	; 0xb8
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 800c752:	f8bd 90bc 	ldrh.w	r9, [sp, #188]	; 0xbc
 800c756:	9306      	str	r3, [sp, #24]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
 800c758:	f7ff fda2 	bl	800c2a0 <lv_draw_mask_get_cnt>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c75c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c760:	900a      	str	r0, [sp, #40]	; 0x28
 800c762:	930b      	str	r3, [sp, #44]	; 0x2c
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
 800c764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c766:	88a3      	ldrh	r3, [r4, #4]
 800c768:	f9b8 a000 	ldrsh.w	sl, [r8]
 800c76c:	9309      	str	r3, [sp, #36]	; 0x24
 800c76e:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c770:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800c774:	b29a      	uxth	r2, r3
 800c776:	f9b8 e002 	ldrsh.w	lr, [r8, #2]
 800c77a:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c77c:	f9b4 c000 	ldrsh.w	ip, [r4]
 800c780:	920d      	str	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c782:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800c786:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
 800c78a:	9307      	str	r3, [sp, #28]
 800c78c:	2e00      	cmp	r6, #0
 800c78e:	f000 80eb 	beq.w	800c968 <draw_full_border+0x236>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c794:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c796:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c798:	eba1 0e0e 	sub.w	lr, r1, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c79c:	eba3 0a0a 	sub.w	sl, r3, sl
    int32_t inner_h = lv_area_get_height(area_inner);
 800c7a0:	fa0f fe8e 	sxth.w	lr, lr
    int32_t inner_w = lv_area_get_width(area_inner);
 800c7a4:	fa0f fa8a 	sxth.w	sl, sl
        rin = radius;
        int32_t short_side = LV_MIN(inner_w, inner_h);
 800c7a8:	45f2      	cmp	sl, lr
 800c7aa:	bfa8      	it	ge
 800c7ac:	46f2      	movge	sl, lr
        if(rin > short_side >> 1) rin = short_side >> 1;
 800c7ae:	ea4f 036a 	mov.w	r3, sl, asr #1
 800c7b2:	429d      	cmp	r5, r3
 800c7b4:	bfa8      	it	ge
 800c7b6:	461d      	movge	r5, r3

        /*Get the outer area*/
        rout = rin + border_width;
 800c7b8:	9b07      	ldr	r3, [sp, #28]
 800c7ba:	18eb      	adds	r3, r5, r3
 800c7bc:	9304      	str	r3, [sp, #16]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800c7be:	f7fb fe8b 	bl	80084d8 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c7c2:	f00a f9a5 	bl	8016b10 <lv_disp_get_draw_buf>

    /*Get clipped fill area which is the real draw area.
     *It is always the same or inside `fill_area`*/
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800c7c6:	463a      	mov	r2, r7
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800c7c8:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	a80e      	add	r0, sp, #56	; 0x38
 800c7ce:	f00a fc52 	bl	8017076 <_lv_area_intersect>
    if(is_common == false) return;
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f000 80c3 	beq.w	800c95e <draw_full_border+0x22c>

    const lv_area_t * disp_area = &draw_buf->area;

    /*Now `draw_area` has absolute coordinates.
     *Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
 800c7d8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800c7dc:	f8bb 2010 	ldrh.w	r2, [fp, #16]
    draw_area.y1 -= disp_area->y1;
 800c7e0:	f8bb 0012 	ldrh.w	r0, [fp, #18]
    draw_area.x1 -= disp_area->x1;
 800c7e4:	1a8b      	subs	r3, r1, r2
 800c7e6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
 800c7ea:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c7ee:	1a1b      	subs	r3, r3, r0
 800c7f0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
 800c7f4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c7f8:	1a9a      	subs	r2, r3, r2
 800c7fa:	1c5e      	adds	r6, r3, #1

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c7fc:	2301      	movs	r3, #1
    draw_area.x2 -= disp_area->x1;
 800c7fe:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800c802:	1a76      	subs	r6, r6, r1
    draw_area.y2 -= disp_area->y1;
 800c804:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c808:	4641      	mov	r1, r8
 800c80a:	b236      	sxth	r6, r6
    draw_area.y2 -= disp_area->y1;
 800c80c:	1a12      	subs	r2, r2, r0
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c80e:	a814      	add	r0, sp, #80	; 0x50
    draw_area.y2 -= disp_area->y1;
 800c810:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
 800c814:	b22a      	sxth	r2, r5
 800c816:	f7ff fe49 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c81a:	2100      	movs	r1, #0
 800c81c:	a814      	add	r0, sp, #80	; 0x50
 800c81e:	f7ff fcdf 	bl	800c1e0 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800c822:	2300      	movs	r3, #0
 800c824:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c828:	4621      	mov	r1, r4
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800c82a:	ee08 0a10 	vmov	s16, r0
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
 800c82e:	a81b      	add	r0, sp, #108	; 0x6c
 800c830:	f7ff fe3c 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800c834:	2100      	movs	r1, #0
 800c836:	a81b      	add	r0, sp, #108	; 0x6c
 800c838:	f7ff fcd2 	bl	800c1e0 <lv_draw_mask_add>
 800c83c:	ee08 0a90 	vmov	s17, r0

    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800c840:	4630      	mov	r0, r6
 800c842:	f00b fa19 	bl	8017c78 <lv_mem_buf_get>

    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c846:	9b04      	ldr	r3, [sp, #16]
 800c848:	9a07      	ldr	r2, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800c84a:	4605      	mov	r5, r0
    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c84c:	f9bb c012 	ldrsh.w	ip, [fp, #18]
 800c850:	4293      	cmp	r3, r2
 800c852:	f9bd 803a 	ldrsh.w	r8, [sp, #58]	; 0x3a
 800c856:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c85a:	bfb4      	ite	lt
 800c85c:	4613      	movlt	r3, r2
 800c85e:	9b04      	ldrge	r3, [sp, #16]
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
 800c860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    int32_t corner_size = LV_MAX(rout, border_width - 1);
 800c862:	bfb8      	it	lt
 800c864:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c868:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800c86c:	9308      	str	r3, [sp, #32]
    if(simple_mode) {
 800c86e:	eb0c 0308 	add.w	r3, ip, r8
 800c872:	b21b      	sxth	r3, r3
 800c874:	2a00      	cmp	r2, #0
 800c876:	f040 8180 	bne.w	800cb7a <draw_full_border+0x448>
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c87a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800c87e:	9908      	ldr	r1, [sp, #32]
 800c880:	eba2 020c 	sub.w	r2, r2, ip
            lv_area_t fill_area2;
            fill_area2.y1 = fill_area.y1;
            fill_area2.y2 = fill_area.y2;

            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c884:	f8bd a010 	ldrh.w	sl, [sp, #16]
        fill_area.x1 = area_outer->x1;
 800c888:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c88c:	440a      	add	r2, r1
        fill_area.x2 = area_outer->x2;
 800c88e:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800c892:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
 800c896:	920a      	str	r2, [sp, #40]	; 0x28
        fill_area.y2 = fill_area.y1;
 800c898:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800c89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c89e:	4598      	cmp	r8, r3
 800c8a0:	dd79      	ble.n	800c996 <draw_full_border+0x264>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area*/
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800c8a2:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
 800c8a6:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 800c8aa:	9a08      	ldr	r2, [sp, #32]
 800c8ac:	eba8 0803 	sub.w	r8, r8, r3
            lv_memset_ff(mask_buf, draw_area_w);
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);

            lv_area_t fill_area2;
            fill_area2.x1 = area_outer->x1;
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c8b0:	f8bd a010 	ldrh.w	sl, [sp, #16]
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
 800c8b4:	eba8 0802 	sub.w	r8, r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
 800c8b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8ba:	4542      	cmp	r2, r8
 800c8bc:	bfa8      	it	ge
 800c8be:	f102 0801 	addge.w	r8, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
 800c8c2:	4443      	add	r3, r8
 800c8c4:	b21b      	sxth	r3, r3
 800c8c6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800c8ca:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800c8ce:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800c8d2:	4543      	cmp	r3, r8
 800c8d4:	f280 80d8 	bge.w	800ca88 <draw_full_border+0x356>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c8d8:	8863      	ldrh	r3, [r4, #2]
        fill_area.y2 = area_outer->y2 - corner_size - 1;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x1 + border_width - 1;
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c8da:	2601      	movs	r6, #1
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c8dc:	9a08      	ldr	r2, [sp, #32]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c8de:	a910      	add	r1, sp, #64	; 0x40
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c8e0:	3301      	adds	r3, #1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	9600      	str	r6, [sp, #0]
        fill_area.y1 = area_outer->y1 + corner_size + 1;
 800c8e6:	fa13 f382 	uxtah	r3, r3, r2
 800c8ea:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800c8ee:	88e3      	ldrh	r3, [r4, #6]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	1a9b      	subs	r3, r3, r2
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c8f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        fill_area.y2 = area_outer->y2 - corner_size - 1;
 800c8f6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        fill_area.x1 = area_outer->x1;
 800c8fa:	f9b4 3000 	ldrsh.w	r3, [r4]
 800c8fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c902:	3b01      	subs	r3, #1
 800c904:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	9302      	str	r3, [sp, #8]
 800c90a:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
 800c90c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c910:	464a      	mov	r2, r9
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	2300      	movs	r3, #0
 800c916:	f7fc fd33 	bl	8009380 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c91a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800c91e:	990b      	ldr	r1, [sp, #44]	; 0x2c
        fill_area.x2 = area_outer->x2;

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c920:	4638      	mov	r0, r7
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c922:	1993      	adds	r3, r2, r6
        fill_area.x2 = area_outer->x2;
 800c924:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c928:	464a      	mov	r2, r9
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c92a:	4419      	add	r1, r3
 800c92c:	460b      	mov	r3, r1
 800c92e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c930:	1a5b      	subs	r3, r3, r1
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c932:	a910      	add	r1, sp, #64	; 0x40
        fill_area.x1 = area_outer->x2 - border_width + 1;
 800c934:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	9302      	str	r3, [sp, #8]
 800c93c:	9b05      	ldr	r3, [sp, #20]
 800c93e:	e9cd 6300 	strd	r6, r3, [sp]
 800c942:	2300      	movs	r3, #0
 800c944:	f7fc fd1c 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
 800c948:	ee18 0a10 	vmov	r0, s16
 800c94c:	f7ff fc80 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
 800c950:	ee18 0a90 	vmov	r0, s17
 800c954:	f7ff fc7c 	bl	800c250 <lv_draw_mask_remove_id>
    lv_mem_buf_release(mask_buf);
 800c958:	4628      	mov	r0, r5
 800c95a:	f00a ffe9 	bl	8017930 <lv_mem_buf_release>
}
 800c95e:	b023      	add	sp, #140	; 0x8c
 800c960:	ecbd 8b02 	vpop	{d8}
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c96a:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c96c:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c96e:	1a10      	subs	r0, r2, r0
        rin = rout - border_width;
 800c970:	9a07      	ldr	r2, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c972:	eba3 0c0c 	sub.w	ip, r3, ip
    int32_t coords_out_h = lv_area_get_height(area_outer);
 800c976:	b200      	sxth	r0, r0
    int32_t coords_out_w = lv_area_get_width(area_outer);
 800c978:	fa0f fc8c 	sxth.w	ip, ip
        int32_t short_side = LV_MIN(coords_out_w, coords_out_h);
 800c97c:	4584      	cmp	ip, r0
 800c97e:	bfa8      	it	ge
 800c980:	4684      	movge	ip, r0
        if(rout > short_side >> 1) rout = short_side >> 1;
 800c982:	ea4f 036c 	mov.w	r3, ip, asr #1
 800c986:	42ab      	cmp	r3, r5
 800c988:	bfa8      	it	ge
 800c98a:	462b      	movge	r3, r5
        rin = rout - border_width;
 800c98c:	1a9d      	subs	r5, r3, r2
 800c98e:	9304      	str	r3, [sp, #16]
        if(rin < 0) rin = 0;
 800c990:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800c994:	e713      	b.n	800c7be <draw_full_border+0x8c>
            lv_memset_ff(mask_buf, draw_area_w);
 800c996:	4631      	mov	r1, r6
 800c998:	4628      	mov	r0, r5
 800c99a:	f00b f9ea 	bl	8017d72 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c99e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c9a2:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800c9ac:	4442      	add	r2, r8
 800c9ae:	4419      	add	r1, r3
 800c9b0:	4633      	mov	r3, r6
 800c9b2:	b212      	sxth	r2, r2
 800c9b4:	b209      	sxth	r1, r1
 800c9b6:	f7ff fc29 	bl	800c20c <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
 800c9ba:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c9be:	464a      	mov	r2, r9
 800c9c0:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.y1 = fill_area.y1;
 800c9c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800c9c6:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800c9ca:	900c      	str	r0, [sp, #48]	; 0x30
            fill_area2.y2 = fill_area.y2;
 800c9cc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            fill_area2.x1 = area_outer->x1;
 800c9d0:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c9d4:	9000      	str	r0, [sp, #0]
 800c9d6:	4638      	mov	r0, r7
            fill_area2.x1 = area_outer->x1;
 800c9d8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4453      	add	r3, sl
 800c9e0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800c9e4:	9b06      	ldr	r3, [sp, #24]
 800c9e6:	9302      	str	r3, [sp, #8]
 800c9e8:	9b05      	ldr	r3, [sp, #20]
 800c9ea:	9301      	str	r3, [sp, #4]
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7fc fcc7 	bl	8009380 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
 800c9f2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c9f6:	9907      	ldr	r1, [sp, #28]
 800c9f8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800c9fc:	440b      	add	r3, r1
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	da14      	bge.n	800ca2c <draw_full_border+0x2fa>
                fill_area2.x1 = area_outer->x1 + rout;
 800ca02:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800ca04:	464a      	mov	r2, r9
 800ca06:	a912      	add	r1, sp, #72	; 0x48
 800ca08:	4638      	mov	r0, r7
                fill_area2.x1 = area_outer->x1 + rout;
 800ca0a:	4453      	add	r3, sl
 800ca0c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800ca10:	88a3      	ldrh	r3, [r4, #4]
 800ca12:	eba3 030a 	sub.w	r3, r3, sl
 800ca16:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800ca1a:	9b06      	ldr	r3, [sp, #24]
 800ca1c:	9302      	str	r3, [sp, #8]
 800ca1e:	9b05      	ldr	r3, [sp, #20]
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	2301      	movs	r3, #1
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	2300      	movs	r3, #0
 800ca28:	f7fc fcaa 	bl	8009380 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800ca2c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800ca30:	4638      	mov	r0, r7
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800ca32:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800ca36:	f108 0801 	add.w	r8, r8, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800ca3a:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800ca3c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800ca40:	eba2 020a 	sub.w	r2, r2, sl
 800ca44:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800ca48:	9a04      	ldr	r2, [sp, #16]
 800ca4a:	1a9b      	subs	r3, r3, r2
 800ca4c:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 800ca50:	3301      	adds	r3, #1
 800ca52:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800ca54:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800ca56:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	9202      	str	r2, [sp, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfac      	ite	ge
 800ca60:	18eb      	addge	r3, r5, r3
 800ca62:	1c2b      	addlt	r3, r5, #0
 800ca64:	9a05      	ldr	r2, [sp, #20]
 800ca66:	9201      	str	r2, [sp, #4]
 800ca68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca6a:	9200      	str	r2, [sp, #0]
 800ca6c:	464a      	mov	r2, r9
 800ca6e:	f7fc fc87 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
 800ca72:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800ca76:	3301      	adds	r3, #1
 800ca78:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800ca7c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800ca80:	3301      	adds	r3, #1
 800ca82:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
 800ca86:	e709      	b.n	800c89c <draw_full_border+0x16a>
            lv_memset_ff(mask_buf, draw_area_w);
 800ca88:	4631      	mov	r1, r6
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f00b f971 	bl	8017d72 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800ca90:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800ca94:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800ca9e:	4442      	add	r2, r8
 800caa0:	4419      	add	r1, r3
 800caa2:	4633      	mov	r3, r6
 800caa4:	b212      	sxth	r2, r2
 800caa6:	b209      	sxth	r1, r1
 800caa8:	f7ff fbb0 	bl	800c20c <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
 800caac:	f9b4 3000 	ldrsh.w	r3, [r4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800cab0:	464a      	mov	r2, r9
 800cab2:	a912      	add	r1, sp, #72	; 0x48
            fill_area2.x1 = area_outer->x1;
 800cab4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800cab8:	3b01      	subs	r3, #1
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800caba:	900a      	str	r0, [sp, #40]	; 0x28
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800cabc:	4453      	add	r3, sl
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800cabe:	9000      	str	r0, [sp, #0]
 800cac0:	4638      	mov	r0, r7
            fill_area2.x2 = area_outer->x1 + rout - 1;
 800cac2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.y1 = fill_area.y1;
 800cac6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800caca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area2.y2 = fill_area.y2;
 800cace:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800cad2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
 800cad6:	9b06      	ldr	r3, [sp, #24]
 800cad8:	9302      	str	r3, [sp, #8]
 800cada:	9b05      	ldr	r3, [sp, #20]
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	462b      	mov	r3, r5
 800cae0:	f7fc fc4e 	bl	8009380 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
 800cae4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800cae8:	9907      	ldr	r1, [sp, #28]
 800caea:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 800caee:	1a5b      	subs	r3, r3, r1
 800caf0:	429a      	cmp	r2, r3
 800caf2:	dd14      	ble.n	800cb1e <draw_full_border+0x3ec>
                fill_area2.x1 = area_outer->x1 + rout;
 800caf4:	8823      	ldrh	r3, [r4, #0]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800caf6:	464a      	mov	r2, r9
 800caf8:	a912      	add	r1, sp, #72	; 0x48
 800cafa:	4638      	mov	r0, r7
                fill_area2.x1 = area_outer->x1 + rout;
 800cafc:	4453      	add	r3, sl
 800cafe:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                fill_area2.x2 = area_outer->x2 - rout;
 800cb02:	88a3      	ldrh	r3, [r4, #4]
 800cb04:	eba3 030a 	sub.w	r3, r3, sl
 800cb08:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
 800cb0c:	9b06      	ldr	r3, [sp, #24]
 800cb0e:	9302      	str	r3, [sp, #8]
 800cb10:	9b05      	ldr	r3, [sp, #20]
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	2301      	movs	r3, #1
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f7fc fc31 	bl	8009380 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800cb1e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800cb22:	4638      	mov	r0, r7
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800cb24:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800cb28:	f108 0801 	add.w	r8, r8, #1
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800cb2c:	1c5a      	adds	r2, r3, #1
            fill_area2.x2 = area_outer->x2;
 800cb2e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            fill_area2.x1 = area_outer->x2 - rout + 1;
 800cb32:	eba2 020a 	sub.w	r2, r2, sl
 800cb36:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800cb3a:	9a04      	ldr	r2, [sp, #16]
 800cb3c:	1a9b      	subs	r3, r3, r2
 800cb3e:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 800cb42:	3301      	adds	r3, #1
 800cb44:	440a      	add	r2, r1
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800cb46:	a912      	add	r1, sp, #72	; 0x48
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800cb48:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
 800cb4a:	9a06      	ldr	r2, [sp, #24]
 800cb4c:	9202      	str	r2, [sp, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	bfac      	ite	ge
 800cb52:	18eb      	addge	r3, r5, r3
 800cb54:	1c2b      	addlt	r3, r5, #0
 800cb56:	9a05      	ldr	r2, [sp, #20]
 800cb58:	9201      	str	r2, [sp, #4]
 800cb5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb5c:	9200      	str	r2, [sp, #0]
 800cb5e:	464a      	mov	r2, r9
 800cb60:	f7fc fc0e 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
 800cb64:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800cb68:	3301      	adds	r3, #1
 800cb6a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800cb6e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800cb72:	3301      	adds	r3, #1
 800cb74:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
 800cb78:	e6a9      	b.n	800c8ce <draw_full_border+0x19c>
        fill_area.x1 = area_outer->x1;
 800cb7a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        fill_area.x2 = area_outer->x2;
 800cb7e:	f8ad e044 	strh.w	lr, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800cb82:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
 800cb86:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800cb8a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800cb8e:	4543      	cmp	r3, r8
 800cb90:	f6ff aeda 	blt.w	800c948 <draw_full_border+0x216>
            lv_memset_ff(mask_buf, draw_area_w);
 800cb94:	4631      	mov	r1, r6
 800cb96:	4628      	mov	r0, r5
 800cb98:	f00b f8eb 	bl	8017d72 <lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800cb9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800cba0:	f8bb 2012 	ldrh.w	r2, [fp, #18]
 800cba4:	4628      	mov	r0, r5
 800cba6:	f8bb 1010 	ldrh.w	r1, [fp, #16]
 800cbaa:	4442      	add	r2, r8
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800cbac:	f108 0801 	add.w	r8, r8, #1
            mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800cbb0:	4419      	add	r1, r3
 800cbb2:	4633      	mov	r3, r6
 800cbb4:	b212      	sxth	r2, r2
 800cbb6:	b209      	sxth	r1, r1
 800cbb8:	f7ff fb28 	bl	800c20c <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800cbbc:	9b06      	ldr	r3, [sp, #24]
 800cbbe:	464a      	mov	r2, r9
 800cbc0:	a910      	add	r1, sp, #64	; 0x40
 800cbc2:	9302      	str	r3, [sp, #8]
 800cbc4:	9b05      	ldr	r3, [sp, #20]
 800cbc6:	e9cd 0300 	strd	r0, r3, [sp]
 800cbca:	462b      	mov	r3, r5
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7fc fbd7 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
 800cbd2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
 800cbdc:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800cbe6:	e7d0      	b.n	800cb8a <draw_full_border+0x458>

0800cbe8 <lv_draw_rect_dsc_init>:
{
 800cbe8:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800cbea:	2134      	movs	r1, #52	; 0x34
{
 800cbec:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800cbee:	f00b f891 	bl	8017d14 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 800cbf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800cbf6:	4a0c      	ldr	r2, [pc, #48]	; (800cc28 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_color = lv_color_white();
 800cbf8:	6063      	str	r3, [r4, #4]
    dsc->border_color = lv_color_black();
 800cbfa:	2300      	movs	r3, #0
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800cbfc:	6122      	str	r2, [r4, #16]
    dsc->border_color = lv_color_black();
 800cbfe:	8363      	strh	r3, [r4, #26]
    dsc->shadow_color = lv_color_black();
 800cc00:	8523      	strh	r3, [r4, #40]	; 0x28
    dsc->bg_grad_color_stop = 0xFF;
 800cc02:	23ff      	movs	r3, #255	; 0xff
 800cc04:	7263      	strb	r3, [r4, #9]
    dsc->bg_opa = LV_OPA_COVER;
 800cc06:	72a3      	strb	r3, [r4, #10]
    dsc->bg_img_opa = LV_OPA_COVER;
 800cc08:	75a3      	strb	r3, [r4, #22]
    dsc->outline_opa = LV_OPA_COVER;
 800cc0a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    dsc->shadow_opa = LV_OPA_COVER;
 800cc0e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    dsc->border_opa = LV_OPA_COVER;
 800cc12:	8be3      	ldrh	r3, [r4, #30]
 800cc14:	f423 537b 	bic.w	r3, r3, #16064	; 0x3ec0
 800cc18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cc1c:	f443 53f7 	orr.w	r3, r3, #7904	; 0x1ee0
 800cc20:	f043 031f 	orr.w	r3, r3, #31
 800cc24:	83e3      	strh	r3, [r4, #30]
}
 800cc26:	bd10      	pop	{r4, pc}
 800cc28:	080294fc 	.word	0x080294fc

0800cc2c <lv_draw_rect>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cc2c:	88c3      	ldrh	r3, [r0, #6]
{
 800cc2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc32:	4690      	mov	r8, r2
 800cc34:	8845      	ldrh	r5, [r0, #2]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	468b      	mov	fp, r1
 800cc3a:	1b52      	subs	r2, r2, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cc3c:	b212      	sxth	r2, r2
{
 800cc3e:	ed2d 8b02 	vpush	{d8}
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cc42:	2a00      	cmp	r2, #0
{
 800cc44:	b0ad      	sub	sp, #180	; 0xb4
 800cc46:	9005      	str	r0, [sp, #20]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800cc48:	f340 877f 	ble.w	800db4a <lv_draw_rect+0xf1e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	8880      	ldrh	r0, [r0, #4]
 800cc50:	8812      	ldrh	r2, [r2, #0]
 800cc52:	1c41      	adds	r1, r0, #1
 800cc54:	1a89      	subs	r1, r1, r2
 800cc56:	b209      	sxth	r1, r1
 800cc58:	2900      	cmp	r1, #0
 800cc5a:	f340 8776 	ble.w	800db4a <lv_draw_rect+0xf1e>
    if(dsc->shadow_width == 0) return;
 800cc5e:	f9b8 402a 	ldrsh.w	r4, [r8, #42]	; 0x2a
 800cc62:	2c00      	cmp	r4, #0
 800cc64:	f000 859f 	beq.w	800d7a6 <lv_draw_rect+0xb7a>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800cc68:	f898 1032 	ldrb.w	r1, [r8, #50]	; 0x32
 800cc6c:	2902      	cmp	r1, #2
 800cc6e:	9109      	str	r1, [sp, #36]	; 0x24
 800cc70:	f240 8599 	bls.w	800d7a6 <lv_draw_rect+0xb7a>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
 800cc74:	2c01      	cmp	r4, #1
 800cc76:	f9b8 1030 	ldrsh.w	r1, [r8, #48]	; 0x30
 800cc7a:	d105      	bne.n	800cc88 <lv_draw_rect+0x5c>
 800cc7c:	f8d8 602c 	ldr.w	r6, [r8, #44]	; 0x2c
 800cc80:	b916      	cbnz	r6, 800cc88 <lv_draw_rect+0x5c>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
 800cc82:	2900      	cmp	r1, #0
 800cc84:	f340 858f 	ble.w	800d7a6 <lv_draw_rect+0xb7a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800cc88:	b289      	uxth	r1, r1
 800cc8a:	f8b8 602c 	ldrh.w	r6, [r8, #44]	; 0x2c
 800cc8e:	1a77      	subs	r7, r6, r1
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800cc90:	440e      	add	r6, r1
 800cc92:	4430      	add	r0, r6
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cc94:	f8b8 602e 	ldrh.w	r6, [r8, #46]	; 0x2e
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800cc98:	443a      	add	r2, r7
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800cc9a:	1a77      	subs	r7, r6, r1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800cc9c:	4431      	add	r1, r6
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800cc9e:	b280      	uxth	r0, r0
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800cca0:	4419      	add	r1, r3
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800cca2:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800cca6:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800ccaa:	443d      	add	r5, r7
 800ccac:	ea6f 0663 	mvn.w	r6, r3, asr #1
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800ccb0:	105b      	asrs	r3, r3, #1
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800ccb2:	b289      	uxth	r1, r1
 800ccb4:	3301      	adds	r3, #1
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800ccb6:	b292      	uxth	r2, r2
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800ccb8:	b2ad      	uxth	r5, r5
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800ccba:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800ccbe:	fa10 f083 	uxtah	r0, r0, r3
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800ccc2:	fa11 f383 	uxtah	r3, r1, r3
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800ccc6:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800ccca:	fa12 f286 	uxtah	r2, r2, r6
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
 800ccce:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ccd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800ccd4:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800ccd8:	fa15 f586 	uxtah	r5, r5, r6
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ccdc:	2bfe      	cmp	r3, #254	; 0xfe
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
 800ccde:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
 800cce2:	f8ad 504e 	strh.w	r5, [sp, #78]	; 0x4e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800cce6:	bf28      	it	cs
 800cce8:	23ff      	movcs	r3, #255	; 0xff
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
 800ccea:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800ccee:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800ccf0:	f7fb fbf2 	bl	80084d8 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800ccf4:	f009 ff0c 	bl	8016b10 <lv_disp_get_draw_buf>
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800ccf8:	465a      	mov	r2, fp
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800ccfa:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
 800ccfc:	a913      	add	r1, sp, #76	; 0x4c
 800ccfe:	a815      	add	r0, sp, #84	; 0x54
 800cd00:	f00a f9b9 	bl	8017076 <_lv_area_intersect>
    if(is_common == false) return;
 800cd04:	2800      	cmp	r0, #0
 800cd06:	f000 854e 	beq.w	800d7a6 <lv_draw_rect+0xb7a>
    draw_area.x1 -= disp_area->x1;
 800cd0a:	8a2e      	ldrh	r6, [r5, #16]
    for(y = 0; y < size; y++) {
 800cd0c:	f04f 0900 	mov.w	r9, #0
    draw_area.x1 -= disp_area->x1;
 800cd10:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    draw_area.y1 -= disp_area->y1;
 800cd14:	8a68      	ldrh	r0, [r5, #18]
    draw_area.x1 -= disp_area->x1;
 800cd16:	1b9b      	subs	r3, r3, r6
    draw_area.y1 -= disp_area->y1;
 800cd18:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    draw_area.x2 -= disp_area->x1;
 800cd1c:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    draw_area.x1 -= disp_area->x1;
 800cd20:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    draw_area.y1 -= disp_area->y1;
 800cd24:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
 800cd26:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
 800cd2a:	1b92      	subs	r2, r2, r6
    draw_area.y1 -= disp_area->y1;
 800cd2c:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
    draw_area.y2 -= disp_area->y1;
 800cd30:	1a1b      	subs	r3, r3, r0
    lv_area_copy(&bg_coords, coords);
 800cd32:	9905      	ldr	r1, [sp, #20]
 800cd34:	a817      	add	r0, sp, #92	; 0x5c
    draw_area.x2 -= disp_area->x1;
 800cd36:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
    draw_area.y2 -= disp_area->y1;
 800cd3a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    lv_area_copy(&bg_coords, coords);
 800cd3e:	f7ff fbe5 	bl	800c50c <lv_area_copy>
    bg_coords.x1 += 1;
 800cd42:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
    bg_coords.y1 += 1;
 800cd46:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
    bg_coords.x2 -= 1;
 800cd4a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    bg_coords.x1 += 1;
 800cd4e:	3501      	adds	r5, #1
    bg_coords.y1 += 1;
 800cd50:	3101      	adds	r1, #1
 800cd52:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
    bg_coords.x2 -= 1;
 800cd56:	1e5a      	subs	r2, r3, #1
    bg_coords.x1 += 1;
 800cd58:	b2ad      	uxth	r5, r5
    bg_coords.y1 += 1;
 800cd5a:	b288      	uxth	r0, r1
    bg_coords.y2 -= 1;
 800cd5c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    bg_coords.x1 += 1;
 800cd60:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
 800cd64:	1b5d      	subs	r5, r3, r5
    bg_coords.x2 -= 1;
 800cd66:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    bg_coords.y2 -= 1;
 800cd6a:	1e4a      	subs	r2, r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cd6c:	1a09      	subs	r1, r1, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cd6e:	b22d      	sxth	r5, r5
 800cd70:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 800cd74:	3601      	adds	r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cd76:	b20b      	sxth	r3, r1
    int32_t r_bg = dsc->radius;
 800cd78:	f9b8 2000 	ldrsh.w	r2, [r8]
 800cd7c:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800cd80:	429d      	cmp	r5, r3
    bg_coords.y1 += 1;
 800cd82:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
 800cd86:	bfa8      	it	ge
 800cd88:	461d      	movge	r5, r3
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800cd8a:	106d      	asrs	r5, r5, #1
 800cd8c:	4295      	cmp	r5, r2
 800cd8e:	462b      	mov	r3, r5
 800cd90:	bfa8      	it	ge
 800cd92:	4613      	movge	r3, r2
 800cd94:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cd96:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cd9a:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cd9c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800cda0:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cda2:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cda4:	1a5b      	subs	r3, r3, r1
 800cda6:	b21b      	sxth	r3, r3
    short_side = LV_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	bfa8      	it	ge
 800cdac:	461e      	movge	r6, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800cdae:	1076      	asrs	r6, r6, #1
 800cdb0:	4296      	cmp	r6, r2
 800cdb2:	bfa8      	it	ge
 800cdb4:	4616      	movge	r6, r2
    int32_t corner_size = sw  + r_sh;
 800cdb6:	19a3      	adds	r3, r4, r6
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cdb8:	fb03 f003 	mul.w	r0, r3, r3
    int32_t corner_size = sw  + r_sh;
 800cdbc:	9306      	str	r3, [sp, #24]
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cdbe:	0040      	lsls	r0, r0, #1
 800cdc0:	f00a ff5a 	bl	8017c78 <lv_mem_buf_get>
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800cdc4:	f9b8 402a 	ldrsh.w	r4, [r8, #42]	; 0x2a
    lv_area_copy(&sh_area, coords);
 800cdc8:	a911      	add	r1, sp, #68	; 0x44
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800cdca:	9007      	str	r0, [sp, #28]
    lv_area_copy(&sh_area, coords);
 800cdcc:	a81d      	add	r0, sp, #116	; 0x74
    int32_t size = sw_ori  + r;
 800cdce:	1935      	adds	r5, r6, r4
    lv_area_copy(&sh_area, coords);
 800cdd0:	f7ff fb9c 	bl	800c50c <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cdd4:	f004 0201 	and.w	r2, r4, #1
 800cdd8:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800cddc:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800cde0:	920a      	str	r2, [sp, #40]	; 0x28
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cde2:	f064 0201 	orn	r2, r4, #1
 800cde6:	f3c3 034f 	ubfx	r3, r3, #1, #16
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800cdea:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 800cdee:	43c9      	mvns	r1, r1
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800cdf0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cdf4:	441a      	add	r2, r3
    sh_area.y1 = sw / 2 + 1;
 800cdf6:	3301      	adds	r3, #1
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800cdf8:	4401      	add	r1, r0
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800cdfa:	a824      	add	r0, sp, #144	; 0x90
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800cdfc:	4432      	add	r2, r6
    sh_area.y1 = sw / 2 + 1;
 800cdfe:	b29b      	uxth	r3, r3
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800ce00:	b292      	uxth	r2, r2
    sh_area.y1 = sw / 2 + 1;
 800ce02:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800ce06:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800ce0a:	440a      	add	r2, r1
 800ce0c:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 800ce10:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 800ce14:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800ce18:	3201      	adds	r2, #1
 800ce1a:	1a52      	subs	r2, r2, r1
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800ce1c:	a91d      	add	r1, sp, #116	; 0x74
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800ce1e:	4413      	add	r3, r2
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800ce20:	4632      	mov	r2, r6
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800ce22:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800ce26:	2300      	movs	r3, #0
 800ce28:	f7ff fb40 	bl	800c4ac <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800ce2c:	2c01      	cmp	r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800ce2e:	4628      	mov	r0, r5
    else sw = sw_ori >> 1;
 800ce30:	bf18      	it	ne
 800ce32:	1064      	asrne	r4, r4, #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800ce34:	f00a ff20 	bl	8017c78 <lv_mem_buf_get>
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800ce38:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800ce3a:	4607      	mov	r7, r0
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800ce3c:	9308      	str	r3, [sp, #32]
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800ce3e:	b22b      	sxth	r3, r5
 800ce40:	ee08 3a10 	vmov	s16, r3
    for(y = 0; y < size; y++) {
 800ce44:	454d      	cmp	r5, r9
 800ce46:	dc09      	bgt.n	800ce5c <lv_draw_rect+0x230>
    lv_mem_buf_release(mask_line);
 800ce48:	4638      	mov	r0, r7
 800ce4a:	fb05 f605 	mul.w	r6, r5, r5
 800ce4e:	f00a fd6f 	bl	8017930 <lv_mem_buf_release>
    if(sw == 1) {
 800ce52:	2c01      	cmp	r4, #1
 800ce54:	f040 81b5 	bne.w	800d1c2 <lv_draw_rect+0x596>
        for(i = 0; i < size * size; i++) {
 800ce58:	2300      	movs	r3, #0
 800ce5a:	e03c      	b.n	800ced6 <lv_draw_rect+0x2aa>
        lv_memset_ff(mask_line, size);
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f00a ff87 	bl	8017d72 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800ce64:	ab24      	add	r3, sp, #144	; 0x90
 800ce66:	fa0f f289 	sxth.w	r2, r9
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	4638      	mov	r0, r7
 800ce70:	ee18 3a10 	vmov	r3, s16
 800ce74:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ce76:	47b0      	blx	r6
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800ce78:	b948      	cbnz	r0, 800ce8e <lv_draw_rect+0x262>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800ce7a:	4651      	mov	r1, sl
 800ce7c:	9808      	ldr	r0, [sp, #32]
 800ce7e:	f00a ff49 	bl	8017d14 <lv_memset_00>
        sh_ups_tmp_buf += size;
 800ce82:	9b08      	ldr	r3, [sp, #32]
    for(y = 0; y < size; y++) {
 800ce84:	f109 0901 	add.w	r9, r9, #1
        sh_ups_tmp_buf += size;
 800ce88:	4453      	add	r3, sl
 800ce8a:	9308      	str	r3, [sp, #32]
    for(y = 0; y < size; y++) {
 800ce8c:	e7da      	b.n	800ce44 <lv_draw_rect+0x218>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800ce8e:	783a      	ldrb	r2, [r7, #0]
 800ce90:	4639      	mov	r1, r7
 800ce92:	9b08      	ldr	r3, [sp, #32]
 800ce94:	0192      	lsls	r2, r2, #6
 800ce96:	fb92 f2f4 	sdiv	r2, r2, r4
 800ce9a:	f823 2b02 	strh.w	r2, [r3], #2
            for(i = 1; i < size; i++) {
 800ce9e:	9a08      	ldr	r2, [sp, #32]
 800cea0:	eb0a 0002 	add.w	r0, sl, r2
 800cea4:	4298      	cmp	r0, r3
 800cea6:	d0ec      	beq.n	800ce82 <lv_draw_rect+0x256>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800cea8:	468c      	mov	ip, r1
 800ceaa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ceae:	3302      	adds	r3, #2
 800ceb0:	f89c c000 	ldrb.w	ip, [ip]
 800ceb4:	4594      	cmp	ip, r2
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800ceb6:	bf16      	itet	ne
 800ceb8:	0192      	lslne	r2, r2, #6
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800ceba:	f833 2c04 	ldrheq.w	r2, [r3, #-4]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800cebe:	fb92 f2f4 	sdivne	r2, r2, r4
 800cec2:	f823 2c02 	strh.w	r2, [r3, #-2]
            for(i = 1; i < size; i++) {
 800cec6:	e7ed      	b.n	800cea4 <lv_draw_rect+0x278>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800cec8:	9a07      	ldr	r2, [sp, #28]
 800ceca:	9907      	ldr	r1, [sp, #28]
 800cecc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ced0:	0992      	lsrs	r2, r2, #6
 800ced2:	54ca      	strb	r2, [r1, r3]
        for(i = 0; i < size * size; i++) {
 800ced4:	3301      	adds	r3, #1
 800ced6:	42b3      	cmp	r3, r6
 800ced8:	d1f6      	bne.n	800cec8 <lv_draw_rect+0x29c>
 800ceda:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
 800cede:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800cee2:	3301      	adds	r3, #1
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800ceea:	fa01 f383 	sxtah	r3, r1, r3
 800ceee:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	b21b      	sxth	r3, r3
 800cef6:	920c      	str	r2, [sp, #48]	; 0x30
 800cef8:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800cefa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
 800cefe:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800cf02:	3301      	adds	r3, #1
 800cf04:	1a9b      	subs	r3, r3, r2
 800cf06:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800cf0a:	fa01 f383 	sxtah	r3, r1, r3
 800cf0e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	b21b      	sxth	r3, r3
 800cf16:	920d      	str	r2, [sp, #52]	; 0x34
 800cf18:	930b      	str	r3, [sp, #44]	; 0x2c
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800cf1a:	f7ff f9c1 	bl	800c2a0 <lv_draw_mask_get_cnt>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f040 817f 	bne.w	800d222 <lv_draw_rect+0x5f6>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
 800cf24:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f040 817c 	bne.w	800d226 <lv_draw_rect+0x5fa>
    else if(dsc->shadow_spread != 0) simple_mode = false;
 800cf2e:	f9b8 5030 	ldrsh.w	r5, [r8, #48]	; 0x30
 800cf32:	fab5 f385 	clz	r3, r5
 800cf36:	095b      	lsrs	r3, r3, #5
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800cf38:	9308      	str	r3, [sp, #32]
 800cf3a:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 800cf3e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cf42:	3001      	adds	r0, #1
 800cf44:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&sh_area));
 800cf46:	b200      	sxth	r0, r0
 800cf48:	f00a fe96 	bl	8017c78 <lv_mem_buf_get>
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800cf4c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 800cf50:	a917      	add	r1, sp, #92	; 0x5c
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&sh_area));
 800cf52:	4604      	mov	r4, r0
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
 800cf54:	ee08 3a10 	vmov	s16, r3
 800cf58:	a824      	add	r0, sp, #144	; 0x90
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	ee18 2a10 	vmov	r2, s16
 800cf60:	f7ff faa4 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800cf64:	2100      	movs	r1, #0
 800cf66:	a824      	add	r0, sp, #144	; 0x90
 800cf68:	f7ff f93a 	bl	800c1e0 <lv_draw_mask_add>
    a.x2 = sh_area.x2;
 800cf6c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    a.x1 = a.x2 - corner_size + 1;
 800cf70:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800cf74:	ee08 0a90 	vmov	s17, r0
    a.x2 = sh_area.x2;
 800cf78:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800cf7c:	3301      	adds	r3, #1
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800cf7e:	465a      	mov	r2, fp
 800cf80:	a919      	add	r1, sp, #100	; 0x64
    a.x1 = a.x2 - corner_size + 1;
 800cf82:	1b5b      	subs	r3, r3, r5
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800cf84:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = a.x2 - corner_size + 1;
 800cf86:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y1;
 800cf8a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800cf8e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = a.y1 + corner_size - 1;
 800cf92:	3b01      	subs	r3, #1
 800cf94:	442b      	add	r3, r5
 800cf96:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
 800cf9a:	f00a f86c 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d048      	beq.n	800d034 <lv_draw_rect+0x408>
 800cfa2:	ee18 2a10 	vmov	r2, s16
 800cfa6:	a917      	add	r1, sp, #92	; 0x5c
 800cfa8:	a819      	add	r0, sp, #100	; 0x64
 800cfaa:	f00a f963 	bl	8017274 <_lv_area_is_in>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d140      	bne.n	800d034 <lv_draw_rect+0x408>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800cfb2:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800cfb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfb8:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	f107 0701 	add.w	r7, r7, #1
 800cfc2:	bfc8      	it	gt
 800cfc4:	4613      	movgt	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800cfc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y2 > h_half) ca.y2 = h_half;
 800cfc8:	bfc8      	it	gt
 800cfca:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800cfce:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	bfde      	ittt	le
 800cfd6:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800cfd8:	3301      	addle	r3, #1
 800cfda:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
 800cfde:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800cfe2:	1abf      	subs	r7, r7, r2
 800cfe4:	b23f      	sxth	r7, r7
        if(w > 0) {
 800cfe6:	2f00      	cmp	r7, #0
 800cfe8:	dd24      	ble.n	800d034 <lv_draw_rect+0x408>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800cfea:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800cfee:	a81d      	add	r0, sp, #116	; 0x74
 800cff0:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            for(y = 0; y < h; y++) {
 800cff4:	f04f 0900 	mov.w	r9, #0
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800cff8:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800cffc:	f10a 0a01 	add.w	sl, sl, #1
 800d000:	1b9e      	subs	r6, r3, r6
 800d002:	ebaa 0a03 	sub.w	sl, sl, r3
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800d006:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800d00a:	fa0f f18a 	sxth.w	r1, sl
 800d00e:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d010:	9b06      	ldr	r3, [sp, #24]
 800d012:	910e      	str	r1, [sp, #56]	; 0x38
            lv_area_copy(&fa, &ca);
 800d014:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d016:	fb03 2606 	mla	r6, r3, r6, r2
 800d01a:	9b07      	ldr	r3, [sp, #28]
 800d01c:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
 800d01e:	f7ff fa75 	bl	800c50c <lv_area_copy>
            fa.y2 = fa.y1;
 800d022:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d026:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d028:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d02c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d02e:	4599      	cmp	r9, r3
 800d030:	f2c0 80fb 	blt.w	800d22a <lv_draw_rect+0x5fe>
    a.x2 = sh_area.x2;
 800d034:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d038:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d03a:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d03e:	a81b      	add	r0, sp, #108	; 0x6c
    a.x2 = sh_area.x2;
 800d040:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800d044:	3301      	adds	r3, #1
    a.y2 = sh_area.y2;
 800d046:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x1 = a.x2 - corner_size + 1;
 800d04a:	1b5b      	subs	r3, r3, r5
 800d04c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d050:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d052:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800d054:	1b5b      	subs	r3, r3, r5
 800d056:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d05a:	f00a f80c 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d05e:	2800      	cmp	r0, #0
 800d060:	d047      	beq.n	800d0f2 <lv_draw_rect+0x4c6>
 800d062:	ee18 2a10 	vmov	r2, s16
 800d066:	a917      	add	r1, sp, #92	; 0x5c
 800d068:	a819      	add	r0, sp, #100	; 0x64
 800d06a:	f00a f903 	bl	8017274 <_lv_area_is_in>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d13f      	bne.n	800d0f2 <lv_draw_rect+0x4c6>
        if(ca.y1 <= h_half) ca.y1 = h_half;
 800d072:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800d076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d078:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d07c:	4293      	cmp	r3, r2
 800d07e:	f106 0601 	add.w	r6, r6, #1
 800d082:	bfd8      	it	le
 800d084:	4613      	movle	r3, r2
        if(ca.x1 <= w_half) ca.x1 = w_half;
 800d086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y1 <= h_half) ca.y1 = h_half;
 800d088:	bfd8      	it	le
 800d08a:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(ca.x1 <= w_half) ca.x1 = w_half;
 800d08e:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d092:	4293      	cmp	r3, r2
 800d094:	bfdc      	itt	le
 800d096:	4613      	movle	r3, r2
 800d098:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
 800d09c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d0a0:	1af6      	subs	r6, r6, r3
 800d0a2:	b236      	sxth	r6, r6
        if(w > 0) {
 800d0a4:	2e00      	cmp	r6, #0
 800d0a6:	dd24      	ble.n	800d0f2 <lv_draw_rect+0x4c6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d0a8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d0ac:	a81d      	add	r0, sp, #116	; 0x74
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d0ae:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            for(y = 0; y < h; y++) {
 800d0b2:	f04f 0900 	mov.w	r9, #0
 800d0b6:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
 800d0ba:	f102 0a01 	add.w	sl, r2, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d0be:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800d0c0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d0c4:	ebaa 0a01 	sub.w	sl, sl, r1
 800d0c8:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d0ca:	9a06      	ldr	r2, [sp, #24]
 800d0cc:	fa0f f18a 	sxth.w	r1, sl
 800d0d0:	fb02 3707 	mla	r7, r2, r7, r3
 800d0d4:	9b07      	ldr	r3, [sp, #28]
 800d0d6:	910e      	str	r1, [sp, #56]	; 0x38
            lv_area_copy(&fa, &ca);
 800d0d8:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d0da:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d0dc:	f7ff fa16 	bl	800c50c <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800d0e0:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d0e4:	4682      	mov	sl, r0
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800d0e6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            for(y = 0; y < h; y++) {
 800d0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0ec:	4599      	cmp	r9, r3
 800d0ee:	f2c0 80c8 	blt.w	800d282 <lv_draw_rect+0x656>
    a.x2 = sh_area.x2;
 800d0f2:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d0f6:	465a      	mov	r2, fp
 800d0f8:	a919      	add	r1, sp, #100	; 0x64
 800d0fa:	a81b      	add	r0, sp, #108	; 0x6c
    a.x2 = sh_area.x2;
 800d0fc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.x1 = a.x2 - corner_size + 1;
 800d100:	3301      	adds	r3, #1
 800d102:	1b5b      	subs	r3, r3, r5
 800d104:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.y1 = sh_area.y1 + corner_size;
 800d108:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d10c:	442b      	add	r3, r5
 800d10e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800d112:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d116:	1b5b      	subs	r3, r3, r5
 800d118:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d11c:	f009 ffab 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d120:	2800      	cmp	r0, #0
 800d122:	d049      	beq.n	800d1b8 <lv_draw_rect+0x58c>
 800d124:	ee18 2a10 	vmov	r2, s16
 800d128:	a917      	add	r1, sp, #92	; 0x5c
 800d12a:	a819      	add	r0, sp, #100	; 0x64
 800d12c:	f00a f8a2 	bl	8017274 <_lv_area_is_in>
 800d130:	2800      	cmp	r0, #0
 800d132:	d141      	bne.n	800d1b8 <lv_draw_rect+0x58c>
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
 800d134:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d13a:	4293      	cmp	r3, r2
 800d13c:	bfde      	ittt	le
 800d13e:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 800d140:	3301      	addle	r3, #1
 800d142:	f8ad 306c 	strhle.w	r3, [sp, #108]	; 0x6c
        if(simple_mode) ca.x1 = LV_MAX(ca.x1, coords->x2);
 800d146:	9b08      	ldr	r3, [sp, #32]
 800d148:	b14b      	cbz	r3, 800d15e <lv_draw_rect+0x532>
 800d14a:	9b05      	ldr	r3, [sp, #20]
 800d14c:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800d150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d154:	4293      	cmp	r3, r2
 800d156:	bfb8      	it	lt
 800d158:	4613      	movlt	r3, r2
 800d15a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d15e:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d162:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d166:	3601      	adds	r6, #1
 800d168:	1af6      	subs	r6, r6, r3
 800d16a:	b236      	sxth	r6, r6
        if(w > 0) {
 800d16c:	2e00      	cmp	r6, #0
 800d16e:	dd23      	ble.n	800d1b8 <lv_draw_rect+0x58c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d170:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d174:	a81d      	add	r0, sp, #116	; 0x74
 800d176:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800d17a:	a91b      	add	r1, sp, #108	; 0x6c
 800d17c:	f10a 0a01 	add.w	sl, sl, #1
            for(y = 0; y < h; y++) {
 800d180:	f04f 0900 	mov.w	r9, #0
 800d184:	ebaa 0a02 	sub.w	sl, sl, r2
 800d188:	fa0f f28a 	sxth.w	r2, sl
 800d18c:	920d      	str	r2, [sp, #52]	; 0x34
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800d18e:	9a06      	ldr	r2, [sp, #24]
 800d190:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800d192:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d196:	1a9b      	subs	r3, r3, r2
 800d198:	9a06      	ldr	r2, [sp, #24]
 800d19a:	fb02 3707 	mla	r7, r2, r7, r3
 800d19e:	9b07      	ldr	r3, [sp, #28]
 800d1a0:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d1a2:	f7ff f9b3 	bl	800c50c <lv_area_copy>
            fa.y2 = fa.y1;
 800d1a6:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa,
 800d1aa:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d1ac:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d1b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1b2:	4599      	cmp	r9, r3
 800d1b4:	f2c0 8091 	blt.w	800d2da <lv_draw_rect+0x6ae>
        for(x = 0; x < corner_size / 2; x++) {
 800d1b8:	9b06      	ldr	r3, [sp, #24]
 800d1ba:	2000      	movs	r0, #0
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800d1bc:	9a07      	ldr	r2, [sp, #28]
        for(x = 0; x < corner_size / 2; x++) {
 800d1be:	105f      	asrs	r7, r3, #1
 800d1c0:	e0c7      	b.n	800d352 <lv_draw_rect+0x726>
    shadow_blur_corner(size, sw, sh_buf);
 800d1c2:	b228      	sxth	r0, r5
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	9a07      	ldr	r2, [sp, #28]
 800d1c8:	9008      	str	r0, [sp, #32]
 800d1ca:	f7ff f9f6 	bl	800c5ba <shadow_blur_corner>
    sw += sw_ori & 1;
 800d1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d0:	4423      	add	r3, r4
    if(sw > 1) {
 800d1d2:	2b01      	cmp	r3, #1
    sw += sw_ori & 1;
 800d1d4:	4619      	mov	r1, r3
    if(sw > 1) {
 800d1d6:	dd0d      	ble.n	800d1f4 <lv_draw_rect+0x5c8>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d1d8:	9b07      	ldr	r3, [sp, #28]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d1da:	2401      	movs	r4, #1
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d1dc:	9a07      	ldr	r2, [sp, #28]
 800d1de:	881b      	ldrh	r3, [r3, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d1e0:	9808      	ldr	r0, [sp, #32]
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d1e2:	019b      	lsls	r3, r3, #6
 800d1e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1e8:	8013      	strh	r3, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d1ea:	42b4      	cmp	r4, r6
 800d1ec:	d304      	bcc.n	800d1f8 <lv_draw_rect+0x5cc>
        shadow_blur_corner(size, sw, sh_buf);
 800d1ee:	9a07      	ldr	r2, [sp, #28]
 800d1f0:	f7ff f9e3 	bl	800c5ba <shadow_blur_corner>
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e011      	b.n	800d21c <lv_draw_rect+0x5f0>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800d1f8:	8853      	ldrh	r3, [r2, #2]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d1fa:	3401      	adds	r4, #1
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
 800d1fc:	f832 5b02 	ldrh.w	r5, [r2], #2
 800d200:	42ab      	cmp	r3, r5
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d202:	bf1e      	ittt	ne
 800d204:	019b      	lslne	r3, r3, #6
 800d206:	fbb3 f3f1 	udivne	r3, r3, r1
 800d20a:	b29d      	uxthne	r5, r3
 800d20c:	8015      	strh	r5, [r2, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
 800d20e:	e7ec      	b.n	800d1ea <lv_draw_rect+0x5be>
        res_buf[x] = sh_buf[x];
 800d210:	9a07      	ldr	r2, [sp, #28]
 800d212:	9907      	ldr	r1, [sp, #28]
 800d214:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d218:	54ca      	strb	r2, [r1, r3]
    for(x = 0; x < size * size; x++) {
 800d21a:	3301      	adds	r3, #1
 800d21c:	42b3      	cmp	r3, r6
 800d21e:	d1f7      	bne.n	800d210 <lv_draw_rect+0x5e4>
 800d220:	e65b      	b.n	800ceda <lv_draw_rect+0x2ae>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
 800d222:	2300      	movs	r3, #0
 800d224:	e688      	b.n	800cf38 <lv_draw_rect+0x30c>
 800d226:	9008      	str	r0, [sp, #32]
 800d228:	e687      	b.n	800cf3a <lv_draw_rect+0x30e>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d22a:	4631      	mov	r1, r6
 800d22c:	463a      	mov	r2, r7
 800d22e:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d230:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d234:	f00a fba8 	bl	8017988 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d238:	463b      	mov	r3, r7
 800d23a:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d23e:	4620      	mov	r0, r4
 800d240:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d244:	f7fe ffe2 	bl	800c20c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d248:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d24c:	2801      	cmp	r0, #1
 800d24e:	bf08      	it	eq
 800d250:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d252:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d256:	9302      	str	r3, [sp, #8]
 800d258:	4651      	mov	r1, sl
 800d25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d25c:	e9cd 0300 	strd	r0, r3, [sp]
 800d260:	4623      	mov	r3, r4
 800d262:	4658      	mov	r0, fp
 800d264:	f7fc f88c 	bl	8009380 <_lv_blend_fill>
                fa.y1++;
 800d268:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d26c:	3301      	adds	r3, #1
 800d26e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800d272:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d276:	3301      	adds	r3, #1
 800d278:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800d27c:	9b06      	ldr	r3, [sp, #24]
 800d27e:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800d280:	e6d4      	b.n	800d02c <lv_draw_rect+0x400>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d282:	4639      	mov	r1, r7
 800d284:	4632      	mov	r2, r6
 800d286:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800d288:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d28c:	f00a fb7c 	bl	8017988 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d290:	4633      	mov	r3, r6
 800d292:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d296:	4620      	mov	r0, r4
 800d298:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d29c:	f7fe ffb6 	bl	800c20c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d2a0:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d2a4:	2801      	cmp	r0, #1
 800d2a6:	bf08      	it	eq
 800d2a8:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d2aa:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800d2ae:	9302      	str	r3, [sp, #8]
 800d2b0:	4651      	mov	r1, sl
 800d2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b4:	e9cd 0300 	strd	r0, r3, [sp]
 800d2b8:	4623      	mov	r3, r4
 800d2ba:	4658      	mov	r0, fp
 800d2bc:	f7fc f860 	bl	8009380 <_lv_blend_fill>
                fa.y1--;
 800d2c0:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2--;
 800d2ca:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800d2d4:	9b06      	ldr	r3, [sp, #24]
 800d2d6:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800d2d8:	e707      	b.n	800d0ea <lv_draw_rect+0x4be>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800d2da:	4632      	mov	r2, r6
 800d2dc:	4639      	mov	r1, r7
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f00a fb52 	bl	8017988 <lv_memcpy>
                if(simple_mode) {
 800d2e4:	9b08      	ldr	r3, [sp, #32]
 800d2e6:	b94b      	cbnz	r3, 800d2fc <lv_draw_rect+0x6d0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800d2e8:	4633      	mov	r3, r6
 800d2ea:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800d2ee:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f7fe ff8a 	bl	800c20c <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d2f8:	2801      	cmp	r0, #1
 800d2fa:	d100      	bne.n	800d2fe <lv_draw_rect+0x6d2>
 800d2fc:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800d2fe:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d302:	4651      	mov	r1, sl
 800d304:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800d308:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800d30c:	9302      	str	r3, [sp, #8]
 800d30e:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800d312:	e9cd 0300 	strd	r0, r3, [sp]
 800d316:	4623      	mov	r3, r4
 800d318:	4658      	mov	r0, fp
 800d31a:	f7fc f831 	bl	8009380 <_lv_blend_fill>
                fa.y1++;
 800d31e:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d322:	3301      	adds	r3, #1
 800d324:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800d328:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800d32c:	3301      	adds	r3, #1
 800d32e:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d332:	e73d      	b.n	800d1b0 <lv_draw_rect+0x584>
            lv_opa_t tmp = sh_buf_tmp[x];
 800d334:	f811 cf01 	ldrb.w	ip, [r1, #1]!
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
 800d338:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 800d33c:	f881 e000 	strb.w	lr, [r1]
            sh_buf_tmp[corner_size - x - 1] = tmp;
 800d340:	f883 c000 	strb.w	ip, [r3]
        for(x = 0; x < corner_size / 2; x++) {
 800d344:	eba6 0c03 	sub.w	ip, r6, r3
 800d348:	4567      	cmp	r7, ip
 800d34a:	dcf3      	bgt.n	800d334 <lv_draw_rect+0x708>
        sh_buf_tmp += corner_size;
 800d34c:	9b06      	ldr	r3, [sp, #24]
    for(y = 0; y < corner_size; y++) {
 800d34e:	3001      	adds	r0, #1
        sh_buf_tmp += corner_size;
 800d350:	441a      	add	r2, r3
    for(y = 0; y < corner_size; y++) {
 800d352:	9b06      	ldr	r3, [sp, #24]
 800d354:	4283      	cmp	r3, r0
 800d356:	dd03      	ble.n	800d360 <lv_draw_rect+0x734>
 800d358:	18d6      	adds	r6, r2, r3
 800d35a:	1e51      	subs	r1, r2, #1
 800d35c:	4633      	mov	r3, r6
 800d35e:	e7f1      	b.n	800d344 <lv_draw_rect+0x718>
    a.x1 = sh_area.x1;
 800d360:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d364:	465a      	mov	r2, fp
 800d366:	a919      	add	r1, sp, #100	; 0x64
 800d368:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800d36a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800d36e:	3b01      	subs	r3, #1
 800d370:	442b      	add	r3, r5
 800d372:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800d376:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800d37a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = a.y1 + corner_size - 1;
 800d37e:	3b01      	subs	r3, #1
 800d380:	442b      	add	r3, r5
 800d382:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d386:	f009 fe76 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d047      	beq.n	800d41e <lv_draw_rect+0x7f2>
 800d38e:	ee18 2a10 	vmov	r2, s16
 800d392:	a917      	add	r1, sp, #92	; 0x5c
 800d394:	a819      	add	r0, sp, #100	; 0x64
 800d396:	f009 ff6d 	bl	8017274 <_lv_area_is_in>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d13f      	bne.n	800d41e <lv_draw_rect+0x7f2>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d39e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800d3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	bfc8      	it	gt
 800d3a8:	4613      	movgt	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d3aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d3ac:	bfc8      	it	gt
 800d3ae:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d3b2:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	bfc8      	it	gt
 800d3ba:	4613      	movgt	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d3bc:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800d3c0:	bfc8      	it	gt
 800d3c2:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
 800d3c6:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 800d3ca:	3701      	adds	r7, #1
 800d3cc:	1abf      	subs	r7, r7, r2
 800d3ce:	b23f      	sxth	r7, r7
        if(w > 0) {
 800d3d0:	2f00      	cmp	r7, #0
 800d3d2:	dd24      	ble.n	800d41e <lv_draw_rect+0x7f2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d3d4:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d3d8:	a81d      	add	r0, sp, #116	; 0x74
 800d3da:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            for(y = 0; y < h; y++) {
 800d3de:	f04f 0900 	mov.w	r9, #0
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d3e2:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
 800d3e6:	f10a 0a01 	add.w	sl, sl, #1
 800d3ea:	1b9e      	subs	r6, r3, r6
 800d3ec:	ebaa 0a03 	sub.w	sl, sl, r3
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800d3f0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800d3f4:	fa0f f18a 	sxth.w	r1, sl
 800d3f8:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d3fa:	9b06      	ldr	r3, [sp, #24]
 800d3fc:	910d      	str	r1, [sp, #52]	; 0x34
            lv_area_copy(&fa, &ca);
 800d3fe:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d400:	fb03 2606 	mla	r6, r3, r6, r2
 800d404:	9b07      	ldr	r3, [sp, #28]
 800d406:	441e      	add	r6, r3
            lv_area_copy(&fa, &ca);
 800d408:	f7ff f880 	bl	800c50c <lv_area_copy>
            fa.y2 = fa.y1;
 800d40c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d410:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d412:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d418:	4599      	cmp	r9, r3
 800d41a:	f2c0 839b 	blt.w	800db54 <lv_draw_rect+0xf28>
    a.x1 = sh_area.x1;
 800d41e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d422:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d424:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d428:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800d42a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800d42e:	3b01      	subs	r3, #1
    a.y2 = sh_area.y2;
 800d430:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x2 = a.x1 + corner_size - 1;
 800d434:	442b      	add	r3, r5
 800d436:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800d43a:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d43c:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800d43e:	1b5b      	subs	r3, r3, r5
 800d440:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d444:	f009 fe17 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d448:	2800      	cmp	r0, #0
 800d44a:	d046      	beq.n	800d4da <lv_draw_rect+0x8ae>
 800d44c:	ee18 2a10 	vmov	r2, s16
 800d450:	a917      	add	r1, sp, #92	; 0x5c
 800d452:	a819      	add	r0, sp, #100	; 0x64
 800d454:	f009 ff0e 	bl	8017274 <_lv_area_is_in>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d13e      	bne.n	800d4da <lv_draw_rect+0x8ae>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d45c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800d460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d462:	4293      	cmp	r3, r2
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d466:	bfde      	ittt	le
 800d468:	9b0c      	ldrle	r3, [sp, #48]	; 0x30
 800d46a:	3301      	addle	r3, #1
 800d46c:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d470:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800d474:	4293      	cmp	r3, r2
 800d476:	bfc4      	itt	gt
 800d478:	4613      	movgt	r3, r2
 800d47a:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d47e:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d482:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d486:	3601      	adds	r6, #1
 800d488:	1af6      	subs	r6, r6, r3
 800d48a:	b236      	sxth	r6, r6
        if(w > 0) {
 800d48c:	2e00      	cmp	r6, #0
 800d48e:	dd24      	ble.n	800d4da <lv_draw_rect+0x8ae>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d490:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d494:	a81d      	add	r0, sp, #116	; 0x74
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d496:	f9bd 706a 	ldrsh.w	r7, [sp, #106]	; 0x6a
            for(y = 0; y < h; y++) {
 800d49a:	f04f 0900 	mov.w	r9, #0
 800d49e:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
 800d4a2:	f102 0a01 	add.w	sl, r2, #1
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d4a6:	1abf      	subs	r7, r7, r2
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
 800d4a8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d4ac:	ebaa 0a01 	sub.w	sl, sl, r1
 800d4b0:	1a9b      	subs	r3, r3, r2
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d4b2:	9a06      	ldr	r2, [sp, #24]
 800d4b4:	fa0f f18a 	sxth.w	r1, sl
 800d4b8:	fb02 3707 	mla	r7, r2, r7, r3
 800d4bc:	9b07      	ldr	r3, [sp, #28]
 800d4be:	910d      	str	r1, [sp, #52]	; 0x34
            lv_area_copy(&fa, &ca);
 800d4c0:	a91b      	add	r1, sp, #108	; 0x6c
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d4c2:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d4c4:	f7ff f822 	bl	800c50c <lv_area_copy>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800d4c8:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d4cc:	4682      	mov	sl, r0
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
 800d4ce:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            for(y = 0; y < h; y++) {
 800d4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4d4:	4599      	cmp	r9, r3
 800d4d6:	f2c0 8369 	blt.w	800dbac <lv_draw_rect+0xf80>
    a.x1 = sh_area.x1;
 800d4da:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d4de:	465a      	mov	r2, fp
 800d4e0:	a919      	add	r1, sp, #100	; 0x64
 800d4e2:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1;
 800d4e4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = a.x1 + corner_size - 1;
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	442b      	add	r3, r5
 800d4ec:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800d4f0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d4f4:	442b      	add	r3, r5
 800d4f6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800d4fa:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d4fe:	1b5b      	subs	r3, r3, r5
 800d500:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d504:	f009 fdb7 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d508:	2800      	cmp	r0, #0
 800d50a:	d048      	beq.n	800d59e <lv_draw_rect+0x972>
 800d50c:	ee18 2a10 	vmov	r2, s16
 800d510:	a917      	add	r1, sp, #92	; 0x5c
 800d512:	a819      	add	r0, sp, #100	; 0x64
 800d514:	f009 feae 	bl	8017274 <_lv_area_is_in>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d140      	bne.n	800d59e <lv_draw_rect+0x972>
        if(ca.x2 > w_half) ca.x2 = w_half;
 800d51c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 800d520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d522:	4293      	cmp	r3, r2
 800d524:	bfc4      	itt	gt
 800d526:	4613      	movgt	r3, r2
 800d528:	f8ad 3070 	strhgt.w	r3, [sp, #112]	; 0x70
        if(simple_mode) ca.x2 = LV_MIN(coords->x1, ca.x2);
 800d52c:	9b08      	ldr	r3, [sp, #32]
 800d52e:	b14b      	cbz	r3, 800d544 <lv_draw_rect+0x918>
 800d530:	9b05      	ldr	r3, [sp, #20]
 800d532:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
 800d536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d53a:	4293      	cmp	r3, r2
 800d53c:	bfa8      	it	ge
 800d53e:	4613      	movge	r3, r2
 800d540:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d544:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 800d548:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800d54c:	3601      	adds	r6, #1
 800d54e:	1af6      	subs	r6, r6, r3
 800d550:	b236      	sxth	r6, r6
        if(w > 0) {
 800d552:	2e00      	cmp	r6, #0
 800d554:	dd23      	ble.n	800d59e <lv_draw_rect+0x972>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d556:	f8bd a072 	ldrh.w	sl, [sp, #114]	; 0x72
            lv_area_copy(&fa, &ca);
 800d55a:	a81d      	add	r0, sp, #116	; 0x74
 800d55c:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 800d560:	a91b      	add	r1, sp, #108	; 0x6c
 800d562:	f10a 0a01 	add.w	sl, sl, #1
            for(y = 0; y < h; y++) {
 800d566:	f04f 0900 	mov.w	r9, #0
 800d56a:	ebaa 0a02 	sub.w	sl, sl, r2
 800d56e:	fa0f f28a 	sxth.w	r2, sl
 800d572:	920b      	str	r2, [sp, #44]	; 0x2c
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
 800d574:	9a06      	ldr	r2, [sp, #24]
 800d576:	1e57      	subs	r7, r2, #1
            sh_buf_tmp += ca.x1 - a.x1;
 800d578:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 800d57c:	1a9b      	subs	r3, r3, r2
 800d57e:	9a06      	ldr	r2, [sp, #24]
 800d580:	fb02 3707 	mla	r7, r2, r7, r3
 800d584:	9b07      	ldr	r3, [sp, #28]
 800d586:	441f      	add	r7, r3
            lv_area_copy(&fa, &ca);
 800d588:	f7fe ffc0 	bl	800c50c <lv_area_copy>
            fa.y2 = fa.y1;
 800d58c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fa,
 800d590:	4682      	mov	sl, r0
            fa.y2 = fa.y1;
 800d592:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800d596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d598:	4599      	cmp	r9, r3
 800d59a:	f2c0 8333 	blt.w	800dc04 <lv_draw_rect+0xfd8>
    a.x1 = sh_area.x1 + corner_size;
 800d59e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d5a2:	465a      	mov	r2, fp
 800d5a4:	a919      	add	r1, sp, #100	; 0x64
 800d5a6:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d5a8:	442b      	add	r3, r5
 800d5aa:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d5ae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d5b2:	1b5b      	subs	r3, r3, r5
 800d5b4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1;
 800d5b8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800d5bc:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y1 + corner_size - 1;
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	442b      	add	r3, r5
 800d5c4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d5c8:	f009 fd55 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d043      	beq.n	800d658 <lv_draw_rect+0xa2c>
 800d5d0:	ee18 2a10 	vmov	r2, s16
 800d5d4:	a917      	add	r1, sp, #92	; 0x5c
 800d5d6:	a819      	add	r0, sp, #100	; 0x64
 800d5d8:	f009 fe4c 	bl	8017274 <_lv_area_is_in>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d13b      	bne.n	800d658 <lv_draw_rect+0xa2c>
        if(ca.y2 > h_half) ca.y2 = h_half;
 800d5e0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 800d5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	bfc4      	itt	gt
 800d5ea:	4613      	movgt	r3, r2
 800d5ec:	f8ad 3072 	strhgt.w	r3, [sp, #114]	; 0x72
        if(simple_mode) ca.y2 = LV_MIN(ca.y2, coords->y1);
 800d5f0:	9b08      	ldr	r3, [sp, #32]
 800d5f2:	b14b      	cbz	r3, 800d608 <lv_draw_rect+0x9dc>
 800d5f4:	9b05      	ldr	r3, [sp, #20]
 800d5f6:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 800d5fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d5fe:	4293      	cmp	r3, r2
 800d600:	bfa8      	it	ge
 800d602:	4613      	movge	r3, r2
 800d604:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d608:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d60c:	a81d      	add	r0, sp, #116	; 0x74
 800d60e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d612:	a91b      	add	r1, sp, #108	; 0x6c
 800d614:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d616:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d61a:	9a06      	ldr	r2, [sp, #24]
        for(y = 0; y < h; y++) {
 800d61c:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d620:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d622:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800d626:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d628:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d62a:	1b9b      	subs	r3, r3, r6
 800d62c:	b21b      	sxth	r3, r3
 800d62e:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d630:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800d634:	1af6      	subs	r6, r6, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
 800d636:	9b06      	ldr	r3, [sp, #24]
 800d638:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
 800d63a:	fb02 3606 	mla	r6, r2, r6, r3
 800d63e:	9b07      	ldr	r3, [sp, #28]
 800d640:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 800d642:	f7fe ff63 	bl	800c50c <lv_area_copy>
        fa.y2 = fa.y1;
 800d646:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d64a:	4682      	mov	sl, r0
        fa.y2 = fa.y1;
 800d64c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d652:	4599      	cmp	r9, r3
 800d654:	f2c0 8303 	blt.w	800dc5e <lv_draw_rect+0x1032>
    a.x1 = sh_area.x1 + corner_size;
 800d658:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d65c:	a919      	add	r1, sp, #100	; 0x64
    a.y1 = sh_area.y2 - corner_size + 1;
 800d65e:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d662:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d664:	442b      	add	r3, r5
    a.y2 = sh_area.y2;
 800d666:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    a.x1 = sh_area.x1 + corner_size;
 800d66a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d66e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d672:	1b5b      	subs	r3, r3, r5
 800d674:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y2 - corner_size + 1;
 800d678:	1c53      	adds	r3, r2, #1
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d67a:	465a      	mov	r2, fp
    a.y1 = sh_area.y2 - corner_size + 1;
 800d67c:	1b5b      	subs	r3, r3, r5
 800d67e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d682:	f009 fcf8 	bl	8017076 <_lv_area_intersect>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d686:	2800      	cmp	r0, #0
 800d688:	d044      	beq.n	800d714 <lv_draw_rect+0xae8>
 800d68a:	ee18 2a10 	vmov	r2, s16
 800d68e:	a917      	add	r1, sp, #92	; 0x5c
 800d690:	a819      	add	r0, sp, #100	; 0x64
 800d692:	f009 fdef 	bl	8017274 <_lv_area_is_in>
 800d696:	2800      	cmp	r0, #0
 800d698:	d13c      	bne.n	800d714 <lv_draw_rect+0xae8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
 800d69a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 800d69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	bfde      	ittt	le
 800d6a4:	9b0c      	ldrle	r3, [sp, #48]	; 0x30
 800d6a6:	3301      	addle	r3, #1
 800d6a8:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
        if(simple_mode) ca.y1 = LV_MAX(ca.y1, coords->y2);
 800d6ac:	9b08      	ldr	r3, [sp, #32]
 800d6ae:	b14b      	cbz	r3, 800d6c4 <lv_draw_rect+0xa98>
 800d6b0:	9b05      	ldr	r3, [sp, #20]
 800d6b2:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800d6b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	bfb8      	it	lt
 800d6be:	4613      	movlt	r3, r2
 800d6c0:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d6c4:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d6c8:	a81d      	add	r0, sp, #116	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d6ca:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
        for(y = 0; y < h; y++) {
 800d6ce:	f04f 0900 	mov.w	r9, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d6d2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d6d6:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d6d8:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d6dc:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d6de:	1c53      	adds	r3, r2, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d6e0:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
 800d6e4:	1a5b      	subs	r3, r3, r1
        lv_area_copy(&fa, &ca);
 800d6e6:	a91b      	add	r1, sp, #108	; 0x6c
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d6e8:	1ab6      	subs	r6, r6, r2
 800d6ea:	9a06      	ldr	r2, [sp, #24]
 800d6ec:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d6ee:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d6f0:	930a      	str	r3, [sp, #40]	; 0x28
        sh_buf_tmp = sh_buf + corner_size - 1;
 800d6f2:	9b06      	ldr	r3, [sp, #24]
 800d6f4:	3b01      	subs	r3, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
 800d6f6:	fb02 3606 	mla	r6, r2, r6, r3
 800d6fa:	9b07      	ldr	r3, [sp, #28]
 800d6fc:	441e      	add	r6, r3
        lv_area_copy(&fa, &ca);
 800d6fe:	f7fe ff05 	bl	800c50c <lv_area_copy>
        fa.y1 = fa.y2;
 800d702:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d706:	4682      	mov	sl, r0
        fa.y1 = fa.y2;
 800d708:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(y = 0; y < h; y++) {
 800d70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d70e:	4599      	cmp	r9, r3
 800d710:	f2c0 82dd 	blt.w	800dcce <lv_draw_rect+0x10a2>
    a.x1 = sh_area.x1 + corner_size;
 800d714:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d718:	465a      	mov	r2, fp
 800d71a:	a919      	add	r1, sp, #100	; 0x64
 800d71c:	a81b      	add	r0, sp, #108	; 0x6c
    a.x1 = sh_area.x1 + corner_size;
 800d71e:	442b      	add	r3, r5
 800d720:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    a.x2 = sh_area.x2 - corner_size;
 800d724:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d728:	1b5b      	subs	r3, r3, r5
 800d72a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a.y1 = sh_area.y1 + corner_size;
 800d72e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 800d732:	442b      	add	r3, r5
 800d734:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    a.y2 = sh_area.y2 - corner_size;
 800d738:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 800d73c:	1b5b      	subs	r3, r3, r5
 800d73e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    has_com = _lv_area_intersect(&ca, &a, clip);
 800d742:	f009 fc98 	bl	8017076 <_lv_area_intersect>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
 800d746:	b320      	cbz	r0, 800d792 <lv_draw_rect+0xb66>
 800d748:	9b08      	ldr	r3, [sp, #32]
 800d74a:	bb13      	cbnz	r3, 800d792 <lv_draw_rect+0xb66>
 800d74c:	ee18 2a10 	vmov	r2, s16
 800d750:	a917      	add	r1, sp, #92	; 0x5c
 800d752:	a819      	add	r0, sp, #100	; 0x64
 800d754:	f009 fd8e 	bl	8017274 <_lv_area_is_in>
 800d758:	b9d8      	cbnz	r0, 800d792 <lv_draw_rect+0xb66>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d75a:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
        lv_area_copy(&fa, &ca);
 800d75e:	a91b      	add	r1, sp, #108	; 0x6c
 800d760:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 800d764:	a81d      	add	r0, sp, #116	; 0x74
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d766:	f8bd 7072 	ldrh.w	r7, [sp, #114]	; 0x72
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d76a:	3601      	adds	r6, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800d76c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d770:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d772:	3701      	adds	r7, #1
 800d774:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d778:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d77a:	1aff      	subs	r7, r7, r3
        lv_area_copy(&fa, &ca);
 800d77c:	f7fe fec6 	bl	800c50c <lv_area_copy>
        fa.y2 = fa.y1;
 800d780:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800d784:	b23f      	sxth	r7, r7
        for(y = 0; y < h; y++) {
 800d786:	9d08      	ldr	r5, [sp, #32]
        fa.y2 = fa.y1;
 800d788:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800d78c:	42bd      	cmp	r5, r7
 800d78e:	f2c0 82d6 	blt.w	800dd3e <lv_draw_rect+0x1112>
    lv_draw_mask_remove_id(mask_rout_id);
 800d792:	ee18 0a90 	vmov	r0, s17
 800d796:	f7fe fd5b 	bl	800c250 <lv_draw_mask_remove_id>
    lv_mem_buf_release(mask_buf);
 800d79a:	4620      	mov	r0, r4
 800d79c:	f00a f8c8 	bl	8017930 <lv_mem_buf_release>
    lv_mem_buf_release(sh_buf);
 800d7a0:	9807      	ldr	r0, [sp, #28]
 800d7a2:	f00a f8c5 	bl	8017930 <lv_mem_buf_release>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800d7a6:	f898 300a 	ldrb.w	r3, [r8, #10]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	f240 80a1 	bls.w	800d8f2 <lv_draw_rect+0xcc6>
    lv_area_copy(&coords_bg, coords);
 800d7b0:	9905      	ldr	r1, [sp, #20]
 800d7b2:	a817      	add	r0, sp, #92	; 0x5c
 800d7b4:	f7fe feaa 	bl	800c50c <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800d7b8:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	dd24      	ble.n	800d80a <lv_draw_rect+0xbde>
 800d7c0:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d7c4:	2bfc      	cmp	r3, #252	; 0xfc
 800d7c6:	d920      	bls.n	800d80a <lv_draw_rect+0xbde>
 800d7c8:	f9b8 3000 	ldrsh.w	r3, [r8]
 800d7cc:	b1eb      	cbz	r3, 800d80a <lv_draw_rect+0xbde>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800d7ce:	f898 301f 	ldrb.w	r3, [r8, #31]
 800d7d2:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 800d7d6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800d7da:	440a      	add	r2, r1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d7dc:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800d7e0:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d7e4:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800d7e8:	440a      	add	r2, r1
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800d7ea:	f3c3 1100 	ubfx	r1, r3, #4, #1
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800d7ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800d7f2:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800d7f6:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800d7fa:	1a52      	subs	r2, r2, r1
 800d7fc:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800d800:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_opa_t opa = dsc->bg_opa;
 800d80a:	f898 500a 	ldrb.w	r5, [r8, #10]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800d80e:	2dfe      	cmp	r5, #254	; 0xfe
 800d810:	bf28      	it	cs
 800d812:	25ff      	movcs	r5, #255	; 0xff
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800d814:	f7fa fe60 	bl	80084d8 <_lv_refr_get_disp_refreshing>
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800d818:	f009 f97a 	bl	8016b10 <lv_disp_get_draw_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800d81c:	465a      	mov	r2, fp
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800d81e:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
 800d820:	a917      	add	r1, sp, #92	; 0x5c
 800d822:	a819      	add	r0, sp, #100	; 0x64
 800d824:	f009 fc27 	bl	8017076 <_lv_area_intersect>
    if(is_common == false) return;
 800d828:	2800      	cmp	r0, #0
 800d82a:	d062      	beq.n	800d8f2 <lv_draw_rect+0xcc6>
    draw_area.x1 -= disp_area->x1;
 800d82c:	f8b9 4010 	ldrh.w	r4, [r9, #16]
 800d830:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    draw_area.y1 -= disp_area->y1;
 800d834:	f8b9 0012 	ldrh.w	r0, [r9, #18]
    draw_area.x1 -= disp_area->x1;
 800d838:	1b1b      	subs	r3, r3, r4
    draw_area.x2 -= disp_area->x1;
 800d83a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
 800d83e:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    draw_area.x1 -= disp_area->x1;
 800d842:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.x2 -= disp_area->x1;
 800d846:	1b12      	subs	r2, r2, r4
    draw_area.y2 -= disp_area->y1;
 800d848:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    draw_area.y1 -= disp_area->y1;
 800d84c:	1a09      	subs	r1, r1, r0
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800d84e:	f898 400b 	ldrb.w	r4, [r8, #11]
    draw_area.y2 -= disp_area->y1;
 800d852:	1a1b      	subs	r3, r3, r0
    draw_area.x2 -= disp_area->x1;
 800d854:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
 800d858:	f004 0407 	and.w	r4, r4, #7
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d85c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    draw_area.y2 -= disp_area->y1;
 800d860:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d864:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    draw_area.y1 -= disp_area->y1;
 800d868:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
 800d86c:	429a      	cmp	r2, r3
 800d86e:	bf08      	it	eq
 800d870:	2400      	moveq	r4, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
 800d872:	f7fe fd15 	bl	800c2a0 <lv_draw_mask_get_cnt>
 800d876:	900d      	str	r0, [sp, #52]	; 0x34
 800d878:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800d87c:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f040 8286 	bne.w	800dd90 <lv_draw_rect+0x1164>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
 800d884:	1ea3      	subs	r3, r4, #2
 800d886:	bf18      	it	ne
 800d888:	2301      	movne	r3, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d88a:	f8bd 7060 	ldrh.w	r7, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d88e:	f8bd a062 	ldrh.w	sl, [sp, #98]	; 0x62
    if(other_mask_cnt) simple_mode = false;
 800d892:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d894:	3701      	adds	r7, #1
 800d896:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d89a:	f10a 0a01 	add.w	sl, sl, #1
 800d89e:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d8a2:	1aff      	subs	r7, r7, r3
    int32_t rout = dsc->radius;
 800d8a4:	f9b8 3000 	ldrsh.w	r3, [r8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d8a8:	ebaa 0a02 	sub.w	sl, sl, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d8ac:	b23f      	sxth	r7, r7
    int32_t coords_h = lv_area_get_height(&coords_bg);
 800d8ae:	fa0f fa8a 	sxth.w	sl, sl
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800d8b2:	45ba      	cmp	sl, r7
 800d8b4:	bfa8      	it	ge
 800d8b6:	46ba      	movge	sl, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
 800d8b8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800d8bc:	459a      	cmp	sl, r3
 800d8be:	bfa8      	it	ge
 800d8c0:	469a      	movge	sl, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800d8c2:	9b08      	ldr	r3, [sp, #32]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 8265 	beq.w	800dd94 <lv_draw_rect+0x1168>
 800d8ca:	f1ba 0f00 	cmp.w	sl, #0
 800d8ce:	f040 8261 	bne.w	800dd94 <lv_draw_rect+0x1168>
 800d8d2:	2c00      	cmp	r4, #0
 800d8d4:	f040 825e 	bne.w	800dd94 <lv_draw_rect+0x1168>
        _lv_blend_fill(clip, &coords_bg,
 800d8d8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d8dc:	a917      	add	r1, sp, #92	; 0x5c
 800d8de:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800d8e2:	4658      	mov	r0, fp
 800d8e4:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	f7fb fd47 	bl	8009380 <_lv_blend_fill>
    if(dsc->bg_img_src == NULL) return;
 800d8f2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d05a      	beq.n	800d9b0 <lv_draw_rect+0xd84>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800d8fa:	f898 3016 	ldrb.w	r3, [r8, #22]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d956      	bls.n	800d9b0 <lv_draw_rect+0xd84>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800d902:	f7fc fe9b 	bl	800a63c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800d906:	2802      	cmp	r0, #2
 800d908:	f040 83fd 	bne.w	800e106 <lv_draw_rect+0x14da>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800d90c:	2400      	movs	r4, #0
 800d90e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800d912:	a81b      	add	r0, sp, #108	; 0x6c
 800d914:	9400      	str	r4, [sp, #0]
 800d916:	e9d8 1203 	ldrd	r1, r2, [r8, #12]
 800d91a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d91e:	4623      	mov	r3, r4
 800d920:	f00b ff09 	bl	8019736 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800d924:	9b05      	ldr	r3, [sp, #20]
 800d926:	f9bd 006c 	ldrsh.w	r0, [sp, #108]	; 0x6c
 800d92a:	8899      	ldrh	r1, [r3, #4]
 800d92c:	881a      	ldrh	r2, [r3, #0]
 800d92e:	3101      	adds	r1, #1
 800d930:	1a89      	subs	r1, r1, r2
 800d932:	f3c1 33c0 	ubfx	r3, r1, #15, #1
 800d936:	fa03 f181 	sxtah	r1, r3, r1
 800d93a:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
        a.x2 = a.x1 + size.x - 1;
 800d93e:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800d940:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 800d944:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800d948:	b29b      	uxth	r3, r3
 800d94a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        a.x2 = a.x1 + size.x - 1;
 800d94e:	4403      	add	r3, r0
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d950:	f9bd 006e 	ldrsh.w	r0, [sp, #110]	; 0x6e
        a.x2 = a.x1 + size.x - 1;
 800d954:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d958:	9b05      	ldr	r3, [sp, #20]
 800d95a:	8859      	ldrh	r1, [r3, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d95c:	88db      	ldrh	r3, [r3, #6]
 800d95e:	3301      	adds	r3, #1
 800d960:	1a5b      	subs	r3, r3, r1
 800d962:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800d966:	fa02 f383 	sxtah	r3, r2, r3
 800d96a:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
        a.y2 = a.y1 + size.y - 1;
 800d96e:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800d970:	eba1 0262 	sub.w	r2, r1, r2, asr #1
 800d974:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800d978:	b292      	uxth	r2, r2
 800d97a:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        a.y2 = a.y1 + size.y - 1;
 800d97e:	4402      	add	r2, r0
        lv_draw_label_dsc_init(&label_draw_dsc);
 800d980:	a824      	add	r0, sp, #144	; 0x90
        a.y2 = a.y1 + size.y - 1;
 800d982:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
        lv_draw_label_dsc_init(&label_draw_dsc);
 800d986:	f7fc fe7b 	bl	800a680 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800d98a:	f8d8 3010 	ldr.w	r3, [r8, #16]
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d98e:	aa24      	add	r2, sp, #144	; 0x90
 800d990:	4659      	mov	r1, fp
 800d992:	a81d      	add	r0, sp, #116	; 0x74
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800d994:	9324      	str	r3, [sp, #144]	; 0x90
        label_draw_dsc.color = dsc->bg_img_recolor;
 800d996:	f8b8 3014 	ldrh.w	r3, [r8, #20]
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d99a:	9400      	str	r4, [sp, #0]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800d99c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        label_draw_dsc.opa = dsc->bg_img_opa;
 800d9a0:	f898 3016 	ldrb.w	r3, [r8, #22]
 800d9a4:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
        lv_draw_label(&a, clip, &label_draw_dsc, dsc->bg_img_src, NULL);
 800d9a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9ac:	f7fd f840 	bl	800aa30 <lv_draw_label>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800d9b0:	f898 301e 	ldrb.w	r3, [r8, #30]
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d974      	bls.n	800daa2 <lv_draw_rect+0xe76>
    if(dsc->border_width == 0) return;
 800d9b8:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d070      	beq.n	800daa2 <lv_draw_rect+0xe76>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800d9c0:	f898 301f 	ldrb.w	r3, [r8, #31]
 800d9c4:	f013 0f3e 	tst.w	r3, #62	; 0x3e
 800d9c8:	d06b      	beq.n	800daa2 <lv_draw_rect+0xe76>
    if(dsc->border_post) return;
 800d9ca:	07d9      	lsls	r1, r3, #31
 800d9cc:	d469      	bmi.n	800daa2 <lv_draw_rect+0xe76>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d9ce:	9b05      	ldr	r3, [sp, #20]
    lv_area_copy(&area_inner, coords);
 800d9d0:	a817      	add	r0, sp, #92	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d9d2:	9905      	ldr	r1, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d9d4:	889c      	ldrh	r4, [r3, #4]
 800d9d6:	881b      	ldrh	r3, [r3, #0]
 800d9d8:	3401      	adds	r4, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d9da:	8849      	ldrh	r1, [r1, #2]
    int32_t rout = dsc->radius;
 800d9dc:	f9b8 2000 	ldrsh.w	r2, [r8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d9e0:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d9e2:	9b05      	ldr	r3, [sp, #20]
 800d9e4:	88db      	ldrh	r3, [r3, #6]
    int32_t coords_w = lv_area_get_width(coords);
 800d9e6:	b224      	sxth	r4, r4
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	1a5b      	subs	r3, r3, r1
    lv_area_copy(&area_inner, coords);
 800d9ec:	9905      	ldr	r1, [sp, #20]
    int32_t coords_h = lv_area_get_height(coords);
 800d9ee:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800d9f0:	429c      	cmp	r4, r3
 800d9f2:	bfa8      	it	ge
 800d9f4:	461c      	movge	r4, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 800d9f6:	1064      	asrs	r4, r4, #1
 800d9f8:	4294      	cmp	r4, r2
 800d9fa:	bfa8      	it	ge
 800d9fc:	4614      	movge	r4, r2
    lv_area_copy(&area_inner, coords);
 800d9fe:	f7fe fd85 	bl	800c50c <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800da02:	f898 101f 	ldrb.w	r1, [r8, #31]
 800da06:	f8b8 301c 	ldrh.w	r3, [r8, #28]
 800da0a:	f011 0f08 	tst.w	r1, #8
 800da0e:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800da12:	f3c1 0044 	ubfx	r0, r1, #1, #5
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800da16:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800da1a:	bf0c      	ite	eq
 800da1c:	18e2      	addeq	r2, r4, r3
 800da1e:	461a      	movne	r2, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800da20:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 800da24:	f898 901e 	ldrb.w	r9, [r8, #30]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800da28:	bf04      	itt	eq
 800da2a:	4252      	negeq	r2, r2
 800da2c:	b292      	uxtheq	r2, r2
 800da2e:	442a      	add	r2, r5
 800da30:	461d      	mov	r5, r3
 800da32:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800da36:	0702      	lsls	r2, r0, #28
 800da38:	bf57      	itett	pl
 800da3a:	191a      	addpl	r2, r3, r4
 800da3c:	461a      	movmi	r2, r3
 800da3e:	4252      	negpl	r2, r2
 800da40:	b292      	uxthpl	r2, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800da42:	0787      	lsls	r7, r0, #30
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800da44:	eba6 0202 	sub.w	r2, r6, r2
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800da48:	f8bd 605e 	ldrh.w	r6, [sp, #94]	; 0x5e
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800da4c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800da50:	bf57      	itett	pl
 800da52:	191a      	addpl	r2, r3, r4
 800da54:	461a      	movmi	r2, r3
 800da56:	4252      	negpl	r2, r2
 800da58:	b292      	uxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800da5a:	07c0      	lsls	r0, r0, #31
 800da5c:	bf58      	it	pl
 800da5e:	191b      	addpl	r3, r3, r4
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800da60:	4432      	add	r2, r6
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800da62:	bf58      	it	pl
 800da64:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800da66:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800da6a:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 800da6e:	bf58      	it	pl
 800da70:	b29d      	uxthpl	r5, r3
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800da72:	291e      	cmp	r1, #30
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800da74:	eba2 0305 	sub.w	r3, r2, r5
 800da78:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
 800da7c:	f040 83e4 	bne.w	800e248 <lv_draw_rect+0x161c>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
 800da80:	f898 3002 	ldrb.w	r3, [r8, #2]
 800da84:	465a      	mov	r2, fp
 800da86:	9905      	ldr	r1, [sp, #20]
 800da88:	a817      	add	r0, sp, #92	; 0x5c
 800da8a:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800da8e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800da92:	f8ad 3004 	strh.w	r3, [sp, #4]
 800da96:	2300      	movs	r3, #0
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	f9b8 3000 	ldrsh.w	r3, [r8]
 800da9e:	f7fe fe48 	bl	800c732 <draw_full_border>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800daa2:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	d94f      	bls.n	800db4a <lv_draw_rect+0xf1e>
    if(dsc->outline_width == 0) return;
 800daaa:	f9b8 3022 	ldrsh.w	r3, [r8, #34]	; 0x22
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d04b      	beq.n	800db4a <lv_draw_rect+0xf1e>
    lv_area_copy(&area_inner, coords);
 800dab2:	9905      	ldr	r1, [sp, #20]
 800dab4:	a81d      	add	r0, sp, #116	; 0x74
 800dab6:	f7fe fd29 	bl	800c50c <lv_area_copy>
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800daba:	f9b8 3024 	ldrsh.w	r3, [r8, #36]	; 0x24
    area_inner.x1 -= pad;
 800dabe:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    lv_area_copy(&area_outer, &area_inner);
 800dac2:	a91d      	add	r1, sp, #116	; 0x74
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800dac4:	2b00      	cmp	r3, #0
    lv_area_copy(&area_outer, &area_inner);
 800dac6:	a824      	add	r0, sp, #144	; 0x90
    lv_coord_t pad = (dsc->outline_pad == 0 ? (dsc->outline_pad - 1) : dsc->outline_pad);
 800dac8:	bf08      	it	eq
 800daca:	f04f 33ff 	moveq.w	r3, #4294967295
    area_inner.x1 -= pad;
 800dace:	b29b      	uxth	r3, r3
 800dad0:	1ad2      	subs	r2, r2, r3
 800dad2:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    area_inner.y1 -= pad;
 800dad6:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 800dada:	1ad2      	subs	r2, r2, r3
 800dadc:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    area_inner.x2 += pad;
 800dae0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800dae4:	441a      	add	r2, r3
 800dae6:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 800daea:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800daee:	4413      	add	r3, r2
 800daf0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    lv_area_copy(&area_outer, &area_inner);
 800daf4:	f7fe fd0a 	bl	800c50c <lv_area_copy>
    area_outer.x1 -= dsc->outline_width;
 800daf8:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800dafc:	a924      	add	r1, sp, #144	; 0x90
    area_outer.x1 -= dsc->outline_width;
 800dafe:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800db02:	a81d      	add	r0, sp, #116	; 0x74
    area_outer.x1 -= dsc->outline_width;
 800db04:	1ad2      	subs	r2, r2, r3
 800db06:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
    area_outer.x2 += dsc->outline_width;
 800db0a:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 800db0e:	441a      	add	r2, r3
 800db10:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
    area_outer.y1 -= dsc->outline_width;
 800db14:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
 800db18:	1ad2      	subs	r2, r2, r3
 800db1a:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
    area_outer.y2 += dsc->outline_width;
 800db1e:	f8bd 2096 	ldrh.w	r2, [sp, #150]	; 0x96
 800db22:	4413      	add	r3, r2
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800db24:	465a      	mov	r2, fp
    area_outer.y2 += dsc->outline_width;
 800db26:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
 800db2a:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db2e:	9303      	str	r3, [sp, #12]
 800db30:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 800db34:	9302      	str	r3, [sp, #8]
 800db36:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 800db3a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800db3e:	2301      	movs	r3, #1
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	f9b8 3000 	ldrsh.w	r3, [r8]
 800db46:	f7fe fdf4 	bl	800c732 <draw_full_border>
}
 800db4a:	b02d      	add	sp, #180	; 0xb4
 800db4c:	ecbd 8b02 	vpop	{d8}
 800db50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800db54:	4631      	mov	r1, r6
 800db56:	463a      	mov	r2, r7
 800db58:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800db5a:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800db5e:	f009 ff13 	bl	8017988 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800db62:	463b      	mov	r3, r7
 800db64:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800db68:	4620      	mov	r0, r4
 800db6a:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800db6e:	f7fe fb4d 	bl	800c20c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800db72:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800db76:	2801      	cmp	r0, #1
 800db78:	bf08      	it	eq
 800db7a:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800db7c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	4651      	mov	r1, sl
 800db84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db86:	e9cd 0300 	strd	r0, r3, [sp]
 800db8a:	4623      	mov	r3, r4
 800db8c:	4658      	mov	r0, fp
 800db8e:	f7fb fbf7 	bl	8009380 <_lv_blend_fill>
                fa.y1++;
 800db92:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800db96:	3301      	adds	r3, #1
 800db98:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800db9c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dba0:	3301      	adds	r3, #1
 800dba2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800dba6:	9b06      	ldr	r3, [sp, #24]
 800dba8:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 800dbaa:	e434      	b.n	800d416 <lv_draw_rect+0x7ea>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800dbac:	4639      	mov	r1, r7
 800dbae:	4632      	mov	r2, r6
 800dbb0:	4620      	mov	r0, r4
            for(y = 0; y < h; y++) {
 800dbb2:	f109 0901 	add.w	r9, r9, #1
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800dbb6:	f009 fee7 	bl	8017988 <lv_memcpy>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dbba:	4633      	mov	r3, r6
 800dbbc:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dbc6:	f7fe fb21 	bl	800c20c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dbca:	f898 3002 	ldrb.w	r3, [r8, #2]
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dbce:	2801      	cmp	r0, #1
 800dbd0:	bf08      	it	eq
 800dbd2:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dbd4:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	4651      	mov	r1, sl
 800dbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbde:	e9cd 0300 	strd	r0, r3, [sp]
 800dbe2:	4623      	mov	r3, r4
 800dbe4:	4658      	mov	r0, fp
 800dbe6:	f7fb fbcb 	bl	8009380 <_lv_blend_fill>
                fa.y1--;
 800dbea:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2--;
 800dbf4:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                sh_buf_tmp += corner_size;
 800dbfe:	9b06      	ldr	r3, [sp, #24]
 800dc00:	441f      	add	r7, r3
            for(y = 0; y < h; y++) {
 800dc02:	e466      	b.n	800d4d2 <lv_draw_rect+0x8a6>
                lv_memcpy(mask_buf, sh_buf_tmp, w);
 800dc04:	4632      	mov	r2, r6
 800dc06:	4639      	mov	r1, r7
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f009 febd 	bl	8017988 <lv_memcpy>
                if(simple_mode) {
 800dc0e:	9b08      	ldr	r3, [sp, #32]
 800dc10:	b94b      	cbnz	r3, 800dc26 <lv_draw_rect+0xffa>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dc12:	4633      	mov	r3, r6
 800dc14:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dc18:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7fe faf5 	bl	800c20c <lv_draw_mask_apply>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dc22:	2801      	cmp	r0, #1
 800dc24:	d100      	bne.n	800dc28 <lv_draw_rect+0xffc>
 800dc26:	2002      	movs	r0, #2
                _lv_blend_fill(clip, &fa,
 800dc28:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dc2c:	4651      	mov	r1, sl
 800dc2e:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800dc32:	f109 0901 	add.w	r9, r9, #1
                _lv_blend_fill(clip, &fa,
 800dc36:	9302      	str	r3, [sp, #8]
 800dc38:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 800dc3c:	e9cd 0300 	strd	r0, r3, [sp]
 800dc40:	4623      	mov	r3, r4
 800dc42:	4658      	mov	r0, fp
 800dc44:	f7fb fb9c 	bl	8009380 <_lv_blend_fill>
                fa.y1++;
 800dc48:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dc4c:	3301      	adds	r3, #1
 800dc4e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fa.y2++;
 800dc52:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dc56:	3301      	adds	r3, #1
 800dc58:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            for(y = 0; y < h; y++) {
 800dc5c:	e49b      	b.n	800d596 <lv_draw_rect+0x96a>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 800dc5e:	7833      	ldrb	r3, [r6, #0]
            lv_memset(mask_buf, opa_tmp, w);
 800dc60:	4620      	mov	r0, r4
 800dc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc64:	ea02 0103 	and.w	r1, r2, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800dc68:	29ff      	cmp	r1, #255	; 0xff
 800dc6a:	bf18      	it	ne
 800dc6c:	fb12 f303 	smulbbne	r3, r2, r3
            lv_memset(mask_buf, opa_tmp, w);
 800dc70:	463a      	mov	r2, r7
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800dc72:	bf18      	it	ne
 800dc74:	f3c3 2107 	ubfxne	r1, r3, #8, #8
            lv_memset(mask_buf, opa_tmp, w);
 800dc78:	f009 ff76 	bl	8017b68 <lv_memset>
            if(simple_mode) {
 800dc7c:	9b08      	ldr	r3, [sp, #32]
 800dc7e:	b94b      	cbnz	r3, 800dc94 <lv_draw_rect+0x1068>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dc80:	463b      	mov	r3, r7
 800dc82:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dc86:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7fe fabe 	bl	800c20c <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dc90:	2801      	cmp	r0, #1
 800dc92:	d100      	bne.n	800dc96 <lv_draw_rect+0x106a>
 800dc94:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dc96:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dc9a:	4651      	mov	r1, sl
 800dc9c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800dca0:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dca4:	9302      	str	r3, [sp, #8]
 800dca6:	23ff      	movs	r3, #255	; 0xff
 800dca8:	e9cd 0300 	strd	r0, r3, [sp]
 800dcac:	4623      	mov	r3, r4
 800dcae:	4658      	mov	r0, fp
 800dcb0:	f7fb fb66 	bl	8009380 <_lv_blend_fill>
            fa.y1++;
 800dcb4:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dcb8:	3301      	adds	r3, #1
 800dcba:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2++;
 800dcbe:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size;
 800dcc8:	9b06      	ldr	r3, [sp, #24]
 800dcca:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800dccc:	e4c0      	b.n	800d650 <lv_draw_rect+0xa24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
 800dcce:	7833      	ldrb	r3, [r6, #0]
            lv_memset(mask_buf, opa_tmp, w);
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcd4:	ea02 0103 	and.w	r1, r2, r3
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800dcd8:	29ff      	cmp	r1, #255	; 0xff
 800dcda:	bf18      	it	ne
 800dcdc:	fb12 f303 	smulbbne	r3, r2, r3
            lv_memset(mask_buf, opa_tmp, w);
 800dce0:	463a      	mov	r2, r7
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
 800dce2:	bf18      	it	ne
 800dce4:	f3c3 2107 	ubfxne	r1, r3, #8, #8
            lv_memset(mask_buf, opa_tmp, w);
 800dce8:	f009 ff3e 	bl	8017b68 <lv_memset>
            if(simple_mode) {
 800dcec:	9b08      	ldr	r3, [sp, #32]
 800dcee:	b94b      	cbnz	r3, 800dd04 <lv_draw_rect+0x10d8>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dcf0:	463b      	mov	r3, r7
 800dcf2:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dcf6:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7fe fa86 	bl	800c20c <lv_draw_mask_apply>
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dd00:	2801      	cmp	r0, #1
 800dd02:	d100      	bne.n	800dd06 <lv_draw_rect+0x10da>
 800dd04:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dd06:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd0a:	4651      	mov	r1, sl
 800dd0c:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800dd10:	f109 0901 	add.w	r9, r9, #1
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dd14:	9302      	str	r3, [sp, #8]
 800dd16:	23ff      	movs	r3, #255	; 0xff
 800dd18:	e9cd 0300 	strd	r0, r3, [sp]
 800dd1c:	4623      	mov	r3, r4
 800dd1e:	4658      	mov	r0, fp
 800dd20:	f7fb fb2e 	bl	8009380 <_lv_blend_fill>
            fa.y1--;
 800dd24:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2--;
 800dd2e:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dd32:	3b01      	subs	r3, #1
 800dd34:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size;
 800dd38:	9b06      	ldr	r3, [sp, #24]
 800dd3a:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800dd3c:	e4e6      	b.n	800d70c <lv_draw_rect+0xae0>
            lv_memset(mask_buf, dsc->shadow_opa, w);
 800dd3e:	4632      	mov	r2, r6
 800dd40:	f898 1032 	ldrb.w	r1, [r8, #50]	; 0x32
 800dd44:	4620      	mov	r0, r4
        for(y = 0; y < h; y++) {
 800dd46:	3501      	adds	r5, #1
            lv_memset(mask_buf, dsc->shadow_opa, w);
 800dd48:	f009 ff0e 	bl	8017b68 <lv_memset>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
 800dd4c:	4633      	mov	r3, r6
 800dd4e:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800dd52:	4620      	mov	r0, r4
 800dd54:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 800dd58:	f7fe fa58 	bl	800c20c <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dd5c:	f898 3002 	ldrb.w	r3, [r8, #2]
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dd60:	2801      	cmp	r0, #1
 800dd62:	bf08      	it	eq
 800dd64:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
 800dd66:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 800dd6a:	a91d      	add	r1, sp, #116	; 0x74
 800dd6c:	9000      	str	r0, [sp, #0]
 800dd6e:	4658      	mov	r0, fp
 800dd70:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dd74:	4623      	mov	r3, r4
 800dd76:	f7fb fb03 	bl	8009380 <_lv_blend_fill>
            fa.y1++;
 800dd7a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 800dd7e:	3301      	adds	r3, #1
 800dd80:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            fa.y2++;
 800dd84:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 800dd88:	3301      	adds	r3, #1
 800dd8a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        for(y = 0; y < h; y++) {
 800dd8e:	e4fd      	b.n	800d78c <lv_draw_rect+0xb60>
    if(other_mask_cnt) simple_mode = false;
 800dd90:	2300      	movs	r3, #0
 800dd92:	e57a      	b.n	800d88a <lv_draw_rect+0xc5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dd94:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800dd98:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	1a9b      	subs	r3, r3, r2
 800dda0:	b21b      	sxth	r3, r3
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800dda2:	4618      	mov	r0, r3
 800dda4:	ee08 3a90 	vmov	s17, r3
 800dda8:	f009 ff66 	bl	8017c78 <lv_mem_buf_get>
        if(rout > 0) {
 800ddac:	f1ba 0f00 	cmp.w	sl, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800ddb0:	4606      	mov	r6, r0
        if(rout > 0) {
 800ddb2:	f340 80ad 	ble.w	800df10 <lv_draw_rect+0x12e4>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	4652      	mov	r2, sl
 800ddba:	a917      	add	r1, sp, #92	; 0x5c
 800ddbc:	a824      	add	r0, sp, #144	; 0x90
 800ddbe:	f7fe fb75 	bl	800c4ac <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	a824      	add	r0, sp, #144	; 0x90
 800ddc6:	f7fe fa0b 	bl	800c1e0 <lv_draw_mask_add>
 800ddca:	900f      	str	r0, [sp, #60]	; 0x3c
        lv_color_t grad_color = dsc->bg_color;
 800ddcc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800ddd0:	2c02      	cmp	r4, #2
        lv_color_t grad_color = dsc->bg_color;
 800ddd2:	ee08 3a10 	vmov	s16, r3
        if(grad_dir == LV_GRAD_DIR_HOR) {
 800ddd6:	f040 80ac 	bne.w	800df32 <lv_draw_rect+0x1306>
            grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800ddda:	0078      	lsls	r0, r7, #1
 800dddc:	f009 ff4c 	bl	8017c78 <lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
 800dde0:	2300      	movs	r3, #0
            grad_map = lv_mem_buf_get(coords_w * sizeof(lv_color_t));
 800dde2:	9009      	str	r0, [sp, #36]	; 0x24
            for(i = 0; i < coords_w; i++) {
 800dde4:	429f      	cmp	r7, r3
 800dde6:	f300 8097 	bgt.w	800df18 <lv_draw_rect+0x12ec>
 800ddea:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 800ddee:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 800ddf2:	1c53      	adds	r3, r2, #1
        fill_area.x2 = coords_bg.x2;
 800ddf4:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800ddf8:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 800ddfc:	1a5b      	subs	r3, r3, r1
        fill_area.x1 = coords_bg.x1;
 800ddfe:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800de02:	9207      	str	r2, [sp, #28]
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
 800de04:	b21b      	sxth	r3, r3
 800de06:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800de0a:	930c      	str	r3, [sp, #48]	; 0x30
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800de0c:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800de10:	4413      	add	r3, r2
 800de12:	b21b      	sxth	r3, r3
 800de14:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        fill_area.y2 = fill_area.y1;
 800de18:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800de1c:	fa1f f38a 	uxth.w	r3, sl
 800de20:	930b      	str	r3, [sp, #44]	; 0x2c
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800de22:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800de26:	9a07      	ldr	r2, [sp, #28]
 800de28:	429a      	cmp	r2, r3
 800de2a:	f340 8085 	ble.w	800df38 <lv_draw_rect+0x130c>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
 800de2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de30:	4323      	orrs	r3, r4
 800de32:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800de36:	d15e      	bne.n	800def6 <lv_draw_rect+0x12ca>
 800de38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de3a:	2a32      	cmp	r2, #50	; 0x32
 800de3c:	dd5b      	ble.n	800def6 <lv_draw_rect+0x12ca>
            fill_area.x1 = coords_bg.x1 + rout;
 800de3e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800de42:	fa1f f78a 	uxth.w	r7, sl
            _lv_blend_fill(clip, &fill_area,
 800de46:	a91b      	add	r1, sp, #108	; 0x6c
 800de48:	4658      	mov	r0, fp
            fill_area.x1 = coords_bg.x1 + rout;
 800de4a:	fa12 fa8a 	uxtah	sl, r2, sl
            fill_area.x2 = coords_bg.x2 - rout;
 800de4e:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 800de52:	2401      	movs	r4, #1
            fill_area.x2 = coords_bg.x2 - rout;
 800de54:	1bd2      	subs	r2, r2, r7
            fill_area.x1 = coords_bg.x1 + rout;
 800de56:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
            fill_area.x2 = coords_bg.x2 - rout;
 800de5a:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            fill_area.y1 = coords_bg.y1;
 800de5e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 800de62:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y1 + rout;
 800de66:	443a      	add	r2, r7
 800de68:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800de6c:	f898 2002 	ldrb.w	r2, [r8, #2]
 800de70:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800de74:	2201      	movs	r2, #1
 800de76:	9200      	str	r2, [sp, #0]
 800de78:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800de7c:	f7fb fa80 	bl	8009380 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
 800de80:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800de84:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800de88:	4658      	mov	r0, fp
            fill_area.y1 = coords_bg.y2 - rout;
 800de8a:	1bca      	subs	r2, r1, r7
            fill_area.y2 = coords_bg.y2;
 800de8c:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800de90:	9400      	str	r4, [sp, #0]
 800de92:	a91b      	add	r1, sp, #108	; 0x6c
            fill_area.y1 = coords_bg.y2 - rout;
 800de94:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800de96:	429a      	cmp	r2, r3
            fill_area.y1 = coords_bg.y2 - rout;
 800de98:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 800de9c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
 800dea0:	bfdc      	itt	le
 800dea2:	3301      	addle	r3, #1
 800dea4:	f8ad 306e 	strhle.w	r3, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
 800dea8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800deac:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800deb0:	2300      	movs	r3, #0
 800deb2:	f7fb fa65 	bl	8009380 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
 800deb6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
            _lv_blend_fill(clip, &fill_area,
 800deba:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800debe:	a91b      	add	r1, sp, #108	; 0x6c
            fill_area.x1 = coords_bg.x1;
 800dec0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area,
 800dec4:	4658      	mov	r0, fp
            fill_area.x2 = coords_bg.x2;
 800dec6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
            _lv_blend_fill(clip, &fill_area,
 800deca:	9400      	str	r4, [sp, #0]
            fill_area.x2 = coords_bg.x2;
 800decc:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            fill_area.y1 = coords_bg.y1 + rout + 1;
 800ded0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800ded4:	4423      	add	r3, r4
 800ded6:	443b      	add	r3, r7
 800ded8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800dedc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 800dee0:	3b01      	subs	r3, #1
 800dee2:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
 800dee4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dee8:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800deec:	2300      	movs	r3, #0
            fill_area.y2 = coords_bg.y2 - rout - 1;
 800deee:	f8ad 7072 	strh.w	r7, [sp, #114]	; 0x72
            _lv_blend_fill(clip, &fill_area,
 800def2:	f7fb fa45 	bl	8009380 <_lv_blend_fill>
        if(grad_map) lv_mem_buf_release(grad_map);
 800def6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def8:	b113      	cbz	r3, 800df00 <lv_draw_rect+0x12d4>
 800defa:	4618      	mov	r0, r3
 800defc:	f009 fd18 	bl	8017930 <lv_mem_buf_release>
        if(mask_buf) lv_mem_buf_release(mask_buf);
 800df00:	b116      	cbz	r6, 800df08 <lv_draw_rect+0x12dc>
 800df02:	4630      	mov	r0, r6
 800df04:	f009 fd14 	bl	8017930 <lv_mem_buf_release>
        lv_draw_mask_remove_id(mask_rout_id);
 800df08:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800df0a:	f7fe f9a1 	bl	800c250 <lv_draw_mask_remove_id>
 800df0e:	e4f0      	b.n	800d8f2 <lv_draw_rect+0xcc6>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800df10:	f04f 33ff 	mov.w	r3, #4294967295
 800df14:	930f      	str	r3, [sp, #60]	; 0x3c
 800df16:	e759      	b.n	800ddcc <lv_draw_rect+0x11a0>
                grad_map[i] = grad_get(dsc, coords_w, i);
 800df18:	b21a      	sxth	r2, r3
 800df1a:	4639      	mov	r1, r7
 800df1c:	4640      	mov	r0, r8
 800df1e:	9306      	str	r3, [sp, #24]
 800df20:	f7fe fb01 	bl	800c526 <grad_get>
 800df24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df26:	461a      	mov	r2, r3
 800df28:	9b06      	ldr	r3, [sp, #24]
 800df2a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
            for(i = 0; i < coords_w; i++) {
 800df2e:	3301      	adds	r3, #1
 800df30:	e758      	b.n	800dde4 <lv_draw_rect+0x11b8>
        lv_color_t * grad_map = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	9309      	str	r3, [sp, #36]	; 0x24
 800df36:	e758      	b.n	800ddea <lv_draw_rect+0x11be>
            int32_t y = h + draw_buf->area.y1;
 800df38:	9a07      	ldr	r2, [sp, #28]
 800df3a:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
 800df3e:	4413      	add	r3, r2
 800df40:	930a      	str	r3, [sp, #40]	; 0x28
            if(y > coords_bg.y1 + rout + 1 &&
 800df42:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800df46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df48:	4453      	add	r3, sl
 800df4a:	3301      	adds	r3, #1
 800df4c:	429a      	cmp	r2, r3
 800df4e:	dd0a      	ble.n	800df66 <lv_draw_rect+0x133a>
               y < coords_bg.y2 - rout - 1) {
 800df50:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800df54:	eba3 030a 	sub.w	r3, r3, sl
 800df58:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
 800df5a:	429a      	cmp	r2, r3
 800df5c:	da03      	bge.n	800df66 <lv_draw_rect+0x133a>
                if(simple_mode == false) {
 800df5e:	9b08      	ldr	r3, [sp, #32]
 800df60:	2b00      	cmp	r3, #0
 800df62:	f040 8258 	bne.w	800e416 <lv_draw_rect+0x17ea>
                lv_memset(mask_buf, opa, draw_area_w);
 800df66:	ee18 2a90 	vmov	r2, s17
 800df6a:	4629      	mov	r1, r5
 800df6c:	4630      	mov	r0, r6
 800df6e:	f009 fdfb 	bl	8017b68 <lv_memset>
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800df72:	9b07      	ldr	r3, [sp, #28]
 800df74:	f8b9 2012 	ldrh.w	r2, [r9, #18]
 800df78:	4630      	mov	r0, r6
 800df7a:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 800df7e:	441a      	add	r2, r3
 800df80:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800df84:	4419      	add	r1, r3
 800df86:	b212      	sxth	r2, r2
 800df88:	ee18 3a90 	vmov	r3, s17
 800df8c:	b209      	sxth	r1, r1
 800df8e:	f7fe f93d 	bl	800c20c <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
 800df92:	2802      	cmp	r0, #2
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800df94:	4607      	mov	r7, r0
                opa2 = LV_OPA_COVER;
 800df96:	bf14      	ite	ne
 800df98:	462b      	movne	r3, r5
 800df9a:	23ff      	moveq	r3, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
 800df9c:	2c01      	cmp	r4, #1
                opa2 = LV_OPA_COVER;
 800df9e:	9306      	str	r3, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
 800dfa0:	d11d      	bne.n	800dfde <lv_draw_rect+0x13b2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dfa2:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 800dfac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfae:	3101      	adds	r1, #1
 800dfb0:	1ad2      	subs	r2, r2, r3
 800dfb2:	1ac9      	subs	r1, r1, r3
 800dfb4:	b212      	sxth	r2, r2
 800dfb6:	b209      	sxth	r1, r1
 800dfb8:	f7fe fab5 	bl	800c526 <grad_get>
            if(simple_mode && split &&
 800dfbc:	9b08      	ldr	r3, [sp, #32]
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
 800dfbe:	ee08 0a10 	vmov	s16, r0
            if(simple_mode && split &&
 800dfc2:	b983      	cbnz	r3, 800dfe6 <lv_draw_rect+0x13ba>
                    _lv_blend_fill(clip, &fill_area,
 800dfc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dfc8:	ee18 2a10 	vmov	r2, s16
 800dfcc:	a91b      	add	r1, sp, #108	; 0x6c
 800dfce:	9302      	str	r3, [sp, #8]
 800dfd0:	9b06      	ldr	r3, [sp, #24]
 800dfd2:	e9cd 7300 	strd	r7, r3, [sp]
 800dfd6:	4633      	mov	r3, r6
 800dfd8:	e06a      	b.n	800e0b0 <lv_draw_rect+0x1484>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800dfda:	4627      	mov	r7, r4
 800dfdc:	e7e1      	b.n	800dfa2 <lv_draw_rect+0x1376>
            if(simple_mode && split &&
 800dfde:	9b08      	ldr	r3, [sp, #32]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 821e 	beq.w	800e422 <lv_draw_rect+0x17f6>
 800dfe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfe8:	2b32      	cmp	r3, #50	; 0x32
 800dfea:	dd65      	ble.n	800e0b8 <lv_draw_rect+0x148c>
               (y < coords_bg.y1 + rout + 1 ||
 800dfec:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
            if(simple_mode && split &&
 800dff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
               (y < coords_bg.y1 + rout + 1 ||
 800dff2:	4453      	add	r3, sl
            if(simple_mode && split &&
 800dff4:	429a      	cmp	r2, r3
 800dff6:	dd05      	ble.n	800e004 <lv_draw_rect+0x13d8>
                y > coords_bg.y2 - rout - 1)) {
 800dff8:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800dffc:	eba3 030a 	sub.w	r3, r3, sl
               (y < coords_bg.y1 + rout + 1 ||
 800e000:	429a      	cmp	r2, r3
 800e002:	db59      	blt.n	800e0b8 <lv_draw_rect+0x148c>
                fill_area2.x1 = coords_bg.x1;
 800e004:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
                _lv_blend_fill(clip, &fill_area2,
 800e008:	a91d      	add	r1, sp, #116	; 0x74
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800e00a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                _lv_blend_fill(clip, &fill_area2,
 800e00c:	4658      	mov	r0, fp
                fill_area2.x1 = coords_bg.x1;
 800e00e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800e012:	3b01      	subs	r3, #1
 800e014:	4413      	add	r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800e016:	ee18 2a10 	vmov	r2, s16
                fill_area2.x2 = coords_bg.x1 + rout - 1;
 800e01a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.y1 = fill_area.y1;
 800e01e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800e022:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                fill_area2.y2 = fill_area.y2;
 800e026:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800e02a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                _lv_blend_fill(clip, &fill_area2,
 800e02e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e032:	9302      	str	r3, [sp, #8]
 800e034:	9b06      	ldr	r3, [sp, #24]
 800e036:	e9cd 7300 	strd	r7, r3, [sp]
 800e03a:	4633      	mov	r3, r6
 800e03c:	f7fb f9a0 	bl	8009380 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
 800e040:	2c01      	cmp	r4, #1
 800e042:	d116      	bne.n	800e072 <lv_draw_rect+0x1446>
                    fill_area2.x1 = coords_bg.x1 + rout;
 800e044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                    _lv_blend_fill(clip, &fill_area2,
 800e046:	a91d      	add	r1, sp, #116	; 0x74
                    fill_area2.x1 = coords_bg.x1 + rout;
 800e048:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
                    _lv_blend_fill(clip, &fill_area2,
 800e04c:	4658      	mov	r0, fp
 800e04e:	9400      	str	r4, [sp, #0]
                    fill_area2.x1 = coords_bg.x1 + rout;
 800e050:	4413      	add	r3, r2
 800e052:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    fill_area2.x2 = coords_bg.x2 - rout;
 800e056:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800e05a:	1a9b      	subs	r3, r3, r2
                    _lv_blend_fill(clip, &fill_area2,
 800e05c:	ee18 2a10 	vmov	r2, s16
                    fill_area2.x2 = coords_bg.x2 - rout;
 800e060:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                    _lv_blend_fill(clip, &fill_area2,
 800e064:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e068:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800e06c:	2300      	movs	r3, #0
 800e06e:	f7fb f987 	bl	8009380 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800e072:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 800e076:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e078:	1c5a      	adds	r2, r3, #1
                fill_area2.x2 = coords_bg.x2;
 800e07a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800e07e:	eba3 030a 	sub.w	r3, r3, sl
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800e082:	1a52      	subs	r2, r2, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800e084:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 800e088:	3301      	adds	r3, #1
                fill_area2.x1 = coords_bg.x2 - rout + 1;
 800e08a:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800e08e:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
 800e092:	440a      	add	r2, r1
                _lv_blend_fill(clip, &fill_area2,
 800e094:	a91d      	add	r1, sp, #116	; 0x74
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (draw_buf->area.x1 + draw_area.x1);
 800e096:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
 800e098:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e09c:	9202      	str	r2, [sp, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bfac      	ite	ge
 800e0a2:	18f3      	addge	r3, r6, r3
 800e0a4:	1c33      	addlt	r3, r6, #0
 800e0a6:	9a06      	ldr	r2, [sp, #24]
 800e0a8:	e9cd 7200 	strd	r7, r2, [sp]
 800e0ac:	ee18 2a10 	vmov	r2, s16
                    _lv_blend_fill(clip, &fill_area,
 800e0b0:	4658      	mov	r0, fp
 800e0b2:	f7fb f965 	bl	8009380 <_lv_blend_fill>
 800e0b6:	e00d      	b.n	800e0d4 <lv_draw_rect+0x14a8>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800e0b8:	2c02      	cmp	r4, #2
 800e0ba:	d119      	bne.n	800e0f0 <lv_draw_rect+0x14c4>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->blend_mode);
 800e0bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e0c0:	a91b      	add	r1, sp, #108	; 0x6c
 800e0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0c4:	4658      	mov	r0, fp
 800e0c6:	9302      	str	r3, [sp, #8]
 800e0c8:	9b06      	ldr	r3, [sp, #24]
 800e0ca:	e9cd 7300 	strd	r7, r3, [sp]
 800e0ce:	4633      	mov	r3, r6
 800e0d0:	f7fb fc12 	bl	80098f8 <_lv_blend_map>
            fill_area.y1++;
 800e0d4:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800e0d8:	3301      	adds	r3, #1
 800e0da:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2++;
 800e0de:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e0e8:	9b07      	ldr	r3, [sp, #28]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	9307      	str	r3, [sp, #28]
 800e0ee:	e698      	b.n	800de22 <lv_draw_rect+0x11f6>
                else if(grad_dir == LV_GRAD_DIR_VER) {
 800e0f0:	2c01      	cmp	r4, #1
 800e0f2:	f43f af67 	beq.w	800dfc4 <lv_draw_rect+0x1398>
                else if(other_mask_cnt != 0 || !split) {
 800e0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f47f af63 	bne.w	800dfc4 <lv_draw_rect+0x1398>
 800e0fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e100:	2b32      	cmp	r3, #50	; 0x32
 800e102:	dce7      	bgt.n	800e0d4 <lv_draw_rect+0x14a8>
 800e104:	e75e      	b.n	800dfc4 <lv_draw_rect+0x1398>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800e106:	a91b      	add	r1, sp, #108	; 0x6c
 800e108:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800e10c:	f001 f8f6 	bl	800f2fc <lv_img_decoder_get_info>
        if(res != LV_RES_OK) {
 800e110:	2801      	cmp	r0, #1
 800e112:	f47f ac4d 	bne.w	800d9b0 <lv_draw_rect+0xd84>
        lv_draw_img_dsc_init(&img_dsc);
 800e116:	a824      	add	r0, sp, #144	; 0x90
 800e118:	f7fc f96e 	bl	800a3f8 <lv_draw_img_dsc_init>
        img_dsc.blend_mode = dsc->blend_mode;
 800e11c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 800e120:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e124:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
 800e128:	f362 0303 	bfi	r3, r2, #0, #4
 800e12c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
        img_dsc.recolor = dsc->bg_img_recolor;
 800e130:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 800e134:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800e138:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 800e13c:	ba5b      	rev16	r3, r3
 800e13e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        if(dsc->bg_img_tiled == false) {
 800e142:	f898 3018 	ldrb.w	r3, [r8, #24]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d137      	bne.n	800e1ba <lv_draw_rect+0x158e>
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e14a:	9b05      	ldr	r3, [sp, #20]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e14c:	f3c0 154a 	ubfx	r5, r0, #5, #11
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e150:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e152:	881a      	ldrh	r2, [r3, #0]
            area.y2 = area.y1 + header.h - 1;
 800e154:	3d01      	subs	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e156:	889b      	ldrh	r3, [r3, #4]
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e158:	f3c1 268a 	ubfx	r6, r1, #10, #11
 800e15c:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 800e160:	3301      	adds	r3, #1
            area.x2 = area.x1 + header.w - 1;
 800e162:	3e01      	subs	r6, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e164:	1a51      	subs	r1, r2, r1
 800e166:	1a9b      	subs	r3, r3, r2
 800e168:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800e16c:	fa04 f383 	sxtah	r3, r4, r3
 800e170:	eb01 0363 	add.w	r3, r1, r3, asr #1
 800e174:	b299      	uxth	r1, r3
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e176:	9b05      	ldr	r3, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e178:	88dc      	ldrh	r4, [r3, #6]
 800e17a:	885a      	ldrh	r2, [r3, #2]
 800e17c:	3401      	adds	r4, #1
            area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800e17e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
            area.x2 = area.x1 + header.w - 1;
 800e182:	4431      	add	r1, r6
 800e184:	1aa4      	subs	r4, r4, r2
 800e186:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e18a:	4659      	mov	r1, fp
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e18c:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 800e190:	fa03 f484 	sxtah	r4, r3, r4
 800e194:	f3c0 1389 	ubfx	r3, r0, #6, #10
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e198:	a81d      	add	r0, sp, #116	; 0x74
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e19a:	1ad3      	subs	r3, r2, r3
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e19c:	f8d8 200c 	ldr.w	r2, [r8, #12]
            area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800e1a0:	eb03 0364 	add.w	r3, r3, r4, asr #1
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            area.y2 = area.y1 + header.h - 1;
 800e1aa:	442b      	add	r3, r5
 800e1ac:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e1b0:	ab24      	add	r3, sp, #144	; 0x90
 800e1b2:	f7fc f955 	bl	800a460 <lv_draw_img>
 800e1b6:	f7ff bbfb 	b.w	800d9b0 <lv_draw_rect+0xd84>
            area.y1 = coords->y1;
 800e1ba:	9b05      	ldr	r3, [sp, #20]
            area.y2 = area.y1 + header.h - 1;
 800e1bc:	f3c0 104a 	ubfx	r0, r0, #5, #11
            area.y1 = coords->y1;
 800e1c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            area.y2 = area.y1 + header.h - 1;
 800e1c4:	3801      	subs	r0, #1
 800e1c6:	4418      	add	r0, r3
            area.y1 = coords->y1;
 800e1c8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            area.y2 = area.y1 + header.h - 1;
 800e1cc:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800e1d0:	9b05      	ldr	r3, [sp, #20]
 800e1d2:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 800e1d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	f73f abe8 	bgt.w	800d9b0 <lv_draw_rect+0xd84>
                area.x1 = coords->x1;
 800e1e0:	9b05      	ldr	r3, [sp, #20]
 800e1e2:	f9b3 2000 	ldrsh.w	r2, [r3]
                area.x2 = area.x1 + header.w - 1;
 800e1e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
                area.x1 = coords->x1;
 800e1e8:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                area.x2 = area.x1 + header.w - 1;
 800e1ec:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e1f0:	3b01      	subs	r3, #1
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800e1f2:	4413      	add	r3, r2
 800e1f4:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 800e1f8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
 800e1fc:	9b05      	ldr	r3, [sp, #20]
 800e1fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e202:	429a      	cmp	r2, r3
 800e204:	dd0e      	ble.n	800e224 <lv_draw_rect+0x15f8>
            for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800e206:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 800e20a:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 800e20e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800e212:	441a      	add	r2, r3
 800e214:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
 800e218:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 800e21c:	4413      	add	r3, r2
 800e21e:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
 800e222:	e7d5      	b.n	800e1d0 <lv_draw_rect+0x15a4>
                    lv_draw_img(&area, clip, dsc->bg_img_src, &img_dsc);
 800e224:	ab24      	add	r3, sp, #144	; 0x90
 800e226:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800e22a:	4659      	mov	r1, fp
 800e22c:	a81d      	add	r0, sp, #116	; 0x74
 800e22e:	f7fc f917 	bl	800a460 <lv_draw_img>
                for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800e232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e234:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 800e238:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e23c:	441a      	add	r2, r3
 800e23e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
 800e242:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800e246:	e7d4      	b.n	800e1f2 <lv_draw_rect+0x15c6>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800e248:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 800e24c:	bf28      	it	cs
 800e24e:	f04f 09ff 	movcs.w	r9, #255	; 0xff
        lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800e252:	f7fa f941 	bl	80084d8 <_lv_refr_get_disp_refreshing>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800e256:	f008 fc5b 	bl	8016b10 <lv_disp_get_draw_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800e25a:	465a      	mov	r2, fp
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp);
 800e25c:	4607      	mov	r7, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
 800e25e:	9905      	ldr	r1, [sp, #20]
 800e260:	a819      	add	r0, sp, #100	; 0x64
 800e262:	f008 ff08 	bl	8017076 <_lv_area_intersect>
        if(is_common == false) return;
 800e266:	2800      	cmp	r0, #0
 800e268:	f43f ac1b 	beq.w	800daa2 <lv_draw_rect+0xe76>
        draw_area.x1 -= disp_area->x1;
 800e26c:	8a3a      	ldrh	r2, [r7, #16]
 800e26e:	f8bd 0064 	ldrh.w	r0, [sp, #100]	; 0x64
        draw_area.y1 -= disp_area->y1;
 800e272:	8a7d      	ldrh	r5, [r7, #18]
        draw_area.x1 -= disp_area->x1;
 800e274:	1a83      	subs	r3, r0, r2
        draw_area.y1 -= disp_area->y1;
 800e276:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
        draw_area.x1 -= disp_area->x1;
 800e27a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        draw_area.y1 -= disp_area->y1;
 800e27e:	1b49      	subs	r1, r1, r5
        draw_area.x2 -= disp_area->x1;
 800e280:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
        draw_area.y1 -= disp_area->y1;
 800e284:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
        draw_area.x2 -= disp_area->x1;
 800e288:	1a9a      	subs	r2, r3, r2
 800e28a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        draw_area.y2 -= disp_area->y1;
 800e28e:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 800e292:	1b52      	subs	r2, r2, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e294:	1c5d      	adds	r5, r3, #1
 800e296:	1a2d      	subs	r5, r5, r0
 800e298:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 800e29c:	b22d      	sxth	r5, r5
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800e29e:	4628      	mov	r0, r5
 800e2a0:	f009 fcea 	bl	8017c78 <lv_mem_buf_get>
        if(rout > 0) {
 800e2a4:	2c00      	cmp	r4, #0
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800e2a6:	4682      	mov	sl, r0
        if(rout > 0) {
 800e2a8:	dd65      	ble.n	800e376 <lv_draw_rect+0x174a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	b222      	sxth	r2, r4
 800e2ae:	9905      	ldr	r1, [sp, #20]
 800e2b0:	a81d      	add	r0, sp, #116	; 0x74
 800e2b2:	f7fe f8fb 	bl	800c4ac <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	a81d      	add	r0, sp, #116	; 0x74
 800e2ba:	f7fd ff91 	bl	800c1e0 <lv_draw_mask_add>
 800e2be:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
 800e2c0:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	a917      	add	r1, sp, #92	; 0x5c
 800e2c8:	a824      	add	r0, sp, #144	; 0x90
 800e2ca:	1aa2      	subs	r2, r4, r2
 800e2cc:	b212      	sxth	r2, r2
 800e2ce:	f7fe f8ed 	bl	800c4ac <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	a824      	add	r0, sp, #144	; 0x90
 800e2d6:	f7fd ff83 	bl	800c1e0 <lv_draw_mask_add>
        int32_t corner_size = LV_MAX(rout, dsc->border_width - 1);
 800e2da:	f9b8 301c 	ldrsh.w	r3, [r8, #28]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800e2de:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800e2e2:	ee08 0a10 	vmov	s16, r0
        int32_t corner_size = LV_MAX(rout, dsc->border_width - 1);
 800e2e6:	429c      	cmp	r4, r3
 800e2e8:	bfb8      	it	lt
 800e2ea:	f103 34ff 	addlt.w	r4, r3, #4294967295
        lv_color_t color = dsc->border_color;
 800e2ee:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800e2f2:	ee08 3a90 	vmov	s17, r3
        lv_blend_mode_t blend_mode = dsc->blend_mode;
 800e2f6:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e2fa:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
 800e2fc:	9b05      	ldr	r3, [sp, #20]
 800e2fe:	f9b3 2000 	ldrsh.w	r2, [r3]
        fill_area.x2 = coords->x2;
 800e302:	889b      	ldrh	r3, [r3, #4]
        fill_area.x1 = coords->x1;
 800e304:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        fill_area.x2 = coords->x2;
 800e308:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.y1 = disp_area->y1 + draw_area.y1;
 800e30c:	8a7b      	ldrh	r3, [r7, #18]
 800e30e:	4433      	add	r3, r6
 800e310:	b21b      	sxth	r3, r3
 800e312:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        fill_area.y2 = fill_area.y1;
 800e316:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
 800e31a:	f898 301f 	ldrb.w	r3, [r8, #31]
 800e31e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e322:	2b08      	cmp	r3, #8
 800e324:	bf04      	itt	eq
 800e326:	1912      	addeq	r2, r2, r4
 800e328:	f8ad 2070 	strheq.w	r2, [sp, #112]	; 0x70
        volatile bool top_only = false;
 800e32c:	2200      	movs	r2, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800e32e:	2b04      	cmp	r3, #4
        volatile bool top_only = false;
 800e330:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        volatile bool bottom_only = false;
 800e334:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
 800e338:	d121      	bne.n	800e37e <lv_draw_rect+0x1752>
 800e33a:	2301      	movs	r3, #1
 800e33c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800e340:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e344:	bb3b      	cbnz	r3, 800e396 <lv_draw_rect+0x176a>
 800e346:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e34a:	f083 0301 	eor.w	r3, r3, #1
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e356:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800e35a:	429e      	cmp	r6, r3
 800e35c:	dd1d      	ble.n	800e39a <lv_draw_rect+0x176e>
        lv_draw_mask_remove_id(mask_rin_id);
 800e35e:	ee18 0a10 	vmov	r0, s16
 800e362:	f7fd ff75 	bl	800c250 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
 800e366:	9806      	ldr	r0, [sp, #24]
 800e368:	f7fd ff72 	bl	800c250 <lv_draw_mask_remove_id>
        lv_mem_buf_release(mask_buf);
 800e36c:	4650      	mov	r0, sl
 800e36e:	f009 fadf 	bl	8017930 <lv_mem_buf_release>
 800e372:	f7ff bb96 	b.w	800daa2 <lv_draw_rect+0xe76>
        int16_t mask_rout_id = LV_MASK_ID_INV;
 800e376:	f04f 33ff 	mov.w	r3, #4294967295
 800e37a:	9306      	str	r3, [sp, #24]
 800e37c:	e7a0      	b.n	800e2c0 <lv_draw_rect+0x1694>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d005      	beq.n	800e38e <lv_draw_rect+0x1762>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
 800e382:	2b06      	cmp	r3, #6
 800e384:	d1dc      	bne.n	800e340 <lv_draw_rect+0x1714>
            top_only = true;
 800e386:	2301      	movs	r3, #1
 800e388:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800e38c:	e000      	b.n	800e390 <lv_draw_rect+0x1764>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
 800e38e:	2301      	movs	r3, #1
            bottom_only = true;
 800e390:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800e394:	e7d4      	b.n	800e340 <lv_draw_rect+0x1714>
        volatile bool normal = !top_only && !bottom_only ? true : false;
 800e396:	2300      	movs	r3, #0
 800e398:	e7d9      	b.n	800e34e <lv_draw_rect+0x1722>
            if(normal ||
 800e39a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e39e:	b99b      	cbnz	r3, 800e3c8 <lv_draw_rect+0x179c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800e3a0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e3a4:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
            if(normal ||
 800e3a8:	b12b      	cbz	r3, 800e3b6 <lv_draw_rect+0x178a>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800e3aa:	9b05      	ldr	r3, [sp, #20]
 800e3ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3b0:	4423      	add	r3, r4
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	dd08      	ble.n	800e3c8 <lv_draw_rect+0x179c>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800e3b6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
 800e3ba:	b303      	cbz	r3, 800e3fe <lv_draw_rect+0x17d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
 800e3bc:	9b05      	ldr	r3, [sp, #20]
 800e3be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e3c2:	1b1b      	subs	r3, r3, r4
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	db1a      	blt.n	800e3fe <lv_draw_rect+0x17d2>
                lv_memset_ff(mask_buf, draw_area_w);
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4650      	mov	r0, sl
 800e3cc:	f009 fcd1 	bl	8017d72 <lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, draw_buf->area.x1 + draw_area.x1, draw_buf->area.y1 + h, draw_area_w);
 800e3d0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800e3d4:	8a7a      	ldrh	r2, [r7, #18]
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	8a39      	ldrh	r1, [r7, #16]
 800e3da:	4432      	add	r2, r6
 800e3dc:	4419      	add	r1, r3
 800e3de:	462b      	mov	r3, r5
 800e3e0:	b212      	sxth	r2, r2
 800e3e2:	b209      	sxth	r1, r1
 800e3e4:	f7fd ff12 	bl	800c20c <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
 800e3e8:	9b07      	ldr	r3, [sp, #28]
 800e3ea:	9000      	str	r0, [sp, #0]
 800e3ec:	ee18 2a90 	vmov	r2, s17
 800e3f0:	a91b      	add	r1, sp, #108	; 0x6c
 800e3f2:	4658      	mov	r0, fp
 800e3f4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e3f8:	4653      	mov	r3, sl
 800e3fa:	f7fa ffc1 	bl	8009380 <_lv_blend_fill>
            fill_area.y1++;
 800e3fe:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e402:	3601      	adds	r6, #1
            fill_area.y1++;
 800e404:	3301      	adds	r3, #1
 800e406:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2++;
 800e40a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
 800e40e:	3301      	adds	r3, #1
 800e410:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800e414:	e79f      	b.n	800e356 <lv_draw_rect+0x172a>
            if(grad_dir == LV_GRAD_DIR_VER) {
 800e416:	2c01      	cmp	r4, #1
            opa2 = opa;
 800e418:	9506      	str	r5, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
 800e41a:	f43f adde 	beq.w	800dfda <lv_draw_rect+0x13ae>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800e41e:	2701      	movs	r7, #1
 800e420:	e5e1      	b.n	800dfe6 <lv_draw_rect+0x13ba>
                if(grad_dir == LV_GRAD_DIR_HOR) {
 800e422:	2c02      	cmp	r4, #2
 800e424:	f47f ae67 	bne.w	800e0f6 <lv_draw_rect+0x14ca>
 800e428:	e648      	b.n	800e0bc <lv_draw_rect+0x1490>

0800e42a <lv_color_mix>:
{
 800e42a:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e42c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e430:	f3c1 1445 	ubfx	r4, r1, #5, #6
 800e434:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800e438:	f248 0681 	movw	r6, #32897	; 0x8081
 800e43c:	436c      	muls	r4, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e43e:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e442:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e446:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e44a:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e44c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e44e:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 800e450:	4373      	muls	r3, r6
    return ret;
 800e452:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e456:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e45a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e45e:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e462:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e466:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e468:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 800e46a:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e46c:	4372      	muls	r2, r6
    return ret;
 800e46e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 800e472:	0dd0      	lsrs	r0, r2, #23
    return ret;
 800e474:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 800e478:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 800e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e47e <lv_memcpy_small>:
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800e47e:	3901      	subs	r1, #1
 800e480:	4402      	add	r2, r0
    uint8_t * d8 = (uint8_t *)dst;
 800e482:	4603      	mov	r3, r0
{
 800e484:	b510      	push	{r4, lr}
    while(len) {
 800e486:	4293      	cmp	r3, r2
 800e488:	d100      	bne.n	800e48c <lv_memcpy_small+0xe>
        s8++;
        len--;
    }

    return dst;
}
 800e48a:	bd10      	pop	{r4, pc}
        *d8 = *s8;
 800e48c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e490:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 800e494:	e7f7      	b.n	800e486 <lv_memcpy_small+0x8>

0800e496 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
 800e496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e498:	4607      	mov	r7, r0
 800e49a:	4615      	mov	r5, r2
    lv_color_t p_color = lv_color_black();
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800e49c:	6886      	ldr	r6, [r0, #8]
    lv_color_t p_color = lv_color_black();
 800e49e:	2200      	movs	r2, #0

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800e4a0:	7800      	ldrb	r0, [r0, #0]
{
 800e4a2:	460c      	mov	r4, r1
    lv_color_t p_color = lv_color_black();
 800e4a4:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
 800e4a8:	f000 021f 	and.w	r2, r0, #31
 800e4ac:	1f11      	subs	r1, r2, #4
 800e4ae:	2902      	cmp	r1, #2
 800e4b0:	d816      	bhi.n	800e4e0 <lv_img_buf_get_px_color+0x4a>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800e4b2:	4610      	mov	r0, r2
 800e4b4:	f7fb ffb2 	bl	800a41c <lv_img_cf_get_px_size>
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800e4b8:	683b      	ldr	r3, [r7, #0]
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
 800e4ba:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800e4be:	2202      	movs	r2, #2
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
 800e4c0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e4c4:	fb10 f104 	smulbb	r1, r0, r4
 800e4c8:	fb13 f305 	smulbb	r3, r3, r5
 800e4cc:	fb00 1103 	mla	r1, r0, r3, r1
        lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
 800e4d0:	a801      	add	r0, sp, #4
 800e4d2:	4431      	add	r1, r6
 800e4d4:	f7ff ffd3 	bl	800e47e <lv_memcpy_small>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    }
    return p_color;
}
 800e4d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800e4dc:	b003      	add	sp, #12
 800e4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
 800e4e0:	2a07      	cmp	r2, #7
 800e4e2:	d114      	bne.n	800e50e <lv_img_buf_get_px_color+0x78>
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e4e4:	f004 0307 	and.w	r3, r4, #7
 800e4e8:	2101      	movs	r1, #1
 800e4ea:	f1c3 0207 	rsb	r2, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e4f4:	4091      	lsls	r1, r2
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
 800e4f6:	3307      	adds	r3, #7
 800e4f8:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e4fa:	fb05 6303 	mla	r3, r5, r3, r6
 800e4fe:	eb03 04e4 	add.w	r4, r3, r4, asr #3
 800e502:	7a23      	ldrb	r3, [r4, #8]
 800e504:	400b      	ands	r3, r1
 800e506:	4113      	asrs	r3, r2
        p_color = color;
 800e508:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e50c:	e7e4      	b.n	800e4d8 <lv_img_buf_get_px_color+0x42>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
 800e50e:	2a08      	cmp	r2, #8
 800e510:	d116      	bne.n	800e540 <lv_img_buf_get_px_color+0xaa>
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e512:	6838      	ldr	r0, [r7, #0]
        uint8_t bit = (x & 0x3) * 2;
 800e514:	f004 0203 	and.w	r2, r4, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e518:	2103      	movs	r1, #3
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e51a:	f3c0 208a 	ubfx	r0, r0, #10, #11
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e51e:	0052      	lsls	r2, r2, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e520:	3003      	adds	r0, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e522:	f1c2 0206 	rsb	r2, r2, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
 800e526:	1080      	asrs	r0, r0, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e528:	fb05 6300 	mla	r3, r5, r0, r6
 800e52c:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800e530:	7c23      	ldrb	r3, [r4, #16]
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e532:	4091      	lsls	r1, r2
 800e534:	400b      	ands	r3, r1
 800e536:	fa43 f202 	asr.w	r2, r3, r2
 800e53a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e53e:	e7cb      	b.n	800e4d8 <lv_img_buf_get_px_color+0x42>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
 800e540:	2a09      	cmp	r2, #9
 800e542:	d111      	bne.n	800e568 <lv_img_buf_get_px_color+0xd2>
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e544:	683b      	ldr	r3, [r7, #0]
        uint8_t bit = (x & 0x1) * 4;
 800e546:	f004 0201 	and.w	r2, r4, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e54a:	210f      	movs	r1, #15
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e54c:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e550:	0092      	lsls	r2, r2, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e552:	3301      	adds	r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e554:	f1c2 0204 	rsb	r2, r2, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
 800e558:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e55a:	fb05 6303 	mla	r3, r5, r3, r6
 800e55e:	eb03 0464 	add.w	r4, r3, r4, asr #1
 800e562:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e566:	e7e4      	b.n	800e532 <lv_img_buf_get_px_color+0x9c>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800e568:	2a0a      	cmp	r2, #10
 800e56a:	d108      	bne.n	800e57e <lv_img_buf_get_px_color+0xe8>
        uint32_t px  = dsc->header.w * y + x;
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e572:	fb15 4303 	smlabb	r3, r5, r3, r4
        p_color.full = buf_u8[px];
 800e576:	4433      	add	r3, r6
 800e578:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800e57c:	e7c4      	b.n	800e508 <lv_img_buf_get_px_color+0x72>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800e57e:	3a0b      	subs	r2, #11
 800e580:	2a03      	cmp	r2, #3
 800e582:	d8a9      	bhi.n	800e4d8 <lv_img_buf_get_px_color+0x42>
 800e584:	e7c0      	b.n	800e508 <lv_img_buf_get_px_color+0x72>
	...

0800e588 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
 800e588:	460b      	mov	r3, r1
    uint8_t * buf_u8 = (uint8_t *)dsc->data;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800e58a:	7801      	ldrb	r1, [r0, #0]
 800e58c:	f001 011f 	and.w	r1, r1, #31
 800e590:	2905      	cmp	r1, #5
{
 800e592:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e594:	4604      	mov	r4, r0
 800e596:	b085      	sub	sp, #20
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
 800e598:	6885      	ldr	r5, [r0, #8]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800e59a:	d10a      	bne.n	800e5b2 <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800e59c:	6801      	ldr	r1, [r0, #0]
 800e59e:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800e5a2:	fb12 3301 	smlabb	r3, r2, r1, r3
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800e5a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e5aa:	442b      	add	r3, r5
 800e5ac:	7898      	ldrb	r0, [r3, #2]
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
}
 800e5ae:	b005      	add	sp, #20
 800e5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
 800e5b2:	290b      	cmp	r1, #11
 800e5b4:	d114      	bne.n	800e5e0 <lv_img_buf_get_px_alpha+0x58>
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e5b6:	6800      	ldr	r0, [r0, #0]
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e5b8:	f003 0607 	and.w	r6, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e5bc:	10d9      	asrs	r1, r3, #3
 800e5be:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e5c2:	f1c6 0607 	rsb	r6, r6, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
 800e5c6:	3007      	adds	r0, #7
 800e5c8:	10c0      	asrs	r0, r0, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
 800e5ca:	fb02 5300 	mla	r3, r2, r0, r5
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	5c5b      	ldrb	r3, [r3, r1]
 800e5d2:	40b2      	lsls	r2, r6
 800e5d4:	4013      	ands	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
 800e5d6:	4133      	asrs	r3, r6
 800e5d8:	bf0c      	ite	eq
 800e5da:	20ff      	moveq	r0, #255	; 0xff
 800e5dc:	2000      	movne	r0, #0
 800e5de:	e7e6      	b.n	800e5ae <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
 800e5e0:	290c      	cmp	r1, #12
 800e5e2:	d118      	bne.n	800e616 <lv_img_buf_get_px_alpha+0x8e>
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e5e4:	6800      	ldr	r0, [r0, #0]
        uint8_t bit = (x & 0x3) * 2;
 800e5e6:	f003 0603 	and.w	r6, r3, #3
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e5ea:	4920      	ldr	r1, [pc, #128]	; (800e66c <lv_img_buf_get_px_alpha+0xe4>)
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e5ec:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e5f0:	0076      	lsls	r6, r6, #1
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800e5f2:	9100      	str	r1, [sp, #0]
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e5f4:	1099      	asrs	r1, r3, #2
 800e5f6:	3003      	adds	r0, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e5f8:	f1c6 0606 	rsb	r6, r6, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
 800e5fc:	1080      	asrs	r0, r0, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
 800e5fe:	fb02 5300 	mla	r3, r2, r0, r5
 800e602:	2203      	movs	r2, #3
 800e604:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e606:	40b2      	lsls	r2, r6
 800e608:	4013      	ands	r3, r2
        return opa_table[px_opa];
 800e60a:	aa04      	add	r2, sp, #16
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e60c:	4133      	asrs	r3, r6
        return opa_table[px_opa];
 800e60e:	4413      	add	r3, r2
 800e610:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 800e614:	e7cb      	b.n	800e5ae <lv_img_buf_get_px_alpha+0x26>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
 800e616:	290d      	cmp	r1, #13
 800e618:	d11c      	bne.n	800e654 <lv_img_buf_get_px_alpha+0xcc>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
 800e61a:	4e15      	ldr	r6, [pc, #84]	; (800e670 <lv_img_buf_get_px_alpha+0xe8>)
 800e61c:	46ec      	mov	ip, sp
 800e61e:	f106 0e10 	add.w	lr, r6, #16
 800e622:	6830      	ldr	r0, [r6, #0]
 800e624:	3608      	adds	r6, #8
 800e626:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800e62a:	4667      	mov	r7, ip
 800e62c:	4576      	cmp	r6, lr
 800e62e:	c703      	stmia	r7!, {r0, r1}
 800e630:	46bc      	mov	ip, r7
 800e632:	d1f6      	bne.n	800e622 <lv_img_buf_get_px_alpha+0x9a>
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e634:	6820      	ldr	r0, [r4, #0]
        uint8_t bit = (x & 0x1) * 4;
 800e636:	f003 0601 	and.w	r6, r3, #1
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e63a:	1059      	asrs	r1, r3, #1
 800e63c:	f3c0 208a 	ubfx	r0, r0, #10, #11
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e640:	00b6      	lsls	r6, r6, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e642:	3001      	adds	r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e644:	f1c6 0604 	rsb	r6, r6, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
 800e648:	1040      	asrs	r0, r0, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
 800e64a:	fb02 5300 	mla	r3, r2, r0, r5
 800e64e:	220f      	movs	r2, #15
 800e650:	5c5b      	ldrb	r3, [r3, r1]
 800e652:	e7d8      	b.n	800e606 <lv_img_buf_get_px_alpha+0x7e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800e654:	290e      	cmp	r1, #14
        uint32_t px = dsc->header.w * y + x;
 800e656:	bf09      	itett	eq
 800e658:	6801      	ldreq	r1, [r0, #0]
    return LV_OPA_COVER;
 800e65a:	20ff      	movne	r0, #255	; 0xff
        uint32_t px = dsc->header.w * y + x;
 800e65c:	f3c1 218a 	ubfxeq	r1, r1, #10, #11
 800e660:	fb12 3301 	smlabbeq	r3, r2, r1, r3
        return buf_u8[px];
 800e664:	bf08      	it	eq
 800e666:	5ce8      	ldrbeq	r0, [r5, r3]
 800e668:	e7a1      	b.n	800e5ae <lv_img_buf_get_px_alpha+0x26>
 800e66a:	bf00      	nop
 800e66c:	ffaa5500 	.word	0xffaa5500
 800e670:	08025850 	.word	0x08025850

0800e674 <_lv_img_buf_transform_init>:
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(_lv_img_transform_dsc_t * dsc)
{
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e674:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;

    int32_t angle_low = dsc->cfg.angle / 10;
    int32_t angle_high = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800e678:	f64f 72f6 	movw	r2, #65526	; 0xfff6
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e67c:	021b      	lsls	r3, r3, #8
{
 800e67e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
 800e682:	6243      	str	r3, [r0, #36]	; 0x24
{
 800e684:	4604      	mov	r4, r0
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800e686:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int32_t angle_low = dsc->cfg.angle / 10;
 800e68a:	260a      	movs	r6, #10
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
 800e68c:	021b      	lsls	r3, r3, #8
 800e68e:	6283      	str	r3, [r0, #40]	; 0x28
    int32_t angle_low = dsc->cfg.angle / 10;
 800e690:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800e694:	fb90 f5f6 	sdiv	r5, r0, r6
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
 800e698:	fb15 0802 	smlabb	r8, r5, r2, r0

    int32_t s1 = lv_trigo_sin(-angle_low);
 800e69c:	b2af      	uxth	r7, r5
    int32_t angle_high = angle_low + 1;
 800e69e:	3501      	adds	r5, #1
    int32_t s1 = lv_trigo_sin(-angle_low);
 800e6a0:	4278      	negs	r0, r7
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e6a2:	b2ad      	uxth	r5, r5
    int32_t s1 = lv_trigo_sin(-angle_low);
 800e6a4:	b200      	sxth	r0, r0
 800e6a6:	f009 f859 	bl	801775c <lv_trigo_sin>
 800e6aa:	4681      	mov	r9, r0
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e6ac:	4268      	negs	r0, r5

    int32_t c1 = lv_trigo_sin(-angle_low + 90);
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800e6ae:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    int32_t s2 = lv_trigo_sin(-angle_high);
 800e6b2:	b200      	sxth	r0, r0
 800e6b4:	f009 f852 	bl	801775c <lv_trigo_sin>
 800e6b8:	4682      	mov	sl, r0
    int32_t c1 = lv_trigo_sin(-angle_low + 90);
 800e6ba:	f1c7 005a 	rsb	r0, r7, #90	; 0x5a
 800e6be:	b200      	sxth	r0, r0
 800e6c0:	f009 f84c 	bl	801775c <lv_trigo_sin>
 800e6c4:	4607      	mov	r7, r0
    int32_t c2 = lv_trigo_sin(-angle_high + 90);
 800e6c6:	b228      	sxth	r0, r5
 800e6c8:	f009 f848 	bl	801775c <lv_trigo_sin>

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e6cc:	eba6 0308 	sub.w	r3, r6, r8
 800e6d0:	fb08 f20a 	mul.w	r2, r8, sl
 800e6d4:	fb03 2209 	mla	r2, r3, r9, r2
 800e6d8:	fb92 f2f6 	sdiv	r2, r2, r6
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e6dc:	1152      	asrs	r2, r2, #5
 800e6de:	62e2      	str	r2, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e6e0:	fb08 f200 	mul.w	r2, r8, r0
 800e6e4:	fb03 2007 	mla	r0, r3, r7, r2
 800e6e8:	fb90 f3f6 	sdiv	r3, r0, r6
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e6ec:	115b      	asrs	r3, r3, #5

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e6ee:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e6f0:	6323      	str	r3, [r4, #48]	; 0x30
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e6f2:	f7fb fe9d 	bl	800a430 <lv_img_cf_is_chroma_keyed>
 800e6f6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e6fa:	f360 0300 	bfi	r3, r0, #0, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e6fe:	7ca0      	ldrb	r0, [r4, #18]
    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
 800e700:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e704:	f7fb fe9e 	bl	800a444 <lv_img_cf_has_alpha>
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e708:	7ca3      	ldrb	r3, [r4, #18]
 800e70a:	1f1a      	subs	r2, r3, #4
        dsc->tmp.native_color = 0;
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    dsc->tmp.img_dsc.header.always_zero = 0;
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e70c:	f003 031f 	and.w	r3, r3, #31
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e710:	2a02      	cmp	r2, #2
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e712:	ea4f 0240 	mov.w	r2, r0, lsl #1
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800e716:	bf8c      	ite	hi
 800e718:	2100      	movhi	r1, #0
 800e71a:	2101      	movls	r1, #1
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
 800e71c:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800e720:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800e724:	f002 0206 	and.w	r2, r2, #6
 800e728:	f021 0106 	bic.w	r1, r1, #6
 800e72c:	430a      	orrs	r2, r1
 800e72e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    dsc->tmp.img_dsc.data = dsc->cfg.src;
 800e732:	6822      	ldr	r2, [r4, #0]
 800e734:	6222      	str	r2, [r4, #32]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e736:	88a2      	ldrh	r2, [r4, #4]
 800e738:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800e73c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800e740:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e744:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800e748:	69a2      	ldr	r2, [r4, #24]
 800e74a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800e74e:	4313      	orrs	r3, r2
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;

    /*The inverse of the zoom will be sued during the transformation
     * + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800e750:	89e2      	ldrh	r2, [r4, #14]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
 800e752:	61a3      	str	r3, [r4, #24]
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
 800e754:	0853      	lsrs	r3, r2, #1
 800e756:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e75a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e75e:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
 800e760:	23ff      	movs	r3, #255	; 0xff
 800e762:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
 800e764:	8a23      	ldrh	r3, [r4, #16]
 800e766:	82a3      	strh	r3, [r4, #20]
}
 800e768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e76c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800e76c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e772:	4604      	mov	r4, r0
 800e774:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800e778:	b953      	cbnz	r3, 800e790 <_lv_img_buf_get_transformed_area+0x24>
 800e77a:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800e77e:	d107      	bne.n	800e790 <_lv_img_buf_get_transformed_area+0x24>
        res->x1 = 0;
        res->y1 = 0;
        res->x2 = w - 1;
 800e780:	3901      	subs	r1, #1
        res->y2 = h - 1;
 800e782:	3a01      	subs	r2, #1
        res->x1 = 0;
 800e784:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800e786:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 800e788:	8081      	strh	r1, [r0, #4]

    if(angle == 0) {
        res->x1 += pivot->x;
        res->y1 += pivot->y;
        res->x2 += pivot->x;
        res->y2 += pivot->y;
 800e78a:	80e2      	strh	r2, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800e78c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e790:	f9b7 c000 	ldrsh.w	ip, [r7]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e794:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e798:	f1cc 0600 	rsb	r6, ip, #0
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e79c:	eba1 010c 	sub.w	r1, r1, ip
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e7a0:	4245      	negs	r5, r0
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e7a2:	1a12      	subs	r2, r2, r0
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e7a4:	fb0e f606 	mul.w	r6, lr, r6
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e7a8:	fb0e f505 	mul.w	r5, lr, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e7ac:	fb0e f101 	mul.w	r1, lr, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e7b0:	1236      	asrs	r6, r6, #8
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e7b2:	fb0e f202 	mul.w	r2, lr, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e7b6:	122d      	asrs	r5, r5, #8
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e7b8:	1209      	asrs	r1, r1, #8
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e7ba:	3e01      	subs	r6, #1
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e7bc:	1212      	asrs	r2, r2, #8
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e7be:	3d01      	subs	r5, #1
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e7c0:	3102      	adds	r1, #2
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e7c2:	b2b6      	uxth	r6, r6
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e7c4:	3202      	adds	r2, #2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e7c6:	b2ad      	uxth	r5, r5
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e7c8:	b289      	uxth	r1, r1
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
 800e7ca:	8026      	strh	r6, [r4, #0]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e7cc:	b292      	uxth	r2, r2
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
 800e7ce:	8065      	strh	r5, [r4, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
 800e7d0:	80a1      	strh	r1, [r4, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
 800e7d2:	80e2      	strh	r2, [r4, #6]
    if(angle == 0) {
 800e7d4:	b95b      	cbnz	r3, 800e7ee <_lv_img_buf_get_transformed_area+0x82>
        res->x1 += pivot->x;
 800e7d6:	fa16 f68c 	uxtah	r6, r6, ip
        res->y1 += pivot->y;
 800e7da:	fa15 f580 	uxtah	r5, r5, r0
        res->x2 += pivot->x;
 800e7de:	fa11 f18c 	uxtah	r1, r1, ip
        res->y2 += pivot->y;
 800e7e2:	fa12 f280 	uxtah	r2, r2, r0
        res->x1 += pivot->x;
 800e7e6:	8026      	strh	r6, [r4, #0]
        res->y1 += pivot->y;
 800e7e8:	8065      	strh	r5, [r4, #2]
        res->x2 += pivot->x;
 800e7ea:	80a1      	strh	r1, [r4, #4]
        res->y2 += pivot->y;
 800e7ec:	e7cd      	b.n	800e78a <_lv_img_buf_get_transformed_area+0x1e>
    int32_t angle_low = angle / 10;
 800e7ee:	f04f 090a 	mov.w	r9, #10
    int32_t angle_rem = angle  - (angle_low * 10);
 800e7f2:	f64f 7af6 	movw	sl, #65526	; 0xfff6
    int32_t angle_low = angle / 10;
 800e7f6:	fb93 f8f9 	sdiv	r8, r3, r9
    int32_t angle_high = angle_low + 1;
 800e7fa:	f108 0b01 	add.w	fp, r8, #1
    int32_t s1 = lv_trigo_sin(angle_low);
 800e7fe:	4640      	mov	r0, r8
    int32_t angle_rem = angle  - (angle_low * 10);
 800e800:	fb18 3a0a 	smlabb	sl, r8, sl, r3
    int32_t s1 = lv_trigo_sin(angle_low);
 800e804:	f008 ffaa 	bl	801775c <lv_trigo_sin>
 800e808:	4605      	mov	r5, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 800e80a:	fa0f f08b 	sxth.w	r0, fp
 800e80e:	f008 ffa5 	bl	801775c <lv_trigo_sin>
 800e812:	4683      	mov	fp, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800e814:	f108 005a 	add.w	r0, r8, #90	; 0x5a
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800e818:	f108 085b 	add.w	r8, r8, #91	; 0x5b
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800e81c:	b200      	sxth	r0, r0
 800e81e:	f008 ff9d 	bl	801775c <lv_trigo_sin>
 800e822:	4606      	mov	r6, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800e824:	fa0f f088 	sxth.w	r0, r8
 800e828:	f008 ff98 	bl	801775c <lv_trigo_sin>
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e82c:	eba9 010a 	sub.w	r1, r9, sl
 800e830:	fb0a f20b 	mul.w	r2, sl, fp
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e834:	f8b7 c000 	ldrh.w	ip, [r7]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e838:	fb0a f000 	mul.w	r0, sl, r0
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e83c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e840:	fb01 2205 	mla	r2, r1, r5, r2
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e844:	887f      	ldrh	r7, [r7, #2]
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e846:	fb01 0606 	mla	r6, r1, r6, r0
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e84a:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e84e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800e852:	fb92 f2f9 	sdiv	r2, r2, r9
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800e856:	fb96 f6f9 	sdiv	r6, r6, r9
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e85a:	1152      	asrs	r2, r2, #5
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e85c:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 800e860:	1176      	asrs	r6, r6, #5
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e862:	fb02 f800 	mul.w	r8, r2, r0
 800e866:	fb06 fe01 	mul.w	lr, r6, r1
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e86a:	fb06 fb09 	mul.w	fp, r6, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e86e:	ebae 0508 	sub.w	r5, lr, r8
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e872:	4351      	muls	r1, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e874:	ebab 0808 	sub.w	r8, fp, r8
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e878:	fb02 f909 	mul.w	r9, r2, r9
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e87c:	eb0c 25a5 	add.w	r5, ip, r5, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e880:	fb02 f20a 	mul.w	r2, r2, sl
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e884:	eb0c 28a8 	add.w	r8, ip, r8, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e888:	4370      	muls	r0, r6
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e88a:	b22d      	sxth	r5, r5
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e88c:	ebae 0e02 	sub.w	lr, lr, r2
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e890:	fa0f f888 	sxth.w	r8, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e894:	ebab 0202 	sub.w	r2, fp, r2
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e898:	eb0c 2eae 	add.w	lr, ip, lr, asr #10
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e89c:	180b      	adds	r3, r1, r0
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e89e:	4545      	cmp	r5, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e8a0:	eb0c 2ca2 	add.w	ip, ip, r2, asr #10
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e8a4:	fa0f fe8e 	sxth.w	lr, lr
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e8a8:	462a      	mov	r2, r5
 800e8aa:	bfa8      	it	ge
 800e8ac:	4642      	movge	r2, r8
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 800e8ae:	fa0f fc8c 	sxth.w	ip, ip
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8b2:	4448      	add	r0, r9
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8b4:	eb07 23a3 	add.w	r3, r7, r3, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e8b8:	4572      	cmp	r2, lr
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8ba:	fb06 f60a 	mul.w	r6, r6, sl
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8be:	eb07 20a0 	add.w	r0, r7, r0, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e8c2:	bfa8      	it	ge
 800e8c4:	4672      	movge	r2, lr
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8c6:	b21b      	sxth	r3, r3
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8c8:	b200      	sxth	r0, r0
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8ca:	4431      	add	r1, r6
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e8cc:	4562      	cmp	r2, ip
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8ce:	444e      	add	r6, r9
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8d0:	eb07 21a1 	add.w	r1, r7, r1, asr #10
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e8d4:	bfa8      	it	ge
 800e8d6:	4662      	movge	r2, ip
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e8d8:	4545      	cmp	r5, r8
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8da:	b209      	sxth	r1, r1
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e8dc:	bfb8      	it	lt
 800e8de:	4645      	movlt	r5, r8
    res->x1 = LV_MIN4(lb.x, lt.x, rb.x, rt.x);
 800e8e0:	8022      	strh	r2, [r4, #0]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e8e2:	461a      	mov	r2, r3
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8e4:	eb07 27a6 	add.w	r7, r7, r6, asr #10
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e8e8:	45ae      	cmp	lr, r5
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800e8ea:	b23f      	sxth	r7, r7
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e8ec:	bfb8      	it	lt
 800e8ee:	46ae      	movlt	lr, r5
 800e8f0:	45f4      	cmp	ip, lr
 800e8f2:	bfb8      	it	lt
 800e8f4:	46f4      	movlt	ip, lr
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e8f6:	4283      	cmp	r3, r0
 800e8f8:	bfa8      	it	ge
 800e8fa:	4602      	movge	r2, r0
    res->x2 = LV_MAX4(lb.x, lt.x, rb.x, rt.x);
 800e8fc:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e900:	428a      	cmp	r2, r1
 800e902:	bfa8      	it	ge
 800e904:	460a      	movge	r2, r1
 800e906:	42ba      	cmp	r2, r7
 800e908:	bfa8      	it	ge
 800e90a:	463a      	movge	r2, r7
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 800e90c:	4283      	cmp	r3, r0
 800e90e:	bfb8      	it	lt
 800e910:	4603      	movlt	r3, r0
    res->y1 = LV_MIN4(lb.y, lt.y, rb.y, rt.y);
 800e912:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(lb.y, lt.y, rb.y, rt.y);
 800e914:	4299      	cmp	r1, r3
 800e916:	bfb8      	it	lt
 800e918:	4619      	movlt	r1, r3
 800e91a:	428f      	cmp	r7, r1
 800e91c:	bfb8      	it	lt
 800e91e:	460f      	movlt	r7, r1
 800e920:	80e7      	strh	r7, [r4, #6]
 800e922:	e733      	b.n	800e78c <_lv_img_buf_get_transformed_area+0x20>

0800e924 <_lv_img_buf_transform_anti_alias>:
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(_lv_img_transform_dsc_t * dsc)
{
    const uint8_t * src_u8 = dsc->cfg.src;
 800e924:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800e928:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
    int xs_fract = dsc->tmp.xs & 0xff;
    int ys_fract = dsc->tmp.ys & 0xff;
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
 800e92c:	2a6f      	cmp	r2, #111	; 0x6f
{
 800e92e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e932:	4604      	mov	r4, r0
 800e934:	b089      	sub	sp, #36	; 0x24
    const uint8_t * src_u8 = dsc->cfg.src;
 800e936:	f8d0 a000 	ldr.w	sl, [r0]
    int xs_fract = dsc->tmp.xs & 0xff;
 800e93a:	f9b0 503c 	ldrsh.w	r5, [r0, #60]	; 0x3c
    int ys_fract = dsc->tmp.ys & 0xff;
 800e93e:	f9b0 703e 	ldrsh.w	r7, [r0, #62]	; 0x3e
    if(xs_fract < 0x70) {
 800e942:	f200 8093 	bhi.w	800ea6c <_lv_img_buf_transform_anti_alias+0x148>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800e946:	f9b0 6040 	ldrsh.w	r6, [r0, #64]	; 0x40
        xr = xs_fract + 0x80;
 800e94a:	3d80      	subs	r5, #128	; 0x80
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
 800e94c:	2e00      	cmp	r6, #0
 800e94e:	bfd4      	ite	le
 800e950:	2600      	movle	r6, #0
 800e952:	2601      	movgt	r6, #1
 800e954:	4276      	negs	r6, r6
    }
    else if(xs_fract > 0x90) {
        xn =  1;
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
        xr = (0xFF - xs_fract) + 0x80;
 800e956:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
 800e958:	2b6f      	cmp	r3, #111	; 0x6f
 800e95a:	f200 8098 	bhi.w	800ea8e <_lv_img_buf_transform_anti_alias+0x16a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800e95e:	f9b4 8042 	ldrsh.w	r8, [r4, #66]	; 0x42

        yr = ys_fract + 0x80;
 800e962:	3f80      	subs	r7, #128	; 0x80
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
 800e964:	f1b8 0f00 	cmp.w	r8, #0
 800e968:	bfd4      	ite	le
 800e96a:	f04f 0800 	movle.w	r8, #0
 800e96e:	f04f 0801 	movgt.w	r8, #1
 800e972:	f1c8 0800 	rsb	r8, r8, #0
    }
    else if(ys_fract > 0x90) {
        yn =  1;
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;

        yr = (0xFF - ys_fract) + 0x80;
 800e976:	b2ff      	uxtb	r7, r7
    lv_color_t c00 = dsc->res.color;
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
 800e978:	7da3      	ldrb	r3, [r4, #22]
    lv_color_t c00 = dsc->res.color;
 800e97a:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_opa_t a00 = dsc->res.opa;
 800e97e:	9301      	str	r3, [sp, #4]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
 800e980:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e984:	075b      	lsls	r3, r3, #29
 800e986:	f140 80ad 	bpl.w	800eae4 <_lv_img_buf_transform_anti_alias+0x1c0>
        lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
 800e98a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e98c:	2202      	movs	r2, #2
 800e98e:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e992:	a805      	add	r0, sp, #20
 800e994:	fb06 3101 	mla	r1, r6, r1, r3
 800e998:	4451      	add	r1, sl
 800e99a:	f7ff fd70 	bl	800e47e <lv_memcpy_small>
        lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
 800e99e:	88a3      	ldrh	r3, [r4, #4]
 800e9a0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800e9a4:	2202      	movs	r2, #2
 800e9a6:	a806      	add	r0, sp, #24
 800e9a8:	fb11 f103 	smulbb	r1, r1, r3
 800e9ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9ae:	fb08 3101 	mla	r1, r8, r1, r3
 800e9b2:	4451      	add	r1, sl
 800e9b4:	f7ff fd63 	bl	800e47e <lv_memcpy_small>
        lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
 800e9b8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800e9bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e9be:	a807      	add	r0, sp, #28
 800e9c0:	88a1      	ldrh	r1, [r4, #4]
 800e9c2:	fb11 f103 	smulbb	r1, r1, r3
 800e9c6:	fb06 2303 	mla	r3, r6, r3, r2
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	fb08 3101 	mla	r1, r8, r1, r3
 800e9d0:	4451      	add	r1, sl
 800e9d2:	f7ff fd54 	bl	800e47e <lv_memcpy_small>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
 800e9d6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800e9da:	0798      	lsls	r0, r3, #30
 800e9dc:	d46c      	bmi.n	800eab8 <_lv_img_buf_transform_anti_alias+0x194>
    lv_opa_t a11 = 0;
 800e9de:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
 800e9e0:	4680      	mov	r8, r0
    lv_opa_t a10 = 0;
 800e9e2:	4603      	mov	r3, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
 800e9e4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800e9e8:	0792      	lsls	r2, r2, #30
 800e9ea:	f140 80cf 	bpl.w	800eb8c <_lv_img_buf_transform_anti_alias+0x268>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800e9ee:	9901      	ldr	r1, [sp, #4]
 800e9f0:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
 800e9f4:	fb11 f605 	smulbb	r6, r1, r5
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800e9f8:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
 800e9fc:	fb02 6603 	mla	r6, r2, r3, r6
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800ea00:	4342      	muls	r2, r0
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800ea02:	f3c6 2607 	ubfx	r6, r6, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800ea06:	fb15 2208 	smlabb	r2, r5, r8, r2
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800ea0a:	fb07 fc06 	mul.w	ip, r7, r6

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800ea0e:	2e02      	cmp	r6, #2
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
 800ea10:	f3c2 2207 	ubfx	r2, r2, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
 800ea14:	fb02 c101 	mla	r1, r2, r1, ip
 800ea18:	ea4f 2121 	mov.w	r1, r1, asr #8
 800ea1c:	75a1      	strb	r1, [r4, #22]
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800ea1e:	f200 80b1 	bhi.w	800eb84 <_lv_img_buf_transform_anti_alias+0x260>
 800ea22:	2a02      	cmp	r2, #2
 800ea24:	f240 80d9 	bls.w	800ebda <_lv_img_buf_transform_anti_alias+0x2b6>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
 800ea28:	2700      	movs	r7, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
 800ea2a:	9a01      	ldr	r2, [sp, #4]
 800ea2c:	2a02      	cmp	r2, #2
 800ea2e:	bf94      	ite	ls
 800ea30:	2200      	movls	r2, #0
 800ea32:	462a      	movhi	r2, r5
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	bf98      	it	ls
 800ea38:	22ff      	movls	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
 800ea3a:	f1b8 0f02 	cmp.w	r8, #2
 800ea3e:	bf98      	it	ls
 800ea40:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
 800ea42:	2802      	cmp	r0, #2
 800ea44:	bf98      	it	ls
 800ea46:	25ff      	movls	r5, #255	; 0xff
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
 800ea48:	2a00      	cmp	r2, #0
 800ea4a:	f040 80a3 	bne.w	800eb94 <_lv_img_buf_transform_anti_alias+0x270>
 800ea4e:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	f040 80a8 	bne.w	800eba8 <_lv_img_buf_transform_anti_alias+0x284>
 800ea58:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
 800ea5c:	2f00      	cmp	r7, #0
 800ea5e:	f040 80b1 	bne.w	800ebc4 <_lv_img_buf_transform_anti_alias+0x2a0>
 800ea62:	82a1      	strh	r1, [r4, #20]
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    else dsc->res.color = lv_color_mix(c0, c1, yr);

    return true;
 800ea64:	2001      	movs	r0, #1
}
 800ea66:	b009      	add	sp, #36	; 0x24
 800ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(xs_fract > 0x90) {
 800ea6c:	2a90      	cmp	r2, #144	; 0x90
 800ea6e:	d90b      	bls.n	800ea88 <_lv_img_buf_transform_anti_alias+0x164>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800ea70:	f9b0 6040 	ldrsh.w	r6, [r0, #64]	; 0x40
        xr = (0xFF - xs_fract) + 0x80;
 800ea74:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
 800ea78:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800ea7c:	3601      	adds	r6, #1
 800ea7e:	428e      	cmp	r6, r1
 800ea80:	bfac      	ite	ge
 800ea82:	2600      	movge	r6, #0
 800ea84:	2601      	movlt	r6, #1
        xr = (0xFF - xs_fract) + 0x80;
 800ea86:	e766      	b.n	800e956 <_lv_img_buf_transform_anti_alias+0x32>
        xr = 0xFF;
 800ea88:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
 800ea8a:	2600      	movs	r6, #0
 800ea8c:	e764      	b.n	800e958 <_lv_img_buf_transform_anti_alias+0x34>
    else if(ys_fract > 0x90) {
 800ea8e:	2b90      	cmp	r3, #144	; 0x90
 800ea90:	d90e      	bls.n	800eab0 <_lv_img_buf_transform_anti_alias+0x18c>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800ea92:	f9b4 8042 	ldrsh.w	r8, [r4, #66]	; 0x42
        yr = (0xFF - ys_fract) + 0x80;
 800ea96:	f1c7 077f 	rsb	r7, r7, #127	; 0x7f
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
 800ea9a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ea9e:	f108 0801 	add.w	r8, r8, #1
 800eaa2:	4590      	cmp	r8, r2
 800eaa4:	bfac      	ite	ge
 800eaa6:	f04f 0800 	movge.w	r8, #0
 800eaaa:	f04f 0801 	movlt.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
 800eaae:	e762      	b.n	800e976 <_lv_img_buf_transform_anti_alias+0x52>
        yr = 0xFF;
 800eab0:	27ff      	movs	r7, #255	; 0xff
        yn = 0;
 800eab2:	f04f 0800 	mov.w	r8, #0
 800eab6:	e75f      	b.n	800e978 <_lv_img_buf_transform_anti_alias+0x54>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800eab8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800eaba:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 800eabe:	3801      	subs	r0, #1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800eac0:	88a2      	ldrh	r2, [r4, #4]
 800eac2:	fb12 f201 	smulbb	r2, r2, r1
 800eac6:	4408      	add	r0, r1
 800eac8:	fb08 f202 	mul.w	r2, r8, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800eacc:	fb06 0601 	mla	r6, r6, r1, r0
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800ead0:	eb0a 0102 	add.w	r1, sl, r2
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800ead4:	f81a 3006 	ldrb.w	r3, [sl, r6]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800ead8:	44b2      	add	sl, r6
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
 800eada:	f811 8000 	ldrb.w	r8, [r1, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
 800eade:	f81a 0002 	ldrb.w	r0, [sl, r2]
 800eae2:	e77f      	b.n	800e9e4 <_lv_img_buf_transform_anti_alias+0xc0>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800eae4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800eae8:	f104 0b18 	add.w	fp, r4, #24
 800eaec:	8a23      	ldrh	r3, [r4, #16]
 800eaee:	fa1f fa86 	uxth.w	sl, r6
 800eaf2:	fa11 f186 	uxtah	r1, r1, r6
 800eaf6:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800eafa:	4658      	mov	r0, fp
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eafc:	fa1f f688 	uxth.w	r6, r8
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800eb00:	b209      	sxth	r1, r1
 800eb02:	f7ff fcc8 	bl	800e496 <lv_img_buf_get_px_color>
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eb06:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800eb0a:	8a23      	ldrh	r3, [r4, #16]
 800eb0c:	fa12 f288 	uxtah	r2, r2, r8
 800eb10:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
 800eb14:	f8ad 0014 	strh.w	r0, [sp, #20]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eb18:	4658      	mov	r0, fp
 800eb1a:	b212      	sxth	r2, r2
 800eb1c:	f7ff fcbb 	bl	800e496 <lv_img_buf_get_px_color>
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eb20:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800eb24:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800eb28:	4432      	add	r2, r6
 800eb2a:	8a23      	ldrh	r3, [r4, #16]
 800eb2c:	4451      	add	r1, sl
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eb2e:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eb32:	b212      	sxth	r2, r2
 800eb34:	4658      	mov	r0, fp
 800eb36:	b209      	sxth	r1, r1
 800eb38:	f7ff fcad 	bl	800e496 <lv_img_buf_get_px_color>
        if(dsc->tmp.has_alpha) {
 800eb3c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
 800eb40:	f8ad 001c 	strh.w	r0, [sp, #28]
        if(dsc->tmp.has_alpha) {
 800eb44:	0799      	lsls	r1, r3, #30
 800eb46:	f57f af4a 	bpl.w	800e9de <_lv_img_buf_transform_anti_alias+0xba>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800eb4a:	f9b4 8040 	ldrsh.w	r8, [r4, #64]	; 0x40
 800eb4e:	4658      	mov	r0, fp
 800eb50:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800eb54:	44c2      	add	sl, r8
 800eb56:	9202      	str	r2, [sp, #8]
 800eb58:	fa0f fa8a 	sxth.w	sl, sl
 800eb5c:	4651      	mov	r1, sl
 800eb5e:	f7ff fd13 	bl	800e588 <lv_img_buf_get_px_alpha>
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800eb62:	9a02      	ldr	r2, [sp, #8]
 800eb64:	4641      	mov	r1, r8
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
 800eb66:	9003      	str	r0, [sp, #12]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800eb68:	4432      	add	r2, r6
 800eb6a:	4658      	mov	r0, fp
 800eb6c:	b212      	sxth	r2, r2
 800eb6e:	9202      	str	r2, [sp, #8]
 800eb70:	f7ff fd0a 	bl	800e588 <lv_img_buf_get_px_alpha>
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800eb74:	9a02      	ldr	r2, [sp, #8]
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
 800eb76:	4680      	mov	r8, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
 800eb78:	4651      	mov	r1, sl
 800eb7a:	4658      	mov	r0, fp
 800eb7c:	f7ff fd04 	bl	800e588 <lv_img_buf_get_px_alpha>
 800eb80:	9b03      	ldr	r3, [sp, #12]
 800eb82:	e72f      	b.n	800e9e4 <_lv_img_buf_transform_anti_alias+0xc0>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
 800eb84:	2a02      	cmp	r2, #2
 800eb86:	bf98      	it	ls
 800eb88:	27ff      	movls	r7, #255	; 0xff
 800eb8a:	e74e      	b.n	800ea2a <_lv_img_buf_transform_anti_alias+0x106>
        dsc->res.opa = LV_OPA_COVER;
 800eb8c:	23ff      	movs	r3, #255	; 0xff
        xr0 = xr;
 800eb8e:	462a      	mov	r2, r5
        dsc->res.opa = LV_OPA_COVER;
 800eb90:	75a3      	strb	r3, [r4, #22]
 800eb92:	e759      	b.n	800ea48 <_lv_img_buf_transform_anti_alias+0x124>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
 800eb94:	2aff      	cmp	r2, #255	; 0xff
 800eb96:	f43f af5c 	beq.w	800ea52 <_lv_img_buf_transform_anti_alias+0x12e>
    else c0 = lv_color_mix(c00, c01, xr0);
 800eb9a:	4648      	mov	r0, r9
 800eb9c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800eba0:	f7ff fc43 	bl	800e42a <lv_color_mix>
 800eba4:	4681      	mov	r9, r0
 800eba6:	e754      	b.n	800ea52 <_lv_img_buf_transform_anti_alias+0x12e>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
 800eba8:	2dff      	cmp	r5, #255	; 0xff
 800ebaa:	d102      	bne.n	800ebb2 <_lv_img_buf_transform_anti_alias+0x28e>
 800ebac:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800ebb0:	e754      	b.n	800ea5c <_lv_img_buf_transform_anti_alias+0x138>
    else c1 = lv_color_mix(c10, c11, xr1);
 800ebb2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800ebb6:	462a      	mov	r2, r5
 800ebb8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ebbc:	f7ff fc35 	bl	800e42a <lv_color_mix>
 800ebc0:	4601      	mov	r1, r0
 800ebc2:	e74b      	b.n	800ea5c <_lv_img_buf_transform_anti_alias+0x138>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
 800ebc4:	2fff      	cmp	r7, #255	; 0xff
 800ebc6:	d102      	bne.n	800ebce <_lv_img_buf_transform_anti_alias+0x2aa>
 800ebc8:	f8a4 9014 	strh.w	r9, [r4, #20]
 800ebcc:	e74a      	b.n	800ea64 <_lv_img_buf_transform_anti_alias+0x140>
    else dsc->res.color = lv_color_mix(c0, c1, yr);
 800ebce:	463a      	mov	r2, r7
 800ebd0:	4648      	mov	r0, r9
 800ebd2:	f7ff fc2a 	bl	800e42a <lv_color_mix>
 800ebd6:	82a0      	strh	r0, [r4, #20]
 800ebd8:	e744      	b.n	800ea64 <_lv_img_buf_transform_anti_alias+0x140>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
 800ebda:	2000      	movs	r0, #0
 800ebdc:	e743      	b.n	800ea66 <_lv_img_buf_transform_anti_alias+0x142>

0800ebde <_lv_img_buf_transform>:
{
 800ebde:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe2:	4604      	mov	r4, r0
    int32_t xt = x - dsc->cfg.pivot_x;
 800ebe4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    int32_t yt = y - dsc->cfg.pivot_y;
 800ebe8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    int32_t xt = x - dsc->cfg.pivot_x;
 800ebec:	1a09      	subs	r1, r1, r0
    int32_t yt = y - dsc->cfg.pivot_y;
 800ebee:	1ad2      	subs	r2, r2, r3
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
 800ebf0:	89e3      	ldrh	r3, [r4, #14]
 800ebf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebf6:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
 800ebfa:	d117      	bne.n	800ec2c <_lv_img_buf_transform+0x4e>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800ebfc:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
 800ec00:	fb01 f703 	mul.w	r7, r1, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800ec04:	4353      	muls	r3, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800ec06:	fb02 7710 	mls	r7, r2, r0, r7
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800ec0a:	fb01 3200 	mla	r2, r1, r0, r3
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
 800ec0e:	eb05 05a7 	add.w	r5, r5, r7, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
 800ec12:	eb06 06a2 	add.w	r6, r6, r2, asr #2
    if(xs_int >= dsc->cfg.src_w) return false;
 800ec16:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    int32_t xs_int = xs >> 8;
 800ec1a:	ea4f 2925 	mov.w	r9, r5, asr #8
    if(xs_int >= dsc->cfg.src_w) return false;
 800ec1e:	ebb3 2f25 	cmp.w	r3, r5, asr #8
 800ec22:	dc1c      	bgt.n	800ec5e <_lv_img_buf_transform+0x80>
 800ec24:	2000      	movs	r0, #0
}
 800ec26:	b002      	add	sp, #8
 800ec28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(dsc->cfg.angle == 0) {
 800ec2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec2e:	4359      	muls	r1, r3
 800ec30:	4353      	muls	r3, r2
 800ec32:	1149      	asrs	r1, r1, #5
 800ec34:	115a      	asrs	r2, r3, #5
 800ec36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec3a:	b913      	cbnz	r3, 800ec42 <_lv_img_buf_transform+0x64>
        xs = xt + dsc->tmp.pivot_x_256;
 800ec3c:	440d      	add	r5, r1
        ys = yt + dsc->tmp.pivot_y_256;
 800ec3e:	4416      	add	r6, r2
 800ec40:	e7e9      	b.n	800ec16 <_lv_img_buf_transform+0x38>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800ec42:	e9d4 070b 	ldrd	r0, r7, [r4, #44]	; 0x2c
 800ec46:	fb01 f307 	mul.w	r3, r1, r7
 800ec4a:	fb02 3310 	mls	r3, r2, r0, r3
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800ec4e:	437a      	muls	r2, r7
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
 800ec50:	eb05 25a3 	add.w	r5, r5, r3, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
 800ec54:	fb01 2000 	mla	r0, r1, r0, r2
 800ec58:	eb06 26a0 	add.w	r6, r6, r0, asr #10
 800ec5c:	e7db      	b.n	800ec16 <_lv_img_buf_transform+0x38>
    else if(xs_int < 0) return false;
 800ec5e:	f1b9 0f00 	cmp.w	r9, #0
 800ec62:	dbdf      	blt.n	800ec24 <_lv_img_buf_transform+0x46>
    if(ys_int >= dsc->cfg.src_h) return false;
 800ec64:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    int32_t ys_int = ys >> 8;
 800ec68:	ea4f 2826 	mov.w	r8, r6, asr #8
    if(ys_int >= dsc->cfg.src_h) return false;
 800ec6c:	ebb2 2f26 	cmp.w	r2, r6, asr #8
 800ec70:	ddd8      	ble.n	800ec24 <_lv_img_buf_transform+0x46>
    else if(ys_int < 0) return false;
 800ec72:	f1b8 0f00 	cmp.w	r8, #0
 800ec76:	dbd5      	blt.n	800ec24 <_lv_img_buf_transform+0x46>
    if(dsc->tmp.native_color) {
 800ec78:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800ec7c:	f012 0704 	ands.w	r7, r2, #4
 800ec80:	d021      	beq.n	800ecc6 <_lv_img_buf_transform+0xe8>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800ec82:	4620      	mov	r0, r4
 800ec84:	fb08 9303 	mla	r3, r8, r3, r9
        if(dsc->tmp.has_alpha == 0) {
 800ec88:	f012 0f02 	tst.w	r2, #2
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
 800ec8c:	f850 1b14 	ldr.w	r1, [r0], #20
        if(dsc->tmp.has_alpha == 0) {
 800ec90:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800ec94:	d10c      	bne.n	800ecb0 <_lv_img_buf_transform+0xd2>
            px_size = LV_COLOR_SIZE >> 3;
 800ec96:	2702      	movs	r7, #2
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
 800ec98:	2202      	movs	r2, #2
 800ec9a:	4451      	add	r1, sl
 800ec9c:	f7ff fbef 	bl	800e47e <lv_memcpy_small>
    if(dsc->tmp.chroma_keyed) {
 800eca0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800eca4:	07db      	lsls	r3, r3, #31
 800eca6:	d423      	bmi.n	800ecf0 <_lv_img_buf_transform+0x112>
    if(dsc->cfg.antialias == false) return true;
 800eca8:	7ce3      	ldrb	r3, [r4, #19]
 800ecaa:	bb33      	cbnz	r3, 800ecfa <_lv_img_buf_transform+0x11c>
 800ecac:	2001      	movs	r0, #1
 800ecae:	e7ba      	b.n	800ec26 <_lv_img_buf_transform+0x48>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
 800ecb0:	449a      	add	sl, r3
            lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
 800ecb2:	2202      	movs	r2, #2
 800ecb4:	eb01 070a 	add.w	r7, r1, sl
 800ecb8:	4639      	mov	r1, r7
 800ecba:	f7ff fbe0 	bl	800e47e <lv_memcpy_small>
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800ecbe:	78bb      	ldrb	r3, [r7, #2]
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800ecc0:	2703      	movs	r7, #3
            dsc->res.opa = src_u8[pxi + px_size - 1];
 800ecc2:	75a3      	strb	r3, [r4, #22]
 800ecc4:	e7ec      	b.n	800eca0 <_lv_img_buf_transform+0xc2>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
 800ecc6:	f104 0a18 	add.w	sl, r4, #24
 800ecca:	fa0f f189 	sxth.w	r1, r9
 800ecce:	fa0f f288 	sxth.w	r2, r8
 800ecd2:	8a23      	ldrh	r3, [r4, #16]
 800ecd4:	4650      	mov	r0, sl
 800ecd6:	e9cd 1200 	strd	r1, r2, [sp]
 800ecda:	f7ff fbdc 	bl	800e496 <lv_img_buf_get_px_color>
 800ecde:	82a0      	strh	r0, [r4, #20]
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800ece0:	4650      	mov	r0, sl
        pxi = 0; /*unused*/
 800ece2:	46ba      	mov	sl, r7
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
 800ece4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ece8:	f7ff fc4e 	bl	800e588 <lv_img_buf_get_px_alpha>
 800ecec:	75a0      	strb	r0, [r4, #22]
 800ecee:	e7d7      	b.n	800eca0 <_lv_img_buf_transform+0xc2>
        if(dsc->res.color.full == ct.full) return false;
 800ecf0:	8aa3      	ldrh	r3, [r4, #20]
 800ecf2:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 800ecf6:	d1d7      	bne.n	800eca8 <_lv_img_buf_transform+0xca>
 800ecf8:	e794      	b.n	800ec24 <_lv_img_buf_transform+0x46>
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800ecfa:	4620      	mov	r0, r4
    dsc->tmp.xs = xs;
 800ecfc:	87a5      	strh	r5, [r4, #60]	; 0x3c
    dsc->tmp.ys = ys;
 800ecfe:	87e6      	strh	r6, [r4, #62]	; 0x3e
    dsc->tmp.xs_int = xs_int;
 800ed00:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
    dsc->tmp.ys_int = ys_int;
 800ed04:	f8a4 8042 	strh.w	r8, [r4, #66]	; 0x42
    dsc->tmp.pxi = pxi;
 800ed08:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    dsc->tmp.px_size = px_size;
 800ed0c:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
}
 800ed10:	b002      	add	sp, #8
 800ed12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ret = _lv_img_buf_transform_anti_alias(dsc);
 800ed16:	f7ff be05 	b.w	800e924 <_lv_img_buf_transform_anti_alias>
	...

0800ed1c <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800ed1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed1e:	4605      	mov	r5, r0
 800ed20:	460f      	mov	r7, r1
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ed22:	4c13      	ldr	r4, [pc, #76]	; (800ed70 <_lv_img_cache_open+0x54>)
{
 800ed24:	9201      	str	r2, [sp, #4]
    uint32_t t_start  = lv_tick_get();
 800ed26:	f007 ff63 	bl	8016bf0 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ed2a:	4629      	mov	r1, r5
    uint32_t t_start  = lv_tick_get();
 800ed2c:	4606      	mov	r6, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ed2e:	9b01      	ldr	r3, [sp, #4]
 800ed30:	463a      	mov	r2, r7
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 fb06 	bl	800f344 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800ed38:	4605      	mov	r5, r0
 800ed3a:	b948      	cbnz	r0, 800ed50 <_lv_img_cache_open+0x34>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	212c      	movs	r1, #44	; 0x2c
 800ed40:	f008 ffe8 	bl	8017d14 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800ed44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        return NULL;
 800ed48:	4628      	mov	r0, r5
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800ed4a:	62a3      	str	r3, [r4, #40]	; 0x28
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
 800ed4c:	b003      	add	sp, #12
 800ed4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cached_src->life = 0;
 800ed50:	2300      	movs	r3, #0
 800ed52:	62a3      	str	r3, [r4, #40]	; 0x28
    if(cached_src->dec_dsc.time_to_open == 0) {
 800ed54:	69e3      	ldr	r3, [r4, #28]
 800ed56:	b10b      	cbz	r3, 800ed5c <_lv_img_cache_open+0x40>
    return cached_src;
 800ed58:	4805      	ldr	r0, [pc, #20]	; (800ed70 <_lv_img_cache_open+0x54>)
 800ed5a:	e7f7      	b.n	800ed4c <_lv_img_cache_open+0x30>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f007 ff55 	bl	8016c0c <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ed62:	b108      	cbz	r0, 800ed68 <_lv_img_cache_open+0x4c>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ed64:	61e0      	str	r0, [r4, #28]
 800ed66:	e7f7      	b.n	800ed58 <_lv_img_cache_open+0x3c>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ed68:	2301      	movs	r3, #1
    return cached_src;
 800ed6a:	4620      	mov	r0, r4
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ed6c:	61e3      	str	r3, [r4, #28]
 800ed6e:	e7ed      	b.n	800ed4c <_lv_img_cache_open+0x30>
 800ed70:	2000ae20 	.word	0x2000ae20

0800ed74 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800ed74:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ed76:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 800ed78:	460c      	mov	r4, r1
    if(user_data) {
 800ed7a:	b195      	cbz	r5, 800eda2 <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ed7c:	7c0b      	ldrb	r3, [r1, #16]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d102      	bne.n	800ed88 <lv_img_decoder_built_in_close+0x14>
            lv_fs_close(&user_data->f);
 800ed82:	4628      	mov	r0, r5
 800ed84:	f008 fbae 	bl	80174e4 <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800ed88:	68a8      	ldr	r0, [r5, #8]
 800ed8a:	b108      	cbz	r0, 800ed90 <lv_img_decoder_built_in_close+0x1c>
 800ed8c:	f008 fdc2 	bl	8017914 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800ed90:	68e8      	ldr	r0, [r5, #12]
 800ed92:	b108      	cbz	r0, 800ed98 <lv_img_decoder_built_in_close+0x24>
 800ed94:	f008 fdbe 	bl	8017914 <lv_mem_free>

        lv_mem_free(user_data);
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f008 fdbb 	bl	8017914 <lv_mem_free>
        dsc->user_data = NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800eda2:	bd38      	pop	{r3, r4, r5, pc}

0800eda4 <lv_img_decoder_built_in_info>:
{
 800eda4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800eda6:	4608      	mov	r0, r1
{
 800eda8:	460e      	mov	r6, r1
 800edaa:	4615      	mov	r5, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800edac:	f7fb fc46 	bl	800a63c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800edb0:	4604      	mov	r4, r0
 800edb2:	b9d8      	cbnz	r0, 800edec <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800edb4:	7833      	ldrb	r3, [r6, #0]
 800edb6:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800edba:	3b04      	subs	r3, #4
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b0a      	cmp	r3, #10
 800edc0:	d811      	bhi.n	800ede6 <lv_img_decoder_built_in_info+0x42>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800edc2:	8873      	ldrh	r3, [r6, #2]
 800edc4:	886a      	ldrh	r2, [r5, #2]
 800edc6:	f3c3 134a 	ubfx	r3, r3, #5, #11
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800edca:	6831      	ldr	r1, [r6, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800edcc:	f363 124f 	bfi	r2, r3, #5, #11
 800edd0:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800edd2:	682b      	ldr	r3, [r5, #0]
 800edd4:	4a1b      	ldr	r2, [pc, #108]	; (800ee44 <lv_img_decoder_built_in_info+0xa0>)
 800edd6:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
 800edda:	400a      	ands	r2, r1
 800eddc:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ede0:	4313      	orrs	r3, r2
    return LV_RES_OK;
 800ede2:	2401      	movs	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ede4:	602b      	str	r3, [r5, #0]
}
 800ede6:	4620      	mov	r0, r4
 800ede8:	b004      	add	sp, #16
 800edea:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800edec:	2801      	cmp	r0, #1
 800edee:	d122      	bne.n	800ee36 <lv_img_decoder_built_in_info+0x92>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800edf0:	4630      	mov	r0, r6
 800edf2:	f008 fbf3 	bl	80175dc <lv_fs_get_ext>
 800edf6:	4914      	ldr	r1, [pc, #80]	; (800ee48 <lv_img_decoder_built_in_info+0xa4>)
 800edf8:	f7f1 fa0a 	bl	8000210 <strcmp>
 800edfc:	b9c8      	cbnz	r0, 800ee32 <lv_img_decoder_built_in_info+0x8e>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800edfe:	2202      	movs	r2, #2
 800ee00:	4631      	mov	r1, r6
 800ee02:	a802      	add	r0, sp, #8
 800ee04:	f008 fbc0 	bl	8017588 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800ee08:	b968      	cbnz	r0, 800ee26 <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800ee0a:	ab01      	add	r3, sp, #4
 800ee0c:	2204      	movs	r2, #4
 800ee0e:	4629      	mov	r1, r5
 800ee10:	a802      	add	r0, sp, #8
 800ee12:	f008 fb77 	bl	8017504 <lv_fs_read>
 800ee16:	4606      	mov	r6, r0
            lv_fs_close(&f);
 800ee18:	a802      	add	r0, sp, #8
 800ee1a:	f008 fb63 	bl	80174e4 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800ee1e:	b946      	cbnz	r6, 800ee32 <lv_img_decoder_built_in_info+0x8e>
 800ee20:	9b01      	ldr	r3, [sp, #4]
 800ee22:	2b04      	cmp	r3, #4
 800ee24:	d105      	bne.n	800ee32 <lv_img_decoder_built_in_info+0x8e>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ee26:	782b      	ldrb	r3, [r5, #0]
 800ee28:	331c      	adds	r3, #28
 800ee2a:	f003 031f 	and.w	r3, r3, #31
 800ee2e:	2b0a      	cmp	r3, #10
 800ee30:	d9d9      	bls.n	800ede6 <lv_img_decoder_built_in_info+0x42>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800ee32:	2400      	movs	r4, #0
 800ee34:	e7d7      	b.n	800ede6 <lv_img_decoder_built_in_info+0x42>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800ee36:	2802      	cmp	r0, #2
 800ee38:	d1fb      	bne.n	800ee32 <lv_img_decoder_built_in_info+0x8e>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800ee3a:	682b      	ldr	r3, [r5, #0]
 800ee3c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 800ee40:	4b02      	ldr	r3, [pc, #8]	; (800ee4c <lv_img_decoder_built_in_info+0xa8>)
 800ee42:	e7cd      	b.n	800ede0 <lv_img_decoder_built_in_info+0x3c>
 800ee44:	001ffc1f 	.word	0x001ffc1f
 800ee48:	08025a42 	.word	0x08025a42
 800ee4c:	0020040b 	.word	0x0020040b

0800ee50 <lv_img_decoder_built_in_read_line>:
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ee50:	7d08      	ldrb	r0, [r1, #20]
{
 800ee52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee56:	469b      	mov	fp, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ee58:	f000 031e 	and.w	r3, r0, #30
{
 800ee5c:	b08b      	sub	sp, #44	; 0x2c
 800ee5e:	460e      	mov	r6, r1
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ee60:	2b04      	cmp	r3, #4
{
 800ee62:	4614      	mov	r4, r2
 800ee64:	f9bd a050 	ldrsh.w	sl, [sp, #80]	; 0x50
 800ee68:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ee6c:	d003      	beq.n	800ee76 <lv_img_decoder_built_in_read_line+0x26>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ee6e:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800ee72:	2b06      	cmp	r3, #6
 800ee74:	d12d      	bne.n	800eed2 <lv_img_decoder_built_in_read_line+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ee76:	7c37      	ldrb	r7, [r6, #16]
 800ee78:	2f01      	cmp	r7, #1
 800ee7a:	d001      	beq.n	800ee80 <lv_img_decoder_built_in_read_line+0x30>
    uint32_t btr = len * (px_size >> 3);
    uint32_t br  = 0;
    res = lv_fs_read(&user_data->f, buf, btr, &br);
    if(res != LV_FS_RES_OK || btr != br) {
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800ee7c:	2700      	movs	r7, #0
 800ee7e:	e024      	b.n	800eeca <lv_img_decoder_built_in_read_line+0x7a>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ee80:	f000 001f 	and.w	r0, r0, #31
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ee84:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ee88:	f7fb fac8 	bl	800a41c <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800ee8c:	6971      	ldr	r1, [r6, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ee8e:	4605      	mov	r5, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800ee90:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800ee92:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800ee96:	fb1b 4101 	smlabb	r1, fp, r1, r4
 800ee9a:	4341      	muls	r1, r0
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800ee9c:	4648      	mov	r0, r9
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800ee9e:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800eea0:	3104      	adds	r1, #4
 800eea2:	f008 fb4a 	bl	801753a <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d1e8      	bne.n	800ee7c <lv_img_decoder_built_in_read_line+0x2c>
    uint32_t btr = len * (px_size >> 3);
 800eeaa:	f3c5 05c7 	ubfx	r5, r5, #3, #8
    uint32_t br  = 0;
 800eeae:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800eeb0:	ab06      	add	r3, sp, #24
 800eeb2:	4641      	mov	r1, r8
    uint32_t btr = len * (px_size >> 3);
 800eeb4:	fb15 fa0a 	smulbb	sl, r5, sl
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800eeb8:	4648      	mov	r0, r9
 800eeba:	4652      	mov	r2, sl
 800eebc:	f008 fb22 	bl	8017504 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800eec0:	2800      	cmp	r0, #0
 800eec2:	d1db      	bne.n	800ee7c <lv_img_decoder_built_in_read_line+0x2c>
 800eec4:	9b06      	ldr	r3, [sp, #24]
 800eec6:	459a      	cmp	sl, r3
 800eec8:	d1d8      	bne.n	800ee7c <lv_img_decoder_built_in_read_line+0x2c>
}
 800eeca:	4638      	mov	r0, r7
 800eecc:	b00b      	add	sp, #44	; 0x2c
 800eece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800eed2:	f1a3 020b 	sub.w	r2, r3, #11
 800eed6:	2a03      	cmp	r2, #3
 800eed8:	f200 80ba 	bhi.w	800f050 <lv_img_decoder_built_in_read_line+0x200>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800eedc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800eee0:	aa06      	add	r2, sp, #24
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800eee2:	f8ad 3010 	strh.w	r3, [sp, #16]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800eee6:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800eeea:	4691      	mov	r9, r2
 800eeec:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800eef0:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800eef2:	4ba4      	ldr	r3, [pc, #656]	; (800f184 <lv_img_decoder_built_in_read_line+0x334>)
 800eef4:	f103 0710 	add.w	r7, r3, #16
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	3308      	adds	r3, #8
 800eefc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ef00:	4615      	mov	r5, r2
 800ef02:	42bb      	cmp	r3, r7
 800ef04:	c503      	stmia	r5!, {r0, r1}
 800ef06:	462a      	mov	r2, r5
 800ef08:	d1f6      	bne.n	800eef8 <lv_img_decoder_built_in_read_line+0xa8>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800ef0a:	8931      	ldrh	r1, [r6, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800ef0c:	4643      	mov	r3, r8
 800ef0e:	2200      	movs	r2, #0
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800ef10:	0a0d      	lsrs	r5, r1, #8
    for(i = 0; i < len; i++) {
 800ef12:	b210      	sxth	r0, r2
 800ef14:	3303      	adds	r3, #3
 800ef16:	4582      	cmp	sl, r0
 800ef18:	dc14      	bgt.n	800ef44 <lv_img_decoder_built_in_read_line+0xf4>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800ef1a:	7d30      	ldrb	r0, [r6, #20]
 800ef1c:	f000 001f 	and.w	r0, r0, #31
 800ef20:	f7fb fa7c 	bl	800a41c <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ef24:	2301      	movs	r3, #1
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800ef26:	9001      	str	r0, [sp, #4]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800ef28:	4083      	lsls	r3, r0
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	9302      	str	r3, [sp, #8]

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800ef30:	7d33      	ldrb	r3, [r6, #20]
 800ef32:	f003 031f 	and.w	r3, r3, #31
 800ef36:	3b0b      	subs	r3, #11
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d85e      	bhi.n	800effa <lv_img_decoder_built_in_read_line+0x1aa>
 800ef3c:	e8df f003 	tbb	[pc, r3]
 800ef40:	54453508 	.word	0x54453508
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800ef44:	3201      	adds	r2, #1
 800ef46:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800ef4a:	f803 5c02 	strb.w	r5, [r3, #-2]
    for(i = 0; i < len; i++) {
 800ef4e:	e7e0      	b.n	800ef12 <lv_img_decoder_built_in_read_line+0xc2>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef50:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800ef52:	10e1      	asrs	r1, r4, #3
            pos = 7 - (x & 0x7);
 800ef54:	43e4      	mvns	r4, r4
            opa_table = alpha1_opa_table;
 800ef56:	f10d 0910 	add.w	r9, sp, #16
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef5a:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 800ef5e:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ef62:	3507      	adds	r5, #7
 800ef64:	10eb      	asrs	r3, r5, #3
 800ef66:	461d      	mov	r5, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 800ef68:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ef6c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ef6e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800ef72:	9103      	str	r1, [sp, #12]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800ef74:	f008 fe80 	bl	8017c78 <lv_mem_buf_get>
    if (fs_buf == NULL) return LV_RES_INV;
 800ef78:	4607      	mov	r7, r0
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d0a5      	beq.n	800eeca <lv_img_decoder_built_in_read_line+0x7a>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800ef7e:	7c33      	ldrb	r3, [r6, #16]
 800ef80:	9903      	ldr	r1, [sp, #12]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d13d      	bne.n	800f002 <lv_img_decoder_built_in_read_line+0x1b2>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800ef86:	6873      	ldr	r3, [r6, #4]
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800ef8c:	9a01      	ldr	r2, [sp, #4]
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800ef8e:	2300      	movs	r3, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800ef90:	f108 0802 	add.w	r8, r8, #2
            pos = 8 - px_size;
 800ef94:	f1c2 0008 	rsb	r0, r2, #8
 800ef98:	b240      	sxtb	r0, r0
    for(i = 0; i < len; i++) {
 800ef9a:	b21a      	sxth	r2, r3
 800ef9c:	4552      	cmp	r2, sl
 800ef9e:	db3d      	blt.n	800f01c <lv_img_decoder_built_in_read_line+0x1cc>
        if(pos < 0) {
            pos = 8 - px_size;
            data_tmp++;
        }
    }
    lv_mem_buf_release(fs_buf);
 800efa0:	4638      	mov	r0, r7
    return LV_RES_OK;
 800efa2:	2701      	movs	r7, #1
    lv_mem_buf_release(fs_buf);
 800efa4:	f008 fcc4 	bl	8017930 <lv_mem_buf_release>
    return LV_RES_OK;
 800efa8:	e78f      	b.n	800eeca <lv_img_decoder_built_in_read_line+0x7a>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efaa:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800efac:	10a1      	asrs	r1, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800efae:	43e4      	mvns	r4, r4
            opa_table = alpha2_opa_table;
 800efb0:	f10d 0914 	add.w	r9, sp, #20
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efb4:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 800efb8:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efbc:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 800efbe:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800efc0:	10ab      	asrs	r3, r5, #2
 800efc2:	461d      	mov	r5, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 800efc4:	fb03 110b 	mla	r1, r3, fp, r1
            break;
 800efc8:	e7d0      	b.n	800ef6c <lv_img_decoder_built_in_read_line+0x11c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efca:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800efcc:	1061      	asrs	r1, r4, #1
            pos = 4 - (x & 0x1) * 4;
 800efce:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efd2:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 800efd6:	bf0c      	ite	eq
 800efd8:	2404      	moveq	r4, #4
 800efda:	2400      	movne	r4, #0
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800efdc:	3501      	adds	r5, #1
 800efde:	106b      	asrs	r3, r5, #1
 800efe0:	461d      	mov	r5, r3
            ofs += w * y + (x >> 1); /*First pixel*/
 800efe2:	fb03 110b 	mla	r1, r3, fp, r1
            pos = 4 - (x & 0x1) * 4;
 800efe6:	e7c1      	b.n	800ef6c <lv_img_decoder_built_in_read_line+0x11c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800efe8:	6975      	ldr	r5, [r6, #20]
 800efea:	f3c5 218a 	ubfx	r1, r5, #10, #11
 800efee:	460d      	mov	r5, r1
            ofs += w * y + x;  /*First pixel*/
 800eff0:	fb1b 4101 	smlabb	r1, fp, r1, r4
            pos = 0;
 800eff4:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
 800eff6:	46a1      	mov	r9, r4
 800eff8:	e7b8      	b.n	800ef6c <lv_img_decoder_built_in_read_line+0x11c>
 800effa:	2400      	movs	r4, #0
 800effc:	4621      	mov	r1, r4
 800effe:	4625      	mov	r5, r4
 800f000:	e7f9      	b.n	800eff6 <lv_img_decoder_built_in_read_line+0x1a6>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800f002:	2200      	movs	r2, #0
 800f004:	3104      	adds	r1, #4
 800f006:	4658      	mov	r0, fp
 800f008:	f008 fa97 	bl	801753a <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800f00c:	4639      	mov	r1, r7
 800f00e:	2300      	movs	r3, #0
 800f010:	462a      	mov	r2, r5
 800f012:	4658      	mov	r0, fp
 800f014:	f008 fa76 	bl	8017504 <lv_fs_read>
 800f018:	4639      	mov	r1, r7
 800f01a:	e7b7      	b.n	800ef8c <lv_img_decoder_built_in_read_line+0x13c>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f01c:	780a      	ldrb	r2, [r1, #0]
 800f01e:	9d02      	ldr	r5, [sp, #8]
 800f020:	4122      	asrs	r2, r4
 800f022:	402a      	ands	r2, r5
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800f024:	7d35      	ldrb	r5, [r6, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800f026:	f005 051f 	and.w	r5, r5, #31
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f02a:	b2d2      	uxtb	r2, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800f02c:	2d0e      	cmp	r5, #14
 800f02e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800f032:	f103 0301 	add.w	r3, r3, #1
 800f036:	bf18      	it	ne
 800f038:	f819 2002 	ldrbne.w	r2, [r9, r2]
 800f03c:	f808 2005 	strb.w	r2, [r8, r5]
        pos -= px_size;
 800f040:	9a01      	ldr	r2, [sp, #4]
 800f042:	1aa4      	subs	r4, r4, r2
 800f044:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800f046:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800f048:	bfbc      	itt	lt
 800f04a:	4604      	movlt	r4, r0
            data_tmp++;
 800f04c:	3101      	addlt	r1, #1
    for(i = 0; i < len; i++) {
 800f04e:	e7a4      	b.n	800ef9a <lv_img_decoder_built_in_read_line+0x14a>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800f050:	3b07      	subs	r3, #7
 800f052:	2b03      	cmp	r3, #3
 800f054:	f63f af12 	bhi.w	800ee7c <lv_img_decoder_built_in_read_line+0x2c>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800f058:	f000 001f 	and.w	r0, r0, #31
 800f05c:	f7fb f9de 	bl	800a41c <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800f060:	2301      	movs	r3, #1
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800f062:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800f064:	4083      	lsls	r3, r0
 800f066:	3b01      	subs	r3, #1
 800f068:	b29b      	uxth	r3, r3
 800f06a:	9301      	str	r3, [sp, #4]
    switch(dsc->header.cf) {
 800f06c:	7d33      	ldrb	r3, [r6, #20]
 800f06e:	f003 031f 	and.w	r3, r3, #31
 800f072:	3b07      	subs	r3, #7
 800f074:	2b03      	cmp	r3, #3
 800f076:	d873      	bhi.n	800f160 <lv_img_decoder_built_in_read_line+0x310>
 800f078:	e8df f003 	tbb	[pc, r3]
 800f07c:	68574702 	.word	0x68574702
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800f080:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800f082:	10e3      	asrs	r3, r4, #3
            pos = 7 - (x & 0x7);
 800f084:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800f086:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 7 - (x & 0x7);
 800f08a:	f004 0407 	and.w	r4, r4, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800f08e:	3507      	adds	r5, #7
 800f090:	10e9      	asrs	r1, r5, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800f092:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800f096:	460d      	mov	r5, r1
            ofs += 8;                /*Skip the palette*/
 800f098:	f10b 0108 	add.w	r1, fp, #8
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800f09c:	4628      	mov	r0, r5
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f09e:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 800f0a2:	9102      	str	r1, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800f0a4:	f008 fde8 	bl	8017c78 <lv_mem_buf_get>
    if (fs_buf == NULL) return LV_RES_INV;
 800f0a8:	4607      	mov	r7, r0
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	f43f aee6 	beq.w	800ee7c <lv_img_decoder_built_in_read_line+0x2c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f0b0:	7c33      	ldrb	r3, [r6, #16]
 800f0b2:	9902      	ldr	r1, [sp, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d157      	bne.n	800f168 <lv_img_decoder_built_in_read_line+0x318>
        data_tmp                     = img_dsc->data + ofs;
 800f0b8:	6873      	ldr	r3, [r6, #4]
 800f0ba:	689b      	ldr	r3, [r3, #8]
 800f0bc:	4419      	add	r1, r3
            pos = 8 - px_size;
 800f0be:	f1c9 0508 	rsb	r5, r9, #8
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800f0c2:	2000      	movs	r0, #0
            pos = 8 - px_size;
 800f0c4:	b26d      	sxtb	r5, r5
    for(i = 0; i < len; i++) {
 800f0c6:	b203      	sxth	r3, r0
 800f0c8:	459a      	cmp	sl, r3
 800f0ca:	f77f af69 	ble.w	800efa0 <lv_img_decoder_built_in_read_line+0x150>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f0ce:	780b      	ldrb	r3, [r1, #0]
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	9a01      	ldr	r2, [sp, #4]
 800f0d4:	f108 0803 	add.w	r8, r8, #3
 800f0d8:	4123      	asrs	r3, r4
        pos -= px_size;
 800f0da:	eba4 0409 	sub.w	r4, r4, r9
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f0de:	4013      	ands	r3, r2
        lv_color_t color = user_data->palette[val_act];
 800f0e0:	f8db 2008 	ldr.w	r2, [fp, #8]
        pos -= px_size;
 800f0e4:	b264      	sxtb	r4, r4
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f0e6:	b2de      	uxtb	r6, r3
        if(pos < 0) {
 800f0e8:	2c00      	cmp	r4, #0
        lv_color_t color = user_data->palette[val_act];
 800f0ea:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
            pos = 8 - px_size;
 800f0ee:	bfbc      	itt	lt
 800f0f0:	462c      	movlt	r4, r5
            data_tmp++;
 800f0f2:	3101      	addlt	r1, #1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800f0f4:	f808 3c03 	strb.w	r3, [r8, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800f0f8:	0a1b      	lsrs	r3, r3, #8
 800f0fa:	f808 3c02 	strb.w	r3, [r8, #-2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800f0fe:	f8db 300c 	ldr.w	r3, [fp, #12]
 800f102:	5d9b      	ldrb	r3, [r3, r6]
 800f104:	f808 3c01 	strb.w	r3, [r8, #-1]
    for(i = 0; i < len; i++) {
 800f108:	e7dd      	b.n	800f0c6 <lv_img_decoder_built_in_read_line+0x276>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f10a:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800f10c:	10a3      	asrs	r3, r4, #2
            pos = 6 - (x & 0x3) * 2;
 800f10e:	43e4      	mvns	r4, r4
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f110:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 6 - (x & 0x3) * 2;
 800f114:	f004 0403 	and.w	r4, r4, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f118:	3503      	adds	r5, #3
            pos = 6 - (x & 0x3) * 2;
 800f11a:	0064      	lsls	r4, r4, #1
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f11c:	10a9      	asrs	r1, r5, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800f11e:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f122:	460d      	mov	r5, r1
            ofs += 16;               /*Skip the palette*/
 800f124:	f10b 0110 	add.w	r1, fp, #16
            break;
 800f128:	e7b8      	b.n	800f09c <lv_img_decoder_built_in_read_line+0x24c>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800f12a:	6975      	ldr	r5, [r6, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800f12c:	1063      	asrs	r3, r4, #1
            pos = 4 - (x & 0x1) * 4;
 800f12e:	f014 0f01 	tst.w	r4, #1
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800f132:	f3c5 258a 	ubfx	r5, r5, #10, #11
            pos = 4 - (x & 0x1) * 4;
 800f136:	bf0c      	ite	eq
 800f138:	2404      	moveq	r4, #4
 800f13a:	2400      	movne	r4, #0
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800f13c:	3501      	adds	r5, #1
 800f13e:	1069      	asrs	r1, r5, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800f140:	fb01 3b0b 	mla	fp, r1, fp, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800f144:	460d      	mov	r5, r1
            ofs += 64;               /*Skip the palette*/
 800f146:	f10b 0140 	add.w	r1, fp, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 800f14a:	e7a7      	b.n	800f09c <lv_img_decoder_built_in_read_line+0x24c>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800f14c:	6975      	ldr	r5, [r6, #20]
 800f14e:	f3c5 218a 	ubfx	r1, r5, #10, #11
            ofs += w * y + x;  /*First pixel*/
 800f152:	fb1b 4401 	smlabb	r4, fp, r1, r4
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800f156:	460d      	mov	r5, r1
            ofs += 1024;       /*Skip the palette*/
 800f158:	f504 6180 	add.w	r1, r4, #1024	; 0x400
            pos = 0;
 800f15c:	2400      	movs	r4, #0
            break;
 800f15e:	e79d      	b.n	800f09c <lv_img_decoder_built_in_read_line+0x24c>
    switch(dsc->header.cf) {
 800f160:	2100      	movs	r1, #0
 800f162:	460c      	mov	r4, r1
 800f164:	460d      	mov	r5, r1
 800f166:	e799      	b.n	800f09c <lv_img_decoder_built_in_read_line+0x24c>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800f168:	2200      	movs	r2, #0
 800f16a:	3104      	adds	r1, #4
 800f16c:	4658      	mov	r0, fp
 800f16e:	f008 f9e4 	bl	801753a <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800f172:	4639      	mov	r1, r7
 800f174:	2300      	movs	r3, #0
 800f176:	462a      	mov	r2, r5
 800f178:	4658      	mov	r0, fp
 800f17a:	f008 f9c3 	bl	8017504 <lv_fs_read>
 800f17e:	4639      	mov	r1, r7
 800f180:	e79d      	b.n	800f0be <lv_img_decoder_built_in_read_line+0x26e>
 800f182:	bf00      	nop
 800f184:	08025860 	.word	0x08025860

0800f188 <lv_img_decoder_built_in_open>:
{
 800f188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f18c:	7c0d      	ldrb	r5, [r1, #16]
{
 800f18e:	4680      	mov	r8, r0
 800f190:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f192:	2d01      	cmp	r5, #1
 800f194:	d12d      	bne.n	800f1f2 <lv_img_decoder_built_in_open+0x6a>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800f196:	6848      	ldr	r0, [r1, #4]
 800f198:	f008 fa20 	bl	80175dc <lv_fs_get_ext>
 800f19c:	4956      	ldr	r1, [pc, #344]	; (800f2f8 <lv_img_decoder_built_in_open+0x170>)
 800f19e:	f7f1 f837 	bl	8000210 <strcmp>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d15b      	bne.n	800f25e <lv_img_decoder_built_in_open+0xd6>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	6861      	ldr	r1, [r4, #4]
 800f1aa:	4668      	mov	r0, sp
 800f1ac:	f008 f9ec 	bl	8017588 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d154      	bne.n	800f25e <lv_img_decoder_built_in_open+0xd6>
        if(dsc->user_data == NULL) {
 800f1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1b6:	b943      	cbnz	r3, 800f1ca <lv_img_decoder_built_in_open+0x42>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800f1b8:	2010      	movs	r0, #16
 800f1ba:	f008 fd2d 	bl	8017c18 <lv_mem_alloc>
 800f1be:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800f1c0:	b900      	cbnz	r0, 800f1c4 <lv_img_decoder_built_in_open+0x3c>
 800f1c2:	e7fe      	b.n	800f1c2 <lv_img_decoder_built_in_open+0x3a>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800f1c4:	2110      	movs	r1, #16
 800f1c6:	f008 fda5 	bl	8017d14 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f1ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
    while(len) {
 800f1cc:	466b      	mov	r3, sp
 800f1ce:	f102 0108 	add.w	r1, r2, #8
        *d8 = *s8;
 800f1d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f1d6:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
 800f1da:	428a      	cmp	r2, r1
 800f1dc:	d1f9      	bne.n	800f1d2 <lv_img_decoder_built_in_open+0x4a>
    lv_img_cf_t cf = dsc->header.cf;
 800f1de:	7d23      	ldrb	r3, [r4, #20]
 800f1e0:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800f1e4:	1f03      	subs	r3, r0, #4
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	d811      	bhi.n	800f20e <lv_img_decoder_built_in_open+0x86>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f1ea:	7c23      	ldrb	r3, [r4, #16]
 800f1ec:	b15b      	cbz	r3, 800f206 <lv_img_decoder_built_in_open+0x7e>
            return LV_RES_OK;
 800f1ee:	2501      	movs	r5, #1
 800f1f0:	e005      	b.n	800f1fe <lv_img_decoder_built_in_open+0x76>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f1f2:	2d00      	cmp	r5, #0
 800f1f4:	d1f3      	bne.n	800f1de <lv_img_decoder_built_in_open+0x56>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800f1f6:	684b      	ldr	r3, [r1, #4]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1ef      	bne.n	800f1de <lv_img_decoder_built_in_open+0x56>
}
 800f1fe:	4628      	mov	r0, r5
 800f200:	b002      	add	sp, #8
 800f202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800f206:	6863      	ldr	r3, [r4, #4]
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	61a3      	str	r3, [r4, #24]
 800f20c:	e7ef      	b.n	800f1ee <lv_img_decoder_built_in_open+0x66>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800f20e:	1fc3      	subs	r3, r0, #7
 800f210:	2b03      	cmp	r3, #3
 800f212:	d86a      	bhi.n	800f2ea <lv_img_decoder_built_in_open+0x162>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800f214:	f7fb f902 	bl	800a41c <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 800f218:	6a63      	ldr	r3, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800f21a:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
 800f21c:	b943      	cbnz	r3, 800f230 <lv_img_decoder_built_in_open+0xa8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800f21e:	2010      	movs	r0, #16
 800f220:	f008 fcfa 	bl	8017c18 <lv_mem_alloc>
 800f224:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800f226:	b900      	cbnz	r0, 800f22a <lv_img_decoder_built_in_open+0xa2>
 800f228:	e7fe      	b.n	800f228 <lv_img_decoder_built_in_open+0xa0>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800f22a:	2110      	movs	r1, #16
 800f22c:	f008 fd72 	bl	8017d14 <lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800f230:	2002      	movs	r0, #2
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f232:	6a66      	ldr	r6, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800f234:	40b8      	lsls	r0, r7
 800f236:	f008 fcef 	bl	8017c18 <lv_mem_alloc>
 800f23a:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MALLOC(user_data->palette);
 800f23c:	b900      	cbnz	r0, 800f240 <lv_img_decoder_built_in_open+0xb8>
 800f23e:	e7fe      	b.n	800f23e <lv_img_decoder_built_in_open+0xb6>
        uint32_t palette_size = 1 << px_size;
 800f240:	2001      	movs	r0, #1
 800f242:	fa00 f707 	lsl.w	r7, r0, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800f246:	4638      	mov	r0, r7
 800f248:	f008 fce6 	bl	8017c18 <lv_mem_alloc>
 800f24c:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->opa);
 800f24e:	b900      	cbnz	r0, 800f252 <lv_img_decoder_built_in_open+0xca>
 800f250:	e7fe      	b.n	800f250 <lv_img_decoder_built_in_open+0xc8>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800f252:	68b3      	ldr	r3, [r6, #8]
 800f254:	b92b      	cbnz	r3, 800f262 <lv_img_decoder_built_in_open+0xda>
            lv_img_decoder_built_in_close(decoder, dsc);
 800f256:	4621      	mov	r1, r4
 800f258:	4640      	mov	r0, r8
 800f25a:	f7ff fd8b 	bl	800ed74 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800f25e:	2500      	movs	r5, #0
 800f260:	e7cd      	b.n	800f1fe <lv_img_decoder_built_in_open+0x76>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f262:	7c25      	ldrb	r5, [r4, #16]
 800f264:	2d01      	cmp	r5, #1
 800f266:	d123      	bne.n	800f2b0 <lv_img_decoder_built_in_open+0x128>
            for(i = 0; i < palette_size; i++) {
 800f268:	2400      	movs	r4, #0
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800f26a:	2200      	movs	r2, #0
 800f26c:	2104      	movs	r1, #4
 800f26e:	4630      	mov	r0, r6
 800f270:	f008 f963 	bl	801753a <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800f274:	42bc      	cmp	r4, r7
 800f276:	d0c2      	beq.n	800f1fe <lv_img_decoder_built_in_open+0x76>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800f278:	2300      	movs	r3, #0
 800f27a:	2204      	movs	r2, #4
 800f27c:	4669      	mov	r1, sp
 800f27e:	4630      	mov	r0, r6
 800f280:	f008 f940 	bl	8017504 <lv_fs_read>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800f284:	f89d 3001 	ldrb.w	r3, [sp, #1]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800f288:	68b2      	ldr	r2, [r6, #8]
 800f28a:	0899      	lsrs	r1, r3, #2
 800f28c:	f89d 3000 	ldrb.w	r3, [sp]
 800f290:	08db      	lsrs	r3, r3, #3
 800f292:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800f296:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800f29a:	08c9      	lsrs	r1, r1, #3
 800f29c:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 800f2a0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800f2a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f2a8:	68f3      	ldr	r3, [r6, #12]
 800f2aa:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 800f2ac:	3401      	adds	r4, #1
 800f2ae:	e7e1      	b.n	800f274 <lv_img_decoder_built_in_open+0xec>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800f2b0:	6863      	ldr	r3, [r4, #4]
            for(i = 0; i < palette_size; i++) {
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	689a      	ldr	r2, [r3, #8]
 800f2b6:	42b8      	cmp	r0, r7
 800f2b8:	f102 0204 	add.w	r2, r2, #4
 800f2bc:	d097      	beq.n	800f1ee <lv_img_decoder_built_in_open+0x66>
 800f2be:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800f2c2:	68b1      	ldr	r1, [r6, #8]
 800f2c4:	089c      	lsrs	r4, r3, #2
 800f2c6:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800f2ca:	08db      	lsrs	r3, r3, #3
 800f2cc:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
 800f2d0:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800f2d4:	08e4      	lsrs	r4, r4, #3
 800f2d6:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
 800f2da:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800f2de:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f2e2:	68f3      	ldr	r3, [r6, #12]
 800f2e4:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
 800f2e6:	3001      	adds	r0, #1
 800f2e8:	e7e5      	b.n	800f2b6 <lv_img_decoder_built_in_open+0x12e>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800f2ea:	f1a0 030b 	sub.w	r3, r0, #11
 800f2ee:	2b03      	cmp	r3, #3
 800f2f0:	f67f af7d 	bls.w	800f1ee <lv_img_decoder_built_in_open+0x66>
 800f2f4:	e7af      	b.n	800f256 <lv_img_decoder_built_in_open+0xce>
 800f2f6:	bf00      	nop
 800f2f8:	08025a42 	.word	0x08025a42

0800f2fc <lv_img_decoder_get_info>:
{
 800f2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f300:	460e      	mov	r6, r1
 800f302:	4607      	mov	r7, r0
   lv_memset_00(header, sizeof(lv_img_header_t));
 800f304:	2104      	movs	r1, #4
    lv_res_t res = LV_RES_INV;
 800f306:	2500      	movs	r5, #0
   lv_memset_00(header, sizeof(lv_img_header_t));
 800f308:	4630      	mov	r0, r6
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800f30a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800f340 <lv_img_decoder_get_info+0x44>
   lv_memset_00(header, sizeof(lv_img_header_t));
 800f30e:	f008 fd01 	bl	8017d14 <lv_memset_00>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800f312:	480b      	ldr	r0, [pc, #44]	; (800f340 <lv_img_decoder_get_info+0x44>)
 800f314:	f008 f9fb 	bl	801770e <_lv_ll_get_head>
 800f318:	4604      	mov	r4, r0
 800f31a:	b914      	cbnz	r4, 800f322 <lv_img_decoder_get_info+0x26>
}
 800f31c:	4628      	mov	r0, r5
 800f31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
 800f322:	6823      	ldr	r3, [r4, #0]
 800f324:	b133      	cbz	r3, 800f334 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
 800f326:	4632      	mov	r2, r6
 800f328:	4639      	mov	r1, r7
 800f32a:	4620      	mov	r0, r4
 800f32c:	4798      	blx	r3
            if(res == LV_RES_OK) break;
 800f32e:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
 800f330:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 800f332:	d0f3      	beq.n	800f31c <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800f334:	4621      	mov	r1, r4
 800f336:	4640      	mov	r0, r8
 800f338:	f008 f9ef 	bl	801771a <_lv_ll_get_next>
 800f33c:	4604      	mov	r4, r0
 800f33e:	e7ec      	b.n	800f31a <lv_img_decoder_get_info+0x1e>
 800f340:	2000ae10 	.word	0x2000ae10

0800f344 <lv_img_decoder_open>:
{
 800f344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f348:	4604      	mov	r4, r0
 800f34a:	4616      	mov	r6, r2
 800f34c:	460f      	mov	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800f34e:	2128      	movs	r1, #40	; 0x28
{
 800f350:	461d      	mov	r5, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800f352:	f008 fcdf 	bl	8017d14 <lv_memset_00>
    dsc->src_type = lv_img_src_get_type(src);
 800f356:	4638      	mov	r0, r7
    dsc->color    = color;
 800f358:	8126      	strh	r6, [r4, #8]
    dsc->src_type = lv_img_src_get_type(src);
 800f35a:	f7fb f96f 	bl	800a63c <lv_img_src_get_type>
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f35e:	2801      	cmp	r0, #1
    dsc->src_type = lv_img_src_get_type(src);
 800f360:	7420      	strb	r0, [r4, #16]
    dsc->frame_id = frame_id;
 800f362:	60e5      	str	r5, [r4, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f364:	d11e      	bne.n	800f3a4 <lv_img_decoder_open+0x60>
        size_t fnlen = strlen(src);
 800f366:	4638      	mov	r0, r7
 800f368:	f7f0 ff5c 	bl	8000224 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800f36c:	3001      	adds	r0, #1
 800f36e:	f008 fc53 	bl	8017c18 <lv_mem_alloc>
 800f372:	6060      	str	r0, [r4, #4]
        LV_ASSERT_MALLOC(dsc->src);
 800f374:	b900      	cbnz	r0, 800f378 <lv_img_decoder_open+0x34>
 800f376:	e7fe      	b.n	800f376 <lv_img_decoder_open+0x32>
        strcpy((char *)dsc->src, src);
 800f378:	4639      	mov	r1, r7
 800f37a:	f014 fc85 	bl	8023c88 <strcpy>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f37e:	481b      	ldr	r0, [pc, #108]	; (800f3ec <lv_img_decoder_open+0xa8>)
    lv_res_t res = LV_RES_INV;
 800f380:	2600      	movs	r6, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f382:	f008 f9c4 	bl	801770e <_lv_ll_get_head>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800f386:	f104 0814 	add.w	r8, r4, #20
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f38a:	4605      	mov	r5, r0
 800f38c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800f3ec <lv_img_decoder_open+0xa8>
 800f390:	b955      	cbnz	r5, 800f3a8 <lv_img_decoder_open+0x64>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800f392:	7c23      	ldrb	r3, [r4, #16]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d102      	bne.n	800f39e <lv_img_decoder_open+0x5a>
        lv_mem_free((void*)dsc->src);
 800f398:	6860      	ldr	r0, [r4, #4]
 800f39a:	f008 fabb 	bl	8017914 <lv_mem_free>
}
 800f39e:	4630      	mov	r0, r6
 800f3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        dsc->src = src;
 800f3a4:	6067      	str	r7, [r4, #4]
 800f3a6:	e7ea      	b.n	800f37e <lv_img_decoder_open+0x3a>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800f3a8:	682b      	ldr	r3, [r5, #0]
 800f3aa:	b1cb      	cbz	r3, 800f3e0 <lv_img_decoder_open+0x9c>
 800f3ac:	686a      	ldr	r2, [r5, #4]
 800f3ae:	b1ba      	cbz	r2, 800f3e0 <lv_img_decoder_open+0x9c>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800f3b0:	4642      	mov	r2, r8
 800f3b2:	4639      	mov	r1, r7
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
 800f3b8:	2801      	cmp	r0, #1
        res = decoder->info_cb(decoder, src, &dsc->header);
 800f3ba:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
 800f3bc:	d110      	bne.n	800f3e0 <lv_img_decoder_open+0x9c>
        res = decoder->open_cb(decoder, dsc);
 800f3be:	686b      	ldr	r3, [r5, #4]
 800f3c0:	4621      	mov	r1, r4
 800f3c2:	4628      	mov	r0, r5
        dsc->decoder = decoder;
 800f3c4:	6025      	str	r5, [r4, #0]
        res = decoder->open_cb(decoder, dsc);
 800f3c6:	4798      	blx	r3
        if(res == LV_RES_OK) return res;
 800f3c8:	2801      	cmp	r0, #1
        res = decoder->open_cb(decoder, dsc);
 800f3ca:	4606      	mov	r6, r0
        if(res == LV_RES_OK) return res;
 800f3cc:	d0e7      	beq.n	800f39e <lv_img_decoder_open+0x5a>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800f3ce:	2104      	movs	r1, #4
 800f3d0:	4640      	mov	r0, r8
 800f3d2:	f008 fc9f 	bl	8017d14 <lv_memset_00>
        dsc->error_msg = NULL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	6223      	str	r3, [r4, #32]
        dsc->img_data  = NULL;
 800f3da:	61a3      	str	r3, [r4, #24]
        dsc->user_data = NULL;
 800f3dc:	6263      	str	r3, [r4, #36]	; 0x24
        dsc->time_to_open = 0;
 800f3de:	61e3      	str	r3, [r4, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	4648      	mov	r0, r9
 800f3e4:	f008 f999 	bl	801771a <_lv_ll_get_next>
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	e7d1      	b.n	800f390 <lv_img_decoder_open+0x4c>
 800f3ec:	2000ae10 	.word	0x2000ae10

0800f3f0 <lv_img_decoder_read_line>:
{
 800f3f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800f3f2:	6805      	ldr	r5, [r0, #0]
 800f3f4:	68ac      	ldr	r4, [r5, #8]
 800f3f6:	b14c      	cbz	r4, 800f40c <lv_img_decoder_read_line+0x1c>
 800f3f8:	9e06      	ldr	r6, [sp, #24]
 800f3fa:	e9cd 3600 	strd	r3, r6, [sp]
 800f3fe:	4613      	mov	r3, r2
 800f400:	460a      	mov	r2, r1
 800f402:	4601      	mov	r1, r0
 800f404:	4628      	mov	r0, r5
 800f406:	47a0      	blx	r4
}
 800f408:	b002      	add	sp, #8
 800f40a:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800f40c:	4620      	mov	r0, r4
 800f40e:	e7fb      	b.n	800f408 <lv_img_decoder_read_line+0x18>

0800f410 <lv_img_decoder_close>:
{
 800f410:	b510      	push	{r4, lr}
 800f412:	4604      	mov	r4, r0
    if(dsc->decoder) {
 800f414:	6800      	ldr	r0, [r0, #0]
 800f416:	b158      	cbz	r0, 800f430 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800f418:	68c3      	ldr	r3, [r0, #12]
 800f41a:	b10b      	cbz	r3, 800f420 <lv_img_decoder_close+0x10>
 800f41c:	4621      	mov	r1, r4
 800f41e:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f420:	7c23      	ldrb	r3, [r4, #16]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d104      	bne.n	800f430 <lv_img_decoder_close+0x20>
            lv_mem_free((void*)dsc->src);
 800f426:	6860      	ldr	r0, [r4, #4]
 800f428:	f008 fa74 	bl	8017914 <lv_mem_free>
            dsc->src = NULL;
 800f42c:	2300      	movs	r3, #0
 800f42e:	6063      	str	r3, [r4, #4]
}
 800f430:	bd10      	pop	{r4, pc}
	...

0800f434 <lv_img_decoder_create>:
{
 800f434:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 800f436:	4805      	ldr	r0, [pc, #20]	; (800f44c <lv_img_decoder_create+0x18>)
 800f438:	f008 f8f7 	bl	801762a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800f43c:	4604      	mov	r4, r0
 800f43e:	b900      	cbnz	r0, 800f442 <lv_img_decoder_create+0xe>
 800f440:	e7fe      	b.n	800f440 <lv_img_decoder_create+0xc>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800f442:	2114      	movs	r1, #20
 800f444:	f008 fc66 	bl	8017d14 <lv_memset_00>
}
 800f448:	4620      	mov	r0, r4
 800f44a:	bd10      	pop	{r4, pc}
 800f44c:	2000ae10 	.word	0x2000ae10

0800f450 <_lv_img_decoder_init>:
{
 800f450:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 800f452:	2114      	movs	r1, #20
 800f454:	4807      	ldr	r0, [pc, #28]	; (800f474 <_lv_img_decoder_init+0x24>)
 800f456:	f008 f8e0 	bl	801761a <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800f45a:	f7ff ffeb 	bl	800f434 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 800f45e:	b900      	cbnz	r0, 800f462 <_lv_img_decoder_init+0x12>
 800f460:	e7fe      	b.n	800f460 <_lv_img_decoder_init+0x10>
    decoder->info_cb = info_cb;
 800f462:	4b05      	ldr	r3, [pc, #20]	; (800f478 <_lv_img_decoder_init+0x28>)
 800f464:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
 800f466:	4b05      	ldr	r3, [pc, #20]	; (800f47c <_lv_img_decoder_init+0x2c>)
 800f468:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800f46a:	4b05      	ldr	r3, [pc, #20]	; (800f480 <_lv_img_decoder_init+0x30>)
 800f46c:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
 800f46e:	4b05      	ldr	r3, [pc, #20]	; (800f484 <_lv_img_decoder_init+0x34>)
 800f470:	60c3      	str	r3, [r0, #12]
}
 800f472:	bd08      	pop	{r3, pc}
 800f474:	2000ae10 	.word	0x2000ae10
 800f478:	0800eda5 	.word	0x0800eda5
 800f47c:	0800f189 	.word	0x0800f189
 800f480:	0800ee51 	.word	0x0800ee51
 800f484:	0800ed75 	.word	0x0800ed75

0800f488 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f488:	8883      	ldrh	r3, [r0, #4]
 800f48a:	8800      	ldrh	r0, [r0, #0]
 800f48c:	3301      	adds	r3, #1
 800f48e:	1a18      	subs	r0, r3, r0
}
 800f490:	b200      	sxth	r0, r0
 800f492:	4770      	bx	lr

0800f494 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f494:	88c3      	ldrh	r3, [r0, #6]
 800f496:	8840      	ldrh	r0, [r0, #2]
 800f498:	3301      	adds	r3, #1
 800f49a:	1a18      	subs	r0, r3, r0
}
 800f49c:	b200      	sxth	r0, r0
 800f49e:	4770      	bx	lr

0800f4a0 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt, lv_coord_t * start_pos, lv_coord_t * gap)
{
    if(item_cnt <= 1) {
 800f4a0:	2b01      	cmp	r3, #1
{
 800f4a2:	b570      	push	{r4, r5, r6, lr}
 800f4a4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    if(item_cnt <= 1) {
 800f4a8:	dc02      	bgt.n	800f4b0 <place_content+0x10>
        switch(place) {
 800f4aa:	1ec6      	subs	r6, r0, #3
 800f4ac:	2e02      	cmp	r6, #2
 800f4ae:	d907      	bls.n	800f4c0 <place_content+0x20>
            default:
                break;
        }
    }

    switch(place) {
 800f4b0:	3801      	subs	r0, #1
 800f4b2:	2804      	cmp	r0, #4
 800f4b4:	d835      	bhi.n	800f522 <place_content+0x82>
 800f4b6:	e8df f000 	tbb	[pc, r0]
 800f4ba:	030d      	.short	0x030d
 800f4bc:	1b2a      	.short	0x1b2a
 800f4be:	13          	.byte	0x13
 800f4bf:	00          	.byte	0x00
    case LV_FLEX_ALIGN_CENTER:
        *gap = 0;
 800f4c0:	2300      	movs	r3, #0
        *start_pos += (max_size - content_size) / 2;
 800f4c2:	1a89      	subs	r1, r1, r2
        *gap = 0;
 800f4c4:	802b      	strh	r3, [r5, #0]
        *start_pos += (max_size - content_size) / 2;
 800f4c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800f4ca:	8823      	ldrh	r3, [r4, #0]
 800f4cc:	eb03 0161 	add.w	r1, r3, r1, asr #1
        break;
    case LV_FLEX_ALIGN_END:
        *gap = 0;
        *start_pos += max_size - content_size;
 800f4d0:	8021      	strh	r1, [r4, #0]
       *start_pos += *gap;
       break;
   default:
       *gap = 0;
    }
}
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}
        *gap = 0;
 800f4d4:	2300      	movs	r3, #0
        *start_pos += max_size - content_size;
 800f4d6:	1a89      	subs	r1, r1, r2
        *gap = 0;
 800f4d8:	802b      	strh	r3, [r5, #0]
        *start_pos += max_size - content_size;
 800f4da:	8822      	ldrh	r2, [r4, #0]
 800f4dc:	4411      	add	r1, r2
 800f4de:	e7f7      	b.n	800f4d0 <place_content+0x30>
       *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 800f4e0:	1a89      	subs	r1, r1, r2
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b209      	sxth	r1, r1
 800f4e6:	b21b      	sxth	r3, r3
 800f4e8:	fb91 f1f3 	sdiv	r1, r1, r3
 800f4ec:	8029      	strh	r1, [r5, #0]
       break;
 800f4ee:	e7f0      	b.n	800f4d2 <place_content+0x32>
       *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 800f4f0:	1a89      	subs	r1, r1, r2
 800f4f2:	b209      	sxth	r1, r1
 800f4f4:	fb91 f3f3 	sdiv	r3, r1, r3
 800f4f8:	8829      	ldrh	r1, [r5, #0]
 800f4fa:	440b      	add	r3, r1
 800f4fc:	b21b      	sxth	r3, r3
 800f4fe:	802b      	strh	r3, [r5, #0]
       *start_pos += *gap / 2;
 800f500:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f504:	8822      	ldrh	r2, [r4, #0]
 800f506:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800f50a:	8023      	strh	r3, [r4, #0]
       break;
 800f50c:	e7e1      	b.n	800f4d2 <place_content+0x32>
       *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 800f50e:	1a89      	subs	r1, r1, r2
 800f510:	3301      	adds	r3, #1
 800f512:	b209      	sxth	r1, r1
 800f514:	b21b      	sxth	r3, r3
 800f516:	fb91 f1f3 	sdiv	r1, r1, r3
 800f51a:	8029      	strh	r1, [r5, #0]
       *start_pos += *gap;
 800f51c:	8823      	ldrh	r3, [r4, #0]
 800f51e:	4419      	add	r1, r3
 800f520:	e7d6      	b.n	800f4d0 <place_content+0x30>
       *gap = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	802b      	strh	r3, [r5, #0]
}
 800f526:	e7d4      	b.n	800f4d2 <place_content+0x32>

0800f528 <get_next_item.isra.0>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 800f528:	6813      	ldr	r3, [r2, #0]
 800f52a:	b151      	cbz	r1, 800f542 <get_next_item.isra.0+0x1a>
        (*item_id)--;
 800f52c:	3b01      	subs	r3, #1
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f52e:	2b00      	cmp	r3, #0
        (*item_id)--;
 800f530:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f532:	da01      	bge.n	800f538 <get_next_item.isra.0+0x10>
        else return NULL;
 800f534:	2000      	movs	r0, #0
 800f536:	4770      	bx	lr
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 800f538:	6802      	ldr	r2, [r0, #0]
    } else {
        (*item_id)++;
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800f53a:	6812      	ldr	r2, [r2, #0]
 800f53c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        else return NULL;
    }
}
 800f540:	4770      	bx	lr
        (*item_id)++;
 800f542:	3301      	adds	r3, #1
 800f544:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 800f546:	6802      	ldr	r2, [r0, #0]
 800f548:	6851      	ldr	r1, [r2, #4]
 800f54a:	428b      	cmp	r3, r1
 800f54c:	dbf5      	blt.n	800f53a <get_next_item.isra.0+0x12>
 800f54e:	e7f1      	b.n	800f534 <get_next_item.isra.0+0xc>

0800f550 <find_track_end>:
{
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	b087      	sub	sp, #28
 800f556:	4607      	mov	r7, r0
 800f558:	460e      	mov	r6, r1
 800f55a:	4690      	mov	r8, r2
 800f55c:	9301      	str	r3, [sp, #4]
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f55e:	f241 0201 	movw	r2, #4097	; 0x1001
 800f562:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800f566:	2100      	movs	r1, #0
 800f568:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f56a:	9302      	str	r3, [sp, #8]
 800f56c:	f7f7 ffac 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f570:	f241 0204 	movw	r2, #4100	; 0x1004
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f574:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f576:	2100      	movs	r1, #0
 800f578:	4638      	mov	r0, r7
 800f57a:	f7f7 ffa5 	bl	80074c8 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800f57e:	78f3      	ldrb	r3, [r6, #3]
 800f580:	079a      	lsls	r2, r3, #30
 800f582:	d50b      	bpl.n	800f59c <find_track_end+0x4c>
 800f584:	f013 0f01 	tst.w	r3, #1
 800f588:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f58c:	d00e      	beq.n	800f5ac <find_track_end+0x5c>
 800f58e:	b22d      	sxth	r5, r5
 800f590:	429d      	cmp	r5, r3
 800f592:	d106      	bne.n	800f5a2 <find_track_end+0x52>
        f->wrap = false;
 800f594:	78f3      	ldrb	r3, [r6, #3]
 800f596:	f36f 0341 	bfc	r3, #1, #1
 800f59a:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f59c:	78f3      	ldrb	r3, [r6, #3]
 800f59e:	07d9      	lsls	r1, r3, #31
 800f5a0:	d507      	bpl.n	800f5b2 <find_track_end+0x62>
 800f5a2:	4b72      	ldr	r3, [pc, #456]	; (800f76c <find_track_end+0x21c>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800f5a4:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 800f770 <find_track_end+0x220>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	e006      	b.n	800f5ba <find_track_end+0x6a>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 800f5ac:	b200      	sxth	r0, r0
 800f5ae:	4298      	cmp	r0, r3
 800f5b0:	d0f0      	beq.n	800f594 <find_track_end+0x44>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f5b2:	4b6f      	ldr	r3, [pc, #444]	; (800f770 <find_track_end+0x220>)
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 800f5b4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800f76c <find_track_end+0x21c>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 800f5b8:	9300      	str	r3, [sp, #0]
    t->grow_item_cnt = 0;
 800f5ba:	2300      	movs	r3, #0
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 800f5bc:	4641      	mov	r1, r8
    int32_t item_id = item_start_id;
 800f5be:	f8cd 8014 	str.w	r8, [sp, #20]
    t->grow_item_cnt = 0;
 800f5c2:	6123      	str	r3, [r4, #16]
    t->track_cross_size = 0;
 800f5c4:	6023      	str	r3, [r4, #0]
    t->track_fix_main_size = 0;
 800f5c6:	80a3      	strh	r3, [r4, #4]
    t->grow_dsc = NULL;
 800f5c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
        item = lv_obj_get_child(cont, item_id);
 800f5cc:	4638      	mov	r0, r7
 800f5ce:	f7f8 fac8 	bl	8007b62 <lv_obj_get_child>
 800f5d2:	9b05      	ldr	r3, [sp, #20]
 800f5d4:	4605      	mov	r5, r0
    while(item) {
 800f5d6:	b370      	cbz	r0, 800f636 <find_track_end+0xe6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800f5d8:	4598      	cmp	r8, r3
 800f5da:	d125      	bne.n	800f628 <find_track_end+0xd8>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800f5dc:	4965      	ldr	r1, [pc, #404]	; (800f774 <find_track_end+0x224>)
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7f4 fca6 	bl	8003f30 <lv_obj_has_flag_any>
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f040 809f 	bne.w	800f72a <find_track_end+0x1da>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800f5ec:	4b62      	ldr	r3, [pc, #392]	; (800f778 <find_track_end+0x228>)
 800f5ee:	4601      	mov	r1, r0
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	881a      	ldrh	r2, [r3, #0]
 800f5f4:	f7f7 ff68 	bl	80074c8 <lv_obj_get_style_prop>
            if(grow_value) {
 800f5f8:	f010 0fff 	tst.w	r0, #255	; 0xff
 800f5fc:	9003      	str	r0, [sp, #12]
 800f5fe:	f000 80a2 	beq.w	800f746 <find_track_end+0x1f6>
                t->track_fix_main_size += item_gap;
 800f602:	88a3      	ldrh	r3, [r4, #4]
 800f604:	9a02      	ldr	r2, [sp, #8]
                t->grow_item_cnt++;
 800f606:	6920      	ldr	r0, [r4, #16]
                t->track_fix_main_size += item_gap;
 800f608:	4413      	add	r3, r2
                t->grow_item_cnt++;
 800f60a:	3001      	adds	r0, #1
                t->track_fix_main_size += item_gap;
 800f60c:	80a3      	strh	r3, [r4, #4]
                if(t->grow_dsc_calc) {
 800f60e:	7d23      	ldrb	r3, [r4, #20]
                t->grow_item_cnt++;
 800f610:	6120      	str	r0, [r4, #16]
                if(t->grow_dsc_calc) {
 800f612:	07da      	lsls	r2, r3, #31
 800f614:	d57c      	bpl.n	800f710 <find_track_end+0x1c0>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 800f616:	2314      	movs	r3, #20
 800f618:	4358      	muls	r0, r3
 800f61a:	f008 fb2d 	bl	8017c78 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 800f61e:	2314      	movs	r3, #20
 800f620:	4681      	mov	r9, r0
 800f622:	2800      	cmp	r0, #0
 800f624:	d133      	bne.n	800f68e <find_track_end+0x13e>
 800f626:	e7fe      	b.n	800f626 <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 800f628:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800f62c:	4628      	mov	r0, r5
 800f62e:	f7f4 fc78 	bl	8003f22 <lv_obj_has_flag>
 800f632:	2800      	cmp	r0, #0
 800f634:	d0d2      	beq.n	800f5dc <find_track_end+0x8c>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 800f636:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	bfc2      	ittt	gt
 800f63e:	9a02      	ldrgt	r2, [sp, #8]
 800f640:	1a9b      	subgt	r3, r3, r2
 800f642:	80a3      	strhgt	r3, [r4, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 800f644:	6923      	ldr	r3, [r4, #16]
 800f646:	b913      	cbnz	r3, 800f64e <find_track_end+0xfe>
 800f648:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	8063      	strh	r3, [r4, #2]
    if(item && item_id == item_start_id) {
 800f652:	b1c5      	cbz	r5, 800f686 <find_track_end+0x136>
 800f654:	9b05      	ldr	r3, [sp, #20]
 800f656:	4598      	cmp	r8, r3
 800f658:	d115      	bne.n	800f686 <find_track_end+0x136>
        item = cont->spec_attr->children[item_id];
 800f65a:	4638      	mov	r0, r7
        get_next_item(cont, f->rev, &item_id);
 800f65c:	78f1      	ldrb	r1, [r6, #3]
 800f65e:	aa05      	add	r2, sp, #20
        item = cont->spec_attr->children[item_id];
 800f660:	f850 3f08 	ldr.w	r3, [r0, #8]!
        get_next_item(cont, f->rev, &item_id);
 800f664:	f3c1 0180 	ubfx	r1, r1, #2, #1
        item = cont->spec_attr->children[item_id];
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 800f66e:	f7ff ff5b 	bl	800f528 <get_next_item.isra.0>
        if(item) {
 800f672:	b145      	cbz	r5, 800f686 <find_track_end+0x136>
            t->track_cross_size = get_cross_size(item);
 800f674:	4628      	mov	r0, r5
 800f676:	47d8      	blx	fp
            t->track_main_size = get_main_size(item);
 800f678:	9b00      	ldr	r3, [sp, #0]
            t->track_cross_size = get_cross_size(item);
 800f67a:	8020      	strh	r0, [r4, #0]
            t->track_main_size = get_main_size(item);
 800f67c:	4628      	mov	r0, r5
 800f67e:	4798      	blx	r3
            t->item_cnt = 1;
 800f680:	2301      	movs	r3, #1
            t->track_main_size = get_main_size(item);
 800f682:	8060      	strh	r0, [r4, #2]
            t->item_cnt = 1;
 800f684:	60a3      	str	r3, [r4, #8]
}
 800f686:	9805      	ldr	r0, [sp, #20]
 800f688:	b007      	add	sp, #28
 800f68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 800f68e:	6922      	ldr	r2, [r4, #16]
 800f690:	68e1      	ldr	r1, [r4, #12]
 800f692:	435a      	muls	r2, r3
 800f694:	3a14      	subs	r2, #20
 800f696:	f008 f977 	bl	8017988 <lv_memcpy>
                    lv_mem_buf_release(t->grow_dsc);
 800f69a:	68e0      	ldr	r0, [r4, #12]
 800f69c:	f008 f948 	bl	8017930 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f6a0:	6922      	ldr	r2, [r4, #16]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f6a2:	78f1      	ldrb	r1, [r6, #3]
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f6a4:	2314      	movs	r3, #20
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	fb03 9302 	mla	r3, r3, r2, r9
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f6ac:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].item = item;
 800f6b0:	f843 5c14 	str.w	r5, [r3, #-20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800f6b4:	bf1a      	itte	ne
 800f6b6:	f241 0202 	movwne	r2, #4098	; 0x1002
 800f6ba:	4651      	movne	r1, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800f6bc:	f241 0205 	movweq	r2, #4101	; 0x1005
 800f6c0:	f7f7 ff02 	bl	80074c8 <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f6c4:	2214      	movs	r2, #20
 800f6c6:	6923      	ldr	r3, [r4, #16]
    return (lv_coord_t)v.num;
 800f6c8:	b200      	sxth	r0, r0
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f6ca:	78f1      	ldrb	r1, [r6, #3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f6cc:	fb02 9303 	mla	r3, r2, r3, r9
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f6d0:	f011 0101 	ands.w	r1, r1, #1
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN) : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 800f6d4:	f823 0c10 	strh.w	r0, [r3, #-16]
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f6d8:	4628      	mov	r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800f6da:	bf16      	itet	ne
 800f6dc:	f241 0203 	movwne	r2, #4099	; 0x1003
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f6e0:	f241 0206 	movweq	r2, #4102	; 0x1006
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800f6e4:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800f6e6:	f7f7 feef 	bl	80074c8 <lv_obj_get_style_prop>
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	2214      	movs	r2, #20
    return (lv_coord_t)v.num;
 800f6ee:	b200      	sxth	r0, r0
 800f6f0:	fb02 9303 	mla	r3, r2, r3, r9
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f6f4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN) : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 800f6f8:	f823 0c0e 	strh.w	r0, [r3, #-14]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f6fc:	f36f 0200 	bfc	r2, #0, #1
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800f700:	f89d 000c 	ldrb.w	r0, [sp, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 800f704:	f803 2c04 	strb.w	r2, [r3, #-4]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 800f708:	f843 0c08 	str.w	r0, [r3, #-8]
                    t->grow_dsc = new_dsc;
 800f70c:	f8c4 900c 	str.w	r9, [r4, #12]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 800f710:	4628      	mov	r0, r5
 800f712:	47d8      	blx	fp
 800f714:	f9b4 3000 	ldrsh.w	r3, [r4]
 800f718:	4298      	cmp	r0, r3
 800f71a:	dd02      	ble.n	800f722 <find_track_end+0x1d2>
 800f71c:	4628      	mov	r0, r5
 800f71e:	47d8      	blx	fp
 800f720:	4603      	mov	r3, r0
 800f722:	8023      	strh	r3, [r4, #0]
            t->item_cnt++;
 800f724:	68a3      	ldr	r3, [r4, #8]
 800f726:	3301      	adds	r3, #1
 800f728:	60a3      	str	r3, [r4, #8]
        item_id += f->rev ? -1 : +1;
 800f72a:	78f3      	ldrb	r3, [r6, #3]
 800f72c:	f013 0f04 	tst.w	r3, #4
 800f730:	9b05      	ldr	r3, [sp, #20]
 800f732:	bf14      	ite	ne
 800f734:	f04f 31ff 	movne.w	r1, #4294967295
 800f738:	2101      	moveq	r1, #1
 800f73a:	4419      	add	r1, r3
        if(item_id < 0) break;
 800f73c:	2900      	cmp	r1, #0
        item_id += f->rev ? -1 : +1;
 800f73e:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 800f740:	f6bf af44 	bge.w	800f5cc <find_track_end+0x7c>
 800f744:	e777      	b.n	800f636 <find_track_end+0xe6>
                lv_coord_t item_size = get_main_size(item);
 800f746:	9b00      	ldr	r3, [sp, #0]
 800f748:	4628      	mov	r0, r5
 800f74a:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 800f74c:	78f3      	ldrb	r3, [r6, #3]
 800f74e:	079b      	lsls	r3, r3, #30
 800f750:	d506      	bpl.n	800f760 <find_track_end+0x210>
 800f752:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800f756:	9a01      	ldr	r2, [sp, #4]
 800f758:	4403      	add	r3, r0
 800f75a:	4293      	cmp	r3, r2
 800f75c:	f73f af6b 	bgt.w	800f636 <find_track_end+0xe6>
                t->track_fix_main_size += item_size + item_gap;
 800f760:	88a3      	ldrh	r3, [r4, #4]
 800f762:	9a02      	ldr	r2, [sp, #8]
 800f764:	4413      	add	r3, r2
 800f766:	4418      	add	r0, r3
 800f768:	80a0      	strh	r0, [r4, #4]
 800f76a:	e7d1      	b.n	800f710 <find_track_end+0x1c0>
 800f76c:	08004fcf 	.word	0x08004fcf
 800f770:	08004fdb 	.word	0x08004fdb
 800f774:	00018001 	.word	0x00018001
 800f778:	2000adba 	.word	0x2000adba

0800f77c <flex_update>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 800f77c:	4ba3      	ldr	r3, [pc, #652]	; (800fa0c <flex_update+0x290>)
 800f77e:	2100      	movs	r1, #0
{
 800f780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	881a      	ldrh	r2, [r3, #0]
 800f786:	4604      	mov	r4, r0
 800f788:	ed2d 8b02 	vpush	{d8}
 800f78c:	b09f      	sub	sp, #124	; 0x7c
 800f78e:	f7f7 fe9b 	bl	80074c8 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 800f792:	43c3      	mvns	r3, r0
 800f794:	f3c0 0280 	ubfx	r2, r0, #2, #1
 800f798:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800f79c:	f003 0301 	and.w	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800f7a6:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800f7aa:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800f7ae:	f022 0207 	bic.w	r2, r2, #7
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7ba:	4b95      	ldr	r3, [pc, #596]	; (800fa10 <flex_update+0x294>)
 800f7bc:	881a      	ldrh	r2, [r3, #0]
 800f7be:	f7f7 fe83 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 800f7c2:	4b94      	ldr	r3, [pc, #592]	; (800fa14 <flex_update+0x298>)
 800f7c4:	2100      	movs	r1, #0
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 800f7c6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
 800f7ca:	881a      	ldrh	r2, [r3, #0]
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f7f7 fe7b 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 800f7d2:	4b91      	ldr	r3, [pc, #580]	; (800fa18 <flex_update+0x29c>)
 800f7d4:	2100      	movs	r1, #0
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 800f7d6:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
 800f7da:	881a      	ldrh	r2, [r3, #0]
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f7f7 fe73 	bl	80074c8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800f7e2:	f241 426a 	movw	r2, #5226	; 0x146a
 800f7e6:	2100      	movs	r1, #0
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 800f7e8:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f7f7 fe6b 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 800f7f2:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
    return (lv_base_dir_t)v.num;
 800f7f6:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f011 0101 	ands.w	r1, r1, #1
    return (lv_base_dir_t)v.num;
 800f7fe:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800f800:	bf0e      	itee	eq
 800f802:	f241 0215 	movweq	r2, #4117	; 0x1015
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f806:	f241 0214 	movwne	r2, #4116	; 0x1014
 800f80a:	2100      	movne	r1, #0
 800f80c:	f7f7 fe5c 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 800f810:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
    return (lv_coord_t)v.num;
 800f814:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f816:	4620      	mov	r0, r4
 800f818:	f011 0101 	ands.w	r1, r1, #1
    return (lv_coord_t)v.num;
 800f81c:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800f81e:	bf1a      	itte	ne
 800f820:	f241 0215 	movwne	r2, #4117	; 0x1015
 800f824:	2100      	movne	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 800f826:	f241 0214 	movweq	r2, #4116	; 0x1014
 800f82a:	f7f7 fe4d 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f82e:	b203      	sxth	r3, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800f830:	4620      	mov	r0, r4
 800f832:	9302      	str	r3, [sp, #8]
 800f834:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f838:	07dd      	lsls	r5, r3, #31
 800f83a:	d559      	bpl.n	800f8f0 <flex_update+0x174>
 800f83c:	f7f5 fbd3 	bl	8004fe6 <lv_obj_get_content_width>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800f840:	f241 0232 	movw	r2, #4146	; 0x1032
 800f844:	2100      	movs	r1, #0
 800f846:	ee08 0a10 	vmov	s16, r0
 800f84a:	4620      	mov	r0, r4
 800f84c:	f7f7 fe3c 	bl	80074c8 <lv_obj_get_style_prop>
 800f850:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800f852:	f241 0210 	movw	r2, #4112	; 0x1010
 800f856:	2100      	movs	r1, #0
 800f858:	4620      	mov	r0, r4
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_y(cont);
 800f85a:	8ae6      	ldrh	r6, [r4, #22]
 800f85c:	f7f7 fe34 	bl	80074c8 <lv_obj_get_style_prop>
 800f860:	fa10 f085 	uxtah	r0, r0, r5
 800f864:	b2af      	uxth	r7, r5
 800f866:	4406      	add	r6, r0
 800f868:	4620      	mov	r0, r4
 800f86a:	f7f6 fbf1 	bl	8006050 <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800f86e:	f241 0212 	movw	r2, #4114	; 0x1012
 800f872:	b2b6      	uxth	r6, r6
 800f874:	2100      	movs	r1, #0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f876:	8aa5      	ldrh	r5, [r4, #20]
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_y(cont);
 800f878:	1a30      	subs	r0, r6, r0
 800f87a:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
 800f87e:	4620      	mov	r0, r4
 800f880:	f7f7 fe22 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f884:	4438      	add	r0, r7
 800f886:	4405      	add	r5, r0
 800f888:	4620      	mov	r0, r4
 800f88a:	f7f6 fbcf 	bl	800602c <lv_obj_get_scroll_x>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800f88e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f892:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800f894:	f241 0201 	movw	r2, #4097	; 0x1001
 800f898:	2100      	movs	r1, #0
    lv_flex_align_t track_cross_place = f.track_place;
 800f89a:	f89d 7052 	ldrb.w	r7, [sp, #82]	; 0x52
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt - lv_obj_get_scroll_x(cont);
 800f89e:	1a28      	subs	r0, r5, r0
 800f8a0:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 800f8a4:	07d8      	lsls	r0, r3, #31
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	bf54      	ite	pl
 800f8aa:	ad12      	addpl	r5, sp, #72	; 0x48
 800f8ac:	f10d 0546 	addmi.w	r5, sp, #70	; 0x46
 800f8b0:	f7f7 fe0a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f8b4:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 800f8b8:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 800f8be:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800f8c0:	f7f7 fe02 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800f8c4:	b203      	sxth	r3, r0
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 800f8c6:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 800f8ca:	f010 0f01 	tst.w	r0, #1
 800f8ce:	9308      	str	r3, [sp, #32]
 800f8d0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f8d4:	d00f      	beq.n	800f8f6 <flex_update+0x17a>
 800f8d6:	9a08      	ldr	r2, [sp, #32]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d103      	bne.n	800f8e4 <flex_update+0x168>
 800f8dc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f8e0:	0799      	lsls	r1, r3, #30
 800f8e2:	d547      	bpl.n	800f974 <flex_update+0x1f8>
    lv_coord_t gap = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 800f8ea:	b9a7      	cbnz	r7, 800f916 <flex_update+0x19a>
    lv_coord_t total_track_cross_size = 0;
 800f8ec:	463e      	mov	r6, r7
 800f8ee:	e044      	b.n	800f97a <flex_update+0x1fe>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 800f8f0:	f7f5 fb93 	bl	800501a <lv_obj_get_content_height>
 800f8f4:	e7a4      	b.n	800f840 <flex_update+0xc4>
    	(!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0))
 800f8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d104      	bne.n	800f906 <flex_update+0x18a>
 800f8fc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f900:	075a      	lsls	r2, r3, #29
 800f902:	f140 82b5 	bpl.w	800fe70 <flex_update+0x6f4>
    if(rtl && !f.row) {
 800f906:	9b03      	ldr	r3, [sp, #12]
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d1eb      	bne.n	800f8e4 <flex_update+0x168>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800f90c:	bb87      	cbnz	r7, 800f970 <flex_update+0x1f4>
    lv_coord_t gap = 0;
 800f90e:	2300      	movs	r3, #0
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 800f910:	2701      	movs	r7, #1
    lv_coord_t gap = 0;
 800f912:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f916:	68a3      	ldr	r3, [r4, #8]
 800f918:	f010 0004 	ands.w	r0, r0, #4
 800f91c:	f04f 0800 	mov.w	r8, #0
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f920:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800f924:	685a      	ldr	r2, [r3, #4]
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f926:	bf08      	it	eq
 800f928:	4602      	moveq	r2, r0
 800f92a:	4646      	mov	r6, r8
 800f92c:	bf18      	it	ne
 800f92e:	f102 32ff 	addne.w	r2, r2, #4294967295
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	4293      	cmp	r3, r2
 800f938:	dd01      	ble.n	800f93e <flex_update+0x1c2>
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	da49      	bge.n	800f9d2 <flex_update+0x256>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 800f93e:	f1b8 0f00 	cmp.w	r8, #0
 800f942:	d002      	beq.n	800f94a <flex_update+0x1ce>
 800f944:	9b04      	ldr	r3, [sp, #16]
 800f946:	1af6      	subs	r6, r6, r3
 800f948:	b236      	sxth	r6, r6
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800f94a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f94e:	4620      	mov	r0, r4
 800f950:	07db      	lsls	r3, r3, #31
 800f952:	d558      	bpl.n	800fa06 <flex_update+0x28a>
 800f954:	f7f5 fb61 	bl	800501a <lv_obj_get_content_height>
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 800f958:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
 800f95c:	4601      	mov	r1, r0
 800f95e:	4632      	mov	r2, r6
 800f960:	4638      	mov	r0, r7
 800f962:	e9cd 5300 	strd	r5, r3, [sp]
 800f966:	fa0f f388 	sxth.w	r3, r8
 800f96a:	f7ff fd99 	bl	800f4a0 <place_content>
 800f96e:	e004      	b.n	800f97a <flex_update+0x1fe>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 800f970:	2f01      	cmp	r7, #1
 800f972:	d1b7      	bne.n	800f8e4 <flex_update+0x168>
    lv_coord_t gap = 0;
 800f974:	2600      	movs	r6, #0
 800f976:	f8ad 604a 	strh.w	r6, [sp, #74]	; 0x4a
    track_first_item =  f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 800f97a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800f97e:	68a2      	ldr	r2, [r4, #8]
 800f980:	f013 0704 	ands.w	r7, r3, #4
 800f984:	6852      	ldr	r2, [r2, #4]
 800f986:	bf18      	it	ne
 800f988:	f102 37ff 	addne.w	r7, r2, #4294967295
    if(rtl && !f.row) {
 800f98c:	9a03      	ldr	r2, [sp, #12]
 800f98e:	2a01      	cmp	r2, #1
 800f990:	d104      	bne.n	800f99c <flex_update+0x220>
 800f992:	07d9      	lsls	r1, r3, #31
 800f994:	d402      	bmi.n	800f99c <flex_update+0x220>
         *cross_pos += total_track_cross_size;
 800f996:	882b      	ldrh	r3, [r5, #0]
 800f998:	441e      	add	r6, r3
 800f99a:	802e      	strh	r6, [r5, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 800f99c:	68a3      	ldr	r3, [r4, #8]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	42bb      	cmp	r3, r7
 800f9a2:	dd01      	ble.n	800f9a8 <flex_update+0x22c>
 800f9a4:	2f00      	cmp	r7, #0
 800f9a6:	da39      	bge.n	800fa1c <flex_update+0x2a0>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 800f9a8:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800f9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d002      	beq.n	800f9b8 <flex_update+0x23c>
 800f9b2:	9a08      	ldr	r2, [sp, #32]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d102      	bne.n	800f9be <flex_update+0x242>
        lv_obj_refr_size(cont);
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7f5 fed3 	bl	8005764 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 800f9be:	2200      	movs	r2, #0
 800f9c0:	2125      	movs	r1, #37	; 0x25
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f7f2 fb30 	bl	8002028 <lv_event_send>
}
 800f9c8:	b01f      	add	sp, #124	; 0x7c
 800f9ca:	ecbd 8b02 	vpop	{d8}
 800f9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            t.grow_dsc_calc = 0;
 800f9d2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f9d6:	a914      	add	r1, sp, #80	; 0x50
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f8cd 9004 	str.w	r9, [sp, #4]
            t.grow_dsc_calc = 0;
 800f9de:	f36f 0300 	bfc	r3, #0, #1
            track_cnt++;
 800f9e2:	f108 0801 	add.w	r8, r8, #1
            t.grow_dsc_calc = 0;
 800f9e6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f9ea:	9b02      	ldr	r3, [sp, #8]
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	ee18 3a10 	vmov	r3, s16
 800f9f2:	f7ff fdad 	bl	800f550 <find_track_end>
            total_track_cross_size += t.track_cross_size + track_gap;
 800f9f6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800f9fa:	9904      	ldr	r1, [sp, #16]
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800f9fc:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 800f9fe:	440b      	add	r3, r1
 800fa00:	441e      	add	r6, r3
 800fa02:	b236      	sxth	r6, r6
            track_first_item = next_track_first_item;
 800fa04:	e795      	b.n	800f932 <flex_update+0x1b6>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 800fa06:	f7f5 faee 	bl	8004fe6 <lv_obj_get_content_width>
 800fa0a:	e7a5      	b.n	800f958 <flex_update+0x1dc>
 800fa0c:	2000adb8 	.word	0x2000adb8
 800fa10:	2000adbc 	.word	0x2000adbc
 800fa14:	2000adb4 	.word	0x2000adb4
 800fa18:	2000adb6 	.word	0x2000adb6
        t.grow_dsc_calc = 1;
 800fa1c:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800fa20:	463a      	mov	r2, r7
 800fa22:	a914      	add	r1, sp, #80	; 0x50
 800fa24:	4620      	mov	r0, r4
        t.grow_dsc_calc = 1;
 800fa26:	f043 0301 	orr.w	r3, r3, #1
 800fa2a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800fa2e:	ab18      	add	r3, sp, #96	; 0x60
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	9b02      	ldr	r3, [sp, #8]
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	ee18 3a10 	vmov	r3, s16
 800fa3a:	f7ff fd89 	bl	800f550 <find_track_end>
        if(rtl && !f.row) {
 800fa3e:	9b03      	ldr	r3, [sp, #12]
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800fa40:	9007      	str	r0, [sp, #28]
        if(rtl && !f.row) {
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800fa48:	d106      	bne.n	800fa58 <flex_update+0x2dc>
 800fa4a:	07da      	lsls	r2, r3, #31
            *cross_pos -= t.track_cross_size;
 800fa4c:	bf5f      	itttt	pl
 800fa4e:	882a      	ldrhpl	r2, [r5, #0]
 800fa50:	f8bd 1060 	ldrhpl.w	r1, [sp, #96]	; 0x60
 800fa54:	1a52      	subpl	r2, r2, r1
 800fa56:	802a      	strhpl	r2, [r5, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800fa58:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 800fa5c:	f003 0301 	and.w	r3, r3, #1
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800fa60:	4969      	ldr	r1, [pc, #420]	; (800fc08 <flex_update+0x48c>)
 800fa62:	f04f 0e14 	mov.w	lr, #20
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800fa66:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800fa68:	2b00      	cmp	r3, #0
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800fa6a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800fa6e:	bf18      	it	ne
 800fa70:	460b      	movne	r3, r1
 800fa72:	4866      	ldr	r0, [pc, #408]	; (800fc0c <flex_update+0x490>)
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 800fa74:	920c      	str	r2, [sp, #48]	; 0x30
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800fa76:	4a66      	ldr	r2, [pc, #408]	; (800fc10 <flex_update+0x494>)
 800fa78:	9715      	str	r7, [sp, #84]	; 0x54
 800fa7a:	bf08      	it	eq
 800fa7c:	4613      	moveq	r3, r2
 800fa7e:	9305      	str	r3, [sp, #20]
 800fa80:	4b64      	ldr	r3, [pc, #400]	; (800fc14 <flex_update+0x498>)
 800fa82:	bf08      	it	eq
 800fa84:	4603      	moveq	r3, r0
 800fa86:	930d      	str	r3, [sp, #52]	; 0x34
 800fa88:	bf0c      	ite	eq
 800fa8a:	460b      	moveq	r3, r1
 800fa8c:	4613      	movne	r3, r2
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800fa8e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 800fa92:	930a      	str	r3, [sp, #40]	; 0x28
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800fa94:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800fa98:	1ac9      	subs	r1, r1, r3
 800fa9a:	e9dd a31b 	ldrd	sl, r3, [sp, #108]	; 0x6c
 800fa9e:	b209      	sxth	r1, r1
 800faa0:	fb0e ae03 	mla	lr, lr, r3, sl
        for(i = 0; i < t->grow_item_cnt; i++) {
 800faa4:	4650      	mov	r0, sl
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 800faa6:	460f      	mov	r7, r1
        lv_coord_t grow_value_sum = 0;
 800faa8:	f04f 0c00 	mov.w	ip, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800faac:	4586      	cmp	lr, r0
 800faae:	d153      	bne.n	800fb58 <flex_update+0x3dc>
 800fab0:	4653      	mov	r3, sl
        grow_reiterate = false;
 800fab2:	2600      	movs	r6, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 800fab4:	459e      	cmp	lr, r3
 800fab6:	d15e      	bne.n	800fb76 <flex_update+0x3fa>
    while(grow_reiterate) {
 800fab8:	2e00      	cmp	r6, #0
 800faba:	d1f3      	bne.n	800faa4 <flex_update+0x328>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800fabc:	f241 426a 	movw	r2, #5226	; 0x146a
 800fac0:	4631      	mov	r1, r6
 800fac2:	4620      	mov	r0, r4
 800fac4:	f7f7 fd00 	bl	80074c8 <lv_obj_get_style_prop>
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800fac8:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    return (lv_base_dir_t)v.num;
 800facc:	b2c3      	uxtb	r3, r0
 800face:	ee18 1a10 	vmov	r1, s16
 800fad2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800fad6:	9306      	str	r3, [sp, #24]
 800fad8:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
    lv_coord_t main_pos = 0;
 800fadc:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	ab13      	add	r3, sp, #76	; 0x4c
    lv_coord_t place_gap = 0;
 800fae4:	f8ad 604e 	strh.w	r6, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800faee:	f7ff fcd7 	bl	800f4a0 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 800faf2:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800faf6:	07da      	lsls	r2, r3, #31
 800faf8:	d50a      	bpl.n	800fb10 <flex_update+0x394>
 800fafa:	9b06      	ldr	r3, [sp, #24]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d107      	bne.n	800fb10 <flex_update+0x394>
 800fb00:	4620      	mov	r0, r4
 800fb02:	f7f5 fa70 	bl	8004fe6 <lv_obj_get_content_width>
 800fb06:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fb0a:	4418      	add	r0, r3
 800fb0c:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 800fb10:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fb12:	4620      	mov	r0, r4
 800fb14:	f7f8 f825 	bl	8007b62 <lv_obj_get_child>
 800fb18:	f104 0a08 	add.w	sl, r4, #8
 800fb1c:	4606      	mov	r6, r0
    while(item && item_first_id != item_last_id) {
 800fb1e:	b11e      	cbz	r6, 800fb28 <flex_update+0x3ac>
 800fb20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb22:	9a07      	ldr	r2, [sp, #28]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d14e      	bne.n	800fbc6 <flex_update+0x44a>
        lv_mem_buf_release(t.grow_dsc);
 800fb28:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800fb2a:	f007 ff01 	bl	8017930 <lv_mem_buf_release>
        if(rtl && !f.row) {
 800fb2e:	9a03      	ldr	r2, [sp, #12]
 800fb30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800fb34:	2a01      	cmp	r2, #1
 800fb36:	f040 8192 	bne.w	800fe5e <flex_update+0x6e2>
 800fb3a:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
 800fb3e:	f9b5 2000 	ldrsh.w	r2, [r5]
 800fb42:	07c0      	lsls	r0, r0, #31
 800fb44:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 800fb48:	f100 8189 	bmi.w	800fe5e <flex_update+0x6e2>
            *cross_pos -= gap + track_gap;
 800fb4c:	440b      	add	r3, r1
 800fb4e:	1ad3      	subs	r3, r2, r3
            *cross_pos += t.track_cross_size + gap + track_gap;
 800fb50:	b21b      	sxth	r3, r3
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 800fb52:	9f07      	ldr	r7, [sp, #28]
 800fb54:	802b      	strh	r3, [r5, #0]
 800fb56:	e721      	b.n	800f99c <flex_update+0x220>
            if(t->grow_dsc[i].clamped == 0) {
 800fb58:	7c03      	ldrb	r3, [r0, #16]
 800fb5a:	3014      	adds	r0, #20
 800fb5c:	07de      	lsls	r6, r3, #31
                grow_value_sum += t->grow_dsc[i].grow_value;
 800fb5e:	bf55      	itete	pl
 800fb60:	f850 3c08 	ldrpl.w	r3, [r0, #-8]
                grow_max_size -= t->grow_dsc[i].final_size;
 800fb64:	f830 2c0c 	ldrhmi.w	r2, [r0, #-12]
                grow_value_sum += t->grow_dsc[i].grow_value;
 800fb68:	449c      	addpl	ip, r3
                grow_max_size -= t->grow_dsc[i].final_size;
 800fb6a:	1abf      	submi	r7, r7, r2
                grow_value_sum += t->grow_dsc[i].grow_value;
 800fb6c:	bf54      	ite	pl
 800fb6e:	fa0f fc8c 	sxthpl.w	ip, ip
                grow_max_size -= t->grow_dsc[i].final_size;
 800fb72:	b23f      	sxthmi	r7, r7
        for(i = 0; i < t->grow_item_cnt; i++) {
 800fb74:	e79a      	b.n	800faac <flex_update+0x330>
            if(t->grow_dsc[i].clamped == 0) {
 800fb76:	f893 9010 	ldrb.w	r9, [r3, #16]
 800fb7a:	f019 0f01 	tst.w	r9, #1
 800fb7e:	d120      	bne.n	800fbc2 <flex_update+0x446>
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800fb80:	f8b3 800c 	ldrh.w	r8, [r3, #12]
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800fb84:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800fb88:	f9b3 b004 	ldrsh.w	fp, [r3, #4]
                grow_unit = grow_max_size / grow_value_sum;
 800fb8c:	fb97 f0fc 	sdiv	r0, r7, ip
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800fb90:	fb10 f008 	smulbb	r0, r0, r8
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800fb94:	ebac 0c08 	sub.w	ip, ip, r8
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 800fb98:	b200      	sxth	r0, r0
                grow_value_sum -= t->grow_dsc[i].grow_value;
 800fb9a:	fa0f fc8c 	sxth.w	ip, ip
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 800fb9e:	4282      	cmp	r2, r0
 800fba0:	bfa8      	it	ge
 800fba2:	4602      	movge	r2, r0
 800fba4:	455a      	cmp	r2, fp
 800fba6:	bfb8      	it	lt
 800fba8:	465a      	movlt	r2, fp
                if(size_clamp != size) {
 800fbaa:	4290      	cmp	r0, r2
                t->grow_dsc[i].final_size = size_clamp;
 800fbac:	811a      	strh	r2, [r3, #8]
                grow_max_size  -= t->grow_dsc[i].final_size;
 800fbae:	eba7 0202 	sub.w	r2, r7, r2
                    t->grow_dsc[i].clamped = 1;
 800fbb2:	bf1c      	itt	ne
 800fbb4:	f049 0901 	orrne.w	r9, r9, #1
                    grow_reiterate = true;
 800fbb8:	2601      	movne	r6, #1
                grow_max_size  -= t->grow_dsc[i].final_size;
 800fbba:	b217      	sxth	r7, r2
                    t->grow_dsc[i].clamped = 1;
 800fbbc:	bf18      	it	ne
 800fbbe:	f883 9010 	strbne.w	r9, [r3, #16]
        for(i = 0; i < t->grow_item_cnt; i++) {
 800fbc2:	3314      	adds	r3, #20
 800fbc4:	e776      	b.n	800fab4 <flex_update+0x338>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 800fbc6:	4914      	ldr	r1, [pc, #80]	; (800fc18 <flex_update+0x49c>)
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f7f4 f9b1 	bl	8003f30 <lv_obj_has_flag_any>
 800fbce:	4607      	mov	r7, r0
 800fbd0:	b148      	cbz	r0, 800fbe6 <flex_update+0x46a>
        item = get_next_item(cont, f->rev, &item_first_id);
 800fbd2:	f89d 1053 	ldrb.w	r1, [sp, #83]	; 0x53
 800fbd6:	aa15      	add	r2, sp, #84	; 0x54
 800fbd8:	4650      	mov	r0, sl
 800fbda:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800fbde:	f7ff fca3 	bl	800f528 <get_next_item.isra.0>
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	e79b      	b.n	800fb1e <flex_update+0x3a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 800fbe6:	4b0d      	ldr	r3, [pc, #52]	; (800fc1c <flex_update+0x4a0>)
 800fbe8:	4601      	mov	r1, r0
 800fbea:	4630      	mov	r0, r6
 800fbec:	881a      	ldrh	r2, [r3, #0]
 800fbee:	f7f7 fc6b 	bl	80074c8 <lv_obj_get_style_prop>
        if(grow_size) {
 800fbf2:	f010 0fff 	tst.w	r0, #255	; 0xff
 800fbf6:	f000 8112 	beq.w	800fe1e <flex_update+0x6a2>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 800fc00:	4290      	cmp	r0, r2
 800fc02:	d10d      	bne.n	800fc20 <flex_update+0x4a4>
            lv_coord_t s = 0;
 800fc04:	2100      	movs	r1, #0
 800fc06:	e013      	b.n	800fc30 <flex_update+0x4b4>
 800fc08:	0800f489 	.word	0x0800f489
 800fc0c:	08017011 	.word	0x08017011
 800fc10:	0800f495 	.word	0x0800f495
 800fc14:	08017007 	.word	0x08017007
 800fc18:	00018001 	.word	0x00018001
 800fc1c:	2000adba 	.word	0x2000adba
                if(t->grow_dsc[i].item == item) {
 800fc20:	4619      	mov	r1, r3
 800fc22:	f853 7b14 	ldr.w	r7, [r3], #20
 800fc26:	42be      	cmp	r6, r7
 800fc28:	f040 80f7 	bne.w	800fe1a <flex_update+0x69e>
                    s = t->grow_dsc[i].final_size;
 800fc2c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
    dest->x1 = src->x1;
 800fc30:	8ab3      	ldrh	r3, [r6, #20]
            lv_area_copy(&old_coords, &item->coords);
 800fc32:	f106 0714 	add.w	r7, r6, #20
 800fc36:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            area_set_main_size(&item->coords, s);
 800fc3a:	4638      	mov	r0, r7
    dest->y1 = src->y1;
 800fc3c:	8af3      	ldrh	r3, [r6, #22]
 800fc3e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    dest->x2 = src->x2;
 800fc42:	8b33      	ldrh	r3, [r6, #24]
 800fc44:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y2 = src->y2;
 800fc48:	8b73      	ldrh	r3, [r6, #26]
 800fc4a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 800fc4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc50:	4798      	blx	r3
            if(f->row) item->w_layout = 1;
 800fc52:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
            if(area_get_main_size(&old_coords) != area_get_main_size(&item->coords)) {
 800fc56:	a816      	add	r0, sp, #88	; 0x58
            if(f->row) item->w_layout = 1;
 800fc58:	f013 0f01 	tst.w	r3, #1
 800fc5c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800fc60:	bf14      	ite	ne
 800fc62:	f043 0304 	orrne.w	r3, r3, #4
            else item->h_layout = 1;
 800fc66:	f043 0302 	orreq.w	r3, r3, #2
 800fc6a:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
            if(area_get_main_size(&old_coords) != area_get_main_size(&item->coords)) {
 800fc6e:	9b05      	ldr	r3, [sp, #20]
 800fc70:	4798      	blx	r3
 800fc72:	4680      	mov	r8, r0
 800fc74:	9b05      	ldr	r3, [sp, #20]
 800fc76:	4638      	mov	r0, r7
 800fc78:	4798      	blx	r3
 800fc7a:	4580      	cmp	r8, r0
 800fc7c:	d011      	beq.n	800fca2 <flex_update+0x526>
                lv_obj_invalidate(item);
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f7f5 fafa 	bl	8005278 <lv_obj_invalidate>
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 800fc84:	aa16      	add	r2, sp, #88	; 0x58
 800fc86:	2123      	movs	r1, #35	; 0x23
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7f2 f9cd 	bl	8002028 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 800fc8e:	4630      	mov	r0, r6
 800fc90:	f7f7 ff64 	bl	8007b5c <lv_obj_get_parent>
 800fc94:	4632      	mov	r2, r6
 800fc96:	2122      	movs	r1, #34	; 0x22
 800fc98:	f7f2 f9c6 	bl	8002028 <lv_event_send>
                lv_obj_invalidate(item);
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f7f5 faeb 	bl	8005278 <lv_obj_invalidate>
        switch(f->cross_place) {
 800fca2:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	f000 80c0 	beq.w	800fe2c <flex_update+0x6b0>
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	f040 80c7 	bne.w	800fe40 <flex_update+0x6c4>
            cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 800fcb2:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 800fcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcb8:	3001      	adds	r0, #1
 800fcba:	f020 0801 	bic.w	r8, r0, #1
 800fcbe:	f106 0014 	add.w	r0, r6, #20
 800fcc2:	4798      	blx	r3
 800fcc4:	eba8 0000 	sub.w	r0, r8, r0
 800fcc8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800fccc:	f340 074f 	sbfx	r7, r0, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 800fcd0:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800fcd4:	07db      	lsls	r3, r3, #31
 800fcd6:	d50b      	bpl.n	800fcf0 <flex_update+0x574>
 800fcd8:	9b06      	ldr	r3, [sp, #24]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d108      	bne.n	800fcf0 <flex_update+0x574>
 800fcde:	9b05      	ldr	r3, [sp, #20]
 800fce0:	f106 0014 	add.w	r0, r6, #20
 800fce4:	4798      	blx	r3
 800fce6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fcea:	1a18      	subs	r0, r3, r0
 800fcec:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800fcf0:	f243 020c 	movw	r2, #12300	; 0x300c
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	f7f7 fbe6 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800fcfc:	f243 020d 	movw	r2, #12301	; 0x300d
 800fd00:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800fd02:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 800fd04:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7f7 fbdd 	bl	80074c8 <lv_obj_get_style_prop>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800fd0e:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
    return (lv_coord_t)v.num;
 800fd12:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800fd14:	4680      	mov	r8, r0
        lv_coord_t w = lv_obj_get_width(item);
 800fd16:	4630      	mov	r0, r6
    return (lv_coord_t)v.num;
 800fd18:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd1a:	f7f5 f958 	bl	8004fce <lv_obj_get_width>
 800fd1e:	900e      	str	r0, [sp, #56]	; 0x38
        lv_coord_t h = lv_obj_get_height(item);
 800fd20:	4630      	mov	r0, r6
 800fd22:	f7f5 f95a 	bl	8004fda <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800fd26:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800fd2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fd2e:	d111      	bne.n	800fd54 <flex_update+0x5d8>
 800fd30:	f42b 41c0 	bic.w	r1, fp, #24576	; 0x6000
 800fd34:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
 800fd38:	dc0c      	bgt.n	800fd54 <flex_update+0x5d8>
 800fd3a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800fd3e:	468b      	mov	fp, r1
 800fd40:	bfc8      	it	gt
 800fd42:	f5c1 7b7a 	rsbgt	fp, r1, #1000	; 0x3e8
 800fd46:	fb0b fb02 	mul.w	fp, fp, r2
 800fd4a:	2264      	movs	r2, #100	; 0x64
 800fd4c:	fb9b fbf2 	sdiv	fp, fp, r2
 800fd50:	fa0f fb8b 	sxth.w	fp, fp
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800fd54:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 800fd58:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 800fd5c:	d10f      	bne.n	800fd7e <flex_update+0x602>
 800fd5e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800fd62:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800fd66:	dc0a      	bgt.n	800fd7e <flex_update+0x602>
 800fd68:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800fd6c:	f04f 0364 	mov.w	r3, #100	; 0x64
 800fd70:	bfc8      	it	gt
 800fd72:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800fd76:	4350      	muls	r0, r2
 800fd78:	fb90 f3f3 	sdiv	r3, r0, r3
 800fd7c:	b21b      	sxth	r3, r3
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fd7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fd80:	8ab1      	ldrh	r1, [r6, #20]
        diff_x += f->row ? main_pos : cross_pos;
 800fd82:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fd86:	1a51      	subs	r1, r2, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fd88:	8af2      	ldrh	r2, [r6, #22]
        diff_x += f->row ? main_pos : cross_pos;
 800fd8a:	f010 0001 	ands.w	r0, r0, #1
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fd8e:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fd90:	990c      	ldr	r1, [sp, #48]	; 0x30
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 800fd92:	fa1f fb8b 	uxth.w	fp, fp
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fd96:	eba1 0202 	sub.w	r2, r1, r2
        diff_x += f->row ? main_pos : cross_pos;
 800fd9a:	bf14      	ite	ne
 800fd9c:	f8bd 104c 	ldrhne.w	r1, [sp, #76]	; 0x4c
 800fda0:	b2b9      	uxtheq	r1, r7
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fda2:	4413      	add	r3, r2
        diff_x += f->row ? main_pos : cross_pos;
 800fda4:	448b      	add	fp, r1
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 800fda6:	b29b      	uxth	r3, r3
        diff_x += f->row ? main_pos : cross_pos;
 800fda8:	fa1f fb8b 	uxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d049      	beq.n	800fe44 <flex_update+0x6c8>
 800fdb0:	b2bf      	uxth	r7, r7
 800fdb2:	441f      	add	r7, r3
 800fdb4:	b2bf      	uxth	r7, r7
        if(diff_x || diff_y) {
 800fdb6:	ea5b 0307 	orrs.w	r3, fp, r7
 800fdba:	d018      	beq.n	800fdee <flex_update+0x672>
            lv_obj_invalidate(item);
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	f7f5 fa5b 	bl	8005278 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 800fdc2:	8ab3      	ldrh	r3, [r6, #20]
            lv_obj_invalidate(item);
 800fdc4:	4630      	mov	r0, r6
            item->coords.x1 += diff_x;
 800fdc6:	445b      	add	r3, fp
 800fdc8:	82b3      	strh	r3, [r6, #20]
            item->coords.x2 += diff_x;
 800fdca:	8b33      	ldrh	r3, [r6, #24]
 800fdcc:	445b      	add	r3, fp
 800fdce:	8333      	strh	r3, [r6, #24]
            item->coords.y1 += diff_y;
 800fdd0:	8af3      	ldrh	r3, [r6, #22]
 800fdd2:	443b      	add	r3, r7
 800fdd4:	82f3      	strh	r3, [r6, #22]
            item->coords.y2 += diff_y;
 800fdd6:	8b73      	ldrh	r3, [r6, #26]
 800fdd8:	443b      	add	r3, r7
 800fdda:	8373      	strh	r3, [r6, #26]
            lv_obj_invalidate(item);
 800fddc:	f7f5 fa4c 	bl	8005278 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, true);
 800fde0:	2301      	movs	r3, #1
 800fde2:	b23a      	sxth	r2, r7
 800fde4:	4630      	mov	r0, r6
 800fde6:	fa0f f18b 	sxth.w	r1, fp
 800fdea:	f7f5 f99c 	bl	8005126 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 800fdee:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 800fdf2:	07df      	lsls	r7, r3, #31
 800fdf4:	d502      	bpl.n	800fdfc <flex_update+0x680>
 800fdf6:	9b06      	ldr	r3, [sp, #24]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d026      	beq.n	800fe4a <flex_update+0x6ce>
 800fdfc:	9b05      	ldr	r3, [sp, #20]
 800fdfe:	f106 0014 	add.w	r0, r6, #20
 800fe02:	4798      	blx	r3
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	4418      	add	r0, r3
 800fe08:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 800fe0c:	4418      	add	r0, r3
 800fe0e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fe12:	4418      	add	r0, r3
 800fe14:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 800fe18:	e6db      	b.n	800fbd2 <flex_update+0x456>
            for(i = 0; i < t->grow_item_cnt; i++) {
 800fe1a:	3001      	adds	r0, #1
 800fe1c:	e6f0      	b.n	800fc00 <flex_update+0x484>
            item->h_layout = 0;
 800fe1e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 800fe22:	f023 0306 	bic.w	r3, r3, #6
 800fe26:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 800fe2a:	e73a      	b.n	800fca2 <flex_update+0x526>
            cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 800fe2c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 800fe30:	f106 0014 	add.w	r0, r6, #20
 800fe34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe36:	4798      	blx	r3
 800fe38:	eba8 0000 	sub.w	r0, r8, r0
 800fe3c:	b207      	sxth	r7, r0
            break;
 800fe3e:	e747      	b.n	800fcd0 <flex_update+0x554>
        switch(f->cross_place) {
 800fe40:	2700      	movs	r7, #0
 800fe42:	e745      	b.n	800fcd0 <flex_update+0x554>
        diff_y += f->row ? cross_pos : main_pos;
 800fe44:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800fe48:	e7b3      	b.n	800fdb2 <flex_update+0x636>
        else main_pos -= item_gap + place_gap;
 800fe4a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800fe4e:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 800fe52:	1a9b      	subs	r3, r3, r2
 800fe54:	9a02      	ldr	r2, [sp, #8]
 800fe56:	1a9b      	subs	r3, r3, r2
 800fe58:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800fe5c:	e6b9      	b.n	800fbd2 <flex_update+0x456>
            *cross_pos += t.track_cross_size + gap + track_gap;
 800fe5e:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 800fe62:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 800fe66:	440a      	add	r2, r1
 800fe68:	4413      	add	r3, r2
 800fe6a:	882a      	ldrh	r2, [r5, #0]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	e66f      	b.n	800fb50 <flex_update+0x3d4>
    if(rtl && !f.row) {
 800fe70:	9b03      	ldr	r3, [sp, #12]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	f43f ad4b 	beq.w	800f90e <flex_update+0x192>
 800fe78:	e57c      	b.n	800f974 <flex_update+0x1f8>
 800fe7a:	bf00      	nop

0800fe7c <lv_flex_init>:
{
 800fe7c:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 800fe7e:	2100      	movs	r1, #0
 800fe80:	480d      	ldr	r0, [pc, #52]	; (800feb8 <lv_flex_init+0x3c>)
 800fe82:	f7f5 f825 	bl	8004ed0 <lv_layout_register>
 800fe86:	4b0d      	ldr	r3, [pc, #52]	; (800febc <lv_flex_init+0x40>)
 800fe88:	6018      	str	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop();
 800fe8a:	f008 fb71 	bl	8018570 <lv_style_register_prop>
 800fe8e:	4b0c      	ldr	r3, [pc, #48]	; (800fec0 <lv_flex_init+0x44>)
 800fe90:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800fe92:	f008 fb6d 	bl	8018570 <lv_style_register_prop>
 800fe96:	4b0b      	ldr	r3, [pc, #44]	; (800fec4 <lv_flex_init+0x48>)
 800fe98:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800fe9c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800fe9e:	f008 fb67 	bl	8018570 <lv_style_register_prop>
 800fea2:	4b09      	ldr	r3, [pc, #36]	; (800fec8 <lv_flex_init+0x4c>)
 800fea4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800fea8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 800feaa:	f008 fb61 	bl	8018570 <lv_style_register_prop>
 800feae:	4b07      	ldr	r3, [pc, #28]	; (800fecc <lv_flex_init+0x50>)
 800feb0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800feb4:	8018      	strh	r0, [r3, #0]
}
 800feb6:	bd08      	pop	{r3, pc}
 800feb8:	0800f77d 	.word	0x0800f77d
 800febc:	2000adc0 	.word	0x2000adc0
 800fec0:	2000adb8 	.word	0x2000adb8
 800fec4:	2000adbc 	.word	0x2000adbc
 800fec8:	2000adb4 	.word	0x2000adb4
 800fecc:	2000adb6 	.word	0x2000adb6

0800fed0 <lv_obj_set_flex_flow>:
{
 800fed0:	460a      	mov	r2, r1
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 800fed2:	4908      	ldr	r1, [pc, #32]	; (800fef4 <lv_obj_set_flex_flow+0x24>)
 800fed4:	2300      	movs	r3, #0
 800fed6:	8809      	ldrh	r1, [r1, #0]
 800fed8:	b510      	push	{r4, lr}
 800feda:	4604      	mov	r4, r0
 800fedc:	f7f7 fbd8 	bl	8007690 <lv_obj_set_local_style_prop>
static inline void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 800fee0:	4a05      	ldr	r2, [pc, #20]	; (800fef8 <lv_obj_set_flex_flow+0x28>)
 800fee2:	2300      	movs	r3, #0
 800fee4:	4620      	mov	r0, r4
 800fee6:	f241 0169 	movw	r1, #4201	; 0x1069
 800feea:	8812      	ldrh	r2, [r2, #0]
}
 800feec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fef0:	f7f7 bbce 	b.w	8007690 <lv_obj_set_local_style_prop>
 800fef4:	2000adb8 	.word	0x2000adb8
 800fef8:	2000adc0 	.word	0x2000adc0

0800fefc <lv_obj_set_flex_align>:
{
 800fefc:	b570      	push	{r4, r5, r6, lr}
 800fefe:	4616      	mov	r6, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 800ff00:	460a      	mov	r2, r1
 800ff02:	490f      	ldr	r1, [pc, #60]	; (800ff40 <lv_obj_set_flex_align+0x44>)
 800ff04:	461d      	mov	r5, r3
 800ff06:	2300      	movs	r3, #0
 800ff08:	4604      	mov	r4, r0
 800ff0a:	8809      	ldrh	r1, [r1, #0]
 800ff0c:	f7f7 fbc0 	bl	8007690 <lv_obj_set_local_style_prop>
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 800ff10:	490c      	ldr	r1, [pc, #48]	; (800ff44 <lv_obj_set_flex_align+0x48>)
 800ff12:	4632      	mov	r2, r6
 800ff14:	4620      	mov	r0, r4
 800ff16:	2300      	movs	r3, #0
 800ff18:	8809      	ldrh	r1, [r1, #0]
 800ff1a:	f7f7 fbb9 	bl	8007690 <lv_obj_set_local_style_prop>
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 800ff1e:	490a      	ldr	r1, [pc, #40]	; (800ff48 <lv_obj_set_flex_align+0x4c>)
 800ff20:	462a      	mov	r2, r5
 800ff22:	4620      	mov	r0, r4
 800ff24:	2300      	movs	r3, #0
 800ff26:	8809      	ldrh	r1, [r1, #0]
 800ff28:	f7f7 fbb2 	bl	8007690 <lv_obj_set_local_style_prop>
 800ff2c:	4a07      	ldr	r2, [pc, #28]	; (800ff4c <lv_obj_set_flex_align+0x50>)
 800ff2e:	4620      	mov	r0, r4
 800ff30:	2300      	movs	r3, #0
 800ff32:	8812      	ldrh	r2, [r2, #0]
 800ff34:	f241 0169 	movw	r1, #4201	; 0x1069
}
 800ff38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff3c:	f7f7 bba8 	b.w	8007690 <lv_obj_set_local_style_prop>
 800ff40:	2000adbc 	.word	0x2000adbc
 800ff44:	2000adb4 	.word	0x2000adb4
 800ff48:	2000adb6 	.word	0x2000adb6
 800ff4c:	2000adc0 	.word	0x2000adc0

0800ff50 <lv_obj_set_flex_grow>:
{
 800ff50:	460a      	mov	r2, r1
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 800ff52:	4902      	ldr	r1, [pc, #8]	; (800ff5c <lv_obj_set_flex_grow+0xc>)
 800ff54:	2300      	movs	r3, #0
 800ff56:	8809      	ldrh	r1, [r1, #0]
 800ff58:	f7f7 bb9a 	b.w	8007690 <lv_obj_set_local_style_prop>
 800ff5c:	2000adba 	.word	0x2000adba

0800ff60 <grid_align>:
 * @param size_array array with the track sizes
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num, lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 800ff60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ff66:	4605      	mov	r5, r0
 800ff68:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 800ff6c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 800ff70:	b111      	cbz	r1, 800ff78 <grid_align+0x18>
        pos_array[0] = 0;
 800ff72:	2200      	movs	r2, #0
            pos_array[0] = 0;
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
            break;
        case LV_GRID_ALIGN_SPACE_AROUND:
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
            pos_array[0] = gap / 2;
 800ff74:	8022      	strh	r2, [r4, #0]
            break;
 800ff76:	e021      	b.n	800ffbc <grid_align+0x5c>
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 800ff78:	1f10      	subs	r0, r2, #4
 800ff7a:	b2c0      	uxtb	r0, r0
 800ff7c:	2802      	cmp	r0, #2
 800ff7e:	d803      	bhi.n	800ff88 <grid_align+0x28>
            gap = 0;
 800ff80:	2e01      	cmp	r6, #1
 800ff82:	460b      	mov	r3, r1
 800ff84:	bf08      	it	eq
 800ff86:	2201      	moveq	r2, #1
        for(i = 0; i < track_num; i++) {
 800ff88:	46be      	mov	lr, r7
 800ff8a:	eb07 0846 	add.w	r8, r7, r6, lsl #1
    lv_coord_t grid_size = 0;
 800ff8e:	2000      	movs	r0, #0
 800ff90:	b299      	uxth	r1, r3
        for(i = 0; i < track_num; i++) {
 800ff92:	45f0      	cmp	r8, lr
 800ff94:	b280      	uxth	r0, r0
 800ff96:	d109      	bne.n	800ffac <grid_align+0x4c>
        switch(align) {
 800ff98:	f04f 0e00 	mov.w	lr, #0
 800ff9c:	2a06      	cmp	r2, #6
 800ff9e:	d80d      	bhi.n	800ffbc <grid_align+0x5c>
 800ffa0:	e8df f002 	tbb	[pc, r2]
 800ffa4:	0c28200a 	.word	0x0c28200a
 800ffa8:	3643      	.short	0x3643
 800ffaa:	2b          	.byte	0x2b
 800ffab:	00          	.byte	0x00
            grid_size += size_array[i] + gap;
 800ffac:	f93e 9b02 	ldrsh.w	r9, [lr], #2
 800ffb0:	4408      	add	r0, r1
 800ffb2:	4448      	add	r0, r9
 800ffb4:	b200      	sxth	r0, r0
        for(i = 0; i < track_num; i++) {
 800ffb6:	e7ec      	b.n	800ff92 <grid_align+0x32>
            pos_array[0] = 0;
 800ffb8:	f8a4 e000 	strh.w	lr, [r4]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	1e70      	subs	r0, r6, #1
 800ffc0:	4290      	cmp	r0, r2
 800ffc2:	d83c      	bhi.n	801003e <grid_align+0xde>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 800ffc4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 800ffce:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 800ffd2:	4418      	add	r0, r3
 800ffd4:	8823      	ldrh	r3, [r4, #0]
 800ffd6:	1ac0      	subs	r0, r0, r3
 800ffd8:	b200      	sxth	r0, r0

    if(reverse) {
 800ffda:	f1bc 0f00 	cmp.w	ip, #0
 800ffde:	d144      	bne.n	801006a <grid_align+0x10a>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 800ffe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        grid_size -= gap;
 800ffe4:	1a41      	subs	r1, r0, r1
            pos_array[0] = (cont_size - grid_size) / 2;
 800ffe6:	b209      	sxth	r1, r1
 800ffe8:	1a69      	subs	r1, r5, r1
 800ffea:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800ffee:	1049      	asrs	r1, r1, #1
            pos_array[0] = cont_size - grid_size;
 800fff0:	8021      	strh	r1, [r4, #0]
            break;
 800fff2:	e7e3      	b.n	800ffbc <grid_align+0x5c>
            pos_array[0] = cont_size - grid_size;
 800fff4:	4429      	add	r1, r5
 800fff6:	1a09      	subs	r1, r1, r0
 800fff8:	e7fa      	b.n	800fff0 <grid_align+0x90>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 800fffa:	194b      	adds	r3, r1, r5
 800fffc:	1e71      	subs	r1, r6, #1
            pos_array[0] = 0;
 800fffe:	f8a4 e000 	strh.w	lr, [r4]
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 8010002:	1a1b      	subs	r3, r3, r0
 8010004:	b209      	sxth	r1, r1
 8010006:	b21b      	sxth	r3, r3
 8010008:	fb93 f3f1 	sdiv	r3, r3, r1
 801000c:	b21b      	sxth	r3, r3
            break;
 801000e:	e7d5      	b.n	800ffbc <grid_align+0x5c>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 8010010:	194a      	adds	r2, r1, r5
 8010012:	b233      	sxth	r3, r6
 8010014:	1a12      	subs	r2, r2, r0
 8010016:	b212      	sxth	r2, r2
 8010018:	fb92 f2f3 	sdiv	r2, r2, r3
            pos_array[0] = gap / 2;
 801001c:	f3c2 31c0 	ubfx	r1, r2, #15, #1
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 8010020:	b213      	sxth	r3, r2
            pos_array[0] = gap / 2;
 8010022:	fa01 f282 	sxtah	r2, r1, r2
 8010026:	1052      	asrs	r2, r2, #1
 8010028:	e7a4      	b.n	800ff74 <grid_align+0x14>
            gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 801002a:	194b      	adds	r3, r1, r5
 801002c:	1c71      	adds	r1, r6, #1
 801002e:	1a1b      	subs	r3, r3, r0
 8010030:	b209      	sxth	r1, r1
 8010032:	b21b      	sxth	r3, r3
 8010034:	fb93 f3f1 	sdiv	r3, r3, r1
 8010038:	b21b      	sxth	r3, r3
            pos_array[0] = gap;
 801003a:	8023      	strh	r3, [r4, #0]
            break;
 801003c:	e7be      	b.n	800ffbc <grid_align+0x5c>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 801003e:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8010042:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8010046:	3201      	adds	r2, #1
 8010048:	4471      	add	r1, lr
 801004a:	4419      	add	r1, r3
 801004c:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    for(i = 0; i < track_num - 1; i++) {
 8010050:	e7b6      	b.n	800ffc0 <grid_align+0x60>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 8010052:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8010056:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 801005a:	440a      	add	r2, r1
 801005c:	1aaa      	subs	r2, r5, r2
 801005e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
        for(i = 0; i < track_num; i++) {
 8010062:	3301      	adds	r3, #1
 8010064:	42b3      	cmp	r3, r6
 8010066:	d1f4      	bne.n	8010052 <grid_align+0xf2>
 8010068:	e7ba      	b.n	800ffe0 <grid_align+0x80>
 801006a:	2300      	movs	r3, #0
 801006c:	e7fa      	b.n	8010064 <grid_align+0x104>
	...

08010070 <grid_update>:
{
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8010074:	4fcc      	ldr	r7, [pc, #816]	; (80103a8 <grid_update+0x338>)
 8010076:	b099      	sub	sp, #100	; 0x64
 8010078:	4604      	mov	r4, r0
 801007a:	2100      	movs	r1, #0
 801007c:	883a      	ldrh	r2, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 801007e:	4ecb      	ldr	r6, [pc, #812]	; (80103ac <grid_update+0x33c>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8010080:	f7f7 fa22 	bl	80074c8 <lv_obj_get_style_prop>
 8010084:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 8010086:	2100      	movs	r1, #0
 8010088:	8832      	ldrh	r2, [r6, #0]
 801008a:	4620      	mov	r0, r4
 801008c:	f7f7 fa1c 	bl	80074c8 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 8010090:	9705      	str	r7, [sp, #20]
 8010092:	2d00      	cmp	r5, #0
 8010094:	d06a      	beq.n	801016c <grid_update+0xfc>
 8010096:	2800      	cmp	r0, #0
 8010098:	d068      	beq.n	801016c <grid_update+0xfc>
    if(lv_obj_get_child(cont, 0) == NULL) {
 801009a:	2100      	movs	r1, #0
 801009c:	4620      	mov	r0, r4
 801009e:	f7f7 fd60 	bl	8007b62 <lv_obj_get_child>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d165      	bne.n	8010172 <grid_update+0x102>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 80100a6:	211c      	movs	r1, #28
 80100a8:	a811      	add	r0, sp, #68	; 0x44
 80100aa:	f007 fe33 	bl	8017d14 <lv_memset_00>
    lv_memset_00(&hint, sizeof(hint));
 80100ae:	210c      	movs	r1, #12
 80100b0:	a80e      	add	r0, sp, #56	; 0x38
 80100b2:	f007 fe2f 	bl	8017d14 <lv_memset_00>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80100b6:	f241 0232 	movw	r2, #4146	; 0x1032
 80100ba:	2100      	movs	r1, #0
 80100bc:	4620      	mov	r0, r4
 80100be:	f7f7 fa03 	bl	80074c8 <lv_obj_get_style_prop>
 80100c2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80100c4:	f241 0212 	movw	r2, #4114	; 0x1012
 80100c8:	2100      	movs	r1, #0
 80100ca:	4620      	mov	r0, r4
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 80100cc:	b2ae      	uxth	r6, r5
 80100ce:	f7f7 f9fb 	bl	80074c8 <lv_obj_get_style_prop>
 80100d2:	fa10 f085 	uxtah	r0, r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80100d6:	f241 0210 	movw	r2, #4112	; 0x1010
 80100da:	2100      	movs	r1, #0
 80100dc:	b285      	uxth	r5, r0
 80100de:	4620      	mov	r0, r4
 80100e0:	f7f7 f9f2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 80100e4:	4406      	add	r6, r0
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 80100e6:	8aa0      	ldrh	r0, [r4, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 80100e8:	b2b6      	uxth	r6, r6
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 80100ea:	4405      	add	r5, r0
 80100ec:	4620      	mov	r0, r4
 80100ee:	f7f5 ff9d 	bl	800602c <lv_obj_get_scroll_x>
 80100f2:	b2ad      	uxth	r5, r5
 80100f4:	1a28      	subs	r0, r5, r0
 80100f6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 80100fa:	8ae0      	ldrh	r0, [r4, #22]
 80100fc:	4406      	add	r6, r0
 80100fe:	4620      	mov	r0, r4
 8010100:	f7f5 ffa6 	bl	8006050 <lv_obj_get_scroll_y>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8010104:	2300      	movs	r3, #0
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 8010106:	b2b6      	uxth	r6, r6
 8010108:	1a30      	subs	r0, r6, r0
 801010a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 801010e:	9305      	str	r3, [sp, #20]
 8010110:	68a3      	ldr	r3, [r4, #8]
 8010112:	9905      	ldr	r1, [sp, #20]
 8010114:	685a      	ldr	r2, [r3, #4]
 8010116:	4291      	cmp	r1, r2
 8010118:	f0c0 8215 	bcc.w	8010546 <grid_update+0x4d6>
    lv_mem_buf_release(calc->x);
 801011c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801011e:	f007 fc07 	bl	8017930 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 8010122:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010124:	f007 fc04 	bl	8017930 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 8010128:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801012a:	f007 fc01 	bl	8017930 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 801012e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010130:	f007 fbfe 	bl	8017930 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8010134:	f241 0201 	movw	r2, #4097	; 0x1001
 8010138:	2100      	movs	r1, #0
 801013a:	4620      	mov	r0, r4
 801013c:	f7f7 f9c4 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010140:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8010144:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010146:	2100      	movs	r1, #0
 8010148:	4620      	mov	r0, r4
 801014a:	f7f7 f9bd 	bl	80074c8 <lv_obj_get_style_prop>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 801014e:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 8010152:	b200      	sxth	r0, r0
 8010154:	429d      	cmp	r5, r3
 8010156:	d001      	beq.n	801015c <grid_update+0xec>
 8010158:	4298      	cmp	r0, r3
 801015a:	d102      	bne.n	8010162 <grid_update+0xf2>
        lv_obj_refr_size(cont);
 801015c:	4620      	mov	r0, r4
 801015e:	f7f5 fb01 	bl	8005764 <lv_obj_refr_size>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8010162:	2200      	movs	r2, #0
 8010164:	2125      	movs	r1, #37	; 0x25
 8010166:	4620      	mov	r0, r4
 8010168:	f7f1 ff5e 	bl	8002028 <lv_event_send>
}
 801016c:	b019      	add	sp, #100	; 0x64
 801016e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010172:	8832      	ldrh	r2, [r6, #0]
 8010174:	2100      	movs	r1, #0
 8010176:	4620      	mov	r0, r4
 8010178:	f7f7 f9a6 	bl	80074c8 <lv_obj_get_style_prop>

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 801017c:	2300      	movs	r3, #0
 801017e:	4605      	mov	r5, r0
 8010180:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 8010184:	0058      	lsls	r0, r3, #1
 8010186:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 801018a:	f040 80fc 	bne.w	8010386 <grid_update+0x316>
    c->row_num = count_tracks(row_templ);
 801018e:	9316      	str	r3, [sp, #88]	; 0x58
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8010190:	f007 fd72 	bl	8017c78 <lv_mem_buf_get>
 8010194:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 8010196:	2600      	movs	r6, #0
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8010198:	9816      	ldr	r0, [sp, #88]	; 0x58
 801019a:	0040      	lsls	r0, r0, #1
 801019c:	f007 fd6c 	bl	8017c78 <lv_mem_buf_get>
 80101a0:	9014      	str	r0, [sp, #80]	; 0x50
    for(i = 0; i < c->row_num; i++) {
 80101a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80101a4:	428e      	cmp	r6, r1
 80101a6:	f0c0 80f0 	bcc.w	801038a <grid_update+0x31a>
    lv_coord_t grid_h = 0;
 80101aa:	2200      	movs	r2, #0
            c->h[i] = x;
 80101ac:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
        if(IS_FR(x)) {
 80101b0:	f645 7e9b 	movw	lr, #24475	; 0x5f9b
    uint32_t row_fr_cnt = 0;
 80101b4:	4616      	mov	r6, r2
    for(i = 0; i < c->row_num; i++) {
 80101b6:	4610      	mov	r0, r2
 80101b8:	4281      	cmp	r1, r0
 80101ba:	b297      	uxth	r7, r2
 80101bc:	f040 8136 	bne.w	801042c <grid_update+0x3bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80101c0:	f241 0214 	movw	r2, #4116	; 0x1014
 80101c4:	2100      	movs	r1, #0
 80101c6:	4620      	mov	r0, r4
 80101c8:	f7f7 f97e 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80101cc:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 80101d0:	4620      	mov	r0, r4
 80101d2:	f7f4 ff22 	bl	800501a <lv_obj_get_content_height>
 80101d6:	9916      	ldr	r1, [sp, #88]	; 0x58
    lv_coord_t free_h = cont_h - grid_h;
 80101d8:	1bc2      	subs	r2, r0, r7
        if(IS_FR(x)) {
 80101da:	f645 7c9b 	movw	ip, #24475	; 0x5f9b
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 80101de:	1e4b      	subs	r3, r1, #1
            c->h[i] = (free_h * f) / row_fr_cnt;
 80101e0:	9f14      	ldr	r7, [sp, #80]	; 0x50
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 80101e2:	fb13 f008 	smulbb	r0, r3, r8
    lv_coord_t free_h = cont_h - grid_h;
 80101e6:	1a12      	subs	r2, r2, r0
    for(i = 0; i < c->row_num; i++) {
 80101e8:	2000      	movs	r0, #0
    lv_coord_t free_h = cont_h - grid_h;
 80101ea:	b212      	sxth	r2, r2
    if(free_h < 0) free_h = 0;
 80101ec:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    for(i = 0; i < c->row_num; i++) {
 80101f0:	4281      	cmp	r1, r0
 80101f2:	f040 812e 	bne.w	8010452 <grid_update+0x3e2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 80101f6:	9b05      	ldr	r3, [sp, #20]
 80101f8:	2100      	movs	r1, #0
 80101fa:	4620      	mov	r0, r4
 80101fc:	881a      	ldrh	r2, [r3, #0]
 80101fe:	f7f7 f963 	bl	80074c8 <lv_obj_get_style_prop>
 8010202:	4605      	mov	r5, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8010204:	4620      	mov	r0, r4
 8010206:	f7f4 feee 	bl	8004fe6 <lv_obj_get_content_width>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 801020a:	2300      	movs	r3, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 801020c:	9005      	str	r0, [sp, #20]
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 801020e:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 8010212:	0058      	lsls	r0, r3, #1
 8010214:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8010218:	f040 812a 	bne.w	8010470 <grid_update+0x400>
    c->col_num = count_tracks(col_templ);
 801021c:	9315      	str	r3, [sp, #84]	; 0x54
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 801021e:	f007 fd2b 	bl	8017c78 <lv_mem_buf_get>
 8010222:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 8010224:	2600      	movs	r6, #0
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 8010226:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010228:	0040      	lsls	r0, r0, #1
 801022a:	f007 fd25 	bl	8017c78 <lv_mem_buf_get>
 801022e:	9013      	str	r0, [sp, #76]	; 0x4c
    for(i = 0; i < c->col_num; i++) {
 8010230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010232:	429e      	cmp	r6, r3
 8010234:	f0c0 811e 	bcc.w	8010474 <grid_update+0x404>
    lv_coord_t grid_w = 0;
 8010238:	2100      	movs	r1, #0
            c->w[i] = x;
 801023a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
        if(IS_FR(x)) {
 801023c:	f645 7e9b 	movw	lr, #24475	; 0x5f9b
    uint32_t col_fr_cnt = 0;
 8010240:	460e      	mov	r6, r1
    for(i = 0; i < c->col_num; i++) {
 8010242:	468c      	mov	ip, r1
 8010244:	4563      	cmp	r3, ip
 8010246:	b28f      	uxth	r7, r1
 8010248:	f040 8158 	bne.w	80104fc <grid_update+0x48c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801024c:	f241 0215 	movw	r2, #4117	; 0x1015
 8010250:	2100      	movs	r1, #0
 8010252:	4620      	mov	r0, r4
        if(IS_FR(x)) {
 8010254:	f645 789b 	movw	r8, #24475	; 0x5f9b
 8010258:	f7f7 f936 	bl	80074c8 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 801025c:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    int32_t last_fr_i = -1;
 8010260:	f04f 3eff 	mov.w	lr, #4294967295
    cont_w -= col_gap * (c->col_num - 1);
 8010264:	f10c 32ff 	add.w	r2, ip, #4294967295
 8010268:	fb12 f300 	smulbb	r3, r2, r0
 801026c:	9a05      	ldr	r2, [sp, #20]
 801026e:	1ad3      	subs	r3, r2, r3
    int32_t last_fr_x = 0;
 8010270:	2200      	movs	r2, #0
    lv_coord_t free_w = cont_w - grid_w;
 8010272:	1bdb      	subs	r3, r3, r7
    for(i = 0; i < c->col_num; i++) {
 8010274:	4611      	mov	r1, r2
            c->w[i] = (free_w * f) / col_fr_cnt;
 8010276:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    lv_coord_t free_w = cont_w - grid_w;
 8010278:	b21b      	sxth	r3, r3
    if(free_w < 0) free_w = 0;
 801027a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    for(i = 0; i < c->col_num; i++) {
 801027e:	458c      	cmp	ip, r1
 8010280:	f040 8150 	bne.w	8010524 <grid_update+0x4b4>
    if(last_fr_i >= 0) {
 8010284:	f1be 3fff 	cmp.w	lr, #4294967295
 8010288:	d006      	beq.n	8010298 <grid_update+0x228>
    	c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 801028a:	1ab2      	subs	r2, r6, r2
 801028c:	435a      	muls	r2, r3
 801028e:	fbb2 f2f6 	udiv	r2, r2, r6
 8010292:	1a9b      	subs	r3, r3, r2
 8010294:	f827 301e 	strh.w	r3, [r7, lr, lsl #1]
 8010298:	f241 0215 	movw	r2, #4117	; 0x1015
 801029c:	2100      	movs	r1, #0
 801029e:	4620      	mov	r0, r4
 80102a0:	f7f7 f912 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80102a4:	f241 0214 	movw	r2, #4116	; 0x1014
    return (lv_coord_t)v.num;
 80102a8:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80102ac:	2100      	movs	r1, #0
 80102ae:	4620      	mov	r0, r4
 80102b0:	f7f7 f90a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80102b4:	f241 426a 	movw	r2, #5226	; 0x146a
    return (lv_coord_t)v.num;
 80102b8:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80102ba:	2100      	movs	r1, #0
 80102bc:	4620      	mov	r0, r4
 80102be:	f7f7 f903 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80102c2:	f241 0201 	movw	r2, #4097	; 0x1001
    return (lv_base_dir_t)v.num;
 80102c6:	fa5f f880 	uxtb.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80102ca:	2100      	movs	r1, #0
 80102cc:	4620      	mov	r0, r4
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 80102ce:	f108 33ff 	add.w	r3, r8, #4294967295
 80102d2:	f1d3 0800 	rsbs	r8, r3, #0
 80102d6:	eb48 0803 	adc.w	r8, r8, r3
 80102da:	f7f7 f8f5 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80102de:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 80102e2:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80102e4:	2100      	movs	r1, #0
 80102e6:	4620      	mov	r0, r4
 80102e8:	f7f7 f8ee 	bl	80074c8 <lv_obj_get_style_prop>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 80102ec:	f242 73d1 	movw	r3, #10193	; 0x27d1
    return (lv_coord_t)v.num;
 80102f0:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 80102f4:	4620      	mov	r0, r4
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 80102f6:	429d      	cmp	r5, r3
 80102f8:	bf09      	itett	eq
 80102fa:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
 80102fe:	2500      	movne	r5, #0
 8010300:	f085 0504 	eoreq.w	r5, r5, #4
 8010304:	f3c5 0580 	ubfxeq	r5, r5, #2, #1
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8010308:	f7f4 fe6d 	bl	8004fe6 <lv_obj_get_content_width>
    return (lv_grid_align_t)v.num;
}

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 801030c:	4b28      	ldr	r3, [pc, #160]	; (80103b0 <grid_update+0x340>)
 801030e:	4606      	mov	r6, r0
 8010310:	2100      	movs	r1, #0
 8010312:	4620      	mov	r0, r4
 8010314:	881a      	ldrh	r2, [r3, #0]
 8010316:	f7f7 f8d7 	bl	80074c8 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w, calc_out->x, rev);
 801031a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801031c:	4629      	mov	r1, r5
 801031e:	b2c2      	uxtb	r2, r0
 8010320:	9302      	str	r3, [sp, #8]
 8010322:	4630      	mov	r0, r6
 8010324:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010326:	f8cd 800c 	str.w	r8, [sp, #12]
 801032a:	9301      	str	r3, [sp, #4]
 801032c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	4653      	mov	r3, sl
 8010332:	f7ff fe15 	bl	800ff60 <grid_align>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 8010336:	f242 73d1 	movw	r3, #10193	; 0x27d1
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w, calc_out->x, rev);
 801033a:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 801033e:	4620      	mov	r0, r4
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 8010340:	4599      	cmp	r9, r3
 8010342:	bf09      	itett	eq
 8010344:	f894 5023 	ldrbeq.w	r5, [r4, #35]	; 0x23
 8010348:	2500      	movne	r5, #0
 801034a:	f085 0502 	eoreq.w	r5, r5, #2
 801034e:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 8010352:	f7f4 fe62 	bl	800501a <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 8010356:	4b17      	ldr	r3, [pc, #92]	; (80103b4 <grid_update+0x344>)
 8010358:	4606      	mov	r6, r0
 801035a:	2100      	movs	r1, #0
 801035c:	4620      	mov	r0, r4
 801035e:	881a      	ldrh	r2, [r3, #0]
 8010360:	f7f7 f8b2 	bl	80074c8 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h, calc_out->y, false);
 8010364:	2300      	movs	r3, #0
 8010366:	b2c2      	uxtb	r2, r0
 8010368:	4629      	mov	r1, r5
 801036a:	9303      	str	r3, [sp, #12]
 801036c:	4630      	mov	r0, r6
 801036e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010370:	9302      	str	r3, [sp, #8]
 8010372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010374:	9301      	str	r3, [sp, #4]
 8010376:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	463b      	mov	r3, r7
 801037c:	f7ff fdf0 	bl	800ff60 <grid_align>
 8010380:	f8ad 005e 	strh.w	r0, [sp, #94]	; 0x5e
 8010384:	e693      	b.n	80100ae <grid_update+0x3e>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 8010386:	3301      	adds	r3, #1
 8010388:	e6fa      	b.n	8010180 <grid_update+0x110>
        if(IS_CONTENT(row_templ[i])) {
 801038a:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 801038e:	f645 739b 	movw	r3, #24475	; 0x5f9b
 8010392:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8010396:	429a      	cmp	r2, r3
 8010398:	d146      	bne.n	8010428 <grid_update+0x3b8>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 801039a:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 801039e:	4f06      	ldr	r7, [pc, #24]	; (80103b8 <grid_update+0x348>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80103a0:	f8df a018 	ldr.w	sl, [pc, #24]	; 80103bc <grid_update+0x34c>
 80103a4:	e033      	b.n	801040e <grid_update+0x39e>
 80103a6:	bf00      	nop
 80103a8:	2000add4 	.word	0x2000add4
 80103ac:	2000adc8 	.word	0x2000adc8
 80103b0:	2000adce 	.word	0x2000adce
 80103b4:	2000adc6 	.word	0x2000adc6
 80103b8:	ffffa000 	.word	0xffffa000
 80103bc:	00018001 	.word	0x00018001
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80103c0:	4641      	mov	r1, r8
 80103c2:	4620      	mov	r0, r4
 80103c4:	f7f7 fbcd 	bl	8007b62 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80103c8:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80103ca:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80103cc:	f7f3 fdb0 	bl	8003f30 <lv_obj_has_flag_any>
 80103d0:	4601      	mov	r1, r0
 80103d2:	b9d0      	cbnz	r0, 801040a <grid_update+0x39a>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 80103d4:	4bc0      	ldr	r3, [pc, #768]	; (80106d8 <grid_update+0x668>)
 80103d6:	9006      	str	r0, [sp, #24]
 80103d8:	4658      	mov	r0, fp
 80103da:	881a      	ldrh	r2, [r3, #0]
 80103dc:	f7f7 f874 	bl	80074c8 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 80103e0:	9906      	ldr	r1, [sp, #24]
 80103e2:	b2c0      	uxtb	r0, r0
 80103e4:	2801      	cmp	r0, #1
 80103e6:	d110      	bne.n	801040a <grid_update+0x39a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 80103e8:	4bbc      	ldr	r3, [pc, #752]	; (80106dc <grid_update+0x66c>)
 80103ea:	4658      	mov	r0, fp
 80103ec:	881a      	ldrh	r2, [r3, #0]
 80103ee:	f7f7 f86b 	bl	80074c8 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 80103f2:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 80103f4:	4286      	cmp	r6, r0
 80103f6:	d108      	bne.n	801040a <grid_update+0x39a>
                size = LV_MAX(size, lv_obj_get_height(item));
 80103f8:	4658      	mov	r0, fp
 80103fa:	f7f4 fdee 	bl	8004fda <lv_obj_get_height>
 80103fe:	42b8      	cmp	r0, r7
 8010400:	db03      	blt.n	801040a <grid_update+0x39a>
 8010402:	4658      	mov	r0, fp
 8010404:	f7f4 fde9 	bl	8004fda <lv_obj_get_height>
 8010408:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 801040a:	f108 0801 	add.w	r8, r8, #1
 801040e:	4620      	mov	r0, r4
 8010410:	f7f7 fbb6 	bl	8007b80 <lv_obj_get_child_cnt>
 8010414:	4580      	cmp	r8, r0
 8010416:	d3d3      	bcc.n	80103c0 <grid_update+0x350>
            if(size >= 0) c->h[i] = size;
 8010418:	2f00      	cmp	r7, #0
 801041a:	9b14      	ldr	r3, [sp, #80]	; 0x50
            else c->h[i] = 0;
 801041c:	bfb6      	itet	lt
 801041e:	2200      	movlt	r2, #0
            if(size >= 0) c->h[i] = size;
 8010420:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->h[i] = 0;
 8010424:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->row_num; i++) {
 8010428:	3601      	adds	r6, #1
 801042a:	e6ba      	b.n	80101a2 <grid_update+0x132>
        lv_coord_t x = row_templ[i];
 801042c:	f935 3010 	ldrsh.w	r3, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 8010430:	4573      	cmp	r3, lr
 8010432:	dd05      	ble.n	8010440 <grid_update+0x3d0>
            row_fr_cnt += GET_FR(x);
 8010434:	f5a6 46bf 	sub.w	r6, r6, #24448	; 0x5f80
 8010438:	3e1c      	subs	r6, #28
 801043a:	441e      	add	r6, r3
    for(i = 0; i < c->row_num; i++) {
 801043c:	3001      	adds	r0, #1
 801043e:	e6bb      	b.n	80101b8 <grid_update+0x148>
            grid_h += c->h[i];
 8010440:	bf0d      	iteet	eq
 8010442:	f83c 2010 	ldrheq.w	r2, [ip, r0, lsl #1]
            grid_h += x;
 8010446:	18fa      	addne	r2, r7, r3
            c->h[i] = x;
 8010448:	f82c 3010 	strhne.w	r3, [ip, r0, lsl #1]
            grid_h += c->h[i];
 801044c:	19d2      	addeq	r2, r2, r7
            grid_h += x;
 801044e:	b212      	sxth	r2, r2
 8010450:	e7f4      	b.n	801043c <grid_update+0x3cc>
        lv_coord_t x = row_templ[i];
 8010452:	f935 3010 	ldrsh.w	r3, [r5, r0, lsl #1]
        if(IS_FR(x)) {
 8010456:	4563      	cmp	r3, ip
 8010458:	dd08      	ble.n	801046c <grid_update+0x3fc>
            lv_coord_t f = GET_FR(x);
 801045a:	f5a3 43bf 	sub.w	r3, r3, #24448	; 0x5f80
 801045e:	3b1c      	subs	r3, #28
            c->h[i] = (free_h * f) / row_fr_cnt;
 8010460:	b29b      	uxth	r3, r3
 8010462:	4353      	muls	r3, r2
 8010464:	fbb3 f3f6 	udiv	r3, r3, r6
 8010468:	f827 3010 	strh.w	r3, [r7, r0, lsl #1]
    for(i = 0; i < c->row_num; i++) {
 801046c:	3001      	adds	r0, #1
 801046e:	e6bf      	b.n	80101f0 <grid_update+0x180>
    for(i = 0; templ[i] != LV_COORD_MAX; i++);
 8010470:	3301      	adds	r3, #1
 8010472:	e6cc      	b.n	801020e <grid_update+0x19e>
        if(IS_CONTENT(col_templ[i])) {
 8010474:	f935 2016 	ldrsh.w	r2, [r5, r6, lsl #1]
 8010478:	f645 739b 	movw	r3, #24475	; 0x5f9b
 801047c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8010480:	429a      	cmp	r2, r3
 8010482:	d139      	bne.n	80104f8 <grid_update+0x488>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8010484:	f04f 0800 	mov.w	r8, #0
        lv_coord_t size = LV_COORD_MIN;
 8010488:	4f95      	ldr	r7, [pc, #596]	; (80106e0 <grid_update+0x670>)
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801048a:	f8df a260 	ldr.w	sl, [pc, #608]	; 80106ec <grid_update+0x67c>
 801048e:	e026      	b.n	80104de <grid_update+0x46e>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8010490:	4641      	mov	r1, r8
 8010492:	4620      	mov	r0, r4
 8010494:	f7f7 fb65 	bl	8007b62 <lv_obj_get_child>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8010498:	4651      	mov	r1, sl
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 801049a:	4683      	mov	fp, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801049c:	f7f3 fd48 	bl	8003f30 <lv_obj_has_flag_any>
 80104a0:	4601      	mov	r1, r0
 80104a2:	b9d0      	cbnz	r0, 80104da <grid_update+0x46a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 80104a4:	4b8f      	ldr	r3, [pc, #572]	; (80106e4 <grid_update+0x674>)
 80104a6:	9006      	str	r0, [sp, #24]
 80104a8:	4658      	mov	r0, fp
 80104aa:	881a      	ldrh	r2, [r3, #0]
 80104ac:	f7f7 f80c 	bl	80074c8 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 80104b0:	9906      	ldr	r1, [sp, #24]
 80104b2:	b2c0      	uxtb	r0, r0
 80104b4:	2801      	cmp	r0, #1
 80104b6:	d110      	bne.n	80104da <grid_update+0x46a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 80104b8:	4b8b      	ldr	r3, [pc, #556]	; (80106e8 <grid_update+0x678>)
 80104ba:	4658      	mov	r0, fp
 80104bc:	881a      	ldrh	r2, [r3, #0]
 80104be:	f7f7 f803 	bl	80074c8 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 80104c2:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 80104c4:	4286      	cmp	r6, r0
 80104c6:	d108      	bne.n	80104da <grid_update+0x46a>
                size = LV_MAX(size, lv_obj_get_width(item));
 80104c8:	4658      	mov	r0, fp
 80104ca:	f7f4 fd80 	bl	8004fce <lv_obj_get_width>
 80104ce:	42b8      	cmp	r0, r7
 80104d0:	db03      	blt.n	80104da <grid_update+0x46a>
 80104d2:	4658      	mov	r0, fp
 80104d4:	f7f4 fd7b 	bl	8004fce <lv_obj_get_width>
 80104d8:	4607      	mov	r7, r0
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80104da:	f108 0801 	add.w	r8, r8, #1
 80104de:	4620      	mov	r0, r4
 80104e0:	f7f7 fb4e 	bl	8007b80 <lv_obj_get_child_cnt>
 80104e4:	4580      	cmp	r8, r0
 80104e6:	d3d3      	bcc.n	8010490 <grid_update+0x420>
            if(size >= 0) c->w[i] = size;
 80104e8:	2f00      	cmp	r7, #0
 80104ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            else c->w[i] = 0;
 80104ec:	bfb6      	itet	lt
 80104ee:	2200      	movlt	r2, #0
            if(size >= 0) c->w[i] = size;
 80104f0:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->w[i] = 0;
 80104f4:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->col_num; i++) {
 80104f8:	3601      	adds	r6, #1
 80104fa:	e699      	b.n	8010230 <grid_update+0x1c0>
        lv_coord_t x = col_templ[i];
 80104fc:	f935 001c 	ldrsh.w	r0, [r5, ip, lsl #1]
        if(IS_FR(x)) {
 8010500:	4570      	cmp	r0, lr
 8010502:	dd06      	ble.n	8010512 <grid_update+0x4a2>
            col_fr_cnt += GET_FR(x);
 8010504:	f5a6 46bf 	sub.w	r6, r6, #24448	; 0x5f80
 8010508:	3e1c      	subs	r6, #28
 801050a:	4406      	add	r6, r0
    for(i = 0; i < c->col_num; i++) {
 801050c:	f10c 0c01 	add.w	ip, ip, #1
 8010510:	e698      	b.n	8010244 <grid_update+0x1d4>
            grid_w += c->w[i];
 8010512:	bf0d      	iteet	eq
 8010514:	f832 101c 	ldrheq.w	r1, [r2, ip, lsl #1]
            grid_w += x;
 8010518:	1839      	addne	r1, r7, r0
            c->w[i] = x;
 801051a:	f822 001c 	strhne.w	r0, [r2, ip, lsl #1]
            grid_w += c->w[i];
 801051e:	19c9      	addeq	r1, r1, r7
            grid_w += x;
 8010520:	b209      	sxth	r1, r1
 8010522:	e7f3      	b.n	801050c <grid_update+0x49c>
        lv_coord_t x = col_templ[i];
 8010524:	f935 0011 	ldrsh.w	r0, [r5, r1, lsl #1]
        if(IS_FR(x)) {
 8010528:	4540      	cmp	r0, r8
 801052a:	dd0a      	ble.n	8010542 <grid_update+0x4d2>
            lv_coord_t f = GET_FR(x);
 801052c:	f5a0 42bf 	sub.w	r2, r0, #24448	; 0x5f80
            last_fr_i = i;
 8010530:	468e      	mov	lr, r1
            lv_coord_t f = GET_FR(x);
 8010532:	3a1c      	subs	r2, #28
            c->w[i] = (free_w * f) / col_fr_cnt;
 8010534:	b292      	uxth	r2, r2
 8010536:	fb02 f003 	mul.w	r0, r2, r3
 801053a:	fbb0 f0f6 	udiv	r0, r0, r6
 801053e:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
    for(i = 0; i < c->col_num; i++) {
 8010542:	3101      	adds	r1, #1
 8010544:	e69b      	b.n	801027e <grid_update+0x20e>
        lv_obj_t * item = cont->spec_attr->children[i];
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	9a05      	ldr	r2, [sp, #20]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 801054a:	4968      	ldr	r1, [pc, #416]	; (80106ec <grid_update+0x67c>)
        lv_obj_t * item = cont->spec_attr->children[i];
 801054c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 8010550:	4628      	mov	r0, r5
 8010552:	f7f3 fced 	bl	8003f30 <lv_obj_has_flag_any>
 8010556:	4601      	mov	r1, r0
 8010558:	2800      	cmp	r0, #0
 801055a:	f040 8183 	bne.w	8010864 <grid_update+0x7f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 801055e:	4b61      	ldr	r3, [pc, #388]	; (80106e4 <grid_update+0x674>)
 8010560:	9006      	str	r0, [sp, #24]
 8010562:	4628      	mov	r0, r5
 8010564:	881a      	ldrh	r2, [r3, #0]
 8010566:	f7f6 ffaf 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801056a:	4b5b      	ldr	r3, [pc, #364]	; (80106d8 <grid_update+0x668>)
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 801056c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801056e:	9906      	ldr	r1, [sp, #24]
 8010570:	881a      	ldrh	r2, [r3, #0]
 8010572:	4628      	mov	r0, r5
 8010574:	f7f6 ffa8 	bl	80074c8 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 8010578:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 801057c:	f000 8172 	beq.w	8010864 <grid_update+0x7f4>
 8010580:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010584:	f000 816e 	beq.w	8010864 <grid_update+0x7f4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8010588:	4b57      	ldr	r3, [pc, #348]	; (80106e8 <grid_update+0x678>)
 801058a:	4628      	mov	r0, r5
 801058c:	9906      	ldr	r1, [sp, #24]
 801058e:	881a      	ldrh	r2, [r3, #0]
 8010590:	f7f6 ff9a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8010594:	4a51      	ldr	r2, [pc, #324]	; (80106dc <grid_update+0x66c>)
    uint32_t col_pos = get_col_pos(item);
 8010596:	b2c3      	uxtb	r3, r0
 8010598:	9906      	ldr	r1, [sp, #24]
 801059a:	8812      	ldrh	r2, [r2, #0]
 801059c:	4628      	mov	r0, r5
 801059e:	9307      	str	r3, [sp, #28]
 80105a0:	f7f6 ff92 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 80105a4:	4a52      	ldr	r2, [pc, #328]	; (80106f0 <grid_update+0x680>)
    uint32_t row_pos = get_row_pos(item);
 80105a6:	fa5f fa80 	uxtb.w	sl, r0
 80105aa:	9906      	ldr	r1, [sp, #24]
 80105ac:	4628      	mov	r0, r5
 80105ae:	8812      	ldrh	r2, [r2, #0]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80105b0:	4456      	add	r6, sl
 80105b2:	f7f6 ff89 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 80105b6:	4a4f      	ldr	r2, [pc, #316]	; (80106f4 <grid_update+0x684>)
 80105b8:	9906      	ldr	r1, [sp, #24]
static inline uint8_t get_cell_col_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_x_align(obj, 0); }
 80105ba:	fa5f f980 	uxtb.w	r9, r0
 80105be:	8812      	ldrh	r2, [r2, #0]
 80105c0:	4628      	mov	r0, r5
 80105c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80105c4:	f7f6 ff80 	bl	80074c8 <lv_obj_get_style_prop>
static inline uint8_t get_cell_row_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_y_align(obj, 0); }
 80105c8:	b2c3      	uxtb	r3, r0
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80105ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    lv_coord_t col_x1 = c->x[col_pos];
 80105ce:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
static inline uint8_t get_cell_row_align(lv_obj_t * obj) {return lv_obj_get_style_grid_cell_y_align(obj, 0); }
 80105d2:	9306      	str	r3, [sp, #24]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80105d4:	9b07      	ldr	r3, [sp, #28]
 80105d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80105d8:	441f      	add	r7, r3
    lv_coord_t col_w = col_x2 - col_x1;
 80105da:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80105dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80105de:	4407      	add	r7, r0
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80105e0:	4430      	add	r0, r6
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80105e2:	f832 b017 	ldrh.w	fp, [r2, r7, lsl #1]
 80105e6:	f83c 2017 	ldrh.w	r2, [ip, r7, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80105ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80105ec:	4493      	add	fp, r2
    lv_coord_t col_w = col_x2 - col_x1;
 80105ee:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80105f2:	f837 6010 	ldrh.w	r6, [r7, r0, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 80105f6:	ebab 0b02 	sub.w	fp, fp, r2
    lv_coord_t row_y1 = c->y[row_pos];
 80105fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80105fc:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    lv_coord_t col_w = col_x2 - col_x1;
 8010600:	fa1f f38b 	uxth.w	r3, fp
    lv_coord_t row_h = row_y2 - row_y1;
 8010604:	f832 201a 	ldrh.w	r2, [r2, sl, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8010608:	4406      	add	r6, r0
    lv_coord_t col_w = col_x2 - col_x1;
 801060a:	9308      	str	r3, [sp, #32]
 801060c:	fa0f f38b 	sxth.w	r3, fp
 8010610:	4628      	mov	r0, r5
    lv_coord_t row_h = row_y2 - row_y1;
 8010612:	1ab6      	subs	r6, r6, r2
 8010614:	f241 426a 	movw	r2, #5226	; 0x146a
    lv_coord_t col_w = col_x2 - col_x1;
 8010618:	9307      	str	r3, [sp, #28]
    lv_coord_t row_h = row_y2 - row_y1;
 801061a:	b2b3      	uxth	r3, r6
 801061c:	b236      	sxth	r6, r6
 801061e:	9309      	str	r3, [sp, #36]	; 0x24
 8010620:	f7f6 ff52 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8010624:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8010626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010628:	2801      	cmp	r0, #1
 801062a:	d107      	bne.n	801063c <grid_update+0x5cc>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 801062c:	f1b9 0f00 	cmp.w	r9, #0
 8010630:	d029      	beq.n	8010686 <grid_update+0x616>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 8010632:	f1b9 0f02 	cmp.w	r9, #2
 8010636:	bf08      	it	eq
 8010638:	f04f 0900 	moveq.w	r9, #0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801063c:	f8b5 8018 	ldrh.w	r8, [r5, #24]
    switch(col_align) {
 8010640:	f1b9 0f02 	cmp.w	r9, #2
 8010644:	8aaa      	ldrh	r2, [r5, #20]
 8010646:	f108 0801 	add.w	r8, r8, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801064a:	8b6f      	ldrh	r7, [r5, #26]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801064c:	eba8 0802 	sub.w	r8, r8, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010650:	f107 0701 	add.w	r7, r7, #1
 8010654:	8aea      	ldrh	r2, [r5, #22]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010656:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801065a:	eba7 0702 	sub.w	r7, r7, r2
 801065e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010660:	b23f      	sxth	r7, r7
 8010662:	f932 b013 	ldrsh.w	fp, [r2, r3, lsl #1]
 8010666:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801066a:	d045      	beq.n	80106f8 <grid_update+0x688>
 801066c:	f1b9 0f03 	cmp.w	r9, #3
 8010670:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8010674:	d00a      	beq.n	801068c <grid_update+0x61c>
 8010676:	f1b9 0f01 	cmp.w	r9, #1
 801067a:	d023      	beq.n	80106c4 <grid_update+0x654>
            item->w_layout = 0;
 801067c:	f36f 0382 	bfc	r3, #2, #1
 8010680:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 8010684:	e008      	b.n	8010698 <grid_update+0x628>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 8010686:	f04f 0902 	mov.w	r9, #2
 801068a:	e7d7      	b.n	801063c <grid_update+0x5cc>
            item->w_layout = 1;
 801068c:	f043 0304 	orr.w	r3, r3, #4
 8010690:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            item_w = col_w;
 8010694:	f8dd 801c 	ldr.w	r8, [sp, #28]
    switch(row_align) {
 8010698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801069a:	f933 901a 	ldrsh.w	r9, [r3, sl, lsl #1]
 801069e:	f833 201a 	ldrh.w	r2, [r3, sl, lsl #1]
 80106a2:	9b06      	ldr	r3, [sp, #24]
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	f000 80e8 	beq.w	801087a <grid_update+0x80a>
 80106aa:	2b03      	cmp	r3, #3
 80106ac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80106b0:	d030      	beq.n	8010714 <grid_update+0x6a4>
 80106b2:	9906      	ldr	r1, [sp, #24]
 80106b4:	2901      	cmp	r1, #1
 80106b6:	f000 80d8 	beq.w	801086a <grid_update+0x7fa>
            item->h_layout = 0;
 80106ba:	f36f 0341 	bfc	r3, #1, #1
 80106be:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
            break;
 80106c2:	e02c      	b.n	801071e <grid_update+0x6ae>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 80106c4:	9a07      	ldr	r2, [sp, #28]
 80106c6:	eba2 0b08 	sub.w	fp, r2, r8
 80106ca:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 80106ce:	eb00 0b6b 	add.w	fp, r0, fp, asr #1
 80106d2:	fa0f fb8b 	sxth.w	fp, fp
            item->w_layout = 0;
 80106d6:	e7d1      	b.n	801067c <grid_update+0x60c>
 80106d8:	2000add0 	.word	0x2000add0
 80106dc:	2000add6 	.word	0x2000add6
 80106e0:	ffffa000 	.word	0xffffa000
 80106e4:	2000adc4 	.word	0x2000adc4
 80106e8:	2000adca 	.word	0x2000adca
 80106ec:	00018001 	.word	0x00018001
 80106f0:	2000add2 	.word	0x2000add2
 80106f4:	2000adcc 	.word	0x2000adcc
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 80106f8:	9b08      	ldr	r3, [sp, #32]
 80106fa:	4418      	add	r0, r3
 80106fc:	fa1f f980 	uxth.w	r9, r0
 8010700:	4628      	mov	r0, r5
 8010702:	f7f4 fc64 	bl	8004fce <lv_obj_get_width>
            item->w_layout = 0;
 8010706:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 801070a:	eba9 0000 	sub.w	r0, r9, r0
 801070e:	fa0f fb80 	sxth.w	fp, r0
            item->w_layout = 0;
 8010712:	e7b3      	b.n	801067c <grid_update+0x60c>
            item->h_layout = 1;
 8010714:	f043 0302 	orr.w	r3, r3, #2
            item_h = row_h;
 8010718:	4637      	mov	r7, r6
            item->h_layout = 1;
 801071a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 801071e:	4628      	mov	r0, r5
 8010720:	f7f4 fc55 	bl	8004fce <lv_obj_get_width>
 8010724:	4540      	cmp	r0, r8
 8010726:	f000 80b6 	beq.w	8010896 <grid_update+0x826>
    dest->x1 = src->x1;
 801072a:	8aab      	ldrh	r3, [r5, #20]
        lv_area_copy(&old_coords, &item->coords);
 801072c:	f105 0614 	add.w	r6, r5, #20
        lv_obj_invalidate(item);
 8010730:	4628      	mov	r0, r5
 8010732:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    dest->y1 = src->y1;
 8010736:	8aeb      	ldrh	r3, [r5, #22]
 8010738:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    dest->x2 = src->x2;
 801073c:	8b2b      	ldrh	r3, [r5, #24]
 801073e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    dest->y2 = src->y2;
 8010742:	8b6b      	ldrh	r3, [r5, #26]
 8010744:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010748:	f7f4 fd96 	bl	8005278 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 801074c:	4641      	mov	r1, r8
 801074e:	4630      	mov	r0, r6
 8010750:	9606      	str	r6, [sp, #24]
 8010752:	f006 fc58 	bl	8017006 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 8010756:	4639      	mov	r1, r7
 8010758:	9806      	ldr	r0, [sp, #24]
 801075a:	f006 fc59 	bl	8017010 <lv_area_set_height>
        lv_obj_invalidate(item);
 801075e:	4628      	mov	r0, r5
 8010760:	f7f4 fd8a 	bl	8005278 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8010764:	aa0c      	add	r2, sp, #48	; 0x30
 8010766:	2123      	movs	r1, #35	; 0x23
 8010768:	4628      	mov	r0, r5
 801076a:	f7f1 fc5d 	bl	8002028 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 801076e:	4628      	mov	r0, r5
 8010770:	f7f7 f9f4 	bl	8007b5c <lv_obj_get_parent>
 8010774:	462a      	mov	r2, r5
 8010776:	2122      	movs	r1, #34	; 0x22
 8010778:	f7f1 fc56 	bl	8002028 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801077c:	f243 020c 	movw	r2, #12300	; 0x300c
 8010780:	2100      	movs	r1, #0
 8010782:	4628      	mov	r0, r5
 8010784:	f7f6 fea0 	bl	80074c8 <lv_obj_get_style_prop>
 8010788:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 801078a:	f243 020d 	movw	r2, #12301	; 0x300d
 801078e:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8010790:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8010794:	4628      	mov	r0, r5
 8010796:	f7f6 fe97 	bl	80074c8 <lv_obj_get_style_prop>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801079a:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 801079e:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 80107a0:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(item);
 80107a4:	4628      	mov	r0, r5
 80107a6:	f7f4 fc12 	bl	8004fce <lv_obj_get_width>
 80107aa:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(item);
 80107ac:	4628      	mov	r0, r5
 80107ae:	f7f4 fc14 	bl	8004fda <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80107b2:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 80107b6:	9b06      	ldr	r3, [sp, #24]
 80107b8:	d111      	bne.n	80107de <grid_update+0x76e>
 80107ba:	f428 42c0 	bic.w	r2, r8, #24576	; 0x6000
 80107be:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80107c2:	dc0c      	bgt.n	80107de <grid_update+0x76e>
 80107c4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80107c8:	4690      	mov	r8, r2
 80107ca:	bfc8      	it	gt
 80107cc:	f5c2 787a 	rsbgt	r8, r2, #1000	; 0x3e8
 80107d0:	fb08 f803 	mul.w	r8, r8, r3
 80107d4:	2364      	movs	r3, #100	; 0x64
 80107d6:	fb98 f8f3 	sdiv	r8, r8, r3
 80107da:	fa0f f888 	sxth.w	r8, r8
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80107de:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 80107e2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80107e6:	d110      	bne.n	801080a <grid_update+0x79a>
 80107e8:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 80107ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80107f0:	dc0b      	bgt.n	801080a <grid_update+0x79a>
 80107f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80107f6:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80107fa:	bfc8      	it	gt
 80107fc:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8010800:	4358      	muls	r0, r3
 8010802:	fb90 fafa 	sdiv	sl, r0, sl
 8010806:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 801080a:	8aab      	ldrh	r3, [r5, #20]
 801080c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 8010810:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 8010814:	1ac9      	subs	r1, r1, r3
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 8010816:	8aeb      	ldrh	r3, [r5, #22]
 8010818:	1ad2      	subs	r2, r2, r3
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 801081a:	448b      	add	fp, r1
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 801081c:	4491      	add	r9, r2
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 801081e:	44d8      	add	r8, fp
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 8010820:	44ca      	add	sl, r9
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 8010822:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 8010826:	fa1f fa8a 	uxth.w	sl, sl
    if(diff_x || diff_y) {
 801082a:	ea58 030a 	orrs.w	r3, r8, sl
 801082e:	d019      	beq.n	8010864 <grid_update+0x7f4>
        lv_obj_invalidate(item);
 8010830:	4628      	mov	r0, r5
 8010832:	f7f4 fd21 	bl	8005278 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 8010836:	8aab      	ldrh	r3, [r5, #20]
        lv_obj_invalidate(item);
 8010838:	4628      	mov	r0, r5
        item->coords.x1 += diff_x;
 801083a:	4443      	add	r3, r8
 801083c:	82ab      	strh	r3, [r5, #20]
        item->coords.x2 += diff_x;
 801083e:	8b2b      	ldrh	r3, [r5, #24]
 8010840:	4443      	add	r3, r8
 8010842:	832b      	strh	r3, [r5, #24]
        item->coords.y1 += diff_y;
 8010844:	8aeb      	ldrh	r3, [r5, #22]
 8010846:	4453      	add	r3, sl
 8010848:	82eb      	strh	r3, [r5, #22]
        item->coords.y2 += diff_y;
 801084a:	8b6b      	ldrh	r3, [r5, #26]
 801084c:	4453      	add	r3, sl
 801084e:	836b      	strh	r3, [r5, #26]
        lv_obj_invalidate(item);
 8010850:	f7f4 fd12 	bl	8005278 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, true);
 8010854:	2301      	movs	r3, #1
 8010856:	fa0f f28a 	sxth.w	r2, sl
 801085a:	4628      	mov	r0, r5
 801085c:	fa0f f188 	sxth.w	r1, r8
 8010860:	f7f4 fc61 	bl	8005126 <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8010864:	9b05      	ldr	r3, [sp, #20]
 8010866:	3301      	adds	r3, #1
 8010868:	e451      	b.n	801010e <grid_update+0x9e>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 801086a:	1bf6      	subs	r6, r6, r7
 801086c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8010870:	eb02 0966 	add.w	r9, r2, r6, asr #1
 8010874:	fa0f f989 	sxth.w	r9, r9
            item->h_layout = 0;
 8010878:	e71f      	b.n	80106ba <grid_update+0x64a>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801087a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801087c:	4628      	mov	r0, r5
 801087e:	441a      	add	r2, r3
 8010880:	fa1f fa82 	uxth.w	sl, r2
 8010884:	f7f4 fba9 	bl	8004fda <lv_obj_get_height>
            item->h_layout = 0;
 8010888:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801088c:	ebaa 0000 	sub.w	r0, sl, r0
 8010890:	fa0f f980 	sxth.w	r9, r0
            item->h_layout = 0;
 8010894:	e711      	b.n	80106ba <grid_update+0x64a>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8010896:	4628      	mov	r0, r5
 8010898:	f7f4 fb9f 	bl	8004fda <lv_obj_get_height>
 801089c:	42b8      	cmp	r0, r7
 801089e:	f47f af44 	bne.w	801072a <grid_update+0x6ba>
 80108a2:	e76b      	b.n	801077c <grid_update+0x70c>

080108a4 <lv_grid_init>:
{
 80108a4:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 80108a6:	2100      	movs	r1, #0
 80108a8:	4820      	ldr	r0, [pc, #128]	; (801092c <lv_grid_init+0x88>)
 80108aa:	f7f4 fb11 	bl	8004ed0 <lv_layout_register>
 80108ae:	4b20      	ldr	r3, [pc, #128]	; (8010930 <lv_grid_init+0x8c>)
 80108b0:	6018      	str	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108b2:	f007 fe5d 	bl	8018570 <lv_style_register_prop>
 80108b6:	4b1f      	ldr	r3, [pc, #124]	; (8010934 <lv_grid_init+0x90>)
 80108b8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80108bc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108be:	f007 fe57 	bl	8018570 <lv_style_register_prop>
 80108c2:	4b1d      	ldr	r3, [pc, #116]	; (8010938 <lv_grid_init+0x94>)
 80108c4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80108c8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108ca:	f007 fe51 	bl	8018570 <lv_style_register_prop>
 80108ce:	4b1b      	ldr	r3, [pc, #108]	; (801093c <lv_grid_init+0x98>)
 80108d0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80108d4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108d6:	f007 fe4b 	bl	8018570 <lv_style_register_prop>
 80108da:	4b19      	ldr	r3, [pc, #100]	; (8010940 <lv_grid_init+0x9c>)
 80108dc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80108e0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108e2:	f007 fe45 	bl	8018570 <lv_style_register_prop>
 80108e6:	4b17      	ldr	r3, [pc, #92]	; (8010944 <lv_grid_init+0xa0>)
 80108e8:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80108ec:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108ee:	f007 fe3f 	bl	8018570 <lv_style_register_prop>
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <lv_grid_init+0xa4>)
 80108f4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80108f8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 80108fa:	f007 fe39 	bl	8018570 <lv_style_register_prop>
 80108fe:	4b13      	ldr	r3, [pc, #76]	; (801094c <lv_grid_init+0xa8>)
 8010900:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010904:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8010906:	f007 fe33 	bl	8018570 <lv_style_register_prop>
 801090a:	4b11      	ldr	r3, [pc, #68]	; (8010950 <lv_grid_init+0xac>)
 801090c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010910:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 8010912:	f007 fe2d 	bl	8018570 <lv_style_register_prop>
 8010916:	4b0f      	ldr	r3, [pc, #60]	; (8010954 <lv_grid_init+0xb0>)
 8010918:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 801091c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop() | LV_STYLE_PROP_LAYOUT_REFR;
 801091e:	f007 fe27 	bl	8018570 <lv_style_register_prop>
 8010922:	4b0d      	ldr	r3, [pc, #52]	; (8010958 <lv_grid_init+0xb4>)
 8010924:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8010928:	8018      	strh	r0, [r3, #0]
}
 801092a:	bd08      	pop	{r3, pc}
 801092c:	08010071 	.word	0x08010071
 8010930:	2000add8 	.word	0x2000add8
 8010934:	2000add4 	.word	0x2000add4
 8010938:	2000adc8 	.word	0x2000adc8
 801093c:	2000adce 	.word	0x2000adce
 8010940:	2000adc6 	.word	0x2000adc6
 8010944:	2000add0 	.word	0x2000add0
 8010948:	2000add6 	.word	0x2000add6
 801094c:	2000adc4 	.word	0x2000adc4
 8010950:	2000adca 	.word	0x2000adca
 8010954:	2000add2 	.word	0x2000add2
 8010958:	2000adcc 	.word	0x2000adcc

0801095c <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 801095c:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 801095e:	f7ff fa8d 	bl	800fe7c <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
#endif
}
 8010962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    lv_grid_init();
 8010966:	f7ff bf9d 	b.w	80108a4 <lv_grid_init>

0801096a <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 801096a:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801096c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010970:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8010974:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8010978:	f248 0681 	movw	r6, #32897	; 0x8081
 801097c:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801097e:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8010982:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010986:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801098a:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801098c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801098e:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8010990:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8010992:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8010996:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801099a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801099e:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80109a2:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80109a6:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80109a8:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 80109aa:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80109ac:	4372      	muls	r2, r6
    return ret;
 80109ae:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 80109b2:	0dd0      	lsrs	r0, r2, #23
    return ret;
 80109b4:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 80109b8:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 80109bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109be <lv_color_white>:
 *  PREDEFINED COLORS
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
 80109be:	f04f 30ff 	mov.w	r0, #4294967295
 80109c2:	4770      	bx	lr

080109c4 <theme_apply>:
    return inited;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 80109c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 80109c6:	4608      	mov	r0, r1
{
 80109c8:	460c      	mov	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 80109ca:	f7f7 f8c7 	bl	8007b5c <lv_obj_get_parent>
 80109ce:	4602      	mov	r2, r0
 80109d0:	b9a0      	cbnz	r0, 80109fc <theme_apply+0x38>
        lv_obj_add_style(obj, &styles->scr, 0);
 80109d2:	4db7      	ldr	r5, [pc, #732]	; (8010cb0 <theme_apply+0x2ec>)
 80109d4:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
            return;
        }
        /*Tabview pages*/
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 80109d6:	4620      	mov	r0, r4
 80109d8:	f7f6 fb48 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80109dc:	6829      	ldr	r1, [r5, #0]
 80109de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80109e2:	4620      	mov	r0, r4
 80109e4:	3108      	adds	r1, #8
 80109e6:	f7f6 fb41 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80109ea:	6829      	ldr	r1, [r5, #0]
 80109ec:	4ab1      	ldr	r2, [pc, #708]	; (8010cb4 <theme_apply+0x2f0>)
 80109ee:	3110      	adds	r1, #16
    }
#endif

#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
            lv_obj_add_style(obj, &styles->led, 0);
 80109f0:	4620      	mov	r0, r4
        }
#endif
}
 80109f2:	b003      	add	sp, #12
 80109f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            lv_obj_add_style(obj, &styles->led, 0);
 80109f8:	f7f6 bb38 	b.w	800706c <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_obj_class)) {
 80109fc:	49ae      	ldr	r1, [pc, #696]	; (8010cb8 <theme_apply+0x2f4>)
 80109fe:	4620      	mov	r0, r4
 8010a00:	f7f3 fd78 	bl	80044f4 <lv_obj_check_type>
 8010a04:	4606      	mov	r6, r0
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d050      	beq.n	8010aac <theme_apply+0xe8>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	f7f7 f8a6 	bl	8007b5c <lv_obj_get_parent>
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 8010a10:	49aa      	ldr	r1, [pc, #680]	; (8010cbc <theme_apply+0x2f8>)
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8010a12:	4605      	mov	r5, r0
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 8010a14:	f7f3 fd6e 	bl	80044f4 <lv_obj_check_type>
 8010a18:	4606      	mov	r6, r0
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	f040 859d 	bne.w	801155a <theme_apply+0xb96>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 8010a20:	4628      	mov	r0, r5
 8010a22:	4da3      	ldr	r5, [pc, #652]	; (8010cb0 <theme_apply+0x2ec>)
 8010a24:	f7f7 f89a 	bl	8007b5c <lv_obj_get_parent>
 8010a28:	49a4      	ldr	r1, [pc, #656]	; (8010cbc <theme_apply+0x2f8>)
 8010a2a:	f7f3 fd63 	bl	80044f4 <lv_obj_check_type>
 8010a2e:	b118      	cbz	r0, 8010a38 <theme_apply+0x74>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010a30:	6829      	ldr	r1, [r5, #0]
 8010a32:	4632      	mov	r2, r6
 8010a34:	3180      	adds	r1, #128	; 0x80
 8010a36:	e7ce      	b.n	80109d6 <theme_apply+0x12>
        if(lv_obj_get_child_id(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8010a38:	4620      	mov	r0, r4
 8010a3a:	f7f7 f8a5 	bl	8007b88 <lv_obj_get_child_id>
 8010a3e:	9001      	str	r0, [sp, #4]
 8010a40:	b980      	cbnz	r0, 8010a64 <theme_apply+0xa0>
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7f7 f88a 	bl	8007b5c <lv_obj_get_parent>
 8010a48:	499d      	ldr	r1, [pc, #628]	; (8010cc0 <theme_apply+0x2fc>)
 8010a4a:	f7f3 fd53 	bl	80044f4 <lv_obj_check_type>
 8010a4e:	9a01      	ldr	r2, [sp, #4]
 8010a50:	b140      	cbz	r0, 8010a64 <theme_apply+0xa0>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8010a52:	6829      	ldr	r1, [r5, #0]
 8010a54:	4620      	mov	r0, r4
 8010a56:	3148      	adds	r1, #72	; 0x48
 8010a58:	f7f6 fb08 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 8010a5c:	6829      	ldr	r1, [r5, #0]
 8010a5e:	9a01      	ldr	r2, [sp, #4]
 8010a60:	3170      	adds	r1, #112	; 0x70
 8010a62:	e7c5      	b.n	80109f0 <theme_apply+0x2c>
        else if(lv_obj_get_child_id(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8010a64:	4620      	mov	r0, r4
 8010a66:	f7f7 f88f 	bl	8007b88 <lv_obj_get_child_id>
 8010a6a:	2801      	cmp	r0, #1
 8010a6c:	d10e      	bne.n	8010a8c <theme_apply+0xc8>
 8010a6e:	4620      	mov	r0, r4
 8010a70:	f7f7 f874 	bl	8007b5c <lv_obj_get_parent>
 8010a74:	4992      	ldr	r1, [pc, #584]	; (8010cc0 <theme_apply+0x2fc>)
 8010a76:	f7f3 fd3d 	bl	80044f4 <lv_obj_check_type>
 8010a7a:	b138      	cbz	r0, 8010a8c <theme_apply+0xc8>
            lv_obj_add_style(obj, &styles->scr, 0);
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	6829      	ldr	r1, [r5, #0]
 8010a80:	4620      	mov	r0, r4
 8010a82:	f7f6 faf3 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8010a86:	6829      	ldr	r1, [r5, #0]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	e7d3      	b.n	8010a34 <theme_apply+0x70>
        lv_obj_add_style(obj, &styles->card, 0);
 8010a8c:	6829      	ldr	r1, [r5, #0]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	4620      	mov	r0, r4
 8010a92:	3118      	adds	r1, #24
 8010a94:	f7f6 faea 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010a98:	6829      	ldr	r1, [r5, #0]
 8010a9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	3108      	adds	r1, #8
 8010aa2:	f7f6 fae3 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010aa6:	6829      	ldr	r1, [r5, #0]
 8010aa8:	f000 bd1b 	b.w	80114e2 <theme_apply+0xb1e>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 8010aac:	4985      	ldr	r1, [pc, #532]	; (8010cc4 <theme_apply+0x300>)
 8010aae:	4620      	mov	r0, r4
 8010ab0:	f7f3 fd20 	bl	80044f4 <lv_obj_check_type>
 8010ab4:	4605      	mov	r5, r0
 8010ab6:	b3a0      	cbz	r0, 8010b22 <theme_apply+0x15e>
        lv_obj_add_style(obj, &styles->btn, 0);
 8010ab8:	4d7d      	ldr	r5, [pc, #500]	; (8010cb0 <theme_apply+0x2ec>)
 8010aba:	4632      	mov	r2, r6
 8010abc:	4620      	mov	r0, r4
 8010abe:	6829      	ldr	r1, [r5, #0]
 8010ac0:	3120      	adds	r1, #32
 8010ac2:	f7f6 fad3 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 8010ac6:	6829      	ldr	r1, [r5, #0]
 8010ac8:	4632      	mov	r2, r6
 8010aca:	4620      	mov	r0, r4
 8010acc:	3128      	adds	r1, #40	; 0x28
 8010ace:	f7f6 facd 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8010ad2:	6829      	ldr	r1, [r5, #0]
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	31d0      	adds	r1, #208	; 0xd0
 8010ada:	f7f6 fac7 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8010ade:	6829      	ldr	r1, [r5, #0]
 8010ae0:	2220      	movs	r2, #32
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	3158      	adds	r1, #88	; 0x58
 8010ae6:	f7f6 fac1 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 8010aea:	6829      	ldr	r1, [r5, #0]
 8010aec:	2220      	movs	r2, #32
 8010aee:	4620      	mov	r0, r4
 8010af0:	31d8      	adds	r1, #216	; 0xd8
 8010af2:	f7f6 fabb 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010af6:	6829      	ldr	r1, [r5, #0]
 8010af8:	2204      	movs	r2, #4
 8010afa:	4620      	mov	r0, r4
 8010afc:	31a0      	adds	r1, #160	; 0xa0
 8010afe:	f7f6 fab5 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 8010b02:	6829      	ldr	r1, [r5, #0]
 8010b04:	2220      	movs	r2, #32
 8010b06:	4620      	mov	r0, r4
 8010b08:	31c8      	adds	r1, #200	; 0xc8
 8010b0a:	f7f6 faaf 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 8010b0e:	6829      	ldr	r1, [r5, #0]
 8010b10:	2201      	movs	r2, #1
 8010b12:	4620      	mov	r0, r4
 8010b14:	3138      	adds	r1, #56	; 0x38
 8010b16:	f7f6 faa9 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8010b1a:	6829      	ldr	r1, [r5, #0]
 8010b1c:	2280      	movs	r2, #128	; 0x80
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8010b1e:	3160      	adds	r1, #96	; 0x60
 8010b20:	e00a      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 8010b22:	4969      	ldr	r1, [pc, #420]	; (8010cc8 <theme_apply+0x304>)
 8010b24:	4620      	mov	r0, r4
 8010b26:	f7f3 fce5 	bl	80044f4 <lv_obj_check_type>
 8010b2a:	4607      	mov	r7, r0
 8010b2c:	b1c0      	cbz	r0, 8010b60 <theme_apply+0x19c>
        lv_obj_add_style(obj, &styles->line, 0);
 8010b2e:	4b60      	ldr	r3, [pc, #384]	; (8010cb0 <theme_apply+0x2ec>)
 8010b30:	462a      	mov	r2, r5
 8010b32:	6819      	ldr	r1, [r3, #0]
 8010b34:	f501 71a4 	add.w	r1, r1, #328	; 0x148
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010b38:	4620      	mov	r0, r4
 8010b3a:	f7f6 fa97 	bl	800706c <lv_obj_add_style>
    if(lv_obj_check_type(obj, &lv_tabview_class)) {
 8010b3e:	495f      	ldr	r1, [pc, #380]	; (8010cbc <theme_apply+0x2f8>)
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7f3 fcd7 	bl	80044f4 <lv_obj_check_type>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	f000 84d9 	beq.w	80114fe <theme_apply+0xb3a>
        lv_obj_add_style(obj, &styles->scr, 0);
 8010b4c:	4d58      	ldr	r5, [pc, #352]	; (8010cb0 <theme_apply+0x2ec>)
 8010b4e:	2200      	movs	r2, #0
 8010b50:	4620      	mov	r0, r4
 8010b52:	6829      	ldr	r1, [r5, #0]
 8010b54:	f7f6 fa8a 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8010b58:	6829      	ldr	r1, [r5, #0]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	3168      	adds	r1, #104	; 0x68
 8010b5e:	e747      	b.n	80109f0 <theme_apply+0x2c>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8010b60:	495a      	ldr	r1, [pc, #360]	; (8010ccc <theme_apply+0x308>)
 8010b62:	4620      	mov	r0, r4
 8010b64:	f7f3 fcc6 	bl	80044f4 <lv_obj_check_type>
 8010b68:	4606      	mov	r6, r0
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	f000 80ba 	beq.w	8010ce4 <theme_apply+0x320>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 8010b70:	4620      	mov	r0, r4
 8010b72:	4d4f      	ldr	r5, [pc, #316]	; (8010cb0 <theme_apply+0x2ec>)
 8010b74:	f7f6 fff2 	bl	8007b5c <lv_obj_get_parent>
 8010b78:	4955      	ldr	r1, [pc, #340]	; (8010cd0 <theme_apply+0x30c>)
 8010b7a:	f7f3 fcbb 	bl	80044f4 <lv_obj_check_type>
 8010b7e:	4606      	mov	r6, r0
 8010b80:	b348      	cbz	r0, 8010bd6 <theme_apply+0x212>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 8010b82:	6829      	ldr	r1, [r5, #0]
 8010b84:	463a      	mov	r2, r7
 8010b86:	4620      	mov	r0, r4
 8010b88:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8010b8c:	f7f6 fa6e 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 8010b90:	6829      	ldr	r1, [r5, #0]
 8010b92:	463a      	mov	r2, r7
 8010b94:	4620      	mov	r0, r4
 8010b96:	3188      	adds	r1, #136	; 0x88
 8010b98:	f7f6 fa68 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8010b9c:	6829      	ldr	r1, [r5, #0]
 8010b9e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	3120      	adds	r1, #32
 8010ba6:	f7f6 fa61 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010baa:	6829      	ldr	r1, [r5, #0]
 8010bac:	4a49      	ldr	r2, [pc, #292]	; (8010cd4 <theme_apply+0x310>)
 8010bae:	4620      	mov	r0, r4
 8010bb0:	3158      	adds	r1, #88	; 0x58
 8010bb2:	f7f6 fa5b 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010bb6:	6829      	ldr	r1, [r5, #0]
 8010bb8:	4a47      	ldr	r2, [pc, #284]	; (8010cd8 <theme_apply+0x314>)
 8010bba:	4620      	mov	r0, r4
 8010bbc:	3128      	adds	r1, #40	; 0x28
 8010bbe:	f7f6 fa55 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010bc2:	6829      	ldr	r1, [r5, #0]
 8010bc4:	4a45      	ldr	r2, [pc, #276]	; (8010cdc <theme_apply+0x318>)
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	3130      	adds	r1, #48	; 0x30
 8010bca:	f7f6 fa4f 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 8010bce:	6829      	ldr	r1, [r5, #0]
 8010bd0:	4a43      	ldr	r2, [pc, #268]	; (8010ce0 <theme_apply+0x31c>)
 8010bd2:	3140      	adds	r1, #64	; 0x40
 8010bd4:	e70c      	b.n	80109f0 <theme_apply+0x2c>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f7f6 ffc0 	bl	8007b5c <lv_obj_get_parent>
 8010bdc:	4937      	ldr	r1, [pc, #220]	; (8010cbc <theme_apply+0x2f8>)
 8010bde:	f7f3 fc89 	bl	80044f4 <lv_obj_check_type>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8010be2:	6829      	ldr	r1, [r5, #0]
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 8010be4:	4602      	mov	r2, r0
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d035      	beq.n	8010c56 <theme_apply+0x292>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8010bea:	4632      	mov	r2, r6
 8010bec:	3150      	adds	r1, #80	; 0x50
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7f6 fa3c 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010bf4:	6829      	ldr	r1, [r5, #0]
 8010bf6:	2204      	movs	r2, #4
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	31a0      	adds	r1, #160	; 0xa0
 8010bfc:	f7f6 fa36 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 8010c00:	6829      	ldr	r1, [r5, #0]
 8010c02:	2204      	movs	r2, #4
 8010c04:	4620      	mov	r0, r4
 8010c06:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8010c0a:	f7f6 fa2f 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010c0e:	6829      	ldr	r1, [r5, #0]
 8010c10:	4a30      	ldr	r2, [pc, #192]	; (8010cd4 <theme_apply+0x310>)
 8010c12:	4620      	mov	r0, r4
 8010c14:	3158      	adds	r1, #88	; 0x58
 8010c16:	f7f6 fa29 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010c1a:	6829      	ldr	r1, [r5, #0]
 8010c1c:	4a2e      	ldr	r2, [pc, #184]	; (8010cd8 <theme_apply+0x314>)
 8010c1e:	4620      	mov	r0, r4
 8010c20:	3130      	adds	r1, #48	; 0x30
 8010c22:	f7f6 fa23 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010c26:	6829      	ldr	r1, [r5, #0]
 8010c28:	4a2b      	ldr	r2, [pc, #172]	; (8010cd8 <theme_apply+0x314>)
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 8010c30:	f7f6 fa1c 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010c34:	6829      	ldr	r1, [r5, #0]
 8010c36:	4a29      	ldr	r2, [pc, #164]	; (8010cdc <theme_apply+0x318>)
 8010c38:	4620      	mov	r0, r4
 8010c3a:	31a0      	adds	r1, #160	; 0xa0
 8010c3c:	f7f6 fa16 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010c40:	6829      	ldr	r1, [r5, #0]
 8010c42:	4a27      	ldr	r2, [pc, #156]	; (8010ce0 <theme_apply+0x31c>)
 8010c44:	4620      	mov	r0, r4
 8010c46:	31a8      	adds	r1, #168	; 0xa8
 8010c48:	f7f6 fa10 	bl	800706c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010c4c:	6829      	ldr	r1, [r5, #0]
 8010c4e:	4a23      	ldr	r2, [pc, #140]	; (8010cdc <theme_apply+0x318>)
 8010c50:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8010c54:	e6cc      	b.n	80109f0 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->card, 0);
 8010c56:	3118      	adds	r1, #24
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f7f6 fa07 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010c5e:	6829      	ldr	r1, [r5, #0]
 8010c60:	2204      	movs	r2, #4
 8010c62:	4620      	mov	r0, r4
 8010c64:	31a0      	adds	r1, #160	; 0xa0
 8010c66:	f7f6 fa01 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010c6a:	6829      	ldr	r1, [r5, #0]
 8010c6c:	2208      	movs	r2, #8
 8010c6e:	4620      	mov	r0, r4
 8010c70:	31a8      	adds	r1, #168	; 0xa8
 8010c72:	f7f6 f9fb 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8010c76:	6829      	ldr	r1, [r5, #0]
 8010c78:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	3120      	adds	r1, #32
 8010c80:	f7f6 f9f4 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010c84:	6829      	ldr	r1, [r5, #0]
 8010c86:	4a13      	ldr	r2, [pc, #76]	; (8010cd4 <theme_apply+0x310>)
 8010c88:	4620      	mov	r0, r4
 8010c8a:	3158      	adds	r1, #88	; 0x58
 8010c8c:	f7f6 f9ee 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010c90:	6829      	ldr	r1, [r5, #0]
 8010c92:	4a11      	ldr	r2, [pc, #68]	; (8010cd8 <theme_apply+0x314>)
 8010c94:	3128      	adds	r1, #40	; 0x28
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 8010c96:	4620      	mov	r0, r4
 8010c98:	f7f6 f9e8 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010c9c:	6829      	ldr	r1, [r5, #0]
 8010c9e:	4a0f      	ldr	r2, [pc, #60]	; (8010cdc <theme_apply+0x318>)
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	31a0      	adds	r1, #160	; 0xa0
 8010ca4:	f7f6 f9e2 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010ca8:	6829      	ldr	r1, [r5, #0]
 8010caa:	4a0d      	ldr	r2, [pc, #52]	; (8010ce0 <theme_apply+0x31c>)
 8010cac:	31a8      	adds	r1, #168	; 0xa8
 8010cae:	e743      	b.n	8010b38 <theme_apply+0x174>
 8010cb0:	20002ad8 	.word	0x20002ad8
 8010cb4:	00010040 	.word	0x00010040
 8010cb8:	080258dc 	.word	0x080258dc
 8010cbc:	08025fe0 	.word	0x08025fe0
 8010cc0:	08026034 	.word	0x08026034
 8010cc4:	08029d54 	.word	0x08029d54
 8010cc8:	08029e68 	.word	0x08029e68
 8010ccc:	08029d8c 	.word	0x08029d8c
 8010cd0:	08025fa8 	.word	0x08025fa8
 8010cd4:	00050020 	.word	0x00050020
 8010cd8:	00050001 	.word	0x00050001
 8010cdc:	00050004 	.word	0x00050004
 8010ce0:	00050008 	.word	0x00050008
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 8010ce4:	49ad      	ldr	r1, [pc, #692]	; (8010f9c <theme_apply+0x5d8>)
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f7f3 fc04 	bl	80044f4 <lv_obj_check_type>
 8010cec:	b320      	cbz	r0, 8010d38 <theme_apply+0x374>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8010cee:	4dac      	ldr	r5, [pc, #688]	; (8010fa0 <theme_apply+0x5dc>)
 8010cf0:	4632      	mov	r2, r6
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	6829      	ldr	r1, [r5, #0]
 8010cf6:	3130      	adds	r1, #48	; 0x30
 8010cf8:	f7f6 f9b8 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010cfc:	6829      	ldr	r1, [r5, #0]
 8010cfe:	4632      	mov	r2, r6
 8010d00:	4620      	mov	r0, r4
 8010d02:	31b0      	adds	r1, #176	; 0xb0
 8010d04:	f7f6 f9b2 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010d08:	6829      	ldr	r1, [r5, #0]
 8010d0a:	2204      	movs	r2, #4
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	31a0      	adds	r1, #160	; 0xa0
 8010d10:	f7f6 f9ac 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010d14:	6829      	ldr	r1, [r5, #0]
 8010d16:	2208      	movs	r2, #8
 8010d18:	4620      	mov	r0, r4
 8010d1a:	31a8      	adds	r1, #168	; 0xa8
 8010d1c:	f7f6 f9a6 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010d20:	6829      	ldr	r1, [r5, #0]
 8010d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010d26:	4620      	mov	r0, r4
 8010d28:	3128      	adds	r1, #40	; 0x28
 8010d2a:	f7f6 f99f 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010d2e:	6829      	ldr	r1, [r5, #0]
 8010d30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010d34:	31b0      	adds	r1, #176	; 0xb0
 8010d36:	e6ff      	b.n	8010b38 <theme_apply+0x174>
 8010d38:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	4999      	ldr	r1, [pc, #612]	; (8010fa4 <theme_apply+0x5e0>)
 8010d3e:	f7f3 fbd9 	bl	80044f4 <lv_obj_check_type>
 8010d42:	4606      	mov	r6, r0
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d03e      	beq.n	8010dc6 <theme_apply+0x402>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8010d48:	4d95      	ldr	r5, [pc, #596]	; (8010fa0 <theme_apply+0x5dc>)
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	9a01      	ldr	r2, [sp, #4]
 8010d4e:	6829      	ldr	r1, [r5, #0]
 8010d50:	3130      	adds	r1, #48	; 0x30
 8010d52:	f7f6 f98b 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010d56:	6829      	ldr	r1, [r5, #0]
 8010d58:	9a01      	ldr	r2, [sp, #4]
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	31b0      	adds	r1, #176	; 0xb0
 8010d5e:	f7f6 f985 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010d62:	6829      	ldr	r1, [r5, #0]
 8010d64:	2204      	movs	r2, #4
 8010d66:	4620      	mov	r0, r4
 8010d68:	31a0      	adds	r1, #160	; 0xa0
 8010d6a:	f7f6 f97f 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010d6e:	6829      	ldr	r1, [r5, #0]
 8010d70:	2208      	movs	r2, #8
 8010d72:	4620      	mov	r0, r4
 8010d74:	31a8      	adds	r1, #168	; 0xa8
 8010d76:	f7f6 f979 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010d7a:	6829      	ldr	r1, [r5, #0]
 8010d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010d80:	4620      	mov	r0, r4
 8010d82:	3128      	adds	r1, #40	; 0x28
 8010d84:	f7f6 f972 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010d88:	6829      	ldr	r1, [r5, #0]
 8010d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010d8e:	4620      	mov	r0, r4
 8010d90:	31b0      	adds	r1, #176	; 0xb0
 8010d92:	f7f6 f96b 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010d96:	6829      	ldr	r1, [r5, #0]
 8010d98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	31e8      	adds	r1, #232	; 0xe8
 8010da0:	f7f6 f964 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 8010da4:	6829      	ldr	r1, [r5, #0]
 8010da6:	4a80      	ldr	r2, [pc, #512]	; (8010fa8 <theme_apply+0x5e4>)
 8010da8:	4620      	mov	r0, r4
 8010daa:	31c8      	adds	r1, #200	; 0xc8
 8010dac:	f7f6 f95e 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 8010db0:	6829      	ldr	r1, [r5, #0]
 8010db2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010db6:	4620      	mov	r0, r4
 8010db8:	31d0      	adds	r1, #208	; 0xd0
 8010dba:	f7f6 f957 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 8010dbe:	6829      	ldr	r1, [r5, #0]
 8010dc0:	4a79      	ldr	r2, [pc, #484]	; (8010fa8 <theme_apply+0x5e4>)
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8010dc2:	31d8      	adds	r1, #216	; 0xd8
 8010dc4:	e6b8      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8010dc6:	4979      	ldr	r1, [pc, #484]	; (8010fac <theme_apply+0x5e8>)
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f7f3 fb93 	bl	80044f4 <lv_obj_check_type>
 8010dce:	4607      	mov	r7, r0
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d051      	beq.n	8010e78 <theme_apply+0x4b4>
        lv_obj_add_style(obj, &styles->card, 0);
 8010dd4:	4d72      	ldr	r5, [pc, #456]	; (8010fa0 <theme_apply+0x5dc>)
 8010dd6:	4632      	mov	r2, r6
 8010dd8:	4620      	mov	r0, r4
 8010dda:	6829      	ldr	r1, [r5, #0]
 8010ddc:	3118      	adds	r1, #24
 8010dde:	f7f6 f945 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8010de2:	6829      	ldr	r1, [r5, #0]
 8010de4:	4632      	mov	r2, r6
 8010de6:	4620      	mov	r0, r4
 8010de8:	3168      	adds	r1, #104	; 0x68
 8010dea:	f7f6 f93f 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 8010dee:	6829      	ldr	r1, [r5, #0]
 8010df0:	4632      	mov	r2, r6
 8010df2:	4620      	mov	r0, r4
 8010df4:	31b8      	adds	r1, #184	; 0xb8
 8010df6:	f7f6 f939 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010dfa:	6829      	ldr	r1, [r5, #0]
 8010dfc:	2204      	movs	r2, #4
 8010dfe:	4620      	mov	r0, r4
 8010e00:	31a0      	adds	r1, #160	; 0xa0
 8010e02:	f7f6 f933 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8010e06:	6829      	ldr	r1, [r5, #0]
 8010e08:	2208      	movs	r2, #8
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	31a8      	adds	r1, #168	; 0xa8
 8010e0e:	f7f6 f92d 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010e12:	6829      	ldr	r1, [r5, #0]
 8010e14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010e18:	4620      	mov	r0, r4
 8010e1a:	3108      	adds	r1, #8
 8010e1c:	f7f6 f926 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8010e20:	6829      	ldr	r1, [r5, #0]
 8010e22:	4a63      	ldr	r2, [pc, #396]	; (8010fb0 <theme_apply+0x5ec>)
 8010e24:	4620      	mov	r0, r4
 8010e26:	3110      	adds	r1, #16
 8010e28:	f7f6 f920 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8010e2c:	6829      	ldr	r1, [r5, #0]
 8010e2e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010e32:	4620      	mov	r0, r4
 8010e34:	3150      	adds	r1, #80	; 0x50
 8010e36:	f7f6 f919 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 8010e3a:	6829      	ldr	r1, [r5, #0]
 8010e3c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010e40:	4620      	mov	r0, r4
 8010e42:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8010e46:	f7f6 f911 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 8010e4a:	6829      	ldr	r1, [r5, #0]
 8010e4c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8010e50:	4620      	mov	r0, r4
 8010e52:	3180      	adds	r1, #128	; 0x80
 8010e54:	f7f6 f90a 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8010e58:	6829      	ldr	r1, [r5, #0]
 8010e5a:	4a56      	ldr	r2, [pc, #344]	; (8010fb4 <theme_apply+0x5f0>)
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	3158      	adds	r1, #88	; 0x58
 8010e60:	f7f6 f904 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8010e64:	6829      	ldr	r1, [r5, #0]
 8010e66:	4a54      	ldr	r2, [pc, #336]	; (8010fb8 <theme_apply+0x5f4>)
 8010e68:	4620      	mov	r0, r4
 8010e6a:	3128      	adds	r1, #40	; 0x28
 8010e6c:	f7f6 f8fe 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8010e70:	6829      	ldr	r1, [r5, #0]
 8010e72:	4a52      	ldr	r2, [pc, #328]	; (8010fbc <theme_apply+0x5f8>)
 8010e74:	3138      	adds	r1, #56	; 0x38
 8010e76:	e65f      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 8010e78:	4951      	ldr	r1, [pc, #324]	; (8010fc0 <theme_apply+0x5fc>)
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f7f3 fb3a 	bl	80044f4 <lv_obj_check_type>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d03e      	beq.n	8010f02 <theme_apply+0x53e>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 8010e84:	4d46      	ldr	r5, [pc, #280]	; (8010fa0 <theme_apply+0x5dc>)
 8010e86:	463a      	mov	r2, r7
 8010e88:	4620      	mov	r0, r4
 8010e8a:	6829      	ldr	r1, [r5, #0]
 8010e8c:	3188      	adds	r1, #136	; 0x88
 8010e8e:	f7f6 f8ed 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010e92:	6829      	ldr	r1, [r5, #0]
 8010e94:	2204      	movs	r2, #4
 8010e96:	4620      	mov	r0, r4
 8010e98:	31a0      	adds	r1, #160	; 0xa0
 8010e9a:	f7f6 f8e7 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8010e9e:	6829      	ldr	r1, [r5, #0]
 8010ea0:	4a48      	ldr	r2, [pc, #288]	; (8010fc4 <theme_apply+0x600>)
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	3160      	adds	r1, #96	; 0x60
 8010ea6:	f7f6 f8e1 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 8010eaa:	6829      	ldr	r1, [r5, #0]
 8010eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f501 7198 	add.w	r1, r1, #304	; 0x130
 8010eb6:	f7f6 f8d9 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8010eba:	6829      	ldr	r1, [r5, #0]
 8010ebc:	4a42      	ldr	r2, [pc, #264]	; (8010fc8 <theme_apply+0x604>)
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	3128      	adds	r1, #40	; 0x28
 8010ec2:	f7f6 f8d3 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8010ec6:	6829      	ldr	r1, [r5, #0]
 8010ec8:	4a3f      	ldr	r2, [pc, #252]	; (8010fc8 <theme_apply+0x604>)
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8010ed0:	f7f6 f8cc 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8010ed4:	6829      	ldr	r1, [r5, #0]
 8010ed6:	4a3d      	ldr	r2, [pc, #244]	; (8010fcc <theme_apply+0x608>)
 8010ed8:	4620      	mov	r0, r4
 8010eda:	3158      	adds	r1, #88	; 0x58
 8010edc:	f7f6 f8c6 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8010ee0:	6829      	ldr	r1, [r5, #0]
 8010ee2:	4a3a      	ldr	r2, [pc, #232]	; (8010fcc <theme_apply+0x608>)
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	31c8      	adds	r1, #200	; 0xc8
 8010ee8:	f7f6 f8c0 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8010eec:	6829      	ldr	r1, [r5, #0]
 8010eee:	4a37      	ldr	r2, [pc, #220]	; (8010fcc <theme_apply+0x608>)
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	31d8      	adds	r1, #216	; 0xd8
 8010ef4:	f7f6 f8ba 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 8010ef8:	6829      	ldr	r1, [r5, #0]
 8010efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010efe:	31d0      	adds	r1, #208	; 0xd0
 8010f00:	e61a      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8010f02:	4933      	ldr	r1, [pc, #204]	; (8010fd0 <theme_apply+0x60c>)
 8010f04:	4620      	mov	r0, r4
 8010f06:	f7f3 faf5 	bl	80044f4 <lv_obj_check_type>
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d064      	beq.n	8010fd8 <theme_apply+0x614>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8010f0e:	4d24      	ldr	r5, [pc, #144]	; (8010fa0 <theme_apply+0x5dc>)
 8010f10:	2200      	movs	r2, #0
 8010f12:	4620      	mov	r0, r4
 8010f14:	6829      	ldr	r1, [r5, #0]
 8010f16:	3148      	adds	r1, #72	; 0x48
 8010f18:	f7f6 f8a8 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8010f1c:	6829      	ldr	r1, [r5, #0]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	4620      	mov	r0, r4
 8010f22:	31b0      	adds	r1, #176	; 0xb0
 8010f24:	f7f6 f8a2 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8010f28:	6829      	ldr	r1, [r5, #0]
 8010f2a:	2280      	movs	r2, #128	; 0x80
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	3160      	adds	r1, #96	; 0x60
 8010f30:	f7f6 f89c 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8010f34:	6829      	ldr	r1, [r5, #0]
 8010f36:	2204      	movs	r2, #4
 8010f38:	4620      	mov	r0, r4
 8010f3a:	31a0      	adds	r1, #160	; 0xa0
 8010f3c:	f7f6 f896 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8010f40:	6829      	ldr	r1, [r5, #0]
 8010f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010f46:	4620      	mov	r0, r4
 8010f48:	3128      	adds	r1, #40	; 0x28
 8010f4a:	f7f6 f88f 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8010f4e:	6829      	ldr	r1, [r5, #0]
 8010f50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010f54:	4620      	mov	r0, r4
 8010f56:	31b0      	adds	r1, #176	; 0xb0
 8010f58:	f7f6 f888 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8010f5c:	6829      	ldr	r1, [r5, #0]
 8010f5e:	4a19      	ldr	r2, [pc, #100]	; (8010fc4 <theme_apply+0x600>)
 8010f60:	4620      	mov	r0, r4
 8010f62:	3160      	adds	r1, #96	; 0x60
 8010f64:	f7f6 f882 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8010f68:	6829      	ldr	r1, [r5, #0]
 8010f6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010f6e:	4620      	mov	r0, r4
 8010f70:	31e8      	adds	r1, #232	; 0xe8
 8010f72:	f7f6 f87b 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8010f76:	6829      	ldr	r1, [r5, #0]
 8010f78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	3150      	adds	r1, #80	; 0x50
 8010f80:	f7f6 f874 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 8010f84:	6829      	ldr	r1, [r5, #0]
 8010f86:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8010f90:	f7f6 f86c 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8010f94:	6829      	ldr	r1, [r5, #0]
 8010f96:	4a0f      	ldr	r2, [pc, #60]	; (8010fd4 <theme_apply+0x610>)
 8010f98:	e5c1      	b.n	8010b1e <theme_apply+0x15a>
 8010f9a:	bf00      	nop
 8010f9c:	08029d38 	.word	0x08029d38
 8010fa0:	20002ad8 	.word	0x20002ad8
 8010fa4:	08029eec 	.word	0x08029eec
 8010fa8:	00030020 	.word	0x00030020
 8010fac:	08029f24 	.word	0x08029f24
 8010fb0:	00010040 	.word	0x00010040
 8010fb4:	00050020 	.word	0x00050020
 8010fb8:	00050004 	.word	0x00050004
 8010fbc:	00050008 	.word	0x00050008
 8010fc0:	08029db4 	.word	0x08029db4
 8010fc4:	00020080 	.word	0x00020080
 8010fc8:	00020001 	.word	0x00020001
 8010fcc:	00020020 	.word	0x00020020
 8010fd0:	08029f08 	.word	0x08029f08
 8010fd4:	00030080 	.word	0x00030080
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 8010fd8:	49ae      	ldr	r1, [pc, #696]	; (8011294 <theme_apply+0x8d0>)
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f7f3 fa8a 	bl	80044f4 <lv_obj_check_type>
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d03e      	beq.n	8011064 <theme_apply+0x6a0>
        lv_obj_add_style(obj, &styles->card, 0);
 8010fe6:	4dac      	ldr	r5, [pc, #688]	; (8011298 <theme_apply+0x8d4>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4620      	mov	r0, r4
 8010fec:	6829      	ldr	r1, [r5, #0]
 8010fee:	3118      	adds	r1, #24
 8010ff0:	f7f6 f83c 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8010ff4:	6829      	ldr	r1, [r5, #0]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	3178      	adds	r1, #120	; 0x78
 8010ffc:	f7f6 f836 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 8011000:	6829      	ldr	r1, [r5, #0]
 8011002:	2200      	movs	r2, #0
 8011004:	4620      	mov	r0, r4
 8011006:	f501 7190 	add.w	r1, r1, #288	; 0x120
 801100a:	f7f6 f82f 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801100e:	6829      	ldr	r1, [r5, #0]
 8011010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011014:	4620      	mov	r0, r4
 8011016:	3108      	adds	r1, #8
 8011018:	f7f6 f828 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801101c:	6829      	ldr	r1, [r5, #0]
 801101e:	4a9f      	ldr	r2, [pc, #636]	; (801129c <theme_apply+0x8d8>)
 8011020:	4620      	mov	r0, r4
 8011022:	3110      	adds	r1, #16
 8011024:	f7f6 f822 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 8011028:	6829      	ldr	r1, [r5, #0]
 801102a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801102e:	4620      	mov	r0, r4
 8011030:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8011034:	f7f6 f81a 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 8011038:	6829      	ldr	r1, [r5, #0]
 801103a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801103e:	4620      	mov	r0, r4
 8011040:	f501 7188 	add.w	r1, r1, #272	; 0x110
 8011044:	f7f6 f812 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 8011048:	6829      	ldr	r1, [r5, #0]
 801104a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 801104e:	4620      	mov	r0, r4
 8011050:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8011054:	f7f6 f80a 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 8011058:	6829      	ldr	r1, [r5, #0]
 801105a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 801105e:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8011062:	e569      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 8011064:	498e      	ldr	r1, [pc, #568]	; (80112a0 <theme_apply+0x8dc>)
 8011066:	4620      	mov	r0, r4
 8011068:	f7f3 fa44 	bl	80044f4 <lv_obj_check_type>
 801106c:	b348      	cbz	r0, 80110c2 <theme_apply+0x6fe>
        lv_obj_add_style(obj, &styles->card, 0);
 801106e:	4d8a      	ldr	r5, [pc, #552]	; (8011298 <theme_apply+0x8d4>)
 8011070:	4632      	mov	r2, r6
 8011072:	4620      	mov	r0, r4
 8011074:	6829      	ldr	r1, [r5, #0]
 8011076:	3118      	adds	r1, #24
 8011078:	f7f5 fff8 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 801107c:	6829      	ldr	r1, [r5, #0]
 801107e:	4632      	mov	r2, r6
 8011080:	4620      	mov	r0, r4
 8011082:	31e0      	adds	r1, #224	; 0xe0
 8011084:	f7f5 fff2 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8011088:	6829      	ldr	r1, [r5, #0]
 801108a:	4632      	mov	r2, r6
 801108c:	4620      	mov	r0, r4
 801108e:	3190      	adds	r1, #144	; 0x90
 8011090:	f7f5 ffec 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 8011094:	6829      	ldr	r1, [r5, #0]
 8011096:	4632      	mov	r2, r6
 8011098:	4620      	mov	r0, r4
 801109a:	3198      	adds	r1, #152	; 0x98
 801109c:	f7f5 ffe6 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80110a0:	6829      	ldr	r1, [r5, #0]
 80110a2:	2204      	movs	r2, #4
 80110a4:	4620      	mov	r0, r4
 80110a6:	31a0      	adds	r1, #160	; 0xa0
 80110a8:	f7f5 ffe0 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80110ac:	6829      	ldr	r1, [r5, #0]
 80110ae:	2208      	movs	r2, #8
 80110b0:	4620      	mov	r0, r4
 80110b2:	31a8      	adds	r1, #168	; 0xa8
 80110b4:	f7f5 ffda 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 80110b8:	6829      	ldr	r1, [r5, #0]
 80110ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 80110be:	3128      	adds	r1, #40	; 0x28
 80110c0:	e53a      	b.n	8010b38 <theme_apply+0x174>
 80110c2:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 80110c4:	4620      	mov	r0, r4
 80110c6:	4977      	ldr	r1, [pc, #476]	; (80112a4 <theme_apply+0x8e0>)
 80110c8:	f7f3 fa14 	bl	80044f4 <lv_obj_check_type>
 80110cc:	4606      	mov	r6, r0
 80110ce:	b370      	cbz	r0, 801112e <theme_apply+0x76a>
        lv_obj_add_style(obj, &styles->card, 0);
 80110d0:	4d71      	ldr	r5, [pc, #452]	; (8011298 <theme_apply+0x8d4>)
 80110d2:	4620      	mov	r0, r4
 80110d4:	9a01      	ldr	r2, [sp, #4]
 80110d6:	6829      	ldr	r1, [r5, #0]
 80110d8:	3118      	adds	r1, #24
 80110da:	f7f5 ffc7 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 80110de:	6829      	ldr	r1, [r5, #0]
 80110e0:	9a01      	ldr	r2, [sp, #4]
 80110e2:	4620      	mov	r0, r4
 80110e4:	3178      	adds	r1, #120	; 0x78
 80110e6:	f7f5 ffc1 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 80110ea:	6829      	ldr	r1, [r5, #0]
 80110ec:	9a01      	ldr	r2, [sp, #4]
 80110ee:	4620      	mov	r0, r4
 80110f0:	31d0      	adds	r1, #208	; 0xd0
 80110f2:	f7f5 ffbb 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 80110f6:	6829      	ldr	r1, [r5, #0]
 80110f8:	2220      	movs	r2, #32
 80110fa:	4620      	mov	r0, r4
 80110fc:	31d8      	adds	r1, #216	; 0xd8
 80110fe:	f7f5 ffb5 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8011102:	6829      	ldr	r1, [r5, #0]
 8011104:	2220      	movs	r2, #32
 8011106:	4620      	mov	r0, r4
 8011108:	3158      	adds	r1, #88	; 0x58
 801110a:	f7f5 ffaf 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801110e:	6829      	ldr	r1, [r5, #0]
 8011110:	2204      	movs	r2, #4
 8011112:	4620      	mov	r0, r4
 8011114:	31a0      	adds	r1, #160	; 0xa0
 8011116:	f7f5 ffa9 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801111a:	6829      	ldr	r1, [r5, #0]
 801111c:	2208      	movs	r2, #8
 801111e:	4620      	mov	r0, r4
 8011120:	31a8      	adds	r1, #168	; 0xa8
 8011122:	f7f5 ffa3 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8011126:	6829      	ldr	r1, [r5, #0]
 8011128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801112c:	e649      	b.n	8010dc2 <theme_apply+0x3fe>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 801112e:	495e      	ldr	r1, [pc, #376]	; (80112a8 <theme_apply+0x8e4>)
 8011130:	4620      	mov	r0, r4
 8011132:	f7f3 f9df 	bl	80044f4 <lv_obj_check_type>
 8011136:	4607      	mov	r7, r0
 8011138:	2800      	cmp	r0, #0
 801113a:	d037      	beq.n	80111ac <theme_apply+0x7e8>
        lv_obj_add_style(obj, &styles->card, 0);
 801113c:	4d56      	ldr	r5, [pc, #344]	; (8011298 <theme_apply+0x8d4>)
 801113e:	4632      	mov	r2, r6
 8011140:	4620      	mov	r0, r4
 8011142:	6829      	ldr	r1, [r5, #0]
 8011144:	3118      	adds	r1, #24
 8011146:	f7f5 ff91 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 801114a:	6829      	ldr	r1, [r5, #0]
 801114c:	4632      	mov	r2, r6
 801114e:	4620      	mov	r0, r4
 8011150:	31c0      	adds	r1, #192	; 0xc0
 8011152:	f7f5 ff8b 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8011156:	6829      	ldr	r1, [r5, #0]
 8011158:	4632      	mov	r2, r6
 801115a:	4620      	mov	r0, r4
 801115c:	3190      	adds	r1, #144	; 0x90
 801115e:	f7f5 ff85 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 8011162:	6829      	ldr	r1, [r5, #0]
 8011164:	4632      	mov	r2, r6
 8011166:	4620      	mov	r0, r4
 8011168:	f501 7194 	add.w	r1, r1, #296	; 0x128
 801116c:	f7f5 ff7e 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8011170:	6829      	ldr	r1, [r5, #0]
 8011172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011176:	4620      	mov	r0, r4
 8011178:	3108      	adds	r1, #8
 801117a:	f7f5 ff77 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801117e:	6829      	ldr	r1, [r5, #0]
 8011180:	4a46      	ldr	r2, [pc, #280]	; (801129c <theme_apply+0x8d8>)
 8011182:	4620      	mov	r0, r4
 8011184:	3110      	adds	r1, #16
 8011186:	f7f5 ff71 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 801118a:	6829      	ldr	r1, [r5, #0]
 801118c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8011190:	4620      	mov	r0, r4
 8011192:	3150      	adds	r1, #80	; 0x50
 8011194:	f7f5 ff6a 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 8011198:	6829      	ldr	r1, [r5, #0]
 801119a:	4a44      	ldr	r2, [pc, #272]	; (80112ac <theme_apply+0x8e8>)
 801119c:	4620      	mov	r0, r4
 801119e:	3128      	adds	r1, #40	; 0x28
 80111a0:	f7f5 ff64 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 80111a4:	6829      	ldr	r1, [r5, #0]
 80111a6:	4a42      	ldr	r2, [pc, #264]	; (80112b0 <theme_apply+0x8ec>)
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 80111a8:	3158      	adds	r1, #88	; 0x58
 80111aa:	e4c5      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 80111ac:	4941      	ldr	r1, [pc, #260]	; (80112b4 <theme_apply+0x8f0>)
 80111ae:	4620      	mov	r0, r4
 80111b0:	f7f3 f9a0 	bl	80044f4 <lv_obj_check_type>
 80111b4:	b1d0      	cbz	r0, 80111ec <theme_apply+0x828>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 80111b6:	4d38      	ldr	r5, [pc, #224]	; (8011298 <theme_apply+0x8d4>)
 80111b8:	463a      	mov	r2, r7
 80111ba:	4620      	mov	r0, r4
 80111bc:	6829      	ldr	r1, [r5, #0]
 80111be:	31f8      	adds	r1, #248	; 0xf8
 80111c0:	f7f5 ff54 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 80111c4:	6829      	ldr	r1, [r5, #0]
 80111c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80111ca:	4620      	mov	r0, r4
 80111cc:	31f8      	adds	r1, #248	; 0xf8
 80111ce:	f7f5 ff4d 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 80111d2:	6829      	ldr	r1, [r5, #0]
 80111d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80111d8:	4620      	mov	r0, r4
 80111da:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80111de:	f7f5 ff45 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 80111e2:	6829      	ldr	r1, [r5, #0]
 80111e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80111e8:	31e8      	adds	r1, #232	; 0xe8
 80111ea:	e4a5      	b.n	8010b38 <theme_apply+0x174>
 80111ec:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 80111ee:	4620      	mov	r0, r4
 80111f0:	4931      	ldr	r1, [pc, #196]	; (80112b8 <theme_apply+0x8f4>)
 80111f2:	f7f3 f97f 	bl	80044f4 <lv_obj_check_type>
 80111f6:	4607      	mov	r7, r0
 80111f8:	b190      	cbz	r0, 8011220 <theme_apply+0x85c>
        lv_obj_add_style(obj, &styles->card, 0);
 80111fa:	4d27      	ldr	r5, [pc, #156]	; (8011298 <theme_apply+0x8d4>)
 80111fc:	4620      	mov	r0, r4
 80111fe:	9a01      	ldr	r2, [sp, #4]
 8011200:	6829      	ldr	r1, [r5, #0]
 8011202:	3118      	adds	r1, #24
 8011204:	f7f5 ff32 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8011208:	6829      	ldr	r1, [r5, #0]
 801120a:	9a01      	ldr	r2, [sp, #4]
 801120c:	4620      	mov	r0, r4
 801120e:	31b0      	adds	r1, #176	; 0xb0
 8011210:	f7f5 ff2c 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 8011214:	6829      	ldr	r1, [r5, #0]
 8011216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801121a:	f501 71b0 	add.w	r1, r1, #352	; 0x160
 801121e:	e48b      	b.n	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 8011220:	4926      	ldr	r1, [pc, #152]	; (80112bc <theme_apply+0x8f8>)
 8011222:	4620      	mov	r0, r4
 8011224:	f7f3 f966 	bl	80044f4 <lv_obj_check_type>
 8011228:	2800      	cmp	r0, #0
 801122a:	d04b      	beq.n	80112c4 <theme_apply+0x900>
        lv_obj_add_style(obj, &styles->card, 0);
 801122c:	4d1a      	ldr	r5, [pc, #104]	; (8011298 <theme_apply+0x8d4>)
 801122e:	463a      	mov	r2, r7
 8011230:	4620      	mov	r0, r4
 8011232:	6829      	ldr	r1, [r5, #0]
 8011234:	3118      	adds	r1, #24
 8011236:	f7f5 ff19 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 801123a:	6829      	ldr	r1, [r5, #0]
 801123c:	463a      	mov	r2, r7
 801123e:	4620      	mov	r0, r4
 8011240:	3178      	adds	r1, #120	; 0x78
 8011242:	f7f5 ff13 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8011246:	6829      	ldr	r1, [r5, #0]
 8011248:	2204      	movs	r2, #4
 801124a:	4620      	mov	r0, r4
 801124c:	31a0      	adds	r1, #160	; 0xa0
 801124e:	f7f5 ff0d 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8011252:	6829      	ldr	r1, [r5, #0]
 8011254:	2208      	movs	r2, #8
 8011256:	4620      	mov	r0, r4
 8011258:	31a8      	adds	r1, #168	; 0xa8
 801125a:	f7f5 ff07 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801125e:	6829      	ldr	r1, [r5, #0]
 8011260:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011264:	4620      	mov	r0, r4
 8011266:	3108      	adds	r1, #8
 8011268:	f7f5 ff00 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801126c:	6829      	ldr	r1, [r5, #0]
 801126e:	4a0b      	ldr	r2, [pc, #44]	; (801129c <theme_apply+0x8d8>)
 8011270:	4620      	mov	r0, r4
 8011272:	3110      	adds	r1, #16
 8011274:	f7f5 fefa 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 8011278:	6829      	ldr	r1, [r5, #0]
 801127a:	4a11      	ldr	r2, [pc, #68]	; (80112c0 <theme_apply+0x8fc>)
 801127c:	4620      	mov	r0, r4
 801127e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8011282:	f7f5 fef3 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 8011286:	6829      	ldr	r1, [r5, #0]
 8011288:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801128c:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 8011290:	e452      	b.n	8010b38 <theme_apply+0x174>
 8011292:	bf00      	nop
 8011294:	08025ab0 	.word	0x08025ab0
 8011298:	20002ad8 	.word	0x20002ad8
 801129c:	00010040 	.word	0x00010040
 80112a0:	08029eb4 	.word	0x08029eb4
 80112a4:	08029df0 	.word	0x08029df0
 80112a8:	08029e0c 	.word	0x08029e0c
 80112ac:	00040001 	.word	0x00040001
 80112b0:	00040020 	.word	0x00040020
 80112b4:	08029d1c 	.word	0x08029d1c
 80112b8:	08025f8c 	.word	0x08025f8c
 80112bc:	08029f44 	.word	0x08029f44
 80112c0:	00070002 	.word	0x00070002
 80112c4:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_calendar_class)) {
 80112c6:	4620      	mov	r0, r4
 80112c8:	49a5      	ldr	r1, [pc, #660]	; (8011560 <theme_apply+0xb9c>)
 80112ca:	f7f3 f913 	bl	80044f4 <lv_obj_check_type>
 80112ce:	4607      	mov	r7, r0
 80112d0:	b358      	cbz	r0, 801132a <theme_apply+0x966>
        lv_obj_add_style(obj, &styles->card, 0);
 80112d2:	4da4      	ldr	r5, [pc, #656]	; (8011564 <theme_apply+0xba0>)
 80112d4:	4620      	mov	r0, r4
 80112d6:	9a01      	ldr	r2, [sp, #4]
 80112d8:	6829      	ldr	r1, [r5, #0]
 80112da:	3118      	adds	r1, #24
 80112dc:	f7f5 fec6 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->calendar_bg, 0);
 80112e0:	6829      	ldr	r1, [r5, #0]
 80112e2:	9a01      	ldr	r2, [sp, #4]
 80112e4:	4620      	mov	r0, r4
 80112e6:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 80112ea:	f7f5 febf 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80112ee:	6829      	ldr	r1, [r5, #0]
 80112f0:	2204      	movs	r2, #4
 80112f2:	4620      	mov	r0, r4
 80112f4:	31a0      	adds	r1, #160	; 0xa0
 80112f6:	f7f5 feb9 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80112fa:	6829      	ldr	r1, [r5, #0]
 80112fc:	2208      	movs	r2, #8
 80112fe:	4620      	mov	r0, r4
 8011300:	31a8      	adds	r1, #168	; 0xa8
 8011302:	f7f5 feb3 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->calendar_day, LV_PART_ITEMS);
 8011306:	6829      	ldr	r1, [r5, #0]
 8011308:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801130c:	4620      	mov	r0, r4
 801130e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8011312:	f7f5 feab 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8011316:	6829      	ldr	r1, [r5, #0]
 8011318:	4a93      	ldr	r2, [pc, #588]	; (8011568 <theme_apply+0xba4>)
 801131a:	4620      	mov	r0, r4
 801131c:	3158      	adds	r1, #88	; 0x58
 801131e:	f7f5 fea5 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8011322:	6829      	ldr	r1, [r5, #0]
 8011324:	4a91      	ldr	r2, [pc, #580]	; (801156c <theme_apply+0xba8>)
 8011326:	3160      	adds	r1, #96	; 0x60
 8011328:	e4b5      	b.n	8010c96 <theme_apply+0x2d2>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 801132a:	4991      	ldr	r1, [pc, #580]	; (8011570 <theme_apply+0xbac>)
 801132c:	4620      	mov	r0, r4
 801132e:	f7f3 f8e1 	bl	80044f4 <lv_obj_check_type>
 8011332:	2800      	cmp	r0, #0
 8011334:	d03c      	beq.n	80113b0 <theme_apply+0x9ec>
        lv_obj_add_style(obj, &styles->scr, 0);
 8011336:	4d8b      	ldr	r5, [pc, #556]	; (8011564 <theme_apply+0xba0>)
 8011338:	463a      	mov	r2, r7
 801133a:	4620      	mov	r0, r4
 801133c:	6829      	ldr	r1, [r5, #0]
 801133e:	f7f5 fe95 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 8011342:	4b8c      	ldr	r3, [pc, #560]	; (8011574 <theme_apply+0xbb0>)
 8011344:	6829      	ldr	r1, [r5, #0]
 8011346:	2200      	movs	r2, #0
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	4620      	mov	r0, r4
 801134c:	2b01      	cmp	r3, #1
 801134e:	bf0c      	ite	eq
 8011350:	3178      	addeq	r1, #120	; 0x78
 8011352:	3170      	addne	r1, #112	; 0x70
 8011354:	f7f5 fe8a 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8011358:	6829      	ldr	r1, [r5, #0]
 801135a:	2204      	movs	r2, #4
 801135c:	4620      	mov	r0, r4
 801135e:	31a0      	adds	r1, #160	; 0xa0
 8011360:	f7f5 fe84 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8011364:	6829      	ldr	r1, [r5, #0]
 8011366:	2208      	movs	r2, #8
 8011368:	4620      	mov	r0, r4
 801136a:	31a8      	adds	r1, #168	; 0xa8
 801136c:	f7f5 fe7e 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8011370:	6829      	ldr	r1, [r5, #0]
 8011372:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011376:	4620      	mov	r0, r4
 8011378:	3120      	adds	r1, #32
 801137a:	f7f5 fe77 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 801137e:	6829      	ldr	r1, [r5, #0]
 8011380:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011384:	4620      	mov	r0, r4
 8011386:	3150      	adds	r1, #80	; 0x50
 8011388:	f7f5 fe70 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 801138c:	6829      	ldr	r1, [r5, #0]
 801138e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011392:	4620      	mov	r0, r4
 8011394:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 8011398:	f7f5 fe68 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 801139c:	6829      	ldr	r1, [r5, #0]
 801139e:	4a72      	ldr	r2, [pc, #456]	; (8011568 <theme_apply+0xba4>)
 80113a0:	4620      	mov	r0, r4
 80113a2:	3158      	adds	r1, #88	; 0x58
 80113a4:	f7f5 fe62 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 80113a8:	6829      	ldr	r1, [r5, #0]
 80113aa:	4a73      	ldr	r2, [pc, #460]	; (8011578 <theme_apply+0xbb4>)
 80113ac:	3148      	adds	r1, #72	; 0x48
 80113ae:	e472      	b.n	8010c96 <theme_apply+0x2d2>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 80113b0:	4972      	ldr	r1, [pc, #456]	; (801157c <theme_apply+0xbb8>)
 80113b2:	4620      	mov	r0, r4
 80113b4:	f7f3 f89e 	bl	80044f4 <lv_obj_check_type>
 80113b8:	b160      	cbz	r0, 80113d4 <theme_apply+0xa10>
        lv_obj_add_style(obj, &styles->card, 0);
 80113ba:	4d6a      	ldr	r5, [pc, #424]	; (8011564 <theme_apply+0xba0>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4620      	mov	r0, r4
 80113c0:	6829      	ldr	r1, [r5, #0]
 80113c2:	3118      	adds	r1, #24
 80113c4:	f7f5 fe52 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 80113c8:	6829      	ldr	r1, [r5, #0]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 80113d0:	f7ff bb01 	b.w	80109d6 <theme_apply+0x12>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 80113d4:	496a      	ldr	r1, [pc, #424]	; (8011580 <theme_apply+0xbbc>)
 80113d6:	4620      	mov	r0, r4
 80113d8:	f7f3 f88c 	bl	80044f4 <lv_obj_check_type>
 80113dc:	b160      	cbz	r0, 80113f8 <theme_apply+0xa34>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 80113de:	4d61      	ldr	r5, [pc, #388]	; (8011564 <theme_apply+0xba0>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	4620      	mov	r0, r4
 80113e4:	6829      	ldr	r1, [r5, #0]
 80113e6:	3148      	adds	r1, #72	; 0x48
 80113e8:	f7f5 fe40 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 80113ec:	6829      	ldr	r1, [r5, #0]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 80113f4:	f7ff bba0 	b.w	8010b38 <theme_apply+0x174>
 80113f8:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 80113fa:	4620      	mov	r0, r4
 80113fc:	4961      	ldr	r1, [pc, #388]	; (8011584 <theme_apply+0xbc0>)
 80113fe:	f7f3 f879 	bl	80044f4 <lv_obj_check_type>
 8011402:	4605      	mov	r5, r0
 8011404:	b320      	cbz	r0, 8011450 <theme_apply+0xa8c>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8011406:	4d57      	ldr	r5, [pc, #348]	; (8011564 <theme_apply+0xba0>)
 8011408:	4620      	mov	r0, r4
 801140a:	9a01      	ldr	r2, [sp, #4]
 801140c:	6829      	ldr	r1, [r5, #0]
 801140e:	3150      	adds	r1, #80	; 0x50
 8011410:	f7f5 fe2c 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 8011414:	6829      	ldr	r1, [r5, #0]
 8011416:	9a01      	ldr	r2, [sp, #4]
 8011418:	4620      	mov	r0, r4
 801141a:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 801141e:	f7f5 fe25 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 8011422:	6829      	ldr	r1, [r5, #0]
 8011424:	2204      	movs	r2, #4
 8011426:	4620      	mov	r0, r4
 8011428:	3128      	adds	r1, #40	; 0x28
 801142a:	f7f5 fe1f 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 801142e:	6829      	ldr	r1, [r5, #0]
 8011430:	2204      	movs	r2, #4
 8011432:	4620      	mov	r0, r4
 8011434:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8011438:	f7f5 fe18 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 801143c:	6829      	ldr	r1, [r5, #0]
 801143e:	2220      	movs	r2, #32
 8011440:	4620      	mov	r0, r4
 8011442:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8011446:	f7f5 fe11 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 801144a:	6829      	ldr	r1, [r5, #0]
 801144c:	2220      	movs	r2, #32
 801144e:	e6ab      	b.n	80111a8 <theme_apply+0x7e4>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 8011450:	494d      	ldr	r1, [pc, #308]	; (8011588 <theme_apply+0xbc4>)
 8011452:	4620      	mov	r0, r4
 8011454:	f7f3 f84e 	bl	80044f4 <lv_obj_check_type>
 8011458:	b160      	cbz	r0, 8011474 <theme_apply+0xab0>
        lv_obj_add_style(obj, &styles->card, 0);
 801145a:	4e42      	ldr	r6, [pc, #264]	; (8011564 <theme_apply+0xba0>)
 801145c:	462a      	mov	r2, r5
 801145e:	4620      	mov	r0, r4
 8011460:	6831      	ldr	r1, [r6, #0]
 8011462:	3118      	adds	r1, #24
 8011464:	f7f5 fe02 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 8011468:	6831      	ldr	r1, [r6, #0]
 801146a:	462a      	mov	r2, r5
 801146c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8011470:	f7ff babe 	b.w	80109f0 <theme_apply+0x2c>
 8011474:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 8011476:	4620      	mov	r0, r4
 8011478:	4944      	ldr	r1, [pc, #272]	; (801158c <theme_apply+0xbc8>)
 801147a:	f7f3 f83b 	bl	80044f4 <lv_obj_check_type>
 801147e:	4605      	mov	r5, r0
 8011480:	b1e0      	cbz	r0, 80114bc <theme_apply+0xaf8>
        lv_obj_add_style(obj, &styles->card, 0);
 8011482:	4d38      	ldr	r5, [pc, #224]	; (8011564 <theme_apply+0xba0>)
 8011484:	4620      	mov	r0, r4
 8011486:	9a01      	ldr	r2, [sp, #4]
 8011488:	6829      	ldr	r1, [r5, #0]
 801148a:	3118      	adds	r1, #24
 801148c:	f7f5 fdee 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8011490:	6829      	ldr	r1, [r5, #0]
 8011492:	9a01      	ldr	r2, [sp, #4]
 8011494:	4620      	mov	r0, r4
 8011496:	3178      	adds	r1, #120	; 0x78
 8011498:	f7f5 fde8 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801149c:	6829      	ldr	r1, [r5, #0]
 801149e:	2204      	movs	r2, #4
 80114a0:	4620      	mov	r0, r4
 80114a2:	31a0      	adds	r1, #160	; 0xa0
 80114a4:	f7f5 fde2 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80114a8:	6829      	ldr	r1, [r5, #0]
 80114aa:	2208      	movs	r2, #8
 80114ac:	4620      	mov	r0, r4
 80114ae:	31a8      	adds	r1, #168	; 0xa8
 80114b0:	f7f5 fddc 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 80114b4:	6829      	ldr	r1, [r5, #0]
 80114b6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80114ba:	e600      	b.n	80110be <theme_apply+0x6fa>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 80114bc:	4934      	ldr	r1, [pc, #208]	; (8011590 <theme_apply+0xbcc>)
 80114be:	4620      	mov	r0, r4
 80114c0:	f7f3 f818 	bl	80044f4 <lv_obj_check_type>
 80114c4:	b188      	cbz	r0, 80114ea <theme_apply+0xb26>
        lv_obj_add_style(obj, &styles->scr, 0);
 80114c6:	4e27      	ldr	r6, [pc, #156]	; (8011564 <theme_apply+0xba0>)
 80114c8:	462a      	mov	r2, r5
 80114ca:	4620      	mov	r0, r4
 80114cc:	6831      	ldr	r1, [r6, #0]
 80114ce:	f7f5 fdcd 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80114d2:	6831      	ldr	r1, [r6, #0]
 80114d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80114d8:	4620      	mov	r0, r4
 80114da:	3108      	adds	r1, #8
 80114dc:	f7f5 fdc6 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80114e0:	6831      	ldr	r1, [r6, #0]
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80114e2:	4a2c      	ldr	r2, [pc, #176]	; (8011594 <theme_apply+0xbd0>)
 80114e4:	3110      	adds	r1, #16
 80114e6:	f7ff bb27 	b.w	8010b38 <theme_apply+0x174>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 80114ea:	492b      	ldr	r1, [pc, #172]	; (8011598 <theme_apply+0xbd4>)
 80114ec:	4620      	mov	r0, r4
 80114ee:	f7f3 f801 	bl	80044f4 <lv_obj_check_type>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	f43f ab23 	beq.w	8010b3e <theme_apply+0x17a>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80114f8:	4d1a      	ldr	r5, [pc, #104]	; (8011564 <theme_apply+0xba0>)
 80114fa:	f7ff bacd 	b.w	8010a98 <theme_apply+0xd4>
 80114fe:	9001      	str	r0, [sp, #4]
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 8011500:	4620      	mov	r0, r4
 8011502:	4926      	ldr	r1, [pc, #152]	; (801159c <theme_apply+0xbd8>)
 8011504:	f7f2 fff6 	bl	80044f4 <lv_obj_check_type>
 8011508:	4606      	mov	r6, r0
 801150a:	b1d0      	cbz	r0, 8011542 <theme_apply+0xb7e>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 801150c:	4e15      	ldr	r6, [pc, #84]	; (8011564 <theme_apply+0xba0>)
 801150e:	4620      	mov	r0, r4
 8011510:	9a01      	ldr	r2, [sp, #4]
 8011512:	6831      	ldr	r1, [r6, #0]
 8011514:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 8011518:	f7f5 fda8 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 801151c:	6831      	ldr	r1, [r6, #0]
 801151e:	9a01      	ldr	r2, [sp, #4]
 8011520:	4620      	mov	r0, r4
 8011522:	3180      	adds	r1, #128	; 0x80
 8011524:	f7f5 fda2 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8011528:	6831      	ldr	r1, [r6, #0]
 801152a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801152e:	4620      	mov	r0, r4
 8011530:	3150      	adds	r1, #80	; 0x50
 8011532:	f7f5 fd9b 	bl	800706c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 8011536:	6831      	ldr	r1, [r6, #0]
 8011538:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801153c:	3180      	adds	r1, #128	; 0x80
 801153e:	f7ff ba57 	b.w	80109f0 <theme_apply+0x2c>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 8011542:	4917      	ldr	r1, [pc, #92]	; (80115a0 <theme_apply+0xbdc>)
 8011544:	4620      	mov	r0, r4
 8011546:	f7f2 ffd5 	bl	80044f4 <lv_obj_check_type>
 801154a:	b130      	cbz	r0, 801155a <theme_apply+0xb96>
            lv_obj_add_style(obj, &styles->led, 0);
 801154c:	4b05      	ldr	r3, [pc, #20]	; (8011564 <theme_apply+0xba0>)
 801154e:	4632      	mov	r2, r6
 8011550:	6819      	ldr	r1, [r3, #0]
 8011552:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 8011556:	f7ff ba4b 	b.w	80109f0 <theme_apply+0x2c>
}
 801155a:	b003      	add	sp, #12
 801155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801155e:	bf00      	nop
 8011560:	08025a94 	.word	0x08025a94
 8011564:	20002ad8 	.word	0x20002ad8
 8011568:	00050020 	.word	0x00050020
 801156c:	00050080 	.word	0x00050080
 8011570:	08025f00 	.word	0x08025f00
 8011574:	20002ac8 	.word	0x20002ac8
 8011578:	00050001 	.word	0x00050001
 801157c:	08025f54 	.word	0x08025f54
 8011580:	08025f70 	.word	0x08025f70
 8011584:	08025f38 	.word	0x08025f38
 8011588:	08025fa8 	.word	0x08025fa8
 801158c:	08025fc4 	.word	0x08025fc4
 8011590:	08025ffc 	.word	0x08025ffc
 8011594:	00010040 	.word	0x00010040
 8011598:	08026018 	.word	0x08026018
 801159c:	08025acc 	.word	0x08025acc
 80115a0:	08025f1c 	.word	0x08025f1c

080115a4 <grey_filter_cb>:
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 80115a4:	4b0b      	ldr	r3, [pc, #44]	; (80115d4 <grey_filter_cb+0x30>)
 80115a6:	6a1b      	ldr	r3, [r3, #32]
 80115a8:	07db      	lsls	r3, r3, #31
{
 80115aa:	b513      	push	{r0, r1, r4, lr}
 80115ac:	460c      	mov	r4, r1
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 80115ae:	f04f 0012 	mov.w	r0, #18
 80115b2:	f04f 0102 	mov.w	r1, #2
 80115b6:	9201      	str	r2, [sp, #4]
 80115b8:	d508      	bpl.n	80115cc <grey_filter_cb+0x28>
 80115ba:	f005 ff7b 	bl	80174b4 <lv_palette_darken>
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 80115be:	9a01      	ldr	r2, [sp, #4]
 80115c0:	4621      	mov	r1, r4
}
 80115c2:	b002      	add	sp, #8
 80115c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 80115c8:	f7ff b9cf 	b.w	801096a <lv_color_mix>
 80115cc:	f005 ff60 	bl	8017490 <lv_palette_lighten>
 80115d0:	e7f5      	b.n	80115be <grey_filter_cb+0x1a>
 80115d2:	bf00      	nop
 80115d4:	20002adc 	.word	0x20002adc

080115d8 <dark_color_filter_cb>:
{
 80115d8:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 80115da:	4611      	mov	r1, r2
 80115dc:	f005 bede 	b.w	801739c <lv_color_darken>

080115e0 <lv_style_set_pad_row>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 80115e0:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 80115e2:	f241 0114 	movw	r1, #4116	; 0x1014
 80115e6:	f007 b8d4 	b.w	8018792 <lv_style_set_prop>

080115ea <lv_style_set_line_width>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 80115ea:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 80115ec:	f640 0149 	movw	r1, #2121	; 0x849
 80115f0:	f007 b8cf 	b.w	8018792 <lv_style_set_prop>

080115f4 <lv_style_set_line_color>:
            .num = (int32_t)val \
        } \
    }

static inline void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 80115f4:	b082      	sub	sp, #8
    lv_style_value_t v = {
 80115f6:	2300      	movs	r3, #0
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 80115f8:	b28a      	uxth	r2, r1
 80115fa:	214d      	movs	r1, #77	; 0x4d
    lv_style_value_t v = {
 80115fc:	f8ad 3000 	strh.w	r3, [sp]
}
 8011600:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8011602:	f007 b8c6 	b.w	8018792 <lv_style_set_prop>

08011606 <lv_style_set_size>:
static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value) {
    lv_style_set_pad_row(style, value);
    lv_style_set_pad_column(style, value);
}

static inline void lv_style_set_size(lv_style_t * style, lv_coord_t value) {
 8011606:	b513      	push	{r0, r1, r4, lr}
 8011608:	4604      	mov	r4, r0
 801160a:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 801160c:	9101      	str	r1, [sp, #4]
 801160e:	f241 0101 	movw	r1, #4097	; 0x1001
 8011612:	f007 f8be 	bl	8018792 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 8011616:	9a01      	ldr	r2, [sp, #4]
 8011618:	f241 0104 	movw	r1, #4100	; 0x1004
 801161c:	4620      	mov	r0, r4
    lv_style_set_width(style, value);
    lv_style_set_height(style, value);
}
 801161e:	b002      	add	sp, #8
 8011620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011624:	f007 b8b5 	b.w	8018792 <lv_style_set_prop>

08011628 <lv_style_set_text_color>:
{
 8011628:	b082      	sub	sp, #8
    lv_style_value_t v = {
 801162a:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 801162c:	b28a      	uxth	r2, r1
 801162e:	f240 4157 	movw	r1, #1111	; 0x457
    lv_style_value_t v = {
 8011632:	f8ad 3000 	strh.w	r3, [sp]
}
 8011636:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8011638:	f007 b8ab 	b.w	8018792 <lv_style_set_prop>

0801163c <lv_style_set_border_width>:
{
 801163c:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 801163e:	f241 0132 	movw	r1, #4146	; 0x1032
 8011642:	f007 b8a6 	b.w	8018792 <lv_style_set_prop>

08011646 <lv_style_set_border_color>:
{
 8011646:	b082      	sub	sp, #8
    lv_style_value_t v = {
 8011648:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 801164a:	b28a      	uxth	r2, r1
 801164c:	2130      	movs	r1, #48	; 0x30
    lv_style_value_t v = {
 801164e:	f8ad 3000 	strh.w	r3, [sp]
}
 8011652:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8011654:	f007 b89d 	b.w	8018792 <lv_style_set_prop>

08011658 <lv_style_set_pad_column>:
{
 8011658:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 801165a:	f241 0115 	movw	r1, #4117	; 0x1015
 801165e:	f007 b898 	b.w	8018792 <lv_style_set_prop>

08011662 <lv_style_set_bg_opa>:
{
 8011662:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8011664:	2121      	movs	r1, #33	; 0x21
 8011666:	f007 b894 	b.w	8018792 <lv_style_set_prop>

0801166a <lv_style_set_bg_color>:
{
 801166a:	b082      	sub	sp, #8
    lv_style_value_t v = {
 801166c:	2300      	movs	r3, #0
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 801166e:	b28a      	uxth	r2, r1
 8011670:	2120      	movs	r1, #32
    lv_style_value_t v = {
 8011672:	f8ad 3000 	strh.w	r3, [sp]
}
 8011676:	b002      	add	sp, #8
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8011678:	f007 b88b 	b.w	8018792 <lv_style_set_prop>

0801167c <lv_style_set_radius>:
{
 801167c:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 801167e:	2160      	movs	r1, #96	; 0x60
 8011680:	f007 b887 	b.w	8018792 <lv_style_set_prop>

08011684 <style_init_reset>:
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
 8011684:	4b03      	ldr	r3, [pc, #12]	; (8011694 <style_init_reset+0x10>)
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	b10b      	cbz	r3, 801168e <style_init_reset+0xa>
 801168a:	f006 bf5d 	b.w	8018548 <lv_style_reset>
    else lv_style_init(style);
 801168e:	f006 bf58 	b.w	8018542 <lv_style_init>
 8011692:	bf00      	nop
 8011694:	20002ad4 	.word	0x20002ad4

08011698 <lv_disp_dpx.part.0>:
 * DPI of the display.
 * @param obj   an display whose dpi should be considered
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
 8011698:	b538      	push	{r3, r4, r5, lr}
 801169a:	460c      	mov	r4, r1
 801169c:	4605      	mov	r5, r0
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 801169e:	f005 fa19 	bl	8016ad4 <lv_disp_get_dpi>
 80116a2:	4360      	muls	r0, r4
 80116a4:	28ef      	cmp	r0, #239	; 0xef
 80116a6:	dd0a      	ble.n	80116be <lv_disp_dpx.part.0+0x26>
 80116a8:	4628      	mov	r0, r5
 80116aa:	f005 fa13 	bl	8016ad4 <lv_disp_get_dpi>
 80116ae:	2150      	movs	r1, #80	; 0x50
 80116b0:	fb04 1000 	mla	r0, r4, r0, r1
 80116b4:	21a0      	movs	r1, #160	; 0xa0
 80116b6:	fb90 f0f1 	sdiv	r0, r0, r1
 80116ba:	b200      	sxth	r0, r0
}
 80116bc:	bd38      	pop	{r3, r4, r5, pc}
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 80116be:	2001      	movs	r0, #1
 80116c0:	e7fc      	b.n	80116bc <lv_disp_dpx.part.0+0x24>

080116c2 <lv_style_set_pad_hor>:
static inline void lv_style_set_pad_hor(lv_style_t * style, lv_coord_t value) {
 80116c2:	b513      	push	{r0, r1, r4, lr}
 80116c4:	4604      	mov	r4, r0
 80116c6:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 80116c8:	9101      	str	r1, [sp, #4]
 80116ca:	f241 0112 	movw	r1, #4114	; 0x1012
 80116ce:	f007 f860 	bl	8018792 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 80116d2:	9a01      	ldr	r2, [sp, #4]
 80116d4:	f241 0113 	movw	r1, #4115	; 0x1013
 80116d8:	4620      	mov	r0, r4
}
 80116da:	b002      	add	sp, #8
 80116dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116e0:	f007 b857 	b.w	8018792 <lv_style_set_prop>

080116e4 <lv_style_set_pad_ver>:
static inline void lv_style_set_pad_ver(lv_style_t * style, lv_coord_t value) {
 80116e4:	b513      	push	{r0, r1, r4, lr}
 80116e6:	4604      	mov	r4, r0
 80116e8:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 80116ea:	9101      	str	r1, [sp, #4]
 80116ec:	f241 0110 	movw	r1, #4112	; 0x1010
 80116f0:	f007 f84f 	bl	8018792 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 80116f4:	9a01      	ldr	r2, [sp, #4]
 80116f6:	f241 0111 	movw	r1, #4113	; 0x1011
 80116fa:	4620      	mov	r0, r4
}
 80116fc:	b002      	add	sp, #8
 80116fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011702:	f007 b846 	b.w	8018792 <lv_style_set_prop>

08011706 <lv_style_set_pad_all>:
static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value) {
 8011706:	b513      	push	{r0, r1, r4, lr}
 8011708:	4604      	mov	r4, r0
 801170a:	460a      	mov	r2, r1
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 801170c:	9101      	str	r1, [sp, #4]
 801170e:	f241 0112 	movw	r1, #4114	; 0x1012
 8011712:	f007 f83e 	bl	8018792 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8011716:	9a01      	ldr	r2, [sp, #4]
 8011718:	4620      	mov	r0, r4
 801171a:	f241 0113 	movw	r1, #4115	; 0x1013
 801171e:	f007 f838 	bl	8018792 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8011722:	9a01      	ldr	r2, [sp, #4]
 8011724:	4620      	mov	r0, r4
 8011726:	f241 0110 	movw	r1, #4112	; 0x1010
 801172a:	f007 f832 	bl	8018792 <lv_style_set_prop>
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 801172e:	9a01      	ldr	r2, [sp, #4]
 8011730:	f241 0111 	movw	r1, #4113	; 0x1011
 8011734:	4620      	mov	r0, r4
}
 8011736:	b002      	add	sp, #8
 8011738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801173c:	f007 b829 	b.w	8018792 <lv_style_set_prop>

08011740 <lv_theme_default_init>:
{
 8011740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	4699      	mov	r9, r3
    if(!inited) {
 8011746:	4ba7      	ldr	r3, [pc, #668]	; (80119e4 <lv_theme_default_init+0x2a4>)
{
 8011748:	b087      	sub	sp, #28
 801174a:	4680      	mov	r8, r0
    if(!inited) {
 801174c:	781b      	ldrb	r3, [r3, #0]
{
 801174e:	468b      	mov	fp, r1
 8011750:	4692      	mov	sl, r2
 8011752:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011754:	4ca4      	ldr	r4, [pc, #656]	; (80119e8 <lv_theme_default_init+0x2a8>)
    if(!inited) {
 8011756:	b933      	cbnz	r3, 8011766 <lv_theme_default_init+0x26>
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8011758:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801175c:	f006 fa5c 	bl	8017c18 <lv_mem_alloc>
 8011760:	4ba2      	ldr	r3, [pc, #648]	; (80119ec <lv_theme_default_init+0x2ac>)
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 8011762:	6020      	str	r0, [r4, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8011764:	6018      	str	r0, [r3, #0]
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 8011766:	f005 f98f 	bl	8016a88 <lv_disp_get_default>
 801176a:	4ea1      	ldr	r6, [pc, #644]	; (80119f0 <lv_theme_default_init+0x2b0>)
 801176c:	f005 f992 	bl	8016a94 <lv_disp_get_hor_res>
 8011770:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8011774:	f301 800c 	bgt.w	8012790 <lv_theme_default_init+0x1050>
 8011778:	2303      	movs	r3, #3
    theme.disp = disp;
 801177a:	4d9e      	ldr	r5, [pc, #632]	; (80119f4 <lv_theme_default_init+0x2b4>)
    else disp_size = DISP_LARGE;
 801177c:	7033      	strb	r3, [r6, #0]
    theme.apply_cb = theme_apply;
 801177e:	4b9e      	ldr	r3, [pc, #632]	; (80119f8 <lv_theme_default_init+0x2b8>)
    theme.color_secondary = color_secondary;
 8011780:	f8a5 a012 	strh.w	sl, [r5, #18]
    theme.font_large = font;
 8011784:	61ef      	str	r7, [r5, #28]
 8011786:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8011a14 <lv_theme_default_init+0x2d4>
    theme.disp = disp;
 801178a:	f8c5 800c 	str.w	r8, [r5, #12]
    theme.color_primary = color_primary;
 801178e:	f8a5 b010 	strh.w	fp, [r5, #16]
    theme.apply_cb = theme_apply;
 8011792:	602b      	str	r3, [r5, #0]
    theme.flags = dark ? MODE_DARK : 0;
 8011794:	f8c5 9020 	str.w	r9, [r5, #32]
    theme.font_normal = font;
 8011798:	e9c5 7705 	strd	r7, r7, [r5, #20]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 801179c:	4f97      	ldr	r7, [pc, #604]	; (80119fc <lv_theme_default_init+0x2bc>)
 801179e:	f1b9 0f00 	cmp.w	r9, #0
 80117a2:	f001 8000 	beq.w	80127a6 <lv_theme_default_init+0x1066>
 80117a6:	f241 03a3 	movw	r3, #4259	; 0x10a3
 80117aa:	f8aa 3000 	strh.w	r3, [sl]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 80117ae:	2105      	movs	r1, #5
 80117b0:	2012      	movs	r0, #18
 80117b2:	f005 fe6d 	bl	8017490 <lv_palette_lighten>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 80117b6:	6a2b      	ldr	r3, [r5, #32]
 80117b8:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8011a18 <lv_theme_default_init+0x2d8>
 80117bc:	f013 0f01 	tst.w	r3, #1
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 80117c0:	8038      	strh	r0, [r7, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 80117c2:	f001 8000 	beq.w	80127c6 <lv_theme_default_init+0x1086>
 80117c6:	f642 1346 	movw	r3, #10566	; 0x2946
 80117ca:	4a8d      	ldr	r2, [pc, #564]	; (8011a00 <lv_theme_default_init+0x2c0>)
 80117cc:	8013      	strh	r3, [r2, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 80117ce:	f642 1386 	movw	r3, #10630	; 0x2986
 80117d2:	f8a9 3000 	strh.w	r3, [r9]
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 80117d6:	f04f 0b00 	mov.w	fp, #0
 80117da:	2346      	movs	r3, #70	; 0x46
 80117dc:	4a89      	ldr	r2, [pc, #548]	; (8011a04 <lv_theme_default_init+0x2c4>)
 80117de:	498a      	ldr	r1, [pc, #552]	; (8011a08 <lv_theme_default_init+0x2c8>)
 80117e0:	488a      	ldr	r0, [pc, #552]	; (8011a0c <lv_theme_default_init+0x2cc>)
 80117e2:	e9cd 3b00 	strd	r3, fp, [sp]
 80117e6:	2350      	movs	r3, #80	; 0x50
 80117e8:	f006 ff5a 	bl	80186a0 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 80117ec:	2350      	movs	r3, #80	; 0x50
 80117ee:	4a85      	ldr	r2, [pc, #532]	; (8011a04 <lv_theme_default_init+0x2c4>)
 80117f0:	4985      	ldr	r1, [pc, #532]	; (8011a08 <lv_theme_default_init+0x2c8>)
 80117f2:	4887      	ldr	r0, [pc, #540]	; (8011a10 <lv_theme_default_init+0x2d0>)
 80117f4:	e9cd bb00 	strd	fp, fp, [sp]
 80117f8:	f006 ff52 	bl	80186a0 <lv_style_transition_dsc_init>
    style_init_reset(&styles->transition_delayed);
 80117fc:	6820      	ldr	r0, [r4, #0]
 80117fe:	30d0      	adds	r0, #208	; 0xd0
 8011800:	f7ff ff40 	bl	8011684 <style_init_reset>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 8011804:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 8011806:	4a81      	ldr	r2, [pc, #516]	; (8011a0c <lv_theme_default_init+0x2cc>)
 8011808:	2167      	movs	r1, #103	; 0x67
 801180a:	30d0      	adds	r0, #208	; 0xd0
 801180c:	f006 ffc1 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->transition_normal);
 8011810:	6820      	ldr	r0, [r4, #0]
 8011812:	30d8      	adds	r0, #216	; 0xd8
 8011814:	f7ff ff36 	bl	8011684 <style_init_reset>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 8011818:	6820      	ldr	r0, [r4, #0]
 801181a:	4a7d      	ldr	r2, [pc, #500]	; (8011a10 <lv_theme_default_init+0x2d0>)
 801181c:	2167      	movs	r1, #103	; 0x67
 801181e:	30d8      	adds	r0, #216	; 0xd8
 8011820:	f006 ffb7 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->scrollbar);
 8011824:	6820      	ldr	r0, [r4, #0]
 8011826:	3008      	adds	r0, #8
 8011828:	f7ff ff2c 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->scrollbar, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_main(LV_PALETTE_GREY));
 801182c:	6823      	ldr	r3, [r4, #0]
 801182e:	f103 0b08 	add.w	fp, r3, #8
 8011832:	6a2b      	ldr	r3, [r5, #32]
 8011834:	07da      	lsls	r2, r3, #31
 8011836:	f140 87d6 	bpl.w	80127e6 <lv_theme_default_init+0x10a6>
 801183a:	2102      	movs	r1, #2
 801183c:	2012      	movs	r0, #18
 801183e:	f005 fe39 	bl	80174b4 <lv_palette_darken>
 8011842:	4601      	mov	r1, r0
 8011844:	4658      	mov	r0, fp
 8011846:	f7ff ff10 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 801184a:	6820      	ldr	r0, [r4, #0]
 801184c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011850:	3008      	adds	r0, #8
 8011852:	f7ff ff13 	bl	801167c <lv_style_set_radius>
    lv_style_set_pad_right(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	2107      	movs	r1, #7
 801185a:	68e8      	ldr	r0, [r5, #12]
 801185c:	f103 0b08 	add.w	fp, r3, #8
 8011860:	f7ff ff1a 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8011864:	f241 0113 	movw	r1, #4115	; 0x1013
 8011868:	4602      	mov	r2, r0
 801186a:	4658      	mov	r0, fp
 801186c:	f006 ff91 	bl	8018792 <lv_style_set_prop>
    lv_style_set_pad_top(&styles->scrollbar,  lv_disp_dpx(theme.disp, 7));
 8011870:	6823      	ldr	r3, [r4, #0]
 8011872:	2107      	movs	r1, #7
 8011874:	68e8      	ldr	r0, [r5, #12]
 8011876:	f103 0b08 	add.w	fp, r3, #8
 801187a:	f7ff ff0d 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 801187e:	f241 0110 	movw	r1, #4112	; 0x1010
 8011882:	4602      	mov	r2, r0
 8011884:	4658      	mov	r0, fp
 8011886:	f006 ff84 	bl	8018792 <lv_style_set_prop>
    lv_style_set_size(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	2105      	movs	r1, #5
 801188e:	f100 0b08 	add.w	fp, r0, #8
 8011892:	68e8      	ldr	r0, [r5, #12]
 8011894:	f7ff ff00 	bl	8011698 <lv_disp_dpx.part.0>
 8011898:	4601      	mov	r1, r0
 801189a:	4658      	mov	r0, fp
 801189c:	f7ff feb3 	bl	8011606 <lv_style_set_size>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 80118a0:	6820      	ldr	r0, [r4, #0]
 80118a2:	2166      	movs	r1, #102	; 0x66
 80118a4:	3008      	adds	r0, #8
 80118a6:	f7ff fedc 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 80118aa:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 80118ac:	4a58      	ldr	r2, [pc, #352]	; (8011a10 <lv_theme_default_init+0x2d0>)
 80118ae:	2167      	movs	r1, #103	; 0x67
 80118b0:	3008      	adds	r0, #8
 80118b2:	f006 ff6e 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->scrollbar_scrolled);
 80118b6:	6820      	ldr	r0, [r4, #0]
 80118b8:	3010      	adds	r0, #16
 80118ba:	f7ff fee3 	bl	8011684 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 80118be:	6820      	ldr	r0, [r4, #0]
 80118c0:	21ff      	movs	r1, #255	; 0xff
 80118c2:	3010      	adds	r0, #16
 80118c4:	f7ff fecd 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	f7ff fedb 	bl	8011684 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 80118ce:	21ff      	movs	r1, #255	; 0xff
 80118d0:	6820      	ldr	r0, [r4, #0]
 80118d2:	f7ff fec6 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 80118d6:	f8ba 1000 	ldrh.w	r1, [sl]
 80118da:	6820      	ldr	r0, [r4, #0]
 80118dc:	f7ff fec5 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 80118e0:	8839      	ldrh	r1, [r7, #0]
 80118e2:	6820      	ldr	r0, [r4, #0]
 80118e4:	f7ff fea0 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 80118e8:	7833      	ldrb	r3, [r6, #0]
 80118ea:	f8d4 a000 	ldr.w	sl, [r4]
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	f040 877e 	bne.w	80127f0 <lv_theme_default_init+0x10b0>
 80118f4:	210e      	movs	r1, #14
 80118f6:	68e8      	ldr	r0, [r5, #12]
 80118f8:	f7ff fece 	bl	8011698 <lv_disp_dpx.part.0>
 80118fc:	4601      	mov	r1, r0
 80118fe:	4650      	mov	r0, sl
 8011900:	f7ff fe6e 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 8011904:	7833      	ldrb	r3, [r6, #0]
 8011906:	f8d4 a000 	ldr.w	sl, [r4]
 801190a:	2b01      	cmp	r3, #1
 801190c:	f040 8777 	bne.w	80127fe <lv_theme_default_init+0x10be>
 8011910:	210e      	movs	r1, #14
 8011912:	68e8      	ldr	r0, [r5, #12]
 8011914:	f7ff fec0 	bl	8011698 <lv_disp_dpx.part.0>
 8011918:	4601      	mov	r1, r0
 801191a:	4650      	mov	r0, sl
 801191c:	f7ff fe9c 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 8011920:	6820      	ldr	r0, [r4, #0]
 8011922:	3018      	adds	r0, #24
 8011924:	f7ff feae 	bl	8011684 <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 8011928:	6823      	ldr	r3, [r4, #0]
 801192a:	68e8      	ldr	r0, [r5, #12]
 801192c:	f103 0a18 	add.w	sl, r3, #24
 8011930:	7833      	ldrb	r3, [r6, #0]
 8011932:	2b01      	cmp	r3, #1
 8011934:	bf0c      	ite	eq
 8011936:	210c      	moveq	r1, #12
 8011938:	2108      	movne	r1, #8
 801193a:	f7ff fead 	bl	8011698 <lv_disp_dpx.part.0>
 801193e:	4601      	mov	r1, r0
 8011940:	4650      	mov	r0, sl
 8011942:	f7ff fe9b 	bl	801167c <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 8011946:	6820      	ldr	r0, [r4, #0]
 8011948:	21ff      	movs	r1, #255	; 0xff
 801194a:	3018      	adds	r0, #24
 801194c:	f7ff fe89 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 8011950:	4b2b      	ldr	r3, [pc, #172]	; (8011a00 <lv_theme_default_init+0x2c0>)
 8011952:	6820      	ldr	r0, [r4, #0]
 8011954:	8819      	ldrh	r1, [r3, #0]
 8011956:	3018      	adds	r0, #24
 8011958:	f7ff fe87 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	f8b9 1000 	ldrh.w	r1, [r9]
 8011962:	3018      	adds	r0, #24
 8011964:	f7ff fe6f 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 8011968:	6820      	ldr	r0, [r4, #0]
 801196a:	2102      	movs	r1, #2
 801196c:	f100 0a18 	add.w	sl, r0, #24
 8011970:	68e8      	ldr	r0, [r5, #12]
 8011972:	f7ff fe91 	bl	8011698 <lv_disp_dpx.part.0>
 8011976:	4601      	mov	r1, r0
 8011978:	4650      	mov	r0, sl
 801197a:	f7ff fe5f 	bl	801163c <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 801197e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 8011980:	2201      	movs	r2, #1
 8011982:	2134      	movs	r1, #52	; 0x34
 8011984:	3018      	adds	r0, #24
 8011986:	f006 ff04 	bl	8018792 <lv_style_set_prop>
    lv_style_set_text_color(&styles->card, color_text);
 801198a:	6820      	ldr	r0, [r4, #0]
 801198c:	8839      	ldrh	r1, [r7, #0]
 801198e:	3018      	adds	r0, #24
 8011990:	f7ff fe4a 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8011994:	6823      	ldr	r3, [r4, #0]
 8011996:	f103 0a18 	add.w	sl, r3, #24
 801199a:	7833      	ldrb	r3, [r6, #0]
 801199c:	2b01      	cmp	r3, #1
 801199e:	f040 8735 	bne.w	801280c <lv_theme_default_init+0x10cc>
 80119a2:	2118      	movs	r1, #24
 80119a4:	68e8      	ldr	r0, [r5, #12]
 80119a6:	f7ff fe77 	bl	8011698 <lv_disp_dpx.part.0>
 80119aa:	4601      	mov	r1, r0
 80119ac:	4650      	mov	r0, sl
 80119ae:	f7ff feaa 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	f103 0a18 	add.w	sl, r3, #24
 80119b8:	7833      	ldrb	r3, [r6, #0]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	f040 872d 	bne.w	801281a <lv_theme_default_init+0x10da>
 80119c0:	210e      	movs	r1, #14
 80119c2:	68e8      	ldr	r0, [r5, #12]
 80119c4:	f7ff fe68 	bl	8011698 <lv_disp_dpx.part.0>
 80119c8:	4601      	mov	r1, r0
 80119ca:	4650      	mov	r0, sl
 80119cc:	f7ff fe08 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	f103 0a18 	add.w	sl, r3, #24
 80119d6:	7833      	ldrb	r3, [r6, #0]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	f040 8725 	bne.w	8012828 <lv_theme_default_init+0x10e8>
 80119de:	210e      	movs	r1, #14
 80119e0:	68e8      	ldr	r0, [r5, #12]
 80119e2:	e01b      	b.n	8011a1c <lv_theme_default_init+0x2dc>
 80119e4:	20002ad4 	.word	0x20002ad4
 80119e8:	20002ad8 	.word	0x20002ad8
 80119ec:	2000ae1c 	.word	0x2000ae1c
 80119f0:	20002ac8 	.word	0x20002ac8
 80119f4:	20002adc 	.word	0x20002adc
 80119f8:	080109c5 	.word	0x080109c5
 80119fc:	20002abc 	.word	0x20002abc
 8011a00:	20002ab6 	.word	0x20002ab6
 8011a04:	08016c19 	.word	0x08016c19
 8011a08:	08025a4a 	.word	0x08025a4a
 8011a0c:	20002b00 	.word	0x20002b00
 8011a10:	20002b14 	.word	0x20002b14
 8011a14:	20002aba 	.word	0x20002aba
 8011a18:	20002ab8 	.word	0x20002ab8
 8011a1c:	f7ff fe3c 	bl	8011698 <lv_disp_dpx.part.0>
 8011a20:	4601      	mov	r1, r0
 8011a22:	4650      	mov	r0, sl
 8011a24:	f7ff fe18 	bl	8011658 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 8011a28:	6820      	ldr	r0, [r4, #0]
 8011a2a:	f100 0a18 	add.w	sl, r0, #24
 8011a2e:	2012      	movs	r0, #18
 8011a30:	f005 fd24 	bl	801747c <lv_palette_main>
 8011a34:	4601      	mov	r1, r0
 8011a36:	4650      	mov	r0, sl
 8011a38:	f7ff fddc 	bl	80115f4 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 8011a3c:	6820      	ldr	r0, [r4, #0]
 8011a3e:	2101      	movs	r1, #1
 8011a40:	f100 0a18 	add.w	sl, r0, #24
 8011a44:	68e8      	ldr	r0, [r5, #12]
 8011a46:	f7ff fe27 	bl	8011698 <lv_disp_dpx.part.0>
 8011a4a:	4601      	mov	r1, r0
 8011a4c:	4650      	mov	r0, sl
    lv_style_value_t v = {
 8011a4e:	f04f 0a00 	mov.w	sl, #0
 8011a52:	f7ff fdca 	bl	80115ea <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 8011a56:	6820      	ldr	r0, [r4, #0]
 8011a58:	30a0      	adds	r0, #160	; 0xa0
 8011a5a:	f7ff fe13 	bl	8011684 <style_init_reset>
 8011a5e:	4652      	mov	r2, sl
 8011a60:	8a2b      	ldrh	r3, [r5, #16]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011a62:	213b      	movs	r1, #59	; 0x3b
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 8011a64:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8011a66:	f36a 421f 	bfi	r2, sl, #16, #16
 8011a6a:	f8ad a010 	strh.w	sl, [sp, #16]
 8011a6e:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011a72:	30a0      	adds	r0, #160	; 0xa0
 8011a74:	f006 fe8d 	bl	8018792 <lv_style_set_prop>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 8011a78:	6820      	ldr	r0, [r4, #0]
 8011a7a:	2103      	movs	r1, #3
 8011a7c:	f100 0ba0 	add.w	fp, r0, #160	; 0xa0
 8011a80:	68e8      	ldr	r0, [r5, #12]
 8011a82:	f7ff fe09 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8011a86:	f640 013a 	movw	r1, #2106	; 0x83a
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	4658      	mov	r0, fp
 8011a8e:	f006 fe80 	bl	8018792 <lv_style_set_prop>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 8011a92:	6820      	ldr	r0, [r4, #0]
 8011a94:	2103      	movs	r1, #3
 8011a96:	f100 0ba0 	add.w	fp, r0, #160	; 0xa0
 8011a9a:	68e8      	ldr	r0, [r5, #12]
 8011a9c:	f7ff fdfc 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8011aa0:	f640 013d 	movw	r1, #2109	; 0x83d
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	4658      	mov	r0, fp
 8011aa8:	f006 fe73 	bl	8018792 <lv_style_set_prop>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 8011aac:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 8011aae:	227f      	movs	r2, #127	; 0x7f
 8011ab0:	f640 013c 	movw	r1, #2108	; 0x83c
 8011ab4:	30a0      	adds	r0, #160	; 0xa0
 8011ab6:	f006 fe6c 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->outline_secondary);
 8011aba:	6820      	ldr	r0, [r4, #0]
 8011abc:	30a8      	adds	r0, #168	; 0xa8
 8011abe:	f7ff fde1 	bl	8011684 <style_init_reset>
    lv_style_value_t v = {
 8011ac2:	4652      	mov	r2, sl
 8011ac4:	8a6b      	ldrh	r3, [r5, #18]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011ac6:	213b      	movs	r1, #59	; 0x3b
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 8011ac8:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8011aca:	f36a 421f 	bfi	r2, sl, #16, #16
 8011ace:	f8ad a010 	strh.w	sl, [sp, #16]
 8011ad2:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8011ad6:	30a8      	adds	r0, #168	; 0xa8
 8011ad8:	f006 fe5b 	bl	8018792 <lv_style_set_prop>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 8011adc:	6820      	ldr	r0, [r4, #0]
 8011ade:	2103      	movs	r1, #3
 8011ae0:	f100 0aa8 	add.w	sl, r0, #168	; 0xa8
 8011ae4:	68e8      	ldr	r0, [r5, #12]
 8011ae6:	f7ff fdd7 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8011aea:	f640 013a 	movw	r1, #2106	; 0x83a
 8011aee:	4602      	mov	r2, r0
 8011af0:	4650      	mov	r0, sl
 8011af2:	f006 fe4e 	bl	8018792 <lv_style_set_prop>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 8011af6:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 8011af8:	227f      	movs	r2, #127	; 0x7f
 8011afa:	f640 013c 	movw	r1, #2108	; 0x83c
 8011afe:	30a8      	adds	r0, #168	; 0xa8
 8011b00:	f006 fe47 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->btn);
 8011b04:	6820      	ldr	r0, [r4, #0]
 8011b06:	3020      	adds	r0, #32
 8011b08:	f7ff fdbc 	bl	8011684 <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp, 16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 8011b0c:	6823      	ldr	r3, [r4, #0]
 8011b0e:	f103 0a20 	add.w	sl, r3, #32
 8011b12:	7833      	ldrb	r3, [r6, #0]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	f040 868e 	bne.w	8012836 <lv_theme_default_init+0x10f6>
 8011b1a:	2110      	movs	r1, #16
 8011b1c:	68e8      	ldr	r0, [r5, #12]
 8011b1e:	f7ff fdbb 	bl	8011698 <lv_disp_dpx.part.0>
 8011b22:	4601      	mov	r1, r0
 8011b24:	4650      	mov	r0, sl
 8011b26:	f7ff fda9 	bl	801167c <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 8011b2a:	6820      	ldr	r0, [r4, #0]
 8011b2c:	21ff      	movs	r1, #255	; 0xff
 8011b2e:	3020      	adds	r0, #32
 8011b30:	f7ff fd97 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 8011b34:	6820      	ldr	r0, [r4, #0]
 8011b36:	f8b9 1000 	ldrh.w	r1, [r9]
 8011b3a:	3020      	adds	r0, #32
 8011b3c:	f7ff fd95 	bl	801166a <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 8011b40:	6a2b      	ldr	r3, [r5, #32]
 8011b42:	f013 0901 	ands.w	r9, r3, #1
 8011b46:	d125      	bne.n	8011b94 <lv_theme_default_init+0x454>
        lv_style_set_shadow_color(&styles->btn, lv_palette_lighten(LV_PALETTE_GREY, 3));
 8011b48:	6820      	ldr	r0, [r4, #0]
 8011b4a:	2103      	movs	r1, #3
 8011b4c:	f100 0a20 	add.w	sl, r0, #32
 8011b50:	2012      	movs	r0, #18
 8011b52:	f005 fc9d 	bl	8017490 <lv_palette_lighten>
    lv_style_value_t v = {
 8011b56:	2200      	movs	r2, #0
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8011b58:	2144      	movs	r1, #68	; 0x44
    lv_style_value_t v = {
 8011b5a:	f8ad 9010 	strh.w	r9, [sp, #16]
 8011b5e:	f369 421f 	bfi	r2, r9, #16, #16
 8011b62:	f360 020f 	bfi	r2, r0, #0, #16
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8011b66:	4650      	mov	r0, sl
 8011b68:	f006 fe13 	bl	8018792 <lv_style_set_prop>
        lv_style_set_shadow_width(&styles->btn, 1);
 8011b6c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8011b6e:	2201      	movs	r2, #1
 8011b70:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8011b74:	3020      	adds	r0, #32
 8011b76:	f006 fe0c 	bl	8018792 <lv_style_set_prop>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, 4));
 8011b7a:	6820      	ldr	r0, [r4, #0]
 8011b7c:	2104      	movs	r1, #4
 8011b7e:	f100 0920 	add.w	r9, r0, #32
 8011b82:	68e8      	ldr	r0, [r5, #12]
 8011b84:	f7ff fd88 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8011b88:	f640 0142 	movw	r1, #2114	; 0x842
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	4648      	mov	r0, r9
 8011b90:	f006 fdff 	bl	8018792 <lv_style_set_prop>
    lv_style_set_text_color(&styles->btn, color_text);
 8011b94:	6820      	ldr	r0, [r4, #0]
 8011b96:	8839      	ldrh	r1, [r7, #0]
 8011b98:	3020      	adds	r0, #32
 8011b9a:	f7ff fd45 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	f103 0920 	add.w	r9, r3, #32
 8011ba4:	7833      	ldrb	r3, [r6, #0]
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	f040 864c 	bne.w	8012844 <lv_theme_default_init+0x1104>
 8011bac:	2118      	movs	r1, #24
 8011bae:	68e8      	ldr	r0, [r5, #12]
 8011bb0:	f7ff fd72 	bl	8011698 <lv_disp_dpx.part.0>
 8011bb4:	4601      	mov	r1, r0
 8011bb6:	4648      	mov	r0, r9
 8011bb8:	f7ff fd83 	bl	80116c2 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8011bbc:	6823      	ldr	r3, [r4, #0]
 8011bbe:	f103 0920 	add.w	r9, r3, #32
 8011bc2:	7833      	ldrb	r3, [r6, #0]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	f040 8644 	bne.w	8012852 <lv_theme_default_init+0x1112>
 8011bca:	210e      	movs	r1, #14
 8011bcc:	68e8      	ldr	r0, [r5, #12]
 8011bce:	f7ff fd63 	bl	8011698 <lv_disp_dpx.part.0>
 8011bd2:	4601      	mov	r1, r0
 8011bd4:	4648      	mov	r0, r9
    dsc->filter_cb = cb;
 8011bd6:	f8df a384 	ldr.w	sl, [pc, #900]	; 8011f5c <lv_theme_default_init+0x81c>
 8011bda:	f7ff fd83 	bl	80116e4 <lv_style_set_pad_ver>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8011bde:	6820      	ldr	r0, [r4, #0]
 8011be0:	2105      	movs	r1, #5
 8011be2:	f100 0920 	add.w	r9, r0, #32
 8011be6:	68e8      	ldr	r0, [r5, #12]
 8011be8:	f7ff fd56 	bl	8011698 <lv_disp_dpx.part.0>
 8011bec:	4601      	mov	r1, r0
 8011bee:	4648      	mov	r0, r9
 8011bf0:	f7ff fd32 	bl	8011658 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8011bf4:	6820      	ldr	r0, [r4, #0]
 8011bf6:	2105      	movs	r1, #5
 8011bf8:	f100 0920 	add.w	r9, r0, #32
 8011bfc:	68e8      	ldr	r0, [r5, #12]
 8011bfe:	f7ff fd4b 	bl	8011698 <lv_disp_dpx.part.0>
 8011c02:	4601      	mov	r1, r0
 8011c04:	4648      	mov	r0, r9
 8011c06:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8011f60 <lv_theme_default_init+0x820>
 8011c0a:	f7ff fce9 	bl	80115e0 <lv_style_set_pad_row>
 8011c0e:	4bd1      	ldr	r3, [pc, #836]	; (8011f54 <lv_theme_default_init+0x814>)
    style_init_reset(&styles->pressed);
 8011c10:	6820      	ldr	r0, [r4, #0]
 8011c12:	f8ca 3000 	str.w	r3, [sl]
 8011c16:	4bd0      	ldr	r3, [pc, #832]	; (8011f58 <lv_theme_default_init+0x818>)
 8011c18:	3058      	adds	r0, #88	; 0x58
 8011c1a:	f8c9 3000 	str.w	r3, [r9]
 8011c1e:	f7ff fd31 	bl	8011684 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 8011c22:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8011c24:	4652      	mov	r2, sl
 8011c26:	2163      	movs	r1, #99	; 0x63
 8011c28:	3058      	adds	r0, #88	; 0x58
 8011c2a:	f006 fdb2 	bl	8018792 <lv_style_set_prop>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 8011c2e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8011c30:	2223      	movs	r2, #35	; 0x23
 8011c32:	2164      	movs	r1, #100	; 0x64
 8011c34:	3058      	adds	r0, #88	; 0x58
 8011c36:	f006 fdac 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->disabled);
 8011c3a:	6820      	ldr	r0, [r4, #0]
 8011c3c:	3060      	adds	r0, #96	; 0x60
 8011c3e:	f7ff fd21 	bl	8011684 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 8011c42:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8011c44:	464a      	mov	r2, r9
 8011c46:	2163      	movs	r1, #99	; 0x63
 8011c48:	3060      	adds	r0, #96	; 0x60
 8011c4a:	f006 fda2 	bl	8018792 <lv_style_set_prop>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 8011c4e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8011c50:	227f      	movs	r2, #127	; 0x7f
 8011c52:	2164      	movs	r1, #100	; 0x64
 8011c54:	3060      	adds	r0, #96	; 0x60
 8011c56:	f006 fd9c 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->clip_corner);
 8011c5a:	6820      	ldr	r0, [r4, #0]
 8011c5c:	30c0      	adds	r0, #192	; 0xc0
 8011c5e:	f7ff fd11 	bl	8011684 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 8011c62:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8011c64:	2201      	movs	r2, #1
 8011c66:	2161      	movs	r1, #97	; 0x61
 8011c68:	30c0      	adds	r0, #192	; 0xc0
 8011c6a:	f006 fd92 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->pad_normal);
 8011c6e:	6820      	ldr	r0, [r4, #0]
 8011c70:	3080      	adds	r0, #128	; 0x80
 8011c72:	f7ff fd07 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011c7c:	7833      	ldrb	r3, [r6, #0]
 8011c7e:	2b01      	cmp	r3, #1
 8011c80:	f040 85ee 	bne.w	8012860 <lv_theme_default_init+0x1120>
 8011c84:	2118      	movs	r1, #24
 8011c86:	68e8      	ldr	r0, [r5, #12]
 8011c88:	f7ff fd06 	bl	8011698 <lv_disp_dpx.part.0>
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	4648      	mov	r0, r9
 8011c90:	f7ff fd39 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011c9a:	7833      	ldrb	r3, [r6, #0]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	f040 85e6 	bne.w	801286e <lv_theme_default_init+0x112e>
 8011ca2:	2118      	movs	r1, #24
 8011ca4:	68e8      	ldr	r0, [r5, #12]
 8011ca6:	f7ff fcf7 	bl	8011698 <lv_disp_dpx.part.0>
 8011caa:	4601      	mov	r1, r0
 8011cac:	4648      	mov	r0, r9
 8011cae:	f7ff fc97 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 8011cb2:	6823      	ldr	r3, [r4, #0]
 8011cb4:	f103 0980 	add.w	r9, r3, #128	; 0x80
 8011cb8:	7833      	ldrb	r3, [r6, #0]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	f040 85de 	bne.w	801287c <lv_theme_default_init+0x113c>
 8011cc0:	2118      	movs	r1, #24
 8011cc2:	68e8      	ldr	r0, [r5, #12]
 8011cc4:	f7ff fce8 	bl	8011698 <lv_disp_dpx.part.0>
 8011cc8:	4601      	mov	r1, r0
 8011cca:	4648      	mov	r0, r9
 8011ccc:	f7ff fcc4 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 8011cd0:	6820      	ldr	r0, [r4, #0]
 8011cd2:	3078      	adds	r0, #120	; 0x78
 8011cd4:	f7ff fcd6 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 8011cd8:	6823      	ldr	r3, [r4, #0]
 8011cda:	f103 0978 	add.w	r9, r3, #120	; 0x78
 8011cde:	7833      	ldrb	r3, [r6, #0]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	f040 85d2 	bne.w	801288a <lv_theme_default_init+0x114a>
 8011ce6:	210e      	movs	r1, #14
 8011ce8:	68e8      	ldr	r0, [r5, #12]
 8011cea:	f7ff fcd5 	bl	8011698 <lv_disp_dpx.part.0>
 8011cee:	4601      	mov	r1, r0
 8011cf0:	4648      	mov	r0, r9
 8011cf2:	f7ff fd08 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	f103 0a78 	add.w	sl, r3, #120	; 0x78
 8011cfc:	7833      	ldrb	r3, [r6, #0]
 8011cfe:	2b01      	cmp	r3, #1
 8011d00:	f040 85ca 	bne.w	8012898 <lv_theme_default_init+0x1158>
 8011d04:	210e      	movs	r1, #14
 8011d06:	68e8      	ldr	r0, [r5, #12]
 8011d08:	f7ff fcc6 	bl	8011698 <lv_disp_dpx.part.0>
 8011d0c:	4681      	mov	r9, r0
    lv_style_set_pad_row(style, value);
 8011d0e:	4601      	mov	r1, r0
 8011d10:	4650      	mov	r0, sl
 8011d12:	f7ff fc65 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8011d16:	4649      	mov	r1, r9
 8011d18:	4650      	mov	r0, sl
 8011d1a:	f7ff fc9d 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_gap);
 8011d1e:	6820      	ldr	r0, [r4, #0]
 8011d20:	3088      	adds	r0, #136	; 0x88
 8011d22:	f7ff fcaf 	bl	8011684 <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8011d26:	6820      	ldr	r0, [r4, #0]
 8011d28:	210a      	movs	r1, #10
 8011d2a:	f100 0988 	add.w	r9, r0, #136	; 0x88
 8011d2e:	68e8      	ldr	r0, [r5, #12]
 8011d30:	f7ff fcb2 	bl	8011698 <lv_disp_dpx.part.0>
 8011d34:	4601      	mov	r1, r0
 8011d36:	4648      	mov	r0, r9
 8011d38:	f7ff fc52 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8011d3c:	6820      	ldr	r0, [r4, #0]
 8011d3e:	210a      	movs	r1, #10
 8011d40:	f100 0988 	add.w	r9, r0, #136	; 0x88
 8011d44:	68e8      	ldr	r0, [r5, #12]
 8011d46:	f7ff fca7 	bl	8011698 <lv_disp_dpx.part.0>
 8011d4a:	4601      	mov	r1, r0
 8011d4c:	4648      	mov	r0, r9
 8011d4e:	f7ff fc83 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 8011d52:	6820      	ldr	r0, [r4, #0]
 8011d54:	3090      	adds	r0, #144	; 0x90
 8011d56:	f7ff fc95 	bl	8011684 <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 8011d5a:	6820      	ldr	r0, [r4, #0]
 8011d5c:	2114      	movs	r1, #20
 8011d5e:	f100 0990 	add.w	r9, r0, #144	; 0x90
 8011d62:	68e8      	ldr	r0, [r5, #12]
 8011d64:	f7ff fc98 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 8011d68:	f241 415b 	movw	r1, #5211	; 0x145b
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	4648      	mov	r0, r9
 8011d70:	f006 fd0f 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->text_align_center);
 8011d74:	6820      	ldr	r0, [r4, #0]
 8011d76:	3098      	adds	r0, #152	; 0x98
 8011d78:	f7ff fc84 	bl	8011684 <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 8011d7c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 8011d7e:	2202      	movs	r2, #2
 8011d80:	f241 415d 	movw	r1, #5213	; 0x145d
 8011d84:	3098      	adds	r0, #152	; 0x98
 8011d86:	f006 fd04 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->pad_zero);
 8011d8a:	6820      	ldr	r0, [r4, #0]
 8011d8c:	3068      	adds	r0, #104	; 0x68
 8011d8e:	f7ff fc79 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8011d92:	6820      	ldr	r0, [r4, #0]
 8011d94:	2100      	movs	r1, #0
 8011d96:	3068      	adds	r0, #104	; 0x68
 8011d98:	f7ff fcb5 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 8011d9c:	6820      	ldr	r0, [r4, #0]
 8011d9e:	2100      	movs	r1, #0
 8011da0:	3068      	adds	r0, #104	; 0x68
 8011da2:	f7ff fc1d 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 8011da6:	6820      	ldr	r0, [r4, #0]
 8011da8:	2100      	movs	r1, #0
 8011daa:	3068      	adds	r0, #104	; 0x68
 8011dac:	f7ff fc54 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 8011db0:	6820      	ldr	r0, [r4, #0]
 8011db2:	3070      	adds	r0, #112	; 0x70
 8011db4:	f7ff fc66 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8011db8:	6823      	ldr	r3, [r4, #0]
 8011dba:	f103 0970 	add.w	r9, r3, #112	; 0x70
 8011dbe:	7833      	ldrb	r3, [r6, #0]
 8011dc0:	2b01      	cmp	r3, #1
 8011dc2:	f040 8570 	bne.w	80128a6 <lv_theme_default_init+0x1166>
 8011dc6:	2108      	movs	r1, #8
 8011dc8:	68e8      	ldr	r0, [r5, #12]
 8011dca:	f7ff fc65 	bl	8011698 <lv_disp_dpx.part.0>
 8011dce:	4601      	mov	r1, r0
 8011dd0:	4648      	mov	r0, r9
 8011dd2:	f7ff fc98 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	f103 0970 	add.w	r9, r3, #112	; 0x70
 8011ddc:	7833      	ldrb	r3, [r6, #0]
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	f040 8568 	bne.w	80128b4 <lv_theme_default_init+0x1174>
 8011de4:	2108      	movs	r1, #8
 8011de6:	68e8      	ldr	r0, [r5, #12]
 8011de8:	f7ff fc56 	bl	8011698 <lv_disp_dpx.part.0>
 8011dec:	4601      	mov	r1, r0
 8011dee:	4648      	mov	r0, r9
 8011df0:	f7ff fbf6 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	f103 0970 	add.w	r9, r3, #112	; 0x70
 8011dfa:	7833      	ldrb	r3, [r6, #0]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	f040 8560 	bne.w	80128c2 <lv_theme_default_init+0x1182>
 8011e02:	2108      	movs	r1, #8
 8011e04:	68e8      	ldr	r0, [r5, #12]
 8011e06:	f7ff fc47 	bl	8011698 <lv_disp_dpx.part.0>
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	4648      	mov	r0, r9
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 8011e0e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8011f64 <lv_theme_default_init+0x824>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8011e12:	f7ff fc21 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 8011e16:	6820      	ldr	r0, [r4, #0]
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 8011e18:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8011f68 <lv_theme_default_init+0x828>
    style_init_reset(&styles->bg_color_primary);
 8011e1c:	3028      	adds	r0, #40	; 0x28
 8011e1e:	f7ff fc31 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 8011e22:	6820      	ldr	r0, [r4, #0]
 8011e24:	8a29      	ldrh	r1, [r5, #16]
 8011e26:	3028      	adds	r0, #40	; 0x28
 8011e28:	f7ff fc1f 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 8011e2c:	6820      	ldr	r0, [r4, #0]
 8011e2e:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8011e32:	f7fe fdc4 	bl	80109be <lv_color_white>
 8011e36:	4601      	mov	r1, r0
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7ff fbf5 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 8011e3e:	6820      	ldr	r0, [r4, #0]
 8011e40:	21ff      	movs	r1, #255	; 0xff
 8011e42:	3028      	adds	r0, #40	; 0x28
 8011e44:	f7ff fc0d 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 8011e48:	6820      	ldr	r0, [r4, #0]
 8011e4a:	3030      	adds	r0, #48	; 0x30
 8011e4c:	f7ff fc1a 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 8011e50:	6820      	ldr	r0, [r4, #0]
 8011e52:	8a29      	ldrh	r1, [r5, #16]
 8011e54:	3030      	adds	r0, #48	; 0x30
 8011e56:	f7ff fc08 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 8011e5a:	6820      	ldr	r0, [r4, #0]
 8011e5c:	8a29      	ldrh	r1, [r5, #16]
 8011e5e:	3030      	adds	r0, #48	; 0x30
 8011e60:	f7ff fbe2 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	2133      	movs	r1, #51	; 0x33
 8011e68:	3030      	adds	r0, #48	; 0x30
 8011e6a:	f7ff fbfa 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 8011e6e:	6820      	ldr	r0, [r4, #0]
 8011e70:	3038      	adds	r0, #56	; 0x38
 8011e72:	f7ff fc07 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 8011e76:	6820      	ldr	r0, [r4, #0]
 8011e78:	8a69      	ldrh	r1, [r5, #18]
 8011e7a:	3038      	adds	r0, #56	; 0x38
 8011e7c:	f7ff fbf5 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8011e86:	f7fe fd9a 	bl	80109be <lv_color_white>
 8011e8a:	4601      	mov	r1, r0
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7ff fbcb 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	21ff      	movs	r1, #255	; 0xff
 8011e96:	3038      	adds	r0, #56	; 0x38
 8011e98:	f7ff fbe3 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 8011e9c:	6820      	ldr	r0, [r4, #0]
 8011e9e:	3040      	adds	r0, #64	; 0x40
 8011ea0:	f7ff fbf0 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8011ea4:	6820      	ldr	r0, [r4, #0]
 8011ea6:	8a69      	ldrh	r1, [r5, #18]
 8011ea8:	3040      	adds	r0, #64	; 0x40
 8011eaa:	f7ff fbde 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8011eae:	6820      	ldr	r0, [r4, #0]
 8011eb0:	8a69      	ldrh	r1, [r5, #18]
 8011eb2:	3040      	adds	r0, #64	; 0x40
 8011eb4:	f7ff fbb8 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 8011eb8:	6820      	ldr	r0, [r4, #0]
 8011eba:	2133      	movs	r1, #51	; 0x33
 8011ebc:	3040      	adds	r0, #64	; 0x40
 8011ebe:	f7ff fbd0 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 8011ec2:	6820      	ldr	r0, [r4, #0]
 8011ec4:	3048      	adds	r0, #72	; 0x48
 8011ec6:	f7ff fbdd 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 8011eca:	6820      	ldr	r0, [r4, #0]
 8011ecc:	f8b9 1000 	ldrh.w	r1, [r9]
 8011ed0:	3048      	adds	r0, #72	; 0x48
 8011ed2:	f7ff fbca 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 8011ed6:	6820      	ldr	r0, [r4, #0]
 8011ed8:	21ff      	movs	r1, #255	; 0xff
 8011eda:	3048      	adds	r0, #72	; 0x48
 8011edc:	f7ff fbc1 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 8011ee0:	6820      	ldr	r0, [r4, #0]
 8011ee2:	8839      	ldrh	r1, [r7, #0]
 8011ee4:	3048      	adds	r0, #72	; 0x48
 8011ee6:	f7ff fb9f 	bl	8011628 <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 8011eea:	6820      	ldr	r0, [r4, #0]
 8011eec:	3050      	adds	r0, #80	; 0x50
 8011eee:	f7ff fbc9 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 8011ef2:	6820      	ldr	r0, [r4, #0]
 8011ef4:	f8ba 1000 	ldrh.w	r1, [sl]
 8011ef8:	3050      	adds	r0, #80	; 0x50
 8011efa:	f7ff fbb6 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 8011efe:	6820      	ldr	r0, [r4, #0]
 8011f00:	21ff      	movs	r1, #255	; 0xff
 8011f02:	3050      	adds	r0, #80	; 0x50
 8011f04:	f7ff fbad 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 8011f08:	6820      	ldr	r0, [r4, #0]
 8011f0a:	8839      	ldrh	r1, [r7, #0]
 8011f0c:	3050      	adds	r0, #80	; 0x50
 8011f0e:	f7ff fb8b 	bl	8011628 <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 8011f12:	6820      	ldr	r0, [r4, #0]
 8011f14:	30b0      	adds	r0, #176	; 0xb0
 8011f16:	f7ff fbb5 	bl	8011684 <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 8011f1a:	6820      	ldr	r0, [r4, #0]
 8011f1c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011f20:	30b0      	adds	r0, #176	; 0xb0
 8011f22:	f7ff fbab 	bl	801167c <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 8011f26:	6820      	ldr	r0, [r4, #0]
 8011f28:	30b8      	adds	r0, #184	; 0xb8
 8011f2a:	f7ff fbab 	bl	8011684 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 8011f2e:	6820      	ldr	r0, [r4, #0]
 8011f30:	2100      	movs	r1, #0
 8011f32:	30b8      	adds	r0, #184	; 0xb8
 8011f34:	f7ff fba2 	bl	801167c <lv_style_set_radius>
    style_init_reset(&styles->grow);
 8011f38:	6820      	ldr	r0, [r4, #0]
 8011f3a:	30c8      	adds	r0, #200	; 0xc8
 8011f3c:	f7ff fba2 	bl	8011684 <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8011f40:	6820      	ldr	r0, [r4, #0]
 8011f42:	2103      	movs	r1, #3
 8011f44:	f100 0bc8 	add.w	fp, r0, #200	; 0xc8
 8011f48:	68e8      	ldr	r0, [r5, #12]
 8011f4a:	f7ff fba5 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8011f4e:	f640 010a 	movw	r1, #2058	; 0x80a
 8011f52:	e00b      	b.n	8011f6c <lv_theme_default_init+0x82c>
 8011f54:	080115d9 	.word	0x080115d9
 8011f58:	080115a5 	.word	0x080115a5
 8011f5c:	20002ac0 	.word	0x20002ac0
 8011f60:	20002acc 	.word	0x20002acc
 8011f64:	20002ab8 	.word	0x20002ab8
 8011f68:	20002ab6 	.word	0x20002ab6
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	4658      	mov	r0, fp
 8011f70:	f006 fc0f 	bl	8018792 <lv_style_set_prop>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8011f74:	6820      	ldr	r0, [r4, #0]
 8011f76:	2103      	movs	r1, #3
 8011f78:	f100 0bc8 	add.w	fp, r0, #200	; 0xc8
 8011f7c:	68e8      	ldr	r0, [r5, #12]
 8011f7e:	f7ff fb8b 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8011f82:	f640 010b 	movw	r1, #2059	; 0x80b
 8011f86:	4602      	mov	r2, r0
 8011f88:	4658      	mov	r0, fp
 8011f8a:	f006 fc02 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->knob);
 8011f8e:	6820      	ldr	r0, [r4, #0]
 8011f90:	30e8      	adds	r0, #232	; 0xe8
 8011f92:	f7ff fb77 	bl	8011684 <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 8011f96:	6820      	ldr	r0, [r4, #0]
 8011f98:	8a29      	ldrh	r1, [r5, #16]
 8011f9a:	30e8      	adds	r0, #232	; 0xe8
 8011f9c:	f7ff fb65 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 8011fa0:	6820      	ldr	r0, [r4, #0]
 8011fa2:	21ff      	movs	r1, #255	; 0xff
 8011fa4:	30e8      	adds	r0, #232	; 0xe8
 8011fa6:	f7ff fb5c 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 8011faa:	6820      	ldr	r0, [r4, #0]
 8011fac:	2106      	movs	r1, #6
 8011fae:	f100 0be8 	add.w	fp, r0, #232	; 0xe8
 8011fb2:	68e8      	ldr	r0, [r5, #12]
 8011fb4:	f7ff fb70 	bl	8011698 <lv_disp_dpx.part.0>
 8011fb8:	4601      	mov	r1, r0
 8011fba:	4658      	mov	r0, fp
        } \
    }

static inline void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
    lv_style_value_t v = {
 8011fbc:	f04f 0b00 	mov.w	fp, #0
 8011fc0:	f7ff fba1 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 8011fc4:	6820      	ldr	r0, [r4, #0]
 8011fc6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8011fca:	30e8      	adds	r0, #232	; 0xe8
 8011fcc:	f7ff fb56 	bl	801167c <lv_style_set_radius>
    style_init_reset(&styles->anim);
 8011fd0:	6820      	ldr	r0, [r4, #0]
 8011fd2:	30e0      	adds	r0, #224	; 0xe0
 8011fd4:	f7ff fb56 	bl	8011684 <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 8011fd8:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8011fda:	22c8      	movs	r2, #200	; 0xc8
 8011fdc:	2165      	movs	r1, #101	; 0x65
 8011fde:	30e0      	adds	r0, #224	; 0xe0
 8011fe0:	f006 fbd7 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->arc_indic);
 8011fe4:	6820      	ldr	r0, [r4, #0]
 8011fe6:	30f8      	adds	r0, #248	; 0xf8
 8011fe8:	f7ff fb4c 	bl	8011684 <style_init_reset>
    lv_style_value_t v = {
 8011fec:	465a      	mov	r2, fp
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 8011fee:	6820      	ldr	r0, [r4, #0]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ff0:	2152      	movs	r1, #82	; 0x52
    lv_style_value_t v = {
 8011ff2:	f8ad b010 	strh.w	fp, [sp, #16]
 8011ff6:	f36b 421f 	bfi	r2, fp, #16, #16
 8011ffa:	f8b9 3000 	ldrh.w	r3, [r9]
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8011ffe:	30f8      	adds	r0, #248	; 0xf8
    lv_style_value_t v = {
 8012000:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8012004:	f006 fbc5 	bl	8018792 <lv_style_set_prop>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 8012008:	6823      	ldr	r3, [r4, #0]
 801200a:	210f      	movs	r1, #15
 801200c:	68e8      	ldr	r0, [r5, #12]
 801200e:	33f8      	adds	r3, #248	; 0xf8
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	f7ff fb41 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8012016:	9b03      	ldr	r3, [sp, #12]
 8012018:	4602      	mov	r2, r0
 801201a:	f44f 6105 	mov.w	r1, #2128	; 0x850
 801201e:	4618      	mov	r0, r3
 8012020:	f006 fbb7 	bl	8018792 <lv_style_set_prop>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 8012024:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 8012026:	2201      	movs	r2, #1
 8012028:	2151      	movs	r1, #81	; 0x51
 801202a:	30f8      	adds	r0, #248	; 0xf8
 801202c:	f006 fbb1 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->arc_indic_primary);
 8012030:	6820      	ldr	r0, [r4, #0]
 8012032:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8012036:	f7ff fb25 	bl	8011684 <style_init_reset>
    lv_style_value_t v = {
 801203a:	465a      	mov	r2, fp
 801203c:	8a2b      	ldrh	r3, [r5, #16]
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 801203e:	2152      	movs	r1, #82	; 0x52
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 8012040:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 8012042:	f36b 421f 	bfi	r2, fp, #16, #16
 8012046:	f8ad b010 	strh.w	fp, [sp, #16]
 801204a:	f363 020f 	bfi	r2, r3, #0, #16
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 801204e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8012052:	f006 fb9e 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->dropdown_list);
 8012056:	6820      	ldr	r0, [r4, #0]
 8012058:	f500 7094 	add.w	r0, r0, #296	; 0x128
 801205c:	f7ff fb12 	bl	8011684 <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 8012060:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 8012062:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012066:	f241 0106 	movw	r1, #4102	; 0x1006
 801206a:	f500 7094 	add.w	r0, r0, #296	; 0x128
 801206e:	f006 fb90 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->cb_marker);
 8012072:	6820      	ldr	r0, [r4, #0]
 8012074:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8012078:	f7ff fb04 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 801207c:	6820      	ldr	r0, [r4, #0]
 801207e:	2103      	movs	r1, #3
 8012080:	f500 7b98 	add.w	fp, r0, #304	; 0x130
 8012084:	68e8      	ldr	r0, [r5, #12]
 8012086:	f7ff fb07 	bl	8011698 <lv_disp_dpx.part.0>
 801208a:	4601      	mov	r1, r0
 801208c:	4658      	mov	r0, fp
 801208e:	f7ff fb3a 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 8012092:	6820      	ldr	r0, [r4, #0]
 8012094:	2102      	movs	r1, #2
 8012096:	f500 7b98 	add.w	fp, r0, #304	; 0x130
 801209a:	68e8      	ldr	r0, [r5, #12]
 801209c:	f7ff fafc 	bl	8011698 <lv_disp_dpx.part.0>
 80120a0:	4601      	mov	r1, r0
 80120a2:	4658      	mov	r0, fp
 80120a4:	f7ff faca 	bl	801163c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 80120a8:	6820      	ldr	r0, [r4, #0]
 80120aa:	8a29      	ldrh	r1, [r5, #16]
 80120ac:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80120b0:	f7ff fac9 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 80120b4:	6820      	ldr	r0, [r4, #0]
 80120b6:	f8ba 1000 	ldrh.w	r1, [sl]
 80120ba:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80120be:	f7ff fad4 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 80120c2:	6820      	ldr	r0, [r4, #0]
 80120c4:	21ff      	movs	r1, #255	; 0xff
 80120c6:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80120ca:	f7ff faca 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	68e8      	ldr	r0, [r5, #12]
 80120d2:	f503 7b98 	add.w	fp, r3, #304	; 0x130
 80120d6:	7833      	ldrb	r3, [r6, #0]
 80120d8:	2b01      	cmp	r3, #1
 80120da:	bf0c      	ite	eq
 80120dc:	210c      	moveq	r1, #12
 80120de:	2108      	movne	r1, #8
 80120e0:	f7ff fada 	bl	8011698 <lv_disp_dpx.part.0>
 80120e4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80120e8:	f340 014f 	sbfx	r1, r0, #1, #16
 80120ec:	4658      	mov	r0, fp
 80120ee:	f7ff fac5 	bl	801167c <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 80120f2:	6820      	ldr	r0, [r4, #0]
 80120f4:	f500 709c 	add.w	r0, r0, #312	; 0x138
 80120f8:	f7ff fac4 	bl	8011684 <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 80120fc:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 80120fe:	4ad1      	ldr	r2, [pc, #836]	; (8012444 <lv_theme_default_init+0xd04>)
 8012100:	2126      	movs	r1, #38	; 0x26
 8012102:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8012106:	f006 fb44 	bl	8018792 <lv_style_set_prop>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 801210a:	6820      	ldr	r0, [r4, #0]
 801210c:	f500 739c 	add.w	r3, r0, #312	; 0x138
 8012110:	f7fe fc55 	bl	80109be <lv_color_white>
 8012114:	4601      	mov	r1, r0
 8012116:	4618      	mov	r0, r3
 8012118:	f7ff fa86 	bl	8011628 <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 801211c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 801211e:	696a      	ldr	r2, [r5, #20]
 8012120:	f241 4159 	movw	r1, #5209	; 0x1459
 8012124:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8012128:	f006 fb33 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->switch_knob);
 801212c:	6820      	ldr	r0, [r4, #0]
 801212e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8012132:	f7ff faa7 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 8012136:	6820      	ldr	r0, [r4, #0]
 8012138:	2104      	movs	r1, #4
 801213a:	f500 7ba0 	add.w	fp, r0, #320	; 0x140
 801213e:	68e8      	ldr	r0, [r5, #12]
 8012140:	f7ff faaa 	bl	8011698 <lv_disp_dpx.part.0>
 8012144:	4240      	negs	r0, r0
 8012146:	b201      	sxth	r1, r0
 8012148:	4658      	mov	r0, fp
 801214a:	f7ff fadc 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 801214e:	6820      	ldr	r0, [r4, #0]
 8012150:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8012154:	f7fe fc33 	bl	80109be <lv_color_white>
 8012158:	4601      	mov	r1, r0
 801215a:	4618      	mov	r0, r3
 801215c:	f7ff fa85 	bl	801166a <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 8012160:	6820      	ldr	r0, [r4, #0]
 8012162:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8012166:	f7ff fa8d 	bl	8011684 <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 801216a:	6820      	ldr	r0, [r4, #0]
 801216c:	2101      	movs	r1, #1
 801216e:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8012172:	f7ff fa3a 	bl	80115ea <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 8012176:	6820      	ldr	r0, [r4, #0]
 8012178:	8839      	ldrh	r1, [r7, #0]
 801217a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 801217e:	f7ff fa39 	bl	80115f4 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 8012182:	6820      	ldr	r0, [r4, #0]
 8012184:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8012188:	f7ff fa7c 	bl	8011684 <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 801218c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 801218e:	2200      	movs	r2, #0
 8012190:	2134      	movs	r1, #52	; 0x34
 8012192:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8012196:	f006 fafc 	bl	8018792 <lv_style_set_prop>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 801219a:	6820      	ldr	r0, [r4, #0]
 801219c:	210a      	movs	r1, #10
 801219e:	f500 7b90 	add.w	fp, r0, #288	; 0x120
 80121a2:	68e8      	ldr	r0, [r5, #12]
 80121a4:	f7ff fa78 	bl	8011698 <lv_disp_dpx.part.0>
 80121a8:	4601      	mov	r1, r0
 80121aa:	4658      	mov	r0, fp
 80121ac:	f7ff fa54 	bl	8011658 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 80121b0:	6820      	ldr	r0, [r4, #0]
 80121b2:	f8b9 1000 	ldrh.w	r1, [r9]
 80121b6:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80121ba:	f7ff fa1b 	bl	80115f4 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 80121be:	6820      	ldr	r0, [r4, #0]
 80121c0:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80121c4:	f7ff fa5e 	bl	8011684 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80121c8:	6820      	ldr	r0, [r4, #0]
 80121ca:	2103      	movs	r1, #3
 80121cc:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 80121d0:	68e8      	ldr	r0, [r5, #12]
 80121d2:	f7ff fa61 	bl	8011698 <lv_disp_dpx.part.0>
 80121d6:	4601      	mov	r1, r0
 80121d8:	4658      	mov	r0, fp
 80121da:	f7ff fa06 	bl	80115ea <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80121de:	6820      	ldr	r0, [r4, #0]
 80121e0:	2103      	movs	r1, #3
 80121e2:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 80121e6:	68e8      	ldr	r0, [r5, #12]
 80121e8:	f7ff fa56 	bl	8011698 <lv_disp_dpx.part.0>
 80121ec:	4601      	mov	r1, r0
 80121ee:	4658      	mov	r0, fp
 80121f0:	f7ff fa44 	bl	801167c <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 80121f4:	6820      	ldr	r0, [r4, #0]
 80121f6:	2108      	movs	r1, #8
 80121f8:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 80121fc:	68e8      	ldr	r0, [r5, #12]
 80121fe:	f7ff fa4b 	bl	8011698 <lv_disp_dpx.part.0>
 8012202:	4601      	mov	r1, r0
 8012204:	4658      	mov	r0, fp
 8012206:	f7ff f9fe 	bl	8011606 <lv_style_set_size>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 801220a:	6820      	ldr	r0, [r4, #0]
 801220c:	2102      	movs	r1, #2
 801220e:	f500 7b84 	add.w	fp, r0, #264	; 0x108
 8012212:	68e8      	ldr	r0, [r5, #12]
 8012214:	f7ff fa40 	bl	8011698 <lv_disp_dpx.part.0>
 8012218:	4601      	mov	r1, r0
 801221a:	4658      	mov	r0, fp
 801221c:	f7ff fa1c 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 8012220:	6820      	ldr	r0, [r4, #0]
 8012222:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8012226:	f7ff fa2d 	bl	8011684 <style_init_reset>
    lv_style_set_radius(&styles->chart_indic,LV_RADIUS_CIRCLE);
 801222a:	6820      	ldr	r0, [r4, #0]
 801222c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8012230:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8012234:	f7ff fa22 	bl	801167c <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 8012238:	6820      	ldr	r0, [r4, #0]
 801223a:	2108      	movs	r1, #8
 801223c:	f500 7b88 	add.w	fp, r0, #272	; 0x110
 8012240:	68e8      	ldr	r0, [r5, #12]
 8012242:	f7ff fa29 	bl	8011698 <lv_disp_dpx.part.0>
 8012246:	4601      	mov	r1, r0
 8012248:	4658      	mov	r0, fp
 801224a:	f7ff f9dc 	bl	8011606 <lv_style_set_size>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 801224e:	6820      	ldr	r0, [r4, #0]
 8012250:	8a29      	ldrh	r1, [r5, #16]
 8012252:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8012256:	f7ff fa08 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 801225a:	6820      	ldr	r0, [r4, #0]
 801225c:	21ff      	movs	r1, #255	; 0xff
 801225e:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8012262:	f7ff f9fe 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 8012266:	6820      	ldr	r0, [r4, #0]
 8012268:	f500 708c 	add.w	r0, r0, #280	; 0x118
 801226c:	f7ff fa0a 	bl	8011684 <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 8012270:	6820      	ldr	r0, [r4, #0]
 8012272:	2101      	movs	r1, #1
 8012274:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 8012278:	68e8      	ldr	r0, [r5, #12]
 801227a:	f7ff fa0d 	bl	8011698 <lv_disp_dpx.part.0>
 801227e:	4601      	mov	r1, r0
 8012280:	4658      	mov	r0, fp
 8012282:	f7ff f9b2 	bl	80115ea <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 8012286:	6820      	ldr	r0, [r4, #0]
 8012288:	8839      	ldrh	r1, [r7, #0]
 801228a:	f500 708c 	add.w	r0, r0, #280	; 0x118
 801228e:	f7ff f9b1 	bl	80115f4 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 8012292:	6820      	ldr	r0, [r4, #0]
 8012294:	2102      	movs	r1, #2
 8012296:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 801229a:	68e8      	ldr	r0, [r5, #12]
 801229c:	f7ff f9fc 	bl	8011698 <lv_disp_dpx.part.0>
 80122a0:	4601      	mov	r1, r0
 80122a2:	4658      	mov	r0, fp
 80122a4:	f7ff fa2f 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 80122a8:	6820      	ldr	r0, [r4, #0]
 80122aa:	f500 7b8c 	add.w	fp, r0, #280	; 0x118
 80122ae:	2012      	movs	r0, #18
 80122b0:	f005 f8e4 	bl	801747c <lv_palette_main>
 80122b4:	4601      	mov	r1, r0
 80122b6:	4658      	mov	r0, fp
 80122b8:	f7ff f9b6 	bl	8011628 <lv_style_set_text_color>
    style_init_reset(&styles->meter_marker);
 80122bc:	6820      	ldr	r0, [r4, #0]
 80122be:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80122c2:	f7ff f9df 	bl	8011684 <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 80122c6:	6820      	ldr	r0, [r4, #0]
 80122c8:	2105      	movs	r1, #5
 80122ca:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 80122ce:	68e8      	ldr	r0, [r5, #12]
 80122d0:	f7ff f9e2 	bl	8011698 <lv_disp_dpx.part.0>
 80122d4:	4601      	mov	r1, r0
 80122d6:	4658      	mov	r0, fp
 80122d8:	f7ff f987 	bl	80115ea <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 80122dc:	6820      	ldr	r0, [r4, #0]
 80122de:	8839      	ldrh	r1, [r7, #0]
 80122e0:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 80122e4:	f7ff f986 	bl	80115f4 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 80122e8:	6820      	ldr	r0, [r4, #0]
 80122ea:	2114      	movs	r1, #20
 80122ec:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 80122f0:	68e8      	ldr	r0, [r5, #12]
 80122f2:	f7ff f9d1 	bl	8011698 <lv_disp_dpx.part.0>
 80122f6:	4601      	mov	r1, r0
 80122f8:	4658      	mov	r0, fp
 80122fa:	f7ff f984 	bl	8011606 <lv_style_set_size>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 80122fe:	6820      	ldr	r0, [r4, #0]
 8012300:	210f      	movs	r1, #15
 8012302:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 8012306:	68e8      	ldr	r0, [r5, #12]
 8012308:	f7ff f9c6 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 801230c:	f241 0112 	movw	r1, #4114	; 0x1012
 8012310:	4602      	mov	r2, r0
 8012312:	4658      	mov	r0, fp
 8012314:	f006 fa3d 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->meter_indic);
 8012318:	6820      	ldr	r0, [r4, #0]
 801231a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 801231e:	f7ff f9b1 	bl	8011684 <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 8012322:	6820      	ldr	r0, [r4, #0]
 8012324:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8012328:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 801232c:	f7ff f9a6 	bl	801167c <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 8012330:	6820      	ldr	r0, [r4, #0]
 8012332:	8839      	ldrh	r1, [r7, #0]
 8012334:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8012338:	f7ff f997 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 801233c:	6820      	ldr	r0, [r4, #0]
 801233e:	21ff      	movs	r1, #255	; 0xff
 8012340:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 8012344:	f7ff f98d 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 8012348:	6820      	ldr	r0, [r4, #0]
 801234a:	210f      	movs	r1, #15
 801234c:	f500 7bb0 	add.w	fp, r0, #352	; 0x160
 8012350:	68e8      	ldr	r0, [r5, #12]
 8012352:	f7ff f9a1 	bl	8011698 <lv_disp_dpx.part.0>
 8012356:	4601      	mov	r1, r0
 8012358:	4658      	mov	r0, fp
 801235a:	f7ff f954 	bl	8011606 <lv_style_set_size>
    style_init_reset(&styles->table_cell);
 801235e:	6820      	ldr	r0, [r4, #0]
 8012360:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8012364:	f7ff f98e 	bl	8011684 <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 8012368:	6820      	ldr	r0, [r4, #0]
 801236a:	2101      	movs	r1, #1
 801236c:	f500 7ba8 	add.w	fp, r0, #336	; 0x150
 8012370:	68e8      	ldr	r0, [r5, #12]
 8012372:	f7ff f991 	bl	8011698 <lv_disp_dpx.part.0>
 8012376:	4601      	mov	r1, r0
 8012378:	4658      	mov	r0, fp
 801237a:	f7ff f95f 	bl	801163c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 801237e:	6820      	ldr	r0, [r4, #0]
 8012380:	f8b9 1000 	ldrh.w	r1, [r9]
 8012384:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8012388:	f7ff f95d 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM );
 801238c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 801238e:	2203      	movs	r2, #3
 8012390:	2133      	movs	r1, #51	; 0x33
 8012392:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8012396:	f006 f9fc 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->ta_cursor);
 801239a:	6820      	ldr	r0, [r4, #0]
 801239c:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 80123a0:	f7ff f970 	bl	8011684 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 80123a4:	6820      	ldr	r0, [r4, #0]
 80123a6:	8839      	ldrh	r1, [r7, #0]
 80123a8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 80123ac:	f7ff f94b 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 80123b0:	6820      	ldr	r0, [r4, #0]
 80123b2:	2102      	movs	r1, #2
 80123b4:	f500 77b4 	add.w	r7, r0, #360	; 0x168
 80123b8:	68e8      	ldr	r0, [r5, #12]
 80123ba:	f7ff f96d 	bl	8011698 <lv_disp_dpx.part.0>
 80123be:	4601      	mov	r1, r0
 80123c0:	4638      	mov	r0, r7
 80123c2:	f7ff f93b 	bl	801163c <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, lv_disp_dpx(theme.disp, 1));
 80123c6:	6820      	ldr	r0, [r4, #0]
 80123c8:	2101      	movs	r1, #1
 80123ca:	f500 77b4 	add.w	r7, r0, #360	; 0x168
 80123ce:	68e8      	ldr	r0, [r5, #12]
 80123d0:	f7ff f962 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 80123d4:	f241 0112 	movw	r1, #4114	; 0x1012
 80123d8:	4602      	mov	r2, r0
 80123da:	4638      	mov	r0, r7
 80123dc:	f006 f9d9 	bl	8018792 <lv_style_set_prop>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 80123e0:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 80123e2:	2204      	movs	r2, #4
 80123e4:	2133      	movs	r1, #51	; 0x33
 80123e6:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 80123ea:	f006 f9d2 	bl	8018792 <lv_style_set_prop>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 80123ee:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 80123f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80123f4:	2165      	movs	r1, #101	; 0x65
 80123f6:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 80123fa:	f006 f9ca 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->ta_placeholder);
 80123fe:	6820      	ldr	r0, [r4, #0]
 8012400:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 8012404:	f7ff f93e 	bl	8011684 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 8012408:	6a2b      	ldr	r3, [r5, #32]
 801240a:	6827      	ldr	r7, [r4, #0]
 801240c:	07db      	lsls	r3, r3, #31
 801240e:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8012412:	f140 825d 	bpl.w	80128d0 <lv_theme_default_init+0x1190>
 8012416:	2102      	movs	r1, #2
 8012418:	2012      	movs	r0, #18
 801241a:	f005 f84b 	bl	80174b4 <lv_palette_darken>
 801241e:	4601      	mov	r1, r0
 8012420:	4638      	mov	r0, r7
 8012422:	f7ff f901 	bl	8011628 <lv_style_set_text_color>
    style_init_reset(&styles->calendar_bg);
 8012426:	6820      	ldr	r0, [r4, #0]
 8012428:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 801242c:	f7ff f92a 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->calendar_bg, PAD_SMALL);
 8012430:	7833      	ldrb	r3, [r6, #0]
 8012432:	6827      	ldr	r7, [r4, #0]
 8012434:	2b01      	cmp	r3, #1
 8012436:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 801243a:	f040 824e 	bne.w	80128da <lv_theme_default_init+0x119a>
 801243e:	210e      	movs	r1, #14
 8012440:	68e8      	ldr	r0, [r5, #12]
 8012442:	e001      	b.n	8012448 <lv_theme_default_init+0xd08>
 8012444:	08025a46 	.word	0x08025a46
 8012448:	f7ff f926 	bl	8011698 <lv_disp_dpx.part.0>
 801244c:	4601      	mov	r1, r0
 801244e:	4638      	mov	r0, r7
 8012450:	f7ff f959 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->calendar_bg, PAD_SMALL / 2);
 8012454:	6823      	ldr	r3, [r4, #0]
 8012456:	f503 7bbc 	add.w	fp, r3, #376	; 0x178
 801245a:	7833      	ldrb	r3, [r6, #0]
 801245c:	2b01      	cmp	r3, #1
 801245e:	f040 8242 	bne.w	80128e6 <lv_theme_default_init+0x11a6>
 8012462:	210e      	movs	r1, #14
 8012464:	68e8      	ldr	r0, [r5, #12]
 8012466:	f7ff f917 	bl	8011698 <lv_disp_dpx.part.0>
 801246a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801246e:	f340 074f 	sbfx	r7, r0, #1, #16
    lv_style_set_pad_row(style, value);
 8012472:	4658      	mov	r0, fp
 8012474:	4639      	mov	r1, r7
 8012476:	f7ff f8b3 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 801247a:	4639      	mov	r1, r7
 801247c:	4658      	mov	r0, fp
 801247e:	f7ff f8eb 	bl	8011658 <lv_style_set_pad_column>
    lv_style_set_radius(&styles->calendar_bg, 0);
 8012482:	6820      	ldr	r0, [r4, #0]
 8012484:	2100      	movs	r1, #0
 8012486:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 801248a:	f7ff f8f7 	bl	801167c <lv_style_set_radius>
    style_init_reset(&styles->calendar_day);
 801248e:	6820      	ldr	r0, [r4, #0]
 8012490:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8012494:	f7ff f8f6 	bl	8011684 <style_init_reset>
    lv_style_set_border_width(&styles->calendar_day, lv_disp_dpx(theme.disp, 1));
 8012498:	6820      	ldr	r0, [r4, #0]
 801249a:	2101      	movs	r1, #1
 801249c:	f500 77c0 	add.w	r7, r0, #384	; 0x180
 80124a0:	68e8      	ldr	r0, [r5, #12]
 80124a2:	f7ff f8f9 	bl	8011698 <lv_disp_dpx.part.0>
 80124a6:	4601      	mov	r1, r0
 80124a8:	4638      	mov	r0, r7
 80124aa:	f7ff f8c7 	bl	801163c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->calendar_day, color_grey);
 80124ae:	6820      	ldr	r0, [r4, #0]
 80124b0:	f8b9 1000 	ldrh.w	r1, [r9]
 80124b4:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 80124b8:	f7ff f8c5 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->calendar_day, color_card);
 80124bc:	6820      	ldr	r0, [r4, #0]
 80124be:	f8ba 1000 	ldrh.w	r1, [sl]
 80124c2:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 80124c6:	f7ff f8d0 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->calendar_day, LV_OPA_20);
 80124ca:	6820      	ldr	r0, [r4, #0]
 80124cc:	2133      	movs	r1, #51	; 0x33
 80124ce:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 80124d2:	f7ff f8c6 	bl	8011662 <lv_style_set_bg_opa>
    style_init_reset(&styles->colorwheel_main);
 80124d6:	6820      	ldr	r0, [r4, #0]
 80124d8:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 80124dc:	f7ff f8d2 	bl	8011684 <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 80124e0:	6820      	ldr	r0, [r4, #0]
 80124e2:	210a      	movs	r1, #10
 80124e4:	f500 77c4 	add.w	r7, r0, #392	; 0x188
 80124e8:	68e8      	ldr	r0, [r5, #12]
 80124ea:	f7ff f8d5 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 80124ee:	f44f 6105 	mov.w	r1, #2128	; 0x850
 80124f2:	4602      	mov	r2, r0
 80124f4:	4638      	mov	r0, r7
 80124f6:	f006 f94c 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->msgbox_btn_bg);
 80124fa:	6820      	ldr	r0, [r4, #0]
 80124fc:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8012500:	f7ff f8c0 	bl	8011684 <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 8012504:	6820      	ldr	r0, [r4, #0]
 8012506:	2104      	movs	r1, #4
 8012508:	f500 77cc 	add.w	r7, r0, #408	; 0x198
 801250c:	68e8      	ldr	r0, [r5, #12]
 801250e:	f7ff f8c3 	bl	8011698 <lv_disp_dpx.part.0>
 8012512:	4601      	mov	r1, r0
 8012514:	4638      	mov	r0, r7
 8012516:	f7ff f8f6 	bl	8011706 <lv_style_set_pad_all>
    style_init_reset(&styles->msgbox_bg);
 801251a:	6820      	ldr	r0, [r4, #0]
 801251c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8012520:	f7ff f8b0 	bl	8011684 <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 8012524:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 8012526:	f242 0264 	movw	r2, #8292	; 0x2064
 801252a:	f241 0103 	movw	r1, #4099	; 0x1003
 801252e:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8012532:	f006 f92e 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->keyboard_btn_bg);
 8012536:	6820      	ldr	r0, [r4, #0]
 8012538:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 801253c:	f7ff f8a2 	bl	8011684 <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 8012540:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8012542:	2200      	movs	r2, #0
 8012544:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8012548:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 801254c:	f006 f921 	bl	8018792 <lv_style_set_prop>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 8012550:	7833      	ldrb	r3, [r6, #0]
 8012552:	6827      	ldr	r7, [r4, #0]
 8012554:	2b03      	cmp	r3, #3
 8012556:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 801255a:	f040 81ca 	bne.w	80128f2 <lv_theme_default_init+0x11b2>
 801255e:	2108      	movs	r1, #8
 8012560:	68e8      	ldr	r0, [r5, #12]
 8012562:	f7ff f899 	bl	8011698 <lv_disp_dpx.part.0>
 8012566:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801256a:	f340 004f 	sbfx	r0, r0, #1, #16
 801256e:	4601      	mov	r1, r0
 8012570:	4638      	mov	r0, r7
 8012572:	f7ff f883 	bl	801167c <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 8012576:	6820      	ldr	r0, [r4, #0]
 8012578:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 801257c:	f7ff f882 	bl	8011684 <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 8012580:	6820      	ldr	r0, [r4, #0]
 8012582:	8a29      	ldrh	r1, [r5, #16]
 8012584:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8012588:	f7ff f85d 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 801258c:	6820      	ldr	r0, [r4, #0]
 801258e:	2102      	movs	r1, #2
 8012590:	f500 77e8 	add.w	r7, r0, #464	; 0x1d0
 8012594:	68e8      	ldr	r0, [r5, #12]
 8012596:	f7ff f87f 	bl	8011698 <lv_disp_dpx.part.0>
 801259a:	0040      	lsls	r0, r0, #1
 801259c:	b201      	sxth	r1, r0
 801259e:	4638      	mov	r0, r7
 80125a0:	f7ff f84c 	bl	801163c <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 80125a4:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 80125a6:	2201      	movs	r2, #1
 80125a8:	2133      	movs	r1, #51	; 0x33
 80125aa:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 80125ae:	f006 f8f0 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->tab_bg_focus);
 80125b2:	6820      	ldr	r0, [r4, #0]
 80125b4:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 80125b8:	f7ff f864 	bl	8011684 <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 80125bc:	6820      	ldr	r0, [r4, #0]
 80125be:	2102      	movs	r1, #2
 80125c0:	f500 77e4 	add.w	r7, r0, #456	; 0x1c8
 80125c4:	68e8      	ldr	r0, [r5, #12]
 80125c6:	f7ff f867 	bl	8011698 <lv_disp_dpx.part.0>
 80125ca:	4240      	negs	r0, r0
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 80125cc:	f640 013d 	movw	r1, #2109	; 0x83d
 80125d0:	b202      	sxth	r2, r0
 80125d2:	4638      	mov	r0, r7
 80125d4:	f006 f8dd 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->list_bg);
 80125d8:	6820      	ldr	r0, [r4, #0]
 80125da:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80125de:	f7ff f851 	bl	8011684 <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 80125e2:	7833      	ldrb	r3, [r6, #0]
 80125e4:	6827      	ldr	r7, [r4, #0]
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80125ec:	f040 8189 	bne.w	8012902 <lv_theme_default_init+0x11c2>
 80125f0:	2118      	movs	r1, #24
 80125f2:	68e8      	ldr	r0, [r5, #12]
 80125f4:	f7ff f850 	bl	8011698 <lv_disp_dpx.part.0>
 80125f8:	4601      	mov	r1, r0
 80125fa:	4638      	mov	r0, r7
 80125fc:	f7ff f861 	bl	80116c2 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 8012600:	6820      	ldr	r0, [r4, #0]
 8012602:	2100      	movs	r1, #0
 8012604:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 8012608:	f7ff f86c 	bl	80116e4 <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 801260c:	6820      	ldr	r0, [r4, #0]
    lv_style_set_pad_row(style, value);
 801260e:	2100      	movs	r1, #0
 8012610:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 8012614:	9003      	str	r0, [sp, #12]
 8012616:	f7fe ffe3 	bl	80115e0 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 801261a:	2100      	movs	r1, #0
 801261c:	9803      	ldr	r0, [sp, #12]
 801261e:	f7ff f81b 	bl	8011658 <lv_style_set_pad_column>
    lv_style_set_clip_corner(&styles->list_bg, true);
 8012622:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8012624:	2201      	movs	r2, #1
 8012626:	2161      	movs	r1, #97	; 0x61
 8012628:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 801262c:	f006 f8b1 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->list_btn);
 8012630:	6820      	ldr	r0, [r4, #0]
 8012632:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8012636:	f7ff f825 	bl	8011684 <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 801263a:	6820      	ldr	r0, [r4, #0]
 801263c:	2101      	movs	r1, #1
 801263e:	f500 77d8 	add.w	r7, r0, #432	; 0x1b0
 8012642:	68e8      	ldr	r0, [r5, #12]
 8012644:	f7ff f828 	bl	8011698 <lv_disp_dpx.part.0>
 8012648:	4601      	mov	r1, r0
 801264a:	4638      	mov	r0, r7
 801264c:	f7fe fff6 	bl	801163c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 8012650:	6820      	ldr	r0, [r4, #0]
 8012652:	f8b9 1000 	ldrh.w	r1, [r9]
 8012656:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 801265a:	f7fe fff4 	bl	8011646 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 801265e:	6820      	ldr	r0, [r4, #0]
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8012660:	2201      	movs	r2, #1
 8012662:	2133      	movs	r1, #51	; 0x33
 8012664:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8012668:	f006 f893 	bl	8018792 <lv_style_set_prop>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801266c:	7833      	ldrb	r3, [r6, #0]
 801266e:	6827      	ldr	r7, [r4, #0]
 8012670:	2b01      	cmp	r3, #1
 8012672:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8012676:	f040 814a 	bne.w	801290e <lv_theme_default_init+0x11ce>
 801267a:	210e      	movs	r1, #14
 801267c:	68e8      	ldr	r0, [r5, #12]
 801267e:	f7ff f80b 	bl	8011698 <lv_disp_dpx.part.0>
 8012682:	4601      	mov	r1, r0
 8012684:	4638      	mov	r0, r7
 8012686:	f7ff f83e 	bl	8011706 <lv_style_set_pad_all>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801268a:	7833      	ldrb	r3, [r6, #0]
 801268c:	6824      	ldr	r4, [r4, #0]
 801268e:	2b01      	cmp	r3, #1
 8012690:	f504 74d8 	add.w	r4, r4, #432	; 0x1b0
 8012694:	f040 8141 	bne.w	801291a <lv_theme_default_init+0x11da>
 8012698:	210e      	movs	r1, #14
 801269a:	68e8      	ldr	r0, [r5, #12]
 801269c:	f7fe fffc 	bl	8011698 <lv_disp_dpx.part.0>
 80126a0:	4601      	mov	r1, r0
 80126a2:	4620      	mov	r0, r4
    style_init_reset(&styles->list_item_grow);
 80126a4:	4ca6      	ldr	r4, [pc, #664]	; (8012940 <lv_theme_default_init+0x1200>)
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 80126a6:	f7fe ffd7 	bl	8011658 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 80126aa:	6820      	ldr	r0, [r4, #0]
 80126ac:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 80126b0:	f7fe ffe8 	bl	8011684 <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 80126b4:	7833      	ldrb	r3, [r6, #0]
 80126b6:	6827      	ldr	r7, [r4, #0]
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80126be:	f040 8132 	bne.w	8012926 <lv_theme_default_init+0x11e6>
 80126c2:	2118      	movs	r1, #24
 80126c4:	68e8      	ldr	r0, [r5, #12]
 80126c6:	f7fe ffe7 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 80126ca:	f640 010a 	movw	r1, #2058	; 0x80a
 80126ce:	4602      	mov	r2, r0
 80126d0:	4638      	mov	r0, r7
 80126d2:	f006 f85e 	bl	8018792 <lv_style_set_prop>
    style_init_reset(&styles->led);
 80126d6:	6820      	ldr	r0, [r4, #0]
    lv_style_value_t v = {
 80126d8:	2700      	movs	r7, #0
 80126da:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80126de:	f7fe ffd1 	bl	8011684 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 80126e2:	6820      	ldr	r0, [r4, #0]
 80126e4:	21ff      	movs	r1, #255	; 0xff
 80126e6:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80126ea:	f7fe ffba 	bl	8011662 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 80126ee:	6820      	ldr	r0, [r4, #0]
 80126f0:	f500 73ec 	add.w	r3, r0, #472	; 0x1d8
 80126f4:	f7fe f963 	bl	80109be <lv_color_white>
 80126f8:	4601      	mov	r1, r0
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fe ffb5 	bl	801166a <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 8012700:	6820      	ldr	r0, [r4, #0]
 8012702:	f500 76ec 	add.w	r6, r0, #472	; 0x1d8
 8012706:	2012      	movs	r0, #18
 8012708:	f004 feb8 	bl	801747c <lv_palette_main>
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 801270c:	2122      	movs	r1, #34	; 0x22
 801270e:	b282      	uxth	r2, r0
 8012710:	4630      	mov	r0, r6
    lv_style_value_t v = {
 8012712:	f8ad 7010 	strh.w	r7, [sp, #16]
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 8012716:	f006 f83c 	bl	8018792 <lv_style_set_prop>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 801271a:	6820      	ldr	r0, [r4, #0]
 801271c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8012720:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8012724:	f7fe ffaa 	bl	801167c <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 8012728:	6820      	ldr	r0, [r4, #0]
 801272a:	210f      	movs	r1, #15
 801272c:	f500 76ec 	add.w	r6, r0, #472	; 0x1d8
 8012730:	68e8      	ldr	r0, [r5, #12]
 8012732:	f7fe ffb1 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8012736:	f44f 6104 	mov.w	r1, #2112	; 0x840
 801273a:	4602      	mov	r2, r0
 801273c:	4630      	mov	r0, r6
 801273e:	f006 f828 	bl	8018792 <lv_style_set_prop>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 8012742:	6820      	ldr	r0, [r4, #0]
 8012744:	f500 73ec 	add.w	r3, r0, #472	; 0x1d8
 8012748:	f7fe f939 	bl	80109be <lv_color_white>
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 801274c:	2144      	movs	r1, #68	; 0x44
 801274e:	b282      	uxth	r2, r0
 8012750:	4618      	mov	r0, r3
    lv_style_value_t v = {
 8012752:	f8ad 7010 	strh.w	r7, [sp, #16]
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8012756:	f006 f81c 	bl	8018792 <lv_style_set_prop>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 801275a:	6824      	ldr	r4, [r4, #0]
 801275c:	2105      	movs	r1, #5
 801275e:	68e8      	ldr	r0, [r5, #12]
 8012760:	f504 74ec 	add.w	r4, r4, #472	; 0x1d8
 8012764:	f7fe ff98 	bl	8011698 <lv_disp_dpx.part.0>
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 8012768:	f640 0143 	movw	r1, #2115	; 0x843
 801276c:	4602      	mov	r2, r0
 801276e:	4620      	mov	r0, r4
 8012770:	f006 f80f 	bl	8018792 <lv_style_set_prop>
    inited = true;
 8012774:	4b73      	ldr	r3, [pc, #460]	; (8012944 <lv_theme_default_init+0x1204>)
 8012776:	2201      	movs	r2, #1
 8012778:	701a      	strb	r2, [r3, #0]
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 801277a:	f1b8 0f00 	cmp.w	r8, #0
 801277e:	f040 80d8 	bne.w	8012932 <lv_theme_default_init+0x11f2>
 8012782:	2000      	movs	r0, #0
 8012784:	f7f4 fcea 	bl	800715c <lv_obj_report_style_change>
}
 8012788:	486f      	ldr	r0, [pc, #444]	; (8012948 <lv_theme_default_init+0x1208>)
 801278a:	b007      	add	sp, #28
 801278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 8012790:	f004 f97a 	bl	8016a88 <lv_disp_get_default>
 8012794:	f004 f97e 	bl	8016a94 <lv_disp_get_hor_res>
 8012798:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 801279c:	bfb4      	ite	lt
 801279e:	2302      	movlt	r3, #2
    else disp_size = DISP_LARGE;
 80127a0:	2301      	movge	r3, #1
 80127a2:	f7fe bfea 	b.w	801177a <lv_theme_default_init+0x3a>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 80127a6:	2104      	movs	r1, #4
 80127a8:	2012      	movs	r0, #18
 80127aa:	f004 fe71 	bl	8017490 <lv_palette_lighten>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 80127ae:	6a2b      	ldr	r3, [r5, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 80127b0:	f8aa 0000 	strh.w	r0, [sl]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 80127b4:	07d8      	lsls	r0, r3, #31
 80127b6:	f53e affa 	bmi.w	80117ae <lv_theme_default_init+0x6e>
 80127ba:	2104      	movs	r1, #4
 80127bc:	2012      	movs	r0, #18
 80127be:	f004 fe79 	bl	80174b4 <lv_palette_darken>
 80127c2:	f7fe bff8 	b.w	80117b6 <lv_theme_default_init+0x76>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 80127c6:	f7fe f8fa 	bl	80109be <lv_color_white>
 80127ca:	4b60      	ldr	r3, [pc, #384]	; (801294c <lv_theme_default_init+0x120c>)
 80127cc:	8018      	strh	r0, [r3, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 80127ce:	6a2b      	ldr	r3, [r5, #32]
 80127d0:	07d9      	lsls	r1, r3, #31
 80127d2:	f53e affc 	bmi.w	80117ce <lv_theme_default_init+0x8e>
 80127d6:	2102      	movs	r1, #2
 80127d8:	2012      	movs	r0, #18
 80127da:	f004 fe59 	bl	8017490 <lv_palette_lighten>
 80127de:	f8a9 0000 	strh.w	r0, [r9]
 80127e2:	f7fe bff8 	b.w	80117d6 <lv_theme_default_init+0x96>
    lv_style_set_bg_color(&styles->scrollbar, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_main(LV_PALETTE_GREY));
 80127e6:	2012      	movs	r0, #18
 80127e8:	f004 fe48 	bl	801747c <lv_palette_main>
 80127ec:	f7ff b829 	b.w	8011842 <lv_theme_default_init+0x102>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 80127f0:	2b02      	cmp	r3, #2
 80127f2:	68e8      	ldr	r0, [r5, #12]
 80127f4:	bf0c      	ite	eq
 80127f6:	210c      	moveq	r1, #12
 80127f8:	210a      	movne	r1, #10
 80127fa:	f7ff b87d 	b.w	80118f8 <lv_theme_default_init+0x1b8>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 80127fe:	2b02      	cmp	r3, #2
 8012800:	68e8      	ldr	r0, [r5, #12]
 8012802:	bf0c      	ite	eq
 8012804:	210c      	moveq	r1, #12
 8012806:	210a      	movne	r1, #10
 8012808:	f7ff b884 	b.w	8011914 <lv_theme_default_init+0x1d4>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 801280c:	2b02      	cmp	r3, #2
 801280e:	68e8      	ldr	r0, [r5, #12]
 8012810:	bf0c      	ite	eq
 8012812:	2114      	moveq	r1, #20
 8012814:	2110      	movne	r1, #16
 8012816:	f7ff b8c6 	b.w	80119a6 <lv_theme_default_init+0x266>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 801281a:	2b02      	cmp	r3, #2
 801281c:	68e8      	ldr	r0, [r5, #12]
 801281e:	bf0c      	ite	eq
 8012820:	210c      	moveq	r1, #12
 8012822:	210a      	movne	r1, #10
 8012824:	f7ff b8ce 	b.w	80119c4 <lv_theme_default_init+0x284>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 8012828:	2b02      	cmp	r3, #2
 801282a:	68e8      	ldr	r0, [r5, #12]
 801282c:	bf0c      	ite	eq
 801282e:	210c      	moveq	r1, #12
 8012830:	210a      	movne	r1, #10
 8012832:	f7ff b8f3 	b.w	8011a1c <lv_theme_default_init+0x2dc>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp, 16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 8012836:	2b02      	cmp	r3, #2
 8012838:	68e8      	ldr	r0, [r5, #12]
 801283a:	bf0c      	ite	eq
 801283c:	210c      	moveq	r1, #12
 801283e:	2108      	movne	r1, #8
 8012840:	f7ff b96d 	b.w	8011b1e <lv_theme_default_init+0x3de>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8012844:	2b02      	cmp	r3, #2
 8012846:	68e8      	ldr	r0, [r5, #12]
 8012848:	bf0c      	ite	eq
 801284a:	2114      	moveq	r1, #20
 801284c:	2110      	movne	r1, #16
 801284e:	f7ff b9af 	b.w	8011bb0 <lv_theme_default_init+0x470>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8012852:	2b02      	cmp	r3, #2
 8012854:	68e8      	ldr	r0, [r5, #12]
 8012856:	bf0c      	ite	eq
 8012858:	210c      	moveq	r1, #12
 801285a:	210a      	movne	r1, #10
 801285c:	f7ff b9b7 	b.w	8011bce <lv_theme_default_init+0x48e>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8012860:	2b02      	cmp	r3, #2
 8012862:	68e8      	ldr	r0, [r5, #12]
 8012864:	bf0c      	ite	eq
 8012866:	2114      	moveq	r1, #20
 8012868:	2110      	movne	r1, #16
 801286a:	f7ff ba0d 	b.w	8011c88 <lv_theme_default_init+0x548>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 801286e:	2b02      	cmp	r3, #2
 8012870:	68e8      	ldr	r0, [r5, #12]
 8012872:	bf0c      	ite	eq
 8012874:	2114      	moveq	r1, #20
 8012876:	2110      	movne	r1, #16
 8012878:	f7ff ba15 	b.w	8011ca6 <lv_theme_default_init+0x566>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 801287c:	2b02      	cmp	r3, #2
 801287e:	68e8      	ldr	r0, [r5, #12]
 8012880:	bf0c      	ite	eq
 8012882:	2114      	moveq	r1, #20
 8012884:	2110      	movne	r1, #16
 8012886:	f7ff ba1d 	b.w	8011cc4 <lv_theme_default_init+0x584>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 801288a:	2b02      	cmp	r3, #2
 801288c:	68e8      	ldr	r0, [r5, #12]
 801288e:	bf0c      	ite	eq
 8012890:	210c      	moveq	r1, #12
 8012892:	210a      	movne	r1, #10
 8012894:	f7ff ba29 	b.w	8011cea <lv_theme_default_init+0x5aa>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8012898:	2b02      	cmp	r3, #2
 801289a:	68e8      	ldr	r0, [r5, #12]
 801289c:	bf0c      	ite	eq
 801289e:	210c      	moveq	r1, #12
 80128a0:	210a      	movne	r1, #10
 80128a2:	f7ff ba31 	b.w	8011d08 <lv_theme_default_init+0x5c8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 80128a6:	2b02      	cmp	r3, #2
 80128a8:	68e8      	ldr	r0, [r5, #12]
 80128aa:	bf0c      	ite	eq
 80128ac:	2106      	moveq	r1, #6
 80128ae:	2102      	movne	r1, #2
 80128b0:	f7ff ba8b 	b.w	8011dca <lv_theme_default_init+0x68a>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 80128b4:	2b02      	cmp	r3, #2
 80128b6:	68e8      	ldr	r0, [r5, #12]
 80128b8:	bf0c      	ite	eq
 80128ba:	2106      	moveq	r1, #6
 80128bc:	2102      	movne	r1, #2
 80128be:	f7ff ba93 	b.w	8011de8 <lv_theme_default_init+0x6a8>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 80128c2:	2b02      	cmp	r3, #2
 80128c4:	68e8      	ldr	r0, [r5, #12]
 80128c6:	bf0c      	ite	eq
 80128c8:	2106      	moveq	r1, #6
 80128ca:	2102      	movne	r1, #2
 80128cc:	f7ff ba9b 	b.w	8011e06 <lv_theme_default_init+0x6c6>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY, 2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 80128d0:	2101      	movs	r1, #1
 80128d2:	2012      	movs	r0, #18
 80128d4:	f004 fddc 	bl	8017490 <lv_palette_lighten>
 80128d8:	e5a1      	b.n	801241e <lv_theme_default_init+0xcde>
    lv_style_set_pad_all(&styles->calendar_bg, PAD_SMALL);
 80128da:	2b02      	cmp	r3, #2
 80128dc:	68e8      	ldr	r0, [r5, #12]
 80128de:	bf0c      	ite	eq
 80128e0:	210c      	moveq	r1, #12
 80128e2:	210a      	movne	r1, #10
 80128e4:	e5b0      	b.n	8012448 <lv_theme_default_init+0xd08>
    lv_style_set_pad_gap(&styles->calendar_bg, PAD_SMALL / 2);
 80128e6:	2b02      	cmp	r3, #2
 80128e8:	68e8      	ldr	r0, [r5, #12]
 80128ea:	bf0c      	ite	eq
 80128ec:	210c      	moveq	r1, #12
 80128ee:	210a      	movne	r1, #10
 80128f0:	e5b9      	b.n	8012466 <lv_theme_default_init+0xd26>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	68e8      	ldr	r0, [r5, #12]
 80128f6:	bf0c      	ite	eq
 80128f8:	210c      	moveq	r1, #12
 80128fa:	2108      	movne	r1, #8
 80128fc:	f7fe fecc 	bl	8011698 <lv_disp_dpx.part.0>
 8012900:	e635      	b.n	801256e <lv_theme_default_init+0xe2e>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 8012902:	2b02      	cmp	r3, #2
 8012904:	68e8      	ldr	r0, [r5, #12]
 8012906:	bf0c      	ite	eq
 8012908:	2114      	moveq	r1, #20
 801290a:	2110      	movne	r1, #16
 801290c:	e672      	b.n	80125f4 <lv_theme_default_init+0xeb4>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801290e:	2b02      	cmp	r3, #2
 8012910:	68e8      	ldr	r0, [r5, #12]
 8012912:	bf0c      	ite	eq
 8012914:	210c      	moveq	r1, #12
 8012916:	210a      	movne	r1, #10
 8012918:	e6b1      	b.n	801267e <lv_theme_default_init+0xf3e>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801291a:	2b02      	cmp	r3, #2
 801291c:	68e8      	ldr	r0, [r5, #12]
 801291e:	bf0c      	ite	eq
 8012920:	210c      	moveq	r1, #12
 8012922:	210a      	movne	r1, #10
 8012924:	e6ba      	b.n	801269c <lv_theme_default_init+0xf5c>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 8012926:	2b02      	cmp	r3, #2
 8012928:	68e8      	ldr	r0, [r5, #12]
 801292a:	bf0c      	ite	eq
 801292c:	2114      	moveq	r1, #20
 801292e:	2110      	movne	r1, #16
 8012930:	e6c9      	b.n	80126c6 <lv_theme_default_init+0xf86>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 8012932:	4640      	mov	r0, r8
 8012934:	f7ef fafb 	bl	8001f2e <lv_disp_get_theme>
 8012938:	4285      	cmp	r5, r0
 801293a:	f47f af25 	bne.w	8012788 <lv_theme_default_init+0x1048>
 801293e:	e720      	b.n	8012782 <lv_theme_default_init+0x1042>
 8012940:	20002ad8 	.word	0x20002ad8
 8012944:	20002ad4 	.word	0x20002ad4
 8012948:	20002adc 	.word	0x20002adc
 801294c:	20002ab6 	.word	0x20002ab6

08012950 <lv_theme_default_is_inited>:
}
 8012950:	4b01      	ldr	r3, [pc, #4]	; (8012958 <lv_theme_default_is_inited+0x8>)
 8012952:	7818      	ldrb	r0, [r3, #0]
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	20002ad4 	.word	0x20002ad4

0801295c <get_month_length>:
 * @return [28..31]
 */
static uint8_t get_month_length(int32_t year, int32_t month)
{
    month--;
    if(month < 0) {
 801295c:	1e4b      	subs	r3, r1, #1
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
        month = 12 + month; /*`month` is negative, the result will be < 12*/
 801295e:	bf44      	itt	mi
 8012960:	f101 030b 	addmi.w	r3, r1, #11
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
 8012964:	f100 30ff 	addmi.w	r0, r0, #4294967295
    }
    if(month >= 12) {
 8012968:	2b0b      	cmp	r3, #11
        year++;
        month -= 12;
 801296a:	bfc4      	itt	gt
 801296c:	3b0c      	subgt	r3, #12
        year++;
 801296e:	3001      	addgt	r0, #1
    }

    /*month == 1 is february*/
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012970:	2b01      	cmp	r3, #1
 8012972:	d116      	bne.n	80129a2 <get_month_length+0x46>
 * @param year a year
 * @return 0: not leap year; 1: leap year
 */
static uint8_t is_leap_year(uint32_t year)
{
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8012974:	0782      	lsls	r2, r0, #30
 8012976:	d112      	bne.n	801299e <get_month_length+0x42>
 8012978:	2164      	movs	r1, #100	; 0x64
 801297a:	fbb0 f2f1 	udiv	r2, r0, r1
 801297e:	fb01 0212 	mls	r2, r1, r2, r0
 8012982:	b942      	cbnz	r2, 8012996 <get_month_length+0x3a>
 8012984:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012988:	fbb0 f2f3 	udiv	r2, r0, r3
 801298c:	fb03 0312 	mls	r3, r3, r2, r0
 8012990:	fab3 f383 	clz	r3, r3
 8012994:	095b      	lsrs	r3, r3, #5
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8012996:	f103 001c 	add.w	r0, r3, #28
 801299a:	b2c0      	uxtb	r0, r0
}
 801299c:	4770      	bx	lr
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 801299e:	2300      	movs	r3, #0
 80129a0:	e7f9      	b.n	8012996 <get_month_length+0x3a>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 80129a2:	2007      	movs	r0, #7
 80129a4:	fb93 f0f0 	sdiv	r0, r3, r0
 80129a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80129ac:	1a1b      	subs	r3, r3, r0
 80129ae:	f003 0001 	and.w	r0, r3, #1
 80129b2:	bf48      	it	mi
 80129b4:	4240      	negmi	r0, r0
 80129b6:	f1c0 001f 	rsb	r0, r0, #31
 80129ba:	e7ee      	b.n	801299a <get_month_length+0x3e>

080129bc <get_day_of_week>:
 * @param day a day [1..32]
 * @return [0..6] which means [Sun..Sat] or [Mon..Sun] depending on LV_CALENDAR_WEEK_STARTS_MONDAY
 */
static uint8_t get_day_of_week(uint32_t year, uint32_t month, uint32_t day)
{
    uint32_t a = month < 3 ? 1 : 0;
 80129bc:	2902      	cmp	r1, #2
 80129be:	bf94      	ite	ls
 80129c0:	2301      	movls	r3, #1
 80129c2:	2300      	movhi	r3, #0
    uint32_t b = year - a;
 80129c4:	eba0 0003 	sub.w	r0, r0, r3

#if LV_CALENDAR_WEEK_STARTS_MONDAY
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400) - 1) % 7;
#else
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 80129c8:	bf94      	ite	ls
 80129ca:	230c      	movls	r3, #12
 80129cc:	2300      	movhi	r3, #0
 80129ce:	4402      	add	r2, r0
 80129d0:	4419      	add	r1, r3
 80129d2:	230c      	movs	r3, #12
 80129d4:	eb02 0290 	add.w	r2, r2, r0, lsr #2
 80129d8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80129dc:	393e      	subs	r1, #62	; 0x3e
 80129de:	fbb1 f1f3 	udiv	r1, r1, r3
 80129e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80129e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80129ea:	441a      	add	r2, r3
 80129ec:	2364      	movs	r3, #100	; 0x64
 80129ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80129f2:	4411      	add	r1, r2
 80129f4:	2307      	movs	r3, #7
 80129f6:	1a08      	subs	r0, r1, r0
 80129f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80129fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012a00:	1ac0      	subs	r0, r0, r3
#endif

    return day_of_week;
}
 8012a02:	b2c0      	uxtb	r0, r0
 8012a04:	4770      	bx	lr

08012a06 <draw_part_begin_event_cb>:
{
 8012a06:	b570      	push	{r4, r5, r6, lr}
 8012a08:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8012a0a:	f7ef fb2d 	bl	8002068 <lv_event_get_target>
 8012a0e:	4605      	mov	r5, r0
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 8012a10:	4620      	mov	r0, r4
 8012a12:	f7ef fb2d 	bl	8002070 <lv_event_get_param>
    if(dsc->part == LV_PART_ITEMS) {
 8012a16:	6b43      	ldr	r3, [r0, #52]	; 0x34
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 8012a18:	4604      	mov	r4, r0
    if(dsc->part == LV_PART_ITEMS) {
 8012a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012a1e:	d12f      	bne.n	8012a80 <draw_part_begin_event_cb+0x7a>
        if(dsc->id < 7) {
 8012a20:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012a22:	2906      	cmp	r1, #6
 8012a24:	d82d      	bhi.n	8012a82 <draw_part_begin_event_cb+0x7c>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012a26:	6883      	ldr	r3, [r0, #8]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	729a      	strb	r2, [r3, #10]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8012a2c:	779a      	strb	r2, [r3, #30]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_HIGHLIGHT)) {
 8012a2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012a32:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012a34:	4628      	mov	r0, r5
 8012a36:	f008 fe95 	bl	801b764 <lv_btnmatrix_has_btn_ctrl>
 8012a3a:	b178      	cbz	r0, 8012a5c <draw_part_begin_event_cb+0x56>
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 8012a3c:	2366      	movs	r3, #102	; 0x66
 8012a3e:	68a6      	ldr	r6, [r4, #8]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 8012a40:	4628      	mov	r0, r5
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 8012a42:	72b3      	strb	r3, [r6, #10]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 8012a44:	f7f5 ff4a 	bl	80088dc <lv_theme_get_color_primary>
 8012a48:	80b0      	strh	r0, [r6, #4]
            if(lv_btnmatrix_get_selected_btn(obj) == dsc->id) {
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f008 fe5a 	bl	801b704 <lv_btnmatrix_get_selected_btn>
 8012a50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012a52:	4298      	cmp	r0, r3
                dsc->rect_dsc->bg_opa = LV_OPA_70;
 8012a54:	bf02      	ittt	eq
 8012a56:	68a3      	ldreq	r3, [r4, #8]
 8012a58:	22b2      	moveq	r2, #178	; 0xb2
 8012a5a:	729a      	strbeq	r2, [r3, #10]
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_TODAY)) {
 8012a5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012a60:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8012a62:	4628      	mov	r0, r5
 8012a64:	f008 fe7e 	bl	801b764 <lv_btnmatrix_has_btn_ctrl>
 8012a68:	b150      	cbz	r0, 8012a80 <draw_part_begin_event_cb+0x7a>
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 8012a6a:	68a6      	ldr	r6, [r4, #8]
 8012a6c:	23ff      	movs	r3, #255	; 0xff
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012a6e:	4628      	mov	r0, r5
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 8012a70:	77b3      	strb	r3, [r6, #30]
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012a72:	f7f5 ff33 	bl	80088dc <lv_theme_get_color_primary>
            dsc->rect_dsc->border_width += 1;
 8012a76:	68a2      	ldr	r2, [r4, #8]
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8012a78:	8370      	strh	r0, [r6, #26]
            dsc->rect_dsc->border_width += 1;
 8012a7a:	8b93      	ldrh	r3, [r2, #28]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	8393      	strh	r3, [r2, #28]
}
 8012a80:	bd70      	pop	{r4, r5, r6, pc}
        else if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_BTNMATRIX_CTRL_DISABLED)) {
 8012a82:	2220      	movs	r2, #32
 8012a84:	b289      	uxth	r1, r1
 8012a86:	4628      	mov	r0, r5
 8012a88:	f008 fe6c 	bl	801b764 <lv_btnmatrix_has_btn_ctrl>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d0ce      	beq.n	8012a2e <draw_part_begin_event_cb+0x28>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012a90:	68a3      	ldr	r3, [r4, #8]
 8012a92:	2200      	movs	r2, #0
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8012a94:	2012      	movs	r0, #18
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8012a96:	729a      	strb	r2, [r3, #10]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8012a98:	779a      	strb	r2, [r3, #30]
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8012a9a:	68e6      	ldr	r6, [r4, #12]
 8012a9c:	f004 fcee 	bl	801747c <lv_palette_main>
 8012aa0:	81b0      	strh	r0, [r6, #12]
 8012aa2:	e7c4      	b.n	8012a2e <draw_part_begin_event_cb+0x28>

08012aa4 <highlight_update>:

static void highlight_update(lv_obj_t * obj)
{
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	4604      	mov	r4, r0
    lv_calendar_t * calendar = (lv_calendar_t *)obj;
    uint16_t i;

    /*Clear all kind of selection*/
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_CALENDAR_CTRL_TODAY | LV_CALENDAR_CTRL_HIGHLIGHT);
 8012aa8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8012aac:	f008 fdef 	bl	801b68e <lv_btnmatrix_clear_btn_ctrl_all>

    if(calendar->highlighted_dates) {
 8012ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d138      	bne.n	8012b28 <highlight_update+0x84>
                lv_btnmatrix_set_btn_ctrl(obj, calendar->highlighted_dates[i].day + 7, LV_CALENDAR_CTRL_HIGHLIGHT);
            }
        }
    }

    if(calendar->showed_date.year == calendar->today.year && calendar->showed_date.month == calendar->today.month) {
 8012ab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012ab8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8012abc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012abe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d132      	bne.n	8012b2c <highlight_update+0x88>
        uint8_t day_first = get_day_of_week(calendar->today.year, calendar->today.month, calendar->today.day - 1);
 8012ac6:	f994 503b 	ldrsb.w	r5, [r4, #59]	; 0x3b
 8012aca:	f994 103a 	ldrsb.w	r1, [r4, #58]	; 0x3a
 8012ace:	1e6a      	subs	r2, r5, #1
 8012ad0:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8012ad2:	f7ff ff73 	bl	80129bc <get_day_of_week>
        lv_btnmatrix_set_btn_ctrl(obj, calendar->today.day + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8012ad6:	4428      	add	r0, r5
 8012ad8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012adc:	1dc1      	adds	r1, r0, #7
 8012ade:	4620      	mov	r0, r4
 8012ae0:	b289      	uxth	r1, r1
    }
}
 8012ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_btnmatrix_set_btn_ctrl(obj, calendar->today.day + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8012ae6:	f008 bde1 	b.w	801b6ac <lv_btnmatrix_set_btn_ctrl>
            if(calendar->highlighted_dates[i].year == calendar->today.year && calendar->highlighted_dates[i].month == calendar->showed_date.month) {
 8012aea:	b2ab      	uxth	r3, r5
 8012aec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012aee:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8012af2:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8012af6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8012af8:	4299      	cmp	r1, r3
 8012afa:	d10e      	bne.n	8012b1a <highlight_update+0x76>
 8012afc:	f992 1002 	ldrsb.w	r1, [r2, #2]
 8012b00:	f994 303e 	ldrsb.w	r3, [r4, #62]	; 0x3e
 8012b04:	4299      	cmp	r1, r3
 8012b06:	d108      	bne.n	8012b1a <highlight_update+0x76>
                lv_btnmatrix_set_btn_ctrl(obj, calendar->highlighted_dates[i].day + 7, LV_CALENDAR_CTRL_HIGHLIGHT);
 8012b08:	f992 1003 	ldrsb.w	r1, [r2, #3]
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012b12:	3107      	adds	r1, #7
 8012b14:	b289      	uxth	r1, r1
 8012b16:	f008 fdc9 	bl	801b6ac <lv_btnmatrix_set_btn_ctrl>
        for(i = 0; i < calendar->highlighted_dates_num; i++) {
 8012b1a:	3501      	adds	r5, #1
 8012b1c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 8012b20:	b2ab      	uxth	r3, r5
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d8e1      	bhi.n	8012aea <highlight_update+0x46>
 8012b26:	e7c6      	b.n	8012ab6 <highlight_update+0x12>
 8012b28:	2500      	movs	r5, #0
 8012b2a:	e7f7      	b.n	8012b1c <highlight_update+0x78>
}
 8012b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08012b30 <lv_calendar_set_showed_date>:
{
 8012b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    calendar->showed_date.month  = month;
 8012b34:	fa4f f982 	sxtb.w	r9, r2
    calendar->showed_date.day    = 1;
 8012b38:	2301      	movs	r3, #1
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 8012b3a:	2400      	movs	r4, #0
    calendar->showed_date.year   = year;
 8012b3c:	8781      	strh	r1, [r0, #60]	; 0x3c
{
 8012b3e:	460f      	mov	r7, r1
    calendar->showed_date.month  = month;
 8012b40:	f880 903e 	strb.w	r9, [r0, #62]	; 0x3e
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 8012b44:	2120      	movs	r1, #32
    calendar->showed_date.day    = 1;
 8012b46:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
{
 8012b4a:	4605      	mov	r5, r0
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_DISABLED);
 8012b4c:	f008 fd9f 	bl	801b68e <lv_btnmatrix_clear_btn_ctrl_all>
        lv_btnmatrix_set_btn_ctrl(obj, i, LV_BTNMATRIX_CTRL_DISABLED);
 8012b50:	b2a1      	uxth	r1, r4
 8012b52:	3401      	adds	r4, #1
 8012b54:	2220      	movs	r2, #32
 8012b56:	4628      	mov	r0, r5
 8012b58:	f008 fda8 	bl	801b6ac <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < 7; i++) {
 8012b5c:	2c07      	cmp	r4, #7
 8012b5e:	d1f7      	bne.n	8012b50 <lv_calendar_set_showed_date+0x20>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 8012b60:	b2bf      	uxth	r7, r7
 8012b62:	4649      	mov	r1, r9
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012b64:	f04f 0a00 	mov.w	sl, #0
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012b68:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8012c38 <lv_calendar_set_showed_date+0x108>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 8012b6c:	4638      	mov	r0, r7
 8012b6e:	f7ff fef5 	bl	801295c <get_month_length>
 8012b72:	4604      	mov	r4, r0
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
 8012b74:	2201      	movs	r2, #1
 8012b76:	4649      	mov	r1, r9
 8012b78:	4638      	mov	r0, r7
 8012b7a:	f7ff ff1f 	bl	80129bc <get_day_of_week>
 8012b7e:	4680      	mov	r8, r0
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012b80:	4404      	add	r4, r0
 8012b82:	fa5f f68a 	uxtb.w	r6, sl
 8012b86:	f10a 0a01 	add.w	sl, sl, #1
 8012b8a:	1c73      	adds	r3, r6, #1
 8012b8c:	4446      	add	r6, r8
 8012b8e:	b2f6      	uxtb	r6, r6
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	42a6      	cmp	r6, r4
 8012b94:	db27      	blt.n	8012be6 <lv_calendar_set_showed_date+0xb6>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012b96:	f1c8 0601 	rsb	r6, r8, #1
    uint8_t prev_mo_len = get_month_length(d.year, d.month - 1);
 8012b9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	f505 7994 	add.w	r9, r5, #296	; 0x128
 8012ba4:	f7ff feda 	bl	801295c <get_month_length>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012ba8:	4430      	add	r0, r6
 8012baa:	2700      	movs	r7, #0
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012bac:	f8df a088 	ldr.w	sl, [pc, #136]	; 8012c38 <lv_calendar_set_showed_date+0x108>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012bb0:	b2c6      	uxtb	r6, r0
 8012bb2:	b2fa      	uxtb	r2, r7
 8012bb4:	fa56 f387 	uxtab	r3, r6, r7
 8012bb8:	4590      	cmp	r8, r2
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	d81c      	bhi.n	8012bf8 <lv_calendar_set_showed_date+0xc8>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 8012bbe:	b2e0      	uxtb	r0, r4
 8012bc0:	2600      	movs	r6, #0
 8012bc2:	b2e4      	uxtb	r4, r4
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012bc4:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8012c38 <lv_calendar_set_showed_date+0x108>
 8012bc8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 8012bcc:	b2e3      	uxtb	r3, r4
 8012bce:	3601      	adds	r6, #1
 8012bd0:	1d07      	adds	r7, r0, #4
 8012bd2:	2b29      	cmp	r3, #41	; 0x29
 8012bd4:	d91f      	bls.n	8012c16 <lv_calendar_set_showed_date+0xe6>
    highlight_update(obj);
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f7ff ff64 	bl	8012aa4 <highlight_update>
    lv_obj_invalidate(obj);
 8012bdc:	4628      	mov	r0, r5
}
 8012bde:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 8012be2:	f7f2 bb49 	b.w	8005278 <lv_obj_invalidate>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012be6:	f106 004a 	add.w	r0, r6, #74	; 0x4a
 8012bea:	465a      	mov	r2, fp
 8012bec:	2104      	movs	r1, #4
 8012bee:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8012bf2:	f005 fc99 	bl	8018528 <lv_snprintf>
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8012bf6:	e7c4      	b.n	8012b82 <lv_calendar_set_showed_date+0x52>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012bf8:	4652      	mov	r2, sl
 8012bfa:	2104      	movs	r1, #4
 8012bfc:	4648      	mov	r0, r9
 8012bfe:	f109 0904 	add.w	r9, r9, #4
 8012c02:	f005 fc91 	bl	8018528 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(obj, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 8012c06:	1df9      	adds	r1, r7, #7
 8012c08:	2220      	movs	r2, #32
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	b289      	uxth	r1, r1
 8012c0e:	3701      	adds	r7, #1
 8012c10:	f008 fd4c 	bl	801b6ac <lv_btnmatrix_set_btn_ctrl>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 8012c14:	e7cd      	b.n	8012bb2 <lv_calendar_set_showed_date+0x82>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8012c16:	4633      	mov	r3, r6
 8012c18:	4642      	mov	r2, r8
 8012c1a:	2104      	movs	r1, #4
 8012c1c:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8012c20:	f005 fc82 	bl	8018528 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(obj, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 8012c24:	1de1      	adds	r1, r4, #7
 8012c26:	3401      	adds	r4, #1
 8012c28:	4628      	mov	r0, r5
 8012c2a:	2220      	movs	r2, #32
 8012c2c:	b289      	uxth	r1, r1
 8012c2e:	f008 fd3d 	bl	801b6ac <lv_btnmatrix_set_btn_ctrl>
 8012c32:	4638      	mov	r0, r7
 8012c34:	b2a4      	uxth	r4, r4
 8012c36:	e7c9      	b.n	8012bcc <lv_calendar_set_showed_date+0x9c>
 8012c38:	08025a60 	.word	0x08025a60

08012c3c <lv_calendar_constructor>:
{
 8012c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    calendar->today.year  = 2020;
 8012c40:	4b28      	ldr	r3, [pc, #160]	; (8012ce4 <lv_calendar_constructor+0xa8>)
    calendar->highlighted_dates      = NULL;
 8012c42:	2500      	movs	r5, #0
{
 8012c44:	460c      	mov	r4, r1
            calendar->map[i] = day_names_def[i];
 8012c46:	4e28      	ldr	r6, [pc, #160]	; (8012ce8 <lv_calendar_constructor+0xac>)
    calendar->highlighted_dates      = NULL;
 8012c48:	640d      	str	r5, [r1, #64]	; 0x40
            calendar->nums[j][0] = 'x';
 8012c4a:	2778      	movs	r7, #120	; 0x78
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012c4c:	f504 7094 	add.w	r0, r4, #296	; 0x128
    calendar->highlighted_dates_num  = 0;
 8012c50:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    calendar->showed_date.year  = 2020;
 8012c54:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012c58:	21a8      	movs	r1, #168	; 0xa8
 8012c5a:	f005 f85b 	bl	8017d14 <lv_memset_00>
    for(i = 0; i < 8 * 7; i++) {
 8012c5e:	f104 0248 	add.w	r2, r4, #72	; 0x48
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8012c62:	462b      	mov	r3, r5
    uint8_t j = 0;
 8012c64:	4628      	mov	r0, r5
 8012c66:	4611      	mov	r1, r2
            calendar->map[i] = "\n";
 8012c68:	f8df c088 	ldr.w	ip, [pc, #136]	; 8012cf4 <lv_calendar_constructor+0xb8>
        if(i != 0 && (i + 1) % 8 == 0) {
 8012c6c:	fa5f fe83 	uxtb.w	lr, r3
 8012c70:	1c5d      	adds	r5, r3, #1
 8012c72:	b343      	cbz	r3, 8012cc6 <lv_calendar_constructor+0x8a>
 8012c74:	f015 0f07 	tst.w	r5, #7
 8012c78:	d122      	bne.n	8012cc0 <lv_calendar_constructor+0x84>
            calendar->map[i] = "\n";
 8012c7a:	f8c2 c000 	str.w	ip, [r2]
    for(i = 0; i < 8 * 7; i++) {
 8012c7e:	2d38      	cmp	r5, #56	; 0x38
 8012c80:	462b      	mov	r3, r5
 8012c82:	f102 0204 	add.w	r2, r2, #4
 8012c86:	d1f1      	bne.n	8012c6c <lv_calendar_constructor+0x30>
    calendar->map[8 * 7 - 1] = "";
 8012c88:	4b18      	ldr	r3, [pc, #96]	; (8012cec <lv_calendar_constructor+0xb0>)
    lv_btnmatrix_set_map(obj, calendar->map);
 8012c8a:	4620      	mov	r0, r4
    calendar->map[8 * 7 - 1] = "";
 8012c8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    lv_btnmatrix_set_map(obj, calendar->map);
 8012c90:	f008 fcdc 	bl	801b64c <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 8012c94:	4620      	mov	r0, r4
 8012c96:	f44f 7188 	mov.w	r1, #272	; 0x110
 8012c9a:	f008 fd24 	bl	801b6e6 <lv_btnmatrix_set_btn_ctrl_all>
    lv_calendar_set_showed_date(obj, calendar->showed_date.year, calendar->showed_date.month);
 8012c9e:	f994 203e 	ldrsb.w	r2, [r4, #62]	; 0x3e
 8012ca2:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f7ff ff43 	bl	8012b30 <lv_calendar_set_showed_date>
    highlight_update(obj);
 8012caa:	4620      	mov	r0, r4
 8012cac:	f7ff fefa 	bl	8012aa4 <highlight_update>
    lv_obj_add_event_cb(obj, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	221a      	movs	r2, #26
 8012cb6:	490e      	ldr	r1, [pc, #56]	; (8012cf0 <lv_calendar_constructor+0xb4>)
}
 8012cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_obj_add_event_cb(obj, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 8012cbc:	f7ef b9ec 	b.w	8002098 <lv_obj_add_event_cb>
        } else if(i < 8){
 8012cc0:	f1be 0f07 	cmp.w	lr, #7
 8012cc4:	d803      	bhi.n	8012cce <lv_calendar_constructor+0x92>
            calendar->map[i] = day_names_def[i];
 8012cc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012cca:	6013      	str	r3, [r2, #0]
 8012ccc:	e7d7      	b.n	8012c7e <lv_calendar_constructor+0x42>
            calendar->nums[j][0] = 'x';
 8012cce:	f100 034a 	add.w	r3, r0, #74	; 0x4a
            j++;
 8012cd2:	3001      	adds	r0, #1
            calendar->nums[j][0] = 'x';
 8012cd4:	f804 7023 	strb.w	r7, [r4, r3, lsl #2]
            calendar->map[i] = calendar->nums[j];
 8012cd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
            j++;
 8012cdc:	b2c0      	uxtb	r0, r0
            calendar->map[i] = calendar->nums[j];
 8012cde:	6013      	str	r3, [r2, #0]
            j++;
 8012ce0:	e7cd      	b.n	8012c7e <lv_calendar_constructor+0x42>
 8012ce2:	bf00      	nop
 8012ce4:	010107e4 	.word	0x010107e4
 8012ce8:	08025a78 	.word	0x08025a78
 8012cec:	08029f9b 	.word	0x08029f9b
 8012cf0:	08012a07 	.word	0x08012a07
 8012cf4:	08029f9a 	.word	0x08029f9a

08012cf8 <lv_obj_get_style_pad_left>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8012cf8:	f241 0212 	movw	r2, #4114	; 0x1012
{
 8012cfc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8012cfe:	f7f4 fbe3 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8012d02:	b200      	sxth	r0, r0
 8012d04:	bd08      	pop	{r3, pc}

08012d06 <lv_obj_get_style_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8012d06:	f241 0201 	movw	r2, #4097	; 0x1001
{
 8012d0a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8012d0c:	f7f4 fbdc 	bl	80074c8 <lv_obj_get_style_prop>
}
 8012d10:	b200      	sxth	r0, r0
 8012d12:	bd08      	pop	{r3, pc}

08012d14 <lv_obj_get_style_pad_column>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8012d14:	f241 0215 	movw	r2, #4117	; 0x1015
{
 8012d18:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8012d1a:	f7f4 fbd5 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8012d1e:	b200      	sxth	r0, r0
 8012d20:	bd08      	pop	{r3, pc}

08012d22 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8012d22:	f241 0210 	movw	r2, #4112	; 0x1010
{
 8012d26:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8012d28:	f7f4 fbce 	bl	80074c8 <lv_obj_get_style_prop>
}
 8012d2c:	b200      	sxth	r0, r0
 8012d2e:	bd08      	pop	{r3, pc}

08012d30 <lv_chart_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_chart_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	460d      	mov	r5, r1
 8012d34:	f101 0624 	add.w	r6, r1, #36	; 0x24
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_chart_t * chart = (lv_chart_t *)obj;
    lv_chart_series_t * ser;
    while(chart->series_ll.head) {
 8012d38:	6aab      	ldr	r3, [r5, #40]	; 0x28
        ser = _lv_ll_get_head(&chart->series_ll);
 8012d3a:	4630      	mov	r0, r6
    while(chart->series_ll.head) {
 8012d3c:	b91b      	cbnz	r3, 8012d46 <lv_chart_destructor+0x16>
        lv_mem_free(ser);
    }
    _lv_ll_clear(&chart->series_ll);

    LV_TRACE_OBJ_CREATE("finished");
}
 8012d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_ll_clear(&chart->series_ll);
 8012d42:	f004 bcd2 	b.w	80176ea <_lv_ll_clear>
        ser = _lv_ll_get_head(&chart->series_ll);
 8012d46:	f004 fce2 	bl	801770e <_lv_ll_get_head>
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 8012d4a:	7b03      	ldrb	r3, [r0, #12]
        ser = _lv_ll_get_head(&chart->series_ll);
 8012d4c:	4604      	mov	r4, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 8012d4e:	075b      	lsls	r3, r3, #29
 8012d50:	d402      	bmi.n	8012d58 <lv_chart_destructor+0x28>
 8012d52:	6840      	ldr	r0, [r0, #4]
 8012d54:	f004 fdde 	bl	8017914 <lv_mem_free>
        _lv_ll_remove(&chart->series_ll, ser);
 8012d58:	4630      	mov	r0, r6
 8012d5a:	4621      	mov	r1, r4
 8012d5c:	f004 fc9c 	bl	8017698 <_lv_ll_remove>
        lv_mem_free(ser);
 8012d60:	4620      	mov	r0, r4
 8012d62:	f004 fdd7 	bl	8017914 <lv_mem_free>
 8012d66:	e7e7      	b.n	8012d38 <lv_chart_destructor+0x8>

08012d68 <lv_chart_constructor>:
{
 8012d68:	b510      	push	{r4, lr}
 8012d6a:	460c      	mov	r4, r1
    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 8012d6c:	2110      	movs	r1, #16
 8012d6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012d72:	f004 fc52 	bl	801761a <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 8012d76:	2110      	movs	r1, #16
 8012d78:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8012d7c:	f004 fc4d 	bl	801761a <_lv_ll_init>
    chart->ymax[0] = 100;
 8012d80:	2200      	movs	r2, #0
 8012d82:	f04f 1364 	mov.w	r3, #6553700	; 0x640064
 8012d86:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    chart->xmax[0] = 100;
 8012d8a:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 8012d8e:	4b08      	ldr	r3, [pc, #32]	; (8012db0 <lv_chart_constructor+0x48>)
 8012d90:	4a08      	ldr	r2, [pc, #32]	; (8012db4 <lv_chart_constructor+0x4c>)
 8012d92:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 8012d96:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8012d9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    chart->type        = LV_CHART_TYPE_LINE;
 8012d9e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8012da2:	f023 030f 	bic.w	r3, r3, #15
 8012da6:	f043 0301 	orr.w	r3, r3, #1
 8012daa:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
}
 8012dae:	bd10      	pop	{r4, pc}
 8012db0:	000a0005 	.word	0x000a0005
 8012db4:	00037fff 	.word	0x00037fff

08012db8 <invalidate_point>:
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 8012db8:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 8012dbc:	428b      	cmp	r3, r1
{
 8012dbe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc2:	4606      	mov	r6, r0
 8012dc4:	460c      	mov	r4, r1
    if(i >= chart->point_cnt) return;
 8012dc6:	d972      	bls.n	8012eae <invalidate_point+0xf6>

    lv_coord_t w  = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012dc8:	f7f2 f90d 	bl	8004fe6 <lv_obj_get_content_width>
 8012dcc:	f8b6 7084 	ldrh.w	r7, [r6, #132]	; 0x84
 8012dd0:	4378      	muls	r0, r7
 8012dd2:	f340 270f 	sbfx	r7, r0, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f7f3 f9a2 	bl	8006120 <lv_obj_get_scroll_left>
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012ddc:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8012de0:	4680      	mov	r8, r0
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012de2:	f003 0307 	and.w	r3, r3, #7
 8012de6:	2b01      	cmp	r3, #1
 8012de8:	d164      	bne.n	8012eb4 <invalidate_point+0xfc>
        lv_coord_t x_ofs = obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN) - scroll_left;
 8012dea:	f8b6 9014 	ldrh.w	r9, [r6, #20]
 8012dee:	2100      	movs	r1, #0
 8012df0:	4630      	mov	r0, r6
 8012df2:	eba9 0808 	sub.w	r8, r9, r8
 8012df6:	f7ff ff7f 	bl	8012cf8 <lv_obj_get_style_pad_left>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 8012dfa:	f640 0249 	movw	r2, #2121	; 0x849
 8012dfe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012e02:	4480      	add	r8, r0
 8012e04:	4630      	mov	r0, r6
 8012e06:	f7f4 fb5f 	bl	80074c8 <lv_obj_get_style_prop>
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_ITEMS);
        lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR);
 8012e0a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8012e0e:	4682      	mov	sl, r0
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7ff ff78 	bl	8012d06 <lv_obj_get_style_width>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 8012e16:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
        lv_coord_t x_ofs = obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN) - scroll_left;
 8012e1a:	fa1f f588 	uxth.w	r5, r8
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 8012e1e:	f9b6 201a 	ldrsh.w	r2, [r6, #26]

        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
        coords.y1 -= line_width + point_w;
 8012e22:	fa1f f880 	uxth.w	r8, r0
 8012e26:	fa1f f98a 	uxth.w	r9, sl
 8012e2a:	fa18 fa8a 	uxtah	sl, r8, sl
 8012e2e:	fa1f fa8a 	uxth.w	sl, sl
 8012e32:	eba3 030a 	sub.w	r3, r3, sl
        coords.y2 += line_width + point_w;
 8012e36:	4492      	add	sl, r2
        coords.y1 -= line_width + point_w;
 8012e38:	f8ad 3002 	strh.w	r3, [sp, #2]

        if(i < chart->point_cnt - 1) {
 8012e3c:	f8b6 3082 	ldrh.w	r3, [r6, #130]	; 0x82
        coords.y2 += line_width + point_w;
 8012e40:	f8ad a006 	strh.w	sl, [sp, #6]
        if(i < chart->point_cnt - 1) {
 8012e44:	1e59      	subs	r1, r3, #1
 8012e46:	428c      	cmp	r4, r1
 8012e48:	da16      	bge.n	8012e78 <invalidate_point+0xc0>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e4a:	fb07 f304 	mul.w	r3, r7, r4
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
            lv_obj_invalidate_area(obj, &coords);
 8012e4e:	4630      	mov	r0, r6
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e50:	fb93 f2f1 	sdiv	r2, r3, r1
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e54:	443b      	add	r3, r7
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e56:	eba2 0209 	sub.w	r2, r2, r9
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e5a:	fb93 f3f1 	sdiv	r3, r3, r1
 8012e5e:	444b      	add	r3, r9
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e60:	442a      	add	r2, r5
            lv_obj_invalidate_area(obj, &coords);
 8012e62:	4669      	mov	r1, sp
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e64:	4443      	add	r3, r8
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e66:	eba2 0208 	sub.w	r2, r2, r8
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e6a:	442b      	add	r3, r5
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e6c:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e70:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 8012e74:	f7f2 f9e6 	bl	8005244 <lv_obj_invalidate_area>
        }

        if(i > 0) {
 8012e78:	b1cc      	cbz	r4, 8012eae <invalidate_point+0xf6>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e7a:	3c01      	subs	r4, #1
 8012e7c:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
 8012e80:	437c      	muls	r4, r7
 8012e82:	3a01      	subs	r2, #1
 8012e84:	fb94 f3f2 	sdiv	r3, r4, r2
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e88:	443c      	add	r4, r7
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e8a:	eba3 0309 	sub.w	r3, r3, r9
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e8e:	fb94 f4f2 	sdiv	r4, r4, r2
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e92:	442b      	add	r3, r5
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e94:	444c      	add	r4, r9
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e96:	eba3 0308 	sub.w	r3, r3, r8
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012e9a:	44a0      	add	r8, r4
 8012e9c:	44a8      	add	r8, r5
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8012e9e:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 8012ea2:	f8ad 8004 	strh.w	r8, [sp, #4]
        lv_obj_get_coords(obj, &col_a);
        col_a.x1 = x_act - scroll_left;
        col_a.x2 = col_a.x1 + block_w;
        col_a.x1 -= block_gap;

        lv_obj_invalidate_area(obj, &col_a);
 8012ea6:	4669      	mov	r1, sp
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f7f2 f9cb 	bl	8005244 <lv_obj_invalidate_area>
        lv_obj_invalidate(obj);
    }
    else {
        lv_obj_invalidate(obj);
    }
}
 8012eae:	b002      	add	sp, #8
 8012eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8012eb4:	2b02      	cmp	r3, #2
 8012eb6:	d12a      	bne.n	8012f0e <invalidate_point+0x156>
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012eb8:	2100      	movs	r1, #0
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f7ff ff2a 	bl	8012d14 <lv_obj_get_style_pad_column>
 8012ec0:	f8b6 5084 	ldrh.w	r5, [r6, #132]	; 0x84
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	f9b6 a014 	ldrsh.w	sl, [r6, #20]
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012eca:	4368      	muls	r0, r5
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 8012ecc:	f8b6 5082 	ldrh.w	r5, [r6, #130]	; 0x82
 8012ed0:	eb07 2720 	add.w	r7, r7, r0, asr #8
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8012ed4:	ea4f 2920 	mov.w	r9, r0, asr #8
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f7ff ff0d 	bl	8012cf8 <lv_obj_get_style_pad_left>
        lv_obj_get_coords(obj, &col_a);
 8012ede:	4669      	mov	r1, sp
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 8012ee0:	fb97 f5f5 	sdiv	r5, r7, r5
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 8012ee4:	fb14 f405 	smulbb	r4, r4, r5
 8012ee8:	b2af      	uxth	r7, r5
 8012eea:	b2a5      	uxth	r5, r4
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012eec:	4604      	mov	r4, r0
        lv_obj_get_coords(obj, &col_a);
 8012eee:	4630      	mov	r0, r6
        x_act += obj->coords.x1 + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8012ef0:	4454      	add	r4, sl
        lv_obj_get_coords(obj, &col_a);
 8012ef2:	f7f2 f81c 	bl	8004f2e <lv_obj_get_coords>
        col_a.x1 = x_act - scroll_left;
 8012ef6:	eba4 0408 	sub.w	r4, r4, r8
 8012efa:	442c      	add	r4, r5
        col_a.x2 = col_a.x1 + block_w;
 8012efc:	fa17 f784 	uxtah	r7, r7, r4
        col_a.x1 -= block_gap;
 8012f00:	eba4 0409 	sub.w	r4, r4, r9
        col_a.x2 = col_a.x1 + block_w;
 8012f04:	f8ad 7004 	strh.w	r7, [sp, #4]
        col_a.x1 -= block_gap;
 8012f08:	f8ad 4000 	strh.w	r4, [sp]
 8012f0c:	e7cb      	b.n	8012ea6 <invalidate_point+0xee>
        lv_obj_invalidate(obj);
 8012f0e:	4630      	mov	r0, r6
 8012f10:	f7f2 f9b2 	bl	8005278 <lv_obj_invalidate>
 8012f14:	e7cb      	b.n	8012eae <invalidate_point+0xf6>

08012f16 <lv_obj_get_style_border_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8012f16:	f241 0232 	movw	r2, #4146	; 0x1032
 8012f1a:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
 8012f1c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8012f1e:	f7f4 fad3 	bl	80074c8 <lv_obj_get_style_prop>
}
 8012f22:	b200      	sxth	r0, r0
 8012f24:	bd08      	pop	{r3, pc}

08012f26 <lv_chart_get_point_pos_by_id>:
{
 8012f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2a:	4688      	mov	r8, r1
 8012f2c:	b085      	sub	sp, #20
 8012f2e:	4691      	mov	r9, r2
 8012f30:	461d      	mov	r5, r3
    LV_ASSERT_NULL(obj);
 8012f32:	4604      	mov	r4, r0
 8012f34:	b900      	cbnz	r0, 8012f38 <lv_chart_get_point_pos_by_id+0x12>
 8012f36:	e7fe      	b.n	8012f36 <lv_chart_get_point_pos_by_id+0x10>
    LV_ASSERT_NULL(ser);
 8012f38:	b901      	cbnz	r1, 8012f3c <lv_chart_get_point_pos_by_id+0x16>
 8012f3a:	e7fe      	b.n	8012f3a <lv_chart_get_point_pos_by_id+0x14>
    if(id >= chart->point_cnt) {
 8012f3c:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 8012f40:	4293      	cmp	r3, r2
 8012f42:	d805      	bhi.n	8012f50 <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 8012f44:	2300      	movs	r3, #0
 8012f46:	802b      	strh	r3, [r5, #0]
        p_out->y = 0;
 8012f48:	806b      	strh	r3, [r5, #2]
}
 8012f4a:	b005      	add	sp, #20
 8012f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012f50:	f7f2 f849 	bl	8004fe6 <lv_obj_get_content_width>
 8012f54:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8012f58:	4358      	muls	r0, r3
 8012f5a:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012f5e:	4620      	mov	r0, r4
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8012f60:	9303      	str	r3, [sp, #12]
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012f62:	f7f2 f85a 	bl	800501a <lv_obj_get_content_height>
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012f66:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012f6a:	f8b4 7086 	ldrh.w	r7, [r4, #134]	; 0x86
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012f6e:	f002 0207 	and.w	r2, r2, #7
 8012f72:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012f74:	4378      	muls	r0, r7
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012f76:	2a01      	cmp	r2, #1
    lv_coord_t h = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8012f78:	ea4f 2720 	mov.w	r7, r0, asr #8
    if(chart->type == LV_CHART_TYPE_LINE) {
 8012f7c:	d108      	bne.n	8012f90 <lv_chart_get_point_pos_by_id+0x6a>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 8012f7e:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 8012f82:	fb09 f303 	mul.w	r3, r9, r3
 8012f86:	3a01      	subs	r2, #1
 8012f88:	fb93 f3f2 	sdiv	r3, r3, r2
        p_out->x += (col_w - ser_gap) / 2;
 8012f8c:	802b      	strh	r3, [r5, #0]
 8012f8e:	e014      	b.n	8012fba <lv_chart_get_point_pos_by_id+0x94>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 8012f90:	2a03      	cmp	r2, #3
 8012f92:	d144      	bne.n	801301e <lv_chart_get_point_pos_by_id+0xf8>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 8012f94:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012f98:	f8d8 2000 	ldr.w	r2, [r8]
 8012f9c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8012fa0:	f932 0019 	ldrsh.w	r0, [r2, r9, lsl #1]
 8012fa4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012fa8:	9300      	str	r3, [sp, #0]
 8012faa:	2300      	movs	r3, #0
 8012fac:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 8012fb0:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 8012fb4:	f004 fc7f 	bl	80178b6 <lv_map>
 8012fb8:	8028      	strh	r0, [r5, #0]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f7ff ffab 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
 8012fc0:	4606      	mov	r6, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	f7ff fe97 	bl	8012cf8 <lv_obj_get_style_pad_left>
 8012fca:	882b      	ldrh	r3, [r5, #0]
 8012fcc:	4430      	add	r0, r6
 8012fce:	4418      	add	r0, r3
 8012fd0:	8028      	strh	r0, [r5, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012fd2:	4620      	mov	r0, r4
 8012fd4:	f7f3 f8a4 	bl	8006120 <lv_obj_get_scroll_left>
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012fd8:	f898 200c 	ldrb.w	r2, [r8, #12]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012fdc:	882b      	ldrh	r3, [r5, #0]
 8012fde:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8012fe2:	1a18      	subs	r0, r3, r0
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012fe8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    p_out->x -= lv_obj_get_scroll_left(obj);
 8012fec:	8028      	strh	r0, [r5, #0]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8012fee:	4620      	mov	r0, r4
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012ff0:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 8012ff4:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012ff8:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8012ffc:	1a5b      	subs	r3, r3, r1
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8012ffe:	1a52      	subs	r2, r2, r1
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013000:	2100      	movs	r1, #0
    p_out->y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 8013002:	fb13 f307 	smulbb	r3, r3, r7
    p_out->y = p_out->y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013006:	b21b      	sxth	r3, r3
 8013008:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - p_out->y;
 801300c:	1aff      	subs	r7, r7, r3
 801300e:	806f      	strh	r7, [r5, #2]
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013010:	f7ff fe87 	bl	8012d22 <lv_obj_get_style_pad_top>
 8013014:	4430      	add	r0, r6
 8013016:	886e      	ldrh	r6, [r5, #2]
 8013018:	4406      	add	r6, r0
 801301a:	806e      	strh	r6, [r5, #2]
 801301c:	e795      	b.n	8012f4a <lv_chart_get_point_pos_by_id+0x24>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 801301e:	2a02      	cmp	r2, #2
 8013020:	d1cb      	bne.n	8012fba <lv_chart_get_point_pos_by_id+0x94>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013022:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8013026:	9303      	str	r3, [sp, #12]
 8013028:	4650      	mov	r0, sl
 801302a:	f004 fb7d 	bl	8017728 <_lv_ll_get_len>
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 801302e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8013032:	4606      	mov	r6, r0
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013034:	4620      	mov	r0, r4
 8013036:	f7ff fe6d 	bl	8012d14 <lv_obj_get_style_pad_column>
 801303a:	f8b4 b084 	ldrh.w	fp, [r4, #132]	; 0x84
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801303e:	2100      	movs	r1, #0
        int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8013040:	fb00 f00b 	mul.w	r0, r0, fp
 8013044:	ea4f 2b20 	mov.w	fp, r0, asr #8
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013048:	4620      	mov	r0, r4
 801304a:	f7ff fe63 	bl	8012d14 <lv_obj_get_style_pad_column>
 801304e:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013052:	f8b4 c082 	ldrh.w	ip, [r4, #130]	; 0x82
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8013056:	4341      	muls	r1, r0
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013058:	9b03      	ldr	r3, [sp, #12]
 801305a:	f10c 30ff 	add.w	r0, ip, #4294967295
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801305e:	1209      	asrs	r1, r1, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8013060:	fb00 3111 	mls	r1, r0, r1, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8013064:	4650      	mov	r0, sl
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8013066:	fb03 f309 	mul.w	r3, r3, r9
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801306a:	fb91 f1fc 	sdiv	r1, r1, ip
        lv_coord_t col_w = block_w / ser_cnt;
 801306e:	b209      	sxth	r1, r1
 8013070:	fbb1 f6f6 	udiv	r6, r1, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 8013074:	fb93 fcfc 	sdiv	ip, r3, ip
        lv_coord_t col_w = block_w / ser_cnt;
 8013078:	b232      	sxth	r2, r6
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 801307a:	f8a5 c000 	strh.w	ip, [r5]
        lv_coord_t col_w = block_w / ser_cnt;
 801307e:	9203      	str	r2, [sp, #12]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8013080:	f004 fb48 	bl	8017714 <_lv_ll_get_tail>
 8013084:	882b      	ldrh	r3, [r5, #0]
 8013086:	b938      	cbnz	r0, 8013098 <lv_chart_get_point_pos_by_id+0x172>
        p_out->x += (col_w - ser_gap) / 2;
 8013088:	9a03      	ldr	r2, [sp, #12]
 801308a:	eba2 0a0b 	sub.w	sl, r2, fp
 801308e:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8013092:	eb03 036a 	add.w	r3, r3, sl, asr #1
 8013096:	e779      	b.n	8012f8c <lv_chart_get_point_pos_by_id+0x66>
            if(ser_i == ser) break;
 8013098:	4580      	cmp	r8, r0
 801309a:	d0f5      	beq.n	8013088 <lv_chart_get_point_pos_by_id+0x162>
            p_out->x += col_w;
 801309c:	4433      	add	r3, r6
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 801309e:	4601      	mov	r1, r0
 80130a0:	4650      	mov	r0, sl
            p_out->x += col_w;
 80130a2:	802b      	strh	r3, [r5, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 80130a4:	f004 fb3d 	bl	8017722 <_lv_ll_get_prev>
 80130a8:	e7ec      	b.n	8013084 <lv_chart_get_point_pos_by_id+0x15e>

080130aa <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t*) obj;
    switch(axis) {
 80130aa:	2904      	cmp	r1, #4
 80130ac:	d80c      	bhi.n	80130c8 <get_tick_gsc+0x1e>
 80130ae:	e8df f001 	tbb	[pc, r1]
 80130b2:	0703      	.short	0x0703
 80130b4:	0b05      	.short	0x0b05
 80130b6:	09          	.byte	0x09
 80130b7:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y: return &chart->tick[0];
 80130b8:	303c      	adds	r0, #60	; 0x3c
 80130ba:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X: return &chart->tick[1];
 80130bc:	3048      	adds	r0, #72	; 0x48
 80130be:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y: return &chart->tick[2];
 80130c0:	3054      	adds	r0, #84	; 0x54
 80130c2:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X: return &chart->tick[3];
 80130c4:	3060      	adds	r0, #96	; 0x60
 80130c6:	4770      	bx	lr
{
 80130c8:	2000      	movs	r0, #0
        default: return NULL;
    }
}
 80130ca:	4770      	bx	lr

080130cc <draw_y_ticks>:
{
 80130cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130d0:	4689      	mov	r9, r1
 80130d2:	b0ad      	sub	sp, #180	; 0xb4
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 80130d4:	4611      	mov	r1, r2
{
 80130d6:	4604      	mov	r4, r0
 80130d8:	4616      	mov	r6, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 80130da:	f7ff ffe6 	bl	80130aa <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 80130de:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 80130e0:	4605      	mov	r5, r0
    if(t->major_cnt <= 1) return;
 80130e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80130e6:	2b01      	cmp	r3, #1
 80130e8:	f240 8121 	bls.w	801332e <draw_y_ticks+0x262>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 80130ec:	f990 3009 	ldrsb.w	r3, [r0, #9]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	db03      	blt.n	80130fc <draw_y_ticks+0x30>
 80130f4:	6803      	ldr	r3, [r0, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f000 8119 	beq.w	801332e <draw_y_ticks+0x262>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 80130fc:	4620      	mov	r0, r4
 80130fe:	f7ff ff0a 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013102:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013104:	4680      	mov	r8, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8013106:	4620      	mov	r0, r4
 8013108:	f7ff fe0b 	bl	8012d22 <lv_obj_get_style_pad_top>
 801310c:	4607      	mov	r7, r0
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801310e:	4620      	mov	r0, r4
 8013110:	f7f1 ff83 	bl	800501a <lv_obj_get_content_height>
 8013114:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 8013118:	4358      	muls	r0, r3
 801311a:	f340 230f 	sbfx	r3, r0, #8, #16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801311e:	eb07 0008 	add.w	r0, r7, r8
 8013122:	8ae7      	ldrh	r7, [r4, #22]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013124:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8013126:	4407      	add	r7, r0
 8013128:	4620      	mov	r0, r4
 801312a:	f7f2 ffa3 	bl	8006074 <lv_obj_get_scroll_top>
 801312e:	b2bf      	uxth	r7, r7
 8013130:	1a38      	subs	r0, r7, r0
 8013132:	b283      	uxth	r3, r0
 8013134:	9305      	str	r3, [sp, #20]
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 8013136:	2e00      	cmp	r6, #0
 8013138:	f040 80fc 	bne.w	8013334 <draw_y_ticks+0x268>
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 801313c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8013140:	4620      	mov	r0, r4
 8013142:	f7ff fdd9 	bl	8012cf8 <lv_obj_get_style_pad_left>
        x_ofs = obj->coords.x1;
 8013146:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
        label_gap = lv_obj_get_style_pad_left(obj, LV_PART_TICKS);
 801314a:	9004      	str	r0, [sp, #16]
    if(axis == LV_CHART_AXIS_SECONDARY_Y) {
 801314c:	2e01      	cmp	r6, #1
    lv_coord_t major_len = t->major_len;
 801314e:	f9b5 8000 	ldrsh.w	r8, [r5]
    lv_coord_t minor_len = t->minor_len;
 8013152:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
    lv_draw_line_dsc_init(&line_dsc);
 8013156:	af0f      	add	r7, sp, #60	; 0x3c
        major_len *= -1;
 8013158:	bf08      	it	eq
 801315a:	f1c8 0800 	rsbeq	r8, r8, #0
        else p1.x++;
 801315e:	fa1f fb8b 	uxth.w	fp, fp
        minor_len *= -1;
 8013162:	bf08      	it	eq
 8013164:	f1ca 0a00 	rsbeq	sl, sl, #0
    lv_draw_line_dsc_init(&line_dsc);
 8013168:	4638      	mov	r0, r7
        major_len *= -1;
 801316a:	bf04      	itt	eq
 801316c:	fa0f f888 	sxtheq.w	r8, r8
        minor_len *= -1;
 8013170:	fa0f fa8a 	sxtheq.w	sl, sl
    lv_draw_line_dsc_init(&line_dsc);
 8013174:	f7f7 fefe 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8013178:	463a      	mov	r2, r7
 801317a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801317e:	4620      	mov	r0, r4
 8013180:	f7f1 fc82 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 8013184:	aa12      	add	r2, sp, #72	; 0x48
 8013186:	4610      	mov	r0, r2
 8013188:	f7f7 fa7a 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801318c:	aa12      	add	r2, sp, #72	; 0x48
 801318e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8013192:	4620      	mov	r0, r4
 8013194:	f7f1 fbd0 	bl	8004938 <lv_obj_init_draw_label_dsc>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8013198:	4649      	mov	r1, r9
 801319a:	a81a      	add	r0, sp, #104	; 0x68
 801319c:	f7f1 fd74 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.line_dsc = &line_dsc;
 80131a0:	971e      	str	r7, [sp, #120]	; 0x78
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 80131a2:	892f      	ldrh	r7, [r5, #8]
    dsc.part = LV_PART_TICKS;
 80131a4:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
    dsc.label_dsc = &label_dsc;
 80131a8:	aa12      	add	r2, sp, #72	; 0x48
    dsc.id = axis;
 80131aa:	9628      	str	r6, [sp, #160]	; 0xa0
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 80131ac:	f3c7 070e 	ubfx	r7, r7, #0, #15
    dsc.part = LV_PART_TICKS;
 80131b0:	9327      	str	r3, [sp, #156]	; 0x9c
    dsc.label_dsc = &label_dsc;
 80131b2:	921d      	str	r2, [sp, #116]	; 0x74
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 80131b4:	1e7b      	subs	r3, r7, #1
 80131b6:	88ef      	ldrh	r7, [r5, #6]
 80131b8:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80131bc:	435f      	muls	r7, r3
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 80131be:	f10b 33ff 	add.w	r3, fp, #4294967295
        else p1.x++;
 80131c2:	f10b 0b01 	add.w	fp, fp, #1
 80131c6:	2e00      	cmp	r6, #0
 80131c8:	bf08      	it	eq
 80131ca:	469b      	moveq	fp, r3
 80131cc:	fa0f f38b 	sxth.w	r3, fp
        else p2.x = p1.x - minor_len; /*minor tick*/
 80131d0:	fa1f fb8b 	uxth.w	fp, fp
 80131d4:	9308      	str	r3, [sp, #32]
 80131d6:	ebab 0a0a 	sub.w	sl, fp, sl
        if(major) p2.x = p1.x - major_len; /*major tick*/
 80131da:	ebab 0808 	sub.w	r8, fp, r8
        else p2.x = p1.x - minor_len; /*minor tick*/
 80131de:	fa0f f38a 	sxth.w	r3, sl
 80131e2:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
 80131e6:	9307      	str	r3, [sp, #28]
        if(major) p2.x = p1.x - major_len; /*major tick*/
 80131e8:	fa0f f388 	sxth.w	r3, r8
    for(i = 0; i <= total_tick_num; i++) {
 80131ec:	f04f 0800 	mov.w	r8, #0
        if(major) p2.x = p1.x - major_len; /*major tick*/
 80131f0:	9306      	str	r3, [sp, #24]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 80131f2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
 80131f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131f8:	9905      	ldr	r1, [sp, #20]
 80131fa:	1a9b      	subs	r3, r3, r2
 80131fc:	fb08 f303 	mul.w	r3, r8, r3
 8013200:	fbb3 f3f7 	udiv	r3, r3, r7
 8013204:	440b      	add	r3, r1
 8013206:	9908      	ldr	r1, [sp, #32]
 8013208:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 801320c:	b21b      	sxth	r3, r3
        if(i % t->minor_cnt == 0) major = true;
 801320e:	88e9      	ldrh	r1, [r5, #6]
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8013210:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        if(i % t->minor_cnt == 0) major = true;
 8013214:	f3c1 010e 	ubfx	r1, r1, #0, #15
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8013218:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(i % t->minor_cnt == 0) major = true;
 801321c:	fbb8 f0f1 	udiv	r0, r8, r1
 8013220:	fb01 8110 	mls	r1, r1, r0, r8
 8013224:	2900      	cmp	r1, #0
 8013226:	f040 8091 	bne.w	801334c <draw_y_ticks+0x280>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 801322a:	9906      	ldr	r1, [sp, #24]
        if(i % t->minor_cnt == 0) major = true;
 801322c:	f04f 0b01 	mov.w	fp, #1
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 8013230:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8013234:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8013238:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801323c:	1051      	asrs	r1, r2, #1
 801323e:	eb03 0262 	add.w	r2, r3, r2, asr #1
 8013242:	4282      	cmp	r2, r0
 8013244:	db0a      	blt.n	801325c <draw_y_ticks+0x190>
           p2.y - line_dsc.width / 2  <= obj->coords.y2)
 8013246:	1a5b      	subs	r3, r3, r1
 8013248:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 801324c:	4293      	cmp	r3, r2
 801324e:	dc05      	bgt.n	801325c <draw_y_ticks+0x190>
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 8013250:	ab0f      	add	r3, sp, #60	; 0x3c
 8013252:	464a      	mov	r2, r9
 8013254:	a90b      	add	r1, sp, #44	; 0x2c
 8013256:	a80a      	add	r0, sp, #40	; 0x28
 8013258:	f7f7 fe98 	bl	800af8c <lv_draw_line>
        if(major  && t->label_en)  {
 801325c:	f1bb 0f00 	cmp.w	fp, #0
 8013260:	d060      	beq.n	8013324 <draw_y_ticks+0x258>
 8013262:	f995 3009 	ldrsb.w	r3, [r5, #9]
 8013266:	2b00      	cmp	r3, #0
 8013268:	da5c      	bge.n	8013324 <draw_y_ticks+0x258>
            int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 801326a:	f9ba 3070 	ldrsh.w	r3, [sl, #112]	; 0x70
 801326e:	463a      	mov	r2, r7
 8013270:	2100      	movs	r1, #0
 8013272:	eba7 0008 	sub.w	r0, r7, r8
 8013276:	9300      	str	r3, [sp, #0]
 8013278:	f9ba 306c 	ldrsh.w	r3, [sl, #108]	; 0x6c
 801327c:	f004 fb1b 	bl	80178b6 <lv_map>
            lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8013280:	4a38      	ldr	r2, [pc, #224]	; (8013364 <draw_y_ticks+0x298>)
 8013282:	4603      	mov	r3, r0
            int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 8013284:	4683      	mov	fp, r0
            lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8013286:	2110      	movs	r1, #16
 8013288:	a823      	add	r0, sp, #140	; 0x8c
 801328a:	f005 f94d 	bl	8018528 <lv_snprintf>
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801328e:	aa1a      	add	r2, sp, #104	; 0x68
 8013290:	211a      	movs	r1, #26
 8013292:	4620      	mov	r0, r4
            dsc.value = tick_value;
 8013294:	f8cd b0a8 	str.w	fp, [sp, #168]	; 0xa8
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013298:	f7ee fec6 	bl	8002028 <lv_event_send>
            lv_txt_get_size(&size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801329c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80132a0:	2200      	movs	r2, #0
 80132a2:	a923      	add	r1, sp, #140	; 0x8c
 80132a4:	a80c      	add	r0, sp, #48	; 0x30
 80132a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80132aa:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80132ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80132b6:	f006 fa3e 	bl	8019736 <lv_txt_get_size>
            a.y1 = p2.y - size.y / 2;
 80132ba:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80132be:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80132c2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80132c6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80132ca:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
 80132ce:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80132d2:	1ad1      	subs	r1, r2, r3
            a.y2 = p2.y + size.y / 2;
 80132d4:	4413      	add	r3, r2
 80132d6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
            a.y1 = p2.y - size.y / 2;
 80132da:	b209      	sxth	r1, r1
            a.y2 = p2.y + size.y / 2;
 80132dc:	b21b      	sxth	r3, r3
            a.y1 = p2.y - size.y / 2;
 80132de:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
            a.y2 = p2.y + size.y / 2;
 80132e2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            if(!sec_axis) {
 80132e6:	bbae      	cbnz	r6, 8013354 <draw_y_ticks+0x288>
                a.x1 = p2.x - size.x - label_gap;
 80132e8:	eba2 0c0c 	sub.w	ip, r2, ip
                a.x2 = p2.x - label_gap;
 80132ec:	1a12      	subs	r2, r2, r0
                a.x1 = p2.x - size.x - label_gap;
 80132ee:	ebac 0c00 	sub.w	ip, ip, r0
 80132f2:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
                a.x2 = p2.x + size.x + label_gap;
 80132f6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            if(a.y2 >= obj->coords.y1 &&
 80132fa:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80132fe:	429a      	cmp	r2, r3
 8013300:	dc0b      	bgt.n	801331a <draw_y_ticks+0x24e>
 8013302:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8013306:	428b      	cmp	r3, r1
 8013308:	db07      	blt.n	801331a <draw_y_ticks+0x24e>
                lv_draw_label(&a, clip_area, &label_dsc, dsc.text, NULL);
 801330a:	2300      	movs	r3, #0
 801330c:	aa12      	add	r2, sp, #72	; 0x48
 801330e:	4649      	mov	r1, r9
 8013310:	a80d      	add	r0, sp, #52	; 0x34
 8013312:	9300      	str	r3, [sp, #0]
 8013314:	ab23      	add	r3, sp, #140	; 0x8c
 8013316:	f7f7 fb8b 	bl	800aa30 <lv_draw_label>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801331a:	aa1a      	add	r2, sp, #104	; 0x68
 801331c:	211b      	movs	r1, #27
 801331e:	4620      	mov	r0, r4
 8013320:	f7ee fe82 	bl	8002028 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 8013324:	f108 0801 	add.w	r8, r8, #1
 8013328:	4547      	cmp	r7, r8
 801332a:	f4bf af62 	bcs.w	80131f2 <draw_y_ticks+0x126>
}
 801332e:	b02d      	add	sp, #180	; 0xb4
 8013330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013334:	f241 0213 	movw	r2, #4115	; 0x1013
 8013338:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801333c:	4620      	mov	r0, r4
 801333e:	f7f4 f8c3 	bl	80074c8 <lv_obj_get_style_prop>
        x_ofs = obj->coords.x2;
 8013342:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
    return (lv_coord_t)v.num;
 8013346:	b203      	sxth	r3, r0
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	e6ff      	b.n	801314c <draw_y_ticks+0x80>
        else p2.x = p1.x - minor_len; /*minor tick*/
 801334c:	9907      	ldr	r1, [sp, #28]
        bool major = false;
 801334e:	f04f 0b00 	mov.w	fp, #0
 8013352:	e76d      	b.n	8013230 <draw_y_ticks+0x164>
                a.x1 = p2.x + label_gap;
 8013354:	eb02 0e00 	add.w	lr, r2, r0
                a.x2 = p2.x + size.x + label_gap;
 8013358:	4462      	add	r2, ip
                a.x1 = p2.x + label_gap;
 801335a:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
                a.x2 = p2.x + size.x + label_gap;
 801335e:	4402      	add	r2, r0
 8013360:	e7c9      	b.n	80132f6 <draw_y_ticks+0x22a>
 8013362:	bf00      	nop
 8013364:	08025a60 	.word	0x08025a60

08013368 <draw_x_ticks>:
{
 8013368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801336c:	b0ad      	sub	sp, #180	; 0xb4
 801336e:	468a      	mov	sl, r1
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8013370:	4611      	mov	r1, r2
{
 8013372:	4604      	mov	r4, r0
 8013374:	9205      	str	r2, [sp, #20]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8013376:	f7ff fe98 	bl	80130aa <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 801337a:	8903      	ldrh	r3, [r0, #8]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 801337c:	4681      	mov	r9, r0
    if(t->major_cnt <= 1) return;
 801337e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013382:	2b01      	cmp	r3, #1
 8013384:	d93b      	bls.n	80133fe <draw_x_ticks+0x96>
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8013386:	f990 3009 	ldrsb.w	r3, [r0, #9]
 801338a:	2b00      	cmp	r3, #0
 801338c:	db01      	blt.n	8013392 <draw_x_ticks+0x2a>
 801338e:	6803      	ldr	r3, [r0, #0]
 8013390:	b3ab      	cbz	r3, 80133fe <draw_x_ticks+0x96>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013392:	2100      	movs	r1, #0
 8013394:	4620      	mov	r0, r4
 8013396:	f7ff fcaf 	bl	8012cf8 <lv_obj_get_style_pad_left>
    lv_draw_label_dsc_init(&label_dsc);
 801339a:	af12      	add	r7, sp, #72	; 0x48
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801339c:	4605      	mov	r5, r0
 801339e:	4620      	mov	r0, r4
 80133a0:	f7ff fdb9 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
 80133a4:	9007      	str	r0, [sp, #28]
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80133a6:	4620      	mov	r0, r4
 80133a8:	f7f1 fe1d 	bl	8004fe6 <lv_obj_get_content_width>
 80133ac:	9006      	str	r0, [sp, #24]
    lv_draw_label_dsc_init(&label_dsc);
 80133ae:	4638      	mov	r0, r7
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80133b0:	f8b4 6084 	ldrh.w	r6, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 80133b4:	f7f7 f964 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 80133b8:	463a      	mov	r2, r7
 80133ba:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80133be:	4620      	mov	r0, r4
 80133c0:	f7f1 faba 	bl	8004938 <lv_obj_init_draw_label_dsc>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80133c4:	4620      	mov	r0, r4
 80133c6:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 80133ca:	f7f2 fea9 	bl	8006120 <lv_obj_get_scroll_left>
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 80133ce:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80133d0:	4680      	mov	r8, r0
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 80133d2:	2b02      	cmp	r3, #2
 80133d4:	f999 3009 	ldrsb.w	r3, [r9, #9]
 80133d8:	d116      	bne.n	8013408 <draw_x_ticks+0xa0>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 80133da:	2b00      	cmp	r3, #0
 80133dc:	da12      	bge.n	8013404 <draw_x_ticks+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80133de:	f241 0211 	movw	r2, #4113	; 0x1011
 80133e2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80133e6:	4620      	mov	r0, r4
 80133e8:	f7f4 f86e 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80133ec:	b203      	sxth	r3, r0
        if(y_ofs > clip_area->y2) return;
 80133ee:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 80133f2:	9304      	str	r3, [sp, #16]
        y_ofs = obj->coords.y2;
 80133f4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        if(y_ofs > clip_area->y2) return;
 80133f8:	429a      	cmp	r2, r3
 80133fa:	f280 80fd 	bge.w	80135f8 <draw_x_ticks+0x290>
}
 80133fe:	b02d      	add	sp, #180	; 0xb4
 8013400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 8013404:	2300      	movs	r3, #0
 8013406:	e7f2      	b.n	80133ee <draw_x_ticks+0x86>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 8013408:	2b00      	cmp	r3, #0
 801340a:	f280 80f2 	bge.w	80135f2 <draw_x_ticks+0x28a>
 801340e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8013412:	4620      	mov	r0, r4
 8013414:	f7ff fc85 	bl	8012d22 <lv_obj_get_style_pad_top>
 8013418:	9004      	str	r0, [sp, #16]
        y_ofs = obj->coords.y1;
 801341a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 801341e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013420:	9b06      	ldr	r3, [sp, #24]
 8013422:	435e      	muls	r6, r3
 8013424:	1233      	asrs	r3, r6, #8
 8013426:	9308      	str	r3, [sp, #32]
 8013428:	f346 230f 	sbfx	r3, r6, #8, #16
    line_dsc.dash_width = 0;
 801342c:	2600      	movs	r6, #0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801342e:	9306      	str	r3, [sp, #24]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013430:	9b07      	ldr	r3, [sp, #28]
 8013432:	441d      	add	r5, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013434:	44ab      	add	fp, r5
    lv_draw_line_dsc_init(&line_dsc);
 8013436:	ad0f      	add	r5, sp, #60	; 0x3c
 8013438:	4628      	mov	r0, r5
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801343a:	ebab 0808 	sub.w	r8, fp, r8
    lv_draw_line_dsc_init(&line_dsc);
 801343e:	f7f7 fd99 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8013442:	462a      	mov	r2, r5
 8013444:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8013448:	4620      	mov	r0, r4
 801344a:	f7f1 fb1d 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801344e:	4651      	mov	r1, sl
 8013450:	a81a      	add	r0, sp, #104	; 0x68
    line_dsc.dash_width = 0;
 8013452:	9610      	str	r6, [sp, #64]	; 0x40
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8013454:	f7f1 fc18 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_TICKS;
 8013458:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 801345c:	2102      	movs	r1, #2
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 801345e:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013460:	fa1f f888 	uxth.w	r8, r8
    dsc.part = LV_PART_TICKS;
 8013464:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
    if(chart->type == LV_CHART_TYPE_BAR) {
 8013468:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    dsc.line_dsc = &line_dsc;
 801346c:	e9cd 751d 	strd	r7, r5, [sp, #116]	; 0x74
    if(chart->type == LV_CHART_TYPE_BAR) {
 8013470:	f002 0207 	and.w	r2, r2, #7
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8013474:	1e9f      	subs	r7, r3, #2
    if(chart->type == LV_CHART_TYPE_BAR) {
 8013476:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8013478:	bf18      	it	ne
 801347a:	2701      	movne	r7, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 801347c:	2a02      	cmp	r2, #2
 801347e:	f000 80ca 	beq.w	8013616 <draw_x_ticks+0x2ae>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013482:	fa0f fb88 	sxth.w	fp, r8
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 8013486:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 801348a:	2500      	movs	r5, #0
    p1.y = y_ofs;
 801348c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 8013490:	eb04 0847 	add.w	r8, r4, r7, lsl #1
 8013494:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8013498:	1e73      	subs	r3, r6, #1
 801349a:	f8b9 6006 	ldrh.w	r6, [r9, #6]
 801349e:	f3c6 060e 	ubfx	r6, r6, #0, #15
 80134a2:	435e      	muls	r6, r3
        if(i % t->minor_cnt == 0) major = true;
 80134a4:	f8b9 7006 	ldrh.w	r7, [r9, #6]
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 80134a8:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
        if(i % t->minor_cnt == 0) major = true;
 80134ac:	f3c7 030e 	ubfx	r3, r7, #0, #15
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 80134b0:	9905      	ldr	r1, [sp, #20]
 80134b2:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 80134b6:	2902      	cmp	r1, #2
        if(i % t->minor_cnt == 0) major = true;
 80134b8:	fbb5 f7f3 	udiv	r7, r5, r3
 80134bc:	fb03 5717 	mls	r7, r3, r7, r5
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 80134c0:	9b06      	ldr	r3, [sp, #24]
 80134c2:	eba3 0302 	sub.w	r3, r3, r2
 80134c6:	fb05 f303 	mul.w	r3, r5, r3
 80134ca:	fbb3 f3f6 	udiv	r3, r3, r6
 80134ce:	445b      	add	r3, fp
 80134d0:	b21b      	sxth	r3, r3
 80134d2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80134d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 80134da:	f000 80c0 	beq.w	801365e <draw_x_ticks+0x2f6>
 80134de:	2f00      	cmp	r7, #0
 80134e0:	f040 80ba 	bne.w	8013658 <draw_x_ticks+0x2f0>
 80134e4:	f8b9 1000 	ldrh.w	r1, [r9]
 80134e8:	1a41      	subs	r1, r0, r1
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 80134ea:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80134ee:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 80134f2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 80134f6:	1051      	asrs	r1, r2, #1
 80134f8:	eb03 0262 	add.w	r2, r3, r2, asr #1
 80134fc:	4282      	cmp	r2, r0
 80134fe:	db0a      	blt.n	8013516 <draw_x_ticks+0x1ae>
           p2.x - line_dsc.width / 2  <= obj->coords.x2)
 8013500:	1a5b      	subs	r3, r3, r1
 8013502:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 8013506:	4293      	cmp	r3, r2
 8013508:	dc05      	bgt.n	8013516 <draw_x_ticks+0x1ae>
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801350a:	ab0f      	add	r3, sp, #60	; 0x3c
 801350c:	4652      	mov	r2, sl
 801350e:	a90b      	add	r1, sp, #44	; 0x2c
 8013510:	a80a      	add	r0, sp, #40	; 0x28
 8013512:	f7f7 fd3b 	bl	800af8c <lv_draw_line>
        if(!major || !t->label_en) continue;
 8013516:	2f00      	cmp	r7, #0
 8013518:	d166      	bne.n	80135e8 <draw_x_ticks+0x280>
 801351a:	f999 3009 	ldrsb.w	r3, [r9, #9]
 801351e:	2b00      	cmp	r3, #0
 8013520:	da62      	bge.n	80135e8 <draw_x_ticks+0x280>
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 8013522:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8013526:	f003 0307 	and.w	r3, r3, #7
 801352a:	2b03      	cmp	r3, #3
 801352c:	f040 809f 	bne.w	801366e <draw_x_ticks+0x306>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 8013530:	f9b8 3078 	ldrsh.w	r3, [r8, #120]	; 0x78
 8013534:	4639      	mov	r1, r7
 8013536:	4632      	mov	r2, r6
 8013538:	4628      	mov	r0, r5
 801353a:	9300      	str	r3, [sp, #0]
 801353c:	f9b8 3074 	ldrsh.w	r3, [r8, #116]	; 0x74
 8013540:	f004 f9b9 	bl	80178b6 <lv_map>
 8013544:	4607      	mov	r7, r0
        lv_snprintf(dsc.text, sizeof(dsc.text), "%d", tick_value);
 8013546:	463b      	mov	r3, r7
 8013548:	4a51      	ldr	r2, [pc, #324]	; (8013690 <draw_x_ticks+0x328>)
 801354a:	2110      	movs	r1, #16
 801354c:	a823      	add	r0, sp, #140	; 0x8c
 801354e:	f004 ffeb 	bl	8018528 <lv_snprintf>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013552:	aa1a      	add	r2, sp, #104	; 0x68
 8013554:	211a      	movs	r1, #26
 8013556:	4620      	mov	r0, r4
        dsc.value = tick_value;
 8013558:	972a      	str	r7, [sp, #168]	; 0xa8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801355a:	f7ee fd65 	bl	8002028 <lv_event_send>
        lv_txt_get_size(&size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801355e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013562:	2200      	movs	r2, #0
 8013564:	a923      	add	r1, sp, #140	; 0x8c
 8013566:	a80c      	add	r0, sp, #48	; 0x30
 8013568:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801356c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013572:	9300      	str	r3, [sp, #0]
 8013574:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8013578:	f006 f8dd 	bl	8019736 <lv_txt_get_size>
        a.x1 = (p2.x - size.x / 2);
 801357c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013580:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8013584:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        if(sec_axis) {
 8013588:	9805      	ldr	r0, [sp, #20]
        a.x1 = (p2.x - size.x / 2);
 801358a:	f3c3 034f 	ubfx	r3, r3, #1, #16
        if(sec_axis) {
 801358e:	2802      	cmp	r0, #2
 8013590:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
        a.x1 = (p2.x - size.x / 2);
 8013594:	eba2 0103 	sub.w	r1, r2, r3
        a.x2 = (p2.x + size.x / 2);
 8013598:	441a      	add	r2, r3
 801359a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        a.x1 = (p2.x - size.x / 2);
 801359e:	b209      	sxth	r1, r1
        a.x2 = (p2.x + size.x / 2);
 80135a0:	b212      	sxth	r2, r2
        a.x1 = (p2.x - size.x / 2);
 80135a2:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
        a.x2 = (p2.x + size.x / 2);
 80135a6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        if(sec_axis) {
 80135aa:	d067      	beq.n	801367c <draw_x_ticks+0x314>
            a.y2 = p2.y - label_gap;
 80135ac:	1ac3      	subs	r3, r0, r3
            a.y1 = a.y2 - size.y;
 80135ae:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
            a.y2 = p2.y - label_gap;
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            a.y1 = a.y2 - size.y;
 80135b8:	1a1b      	subs	r3, r3, r0
 80135ba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(a.x2 >= obj->coords.x1 &&
 80135be:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80135c2:	4293      	cmp	r3, r2
 80135c4:	dc0b      	bgt.n	80135de <draw_x_ticks+0x276>
 80135c6:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 80135ca:	428b      	cmp	r3, r1
 80135cc:	db07      	blt.n	80135de <draw_x_ticks+0x276>
            lv_draw_label(&a, clip_area, &label_dsc, dsc.text, NULL);
 80135ce:	2300      	movs	r3, #0
 80135d0:	aa12      	add	r2, sp, #72	; 0x48
 80135d2:	4651      	mov	r1, sl
 80135d4:	a80d      	add	r0, sp, #52	; 0x34
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	ab23      	add	r3, sp, #140	; 0x8c
 80135da:	f7f7 fa29 	bl	800aa30 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80135de:	aa1a      	add	r2, sp, #104	; 0x68
 80135e0:	211b      	movs	r1, #27
 80135e2:	4620      	mov	r0, r4
 80135e4:	f7ee fd20 	bl	8002028 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 80135e8:	3501      	adds	r5, #1
 80135ea:	42ae      	cmp	r6, r5
 80135ec:	f4bf af5a 	bcs.w	80134a4 <draw_x_ticks+0x13c>
 80135f0:	e705      	b.n	80133fe <draw_x_ticks+0x96>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	9304      	str	r3, [sp, #16]
 80135f6:	e710      	b.n	801341a <draw_x_ticks+0xb2>
        if(y_ofs + label_gap  + label_dsc.font->line_height + t->major_len < clip_area->y1) return;
 80135f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80135fa:	9904      	ldr	r1, [sp, #16]
 80135fc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8013600:	1859      	adds	r1, r3, r1
 8013602:	440a      	add	r2, r1
 8013604:	f9b9 1000 	ldrsh.w	r1, [r9]
 8013608:	440a      	add	r2, r1
 801360a:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 801360e:	428a      	cmp	r2, r1
 8013610:	f6bf af05 	bge.w	801341e <draw_x_ticks+0xb6>
 8013614:	e6f3      	b.n	80133fe <draw_x_ticks+0x96>
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 8013616:	4631      	mov	r1, r6
 8013618:	4620      	mov	r0, r4
 801361a:	9307      	str	r3, [sp, #28]
 801361c:	f7ff fb7a 	bl	8012d14 <lv_obj_get_style_pad_column>
 8013620:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 8013624:	9b06      	ldr	r3, [sp, #24]
        int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 8013626:	4350      	muls	r0, r2
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 8013628:	f8b4 2082 	ldrh.w	r2, [r4, #130]	; 0x82
 801362c:	eb03 2620 	add.w	r6, r3, r0, asr #8
        w -= block_w - block_gap;
 8013630:	9b08      	ldr	r3, [sp, #32]
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 8013632:	fb96 f6f2 	sdiv	r6, r6, r2
        x_ofs += (block_w - block_gap) / 2;
 8013636:	fa0f fb86 	sxth.w	fp, r6
 801363a:	ebab 2b20 	sub.w	fp, fp, r0, asr #8
        w -= block_w - block_gap;
 801363e:	eb03 2020 	add.w	r0, r3, r0, asr #8
        x_ofs += (block_w - block_gap) / 2;
 8013642:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
        w -= block_w - block_gap;
 8013646:	1b86      	subs	r6, r0, r6
        x_ofs += (block_w - block_gap) / 2;
 8013648:	eb08 0b6b 	add.w	fp, r8, fp, asr #1
        w -= block_w - block_gap;
 801364c:	b233      	sxth	r3, r6
        x_ofs += (block_w - block_gap) / 2;
 801364e:	fa0f fb8b 	sxth.w	fp, fp
        w -= block_w - block_gap;
 8013652:	9306      	str	r3, [sp, #24]
 8013654:	9b07      	ldr	r3, [sp, #28]
 8013656:	e716      	b.n	8013486 <draw_x_ticks+0x11e>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 8013658:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 801365c:	e744      	b.n	80134e8 <draw_x_ticks+0x180>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 801365e:	b91f      	cbnz	r7, 8013668 <draw_x_ticks+0x300>
 8013660:	f8b9 1000 	ldrh.w	r1, [r9]
 8013664:	4401      	add	r1, r0
 8013666:	e740      	b.n	80134ea <draw_x_ticks+0x182>
 8013668:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 801366c:	e7fa      	b.n	8013664 <draw_x_ticks+0x2fc>
            tick_value = i / t->minor_cnt;
 801366e:	f8b9 7006 	ldrh.w	r7, [r9, #6]
 8013672:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8013676:	fbb5 f7f7 	udiv	r7, r5, r7
 801367a:	e764      	b.n	8013546 <draw_x_ticks+0x1de>
            a.y1 = p2.y + label_gap;
 801367c:	4403      	add	r3, r0
            a.y2 = a.y1 + size.y;
 801367e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
            a.y1 = p2.y + label_gap;
 8013682:	b29b      	uxth	r3, r3
 8013684:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            a.y2 = a.y1 + size.y;
 8013688:	4403      	add	r3, r0
 801368a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801368e:	e796      	b.n	80135be <draw_x_ticks+0x256>
 8013690:	08025a60 	.word	0x08025a60

08013694 <lv_chart_event>:
{
 8013694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8013698:	4856      	ldr	r0, [pc, #344]	; (80137f4 <lv_chart_event+0x160>)
{
 801369a:	460d      	mov	r5, r1
 801369c:	ed2d 8b04 	vpush	{d8-d9}
 80136a0:	b0cd      	sub	sp, #308	; 0x134
    res = lv_obj_event_base(MY_CLASS, e);
 80136a2:	f7ee fc4a 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80136a6:	2801      	cmp	r0, #1
 80136a8:	d147      	bne.n	801373a <lv_chart_event+0xa6>
    lv_event_code_t code = lv_event_get_code(e);
 80136aa:	4628      	mov	r0, r5
 80136ac:	f7ee fcde 	bl	800206c <lv_event_get_code>
 80136b0:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80136b2:	4628      	mov	r0, r5
 80136b4:	f7ee fcd8 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_PRESSED) {
 80136b8:	2c01      	cmp	r4, #1
    lv_obj_t * obj = lv_event_get_target(e);
 80136ba:	4680      	mov	r8, r0
    if(code == LV_EVENT_PRESSED) {
 80136bc:	d15b      	bne.n	8013776 <lv_chart_event+0xe2>
        lv_indev_t * indev = lv_indev_get_act();
 80136be:	f7ee ff49 	bl	8002554 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 80136c2:	a93a      	add	r1, sp, #232	; 0xe8
 80136c4:	f7ee ffa7 	bl	8002616 <lv_indev_get_point>
        p.x -= obj->coords.x1;
 80136c8:	f8b8 0014 	ldrh.w	r0, [r8, #20]
 80136cc:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
 80136d0:	1a24      	subs	r4, r4, r0
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 80136d2:	4640      	mov	r0, r8
        p.x -= obj->coords.x1;
 80136d4:	b2a4      	uxth	r4, r4
 80136d6:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 80136da:	f7f2 fd21 	bl	8006120 <lv_obj_get_scroll_left>
 80136de:	4420      	add	r0, r4
 80136e0:	b285      	uxth	r5, r0
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80136e2:	4640      	mov	r0, r8
 80136e4:	f7f1 fc7f 	bl	8004fe6 <lv_obj_get_content_width>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80136e8:	2100      	movs	r1, #0
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80136ea:	4606      	mov	r6, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80136ec:	4640      	mov	r0, r8
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80136ee:	f8b8 4084 	ldrh.w	r4, [r8, #132]	; 0x84
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80136f2:	f7ff fb01 	bl	8012cf8 <lv_obj_get_style_pad_left>
    x-= pad_left;
 80136f6:	1a2b      	subs	r3, r5, r0
 80136f8:	b21b      	sxth	r3, r3
    if(x < 0) return 0;
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	db39      	blt.n	8013772 <lv_chart_event+0xde>
    lv_coord_t w = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80136fe:	fb04 f006 	mul.w	r0, r4, r6
 8013702:	f340 210f 	sbfx	r1, r0, #8, #16
    if(x > w) return chart->point_cnt - 1;
 8013706:	4299      	cmp	r1, r3
 8013708:	da1c      	bge.n	8013744 <lv_chart_event+0xb0>
 801370a:	f8b8 1082 	ldrh.w	r1, [r8, #130]	; 0x82
 801370e:	3901      	subs	r1, #1
        if(id != chart->pressed_point_id) {
 8013710:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
 8013714:	428b      	cmp	r3, r1
 8013716:	d010      	beq.n	801373a <lv_chart_event+0xa6>
            invalidate_point(obj, id);
 8013718:	b28c      	uxth	r4, r1
 801371a:	4640      	mov	r0, r8
 801371c:	4621      	mov	r1, r4
 801371e:	f7ff fb4b 	bl	8012db8 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 8013722:	f8b8 107c 	ldrh.w	r1, [r8, #124]	; 0x7c
 8013726:	4640      	mov	r0, r8
 8013728:	f7ff fb46 	bl	8012db8 <invalidate_point>
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801372c:	2200      	movs	r2, #0
 801372e:	211c      	movs	r1, #28
 8013730:	4640      	mov	r0, r8
            chart->pressed_point_id = id;
 8013732:	f8a8 407c 	strh.w	r4, [r8, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8013736:	f7ee fc77 	bl	8002028 <lv_event_send>
}
 801373a:	b04d      	add	sp, #308	; 0x134
 801373c:	ecbd 8b04 	vpop	{d8-d9}
 8013740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 8013744:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
 8013748:	f002 0207 	and.w	r2, r2, #7
 801374c:	2a01      	cmp	r2, #1
 801374e:	d108      	bne.n	8013762 <lv_chart_event+0xce>
 8013750:	f8b8 0082 	ldrh.w	r0, [r8, #130]	; 0x82
 8013754:	104a      	asrs	r2, r1, #1
 8013756:	3801      	subs	r0, #1
 8013758:	fb03 2300 	mla	r3, r3, r0, r2
 801375c:	fb93 f1f1 	sdiv	r1, r3, r1
 8013760:	e7d6      	b.n	8013710 <lv_chart_event+0x7c>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 8013762:	2a02      	cmp	r2, #2
 8013764:	d105      	bne.n	8013772 <lv_chart_event+0xde>
 8013766:	f8b8 0082 	ldrh.w	r0, [r8, #130]	; 0x82
 801376a:	4343      	muls	r3, r0
 801376c:	fbb3 f1f1 	udiv	r1, r3, r1
 8013770:	e7ce      	b.n	8013710 <lv_chart_event+0x7c>
    if(x < 0) return 0;
 8013772:	2100      	movs	r1, #0
 8013774:	e7cc      	b.n	8013710 <lv_chart_event+0x7c>
    } else if(code == LV_EVENT_RELEASED) {
 8013776:	2c08      	cmp	r4, #8
 8013778:	d108      	bne.n	801378c <lv_chart_event+0xf8>
        invalidate_point(obj, chart->pressed_point_id);
 801377a:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 801377e:	f7ff fb1b 	bl	8012db8 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 8013782:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013786:	f8a8 307c 	strh.w	r3, [r8, #124]	; 0x7c
 801378a:	e7d6      	b.n	801373a <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_SIZE_CHANGED) {
 801378c:	2c23      	cmp	r4, #35	; 0x23
 801378e:	d102      	bne.n	8013796 <lv_chart_event+0x102>
        lv_obj_refresh_self_size(obj);
 8013790:	f7f1 fcad 	bl	80050ee <lv_obj_refresh_self_size>
 8013794:	e7d1      	b.n	801373a <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8013796:	2c13      	cmp	r4, #19
 8013798:	d114      	bne.n	80137c4 <lv_chart_event+0x130>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size, chart->tick[3].draw_size));
 801379a:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	; 0x64
 801379e:	f9b0 3058 	ldrsh.w	r3, [r0, #88]	; 0x58
 80137a2:	4299      	cmp	r1, r3
 80137a4:	bfb8      	it	lt
 80137a6:	4619      	movlt	r1, r3
 80137a8:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
 80137ac:	4299      	cmp	r1, r3
 80137ae:	bfb8      	it	lt
 80137b0:	4619      	movlt	r1, r3
 80137b2:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
 80137b6:	4628      	mov	r0, r5
 80137b8:	4299      	cmp	r1, r3
 80137ba:	bfb8      	it	lt
 80137bc:	4619      	movlt	r1, r3
 80137be:	f7ee fc95 	bl	80020ec <lv_event_set_ext_draw_size>
 80137c2:	e7ba      	b.n	801373a <lv_chart_event+0xa6>
    } else if(code == LV_EVENT_GET_SELF_SIZE) {
 80137c4:	2c26      	cmp	r4, #38	; 0x26
 80137c6:	d117      	bne.n	80137f8 <lv_chart_event+0x164>
        lv_point_t * p = lv_event_get_param(e);
 80137c8:	4628      	mov	r0, r5
 80137ca:	f7ee fc51 	bl	8002070 <lv_event_get_param>
 80137ce:	4604      	mov	r4, r0
        p->x = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80137d0:	4640      	mov	r0, r8
 80137d2:	f7f1 fc08 	bl	8004fe6 <lv_obj_get_content_width>
 80137d6:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 80137da:	4343      	muls	r3, r0
        p->y = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80137dc:	4640      	mov	r0, r8
        p->x = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80137de:	121b      	asrs	r3, r3, #8
 80137e0:	8023      	strh	r3, [r4, #0]
        p->y = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80137e2:	f7f1 fc1a 	bl	800501a <lv_obj_get_content_height>
 80137e6:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
 80137ea:	4343      	muls	r3, r0
 80137ec:	121b      	asrs	r3, r3, #8
 80137ee:	8063      	strh	r3, [r4, #2]
 80137f0:	e7a3      	b.n	801373a <lv_chart_event+0xa6>
 80137f2:	bf00      	nop
 80137f4:	08025ab0 	.word	0x08025ab0
    } else if(code == LV_EVENT_DRAW_MAIN) {
 80137f8:	2c15      	cmp	r4, #21
 80137fa:	d19e      	bne.n	801373a <lv_chart_event+0xa6>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80137fc:	4628      	mov	r0, r5
 80137fe:	f7ee fc37 	bl	8002070 <lv_event_get_param>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8013802:	f108 0314 	add.w	r3, r8, #20
        const lv_area_t * clip_area = lv_event_get_param(e);
 8013806:	ee08 0a10 	vmov	s16, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801380a:	4602      	mov	r2, r0
 801380c:	4619      	mov	r1, r3
 801380e:	a820      	add	r0, sp, #128	; 0x80
 8013810:	ee08 3a90 	vmov	s17, r3
 8013814:	f003 fc2f 	bl	8017076 <_lv_area_intersect>
    if(mask_ret == false) return;
 8013818:	2800      	cmp	r0, #0
 801381a:	f040 81be 	bne.w	8013b9a <lv_chart_event+0x506>
    draw_y_ticks(obj, mask, LV_CHART_AXIS_PRIMARY_Y);
 801381e:	2200      	movs	r2, #0
 8013820:	ee18 1a10 	vmov	r1, s16
 8013824:	4640      	mov	r0, r8
 8013826:	f7ff fc51 	bl	80130cc <draw_y_ticks>
    draw_y_ticks(obj, mask, LV_CHART_AXIS_SECONDARY_Y);
 801382a:	2201      	movs	r2, #1
 801382c:	ee18 1a10 	vmov	r1, s16
 8013830:	4640      	mov	r0, r8
 8013832:	f7ff fc4b 	bl	80130cc <draw_y_ticks>
    draw_x_ticks(obj, mask, LV_CHART_AXIS_PRIMARY_X);
 8013836:	2202      	movs	r2, #2
 8013838:	ee18 1a10 	vmov	r1, s16
 801383c:	4640      	mov	r0, r8
 801383e:	f7ff fd93 	bl	8013368 <draw_x_ticks>
    draw_x_ticks(obj, mask, LV_CHART_AXIS_SECONDARY_X);
 8013842:	2204      	movs	r2, #4
 8013844:	ee18 1a10 	vmov	r1, s16
 8013848:	4640      	mov	r0, r8
 801384a:	f7ff fd8d 	bl	8013368 <draw_x_ticks>
        if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, clip_area);
 801384e:	f898 3088 	ldrb.w	r3, [r8, #136]	; 0x88
 8013852:	f003 0307 	and.w	r3, r3, #7
 8013856:	2b01      	cmp	r3, #1
 8013858:	f040 8425 	bne.w	80140a6 <lv_chart_event+0xa12>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 801385c:	ee18 2a10 	vmov	r2, s16
 8013860:	ee18 1a90 	vmov	r1, s17
 8013864:	a818      	add	r0, sp, #96	; 0x60
 8013866:	f003 fc06 	bl	8017076 <_lv_area_intersect>
 801386a:	2800      	cmp	r0, #0
 801386c:	f000 80a4 	beq.w	80139b8 <lv_chart_event+0x324>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013870:	4640      	mov	r0, r8
 8013872:	f7ff fb50 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013876:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013878:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801387a:	4640      	mov	r0, r8
 801387c:	f7ff fa3c 	bl	8012cf8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013880:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013882:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013884:	4640      	mov	r0, r8
 8013886:	f7ff fa4c 	bl	8012d22 <lv_obj_get_style_pad_top>
 801388a:	4683      	mov	fp, r0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801388c:	4640      	mov	r0, r8
 801388e:	f7f1 fbaa 	bl	8004fe6 <lv_obj_get_content_width>
 8013892:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013896:	9004      	str	r0, [sp, #16]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013898:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801389a:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801389c:	f7f1 fbbd 	bl	800501a <lv_obj_get_content_height>
 80138a0:	9007      	str	r0, [sp, #28]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80138a2:	4640      	mov	r0, r8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80138a4:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80138a8:	f9b8 9014 	ldrsh.w	r9, [r8, #20]
 80138ac:	f7f2 fc38 	bl	8006120 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 80138b0:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 80138b4:	4607      	mov	r7, r0
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 80138b6:	4640      	mov	r0, r8
 80138b8:	9308      	str	r3, [sp, #32]
 80138ba:	f7f2 fbdb 	bl	8006074 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80138be:	ee18 2a10 	vmov	r2, s16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 80138c2:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 80138c4:	ee18 1a90 	vmov	r1, s17
 80138c8:	a81a      	add	r0, sp, #104	; 0x68
 80138ca:	f003 fbd4 	bl	8017076 <_lv_area_intersect>
    if(mask_ret == false) return;
 80138ce:	2800      	cmp	r0, #0
 80138d0:	d072      	beq.n	80139b8 <lv_chart_event+0x324>
    lv_draw_line_dsc_init(&line_dsc_default);
 80138d2:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80138d4:	fa15 f584 	uxtah	r5, r5, r4
    lv_draw_line_dsc_init(&line_dsc_default);
 80138d8:	f7f7 fb4c 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 80138dc:	aa20      	add	r2, sp, #128	; 0x80
 80138de:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80138e2:	4640      	mov	r0, r8
 80138e4:	f7f1 f8d0 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 80138e8:	a82d      	add	r0, sp, #180	; 0xb4
 80138ea:	f7f9 f97d 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 80138ee:	aa2d      	add	r2, sp, #180	; 0xb4
 80138f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80138f4:	4640      	mov	r0, r8
 80138f6:	f7f0 fee3 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80138fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80138fe:	4640      	mov	r0, r8
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013900:	44a9      	add	r9, r5
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8013902:	f7ff fa00 	bl	8012d06 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8013906:	f241 0204 	movw	r2, #4100	; 0x1004
 801390a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801390e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8013912:	eba9 0707 	sub.w	r7, r9, r7
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013916:	fa1b f484 	uxtah	r4, fp, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801391a:	f340 034f 	sbfx	r3, r0, #1, #16
 801391e:	4640      	mov	r0, r8
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8013920:	f647 79ff 	movw	r9, #32767	; 0x7fff
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8013924:	9303      	str	r3, [sp, #12]
 8013926:	f7f3 fdcf 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801392a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 801392e:	9a03      	ldr	r2, [sp, #12]
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8013930:	fa03 f080 	sxtah	r0, r3, r0
 8013934:	1043      	asrs	r3, r0, #1
 8013936:	9306      	str	r3, [sp, #24]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 8013938:	9906      	ldr	r1, [sp, #24]
 801393a:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 801393e:	428a      	cmp	r2, r1
 8013940:	bfa8      	it	ge
 8013942:	460a      	movge	r2, r1
 8013944:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8013948:	b212      	sxth	r2, r2
 801394a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 801394e:	bfc2      	ittt	gt
 8013950:	f89d 2089 	ldrbgt.w	r2, [sp, #137]	; 0x89
 8013954:	f042 0210 	orrgt.w	r2, r2, #16
 8013958:	f88d 2089 	strbgt.w	r2, [sp, #137]	; 0x89
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801395c:	2b01      	cmp	r3, #1
 801395e:	bf02      	ittt	eq
 8013960:	f89d 3089 	ldrbeq.w	r3, [sp, #137]	; 0x89
 8013964:	f043 0310 	orreq.w	r3, r3, #16
 8013968:	f88d 3089 	strbeq.w	r3, [sp, #137]	; 0x89
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801396c:	9b07      	ldr	r3, [sp, #28]
 801396e:	435e      	muls	r6, r3
 8013970:	1233      	asrs	r3, r6, #8
 8013972:	9310      	str	r3, [sp, #64]	; 0x40
 8013974:	f346 230f 	sbfx	r3, r6, #8, #16
 8013978:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801397a:	b2bb      	uxth	r3, r7
 801397c:	9311      	str	r3, [sp, #68]	; 0x44
 801397e:	b23b      	sxth	r3, r7
 8013980:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8013982:	9b08      	ldr	r3, [sp, #32]
 8013984:	441c      	add	r4, r3
 8013986:	eba4 0a0a 	sub.w	sl, r4, sl
 801398a:	fa1f f38a 	uxth.w	r3, sl
 801398e:	9312      	str	r3, [sp, #72]	; 0x48
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 8013990:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8013994:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013996:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
 801399a:	4358      	muls	r0, r3
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801399c:	f340 230f 	sbfx	r3, r0, #8, #16
 80139a0:	9308      	str	r3, [sp, #32]
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80139a2:	f108 0324 	add.w	r3, r8, #36	; 0x24
 80139a6:	4618      	mov	r0, r3
 80139a8:	ee09 3a10 	vmov	s18, r3
 80139ac:	f003 feb2 	bl	8017714 <_lv_ll_get_tail>
 80139b0:	4604      	mov	r4, r0
 80139b2:	2c00      	cmp	r4, #0
 80139b4:	f040 820d 	bne.w	8013dd2 <lv_chart_event+0x73e>
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 80139b8:	f108 0b30 	add.w	fp, r8, #48	; 0x30
 80139bc:	4658      	mov	r0, fp
 80139be:	f003 fec0 	bl	8017742 <_lv_ll_is_empty>
 80139c2:	2800      	cmp	r0, #0
 80139c4:	f47f aeb9 	bne.w	801373a <lv_chart_event+0xa6>
    lv_draw_line_dsc_init(&line_dsc_ori);
 80139c8:	ae1a      	add	r6, sp, #104	; 0x68
    dsc.line_dsc = &line_dsc_tmp;
 80139ca:	af1d      	add	r7, sp, #116	; 0x74
    lv_draw_line_dsc_init(&line_dsc_ori);
 80139cc:	4630      	mov	r0, r6
 80139ce:	f7f7 fad1 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 80139d2:	4632      	mov	r2, r6
 80139d4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80139d8:	4640      	mov	r0, r8
 80139da:	f7f1 f855 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 80139de:	a820      	add	r0, sp, #128	; 0x80
 80139e0:	f7f9 f902 	bl	800cbe8 <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 80139e4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80139e8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 80139ec:	4640      	mov	r0, r8
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 80139ee:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 80139f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80139f6:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 80139fa:	f7ff f984 	bl	8012d06 <lv_obj_get_style_width>
 80139fe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a02:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a06:	f340 034f 	sbfx	r3, r0, #1, #16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a0a:	4640      	mov	r0, r8
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a0c:	9303      	str	r3, [sp, #12]
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a0e:	f7ff f97a 	bl	8012d06 <lv_obj_get_style_width>
 8013a12:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8013a16:	ee18 1a10 	vmov	r1, s16
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a1a:	f340 034f 	sbfx	r3, r0, #1, #16
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8013a1e:	a83a      	add	r0, sp, #232	; 0xe8
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8013a20:	9304      	str	r3, [sp, #16]
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8013a22:	f7f1 f931 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.rect_dsc = &point_dsc_tmp;
 8013a26:	ab2d      	add	r3, sp, #180	; 0xb4
    _lv_area_intersect(&clip_area2, clip_area, &obj->coords);
 8013a28:	ee18 1a10 	vmov	r1, s16
 8013a2c:	ee18 2a90 	vmov	r2, s17
 8013a30:	a816      	add	r0, sp, #88	; 0x58
    dsc.rect_dsc = &point_dsc_tmp;
 8013a32:	933c      	str	r3, [sp, #240]	; 0xf0
    dsc.part = LV_PART_CURSOR;
 8013a34:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    dsc.line_dsc = &line_dsc_tmp;
 8013a38:	973e      	str	r7, [sp, #248]	; 0xf8
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 8013a3a:	ee08 6a10 	vmov	s16, r6
    dsc.part = LV_PART_CURSOR;
 8013a3e:	9347      	str	r3, [sp, #284]	; 0x11c
    _lv_area_intersect(&clip_area2, clip_area, &obj->coords);
 8013a40:	f003 fb19 	bl	8017076 <_lv_area_intersect>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8013a44:	4658      	mov	r0, fp
 8013a46:	f003 fe65 	bl	8017714 <_lv_ll_get_tail>
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	2c00      	cmp	r4, #0
 8013a4e:	f43f ae74 	beq.w	801373a <lv_chart_event+0xa6>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 8013a52:	220a      	movs	r2, #10
 8013a54:	ee18 1a10 	vmov	r1, s16
 8013a58:	4638      	mov	r0, r7
 8013a5a:	f003 ff95 	bl	8017988 <lv_memcpy>
        lv_memcpy(&point_dsc_tmp, &point_dsc_ori, sizeof(lv_draw_rect_dsc_t));
 8013a5e:	2234      	movs	r2, #52	; 0x34
 8013a60:	a920      	add	r1, sp, #128	; 0x80
 8013a62:	a82d      	add	r0, sp, #180	; 0xb4
 8013a64:	f003 ff90 	bl	8017988 <lv_memcpy>
        line_dsc_tmp.color = cursor->color;
 8013a68:	88e3      	ldrh	r3, [r4, #6]
 8013a6a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        point_dsc_tmp.bg_color = cursor->color;
 8013a6e:	88e3      	ldrh	r3, [r4, #6]
 8013a70:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        dsc.p1 = &p1;
 8013a74:	ab14      	add	r3, sp, #80	; 0x50
 8013a76:	9341      	str	r3, [sp, #260]	; 0x104
        dsc.p2 = &p2;
 8013a78:	ab15      	add	r3, sp, #84	; 0x54
 8013a7a:	9342      	str	r3, [sp, #264]	; 0x108
        if(cursor->pos_set) {
 8013a7c:	7b63      	ldrb	r3, [r4, #13]
 8013a7e:	07dd      	lsls	r5, r3, #31
 8013a80:	f140 8616 	bpl.w	80146b0 <lv_chart_event+0x101c>
            cx = cursor->pos.x;
 8013a84:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 8013a88:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cy += obj->coords.y1;
 8013a8c:	f8b8 3016 	ldrh.w	r3, [r8, #22]
        cx += obj->coords.x1;
 8013a90:	f9b8 2014 	ldrsh.w	r2, [r8, #20]
        cy += obj->coords.y1;
 8013a94:	441d      	add	r5, r3
        if(cursor->dir & LV_DIR_HOR) {
 8013a96:	7b23      	ldrb	r3, [r4, #12]
        cx += obj->coords.x1;
 8013a98:	4416      	add	r6, r2
        if(cursor->dir & LV_DIR_HOR) {
 8013a9a:	0798      	lsls	r0, r3, #30
        cy += obj->coords.y1;
 8013a9c:	fa1f f985 	uxth.w	r9, r5
        cx += obj->coords.x1;
 8013aa0:	fa1f fa86 	uxth.w	sl, r6
        cy += obj->coords.y1;
 8013aa4:	b22d      	sxth	r5, r5
        cx += obj->coords.x1;
 8013aa6:	b236      	sxth	r6, r6
        if(cursor->dir & LV_DIR_HOR) {
 8013aa8:	d021      	beq.n	8013aee <lv_chart_event+0x45a>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013aaa:	f013 0f01 	tst.w	r3, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013aae:	4640      	mov	r0, r8
            p1.y = cy;
 8013ab0:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013ab4:	bf08      	it	eq
 8013ab6:	4632      	moveq	r2, r6
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 8013ab8:	0799      	lsls	r1, r3, #30
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013aba:	f04f 011a 	mov.w	r1, #26
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 8013abe:	bf4c      	ite	mi
 8013ac0:	f9b8 3018 	ldrshmi.w	r3, [r8, #24]
 8013ac4:	4633      	movpl	r3, r6
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 8013ac6:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013aca:	aa3a      	add	r2, sp, #232	; 0xe8
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 8013acc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            p2.y = p1.y;
 8013ad0:	f8ad 5056 	strh.w	r5, [sp, #86]	; 0x56
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013ad4:	f7ee faa8 	bl	8002028 <lv_event_send>
            lv_draw_line(&p1, &p2, &clip_area2, &line_dsc_tmp);
 8013ad8:	aa16      	add	r2, sp, #88	; 0x58
 8013ada:	a915      	add	r1, sp, #84	; 0x54
 8013adc:	a814      	add	r0, sp, #80	; 0x50
 8013ade:	463b      	mov	r3, r7
 8013ae0:	f7f7 fa54 	bl	800af8c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013ae4:	aa3a      	add	r2, sp, #232	; 0xe8
 8013ae6:	211b      	movs	r1, #27
 8013ae8:	4640      	mov	r0, r8
 8013aea:	f7ee fa9d 	bl	8002028 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 8013aee:	7b23      	ldrb	r3, [r4, #12]
 8013af0:	f013 0f0c 	tst.w	r3, #12
 8013af4:	d021      	beq.n	8013b3a <lv_chart_event+0x4a6>
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8013af6:	075a      	lsls	r2, r3, #29
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013af8:	f04f 011a 	mov.w	r1, #26
 8013afc:	4640      	mov	r0, r8
            p1.x = cx;
 8013afe:	f8ad 6050 	strh.w	r6, [sp, #80]	; 0x50
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8013b02:	bf4c      	ite	mi
 8013b04:	f9b8 2016 	ldrshmi.w	r2, [r8, #22]
 8013b08:	462a      	movpl	r2, r5
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 8013b0a:	071b      	lsls	r3, r3, #28
            p2.x = p1.x;
 8013b0c:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8013b10:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b14:	aa3a      	add	r2, sp, #232	; 0xe8
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 8013b16:	bf48      	it	mi
 8013b18:	f9b8 501a 	ldrshmi.w	r5, [r8, #26]
 8013b1c:	f8ad 5056 	strh.w	r5, [sp, #86]	; 0x56
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b20:	f7ee fa82 	bl	8002028 <lv_event_send>
            lv_draw_line(&p1, &p2, &clip_area2, &line_dsc_tmp);
 8013b24:	aa16      	add	r2, sp, #88	; 0x58
 8013b26:	a915      	add	r1, sp, #84	; 0x54
 8013b28:	a814      	add	r0, sp, #80	; 0x50
 8013b2a:	463b      	mov	r3, r7
 8013b2c:	f7f7 fa2e 	bl	800af8c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013b30:	aa3a      	add	r2, sp, #232	; 0xe8
 8013b32:	211b      	movs	r1, #27
 8013b34:	4640      	mov	r0, r8
 8013b36:	f7ee fa77 	bl	8002028 <lv_event_send>
        if(point_w && point_h) {
 8013b3a:	9b03      	ldr	r3, [sp, #12]
 8013b3c:	b33b      	cbz	r3, 8013b8e <lv_chart_event+0x4fa>
 8013b3e:	9b04      	ldr	r3, [sp, #16]
 8013b40:	b32b      	cbz	r3, 8013b8e <lv_chart_event+0x4fa>
            point_area.x1 = cx - point_w;
 8013b42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            dsc.draw_area = &point_area;
 8013b46:	ad18      	add	r5, sp, #96	; 0x60
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b48:	211a      	movs	r1, #26
 8013b4a:	4640      	mov	r0, r8
            point_area.x1 = cx - point_w;
 8013b4c:	ebaa 0203 	sub.w	r2, sl, r3
            point_area.x2 = cx + point_w;
 8013b50:	449a      	add	sl, r3
            point_area.y1 = cy - point_h;
 8013b52:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            point_area.x1 = cx - point_w;
 8013b56:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            point_area.y1 = cy - point_h;
 8013b5a:	eba9 0203 	sub.w	r2, r9, r3
            point_area.y2 = cy + point_h;
 8013b5e:	4499      	add	r9, r3
            dsc.p1 = NULL;
 8013b60:	2300      	movs	r3, #0
            point_area.x2 = cx + point_w;
 8013b62:	f8ad a064 	strh.w	sl, [sp, #100]	; 0x64
            point_area.y1 = cy - point_h;
 8013b66:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b6a:	aa3a      	add	r2, sp, #232	; 0xe8
            point_area.y2 = cy + point_h;
 8013b6c:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
            dsc.draw_area = &point_area;
 8013b70:	953b      	str	r5, [sp, #236]	; 0xec
            dsc.p2 = NULL;
 8013b72:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013b76:	f7ee fa57 	bl	8002028 <lv_event_send>
            lv_draw_rect(&point_area, &clip_area2, &point_dsc_tmp);
 8013b7a:	aa2d      	add	r2, sp, #180	; 0xb4
 8013b7c:	a916      	add	r1, sp, #88	; 0x58
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f7f9 f854 	bl	800cc2c <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013b84:	aa3a      	add	r2, sp, #232	; 0xe8
 8013b86:	211b      	movs	r1, #27
 8013b88:	4640      	mov	r0, r8
 8013b8a:	f7ee fa4d 	bl	8002028 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8013b8e:	4621      	mov	r1, r4
 8013b90:	4658      	mov	r0, fp
 8013b92:	f003 fdc6 	bl	8017722 <_lv_ll_get_prev>
 8013b96:	4604      	mov	r4, r0
 8013b98:	e758      	b.n	8013a4c <lv_chart_event+0x3b8>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013b9a:	4640      	mov	r0, r8
    lv_draw_line_dsc_init(&line_dsc);
 8013b9c:	ad2d      	add	r5, sp, #180	; 0xb4
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013b9e:	f7ff f9ba 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
 8013ba2:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	4640      	mov	r0, r8
 8013ba8:	f7ff f8a6 	bl	8012cf8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013bac:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013bae:	b2a3      	uxth	r3, r4
 8013bb0:	9005      	str	r0, [sp, #20]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013bb2:	4640      	mov	r0, r8
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013bb4:	9303      	str	r3, [sp, #12]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013bb6:	f7ff f8b4 	bl	8012d22 <lv_obj_get_style_pad_top>
 8013bba:	4604      	mov	r4, r0
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	f7f1 fa12 	bl	8004fe6 <lv_obj_get_content_width>
 8013bc2:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8013bc6:	9006      	str	r0, [sp, #24]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013bc8:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013bca:	9307      	str	r3, [sp, #28]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013bcc:	f7f1 fa25 	bl	800501a <lv_obj_get_content_height>
 8013bd0:	4681      	mov	r9, r0
    lv_draw_line_dsc_init(&line_dsc);
 8013bd2:	4628      	mov	r0, r5
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013bd4:	f8b8 7086 	ldrh.w	r7, [r8, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 8013bd8:	f7f7 f9cc 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8013bdc:	462a      	mov	r2, r5
 8013bde:	2100      	movs	r1, #0
 8013be0:	4640      	mov	r0, r8
 8013be2:	f7f0 ff51 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 8013be6:	ee18 1a10 	vmov	r1, s16
 8013bea:	a83a      	add	r0, sp, #232	; 0xe8
 8013bec:	f7f1 f84c 	bl	8004c88 <lv_obj_draw_dsc_init>
    obj_draw_dsc.part = LV_PART_MAIN;
 8013bf0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8013bf2:	2231      	movs	r2, #49	; 0x31
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	9147      	str	r1, [sp, #284]	; 0x11c
    obj_draw_dsc.line_dsc = &line_dsc;
 8013bf8:	953e      	str	r5, [sp, #248]	; 0xf8
 8013bfa:	f7f3 fc65 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8013bfe:	b2c3      	uxtb	r3, r0
    lv_coord_t border_w = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8013c00:	4640      	mov	r0, r8
 8013c02:	9304      	str	r3, [sp, #16]
 8013c04:	f7ff f987 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8013c08:	2233      	movs	r2, #51	; 0x33
 8013c0a:	2100      	movs	r1, #0
 8013c0c:	4683      	mov	fp, r0
 8013c0e:	4640      	mov	r0, r8
 8013c10:	f7f3 fc5a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_border_side_t)v.num;
 8013c14:	b2c6      	uxtb	r6, r0
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8013c16:	4640      	mov	r0, r8
 8013c18:	f7f2 fa82 	bl	8006120 <lv_obj_get_scroll_left>
 8013c1c:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 8013c1e:	4640      	mov	r0, r8
 8013c20:	f7f2 fa28 	bl	8006074 <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 8013c24:	f8b8 507e 	ldrh.w	r5, [r8, #126]	; 0x7e
 8013c28:	2d00      	cmp	r5, #0
 8013c2a:	d16a      	bne.n	8013d02 <lv_chart_event+0x66e>
    if(chart->vdiv_cnt != 0) {
 8013c2c:	f8b8 7080 	ldrh.w	r7, [r8, #128]	; 0x80
 8013c30:	2f00      	cmp	r7, #0
 8013c32:	f43f adf4 	beq.w	801381e <lv_chart_event+0x18a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013c36:	9b03      	ldr	r3, [sp, #12]
 8013c38:	9a05      	ldr	r2, [sp, #20]
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013c3a:	f8b8 0014 	ldrh.w	r0, [r8, #20]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8013c3e:	4413      	add	r3, r2
 8013c40:	461d      	mov	r5, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c44:	4405      	add	r5, r0
 8013c46:	1aed      	subs	r5, r5, r3
 8013c48:	b2ab      	uxth	r3, r5
        i_end = chart->vdiv_cnt;
 8013c4a:	b23d      	sxth	r5, r7
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 8013c4c:	9303      	str	r3, [sp, #12]
        p1.y = obj->coords.y1;
 8013c4e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8013c52:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        p2.y = obj->coords.y2;
 8013c56:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8013c5a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 8013c5e:	9b04      	ldr	r3, [sp, #16]
 8013c60:	2b02      	cmp	r3, #2
 8013c62:	f240 80b4 	bls.w	8013dce <lv_chart_event+0x73a>
 8013c66:	f1bb 0f00 	cmp.w	fp, #0
 8013c6a:	f340 80b0 	ble.w	8013dce <lv_chart_event+0x73a>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 8013c6e:	f016 0404 	ands.w	r4, r6, #4
 8013c72:	d006      	beq.n	8013c82 <lv_chart_event+0x5ee>
 8013c74:	2100      	movs	r1, #0
 8013c76:	4640      	mov	r0, r8
 8013c78:	f7ff f83e 	bl	8012cf8 <lv_obj_get_style_pad_left>
 8013c7c:	fab0 f480 	clz	r4, r0
 8013c80:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 8013c82:	0730      	lsls	r0, r6, #28
 8013c84:	d509      	bpl.n	8013c9a <lv_chart_event+0x606>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013c86:	f241 0213 	movw	r2, #4115	; 0x1013
 8013c8a:	2100      	movs	r1, #0
 8013c8c:	4640      	mov	r0, r8
 8013c8e:	f7f3 fc1b 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013c92:	b200      	sxth	r0, r0
 8013c94:	b908      	cbnz	r0, 8013c9a <lv_chart_event+0x606>
 8013c96:	1e7b      	subs	r3, r7, #1
 8013c98:	b21d      	sxth	r5, r3
 8013c9a:	4627      	mov	r7, r4
            obj_draw_dsc.p1 = &p1;
 8013c9c:	f10d 0968 	add.w	r9, sp, #104	; 0x68
            obj_draw_dsc.p2 = &p2;
 8013ca0:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8013ca4:	e9dd 3606 	ldrd	r3, r6, [sp, #24]
 8013ca8:	435e      	muls	r6, r3
 8013caa:	f346 260f 	sbfx	r6, r6, #8, #16
        for(i = i_start; i < i_end; i++) {
 8013cae:	42ac      	cmp	r4, r5
 8013cb0:	f6bf adb5 	bge.w	801381e <lv_chart_event+0x18a>
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013cb4:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013cb8:	211a      	movs	r1, #26
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013cba:	f8b8 2080 	ldrh.w	r2, [r8, #128]	; 0x80
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013cbe:	4640      	mov	r0, r8
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013cc0:	1af3      	subs	r3, r6, r3
            obj_draw_dsc.id = i;
 8013cc2:	9748      	str	r7, [sp, #288]	; 0x120
            p1.x = (int32_t)((int32_t)(w - line_dsc.width) * i) / (chart->vdiv_cnt - 1);
 8013cc4:	3a01      	subs	r2, #1
 8013cc6:	3401      	adds	r4, #1
 8013cc8:	437b      	muls	r3, r7
 8013cca:	3701      	adds	r7, #1
 8013ccc:	b224      	sxth	r4, r4
 8013cce:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 8013cd2:	9a03      	ldr	r2, [sp, #12]
 8013cd4:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013cd6:	aa3a      	add	r2, sp, #232	; 0xe8
            p1.x += x_ofs;
 8013cd8:	b21b      	sxth	r3, r3
            obj_draw_dsc.p2 = &p2;
 8013cda:	e9cd 9a41 	strd	r9, sl, [sp, #260]	; 0x104
            p1.x += x_ofs;
 8013cde:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.x = p1.x;
 8013ce2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013ce6:	f7ee f99f 	bl	8002028 <lv_event_send>
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
 8013cea:	ab2d      	add	r3, sp, #180	; 0xb4
 8013cec:	aa20      	add	r2, sp, #128	; 0x80
 8013cee:	4651      	mov	r1, sl
 8013cf0:	4648      	mov	r0, r9
 8013cf2:	f7f7 f94b 	bl	800af8c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8013cf6:	aa3a      	add	r2, sp, #232	; 0xe8
 8013cf8:	211b      	movs	r1, #27
 8013cfa:	4640      	mov	r0, r8
 8013cfc:	f7ee f994 	bl	8002028 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8013d00:	e7d5      	b.n	8013cae <lv_chart_event+0x61a>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013d02:	9b03      	ldr	r3, [sp, #12]
        i_end = chart->hdiv_cnt;
 8013d04:	fa0f fa85 	sxth.w	sl, r5
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013d08:	441c      	add	r4, r3
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 8013d0a:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8013d0e:	441c      	add	r4, r3
 8013d10:	1a20      	subs	r0, r4, r0
 8013d12:	b283      	uxth	r3, r0
 8013d14:	930a      	str	r3, [sp, #40]	; 0x28
        p1.x = obj->coords.x1;
 8013d16:	f8b8 3014 	ldrh.w	r3, [r8, #20]
 8013d1a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        p2.x = obj->coords.x2;
 8013d1e:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8013d22:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 8013d26:	9b04      	ldr	r3, [sp, #16]
 8013d28:	2b02      	cmp	r3, #2
 8013d2a:	d94e      	bls.n	8013dca <lv_chart_event+0x736>
 8013d2c:	f1bb 0f00 	cmp.w	fp, #0
 8013d30:	dd4b      	ble.n	8013dca <lv_chart_event+0x736>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 8013d32:	f016 0402 	ands.w	r4, r6, #2
 8013d36:	d006      	beq.n	8013d46 <lv_chart_event+0x6b2>
 8013d38:	2100      	movs	r1, #0
 8013d3a:	4640      	mov	r0, r8
 8013d3c:	f7fe fff1 	bl	8012d22 <lv_obj_get_style_pad_top>
 8013d40:	fab0 f480 	clz	r4, r0
 8013d44:	0964      	lsrs	r4, r4, #5
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 8013d46:	07f3      	lsls	r3, r6, #31
 8013d48:	d50b      	bpl.n	8013d62 <lv_chart_event+0x6ce>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8013d4a:	f241 0211 	movw	r2, #4113	; 0x1011
 8013d4e:	2100      	movs	r1, #0
 8013d50:	4640      	mov	r0, r8
 8013d52:	f7f3 fbb9 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013d56:	b200      	sxth	r0, r0
 8013d58:	b918      	cbnz	r0, 8013d62 <lv_chart_event+0x6ce>
 8013d5a:	f105 3aff 	add.w	sl, r5, #4294967295
 8013d5e:	fa0f fa8a 	sxth.w	sl, sl
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013d62:	fb07 f509 	mul.w	r5, r7, r9
 8013d66:	4627      	mov	r7, r4
            obj_draw_dsc.p2 = &p2;
 8013d68:	f10d 0974 	add.w	r9, sp, #116	; 0x74
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013d6c:	f345 230f 	sbfx	r3, r5, #8, #16
            obj_draw_dsc.p1 = &p1;
 8013d70:	ad1a      	add	r5, sp, #104	; 0x68
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8013d72:	9308      	str	r3, [sp, #32]
        for(i = i_start; i < i_end; i++) {
 8013d74:	4554      	cmp	r4, sl
 8013d76:	f6bf af59 	bge.w	8013c2c <lv_chart_event+0x598>
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013d7a:	9a08      	ldr	r2, [sp, #32]
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013d7c:	211a      	movs	r1, #26
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013d7e:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013d82:	4640      	mov	r0, r8
 8013d84:	3401      	adds	r4, #1
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013d86:	1ad3      	subs	r3, r2, r3
 8013d88:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
            obj_draw_dsc.id = i;
 8013d8c:	9748      	str	r7, [sp, #288]	; 0x120
 8013d8e:	b224      	sxth	r4, r4
            p1.y = (int32_t)((int32_t)(h - line_dsc.width) * i) / (chart->hdiv_cnt - 1);
 8013d90:	437b      	muls	r3, r7
 8013d92:	3a01      	subs	r2, #1
 8013d94:	3701      	adds	r7, #1
 8013d96:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 8013d9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d9c:	4413      	add	r3, r2
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013d9e:	aa3a      	add	r2, sp, #232	; 0xe8
            p1.y += y_ofs;
 8013da0:	b21b      	sxth	r3, r3
            obj_draw_dsc.p2 = &p2;
 8013da2:	e9cd 5941 	strd	r5, r9, [sp, #260]	; 0x104
            p1.y += y_ofs;
 8013da6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            p2.y = p1.y;
 8013daa:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 8013dae:	f7ee f93b 	bl	8002028 <lv_event_send>
            lv_draw_line(&p1, &p2, &series_mask, &line_dsc);
 8013db2:	ab2d      	add	r3, sp, #180	; 0xb4
 8013db4:	aa20      	add	r2, sp, #128	; 0x80
 8013db6:	4649      	mov	r1, r9
 8013db8:	4628      	mov	r0, r5
 8013dba:	f7f7 f8e7 	bl	800af8c <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 8013dbe:	aa3a      	add	r2, sp, #232	; 0xe8
 8013dc0:	211b      	movs	r1, #27
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	f7ee f930 	bl	8002028 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8013dc8:	e7d4      	b.n	8013d74 <lv_chart_event+0x6e0>
        i_start = 0;
 8013dca:	2400      	movs	r4, #0
 8013dcc:	e7c9      	b.n	8013d62 <lv_chart_event+0x6ce>
        i_start = 0;
 8013dce:	2400      	movs	r4, #0
 8013dd0:	e763      	b.n	8013c9a <lv_chart_event+0x606>
        if (ser->hidden) continue;
 8013dd2:	7b23      	ldrb	r3, [r4, #12]
 8013dd4:	f013 0301 	ands.w	r3, r3, #1
 8013dd8:	d006      	beq.n	8013de8 <lv_chart_event+0x754>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8013dda:	4621      	mov	r1, r4
 8013ddc:	ee19 0a10 	vmov	r0, s18
 8013de0:	f003 fc9f 	bl	8017722 <_lv_ll_get_prev>
 8013de4:	4604      	mov	r4, r0
 8013de6:	e5e4      	b.n	80139b2 <lv_chart_event+0x31e>
        line_dsc_default.color = ser->color;
 8013de8:	8922      	ldrh	r2, [r4, #8]
 8013dea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013dec:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        point_dsc_default.bg_color = ser->color;
 8013df0:	8922      	ldrh	r2, [r4, #8]
 8013df2:	f8ad 20b8 	strh.w	r2, [sp, #184]	; 0xb8
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013df6:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
 8013dfa:	0711      	lsls	r1, r2, #28
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013dfc:	7b22      	ldrb	r2, [r4, #12]
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8013dfe:	bf58      	it	pl
 8013e00:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
 8013e04:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8013e08:	9307      	str	r3, [sp, #28]
        p1.x = x_ofs;
 8013e0a:	eb08 0242 	add.w	r2, r8, r2, lsl #1
 8013e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013e10:	9807      	ldr	r0, [sp, #28]
        p1.x = x_ofs;
 8013e12:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        p2.x = x_ofs;
 8013e16:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013e1a:	6863      	ldr	r3, [r4, #4]
 8013e1c:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 8013e20:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013e24:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e2a:	1a5b      	subs	r3, r3, r1
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013e2c:	1a52      	subs	r2, r2, r1
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013e2e:	ee18 1a10 	vmov	r1, s16
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8013e32:	4343      	muls	r3, r0
        p2.y   = h - y_tmp + y_ofs;
 8013e34:	9812      	ldr	r0, [sp, #72]	; 0x48
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e3a:	4428      	add	r0, r5
 8013e3c:	b280      	uxth	r0, r0
        p2.y   = h - y_tmp + y_ofs;
 8013e3e:	1ac3      	subs	r3, r0, r3
 8013e40:	900e      	str	r0, [sp, #56]	; 0x38
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013e42:	a83a      	add	r0, sp, #232	; 0xe8
        p2.y   = h - y_tmp + y_ofs;
 8013e44:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        lv_obj_draw_dsc_init(&dsc, clip_area);
 8013e48:	f7f0 ff1e 	bl	8004c88 <lv_obj_draw_dsc_init>
        dsc.part = LV_PART_ITEMS;
 8013e4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
        lv_coord_t y_min = p2.y;
 8013e50:	f9bd 605a 	ldrsh.w	r6, [sp, #90]	; 0x5a
        lv_coord_t p_act = start_point;
 8013e54:	9807      	ldr	r0, [sp, #28]
        dsc.part = LV_PART_ITEMS;
 8013e56:	9347      	str	r3, [sp, #284]	; 0x11c
        dsc.line_dsc = &line_dsc_default;
 8013e58:	ab20      	add	r3, sp, #128	; 0x80
        dsc.sub_part_ptr = ser;
 8013e5a:	944b      	str	r4, [sp, #300]	; 0x12c
        dsc.line_dsc = &line_dsc_default;
 8013e5c:	933e      	str	r3, [sp, #248]	; 0xf8
        dsc.rect_dsc = &point_dsc_default;
 8013e5e:	ab2d      	add	r3, sp, #180	; 0xb4
        lv_coord_t y_min = p2.y;
 8013e60:	9604      	str	r6, [sp, #16]
        dsc.rect_dsc = &point_dsc_default;
 8013e62:	933c      	str	r3, [sp, #240]	; 0xf0
        for(i = 0; i < chart->point_cnt; i++) {
 8013e64:	2300      	movs	r3, #0
 8013e66:	9305      	str	r3, [sp, #20]
                    point_area.x1 = p1.x - point_w;
 8013e68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013e6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e6e:	f8bd b014 	ldrh.w	fp, [sp, #20]
        for(i = 0; i < chart->point_cnt; i++) {
 8013e72:	f8b8 5082 	ldrh.w	r5, [r8, #130]	; 0x82
 8013e76:	455d      	cmp	r5, fp
 8013e78:	d839      	bhi.n	8013eee <lv_chart_event+0x85a>
        if(!crowded_mode && i == chart->point_cnt) {
 8013e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e7c:	9a08      	ldr	r2, [sp, #32]
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	daab      	bge.n	8013dda <lv_chart_event+0x746>
 8013e82:	455d      	cmp	r5, fp
 8013e84:	d1a9      	bne.n	8013dda <lv_chart_event+0x746>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013e86:	6862      	ldr	r2, [r4, #4]
 8013e88:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
 8013e8c:	454b      	cmp	r3, r9
 8013e8e:	d0a4      	beq.n	8013dda <lv_chart_event+0x746>
                point_area.x1 = p2.x - point_w;
 8013e90:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8013e94:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8013e98:	1a5d      	subs	r5, r3, r1
                point_area.x2 = p2.x + point_w;
 8013e9a:	440b      	add	r3, r1
                point_area.y1 = p2.y - point_h;
 8013e9c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
                point_area.x2 = p2.x + point_w;
 8013ea0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p2.y - point_h;
 8013ea4:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                point_area.x1 = p2.x - point_w;
 8013ea8:	f8ad 5074 	strh.w	r5, [sp, #116]	; 0x74
                point_area.y1 = p2.y - point_h;
 8013eac:	1a5d      	subs	r5, r3, r1
                point_area.y2 = p2.y + point_h;
 8013eae:	440b      	add	r3, r1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013eb0:	211a      	movs	r1, #26
                point_area.y2 = p2.y + point_h;
 8013eb2:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.id = i - 1;
 8013eb6:	f10b 33ff 	add.w	r3, fp, #4294967295
                point_area.y1 = p2.y - point_h;
 8013eba:	f8ad 5076 	strh.w	r5, [sp, #118]	; 0x76
                dsc.draw_area = &point_area;
 8013ebe:	ad1d      	add	r5, sp, #116	; 0x74
                dsc.id = i - 1;
 8013ec0:	9348      	str	r3, [sp, #288]	; 0x120
                dsc.p1 = NULL;
 8013ec2:	2300      	movs	r3, #0
                dsc.draw_area = &point_area;
 8013ec4:	953b      	str	r5, [sp, #236]	; 0xec
                dsc.p2 = NULL;
 8013ec6:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
                dsc.value = ser->y_points[p_act];
 8013eca:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013ece:	aa3a      	add	r2, sp, #232	; 0xe8
 8013ed0:	4640      	mov	r0, r8
                dsc.value = ser->y_points[p_act];
 8013ed2:	934a      	str	r3, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8013ed4:	f7ee f8a8 	bl	8002028 <lv_event_send>
                lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8013ed8:	aa2d      	add	r2, sp, #180	; 0xb4
 8013eda:	a91a      	add	r1, sp, #104	; 0x68
 8013edc:	4628      	mov	r0, r5
 8013ede:	f7f8 fea5 	bl	800cc2c <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8013ee2:	aa3a      	add	r2, sp, #232	; 0xe8
 8013ee4:	211b      	movs	r1, #27
 8013ee6:	4640      	mov	r0, r8
 8013ee8:	f7ee f89e 	bl	8002028 <lv_event_send>
 8013eec:	e775      	b.n	8013dda <lv_chart_event+0x746>
            p1.y = p2.y;
 8013eee:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013ef2:	9f03      	ldr	r7, [sp, #12]
            p1.y = p2.y;
 8013ef4:	930c      	str	r3, [sp, #48]	; 0x30
 8013ef6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013efa:	ee18 3a10 	vmov	r3, s16
            p1.x = p2.x;
 8013efe:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013f02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            p1.x = p2.x;
 8013f06:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
            if(p1.x > clip_area->x2 + point_w + 1) break;
 8013f0a:	443b      	add	r3, r7
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	f73f af63 	bgt.w	8013dda <lv_chart_event+0x746>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013f14:	f8bd e014 	ldrh.w	lr, [sp, #20]
 8013f18:	1e6f      	subs	r7, r5, #1
 8013f1a:	9b08      	ldr	r3, [sp, #32]
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013f1c:	f8d4 c004 	ldr.w	ip, [r4, #4]
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013f20:	fb0e f303 	mul.w	r3, lr, r3
 8013f24:	fb93 f3f7 	sdiv	r3, r3, r7
 8013f28:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013f2a:	443b      	add	r3, r7
 8013f2c:	b29f      	uxth	r7, r3
 8013f2e:	b21b      	sxth	r3, r3
 8013f30:	9713      	str	r7, [sp, #76]	; 0x4c
            p_act = (start_point + i) % chart->point_cnt;
 8013f32:	9f07      	ldr	r7, [sp, #28]
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8013f34:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p_act = (start_point + i) % chart->point_cnt;
 8013f38:	4477      	add	r7, lr
 8013f3a:	fb97 faf5 	sdiv	sl, r7, r5
 8013f3e:	fb05 7a1a 	mls	sl, r5, sl, r7
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013f42:	7b27      	ldrb	r7, [r4, #12]
 8013f44:	f3c7 1700 	ubfx	r7, r7, #4, #1
            p_act = (start_point + i) % chart->point_cnt;
 8013f48:	fa0f fa8a 	sxth.w	sl, sl
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013f4c:	eb08 0747 	add.w	r7, r8, r7, lsl #1
 8013f50:	f9b7 506c 	ldrsh.w	r5, [r7, #108]	; 0x6c
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013f54:	f9b7 7070 	ldrsh.w	r7, [r7, #112]	; 0x70
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8013f58:	950d      	str	r5, [sp, #52]	; 0x34
 8013f5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f5c:	f93c 501a 	ldrsh.w	r5, [ip, sl, lsl #1]
 8013f60:	1a6d      	subs	r5, r5, r1
 8013f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f64:	434d      	muls	r5, r1
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013f66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013f68:	1a7f      	subs	r7, r7, r1
            p2.y  = h - y_tmp + y_ofs;
 8013f6a:	990e      	ldr	r1, [sp, #56]	; 0x38
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8013f6c:	fb95 f5f7 	sdiv	r5, r5, r7
            p2.y  = h - y_tmp + y_ofs;
 8013f70:	1b4d      	subs	r5, r1, r5
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013f72:	ee18 1a10 	vmov	r1, s16
 8013f76:	f9b1 7000 	ldrsh.w	r7, [r1]
            p2.y  = h - y_tmp + y_ofs;
 8013f7a:	b22d      	sxth	r5, r5
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013f7c:	9903      	ldr	r1, [sp, #12]
            p2.y  = h - y_tmp + y_ofs;
 8013f7e:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            if(p2.x < clip_area->x1 - point_w - 1) {
 8013f82:	1a7f      	subs	r7, r7, r1
 8013f84:	3f01      	subs	r7, #1
 8013f86:	42bb      	cmp	r3, r7
 8013f88:	db37      	blt.n	8013ffa <lv_chart_event+0x966>
            if(i != 0) {
 8013f8a:	f1bb 0f00 	cmp.w	fp, #0
 8013f8e:	d034      	beq.n	8013ffa <lv_chart_event+0x966>
                if(crowded_mode) {
 8013f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f92:	0047      	lsls	r7, r0, #1
 8013f94:	468b      	mov	fp, r1
 8013f96:	9908      	ldr	r1, [sp, #32]
 8013f98:	458b      	cmp	fp, r1
 8013f9a:	db33      	blt.n	8014004 <lv_chart_event+0x970>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8013f9c:	f93c 1010 	ldrsh.w	r1, [ip, r0, lsl #1]
 8013fa0:	4549      	cmp	r1, r9
 8013fa2:	d02a      	beq.n	8013ffa <lv_chart_event+0x966>
 8013fa4:	f93c 101a 	ldrsh.w	r1, [ip, sl, lsl #1]
 8013fa8:	4549      	cmp	r1, r9
 8013faa:	d026      	beq.n	8013ffa <lv_chart_event+0x966>
                        y_min = LV_MIN(y_min, p2.y);
 8013fac:	9904      	ldr	r1, [sp, #16]
                        y_max = LV_MAX(y_max, p2.y);
 8013fae:	42ae      	cmp	r6, r5
 8013fb0:	bfb8      	it	lt
 8013fb2:	462e      	movlt	r6, r5
                        y_min = LV_MIN(y_min, p2.y);
 8013fb4:	42a9      	cmp	r1, r5
 8013fb6:	bfa8      	it	ge
 8013fb8:	4629      	movge	r1, r5
                        if(p1.x != p2.x) {
 8013fba:	429a      	cmp	r2, r3
                        y_min = LV_MIN(y_min, p2.y);
 8013fbc:	9104      	str	r1, [sp, #16]
                        if(p1.x != p2.x) {
 8013fbe:	d01c      	beq.n	8013ffa <lv_chart_event+0x966>
                            p2.x--;         /*It's already on the next x value*/
 8013fc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013fc2:	428e      	cmp	r6, r1
                            p1.y = y_min;
 8013fc4:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013fc8:	aa1a      	add	r2, sp, #104	; 0x68
                            p2.x--;         /*It's already on the next x value*/
 8013fca:	f103 3bff 	add.w	fp, r3, #4294967295
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013fce:	bf08      	it	eq
 8013fd0:	3601      	addeq	r6, #1
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013fd2:	ab20      	add	r3, sp, #128	; 0x80
 8013fd4:	a916      	add	r1, sp, #88	; 0x58
                            p2.x--;         /*It's already on the next x value*/
 8013fd6:	fa0f fb8b 	sxth.w	fp, fp
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013fda:	a815      	add	r0, sp, #84	; 0x54
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8013fdc:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
                            y_max = y_cur;
 8013fe0:	462e      	mov	r6, r5
                            p2.x--;         /*It's already on the next x value*/
 8013fe2:	f8ad b058 	strh.w	fp, [sp, #88]	; 0x58
                            p1.x = p2.x;
 8013fe6:	f8ad b054 	strh.w	fp, [sp, #84]	; 0x54
                            lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8013fea:	f7f6 ffcf 	bl	800af8c <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 8013fee:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 8013ff2:	9504      	str	r5, [sp, #16]
                            p2.x++;         /*Compensate the previous x--*/
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        for(i = 0; i < chart->point_cnt; i++) {
 8013ffa:	9b05      	ldr	r3, [sp, #20]
            p_act = (start_point + i) % chart->point_cnt;
 8013ffc:	4650      	mov	r0, sl
 8013ffe:	3301      	adds	r3, #1
 8014000:	9305      	str	r3, [sp, #20]
 8014002:	e734      	b.n	8013e6e <lv_chart_event+0x7da>
                    point_area.x1 = p1.x - point_w;
 8014004:	b292      	uxth	r2, r2
 8014006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                    point_area.y1 = p1.y - point_h;
 8014008:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
                    point_area.x1 = p1.x - point_w;
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    point_area.x2 = p1.x + point_w;
 8014012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014014:	441a      	add	r2, r3
                    point_area.y1 = p1.y - point_h;
 8014016:	f8bd 3018 	ldrh.w	r3, [sp, #24]
                    point_area.x2 = p1.x + point_w;
 801401a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
                    point_area.y1 = p1.y - point_h;
 801401e:	1aca      	subs	r2, r1, r3
                    point_area.y2 = p1.y + point_h;
 8014020:	4419      	add	r1, r3
                    dsc.id = i - 1;
 8014022:	f10e 33ff 	add.w	r3, lr, #4294967295
                    point_area.y1 = p1.y - point_h;
 8014026:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
                    point_area.y2 = p1.y + point_h;
 801402a:	f8ad 107a 	strh.w	r1, [sp, #122]	; 0x7a
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801402e:	f647 71ff 	movw	r1, #32767	; 0x7fff
                    dsc.id = i - 1;
 8014032:	9348      	str	r3, [sp, #288]	; 0x120
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014034:	f93c 3010 	ldrsh.w	r3, [ip, r0, lsl #1]
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014038:	4640      	mov	r0, r8
                    dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801403a:	454b      	cmp	r3, r9
 801403c:	bf0c      	ite	eq
 801403e:	2200      	moveq	r2, #0
 8014040:	aa15      	addne	r2, sp, #84	; 0x54
 8014042:	9241      	str	r2, [sp, #260]	; 0x104
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014044:	f93c 201a 	ldrsh.w	r2, [ip, sl, lsl #1]
                    dsc.value = ser->y_points[p_prev];
 8014048:	934a      	str	r3, [sp, #296]	; 0x128
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801404a:	428a      	cmp	r2, r1
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801404c:	f04f 011a 	mov.w	r1, #26
                    dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014050:	bf0c      	ite	eq
 8014052:	2200      	moveq	r2, #0
 8014054:	aa16      	addne	r2, sp, #88	; 0x58
 8014056:	9242      	str	r2, [sp, #264]	; 0x108
                    dsc.draw_area = &point_area;
 8014058:	aa1d      	add	r2, sp, #116	; 0x74
 801405a:	923b      	str	r2, [sp, #236]	; 0xec
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801405c:	aa3a      	add	r2, sp, #232	; 0xe8
 801405e:	f7ed ffe3 	bl	8002028 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014062:	6863      	ldr	r3, [r4, #4]
 8014064:	5fda      	ldrsh	r2, [r3, r7]
 8014066:	454a      	cmp	r2, r9
 8014068:	d009      	beq.n	801407e <lv_chart_event+0x9ea>
 801406a:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 801406e:	454b      	cmp	r3, r9
 8014070:	d005      	beq.n	801407e <lv_chart_event+0x9ea>
                        lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8014072:	ab20      	add	r3, sp, #128	; 0x80
 8014074:	aa1a      	add	r2, sp, #104	; 0x68
 8014076:	a916      	add	r1, sp, #88	; 0x58
 8014078:	a815      	add	r0, sp, #84	; 0x54
 801407a:	f7f6 ff87 	bl	800af8c <lv_draw_line>
                    if(point_w && point_h && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801407e:	9b03      	ldr	r3, [sp, #12]
 8014080:	b15b      	cbz	r3, 801409a <lv_chart_event+0xa06>
 8014082:	9b06      	ldr	r3, [sp, #24]
 8014084:	b14b      	cbz	r3, 801409a <lv_chart_event+0xa06>
 8014086:	6863      	ldr	r3, [r4, #4]
 8014088:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 801408c:	454b      	cmp	r3, r9
 801408e:	d004      	beq.n	801409a <lv_chart_event+0xa06>
                        lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014090:	aa2d      	add	r2, sp, #180	; 0xb4
 8014092:	a91a      	add	r1, sp, #104	; 0x68
 8014094:	a81d      	add	r0, sp, #116	; 0x74
 8014096:	f7f8 fdc9 	bl	800cc2c <lv_draw_rect>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801409a:	aa3a      	add	r2, sp, #232	; 0xe8
 801409c:	211b      	movs	r1, #27
 801409e:	4640      	mov	r0, r8
 80140a0:	f7ed ffc2 	bl	8002028 <lv_event_send>
 80140a4:	e7a9      	b.n	8013ffa <lv_chart_event+0x966>
        else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, clip_area);
 80140a6:	2b02      	cmp	r3, #2
 80140a8:	f040 8124 	bne.w	80142f4 <lv_chart_event+0xc60>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 80140ac:	ee18 2a10 	vmov	r2, s16
 80140b0:	ee18 1a90 	vmov	r1, s17
 80140b4:	a81a      	add	r0, sp, #104	; 0x68
 80140b6:	f002 ffde 	bl	8017076 <_lv_area_intersect>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	f43f ac7c 	beq.w	80139b8 <lv_chart_event+0x324>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80140c0:	2100      	movs	r1, #0
 80140c2:	4640      	mov	r0, r8
 80140c4:	f7fe fe18 	bl	8012cf8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80140c8:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80140ca:	9007      	str	r0, [sp, #28]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80140cc:	4640      	mov	r0, r8
 80140ce:	f7fe fe28 	bl	8012d22 <lv_obj_get_style_pad_top>
 80140d2:	9008      	str	r0, [sp, #32]
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80140d4:	4640      	mov	r0, r8
 80140d6:	f7f0 ff86 	bl	8004fe6 <lv_obj_get_content_width>
 80140da:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80140dc:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80140de:	f8b8 b084 	ldrh.w	fp, [r8, #132]	; 0x84
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80140e2:	f7f0 ff9a 	bl	800501a <lv_obj_get_content_height>
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 80140e6:	f108 0324 	add.w	r3, r8, #36	; 0x24
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80140ea:	4681      	mov	r9, r0
 80140ec:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 80140f0:	4618      	mov	r0, r3
 80140f2:	ee09 3a10 	vmov	s18, r3
 80140f6:	f003 fb17 	bl	8017728 <_lv_ll_get_len>
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80140fa:	2100      	movs	r1, #0
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 80140fc:	9005      	str	r0, [sp, #20]
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80140fe:	4640      	mov	r0, r8
 8014100:	f7fe fe08 	bl	8012d14 <lv_obj_get_style_pad_column>
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8014104:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8014108:	9009      	str	r0, [sp, #36]	; 0x24
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 801410a:	4640      	mov	r0, r8
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801410c:	f8b8 4084 	ldrh.w	r4, [r8, #132]	; 0x84
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8014110:	f8b8 a082 	ldrh.w	sl, [r8, #130]	; 0x82
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8014114:	f7fe fdfe 	bl	8012d14 <lv_obj_get_style_pad_column>
 8014118:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 801411c:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 801411e:	4640      	mov	r0, r8
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8014120:	9306      	str	r3, [sp, #24]
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 8014122:	f7f1 fffd 	bl	8006120 <lv_obj_get_scroll_left>
 8014126:	4607      	mov	r7, r0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 8014128:	4640      	mov	r0, r8
 801412a:	f7f1 ffa3 	bl	8006074 <lv_obj_get_scroll_top>
 801412e:	4606      	mov	r6, r0
    lv_draw_rect_dsc_init(&col_dsc);
 8014130:	a82d      	add	r0, sp, #180	; 0xb4
 8014132:	f7f8 fd59 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 8014136:	aa2d      	add	r2, sp, #180	; 0xb4
 8014138:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801413c:	4640      	mov	r0, r8
 801413e:	f7f0 fabf 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_opa = LV_OPA_COVER;
 8014142:	f8bd 20be 	ldrh.w	r2, [sp, #190]	; 0xbe
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8014146:	f8bd 10b4 	ldrh.w	r1, [sp, #180]	; 0xb4
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801414a:	a820      	add	r0, sp, #128	; 0x80
    col_dsc.bg_opa = LV_OPA_COVER;
 801414c:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8014150:	f022 0207 	bic.w	r2, r2, #7
 8014154:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8014158:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 801415c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8014160:	440a      	add	r2, r1
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8014162:	ee18 1a90 	vmov	r1, s17
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 8014166:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801416a:	ee18 2a10 	vmov	r2, s16
 801416e:	f002 ff82 	bl	8017076 <_lv_area_intersect>
    if(mask_ret == false) return;
 8014172:	2800      	cmp	r0, #0
 8014174:	f43f ac20 	beq.w	80139b8 <lv_chart_event+0x324>
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014178:	fb05 f509 	mul.w	r5, r5, r9
    lv_obj_draw_dsc_init(&dsc, &series_mask);
 801417c:	a920      	add	r1, sp, #128	; 0x80
 801417e:	a83a      	add	r0, sp, #232	; 0xe8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014180:	122b      	asrs	r3, r5, #8
 8014182:	9303      	str	r3, [sp, #12]
 8014184:	f345 230f 	sbfx	r3, r5, #8, #16
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 8014188:	9d06      	ldr	r5, [sp, #24]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801418a:	9304      	str	r3, [sp, #16]
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801418c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801418e:	435c      	muls	r4, r3
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8014190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014192:	fb0b fb03 	mul.w	fp, fp, r3
    int32_t block_gap = (lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8014196:	1224      	asrs	r4, r4, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8014198:	f10a 33ff 	add.w	r3, sl, #4294967295
 801419c:	f34b 2b0f 	sbfx	fp, fp, #8, #16
 80141a0:	fb04 b313 	mls	r3, r4, r3, fp
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 80141a4:	44a3      	add	fp, r4
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 80141a6:	fb93 fafa 	sdiv	sl, r3, sl
    lv_coord_t col_w = block_w / ser_cnt;
 80141aa:	9b05      	ldr	r3, [sp, #20]
 80141ac:	fa0f fa8a 	sxth.w	sl, sl
 80141b0:	fbba f3f3 	udiv	r3, sl, r3
 80141b4:	9305      	str	r3, [sp, #20]
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 80141b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b8:	435d      	muls	r5, r3
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 80141ba:	9b07      	ldr	r3, [sp, #28]
 80141bc:	1bdf      	subs	r7, r3, r7
    int32_t ser_gap = (lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 80141be:	122d      	asrs	r5, r5, #8
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj);
 80141c0:	b2bb      	uxth	r3, r7
 80141c2:	9306      	str	r3, [sp, #24]
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 80141c4:	9b08      	ldr	r3, [sp, #32]
 80141c6:	1b9e      	subs	r6, r3, r6
 80141c8:	b2b3      	uxth	r3, r6
    for(i = 0; i < chart->point_cnt; i++) {
 80141ca:	2600      	movs	r6, #0
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj);
 80141cc:	9307      	str	r3, [sp, #28]
    lv_obj_draw_dsc_init(&dsc, &series_mask);
 80141ce:	f7f0 fd5b 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 80141d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80141d6:	9347      	str	r3, [sp, #284]	; 0x11c
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 80141d8:	43eb      	mvns	r3, r5
 80141da:	9308      	str	r3, [sp, #32]
    for(i = 0; i < chart->point_cnt; i++) {
 80141dc:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 80141e0:	b2b2      	uxth	r2, r6
 80141e2:	4293      	cmp	r3, r2
 80141e4:	f67f abe8 	bls.w	80139b8 <lv_chart_event+0x324>
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 80141e8:	b2b7      	uxth	r7, r6
 80141ea:	9a06      	ldr	r2, [sp, #24]
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80141ec:	ee19 0a10 	vmov	r0, s18
                dsc.draw_area = &col_a;
 80141f0:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 80141f4:	fb07 f90b 	mul.w	r9, r7, fp
 80141f8:	fb99 f9f3 	sdiv	r9, r9, r3
 80141fc:	f8b8 3014 	ldrh.w	r3, [r8, #20]
        dsc.id = i;
 8014200:	9748      	str	r7, [sp, #288]	; 0x120
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 8014202:	4413      	add	r3, r2
 8014204:	4499      	add	r9, r3
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8014206:	f003 fa85 	bl	8017714 <_lv_ll_get_tail>
 801420a:	4604      	mov	r4, r0
        lv_coord_t x_act = (int32_t)((int32_t)(w + block_gap) * i) / (chart->point_cnt) + obj->coords.x1 + x_ofs;
 801420c:	fa0f f989 	sxth.w	r9, r9
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8014210:	b1fc      	cbz	r4, 8014252 <lv_chart_event+0xbbe>
            if (ser->hidden) continue;
 8014212:	7b23      	ldrb	r3, [r4, #12]
 8014214:	f013 0301 	ands.w	r3, r3, #1
 8014218:	d16a      	bne.n	80142f0 <lv_chart_event+0xc5c>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801421a:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
            if(col_a.x2 < series_mask.x1) continue;
 801421e:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8014222:	0712      	lsls	r2, r2, #28
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8014224:	9a05      	ldr	r2, [sp, #20]
 8014226:	eb09 0502 	add.w	r5, r9, r2
 801422a:	9a08      	ldr	r2, [sp, #32]
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801422c:	bf58      	it	pl
 801422e:	f9b4 300a 	ldrshpl.w	r3, [r4, #10]
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8014232:	fa12 f285 	uxtah	r2, r2, r5
            col_a.x1 = x_act;
 8014236:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
            x_act += col_w;
 801423a:	b22d      	sxth	r5, r5
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 801423c:	b212      	sxth	r2, r2
            if(col_a.x2 < series_mask.x1) continue;
 801423e:	4291      	cmp	r1, r2
            col_a.x2 = col_a.x1 + col_w - ser_gap - 1;
 8014240:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            if(col_a.x2 < series_mask.x1) continue;
 8014244:	dc4c      	bgt.n	80142e0 <lv_chart_event+0xc4c>
            if(col_a.x1 > series_mask.x2) break;
 8014246:	f9bd 1084 	ldrsh.w	r1, [sp, #132]	; 0x84
 801424a:	f8b8 2082 	ldrh.w	r2, [r8, #130]	; 0x82
 801424e:	4549      	cmp	r1, r9
 8014250:	da01      	bge.n	8014256 <lv_chart_event+0xbc2>
    for(i = 0; i < chart->point_cnt; i++) {
 8014252:	3601      	adds	r6, #1
 8014254:	e7c2      	b.n	80141dc <lv_chart_event+0xb48>
            col_dsc.bg_color = ser->color;
 8014256:	8921      	ldrh	r1, [r4, #8]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 8014258:	443b      	add	r3, r7
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801425a:	7b20      	ldrb	r0, [r4, #12]
            col_dsc.bg_color = ser->color;
 801425c:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8014260:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8014264:	f8d4 c004 	ldr.w	ip, [r4, #4]
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 8014268:	fb93 f1f2 	sdiv	r1, r3, r2
 801426c:	fb02 3111 	mls	r1, r2, r1, r3
 8014270:	eb08 0040 	add.w	r0, r8, r0, lsl #1
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8014274:	9b04      	ldr	r3, [sp, #16]
 8014276:	b209      	sxth	r1, r1
 8014278:	f9b0 e06c 	ldrsh.w	lr, [r0, #108]	; 0x6c
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801427c:	f9b0 0070 	ldrsh.w	r0, [r0, #112]	; 0x70
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8014280:	f93c 2011 	ldrsh.w	r2, [ip, r1, lsl #1]
 8014284:	eba2 020e 	sub.w	r2, r2, lr
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8014288:	eba0 0e0e 	sub.w	lr, r0, lr
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801428c:	fb03 f902 	mul.w	r9, r3, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 8014290:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 8014294:	9a07      	ldr	r2, [sp, #28]
 8014296:	4413      	add	r3, r2
 8014298:	9a03      	ldr	r2, [sp, #12]
 801429a:	4413      	add	r3, r2
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801429c:	fb99 f2fe 	sdiv	r2, r9, lr
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 80142a0:	1a9b      	subs	r3, r3, r2
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 80142a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 80142a6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 80142aa:	f93c 3011 	ldrsh.w	r3, [ip, r1, lsl #1]
 80142ae:	4293      	cmp	r3, r2
 80142b0:	d016      	beq.n	80142e0 <lv_chart_event+0xc4c>
                dsc.rect_dsc = &col_dsc;
 80142b2:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80142b6:	aa3a      	add	r2, sp, #232	; 0xe8
 80142b8:	211a      	movs	r1, #26
 80142ba:	4640      	mov	r0, r8
                dsc.draw_area = &col_a;
 80142bc:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
                dsc.rect_dsc = &col_dsc;
 80142c0:	f8cd 90f0 	str.w	r9, [sp, #240]	; 0xf0
                dsc.value = ser->y_points[p_act];
 80142c4:	e9cd 344a 	strd	r3, r4, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 80142c8:	f7ed feae 	bl	8002028 <lv_event_send>
                lv_draw_rect(&col_a, &series_mask, &col_dsc);
 80142cc:	464a      	mov	r2, r9
 80142ce:	a920      	add	r1, sp, #128	; 0x80
 80142d0:	4650      	mov	r0, sl
 80142d2:	f7f8 fcab 	bl	800cc2c <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80142d6:	aa3a      	add	r2, sp, #232	; 0xe8
 80142d8:	211b      	movs	r1, #27
 80142da:	4640      	mov	r0, r8
 80142dc:	f7ed fea4 	bl	8002028 <lv_event_send>
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80142e0:	4621      	mov	r1, r4
 80142e2:	ee19 0a10 	vmov	r0, s18
 80142e6:	f003 fa1c 	bl	8017722 <_lv_ll_get_prev>
 80142ea:	46a9      	mov	r9, r5
 80142ec:	4604      	mov	r4, r0
 80142ee:	e78f      	b.n	8014210 <lv_chart_event+0xb7c>
 80142f0:	464d      	mov	r5, r9
 80142f2:	e7f5      	b.n	80142e0 <lv_chart_event+0xc4c>
        else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, clip_area);
 80142f4:	2b03      	cmp	r3, #3
 80142f6:	f47f ab5f 	bne.w	80139b8 <lv_chart_event+0x324>
    if(_lv_area_intersect(&com_area, &obj->coords, clip_area) == false) return;
 80142fa:	ee18 2a10 	vmov	r2, s16
 80142fe:	ee18 1a90 	vmov	r1, s17
 8014302:	a818      	add	r0, sp, #96	; 0x60
 8014304:	f002 feb7 	bl	8017076 <_lv_area_intersect>
 8014308:	2800      	cmp	r0, #0
 801430a:	f43f ab55 	beq.w	80139b8 <lv_chart_event+0x324>
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801430e:	4640      	mov	r0, r8
 8014310:	f7fe fe01 	bl	8012f16 <lv_obj_get_style_border_width.constprop.0>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8014314:	2100      	movs	r1, #0
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8014316:	4604      	mov	r4, r0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8014318:	4640      	mov	r0, r8
 801431a:	f7fe fced 	bl	8012cf8 <lv_obj_get_style_pad_left>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801431e:	2100      	movs	r1, #0
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8014320:	4605      	mov	r5, r0
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8014322:	4640      	mov	r0, r8
 8014324:	f7fe fcfd 	bl	8012d22 <lv_obj_get_style_pad_top>
 8014328:	900a      	str	r0, [sp, #40]	; 0x28
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801432a:	4640      	mov	r0, r8
 801432c:	f7f0 fe5b 	bl	8004fe6 <lv_obj_get_content_width>
 8014330:	f8b8 3084 	ldrh.w	r3, [r8, #132]	; 0x84
 8014334:	4681      	mov	r9, r0
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014336:	4640      	mov	r0, r8
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8014338:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801433a:	f7f0 fe6e 	bl	800501a <lv_obj_get_content_height>
 801433e:	4607      	mov	r7, r0
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8014340:	4640      	mov	r0, r8
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014342:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8014346:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 801434a:	f7f1 fee9 	bl	8006120 <lv_obj_get_scroll_left>
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801434e:	f9b8 3016 	ldrsh.w	r3, [r8, #22]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8014352:	9008      	str	r0, [sp, #32]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8014354:	4640      	mov	r0, r8
 8014356:	930b      	str	r3, [sp, #44]	; 0x2c
 8014358:	f7f1 fe8c 	bl	8006074 <lv_obj_get_scroll_top>
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 801435c:	ee18 2a10 	vmov	r2, s16
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8014360:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_mask, &obj->coords, clip_area);
 8014362:	ee18 1a90 	vmov	r1, s17
 8014366:	a81a      	add	r0, sp, #104	; 0x68
 8014368:	f002 fe85 	bl	8017076 <_lv_area_intersect>
    if(mask_ret == false) return;
 801436c:	2800      	cmp	r0, #0
 801436e:	f43f ab23 	beq.w	80139b8 <lv_chart_event+0x324>
    lv_draw_line_dsc_init(&line_dsc_default);
 8014372:	a820      	add	r0, sp, #128	; 0x80
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8014374:	437e      	muls	r6, r7
    lv_draw_line_dsc_init(&line_dsc_default);
 8014376:	f7f6 fdfd 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801437a:	aa20      	add	r2, sp, #128	; 0x80
 801437c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8014380:	4640      	mov	r0, r8
 8014382:	f7f0 fb81 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 8014386:	a82d      	add	r0, sp, #180	; 0xb4
 8014388:	f7f8 fc2e 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801438c:	aa2d      	add	r2, sp, #180	; 0xb4
 801438e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8014392:	4640      	mov	r0, r8
 8014394:	f7f0 f994 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8014398:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801439c:	4640      	mov	r0, r8
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 801439e:	fa15 f584 	uxtah	r5, r5, r4
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80143a2:	f7fe fcb0 	bl	8012d06 <lv_obj_get_style_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80143a6:	f241 0204 	movw	r2, #4100	; 0x1004
 80143aa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80143ae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80143b2:	44ab      	add	fp, r5
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 80143b4:	f340 034f 	sbfx	r3, r0, #1, #16
 80143b8:	4640      	mov	r0, r8
 80143ba:	9303      	str	r3, [sp, #12]
 80143bc:	f7f3 f884 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 80143c0:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 80143c4:	fa03 f080 	sxtah	r0, r3, r0
 80143c8:	1043      	asrs	r3, r0, #1
 80143ca:	9304      	str	r3, [sp, #16]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 80143cc:	f9bd 3082 	ldrsh.w	r3, [sp, #130]	; 0x82
 80143d0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80143d4:	428a      	cmp	r2, r1
 80143d6:	bfa8      	it	ge
 80143d8:	460a      	movge	r2, r1
 80143da:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 80143de:	b212      	sxth	r2, r2
 80143e0:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 80143e4:	bfc2      	ittt	gt
 80143e6:	f89d 2089 	ldrbgt.w	r2, [sp, #137]	; 0x89
 80143ea:	f042 0210 	orrgt.w	r2, r2, #16
 80143ee:	f88d 2089 	strbgt.w	r2, [sp, #137]	; 0x89
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	bf02      	ittt	eq
 80143f6:	f89d 3089 	ldrbeq.w	r3, [sp, #137]	; 0x89
 80143fa:	f043 0310 	orreq.w	r3, r3, #16
 80143fe:	f88d 3089 	strbeq.w	r3, [sp, #137]	; 0x89
    lv_coord_t w     = (lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8014402:	9b05      	ldr	r3, [sp, #20]
 8014404:	fb03 f309 	mul.w	r3, r3, r9
 8014408:	f343 230f 	sbfx	r3, r3, #8, #16
 801440c:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = (lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801440e:	1233      	asrs	r3, r6, #8
 8014410:	9306      	str	r3, [sp, #24]
 8014412:	f346 230f 	sbfx	r3, r6, #8, #16
 8014416:	9307      	str	r3, [sp, #28]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 8014418:	9b08      	ldr	r3, [sp, #32]
 801441a:	ebab 0b03 	sub.w	fp, fp, r3
 801441e:	fa1f f38b 	uxth.w	r3, fp
 8014422:	9308      	str	r3, [sp, #32]
 8014424:	fa0f f38b 	sxth.w	r3, fp
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014428:	f647 7bff 	movw	fp, #32767	; 0x7fff
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 801442c:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801442e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014430:	fa13 f484 	uxtah	r4, r3, r4
 8014434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014436:	441c      	add	r4, r3
 8014438:	eba4 0a0a 	sub.w	sl, r4, sl
 801443c:	fa1f f38a 	uxth.w	r3, sl
 8014440:	930a      	str	r3, [sp, #40]	; 0x28
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8014442:	f108 0324 	add.w	r3, r8, #36	; 0x24
 8014446:	4618      	mov	r0, r3
 8014448:	ee09 3a10 	vmov	s18, r3
 801444c:	f003 f962 	bl	8017714 <_lv_ll_get_tail>
 8014450:	4604      	mov	r4, r0
 8014452:	2c00      	cmp	r4, #0
 8014454:	f43f aab0 	beq.w	80139b8 <lv_chart_event+0x324>
        if (ser->hidden) continue;
 8014458:	7b25      	ldrb	r5, [r4, #12]
 801445a:	f015 0501 	ands.w	r5, r5, #1
 801445e:	d006      	beq.n	801446e <lv_chart_event+0xdda>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8014460:	4621      	mov	r1, r4
 8014462:	ee19 0a10 	vmov	r0, s18
 8014466:	f003 f95c 	bl	8017722 <_lv_ll_get_prev>
 801446a:	4604      	mov	r4, r0
 801446c:	e7f1      	b.n	8014452 <lv_chart_event+0xdbe>
        line_dsc_default.color = ser->color;
 801446e:	8923      	ldrh	r3, [r4, #8]
 8014470:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        point_dsc_default.bg_color = ser->color;
 8014474:	8923      	ldrh	r3, [r4, #8]
 8014476:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801447a:	f898 3088 	ldrb.w	r3, [r8, #136]	; 0x88
 801447e:	071e      	lsls	r6, r3, #28
        p1.x = x_ofs;
 8014480:	9b09      	ldr	r3, [sp, #36]	; 0x24
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8014482:	bf58      	it	pl
 8014484:	f9b4 500a 	ldrshpl.w	r5, [r4, #10]
        p1.x = x_ofs;
 8014488:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
        p2.x = x_ofs;
 801448c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 8014490:	6863      	ldr	r3, [r4, #4]
 8014492:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 8014496:	2b0a      	cmp	r3, #10
 8014498:	d079      	beq.n	801458e <lv_chart_event+0xefa>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801449a:	7b23      	ldrb	r3, [r4, #12]
 801449c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80144a0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80144a4:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 80144a8:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 80144ac:	6823      	ldr	r3, [r4, #0]
 80144ae:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 80144b2:	9b05      	ldr	r3, [sp, #20]
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	2300      	movs	r3, #0
 80144b8:	f003 f9fd 	bl	80178b6 <lv_map>
            p2.x += x_ofs;
 80144bc:	9b08      	ldr	r3, [sp, #32]
 80144be:	4418      	add	r0, r3
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 80144c0:	7b23      	ldrb	r3, [r4, #12]
 80144c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
            p2.x += x_ofs;
 80144c6:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 80144ca:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80144ce:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 80144d2:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 80144d6:	6863      	ldr	r3, [r4, #4]
 80144d8:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 80144dc:	9b07      	ldr	r3, [sp, #28]
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	2300      	movs	r3, #0
 80144e2:	f003 f9e8 	bl	80178b6 <lv_map>
            p2.y += y_ofs;
 80144e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144e8:	9a06      	ldr	r2, [sp, #24]
 80144ea:	4413      	add	r3, r2
 80144ec:	1a18      	subs	r0, r3, r0
 80144ee:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
        lv_obj_draw_dsc_init(&dsc, clip_area);
 80144f2:	ee18 1a10 	vmov	r1, s16
 80144f6:	a83a      	add	r0, sp, #232	; 0xe8
 80144f8:	f7f0 fbc6 	bl	8004c88 <lv_obj_draw_dsc_init>
        dsc.part = LV_PART_ITEMS;
 80144fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
                p2.y += y_ofs;
 8014500:	9a06      	ldr	r2, [sp, #24]
        lv_coord_t p_act = start_point;
 8014502:	46aa      	mov	sl, r5
        dsc.part = LV_PART_ITEMS;
 8014504:	9347      	str	r3, [sp, #284]	; 0x11c
        dsc.line_dsc = &line_dsc_default;
 8014506:	ab20      	add	r3, sp, #128	; 0x80
        for(i = 0; i < chart->point_cnt; i++) {
 8014508:	2600      	movs	r6, #0
        dsc.sub_part_ptr = ser;
 801450a:	944b      	str	r4, [sp, #300]	; 0x12c
        dsc.line_dsc = &line_dsc_default;
 801450c:	933e      	str	r3, [sp, #248]	; 0xf8
        dsc.rect_dsc = &point_dsc_default;
 801450e:	ab2d      	add	r3, sp, #180	; 0xb4
 8014510:	933c      	str	r3, [sp, #240]	; 0xf0
                p2.y += y_ofs;
 8014512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014514:	4413      	add	r3, r2
 8014516:	930c      	str	r3, [sp, #48]	; 0x30
 8014518:	fa1f f986 	uxth.w	r9, r6
        for(i = 0; i < chart->point_cnt; i++) {
 801451c:	f8b8 3082 	ldrh.w	r3, [r8, #130]	; 0x82
 8014520:	4599      	cmp	r9, r3
 8014522:	d338      	bcc.n	8014596 <lv_chart_event+0xf02>
        if(i == chart->point_cnt) {
 8014524:	d19c      	bne.n	8014460 <lv_chart_event+0xdcc>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014526:	6862      	ldr	r2, [r4, #4]
 8014528:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
 801452c:	455b      	cmp	r3, fp
 801452e:	d097      	beq.n	8014460 <lv_chart_event+0xdcc>
                point_area.x1 = p2.x - point_w;
 8014530:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                dsc.draw_area = &point_area;
 8014534:	ad1d      	add	r5, sp, #116	; 0x74
                point_area.x1 = p2.x - point_w;
 8014536:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                dsc.id = i - 1;
 801453a:	f109 36ff 	add.w	r6, r9, #4294967295
                dsc.draw_area = &point_area;
 801453e:	953b      	str	r5, [sp, #236]	; 0xec
                point_area.x1 = p2.x - point_w;
 8014540:	1a58      	subs	r0, r3, r1
                point_area.x2 = p2.x + point_w;
 8014542:	440b      	add	r3, r1
                point_area.y1 = p2.y - point_h;
 8014544:	f8bd 1010 	ldrh.w	r1, [sp, #16]
                point_area.x2 = p2.x + point_w;
 8014548:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p2.y - point_h;
 801454c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
                point_area.x1 = p2.x - point_w;
 8014550:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
                point_area.y1 = p2.y - point_h;
 8014554:	1a58      	subs	r0, r3, r1
                point_area.y2 = p2.y + point_h;
 8014556:	440b      	add	r3, r1
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014558:	211a      	movs	r1, #26
                dsc.id = i - 1;
 801455a:	9648      	str	r6, [sp, #288]	; 0x120
                point_area.y2 = p2.y + point_h;
 801455c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.p1 = NULL;
 8014560:	2300      	movs	r3, #0
                point_area.y1 = p2.y - point_h;
 8014562:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014566:	4640      	mov	r0, r8
                dsc.p2 = NULL;
 8014568:	e9cd 3341 	strd	r3, r3, [sp, #260]	; 0x104
                dsc.value = ser->y_points[p_act];
 801456c:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014570:	aa3a      	add	r2, sp, #232	; 0xe8
                dsc.value = ser->y_points[p_act];
 8014572:	934a      	str	r3, [sp, #296]	; 0x128
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014574:	f7ed fd58 	bl	8002028 <lv_event_send>
                lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014578:	aa2d      	add	r2, sp, #180	; 0xb4
 801457a:	a91a      	add	r1, sp, #104	; 0x68
 801457c:	4628      	mov	r0, r5
 801457e:	f7f8 fb55 	bl	800cc2c <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8014582:	aa3a      	add	r2, sp, #232	; 0xe8
 8014584:	211b      	movs	r1, #27
 8014586:	4640      	mov	r0, r8
 8014588:	f7ed fd4e 	bl	8002028 <lv_event_send>
 801458c:	e768      	b.n	8014460 <lv_chart_event+0xdcc>
            p2.x = LV_COORD_MIN;
 801458e:	f04f 23a0 	mov.w	r3, #2684395520	; 0xa000a000
 8014592:	9316      	str	r3, [sp, #88]	; 0x58
 8014594:	e7ad      	b.n	80144f2 <lv_chart_event+0xe5e>
            p1.x = p2.x;
 8014596:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014598:	9215      	str	r2, [sp, #84]	; 0x54
            p_act = (start_point + i) % chart->point_cnt;
 801459a:	b2b2      	uxth	r2, r6
 801459c:	920b      	str	r2, [sp, #44]	; 0x2c
 801459e:	fa15 f286 	uxtah	r2, r5, r6
 80145a2:	fb92 f7f3 	sdiv	r7, r2, r3
 80145a6:	fb03 2717 	mls	r7, r3, r7, r2
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 80145aa:	6863      	ldr	r3, [r4, #4]
            p_act = (start_point + i) % chart->point_cnt;
 80145ac:	b23f      	sxth	r7, r7
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 80145ae:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 80145b2:	4558      	cmp	r0, fp
 80145b4:	d079      	beq.n	80146aa <lv_chart_event+0x1016>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 80145b6:	7b23      	ldrb	r3, [r4, #12]
 80145b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80145bc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80145c0:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 80145c4:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 80145c8:	9b07      	ldr	r3, [sp, #28]
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	2300      	movs	r3, #0
 80145ce:	f003 f972 	bl	80178b6 <lv_map>
                p2.y += y_ofs;
 80145d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145d4:	1a18      	subs	r0, r3, r0
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80145d6:	7b23      	ldrb	r3, [r4, #12]
 80145d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
                p2.y += y_ofs;
 80145dc:	f8ad 005a 	strh.w	r0, [sp, #90]	; 0x5a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80145e0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80145e4:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 80145e8:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 80145ec:	6823      	ldr	r3, [r4, #0]
 80145ee:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 80145f2:	9b05      	ldr	r3, [sp, #20]
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	2300      	movs	r3, #0
 80145f8:	f003 f95d 	bl	80178b6 <lv_map>
                p2.x += x_ofs;
 80145fc:	9b08      	ldr	r3, [sp, #32]
 80145fe:	4418      	add	r0, r3
 8014600:	f8ad 0058 	strh.w	r0, [sp, #88]	; 0x58
            if(i != 0) {
 8014604:	f1b9 0f00 	cmp.w	r9, #0
 8014608:	d04f      	beq.n	80146aa <lv_chart_event+0x1016>
                point_area.x1 = p1.x - point_w;
 801460a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801460e:	ea4f 094a 	mov.w	r9, sl, lsl #1
                point_area.x1 = p1.x - point_w;
 8014612:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8014616:	4640      	mov	r0, r8
                point_area.x1 = p1.x - point_w;
 8014618:	1a99      	subs	r1, r3, r2
                point_area.x2 = p1.x + point_w;
 801461a:	4413      	add	r3, r2
                point_area.y1 = p1.y - point_h;
 801461c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
                point_area.x2 = p1.x + point_w;
 8014620:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                point_area.y1 = p1.y - point_h;
 8014624:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
                point_area.x1 = p1.x - point_w;
 8014628:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
                point_area.y1 = p1.y - point_h;
 801462c:	1a99      	subs	r1, r3, r2
                point_area.y2 = p1.y + point_h;
 801462e:	4413      	add	r3, r2
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014630:	6862      	ldr	r2, [r4, #4]
                point_area.y2 = p1.y + point_h;
 8014632:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
                dsc.id = i - 1;
 8014636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                point_area.y1 = p1.y - point_h;
 8014638:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
                dsc.id = i - 1;
 801463c:	3b01      	subs	r3, #1
 801463e:	9348      	str	r3, [sp, #288]	; 0x120
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014640:	f932 301a 	ldrsh.w	r3, [r2, sl, lsl #1]
                dsc.draw_area = &point_area;
 8014644:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014648:	f932 2017 	ldrsh.w	r2, [r2, r7, lsl #1]
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801464c:	455b      	cmp	r3, fp
                dsc.value = ser->y_points[p_prev];
 801464e:	934a      	str	r3, [sp, #296]	; 0x128
                dsc.draw_area = &point_area;
 8014650:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8014654:	bf0c      	ite	eq
 8014656:	2100      	moveq	r1, #0
 8014658:	a915      	addne	r1, sp, #84	; 0x54
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801465a:	455a      	cmp	r2, fp
                dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801465c:	9141      	str	r1, [sp, #260]	; 0x104
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801465e:	f04f 011a 	mov.w	r1, #26
                dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8014662:	bf0c      	ite	eq
 8014664:	2200      	moveq	r2, #0
 8014666:	aa16      	addne	r2, sp, #88	; 0x58
 8014668:	9242      	str	r2, [sp, #264]	; 0x108
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801466a:	aa3a      	add	r2, sp, #232	; 0xe8
 801466c:	f7ed fcdc 	bl	8002028 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8014670:	6863      	ldr	r3, [r4, #4]
 8014672:	f933 2009 	ldrsh.w	r2, [r3, r9]
 8014676:	455a      	cmp	r2, fp
 8014678:	d012      	beq.n	80146a0 <lv_chart_event+0x100c>
 801467a:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 801467e:	455b      	cmp	r3, fp
 8014680:	d00e      	beq.n	80146a0 <lv_chart_event+0x100c>
                    lv_draw_line(&p1, &p2, &series_mask, &line_dsc_default);
 8014682:	ab20      	add	r3, sp, #128	; 0x80
 8014684:	aa1a      	add	r2, sp, #104	; 0x68
 8014686:	a916      	add	r1, sp, #88	; 0x58
 8014688:	a815      	add	r0, sp, #84	; 0x54
 801468a:	f7f6 fc7f 	bl	800af8c <lv_draw_line>
                    if(point_w && point_h) {
 801468e:	9b03      	ldr	r3, [sp, #12]
 8014690:	b133      	cbz	r3, 80146a0 <lv_chart_event+0x100c>
 8014692:	9b04      	ldr	r3, [sp, #16]
 8014694:	b123      	cbz	r3, 80146a0 <lv_chart_event+0x100c>
                        lv_draw_rect(&point_area, &series_mask, &point_dsc_default);
 8014696:	aa2d      	add	r2, sp, #180	; 0xb4
 8014698:	a91a      	add	r1, sp, #104	; 0x68
 801469a:	4650      	mov	r0, sl
 801469c:	f7f8 fac6 	bl	800cc2c <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 80146a0:	aa3a      	add	r2, sp, #232	; 0xe8
 80146a2:	211b      	movs	r1, #27
 80146a4:	4640      	mov	r0, r8
 80146a6:	f7ed fcbf 	bl	8002028 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 80146aa:	3601      	adds	r6, #1
            p_act = (start_point + i) % chart->point_cnt;
 80146ac:	46ba      	mov	sl, r7
 80146ae:	e733      	b.n	8014518 <lv_chart_event+0xe84>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 80146b0:	88a2      	ldrh	r2, [r4, #4]
 80146b2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80146b6:	429a      	cmp	r2, r3
 80146b8:	f43f aa69 	beq.w	8013b8e <lv_chart_event+0x4fa>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 80146bc:	ab18      	add	r3, sp, #96	; 0x60
 80146be:	68a1      	ldr	r1, [r4, #8]
 80146c0:	4640      	mov	r0, r8
 80146c2:	f7fe fc30 	bl	8012f26 <lv_chart_get_point_pos_by_id>
            cx = p.x;
 80146c6:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
            cy = p.y;
 80146ca:	f9bd 5062 	ldrsh.w	r5, [sp, #98]	; 0x62
 80146ce:	f7ff b9dd 	b.w	8013a8c <lv_chart_event+0x3f8>
 80146d2:	bf00      	nop

080146d4 <fast_hsv2rgb.part.0>:
 * We fold all symmetry by swapping the R, G, B pointers so that the code is the same for all sextants.
 * We replace division by 255 by a division by 256, a.k.a a shift right by 8 bits.
 * This is wrong, but since this is only used to compute the pixels on the screen and not the final color, it's ok.
 */
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b);
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
 80146d4:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if (!s) { *r = *g = *b = v; return; }

    uint8_t sextant = h >> 8;
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80146d6:	0587      	lsls	r7, r0, #22
    uint8_t sextant = h >> 8;
 80146d8:	ea4f 2510 	mov.w	r5, r0, lsr #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80146dc:	bf48      	it	mi
 80146de:	461f      	movmi	r7, r3
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t *r, uint8_t *g , uint8_t *b)
 80146e0:	e9dd 4605 	ldrd	r4, r6, [sp, #20]
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 80146e4:	bf44      	itt	mi
 80146e6:	4633      	movmi	r3, r6
 80146e8:	463e      	movmi	r6, r7
 80146ea:	076f      	lsls	r7, r5, #29
 80146ec:	bf42      	ittt	mi
 80146ee:	4627      	movmi	r7, r4
 80146f0:	4634      	movmi	r4, r6
 80146f2:	463e      	movmi	r6, r7
 80146f4:	f015 0f06 	tst.w	r5, #6
 80146f8:	f005 0701 	and.w	r7, r5, #1
 80146fc:	d104      	bne.n	8014708 <fast_hsv2rgb.part.0+0x34>
 80146fe:	b92f      	cbnz	r7, 801470c <fast_hsv2rgb.part.0+0x38>
 8014700:	461d      	mov	r5, r3
 8014702:	4623      	mov	r3, r4
 8014704:	462c      	mov	r4, r5
 8014706:	e001      	b.n	801470c <fast_hsv2rgb.part.0+0x38>
 8014708:	2f00      	cmp	r7, #0
 801470a:	d1f9      	bne.n	8014700 <fast_hsv2rgb.part.0+0x2c>

    *g = v;
 801470c:	7022      	strb	r2, [r4, #0]

    uint8_t bb = ~s;
 801470e:	43cc      	mvns	r4, r1
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 8014710:	b295      	uxth	r5, r2
 8014712:	b2e4      	uxtb	r4, r4
 8014714:	b289      	uxth	r1, r1
    *b = ww >> 8;
 8014716:	4362      	muls	r2, r4
 8014718:	b2c0      	uxtb	r0, r0
 801471a:	0a12      	lsrs	r2, r2, #8
 801471c:	7032      	strb	r2, [r6, #0]

    uint8_t h_frac = h & 0xff;

    if(!(sextant & 1)) {
 801471e:	b957      	cbnz	r7, 8014736 <fast_hsv2rgb.part.0+0x62>
        /*Up slope*/
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8014720:	b938      	cbnz	r0, 8014732 <fast_hsv2rgb.part.0+0x5e>
 8014722:	0209      	lsls	r1, r1, #8
    } else {
        /*Down slope*/
        ww = s * h_frac;
    }
    bb = ww >> 8;
    bb = ~bb;
 8014724:	ea6f 2111 	mvn.w	r1, r1, lsr #8
    ww = v * bb;
 8014728:	b2c9      	uxtb	r1, r1
    *r = ww >> 8;
 801472a:	4369      	muls	r1, r5
 801472c:	0a09      	lsrs	r1, r1, #8
 801472e:	7019      	strb	r1, [r3, #0]
}
 8014730:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8014732:	4240      	negs	r0, r0
 8014734:	b2c0      	uxtb	r0, r0
        ww = s * h_frac;
 8014736:	4341      	muls	r1, r0
 8014738:	e7f4      	b.n	8014724 <fast_hsv2rgb.part.0+0x50>

0801473a <get_knob_area>:
{
 801473a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801473e:	460d      	mov	r5, r1
 8014740:	4606      	mov	r6, r0
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014742:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014746:	2100      	movs	r1, #0
 8014748:	4628      	mov	r0, r5
 801474a:	f7f2 febd 	bl	80074c8 <lv_obj_get_style_prop>
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 801474e:	f3c0 34c0 	ubfx	r4, r0, #15, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014752:	f241 0212 	movw	r2, #4114	; 0x1012
 8014756:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801475a:	fa04 f080 	sxtah	r0, r4, r0
 801475e:	f3c0 044f 	ubfx	r4, r0, #1, #16
 8014762:	4628      	mov	r0, r5
 8014764:	f7f2 feb0 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014768:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801476c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801476e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014772:	4628      	mov	r0, r5
 8014774:	f7f2 fea8 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014778:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801477c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801477e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014782:	4628      	mov	r0, r5
 8014784:	f7f2 fea0 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014788:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801478c:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801478e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014792:	4628      	mov	r0, r5
 8014794:	f7f2 fe98 	bl	80074c8 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8014798:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801479a:	8aaa      	ldrh	r2, [r5, #20]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 801479c:	4427      	add	r7, r4
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801479e:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80147a0:	441a      	add	r2, r3
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80147a2:	8aeb      	ldrh	r3, [r5, #22]
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80147a4:	eb04 0509 	add.w	r5, r4, r9
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80147a8:	440b      	add	r3, r1
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80147aa:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80147ac:	eb04 0108 	add.w	r1, r4, r8
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 80147b0:	4404      	add	r4, r0
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80147b2:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 80147b4:	1b55      	subs	r5, r2, r5
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 80147b6:	443a      	add	r2, r7
}
 80147b8:	4630      	mov	r0, r6
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 80147ba:	1a59      	subs	r1, r3, r1
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 80147bc:	441c      	add	r4, r3
    return knob_area;
 80147be:	8035      	strh	r5, [r6, #0]
 80147c0:	8071      	strh	r1, [r6, #2]
 80147c2:	80b2      	strh	r2, [r6, #4]
 80147c4:	80f4      	strh	r4, [r6, #6]
}
 80147c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080147ca <refr_knob_pos>:
{
 80147ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147cc:	4605      	mov	r5, r0
    lv_area_t knob_area = get_knob_area(obj);
 80147ce:	4601      	mov	r1, r0
 80147d0:	4668      	mov	r0, sp
 80147d2:	f7ff ffb2 	bl	801473a <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 80147d6:	4669      	mov	r1, sp
 80147d8:	4628      	mov	r0, r5
 80147da:	f7f0 fd33 	bl	8005244 <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 80147de:	4628      	mov	r0, r5
 80147e0:	f7f0 fbf5 	bl	8004fce <lv_obj_get_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80147e4:	f44f 6205 	mov.w	r2, #2128	; 0x850
 80147e8:	4607      	mov	r7, r0
 80147ea:	2100      	movs	r1, #0
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7f2 fe6b 	bl	80074c8 <lv_obj_get_style_prop>

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 80147f2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)v.num;
 80147f6:	b200      	sxth	r0, r0
 80147f8:	f003 0303 	and.w	r3, r3, #3
    lv_coord_t r = (w - scale_w) / 2;
 80147fc:	1a3e      	subs	r6, r7, r0
    switch(colorwheel->mode) {
 80147fe:	2b01      	cmp	r3, #1
    lv_coord_t r = (w - scale_w) / 2;
 8014800:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8014804:	ea4f 0666 	mov.w	r6, r6, asr #1
    switch(colorwheel->mode) {
 8014808:	d021      	beq.n	801484e <refr_knob_pos+0x84>
 801480a:	2b02      	cmp	r3, #2
 801480c:	d029      	beq.n	8014862 <refr_knob_pos+0x98>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 801480e:	8cac      	ldrh	r4, [r5, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 8014810:	b220      	sxth	r0, r4
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 8014812:	345a      	adds	r4, #90	; 0x5a
 8014814:	f002 ffa2 	bl	801775c <lv_trigo_sin>
 8014818:	4370      	muls	r0, r6
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 801481a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 801481e:	13c0      	asrs	r0, r0, #15
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8014820:	f3c7 074f 	ubfx	r7, r7, #1, #16
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 8014824:	8528      	strh	r0, [r5, #40]	; 0x28
 8014826:	b220      	sxth	r0, r4
 8014828:	f002 ff98 	bl	801775c <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 801482c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 801482e:	4370      	muls	r0, r6
    lv_area_t knob_area = get_knob_area(obj);
 8014830:	4629      	mov	r1, r5
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8014832:	443b      	add	r3, r7
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 8014834:	eb07 37e0 	add.w	r7, r7, r0, asr #15
    lv_area_t knob_area = get_knob_area(obj);
 8014838:	4668      	mov	r0, sp
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 801483a:	852b      	strh	r3, [r5, #40]	; 0x28
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 801483c:	856f      	strh	r7, [r5, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 801483e:	f7ff ff7c 	bl	801473a <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 8014842:	4669      	mov	r1, sp
 8014844:	4628      	mov	r0, r5
 8014846:	f7f0 fcfd 	bl	8005244 <lv_obj_invalidate_area>
}
 801484a:	b003      	add	sp, #12
 801484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 801484e:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
            break;
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 8014852:	f44f 74b4 	mov.w	r4, #360	; 0x168
 8014856:	4344      	muls	r4, r0
 8014858:	2064      	movs	r0, #100	; 0x64
 801485a:	fbb4 f4f0 	udiv	r4, r4, r0
 801485e:	b2a4      	uxth	r4, r4
            break;
 8014860:	e7d6      	b.n	8014810 <refr_knob_pos+0x46>
            angle = (colorwheel->hsv.v * 360) / 100 ;
 8014862:	f895 0027 	ldrb.w	r0, [r5, #39]	; 0x27
 8014866:	e7f4      	b.n	8014852 <refr_knob_pos+0x88>

08014868 <lv_colorwheel_constructor>:
    colorwheel->hsv.h = 0;
 8014868:	4b0f      	ldr	r3, [pc, #60]	; (80148a8 <lv_colorwheel_constructor+0x40>)
    colorwheel->knob.recolor = create_knob_recolor;
 801486a:	4a10      	ldr	r2, [pc, #64]	; (80148ac <lv_colorwheel_constructor+0x44>)
{
 801486c:	b510      	push	{r4, lr}
    colorwheel->hsv.h = 0;
 801486e:	624b      	str	r3, [r1, #36]	; 0x24
{
 8014870:	460c      	mov	r4, r1
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 8014872:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    colorwheel->knob.recolor = create_knob_recolor;
 8014876:	7812      	ldrb	r2, [r2, #0]
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014878:	4620      	mov	r0, r4
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 801487a:	f023 0307 	bic.w	r3, r3, #7
 801487e:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 8014882:	2300      	movs	r3, #0
    colorwheel->last_change_time = 0;
 8014884:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    colorwheel->knob.recolor = create_knob_recolor;
 8014888:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801488c:	f362 0300 	bfi	r3, r2, #0, #1
 8014890:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014898:	f7ef fae6 	bl	8003e68 <lv_obj_add_flag>
    refr_knob_pos(obj);
 801489c:	4620      	mov	r0, r4
}
 801489e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    refr_knob_pos(obj);
 80148a2:	f7ff bf92 	b.w	80147ca <refr_knob_pos>
 80148a6:	bf00      	nop
 80148a8:	64640000 	.word	0x64640000
 80148ac:	20002b28 	.word	0x20002b28

080148b0 <lv_colorwheel_set_hsv>:
{
 80148b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148b2:	0e0b      	lsrs	r3, r1, #24
 80148b4:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80148b8:	9101      	str	r1, [sp, #4]
 80148ba:	b289      	uxth	r1, r1
 80148bc:	4604      	mov	r4, r0
    if(hsv.h > 360) hsv.h %= 360;
 80148be:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80148c2:	bf82      	ittt	hi
 80148c4:	f44f 70b4 	movhi.w	r0, #360	; 0x168
 80148c8:	fbb1 f5f0 	udivhi	r5, r1, r0
 80148cc:	fb00 1115 	mlshi	r1, r0, r5, r1
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80148d0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    if(hsv.h > 360) hsv.h %= 360;
 80148d2:	bf88      	it	hi
 80148d4:	b289      	uxthhi	r1, r1
    if(hsv.s > 100) hsv.s = 100;
 80148d6:	2a64      	cmp	r2, #100	; 0x64
 80148d8:	bf28      	it	cs
 80148da:	2264      	movcs	r2, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 80148dc:	2b64      	cmp	r3, #100	; 0x64
 80148de:	bf28      	it	cs
 80148e0:	2364      	movcs	r3, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 80148e2:	4288      	cmp	r0, r1
 80148e4:	d00d      	beq.n	8014902 <lv_colorwheel_set_hsv+0x52>
    refr_knob_pos(obj);
 80148e6:	4620      	mov	r0, r4
    colorwheel->hsv = hsv;
 80148e8:	84a1      	strh	r1, [r4, #36]	; 0x24
 80148ea:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
 80148ee:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 80148f2:	f7ff ff6a 	bl	80147ca <refr_knob_pos>
    lv_obj_invalidate(obj);
 80148f6:	4620      	mov	r0, r4
 80148f8:	f7f0 fcbe 	bl	8005278 <lv_obj_invalidate>
    return true;
 80148fc:	2001      	movs	r0, #1
}
 80148fe:	b003      	add	sp, #12
 8014900:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8014902:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8014904:	f88d 2006 	strb.w	r2, [sp, #6]
 8014908:	f88d 3007 	strb.w	r3, [sp, #7]
 801490c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014910:	4285      	cmp	r5, r0
 8014912:	d1e8      	bne.n	80148e6 <lv_colorwheel_set_hsv+0x36>
 8014914:	2000      	movs	r0, #0
 8014916:	e7f2      	b.n	80148fe <lv_colorwheel_set_hsv+0x4e>

08014918 <lv_colorwheel_get_rgb>:
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 8014918:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 801491c:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 8014920:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8014922:	f002 bd41 	b.w	80173a8 <lv_color_hsv_to_rgb>
	...

08014928 <lv_colorwheel_event>:
{
 8014928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801492c:	488a      	ldr	r0, [pc, #552]	; (8014b58 <lv_colorwheel_event+0x230>)
{
 801492e:	460d      	mov	r5, r1
 8014930:	ed2d 8b04 	vpush	{d8-d9}
 8014934:	b0a7      	sub	sp, #156	; 0x9c
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8014936:	f7ed fb00 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801493a:	2801      	cmp	r0, #1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801493c:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return;
 801493e:	d13e      	bne.n	80149be <lv_colorwheel_event+0x96>
    lv_event_code_t code = lv_event_get_code(e);
 8014940:	4628      	mov	r0, r5
 8014942:	f7ed fb93 	bl	800206c <lv_event_get_code>
 8014946:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8014948:	4628      	mov	r0, r5
 801494a:	f7ed fb8d 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801494e:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 8014950:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8014952:	d139      	bne.n	80149c8 <lv_colorwheel_event+0xa0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014954:	f241 0212 	movw	r2, #4114	; 0x1012
 8014958:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801495c:	f7f2 fdb4 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014960:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 8014964:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014968:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801496c:	4620      	mov	r0, r4
 801496e:	f7f2 fdab 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014972:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 8014976:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014978:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801497c:	4620      	mov	r0, r4
 801497e:	f7f2 fda3 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014982:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 8014986:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014988:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801498c:	4620      	mov	r0, r4
 801498e:	f7f2 fd9b 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014992:	b204      	sxth	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 8014994:	4628      	mov	r0, r5
 8014996:	f7ed fb6b 	bl	8002070 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 801499a:	4546      	cmp	r6, r8
 801499c:	4633      	mov	r3, r6
        *s = LV_MAX(*s, knob_pad);
 801499e:	f9b0 2000 	ldrsh.w	r2, [r0]
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 80149a2:	bfb8      	it	lt
 80149a4:	4643      	movlt	r3, r8
 80149a6:	42bb      	cmp	r3, r7
 80149a8:	bfb8      	it	lt
 80149aa:	463b      	movlt	r3, r7
 80149ac:	42a3      	cmp	r3, r4
 80149ae:	bfb8      	it	lt
 80149b0:	4623      	movlt	r3, r4
 80149b2:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 80149b4:	b21b      	sxth	r3, r3
 80149b6:	4293      	cmp	r3, r2
 80149b8:	bfb8      	it	lt
 80149ba:	4613      	movlt	r3, r2
 80149bc:	8003      	strh	r3, [r0, #0]
}
 80149be:	b027      	add	sp, #156	; 0x9c
 80149c0:	ecbd 8b04 	vpop	{d8-d9}
 80149c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80149c8:	2e23      	cmp	r6, #35	; 0x23
 80149ca:	d11c      	bne.n	8014a06 <lv_colorwheel_event+0xde>
        void * param = lv_event_get_param(e);
 80149cc:	4628      	mov	r0, r5
 80149ce:	f7ed fb4f 	bl	8002070 <lv_event_get_param>
 80149d2:	4605      	mov	r5, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80149d4:	4620      	mov	r0, r4
 80149d6:	f7f0 fafa 	bl	8004fce <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80149da:	88ab      	ldrh	r3, [r5, #4]
 80149dc:	882a      	ldrh	r2, [r5, #0]
 80149de:	3301      	adds	r3, #1
 80149e0:	1a9b      	subs	r3, r3, r2
 80149e2:	b21b      	sxth	r3, r3
 80149e4:	4298      	cmp	r0, r3
 80149e6:	d003      	beq.n	80149f0 <lv_colorwheel_event+0xc8>
            refr_knob_pos(obj);
 80149e8:	4620      	mov	r0, r4
        refr_knob_pos(obj);
 80149ea:	f7ff feee 	bl	80147ca <refr_knob_pos>
 80149ee:	e7e6      	b.n	80149be <lv_colorwheel_event+0x96>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 80149f0:	4620      	mov	r0, r4
 80149f2:	f7f0 faf2 	bl	8004fda <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80149f6:	88eb      	ldrh	r3, [r5, #6]
 80149f8:	886a      	ldrh	r2, [r5, #2]
 80149fa:	3301      	adds	r3, #1
 80149fc:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80149fe:	b21b      	sxth	r3, r3
 8014a00:	4298      	cmp	r0, r3
 8014a02:	d1f1      	bne.n	80149e8 <lv_colorwheel_event+0xc0>
 8014a04:	e7db      	b.n	80149be <lv_colorwheel_event+0x96>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8014a06:	2e24      	cmp	r6, #36	; 0x24
 8014a08:	d0ef      	beq.n	80149ea <lv_colorwheel_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 8014a0a:	2e0d      	cmp	r6, #13
 8014a0c:	d166      	bne.n	8014adc <lv_colorwheel_event+0x1b4>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8014a0e:	4628      	mov	r0, r5
 8014a10:	f7ed fb2e 	bl	8002070 <lv_event_get_param>
 8014a14:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8014a16:	f023 0202 	bic.w	r2, r3, #2
 8014a1a:	2a11      	cmp	r2, #17
 8014a1c:	d136      	bne.n	8014a8c <lv_colorwheel_event+0x164>
            hsv_cur = colorwheel->hsv;
 8014a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a20:	9319      	str	r3, [sp, #100]	; 0x64
            switch(colorwheel->mode) {
 8014a22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014a26:	f003 0303 	and.w	r3, r3, #3
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d018      	beq.n	8014a60 <lv_colorwheel_event+0x138>
 8014a2e:	2b02      	cmp	r3, #2
 8014a30:	d021      	beq.n	8014a76 <lv_colorwheel_event+0x14e>
 8014a32:	b94b      	cbnz	r3, 8014a48 <lv_colorwheel_event+0x120>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 8014a34:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8014a36:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a40:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 8014a44:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 8014a48:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	f7ff ff30 	bl	80148b0 <lv_colorwheel_set_hsv>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d0b4      	beq.n	80149be <lv_colorwheel_event+0x96>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8014a54:	2200      	movs	r2, #0
 8014a56:	211c      	movs	r1, #28
 8014a58:	4620      	mov	r0, r4
 8014a5a:	f7ed fae5 	bl	8002028 <lv_event_send>
            if(res != LV_RES_OK) return;
 8014a5e:	e7ae      	b.n	80149be <lv_colorwheel_event+0x96>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 8014a60:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014a64:	2164      	movs	r1, #100	; 0x64
 8014a66:	3301      	adds	r3, #1
 8014a68:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a6c:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 8014a70:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                    break;
 8014a74:	e7e8      	b.n	8014a48 <lv_colorwheel_event+0x120>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 8014a76:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014a7a:	2164      	movs	r1, #100	; 0x64
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a82:	fb01 3312 	mls	r3, r1, r2, r3
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 8014a86:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    break;
 8014a8a:	e7dd      	b.n	8014a48 <lv_colorwheel_event+0x120>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8014a8c:	2b14      	cmp	r3, #20
 8014a8e:	d001      	beq.n	8014a94 <lv_colorwheel_event+0x16c>
 8014a90:	2b12      	cmp	r3, #18
 8014a92:	d194      	bne.n	80149be <lv_colorwheel_event+0x96>
            hsv_cur = colorwheel->hsv;
 8014a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a96:	9319      	str	r3, [sp, #100]	; 0x64
            switch(colorwheel->mode) {
 8014a98:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014a9c:	f003 0303 	and.w	r3, r3, #3
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d00b      	beq.n	8014abc <lv_colorwheel_event+0x194>
 8014aa4:	2b02      	cmp	r3, #2
 8014aa6:	d011      	beq.n	8014acc <lv_colorwheel_event+0x1a4>
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d1cd      	bne.n	8014a48 <lv_colorwheel_event+0x120>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 8014aac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8014aae:	b113      	cbz	r3, 8014ab6 <lv_colorwheel_event+0x18e>
 8014ab0:	3b01      	subs	r3, #1
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	e7c6      	b.n	8014a44 <lv_colorwheel_event+0x11c>
 8014ab6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8014aba:	e7c3      	b.n	8014a44 <lv_colorwheel_event+0x11c>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 8014abc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014ac0:	b113      	cbz	r3, 8014ac8 <lv_colorwheel_event+0x1a0>
 8014ac2:	3b01      	subs	r3, #1
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	e7d3      	b.n	8014a70 <lv_colorwheel_event+0x148>
 8014ac8:	2364      	movs	r3, #100	; 0x64
 8014aca:	e7d1      	b.n	8014a70 <lv_colorwheel_event+0x148>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 8014acc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014ad0:	b113      	cbz	r3, 8014ad8 <lv_colorwheel_event+0x1b0>
 8014ad2:	3b01      	subs	r3, #1
 8014ad4:	b2db      	uxtb	r3, r3
 8014ad6:	e7d6      	b.n	8014a86 <lv_colorwheel_event+0x15e>
 8014ad8:	2364      	movs	r3, #100	; 0x64
 8014ada:	e7d4      	b.n	8014a86 <lv_colorwheel_event+0x15e>
    else if(code == LV_EVENT_PRESSED) {
 8014adc:	2e01      	cmp	r6, #1
 8014ade:	d13d      	bne.n	8014b5c <lv_colorwheel_event+0x234>
        colorwheel->last_change_time = lv_tick_get();
 8014ae0:	f002 f886 	bl	8016bf0 <lv_tick_get>
 8014ae4:	6360      	str	r0, [r4, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 8014ae6:	f7ed fd35 	bl	8002554 <lv_indev_get_act>
 8014aea:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8014aee:	f7ed fd92 	bl	8002616 <lv_indev_get_point>
    lv_indev_t * indev = lv_indev_get_act();
 8014af2:	f7ed fd2f 	bl	8002554 <lv_indev_get_act>
 8014af6:	4605      	mov	r5, r0
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 8014af8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014afa:	f002 f887 	bl	8016c0c <lv_tick_elaps>
 8014afe:	682b      	ldr	r3, [r5, #0]
 8014b00:	8b9b      	ldrh	r3, [r3, #28]
 8014b02:	4298      	cmp	r0, r3
 8014b04:	d21c      	bcs.n	8014b40 <lv_colorwheel_event+0x218>
        hsv_cur = colorwheel->hsv;
 8014b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b08:	9319      	str	r3, [sp, #100]	; 0x64
        switch(colorwheel->mode) {
 8014b0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014b0e:	f003 0303 	and.w	r3, r3, #3
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d018      	beq.n	8014b48 <lv_colorwheel_event+0x220>
 8014b16:	2b02      	cmp	r3, #2
 8014b18:	d01a      	beq.n	8014b50 <lv_colorwheel_event+0x228>
 8014b1a:	b90b      	cbnz	r3, 8014b20 <lv_colorwheel_event+0x1f8>
                hsv_cur.h = 0;
 8014b1c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        lv_indev_wait_release(indev);
 8014b20:	4628      	mov	r0, r5
 8014b22:	f7ed fdb7 	bl	8002694 <lv_indev_wait_release>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 8014b26:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f7ff fec1 	bl	80148b0 <lv_colorwheel_set_hsv>
 8014b2e:	b138      	cbz	r0, 8014b40 <lv_colorwheel_event+0x218>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8014b30:	2200      	movs	r2, #0
 8014b32:	211c      	movs	r1, #28
 8014b34:	4620      	mov	r0, r4
 8014b36:	f7ed fa77 	bl	8002028 <lv_event_send>
            if(res != LV_RES_OK) return res;
 8014b3a:	2801      	cmp	r0, #1
 8014b3c:	f47f af3f 	bne.w	80149be <lv_colorwheel_event+0x96>
    colorwheel->last_click_time = lv_tick_get();
 8014b40:	f002 f856 	bl	8016bf0 <lv_tick_get>
 8014b44:	6320      	str	r0, [r4, #48]	; 0x30
    return LV_RES_OK;
 8014b46:	e73a      	b.n	80149be <lv_colorwheel_event+0x96>
                hsv_cur.s = 100;
 8014b48:	2364      	movs	r3, #100	; 0x64
 8014b4a:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                break;
 8014b4e:	e7e7      	b.n	8014b20 <lv_colorwheel_event+0x1f8>
                hsv_cur.v = 100;
 8014b50:	2364      	movs	r3, #100	; 0x64
 8014b52:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                break;
 8014b56:	e7e3      	b.n	8014b20 <lv_colorwheel_event+0x1f8>
 8014b58:	08025acc 	.word	0x08025acc
    else if(code == LV_EVENT_PRESSING) {
 8014b5c:	2e02      	cmp	r6, #2
 8014b5e:	f040 80cb 	bne.w	8014cf8 <lv_colorwheel_event+0x3d0>
        lv_indev_t * indev = lv_indev_get_act();
 8014b62:	f7ed fcf7 	bl	8002554 <lv_indev_get_act>
        if(indev == NULL) return;
 8014b66:	4606      	mov	r6, r0
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	f43f af28 	beq.w	80149be <lv_colorwheel_event+0x96>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8014b6e:	f7ed fcf7 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8014b72:	2804      	cmp	r0, #4
 8014b74:	d002      	beq.n	8014b7c <lv_colorwheel_event+0x254>
 8014b76:	2802      	cmp	r0, #2
 8014b78:	f040 808e 	bne.w	8014c98 <lv_colorwheel_event+0x370>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	8aa5      	ldrh	r5, [r4, #20]
 8014b80:	f7f0 fa25 	bl	8004fce <lv_obj_get_width>
 8014b84:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014b88:	eb05 0060 	add.w	r0, r5, r0, asr #1
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8014b8c:	8ae5      	ldrh	r5, [r4, #22]
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8014b8e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 8014b92:	4620      	mov	r0, r4
 8014b94:	f7f0 fa21 	bl	8004fda <lv_obj_get_height>
 8014b98:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014b9c:	eb05 0060 	add.w	r0, r5, r0, asr #1
 8014ba0:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 8014ba4:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8014ba6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8014baa:	7e1a      	ldrb	r2, [r3, #24]
 8014bac:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8014bb0:	1a5b      	subs	r3, r3, r1
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	bfb8      	it	lt
 8014bb6:	425b      	neglt	r3, r3
 8014bb8:	4293      	cmp	r3, r2
 8014bba:	dc09      	bgt.n	8014bd0 <lv_colorwheel_event+0x2a8>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 8014bbc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 8014bc0:	f9b4 103a 	ldrsh.w	r1, [r4, #58]	; 0x3a
 8014bc4:	1a5b      	subs	r3, r3, r1
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	bfb8      	it	lt
 8014bca:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	da04      	bge.n	8014bda <lv_colorwheel_event+0x2b2>
            colorwheel->last_change_time = lv_tick_get();
 8014bd0:	f002 f80e 	bl	8016bf0 <lv_tick_get>
            colorwheel->last_press_point.x = p.x;
 8014bd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
            colorwheel->last_change_time = lv_tick_get();
 8014bd6:	6360      	str	r0, [r4, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 8014bd8:	63a3      	str	r3, [r4, #56]	; 0x38
        p.x -= obj->coords.x1;
 8014bda:	8aa2      	ldrh	r2, [r4, #20]
        uint16_t w = lv_obj_get_width(obj);
 8014bdc:	4620      	mov	r0, r4
        p.x -= obj->coords.x1;
 8014bde:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014be2:	1a9b      	subs	r3, r3, r2
        p.y -= obj->coords.y1;
 8014be4:	8ae2      	ldrh	r2, [r4, #22]
        p.x -= obj->coords.x1;
 8014be6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 8014bea:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 8014bee:	1a9b      	subs	r3, r3, r2
 8014bf0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 8014bf4:	f7f0 f9eb 	bl	8004fce <lv_obj_get_width>
 8014bf8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014bfa:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014bfe:	2100      	movs	r1, #0
 8014c00:	4620      	mov	r0, r4
 8014c02:	f7f2 fc61 	bl	80074c8 <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 8014c06:	f3c5 034e 	ubfx	r3, r5, #1, #15
        p.x -= r_in;
 8014c0a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 8014c0e:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
        p.x -= r_in;
 8014c12:	1ad2      	subs	r2, r2, r3
        p.y -= r_in;
 8014c14:	1ac9      	subs	r1, r1, r3
        r_in -= cir_w;
 8014c16:	1a1b      	subs	r3, r3, r0
        p.x -= r_in;
 8014c18:	b212      	sxth	r2, r2
        r_in -= cir_w;
 8014c1a:	b29d      	uxth	r5, r3
 8014c1c:	b21b      	sxth	r3, r3
        p.x -= r_in;
 8014c1e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 8014c22:	b209      	sxth	r1, r1
        if(r_in > LV_DPI_DEF / 2) {
 8014c24:	2b41      	cmp	r3, #65	; 0x41
        p.y -= r_in;
 8014c26:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        if(r_in > LV_DPI_DEF / 2) {
 8014c2a:	dd09      	ble.n	8014c40 <lv_colorwheel_event+0x318>
            lv_coord_t inner = cir_w / 2;
 8014c2c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8014c30:	fa03 f080 	sxtah	r0, r3, r0
            r_in -= inner;
 8014c34:	eba5 0360 	sub.w	r3, r5, r0, asr #1
 8014c38:	b21b      	sxth	r3, r3
 8014c3a:	2b41      	cmp	r3, #65	; 0x41
 8014c3c:	bfb8      	it	lt
 8014c3e:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8014c40:	4349      	muls	r1, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8014c42:	6b60      	ldr	r0, [r4, #52]	; 0x34
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8014c44:	fb03 f503 	mul.w	r5, r3, r3
 8014c48:	fb02 1702 	mla	r7, r2, r2, r1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8014c4c:	f001 ffde 	bl	8016c0c <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 8014c50:	42af      	cmp	r7, r5
 8014c52:	da26      	bge.n	8014ca2 <lv_colorwheel_event+0x37a>
 8014c54:	6833      	ldr	r3, [r6, #0]
 8014c56:	8b9b      	ldrh	r3, [r3, #28]
 8014c58:	4298      	cmp	r0, r3
 8014c5a:	f67f aeb0 	bls.w	80149be <lv_colorwheel_event+0x96>
 8014c5e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014c62:	075a      	lsls	r2, r3, #29
 8014c64:	f53f aeab 	bmi.w	80149be <lv_colorwheel_event+0x96>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8014c68:	f003 0203 	and.w	r2, r3, #3
 8014c6c:	2103      	movs	r1, #3
    refr_knob_pos(obj);
 8014c6e:	4620      	mov	r0, r4
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8014c70:	3201      	adds	r2, #1
 8014c72:	fbb2 f1f1 	udiv	r1, r2, r1
 8014c76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014c7a:	1a52      	subs	r2, r2, r1
 8014c7c:	f362 0301 	bfi	r3, r2, #0, #2
 8014c80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    refr_knob_pos(obj);
 8014c84:	f7ff fda1 	bl	80147ca <refr_knob_pos>
    lv_obj_invalidate(obj);
 8014c88:	4620      	mov	r0, r4
 8014c8a:	f7f0 faf5 	bl	8005278 <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 8014c8e:	f7ed fc61 	bl	8002554 <lv_indev_get_act>
 8014c92:	f7ed fcff 	bl	8002694 <lv_indev_wait_release>
            return;
 8014c96:	e692      	b.n	80149be <lv_colorwheel_event+0x96>
            lv_indev_get_point(indev, &p);
 8014c98:	a912      	add	r1, sp, #72	; 0x48
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	f7ed fcbb 	bl	8002616 <lv_indev_get_point>
 8014ca0:	e780      	b.n	8014ba4 <lv_colorwheel_event+0x27c>
        angle = lv_atan2(p.x, p.y) % 360;
 8014ca2:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 8014ca6:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 8014caa:	f002 fdb8 	bl	801781e <lv_atan2>
 8014cae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014cb2:	fbb0 f3f2 	udiv	r3, r0, r2
 8014cb6:	fb03 0012 	mls	r0, r3, r2, r0
        hsv_cur = colorwheel->hsv;
 8014cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cbc:	9319      	str	r3, [sp, #100]	; 0x64
        angle = lv_atan2(p.x, p.y) % 360;
 8014cbe:	b280      	uxth	r0, r0
        switch(colorwheel->mode) {
 8014cc0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014cc4:	f003 0303 	and.w	r3, r3, #3
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d007      	beq.n	8014cdc <lv_colorwheel_event+0x3b4>
 8014ccc:	2b02      	cmp	r3, #2
 8014cce:	d00c      	beq.n	8014cea <lv_colorwheel_event+0x3c2>
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	f47f aeb9 	bne.w	8014a48 <lv_colorwheel_event+0x120>
                hsv_cur.h = angle;
 8014cd6:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
                break;
 8014cda:	e6b5      	b.n	8014a48 <lv_colorwheel_event+0x120>
                hsv_cur.s = (angle * 100) / 360;
 8014cdc:	2364      	movs	r3, #100	; 0x64
 8014cde:	4358      	muls	r0, r3
 8014ce0:	fbb0 f0f2 	udiv	r0, r0, r2
 8014ce4:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
                break;
 8014ce8:	e6ae      	b.n	8014a48 <lv_colorwheel_event+0x120>
                hsv_cur.v = (angle * 100) / 360;
 8014cea:	2364      	movs	r3, #100	; 0x64
 8014cec:	4358      	muls	r0, r3
 8014cee:	fbb0 f0f2 	udiv	r0, r0, r2
 8014cf2:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
                break;
 8014cf6:	e6a7      	b.n	8014a48 <lv_colorwheel_event+0x120>
    else if(code == LV_EVENT_HIT_TEST) {
 8014cf8:	2e11      	cmp	r6, #17
 8014cfa:	d10c      	bne.n	8014d16 <lv_colorwheel_event+0x3ee>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f7ed f9b7 	bl	8002070 <lv_event_get_param>
 8014d02:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 8014d04:	6801      	ldr	r1, [r0, #0]
 8014d06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014d0a:	f104 0014 	add.w	r0, r4, #20
 8014d0e:	f002 f9fe 	bl	801710e <_lv_area_is_point_on>
 8014d12:	7128      	strb	r0, [r5, #4]
 8014d14:	e653      	b.n	80149be <lv_colorwheel_event+0x96>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8014d16:	2e15      	cmp	r6, #21
 8014d18:	f040 8192 	bne.w	8015040 <lv_colorwheel_event+0x718>
    lv_obj_t * obj = lv_event_get_target(e);
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	f8df b33c 	ldr.w	fp, [pc, #828]	; 801505c <lv_colorwheel_event+0x734>
 8014d22:	f7ed f9a1 	bl	8002068 <lv_event_get_target>
 8014d26:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014d28:	4628      	mov	r0, r5
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014d2a:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8015060 <lv_colorwheel_event+0x738>
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014d2e:	f7ed f99f 	bl	8002070 <lv_event_get_param>
 8014d32:	ee08 0a10 	vmov	s16, r0
    lv_coord_t w = lv_obj_get_width(obj);
 8014d36:	4620      	mov	r0, r4
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014d38:	f8df 9328 	ldr.w	r9, [pc, #808]	; 8015064 <lv_colorwheel_event+0x73c>
    lv_coord_t w = lv_obj_get_width(obj);
 8014d3c:	f7f0 f947 	bl	8004fce <lv_obj_get_width>
 8014d40:	4606      	mov	r6, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8014d42:	4620      	mov	r0, r4
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014d44:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    lv_coord_t h = lv_obj_get_height(obj);
 8014d48:	f7f0 f947 	bl	8004fda <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014d4c:	8aa3      	ldrh	r3, [r4, #20]
 8014d4e:	f346 0a4f 	sbfx	sl, r6, #1, #16
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014d52:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8014d56:	4453      	add	r3, sl
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	9303      	str	r3, [sp, #12]
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014d5c:	8ae3      	ldrh	r3, [r4, #22]
 8014d5e:	eb03 0060 	add.w	r0, r3, r0, asr #1
 8014d62:	b283      	uxth	r3, r0
    lv_draw_line_dsc_init(&line_dsc);
 8014d64:	a80f      	add	r0, sp, #60	; 0x3c
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8014d66:	9304      	str	r3, [sp, #16]
    lv_draw_line_dsc_init(&line_dsc);
 8014d68:	f7f6 f904 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8014d6c:	aa0f      	add	r2, sp, #60	; 0x3c
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4620      	mov	r0, r4
 8014d72:	f7ef fe89 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 8014d76:	f44f 731d 	mov.w	r3, #628	; 0x274
 8014d7a:	f242 1234 	movw	r2, #8500	; 0x2134
 8014d7e:	2100      	movs	r1, #0
 8014d80:	fb1a f303 	smulbb	r3, sl, r3
 8014d84:	4620      	mov	r0, r4
 8014d86:	fb93 f3f2 	sdiv	r3, r3, r2
    line_dsc.width += 2;
 8014d8a:	3302      	adds	r3, #2
 8014d8c:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8014d90:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014d94:	f7f2 fb98 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014d98:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8014d9a:	4606      	mov	r6, r0
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 8014d9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014da0:	f104 0114 	add.w	r1, r4, #20
 8014da4:	a812      	add	r0, sp, #72	; 0x48
    return (lv_coord_t)v.num;
 8014da6:	9306      	str	r3, [sp, #24]
 8014da8:	2300      	movs	r3, #0
 8014daa:	f7f7 fb7f 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 8014dae:	2100      	movs	r1, #0
 8014db0:	a812      	add	r0, sp, #72	; 0x48
 8014db2:	f7f7 fa15 	bl	800c1e0 <lv_draw_mask_add>
    dest->y1 = src->y1;
 8014db6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    mask_area.x1 += cir_w;
 8014dba:	b2b2      	uxth	r2, r6
    dest->y2 = src->y2;
 8014dbc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 8014dc0:	ee08 0a90 	vmov	s17, r0
    dest->x2 = src->x2;
 8014dc4:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    mask_area.x1 += cir_w;
 8014dc8:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    mask_area.y1 += cir_w;
 8014dcc:	4411      	add	r1, r2
    mask_area.x2 -= cir_w;
 8014dce:	1a80      	subs	r0, r0, r2
    mask_area.y2 -= cir_w;
 8014dd0:	1a9b      	subs	r3, r3, r2
    mask_area.x1 += cir_w;
 8014dd2:	fa1c f686 	uxtah	r6, ip, r6
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014dd6:	f647 72ff 	movw	r2, #32767	; 0x7fff
    mask_area.x2 -= cir_w;
 8014dda:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014dde:	a819      	add	r0, sp, #100	; 0x64
    mask_area.y1 += cir_w;
 8014de0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014de4:	a90b      	add	r1, sp, #44	; 0x2c
    mask_area.y2 -= cir_w;
 8014de6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014dea:	463b      	mov	r3, r7
    mask_area.x1 += cir_w;
 8014dec:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8014df0:	f7f7 fb5c 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8014df4:	2100      	movs	r1, #0
 8014df6:	a819      	add	r0, sp, #100	; 0x64
 8014df8:	f7f7 f9f2 	bl	800c1e0 <lv_draw_mask_add>
    lv_coord_t cir_w_extra = line_dsc.width;
 8014dfc:	2600      	movs	r6, #0
 8014dfe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8014e02:	ee09 0a10 	vmov	s18, r0
    lv_coord_t cir_w_extra = line_dsc.width;
 8014e06:	9305      	str	r3, [sp, #20]
    uint8_t r = 0, g = 0, b = 0;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	f44f 6787 	mov.w	r7, #1080	; 0x438
 8014e0e:	f89b 1000 	ldrb.w	r1, [fp]
 8014e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e16:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8014e1a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    switch(ext->mode) {
 8014e1e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014e22:	4377      	muls	r7, r6
 8014e24:	f3c3 0201 	ubfx	r2, r3, #0, #2
 8014e28:	f003 0303 	and.w	r3, r3, #3
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	f000 80bb 	beq.w	8014fa8 <lv_colorwheel_event+0x680>
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	f000 80e3 	beq.w	8014ffe <lv_colorwheel_event+0x6d6>
            if (m != ext->mode) {
 8014e38:	428b      	cmp	r3, r1
 8014e3a:	d016      	beq.n	8014e6a <lv_colorwheel_event+0x542>
              s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014e3c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014e40:	2014      	movs	r0, #20
              m = ext->mode;
 8014e42:	f88b 2000 	strb.w	r2, [fp]
              s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014e46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e4a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014e4e:	fbb3 f1f0 	udiv	r1, r3, r0
 8014e52:	4b81      	ldr	r3, [pc, #516]	; (8015058 <lv_colorwheel_event+0x730>)
 8014e54:	7019      	strb	r1, [r3, #0]
 8014e56:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e5e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014e62:	fbb3 f3f0 	udiv	r3, r3, r0
 8014e66:	f888 3000 	strb.w	r3, [r8]
            fast_hsv2rgb(angle * 6, s, v, &r, &g, &b); /*A smart compiler will replace x * 6 by (x << 2) + (x << 1) if it's more efficient*/
 8014e6a:	4b7b      	ldr	r3, [pc, #492]	; (8015058 <lv_colorwheel_event+0x730>)
 8014e6c:	f898 2000 	ldrb.w	r2, [r8]
 8014e70:	7819      	ldrb	r1, [r3, #0]
    if (!s) { *r = *g = *b = v; return; }
 8014e72:	2900      	cmp	r1, #0
 8014e74:	f040 808a 	bne.w	8014f8c <lv_colorwheel_event+0x664>
 8014e78:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8014e7c:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8014e80:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8014e84:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8014e88:	3601      	adds	r6, #1
 8014e8a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8014e8e:	089b      	lsrs	r3, r3, #2
 8014e90:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8014e94:	015b      	lsls	r3, r3, #5
 8014e96:	08d2      	lsrs	r2, r2, #3
 8014e98:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8014e9c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014ea0:	f347 220f 	sbfx	r2, r7, #8, #16
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8014ea4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8014ea8:	0a3b      	lsrs	r3, r7, #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014eaa:	4610      	mov	r0, r2
 8014eac:	9208      	str	r2, [sp, #32]
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8014eae:	9309      	str	r3, [sp, #36]	; 0x24
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014eb0:	9b05      	ldr	r3, [sp, #20]
 8014eb2:	eb0a 0103 	add.w	r1, sl, r3
 8014eb6:	9107      	str	r1, [sp, #28]
 8014eb8:	f002 fc50 	bl	801775c <lv_trigo_sin>
 8014ebc:	9907      	ldr	r1, [sp, #28]
 8014ebe:	9b03      	ldr	r3, [sp, #12]
 8014ec0:	4348      	muls	r0, r1
 8014ec2:	460f      	mov	r7, r1
 8014ec4:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8014ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eca:	335a      	adds	r3, #90	; 0x5a
 8014ecc:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8014ed0:	b21b      	sxth	r3, r3
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	9307      	str	r3, [sp, #28]
 8014ed6:	f002 fc41 	bl	801775c <lv_trigo_sin>
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014eda:	9b04      	ldr	r3, [sp, #16]
 8014edc:	4378      	muls	r0, r7
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014ede:	9a08      	ldr	r2, [sp, #32]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014ee0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014ee4:	9b06      	ldr	r3, [sp, #24]
 8014ee6:	ebaa 0703 	sub.w	r7, sl, r3
 8014eea:	9b05      	ldr	r3, [sp, #20]
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014eec:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	1aff      	subs	r7, r7, r3
 8014ef4:	f002 fc32 	bl	801775c <lv_trigo_sin>
 8014ef8:	9b03      	ldr	r3, [sp, #12]
 8014efa:	4378      	muls	r0, r7
 8014efc:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8014f00:	9b07      	ldr	r3, [sp, #28]
 8014f02:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8014f06:	4618      	mov	r0, r3
 8014f08:	f002 fc28 	bl	801775c <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014f0c:	9b04      	ldr	r3, [sp, #16]
 8014f0e:	4378      	muls	r0, r7
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 8014f10:	ee18 2a10 	vmov	r2, s16
 8014f14:	a90e      	add	r1, sp, #56	; 0x38
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014f16:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 8014f1a:	ab0f      	add	r3, sp, #60	; 0x3c
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8014f1c:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        lv_draw_line(&p[0], &p[1], clip_area, &line_dsc);
 8014f20:	a80d      	add	r0, sp, #52	; 0x34
 8014f22:	f7f6 f833 	bl	800af8c <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8014f26:	2e56      	cmp	r6, #86	; 0x56
 8014f28:	f47f af6e 	bne.w	8014e08 <lv_colorwheel_event+0x4e0>
    lv_draw_mask_remove_id(mask_out_id);
 8014f2c:	ee18 0a90 	vmov	r0, s17
 8014f30:	f7f7 f98e 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8014f34:	ee19 0a10 	vmov	r0, s18
 8014f38:	f7f7 f98a 	bl	800c250 <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	f7ed f893 	bl	8002068 <lv_event_get_target>
 8014f42:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8014f44:	4628      	mov	r0, r5
 8014f46:	f7ed f893 	bl	8002070 <lv_event_get_param>
 8014f4a:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 8014f4c:	a819      	add	r0, sp, #100	; 0x64
 8014f4e:	f7f7 fe4b 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 8014f52:	aa19      	add	r2, sp, #100	; 0x64
 8014f54:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8014f58:	4620      	mov	r0, r4
 8014f5a:	f7ef fbb1 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 8014f5e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014f62:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    if(colorwheel->knob.recolor) {
 8014f66:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014f6a:	07db      	lsls	r3, r3, #31
 8014f6c:	d504      	bpl.n	8014f78 <lv_colorwheel_event+0x650>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f7ff fcd2 	bl	8014918 <lv_colorwheel_get_rgb>
 8014f74:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
    lv_area_t knob_area = get_knob_area(obj);
 8014f78:	4621      	mov	r1, r4
 8014f7a:	a812      	add	r0, sp, #72	; 0x48
 8014f7c:	f7ff fbdd 	bl	801473a <get_knob_area>
    lv_draw_rect(&knob_area, clip_area, &cir_dsc);
 8014f80:	aa19      	add	r2, sp, #100	; 0x64
 8014f82:	4629      	mov	r1, r5
 8014f84:	a812      	add	r0, sp, #72	; 0x48
 8014f86:	f7f7 fe51 	bl	800cc2c <lv_draw_rect>
}
 8014f8a:	e518      	b.n	80149be <lv_colorwheel_event+0x96>
 8014f8c:	ab0d      	add	r3, sp, #52	; 0x34
 8014f8e:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 8014f92:	9301      	str	r3, [sp, #4]
 8014f94:	0040      	lsls	r0, r0, #1
 8014f96:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8014f9a:	b280      	uxth	r0, r0
 8014f9c:	9300      	str	r3, [sp, #0]
 8014f9e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014fa2:	f7ff fb97 	bl	80146d4 <fast_hsv2rgb.part.0>
 8014fa6:	e76d      	b.n	8014e84 <lv_colorwheel_event+0x55c>
            if (m != ext->mode) {
 8014fa8:	2901      	cmp	r1, #1
 8014faa:	d016      	beq.n	8014fda <lv_colorwheel_event+0x6b2>
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014fac:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8014fae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
              m = ext->mode;
 8014fb2:	f88b 2000 	strb.w	r2, [fp]
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8014fb6:	434b      	muls	r3, r1
 8014fb8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8014fbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fc0:	f8a9 3000 	strh.w	r3, [r9]
 8014fc4:	2114      	movs	r1, #20
 8014fc6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8014fca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014fce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8014fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8014fd6:	f888 3000 	strb.w	r3, [r8]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8014fda:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014fde:	f898 2000 	ldrb.w	r2, [r8]
    if (!s) { *r = *g = *b = v; return; }
 8014fe2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8014fe6:	f43f af47 	beq.w	8014e78 <lv_colorwheel_event+0x550>
 8014fea:	ab0d      	add	r3, sp, #52	; 0x34
 8014fec:	f8b9 0000 	ldrh.w	r0, [r9]
 8014ff0:	9301      	str	r3, [sp, #4]
 8014ff2:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8014ff6:	9300      	str	r3, [sp, #0]
 8014ff8:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014ffc:	e7d1      	b.n	8014fa2 <lv_colorwheel_event+0x67a>
            if (m != ext->mode) {
 8014ffe:	2902      	cmp	r1, #2
 8015000:	d016      	beq.n	8015030 <lv_colorwheel_event+0x708>
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8015002:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8015004:	f44f 63c0 	mov.w	r3, #1536	; 0x600
              m = ext->mode;
 8015008:	f88b 2000 	strb.w	r2, [fp]
              h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360); s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 801500c:	434b      	muls	r3, r1
 801500e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8015012:	fbb3 f3f1 	udiv	r3, r3, r1
 8015016:	f8a9 3000 	strh.w	r3, [r9]
 801501a:	2114      	movs	r1, #20
 801501c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015020:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015024:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8015028:	fbb3 f3f1 	udiv	r3, r3, r1
 801502c:	490a      	ldr	r1, [pc, #40]	; (8015058 <lv_colorwheel_event+0x730>)
 801502e:	700b      	strb	r3, [r1, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 8015030:	4b09      	ldr	r3, [pc, #36]	; (8015058 <lv_colorwheel_event+0x730>)
 8015032:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8015036:	7819      	ldrb	r1, [r3, #0]
 8015038:	b2d2      	uxtb	r2, r2
    if (!s) { *r = *g = *b = v; return; }
 801503a:	2900      	cmp	r1, #0
 801503c:	d1d5      	bne.n	8014fea <lv_colorwheel_event+0x6c2>
 801503e:	e71b      	b.n	8014e78 <lv_colorwheel_event+0x550>
    else if(code == LV_EVENT_COVER_CHECK) {
 8015040:	2e12      	cmp	r6, #18
 8015042:	f47f acbc 	bne.w	80149be <lv_colorwheel_event+0x96>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8015046:	4628      	mov	r0, r5
 8015048:	f7ed f812 	bl	8002070 <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 801504c:	7803      	ldrb	r3, [r0, #0]
 801504e:	2b02      	cmp	r3, #2
 8015050:	bf1c      	itt	ne
 8015052:	2301      	movne	r3, #1
 8015054:	7003      	strbne	r3, [r0, #0]
 8015056:	e4b2      	b.n	80149be <lv_colorwheel_event+0x96>
 8015058:	20002b2c 	.word	0x20002b2c
 801505c:	20000005 	.word	0x20000005
 8015060:	20002b2d 	.word	0x20002b2d
 8015064:	20002b2a 	.word	0x20002b2a

08015068 <lv_keyboard_def_event_cb>:
 * button clicks
 * @param kb pointer to a  keyboard
 * @param event the triggering event
 */
void lv_keyboard_def_event_cb(lv_event_t * e)
{
 8015068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 801506a:	f7ec fffd 	bl	8002068 <lv_event_get_target>
 801506e:	4604      	mov	r4, r0

    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 8015070:	f006 fb48 	bl	801b704 <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 8015074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015078:	4298      	cmp	r0, r3
 801507a:	f000 80df 	beq.w	801523c <lv_keyboard_def_event_cb+0x1d4>

    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 801507e:	4620      	mov	r0, r4
 8015080:	f006 fb40 	bl	801b704 <lv_btnmatrix_get_selected_btn>
 8015084:	4601      	mov	r1, r0
 8015086:	4620      	mov	r0, r4
 8015088:	f006 fb3e 	bl	801b708 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 801508c:	4605      	mov	r5, r0
 801508e:	2800      	cmp	r0, #0
 8015090:	f000 80d4 	beq.w	801523c <lv_keyboard_def_event_cb+0x1d4>

    if(strcmp(txt, "abc") == 0) {
 8015094:	496a      	ldr	r1, [pc, #424]	; (8015240 <lv_keyboard_def_event_cb+0x1d8>)
 8015096:	f7eb f8bb 	bl	8000210 <strcmp>
 801509a:	b968      	cbnz	r0, 80150b8 <lv_keyboard_def_event_cb+0x50>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 801509c:	4b69      	ldr	r3, [pc, #420]	; (8015244 <lv_keyboard_def_event_cb+0x1dc>)
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 801509e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 80150a2:	4620      	mov	r0, r4
 80150a4:	6819      	ldr	r1, [r3, #0]
 80150a6:	f006 fad1 	bl	801b64c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_LOWER]);
 80150aa:	4b67      	ldr	r3, [pc, #412]	; (8015248 <lv_keyboard_def_event_cb+0x1e0>)
 80150ac:	6819      	ldr	r1, [r3, #0]
        return;
    }
    else if(strcmp(txt, "ABC") == 0) {
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 80150ae:	4620      	mov	r0, r4
        }
    }
    else {
        lv_textarea_add_text(keyboard->ta, txt);
    }
}
 80150b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 80150b4:	f006 bace 	b.w	801b654 <lv_btnmatrix_set_ctrl_map>
    else if(strcmp(txt, "ABC") == 0) {
 80150b8:	4964      	ldr	r1, [pc, #400]	; (801524c <lv_keyboard_def_event_cb+0x1e4>)
 80150ba:	4628      	mov	r0, r5
 80150bc:	f7eb f8a8 	bl	8000210 <strcmp>
 80150c0:	b950      	cbnz	r0, 80150d8 <lv_keyboard_def_event_cb+0x70>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 80150c2:	2301      	movs	r3, #1
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 80150c4:	4620      	mov	r0, r4
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 80150c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 80150ca:	4b5e      	ldr	r3, [pc, #376]	; (8015244 <lv_keyboard_def_event_cb+0x1dc>)
 80150cc:	6859      	ldr	r1, [r3, #4]
 80150ce:	f006 fabd 	bl	801b64c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_TEXT_UPPER]);
 80150d2:	4b5d      	ldr	r3, [pc, #372]	; (8015248 <lv_keyboard_def_event_cb+0x1e0>)
 80150d4:	6859      	ldr	r1, [r3, #4]
 80150d6:	e7ea      	b.n	80150ae <lv_keyboard_def_event_cb+0x46>
    else if(strcmp(txt, "1#") == 0) {
 80150d8:	495d      	ldr	r1, [pc, #372]	; (8015250 <lv_keyboard_def_event_cb+0x1e8>)
 80150da:	4628      	mov	r0, r5
 80150dc:	f7eb f898 	bl	8000210 <strcmp>
 80150e0:	b950      	cbnz	r0, 80150f8 <lv_keyboard_def_event_cb+0x90>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 80150e2:	2302      	movs	r3, #2
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 80150e4:	4620      	mov	r0, r4
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 80150e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 80150ea:	4b56      	ldr	r3, [pc, #344]	; (8015244 <lv_keyboard_def_event_cb+0x1dc>)
 80150ec:	6899      	ldr	r1, [r3, #8]
 80150ee:	f006 faad 	bl	801b64c <lv_btnmatrix_set_map>
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[LV_KEYBOARD_MODE_SPECIAL]);
 80150f2:	4b55      	ldr	r3, [pc, #340]	; (8015248 <lv_keyboard_def_event_cb+0x1e0>)
 80150f4:	6899      	ldr	r1, [r3, #8]
 80150f6:	e7da      	b.n	80150ae <lv_keyboard_def_event_cb+0x46>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 80150f8:	4956      	ldr	r1, [pc, #344]	; (8015254 <lv_keyboard_def_event_cb+0x1ec>)
 80150fa:	4628      	mov	r0, r5
 80150fc:	f7eb f888 	bl	8000210 <strcmp>
 8015100:	b120      	cbz	r0, 801510c <lv_keyboard_def_event_cb+0xa4>
 8015102:	4955      	ldr	r1, [pc, #340]	; (8015258 <lv_keyboard_def_event_cb+0x1f0>)
 8015104:	4628      	mov	r0, r5
 8015106:	f7eb f883 	bl	8000210 <strcmp>
 801510a:	b988      	cbnz	r0, 8015130 <lv_keyboard_def_event_cb+0xc8>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 801510c:	2200      	movs	r2, #0
 801510e:	2120      	movs	r1, #32
 8015110:	4620      	mov	r0, r4
 8015112:	f7ec ff89 	bl	8002028 <lv_event_send>
        if(res != LV_RES_OK) return;
 8015116:	2801      	cmp	r0, #1
 8015118:	f040 8090 	bne.w	801523c <lv_keyboard_def_event_cb+0x1d4>
        if(keyboard->ta) {
 801511c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801511e:	2800      	cmp	r0, #0
 8015120:	f000 808c 	beq.w	801523c <lv_keyboard_def_event_cb+0x1d4>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 8015124:	2200      	movs	r2, #0
 8015126:	2120      	movs	r1, #32
}
 8015128:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 801512c:	f7ec bf7c 	b.w	8002028 <lv_event_send>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8015130:	494a      	ldr	r1, [pc, #296]	; (801525c <lv_keyboard_def_event_cb+0x1f4>)
 8015132:	4628      	mov	r0, r5
 8015134:	f7eb f86c 	bl	8000210 <strcmp>
 8015138:	4602      	mov	r2, r0
 801513a:	b958      	cbnz	r0, 8015154 <lv_keyboard_def_event_cb+0xec>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 801513c:	211f      	movs	r1, #31
 801513e:	4620      	mov	r0, r4
 8015140:	f7ec ff72 	bl	8002028 <lv_event_send>
        if(res != LV_RES_OK) return;
 8015144:	2801      	cmp	r0, #1
 8015146:	d179      	bne.n	801523c <lv_keyboard_def_event_cb+0x1d4>
        if(keyboard->ta) {
 8015148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801514a:	2800      	cmp	r0, #0
 801514c:	d076      	beq.n	801523c <lv_keyboard_def_event_cb+0x1d4>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 801514e:	2200      	movs	r2, #0
 8015150:	211f      	movs	r1, #31
 8015152:	e7e9      	b.n	8015128 <lv_keyboard_def_event_cb+0xc0>
    if(keyboard->ta == NULL) return;
 8015154:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015156:	2e00      	cmp	r6, #0
 8015158:	d070      	beq.n	801523c <lv_keyboard_def_event_cb+0x1d4>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 801515a:	4941      	ldr	r1, [pc, #260]	; (8015260 <lv_keyboard_def_event_cb+0x1f8>)
 801515c:	4628      	mov	r0, r5
 801515e:	f7eb f857 	bl	8000210 <strcmp>
 8015162:	b120      	cbz	r0, 801516e <lv_keyboard_def_event_cb+0x106>
 8015164:	493f      	ldr	r1, [pc, #252]	; (8015264 <lv_keyboard_def_event_cb+0x1fc>)
 8015166:	4628      	mov	r0, r5
 8015168:	f7eb f852 	bl	8000210 <strcmp>
 801516c:	b960      	cbnz	r0, 8015188 <lv_keyboard_def_event_cb+0x120>
        lv_textarea_add_char(keyboard->ta, '\n');
 801516e:	4630      	mov	r0, r6
 8015170:	210a      	movs	r1, #10
 8015172:	f00b fb7f 	bl	8020874 <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 8015176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015178:	f00b fab3 	bl	80206e2 <lv_textarea_get_one_line>
 801517c:	2800      	cmp	r0, #0
 801517e:	d05d      	beq.n	801523c <lv_keyboard_def_event_cb+0x1d4>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8015180:	2200      	movs	r2, #0
 8015182:	211f      	movs	r1, #31
 8015184:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015186:	e7cf      	b.n	8015128 <lv_keyboard_def_event_cb+0xc0>
    } else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 8015188:	4937      	ldr	r1, [pc, #220]	; (8015268 <lv_keyboard_def_event_cb+0x200>)
 801518a:	4628      	mov	r0, r5
 801518c:	f7eb f840 	bl	8000210 <strcmp>
 8015190:	b920      	cbnz	r0, 801519c <lv_keyboard_def_event_cb+0x134>
        lv_textarea_cursor_left(keyboard->ta);
 8015192:	4630      	mov	r0, r6
}
 8015194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_cursor_left(keyboard->ta);
 8015198:	f00b bcf8 	b.w	8020b8c <lv_textarea_cursor_left>
    } else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 801519c:	4933      	ldr	r1, [pc, #204]	; (801526c <lv_keyboard_def_event_cb+0x204>)
 801519e:	4628      	mov	r0, r5
 80151a0:	f7eb f836 	bl	8000210 <strcmp>
 80151a4:	b920      	cbnz	r0, 80151b0 <lv_keyboard_def_event_cb+0x148>
        lv_textarea_cursor_right(keyboard->ta);
 80151a6:	4630      	mov	r0, r6
}
 80151a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_cursor_right(keyboard->ta);
 80151ac:	f00b bcea 	b.w	8020b84 <lv_textarea_cursor_right>
    } else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 80151b0:	492f      	ldr	r1, [pc, #188]	; (8015270 <lv_keyboard_def_event_cb+0x208>)
 80151b2:	4628      	mov	r0, r5
 80151b4:	f7eb f82c 	bl	8000210 <strcmp>
 80151b8:	b920      	cbnz	r0, 80151c4 <lv_keyboard_def_event_cb+0x15c>
        lv_textarea_del_char(keyboard->ta);
 80151ba:	4630      	mov	r0, r6
}
 80151bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_del_char(keyboard->ta);
 80151c0:	f00b bbf4 	b.w	80209ac <lv_textarea_del_char>
    } else if(strcmp(txt, "+/-") == 0) {
 80151c4:	492b      	ldr	r1, [pc, #172]	; (8015274 <lv_keyboard_def_event_cb+0x20c>)
 80151c6:	4628      	mov	r0, r5
 80151c8:	f7eb f822 	bl	8000210 <strcmp>
 80151cc:	4607      	mov	r7, r0
 80151ce:	bb78      	cbnz	r0, 8015230 <lv_keyboard_def_event_cb+0x1c8>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 80151d0:	4630      	mov	r0, r6
 80151d2:	f00b fa84 	bl	80206de <lv_textarea_get_cursor_pos>
 80151d6:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 80151d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80151da:	f00b fa77 	bl	80206cc <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 80151de:	7803      	ldrb	r3, [r0, #0]
 80151e0:	b2ad      	uxth	r5, r5
 80151e2:	2b2d      	cmp	r3, #45	; 0x2d
 80151e4:	d110      	bne.n	8015208 <lv_keyboard_def_event_cb+0x1a0>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 80151e6:	2101      	movs	r1, #1
 80151e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80151ea:	f00b f99b 	bl	8020524 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 80151ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80151f0:	f00b fbdc 	bl	80209ac <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 80151f4:	212b      	movs	r1, #43	; 0x2b
            lv_textarea_add_char(keyboard->ta, '-');
 80151f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80151f8:	f00b fb3c 	bl	8020874 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 80151fc:	4629      	mov	r1, r5
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 80151fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8015200:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8015204:	f00b b98e 	b.w	8020524 <lv_textarea_set_cursor_pos>
        else if(ta_txt[0] == '+') {
 8015208:	2b2b      	cmp	r3, #43	; 0x2b
 801520a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801520c:	d107      	bne.n	801521e <lv_keyboard_def_event_cb+0x1b6>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 801520e:	2101      	movs	r1, #1
 8015210:	f00b f988 	bl	8020524 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8015214:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015216:	f00b fbc9 	bl	80209ac <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 801521a:	212d      	movs	r1, #45	; 0x2d
 801521c:	e7eb      	b.n	80151f6 <lv_keyboard_def_event_cb+0x18e>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 801521e:	4639      	mov	r1, r7
 8015220:	f00b f980 	bl	8020524 <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 8015224:	212d      	movs	r1, #45	; 0x2d
 8015226:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015228:	f00b fb24 	bl	8020874 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 801522c:	1c69      	adds	r1, r5, #1
 801522e:	e7e6      	b.n	80151fe <lv_keyboard_def_event_cb+0x196>
        lv_textarea_add_text(keyboard->ta, txt);
 8015230:	4629      	mov	r1, r5
 8015232:	4630      	mov	r0, r6
}
 8015234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_textarea_add_text(keyboard->ta, txt);
 8015238:	f00b ba74 	b.w	8020724 <lv_textarea_add_text>
}
 801523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801523e:	bf00      	nop
 8015240:	08025ae8 	.word	0x08025ae8
 8015244:	2000001c 	.word	0x2000001c
 8015248:	20000008 	.word	0x20000008
 801524c:	08025aec 	.word	0x08025aec
 8015250:	08025af0 	.word	0x08025af0
 8015254:	08025af3 	.word	0x08025af3
 8015258:	08025af7 	.word	0x08025af7
 801525c:	08025a46 	.word	0x08025a46
 8015260:	08025afb 	.word	0x08025afb
 8015264:	08025b01 	.word	0x08025b01
 8015268:	08025b05 	.word	0x08025b05
 801526c:	08025b09 	.word	0x08025b09
 8015270:	08025b0d 	.word	0x08025b0d
 8015274:	08025b11 	.word	0x08025b11

08015278 <lv_keyboard_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_keyboard_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8015278:	b538      	push	{r3, r4, r5, lr}
 801527a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);

    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;
    keyboard->ta         = NULL;
 801527c:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801527e:	2104      	movs	r1, #4
 8015280:	4620      	mov	r0, r4
 8015282:	f7ee fe14 	bl	8003eae <lv_obj_clear_flag>
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;

    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8015286:	462b      	mov	r3, r5
 8015288:	462a      	mov	r2, r5
 801528a:	4620      	mov	r0, r4
 801528c:	2105      	movs	r1, #5
    keyboard->ta         = NULL;
 801528e:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 8015290:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 8015294:	f7ef fe3a 	bl	8004f0c <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8015298:	462b      	mov	r3, r5
 801529a:	221c      	movs	r2, #28
 801529c:	490e      	ldr	r1, [pc, #56]	; (80152d8 <lv_keyboard_constructor+0x60>)
 801529e:	4620      	mov	r0, r4
 80152a0:	f7ec fefa 	bl	8002098 <lv_obj_add_event_cb>
static inline void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 80152a4:	462b      	mov	r3, r5
 80152a6:	462a      	mov	r2, r5
 80152a8:	4620      	mov	r0, r4
 80152aa:	f241 416a 	movw	r1, #5226	; 0x146a
 80152ae:	f7f2 f9ef 	bl	8007690 <lv_obj_set_local_style_prop>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);

    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 80152b2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80152b6:	4b09      	ldr	r3, [pc, #36]	; (80152dc <lv_keyboard_constructor+0x64>)
 80152b8:	4620      	mov	r0, r4
 80152ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80152be:	f006 f9c5 	bl	801b64c <lv_btnmatrix_set_map>
    lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 80152c2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80152c6:	4b06      	ldr	r3, [pc, #24]	; (80152e0 <lv_keyboard_constructor+0x68>)
 80152c8:	4620      	mov	r0, r4
 80152ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
}
 80152ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 80152d2:	f006 b9bf 	b.w	801b654 <lv_btnmatrix_set_ctrl_map>
 80152d6:	bf00      	nop
 80152d8:	08015069 	.word	0x08015069
 80152dc:	2000001c 	.word	0x2000001c
 80152e0:	20000008 	.word	0x20000008

080152e4 <lv_color_to32>:
     *       5         129     33        1       255
     *       6         259      3        0       255
     */

    lv_color32_t ret;
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 80152e4:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 80152e8:	f240 1307 	movw	r3, #263	; 0x107
 80152ec:	2100      	movs	r1, #0
 80152ee:	435a      	muls	r2, r3
 80152f0:	3207      	adds	r2, #7
 80152f2:	1152      	asrs	r2, r2, #5
{
 80152f4:	b510      	push	{r4, lr}
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 80152f6:	f362 4117 	bfi	r1, r2, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80152fa:	f3c0 1445 	ubfx	r4, r0, #5, #6
 80152fe:	f240 1203 	movw	r2, #259	; 0x103
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8015302:	f000 001f 	and.w	r0, r0, #31
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8015306:	4362      	muls	r2, r4
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8015308:	4343      	muls	r3, r0
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801530a:	3203      	adds	r2, #3
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801530c:	3307      	adds	r3, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801530e:	1192      	asrs	r2, r2, #6
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8015310:	115b      	asrs	r3, r3, #5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8015312:	f362 210f 	bfi	r1, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8015316:	f363 0107 	bfi	r1, r3, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
    return ret.full;
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}
 801531a:	f041 407f 	orr.w	r0, r1, #4278190080	; 0xff000000
 801531e:	bd10      	pop	{r4, pc}

08015320 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8015320:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015322:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015326:	f3c1 1445 	ubfx	r4, r1, #5, #6
 801532a:	f3c0 1345 	ubfx	r3, r0, #5, #6
 801532e:	f248 0681 	movw	r6, #32897	; 0x8081
 8015332:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015334:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015338:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801533c:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015340:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015342:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015344:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015346:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8015348:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801534c:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015350:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015354:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015358:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801535c:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801535e:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015360:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015362:	4372      	muls	r2, r6
    return ret;
 8015364:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015368:	0dd0      	lsrs	r0, r2, #23
    return ret;
 801536a:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 801536e:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8015372:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015374 <lv_color_black>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 8015374:	f04f 0000 	mov.w	r0, #0
 8015378:	4770      	bx	lr

0801537a <lv_led_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_led_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801537a:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_led_t * led = (lv_led_t *)obj;
    led->color = lv_theme_get_color_primary(obj);
 801537c:	4608      	mov	r0, r1
{
 801537e:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 8015380:	f7f3 faac 	bl	80088dc <lv_theme_get_color_primary>
    led->bright = LV_LED_BRIGHT_MAX;
 8015384:	23ff      	movs	r3, #255	; 0xff
    led->color = lv_theme_get_color_primary(obj);
 8015386:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 8015388:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 801538c:	bd10      	pop	{r4, pc}
	...

08015390 <lv_led_event>:

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8015390:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    res = lv_obj_event_base(MY_CLASS, e);
 8015392:	4878      	ldr	r0, [pc, #480]	; (8015574 <lv_led_event+0x1e4>)
{
 8015394:	b090      	sub	sp, #64	; 0x40
 8015396:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015398:	f7ec fdcf 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801539c:	2801      	cmp	r0, #1
 801539e:	f040 80e7 	bne.w	8015570 <lv_led_event+0x1e0>

    lv_event_code_t code = lv_event_get_code(e);
 80153a2:	4628      	mov	r0, r5
 80153a4:	f7ec fe62 	bl	800206c <lv_event_get_code>
 80153a8:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80153aa:	4628      	mov	r0, r5
 80153ac:	f7ec fe5c 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 80153b0:	2e15      	cmp	r6, #21
    lv_obj_t * obj = lv_event_get_target(e);
 80153b2:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 80153b4:	f040 80dc 	bne.w	8015570 <lv_led_event+0x1e0>
        /*Make darker colors in a temporary style according to the brightness*/
        lv_led_t * led = (lv_led_t *)obj;

        lv_draw_rect_dsc_t rect_dsc;
        lv_draw_rect_dsc_init(&rect_dsc);
 80153b8:	a803      	add	r0, sp, #12
 80153ba:	f7f7 fc15 	bl	800cbe8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 80153be:	aa03      	add	r2, sp, #12
 80153c0:	2100      	movs	r1, #0
 80153c2:	4620      	mov	r0, r4
 80153c4:	f7ef f97c 	bl	80046c0 <lv_obj_init_draw_rect_dsc>

        /*Use the original colors brightness to modify color->led*/
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 80153c8:	f7ff ffd4 	bl	8015374 <lv_color_black>
 80153cc:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 80153ce:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80153d2:	9101      	str	r1, [sp, #4]
 80153d4:	f7ff ff86 	bl	80152e4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 80153d8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80153dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80153e0:	9901      	ldr	r1, [sp, #4]
 80153e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80153e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80153ea:	fa52 f280 	uxtab	r2, r2, r0
 80153ee:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80153f0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80153f4:	f7ff ff94 	bl	8015320 <lv_color_mix>
 80153f8:	f8ad 0010 	strh.w	r0, [sp, #16]
        rect_dsc.bg_grad_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_grad_color));
 80153fc:	f7ff ffba 	bl	8015374 <lv_color_black>
 8015400:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8015402:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8015406:	9101      	str	r1, [sp, #4]
 8015408:	f7ff ff6c 	bl	80152e4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801540c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015410:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015414:	9901      	ldr	r1, [sp, #4]
 8015416:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801541a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801541e:	fa52 f280 	uxtab	r2, r2, r0
 8015422:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8015424:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8015428:	f7ff ff7a 	bl	8015320 <lv_color_mix>
 801542c:	f8ad 0012 	strh.w	r0, [sp, #18]
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 8015430:	f7ff ffa0 	bl	8015374 <lv_color_black>
 8015434:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 8015436:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801543a:	9101      	str	r1, [sp, #4]
 801543c:	f7ff ff52 	bl	80152e4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8015440:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015444:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015448:	9901      	ldr	r1, [sp, #4]
 801544a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801544e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015452:	fa52 f280 	uxtab	r2, r2, r0
 8015456:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8015458:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 801545c:	f7ff ff60 	bl	8015320 <lv_color_mix>
 8015460:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8015464:	f7ff ff86 	bl	8015374 <lv_color_black>
 8015468:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 801546a:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801546e:	9101      	str	r1, [sp, #4]
 8015470:	f7ff ff38 	bl	80152e4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8015474:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8015478:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801547c:	9901      	ldr	r1, [sp, #4]
 801547e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015482:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015486:	fa52 f280 	uxtab	r2, r2, r0
 801548a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 801548c:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8015490:	f7ff ff46 	bl	8015320 <lv_color_mix>
 8015494:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 8015498:	f7ff ff6c 	bl	8015374 <lv_color_black>
 801549c:	4601      	mov	r1, r0
    c32.full        = lv_color_to32(color);
 801549e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80154a2:	9101      	str	r1, [sp, #4]
 80154a4:	f7ff ff1e 	bl	80152e4 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 80154a8:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80154ac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80154b0:	9901      	ldr	r1, [sp, #4]
 80154b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80154b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80154ba:	fa52 f280 	uxtab	r2, r2, r0
 80154be:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80154c0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80154c4:	f7ff ff2c 	bl	8015320 <lv_color_mix>
 80154c8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c

        /*Mix. the color with black proportionally with brightness*/
        rect_dsc.bg_color   = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 80154cc:	f7ff ff52 	bl	8015374 <lv_color_black>
 80154d0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80154d4:	4601      	mov	r1, r0
 80154d6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80154da:	f7ff ff21 	bl	8015320 <lv_color_mix>
 80154de:	f8ad 0010 	strh.w	r0, [sp, #16]
        rect_dsc.bg_grad_color   = lv_color_mix(rect_dsc.bg_grad_color, lv_color_black(), led->bright);
 80154e2:	f7ff ff47 	bl	8015374 <lv_color_black>
 80154e6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80154ea:	4601      	mov	r1, r0
 80154ec:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80154f0:	f7ff ff16 	bl	8015320 <lv_color_mix>
 80154f4:	f8ad 0012 	strh.w	r0, [sp, #18]
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 80154f8:	f7ff ff3c 	bl	8015374 <lv_color_black>
 80154fc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8015500:	4601      	mov	r1, r0
 8015502:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 8015506:	f7ff ff0b 	bl	8015320 <lv_color_mix>
 801550a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 801550e:	f7ff ff31 	bl	8015374 <lv_color_black>
 8015512:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8015516:	4601      	mov	r1, r0
 8015518:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801551c:	f7ff ff00 	bl	8015320 <lv_color_mix>
 8015520:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8015524:	f7ff ff26 	bl	8015374 <lv_color_black>
 8015528:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801552c:	4601      	mov	r1, r0
 801552e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8015532:	f7ff fef5 	bl	8015320 <lv_color_mix>

        /*Set the current shadow width according to brightness proportionally between LV_LED_BRIGHT_OFF
         * and LV_LED_BRIGHT_ON*/
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8015536:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801553a:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 801553e:	21af      	movs	r1, #175	; 0xaf
 8015540:	3b50      	subs	r3, #80	; 0x50
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 8015542:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
                (LV_LED_BRIGHT_MAX - LV_LED_BRIGHT_MIN);

        const lv_area_t * clip_area = lv_event_get_param(e);
 8015546:	4628      	mov	r0, r5
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 8015548:	435a      	muls	r2, r3
 801554a:	fb92 f2f1 	sdiv	r2, r2, r1
 801554e:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 8015552:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8015556:	4353      	muls	r3, r2
 8015558:	fb93 f3f1 	sdiv	r3, r3, r1
 801555c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015560:	f7ec fd86 	bl	8002070 <lv_event_get_param>
        lv_draw_rect(&obj->coords, clip_area, &rect_dsc);
 8015564:	aa03      	add	r2, sp, #12
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015566:	4601      	mov	r1, r0
        lv_draw_rect(&obj->coords, clip_area, &rect_dsc);
 8015568:	f104 0014 	add.w	r0, r4, #20
 801556c:	f7f7 fb5e 	bl	800cc2c <lv_draw_rect>
    }
}
 8015570:	b010      	add	sp, #64	; 0x40
 8015572:	bd70      	pop	{r4, r5, r6, pc}
 8015574:	08025f1c 	.word	0x08025f1c

08015578 <lv_list_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_list_create(lv_obj_t * parent)
{
 8015578:	b510      	push	{r4, lr}
 801557a:	4601      	mov	r1, r0
    LV_LOG_INFO("begin")
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_list_class, parent);
 801557c:	4805      	ldr	r0, [pc, #20]	; (8015594 <lv_list_create+0x1c>)
 801557e:	f7ee ffd1 	bl	8004524 <lv_obj_class_create_obj>
 8015582:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8015584:	f7ef f85b 	bl	800463e <lv_obj_class_init_obj>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8015588:	2101      	movs	r1, #1
 801558a:	4620      	mov	r0, r4
 801558c:	f7fa fca0 	bl	800fed0 <lv_obj_set_flex_flow>
    return obj;
}
 8015590:	4620      	mov	r0, r4
 8015592:	bd10      	pop	{r4, pc}
 8015594:	08025f54 	.word	0x08025f54

08015598 <lv_list_add_btn>:
    lv_obj_set_width(obj, LV_PCT(100));
    return obj;
}

lv_obj_t * lv_list_add_btn(lv_obj_t * list, const char * icon, const char * txt)
{
 8015598:	b570      	push	{r4, r5, r6, lr}
 801559a:	460d      	mov	r5, r1
    LV_LOG_INFO("begin")
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_list_btn_class, list);
 801559c:	4601      	mov	r1, r0
 801559e:	4815      	ldr	r0, [pc, #84]	; (80155f4 <lv_list_add_btn+0x5c>)
{
 80155a0:	4616      	mov	r6, r2
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_list_btn_class, list);
 80155a2:	f7ee ffbf 	bl	8004524 <lv_obj_class_create_obj>
 80155a6:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80155a8:	f7ef f849 	bl	800463e <lv_obj_class_init_obj>
    lv_obj_set_size(obj, LV_PCT(100), LV_SIZE_CONTENT);
 80155ac:	f242 0164 	movw	r1, #8292	; 0x2064
 80155b0:	4620      	mov	r0, r4
 80155b2:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80155b6:	f7ef fbed 	bl	8004d94 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 80155ba:	2100      	movs	r1, #0
 80155bc:	4620      	mov	r0, r4
 80155be:	f7fa fc87 	bl	800fed0 <lv_obj_set_flex_flow>

    if(icon) {
 80155c2:	b12d      	cbz	r5, 80155d0 <lv_list_add_btn+0x38>
        lv_obj_t * img = lv_img_create(obj);
 80155c4:	4620      	mov	r0, r4
 80155c6:	f007 facb 	bl	801cb60 <lv_img_create>
        lv_img_set_src(img, icon);
 80155ca:	4629      	mov	r1, r5
 80155cc:	f007 fad4 	bl	801cb78 <lv_img_set_src>
    }

    if(txt) {
 80155d0:	b176      	cbz	r6, 80155f0 <lv_list_add_btn+0x58>
        lv_obj_t * label = lv_label_create(obj);
 80155d2:	4620      	mov	r0, r4
 80155d4:	f008 fbc0 	bl	801dd58 <lv_label_create>
 80155d8:	4605      	mov	r5, r0
        lv_label_set_text(label, txt);
 80155da:	4631      	mov	r1, r6
 80155dc:	f008 fbc8 	bl	801dd70 <lv_label_set_text>
        lv_label_set_long_mode(label, LV_LABEL_LONG_SCROLL_CIRCULAR);
 80155e0:	2103      	movs	r1, #3
 80155e2:	4628      	mov	r0, r5
 80155e4:	f008 fc1a 	bl	801de1c <lv_label_set_long_mode>
        lv_obj_set_flex_grow(label, 1);
 80155e8:	2101      	movs	r1, #1
 80155ea:	4628      	mov	r0, r5
 80155ec:	f7fa fcb0 	bl	800ff50 <lv_obj_set_flex_grow>
    }

    return obj;
}
 80155f0:	4620      	mov	r0, r4
 80155f2:	bd70      	pop	{r4, r5, r6, pc}
 80155f4:	08025f38 	.word	0x08025f38

080155f8 <lv_meter_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_meter_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80155f8:	b510      	push	{r4, lr}
 80155fa:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_meter_t * meter = (lv_meter_t *)obj;
    _lv_ll_clear(&meter->indicator_ll);
 80155fc:	f101 0030 	add.w	r0, r1, #48	; 0x30
 8015600:	f002 f873 	bl	80176ea <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 8015604:	f104 0024 	add.w	r0, r4, #36	; 0x24

}
 8015608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_clear(&meter->scale_ll);
 801560c:	f002 b86d 	b.w	80176ea <_lv_ll_clear>

08015610 <lv_meter_constructor>:
{
 8015610:	b510      	push	{r4, lr}
 8015612:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 8015614:	2124      	movs	r1, #36	; 0x24
 8015616:	1860      	adds	r0, r4, r1
 8015618:	f001 ffff 	bl	801761a <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 801561c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015620:	211c      	movs	r1, #28
}
 8015622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8015626:	f001 bff8 	b.w	801761a <_lv_ll_init>
	...

0801562c <lv_meter_event>:

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8015630:	48b4      	ldr	r0, [pc, #720]	; (8015904 <lv_meter_event+0x2d8>)
{
 8015632:	460c      	mov	r4, r1
 8015634:	ed2d 8b04 	vpush	{d8-d9}
 8015638:	b0df      	sub	sp, #380	; 0x17c
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801563a:	f7ec fc7e 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801563e:	2801      	cmp	r0, #1
 8015640:	f040 811d 	bne.w	801587e <lv_meter_event+0x252>

    lv_event_code_t code = lv_event_get_code(e);
 8015644:	4620      	mov	r0, r4
 8015646:	f7ec fd11 	bl	800206c <lv_event_get_code>
 801564a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801564c:	4620      	mov	r0, r4
 801564e:	f7ec fd0b 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 8015652:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 8015654:	4683      	mov	fp, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8015656:	f040 8112 	bne.w	801587e <lv_meter_event+0x252>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801565a:	4620      	mov	r0, r4
static void draw_arcs(lv_obj_t * obj, const lv_area_t * clip_area, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 801565c:	ae4c      	add	r6, sp, #304	; 0x130
        const lv_area_t * clip_area = lv_event_get_param(e);
 801565e:	f7ec fd07 	bl	8002070 <lv_event_get_param>
        lv_obj_get_content_coords(obj, &scale_area);
 8015662:	a91a      	add	r1, sp, #104	; 0x68
        const lv_area_t * clip_area = lv_event_get_param(e);
 8015664:	ee08 0a10 	vmov	s16, r0
        lv_obj_get_content_coords(obj, &scale_area);
 8015668:	4658      	mov	r0, fp
 801566a:	f7ef fcf0 	bl	800504e <lv_obj_get_content_coords>
    lv_draw_arc_dsc_init(&arc_dsc);
 801566e:	4630      	mov	r0, r6
 8015670:	f7f3 f983 	bl	800897a <lv_draw_arc_dsc_init>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8015674:	2251      	movs	r2, #81	; 0x51
 8015676:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801567a:	4658      	mov	r0, fp
 801567c:	f7f1 ff24 	bl	80074c8 <lv_obj_get_style_prop>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015680:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 8015684:	f89d 3139 	ldrb.w	r3, [sp, #313]	; 0x139
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8015688:	f240 4262 	movw	r2, #1122	; 0x462
 801568c:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8015690:	3501      	adds	r5, #1
 8015692:	f360 0382 	bfi	r3, r0, #2, #1

    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_out;
    scale_center.y = scale_area->y1 + r_out;
 8015696:	f8bd 806a 	ldrh.w	r8, [sp, #106]	; 0x6a
 801569a:	1bed      	subs	r5, r5, r7
 801569c:	2100      	movs	r1, #0
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 801569e:	f88d 3139 	strb.w	r3, [sp, #313]	; 0x139
 80156a2:	4658      	mov	r0, fp
    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 80156a4:	f3c5 33c0 	ubfx	r3, r5, #15, #1
 80156a8:	fa03 f585 	sxtah	r5, r3, r5
 80156ac:	f7f1 ff0c 	bl	80074c8 <lv_obj_get_style_prop>

    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);
    lv_meter_indicator_t * indic;
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80156b0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80156b4:	4681      	mov	r9, r0
    scale_center.x = scale_area->x1 + r_out;
 80156b6:	f3c5 054f 	ubfx	r5, r5, #1, #16
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80156ba:	4618      	mov	r0, r3
 80156bc:	ee08 3a90 	vmov	s17, r3
    scale_center.x = scale_area->x1 + r_out;
 80156c0:	442f      	add	r7, r5
    scale_center.y = scale_area->y1 + r_out;
 80156c2:	44a8      	add	r8, r5
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80156c4:	f002 f826 	bl	8017714 <_lv_ll_get_tail>
 80156c8:	4604      	mov	r4, r0
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;

        arc_dsc.color = indic->type_data.arc.color;
        arc_dsc.width = indic->type_data.arc.width;
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80156ca:	fa5f f389 	uxtb.w	r3, r9

        lv_meter_scale_t * scale = indic->scale;

        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
        lv_draw_arc(scale_center.x, scale_center.y, r_out + indic->type_data.arc.r_mod, start_angle, end_angle, clip_area, &arc_dsc);
 80156ce:	9605      	str	r6, [sp, #20]
    scale_center.x = scale_area->x1 + r_out;
 80156d0:	b23f      	sxth	r7, r7
    scale_center.y = scale_area->y1 + r_out;
 80156d2:	fa0f f888 	sxth.w	r8, r8
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80156d6:	9306      	str	r3, [sp, #24]
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80156d8:	2c00      	cmp	r4, #0
 80156da:	f040 80d5 	bne.w	8015888 <lv_meter_event+0x25c>
 80156de:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80156e2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 80156e6:	3201      	adds	r2, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80156e8:	f8bd 006a 	ldrh.w	r0, [sp, #106]	; 0x6a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80156ec:	1a52      	subs	r2, r2, r1
static void draw_ticks_and_labels(lv_obj_t * obj, const lv_area_t * clip_area, const lv_area_t * scale_area)
{
    lv_meter_t * meter    = (lv_meter_t *)obj;

    lv_point_t p_center;
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 80156ee:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 80156f2:	fa03 f382 	sxtah	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80156f6:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
 80156fa:	3201      	adds	r2, #1
    p_center.x = scale_area->x1 + r_edge;
 80156fc:	105b      	asrs	r3, r3, #1
 80156fe:	1a12      	subs	r2, r2, r0
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 8015700:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 8015704:	fa04 f282 	sxtah	r2, r4, r2
    p_center.x = scale_area->x1 + r_edge;
 8015708:	1052      	asrs	r2, r2, #1
 801570a:	4293      	cmp	r3, r2
 801570c:	bfa8      	it	ge
 801570e:	4613      	movge	r3, r2
 8015710:	b29a      	uxth	r2, r3
 8015712:	fa11 f183 	uxtah	r1, r1, r3
    p_center.y = scale_area->y1 + r_edge;
 8015716:	fa10 f383 	uxtah	r3, r0, r3

    uint8_t i;

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801571a:	a824      	add	r0, sp, #144	; 0x90
    p_center.x = scale_area->x1 + r_edge;
 801571c:	9211      	str	r2, [sp, #68]	; 0x44
    p_center.y = scale_area->y1 + r_edge;
 801571e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    p_center.x = scale_area->x1 + r_edge;
 8015722:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    lv_draw_line_dsc_init(&line_dsc);
 8015726:	f7f5 fc25 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801572a:	aa24      	add	r2, sp, #144	; 0x90
 801572c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8015730:	4658      	mov	r0, fp
 8015732:	f7ef f9a9 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 8015736:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 801573a:	a83c      	add	r0, sp, #240	; 0xf0
    line_dsc.raw_end = 1;
 801573c:	f043 0310 	orr.w	r3, r3, #16
 8015740:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
    lv_draw_label_dsc_init(&label_dsc);
 8015744:	f7f4 ff9c 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8015748:	aa3c      	add	r2, sp, #240	; 0xf0
 801574a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801574e:	4658      	mov	r0, fp
 8015750:	f7ef f8f2 	bl	8004938 <lv_obj_init_draw_label_dsc>

    lv_meter_scale_t * scale;

    lv_obj_draw_part_dsc_t dsc;
    lv_obj_draw_dsc_init(&dsc, clip_area);
 8015754:	a84c      	add	r0, sp, #304	; 0x130
 8015756:	ee18 1a10 	vmov	r1, s16
 801575a:	f7ef fa95 	bl	8004c88 <lv_obj_draw_dsc_init>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;
#endif

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801575e:	f10b 0324 	add.w	r3, fp, #36	; 0x24
 8015762:	4618      	mov	r0, r3
 8015764:	ee09 3a10 	vmov	s18, r3
 8015768:	f001 ffd4 	bl	8017714 <_lv_ll_get_tail>
 801576c:	4604      	mov	r4, r0
 801576e:	2800      	cmp	r0, #0
 8015770:	f040 80ca 	bne.w	8015908 <lv_meter_event+0x2dc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015774:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
    lv_obj_init_draw_line_dsc(obj, LV_PART_INDICATOR, &line_dsc);

    lv_draw_img_dsc_t img_dsc;
    lv_draw_img_dsc_init(&img_dsc);
 8015778:	af4c      	add	r7, sp, #304	; 0x130
 801577a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    lv_draw_line_dsc_init(&line_dsc);
 801577e:	a844      	add	r0, sp, #272	; 0x110
 8015780:	3601      	adds	r6, #1
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
            if(angle > 3600) angle -= 3600;
            img_dsc.angle = angle;
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015782:	46ba      	mov	sl, r7
 8015784:	1af6      	subs	r6, r6, r3
    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 8015786:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 801578a:	fa02 f686 	sxtah	r6, r2, r6
    scale_center.x = scale_area->x1 + r_edge;
 801578e:	f3c6 064f 	ubfx	r6, r6, #1, #16
 8015792:	4433      	add	r3, r6
 8015794:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    scale_center.y = scale_area->y1 + r_edge;
 8015798:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 801579c:	4433      	add	r3, r6
 801579e:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
    lv_draw_line_dsc_init(&line_dsc);
 80157a2:	f7f5 fbe7 	bl	800af74 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_INDICATOR, &line_dsc);
 80157a6:	aa44      	add	r2, sp, #272	; 0x110
 80157a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80157ac:	4658      	mov	r0, fp
 80157ae:	f7ef f96b 	bl	8004a88 <lv_obj_init_draw_line_dsc>
    lv_draw_img_dsc_init(&img_dsc);
 80157b2:	4638      	mov	r0, r7
 80157b4:	f7f4 fe20 	bl	800a3f8 <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 80157b8:	463a      	mov	r2, r7
 80157ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80157be:	4658      	mov	r0, fp
 80157c0:	f7ef f91a 	bl	80049f8 <lv_obj_init_draw_img_dsc>
    img_dsc.antialias = 1;
 80157c4:	f89d 3144 	ldrb.w	r3, [sp, #324]	; 0x144
 80157c8:	4621      	mov	r1, r4
 80157ca:	f240 4262 	movw	r2, #1122	; 0x462
 80157ce:	f043 0301 	orr.w	r3, r3, #1
 80157d2:	4658      	mov	r0, fp
 80157d4:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
 80157d8:	f7f1 fe76 	bl	80074c8 <lv_obj_get_style_prop>
 80157dc:	4680      	mov	r8, r0
    return (lv_opa_t)v.num;
 80157de:	fa5f f980 	uxtb.w	r9, r0
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80157e2:	ee18 0a90 	vmov	r0, s17
 80157e6:	f001 ff95 	bl	8017714 <_lv_ll_get_tail>
 80157ea:	4604      	mov	r4, r0
 80157ec:	2c00      	cmp	r4, #0
 80157ee:	f040 82b0 	bne.w	8015d52 <lv_meter_event+0x726>
 80157f2:	f8bd 406c 	ldrh.w	r4, [sp, #108]	; 0x6c
        lv_draw_rect_dsc_init(&mid_dsc);
 80157f6:	4638      	mov	r0, r7
 80157f8:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 80157fc:	3401      	adds	r4, #1
 80157fe:	1b64      	subs	r4, r4, r5
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 8015800:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 8015804:	fa03 f484 	sxtah	r4, r3, r4
        scale_center.y = scale_area.y1 + r_edge;
 8015808:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
        scale_center.x = scale_area.x1 + r_edge;
 801580c:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8015810:	4425      	add	r5, r4
        scale_center.y = scale_area.y1 + r_edge;
 8015812:	441c      	add	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 8015814:	f7f7 f9e8 	bl	800cbe8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 8015818:	463a      	mov	r2, r7
 801581a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801581e:	4658      	mov	r0, fp
 8015820:	f7ee ff4e 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015824:	f241 0201 	movw	r2, #4097	; 0x1001
 8015828:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801582c:	4658      	mov	r0, fp
 801582e:	f7f1 fe4b 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8015832:	f241 0204 	movw	r2, #4100	; 0x1004
    return (lv_coord_t)v.num;
 8015836:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8015838:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        scale_center.x = scale_area.x1 + r_edge;
 801583c:	b2ad      	uxth	r5, r5
 801583e:	4658      	mov	r0, fp
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8015840:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8015844:	f7f1 fe40 	bl	80074c8 <lv_obj_get_style_prop>
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 8015848:	463a      	mov	r2, r7
        nm_cord.x1 = scale_center.x - w;
 801584a:	f3c6 064f 	ubfx	r6, r6, #1, #16
        scale_center.y = scale_area.y1 + r_edge;
 801584e:	b2a4      	uxth	r4, r4
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 8015850:	ee18 1a10 	vmov	r1, s16
        nm_cord.x1 = scale_center.x - w;
 8015854:	1bab      	subs	r3, r5, r6
        nm_cord.x2 = scale_center.x + w;
 8015856:	442e      	add	r6, r5
        nm_cord.x1 = scale_center.x - w;
 8015858:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801585c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
        nm_cord.x2 = scale_center.x + w;
 8015860:	f8ad 6114 	strh.w	r6, [sp, #276]	; 0x114
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8015864:	fa03 f080 	sxtah	r0, r3, r0
        nm_cord.y1 = scale_center.y - h;
 8015868:	f3c0 004f 	ubfx	r0, r0, #1, #16
 801586c:	1a23      	subs	r3, r4, r0
        nm_cord.y2 = scale_center.y + h;
 801586e:	4404      	add	r4, r0
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 8015870:	a844      	add	r0, sp, #272	; 0x110
        nm_cord.y1 = scale_center.y - h;
 8015872:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
        nm_cord.y2 = scale_center.y + h;
 8015876:	f8ad 4116 	strh.w	r4, [sp, #278]	; 0x116
        lv_draw_rect(&nm_cord, clip_area, &mid_dsc);
 801587a:	f7f7 f9d7 	bl	800cc2c <lv_draw_rect>
}
 801587e:	b05f      	add	sp, #380	; 0x17c
 8015880:	ecbd 8b04 	vpop	{d8-d9}
 8015884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 8015888:	7923      	ldrb	r3, [r4, #4]
 801588a:	2b03      	cmp	r3, #3
 801588c:	d133      	bne.n	80158f6 <lv_meter_event+0x2ca>
        arc_dsc.color = indic->type_data.arc.color;
 801588e:	8b23      	ldrh	r3, [r4, #24]
 8015890:	f8ad 3130 	strh.w	r3, [sp, #304]	; 0x130
        arc_dsc.width = indic->type_data.arc.width;
 8015894:	8a23      	ldrh	r3, [r4, #16]
 8015896:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801589a:	7963      	ldrb	r3, [r4, #5]
 801589c:	2bfd      	cmp	r3, #253	; 0xfd
 801589e:	bf97      	itett	ls
 80158a0:	9a06      	ldrls	r2, [sp, #24]
 80158a2:	464b      	movhi	r3, r9
 80158a4:	4353      	mulls	r3, r2
 80158a6:	121b      	asrls	r3, r3, #8
 80158a8:	f88d 3138 	strb.w	r3, [sp, #312]	; 0x138
        lv_meter_scale_t * scale = indic->scale;
 80158ac:	6826      	ldr	r6, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80158ae:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 80158b2:	8bf2      	ldrh	r2, [r6, #30]
 80158b4:	441a      	add	r2, r3
 80158b6:	9200      	str	r2, [sp, #0]
 80158b8:	68a0      	ldr	r0, [r4, #8]
 80158ba:	e9d6 1205 	ldrd	r1, r2, [r6, #20]
 80158be:	f001 fffa 	bl	80178b6 <lv_map>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80158c2:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 80158c6:	8bf2      	ldrh	r2, [r6, #30]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80158c8:	4682      	mov	sl, r0
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 80158ca:	441a      	add	r2, r3
 80158cc:	9200      	str	r2, [sp, #0]
 80158ce:	68e0      	ldr	r0, [r4, #12]
 80158d0:	e9d6 1205 	ldrd	r1, r2, [r6, #20]
 80158d4:	f001 ffef 	bl	80178b6 <lv_map>
        lv_draw_arc(scale_center.x, scale_center.y, r_out + indic->type_data.arc.r_mod, start_angle, end_angle, clip_area, &arc_dsc);
 80158d8:	8b62      	ldrh	r2, [r4, #26]
 80158da:	9b05      	ldr	r3, [sp, #20]
 80158dc:	b280      	uxth	r0, r0
 80158de:	442a      	add	r2, r5
 80158e0:	4641      	mov	r1, r8
 80158e2:	9302      	str	r3, [sp, #8]
 80158e4:	fa1f f38a 	uxth.w	r3, sl
 80158e8:	9000      	str	r0, [sp, #0]
 80158ea:	b292      	uxth	r2, r2
 80158ec:	4638      	mov	r0, r7
 80158ee:	ed8d 8a01 	vstr	s16, [sp, #4]
 80158f2:	f7f3 f84d 	bl	8008990 <lv_draw_arc>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80158f6:	4621      	mov	r1, r4
 80158f8:	ee18 0a90 	vmov	r0, s17
 80158fc:	f001 ff11 	bl	8017722 <_lv_ll_get_prev>
 8015900:	4604      	mov	r4, r0
 8015902:	e6e9      	b.n	80156d8 <lv_meter_event+0xac>
 8015904:	08025f8c 	.word	0x08025f8c
        lv_coord_t r_out = r_edge + scale->r_mod;
 8015908:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801590a:	8ba3      	ldrh	r3, [r4, #28]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801590c:	89a6      	ldrh	r6, [r4, #12]
        lv_coord_t r_out = r_edge + scale->r_mod;
 801590e:	4413      	add	r3, r2
 8015910:	b29d      	uxth	r5, r3
 8015912:	b21b      	sxth	r3, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8015914:	1ba9      	subs	r1, r5, r6
 8015916:	1b76      	subs	r6, r6, r5
        lv_coord_t r_out = r_edge + scale->r_mod;
 8015918:	9312      	str	r3, [sp, #72]	; 0x48
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801591a:	b28f      	uxth	r7, r1
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 801591c:	88a3      	ldrh	r3, [r4, #4]
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801591e:	b209      	sxth	r1, r1
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 8015920:	1aea      	subs	r2, r5, r3
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 8015922:	1b5b      	subs	r3, r3, r5
 8015924:	9113      	str	r1, [sp, #76]	; 0x4c
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8015926:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801592a:	fa11 f083 	uxtah	r0, r1, r3
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801592e:	fa11 f182 	uxtah	r1, r1, r2
        area_inner_minor.x1 = p_center.x - r_in_minor;
 8015932:	f8ad 0070 	strh.w	r0, [sp, #112]	; 0x70
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8015936:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801593a:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801593e:	a91c      	add	r1, sp, #112	; 0x70
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8015940:	fa10 f383 	uxtah	r3, r0, r3
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8015944:	fa10 f282 	uxtah	r2, r0, r2
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 8015948:	a827      	add	r0, sp, #156	; 0x9c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 801594a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801594e:	2301      	movs	r3, #1
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8015950:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 8015954:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015958:	f7f6 fda8 	bl	800c4ac <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 801595c:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8015960:	a91e      	add	r1, sp, #120	; 0x78
 8015962:	a82e      	add	r0, sp, #184	; 0xb8
        area_inner_major.x1 = p_center.x - r_in_major;
 8015964:	fa13 f286 	uxtah	r2, r3, r6
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8015968:	3b01      	subs	r3, #1
        area_inner_major.x1 = p_center.x - r_in_major;
 801596a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 801596e:	443b      	add	r3, r7
        area_inner_major.y1 = p_center.y - r_in_major;
 8015970:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8015974:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8015978:	2301      	movs	r3, #1
        area_inner_major.y1 = p_center.y - r_in_major;
 801597a:	fa12 f686 	uxtah	r6, r2, r6
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801597e:	3a01      	subs	r2, #1
 8015980:	4417      	add	r7, r2
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8015982:	f647 72ff 	movw	r2, #32767	; 0x7fff
        area_inner_major.y1 = p_center.y - r_in_major;
 8015986:	f8ad 607a 	strh.w	r6, [sp, #122]	; 0x7a
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801598a:	f8ad 707e 	strh.w	r7, [sp, #126]	; 0x7e
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 801598e:	f7f6 fd8d 	bl	800c4ac <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 8015992:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 8015996:	a835      	add	r0, sp, #212	; 0xd4
        area_outer.x1 = p_center.x - r_out;
 8015998:	1b5a      	subs	r2, r3, r5
        area_outer.x2 = p_center.x + r_out - 1;
 801599a:	3b01      	subs	r3, #1
        area_outer.x1 = p_center.x - r_out;
 801599c:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
        area_outer.x2 = p_center.x + r_out - 1;
 80159a0:	442b      	add	r3, r5
        area_outer.y1 = p_center.y - r_out;
 80159a2:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
        area_outer.x2 = p_center.x + r_out - 1;
 80159a6:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80159aa:	2300      	movs	r3, #0
        area_outer.y1 = p_center.y - r_out;
 80159ac:	1b51      	subs	r1, r2, r5
        area_outer.y2 = p_center.y + r_out - 1;
 80159ae:	3a01      	subs	r2, #1
 80159b0:	4415      	add	r5, r2
        area_outer.y1 = p_center.y - r_out;
 80159b2:	f8ad 1082 	strh.w	r1, [sp, #130]	; 0x82
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80159b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80159ba:	a920      	add	r1, sp, #128	; 0x80
        area_outer.y2 = p_center.y + r_out - 1;
 80159bc:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 80159c0:	f7f6 fd74 	bl	800c4ac <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80159c4:	2100      	movs	r1, #0
 80159c6:	a835      	add	r0, sp, #212	; 0xd4
 80159c8:	f7f6 fc0a 	bl	800c1e0 <lv_draw_mask_add>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80159cc:	8963      	ldrh	r3, [r4, #10]
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80159ce:	4680      	mov	r8, r0
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80159d0:	b18b      	cbz	r3, 80159f6 <lv_meter_event+0x3ca>
 80159d2:	3b01      	subs	r3, #1
 80159d4:	9305      	str	r3, [sp, #20]
            lv_coord_t line_width = line_width_ori;
 80159d6:	2300      	movs	r3, #0
        for(i = 0; i < scale->tick_cnt; i++) {
 80159d8:	8862      	ldrh	r2, [r4, #2]
 80159da:	9306      	str	r3, [sp, #24]
 80159dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80159e0:	4293      	cmp	r3, r2
 80159e2:	d30b      	bcc.n	80159fc <lv_meter_event+0x3d0>
        lv_draw_mask_remove_id(outer_mask_id);
 80159e4:	4640      	mov	r0, r8
 80159e6:	f7f6 fc33 	bl	800c250 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 80159ea:	4621      	mov	r1, r4
 80159ec:	ee19 0a10 	vmov	r0, s18
 80159f0:	f001 fe97 	bl	8017722 <_lv_ll_get_prev>
 80159f4:	e6ba      	b.n	801576c <lv_meter_event+0x140>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80159f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159fa:	e7eb      	b.n	80159d4 <lv_meter_event+0x3a8>
            minor_cnt++;
 80159fc:	9b05      	ldr	r3, [sp, #20]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 80159fe:	2100      	movs	r1, #0
            minor_cnt++;
 8015a00:	3301      	adds	r3, #1
 8015a02:	9305      	str	r3, [sp, #20]
            if(minor_cnt == scale->tick_major_nth) {
 8015a04:	9a05      	ldr	r2, [sp, #20]
 8015a06:	8963      	ldrh	r3, [r4, #10]
 8015a08:	429a      	cmp	r2, r3
                major = true;
 8015a0a:	bf0b      	itete	eq
 8015a0c:	2301      	moveq	r3, #1
            bool major = false;
 8015a0e:	2300      	movne	r3, #0
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015a10:	a82e      	addeq	r0, sp, #184	; 0xb8
 8015a12:	a827      	addne	r0, sp, #156	; 0x9c
                major = true;
 8015a14:	bf05      	ittet	eq
 8015a16:	9309      	streq	r3, [sp, #36]	; 0x24
                minor_cnt = 0;
 8015a18:	2300      	moveq	r3, #0
            bool major = false;
 8015a1a:	9309      	strne	r3, [sp, #36]	; 0x24
                minor_cnt = 0;
 8015a1c:	9305      	streq	r3, [sp, #20]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015a1e:	f7f6 fbdf 	bl	800c1e0 <lv_draw_mask_add>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8015a22:	f89d 3018 	ldrb.w	r3, [sp, #24]
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 8015a26:	ee09 0a90 	vmov	s19, r0
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8015a2a:	8862      	ldrh	r2, [r4, #2]
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	9308      	str	r3, [sp, #32]
 8015a30:	69a3      	ldr	r3, [r4, #24]
 8015a32:	3a01      	subs	r2, #1
 8015a34:	9808      	ldr	r0, [sp, #32]
 8015a36:	9300      	str	r3, [sp, #0]
 8015a38:	6963      	ldr	r3, [r4, #20]
 8015a3a:	f001 ff3c 	bl	80178b6 <lv_map>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8015a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 8015a40:	4681      	mov	r9, r0
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	f000 811c 	beq.w	8015c80 <lv_meter_event+0x654>
 8015a48:	7a23      	ldrb	r3, [r4, #8]
 8015a4a:	f003 031f 	and.w	r3, r3, #31
 8015a4e:	930e      	str	r3, [sp, #56]	; 0x38
 8015a50:	8923      	ldrh	r3, [r4, #8]
 8015a52:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015a56:	930d      	str	r3, [sp, #52]	; 0x34
 8015a58:	7a63      	ldrb	r3, [r4, #9]
 8015a5a:	08db      	lsrs	r3, r3, #3
 8015a5c:	930f      	str	r3, [sp, #60]	; 0x3c
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8015a5e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015a62:	ee18 0a90 	vmov	r0, s17
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8015a66:	930c      	str	r3, [sp, #48]	; 0x30
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015a68:	f001 fe54 	bl	8017714 <_lv_ll_get_tail>
 8015a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a6e:	4605      	mov	r5, r0
 8015a70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015a72:	9307      	str	r3, [sp, #28]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015a74:	f248 0781 	movw	r7, #32897	; 0x8081
 8015a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            lv_coord_t line_width = line_width_ori;
 8015a7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a80:	2d00      	cmp	r5, #0
 8015a82:	f040 810b 	bne.w	8015c9c <lv_meter_event+0x670>
            int32_t angle_upscale = ((i * scale->angle_range) << 8) / (scale->tick_cnt - 1);
 8015a86:	9b08      	ldr	r3, [sp, #32]
 8015a88:	8be7      	ldrh	r7, [r4, #30]
 8015a8a:	8860      	ldrh	r0, [r4, #2]
 8015a8c:	435f      	muls	r7, r3
 8015a8e:	3801      	subs	r0, #1
 8015a90:	023f      	lsls	r7, r7, #8
 8015a92:	fb97 f7f0 	sdiv	r7, r7, r0
            int32_t angle_low = (angle_upscale >> 8);
 8015a96:	123b      	asrs	r3, r7, #8
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 8015a98:	8c20      	ldrh	r0, [r4, #32]
            int32_t angle_low = (angle_upscale >> 8);
 8015a9a:	9314      	str	r3, [sp, #80]	; 0x50
            int32_t angle_rem = angle_upscale & 0xFF;
 8015a9c:	b2fb      	uxtb	r3, r7
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 8015a9e:	f3c7 270f 	ubfx	r7, r7, #8, #16
            int32_t angle_rem = angle_upscale & 0xFF;
 8015aa2:	930a      	str	r3, [sp, #40]	; 0x28
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 8015aa4:	4438      	add	r0, r7
 8015aa6:	b200      	sxth	r0, r0
 8015aa8:	f001 fe58 	bl	801775c <lv_trigo_sin>
            int32_t angle_high = angle_low + 1;
 8015aac:	9b14      	ldr	r3, [sp, #80]	; 0x50
            int32_t sin_low = lv_trigo_sin(angle_low + scale->rotation);
 8015aae:	9010      	str	r0, [sp, #64]	; 0x40
            int32_t angle_high = angle_low + 1;
 8015ab0:	1c58      	adds	r0, r3, #1
            int32_t sin_high = lv_trigo_sin(angle_high + scale->rotation);
 8015ab2:	8c23      	ldrh	r3, [r4, #32]
 8015ab4:	b282      	uxth	r2, r0
 8015ab6:	fa13 f080 	uxtah	r0, r3, r0
 8015aba:	b200      	sxth	r0, r0
 8015abc:	9215      	str	r2, [sp, #84]	; 0x54
 8015abe:	f001 fe4d 	bl	801775c <lv_trigo_sin>
            int32_t sin_mid = (sin_low * (256 - angle_rem) + sin_high * angle_rem) >> 8;
 8015ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ac6:	4350      	muls	r0, r2
 8015ac8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015aca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015ace:	fb03 0101 	mla	r1, r3, r1, r0
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 8015ad2:	8c20      	ldrh	r0, [r4, #32]
 8015ad4:	9314      	str	r3, [sp, #80]	; 0x50
 8015ad6:	305a      	adds	r0, #90	; 0x5a
 8015ad8:	120b      	asrs	r3, r1, #8
 8015ada:	4438      	add	r0, r7
 8015adc:	9310      	str	r3, [sp, #64]	; 0x40
 8015ade:	b200      	sxth	r0, r0
 8015ae0:	f001 fe3c 	bl	801775c <lv_trigo_sin>
 8015ae4:	4607      	mov	r7, r0
 8015ae6:	8c20      	ldrh	r0, [r4, #32]
 8015ae8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015aea:	305a      	adds	r0, #90	; 0x5a
 8015aec:	4410      	add	r0, r2
 8015aee:	b200      	sxth	r0, r0
 8015af0:	f001 fe34 	bl	801775c <lv_trigo_sin>
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            line_dsc.color = line_color;
 8015af6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015af8:	4358      	muls	r0, r3
 8015afa:	9b14      	ldr	r3, [sp, #80]	; 0x50
            line_dsc.width = line_width;
 8015afc:	f8ad a092 	strh.w	sl, [sp, #146]	; 0x92
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015b00:	fb03 0707 	mla	r7, r3, r7, r0
            line_dsc.color = line_color;
 8015b04:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015b08:	a818      	add	r0, sp, #96	; 0x60
            line_dsc.color = line_color;
 8015b0a:	f366 0304 	bfi	r3, r6, #0, #5
            int32_t cos_mid = (cos_low * (256 - angle_rem) + cos_high * angle_rem) >> 8;
 8015b0e:	123f      	asrs	r7, r7, #8
            line_dsc.color = line_color;
 8015b10:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8015b14:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8015b18:	f362 134a 	bfi	r3, r2, #5, #6
 8015b1c:	9a07      	ldr	r2, [sp, #28]
 8015b1e:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 8015b22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015b26:	f362 03c7 	bfi	r3, r2, #3, #5
 8015b2a:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
            p_outer.x = (int32_t)(((int32_t)cos_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.x;
 8015b2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015b30:	4453      	add	r3, sl
 8015b32:	fb03 f207 	mul.w	r2, r3, r7
 8015b36:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 8015b3a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8015b3e:	eb02 32e1 	add.w	r2, r2, r1, asr #15
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015b42:	a917      	add	r1, sp, #92	; 0x5c
            p_outer.x = (int32_t)(((int32_t)cos_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.x;
 8015b44:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p_outer.y = (int32_t)(((int32_t)sin_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.y;
 8015b48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b4a:	4353      	muls	r3, r2
 8015b4c:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
 8015b50:	337f      	adds	r3, #127	; 0x7f
 8015b52:	eb02 33e3 	add.w	r3, r2, r3, asr #15
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015b56:	ee18 2a10 	vmov	r2, s16
            p_outer.y = (int32_t)(((int32_t)sin_mid * (r_out + line_width) + 127) >> (LV_TRIGO_SHIFT)) + p_center.y;
 8015b5a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p_outer, &p_center, clip_area, &line_dsc);
 8015b5e:	ab24      	add	r3, sp, #144	; 0x90
 8015b60:	f7f5 fa14 	bl	800af8c <lv_draw_line>
            line_dsc.color = line_color_ori;
 8015b64:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
 8015b68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
            lv_draw_mask_remove_id(inner_act_mask_id);
 8015b6a:	ee19 0a90 	vmov	r0, s19
            line_dsc.color = line_color_ori;
 8015b6e:	f362 0304 	bfi	r3, r2, #0, #5
 8015b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015b74:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8015b78:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8015b7c:	f362 134a 	bfi	r3, r2, #5, #6
 8015b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b82:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 8015b86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015b8a:	f362 03c7 	bfi	r3, r2, #3, #5
 8015b8e:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
            line_dsc.width = line_width_ori;
 8015b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b94:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
            lv_draw_mask_remove_id(inner_act_mask_id);
 8015b98:	f7f6 fb5a 	bl	800c250 <lv_draw_mask_remove_id>
            if(major) {
 8015b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d06b      	beq.n	8015c7a <lv_meter_event+0x64e>
                lv_draw_mask_remove_id(outer_mask_id);
 8015ba2:	4640      	mov	r0, r8
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8015ba4:	ae44      	add	r6, sp, #272	; 0x110
                lv_draw_mask_remove_id(outer_mask_id);
 8015ba6:	f7f6 fb53 	bl	800c250 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 8015baa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bac:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8015bb0:	2220      	movs	r2, #32
 8015bb2:	a93c      	add	r1, sp, #240	; 0xf0
 8015bb4:	4630      	mov	r0, r6
                uint32_t r_text = r_in_major - scale->label_gap;
 8015bb6:	eba3 0a0a 	sub.w	sl, r3, sl
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015bba:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 8015bbe:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015bc2:	9307      	str	r3, [sp, #28]
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8015bc4:	f001 fee0 	bl	8017988 <lv_memcpy>
                dsc.id = i / scale->tick_major_nth;
 8015bc8:	8963      	ldrh	r3, [r4, #10]
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 8015bca:	2110      	movs	r1, #16
                dsc.id = i / scale->tick_major_nth;
 8015bcc:	9a08      	ldr	r2, [sp, #32]
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 8015bce:	a855      	add	r0, sp, #340	; 0x154
                dsc.label_dsc = &label_dsc_tmp;
 8015bd0:	964f      	str	r6, [sp, #316]	; 0x13c
                dsc.value = value_of_line;
 8015bd2:	f8cd 9170 	str.w	r9, [sp, #368]	; 0x170
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 8015bd6:	fb0a f707 	mul.w	r7, sl, r7
                dsc.id = i / scale->tick_major_nth;
 8015bda:	fbb2 f3f3 	udiv	r3, r2, r3
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 8015bde:	4ab0      	ldr	r2, [pc, #704]	; (8015ea0 <lv_meter_event+0x874>)
                p.x = (int32_t)((int32_t)((int32_t)cos_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.x;
 8015be0:	377f      	adds	r7, #127	; 0x7f
                dsc.id = i / scale->tick_major_nth;
 8015be2:	935a      	str	r3, [sp, #360]	; 0x168
                lv_snprintf(dsc.text, sizeof(dsc.text), "%d", value_of_line);
 8015be4:	464b      	mov	r3, r9
 8015be6:	f002 fc9f 	bl	8018528 <lv_snprintf>
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 8015bea:	aa4c      	add	r2, sp, #304	; 0x130
 8015bec:	211a      	movs	r1, #26
 8015bee:	4658      	mov	r0, fp
 8015bf0:	f7ec fa1a 	bl	8002028 <lv_event_send>
                lv_txt_get_size(&label_size, dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8015bf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015bf8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8015bfa:	a955      	add	r1, sp, #340	; 0x154
 8015bfc:	9301      	str	r3, [sp, #4]
 8015bfe:	a819      	add	r0, sp, #100	; 0x64
 8015c00:	f9bd 3102 	ldrsh.w	r3, [sp, #258]	; 0x102
 8015c04:	9502      	str	r5, [sp, #8]
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	f9bd 3104 	ldrsh.w	r3, [sp, #260]	; 0x104
 8015c0c:	f003 fd93 	bl	8019736 <lv_txt_get_size>
                label_cord.x1 = p.x - label_size.x / 2;
 8015c10:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015c14:	9910      	ldr	r1, [sp, #64]	; 0x40
                label_cord.x1 = p.x - label_size.x / 2;
 8015c16:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
                label_cord.y1 = p.y - label_size.y / 2;
 8015c1a:	9807      	ldr	r0, [sp, #28]
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015c1c:	fb0a fa01 	mul.w	sl, sl, r1
                label_cord.x1 = p.x - label_size.x / 2;
 8015c20:	eba8 0863 	sub.w	r8, r8, r3, asr #1
                label_cord.y1 = p.y - label_size.y / 2;
 8015c24:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
                p.y = (int32_t)((int32_t)((int32_t)sin_mid * r_text + 127) >> LV_TRIGO_SHIFT) + p_center.y;
 8015c28:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015c2c:	9500      	str	r5, [sp, #0]
                label_cord.y1 = p.y - label_size.y / 2;
 8015c2e:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
                label_cord.x1 = p.x - label_size.x / 2;
 8015c32:	eb08 38e7 	add.w	r8, r8, r7, asr #15
                label_cord.y1 = p.y - label_size.y / 2;
 8015c36:	eba0 0661 	sub.w	r6, r0, r1, asr #1
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015c3a:	ee18 1a10 	vmov	r1, s16
                label_cord.x1 = p.x - label_size.x / 2;
 8015c3e:	fa1f f888 	uxth.w	r8, r8
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015c42:	a822      	add	r0, sp, #136	; 0x88
                label_cord.y1 = p.y - label_size.y / 2;
 8015c44:	eb06 36ea 	add.w	r6, r6, sl, asr #15
                label_cord.x1 = p.x - label_size.x / 2;
 8015c48:	f8ad 8088 	strh.w	r8, [sp, #136]	; 0x88
                label_cord.x2 = label_cord.x1 + label_size.x;
 8015c4c:	4490      	add	r8, r2
                label_cord.y1 = p.y - label_size.y / 2;
 8015c4e:	b2b6      	uxth	r6, r6
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015c50:	aa3c      	add	r2, sp, #240	; 0xf0
                label_cord.x2 = label_cord.x1 + label_size.x;
 8015c52:	f8ad 808c 	strh.w	r8, [sp, #140]	; 0x8c
                label_cord.y1 = p.y - label_size.y / 2;
 8015c56:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
                label_cord.y2 = label_cord.y1 + label_size.y;
 8015c5a:	441e      	add	r6, r3
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015c5c:	ab55      	add	r3, sp, #340	; 0x154
                label_cord.y2 = label_cord.y1 + label_size.y;
 8015c5e:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
                lv_draw_label(&label_cord, clip_area, &label_dsc, dsc.text, NULL);
 8015c62:	f7f4 fee5 	bl	800aa30 <lv_draw_label>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 8015c66:	aa4c      	add	r2, sp, #304	; 0x130
 8015c68:	211b      	movs	r1, #27
 8015c6a:	4658      	mov	r0, fp
 8015c6c:	f7ec f9dc 	bl	8002028 <lv_event_send>
                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 8015c70:	4629      	mov	r1, r5
 8015c72:	a835      	add	r0, sp, #212	; 0xd4
 8015c74:	f7f6 fab4 	bl	800c1e0 <lv_draw_mask_add>
 8015c78:	4680      	mov	r8, r0
        for(i = 0; i < scale->tick_cnt; i++) {
 8015c7a:	9b06      	ldr	r3, [sp, #24]
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	e6ab      	b.n	80159d8 <lv_meter_event+0x3ac>
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8015c80:	7823      	ldrb	r3, [r4, #0]
 8015c82:	f003 031f 	and.w	r3, r3, #31
 8015c86:	930e      	str	r3, [sp, #56]	; 0x38
 8015c88:	8823      	ldrh	r3, [r4, #0]
 8015c8a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8015c90:	7863      	ldrb	r3, [r4, #1]
 8015c92:	08db      	lsrs	r3, r3, #3
 8015c94:	930f      	str	r3, [sp, #60]	; 0x3c
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8015c96:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015c9a:	e6e2      	b.n	8015a62 <lv_meter_event+0x436>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 8015c9c:	792b      	ldrb	r3, [r5, #4]
 8015c9e:	2b02      	cmp	r3, #2
 8015ca0:	d116      	bne.n	8015cd0 <lv_meter_event+0x6a4>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 8015ca2:	68a9      	ldr	r1, [r5, #8]
 8015ca4:	4589      	cmp	r9, r1
 8015ca6:	db13      	blt.n	8015cd0 <lv_meter_event+0x6a4>
 8015ca8:	68ea      	ldr	r2, [r5, #12]
 8015caa:	4591      	cmp	r9, r2
 8015cac:	dc10      	bgt.n	8015cd0 <lv_meter_event+0x6a4>
                    line_width += indic->type_data.scale_lines.width_mod;
 8015cae:	8a2b      	ldrh	r3, [r5, #16]
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8015cb0:	8aa8      	ldrh	r0, [r5, #20]
                    line_width += indic->type_data.scale_lines.width_mod;
 8015cb2:	4453      	add	r3, sl
 8015cb4:	fa0f fa83 	sxth.w	sl, r3
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 8015cb8:	8a6b      	ldrh	r3, [r5, #18]
 8015cba:	4283      	cmp	r3, r0
 8015cbc:	d10f      	bne.n	8015cde <lv_meter_event+0x6b2>
                        line_color = indic->type_data.scale_lines.color_start;
 8015cbe:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015cc2:	7cae      	ldrb	r6, [r5, #18]
 8015cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cc6:	f006 061f 	and.w	r6, r6, #31
 8015cca:	7ceb      	ldrb	r3, [r5, #19]
 8015ccc:	08db      	lsrs	r3, r3, #3
 8015cce:	9307      	str	r3, [sp, #28]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015cd0:	4629      	mov	r1, r5
 8015cd2:	ee18 0a90 	vmov	r0, s17
 8015cd6:	f001 fd24 	bl	8017722 <_lv_ll_get_prev>
 8015cda:	4605      	mov	r5, r0
 8015cdc:	e6d0      	b.n	8015a80 <lv_meter_event+0x454>
                        if(indic->type_data.scale_lines.local_grad) {
 8015cde:	7dab      	ldrb	r3, [r5, #22]
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015ce0:	4648      	mov	r0, r9
                        if(indic->type_data.scale_lines.local_grad) {
 8015ce2:	f013 0301 	ands.w	r3, r3, #1
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 8015ce6:	bf17      	itett	ne
 8015ce8:	23ff      	movne	r3, #255	; 0xff
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015cea:	22ff      	moveq	r2, #255	; 0xff
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 8015cec:	9300      	strne	r3, [sp, #0]
 8015cee:	2300      	movne	r3, #0
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8015cf0:	bf04      	itt	eq
 8015cf2:	9200      	streq	r2, [sp, #0]
 8015cf4:	e9d4 1205 	ldrdeq	r1, r2, [r4, #20]
 8015cf8:	f001 fddd 	bl	80178b6 <lv_map>
 8015cfc:	7ce9      	ldrb	r1, [r5, #19]
 8015cfe:	b2c0      	uxtb	r0, r0
 8015d00:	7d6b      	ldrb	r3, [r5, #21]
 8015d02:	08c9      	lsrs	r1, r1, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015d04:	7d2e      	ldrb	r6, [r5, #20]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015d06:	f1c0 02ff 	rsb	r2, r0, #255	; 0xff
 8015d0a:	08db      	lsrs	r3, r3, #3
 8015d0c:	4351      	muls	r1, r2
 8015d0e:	fb03 1300 	mla	r3, r3, r0, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015d12:	8a69      	ldrh	r1, [r5, #18]
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015d14:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015d16:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015d1a:	437b      	muls	r3, r7
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015d1c:	4351      	muls	r1, r2
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8015d1e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 8015d22:	9307      	str	r3, [sp, #28]
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8015d24:	8aab      	ldrh	r3, [r5, #20]
 8015d26:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8015d2a:	fb03 1300 	mla	r3, r3, r0, r1
 8015d2e:	3380      	adds	r3, #128	; 0x80
 8015d30:	437b      	muls	r3, r7
 8015d32:	f3c3 53c5 	ubfx	r3, r3, #23, #6
 8015d36:	930b      	str	r3, [sp, #44]	; 0x2c
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8015d38:	f006 031f 	and.w	r3, r6, #31
 8015d3c:	7cae      	ldrb	r6, [r5, #18]
 8015d3e:	f006 061f 	and.w	r6, r6, #31
 8015d42:	4356      	muls	r6, r2
 8015d44:	fb03 6600 	mla	r6, r3, r0, r6
 8015d48:	3680      	adds	r6, #128	; 0x80
 8015d4a:	437e      	muls	r6, r7
 8015d4c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8015d50:	e7be      	b.n	8015cd0 <lv_meter_event+0x6a4>
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 8015d52:	7923      	ldrb	r3, [r4, #4]
        lv_meter_scale_t * scale = indic->scale;
 8015d54:	6825      	ldr	r5, [r4, #0]
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 8015d56:	2b01      	cmp	r3, #1
 8015d58:	d14d      	bne.n	8015df6 <lv_meter_event+0x7ca>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015d5a:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8015d5e:	8bea      	ldrh	r2, [r5, #30]
 8015d60:	441a      	add	r2, r3
 8015d62:	9200      	str	r2, [sp, #0]
 8015d64:	68e0      	ldr	r0, [r4, #12]
 8015d66:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 8015d6a:	f001 fda4 	bl	80178b6 <lv_map>
 8015d6e:	4601      	mov	r1, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8015d70:	8a60      	ldrh	r0, [r4, #18]
 8015d72:	8bad      	ldrh	r5, [r5, #28]
 8015d74:	4430      	add	r0, r6
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8015d76:	9105      	str	r1, [sp, #20]
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8015d78:	4405      	add	r5, r0
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8015d7a:	b208      	sxth	r0, r1
 8015d7c:	f001 fcee 	bl	801775c <lv_trigo_sin>
 8015d80:	f647 72ff 	movw	r2, #32767	; 0x7fff
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8015d84:	b22d      	sxth	r5, r5
 8015d86:	9905      	ldr	r1, [sp, #20]
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8015d88:	fb00 f305 	mul.w	r3, r0, r5
 8015d8c:	f8bd 00ba 	ldrh.w	r0, [sp, #186]	; 0xba
 8015d90:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d94:	4403      	add	r3, r0
 8015d96:	f101 005a 	add.w	r0, r1, #90	; 0x5a
 8015d9a:	b200      	sxth	r0, r0
 8015d9c:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
 8015da0:	f001 fcdc 	bl	801775c <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015da4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015da8:	4345      	muls	r5, r0
 8015daa:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015dae:	a93c      	add	r1, sp, #240	; 0xf0
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015db0:	fb95 f5f2 	sdiv	r5, r5, r2
 8015db4:	4405      	add	r5, r0
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015db6:	a82e      	add	r0, sp, #184	; 0xb8
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 8015db8:	f8ad 50f0 	strh.w	r5, [sp, #240]	; 0xf0
            line_dsc.color = indic->type_data.needle_line.color;
 8015dbc:	8aa3      	ldrh	r3, [r4, #20]
 8015dbe:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
            line_dsc.width = indic->type_data.needle_line.width;
 8015dc2:	8a23      	ldrh	r3, [r4, #16]
 8015dc4:	f8ad 3112 	strh.w	r3, [sp, #274]	; 0x112
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015dc8:	7963      	ldrb	r3, [r4, #5]
 8015dca:	2bfd      	cmp	r3, #253	; 0xfd
 8015dcc:	bf96      	itet	ls
 8015dce:	fa5f f288 	uxtbls.w	r2, r8
 8015dd2:	464b      	movhi	r3, r9
 8015dd4:	4353      	mulls	r3, r2
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015dd6:	ee18 2a10 	vmov	r2, s16
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015dda:	bf98      	it	ls
 8015ddc:	0a1b      	lsrls	r3, r3, #8
 8015dde:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
            lv_draw_line(&scale_center, &p_end, clip_area, &line_dsc);
 8015de2:	ab44      	add	r3, sp, #272	; 0x110
 8015de4:	f7f5 f8d2 	bl	800af8c <lv_draw_line>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8015de8:	4621      	mov	r1, r4
 8015dea:	ee18 0a90 	vmov	r0, s17
 8015dee:	f001 fc98 	bl	8017722 <_lv_ll_get_prev>
 8015df2:	4604      	mov	r4, r0
 8015df4:	e4fa      	b.n	80157ec <lv_meter_event+0x1c0>
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1f6      	bne.n	8015de8 <lv_meter_event+0x7bc>
            if(indic->type_data.needle_img.src == NULL) continue;
 8015dfa:	6923      	ldr	r3, [r4, #16]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d0f3      	beq.n	8015de8 <lv_meter_event+0x7bc>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015e00:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8015e04:	8bea      	ldrh	r2, [r5, #30]
 8015e06:	441a      	add	r2, r3
 8015e08:	9200      	str	r2, [sp, #0]
 8015e0a:	68e0      	ldr	r0, [r4, #12]
 8015e0c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 8015e10:	f001 fd51 	bl	80178b6 <lv_map>
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8015e14:	a935      	add	r1, sp, #212	; 0xd4
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 8015e16:	4605      	mov	r5, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8015e18:	6920      	ldr	r0, [r4, #16]
 8015e1a:	f7f9 fa6f 	bl	800f2fc <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015e1e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8015e22:	f8bd c0b8 	ldrh.w	ip, [sp, #184]	; 0xb8
            a.x2 = a.x1 + info.w - 1;
 8015e26:	9b35      	ldr	r3, [sp, #212]	; 0xd4
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015e28:	ebac 0c01 	sub.w	ip, ip, r1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015e2c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
            a.x2 = a.x1 + info.w - 1;
 8015e30:	f3c3 238a 	ubfx	r3, r3, #10, #11
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015e34:	f8bd 00ba 	ldrh.w	r0, [sp, #186]	; 0xba
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015e38:	fa1f fc8c 	uxth.w	ip, ip
            a.x2 = a.x1 + info.w - 1;
 8015e3c:	3b01      	subs	r3, #1
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015e3e:	1a80      	subs	r0, r0, r2
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 8015e40:	f8ad c0f0 	strh.w	ip, [sp, #240]	; 0xf0
            a.x2 = a.x1 + info.w - 1;
 8015e44:	4463      	add	r3, ip
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015e46:	b280      	uxth	r0, r0
            a.x2 = a.x1 + info.w - 1;
 8015e48:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
            a.y2 = a.y1 + info.h - 1;
 8015e4c:	f8bd 30d6 	ldrh.w	r3, [sp, #214]	; 0xd6
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 8015e50:	f8ad 00f2 	strh.w	r0, [sp, #242]	; 0xf2
            a.y2 = a.y1 + info.h - 1;
 8015e54:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8015e58:	3b01      	subs	r3, #1
 8015e5a:	4418      	add	r0, r3
 8015e5c:	f8ad 00f6 	strh.w	r0, [sp, #246]	; 0xf6
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015e60:	7963      	ldrb	r3, [r4, #5]
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 8015e62:	f8ad 1134 	strh.w	r1, [sp, #308]	; 0x134
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015e66:	ee18 1a10 	vmov	r1, s16
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015e6a:	2bfd      	cmp	r3, #253	; 0xfd
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 8015e6c:	f8ad 2136 	strh.w	r2, [sp, #310]	; 0x136
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015e70:	bf96      	itet	ls
 8015e72:	fa5f f088 	uxtbls.w	r0, r8
 8015e76:	464b      	movhi	r3, r9
 8015e78:	4343      	mulls	r3, r0
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015e7a:	a83c      	add	r0, sp, #240	; 0xf0
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8015e7c:	bf98      	it	ls
 8015e7e:	0a1b      	lsrls	r3, r3, #8
 8015e80:	f88d 313b 	strb.w	r3, [sp, #315]	; 0x13b
            angle = angle * 10;
 8015e84:	230a      	movs	r3, #10
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015e86:	6922      	ldr	r2, [r4, #16]
            angle = angle * 10;
 8015e88:	435d      	muls	r5, r3
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015e8a:	4653      	mov	r3, sl
            if(angle > 3600) angle -= 3600;
 8015e8c:	f5b5 6f61 	cmp.w	r5, #3600	; 0xe10
 8015e90:	bfc8      	it	gt
 8015e92:	f5a5 6561 	subgt.w	r5, r5, #3600	; 0xe10
            img_dsc.angle = angle;
 8015e96:	f8ad 5130 	strh.w	r5, [sp, #304]	; 0x130
            lv_draw_img(&a, clip_area, indic->type_data.needle_img.src, &img_dsc);
 8015e9a:	f7f4 fae1 	bl	800a460 <lv_draw_img>
 8015e9e:	e7a3      	b.n	8015de8 <lv_meter_event+0x7bc>
 8015ea0:	08025a60 	.word	0x08025a60

08015ea4 <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 8015ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ea8:	b08b      	sub	sp, #44	; 0x2c
 8015eaa:	4604      	mov	r4, r0
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 8015eac:	2112      	movs	r1, #18
 8015eae:	a805      	add	r0, sp, #20
 8015eb0:	f001 ff30 	bl	8017d14 <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 8015eb4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015eba:	da53      	bge.n	8015f64 <lv_spinbox_updatevalue+0xc0>
        /*Add the sign*/
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8015ebc:	2b00      	cmp	r3, #0
    uint8_t cur_shift_left = 0;
 8015ebe:	f04f 0500 	mov.w	r5, #0
        buf_p++;
 8015ec2:	f10d 0615 	add.w	r6, sp, #21
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 8015ec6:	bfac      	ite	ge
 8015ec8:	222b      	movge	r2, #43	; 0x2b
 8015eca:	222d      	movlt	r2, #45	; 0x2d
 8015ecc:	f88d 2014 	strb.w	r2, [sp, #20]
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%d", LV_ABS(spinbox->value));
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	af01      	add	r7, sp, #4
 8015ed4:	f04f 010e 	mov.w	r1, #14
 8015ed8:	4a2e      	ldr	r2, [pc, #184]	; (8015f94 <lv_spinbox_updatevalue+0xf0>)
 8015eda:	bfb8      	it	lt
 8015edc:	425b      	neglt	r3, r3
 8015ede:	4638      	mov	r0, r7
 8015ee0:	f002 fb22 	bl	8018528 <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 8015ee4:	f894 8070 	ldrb.w	r8, [r4, #112]	; 0x70
 8015ee8:	4638      	mov	r0, r7
 8015eea:	f008 090f 	and.w	r9, r8, #15
 8015eee:	f7ea f999 	bl	8000224 <strlen>
 8015ef2:	eba9 0100 	sub.w	r1, r9, r0
    if(lz_cnt > 0) {
 8015ef6:	2900      	cmp	r1, #0
 8015ef8:	dd0d      	ble.n	8015f16 <lv_spinbox_updatevalue+0x72>
 8015efa:	3001      	adds	r0, #1
 8015efc:	183b      	adds	r3, r7, r0
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
 8015efe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8015f02:	429f      	cmp	r7, r3
            digits[i + lz_cnt] = digits[i];
 8015f04:	545a      	strb	r2, [r3, r1]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 8015f06:	d1fa      	bne.n	8015efe <lv_spinbox_updatevalue+0x5a>
        }
        for(i = 0; i < lz_cnt; i++) {
 8015f08:	2200      	movs	r2, #0
            digits[i] = '0';
 8015f0a:	2030      	movs	r0, #48	; 0x30
        for(i = 0; i < lz_cnt; i++) {
 8015f0c:	3201      	adds	r2, #1
            digits[i] = '0';
 8015f0e:	f803 0b01 	strb.w	r0, [r3], #1
        for(i = 0; i < lz_cnt; i++) {
 8015f12:	4291      	cmp	r1, r2
 8015f14:	d1fa      	bne.n	8015f0c <lv_spinbox_updatevalue+0x68>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8015f16:	f018 00f0 	ands.w	r0, r8, #240	; 0xf0
 8015f1a:	4639      	mov	r1, r7

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015f1c:	f04f 0300 	mov.w	r3, #0
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 8015f20:	bf14      	ite	ne
 8015f22:	ea4f 1818 	movne.w	r8, r8, lsr #4
 8015f26:	46c8      	moveq	r8, r9
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015f28:	4543      	cmp	r3, r8
 8015f2a:	d002      	beq.n	8015f32 <lv_spinbox_updatevalue+0x8e>
 8015f2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f30:	b9da      	cbnz	r2, 8015f6a <lv_spinbox_updatevalue+0xc6>
        (*buf_p) = digits[i];
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 8015f32:	b9f0      	cbnz	r0, 8015f72 <lv_spinbox_updatevalue+0xce>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 8015f34:	a905      	add	r1, sp, #20
 8015f36:	4620      	mov	r0, r4
 8015f38:	f00a fda2 	bl	8020a80 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8015f3c:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
    int32_t step    = spinbox->step;
 8015f40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    while(step >= 10) {
        step /= 10;
 8015f42:	220a      	movs	r2, #10
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8015f44:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 8015f48:	2b09      	cmp	r3, #9
 8015f4a:	dc1e      	bgt.n	8015f8a <lv_spinbox_updatevalue+0xe6>
        cur_pos--;
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8015f4c:	4541      	cmp	r1, r8

    cur_pos -= cur_shift_left;

    lv_textarea_set_cursor_pos(obj, cur_pos);
 8015f4e:	4620      	mov	r0, r4
    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8015f50:	bfc4      	itt	gt
 8015f52:	3101      	addgt	r1, #1
 8015f54:	b2c9      	uxtbgt	r1, r1
    cur_pos -= cur_shift_left;
 8015f56:	1b49      	subs	r1, r1, r5
    lv_textarea_set_cursor_pos(obj, cur_pos);
 8015f58:	b2c9      	uxtb	r1, r1
 8015f5a:	f00a fae3 	bl	8020524 <lv_textarea_set_cursor_pos>
}
 8015f5e:	b00b      	add	sp, #44	; 0x2c
 8015f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cur_shift_left++;
 8015f64:	2501      	movs	r5, #1
    char * buf_p = buf;
 8015f66:	ae05      	add	r6, sp, #20
 8015f68:	e7b2      	b.n	8015ed0 <lv_spinbox_updatevalue+0x2c>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015f6a:	3301      	adds	r3, #1
        (*buf_p) = digits[i];
 8015f6c:	f806 2b01 	strb.w	r2, [r6], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 8015f70:	e7da      	b.n	8015f28 <lv_spinbox_updatevalue+0x84>
        (*buf_p) = '.';
 8015f72:	222e      	movs	r2, #46	; 0x2e
 8015f74:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8015f78:	4599      	cmp	r9, r3
 8015f7a:	dddb      	ble.n	8015f34 <lv_spinbox_updatevalue+0x90>
 8015f7c:	5cfa      	ldrb	r2, [r7, r3]
 8015f7e:	2a00      	cmp	r2, #0
 8015f80:	d0d8      	beq.n	8015f34 <lv_spinbox_updatevalue+0x90>
 8015f82:	3301      	adds	r3, #1
            (*buf_p) = digits[i];
 8015f84:	f806 2b01 	strb.w	r2, [r6], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8015f88:	e7f6      	b.n	8015f78 <lv_spinbox_updatevalue+0xd4>
        cur_pos--;
 8015f8a:	3901      	subs	r1, #1
        step /= 10;
 8015f8c:	fb93 f3f2 	sdiv	r3, r3, r2
        cur_pos--;
 8015f90:	b2c9      	uxtb	r1, r1
 8015f92:	e7d9      	b.n	8015f48 <lv_spinbox_updatevalue+0xa4>
 8015f94:	08025a60 	.word	0x08025a60

08015f98 <lv_spinbox_constructor>:
    spinbox->range_max          = 99999;
 8015f98:	2200      	movs	r2, #0
 8015f9a:	4b11      	ldr	r3, [pc, #68]	; (8015fe0 <lv_spinbox_constructor+0x48>)
{
 8015f9c:	b510      	push	{r4, lr}
 8015f9e:	460c      	mov	r4, r1
    spinbox->range_max          = 99999;
 8015fa0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    spinbox->step               = 1;
 8015fa4:	2101      	movs	r1, #1
 8015fa6:	4b0f      	ldr	r3, [pc, #60]	; (8015fe4 <lv_spinbox_constructor+0x4c>)
    lv_textarea_set_one_line(obj, true);
 8015fa8:	4620      	mov	r0, r4
    spinbox->step               = 1;
 8015faa:	e9c4 311a 	strd	r3, r1, [r4, #104]	; 0x68
    spinbox->digit_count        = 5;
 8015fae:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8015fb2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8015fb6:	f023 0301 	bic.w	r3, r3, #1
 8015fba:	f043 0305 	orr.w	r3, r3, #5
 8015fbe:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    lv_textarea_set_one_line(obj, true);
 8015fc2:	f00a fb4e 	bl	8020662 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	2101      	movs	r1, #1
 8015fca:	f00a fb43 	bl	8020654 <lv_textarea_set_cursor_click_pos>
    lv_obj_set_width(obj, LV_DPI_DEF);
 8015fce:	4620      	mov	r0, r4
 8015fd0:	2182      	movs	r1, #130	; 0x82
 8015fd2:	f7ee feab 	bl	8004d2c <lv_obj_set_width>
    lv_spinbox_updatevalue(obj);
 8015fd6:	4620      	mov	r0, r4
}
 8015fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_spinbox_updatevalue(obj);
 8015fdc:	f7ff bf62 	b.w	8015ea4 <lv_spinbox_updatevalue>
 8015fe0:	0001869f 	.word	0x0001869f
 8015fe4:	fffe7961 	.word	0xfffe7961

08015fe8 <lv_spinbox_step_next>:
    int32_t new_step = spinbox->step / 10;
 8015fe8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    if((new_step) > 0)
 8015fea:	2b09      	cmp	r3, #9
    int32_t new_step = spinbox->step / 10;
 8015fec:	bfca      	itet	gt
 8015fee:	220a      	movgt	r2, #10
        spinbox->step = 1;
 8015ff0:	2301      	movle	r3, #1
    int32_t new_step = spinbox->step / 10;
 8015ff2:	fb93 f3f2 	sdivgt	r3, r3, r2
 8015ff6:	66c3      	str	r3, [r0, #108]	; 0x6c
    lv_spinbox_updatevalue(obj);
 8015ff8:	f7ff bf54 	b.w	8015ea4 <lv_spinbox_updatevalue>

08015ffc <lv_spinbox_step_prev>:
    int32_t new_step = spinbox->step * 10;
 8015ffc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8015ffe:	220a      	movs	r2, #10
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8016000:	6e41      	ldr	r1, [r0, #100]	; 0x64
    int32_t new_step = spinbox->step * 10;
 8016002:	435a      	muls	r2, r3
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8016004:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8016006:	2b00      	cmp	r3, #0
 8016008:	bfb8      	it	lt
 801600a:	425b      	neglt	r3, r3
 801600c:	428b      	cmp	r3, r1
 801600e:	bfb8      	it	lt
 8016010:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 8016012:	4293      	cmp	r3, r2
 8016014:	bfa8      	it	ge
 8016016:	66c2      	strge	r2, [r0, #108]	; 0x6c
    lv_spinbox_updatevalue(obj);
 8016018:	f7ff bf44 	b.w	8015ea4 <lv_spinbox_updatevalue>

0801601c <lv_spinbox_increment>:
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 801601c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801601e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8016020:	6e42      	ldr	r2, [r0, #100]	; 0x64
{
 8016022:	b410      	push	{r4}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8016024:	185c      	adds	r4, r3, r1
 8016026:	4294      	cmp	r4, r2
 8016028:	dc0c      	bgt.n	8016044 <lv_spinbox_increment+0x28>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 801602a:	2c00      	cmp	r4, #0
 801602c:	dd03      	ble.n	8016036 <lv_spinbox_increment+0x1a>
 801602e:	2b00      	cmp	r3, #0
 8016030:	bfbc      	itt	lt
 8016032:	425b      	neglt	r3, r3
 8016034:	6603      	strlt	r3, [r0, #96]	; 0x60
        spinbox->value += spinbox->step;
 8016036:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8016038:	440b      	add	r3, r1
            spinbox->value = spinbox->range_min;
 801603a:	6603      	str	r3, [r0, #96]	; 0x60
}
 801603c:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 8016040:	f7ff bf30 	b.w	8015ea4 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8016044:	f890 1071 	ldrb.w	r1, [r0, #113]	; 0x71
 8016048:	07c9      	lsls	r1, r1, #31
 801604a:	d503      	bpl.n	8016054 <lv_spinbox_increment+0x38>
 801604c:	4293      	cmp	r3, r2
 801604e:	d101      	bne.n	8016054 <lv_spinbox_increment+0x38>
            spinbox->value = spinbox->range_min;
 8016050:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8016052:	e7f2      	b.n	801603a <lv_spinbox_increment+0x1e>
            spinbox->value = spinbox->range_max;
 8016054:	6602      	str	r2, [r0, #96]	; 0x60
 8016056:	e7f1      	b.n	801603c <lv_spinbox_increment+0x20>

08016058 <lv_spinbox_decrement>:
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8016058:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801605a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801605c:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 801605e:	b410      	push	{r4}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8016060:	1a5c      	subs	r4, r3, r1
 8016062:	4294      	cmp	r4, r2
 8016064:	db0c      	blt.n	8016080 <lv_spinbox_decrement+0x28>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8016066:	2c00      	cmp	r4, #0
 8016068:	da03      	bge.n	8016072 <lv_spinbox_decrement+0x1a>
 801606a:	2b00      	cmp	r3, #0
 801606c:	bfc4      	itt	gt
 801606e:	425b      	neggt	r3, r3
 8016070:	6603      	strgt	r3, [r0, #96]	; 0x60
        spinbox->value -= spinbox->step;
 8016072:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8016074:	1a5b      	subs	r3, r3, r1
            spinbox->value = spinbox->range_max;
 8016076:	6603      	str	r3, [r0, #96]	; 0x60
}
 8016078:	f85d 4b04 	ldr.w	r4, [sp], #4
    lv_spinbox_updatevalue(obj);
 801607c:	f7ff bf12 	b.w	8015ea4 <lv_spinbox_updatevalue>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8016080:	f890 1071 	ldrb.w	r1, [r0, #113]	; 0x71
 8016084:	07c9      	lsls	r1, r1, #31
 8016086:	d503      	bpl.n	8016090 <lv_spinbox_decrement+0x38>
 8016088:	4293      	cmp	r3, r2
 801608a:	d101      	bne.n	8016090 <lv_spinbox_decrement+0x38>
            spinbox->value = spinbox->range_max;
 801608c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801608e:	e7f2      	b.n	8016076 <lv_spinbox_decrement+0x1e>
            spinbox->value = spinbox->range_min;
 8016090:	6602      	str	r2, [r0, #96]	; 0x60
 8016092:	e7f1      	b.n	8016078 <lv_spinbox_decrement+0x20>

08016094 <lv_spinbox_event>:
{
 8016094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8016096:	484e      	ldr	r0, [pc, #312]	; (80161d0 <lv_spinbox_event+0x13c>)
{
 8016098:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801609a:	f7eb ff4e 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801609e:	2801      	cmp	r0, #1
    res = lv_obj_event_base(MY_CLASS, e);
 80160a0:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return;
 80160a2:	d15c      	bne.n	801615e <lv_spinbox_event+0xca>
    lv_event_code_t code = lv_event_get_code(e);
 80160a4:	4628      	mov	r0, r5
 80160a6:	f7eb ffe1 	bl	800206c <lv_event_get_code>
 80160aa:	4607      	mov	r7, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80160ac:	4628      	mov	r0, r5
 80160ae:	f7eb ffdb 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 80160b2:	2f08      	cmp	r7, #8
    lv_obj_t * obj = lv_event_get_target(e);
 80160b4:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 80160b6:	d167      	bne.n	8016188 <lv_spinbox_event+0xf4>
        lv_indev_t * indev = lv_indev_get_act();
 80160b8:	f7ec fa4c 	bl	8002554 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 80160bc:	f7ec fa50 	bl	8002560 <lv_indev_get_type>
 80160c0:	2804      	cmp	r0, #4
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 80160c2:	4620      	mov	r0, r4
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 80160c4:	d123      	bne.n	801610e <lv_spinbox_event+0x7a>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 80160c6:	f7ed ff3b 	bl	8003f40 <lv_obj_get_group>
 80160ca:	f7ec f9cf 	bl	800246c <lv_group_get_editing>
 80160ce:	2800      	cmp	r0, #0
 80160d0:	d045      	beq.n	801615e <lv_spinbox_event+0xca>
                if(spinbox->step > 1) {
 80160d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80160d4:	2b01      	cmp	r3, #1
 80160d6:	dd04      	ble.n	80160e2 <lv_spinbox_event+0x4e>
                    lv_spinbox_step_next(obj);
 80160d8:	4620      	mov	r0, r4
}
 80160da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_next(obj);
 80160de:	f7ff bf83 	b.w	8015fe8 <lv_spinbox_step_next>
                    for(i = 0; i < spinbox->digit_count; i++) {
 80160e2:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80160e6:	2100      	movs	r1, #0
                        int32_t new_step = spinbox->step * 10;
 80160e8:	200a      	movs	r0, #10
                    spinbox->step = 1;
 80160ea:	66e6      	str	r6, [r4, #108]	; 0x6c
                    for(i = 0; i < spinbox->digit_count; i++) {
 80160ec:	f002 020f 	and.w	r2, r2, #15
 80160f0:	4291      	cmp	r1, r2
 80160f2:	d304      	bcc.n	80160fe <lv_spinbox_event+0x6a>
                    lv_spinbox_step_prev(obj);
 80160f4:	4620      	mov	r0, r4
}
 80160f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                lv_spinbox_step_prev(obj);
 80160fa:	f7ff bf7f 	b.w	8015ffc <lv_spinbox_step_prev>
                        int32_t new_step = spinbox->step * 10;
 80160fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                        if(new_step >= spinbox->range_max) break;
 8016100:	6e65      	ldr	r5, [r4, #100]	; 0x64
                        int32_t new_step = spinbox->step * 10;
 8016102:	4343      	muls	r3, r0
                        if(new_step >= spinbox->range_max) break;
 8016104:	42ab      	cmp	r3, r5
 8016106:	daf5      	bge.n	80160f4 <lv_spinbox_event+0x60>
                    for(i = 0; i < spinbox->digit_count; i++) {
 8016108:	3101      	adds	r1, #1
                        spinbox->step = new_step;
 801610a:	66e3      	str	r3, [r4, #108]	; 0x6c
                    for(i = 0; i < spinbox->digit_count; i++) {
 801610c:	e7f0      	b.n	80160f0 <lv_spinbox_event+0x5c>
            const char * txt = lv_textarea_get_text(obj);
 801610e:	f00a fadd 	bl	80206cc <lv_textarea_get_text>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8016112:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8016114:	5d43      	ldrb	r3, [r0, r5]
 8016116:	2b2e      	cmp	r3, #46	; 0x2e
 8016118:	d122      	bne.n	8016160 <lv_spinbox_event+0xcc>
                lv_textarea_cursor_left(obj);
 801611a:	4620      	mov	r0, r4
 801611c:	f00a fd36 	bl	8020b8c <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 8016120:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
            uint16_t cp = spinbox->ta.cursor.pos;
 8016124:	6c20      	ldr	r0, [r4, #64]	; 0x40
            size_t len = spinbox->digit_count - 1;
 8016126:	f001 030f 	and.w	r3, r1, #15
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 801612a:	ebb0 1f11 	cmp.w	r0, r1, lsr #4
            size_t len = spinbox->digit_count - 1;
 801612e:	f103 33ff 	add.w	r3, r3, #4294967295
            uint16_t cp = spinbox->ta.cursor.pos;
 8016132:	b282      	uxth	r2, r0
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8016134:	d905      	bls.n	8016142 <lv_spinbox_event+0xae>
 8016136:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 801613a:	bf1c      	itt	ne
 801613c:	f102 32ff 	addne.w	r2, r2, #4294967295
 8016140:	b292      	uxthne	r2, r2
            uint32_t pos = len - cp;
 8016142:	1a9b      	subs	r3, r3, r2
            if(spinbox->range_min < 0) pos++;
 8016144:	6ea2      	ldr	r2, [r4, #104]	; 0x68
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8016146:	200a      	movs	r0, #10
            if(spinbox->range_min < 0) pos++;
 8016148:	2a00      	cmp	r2, #0
            spinbox->step = 1;
 801614a:	f04f 0201 	mov.w	r2, #1
            if(spinbox->range_min < 0) pos++;
 801614e:	bfb8      	it	lt
 8016150:	3301      	addlt	r3, #1
            spinbox->step = 1;
 8016152:	66e2      	str	r2, [r4, #108]	; 0x6c
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8016154:	2200      	movs	r2, #0
 8016156:	b291      	uxth	r1, r2
 8016158:	3201      	adds	r2, #1
 801615a:	428b      	cmp	r3, r1
 801615c:	d810      	bhi.n	8016180 <lv_spinbox_event+0xec>
}
 801615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            size_t txt_len = strlen(txt);
 8016160:	f7ea f860 	bl	8000224 <strlen>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 8016164:	42a8      	cmp	r0, r5
 8016166:	d104      	bne.n	8016172 <lv_spinbox_event+0xde>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 8016168:	1e41      	subs	r1, r0, #1
                lv_textarea_set_cursor_pos(obj, 1);
 801616a:	4620      	mov	r0, r4
 801616c:	f00a f9da 	bl	8020524 <lv_textarea_set_cursor_pos>
 8016170:	e7d6      	b.n	8016120 <lv_spinbox_event+0x8c>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 8016172:	2d00      	cmp	r5, #0
 8016174:	d1d4      	bne.n	8016120 <lv_spinbox_event+0x8c>
 8016176:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8016178:	2b00      	cmp	r3, #0
 801617a:	dad1      	bge.n	8016120 <lv_spinbox_event+0x8c>
                lv_textarea_set_cursor_pos(obj, 1);
 801617c:	4631      	mov	r1, r6
 801617e:	e7f4      	b.n	801616a <lv_spinbox_event+0xd6>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8016180:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8016182:	4341      	muls	r1, r0
 8016184:	66e1      	str	r1, [r4, #108]	; 0x6c
 8016186:	e7e6      	b.n	8016156 <lv_spinbox_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 8016188:	2f0d      	cmp	r7, #13
 801618a:	d1e8      	bne.n	801615e <lv_spinbox_event+0xca>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801618c:	f7ec f9e2 	bl	8002554 <lv_indev_get_act>
 8016190:	f7ec f9e6 	bl	8002560 <lv_indev_get_type>
 8016194:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8016196:	4628      	mov	r0, r5
 8016198:	f7eb ff6a 	bl	8002070 <lv_event_get_param>
 801619c:	6801      	ldr	r1, [r0, #0]
                lv_spinbox_increment(obj);
 801619e:	4620      	mov	r0, r4
        if(c == LV_KEY_RIGHT) {
 80161a0:	2913      	cmp	r1, #19
 80161a2:	d105      	bne.n	80161b0 <lv_spinbox_event+0x11c>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 80161a4:	2e04      	cmp	r6, #4
 80161a6:	d198      	bne.n	80160da <lv_spinbox_event+0x46>
}
 80161a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_increment(obj);
 80161ac:	f7ff bf36 	b.w	801601c <lv_spinbox_increment>
        else if(c == LV_KEY_LEFT) {
 80161b0:	2914      	cmp	r1, #20
 80161b2:	d105      	bne.n	80161c0 <lv_spinbox_event+0x12c>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 80161b4:	2e04      	cmp	r6, #4
 80161b6:	d19e      	bne.n	80160f6 <lv_spinbox_event+0x62>
}
 80161b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_spinbox_decrement(obj);
 80161bc:	f7ff bf4c 	b.w	8016058 <lv_spinbox_decrement>
        else if(c == LV_KEY_UP) {
 80161c0:	2911      	cmp	r1, #17
 80161c2:	d0f1      	beq.n	80161a8 <lv_spinbox_event+0x114>
        else if(c == LV_KEY_DOWN) {
 80161c4:	2912      	cmp	r1, #18
 80161c6:	d0f7      	beq.n	80161b8 <lv_spinbox_event+0x124>
}
 80161c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            lv_textarea_add_char(obj, c);
 80161cc:	f00a bb52 	b.w	8020874 <lv_textarea_add_char>
 80161d0:	08025fc4 	.word	0x08025fc4

080161d4 <lv_tabview_destructor>:
{
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    uint32_t i;
    if(tabview->tab_pos & LV_DIR_VER) {
 80161d4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80161d8:	f013 0f0c 	tst.w	r3, #12
{
 80161dc:	b570      	push	{r4, r5, r6, lr}
 80161de:	460c      	mov	r4, r1
    if(tabview->tab_pos & LV_DIR_VER) {
 80161e0:	d112      	bne.n	8016208 <lv_tabview_destructor+0x34>
            tabview->map[i] = NULL;
        }
    }


    lv_mem_free(tabview->map);
 80161e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80161e4:	f001 fb96 	bl	8017914 <lv_mem_free>
    tabview->map = NULL;
 80161e8:	2300      	movs	r3, #0
 80161ea:	6263      	str	r3, [r4, #36]	; 0x24
}
 80161ec:	bd70      	pop	{r4, r5, r6, pc}
            lv_mem_free(tabview->map[i]);
 80161ee:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80161f2:	f001 fb8f 	bl	8017914 <lv_mem_free>
            tabview->map[i] = NULL;
 80161f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161f8:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 80161fc:	3501      	adds	r5, #1
 80161fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8016200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016202:	42ab      	cmp	r3, r5
 8016204:	d8f3      	bhi.n	80161ee <lv_tabview_destructor+0x1a>
 8016206:	e7ec      	b.n	80161e2 <lv_tabview_destructor+0xe>
 8016208:	2500      	movs	r5, #0
            tabview->map[i] = NULL;
 801620a:	462e      	mov	r6, r5
 801620c:	e7f7      	b.n	80161fe <lv_tabview_destructor+0x2a>
	...

08016210 <lv_tabview_constructor>:
    tabview->tab_pos = tabpos_create;
 8016210:	4b46      	ldr	r3, [pc, #280]	; (801632c <lv_tabview_constructor+0x11c>)
{
 8016212:	b570      	push	{r4, r5, r6, lr}
    tabview->tab_pos = tabpos_create;
 8016214:	781b      	ldrb	r3, [r3, #0]
{
 8016216:	460d      	mov	r5, r1
    tabview->tab_pos = tabpos_create;
 8016218:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    switch(tabview->tab_pos) {
 801621c:	3b01      	subs	r3, #1
 801621e:	2b07      	cmp	r3, #7
 8016220:	d809      	bhi.n	8016236 <lv_tabview_constructor+0x26>
 8016222:	e8df f003 	tbb	[pc, r3]
 8016226:	5e5c      	.short	0x5e5c
 8016228:	08080408 	.word	0x08080408
 801622c:	5a08      	.short	0x5a08
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801622e:	2101      	movs	r1, #1
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 8016230:	4628      	mov	r0, r5
 8016232:	f7f9 fe4d 	bl	800fed0 <lv_obj_set_flex_flow>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8016236:	f242 0264 	movw	r2, #8292	; 0x2064
 801623a:	4628      	mov	r0, r5
 801623c:	4611      	mov	r1, r2
 801623e:	f7ee fda9 	bl	8004d94 <lv_obj_set_size>
    btnm = lv_btnmatrix_create(obj);
 8016242:	4628      	mov	r0, r5
 8016244:	f005 f9f6 	bl	801b634 <lv_btnmatrix_create>
 8016248:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 801624a:	4628      	mov	r0, r5
 801624c:	f7ed fe00 	bl	8003e50 <lv_obj_create>
    lv_btnmatrix_set_one_checked(btnm, true);
 8016250:	2101      	movs	r1, #1
    cont = lv_obj_create(obj);
 8016252:	4604      	mov	r4, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 8016254:	4630      	mov	r0, r6
 8016256:	f005 fccf 	bl	801bbf8 <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 801625a:	2004      	movs	r0, #4
 801625c:	f001 fcdc 	bl	8017c18 <lv_mem_alloc>
    tabview->map[0] = "";
 8016260:	4b33      	ldr	r3, [pc, #204]	; (8016330 <lv_tabview_constructor+0x120>)
    tabview->map = lv_mem_alloc(sizeof(const char *));
 8016262:	4601      	mov	r1, r0
 8016264:	6268      	str	r0, [r5, #36]	; 0x24
    tabview->map[0] = "";
 8016266:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8016268:	4630      	mov	r0, r6
 801626a:	f005 f9ef 	bl	801b64c <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 801626e:	2300      	movs	r3, #0
 8016270:	221c      	movs	r2, #28
 8016272:	4930      	ldr	r1, [pc, #192]	; (8016334 <lv_tabview_constructor+0x124>)
 8016274:	4630      	mov	r0, r6
 8016276:	f7eb ff0f 	bl	8002098 <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 801627a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801627e:	4630      	mov	r0, r6
 8016280:	f7ed fdf2 	bl	8003e68 <lv_obj_add_flag>
    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 8016284:	2300      	movs	r3, #0
 8016286:	492c      	ldr	r1, [pc, #176]	; (8016338 <lv_tabview_constructor+0x128>)
 8016288:	4620      	mov	r0, r4
 801628a:	461a      	mov	r2, r3
 801628c:	f7eb ff04 	bl	8002098 <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 8016290:	2100      	movs	r1, #0
 8016292:	4620      	mov	r0, r4
 8016294:	f7ef fe75 	bl	8005f82 <lv_obj_set_scrollbar_mode>
    switch(tabview->tab_pos) {
 8016298:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801629c:	2b04      	cmp	r3, #4
 801629e:	d024      	beq.n	80162ea <lv_tabview_constructor+0xda>
 80162a0:	d821      	bhi.n	80162e6 <lv_tabview_constructor+0xd6>
 80162a2:	3b01      	subs	r3, #1
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d932      	bls.n	801630e <lv_tabview_constructor+0xfe>
    lv_group_t * g = lv_group_get_default();
 80162a8:	f7eb ffba 	bl	8002220 <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 80162ac:	b110      	cbz	r0, 80162b4 <lv_tabview_constructor+0xa4>
 80162ae:	4631      	mov	r1, r6
 80162b0:	f7eb ffe8 	bl	8002284 <lv_group_add_obj>
    lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 80162b4:	4620      	mov	r0, r4
 80162b6:	2100      	movs	r1, #0
 80162b8:	f7f9 fe0a 	bl	800fed0 <lv_obj_set_flex_flow>
    lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 80162bc:	4620      	mov	r0, r4
 80162be:	2103      	movs	r1, #3
 80162c0:	f7ef fe82 	bl	8005fc8 <lv_obj_set_scroll_snap_x>
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 80162c4:	4620      	mov	r0, r4
 80162c6:	2180      	movs	r1, #128	; 0x80
 80162c8:	f7ed fdce 	bl	8003e68 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80162cc:	4620      	mov	r0, r4
 80162ce:	f44f 7100 	mov.w	r1, #512	; 0x200
}
 80162d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80162d6:	f7ed bdea 	b.w	8003eae <lv_obj_clear_flag>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 80162da:	2109      	movs	r1, #9
 80162dc:	e7a8      	b.n	8016230 <lv_tabview_constructor+0x20>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 80162de:	2100      	movs	r1, #0
 80162e0:	e7a6      	b.n	8016230 <lv_tabview_constructor+0x20>
        lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 80162e2:	2108      	movs	r1, #8
 80162e4:	e7a4      	b.n	8016230 <lv_tabview_constructor+0x20>
    switch(tabview->tab_pos) {
 80162e6:	2b08      	cmp	r3, #8
 80162e8:	d1de      	bne.n	80162a8 <lv_tabview_constructor+0x98>
         lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 80162ea:	4b14      	ldr	r3, [pc, #80]	; (801633c <lv_tabview_constructor+0x12c>)
 80162ec:	f242 0164 	movw	r1, #8292	; 0x2064
 80162f0:	4630      	mov	r0, r6
 80162f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80162f6:	f7ee fd4d 	bl	8004d94 <lv_obj_set_size>
         lv_obj_set_width(cont, LV_PCT(100));
 80162fa:	f242 0164 	movw	r1, #8292	; 0x2064
 80162fe:	4620      	mov	r0, r4
 8016300:	f7ee fd14 	bl	8004d2c <lv_obj_set_width>
         lv_obj_set_flex_grow(cont, 1);
 8016304:	2101      	movs	r1, #1
 8016306:	4620      	mov	r0, r4
 8016308:	f7f9 fe22 	bl	800ff50 <lv_obj_set_flex_grow>
         break;
 801630c:	e7cc      	b.n	80162a8 <lv_tabview_constructor+0x98>
         lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 801630e:	4b0b      	ldr	r3, [pc, #44]	; (801633c <lv_tabview_constructor+0x12c>)
 8016310:	4630      	mov	r0, r6
 8016312:	f242 0264 	movw	r2, #8292	; 0x2064
 8016316:	f9b3 1000 	ldrsh.w	r1, [r3]
 801631a:	f7ee fd3b 	bl	8004d94 <lv_obj_set_size>
         lv_obj_set_height(cont, LV_PCT(100));
 801631e:	f242 0164 	movw	r1, #8292	; 0x2064
 8016322:	4620      	mov	r0, r4
 8016324:	f7ee fd1c 	bl	8004d60 <lv_obj_set_height>
 8016328:	e7ec      	b.n	8016304 <lv_tabview_constructor+0xf4>
 801632a:	bf00      	nop
 801632c:	20002b2e 	.word	0x20002b2e
 8016330:	08029f9b 	.word	0x08029f9b
 8016334:	0801648b 	.word	0x0801648b
 8016338:	08016401 	.word	0x08016401
 801633c:	20002b30 	.word	0x20002b30

08016340 <lv_tabview_get_content>:
    return lv_obj_get_child(tv, 1);
 8016340:	2101      	movs	r1, #1
 8016342:	f7f1 bc0e 	b.w	8007b62 <lv_obj_get_child>

08016346 <lv_tabview_get_tab_btns>:
    return lv_obj_get_child(tv, 0);
 8016346:	2100      	movs	r1, #0
 8016348:	f7f1 bc0b 	b.w	8007b62 <lv_obj_get_child>

0801634c <lv_tabview_set_act>:
    if(id >= tabview->tab_cnt) {
 801634c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 801634e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(id >= tabview->tab_cnt) {
 8016352:	428b      	cmp	r3, r1
{
 8016354:	4605      	mov	r5, r0
 8016356:	4689      	mov	r9, r1
 8016358:	4617      	mov	r7, r2
        id = tabview->tab_cnt - 1;
 801635a:	bf98      	it	ls
 801635c:	f103 39ff 	addls.w	r9, r3, #4294967295
    lv_obj_update_layout(obj);
 8016360:	f7ef fbf2 	bl	8005b48 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 8016364:	4628      	mov	r0, r5
 8016366:	f7ff ffeb 	bl	8016340 <lv_tabview_get_content>
    if(cont == NULL) return;
 801636a:	4606      	mov	r6, r0
 801636c:	b358      	cbz	r0, 80163c6 <lv_tabview_set_act+0x7a>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801636e:	f241 0215 	movw	r2, #4117	; 0x1015
 8016372:	2100      	movs	r1, #0
 8016374:	f7f1 f8a8 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016378:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_content_width(obj);
 801637c:	4628      	mov	r0, r5
 801637e:	f7ee fe32 	bl	8004fe6 <lv_obj_get_content_width>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016382:	2100      	movs	r1, #0
 8016384:	4604      	mov	r4, r0
 8016386:	f241 426a 	movw	r2, #5226	; 0x146a
 801638a:	4628      	mov	r0, r5
 801638c:	fa1f f889 	uxth.w	r8, r9
 8016390:	f7f1 f89a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8016394:	eb04 030a 	add.w	r3, r4, sl
 8016398:	b2c0      	uxtb	r0, r0
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 801639a:	463a      	mov	r2, r7
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801639c:	2801      	cmp	r0, #1
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 801639e:	4630      	mov	r0, r6
        lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 80163a0:	bf12      	itee	ne
 80163a2:	fb13 f108 	smulbbne	r1, r3, r8
        int32_t id_rtl = -(int32_t)id;
 80163a6:	f1c9 0100 	rsbeq	r1, r9, #0
        lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 80163aa:	fb13 f101 	smulbbeq	r1, r3, r1
 80163ae:	b209      	sxth	r1, r1
 80163b0:	f7f0 f962 	bl	8006678 <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 80163b4:	4628      	mov	r0, r5
 80163b6:	f7ff ffc6 	bl	8016346 <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 80163ba:	2280      	movs	r2, #128	; 0x80
 80163bc:	4641      	mov	r1, r8
 80163be:	f005 f975 	bl	801b6ac <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 80163c2:	f8a5 802a 	strh.w	r8, [r5, #42]	; 0x2a
}
 80163c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080163cc <lv_tabview_event>:

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80163cc:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 80163ce:	480b      	ldr	r0, [pc, #44]	; (80163fc <lv_tabview_event+0x30>)
{
 80163d0:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 80163d2:	f7eb fdb2 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80163d6:	2801      	cmp	r0, #1
 80163d8:	d10e      	bne.n	80163f8 <lv_tabview_event+0x2c>

    lv_event_code_t code = lv_event_get_code(e);
 80163da:	4620      	mov	r0, r4
 80163dc:	f7eb fe46 	bl	800206c <lv_event_get_code>
 80163e0:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 80163e2:	4620      	mov	r0, r4
 80163e4:	f7eb fe40 	bl	8002068 <lv_event_get_target>

    if(code == LV_EVENT_SIZE_CHANGED) {
 80163e8:	2d23      	cmp	r5, #35	; 0x23
 80163ea:	d105      	bne.n	80163f8 <lv_tabview_event+0x2c>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 80163ec:	2200      	movs	r2, #0
 80163ee:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    }
}
 80163f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 80163f4:	f7ff bfaa 	b.w	801634c <lv_tabview_set_act>
}
 80163f8:	bd38      	pop	{r3, r4, r5, pc}
 80163fa:	bf00      	nop
 80163fc:	08025fe0 	.word	0x08025fe0

08016400 <cont_scroll_end_event_cb>:

    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 8016400:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016402:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 8016404:	f7eb fe30 	bl	8002068 <lv_event_get_target>
 8016408:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 801640a:	4620      	mov	r0, r4
 801640c:	f7eb fe2e 	bl	800206c <lv_event_get_code>
 8016410:	4606      	mov	r6, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8016412:	4628      	mov	r0, r5
 8016414:	f7f1 fba2 	bl	8007b5c <lv_obj_get_parent>
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8016418:	2e25      	cmp	r6, #37	; 0x25
    lv_obj_t * tv = lv_obj_get_parent(cont);
 801641a:	4604      	mov	r4, r0
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 801641c:	d105      	bne.n	801642a <cont_scroll_end_event_cb+0x2a>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 801641e:	2200      	movs	r2, #0
 8016420:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8016422:	f7ff ff93 	bl	801634c <lv_tabview_set_act>

        if(t < 0) t = 0;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
        lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8016426:	b002      	add	sp, #8
 8016428:	bd70      	pop	{r4, r5, r6, pc}
    else if(code == LV_EVENT_SCROLL_END) {
 801642a:	2e0a      	cmp	r6, #10
 801642c:	d1fb      	bne.n	8016426 <cont_scroll_end_event_cb+0x26>
        lv_obj_get_scroll_end(cont, &p);
 801642e:	a901      	add	r1, sp, #4
 8016430:	4628      	mov	r0, r5
 8016432:	f7ef ff43 	bl	80062bc <lv_obj_get_scroll_end>
        lv_coord_t w = lv_obj_get_content_width(cont);
 8016436:	4628      	mov	r0, r5
 8016438:	f7ee fdd5 	bl	8004fe6 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801643c:	f241 426a 	movw	r2, #5226	; 0x146a
 8016440:	4606      	mov	r6, r0
 8016442:	2100      	movs	r1, #0
 8016444:	4620      	mov	r0, r4
 8016446:	f7f1 f83f 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801644a:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 801644e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8016450:	0ff3      	lsrs	r3, r6, #31
 8016452:	2801      	cmp	r0, #1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8016454:	4620      	mov	r0, r4
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8016456:	bf0b      	itete	eq
 8016458:	199a      	addeq	r2, r3, r6
        else t = (p.x + w/ 2) / w;
 801645a:	199b      	addne	r3, r3, r6
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 801645c:	f342 024f 	sbfxeq	r2, r2, #1, #16
        else t = (p.x + w/ 2) / w;
 8016460:	f343 034f 	sbfxne	r3, r3, #1, #16
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 8016464:	bf0b      	itete	eq
 8016466:	1b52      	subeq	r2, r2, r5
        else t = (p.x + w/ 2) / w;
 8016468:	18e9      	addne	r1, r5, r3
        if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w/ 2) / w;
 801646a:	fb92 f1f6 	sdiveq	r1, r2, r6
        else t = (p.x + w/ 2) / w;
 801646e:	fb91 f1f6 	sdivne	r1, r1, r6
 8016472:	b209      	sxth	r1, r1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8016474:	2201      	movs	r2, #1
 8016476:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801647a:	f7ff ff67 	bl	801634c <lv_tabview_set_act>
        lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 801647e:	2200      	movs	r2, #0
 8016480:	211c      	movs	r1, #28
 8016482:	4620      	mov	r0, r4
 8016484:	f7eb fdd0 	bl	8002028 <lv_event_send>
}
 8016488:	e7cd      	b.n	8016426 <cont_scroll_end_event_cb+0x26>

0801648a <btns_value_changed_event_cb>:
{
 801648a:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 801648c:	f7eb fdec 	bl	8002068 <lv_event_get_target>
 8016490:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 8016492:	f7f1 fb63 	bl	8007b5c <lv_obj_get_parent>
 8016496:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8016498:	4628      	mov	r0, r5
 801649a:	f005 f933 	bl	801b704 <lv_btnmatrix_get_selected_btn>
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 801649e:	2201      	movs	r2, #1
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 80164a0:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 80164a2:	4620      	mov	r0, r4
 80164a4:	f7ff ff52 	bl	801634c <lv_tabview_set_act>
    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 80164a8:	4620      	mov	r0, r4
 80164aa:	2200      	movs	r2, #0
 80164ac:	211c      	movs	r1, #28
}
 80164ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 80164b2:	f7eb bdb9 	b.w	8002028 <lv_event_send>
	...

080164b8 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80164b8:	b510      	push	{r4, lr}
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80164ba:	f242 0264 	movw	r2, #8292	; 0x2064
{
 80164be:	460c      	mov	r4, r1
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80164c0:	4611      	mov	r1, r2
 80164c2:	4620      	mov	r0, r4
 80164c4:	f7ee fc66 	bl	8004d94 <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 80164c8:	2300      	movs	r3, #0
 80164ca:	4909      	ldr	r1, [pc, #36]	; (80164f0 <lv_tileview_constructor+0x38>)
 80164cc:	4620      	mov	r0, r4
 80164ce:	461a      	mov	r2, r3
 80164d0:	f7eb fde2 	bl	8002098 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 80164d4:	4620      	mov	r0, r4
 80164d6:	2180      	movs	r1, #128	; 0x80
 80164d8:	f7ed fcc6 	bl	8003e68 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 80164dc:	4620      	mov	r0, r4
 80164de:	2103      	movs	r1, #3
 80164e0:	f7ef fd72 	bl	8005fc8 <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 80164e4:	4620      	mov	r0, r4
 80164e6:	2103      	movs	r1, #3

}
 80164e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 80164ec:	f7ef bd77 	b.w	8005fde <lv_obj_set_scroll_snap_y>
 80164f0:	080164f5 	.word	0x080164f5

080164f4 <tileview_event_cb>:
        lv_obj_set_scroll_dir(parent, create_dir);
    }
}

static void tileview_event_cb(lv_event_t * e)
{
 80164f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80164f8:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 80164fa:	f7eb fdb7 	bl	800206c <lv_event_get_code>
 80164fe:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016500:	4620      	mov	r0, r4
 8016502:	f7eb fdb1 	bl	8002068 <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 8016506:	2d0a      	cmp	r5, #10
    lv_obj_t * obj = lv_event_get_target(e);
 8016508:	4604      	mov	r4, r0
    if(code == LV_EVENT_SCROLL_END) {
 801650a:	d146      	bne.n	801659a <tileview_event_cb+0xa6>
        lv_coord_t w = lv_obj_get_content_width(obj);
 801650c:	f7ee fd6b 	bl	8004fe6 <lv_obj_get_content_width>
 8016510:	4605      	mov	r5, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8016512:	4620      	mov	r0, r4
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
        lv_coord_t ty = ((top + (h / 2)) / h) * h;

        lv_dir_t dir = LV_DIR_ALL;
        uint32_t i;
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8016514:	f04f 0800 	mov.w	r8, #0
        lv_coord_t h = lv_obj_get_content_height(obj);
 8016518:	f7ee fd7f 	bl	800501a <lv_obj_get_content_height>
        lv_obj_get_scroll_end(obj, &scroll_end);
 801651c:	a901      	add	r1, sp, #4
        lv_coord_t h = lv_obj_get_content_height(obj);
 801651e:	4606      	mov	r6, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 8016520:	4620      	mov	r0, r4
 8016522:	f7ef fecb 	bl	80062bc <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8016526:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801652a:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
 801652e:	f342 024f 	sbfx	r2, r2, #1, #16
 8016532:	4413      	add	r3, r2
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8016534:	eb06 72d6 	add.w	r2, r6, r6, lsr #31
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8016538:	fb93 f3f5 	sdiv	r3, r3, r5
 801653c:	fb13 f505 	smulbb	r5, r3, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 8016540:	f342 024f 	sbfx	r2, r2, #1, #16
 8016544:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8016548:	b22d      	sxth	r5, r5
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 801654a:	4413      	add	r3, r2
 801654c:	fb93 f3f6 	sdiv	r3, r3, r6
 8016550:	fb13 f606 	smulbb	r6, r3, r6
 8016554:	b236      	sxth	r6, r6
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8016556:	4620      	mov	r0, r4
 8016558:	f7f1 fb12 	bl	8007b80 <lv_obj_get_child_cnt>
 801655c:	4540      	cmp	r0, r8
 801655e:	d801      	bhi.n	8016564 <tileview_event_cb+0x70>
        lv_dir_t dir = LV_DIR_ALL;
 8016560:	250f      	movs	r5, #15
 8016562:	e016      	b.n	8016592 <tileview_event_cb+0x9e>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8016564:	4641      	mov	r1, r8
 8016566:	4620      	mov	r0, r4
 8016568:	f7f1 fafb 	bl	8007b62 <lv_obj_get_child>
 801656c:	4607      	mov	r7, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 801656e:	f7ee fceb 	bl	8004f48 <lv_obj_get_x>
 8016572:	4681      	mov	r9, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8016574:	4638      	mov	r0, r7
 8016576:	f7ee fd03 	bl	8004f80 <lv_obj_get_y>
            if(x == tx && y == ty) {
 801657a:	454d      	cmp	r5, r9
 801657c:	d110      	bne.n	80165a0 <tileview_event_cb+0xac>
 801657e:	4286      	cmp	r6, r0
 8016580:	d10e      	bne.n	80165a0 <tileview_event_cb+0xac>
                lv_tileview_tile_t * tile = (lv_tileview_tile_t *)tile_obj;
                tv->tile_act = (lv_obj_t *)tile;
 8016582:	6267      	str	r7, [r4, #36]	; 0x24
                dir = tile->dir;
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8016584:	2200      	movs	r2, #0
 8016586:	211c      	movs	r1, #28
 8016588:	4620      	mov	r0, r4
                dir = tile->dir;
 801658a:	f897 5024 	ldrb.w	r5, [r7, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801658e:	f7eb fd4b 	bl	8002028 <lv_event_send>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
 8016592:	4629      	mov	r1, r5
 8016594:	4620      	mov	r0, r4
 8016596:	f7ef fd08 	bl	8005faa <lv_obj_set_scroll_dir>
    }
}
 801659a:	b003      	add	sp, #12
 801659c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80165a0:	f108 0801 	add.w	r8, r8, #1
 80165a4:	e7d7      	b.n	8016556 <tileview_event_cb+0x62>
	...

080165a8 <lv_tileview_tile_constructor>:
{
 80165a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80165aa:	4608      	mov	r0, r1
{
 80165ac:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80165ae:	f7f1 fad5 	bl	8007b5c <lv_obj_get_parent>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80165b2:	f242 0264 	movw	r2, #8292	; 0x2064
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80165b6:	4605      	mov	r5, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80165b8:	4620      	mov	r0, r4
 80165ba:	4611      	mov	r1, r2
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),  create_row_id * lv_obj_get_content_height(parent));
 80165bc:	4e14      	ldr	r6, [pc, #80]	; (8016610 <lv_tileview_tile_constructor+0x68>)
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80165be:	f7ee fbe9 	bl	8004d94 <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 80165c2:	4620      	mov	r0, r4
 80165c4:	f7ef fac0 	bl	8005b48 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),  create_row_id * lv_obj_get_content_height(parent));
 80165c8:	4628      	mov	r0, r5
 80165ca:	f7ee fd0c 	bl	8004fe6 <lv_obj_get_content_width>
 80165ce:	6833      	ldr	r3, [r6, #0]
 80165d0:	4f10      	ldr	r7, [pc, #64]	; (8016614 <lv_tileview_tile_constructor+0x6c>)
 80165d2:	fb13 f000 	smulbb	r0, r3, r0
 80165d6:	b201      	sxth	r1, r0
 80165d8:	4628      	mov	r0, r5
 80165da:	9101      	str	r1, [sp, #4]
 80165dc:	f7ee fd1d 	bl	800501a <lv_obj_get_content_height>
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	9901      	ldr	r1, [sp, #4]
 80165e4:	fb13 f000 	smulbb	r0, r3, r0
 80165e8:	b202      	sxth	r2, r0
 80165ea:	4620      	mov	r0, r4
 80165ec:	f7ee fc4e 	bl	8004e8c <lv_obj_set_pos>
    tile->dir = create_dir;
 80165f0:	4b09      	ldr	r3, [pc, #36]	; (8016618 <lv_tileview_tile_constructor+0x70>)
    if(create_col_id == 0 && create_row_id == 0) {
 80165f2:	6832      	ldr	r2, [r6, #0]
    tile->dir = create_dir;
 80165f4:	7819      	ldrb	r1, [r3, #0]
    if(create_col_id == 0 && create_row_id == 0) {
 80165f6:	683b      	ldr	r3, [r7, #0]
    tile->dir = create_dir;
 80165f8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 80165fc:	4313      	orrs	r3, r2
 80165fe:	d105      	bne.n	801660c <lv_tileview_tile_constructor+0x64>
        lv_obj_set_scroll_dir(parent, create_dir);
 8016600:	4628      	mov	r0, r5
}
 8016602:	b003      	add	sp, #12
 8016604:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        lv_obj_set_scroll_dir(parent, create_dir);
 8016608:	f7ef bccf 	b.w	8005faa <lv_obj_set_scroll_dir>
}
 801660c:	b003      	add	sp, #12
 801660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016610:	20002b34 	.word	0x20002b34
 8016614:	20002b3c 	.word	0x20002b3c
 8016618:	20002b38 	.word	0x20002b38

0801661c <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801661c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801661e:	4608      	mov	r0, r1
{
 8016620:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8016622:	f7f1 fa9b 	bl	8007b5c <lv_obj_get_parent>
 8016626:	4605      	mov	r5, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 8016628:	f7ee fcd1 	bl	8004fce <lv_obj_get_width>
 801662c:	9001      	str	r0, [sp, #4]
 801662e:	4628      	mov	r0, r5
 8016630:	f7ee fcd3 	bl	8004fda <lv_obj_get_height>
 8016634:	9901      	ldr	r1, [sp, #4]
 8016636:	4602      	mov	r2, r0
 8016638:	4620      	mov	r0, r4
 801663a:	f7ee fbab 	bl	8004d94 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801663e:	2101      	movs	r1, #1
 8016640:	4620      	mov	r0, r4
 8016642:	f7f9 fc45 	bl	800fed0 <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 8016646:	4620      	mov	r0, r4
 8016648:	f7ed fc02 	bl	8003e50 <lv_obj_create>
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 801664c:	4b10      	ldr	r3, [pc, #64]	; (8016690 <lv_win_constructor+0x74>)
    lv_obj_t * header = lv_obj_create(obj);
 801664e:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8016650:	f242 0164 	movw	r1, #8292	; 0x2064
 8016654:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016658:	f7ee fb9c 	bl	8004d94 <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 801665c:	4628      	mov	r0, r5
 801665e:	2100      	movs	r1, #0
 8016660:	f7f9 fc36 	bl	800fed0 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8016664:	2302      	movs	r3, #2
 8016666:	2100      	movs	r1, #0
 8016668:	4628      	mov	r0, r5
 801666a:	461a      	mov	r2, r3
 801666c:	f7f9 fc46 	bl	800fefc <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 8016670:	4620      	mov	r0, r4
 8016672:	f7ed fbed 	bl	8003e50 <lv_obj_create>
 8016676:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 8016678:	2101      	movs	r1, #1
 801667a:	f7f9 fc69 	bl	800ff50 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 801667e:	f242 0164 	movw	r1, #8292	; 0x2064
 8016682:	4620      	mov	r0, r4
}
 8016684:	b003      	add	sp, #12
 8016686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    lv_obj_set_width(cont, LV_PCT(100));
 801668a:	f7ee bb4f 	b.w	8004d2c <lv_obj_set_width>
 801668e:	bf00      	nop
 8016690:	20002b40 	.word	0x20002b40

08016694 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
 8016694:	6843      	ldr	r3, [r0, #4]
 8016696:	4718      	bx	r3

08016698 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8016698:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 801669a:	6804      	ldr	r4, [r0, #0]
 801669c:	46a4      	mov	ip, r4
}
 801669e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 80166a2:	4760      	bx	ip

080166a4 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80166a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80166a6:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80166a8:	460a      	mov	r2, r1
 80166aa:	a901      	add	r1, sp, #4
 80166ac:	f7ff fff4 	bl	8016698 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
 80166b0:	b108      	cbz	r0, 80166b6 <lv_font_get_glyph_width+0x12>
 80166b2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
 80166b6:	b005      	add	sp, #20
 80166b8:	f85d fb04 	ldr.w	pc, [sp], #4

080166bc <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80166bc:	7803      	ldrb	r3, [r0, #0]
 80166be:	780a      	ldrb	r2, [r1, #0]
 80166c0:	4293      	cmp	r3, r2
 80166c2:	bf11      	iteee	ne
 80166c4:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 80166c6:	784b      	ldrbeq	r3, [r1, #1]
 80166c8:	7840      	ldrbeq	r0, [r0, #1]
 80166ca:	1ac0      	subeq	r0, r0, r3

}
 80166cc:	4770      	bx	lr

080166ce <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 80166ce:	8803      	ldrh	r3, [r0, #0]
 80166d0:	880a      	ldrh	r2, [r1, #0]
 80166d2:	4293      	cmp	r3, r2
 80166d4:	bf11      	iteee	ne
 80166d6:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 80166d8:	884b      	ldrheq	r3, [r1, #2]
 80166da:	8840      	ldrheq	r0, [r0, #2]
 80166dc:	1ac0      	subeq	r0, r0, r3
}
 80166de:	4770      	bx	lr

080166e0 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 80166e0:	8800      	ldrh	r0, [r0, #0]
 80166e2:	880b      	ldrh	r3, [r1, #0]
}
 80166e4:	1ac0      	subs	r0, r0, r3
 80166e6:	4770      	bx	lr

080166e8 <get_glyph_dsc_id.isra.0.part.0>:
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80166e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80166ea:	6805      	ldr	r5, [r0, #0]
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
 80166ec:	b085      	sub	sp, #20
 80166ee:	460c      	mov	r4, r1
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80166f0:	6968      	ldr	r0, [r5, #20]
 80166f2:	b970      	cbnz	r0, 8016712 <get_glyph_dsc_id.isra.0.part.0+0x2a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80166f4:	8a6f      	ldrh	r7, [r5, #18]
 80166f6:	2200      	movs	r2, #0
 80166f8:	f04f 0c14 	mov.w	ip, #20
 80166fc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8016700:	b293      	uxth	r3, r2
 8016702:	429f      	cmp	r7, r3
 8016704:	d80b      	bhi.n	801671e <get_glyph_dsc_id.isra.0.part.0+0x36>
    if(fdsc->cache) {
 8016706:	2300      	movs	r3, #0
 8016708:	b138      	cbz	r0, 801671a <get_glyph_dsc_id.isra.0.part.0+0x32>
        fdsc->cache->last_glyph_id = 0;
 801670a:	e9c0 4300 	strd	r4, r3, [r0]
    return 0;
 801670e:	4618      	mov	r0, r3
 8016710:	e003      	b.n	801671a <get_glyph_dsc_id.isra.0.part.0+0x32>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8016712:	6803      	ldr	r3, [r0, #0]
 8016714:	428b      	cmp	r3, r1
 8016716:	d1ed      	bne.n	80166f4 <get_glyph_dsc_id.isra.0.part.0+0xc>
 8016718:	6840      	ldr	r0, [r0, #4]
}
 801671a:	b005      	add	sp, #20
 801671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801671e:	fb0c f602 	mul.w	r6, ip, r2
 8016722:	68ab      	ldr	r3, [r5, #8]
 8016724:	3201      	adds	r2, #1
 8016726:	1999      	adds	r1, r3, r6
 8016728:	599b      	ldr	r3, [r3, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801672a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801672e:	1ae3      	subs	r3, r4, r3
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8016730:	4573      	cmp	r3, lr
 8016732:	d8e5      	bhi.n	8016700 <get_glyph_dsc_id.isra.0.part.0+0x18>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8016734:	7c8a      	ldrb	r2, [r1, #18]
 8016736:	2a02      	cmp	r2, #2
 8016738:	d102      	bne.n	8016740 <get_glyph_dsc_id.isra.0.part.0+0x58>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801673a:	88c8      	ldrh	r0, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801673c:	4418      	add	r0, r3
 801673e:	e019      	b.n	8016774 <get_glyph_dsc_id.isra.0.part.0+0x8c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8016740:	b91a      	cbnz	r2, 801674a <get_glyph_dsc_id.isra.0.part.0+0x62>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8016742:	68ca      	ldr	r2, [r1, #12]
 8016744:	5cd0      	ldrb	r0, [r2, r3]
 8016746:	88cb      	ldrh	r3, [r1, #6]
 8016748:	e7f8      	b.n	801673c <get_glyph_dsc_id.isra.0.part.0+0x54>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801674a:	2a03      	cmp	r2, #3
 801674c:	d118      	bne.n	8016780 <get_glyph_dsc_id.isra.0.part.0+0x98>
            uint16_t key = rcp;
 801674e:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8016752:	f10d 000e 	add.w	r0, sp, #14
 8016756:	4b17      	ldr	r3, [pc, #92]	; (80167b4 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 8016758:	8a0a      	ldrh	r2, [r1, #16]
 801675a:	9300      	str	r3, [sp, #0]
 801675c:	2302      	movs	r3, #2
 801675e:	6889      	ldr	r1, [r1, #8]
 8016760:	f003 f843 	bl	80197ea <_lv_utils_bsearch>
            if(p) {
 8016764:	b130      	cbz	r0, 8016774 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8016766:	68ab      	ldr	r3, [r5, #8]
 8016768:	441e      	add	r6, r3
 801676a:	68b3      	ldr	r3, [r6, #8]
 801676c:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801676e:	88f3      	ldrh	r3, [r6, #6]
 8016770:	eb03 0060 	add.w	r0, r3, r0, asr #1
        if(fdsc->cache) {
 8016774:	696b      	ldr	r3, [r5, #20]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d0cf      	beq.n	801671a <get_glyph_dsc_id.isra.0.part.0+0x32>
            fdsc->cache->last_glyph_id = glyph_id;
 801677a:	e9c3 4000 	strd	r4, r0, [r3]
 801677e:	e7cc      	b.n	801671a <get_glyph_dsc_id.isra.0.part.0+0x32>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8016780:	2a01      	cmp	r2, #1
 8016782:	d114      	bne.n	80167ae <get_glyph_dsc_id.isra.0.part.0+0xc6>
            uint16_t key = rcp;
 8016784:	f8ad 300e 	strh.w	r3, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8016788:	f10d 000e 	add.w	r0, sp, #14
 801678c:	4b09      	ldr	r3, [pc, #36]	; (80167b4 <get_glyph_dsc_id.isra.0.part.0+0xcc>)
 801678e:	8a0a      	ldrh	r2, [r1, #16]
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	2302      	movs	r3, #2
 8016794:	6889      	ldr	r1, [r1, #8]
 8016796:	f003 f828 	bl	80197ea <_lv_utils_bsearch>
            if(p) {
 801679a:	2800      	cmp	r0, #0
 801679c:	d0ea      	beq.n	8016774 <get_glyph_dsc_id.isra.0.part.0+0x8c>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801679e:	68ab      	ldr	r3, [r5, #8]
 80167a0:	441e      	add	r6, r3
 80167a2:	68b3      	ldr	r3, [r6, #8]
 80167a4:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80167a6:	68f3      	ldr	r3, [r6, #12]
 80167a8:	5a18      	ldrh	r0, [r3, r0]
 80167aa:	88f3      	ldrh	r3, [r6, #6]
 80167ac:	e7c6      	b.n	801673c <get_glyph_dsc_id.isra.0.part.0+0x54>
        uint32_t glyph_id = 0;
 80167ae:	2000      	movs	r0, #0
 80167b0:	e7e0      	b.n	8016774 <get_glyph_dsc_id.isra.0.part.0+0x8c>
 80167b2:	bf00      	nop
 80167b4:	080166e1 	.word	0x080166e1

080167b8 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
 80167b8:	2909      	cmp	r1, #9
{
 80167ba:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 80167bc:	d002      	beq.n	80167c4 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
 80167be:	b911      	cbnz	r1, 80167c6 <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
 80167c0:	2000      	movs	r0, #0
}
 80167c2:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 80167c4:	2120      	movs	r1, #32
 80167c6:	f850 4f10 	ldr.w	r4, [r0, #16]!
 80167ca:	f7ff ff8d 	bl	80166e8 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d0f6      	beq.n	80167c0 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80167d2:	7ce3      	ldrb	r3, [r4, #19]
 80167d4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80167d8:	d1f2      	bne.n	80167c0 <lv_font_get_bitmap_fmt_txt+0x8>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80167da:	6863      	ldr	r3, [r4, #4]
 80167dc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80167e0:	6820      	ldr	r0, [r4, #0]
 80167e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80167e6:	4418      	add	r0, r3
 80167e8:	e7eb      	b.n	80167c2 <lv_font_get_bitmap_fmt_txt+0xa>
	...

080167ec <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
 80167ec:	2a09      	cmp	r2, #9
{
 80167ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167f2:	460c      	mov	r4, r1
 80167f4:	4680      	mov	r8, r0
 80167f6:	4611      	mov	r1, r2
 80167f8:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
 80167fa:	d006      	beq.n	801680a <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
 80167fc:	2a00      	cmp	r2, #0
 80167fe:	d136      	bne.n	801686e <lv_font_get_glyph_dsc_fmt_txt+0x82>
    if(!gid) return false;
 8016800:	2600      	movs	r6, #0
}
 8016802:	4630      	mov	r0, r6
 8016804:	b004      	add	sp, #16
 8016806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
 801680a:	2601      	movs	r6, #1
        unicode_letter = ' ';
 801680c:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801680e:	46c1      	mov	r9, r8
 8016810:	f859 7f10 	ldr.w	r7, [r9, #16]!
 8016814:	4648      	mov	r0, r9
 8016816:	f7ff ff67 	bl	80166e8 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
 801681a:	4605      	mov	r5, r0
 801681c:	2800      	cmp	r0, #0
 801681e:	d0ef      	beq.n	8016800 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	bb33      	cbnz	r3, 8016872 <lv_font_get_glyph_dsc_fmt_txt+0x86>
    int8_t kvalue = 0;
 8016824:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801682c:	8a38      	ldrh	r0, [r7, #16]
    uint32_t adv_w = gdsc->adv_w;
 801682e:	886a      	ldrh	r2, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8016830:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
 8016832:	f3c2 110b 	ubfx	r1, r2, #4, #12
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8016836:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8016838:	460a      	mov	r2, r1
    if(is_tab) adv_w *= 2;
 801683a:	b10e      	cbz	r6, 8016840 <lv_font_get_glyph_dsc_fmt_txt+0x54>
 801683c:	b20a      	sxth	r2, r1
 801683e:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8016840:	3308      	adds	r3, #8
 8016842:	4413      	add	r3, r2
 8016844:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8016846:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
 8016848:	796b      	ldrb	r3, [r5, #5]
 801684a:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
 801684c:	792b      	ldrb	r3, [r5, #4]
 801684e:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 8016850:	f995 2006 	ldrsb.w	r2, [r5, #6]
 8016854:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
 8016856:	f995 2007 	ldrsb.w	r2, [r5, #7]
 801685a:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801685c:	7cfa      	ldrb	r2, [r7, #19]
 801685e:	f3c2 0243 	ubfx	r2, r2, #1, #4
 8016862:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8016864:	2e00      	cmp	r6, #0
 8016866:	d062      	beq.n	801692e <lv_font_get_glyph_dsc_fmt_txt+0x142>
 8016868:	005b      	lsls	r3, r3, #1
 801686a:	8063      	strh	r3, [r4, #2]
 801686c:	e7c9      	b.n	8016802 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
 801686e:	2600      	movs	r6, #0
 8016870:	e7cd      	b.n	801680e <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
 8016872:	f1ba 0f00 	cmp.w	sl, #0
 8016876:	d0d5      	beq.n	8016824 <lv_font_get_glyph_dsc_fmt_txt+0x38>
 8016878:	4651      	mov	r1, sl
 801687a:	4648      	mov	r0, r9
 801687c:	f7ff ff34 	bl	80166e8 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
 8016880:	2800      	cmp	r0, #0
 8016882:	d0cf      	beq.n	8016824 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
 8016884:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if(fdsc->kern_classes == 0) {
 8016888:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801688c:	7cdb      	ldrb	r3, [r3, #19]
 801688e:	069b      	lsls	r3, r3, #26
 8016890:	d438      	bmi.n	8016904 <lv_font_get_glyph_dsc_fmt_txt+0x118>
        if(kdsc->glyph_ids_size == 0) {
 8016892:	f898 300b 	ldrb.w	r3, [r8, #11]
 8016896:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 801689a:	d11a      	bne.n	80168d2 <lv_font_get_glyph_dsc_fmt_txt+0xe6>
            const uint16_t * g_ids = kdsc->glyph_ids;
 801689c:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80168a0:	eb05 2000 	add.w	r0, r5, r0, lsl #8
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80168a4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80168a8:	4b22      	ldr	r3, [pc, #136]	; (8016934 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 80168aa:	4649      	mov	r1, r9
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80168ac:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80168b0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80168b4:	9300      	str	r3, [sp, #0]
 80168b6:	a803      	add	r0, sp, #12
 80168b8:	2302      	movs	r3, #2
 80168ba:	f002 ff96 	bl	80197ea <_lv_utils_bsearch>
            if(kid_p) {
 80168be:	4603      	mov	r3, r0
 80168c0:	2800      	cmp	r0, #0
 80168c2:	d0b0      	beq.n	8016826 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 80168c4:	eba0 0309 	sub.w	r3, r0, r9
 80168c8:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 80168ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80168ce:	56d3      	ldrsb	r3, [r2, r3]
 80168d0:	e7a9      	b.n	8016826 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
 80168d2:	2b40      	cmp	r3, #64	; 0x40
 80168d4:	d1a6      	bne.n	8016824 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint32_t * g_ids = kdsc->glyph_ids;
 80168d6:	f8d8 9000 	ldr.w	r9, [r8]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80168da:	eb05 4000 	add.w	r0, r5, r0, lsl #16
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80168de:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80168e2:	4b15      	ldr	r3, [pc, #84]	; (8016938 <lv_font_get_glyph_dsc_fmt_txt+0x14c>)
 80168e4:	4649      	mov	r1, r9
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80168e6:	9003      	str	r0, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80168e8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80168ec:	9300      	str	r3, [sp, #0]
 80168ee:	a803      	add	r0, sp, #12
 80168f0:	2304      	movs	r3, #4
 80168f2:	f002 ff7a 	bl	80197ea <_lv_utils_bsearch>
            if(kid_p) {
 80168f6:	4603      	mov	r3, r0
 80168f8:	2800      	cmp	r0, #0
 80168fa:	d094      	beq.n	8016826 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = kid_p - g_ids;
 80168fc:	eba0 0309 	sub.w	r3, r0, r9
 8016900:	109b      	asrs	r3, r3, #2
 8016902:	e7e2      	b.n	80168ca <lv_font_get_glyph_dsc_fmt_txt+0xde>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8016904:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016908:	5d5b      	ldrb	r3, [r3, r5]
        if(left_class > 0 && right_class > 0) {
 801690a:	2b00      	cmp	r3, #0
 801690c:	d08a      	beq.n	8016824 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 801690e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016912:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
 8016914:	2900      	cmp	r1, #0
 8016916:	d085      	beq.n	8016824 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8016918:	f8d8 2000 	ldr.w	r2, [r8]
 801691c:	3b01      	subs	r3, #1
 801691e:	f898 000d 	ldrb.w	r0, [r8, #13]
 8016922:	440a      	add	r2, r1
 8016924:	fb00 2303 	mla	r3, r0, r3, r2
 8016928:	f913 3c01 	ldrsb.w	r3, [r3, #-1]
 801692c:	e77b      	b.n	8016826 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
 801692e:	2601      	movs	r6, #1
 8016930:	e767      	b.n	8016802 <lv_font_get_glyph_dsc_fmt_txt+0x16>
 8016932:	bf00      	nop
 8016934:	080166bd 	.word	0x080166bd
 8016938:	080166cf 	.word	0x080166cf

0801693c <_lv_font_clean_up_fmt_txt>:
}
 801693c:	4770      	bx	lr
	...

08016940 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8016940:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8016942:	2138      	movs	r1, #56	; 0x38
{
 8016944:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8016946:	f001 f9e5 	bl	8017d14 <lv_memset_00>

    driver->hor_res          = 320;
 801694a:	4b07      	ldr	r3, [pc, #28]	; (8016968 <lv_disp_drv_init+0x28>)
 801694c:	6023      	str	r3, [r4, #0]
    driver->ver_res          = 240;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1: 0;
 801694e:	8923      	ldrh	r3, [r4, #8]
 8016950:	f003 031b 	and.w	r3, r3, #27
 8016954:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 8016958:	f043 0304 	orr.w	r3, r3, #4
 801695c:	8123      	strh	r3, [r4, #8]
    driver->screen_transp    = LV_COLOR_SCREEN_TRANSP;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 801695e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8016962:	8623      	strh	r3, [r4, #48]	; 0x30
}
 8016964:	bd10      	pop	{r4, pc}
 8016966:	bf00      	nop
 8016968:	00f00140 	.word	0x00f00140

0801696c <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801696e:	4604      	mov	r4, r0
 8016970:	460d      	mov	r5, r1
 8016972:	4617      	mov	r7, r2
 8016974:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 8016976:	2124      	movs	r1, #36	; 0x24
 8016978:	f001 f9cc 	bl	8017d14 <lv_memset_00>

    draw_buf->buf1    = buf1;
    draw_buf->buf2    = buf2;
 801697c:	e9c4 5700 	strd	r5, r7, [r4]
    draw_buf->buf_act = draw_buf->buf1;
    draw_buf->size    = size_in_px_cnt;
 8016980:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
 8016984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016988 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8016988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801698a:	4605      	mov	r5, r0
 801698c:	b085      	sub	sp, #20
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801698e:	4839      	ldr	r0, [pc, #228]	; (8016a74 <lv_disp_drv_register+0xec>)
 8016990:	f000 fe4b 	bl	801762a <_lv_ll_ins_head>
    if(!disp) {
 8016994:	4604      	mov	r4, r0
 8016996:	b900      	cbnz	r0, 801699a <lv_disp_drv_register+0x12>
        LV_ASSERT_MALLOC(disp);
 8016998:	e7fe      	b.n	8016998 <lv_disp_drv_register+0x10>
        return NULL;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 801699a:	f44f 71ac 	mov.w	r1, #344	; 0x158

    disp->driver = driver;

    lv_disp_t * disp_def_tmp = disp_def;
 801699e:	4e36      	ldr	r6, [pc, #216]	; (8016a78 <lv_disp_drv_register+0xf0>)
    lv_memset_00(disp, sizeof(lv_disp_t));
 80169a0:	f001 f9b8 	bl	8017d14 <lv_memset_00>
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80169a4:	4622      	mov	r2, r4
 80169a6:	211e      	movs	r1, #30
 80169a8:	4834      	ldr	r0, [pc, #208]	; (8016a7c <lv_disp_drv_register+0xf4>)
    disp->driver = driver;
 80169aa:	6025      	str	r5, [r4, #0]
    lv_disp_t * disp_def_tmp = disp_def;
 80169ac:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 80169ae:	6034      	str	r4, [r6, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 80169b0:	f001 ff6a 	bl	8018888 <lv_timer_create>
 80169b4:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 80169b6:	b900      	cbnz	r0, 80169ba <lv_disp_drv_register+0x32>
 80169b8:	e7fe      	b.n	80169b8 <lv_disp_drv_register+0x30>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 80169ba:	7a2b      	ldrb	r3, [r5, #8]
 80169bc:	07da      	lsls	r2, r3, #31
 80169be:	d50a      	bpl.n	80169d6 <lv_disp_drv_register+0x4e>
 80169c0:	6869      	ldr	r1, [r5, #4]
 80169c2:	882a      	ldrh	r2, [r5, #0]
 80169c4:	8868      	ldrh	r0, [r5, #2]
 80169c6:	68c9      	ldr	r1, [r1, #12]
 80169c8:	fb12 f200 	smulbb	r2, r2, r0
 80169cc:	4291      	cmp	r1, r2
        driver->full_refresh = 0;
 80169ce:	bf3c      	itt	cc
 80169d0:	f36f 0300 	bfccc	r3, #0, #1
 80169d4:	722b      	strbcc	r3, [r5, #8]

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 80169d6:	23ff      	movs	r3, #255	; 0xff
 80169d8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    disp->bg_color = lv_color_white();
 80169dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80169e0:	8563      	strh	r3, [r4, #42]	; 0x2a
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 80169e2:	f7fb ffb5 	bl	8012950 <lv_theme_default_is_inited>
 80169e6:	4605      	mov	r5, r0
 80169e8:	b980      	cbnz	r0, 8016a0c <lv_disp_drv_register+0x84>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), LV_THEME_DEFAULT_DARK, LV_FONT_DEFAULT);
 80169ea:	2005      	movs	r0, #5
 80169ec:	f000 fd46 	bl	801747c <lv_palette_main>
 80169f0:	4601      	mov	r1, r0
 80169f2:	4628      	mov	r0, r5
 80169f4:	9103      	str	r1, [sp, #12]
 80169f6:	f000 fd41 	bl	801747c <lv_palette_main>
 80169fa:	4b21      	ldr	r3, [pc, #132]	; (8016a80 <lv_disp_drv_register+0xf8>)
 80169fc:	4602      	mov	r2, r0
 80169fe:	9903      	ldr	r1, [sp, #12]
 8016a00:	4620      	mov	r0, r4
 8016a02:	9300      	str	r3, [sp, #0]
 8016a04:	462b      	mov	r3, r5
 8016a06:	f7fa fe9b 	bl	8011740 <lv_theme_default_init>
 8016a0a:	60a0      	str	r0, [r4, #8]
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8016a0c:	2000      	movs	r0, #0
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);

    lv_obj_invalidate(disp->act_scr);

    disp_def = disp_def_tmp; /*Revert the default display*/
 8016a0e:	2f00      	cmp	r7, #0
 8016a10:	bf08      	it	eq
 8016a12:	4627      	moveq	r7, r4
    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8016a14:	f7ed fa1c 	bl	8003e50 <lv_obj_create>
 8016a18:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 8016a1a:	2000      	movs	r0, #0
 8016a1c:	f7ed fa18 	bl	8003e50 <lv_obj_create>
 8016a20:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8016a22:	2000      	movs	r0, #0
 8016a24:	f7ed fa14 	bl	8003e50 <lv_obj_create>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8016a28:	4a16      	ldr	r2, [pc, #88]	; (8016a84 <lv_disp_drv_register+0xfc>)
 8016a2a:	6220      	str	r0, [r4, #32]
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	69e0      	ldr	r0, [r4, #28]
 8016a30:	f7f0 fc6e 	bl	8007310 <lv_obj_remove_style>
 8016a34:	4a13      	ldr	r2, [pc, #76]	; (8016a84 <lv_disp_drv_register+0xfc>)
 8016a36:	6a20      	ldr	r0, [r4, #32]
 8016a38:	2100      	movs	r1, #0
 8016a3a:	f7f0 fc69 	bl	8007310 <lv_obj_remove_style>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 8016a3e:	69e0      	ldr	r0, [r4, #28]
 8016a40:	2102      	movs	r1, #2
 8016a42:	f7ed fa34 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8016a46:	6a20      	ldr	r0, [r4, #32]
 8016a48:	2102      	movs	r1, #2
 8016a4a:	f7ed fa30 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 8016a4e:	69e0      	ldr	r0, [r4, #28]
 8016a50:	2100      	movs	r1, #0
 8016a52:	f7ef fa96 	bl	8005f82 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8016a56:	2100      	movs	r1, #0
 8016a58:	6a20      	ldr	r0, [r4, #32]
 8016a5a:	f7ef fa92 	bl	8005f82 <lv_obj_set_scrollbar_mode>
    lv_obj_invalidate(disp->act_scr);
 8016a5e:	6920      	ldr	r0, [r4, #16]
 8016a60:	f7ee fc0a 	bl	8005278 <lv_obj_invalidate>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8016a64:	6860      	ldr	r0, [r4, #4]
    disp_def = disp_def_tmp; /*Revert the default display*/
 8016a66:	6037      	str	r7, [r6, #0]
    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8016a68:	f001 fffe 	bl	8018a68 <lv_timer_ready>

    return disp;
}
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	b005      	add	sp, #20
 8016a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a72:	bf00      	nop
 8016a74:	2000adf8 	.word	0x2000adf8
 8016a78:	20002b4c 	.word	0x20002b4c
 8016a7c:	080084e5 	.word	0x080084e5
 8016a80:	080294fc 	.word	0x080294fc
 8016a84:	000fffff 	.word	0x000fffff

08016a88 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 8016a88:	4b01      	ldr	r3, [pc, #4]	; (8016a90 <lv_disp_get_default+0x8>)
 8016a8a:	6818      	ldr	r0, [r3, #0]
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop
 8016a90:	20002b4c 	.word	0x20002b4c

08016a94 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8016a94:	b910      	cbnz	r0, 8016a9c <lv_disp_get_hor_res+0x8>
    return disp_def;
 8016a96:	4b06      	ldr	r3, [pc, #24]	; (8016ab0 <lv_disp_get_hor_res+0x1c>)
 8016a98:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 8016a9a:	b140      	cbz	r0, 8016aae <lv_disp_get_hor_res+0x1a>
        return 0;
    } else {
        switch(disp->driver->rotated) {
 8016a9c:	6803      	ldr	r3, [r0, #0]
 8016a9e:	7a1a      	ldrb	r2, [r3, #8]
 8016aa0:	0712      	lsls	r2, r2, #28
 8016aa2:	d502      	bpl.n	8016aaa <lv_disp_get_hor_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 8016aa4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8016aa8:	4770      	bx	lr
            default:
                return disp->driver->hor_res;
 8016aaa:	f9b3 0000 	ldrsh.w	r0, [r3]
        }
    }
}
 8016aae:	4770      	bx	lr
 8016ab0:	20002b4c 	.word	0x20002b4c

08016ab4 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8016ab4:	b910      	cbnz	r0, 8016abc <lv_disp_get_ver_res+0x8>
    return disp_def;
 8016ab6:	4b06      	ldr	r3, [pc, #24]	; (8016ad0 <lv_disp_get_ver_res+0x1c>)
 8016ab8:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL) {
 8016aba:	b140      	cbz	r0, 8016ace <lv_disp_get_ver_res+0x1a>
        return 0;
    } else {
        switch(disp->driver->rotated) {
 8016abc:	6803      	ldr	r3, [r0, #0]
 8016abe:	7a1a      	ldrb	r2, [r3, #8]
 8016ac0:	0712      	lsls	r2, r2, #28
 8016ac2:	d502      	bpl.n	8016aca <lv_disp_get_ver_res+0x16>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 8016ac4:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016ac8:	4770      	bx	lr
            default:
                return disp->driver->ver_res;
 8016aca:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
        }
    }
}
 8016ace:	4770      	bx	lr
 8016ad0:	20002b4c 	.word	0x20002b4c

08016ad4 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8016ad4:	b910      	cbnz	r0, 8016adc <lv_disp_get_dpi+0x8>
    return disp_def;
 8016ad6:	4b05      	ldr	r3, [pc, #20]	; (8016aec <lv_disp_get_dpi+0x18>)
 8016ad8:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8016ada:	b120      	cbz	r0, 8016ae6 <lv_disp_get_dpi+0x12>
    return disp->driver->dpi;
 8016adc:	6803      	ldr	r3, [r0, #0]
 8016ade:	8918      	ldrh	r0, [r3, #8]
 8016ae0:	f3c0 1089 	ubfx	r0, r0, #6, #10
 8016ae4:	4770      	bx	lr
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8016ae6:	2082      	movs	r0, #130	; 0x82
}
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	20002b4c 	.word	0x20002b4c

08016af0 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        lv_memset_00(disp_drv->draw_buf->buf_act, disp_drv->draw_buf->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->draw_buf->flushing = 0;
 8016af0:	6843      	ldr	r3, [r0, #4]
 8016af2:	2200      	movs	r2, #0
 8016af4:	619a      	str	r2, [r3, #24]
    disp_drv->draw_buf->flushing_last = 0;
 8016af6:	61da      	str	r2, [r3, #28]
}
 8016af8:	4770      	bx	lr
	...

08016afc <lv_disp_get_next>:
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    if(disp == NULL)
 8016afc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8016afe:	4803      	ldr	r0, [pc, #12]	; (8016b0c <lv_disp_get_next+0x10>)
    if(disp == NULL)
 8016b00:	b909      	cbnz	r1, 8016b06 <lv_disp_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8016b02:	f000 be04 	b.w	801770e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8016b06:	f000 be08 	b.w	801771a <_lv_ll_get_next>
 8016b0a:	bf00      	nop
 8016b0c:	2000adf8 	.word	0x2000adf8

08016b10 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8016b10:	6803      	ldr	r3, [r0, #0]
}
 8016b12:	6858      	ldr	r0, [r3, #4]
 8016b14:	4770      	bx	lr
	...

08016b18 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8016b18:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8016b1a:	2120      	movs	r1, #32
{
 8016b1c:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8016b1e:	f001 f8f9 	bl	8017d14 <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8016b22:	2300      	movs	r3, #0
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8016b24:	4a02      	ldr	r2, [pc, #8]	; (8016b30 <lv_indev_drv_init+0x18>)
    driver->type                 = LV_INDEV_TYPE_NONE;
 8016b26:	7023      	strb	r3, [r4, #0]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8016b28:	4b02      	ldr	r3, [pc, #8]	; (8016b34 <lv_indev_drv_init+0x1c>)
 8016b2a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 8016b2e:	bd10      	pop	{r4, pc}
 8016b30:	32030a0a 	.word	0x32030a0a
 8016b34:	00640190 	.word	0x00640190

08016b38 <lv_indev_drv_register>:
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable.
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 8016b38:	b538      	push	{r3, r4, r5, lr}

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8016b3a:	6903      	ldr	r3, [r0, #16]
{
 8016b3c:	4605      	mov	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8016b3e:	b12b      	cbz	r3, 8016b4c <lv_indev_drv_register+0x14>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8016b40:	480e      	ldr	r0, [pc, #56]	; (8016b7c <lv_indev_drv_register+0x44>)
 8016b42:	f000 fd72 	bl	801762a <_lv_ll_ins_head>
    if(!indev) {
 8016b46:	4604      	mov	r4, r0
 8016b48:	b940      	cbnz	r0, 8016b5c <lv_indev_drv_register+0x24>
        LV_ASSERT_MALLOC(indev);
 8016b4a:	e7fe      	b.n	8016b4a <lv_indev_drv_register+0x12>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8016b4c:	f7ff ff9c 	bl	8016a88 <lv_disp_get_default>
 8016b50:	4604      	mov	r4, r0
 8016b52:	6128      	str	r0, [r5, #16]
    if(driver->disp == NULL) {
 8016b54:	2800      	cmp	r0, #0
 8016b56:	d1f3      	bne.n	8016b40 <lv_indev_drv_register+0x8>

    indev->proc.reset_query  = 1;
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);

    return indev;
}
 8016b58:	4620      	mov	r0, r4
 8016b5a:	bd38      	pop	{r3, r4, r5, pc}
    lv_memset_00(indev, sizeof(lv_indev_t));
 8016b5c:	2158      	movs	r1, #88	; 0x58
 8016b5e:	f001 f8d9 	bl	8017d14 <lv_memset_00>
    indev->proc.reset_query  = 1;
 8016b62:	7963      	ldrb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8016b64:	4622      	mov	r2, r4
 8016b66:	211e      	movs	r1, #30
    indev->proc.reset_query  = 1;
 8016b68:	f043 0302 	orr.w	r3, r3, #2
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8016b6c:	4804      	ldr	r0, [pc, #16]	; (8016b80 <lv_indev_drv_register+0x48>)
    indev->driver = driver;
 8016b6e:	6025      	str	r5, [r4, #0]
    indev->proc.reset_query  = 1;
 8016b70:	7163      	strb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8016b72:	f001 fe89 	bl	8018888 <lv_timer_create>
 8016b76:	6168      	str	r0, [r5, #20]
    return indev;
 8016b78:	e7ee      	b.n	8016b58 <lv_indev_drv_register+0x20>
 8016b7a:	bf00      	nop
 8016b7c:	2000ade0 	.word	0x2000ade0
 8016b80:	08002a81 	.word	0x08002a81

08016b84 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
 8016b84:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8016b86:	4803      	ldr	r0, [pc, #12]	; (8016b94 <lv_indev_get_next+0x10>)
    if(indev == NULL)
 8016b88:	b909      	cbnz	r1, 8016b8e <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8016b8a:	f000 bdc0 	b.w	801770e <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8016b8e:	f000 bdc4 	b.w	801771a <_lv_ll_get_next>
 8016b92:	bf00      	nop
 8016b94:	2000ade0 	.word	0x2000ade0

08016b98 <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8016b98:	b570      	push	{r4, r5, r6, lr}
 8016b9a:	460c      	mov	r4, r1
 8016b9c:	4605      	mov	r5, r0
    lv_memset_00(data, sizeof(lv_indev_data_t));
 8016b9e:	2110      	movs	r1, #16
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f001 f8b7 	bl	8017d14 <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 8016ba6:	6828      	ldr	r0, [r5, #0]
 8016ba8:	7803      	ldrb	r3, [r0, #0]
 8016baa:	2b01      	cmp	r3, #1
 8016bac:	d109      	bne.n	8016bc2 <_lv_indev_read+0x2a>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 8016bae:	8a2b      	ldrh	r3, [r5, #16]
 8016bb0:	8023      	strh	r3, [r4, #0]
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
 8016bb2:	8a6b      	ldrh	r3, [r5, #18]
 8016bb4:	8063      	strh	r3, [r4, #2]
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
        data->key = LV_KEY_ENTER;
    }

    if(indev->driver->read_cb) {
 8016bb6:	6843      	ldr	r3, [r0, #4]
 8016bb8:	b163      	cbz	r3, 8016bd4 <_lv_indev_read+0x3c>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 8016bba:	4621      	mov	r1, r4
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 8016bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        indev->driver->read_cb(indev->driver, data);
 8016bc0:	4718      	bx	r3
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8016bc2:	2b02      	cmp	r3, #2
 8016bc4:	d102      	bne.n	8016bcc <_lv_indev_read+0x34>
        data->key = indev->proc.types.keypad.last_key;
 8016bc6:	68eb      	ldr	r3, [r5, #12]
        data->key = LV_KEY_ENTER;
 8016bc8:	6063      	str	r3, [r4, #4]
 8016bca:	e7f4      	b.n	8016bb6 <_lv_indev_read+0x1e>
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 8016bcc:	2b04      	cmp	r3, #4
 8016bce:	d1f2      	bne.n	8016bb6 <_lv_indev_read+0x1e>
        data->key = LV_KEY_ENTER;
 8016bd0:	230a      	movs	r3, #10
 8016bd2:	e7f9      	b.n	8016bc8 <_lv_indev_read+0x30>
}
 8016bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016bd8 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8016bd8:	4b03      	ldr	r3, [pc, #12]	; (8016be8 <lv_tick_inc+0x10>)
 8016bda:	2200      	movs	r2, #0
 8016bdc:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8016bde:	4a03      	ldr	r2, [pc, #12]	; (8016bec <lv_tick_inc+0x14>)
 8016be0:	6813      	ldr	r3, [r2, #0]
 8016be2:	4418      	add	r0, r3
 8016be4:	6010      	str	r0, [r2, #0]
}
 8016be6:	4770      	bx	lr
 8016be8:	20002b54 	.word	0x20002b54
 8016bec:	20002b50 	.word	0x20002b50

08016bf0 <lv_tick_get>:
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
        result        = sys_time;
 8016bf0:	4b04      	ldr	r3, [pc, #16]	; (8016c04 <lv_tick_get+0x14>)
        tick_irq_flag = 1;
 8016bf2:	f04f 0101 	mov.w	r1, #1
        result        = sys_time;
 8016bf6:	6818      	ldr	r0, [r3, #0]
        tick_irq_flag = 1;
 8016bf8:	4b03      	ldr	r3, [pc, #12]	; (8016c08 <lv_tick_get+0x18>)
 8016bfa:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8016bfc:	781a      	ldrb	r2, [r3, #0]
 8016bfe:	2a00      	cmp	r2, #0
 8016c00:	d0fb      	beq.n	8016bfa <lv_tick_get+0xa>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8016c02:	4770      	bx	lr
 8016c04:	20002b50 	.word	0x20002b50
 8016c08:	20002b54 	.word	0x20002b54

08016c0c <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8016c0c:	b510      	push	{r4, lr}
 8016c0e:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 8016c10:	f7ff ffee 	bl	8016bf0 <lv_tick_get>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8016c14:	1b00      	subs	r0, r0, r4
 8016c16:	bd10      	pop	{r4, pc}

08016c18 <lv_anim_path_linear>:
 * @return the current value to set
 */
int32_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8016c1c:	b513      	push	{r0, r1, r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	2300      	movs	r3, #0
{
 8016c22:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8016c24:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016c26:	4619      	mov	r1, r3
 8016c28:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016c2a:	f000 fe44 	bl	80178b6 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 8016c2e:	69e2      	ldr	r2, [r4, #28]
 8016c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c32:	1a9b      	subs	r3, r3, r2
 8016c34:	4358      	muls	r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start_value;

    return new_value;
}
 8016c36:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8016c3a:	b002      	add	sp, #8
 8016c3c:	bd10      	pop	{r4, pc}
	...

08016c40 <anim_mark_list_change>:
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
        }
    }
}
static void anim_mark_list_change(void)
{
 8016c40:	b508      	push	{r3, lr}
    anim_list_changed = true;
 8016c42:	2201      	movs	r2, #1
 8016c44:	4b08      	ldr	r3, [pc, #32]	; (8016c68 <anim_mark_list_change+0x28>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8016c46:	4809      	ldr	r0, [pc, #36]	; (8016c6c <anim_mark_list_change+0x2c>)
    anim_list_changed = true;
 8016c48:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8016c4a:	f000 fd60 	bl	801770e <_lv_ll_get_head>
 8016c4e:	4b08      	ldr	r3, [pc, #32]	; (8016c70 <anim_mark_list_change+0x30>)
 8016c50:	b920      	cbnz	r0, 8016c5c <anim_mark_list_change+0x1c>
        lv_timer_pause(_lv_anim_tmr);
 8016c52:	6818      	ldr	r0, [r3, #0]
    else
        lv_timer_resume(_lv_anim_tmr);
}
 8016c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_pause(_lv_anim_tmr);
 8016c58:	f001 befc 	b.w	8018a54 <lv_timer_pause>
        lv_timer_resume(_lv_anim_tmr);
 8016c5c:	6818      	ldr	r0, [r3, #0]
}
 8016c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lv_timer_resume(_lv_anim_tmr);
 8016c62:	f001 befc 	b.w	8018a5e <lv_timer_resume>
 8016c66:	bf00      	nop
 8016c68:	20002b5c 	.word	0x20002b5c
 8016c6c:	2000ae50 	.word	0x2000ae50
 8016c70:	20002b58 	.word	0x20002b58

08016c74 <anim_timer>:
{
 8016c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8016c78:	4e57      	ldr	r6, [pc, #348]	; (8016dd8 <anim_timer+0x164>)
{
 8016c7a:	b093      	sub	sp, #76	; 0x4c
    anim_run_round = anim_run_round ? false : true;
 8016c7c:	4d57      	ldr	r5, [pc, #348]	; (8016ddc <anim_timer+0x168>)
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8016c7e:	6830      	ldr	r0, [r6, #0]
 8016c80:	f7ff ffc4 	bl	8016c0c <lv_tick_elaps>
    anim_run_round = anim_run_round ? false : true;
 8016c84:	782b      	ldrb	r3, [r5, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8016c86:	4607      	mov	r7, r0
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016c88:	4855      	ldr	r0, [pc, #340]	; (8016de0 <anim_timer+0x16c>)
    anim_run_round = anim_run_round ? false : true;
 8016c8a:	f083 0301 	eor.w	r3, r3, #1
        anim_list_changed = false;
 8016c8e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8016de4 <anim_timer+0x170>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016c92:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8016de0 <anim_timer+0x16c>
    anim_run_round = anim_run_round ? false : true;
 8016c96:	702b      	strb	r3, [r5, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016c98:	f000 fd39 	bl	801770e <_lv_ll_get_head>
 8016c9c:	4604      	mov	r4, r0
    while(a != NULL) {
 8016c9e:	b92c      	cbnz	r4, 8016cac <anim_timer+0x38>
    last_timer_run = lv_tick_get();
 8016ca0:	f7ff ffa6 	bl	8016bf0 <lv_tick_get>
 8016ca4:	6030      	str	r0, [r6, #0]
}
 8016ca6:	b013      	add	sp, #76	; 0x4c
 8016ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        anim_list_changed = false;
 8016cac:	2300      	movs	r3, #0
        if(a->run_round != anim_run_round) {
 8016cae:	782a      	ldrb	r2, [r5, #0]
        anim_list_changed = false;
 8016cb0:	f889 3000 	strb.w	r3, [r9]
        if(a->run_round != anim_run_round) {
 8016cb4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016cb8:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8016cbc:	4291      	cmp	r1, r2
 8016cbe:	f000 8086 	beq.w	8016dce <anim_timer+0x15a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8016cc2:	f362 0382 	bfi	r3, r2, #2, #1
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016cc6:	0719      	lsls	r1, r3, #28
 8016cc8:	b2da      	uxtb	r2, r3
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8016cca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016cce:	d41a      	bmi.n	8016d06 <anim_timer+0x92>
            int32_t new_act_time = a->act_time + elaps;
 8016cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	dc17      	bgt.n	8016d06 <anim_timer+0x92>
 8016cd6:	42fb      	cmn	r3, r7
 8016cd8:	d415      	bmi.n	8016d06 <anim_timer+0x92>
                if(a->early_apply == 0 && a->get_value_cb) {
 8016cda:	07d2      	lsls	r2, r2, #31
 8016cdc:	d409      	bmi.n	8016cf2 <anim_timer+0x7e>
 8016cde:	6923      	ldr	r3, [r4, #16]
 8016ce0:	b13b      	cbz	r3, 8016cf2 <anim_timer+0x7e>
                    int32_t v_ofs  = a->get_value_cb(a);
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	4798      	blx	r3
                    a->start_value += v_ofs;
 8016ce6:	69e3      	ldr	r3, [r4, #28]
 8016ce8:	4403      	add	r3, r0
 8016cea:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 8016cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cee:	4418      	add	r0, r3
 8016cf0:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 8016cf2:	68a3      	ldr	r3, [r4, #8]
 8016cf4:	b10b      	cbz	r3, 8016cfa <anim_timer+0x86>
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	4798      	blx	r3
                a->start_cb_called = 1;
 8016cfa:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016cfe:	f043 0308 	orr.w	r3, r3, #8
 8016d02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            a->act_time += elaps;
 8016d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016d08:	443b      	add	r3, r7
            if(a->act_time >= 0) {
 8016d0a:	2b00      	cmp	r3, #0
            a->act_time += elaps;
 8016d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 8016d0e:	db2f      	blt.n	8016d70 <anim_timer+0xfc>
                if(a->act_time > a->time) a->act_time = a->time;
 8016d10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                new_value = a->path_cb(a);
 8016d12:	4620      	mov	r0, r4
                if(a->act_time > a->time) a->act_time = a->time;
 8016d14:	4293      	cmp	r3, r2
                new_value = a->path_cb(a);
 8016d16:	69a3      	ldr	r3, [r4, #24]
                if(a->act_time > a->time) a->act_time = a->time;
 8016d18:	bfc8      	it	gt
 8016d1a:	62e2      	strgt	r2, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 8016d1c:	4798      	blx	r3
                if(new_value != a->current_value) {
 8016d1e:	6a23      	ldr	r3, [r4, #32]
                new_value = a->path_cb(a);
 8016d20:	4601      	mov	r1, r0
                if(new_value != a->current_value) {
 8016d22:	4283      	cmp	r3, r0
 8016d24:	d004      	beq.n	8016d30 <anim_timer+0xbc>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8016d26:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8016d28:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8016d2a:	b10b      	cbz	r3, 8016d30 <anim_timer+0xbc>
 8016d2c:	6820      	ldr	r0, [r4, #0]
 8016d2e:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8016d30:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8016d34:	429a      	cmp	r2, r3
 8016d36:	db1b      	blt.n	8016d70 <anim_timer+0xfc>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8016d38:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016d3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016d3e:	f013 0302 	ands.w	r3, r3, #2
 8016d42:	d123      	bne.n	8016d8c <anim_timer+0x118>
 8016d44:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8016d46:	b9d9      	cbnz	r1, 8016d80 <anim_timer+0x10c>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016d48:	2a00      	cmp	r2, #0
 8016d4a:	d13d      	bne.n	8016dc8 <anim_timer+0x154>
        lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
 8016d4c:	2244      	movs	r2, #68	; 0x44
 8016d4e:	4621      	mov	r1, r4
 8016d50:	a801      	add	r0, sp, #4
 8016d52:	f000 fe19 	bl	8017988 <lv_memcpy>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016d56:	4621      	mov	r1, r4
 8016d58:	4640      	mov	r0, r8
 8016d5a:	f000 fc9d 	bl	8017698 <_lv_ll_remove>
        lv_mem_free(a);
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f000 fdd8 	bl	8017914 <lv_mem_free>
        anim_mark_list_change();
 8016d64:	f7ff ff6c 	bl	8016c40 <anim_mark_list_change>
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 8016d68:	9b04      	ldr	r3, [sp, #16]
 8016d6a:	b10b      	cbz	r3, 8016d70 <anim_timer+0xfc>
 8016d6c:	a801      	add	r0, sp, #4
 8016d6e:	4798      	blx	r3
        if(anim_list_changed)
 8016d70:	f899 3000 	ldrb.w	r3, [r9]
 8016d74:	b35b      	cbz	r3, 8016dce <anim_timer+0x15a>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016d76:	4640      	mov	r0, r8
 8016d78:	f000 fcc9 	bl	801770e <_lv_ll_get_head>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	e78e      	b.n	8016c9e <anim_timer+0x2a>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8016d80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016d84:	4281      	cmp	r1, r0
 8016d86:	d004      	beq.n	8016d92 <anim_timer+0x11e>
        a->repeat_cnt--;
 8016d88:	3901      	subs	r1, #1
 8016d8a:	87a1      	strh	r1, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016d8c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8016d8e:	2900      	cmp	r1, #0
 8016d90:	d0da      	beq.n	8016d48 <anim_timer+0xd4>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8016d92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016d94:	4249      	negs	r1, r1
 8016d96:	62e1      	str	r1, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8016d98:	2a00      	cmp	r2, #0
 8016d9a:	d0e9      	beq.n	8016d70 <anim_timer+0xfc>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8016d9c:	b913      	cbnz	r3, 8016da4 <anim_timer+0x130>
 8016d9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016da0:	4249      	negs	r1, r1
 8016da2:	62e1      	str	r1, [r4, #44]	; 0x2c
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016da4:	fab3 f383 	clz	r3, r3
 8016da8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
            tmp      = a->start_value;
 8016dac:	69e0      	ldr	r0, [r4, #28]
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016dae:	095b      	lsrs	r3, r3, #5
 8016db0:	f363 0141 	bfi	r1, r3, #1, #1
            a->start_value = a->end_value;
 8016db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
            a->end_value   = tmp;
 8016db6:	6260      	str	r0, [r4, #36]	; 0x24
            a->start_value = a->end_value;
 8016db8:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8016dba:	078b      	lsls	r3, r1, #30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8016dbc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
 8016dc0:	bf58      	it	pl
 8016dc2:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8016dc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8016dc6:	e7d3      	b.n	8016d70 <anim_timer+0xfc>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d0e2      	beq.n	8016d92 <anim_timer+0x11e>
 8016dcc:	e7be      	b.n	8016d4c <anim_timer+0xd8>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016dce:	4621      	mov	r1, r4
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	f000 fca2 	bl	801771a <_lv_ll_get_next>
 8016dd6:	e7d1      	b.n	8016d7c <anim_timer+0x108>
 8016dd8:	20002b60 	.word	0x20002b60
 8016ddc:	20002b5d 	.word	0x20002b5d
 8016de0:	2000ae50 	.word	0x2000ae50
 8016de4:	20002b5c 	.word	0x20002b5c

08016de8 <_lv_anim_core_init>:
{
 8016de8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8016dea:	2144      	movs	r1, #68	; 0x44
 8016dec:	4807      	ldr	r0, [pc, #28]	; (8016e0c <_lv_anim_core_init+0x24>)
 8016dee:	f000 fc14 	bl	801761a <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8016df2:	2200      	movs	r2, #0
 8016df4:	211e      	movs	r1, #30
 8016df6:	4806      	ldr	r0, [pc, #24]	; (8016e10 <_lv_anim_core_init+0x28>)
 8016df8:	f001 fd46 	bl	8018888 <lv_timer_create>
 8016dfc:	4b05      	ldr	r3, [pc, #20]	; (8016e14 <_lv_anim_core_init+0x2c>)
 8016dfe:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 8016e00:	f7ff ff1e 	bl	8016c40 <anim_mark_list_change>
    anim_list_changed = false;
 8016e04:	4b04      	ldr	r3, [pc, #16]	; (8016e18 <_lv_anim_core_init+0x30>)
 8016e06:	2200      	movs	r2, #0
 8016e08:	701a      	strb	r2, [r3, #0]
}
 8016e0a:	bd08      	pop	{r3, pc}
 8016e0c:	2000ae50 	.word	0x2000ae50
 8016e10:	08016c75 	.word	0x08016c75
 8016e14:	20002b58 	.word	0x20002b58
 8016e18:	20002b5c 	.word	0x20002b5c

08016e1c <lv_anim_init>:
{
 8016e1c:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 8016e1e:	2144      	movs	r1, #68	; 0x44
{
 8016e20:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8016e22:	f000 ff77 	bl	8017d14 <lv_memset_00>
    a->time    = 500;
 8016e26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016e2a:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value   = 0;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	61e3      	str	r3, [r4, #28]
    a->end_value     = 100;
 8016e30:	2364      	movs	r3, #100	; 0x64
 8016e32:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 8016e34:	2301      	movs	r3, #1
 8016e36:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 8016e38:	4b04      	ldr	r3, [pc, #16]	; (8016e4c <lv_anim_init+0x30>)
 8016e3a:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 8016e3c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8016e40:	f043 0301 	orr.w	r3, r3, #1
 8016e44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8016e48:	bd10      	pop	{r4, pc}
 8016e4a:	bf00      	nop
 8016e4c:	08016c19 	.word	0x08016c19

08016e50 <lv_anim_del>:
{
 8016e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e54:	4606      	mov	r6, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016e56:	4813      	ldr	r0, [pc, #76]	; (8016ea4 <lv_anim_del+0x54>)
{
 8016e58:	460d      	mov	r5, r1
    bool del = false;
 8016e5a:	f04f 0800 	mov.w	r8, #0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016e5e:	f000 fc56 	bl	801770e <_lv_ll_get_head>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016e62:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8016ea4 <lv_anim_del+0x54>
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8016e66:	4604      	mov	r4, r0
    while(a != NULL) {
 8016e68:	b914      	cbnz	r4, 8016e70 <lv_anim_del+0x20>
}
 8016e6a:	4640      	mov	r0, r8
 8016e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016e70:	4621      	mov	r1, r4
 8016e72:	4648      	mov	r0, r9
 8016e74:	f000 fc51 	bl	801771a <_lv_ll_get_next>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8016e78:	6823      	ldr	r3, [r4, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8016e7a:	4607      	mov	r7, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8016e7c:	42b3      	cmp	r3, r6
 8016e7e:	d10e      	bne.n	8016e9e <lv_anim_del+0x4e>
 8016e80:	6863      	ldr	r3, [r4, #4]
 8016e82:	42ab      	cmp	r3, r5
 8016e84:	d000      	beq.n	8016e88 <lv_anim_del+0x38>
 8016e86:	b955      	cbnz	r5, 8016e9e <lv_anim_del+0x4e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016e88:	4621      	mov	r1, r4
 8016e8a:	4648      	mov	r0, r9
            del = true;
 8016e8c:	f04f 0801 	mov.w	r8, #1
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8016e90:	f000 fc02 	bl	8017698 <_lv_ll_remove>
            lv_mem_free(a);
 8016e94:	4620      	mov	r0, r4
 8016e96:	f000 fd3d 	bl	8017914 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8016e9a:	f7ff fed1 	bl	8016c40 <anim_mark_list_change>
            del = true;
 8016e9e:	463c      	mov	r4, r7
 8016ea0:	e7e2      	b.n	8016e68 <lv_anim_del+0x18>
 8016ea2:	bf00      	nop
 8016ea4:	2000ae50 	.word	0x2000ae50

08016ea8 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8016ea8:	6841      	ldr	r1, [r0, #4]
{
 8016eaa:	b538      	push	{r3, r4, r5, lr}
 8016eac:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 8016eae:	b111      	cbz	r1, 8016eb6 <lv_anim_start+0xe>
 8016eb0:	6800      	ldr	r0, [r0, #0]
 8016eb2:	f7ff ffcd 	bl	8016e50 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8016eb6:	481c      	ldr	r0, [pc, #112]	; (8016f28 <lv_anim_start+0x80>)
 8016eb8:	f000 fc43 	bl	8017742 <_lv_ll_is_empty>
 8016ebc:	b118      	cbz	r0, 8016ec6 <lv_anim_start+0x1e>
        last_timer_run = lv_tick_get();
 8016ebe:	f7ff fe97 	bl	8016bf0 <lv_tick_get>
 8016ec2:	4b1a      	ldr	r3, [pc, #104]	; (8016f2c <lv_anim_start+0x84>)
 8016ec4:	6018      	str	r0, [r3, #0]
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8016ec6:	4818      	ldr	r0, [pc, #96]	; (8016f28 <lv_anim_start+0x80>)
 8016ec8:	f000 fbaf 	bl	801762a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 8016ecc:	4604      	mov	r4, r0
 8016ece:	b900      	cbnz	r0, 8016ed2 <lv_anim_start+0x2a>
 8016ed0:	e7fe      	b.n	8016ed0 <lv_anim_start+0x28>
    a->time_orig = a->time;
 8016ed2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016ed4:	4629      	mov	r1, r5
    a->run_round = anim_run_round;
 8016ed6:	4a16      	ldr	r2, [pc, #88]	; (8016f30 <lv_anim_start+0x88>)
    a->time_orig = a->time;
 8016ed8:	642b      	str	r3, [r5, #64]	; 0x40
    a->run_round = anim_run_round;
 8016eda:	7812      	ldrb	r2, [r2, #0]
 8016edc:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8016ee0:	f362 0382 	bfi	r3, r2, #2, #1
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016ee4:	2244      	movs	r2, #68	; 0x44
    a->run_round = anim_run_round;
 8016ee6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8016eea:	f000 fd4d 	bl	8017988 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8016eee:	682b      	ldr	r3, [r5, #0]
 8016ef0:	42ab      	cmp	r3, r5
    if(new_anim->early_apply) {
 8016ef2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    if(a->var == a) new_anim->var = new_anim;
 8016ef6:	bf08      	it	eq
 8016ef8:	6024      	streq	r4, [r4, #0]
    if(new_anim->early_apply) {
 8016efa:	07db      	lsls	r3, r3, #31
 8016efc:	d50f      	bpl.n	8016f1e <lv_anim_start+0x76>
        if(new_anim->get_value_cb) {
 8016efe:	6923      	ldr	r3, [r4, #16]
 8016f00:	b13b      	cbz	r3, 8016f12 <lv_anim_start+0x6a>
            int32_t v_ofs  = new_anim->get_value_cb(a);
 8016f02:	4628      	mov	r0, r5
 8016f04:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 8016f06:	69e3      	ldr	r3, [r4, #28]
 8016f08:	4403      	add	r3, r0
 8016f0a:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
 8016f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f0e:	4418      	add	r0, r3
 8016f10:	6260      	str	r0, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8016f12:	6863      	ldr	r3, [r4, #4]
 8016f14:	b11b      	cbz	r3, 8016f1e <lv_anim_start+0x76>
 8016f16:	6820      	ldr	r0, [r4, #0]
 8016f18:	b108      	cbz	r0, 8016f1e <lv_anim_start+0x76>
 8016f1a:	69e1      	ldr	r1, [r4, #28]
 8016f1c:	4798      	blx	r3
}
 8016f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    anim_mark_list_change();
 8016f22:	f7ff be8d 	b.w	8016c40 <anim_mark_list_change>
 8016f26:	bf00      	nop
 8016f28:	2000ae50 	.word	0x2000ae50
 8016f2c:	20002b60 	.word	0x20002b60
 8016f30:	20002b5d 	.word	0x20002b5d

08016f34 <lv_anim_get>:
{
 8016f34:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016f36:	4e09      	ldr	r6, [pc, #36]	; (8016f5c <lv_anim_get+0x28>)
{
 8016f38:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016f3a:	4808      	ldr	r0, [pc, #32]	; (8016f5c <lv_anim_get+0x28>)
{
 8016f3c:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016f3e:	f000 fbe6 	bl	801770e <_lv_ll_get_head>
 8016f42:	b900      	cbnz	r0, 8016f46 <lv_anim_get+0x12>
}
 8016f44:	bd70      	pop	{r4, r5, r6, pc}
        if(a->var == var && a->exec_cb == exec_cb) {
 8016f46:	6803      	ldr	r3, [r0, #0]
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	d102      	bne.n	8016f52 <lv_anim_get+0x1e>
 8016f4c:	6843      	ldr	r3, [r0, #4]
 8016f4e:	42ab      	cmp	r3, r5
 8016f50:	d0f8      	beq.n	8016f44 <lv_anim_get+0x10>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8016f52:	4601      	mov	r1, r0
 8016f54:	4630      	mov	r0, r6
 8016f56:	f000 fbe0 	bl	801771a <_lv_ll_get_next>
 8016f5a:	e7f2      	b.n	8016f42 <lv_anim_get+0xe>
 8016f5c:	2000ae50 	.word	0x2000ae50

08016f60 <lv_anim_speed_to_time>:
    uint32_t d    = LV_ABS(start - end);
 8016f60:	1a8a      	subs	r2, r1, r2
    uint32_t time = (d * 1000) / speed;
 8016f62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint32_t d    = LV_ABS(start - end);
 8016f66:	2a00      	cmp	r2, #0
 8016f68:	bfb8      	it	lt
 8016f6a:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 8016f6c:	434a      	muls	r2, r1
 8016f6e:	fbb2 f3f0 	udiv	r3, r2, r0
    if(time == 0) {
 8016f72:	4282      	cmp	r2, r0
        time++;
 8016f74:	bf38      	it	cc
 8016f76:	3301      	addcc	r3, #1
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	4770      	bx	lr

08016f7c <lv_anim_path_ease_out>:
{
 8016f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
 8016f7e:	2300      	movs	r3, #0
 8016f80:	f44f 6580 	mov.w	r5, #1024	; 0x400
{
 8016f84:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, 1024);
 8016f86:	9500      	str	r5, [sp, #0]
 8016f88:	4619      	mov	r1, r3
 8016f8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016f8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8016f8e:	f000 fc92 	bl	80178b6 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, 1024);
 8016f92:	f240 33b6 	movw	r3, #950	; 0x3b6
 8016f96:	f44f 7261 	mov.w	r2, #900	; 0x384
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	9500      	str	r5, [sp, #0]
 8016f9e:	f000 fc09 	bl	80177b4 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 8016fa2:	69e2      	ldr	r2, [r4, #28]
 8016fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fa6:	1a9b      	subs	r3, r3, r2
 8016fa8:	4358      	muls	r0, r3
}
 8016faa:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8016fae:	b003      	add	sp, #12
 8016fb0:	bd30      	pop	{r4, r5, pc}

08016fb2 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 8016fb2:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 8016fb6:	429a      	cmp	r2, r3
        return a->end_value;
 8016fb8:	bfac      	ite	ge
 8016fba:	6a40      	ldrge	r0, [r0, #36]	; 0x24
        return a->start_value;
 8016fbc:	69c0      	ldrlt	r0, [r0, #28]
}
 8016fbe:	4770      	bx	lr

08016fc0 <lv_point_within_circle>:
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016fc0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 8016fc4:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
 8016fc6:	8849      	ldrh	r1, [r1, #2]
{
 8016fc8:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016fca:	f9b0 5000 	ldrsh.w	r5, [r0]
    lv_coord_t py = p->y - cy;
 8016fce:	8840      	ldrh	r0, [r0, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016fd0:	1b5b      	subs	r3, r3, r5
    lv_coord_t px = p->x - cx;
 8016fd2:	1b52      	subs	r2, r2, r5
    lv_coord_t py = p->y - cy;
 8016fd4:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8016fd6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016fda:	105c      	asrs	r4, r3, #1
    lv_coord_t cx = area->x1 + r;
 8016fdc:	f3c3 034f 	ubfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
 8016fe0:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
 8016fe2:	1acb      	subs	r3, r1, r3

    uint32_t r_sqrd = r * r;
 8016fe4:	4364      	muls	r4, r4
    uint32_t dist = (px * px) + (py * py);
 8016fe6:	fb13 f303 	smulbb	r3, r3, r3
 8016fea:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 8016fee:	4294      	cmp	r4, r2
 8016ff0:	bf34      	ite	cc
 8016ff2:	2000      	movcc	r0, #0
 8016ff4:	2001      	movcs	r0, #1
 8016ff6:	bd30      	pop	{r4, r5, pc}

08016ff8 <lv_area_set>:
    area_p->x2 = x2;
 8016ff8:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 8016ffa:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
 8016ffe:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8017000:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
 8017002:	80c3      	strh	r3, [r0, #6]
}
 8017004:	4770      	bx	lr

08017006 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8017006:	3901      	subs	r1, #1
 8017008:	8803      	ldrh	r3, [r0, #0]
 801700a:	4419      	add	r1, r3
 801700c:	8081      	strh	r1, [r0, #4]
}
 801700e:	4770      	bx	lr

08017010 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 8017010:	3901      	subs	r1, #1
 8017012:	8843      	ldrh	r3, [r0, #2]
 8017014:	4419      	add	r1, r3
 8017016:	80c1      	strh	r1, [r0, #6]
}
 8017018:	4770      	bx	lr

0801701a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801701a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801701e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017022:	1ad2      	subs	r2, r2, r3
 8017024:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017028:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801702c:	1a18      	subs	r0, r3, r0
 801702e:	3001      	adds	r0, #1
}
 8017030:	fb02 0000 	mla	r0, r2, r0, r0
 8017034:	4770      	bx	lr

08017036 <lv_area_increase>:
    area->x1 -= w_extra;
 8017036:	b289      	uxth	r1, r1
 8017038:	8803      	ldrh	r3, [r0, #0]
    area->y1 -= h_extra;
 801703a:	b292      	uxth	r2, r2
    area->x1 -= w_extra;
 801703c:	1a5b      	subs	r3, r3, r1
 801703e:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 8017040:	8883      	ldrh	r3, [r0, #4]
 8017042:	4419      	add	r1, r3
    area->y1 -= h_extra;
 8017044:	8843      	ldrh	r3, [r0, #2]
 8017046:	1a9b      	subs	r3, r3, r2
    area->x2 += w_extra;
 8017048:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 801704a:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 801704c:	88c3      	ldrh	r3, [r0, #6]
 801704e:	441a      	add	r2, r3
 8017050:	80c2      	strh	r2, [r0, #6]
}
 8017052:	4770      	bx	lr

08017054 <lv_area_move>:
    area->x1 += x_ofs;
 8017054:	8803      	ldrh	r3, [r0, #0]
 8017056:	fa13 f381 	uxtah	r3, r3, r1
 801705a:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 801705c:	8883      	ldrh	r3, [r0, #4]
 801705e:	fa13 f181 	uxtah	r1, r3, r1
    area->y1 += y_ofs;
 8017062:	8843      	ldrh	r3, [r0, #2]
 8017064:	fa13 f382 	uxtah	r3, r3, r2
    area->x2 += x_ofs;
 8017068:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 801706a:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 801706c:	88c3      	ldrh	r3, [r0, #6]
 801706e:	fa13 f282 	uxtah	r2, r3, r2
 8017072:	80c2      	strh	r2, [r0, #6]
}
 8017074:	4770      	bx	lr

08017076 <_lv_area_intersect>:
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8017076:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 801707a:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801707c:	f9b2 5000 	ldrsh.w	r5, [r2]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8017080:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8017084:	429d      	cmp	r5, r3
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8017086:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 801708a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801708e:	bfb8      	it	lt
 8017090:	461d      	movlt	r5, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8017092:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017096:	42a3      	cmp	r3, r4
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8017098:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 801709a:	bfb8      	it	lt
 801709c:	4623      	movlt	r3, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 801709e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80170a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80170a6:	42b4      	cmp	r4, r6
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80170a8:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80170aa:	bfa8      	it	ge
 80170ac:	4634      	movge	r4, r6
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80170ae:	428a      	cmp	r2, r1
 80170b0:	bfa8      	it	ge
 80170b2:	460a      	movge	r2, r1
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80170b4:	42a5      	cmp	r5, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80170b6:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80170b8:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80170ba:	dc04      	bgt.n	80170c6 <_lv_area_intersect+0x50>
 80170bc:	4293      	cmp	r3, r2
 80170be:	bfcc      	ite	gt
 80170c0:	2000      	movgt	r0, #0
 80170c2:	2001      	movle	r0, #1
}
 80170c4:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
 80170c6:	2000      	movs	r0, #0
 80170c8:	e7fc      	b.n	80170c4 <_lv_area_intersect+0x4e>

080170ca <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80170ca:	f9b2 3000 	ldrsh.w	r3, [r2]
{
 80170ce:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80170d0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80170d4:	42a3      	cmp	r3, r4
 80170d6:	bfa8      	it	ge
 80170d8:	4623      	movge	r3, r4
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80170da:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80170de:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80170e0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80170e4:	42a3      	cmp	r3, r4
 80170e6:	bfa8      	it	ge
 80170e8:	4623      	movge	r3, r4
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 80170ea:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80170ee:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 80170f0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80170f4:	42a3      	cmp	r3, r4
 80170f6:	bfb8      	it	lt
 80170f8:	4623      	movlt	r3, r4
 80170fa:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 80170fc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017100:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8017104:	4293      	cmp	r3, r2
 8017106:	bfb8      	it	lt
 8017108:	4613      	movlt	r3, r2
 801710a:	80c3      	strh	r3, [r0, #6]
}
 801710c:	bd10      	pop	{r4, pc}

0801710e <_lv_area_is_point_on>:
{
 801710e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8017112:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 8017116:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8017118:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 801711c:	4689      	mov	r9, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801711e:	42ab      	cmp	r3, r5
 8017120:	f2c0 8089 	blt.w	8017236 <_lv_area_is_point_on+0x128>
 8017124:	f9b0 b004 	ldrsh.w	fp, [r0, #4]
 8017128:	455b      	cmp	r3, fp
 801712a:	f300 8084 	bgt.w	8017236 <_lv_area_is_point_on+0x128>
 801712e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017132:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8017136:	4554      	cmp	r4, sl
 8017138:	db7d      	blt.n	8017236 <_lv_area_is_point_on+0x128>
 801713a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801713e:	429c      	cmp	r4, r3
 8017140:	dc79      	bgt.n	8017236 <_lv_area_is_point_on+0x128>
    if(radius <= 0) {
 8017142:	2a00      	cmp	r2, #0
 8017144:	dc03      	bgt.n	801714e <_lv_area_is_point_on+0x40>
        return true;
 8017146:	2001      	movs	r0, #1
}
 8017148:	b005      	add	sp, #20
 801714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801714e:	fa1f f68b 	uxth.w	r6, fp
    corner_area.x1 = a_p->x1;
 8017152:	f8ad 5008 	strh.w	r5, [sp, #8]
 8017156:	fa1f f885 	uxth.w	r8, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801715a:	9301      	str	r3, [sp, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801715c:	1c70      	adds	r0, r6, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801715e:	b29f      	uxth	r7, r3
 8017160:	fa1f f48a 	uxth.w	r4, sl
    corner_area.y1 = a_p->y1;
 8017164:	f8ad a00a 	strh.w	sl, [sp, #10]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017168:	eba0 0008 	sub.w	r0, r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801716c:	46a4      	mov	ip, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801716e:	f3c0 35c0 	ubfx	r5, r0, #15, #1
 8017172:	fa05 f580 	sxtah	r5, r5, r0
 8017176:	1c78      	adds	r0, r7, #1
 8017178:	1b00      	subs	r0, r0, r4
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801717a:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801717e:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MIN(w, h);
 8017182:	106c      	asrs	r4, r5, #1
 8017184:	1040      	asrs	r0, r0, #1
    corner_area.x2 = a_p->x1 + radius;
 8017186:	4284      	cmp	r4, r0
 8017188:	bfa8      	it	ge
 801718a:	4604      	movge	r4, r0
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801718c:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x1 + radius;
 801718e:	42a2      	cmp	r2, r4
 8017190:	bfa8      	it	ge
 8017192:	4622      	movge	r2, r4
    corner_area.y2 = a_p->y1 + radius;
 8017194:	fa1c f482 	uxtah	r4, ip, r2
    corner_area.x2 = a_p->x1 + radius;
 8017198:	fa18 f882 	uxtah	r8, r8, r2
 801719c:	b295      	uxth	r5, r2
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801719e:	2200      	movs	r2, #0
    corner_area.y2 = a_p->y1 + radius;
 80171a0:	b2a3      	uxth	r3, r4
    corner_area.x2 = a_p->x1 + radius;
 80171a2:	fa1f f888 	uxth.w	r8, r8
    corner_area.y2 = a_p->y1 + radius;
 80171a6:	b224      	sxth	r4, r4
 80171a8:	9300      	str	r3, [sp, #0]
    corner_area.x2 = a_p->x1 + radius;
 80171aa:	f8ad 800c 	strh.w	r8, [sp, #12]
    corner_area.y2 = a_p->y1 + radius;
 80171ae:	f8ad 400e 	strh.w	r4, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80171b2:	f7ff ffac 	bl	801710e <_lv_area_is_point_on>
 80171b6:	9b01      	ldr	r3, [sp, #4]
 80171b8:	4602      	mov	r2, r0
 80171ba:	b138      	cbz	r0, 80171cc <_lv_area_is_point_on+0xbe>
        corner_area.x2 += radius;
 80171bc:	44a8      	add	r8, r5
 80171be:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y2 += radius;
 80171c2:	9b00      	ldr	r3, [sp, #0]
 80171c4:	441d      	add	r5, r3
 80171c6:	f8ad 500e 	strh.w	r5, [sp, #14]
 80171ca:	e011      	b.n	80171f0 <_lv_area_is_point_on+0xe2>
    corner_area.y1 = a_p->y2 - radius;
 80171cc:	1b7f      	subs	r7, r7, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80171ce:	4649      	mov	r1, r9
 80171d0:	a802      	add	r0, sp, #8
    corner_area.y2 = a_p->y2;
 80171d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    corner_area.y1 = a_p->y2 - radius;
 80171d6:	b2bf      	uxth	r7, r7
 80171d8:	f8ad 700a 	strh.w	r7, [sp, #10]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80171dc:	f7ff ff97 	bl	801710e <_lv_area_is_point_on>
 80171e0:	4602      	mov	r2, r0
 80171e2:	b150      	cbz	r0, 80171fa <_lv_area_is_point_on+0xec>
        corner_area.x2 += radius;
 80171e4:	44a8      	add	r8, r5
 80171e6:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y1 -= radius;
 80171ea:	1b7d      	subs	r5, r7, r5
 80171ec:	f8ad 500a 	strh.w	r5, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 80171f0:	4649      	mov	r1, r9
 80171f2:	a802      	add	r0, sp, #8
 80171f4:	f7ff fee4 	bl	8016fc0 <lv_point_within_circle>
 80171f8:	e7a6      	b.n	8017148 <_lv_area_is_point_on+0x3a>
    corner_area.x1 = a_p->x2 - radius;
 80171fa:	1b76      	subs	r6, r6, r5
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80171fc:	4649      	mov	r1, r9
 80171fe:	a802      	add	r0, sp, #8
    corner_area.x2 = a_p->x2;
 8017200:	f8ad b00c 	strh.w	fp, [sp, #12]
    corner_area.x1 = a_p->x2 - radius;
 8017204:	b2b6      	uxth	r6, r6
 8017206:	f8ad 6008 	strh.w	r6, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801720a:	f7ff ff80 	bl	801710e <_lv_area_is_point_on>
 801720e:	4602      	mov	r2, r0
 8017210:	b118      	cbz	r0, 801721a <_lv_area_is_point_on+0x10c>
        corner_area.x1 -= radius;
 8017212:	1b76      	subs	r6, r6, r5
 8017214:	f8ad 6008 	strh.w	r6, [sp, #8]
 8017218:	e7e7      	b.n	80171ea <_lv_area_is_point_on+0xdc>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801721a:	4649      	mov	r1, r9
 801721c:	a802      	add	r0, sp, #8
    corner_area.y1 = a_p->y1;
 801721e:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 8017222:	f8ad 400e 	strh.w	r4, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8017226:	f7ff ff72 	bl	801710e <_lv_area_is_point_on>
 801722a:	2800      	cmp	r0, #0
 801722c:	d08b      	beq.n	8017146 <_lv_area_is_point_on+0x38>
        corner_area.x1 -= radius;
 801722e:	1b76      	subs	r6, r6, r5
 8017230:	f8ad 6008 	strh.w	r6, [sp, #8]
 8017234:	e7c5      	b.n	80171c2 <_lv_area_is_point_on+0xb4>
        return false;
 8017236:	2000      	movs	r0, #0
 8017238:	e786      	b.n	8017148 <_lv_area_is_point_on+0x3a>

0801723a <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801723a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801723e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017242:	429a      	cmp	r2, r3
 8017244:	dc14      	bgt.n	8017270 <_lv_area_is_on+0x36>
 8017246:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801724a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801724e:	429a      	cmp	r2, r3
 8017250:	db0e      	blt.n	8017270 <_lv_area_is_on+0x36>
 8017252:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017256:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801725a:	429a      	cmp	r2, r3
 801725c:	dc08      	bgt.n	8017270 <_lv_area_is_on+0x36>
 801725e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017262:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017266:	4298      	cmp	r0, r3
 8017268:	bfb4      	ite	lt
 801726a:	2000      	movlt	r0, #0
 801726c:	2001      	movge	r0, #1
 801726e:	4770      	bx	lr
        return false;
 8017270:	2000      	movs	r0, #0
}
 8017272:	4770      	bx	lr

08017274 <_lv_area_is_in>:
{
 8017274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8017278:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 801727c:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801727e:	f9b0 7000 	ldrsh.w	r7, [r0]
{
 8017282:	4615      	mov	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8017284:	42bb      	cmp	r3, r7
 8017286:	dd03      	ble.n	8017290 <_lv_area_is_in+0x1c>
    if(!is_in) return false;
 8017288:	2000      	movs	r0, #0
}
 801728a:	b002      	add	sp, #8
 801728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8017290:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017294:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017298:	4299      	cmp	r1, r3
 801729a:	dcf5      	bgt.n	8017288 <_lv_area_is_in+0x14>
 801729c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80172a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80172a4:	42b1      	cmp	r1, r6
 80172a6:	dbef      	blt.n	8017288 <_lv_area_is_in+0x14>
       ain_p->y2 <= aholder_p->y2) {
 80172a8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80172ac:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80172b0:	4541      	cmp	r1, r8
 80172b2:	dbe9      	blt.n	8017288 <_lv_area_is_in+0x14>
    if(radius == 0) return true;
 80172b4:	b32a      	cbz	r2, 8017302 <_lv_area_is_in+0x8e>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172b6:	a901      	add	r1, sp, #4
 80172b8:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 80172ba:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 80172be:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172c2:	f7ff ff24 	bl	801710e <_lv_area_is_point_on>
 80172c6:	2800      	cmp	r0, #0
 80172c8:	d0de      	beq.n	8017288 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172ca:	462a      	mov	r2, r5
 80172cc:	a901      	add	r1, sp, #4
 80172ce:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 80172d0:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172d4:	f7ff ff1b 	bl	801710e <_lv_area_is_point_on>
 80172d8:	2800      	cmp	r0, #0
 80172da:	d0d5      	beq.n	8017288 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172dc:	462a      	mov	r2, r5
 80172de:	a901      	add	r1, sp, #4
 80172e0:	4620      	mov	r0, r4
    p.x = ain_p->x1;
 80172e2:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y2;
 80172e6:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172ea:	f7ff ff10 	bl	801710e <_lv_area_is_point_on>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d0ca      	beq.n	8017288 <_lv_area_is_in+0x14>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172f2:	462a      	mov	r2, r5
 80172f4:	a901      	add	r1, sp, #4
 80172f6:	4620      	mov	r0, r4
    p.x = ain_p->x2;
 80172f8:	f8ad 6004 	strh.w	r6, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80172fc:	f7ff ff07 	bl	801710e <_lv_area_is_point_on>
 8017300:	e7c3      	b.n	801728a <_lv_area_is_in+0x16>
    if(radius == 0) return true;
 8017302:	2001      	movs	r0, #1
 8017304:	e7c1      	b.n	801728a <_lv_area_is_in+0x16>

08017306 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8017306:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017308:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801730c:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8017310:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8017314:	f248 0681 	movw	r6, #32897	; 0x8081
 8017318:	436c      	muls	r4, r5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801731a:	f001 071f 	and.w	r7, r1, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801731e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8017322:	fb03 4302 	mla	r3, r3, r2, r4
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017326:	436f      	muls	r7, r5
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 8017328:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801732a:	434d      	muls	r5, r1
    LV_COLOR_SET_G(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
 801732c:	4373      	muls	r3, r6
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801732e:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017332:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017336:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 801733a:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801733e:	fb00 5202 	mla	r2, r0, r2, r5
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017342:	3380      	adds	r3, #128	; 0x80
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017344:	3280      	adds	r2, #128	; 0x80
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
 8017346:	4373      	muls	r3, r6
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 8017348:	4372      	muls	r2, r6
    return ret;
 801734a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
 801734e:	0dd0      	lsrs	r0, r2, #23
    return ret;
 8017350:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
}
 8017354:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8017358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801735a <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
 801735a:	0783      	lsls	r3, r0, #30
{
 801735c:	b510      	push	{r4, lr}
 801735e:	b28c      	uxth	r4, r1
        *buf = color;
        buf++;
        px_num--;
 8017360:	bf1c      	itt	ne
 8017362:	f102 32ff 	addne.w	r2, r2, #4294967295
        *buf = color;
 8017366:	f820 1b02 	strhne.w	r1, [r0], #2
    }

    uint32_t c32 = color.full + (color.full << 16);
 801736a:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 801736e:	2a10      	cmp	r2, #16
 8017370:	4601      	mov	r1, r0
 8017372:	f100 0020 	add.w	r0, r0, #32
 8017376:	d804      	bhi.n	8017382 <lv_color_fill+0x28>
 8017378:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 801737c:	4291      	cmp	r1, r2
 801737e:	d10a      	bne.n	8017396 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
 8017380:	bd10      	pop	{r4, pc}
        px_num -= 16;
 8017382:	3a10      	subs	r2, #16
        *buf32 = c32;
 8017384:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
 8017388:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
 801738c:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
 8017390:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
 8017394:	e7eb      	b.n	801736e <lv_color_fill+0x14>
        *buf = color;
 8017396:	f821 4b02 	strh.w	r4, [r1], #2
        px_num --;
 801739a:	e7ef      	b.n	801737c <lv_color_fill+0x22>

0801739c <lv_color_darken>:
{
    return lv_color_mix(lv_color_white(), c, lvl);
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 801739c:	460a      	mov	r2, r1
    return lv_color_mix(lv_color_black(), c, lvl);
 801739e:	4601      	mov	r1, r0
 80173a0:	f04f 0000 	mov.w	r0, #0
 80173a4:	f7ff bfaf 	b.w	8017306 <lv_color_mix>

080173a8 <lv_color_hsv_to_rgb>:
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
    h = (uint32_t)((uint32_t)h * 255) / 360;
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80173a8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80173ac:	2364      	movs	r3, #100	; 0x64
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80173ae:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
{
 80173b2:	b530      	push	{r4, r5, lr}
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80173b4:	b28c      	uxth	r4, r1
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80173b6:	b291      	uxth	r1, r2
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80173b8:	fbb4 f4f3 	udiv	r4, r4, r3
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80173bc:	fbb1 f1f3 	udiv	r1, r1, r3

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
 80173c0:	f014 02ff 	ands.w	r2, r4, #255	; 0xff
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80173c4:	b2c9      	uxtb	r1, r1
    if(s == 0) {
 80173c6:	d10a      	bne.n	80173de <lv_color_hsv_to_rgb+0x36>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80173c8:	08ca      	lsrs	r2, r1, #3
 80173ca:	f04f 0000 	mov.w	r0, #0
 80173ce:	0889      	lsrs	r1, r1, #2
 80173d0:	f362 0004 	bfi	r0, r2, #0, #5
 80173d4:	f361 104a 	bfi	r0, r1, #5, #6
 80173d8:	f362 20cf 	bfi	r0, r2, #11, #5
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
}
 80173dc:	bd30      	pop	{r4, r5, pc}
    h = (uint32_t)((uint32_t)h * 255) / 360;
 80173de:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80173e2:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80173e6:	fbb0 f0f3 	udiv	r0, r0, r3
    region    = h / 43;
 80173ea:	232b      	movs	r3, #43	; 0x2b
 80173ec:	b284      	uxth	r4, r0
 80173ee:	fbb4 f4f3 	udiv	r4, r4, r3
    remainder = (h - (region * 43)) * 6;
 80173f2:	f06f 032a 	mvn.w	r3, #42	; 0x2a
    region    = h / 43;
 80173f6:	b2e4      	uxtb	r4, r4
    remainder = (h - (region * 43)) * 6;
 80173f8:	fb03 0304 	mla	r3, r3, r4, r0
    p = (v * (255 - s)) >> 8;
 80173fc:	f1c2 00ff 	rsb	r0, r2, #255	; 0xff
    remainder = (h - (region * 43)) * 6;
 8017400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    p = (v * (255 - s)) >> 8;
 8017404:	4348      	muls	r0, r1
    remainder = (h - (region * 43)) * 6;
 8017406:	005b      	lsls	r3, r3, #1
    p = (v * (255 - s)) >> 8;
 8017408:	f3c0 2007 	ubfx	r0, r0, #8, #8
    remainder = (h - (region * 43)) * 6;
 801740c:	b2db      	uxtb	r3, r3
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 801740e:	fb12 f503 	smulbb	r5, r2, r3
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8017412:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8017416:	4353      	muls	r3, r2
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8017418:	122d      	asrs	r5, r5, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 801741a:	121b      	asrs	r3, r3, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 801741c:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8017420:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8017424:	434d      	muls	r5, r1
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8017426:	434b      	muls	r3, r1
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8017428:	f3c5 2507 	ubfx	r5, r5, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 801742c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    switch(region) {
 8017430:	2c04      	cmp	r4, #4
 8017432:	d81f      	bhi.n	8017474 <lv_color_hsv_to_rgb+0xcc>
 8017434:	e8df f004 	tbb	[pc, r4]
 8017438:	15100305 	.word	0x15100305
 801743c:	1a          	.byte	0x1a
 801743d:	00          	.byte	0x00
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 801743e:	460b      	mov	r3, r1
 8017440:	4629      	mov	r1, r5
    return result;
 8017442:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8017446:	f3c3 0387 	ubfx	r3, r3, #2, #8
 801744a:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 801744e:	f3c1 00c7 	ubfx	r0, r1, #3, #8
 8017452:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8017456:	e7c1      	b.n	80173dc <lv_color_hsv_to_rgb+0x34>
            break;
 8017458:	460a      	mov	r2, r1
            r = p;
 801745a:	4601      	mov	r1, r0
            b = t;
 801745c:	4618      	mov	r0, r3
            g = v;
 801745e:	4613      	mov	r3, r2
            break;
 8017460:	e7ef      	b.n	8017442 <lv_color_hsv_to_rgb+0x9a>
            break;
 8017462:	460a      	mov	r2, r1
            g = q;
 8017464:	462b      	mov	r3, r5
            r = p;
 8017466:	4601      	mov	r1, r0
            b = v;
 8017468:	4610      	mov	r0, r2
            break;
 801746a:	e7ea      	b.n	8017442 <lv_color_hsv_to_rgb+0x9a>
 801746c:	460a      	mov	r2, r1
            r = t;
 801746e:	4619      	mov	r1, r3
            g = p;
 8017470:	4603      	mov	r3, r0
 8017472:	e7f9      	b.n	8017468 <lv_color_hsv_to_rgb+0xc0>
            g = p;
 8017474:	4603      	mov	r3, r0
            b = q;
 8017476:	4628      	mov	r0, r5
            break;
 8017478:	e7e3      	b.n	8017442 <lv_color_hsv_to_rgb+0x9a>
	...

0801747c <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 801747c:	2812      	cmp	r0, #18
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 801747e:	bf96      	itet	ls
 8017480:	4b02      	ldrls	r3, [pc, #8]	; (801748c <lv_palette_main+0x10>)
 8017482:	2000      	movhi	r0, #0
 8017484:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 8017488:	4770      	bx	lr
 801748a:	bf00      	nop
 801748c:	08029590 	.word	0x08029590

08017490 <lv_palette_lighten>:
            {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
            {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
            {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

     if(p >= _LV_PALETTE_LAST) {
 8017490:	2812      	cmp	r0, #18
 8017492:	d902      	bls.n	801749a <lv_palette_lighten+0xa>
 8017494:	f04f 0000 	mov.w	r0, #0
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 8017498:	4770      	bx	lr
         LV_LOG_WARN("Invalid palette: %d", p);
         return lv_color_black();
     }

     if(lvl == 0 || lvl > 5) {
 801749a:	3901      	subs	r1, #1
 801749c:	b2c9      	uxtb	r1, r1
 801749e:	2904      	cmp	r1, #4
 80174a0:	d8f8      	bhi.n	8017494 <lv_palette_lighten+0x4>
         return lv_color_black();
     }

     lvl--;

     return colors[p][lvl];
 80174a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80174a6:	4b02      	ldr	r3, [pc, #8]	; (80174b0 <lv_palette_lighten+0x20>)
 80174a8:	4408      	add	r0, r1
 80174aa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80174ae:	4770      	bx	lr
 80174b0:	080295b6 	.word	0x080295b6

080174b4 <lv_palette_darken>:
            {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
            {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
            {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

     if(p >= _LV_PALETTE_LAST) {
 80174b4:	2812      	cmp	r0, #18
 80174b6:	d902      	bls.n	80174be <lv_palette_darken+0xa>
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80174b8:	f04f 0000 	mov.w	r0, #0
static inline lv_color_t lv_color_black(void) { return lv_color_make(0x00, 0x0, 0x00);}
 80174bc:	4770      	bx	lr
         LV_LOG_WARN("Invalid palette: %d", p);
         return lv_color_black();
     }

     if(lvl == 0 || lvl > 4) {
 80174be:	3901      	subs	r1, #1
 80174c0:	b2c9      	uxtb	r1, r1
 80174c2:	2903      	cmp	r1, #3
 80174c4:	d8f8      	bhi.n	80174b8 <lv_palette_darken+0x4>
         return lv_color_black();
     }

     lvl--;

     return colors[p][lvl];
 80174c6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80174ca:	4b02      	ldr	r3, [pc, #8]	; (80174d4 <lv_palette_darken+0x20>)
 80174cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	08029674 	.word	0x08029674

080174d8 <_lv_fs_init>:
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 80174d8:	2104      	movs	r1, #4
 80174da:	4801      	ldr	r0, [pc, #4]	; (80174e0 <_lv_fs_init+0x8>)
 80174dc:	f000 b89d 	b.w	801761a <_lv_ll_init>
 80174e0:	2000aedc 	.word	0x2000aedc

080174e4 <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 80174e4:	b510      	push	{r4, lr}
 80174e6:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 80174e8:	6840      	ldr	r0, [r0, #4]
 80174ea:	b138      	cbz	r0, 80174fc <lv_fs_close+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 80174ec:	68c3      	ldr	r3, [r0, #12]
 80174ee:	b13b      	cbz	r3, 8017500 <lv_fs_close+0x1c>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80174f0:	6821      	ldr	r1, [r4, #0]
 80174f2:	4798      	blx	r3

    file_p->file_d = NULL;
 80174f4:	2300      	movs	r3, #0
    file_p->drv    = NULL;
 80174f6:	e9c4 3300 	strd	r3, r3, [r4]

    return res;
}
 80174fa:	bd10      	pop	{r4, pc}
        return LV_FS_RES_INV_PARAM;
 80174fc:	200b      	movs	r0, #11
 80174fe:	e7fc      	b.n	80174fa <lv_fs_close+0x16>
        return LV_FS_RES_NOT_IMP;
 8017500:	2009      	movs	r0, #9
 8017502:	e7fa      	b.n	80174fa <lv_fs_close+0x16>

08017504 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8017504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(br != NULL) *br = 0;
 8017506:	461c      	mov	r4, r3
 8017508:	b10b      	cbz	r3, 801750e <lv_fs_read+0xa>
 801750a:	2300      	movs	r3, #0
 801750c:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801750e:	6845      	ldr	r5, [r0, #4]
 8017510:	b17d      	cbz	r5, 8017532 <lv_fs_read+0x2e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8017512:	692e      	ldr	r6, [r5, #16]
 8017514:	b17e      	cbz	r6, 8017536 <lv_fs_read+0x32>

    uint32_t br_tmp = 0;
 8017516:	2300      	movs	r3, #0
 8017518:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801751a:	ab03      	add	r3, sp, #12
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	4613      	mov	r3, r2
 8017520:	460a      	mov	r2, r1
 8017522:	6801      	ldr	r1, [r0, #0]
 8017524:	4628      	mov	r0, r5
 8017526:	47b0      	blx	r6
    if(br != NULL) *br = br_tmp;
 8017528:	b10c      	cbz	r4, 801752e <lv_fs_read+0x2a>
 801752a:	9b03      	ldr	r3, [sp, #12]
 801752c:	6023      	str	r3, [r4, #0]

    return res;
}
 801752e:	b004      	add	sp, #16
 8017530:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8017532:	200b      	movs	r0, #11
 8017534:	e7fb      	b.n	801752e <lv_fs_read+0x2a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8017536:	2009      	movs	r0, #9
 8017538:	e7f9      	b.n	801752e <lv_fs_read+0x2a>

0801753a <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 801753a:	b430      	push	{r4, r5}
    if(file_p->drv == NULL) {
 801753c:	6844      	ldr	r4, [r0, #4]
{
 801753e:	4613      	mov	r3, r2
    if(file_p->drv == NULL) {
 8017540:	b13c      	cbz	r4, 8017552 <lv_fs_seek+0x18>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 8017542:	69a5      	ldr	r5, [r4, #24]
 8017544:	b145      	cbz	r5, 8017558 <lv_fs_seek+0x1e>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8017546:	460a      	mov	r2, r1
 8017548:	46ac      	mov	ip, r5
 801754a:	6801      	ldr	r1, [r0, #0]
 801754c:	4620      	mov	r0, r4

    return res;
}
 801754e:	bc30      	pop	{r4, r5}
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8017550:	4760      	bx	ip
        return LV_FS_RES_INV_PARAM;
 8017552:	200b      	movs	r0, #11
}
 8017554:	bc30      	pop	{r4, r5}
 8017556:	4770      	bx	lr
        return LV_FS_RES_NOT_IMP;
 8017558:	2009      	movs	r0, #9
 801755a:	e7fb      	b.n	8017554 <lv_fs_seek+0x1a>

0801755c <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801755c:	b538      	push	{r3, r4, r5, lr}
 801755e:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8017560:	4808      	ldr	r0, [pc, #32]	; (8017584 <lv_fs_get_drv+0x28>)
 8017562:	f000 f8d4 	bl	801770e <_lv_ll_get_head>
 8017566:	4d07      	ldr	r5, [pc, #28]	; (8017584 <lv_fs_get_drv+0x28>)
 8017568:	4601      	mov	r1, r0
 801756a:	b909      	cbnz	r1, 8017570 <lv_fs_get_drv+0x14>
        if((*drv)->letter == letter) {
            return *drv;
        }
    }

    return NULL;
 801756c:	4608      	mov	r0, r1
}
 801756e:	bd38      	pop	{r3, r4, r5, pc}
        if((*drv)->letter == letter) {
 8017570:	6808      	ldr	r0, [r1, #0]
 8017572:	7803      	ldrb	r3, [r0, #0]
 8017574:	42a3      	cmp	r3, r4
 8017576:	d0fa      	beq.n	801756e <lv_fs_get_drv+0x12>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8017578:	4628      	mov	r0, r5
 801757a:	f000 f8ce 	bl	801771a <_lv_ll_get_next>
 801757e:	4601      	mov	r1, r0
 8017580:	e7f3      	b.n	801756a <lv_fs_get_drv+0xe>
 8017582:	bf00      	nop
 8017584:	2000aedc 	.word	0x2000aedc

08017588 <lv_fs_open>:
{
 8017588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758a:	4606      	mov	r6, r0
 801758c:	4617      	mov	r7, r2
    if(path == NULL) {
 801758e:	460c      	mov	r4, r1
 8017590:	b1f1      	cbz	r1, 80175d0 <lv_fs_open+0x48>
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8017592:	7808      	ldrb	r0, [r1, #0]
 8017594:	f7ff ffe2 	bl	801755c <lv_fs_get_drv>
    if(drv == NULL) {
 8017598:	4605      	mov	r5, r0
 801759a:	b1d8      	cbz	r0, 80175d4 <lv_fs_open+0x4c>
    if(drv->ready_cb) {
 801759c:	6843      	ldr	r3, [r0, #4]
 801759e:	b91b      	cbnz	r3, 80175a8 <lv_fs_open+0x20>
    if(drv->open_cb == NULL) {
 80175a0:	68ab      	ldr	r3, [r5, #8]
 80175a2:	b933      	cbnz	r3, 80175b2 <lv_fs_open+0x2a>
        return LV_FS_RES_NOT_IMP;
 80175a4:	2009      	movs	r0, #9
 80175a6:	e003      	b.n	80175b0 <lv_fs_open+0x28>
        if(drv->ready_cb(drv) == false) {
 80175a8:	4798      	blx	r3
 80175aa:	2800      	cmp	r0, #0
 80175ac:	d1f8      	bne.n	80175a0 <lv_fs_open+0x18>
            return LV_FS_RES_HW_ERR;
 80175ae:	2001      	movs	r0, #1
}
 80175b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 80175b2:	7862      	ldrb	r2, [r4, #1]
    void *file_d = drv->open_cb(drv, real_path, mode);
 80175b4:	4628      	mov	r0, r5
    if(*path == ':') path++;
 80175b6:	2a3a      	cmp	r2, #58	; 0x3a
    void *file_d = drv->open_cb(drv, real_path, mode);
 80175b8:	463a      	mov	r2, r7
    path++; /*Ignore the driver letter*/
 80175ba:	bf14      	ite	ne
 80175bc:	1c61      	addne	r1, r4, #1
    if(*path == ':') path++;
 80175be:	1ca1      	addeq	r1, r4, #2
    void *file_d = drv->open_cb(drv, real_path, mode);
 80175c0:	4798      	blx	r3
    if(file_d == NULL || file_d == (void*)(-1)) {
 80175c2:	1e43      	subs	r3, r0, #1
 80175c4:	3303      	adds	r3, #3
 80175c6:	d807      	bhi.n	80175d8 <lv_fs_open+0x50>
    file_p->file_d = file_d;
 80175c8:	e9c6 0500 	strd	r0, r5, [r6]
    return LV_FS_RES_OK;
 80175cc:	2000      	movs	r0, #0
 80175ce:	e7ef      	b.n	80175b0 <lv_fs_open+0x28>
        return LV_FS_RES_INV_PARAM;
 80175d0:	200b      	movs	r0, #11
 80175d2:	e7ed      	b.n	80175b0 <lv_fs_open+0x28>
        return LV_FS_RES_NOT_EX;
 80175d4:	2003      	movs	r0, #3
 80175d6:	e7eb      	b.n	80175b0 <lv_fs_open+0x28>
        return LV_FS_RES_UNKNOWN;
 80175d8:	200c      	movs	r0, #12
 80175da:	e7e9      	b.n	80175b0 <lv_fs_open+0x28>

080175dc <lv_fs_get_ext>:
{
 80175dc:	b510      	push	{r4, lr}
 80175de:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 80175e0:	f7e8 fe20 	bl	8000224 <strlen>
 80175e4:	b908      	cbnz	r0, 80175ea <lv_fs_get_ext+0xe>
            return ""; /*No extension if a '\' or '/' found*/
 80175e6:	4807      	ldr	r0, [pc, #28]	; (8017604 <lv_fs_get_ext+0x28>)
 80175e8:	e004      	b.n	80175f4 <lv_fs_get_ext+0x18>
        if(fn[i] == '.') {
 80175ea:	5c23      	ldrb	r3, [r4, r0]
 80175ec:	2b2e      	cmp	r3, #46	; 0x2e
 80175ee:	d102      	bne.n	80175f6 <lv_fs_get_ext+0x1a>
            return &fn[i + 1];
 80175f0:	3001      	adds	r0, #1
 80175f2:	4420      	add	r0, r4
}
 80175f4:	bd10      	pop	{r4, pc}
        else if(fn[i] == '/' || fn[i] == '\\') {
 80175f6:	2b2f      	cmp	r3, #47	; 0x2f
 80175f8:	d0f5      	beq.n	80175e6 <lv_fs_get_ext+0xa>
 80175fa:	2b5c      	cmp	r3, #92	; 0x5c
 80175fc:	d0f3      	beq.n	80175e6 <lv_fs_get_ext+0xa>
    for(i = strlen(fn); i > 0; i--) {
 80175fe:	3801      	subs	r0, #1
 8017600:	e7f0      	b.n	80175e4 <lv_fs_get_ext+0x8>
 8017602:	bf00      	nop
 8017604:	08029f9b 	.word	0x08029f9b

08017608 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8017608:	b109      	cbz	r1, 801760e <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 801760a:	6803      	ldr	r3, [r0, #0]
 801760c:	50ca      	str	r2, [r1, r3]
}
 801760e:	4770      	bx	lr

08017610 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8017610:	b111      	cbz	r1, 8017618 <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8017612:	6803      	ldr	r3, [r0, #0]
 8017614:	4419      	add	r1, r3
 8017616:	604a      	str	r2, [r1, #4]
}
 8017618:	4770      	bx	lr

0801761a <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
 801761a:	3103      	adds	r1, #3
    ll_p->head = NULL;
 801761c:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
 801761e:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
 8017622:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
 8017626:	6001      	str	r1, [r0, #0]
}
 8017628:	4770      	bx	lr

0801762a <_lv_ll_ins_head>:
{
 801762a:	b538      	push	{r3, r4, r5, lr}
 801762c:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 801762e:	6800      	ldr	r0, [r0, #0]
 8017630:	3008      	adds	r0, #8
 8017632:	f000 faf1 	bl	8017c18 <lv_mem_alloc>
    if(n_new != NULL) {
 8017636:	4605      	mov	r5, r0
 8017638:	b180      	cbz	r0, 801765c <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801763a:	4601      	mov	r1, r0
 801763c:	2200      	movs	r2, #0
 801763e:	4620      	mov	r0, r4
 8017640:	f7ff ffe2 	bl	8017608 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8017644:	6862      	ldr	r2, [r4, #4]
 8017646:	f7ff ffe3 	bl	8017610 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801764a:	6861      	ldr	r1, [r4, #4]
 801764c:	b111      	cbz	r1, 8017654 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801764e:	462a      	mov	r2, r5
 8017650:	f7ff ffda 	bl	8017608 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8017654:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8017656:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8017658:	b903      	cbnz	r3, 801765c <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
 801765a:	60a5      	str	r5, [r4, #8]
}
 801765c:	4628      	mov	r0, r5
 801765e:	bd38      	pop	{r3, r4, r5, pc}

08017660 <_lv_ll_ins_tail>:
{
 8017660:	b538      	push	{r3, r4, r5, lr}
 8017662:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8017664:	6800      	ldr	r0, [r0, #0]
 8017666:	3008      	adds	r0, #8
 8017668:	f000 fad6 	bl	8017c18 <lv_mem_alloc>
    if(n_new != NULL) {
 801766c:	4605      	mov	r5, r0
 801766e:	b188      	cbz	r0, 8017694 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8017670:	4601      	mov	r1, r0
 8017672:	2200      	movs	r2, #0
 8017674:	4620      	mov	r0, r4
 8017676:	f7ff ffcb 	bl	8017610 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801767a:	4629      	mov	r1, r5
 801767c:	68a2      	ldr	r2, [r4, #8]
 801767e:	f7ff ffc3 	bl	8017608 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8017682:	68a1      	ldr	r1, [r4, #8]
 8017684:	b111      	cbz	r1, 801768c <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
 8017686:	462a      	mov	r2, r5
 8017688:	f7ff ffc2 	bl	8017610 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801768c:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801768e:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8017690:	b903      	cbnz	r3, 8017694 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
 8017692:	6065      	str	r5, [r4, #4]
}
 8017694:	4628      	mov	r0, r5
 8017696:	bd38      	pop	{r3, r4, r5, pc}

08017698 <_lv_ll_remove>:
{
 8017698:	460b      	mov	r3, r1
 801769a:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return;
 801769c:	b140      	cbz	r0, 80176b0 <_lv_ll_remove+0x18>
    if(_lv_ll_get_head(ll_p) == node_p) {
 801769e:	e9d0 1200 	ldrd	r1, r2, [r0]
 80176a2:	4293      	cmp	r3, r2
 80176a4:	d10a      	bne.n	80176bc <_lv_ll_remove+0x24>
    return *((lv_ll_node_t **)n_act_d);
 80176a6:	440b      	add	r3, r1
 80176a8:	6859      	ldr	r1, [r3, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 80176aa:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 80176ac:	b909      	cbnz	r1, 80176b2 <_lv_ll_remove+0x1a>
            ll_p->tail = NULL;
 80176ae:	6081      	str	r1, [r0, #8]
}
 80176b0:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
 80176b2:	2200      	movs	r2, #0
}
 80176b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
 80176b8:	f7ff bfa6 	b.w	8017608 <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 80176bc:	6882      	ldr	r2, [r0, #8]
 80176be:	585d      	ldr	r5, [r3, r1]
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d109      	bne.n	80176d8 <_lv_ll_remove+0x40>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 80176c4:	6085      	str	r5, [r0, #8]
        if(ll_p->tail == NULL) {
 80176c6:	b90d      	cbnz	r5, 80176cc <_lv_ll_remove+0x34>
            ll_p->head = NULL;
 80176c8:	6045      	str	r5, [r0, #4]
 80176ca:	e7f1      	b.n	80176b0 <_lv_ll_remove+0x18>
            node_set_next(ll_p, ll_p->tail, NULL);
 80176cc:	4629      	mov	r1, r5
 80176ce:	2200      	movs	r2, #0
}
 80176d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
 80176d4:	f7ff bf9c 	b.w	8017610 <node_set_next.isra.0>
    return *((lv_ll_node_t **)n_act_d);
 80176d8:	440b      	add	r3, r1
        node_set_next(ll_p, n_prev, n_next);
 80176da:	4629      	mov	r1, r5
    return *((lv_ll_node_t **)n_act_d);
 80176dc:	685e      	ldr	r6, [r3, #4]
        node_set_next(ll_p, n_prev, n_next);
 80176de:	4632      	mov	r2, r6
 80176e0:	f7ff ff96 	bl	8017610 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
 80176e4:	462a      	mov	r2, r5
 80176e6:	4631      	mov	r1, r6
 80176e8:	e7e4      	b.n	80176b4 <_lv_ll_remove+0x1c>

080176ea <_lv_ll_clear>:
{
 80176ea:	b570      	push	{r4, r5, r6, lr}
    if(ll_p == NULL) return NULL;
 80176ec:	4604      	mov	r4, r0
 80176ee:	b108      	cbz	r0, 80176f4 <_lv_ll_clear+0xa>
    return ll_p->head;
 80176f0:	6845      	ldr	r5, [r0, #4]
    while(i != NULL) {
 80176f2:	b905      	cbnz	r5, 80176f6 <_lv_ll_clear+0xc>
}
 80176f4:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 80176f6:	6823      	ldr	r3, [r4, #0]
        _lv_ll_remove(ll_p, i);
 80176f8:	4629      	mov	r1, r5
 80176fa:	4620      	mov	r0, r4
    return *((lv_ll_node_t **)n_act_d);
 80176fc:	442b      	add	r3, r5
 80176fe:	685e      	ldr	r6, [r3, #4]
        _lv_ll_remove(ll_p, i);
 8017700:	f7ff ffca 	bl	8017698 <_lv_ll_remove>
        lv_mem_free(i);
 8017704:	4628      	mov	r0, r5
 8017706:	f000 f905 	bl	8017914 <lv_mem_free>
        i = i_next;
 801770a:	4635      	mov	r5, r6
 801770c:	e7f1      	b.n	80176f2 <_lv_ll_clear+0x8>

0801770e <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 801770e:	b100      	cbz	r0, 8017712 <_lv_ll_get_head+0x4>
    return ll_p->head;
 8017710:	6840      	ldr	r0, [r0, #4]
}
 8017712:	4770      	bx	lr

08017714 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8017714:	b100      	cbz	r0, 8017718 <_lv_ll_get_tail+0x4>
    return ll_p->tail;
 8017716:	6880      	ldr	r0, [r0, #8]
}
 8017718:	4770      	bx	lr

0801771a <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 801771a:	6803      	ldr	r3, [r0, #0]
 801771c:	4419      	add	r1, r3
}
 801771e:	6848      	ldr	r0, [r1, #4]
 8017720:	4770      	bx	lr

08017722 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8017722:	6803      	ldr	r3, [r0, #0]
}
 8017724:	58c8      	ldr	r0, [r1, r3]
 8017726:	4770      	bx	lr

08017728 <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8017728:	b148      	cbz	r0, 801773e <_lv_ll_get_len+0x16>
    return ll_p->head;
 801772a:	6843      	ldr	r3, [r0, #4]
 801772c:	2200      	movs	r2, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801772e:	b90b      	cbnz	r3, 8017734 <_lv_ll_get_len+0xc>
}
 8017730:	4610      	mov	r0, r2
 8017732:	4770      	bx	lr
    return *((lv_ll_node_t **)n_act_d);
 8017734:	6801      	ldr	r1, [r0, #0]
        len++;
 8017736:	3201      	adds	r2, #1
    return *((lv_ll_node_t **)n_act_d);
 8017738:	440b      	add	r3, r1
 801773a:	685b      	ldr	r3, [r3, #4]
 801773c:	e7f7      	b.n	801772e <_lv_ll_get_len+0x6>
 801773e:	4602      	mov	r2, r0
    return len;
 8017740:	e7f6      	b.n	8017730 <_lv_ll_get_len+0x8>

08017742 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8017742:	b130      	cbz	r0, 8017752 <_lv_ll_is_empty+0x10>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8017744:	6843      	ldr	r3, [r0, #4]
 8017746:	b933      	cbnz	r3, 8017756 <_lv_ll_is_empty+0x14>
 8017748:	6880      	ldr	r0, [r0, #8]
 801774a:	fab0 f080 	clz	r0, r0
 801774e:	0940      	lsrs	r0, r0, #5
 8017750:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8017752:	2001      	movs	r0, #1
 8017754:	4770      	bx	lr
    return false;
 8017756:	2000      	movs	r0, #0
}
 8017758:	4770      	bx	lr
	...

0801775c <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 801775c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8017760:	fb90 f2f3 	sdiv	r2, r0, r3
 8017764:	fb02 0013 	mls	r0, r2, r3, r0
 8017768:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 801776a:	2800      	cmp	r0, #0
 801776c:	bfb8      	it	lt
 801776e:	18c0      	addlt	r0, r0, r3
 8017770:	4b0f      	ldr	r3, [pc, #60]	; (80177b0 <lv_trigo_sin+0x54>)
 8017772:	bfb8      	it	lt
 8017774:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 8017776:	2859      	cmp	r0, #89	; 0x59
 8017778:	dc02      	bgt.n	8017780 <lv_trigo_sin+0x24>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
 801777a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 801777e:	4770      	bx	lr
    else if(angle >= 90 && angle < 180) {
 8017780:	b280      	uxth	r0, r0
 8017782:	f1a0 025a 	sub.w	r2, r0, #90	; 0x5a
 8017786:	2a59      	cmp	r2, #89	; 0x59
 8017788:	d803      	bhi.n	8017792 <lv_trigo_sin+0x36>
        angle = 180 - angle;
 801778a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 801778e:	b280      	uxth	r0, r0
 8017790:	e7f3      	b.n	801777a <lv_trigo_sin+0x1e>
    }
    else if(angle >= 180 && angle < 270) {
 8017792:	f1a0 02b4 	sub.w	r2, r0, #180	; 0xb4
 8017796:	b292      	uxth	r2, r2
 8017798:	2a59      	cmp	r2, #89	; 0x59
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801779a:	bf89      	itett	hi
 801779c:	f5c0 70b4 	rsbhi	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 80177a0:	f833 0012 	ldrhls.w	r0, [r3, r2, lsl #1]
        ret   = -sin0_90_table[angle];
 80177a4:	b280      	uxthhi	r0, r0
 80177a6:	f833 0010 	ldrhhi.w	r0, [r3, r0, lsl #1]
 80177aa:	4240      	negs	r0, r0
 80177ac:	b200      	sxth	r0, r0
    }

    return ret;
}
 80177ae:	4770      	bx	lr
 80177b0:	0802970c 	.word	0x0802970c

080177b4 <lv_bezier3>:
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
    uint32_t t_rem  = 1024 - t;
 80177b4:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
{
 80177b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80177ba:	fb0c f70c 	mul.w	r7, ip, ip
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80177be:	fb02 f400 	mul.w	r4, r2, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80177c2:	0abf      	lsrs	r7, r7, #10
    uint32_t t2     = (t * t) >> 10;
 80177c4:	fb00 f600 	mul.w	r6, r0, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80177c8:	fb03 f30c 	mul.w	r3, r3, ip
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80177cc:	437c      	muls	r4, r7
    uint32_t t2     = (t * t) >> 10;
 80177ce:	0ab6      	lsrs	r6, r6, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 80177d0:	fb07 f70c 	mul.w	r7, r7, ip
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80177d4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    uint32_t t3     = (t2 * t) >> 10;
 80177d8:	fb06 f400 	mul.w	r4, r6, r0
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80177dc:	435e      	muls	r6, r3
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 80177de:	0ab8      	lsrs	r0, r7, #10
    uint32_t t3     = (t2 * t) >> 10;
 80177e0:	0aa5      	lsrs	r5, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 80177e2:	9c05      	ldr	r4, [sp, #20]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80177e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    uint32_t v1 = (t_rem3 * u0) >> 10;
 80177e8:	4348      	muls	r0, r1
    uint32_t v4 = (t3 * u3) >> 10;
 80177ea:	436c      	muls	r4, r5
 80177ec:	0aa4      	lsrs	r4, r4, #10

    return v1 + v2 + v3 + v4;
 80177ee:	eb04 5412 	add.w	r4, r4, r2, lsr #20
 80177f2:	eb04 5416 	add.w	r4, r4, r6, lsr #20
}
 80177f6:	eb04 2090 	add.w	r0, r4, r0, lsr #10
 80177fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177fc <lv_sqrt>:
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
 80177fc:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
 80177fe:	2300      	movs	r3, #0
{
 8017800:	b530      	push	{r4, r5, lr}
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
 8017802:	18d4      	adds	r4, r2, r3
        if(trial * trial <= x) root = trial;
 8017804:	fb04 f504 	mul.w	r5, r4, r4
 8017808:	4285      	cmp	r5, r0
 801780a:	bf98      	it	ls
 801780c:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
 801780e:	0852      	lsrs	r2, r2, #1
 8017810:	d1f7      	bne.n	8017802 <lv_sqrt+0x6>

    q->i = root >> 4;
 8017812:	091a      	lsrs	r2, r3, #4
    q->f = (root & 0xf) << 4;
 8017814:	011b      	lsls	r3, r3, #4
    q->i = root >> 4;
 8017816:	800a      	strh	r2, [r1, #0]
    q->f = (root & 0xf) << 4;
 8017818:	b2db      	uxtb	r3, r3
 801781a:	804b      	strh	r3, [r1, #2]
}
 801781c:	bd30      	pop	{r4, r5, pc}

0801781e <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 801781e:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8017820:	f04f 022d 	mov.w	r2, #45	; 0x2d
        negflag += 0x01;    // x flag bit
 8017824:	bfba      	itte	lt
 8017826:	2301      	movlt	r3, #1
        x = (0 - x);        // is now +
 8017828:	4240      	neglt	r0, r0
    negflag = 0;
 801782a:	2300      	movge	r3, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 801782c:	2900      	cmp	r1, #0
        negflag += 0x02;    // y flag bit
        y = (0 - y);        // is now +
 801782e:	bfbe      	ittt	lt
 8017830:	4249      	neglt	r1, r1
        negflag += 0x02;    // y flag bit
 8017832:	3302      	addlt	r3, #2
 8017834:	b2db      	uxtblt	r3, r3
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8017836:	4288      	cmp	r0, r1
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8017838:	bf85      	ittet	hi
 801783a:	4351      	mulhi	r1, r2
        negflag += 0x10;    // octant flag bit
 801783c:	3310      	addhi	r3, #16
    }
    else {
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 801783e:	4342      	mulls	r2, r0
        negflag += 0x10;    // octant flag bit
 8017840:	b2db      	uxtbhi	r3, r3
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8017842:	bf8c      	ite	hi
 8017844:	fbb1 f1f0 	udivhi	r1, r1, r0
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8017848:	fbb2 f1f1 	udivls	r1, r2, r1
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 801784c:	b2ca      	uxtb	r2, r1
    if(tempdegree > 22) {    // if top half of range
 801784e:	2a16      	cmp	r2, #22
 8017850:	d90f      	bls.n	8017872 <lv_atan2+0x54>
        if(tempdegree <= 44) comp++;
 8017852:	2a2c      	cmp	r2, #44	; 0x2c
 8017854:	bf94      	ite	ls
 8017856:	2001      	movls	r0, #1
 8017858:	2000      	movhi	r0, #0
        if(tempdegree <= 41) comp++;
 801785a:	2a29      	cmp	r2, #41	; 0x29
 801785c:	bf98      	it	ls
 801785e:	3001      	addls	r0, #1
        if(tempdegree <= 37) comp++;
 8017860:	2a25      	cmp	r2, #37	; 0x25
 8017862:	bf9c      	itt	ls
 8017864:	3001      	addls	r0, #1
 8017866:	b2c0      	uxtbls	r0, r0
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8017868:	2a20      	cmp	r2, #32
 801786a:	d80f      	bhi.n	801788c <lv_atan2+0x6e>
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
        if(tempdegree >= 6) comp++;
        if(tempdegree >= 10) comp++;
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 801786c:	3001      	adds	r0, #1
 801786e:	b2c0      	uxtb	r0, r0
 8017870:	e00c      	b.n	801788c <lv_atan2+0x6e>
        if(tempdegree >= 2) comp++;
 8017872:	2a01      	cmp	r2, #1
 8017874:	bf8c      	ite	hi
 8017876:	2001      	movhi	r0, #1
 8017878:	2000      	movls	r0, #0
        if(tempdegree >= 6) comp++;
 801787a:	2a05      	cmp	r2, #5
 801787c:	bf88      	it	hi
 801787e:	3001      	addhi	r0, #1
        if(tempdegree >= 10) comp++;
 8017880:	2a09      	cmp	r2, #9
 8017882:	bf84      	itt	hi
 8017884:	3001      	addhi	r0, #1
 8017886:	b2c0      	uxtbhi	r0, r0
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 8017888:	2a0e      	cmp	r2, #14
 801788a:	d8ef      	bhi.n	801786c <lv_atan2+0x4e>
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 801788c:	06da      	lsls	r2, r3, #27
    degree += comp;   // degree is now accurate to +/- 1 degree!
 801788e:	4408      	add	r0, r1
    if(negflag & 0x10) degree = (90 - degree);
 8017890:	f003 0201 	and.w	r2, r3, #1
 8017894:	bf48      	it	mi
 8017896:	f1c0 005a 	rsbmi	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 801789a:	079b      	lsls	r3, r3, #30
 801789c:	d506      	bpl.n	80178ac <lv_atan2+0x8e>
        if(negflag & 0x01)   // if -Y -X
 801789e:	b112      	cbz	r2, 80178a6 <lv_atan2+0x88>
            degree = (180 + degree);
 80178a0:	30b4      	adds	r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 80178a2:	b280      	uxth	r0, r0
 80178a4:	4770      	bx	lr
            degree = (180 - degree);
 80178a6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80178aa:	e7fa      	b.n	80178a2 <lv_atan2+0x84>
        if(negflag & 0x01)   // if +Y -X
 80178ac:	2a00      	cmp	r2, #0
 80178ae:	d0f8      	beq.n	80178a2 <lv_atan2+0x84>
            degree = (360 - degree);
 80178b0:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
 80178b4:	e7f5      	b.n	80178a2 <lv_atan2+0x84>

080178b6 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 80178b6:	b530      	push	{r4, r5, lr}
 80178b8:	4604      	mov	r4, r0
 80178ba:	9803      	ldr	r0, [sp, #12]
    if(x >= max_in) return max_out;
 80178bc:	4294      	cmp	r4, r2
 80178be:	da0a      	bge.n	80178d6 <lv_map+0x20>
    if(x <= min_in) return min_out;
 80178c0:	428c      	cmp	r4, r1
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
 80178c2:	bfc3      	ittte	gt
 80178c4:	1a65      	subgt	r5, r4, r1
    int32_t delta_out = max_out - min_out;
 80178c6:	1ac4      	subgt	r4, r0, r3
    int32_t delta_in = max_in - min_in;
 80178c8:	1a50      	subgt	r0, r2, r1
    if(x <= min_in) return min_out;
 80178ca:	4618      	movle	r0, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 80178cc:	bfc2      	ittt	gt
 80178ce:	436c      	mulgt	r4, r5
 80178d0:	fb94 f0f0 	sdivgt	r0, r4, r0
 80178d4:	18c0      	addgt	r0, r0, r3
}
 80178d6:	bd30      	pop	{r4, r5, pc}

080178d8 <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
 80178d8:	b11a      	cbz	r2, 80178e2 <lv_mem_walker+0xa>
        mon_p->used_cnt++;
 80178da:	691a      	ldr	r2, [r3, #16]
 80178dc:	3201      	adds	r2, #1
 80178de:	611a      	str	r2, [r3, #16]
 80178e0:	4770      	bx	lr
    }
    else {
        mon_p->free_cnt++;
 80178e2:	685a      	ldr	r2, [r3, #4]
 80178e4:	3201      	adds	r2, #1
 80178e6:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
 80178e8:	689a      	ldr	r2, [r3, #8]
 80178ea:	440a      	add	r2, r1
 80178ec:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
 80178ee:	68da      	ldr	r2, [r3, #12]
 80178f0:	4291      	cmp	r1, r2
            mon_p->free_biggest_size = size;
 80178f2:	bf88      	it	hi
 80178f4:	60d9      	strhi	r1, [r3, #12]
    }
}
 80178f6:	4770      	bx	lr

080178f8 <lv_mem_init>:
{
 80178f8:	b508      	push	{r3, lr}
    tlsf = tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 80178fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80178fe:	4803      	ldr	r0, [pc, #12]	; (801790c <lv_mem_init+0x14>)
 8017900:	f001 fb2e 	bl	8018f60 <tlsf_create_with_pool>
 8017904:	4b02      	ldr	r3, [pc, #8]	; (8017910 <lv_mem_init+0x18>)
 8017906:	6018      	str	r0, [r3, #0]
}
 8017908:	bd08      	pop	{r3, pc}
 801790a:	bf00      	nop
 801790c:	20002b68 	.word	0x20002b68
 8017910:	20002b64 	.word	0x20002b64

08017914 <lv_mem_free>:
    if(data == &zero_mem) return;
 8017914:	4b04      	ldr	r3, [pc, #16]	; (8017928 <lv_mem_free+0x14>)
{
 8017916:	4601      	mov	r1, r0
    if(data == &zero_mem) return;
 8017918:	4298      	cmp	r0, r3
 801791a:	d004      	beq.n	8017926 <lv_mem_free+0x12>
    if(data == NULL) return;
 801791c:	b118      	cbz	r0, 8017926 <lv_mem_free+0x12>
    tlsf_free(tlsf, data);
 801791e:	4b03      	ldr	r3, [pc, #12]	; (801792c <lv_mem_free+0x18>)
 8017920:	6818      	ldr	r0, [r3, #0]
 8017922:	f001 bb51 	b.w	8018fc8 <tlsf_free>
}
 8017926:	4770      	bx	lr
 8017928:	20000030 	.word	0x20000030
 801792c:	20002b64 	.word	0x20002b64

08017930 <lv_mem_buf_release>:
{
 8017930:	2300      	movs	r3, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8017932:	4a08      	ldr	r2, [pc, #32]	; (8017954 <lv_mem_buf_release+0x24>)
{
 8017934:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8017936:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 801793a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801793e:	4284      	cmp	r4, r0
 8017940:	d104      	bne.n	801794c <lv_mem_buf_release+0x1c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8017942:	798b      	ldrb	r3, [r1, #6]
 8017944:	f36f 0300 	bfc	r3, #0, #1
 8017948:	718b      	strb	r3, [r1, #6]
}
 801794a:	bd10      	pop	{r4, pc}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801794c:	3301      	adds	r3, #1
 801794e:	2b10      	cmp	r3, #16
 8017950:	d1f1      	bne.n	8017936 <lv_mem_buf_release+0x6>
 8017952:	e7fa      	b.n	801794a <lv_mem_buf_release+0x1a>
 8017954:	2000aef4 	.word	0x2000aef4

08017958 <lv_mem_buf_free_all>:
{
 8017958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801795a:	4c0a      	ldr	r4, [pc, #40]	; (8017984 <lv_mem_buf_free_all+0x2c>)
 801795c:	2500      	movs	r5, #0
 801795e:	4627      	mov	r7, r4
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8017960:	462e      	mov	r6, r5
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8017962:	6820      	ldr	r0, [r4, #0]
 8017964:	b148      	cbz	r0, 801797a <lv_mem_buf_free_all+0x22>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8017966:	f7ff ffd5 	bl	8017914 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 801796a:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 801796c:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8017970:	799a      	ldrb	r2, [r3, #6]
 8017972:	f366 0200 	bfi	r2, r6, #0, #1
 8017976:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8017978:	80a6      	strh	r6, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 801797a:	3501      	adds	r5, #1
 801797c:	3408      	adds	r4, #8
 801797e:	2d10      	cmp	r5, #16
 8017980:	d1ef      	bne.n	8017962 <lv_mem_buf_free_all+0xa>
}
 8017982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017984:	2000aef4 	.word	0x2000aef4

08017988 <lv_memcpy>:
{
 8017988:	b570      	push	{r4, r5, r6, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801798a:	f000 0507 	and.w	r5, r0, #7
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 801798e:	f001 0607 	and.w	r6, r1, #7
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8017992:	4604      	mov	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8017994:	460b      	mov	r3, r1
    if(s_align != d_align) {
 8017996:	42b5      	cmp	r5, r6
 8017998:	f040 8098 	bne.w	8017acc <lv_memcpy+0x144>
    if(d_align) {
 801799c:	2d00      	cmp	r5, #0
 801799e:	f040 80a8 	bne.w	8017af2 <lv_memcpy+0x16a>
    uint8_t * d8 = dst;
 80179a2:	4605      	mov	r5, r0
 80179a4:	462b      	mov	r3, r5
    while(len > 32) {
 80179a6:	2a20      	cmp	r2, #32
 80179a8:	461c      	mov	r4, r3
 80179aa:	f101 0520 	add.w	r5, r1, #32
 80179ae:	f103 0320 	add.w	r3, r3, #32
 80179b2:	f200 80af 	bhi.w	8017b14 <lv_memcpy+0x18c>
    while(len > 4) {
 80179b6:	2a04      	cmp	r2, #4
 80179b8:	460e      	mov	r6, r1
 80179ba:	f240 809f 	bls.w	8017afc <lv_memcpy+0x174>
        COPY32;
 80179be:	f851 3b04 	ldr.w	r3, [r1], #4
        len -= 4;
 80179c2:	3a04      	subs	r2, #4
        COPY32;
 80179c4:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 80179c8:	e7f5      	b.n	80179b6 <lv_memcpy+0x2e>
            REPEAT8(COPY8);
 80179ca:	f813 1c20 	ldrb.w	r1, [r3, #-32]
            len -= 32;
 80179ce:	3a20      	subs	r2, #32
            REPEAT8(COPY8);
 80179d0:	f804 1c20 	strb.w	r1, [r4, #-32]
 80179d4:	f813 1c1f 	ldrb.w	r1, [r3, #-31]
 80179d8:	f804 1c1f 	strb.w	r1, [r4, #-31]
 80179dc:	f813 1c1e 	ldrb.w	r1, [r3, #-30]
 80179e0:	f804 1c1e 	strb.w	r1, [r4, #-30]
 80179e4:	f813 1c1d 	ldrb.w	r1, [r3, #-29]
 80179e8:	f804 1c1d 	strb.w	r1, [r4, #-29]
 80179ec:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80179f0:	f804 1c1c 	strb.w	r1, [r4, #-28]
 80179f4:	f813 1c1b 	ldrb.w	r1, [r3, #-27]
 80179f8:	f804 1c1b 	strb.w	r1, [r4, #-27]
 80179fc:	f813 1c1a 	ldrb.w	r1, [r3, #-26]
 8017a00:	f804 1c1a 	strb.w	r1, [r4, #-26]
 8017a04:	f813 1c19 	ldrb.w	r1, [r3, #-25]
 8017a08:	f804 1c19 	strb.w	r1, [r4, #-25]
            REPEAT8(COPY8);
 8017a0c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8017a10:	f804 1c18 	strb.w	r1, [r4, #-24]
 8017a14:	f813 1c17 	ldrb.w	r1, [r3, #-23]
 8017a18:	f804 1c17 	strb.w	r1, [r4, #-23]
 8017a1c:	f813 1c16 	ldrb.w	r1, [r3, #-22]
 8017a20:	f804 1c16 	strb.w	r1, [r4, #-22]
 8017a24:	f813 1c15 	ldrb.w	r1, [r3, #-21]
 8017a28:	f804 1c15 	strb.w	r1, [r4, #-21]
 8017a2c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8017a30:	f804 1c14 	strb.w	r1, [r4, #-20]
 8017a34:	f813 1c13 	ldrb.w	r1, [r3, #-19]
 8017a38:	f804 1c13 	strb.w	r1, [r4, #-19]
 8017a3c:	f813 1c12 	ldrb.w	r1, [r3, #-18]
 8017a40:	f804 1c12 	strb.w	r1, [r4, #-18]
 8017a44:	f813 1c11 	ldrb.w	r1, [r3, #-17]
 8017a48:	f804 1c11 	strb.w	r1, [r4, #-17]
            REPEAT8(COPY8);
 8017a4c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8017a50:	f804 1c10 	strb.w	r1, [r4, #-16]
 8017a54:	f813 1c0f 	ldrb.w	r1, [r3, #-15]
 8017a58:	f804 1c0f 	strb.w	r1, [r4, #-15]
 8017a5c:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8017a60:	f804 1c0e 	strb.w	r1, [r4, #-14]
 8017a64:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8017a68:	f804 1c0d 	strb.w	r1, [r4, #-13]
 8017a6c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8017a70:	f804 1c0c 	strb.w	r1, [r4, #-12]
 8017a74:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8017a78:	f804 1c0b 	strb.w	r1, [r4, #-11]
 8017a7c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8017a80:	f804 1c0a 	strb.w	r1, [r4, #-10]
 8017a84:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8017a88:	f804 1c09 	strb.w	r1, [r4, #-9]
            REPEAT8(COPY8);
 8017a8c:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 8017a90:	f804 1c08 	strb.w	r1, [r4, #-8]
 8017a94:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8017a98:	f804 1c07 	strb.w	r1, [r4, #-7]
 8017a9c:	f813 1c06 	ldrb.w	r1, [r3, #-6]
 8017aa0:	f804 1c06 	strb.w	r1, [r4, #-6]
 8017aa4:	f813 1c05 	ldrb.w	r1, [r3, #-5]
 8017aa8:	f804 1c05 	strb.w	r1, [r4, #-5]
 8017aac:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8017ab0:	f804 1c04 	strb.w	r1, [r4, #-4]
 8017ab4:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 8017ab8:	f804 1c03 	strb.w	r1, [r4, #-3]
 8017abc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8017ac0:	f804 1c02 	strb.w	r1, [r4, #-2]
 8017ac4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017ac8:	f804 1c01 	strb.w	r1, [r4, #-1]
        while(len > 32) {
 8017acc:	2a20      	cmp	r2, #32
 8017ace:	461d      	mov	r5, r3
 8017ad0:	4621      	mov	r1, r4
 8017ad2:	f103 0320 	add.w	r3, r3, #32
 8017ad6:	f104 0420 	add.w	r4, r4, #32
 8017ada:	f63f af76 	bhi.w	80179ca <lv_memcpy+0x42>
 8017ade:	1e6b      	subs	r3, r5, #1
 8017ae0:	440a      	add	r2, r1
        while(len) {
 8017ae2:	4291      	cmp	r1, r2
 8017ae4:	d100      	bne.n	8017ae8 <lv_memcpy+0x160>
}
 8017ae6:	bd70      	pop	{r4, r5, r6, pc}
            COPY8
 8017ae8:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8017aec:	f801 4b01 	strb.w	r4, [r1], #1
            len--;
 8017af0:	e7f7      	b.n	8017ae2 <lv_memcpy+0x15a>
        d_align = ALIGN_MASK + 1 - d_align;
 8017af2:	f1c5 0508 	rsb	r5, r5, #8
 8017af6:	4405      	add	r5, r0
 8017af8:	461e      	mov	r6, r3
        while(d_align && len) {
 8017afa:	b912      	cbnz	r2, 8017b02 <lv_memcpy+0x17a>
 8017afc:	1e73      	subs	r3, r6, #1
 8017afe:	4422      	add	r2, r4
 8017b00:	e02f      	b.n	8017b62 <lv_memcpy+0x1da>
            COPY8;
 8017b02:	f813 1b01 	ldrb.w	r1, [r3], #1
            len--;
 8017b06:	3a01      	subs	r2, #1
            COPY8;
 8017b08:	f804 1b01 	strb.w	r1, [r4], #1
        while(d_align && len) {
 8017b0c:	42ac      	cmp	r4, r5
            COPY8;
 8017b0e:	4619      	mov	r1, r3
        while(d_align && len) {
 8017b10:	d1f2      	bne.n	8017af8 <lv_memcpy+0x170>
 8017b12:	e747      	b.n	80179a4 <lv_memcpy+0x1c>
        REPEAT8(COPY32)
 8017b14:	f855 1c20 	ldr.w	r1, [r5, #-32]
        len -= 32;
 8017b18:	3a20      	subs	r2, #32
        REPEAT8(COPY32)
 8017b1a:	f843 1c20 	str.w	r1, [r3, #-32]
 8017b1e:	f855 1c1c 	ldr.w	r1, [r5, #-28]
 8017b22:	f843 1c1c 	str.w	r1, [r3, #-28]
 8017b26:	f855 1c18 	ldr.w	r1, [r5, #-24]
 8017b2a:	f843 1c18 	str.w	r1, [r3, #-24]
 8017b2e:	f855 1c14 	ldr.w	r1, [r5, #-20]
 8017b32:	f843 1c14 	str.w	r1, [r3, #-20]
 8017b36:	f855 1c10 	ldr.w	r1, [r5, #-16]
 8017b3a:	f843 1c10 	str.w	r1, [r3, #-16]
 8017b3e:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8017b42:	f843 1c0c 	str.w	r1, [r3, #-12]
 8017b46:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8017b4a:	f843 1c08 	str.w	r1, [r3, #-8]
 8017b4e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8017b52:	f843 1c04 	str.w	r1, [r3, #-4]
        len -= 32;
 8017b56:	4629      	mov	r1, r5
 8017b58:	e725      	b.n	80179a6 <lv_memcpy+0x1e>
        COPY8
 8017b5a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017b5e:	f804 1b01 	strb.w	r1, [r4], #1
    while(len) {
 8017b62:	4294      	cmp	r4, r2
 8017b64:	d1f9      	bne.n	8017b5a <lv_memcpy+0x1d2>
 8017b66:	e7be      	b.n	8017ae6 <lv_memcpy+0x15e>

08017b68 <lv_memset>:
    if(d_align) {
 8017b68:	f010 0307 	ands.w	r3, r0, #7
{
 8017b6c:	b510      	push	{r4, lr}
    if(d_align) {
 8017b6e:	d009      	beq.n	8017b84 <lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
 8017b70:	f1c3 0308 	rsb	r3, r3, #8
 8017b74:	4403      	add	r3, r0
        while(d_align && len) {
 8017b76:	b12a      	cbz	r2, 8017b84 <lv_memset+0x1c>
            SET8(v);
 8017b78:	f800 1b01 	strb.w	r1, [r0], #1
        while(d_align && len) {
 8017b7c:	4298      	cmp	r0, r3
            len--;
 8017b7e:	f102 32ff 	add.w	r2, r2, #4294967295
        while(d_align && len) {
 8017b82:	d1f8      	bne.n	8017b76 <lv_memset+0xe>
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8017b84:	040b      	lsls	r3, r1, #16
 8017b86:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017b8a:	440b      	add	r3, r1
 8017b8c:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 8017b90:	2a20      	cmp	r2, #32
 8017b92:	4604      	mov	r4, r0
 8017b94:	f100 0020 	add.w	r0, r0, #32
 8017b98:	d805      	bhi.n	8017ba6 <lv_memset+0x3e>
    while(len > 4) {
 8017b9a:	2a04      	cmp	r2, #4
 8017b9c:	d80d      	bhi.n	8017bba <lv_memset+0x52>
 8017b9e:	4422      	add	r2, r4
    while(len) {
 8017ba0:	42a2      	cmp	r2, r4
 8017ba2:	d10e      	bne.n	8017bc2 <lv_memset+0x5a>
}
 8017ba4:	bd10      	pop	{r4, pc}
        len -= 32;
 8017ba6:	3a20      	subs	r2, #32
        REPEAT8(SET32(v32));
 8017ba8:	e940 3308 	strd	r3, r3, [r0, #-32]
 8017bac:	e940 3306 	strd	r3, r3, [r0, #-24]
 8017bb0:	e940 3304 	strd	r3, r3, [r0, #-16]
 8017bb4:	e940 3302 	strd	r3, r3, [r0, #-8]
        len -= 32;
 8017bb8:	e7ea      	b.n	8017b90 <lv_memset+0x28>
        len -= 4;
 8017bba:	3a04      	subs	r2, #4
        SET32(v32);
 8017bbc:	f844 3b04 	str.w	r3, [r4], #4
        len -= 4;
 8017bc0:	e7eb      	b.n	8017b9a <lv_memset+0x32>
        SET8(v);
 8017bc2:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
 8017bc6:	e7eb      	b.n	8017ba0 <lv_memset+0x38>

08017bc8 <lv_mem_monitor>:
{
 8017bc8:	b510      	push	{r4, lr}
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8017bca:	221c      	movs	r2, #28
 8017bcc:	2100      	movs	r1, #0
{
 8017bce:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8017bd0:	f7ff ffca 	bl	8017b68 <lv_memset>
    tlsf_walk_pool(tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
 8017bd4:	4b0e      	ldr	r3, [pc, #56]	; (8017c10 <lv_mem_monitor+0x48>)
 8017bd6:	6818      	ldr	r0, [r3, #0]
 8017bd8:	f001 f9d0 	bl	8018f7c <tlsf_get_pool>
 8017bdc:	4622      	mov	r2, r4
 8017bde:	490d      	ldr	r1, [pc, #52]	; (8017c14 <lv_mem_monitor+0x4c>)
 8017be0:	f001 f966 	bl	8018eb0 <tlsf_walk_pool>
    mon_p->total_size = LV_MEM_SIZE;
 8017be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8017be8:	68a2      	ldr	r2, [r4, #8]
    mon_p->total_size = LV_MEM_SIZE;
 8017bea:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8017bec:	2364      	movs	r3, #100	; 0x64
 8017bee:	fb03 f102 	mul.w	r1, r3, r2
 8017bf2:	0bc9      	lsrs	r1, r1, #15
 8017bf4:	1a59      	subs	r1, r3, r1
 8017bf6:	7621      	strb	r1, [r4, #24]
    if(mon_p->free_size > 0) {
 8017bf8:	b142      	cbz	r2, 8017c0c <lv_mem_monitor+0x44>
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
 8017bfa:	68e1      	ldr	r1, [r4, #12]
 8017bfc:	434b      	muls	r3, r1
 8017bfe:	fbb3 f3f2 	udiv	r3, r3, r2
        mon_p->frag_pct = 100 - mon_p->frag_pct;
 8017c02:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	7663      	strb	r3, [r4, #25]
}
 8017c0a:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
 8017c0c:	4613      	mov	r3, r2
 8017c0e:	e7fb      	b.n	8017c08 <lv_mem_monitor+0x40>
 8017c10:	20002b64 	.word	0x20002b64
 8017c14:	080178d9 	.word	0x080178d9

08017c18 <lv_mem_alloc>:
{
 8017c18:	b510      	push	{r4, lr}
    if(size == 0) {
 8017c1a:	4601      	mov	r1, r0
{
 8017c1c:	b088      	sub	sp, #32
    if(size == 0) {
 8017c1e:	b158      	cbz	r0, 8017c38 <lv_mem_alloc+0x20>
    void * alloc = tlsf_malloc(tlsf, size);
 8017c20:	4b06      	ldr	r3, [pc, #24]	; (8017c3c <lv_mem_alloc+0x24>)
 8017c22:	6818      	ldr	r0, [r3, #0]
 8017c24:	f001 f9ad 	bl	8018f82 <tlsf_malloc>
    if(alloc == NULL) {
 8017c28:	4604      	mov	r4, r0
 8017c2a:	b910      	cbnz	r0, 8017c32 <lv_mem_alloc+0x1a>
        lv_mem_monitor(&mon);
 8017c2c:	a801      	add	r0, sp, #4
 8017c2e:	f7ff ffcb 	bl	8017bc8 <lv_mem_monitor>
}
 8017c32:	4620      	mov	r0, r4
 8017c34:	b008      	add	sp, #32
 8017c36:	bd10      	pop	{r4, pc}
        return &zero_mem;
 8017c38:	4c01      	ldr	r4, [pc, #4]	; (8017c40 <lv_mem_alloc+0x28>)
 8017c3a:	e7fa      	b.n	8017c32 <lv_mem_alloc+0x1a>
 8017c3c:	20002b64 	.word	0x20002b64
 8017c40:	20000030 	.word	0x20000030

08017c44 <lv_mem_realloc>:
    if(new_size == 0) {
 8017c44:	460a      	mov	r2, r1
{
 8017c46:	b508      	push	{r3, lr}
    if(new_size == 0) {
 8017c48:	b171      	cbz	r1, 8017c68 <lv_mem_realloc+0x24>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8017c4a:	4909      	ldr	r1, [pc, #36]	; (8017c70 <lv_mem_realloc+0x2c>)
 8017c4c:	4288      	cmp	r0, r1
 8017c4e:	d104      	bne.n	8017c5a <lv_mem_realloc+0x16>
 8017c50:	4610      	mov	r0, r2
}
 8017c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8017c56:	f7ff bfdf 	b.w	8017c18 <lv_mem_alloc>
    void * new_p = tlsf_realloc(tlsf, data_p, new_size);
 8017c5a:	4b06      	ldr	r3, [pc, #24]	; (8017c74 <lv_mem_realloc+0x30>)
 8017c5c:	4601      	mov	r1, r0
 8017c5e:	6818      	ldr	r0, [r3, #0]
}
 8017c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    void * new_p = tlsf_realloc(tlsf, data_p, new_size);
 8017c64:	f001 ba0c 	b.w	8019080 <tlsf_realloc>
        lv_mem_free(data_p);
 8017c68:	f7ff fe54 	bl	8017914 <lv_mem_free>
}
 8017c6c:	4800      	ldr	r0, [pc, #0]	; (8017c70 <lv_mem_realloc+0x2c>)
 8017c6e:	bd08      	pop	{r3, pc}
 8017c70:	20000030 	.word	0x20000030
 8017c74:	20002b64 	.word	0x20002b64

08017c78 <lv_mem_buf_get>:
{
 8017c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	b1b0      	cbz	r0, 8017cac <lv_mem_buf_get+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8017c7e:	4924      	ldr	r1, [pc, #144]	; (8017d10 <lv_mem_buf_get+0x98>)
 8017c80:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 8017c82:	f04f 32ff 	mov.w	r2, #4294967295
 8017c86:	460e      	mov	r6, r1
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8017c88:	f101 0c04 	add.w	ip, r1, #4
 8017c8c:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
 8017c90:	79bd      	ldrb	r5, [r7, #6]
 8017c92:	4628      	mov	r0, r5
 8017c94:	07ed      	lsls	r5, r5, #31
 8017c96:	d413      	bmi.n	8017cc0 <lv_mem_buf_get+0x48>
 8017c98:	f83c 5033 	ldrh.w	r5, [ip, r3, lsl #3]
 8017c9c:	42a5      	cmp	r5, r4
 8017c9e:	d30f      	bcc.n	8017cc0 <lv_mem_buf_get+0x48>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8017ca0:	d105      	bne.n	8017cae <lv_mem_buf_get+0x36>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017ca2:	f040 0001 	orr.w	r0, r0, #1
 8017ca6:	71b8      	strb	r0, [r7, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8017ca8:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
}
 8017cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            else if(i_guess < 0) {
 8017cae:	1c50      	adds	r0, r2, #1
 8017cb0:	d101      	bne.n	8017cb6 <lv_mem_buf_get+0x3e>
                i_guess = i;
 8017cb2:	b25a      	sxtb	r2, r3
 8017cb4:	e004      	b.n	8017cc0 <lv_mem_buf_get+0x48>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8017cb6:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8017cba:	8880      	ldrh	r0, [r0, #4]
 8017cbc:	42a8      	cmp	r0, r5
 8017cbe:	d8f8      	bhi.n	8017cb2 <lv_mem_buf_get+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	2b10      	cmp	r3, #16
 8017cc4:	d1e2      	bne.n	8017c8c <lv_mem_buf_get+0x14>
    if(i_guess >= 0) {
 8017cc6:	1c51      	adds	r1, r2, #1
 8017cc8:	d008      	beq.n	8017cdc <lv_mem_buf_get+0x64>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8017cca:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8017cce:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8017cd2:	798b      	ldrb	r3, [r1, #6]
 8017cd4:	f043 0301 	orr.w	r3, r3, #1
 8017cd8:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8017cda:	e7e7      	b.n	8017cac <lv_mem_buf_get+0x34>
 8017cdc:	2500      	movs	r5, #0
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8017cde:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
 8017ce2:	79bb      	ldrb	r3, [r7, #6]
 8017ce4:	07db      	lsls	r3, r3, #31
 8017ce6:	d40e      	bmi.n	8017d06 <lv_mem_buf_get+0x8e>
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8017ce8:	4621      	mov	r1, r4
 8017cea:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 8017cee:	f7ff ffa9 	bl	8017c44 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8017cf2:	b900      	cbnz	r0, 8017cf6 <lv_mem_buf_get+0x7e>
 8017cf4:	e7fe      	b.n	8017cf4 <lv_mem_buf_get+0x7c>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017cf6:	79bb      	ldrb	r3, [r7, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8017cf8:	80bc      	strh	r4, [r7, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017cfa:	f043 0301 	orr.w	r3, r3, #1
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8017cfe:	f846 0035 	str.w	r0, [r6, r5, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8017d02:	71bb      	strb	r3, [r7, #6]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8017d04:	e7d2      	b.n	8017cac <lv_mem_buf_get+0x34>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8017d06:	3501      	adds	r5, #1
 8017d08:	2d10      	cmp	r5, #16
 8017d0a:	d1e8      	bne.n	8017cde <lv_mem_buf_get+0x66>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8017d0c:	e7fe      	b.n	8017d0c <lv_mem_buf_get+0x94>
 8017d0e:	bf00      	nop
 8017d10:	2000aef4 	.word	0x2000aef4

08017d14 <lv_memset_00>:
    if(d_align) {
 8017d14:	f010 0307 	ands.w	r3, r0, #7
 8017d18:	d10d      	bne.n	8017d36 <lv_memset_00+0x22>
 8017d1a:	4603      	mov	r3, r0
        REPEAT8(SET32(0));
 8017d1c:	2200      	movs	r2, #0
    while(len > 32) {
 8017d1e:	2920      	cmp	r1, #32
 8017d20:	4618      	mov	r0, r3
 8017d22:	f103 0320 	add.w	r3, r3, #32
 8017d26:	d815      	bhi.n	8017d54 <lv_memset_00+0x40>
        SET32(0);
 8017d28:	2300      	movs	r3, #0
    while(len > 4) {
 8017d2a:	2904      	cmp	r1, #4
 8017d2c:	d908      	bls.n	8017d40 <lv_memset_00+0x2c>
        len -= 4;
 8017d2e:	3904      	subs	r1, #4
        SET32(0);
 8017d30:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8017d34:	e7f9      	b.n	8017d2a <lv_memset_00+0x16>
        d_align = ALIGN_MASK + 1 - d_align;
 8017d36:	f1c3 0308 	rsb	r3, r3, #8
            SET8(0);
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	4403      	add	r3, r0
        while(d_align && len) {
 8017d3e:	b911      	cbnz	r1, 8017d46 <lv_memset_00+0x32>
 8017d40:	4401      	add	r1, r0
        SET8(0);
 8017d42:	2300      	movs	r3, #0
 8017d44:	e012      	b.n	8017d6c <lv_memset_00+0x58>
            SET8(0);
 8017d46:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8017d4a:	4298      	cmp	r0, r3
            len--;
 8017d4c:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8017d50:	d1f5      	bne.n	8017d3e <lv_memset_00+0x2a>
 8017d52:	e7e2      	b.n	8017d1a <lv_memset_00+0x6>
        len -= 32;
 8017d54:	3920      	subs	r1, #32
        REPEAT8(SET32(0));
 8017d56:	e943 2208 	strd	r2, r2, [r3, #-32]
 8017d5a:	e943 2206 	strd	r2, r2, [r3, #-24]
 8017d5e:	e943 2204 	strd	r2, r2, [r3, #-16]
 8017d62:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8017d66:	e7da      	b.n	8017d1e <lv_memset_00+0xa>
        SET8(0);
 8017d68:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8017d6c:	4288      	cmp	r0, r1
 8017d6e:	d1fb      	bne.n	8017d68 <lv_memset_00+0x54>
}
 8017d70:	4770      	bx	lr

08017d72 <lv_memset_ff>:
    if(d_align) {
 8017d72:	f010 0307 	ands.w	r3, r0, #7
 8017d76:	d10f      	bne.n	8017d98 <lv_memset_ff+0x26>
 8017d78:	4603      	mov	r3, r0
        REPEAT8(SET32(0xFFFFFFFF));
 8017d7a:	f04f 32ff 	mov.w	r2, #4294967295
    while(len > 32) {
 8017d7e:	2920      	cmp	r1, #32
 8017d80:	4618      	mov	r0, r3
 8017d82:	f103 0320 	add.w	r3, r3, #32
 8017d86:	d816      	bhi.n	8017db6 <lv_memset_ff+0x44>
        SET32(0xFFFFFFFF);
 8017d88:	f04f 33ff 	mov.w	r3, #4294967295
    while(len > 4) {
 8017d8c:	2904      	cmp	r1, #4
 8017d8e:	d908      	bls.n	8017da2 <lv_memset_ff+0x30>
        len -= 4;
 8017d90:	3904      	subs	r1, #4
        SET32(0xFFFFFFFF);
 8017d92:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8017d96:	e7f9      	b.n	8017d8c <lv_memset_ff+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 8017d98:	f1c3 0308 	rsb	r3, r3, #8
            SET8(0xFF);
 8017d9c:	22ff      	movs	r2, #255	; 0xff
 8017d9e:	4403      	add	r3, r0
        while(d_align && len) {
 8017da0:	b911      	cbnz	r1, 8017da8 <lv_memset_ff+0x36>
 8017da2:	4401      	add	r1, r0
        SET8(0xFF);
 8017da4:	23ff      	movs	r3, #255	; 0xff
 8017da6:	e012      	b.n	8017dce <lv_memset_ff+0x5c>
            SET8(0xFF);
 8017da8:	f800 2b01 	strb.w	r2, [r0], #1
        while(d_align && len) {
 8017dac:	4298      	cmp	r0, r3
            len--;
 8017dae:	f101 31ff 	add.w	r1, r1, #4294967295
        while(d_align && len) {
 8017db2:	d1f5      	bne.n	8017da0 <lv_memset_ff+0x2e>
 8017db4:	e7e0      	b.n	8017d78 <lv_memset_ff+0x6>
        len -= 32;
 8017db6:	3920      	subs	r1, #32
        REPEAT8(SET32(0xFFFFFFFF));
 8017db8:	e943 2208 	strd	r2, r2, [r3, #-32]
 8017dbc:	e943 2206 	strd	r2, r2, [r3, #-24]
 8017dc0:	e943 2204 	strd	r2, r2, [r3, #-16]
 8017dc4:	e943 2202 	strd	r2, r2, [r3, #-8]
        len -= 32;
 8017dc8:	e7d9      	b.n	8017d7e <lv_memset_ff+0xc>
        SET8(0xFF);
 8017dca:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8017dce:	4288      	cmp	r0, r1
 8017dd0:	d1fb      	bne.n	8017dca <lv_memset_ff+0x58>
}
 8017dd2:	4770      	bx	lr

08017dd4 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 8017dd4:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 8017dd6:	bf38      	it	cc
 8017dd8:	5488      	strbcc	r0, [r1, r2]
    }
}
 8017dda:	4770      	bx	lr

08017ddc <_out_null>:
{
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
 8017ddc:	4770      	bx	lr

08017dde <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017dde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de2:	4617      	mov	r7, r2
 8017de4:	4680      	mov	r8, r0
 8017de6:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
 8017dea:	e9dd 6211 	ldrd	r6, r2, [sp, #68]	; 0x44
 8017dee:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 8017df2:	f012 0a02 	ands.w	sl, r2, #2
{
 8017df6:	e9dd 0c0f 	ldrd	r0, ip, [sp, #60]	; 0x3c
    if(!(flags & FLAGS_LEFT)) {
 8017dfa:	d11f      	bne.n	8017e3c <_ntoa_format+0x5e>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8017dfc:	f002 0901 	and.w	r9, r2, #1
 8017e00:	b14e      	cbz	r6, 8017e16 <_ntoa_format+0x38>
 8017e02:	f1b9 0f00 	cmp.w	r9, #0
 8017e06:	d006      	beq.n	8017e16 <_ntoa_format+0x38>
 8017e08:	f1be 0f00 	cmp.w	lr, #0
 8017e0c:	d102      	bne.n	8017e14 <_ntoa_format+0x36>
 8017e0e:	f012 0f0c 	tst.w	r2, #12
 8017e12:	d000      	beq.n	8017e16 <_ntoa_format+0x38>
            width--;
 8017e14:	3e01      	subs	r6, #1
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8017e16:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8017e1a:	e002      	b.n	8017e22 <_ntoa_format+0x44>
 8017e1c:	f805 b004 	strb.w	fp, [r5, r4]
 8017e20:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017e22:	45a4      	cmp	ip, r4
 8017e24:	d901      	bls.n	8017e2a <_ntoa_format+0x4c>
 8017e26:	2c20      	cmp	r4, #32
 8017e28:	d1f8      	bne.n	8017e1c <_ntoa_format+0x3e>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 8017e2a:	f04f 0b30 	mov.w	fp, #48	; 0x30
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017e2e:	f1b9 0f00 	cmp.w	r9, #0
 8017e32:	d003      	beq.n	8017e3c <_ntoa_format+0x5e>
 8017e34:	42a6      	cmp	r6, r4
 8017e36:	d901      	bls.n	8017e3c <_ntoa_format+0x5e>
 8017e38:	2c20      	cmp	r4, #32
 8017e3a:	d13e      	bne.n	8017eba <_ntoa_format+0xdc>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 8017e3c:	f012 0f10 	tst.w	r2, #16
 8017e40:	d01a      	beq.n	8017e78 <_ntoa_format+0x9a>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8017e42:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8017e46:	d13d      	bne.n	8017ec4 <_ntoa_format+0xe6>
 8017e48:	2c00      	cmp	r4, #0
 8017e4a:	d03b      	beq.n	8017ec4 <_ntoa_format+0xe6>
 8017e4c:	4564      	cmp	r4, ip
 8017e4e:	d001      	beq.n	8017e54 <_ntoa_format+0x76>
 8017e50:	42b4      	cmp	r4, r6
 8017e52:	d137      	bne.n	8017ec4 <_ntoa_format+0xe6>
            len--;
            if(len && (base == 16U)) {
 8017e54:	f1b4 0c01 	subs.w	ip, r4, #1
 8017e58:	d033      	beq.n	8017ec2 <_ntoa_format+0xe4>
 8017e5a:	2810      	cmp	r0, #16
 8017e5c:	d16f      	bne.n	8017f3e <_ntoa_format+0x160>
                len--;
 8017e5e:	3c02      	subs	r4, #2
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017e60:	0690      	lsls	r0, r2, #26
 8017e62:	d437      	bmi.n	8017ed4 <_ntoa_format+0xf6>
 8017e64:	2c1f      	cmp	r4, #31
 8017e66:	d80f      	bhi.n	8017e88 <_ntoa_format+0xaa>
            buf[len++] = 'x';
 8017e68:	2078      	movs	r0, #120	; 0x78
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'b';
 8017e6a:	5528      	strb	r0, [r5, r4]
 8017e6c:	3401      	adds	r4, #1
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8017e6e:	2c1f      	cmp	r4, #31
 8017e70:	d80a      	bhi.n	8017e88 <_ntoa_format+0xaa>
            buf[len++] = '0';
 8017e72:	2030      	movs	r0, #48	; 0x30
 8017e74:	5528      	strb	r0, [r5, r4]
 8017e76:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8017e78:	2c20      	cmp	r4, #32
 8017e7a:	d005      	beq.n	8017e88 <_ntoa_format+0xaa>
        if(negative) {
 8017e7c:	f1be 0f00 	cmp.w	lr, #0
 8017e80:	d02c      	beq.n	8017edc <_ntoa_format+0xfe>
            buf[len++] = '-';
 8017e82:	202d      	movs	r0, #45	; 0x2d
        }
        else if(flags & FLAGS_PLUS) {
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
 8017e84:	5528      	strb	r0, [r5, r4]
 8017e86:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8017e88:	0792      	lsls	r2, r2, #30
 8017e8a:	d041      	beq.n	8017f10 <_ntoa_format+0x132>
 8017e8c:	463a      	mov	r2, r7
 8017e8e:	4425      	add	r5, r4
 8017e90:	4414      	add	r4, r2
    while(len) {
 8017e92:	42a2      	cmp	r2, r4
 8017e94:	d140      	bne.n	8017f18 <_ntoa_format+0x13a>
    if(flags & FLAGS_LEFT) {
 8017e96:	f1ba 0f00 	cmp.w	sl, #0
 8017e9a:	d00a      	beq.n	8017eb2 <_ntoa_format+0xd4>
 8017e9c:	eba4 0907 	sub.w	r9, r4, r7
 8017ea0:	464d      	mov	r5, r9
        while(idx - start_idx < width) {
 8017ea2:	42b5      	cmp	r5, r6
 8017ea4:	eb05 0207 	add.w	r2, r5, r7
 8017ea8:	d341      	bcc.n	8017f2e <_ntoa_format+0x150>
 8017eaa:	4437      	add	r7, r6
 8017eac:	454e      	cmp	r6, r9
 8017eae:	bf28      	it	cs
 8017eb0:	463c      	movcs	r4, r7
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	b003      	add	sp, #12
 8017eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 8017eba:	f805 b004 	strb.w	fp, [r5, r4]
 8017ebe:	3401      	adds	r4, #1
 8017ec0:	e7b5      	b.n	8017e2e <_ntoa_format+0x50>
 8017ec2:	4664      	mov	r4, ip
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017ec4:	2810      	cmp	r0, #16
 8017ec6:	d0cb      	beq.n	8017e60 <_ntoa_format+0x82>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017ec8:	2802      	cmp	r0, #2
 8017eca:	d1d0      	bne.n	8017e6e <_ntoa_format+0x90>
 8017ecc:	2c1f      	cmp	r4, #31
 8017ece:	d8db      	bhi.n	8017e88 <_ntoa_format+0xaa>
            buf[len++] = 'b';
 8017ed0:	2062      	movs	r0, #98	; 0x62
 8017ed2:	e7ca      	b.n	8017e6a <_ntoa_format+0x8c>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017ed4:	2c1f      	cmp	r4, #31
 8017ed6:	d8d7      	bhi.n	8017e88 <_ntoa_format+0xaa>
            buf[len++] = 'X';
 8017ed8:	2058      	movs	r0, #88	; 0x58
 8017eda:	e7c6      	b.n	8017e6a <_ntoa_format+0x8c>
        else if(flags & FLAGS_PLUS) {
 8017edc:	0750      	lsls	r0, r2, #29
 8017ede:	d501      	bpl.n	8017ee4 <_ntoa_format+0x106>
            buf[len++] = '+';  // ignore the space if the '+' exists
 8017ee0:	202b      	movs	r0, #43	; 0x2b
 8017ee2:	e7cf      	b.n	8017e84 <_ntoa_format+0xa6>
        else if(flags & FLAGS_SPACE) {
 8017ee4:	0710      	lsls	r0, r2, #28
 8017ee6:	d5cf      	bpl.n	8017e88 <_ntoa_format+0xaa>
            buf[len++] = ' ';
 8017ee8:	2020      	movs	r0, #32
 8017eea:	e7cb      	b.n	8017e84 <_ntoa_format+0xa6>
            out(' ', buffer, idx++, maxlen);
 8017eec:	2020      	movs	r0, #32
        for(i = len; i < width; i++) {
 8017eee:	f109 0901 	add.w	r9, r9, #1
            out(' ', buffer, idx++, maxlen);
 8017ef2:	e9cd 1300 	strd	r1, r3, [sp]
 8017ef6:	47c0      	blx	r8
        for(i = len; i < width; i++) {
 8017ef8:	e9dd 1300 	ldrd	r1, r3, [sp]
 8017efc:	454e      	cmp	r6, r9
 8017efe:	eb0b 0209 	add.w	r2, fp, r9
 8017f02:	d8f3      	bhi.n	8017eec <_ntoa_format+0x10e>
 8017f04:	1b32      	subs	r2, r6, r4
 8017f06:	42b4      	cmp	r4, r6
 8017f08:	bf88      	it	hi
 8017f0a:	2200      	movhi	r2, #0
 8017f0c:	443a      	add	r2, r7
 8017f0e:	e7be      	b.n	8017e8e <_ntoa_format+0xb0>
 8017f10:	46a1      	mov	r9, r4
 8017f12:	eba7 0b04 	sub.w	fp, r7, r4
 8017f16:	e7f1      	b.n	8017efc <_ntoa_format+0x11e>
        out(buf[--len], buffer, idx++, maxlen);
 8017f18:	f102 0901 	add.w	r9, r2, #1
 8017f1c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8017f20:	e9cd 1300 	strd	r1, r3, [sp]
 8017f24:	47c0      	blx	r8
 8017f26:	464a      	mov	r2, r9
 8017f28:	e9dd 1300 	ldrd	r1, r3, [sp]
 8017f2c:	e7b1      	b.n	8017e92 <_ntoa_format+0xb4>
            out(' ', buffer, idx++, maxlen);
 8017f2e:	2020      	movs	r0, #32
 8017f30:	3501      	adds	r5, #1
 8017f32:	e9cd 1300 	strd	r1, r3, [sp]
 8017f36:	47c0      	blx	r8
 8017f38:	e9dd 1300 	ldrd	r1, r3, [sp]
 8017f3c:	e7b1      	b.n	8017ea2 <_ntoa_format+0xc4>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8017f3e:	2802      	cmp	r0, #2
 8017f40:	4664      	mov	r4, ip
 8017f42:	d194      	bne.n	8017e6e <_ntoa_format+0x90>
 8017f44:	e7c4      	b.n	8017ed0 <_ntoa_format+0xf2>

08017f46 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017f46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f4a:	b091      	sub	sp, #68	; 0x44
 8017f4c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017f4e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017f50:	9f1d      	ldr	r7, [sp, #116]	; 0x74
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8017f52:	b90d      	cbnz	r5, 8017f58 <_ntoa_long+0x12>
        flags &= ~FLAGS_HASH;
 8017f54:	f027 0710 	bic.w	r7, r7, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8017f58:	057c      	lsls	r4, r7, #21
 8017f5a:	d500      	bpl.n	8017f5e <_ntoa_long+0x18>
 8017f5c:	b305      	cbz	r5, 8017fa0 <_ntoa_long+0x5a>
 8017f5e:	f017 0f20 	tst.w	r7, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017f62:	46ac      	mov	ip, r5
 8017f64:	f10d 0e20 	add.w	lr, sp, #32
 8017f68:	f04f 0500 	mov.w	r5, #0
 8017f6c:	bf14      	ite	ne
 8017f6e:	f04f 0837 	movne.w	r8, #55	; 0x37
 8017f72:	f04f 0857 	moveq.w	r8, #87	; 0x57
 8017f76:	3501      	adds	r5, #1
            const char digit = (char)(value % base);
 8017f78:	fbbc f9f6 	udiv	r9, ip, r6
 8017f7c:	fb06 c919 	mls	r9, r6, r9, ip
 8017f80:	fa5f f489 	uxtb.w	r4, r9
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017f84:	f1b9 0f09 	cmp.w	r9, #9
 8017f88:	bf94      	ite	ls
 8017f8a:	3430      	addls	r4, #48	; 0x30
 8017f8c:	4444      	addhi	r4, r8
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017f8e:	45b4      	cmp	ip, r6
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017f90:	b2e4      	uxtb	r4, r4
 8017f92:	f80e 4b01 	strb.w	r4, [lr], #1
            value /= base;
 8017f96:	fbbc f4f6 	udiv	r4, ip, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8017f9a:	d301      	bcc.n	8017fa0 <_ntoa_long+0x5a>
 8017f9c:	2d20      	cmp	r5, #32
 8017f9e:	d110      	bne.n	8017fc2 <_ntoa_long+0x7c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8017fa0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017fa2:	9706      	str	r7, [sp, #24]
 8017fa4:	9405      	str	r4, [sp, #20]
 8017fa6:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8017fa8:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8017fac:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8017fb0:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8017fb4:	ac08      	add	r4, sp, #32
 8017fb6:	9400      	str	r4, [sp, #0]
 8017fb8:	f7ff ff11 	bl	8017dde <_ntoa_format>
}
 8017fbc:	b011      	add	sp, #68	; 0x44
 8017fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            value /= base;
 8017fc2:	46a4      	mov	ip, r4
 8017fc4:	e7d7      	b.n	8017f76 <_ntoa_long+0x30>

08017fc6 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8017fc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fca:	b093      	sub	sp, #76	; 0x4c
 8017fcc:	4699      	mov	r9, r3
 8017fce:	4606      	mov	r6, r0
 8017fd0:	460f      	mov	r7, r1
 8017fd2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8017fd4:	4690      	mov	r8, r2
 8017fd6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8017fda:	ea5a 030b 	orrs.w	r3, sl, fp
        flags &= ~FLAGS_HASH;
 8017fde:	bf08      	it	eq
 8017fe0:	f025 0510 	biceq.w	r5, r5, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8017fe4:	056b      	lsls	r3, r5, #21
 8017fe6:	d502      	bpl.n	8017fee <_ntoa_long_long+0x28>
 8017fe8:	ea5a 030b 	orrs.w	r3, sl, fp
 8017fec:	d03c      	beq.n	8018068 <_ntoa_long_long+0xa2>
 8017fee:	ab0a      	add	r3, sp, #40	; 0x28
 8017ff0:	f015 0f20 	tst.w	r5, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8017ff4:	f04f 0400 	mov.w	r4, #0
 8017ff8:	9308      	str	r3, [sp, #32]
 8017ffa:	bf14      	ite	ne
 8017ffc:	2337      	movne	r3, #55	; 0x37
 8017ffe:	2357      	moveq	r3, #87	; 0x57
 8018000:	9309      	str	r3, [sp, #36]	; 0x24
            const char digit = (char)(value % base);
 8018002:	4650      	mov	r0, sl
 8018004:	4659      	mov	r1, fp
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8018006:	3401      	adds	r4, #1
 8018008:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 801800c:	f7e8 fdfc 	bl	8000c08 <__aeabi_uldivmod>
            const char digit = (char)(value % base);
 8018010:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8018012:	2a09      	cmp	r2, #9
 8018014:	bf8a      	itet	hi
 8018016:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 8018018:	3230      	addls	r2, #48	; 0x30
 801801a:	18d2      	addhi	r2, r2, r3
 801801c:	9b08      	ldr	r3, [sp, #32]
 801801e:	b2d2      	uxtb	r2, r2
 8018020:	f803 2b01 	strb.w	r2, [r3], #1
 8018024:	9308      	str	r3, [sp, #32]
            value /= base;
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8018026:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 801802a:	459b      	cmp	fp, r3
 801802c:	bf08      	it	eq
 801802e:	4592      	cmpeq	sl, r2
 8018030:	d301      	bcc.n	8018036 <_ntoa_long_long+0x70>
 8018032:	2c20      	cmp	r4, #32
 8018034:	d115      	bne.n	8018062 <_ntoa_long_long+0x9c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8018036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018038:	4642      	mov	r2, r8
 801803a:	4639      	mov	r1, r7
 801803c:	4630      	mov	r0, r6
 801803e:	9305      	str	r3, [sp, #20]
 8018040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018042:	9506      	str	r5, [sp, #24]
 8018044:	9304      	str	r3, [sp, #16]
 8018046:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018048:	9303      	str	r3, [sp, #12]
 801804a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 801804e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8018052:	ab0a      	add	r3, sp, #40	; 0x28
 8018054:	9300      	str	r3, [sp, #0]
 8018056:	464b      	mov	r3, r9
 8018058:	f7ff fec1 	bl	8017dde <_ntoa_format>
}
 801805c:	b013      	add	sp, #76	; 0x4c
 801805e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            value /= base;
 8018062:	4682      	mov	sl, r0
 8018064:	468b      	mov	fp, r1
 8018066:	e7cc      	b.n	8018002 <_ntoa_long_long+0x3c>
    size_t len = 0U;
 8018068:	2400      	movs	r4, #0
 801806a:	e7e4      	b.n	8018036 <_ntoa_long_long+0x70>

0801806c <_vsnprintf.constprop.0>:
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 801806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018070:	4689      	mov	r9, r1
 8018072:	4690      	mov	r8, r2
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 8018074:	1e01      	subs	r1, r0, #0
 8018076:	4abf      	ldr	r2, [pc, #764]	; (8018374 <_vsnprintf.constprop.0+0x308>)
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 8018078:	b093      	sub	sp, #76	; 0x4c
 801807a:	461e      	mov	r6, r3
                out('%', buffer, idx++, maxlen);
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 801807c:	f04f 0500 	mov.w	r5, #0
        out = _out_null;
 8018080:	4bbd      	ldr	r3, [pc, #756]	; (8018378 <_vsnprintf.constprop.0+0x30c>)
 8018082:	bf18      	it	ne
 8018084:	4613      	movne	r3, r2
 8018086:	930b      	str	r3, [sp, #44]	; 0x2c
    while(*format) {
 8018088:	f898 0000 	ldrb.w	r0, [r8]
 801808c:	b968      	cbnz	r0, 80180aa <_vsnprintf.constprop.0+0x3e>
                break;
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801808e:	454d      	cmp	r5, r9
 8018090:	464b      	mov	r3, r9
 8018092:	f04f 0000 	mov.w	r0, #0
 8018096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018098:	bf2c      	ite	cs
 801809a:	f109 32ff 	addcs.w	r2, r9, #4294967295
 801809e:	462a      	movcc	r2, r5
 80180a0:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int)idx;
}
 80180a2:	4628      	mov	r0, r5
 80180a4:	b013      	add	sp, #76	; 0x4c
 80180a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(*format != '%') {
 80180aa:	2825      	cmp	r0, #37	; 0x25
 80180ac:	f108 0801 	add.w	r8, r8, #1
 80180b0:	d008      	beq.n	80180c4 <_vsnprintf.constprop.0+0x58>
                out(*format, buffer, idx++, maxlen);
 80180b2:	1c6c      	adds	r4, r5, #1
 80180b4:	462a      	mov	r2, r5
 80180b6:	910c      	str	r1, [sp, #48]	; 0x30
 80180b8:	464b      	mov	r3, r9
 80180ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80180bc:	47a8      	blx	r5
 80180be:	4625      	mov	r5, r4
 80180c0:	990c      	ldr	r1, [sp, #48]	; 0x30
                break;
 80180c2:	e7e1      	b.n	8018088 <_vsnprintf.constprop.0+0x1c>
        flags = 0U;
 80180c4:	2200      	movs	r2, #0
 80180c6:	e006      	b.n	80180d6 <_vsnprintf.constprop.0+0x6a>
            switch(*format) {
 80180c8:	2b2d      	cmp	r3, #45	; 0x2d
 80180ca:	d014      	beq.n	80180f6 <_vsnprintf.constprop.0+0x8a>
 80180cc:	2b30      	cmp	r3, #48	; 0x30
 80180ce:	d10c      	bne.n	80180ea <_vsnprintf.constprop.0+0x7e>
                    flags |= FLAGS_ZEROPAD;
 80180d0:	f042 0201 	orr.w	r2, r2, #1
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
 80180d4:	4680      	mov	r8, r0
            switch(*format) {
 80180d6:	4640      	mov	r0, r8
 80180d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80180dc:	2b2b      	cmp	r3, #43	; 0x2b
 80180de:	d00d      	beq.n	80180fc <_vsnprintf.constprop.0+0x90>
 80180e0:	d8f2      	bhi.n	80180c8 <_vsnprintf.constprop.0+0x5c>
 80180e2:	2b20      	cmp	r3, #32
 80180e4:	d00d      	beq.n	8018102 <_vsnprintf.constprop.0+0x96>
 80180e6:	2b23      	cmp	r3, #35	; 0x23
 80180e8:	d00e      	beq.n	8018108 <_vsnprintf.constprop.0+0x9c>
        if(_is_digit(*format)) {
 80180ea:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80180ee:	2c09      	cmp	r4, #9
 80180f0:	d829      	bhi.n	8018146 <_vsnprintf.constprop.0+0xda>
    unsigned int i = 0U;
 80180f2:	2700      	movs	r7, #0
 80180f4:	e010      	b.n	8018118 <_vsnprintf.constprop.0+0xac>
                    flags |= FLAGS_LEFT;
 80180f6:	f042 0202 	orr.w	r2, r2, #2
        } while(n);
 80180fa:	e7eb      	b.n	80180d4 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_PLUS;
 80180fc:	f042 0204 	orr.w	r2, r2, #4
        } while(n);
 8018100:	e7e8      	b.n	80180d4 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_SPACE;
 8018102:	f042 0208 	orr.w	r2, r2, #8
        } while(n);
 8018106:	e7e5      	b.n	80180d4 <_vsnprintf.constprop.0+0x68>
                    flags |= FLAGS_HASH;
 8018108:	f042 0210 	orr.w	r2, r2, #16
        } while(n);
 801810c:	e7e2      	b.n	80180d4 <_vsnprintf.constprop.0+0x68>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 801810e:	240a      	movs	r4, #10
 8018110:	4680      	mov	r8, r0
 8018112:	fb04 3707 	mla	r7, r4, r7, r3
 8018116:	3f30      	subs	r7, #48	; 0x30
    while(_is_digit(**str)) {
 8018118:	4640      	mov	r0, r8
 801811a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801811e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8018122:	2c09      	cmp	r4, #9
 8018124:	d9f3      	bls.n	801810e <_vsnprintf.constprop.0+0xa2>
        if(*format == '.') {
 8018126:	f898 3000 	ldrb.w	r3, [r8]
 801812a:	2b2e      	cmp	r3, #46	; 0x2e
 801812c:	d156      	bne.n	80181dc <_vsnprintf.constprop.0+0x170>
            if(_is_digit(*format)) {
 801812e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018132:	f108 0301 	add.w	r3, r8, #1
            flags |= FLAGS_PRECISION;
 8018136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
            if(_is_digit(*format)) {
 801813a:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
 801813e:	2c09      	cmp	r4, #9
 8018140:	d842      	bhi.n	80181c8 <_vsnprintf.constprop.0+0x15c>
    unsigned int i = 0U;
 8018142:	2400      	movs	r4, #0
 8018144:	e011      	b.n	801816a <_vsnprintf.constprop.0+0xfe>
        else if(*format == '*') {
 8018146:	2b2a      	cmp	r3, #42	; 0x2a
 8018148:	d108      	bne.n	801815c <_vsnprintf.constprop.0+0xf0>
            const int w = va_arg(va, int);
 801814a:	f856 7b04 	ldr.w	r7, [r6], #4
 801814e:	4680      	mov	r8, r0
            if(w < 0) {
 8018150:	2f00      	cmp	r7, #0
                flags |= FLAGS_LEFT;    // reverse padding
 8018152:	bfbc      	itt	lt
 8018154:	f042 0202 	orrlt.w	r2, r2, #2
                width = (unsigned int) - w;
 8018158:	427f      	neglt	r7, r7
            format++;
 801815a:	e7e4      	b.n	8018126 <_vsnprintf.constprop.0+0xba>
        width = 0U;
 801815c:	2700      	movs	r7, #0
 801815e:	e7e2      	b.n	8018126 <_vsnprintf.constprop.0+0xba>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8018160:	230a      	movs	r3, #10
 8018162:	fb03 0404 	mla	r4, r3, r4, r0
 8018166:	4663      	mov	r3, ip
 8018168:	3c30      	subs	r4, #48	; 0x30
    while(_is_digit(**str)) {
 801816a:	469c      	mov	ip, r3
 801816c:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8018170:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
 8018174:	f1be 0f09 	cmp.w	lr, #9
 8018178:	d9f2      	bls.n	8018160 <_vsnprintf.constprop.0+0xf4>
 801817a:	4698      	mov	r8, r3
        switch(*format) {
 801817c:	4643      	mov	r3, r8
 801817e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018182:	286c      	cmp	r0, #108	; 0x6c
 8018184:	d033      	beq.n	80181ee <_vsnprintf.constprop.0+0x182>
 8018186:	d82b      	bhi.n	80181e0 <_vsnprintf.constprop.0+0x174>
 8018188:	2868      	cmp	r0, #104	; 0x68
 801818a:	d039      	beq.n	8018200 <_vsnprintf.constprop.0+0x194>
 801818c:	286a      	cmp	r0, #106	; 0x6a
 801818e:	d041      	beq.n	8018214 <_vsnprintf.constprop.0+0x1a8>
 8018190:	4643      	mov	r3, r8
        switch(*format) {
 8018192:	4698      	mov	r8, r3
 8018194:	f818 0b01 	ldrb.w	r0, [r8], #1
 8018198:	2878      	cmp	r0, #120	; 0x78
 801819a:	d88a      	bhi.n	80180b2 <_vsnprintf.constprop.0+0x46>
 801819c:	2861      	cmp	r0, #97	; 0x61
 801819e:	d83c      	bhi.n	801821a <_vsnprintf.constprop.0+0x1ae>
 80181a0:	2825      	cmp	r0, #37	; 0x25
 80181a2:	d086      	beq.n	80180b2 <_vsnprintf.constprop.0+0x46>
 80181a4:	2824      	cmp	r0, #36	; 0x24
 80181a6:	d984      	bls.n	80180b2 <_vsnprintf.constprop.0+0x46>
 80181a8:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
 80181ac:	2b50      	cmp	r3, #80	; 0x50
 80181ae:	d180      	bne.n	80180b2 <_vsnprintf.constprop.0+0x46>
                    if(*format == 'x' || *format == 'X') {
 80181b0:	2858      	cmp	r0, #88	; 0x58
 80181b2:	d077      	beq.n	80182a4 <_vsnprintf.constprop.0+0x238>
                    else if(*format == 'p' || *format == 'P') {
 80181b4:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 80181b8:	2b50      	cmp	r3, #80	; 0x50
 80181ba:	d169      	bne.n	8018290 <_vsnprintf.constprop.0+0x224>
                            flags |= FLAGS_LONG;
 80181bc:	f442 7288 	orr.w	r2, r2, #272	; 0x110
                        base = 16U;
 80181c0:	2310      	movs	r3, #16
                    if(*format == 'X' || *format == 'P') {
 80181c2:	2850      	cmp	r0, #80	; 0x50
 80181c4:	d06f      	beq.n	80182a6 <_vsnprintf.constprop.0+0x23a>
 80181c6:	e070      	b.n	80182aa <_vsnprintf.constprop.0+0x23e>
            else if(*format == '*') {
 80181c8:	282a      	cmp	r0, #42	; 0x2a
 80181ca:	d106      	bne.n	80181da <_vsnprintf.constprop.0+0x16e>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 80181cc:	f856 4b04 	ldr.w	r4, [r6], #4
                format++;
 80181d0:	f108 0802 	add.w	r8, r8, #2
                precision = prec > 0 ? (unsigned int)prec : 0U;
 80181d4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                format++;
 80181d8:	e7d0      	b.n	801817c <_vsnprintf.constprop.0+0x110>
            format++;
 80181da:	4698      	mov	r8, r3
        precision = 0U;
 80181dc:	2400      	movs	r4, #0
 80181de:	e7cd      	b.n	801817c <_vsnprintf.constprop.0+0x110>
        switch(*format) {
 80181e0:	2874      	cmp	r0, #116	; 0x74
 80181e2:	d001      	beq.n	80181e8 <_vsnprintf.constprop.0+0x17c>
 80181e4:	287a      	cmp	r0, #122	; 0x7a
 80181e6:	d1d3      	bne.n	8018190 <_vsnprintf.constprop.0+0x124>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80181e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
                break;
 80181ec:	e7d1      	b.n	8018192 <_vsnprintf.constprop.0+0x126>
                if(*format == 'l') {
 80181ee:	f898 0001 	ldrb.w	r0, [r8, #1]
 80181f2:	286c      	cmp	r0, #108	; 0x6c
 80181f4:	d1f8      	bne.n	80181e8 <_vsnprintf.constprop.0+0x17c>
                    flags |= FLAGS_LONG_LONG;
 80181f6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
                    format++;
 80181fa:	f108 0302 	add.w	r3, r8, #2
 80181fe:	e7c8      	b.n	8018192 <_vsnprintf.constprop.0+0x126>
                if(*format == 'h') {
 8018200:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018204:	2868      	cmp	r0, #104	; 0x68
 8018206:	d002      	beq.n	801820e <_vsnprintf.constprop.0+0x1a2>
                flags |= FLAGS_SHORT;
 8018208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801820c:	e7c1      	b.n	8018192 <_vsnprintf.constprop.0+0x126>
                    flags |= FLAGS_CHAR;
 801820e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8018212:	e7f2      	b.n	80181fa <_vsnprintf.constprop.0+0x18e>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8018214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
                break;
 8018218:	e7bb      	b.n	8018192 <_vsnprintf.constprop.0+0x126>
 801821a:	f1a0 0362 	sub.w	r3, r0, #98	; 0x62
 801821e:	2b16      	cmp	r3, #22
 8018220:	f63f af47 	bhi.w	80180b2 <_vsnprintf.constprop.0+0x46>
 8018224:	f20f 0c04 	addw	ip, pc, #4
 8018228:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 801822c:	08018289 	.word	0x08018289
 8018230:	080183c3 	.word	0x080183c3
 8018234:	08018289 	.word	0x08018289
 8018238:	080180b3 	.word	0x080180b3
 801823c:	080180b3 	.word	0x080180b3
 8018240:	080180b3 	.word	0x080180b3
 8018244:	080180b3 	.word	0x080180b3
 8018248:	08018289 	.word	0x08018289
 801824c:	080180b3 	.word	0x080180b3
 8018250:	080180b3 	.word	0x080180b3
 8018254:	080180b3 	.word	0x080180b3
 8018258:	080180b3 	.word	0x080180b3
 801825c:	080180b3 	.word	0x080180b3
 8018260:	08018289 	.word	0x08018289
 8018264:	08018289 	.word	0x08018289
 8018268:	080180b3 	.word	0x080180b3
 801826c:	080180b3 	.word	0x080180b3
 8018270:	0801844b 	.word	0x0801844b
 8018274:	080180b3 	.word	0x080180b3
 8018278:	08018289 	.word	0x08018289
 801827c:	080180b3 	.word	0x080180b3
 8018280:	080180b3 	.word	0x080180b3
 8018284:	08018289 	.word	0x08018289
                    if(*format == 'x' || *format == 'X') {
 8018288:	2878      	cmp	r0, #120	; 0x78
 801828a:	d191      	bne.n	80181b0 <_vsnprintf.constprop.0+0x144>
                        base = 16U;
 801828c:	2310      	movs	r3, #16
 801828e:	e010      	b.n	80182b2 <_vsnprintf.constprop.0+0x246>
                    else if(*format == 'o') {
 8018290:	286f      	cmp	r0, #111	; 0x6f
 8018292:	f000 8145 	beq.w	8018520 <_vsnprintf.constprop.0+0x4b4>
                    else if(*format == 'b') {
 8018296:	2862      	cmp	r0, #98	; 0x62
 8018298:	f000 8144 	beq.w	8018524 <_vsnprintf.constprop.0+0x4b8>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 801829c:	f022 0210 	bic.w	r2, r2, #16
                        base = 10U;
 80182a0:	230a      	movs	r3, #10
 80182a2:	e78e      	b.n	80181c2 <_vsnprintf.constprop.0+0x156>
                        base = 16U;
 80182a4:	2310      	movs	r3, #16
                        flags |= FLAGS_UPPERCASE;
 80182a6:	f042 0220 	orr.w	r2, r2, #32
                    if((*format != 'i') && (*format != 'd')) {
 80182aa:	2869      	cmp	r0, #105	; 0x69
 80182ac:	d003      	beq.n	80182b6 <_vsnprintf.constprop.0+0x24a>
 80182ae:	2864      	cmp	r0, #100	; 0x64
 80182b0:	d001      	beq.n	80182b6 <_vsnprintf.constprop.0+0x24a>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80182b2:	f022 020c 	bic.w	r2, r2, #12
                    if(flags & FLAGS_PRECISION) {
 80182b6:	f412 6f80 	tst.w	r2, #1024	; 0x400
                        flags &= ~FLAGS_ZEROPAD;
 80182ba:	bf18      	it	ne
 80182bc:	f022 0201 	bicne.w	r2, r2, #1
                    if((*format == 'i') || (*format == 'd')) {
 80182c0:	2869      	cmp	r0, #105	; 0x69
 80182c2:	f402 7c00 	and.w	ip, r2, #512	; 0x200
 80182c6:	d001      	beq.n	80182cc <_vsnprintf.constprop.0+0x260>
 80182c8:	2864      	cmp	r0, #100	; 0x64
 80182ca:	d142      	bne.n	8018352 <_vsnprintf.constprop.0+0x2e6>
                        if(flags & FLAGS_LONG_LONG) {
 80182cc:	f1bc 0f00 	cmp.w	ip, #0
 80182d0:	d024      	beq.n	801831c <_vsnprintf.constprop.0+0x2b0>
                            const long long value = va_arg(va, long long);
 80182d2:	3607      	adds	r6, #7
 80182d4:	f026 0007 	bic.w	r0, r6, #7
 80182d8:	4682      	mov	sl, r0
 80182da:	6840      	ldr	r0, [r0, #4]
 80182dc:	f85a 6b08 	ldr.w	r6, [sl], #8
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80182e0:	9304      	str	r3, [sp, #16]
 80182e2:	2300      	movs	r3, #0
 80182e4:	2e00      	cmp	r6, #0
 80182e6:	9406      	str	r4, [sp, #24]
 80182e8:	9305      	str	r3, [sp, #20]
 80182ea:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 80182ee:	9302      	str	r3, [sp, #8]
 80182f0:	4603      	mov	r3, r0
 80182f2:	f173 0000 	sbcs.w	r0, r3, #0
 80182f6:	e9cd 7207 	strd	r7, r2, [sp, #28]
 80182fa:	4632      	mov	r2, r6
 80182fc:	da02      	bge.n	8018304 <_vsnprintf.constprop.0+0x298>
 80182fe:	4272      	negs	r2, r6
 8018300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8018304:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018306:	910c      	str	r1, [sp, #48]	; 0x30
 8018308:	e9cd 2300 	strd	r2, r3, [sp]
 801830c:	464b      	mov	r3, r9
 801830e:	462a      	mov	r2, r5
 8018310:	f7ff fe59 	bl	8017fc6 <_ntoa_long_long>
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8018314:	4605      	mov	r5, r0
 8018316:	990c      	ldr	r1, [sp, #48]	; 0x30
                    break;
 8018318:	4656      	mov	r6, sl
 801831a:	e6b5      	b.n	8018088 <_vsnprintf.constprop.0+0x1c>
                        else if(flags & FLAGS_LONG) {
 801831c:	05d0      	lsls	r0, r2, #23
 801831e:	f106 0a04 	add.w	sl, r6, #4
 8018322:	d50c      	bpl.n	801833e <_vsnprintf.constprop.0+0x2d2>
                            const long value = va_arg(va, long);
 8018324:	6830      	ldr	r0, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8018326:	2800      	cmp	r0, #0
 8018328:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801832c:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 8018330:	bfb8      	it	lt
 8018332:	4240      	neglt	r0, r0
 8018334:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8018338:	9301      	str	r3, [sp, #4]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801833a:	9000      	str	r0, [sp, #0]
 801833c:	e02a      	b.n	8018394 <_vsnprintf.constprop.0+0x328>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 801833e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8018342:	6830      	ldr	r0, [r6, #0]
 8018344:	d001      	beq.n	801834a <_vsnprintf.constprop.0+0x2de>
 8018346:	b2c0      	uxtb	r0, r0
 8018348:	e7ed      	b.n	8018326 <_vsnprintf.constprop.0+0x2ba>
                                                                                                                                       int) : va_arg(va, int);
 801834a:	0616      	lsls	r6, r2, #24
 801834c:	bf48      	it	mi
 801834e:	b200      	sxthmi	r0, r0
 8018350:	e7e9      	b.n	8018326 <_vsnprintf.constprop.0+0x2ba>
                        if(flags & FLAGS_LONG_LONG) {
 8018352:	f1bc 0f00 	cmp.w	ip, #0
 8018356:	d011      	beq.n	801837c <_vsnprintf.constprop.0+0x310>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8018358:	3607      	adds	r6, #7
 801835a:	9304      	str	r3, [sp, #16]
 801835c:	2300      	movs	r3, #0
 801835e:	9406      	str	r4, [sp, #24]
 8018360:	f026 0a07 	bic.w	sl, r6, #7
 8018364:	9305      	str	r3, [sp, #20]
 8018366:	9302      	str	r3, [sp, #8]
 8018368:	e9cd 7207 	strd	r7, r2, [sp, #28]
 801836c:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8018370:	e7c8      	b.n	8018304 <_vsnprintf.constprop.0+0x298>
 8018372:	bf00      	nop
 8018374:	08017dd5 	.word	0x08017dd5
 8018378:	08017ddd 	.word	0x08017ddd
                        else if(flags & FLAGS_LONG) {
 801837c:	05d0      	lsls	r0, r2, #23
 801837e:	f106 0a04 	add.w	sl, r6, #4
 8018382:	d50e      	bpl.n	80183a2 <_vsnprintf.constprop.0+0x336>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8018384:	f8cd c004 	str.w	ip, [sp, #4]
 8018388:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801838c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8018390:	6833      	ldr	r3, [r6, #0]
 8018392:	9300      	str	r3, [sp, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8018394:	464b      	mov	r3, r9
 8018396:	462a      	mov	r2, r5
 8018398:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801839a:	910c      	str	r1, [sp, #48]	; 0x30
 801839c:	f7ff fdd3 	bl	8017f46 <_ntoa_long>
 80183a0:	e7b8      	b.n	8018314 <_vsnprintf.constprop.0+0x2a8>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80183a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80183a6:	6830      	ldr	r0, [r6, #0]
 80183a8:	d007      	beq.n	80183ba <_vsnprintf.constprop.0+0x34e>
 80183aa:	b2c0      	uxtb	r0, r0
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80183ac:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80183b0:	2300      	movs	r3, #0
 80183b2:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80183b6:	9301      	str	r3, [sp, #4]
 80183b8:	e7bf      	b.n	801833a <_vsnprintf.constprop.0+0x2ce>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80183ba:	0616      	lsls	r6, r2, #24
 80183bc:	bf48      	it	mi
 80183be:	b280      	uxthmi	r0, r0
 80183c0:	e7f4      	b.n	80183ac <_vsnprintf.constprop.0+0x340>
                    if(!(flags & FLAGS_LEFT)) {
 80183c2:	f012 0302 	ands.w	r3, r2, #2
 80183c6:	930c      	str	r3, [sp, #48]	; 0x30
 80183c8:	d028      	beq.n	801841c <_vsnprintf.constprop.0+0x3b0>
                    unsigned int l = 1U;
 80183ca:	f04f 0a01 	mov.w	sl, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80183ce:	f856 0b04 	ldr.w	r0, [r6], #4
 80183d2:	464b      	mov	r3, r9
 80183d4:	910d      	str	r1, [sp, #52]	; 0x34
 80183d6:	462a      	mov	r2, r5
 80183d8:	b2c0      	uxtb	r0, r0
 80183da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80183dc:	47a0      	blx	r4
 80183de:	f105 0b01 	add.w	fp, r5, #1
                    if(flags & FLAGS_LEFT) {
 80183e2:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 80183e6:	b373      	cbz	r3, 8018446 <_vsnprintf.constprop.0+0x3da>
 80183e8:	4654      	mov	r4, sl
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80183ea:	465a      	mov	r2, fp
 80183ec:	e023      	b.n	8018436 <_vsnprintf.constprop.0+0x3ca>
                            out(' ', buffer, idx++, maxlen);
 80183ee:	910d      	str	r1, [sp, #52]	; 0x34
 80183f0:	464b      	mov	r3, r9
 80183f2:	2020      	movs	r0, #32
 80183f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80183f6:	47a0      	blx	r4
 80183f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80183fa:	eb05 020a 	add.w	r2, r5, sl
                        while(l++ < width) {
 80183fe:	f10a 0a01 	add.w	sl, sl, #1
 8018402:	4557      	cmp	r7, sl
 8018404:	d8f3      	bhi.n	80183ee <_vsnprintf.constprop.0+0x382>
 8018406:	2f00      	cmp	r7, #0
 8018408:	f107 33ff 	add.w	r3, r7, #4294967295
 801840c:	f107 0a01 	add.w	sl, r7, #1
 8018410:	bf04      	itt	eq
 8018412:	2300      	moveq	r3, #0
 8018414:	f04f 0a02 	moveq.w	sl, #2
 8018418:	441d      	add	r5, r3
 801841a:	e7d8      	b.n	80183ce <_vsnprintf.constprop.0+0x362>
 801841c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018420:	e7eb      	b.n	80183fa <_vsnprintf.constprop.0+0x38e>
                            out(' ', buffer, idx++, maxlen);
 8018422:	1c53      	adds	r3, r2, #1
 8018424:	910d      	str	r1, [sp, #52]	; 0x34
 8018426:	2020      	movs	r0, #32
 8018428:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801842a:	930c      	str	r3, [sp, #48]	; 0x30
 801842c:	464b      	mov	r3, r9
 801842e:	47a8      	blx	r5
 8018430:	3401      	adds	r4, #1
 8018432:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
                        while(l++ < width) {
 8018436:	42a7      	cmp	r7, r4
 8018438:	d8f3      	bhi.n	8018422 <_vsnprintf.constprop.0+0x3b6>
 801843a:	eba7 030a 	sub.w	r3, r7, sl
 801843e:	4557      	cmp	r7, sl
 8018440:	bf38      	it	cc
 8018442:	2300      	movcc	r3, #0
 8018444:	449b      	add	fp, r3
                    break;
 8018446:	465d      	mov	r5, fp
 8018448:	e61e      	b.n	8018088 <_vsnprintf.constprop.0+0x1c>
                    const char * p = va_arg(va, char *);
 801844a:	4633      	mov	r3, r6
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801844c:	2c00      	cmp	r4, #0
                    const char * p = va_arg(va, char *);
 801844e:	f853 ab04 	ldr.w	sl, [r3], #4
 8018452:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8018454:	bf14      	ite	ne
 8018456:	4623      	movne	r3, r4
 8018458:	f04f 33ff 	moveq.w	r3, #4294967295
 801845c:	46d3      	mov	fp, sl
 801845e:	4453      	add	r3, sl
    for(s = str; *s && maxsize--; ++s);
 8018460:	f89b 0000 	ldrb.w	r0, [fp]
 8018464:	b108      	cbz	r0, 801846a <_vsnprintf.constprop.0+0x3fe>
 8018466:	455b      	cmp	r3, fp
 8018468:	d111      	bne.n	801848e <_vsnprintf.constprop.0+0x422>
                    if(flags & FLAGS_PRECISION) {
 801846a:	f412 6380 	ands.w	r3, r2, #1024	; 0x400
    return (unsigned int)(s - str);
 801846e:	ebab 0b0a 	sub.w	fp, fp, sl
                    if(flags & FLAGS_PRECISION) {
 8018472:	930d      	str	r3, [sp, #52]	; 0x34
 8018474:	d002      	beq.n	801847c <_vsnprintf.constprop.0+0x410>
                        l = (l < precision ? l : precision);
 8018476:	45a3      	cmp	fp, r4
 8018478:	bf28      	it	cs
 801847a:	46a3      	movcs	fp, r4
                    if(!(flags & FLAGS_LEFT)) {
 801847c:	f012 0302 	ands.w	r3, r2, #2
 8018480:	930e      	str	r3, [sp, #56]	; 0x38
 8018482:	d11d      	bne.n	80184c0 <_vsnprintf.constprop.0+0x454>
 8018484:	ebab 0305 	sub.w	r3, fp, r5
 8018488:	462a      	mov	r2, r5
 801848a:	9310      	str	r3, [sp, #64]	; 0x40
 801848c:	e00b      	b.n	80184a6 <_vsnprintf.constprop.0+0x43a>
    for(s = str; *s && maxsize--; ++s);
 801848e:	f10b 0b01 	add.w	fp, fp, #1
 8018492:	e7e5      	b.n	8018460 <_vsnprintf.constprop.0+0x3f4>
                            out(' ', buffer, idx++, maxlen);
 8018494:	1c53      	adds	r3, r2, #1
 8018496:	9111      	str	r1, [sp, #68]	; 0x44
 8018498:	2020      	movs	r0, #32
 801849a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801849c:	930f      	str	r3, [sp, #60]	; 0x3c
 801849e:	464b      	mov	r3, r9
 80184a0:	47b0      	blx	r6
 80184a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80184a4:	9911      	ldr	r1, [sp, #68]	; 0x44
                        while(l++ < width) {
 80184a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184a8:	18d3      	adds	r3, r2, r3
 80184aa:	429f      	cmp	r7, r3
 80184ac:	d8f2      	bhi.n	8018494 <_vsnprintf.constprop.0+0x428>
 80184ae:	eba7 030b 	sub.w	r3, r7, fp
 80184b2:	455f      	cmp	r7, fp
 80184b4:	bf38      	it	cc
 80184b6:	2300      	movcc	r3, #0
 80184b8:	f10b 0b01 	add.w	fp, fp, #1
 80184bc:	441d      	add	r5, r3
 80184be:	449b      	add	fp, r3
 80184c0:	4656      	mov	r6, sl
 80184c2:	eba5 0a0a 	sub.w	sl, r5, sl
 80184c6:	e006      	b.n	80184d6 <_vsnprintf.constprop.0+0x46a>
 80184c8:	461c      	mov	r4, r3
                        out(*(p++), buffer, idx++, maxlen);
 80184ca:	462a      	mov	r2, r5
 80184cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80184ce:	464b      	mov	r3, r9
 80184d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80184d2:	47a8      	blx	r5
 80184d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80184d6:	eb0a 0506 	add.w	r5, sl, r6
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80184da:	f816 0b01 	ldrb.w	r0, [r6], #1
 80184de:	b128      	cbz	r0, 80184ec <_vsnprintf.constprop.0+0x480>
 80184e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d0f1      	beq.n	80184ca <_vsnprintf.constprop.0+0x45e>
 80184e6:	1e63      	subs	r3, r4, #1
 80184e8:	2c00      	cmp	r4, #0
 80184ea:	d1ed      	bne.n	80184c8 <_vsnprintf.constprop.0+0x45c>
                    if(flags & FLAGS_LEFT) {
 80184ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184ee:	b1ab      	cbz	r3, 801851c <_vsnprintf.constprop.0+0x4b0>
 80184f0:	462a      	mov	r2, r5
 80184f2:	ebab 0a05 	sub.w	sl, fp, r5
 80184f6:	e007      	b.n	8018508 <_vsnprintf.constprop.0+0x49c>
                            out(' ', buffer, idx++, maxlen);
 80184f8:	1c56      	adds	r6, r2, #1
 80184fa:	910d      	str	r1, [sp, #52]	; 0x34
 80184fc:	464b      	mov	r3, r9
 80184fe:	2020      	movs	r0, #32
 8018500:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018502:	47a0      	blx	r4
 8018504:	4632      	mov	r2, r6
 8018506:	990d      	ldr	r1, [sp, #52]	; 0x34
                        while(l++ < width) {
 8018508:	eb02 030a 	add.w	r3, r2, sl
 801850c:	429f      	cmp	r7, r3
 801850e:	d8f3      	bhi.n	80184f8 <_vsnprintf.constprop.0+0x48c>
 8018510:	eba7 030b 	sub.w	r3, r7, fp
 8018514:	455f      	cmp	r7, fp
 8018516:	bf38      	it	cc
 8018518:	2300      	movcc	r3, #0
 801851a:	441d      	add	r5, r3
                    const char * p = va_arg(va, char *);
 801851c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                    break;
 801851e:	e5b3      	b.n	8018088 <_vsnprintf.constprop.0+0x1c>
                        base =  8U;
 8018520:	2308      	movs	r3, #8
 8018522:	e6c6      	b.n	80182b2 <_vsnprintf.constprop.0+0x246>
                        base =  2U;
 8018524:	2302      	movs	r3, #2
                    if(*format == 'X' || *format == 'P') {
 8018526:	e6c4      	b.n	80182b2 <_vsnprintf.constprop.0+0x246>

08018528 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 8018528:	b40c      	push	{r2, r3}
 801852a:	b507      	push	{r0, r1, r2, lr}
 801852c:	ab04      	add	r3, sp, #16
 801852e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, format);
 8018532:	9301      	str	r3, [sp, #4]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8018534:	f7ff fd9a 	bl	801806c <_vsnprintf.constprop.0>
    va_end(va);
    return ret;
}
 8018538:	b003      	add	sp, #12
 801853a:	f85d eb04 	ldr.w	lr, [sp], #4
 801853e:	b002      	add	sp, #8
 8018540:	4770      	bx	lr

08018542 <lv_style_init>:
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)")
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8018542:	2108      	movs	r1, #8
 8018544:	f7ff bbe6 	b.w	8017d14 <lv_memset_00>

08018548 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8018548:	f990 3005 	ldrsb.w	r3, [r0, #5]
 801854c:	2b00      	cmp	r3, #0
{
 801854e:	b510      	push	{r4, lr}
 8018550:	4604      	mov	r4, r0
    if(style->is_const) {
 8018552:	db0b      	blt.n	801856c <lv_style_reset+0x24>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8018554:	79c3      	ldrb	r3, [r0, #7]
 8018556:	2b01      	cmp	r3, #1
 8018558:	d902      	bls.n	8018560 <lv_style_reset+0x18>
 801855a:	6800      	ldr	r0, [r0, #0]
 801855c:	f7ff f9da 	bl	8017914 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8018560:	4620      	mov	r0, r4
 8018562:	2108      	movs	r1, #8
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif

}
 8018564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8018568:	f7ff bbd4 	b.w	8017d14 <lv_memset_00>
}
 801856c:	bd10      	pop	{r4, pc}
	...

08018570 <lv_style_register_prop>:

lv_style_prop_t lv_style_register_prop(void)
{
    static uint16_t act_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
    act_id++;
 8018570:	4b02      	ldr	r3, [pc, #8]	; (801857c <lv_style_register_prop+0xc>)
 8018572:	8818      	ldrh	r0, [r3, #0]
 8018574:	3001      	adds	r0, #1
 8018576:	b280      	uxth	r0, r0
 8018578:	8018      	strh	r0, [r3, #0]
    return act_id;
}
 801857a:	4770      	bx	lr
 801857c:	20000034 	.word	0x20000034

08018580 <lv_style_remove_prop>:

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8018580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    LV_ASSERT_STYLE(style);

    if(style->is_const) {
 8018582:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8018586:	4604      	mov	r4, r0
 8018588:	460e      	mov	r6, r1
    if(style->is_const) {
 801858a:	2b00      	cmp	r3, #0
 801858c:	db57      	blt.n	801863e <lv_style_remove_prop+0xbe>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
 801858e:	79c0      	ldrb	r0, [r0, #7]
 8018590:	2800      	cmp	r0, #0
 8018592:	d054      	beq.n	801863e <lv_style_remove_prop+0xbe>

    if(style->prop_cnt == 1) {
 8018594:	2801      	cmp	r0, #1
 8018596:	d10a      	bne.n	80185ae <lv_style_remove_prop+0x2e>
        if(style->prop1 == prop) {
 8018598:	88a3      	ldrh	r3, [r4, #4]
 801859a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 801859e:	428a      	cmp	r2, r1
 80185a0:	d14d      	bne.n	801863e <lv_style_remove_prop+0xbe>
            style->prop1 = LV_STYLE_PROP_INV;
 80185a2:	f36f 030e 	bfc	r3, #0, #15
 80185a6:	80a3      	strh	r3, [r4, #4]
            style->prop_cnt = 0;
 80185a8:	2300      	movs	r3, #0
 80185aa:	71e3      	strb	r3, [r4, #7]
            return true;
        }
    }

    return false;
}
 80185ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80185ae:	6825      	ldr	r5, [r4, #0]
 80185b0:	b202      	sxth	r2, r0
    for(i = 0; i < style->prop_cnt; i++) {
 80185b2:	2300      	movs	r3, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80185b4:	eb05 0780 	add.w	r7, r5, r0, lsl #2
        if(old_props[i] == prop) {
 80185b8:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 80185bc:	42b1      	cmp	r1, r6
 80185be:	d13b      	bne.n	8018638 <lv_style_remove_prop+0xb8>
            if(style->prop_cnt == 2) {
 80185c0:	2802      	cmp	r0, #2
 80185c2:	d116      	bne.n	80185f2 <lv_style_remove_prop+0x72>
                style->prop_cnt = 1;
 80185c4:	2101      	movs	r1, #1
 80185c6:	71e1      	strb	r1, [r4, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 80185c8:	b973      	cbnz	r3, 80185e8 <lv_style_remove_prop+0x68>
 80185ca:	887a      	ldrh	r2, [r7, #2]
 80185cc:	88a1      	ldrh	r1, [r4, #4]
 80185ce:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80185d2:	f362 010e 	bfi	r1, r2, #0, #15
 80185d6:	80a1      	strh	r1, [r4, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 80185d8:	b94b      	cbnz	r3, 80185ee <lv_style_remove_prop+0x6e>
 80185da:	686b      	ldr	r3, [r5, #4]
 80185dc:	6023      	str	r3, [r4, #0]
            lv_mem_free(old_values);
 80185de:	4628      	mov	r0, r5
 80185e0:	f7ff f998 	bl	8017914 <lv_mem_free>
            return true;
 80185e4:	2001      	movs	r0, #1
 80185e6:	e7e1      	b.n	80185ac <lv_style_remove_prop+0x2c>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 80185e8:	f835 2022 	ldrh.w	r2, [r5, r2, lsl #2]
 80185ec:	e7ee      	b.n	80185cc <lv_style_remove_prop+0x4c>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 80185ee:	682b      	ldr	r3, [r5, #0]
 80185f0:	e7f4      	b.n	80185dc <lv_style_remove_prop+0x5c>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80185f2:	3801      	subs	r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 80185f4:	2306      	movs	r3, #6
 80185f6:	4358      	muls	r0, r3
 80185f8:	f7ff fb0e 	bl	8017c18 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 80185fc:	b1f8      	cbz	r0, 801863e <lv_style_remove_prop+0xbe>
                style->prop_cnt--;
 80185fe:	79e3      	ldrb	r3, [r4, #7]
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8018600:	2200      	movs	r2, #0
                style->v_p.values_and_props = new_values_and_props;
 8018602:	6020      	str	r0, [r4, #0]
                style->prop_cnt--;
 8018604:	3b01      	subs	r3, #1
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8018606:	4694      	mov	ip, r2
                style->prop_cnt--;
 8018608:	b2db      	uxtb	r3, r3
 801860a:	71e3      	strb	r3, [r4, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801860c:	009b      	lsls	r3, r3, #2
                    if(old_props[j] != prop) {
 801860e:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 8018612:	42b1      	cmp	r1, r6
 8018614:	d00b      	beq.n	801862e <lv_style_remove_prop+0xae>
                        new_values[i] = old_values[j];
 8018616:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 801861a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
                        new_props[i++] = old_props[j];
 801861e:	eb00 014c 	add.w	r1, r0, ip, lsl #1
 8018622:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8018626:	f10c 0c01 	add.w	ip, ip, #1
 801862a:	f821 e003 	strh.w	lr, [r1, r3]
                for(i = j = 0; j <= style->prop_cnt; j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 801862e:	3201      	adds	r2, #1
 8018630:	79e1      	ldrb	r1, [r4, #7]
 8018632:	4291      	cmp	r1, r2
 8018634:	d2eb      	bcs.n	801860e <lv_style_remove_prop+0x8e>
 8018636:	e7d2      	b.n	80185de <lv_style_remove_prop+0x5e>
    for(i = 0; i < style->prop_cnt; i++) {
 8018638:	3301      	adds	r3, #1
 801863a:	4298      	cmp	r0, r3
 801863c:	d8bc      	bhi.n	80185b8 <lv_style_remove_prop+0x38>
        return false;
 801863e:	2000      	movs	r0, #0
 8018640:	e7b4      	b.n	80185ac <lv_style_remove_prop+0x2c>

08018642 <lv_style_get_prop>:
    uint8_t group = _lv_style_get_prop_group(prop);
    style->has_group |= 1 << group;
}

lv_res_t lv_style_get_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8018642:	4603      	mov	r3, r0
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_res_t lv_style_get_prop_inlined(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
    if(style->is_const) {
 8018644:	f990 0005 	ldrsb.w	r0, [r0, #5]
 8018648:	2800      	cmp	r0, #0
 801864a:	b570      	push	{r4, r5, r6, lr}
 801864c:	da0b      	bge.n	8018666 <lv_style_get_prop+0x24>
        const lv_style_const_prop_t *const_prop;
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	8818      	ldrh	r0, [r3, #0]
 8018652:	b900      	cbnz	r0, 8018656 <lv_style_get_prop+0x14>
   return lv_style_get_prop_inlined(style, prop, value);
}
 8018654:	bd70      	pop	{r4, r5, r6, pc}
            if(const_prop->prop == prop) {
 8018656:	4281      	cmp	r1, r0
 8018658:	d103      	bne.n	8018662 <lv_style_get_prop+0x20>
                *value = const_prop->value;
 801865a:	685b      	ldr	r3, [r3, #4]
                return LV_RES_OK;
            }
        }
    } else if(style->prop1 == prop) {
        *value = style->v_p.value1;
        return LV_RES_OK;
 801865c:	2001      	movs	r0, #1
        *value = style->v_p.value1;
 801865e:	6013      	str	r3, [r2, #0]
        return LV_RES_OK;
 8018660:	e7f8      	b.n	8018654 <lv_style_get_prop+0x12>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8018662:	3308      	adds	r3, #8
 8018664:	e7f4      	b.n	8018650 <lv_style_get_prop+0xe>
    if(style->prop_cnt == 0) return LV_RES_INV;
 8018666:	79d8      	ldrb	r0, [r3, #7]
 8018668:	2800      	cmp	r0, #0
 801866a:	d0f3      	beq.n	8018654 <lv_style_get_prop+0x12>
    if(style->prop_cnt > 1) {
 801866c:	2801      	cmp	r0, #1
 801866e:	d90f      	bls.n	8018690 <lv_style_get_prop+0x4e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018670:	681c      	ldr	r4, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8018672:	2300      	movs	r3, #0
 8018674:	eb04 0580 	add.w	r5, r4, r0, lsl #2
            if(props[i] == prop) {
 8018678:	f835 6b02 	ldrh.w	r6, [r5], #2
 801867c:	42b1      	cmp	r1, r6
 801867e:	d102      	bne.n	8018686 <lv_style_get_prop+0x44>
                *value = values[i];
 8018680:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018684:	e7ea      	b.n	801865c <lv_style_get_prop+0x1a>
        for(i = 0; i < style->prop_cnt; i++) {
 8018686:	3301      	adds	r3, #1
 8018688:	4298      	cmp	r0, r3
 801868a:	d8f5      	bhi.n	8018678 <lv_style_get_prop+0x36>
        return LV_RES_INV;
 801868c:	2000      	movs	r0, #0
 801868e:	e7e1      	b.n	8018654 <lv_style_get_prop+0x12>
    } else if(style->prop1 == prop) {
 8018690:	8898      	ldrh	r0, [r3, #4]
 8018692:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018696:	4288      	cmp	r0, r1
 8018698:	d1f8      	bne.n	801868c <lv_style_get_prop+0x4a>
        *value = style->v_p.value1;
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	e7de      	b.n	801865c <lv_style_get_prop+0x1a>
	...

080186a0 <lv_style_transition_dsc_init>:

void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[], lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * user_data)
{
 80186a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186a2:	460f      	mov	r7, r1
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 80186a4:	2114      	movs	r1, #20
{
 80186a6:	4604      	mov	r4, r0
 80186a8:	461e      	mov	r6, r3
 80186aa:	4615      	mov	r5, r2
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 80186ac:	f7ff fb32 	bl	8017d14 <lv_memset_00>
    tr->props = props;
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80186b0:	4b05      	ldr	r3, [pc, #20]	; (80186c8 <lv_style_transition_dsc_init+0x28>)
    tr->props = props;
 80186b2:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80186b4:	2d00      	cmp	r5, #0
 80186b6:	bf08      	it	eq
 80186b8:	461d      	moveq	r5, r3
    tr->time = time;
    tr->delay = delay;
 80186ba:	9b06      	ldr	r3, [sp, #24]
 80186bc:	6123      	str	r3, [r4, #16]
#if LV_USE_USER_DATA
    tr->user_data = user_data;
 80186be:	9b07      	ldr	r3, [sp, #28]
    tr->time = time;
 80186c0:	e9c4 5602 	strd	r5, r6, [r4, #8]
    tr->user_data = user_data;
 80186c4:	6063      	str	r3, [r4, #4]
#else
    LV_UNUSED(user_data);
#endif
}
 80186c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186c8:	08016c19 	.word	0x08016c19

080186cc <lv_style_prop_get_default>:

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
    lv_style_value_t value;
    switch(prop) {
 80186cc:	f240 4362 	movw	r3, #1122	; 0x462
 80186d0:	4298      	cmp	r0, r3
 80186d2:	d017      	beq.n	8018704 <lv_style_prop_get_default+0x38>
 80186d4:	d821      	bhi.n	801871a <lv_style_prop_get_default+0x4e>
 80186d6:	2833      	cmp	r0, #51	; 0x33
 80186d8:	d047      	beq.n	801876a <lv_style_prop_get_default+0x9e>
 80186da:	d815      	bhi.n	8018708 <lv_style_prop_get_default+0x3c>
 80186dc:	2820      	cmp	r0, #32
 80186de:	d03e      	beq.n	801875e <lv_style_prop_get_default+0x92>
 80186e0:	281f      	cmp	r0, #31
 80186e2:	d915      	bls.n	8018710 <lv_style_prop_get_default+0x44>
 80186e4:	2831      	cmp	r0, #49	; 0x31
 80186e6:	d00d      	beq.n	8018704 <lv_style_prop_get_default+0x38>
 80186e8:	f020 0002 	bic.w	r0, r0, #2
 80186ec:	2825      	cmp	r0, #37	; 0x25
 80186ee:	d009      	beq.n	8018704 <lv_style_prop_get_default+0x38>
 80186f0:	e00e      	b.n	8018710 <lv_style_prop_get_default+0x44>
 80186f2:	3846      	subs	r0, #70	; 0x46
 80186f4:	2301      	movs	r3, #1
 80186f6:	b280      	uxth	r0, r0
 80186f8:	fa03 f000 	lsl.w	r0, r3, r0
 80186fc:	f242 1301 	movw	r3, #8449	; 0x2101
 8018700:	4218      	tst	r0, r3
 8018702:	d005      	beq.n	8018710 <lv_style_prop_get_default+0x44>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8018704:	20ff      	movs	r0, #255	; 0xff
            break;
 8018706:	4770      	bx	lr
    switch(prop) {
 8018708:	2853      	cmp	r0, #83	; 0x53
 801870a:	d803      	bhi.n	8018714 <lv_style_prop_get_default+0x48>
 801870c:	2845      	cmp	r0, #69	; 0x45
 801870e:	d8f0      	bhi.n	80186f2 <lv_style_prop_get_default+0x26>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
            break;
        default:
            value.ptr = NULL;
 8018710:	2000      	movs	r0, #0
            value.num = 0;
            break;
    }

    return value;
}
 8018712:	4770      	bx	lr
    switch(prop) {
 8018714:	f5b0 6f8b 	cmp.w	r0, #1112	; 0x458
 8018718:	e7e9      	b.n	80186ee <lv_style_prop_get_default+0x22>
 801871a:	f241 0303 	movw	r3, #4099	; 0x1003
 801871e:	4298      	cmp	r0, r3
 8018720:	d025      	beq.n	801876e <lv_style_prop_get_default+0xa2>
 8018722:	d80f      	bhi.n	8018744 <lv_style_prop_get_default+0x78>
 8018724:	f640 030e 	movw	r3, #2062	; 0x80e
 8018728:	4298      	cmp	r0, r3
 801872a:	d015      	beq.n	8018758 <lv_style_prop_get_default+0x8c>
 801872c:	f640 030d 	movw	r3, #2061	; 0x80d
 8018730:	4298      	cmp	r0, r3
 8018732:	d9ed      	bls.n	8018710 <lv_style_prop_get_default+0x44>
 8018734:	f640 033c 	movw	r3, #2108	; 0x83c
 8018738:	4298      	cmp	r0, r3
 801873a:	d0e3      	beq.n	8018704 <lv_style_prop_get_default+0x38>
 801873c:	f640 0345 	movw	r3, #2117	; 0x845
 8018740:	4298      	cmp	r0, r3
 8018742:	e7d4      	b.n	80186ee <lv_style_prop_get_default+0x22>
 8018744:	f241 0306 	movw	r3, #4102	; 0x1006
 8018748:	4298      	cmp	r0, r3
 801874a:	d010      	beq.n	801876e <lv_style_prop_get_default+0xa2>
 801874c:	f241 4359 	movw	r3, #5209	; 0x1459
 8018750:	4298      	cmp	r0, r3
 8018752:	d1dd      	bne.n	8018710 <lv_style_prop_get_default+0x44>
            value.ptr = LV_FONT_DEFAULT;
 8018754:	4807      	ldr	r0, [pc, #28]	; (8018774 <lv_style_prop_get_default+0xa8>)
            break;
 8018756:	4770      	bx	lr
            value.num = LV_IMG_ZOOM_NONE;
 8018758:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 801875c:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801875e:	f04f 33ff 	mov.w	r3, #4294967295
 8018762:	2000      	movs	r0, #0
 8018764:	f363 000f 	bfi	r0, r3, #0, #16
static inline lv_color_t lv_color_white(void) { return lv_color_make(0xff, 0xff, 0xff);}
 8018768:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 801876a:	200f      	movs	r0, #15
            break;
 801876c:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 801876e:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
            break;
 8018772:	4770      	bx	lr
 8018774:	080294fc 	.word	0x080294fc

08018778 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
    LV_ASSERT_STYLE(style);

    return style->prop_cnt == 0 ? true : false;
 8018778:	79c0      	ldrb	r0, [r0, #7]
}
 801877a:	fab0 f080 	clz	r0, r0
 801877e:	0940      	lsrs	r0, r0, #5
 8018780:	4770      	bx	lr

08018782 <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
    uint16_t group = (prop & 0x1FF) >> 4;
 8018782:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8018784:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8018788:	bf0c      	ite	eq
 801878a:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 801878e:	2007      	movne	r0, #7
    return (uint8_t)group;
}
 8018790:	4770      	bx	lr

08018792 <lv_style_set_prop>:
{
 8018792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->is_const) {
 8018794:	f990 3005 	ldrsb.w	r3, [r0, #5]
{
 8018798:	4604      	mov	r4, r0
 801879a:	460d      	mov	r5, r1
 801879c:	4616      	mov	r6, r2
    if(style->is_const) {
 801879e:	2b00      	cmp	r3, #0
 80187a0:	db0c      	blt.n	80187bc <lv_style_set_prop+0x2a>
    if(style->prop_cnt > 1) {
 80187a2:	79c2      	ldrb	r2, [r0, #7]
 80187a4:	2a01      	cmp	r2, #1
 80187a6:	d93a      	bls.n	801881e <lv_style_set_prop+0x8c>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80187a8:	6800      	ldr	r0, [r0, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80187aa:	1e53      	subs	r3, r2, #1
            if(props[i] == prop) {
 80187ac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80187b0:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
 80187b4:	42af      	cmp	r7, r5
 80187b6:	d102      	bne.n	80187be <lv_style_set_prop+0x2c>
                values[i] = value;
 80187b8:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
}
 80187bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80187be:	3b01      	subs	r3, #1
 80187c0:	d2f6      	bcs.n	80187b0 <lv_style_set_prop+0x1e>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80187c2:	2106      	movs	r1, #6
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 80187c4:	fb02 1101 	mla	r1, r2, r1, r1
 80187c8:	f7ff fa3c 	bl	8017c44 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 80187cc:	2800      	cmp	r0, #0
 80187ce:	d0f5      	beq.n	80187bc <lv_style_set_prop+0x2a>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80187d0:	79e3      	ldrb	r3, [r4, #7]
        style->v_p.values_and_props = values_and_props;
 80187d2:	6020      	str	r0, [r4, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80187d4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            props[i + sizeof(lv_style_value_t) /sizeof(uint16_t)] = props[i];
 80187d8:	1d11      	adds	r1, r2, #4
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80187da:	3b01      	subs	r3, #1
 80187dc:	d21a      	bcs.n	8018814 <lv_style_set_prop+0x82>
        style->prop_cnt++;
 80187de:	79e3      	ldrb	r3, [r4, #7]
 80187e0:	3301      	adds	r3, #1
 80187e2:	b2da      	uxtb	r2, r3
        props[style->prop_cnt - 1] = prop;
 80187e4:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
        style->prop_cnt++;
 80187e8:	71e2      	strb	r2, [r4, #7]
        props[style->prop_cnt - 1] = prop;
 80187ea:	3b01      	subs	r3, #1
 80187ec:	005b      	lsls	r3, r3, #1
 80187ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80187f2:	52c5      	strh	r5, [r0, r3]
        values[style->prop_cnt - 1] = value;
 80187f4:	79e3      	ldrb	r3, [r4, #7]
 80187f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80187fa:	3b01      	subs	r3, #1
 80187fc:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    uint8_t group = _lv_style_get_prop_group(prop);
 8018800:	4628      	mov	r0, r5
 8018802:	f7ff ffbe 	bl	8018782 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8018806:	2301      	movs	r3, #1
 8018808:	fa03 f000 	lsl.w	r0, r3, r0
 801880c:	79a3      	ldrb	r3, [r4, #6]
 801880e:	4318      	orrs	r0, r3
 8018810:	71a0      	strb	r0, [r4, #6]
 8018812:	e7d3      	b.n	80187bc <lv_style_set_prop+0x2a>
            props[i + sizeof(lv_style_value_t) /sizeof(uint16_t)] = props[i];
 8018814:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8018818:	f821 7013 	strh.w	r7, [r1, r3, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801881c:	e7dd      	b.n	80187da <lv_style_set_prop+0x48>
    } else if(style->prop_cnt == 1) {
 801881e:	d11c      	bne.n	801885a <lv_style_set_prop+0xc8>
        if(style->prop1 == prop) {
 8018820:	8883      	ldrh	r3, [r0, #4]
 8018822:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018826:	428b      	cmp	r3, r1
 8018828:	d101      	bne.n	801882e <lv_style_set_prop+0x9c>
            style->v_p.value1 = value;
 801882a:	6006      	str	r6, [r0, #0]
            return;
 801882c:	e7c6      	b.n	80187bc <lv_style_set_prop+0x2a>
        uint8_t * values_and_props = lv_mem_alloc(size);
 801882e:	200c      	movs	r0, #12
 8018830:	f7ff f9f2 	bl	8017c18 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8018834:	2800      	cmp	r0, #0
 8018836:	d0c1      	beq.n	80187bc <lv_style_set_prop+0x2a>
        style->prop_cnt++;
 8018838:	79e3      	ldrb	r3, [r4, #7]
        props[0] = style->prop1;
 801883a:	88a2      	ldrh	r2, [r4, #4]
        style->prop_cnt++;
 801883c:	3301      	adds	r3, #1
        lv_style_value_t value_tmp = style->v_p.value1;
 801883e:	6821      	ldr	r1, [r4, #0]
        props[0] = style->prop1;
 8018840:	f3c2 020e 	ubfx	r2, r2, #0, #15
        style->v_p.values_and_props = values_and_props;
 8018844:	6020      	str	r0, [r4, #0]
        style->prop_cnt++;
 8018846:	b2db      	uxtb	r3, r3
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8018848:	eb00 0783 	add.w	r7, r0, r3, lsl #2
        style->prop_cnt++;
 801884c:	71e3      	strb	r3, [r4, #7]
        props[0] = style->prop1;
 801884e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
        props[1] = prop;
 8018852:	807d      	strh	r5, [r7, #2]
        values[1] = value;
 8018854:	e9c0 1600 	strd	r1, r6, [r0]
 8018858:	e7d2      	b.n	8018800 <lv_style_set_prop+0x6e>
        style->prop_cnt = 1;
 801885a:	2301      	movs	r3, #1
        style->v_p.value1 = value;
 801885c:	6006      	str	r6, [r0, #0]
        style->prop_cnt = 1;
 801885e:	71c3      	strb	r3, [r0, #7]
        style->prop1 = prop;
 8018860:	8883      	ldrh	r3, [r0, #4]
 8018862:	f361 030e 	bfi	r3, r1, #0, #15
 8018866:	8083      	strh	r3, [r0, #4]
        style->v_p.value1 = value;
 8018868:	e7ca      	b.n	8018800 <lv_style_set_prop+0x6e>
	...

0801886c <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 801886c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 801886e:	2118      	movs	r1, #24
 8018870:	4803      	ldr	r0, [pc, #12]	; (8018880 <_lv_timer_core_init+0x14>)
 8018872:	f7fe fed2 	bl	801761a <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8018876:	4b03      	ldr	r3, [pc, #12]	; (8018884 <_lv_timer_core_init+0x18>)
 8018878:	2201      	movs	r2, #1
 801887a:	701a      	strb	r2, [r3, #0]
}
 801887c:	bd08      	pop	{r3, pc}
 801887e:	bf00      	nop
 8018880:	2000adec 	.word	0x2000adec
 8018884:	2000ab78 	.word	0x2000ab78

08018888 <lv_timer_create>:
{
 8018888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801888a:	4606      	mov	r6, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 801888c:	480c      	ldr	r0, [pc, #48]	; (80188c0 <lv_timer_create+0x38>)
{
 801888e:	460f      	mov	r7, r1
 8018890:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8018892:	f7fe feca 	bl	801762a <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8018896:	4604      	mov	r4, r0
 8018898:	b900      	cbnz	r0, 801889c <lv_timer_create+0x14>
 801889a:	e7fe      	b.n	801889a <lv_timer_create+0x12>
    new_timer->repeat_count = -1;
 801889c:	f04f 33ff 	mov.w	r3, #4294967295
    new_timer->period  = period;
 80188a0:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 80188a2:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 80188a4:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 80188a6:	7d03      	ldrb	r3, [r0, #20]
 80188a8:	f36f 0300 	bfc	r3, #0, #1
 80188ac:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 80188ae:	f7fe f99f 	bl	8016bf0 <lv_tick_get>
    timer_created = true;
 80188b2:	4b04      	ldr	r3, [pc, #16]	; (80188c4 <lv_timer_create+0x3c>)
 80188b4:	2201      	movs	r2, #1
    new_timer->last_run = lv_tick_get();
 80188b6:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 80188b8:	60e5      	str	r5, [r4, #12]
}
 80188ba:	4620      	mov	r0, r4
    timer_created = true;
 80188bc:	701a      	strb	r2, [r3, #0]
}
 80188be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188c0:	2000adec 	.word	0x2000adec
 80188c4:	2000ab79 	.word	0x2000ab79

080188c8 <lv_timer_del>:
{
 80188c8:	b510      	push	{r4, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 80188ca:	4601      	mov	r1, r0
{
 80188cc:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 80188ce:	4805      	ldr	r0, [pc, #20]	; (80188e4 <lv_timer_del+0x1c>)
 80188d0:	f7fe fee2 	bl	8017698 <_lv_ll_remove>
    timer_deleted = true;
 80188d4:	4b04      	ldr	r3, [pc, #16]	; (80188e8 <lv_timer_del+0x20>)
 80188d6:	2201      	movs	r2, #1
    lv_mem_free(timer);
 80188d8:	4620      	mov	r0, r4
}
 80188da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    timer_deleted = true;
 80188de:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 80188e0:	f7ff b818 	b.w	8017914 <lv_mem_free>
 80188e4:	2000adec 	.word	0x2000adec
 80188e8:	2000ab7a 	.word	0x2000ab7a

080188ec <lv_timer_handler>:
    if(already_running) return 1;
 80188ec:	4b50      	ldr	r3, [pc, #320]	; (8018a30 <lv_timer_handler+0x144>)
{
 80188ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
 80188f2:	781a      	ldrb	r2, [r3, #0]
 80188f4:	2601      	movs	r6, #1
 80188f6:	b922      	cbnz	r2, 8018902 <lv_timer_handler+0x16>
    if(lv_timer_run == false) {
 80188f8:	4a4e      	ldr	r2, [pc, #312]	; (8018a34 <lv_timer_handler+0x148>)
    already_running = true;
 80188fa:	701e      	strb	r6, [r3, #0]
    if(lv_timer_run == false) {
 80188fc:	7812      	ldrb	r2, [r2, #0]
 80188fe:	b922      	cbnz	r2, 801890a <lv_timer_handler+0x1e>
        already_running = false; /*Release mutex*/
 8018900:	701a      	strb	r2, [r3, #0]
}
 8018902:	4630      	mov	r0, r6
 8018904:	b003      	add	sp, #12
 8018906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        timer_deleted             = false;
 801890a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8018a50 <lv_timer_handler+0x164>
    uint32_t handler_start = lv_tick_get();
 801890e:	f7fe f96f 	bl	8016bf0 <lv_tick_get>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018912:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018a40 <lv_timer_handler+0x154>
    uint32_t handler_start = lv_tick_get();
 8018916:	4605      	mov	r5, r0
 8018918:	46ca      	mov	sl, r9
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801891a:	4e47      	ldr	r6, [pc, #284]	; (8018a38 <lv_timer_handler+0x14c>)
        timer_deleted             = false;
 801891c:	2300      	movs	r3, #0
        timer_created             = false;
 801891e:	4c47      	ldr	r4, [pc, #284]	; (8018a3c <lv_timer_handler+0x150>)
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018920:	4658      	mov	r0, fp
 8018922:	4637      	mov	r7, r6
        timer_deleted             = false;
 8018924:	f889 3000 	strb.w	r3, [r9]
        timer_created             = false;
 8018928:	7023      	strb	r3, [r4, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801892a:	f7fe fef0 	bl	801770e <_lv_ll_get_head>
 801892e:	9400      	str	r4, [sp, #0]
 8018930:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8018932:	6839      	ldr	r1, [r7, #0]
 8018934:	bb69      	cbnz	r1, 8018992 <lv_timer_handler+0xa6>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018936:	4842      	ldr	r0, [pc, #264]	; (8018a40 <lv_timer_handler+0x154>)
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8018938:	f04f 36ff 	mov.w	r6, #4294967295
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 801893c:	f7fe fee7 	bl	801770e <_lv_ll_get_head>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8018940:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8018a40 <lv_timer_handler+0x154>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8018944:	4604      	mov	r4, r0
    while(next) {
 8018946:	2c00      	cmp	r4, #0
 8018948:	d15c      	bne.n	8018a04 <lv_timer_handler+0x118>
    busy_time += lv_tick_elaps(handler_start);
 801894a:	4628      	mov	r0, r5
 801894c:	4d3d      	ldr	r5, [pc, #244]	; (8018a44 <lv_timer_handler+0x158>)
 801894e:	f7fe f95d 	bl	8016c0c <lv_tick_elaps>
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8018952:	4f3d      	ldr	r7, [pc, #244]	; (8018a48 <lv_timer_handler+0x15c>)
    busy_time += lv_tick_elaps(handler_start);
 8018954:	682b      	ldr	r3, [r5, #0]
 8018956:	4418      	add	r0, r3
 8018958:	6028      	str	r0, [r5, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 801895a:	6838      	ldr	r0, [r7, #0]
 801895c:	f7fe f956 	bl	8016c0c <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8018960:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8018964:	d311      	bcc.n	801898a <lv_timer_handler+0x9e>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8018966:	682a      	ldr	r2, [r5, #0]
 8018968:	2364      	movs	r3, #100	; 0x64
 801896a:	4353      	muls	r3, r2
 801896c:	fbb3 f0f0 	udiv	r0, r3, r0
 8018970:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8018972:	4b36      	ldr	r3, [pc, #216]	; (8018a4c <lv_timer_handler+0x160>)
 8018974:	2864      	cmp	r0, #100	; 0x64
 8018976:	bf9c      	itt	ls
 8018978:	f1c0 0464 	rsbls	r4, r0, #100	; 0x64
 801897c:	b2e4      	uxtbls	r4, r4
 801897e:	701c      	strb	r4, [r3, #0]
        busy_time         = 0;
 8018980:	2300      	movs	r3, #0
 8018982:	602b      	str	r3, [r5, #0]
        idle_period_start = lv_tick_get();
 8018984:	f7fe f934 	bl	8016bf0 <lv_tick_get>
 8018988:	6038      	str	r0, [r7, #0]
    already_running = false; /*Release the mutex*/
 801898a:	2300      	movs	r3, #0
 801898c:	4a28      	ldr	r2, [pc, #160]	; (8018a30 <lv_timer_handler+0x144>)
 801898e:	7013      	strb	r3, [r2, #0]
    return time_till_next;
 8018990:	e7b7      	b.n	8018902 <lv_timer_handler+0x16>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8018992:	4658      	mov	r0, fp
 8018994:	f7fe fec1 	bl	801771a <_lv_ll_get_next>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8018998:	683c      	ldr	r4, [r7, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 801899a:	4680      	mov	r8, r0
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 801899c:	7d22      	ldrb	r2, [r4, #20]
 801899e:	07d3      	lsls	r3, r2, #31
 80189a0:	d404      	bmi.n	80189ac <lv_timer_handler+0xc0>

    if(timer->repeat_count == 0) {
 80189a2:	6922      	ldr	r2, [r4, #16]
 80189a4:	b92a      	cbnz	r2, 80189b2 <lv_timer_handler+0xc6>
        TIMER_TRACE("deleting timer with %p callback because the repeat count is over", timer->timer_cb);
        lv_timer_del(timer);
 80189a6:	4620      	mov	r0, r4
 80189a8:	f7ff ff8e 	bl	80188c8 <lv_timer_del>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 80189ac:	f8c7 8000 	str.w	r8, [r7]
 80189b0:	e7bf      	b.n	8018932 <lv_timer_handler+0x46>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 80189b2:	6860      	ldr	r0, [r4, #4]
 80189b4:	f7fe f92a 	bl	8016c0c <lv_tick_elaps>
    if(elp >= timer->period)
 80189b8:	6822      	ldr	r2, [r4, #0]
 80189ba:	4290      	cmp	r0, r2
 80189bc:	d3f6      	bcc.n	80189ac <lv_timer_handler+0xc0>
        int32_t original_repeat_count = timer->repeat_count;
 80189be:	6922      	ldr	r2, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 80189c0:	2a00      	cmp	r2, #0
 80189c2:	9201      	str	r2, [sp, #4]
 80189c4:	bfc4      	itt	gt
 80189c6:	f102 31ff 	addgt.w	r1, r2, #4294967295
 80189ca:	6121      	strgt	r1, [r4, #16]
        timer->last_run = lv_tick_get();
 80189cc:	f7fe f910 	bl	8016bf0 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80189d0:	68a1      	ldr	r1, [r4, #8]
        timer->last_run = lv_tick_get();
 80189d2:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80189d4:	b119      	cbz	r1, 80189de <lv_timer_handler+0xf2>
 80189d6:	9a01      	ldr	r2, [sp, #4]
 80189d8:	b10a      	cbz	r2, 80189de <lv_timer_handler+0xf2>
 80189da:	4620      	mov	r0, r4
 80189dc:	4788      	blx	r1
        if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80189de:	f89a 2000 	ldrb.w	r2, [sl]
 80189e2:	b922      	cbnz	r2, 80189ee <lv_timer_handler+0x102>
            if(timer->repeat_count == 0) {
 80189e4:	6922      	ldr	r2, [r4, #16]
 80189e6:	b912      	cbnz	r2, 80189ee <lv_timer_handler+0x102>
                lv_timer_del(timer);
 80189e8:	4620      	mov	r0, r4
 80189ea:	f7ff ff6d 	bl	80188c8 <lv_timer_del>
                if(timer_created || timer_deleted) {
 80189ee:	9b00      	ldr	r3, [sp, #0]
 80189f0:	781b      	ldrb	r3, [r3, #0]
 80189f2:	b91b      	cbnz	r3, 80189fc <lv_timer_handler+0x110>
 80189f4:	f89a 3000 	ldrb.w	r3, [sl]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d0d7      	beq.n	80189ac <lv_timer_handler+0xc0>
    } while(LV_GC_ROOT(_lv_timer_act));
 80189fc:	6833      	ldr	r3, [r6, #0]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d18b      	bne.n	801891a <lv_timer_handler+0x2e>
 8018a02:	e798      	b.n	8018936 <lv_timer_handler+0x4a>
        if(!next->paused) {
 8018a04:	7d20      	ldrb	r0, [r4, #20]
 8018a06:	f010 0701 	ands.w	r7, r0, #1
 8018a0a:	d10a      	bne.n	8018a22 <lv_timer_handler+0x136>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8018a0c:	6860      	ldr	r0, [r4, #4]
 8018a0e:	f7fe f8fd 	bl	8016c0c <lv_tick_elaps>
    if(elp >= timer->period)
 8018a12:	6823      	ldr	r3, [r4, #0]
 8018a14:	4298      	cmp	r0, r3
        return 0;
 8018a16:	bf2c      	ite	cs
 8018a18:	4638      	movcs	r0, r7
    return timer->period - elp;
 8018a1a:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
 8018a1c:	4286      	cmp	r6, r0
 8018a1e:	bf28      	it	cs
 8018a20:	4606      	movcs	r6, r0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8018a22:	4621      	mov	r1, r4
 8018a24:	4640      	mov	r0, r8
 8018a26:	f7fe fe78 	bl	801771a <_lv_ll_get_next>
 8018a2a:	4604      	mov	r4, r0
 8018a2c:	e78b      	b.n	8018946 <lv_timer_handler+0x5a>
 8018a2e:	bf00      	nop
 8018a30:	2000ab68 	.word	0x2000ab68
 8018a34:	2000ab78 	.word	0x2000ab78
 8018a38:	2000addc 	.word	0x2000addc
 8018a3c:	2000ab79 	.word	0x2000ab79
 8018a40:	2000adec 	.word	0x2000adec
 8018a44:	2000ab6c 	.word	0x2000ab6c
 8018a48:	2000ab74 	.word	0x2000ab74
 8018a4c:	2000ab70 	.word	0x2000ab70
 8018a50:	2000ab7a 	.word	0x2000ab7a

08018a54 <lv_timer_pause>:
    timer->paused = true;
 8018a54:	7d03      	ldrb	r3, [r0, #20]
 8018a56:	f043 0301 	orr.w	r3, r3, #1
 8018a5a:	7503      	strb	r3, [r0, #20]
}
 8018a5c:	4770      	bx	lr

08018a5e <lv_timer_resume>:
    timer->paused = false;
 8018a5e:	7d03      	ldrb	r3, [r0, #20]
 8018a60:	f36f 0300 	bfc	r3, #0, #1
 8018a64:	7503      	strb	r3, [r0, #20]
}
 8018a66:	4770      	bx	lr

08018a68 <lv_timer_ready>:
{
 8018a68:	b510      	push	{r4, lr}
 8018a6a:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 8018a6c:	f7fe f8c0 	bl	8016bf0 <lv_tick_get>
 8018a70:	6823      	ldr	r3, [r4, #0]
 8018a72:	43db      	mvns	r3, r3
 8018a74:	4403      	add	r3, r0
 8018a76:	6063      	str	r3, [r4, #4]
}
 8018a78:	bd10      	pop	{r4, pc}

08018a7a <default_walker>:

static void default_walker(void* ptr, size_t size, int used, void* user)
{
	(void)user;
	printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void*)block_from_ptr(ptr));
}
 8018a7a:	4770      	bx	lr

08018a7c <block_next>:
{
 8018a7c:	b508      	push	{r3, lr}
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018a7e:	6843      	ldr	r3, [r0, #4]
 8018a80:	f023 0303 	bic.w	r3, r3, #3
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018a84:	4418      	add	r0, r3
 8018a86:	3004      	adds	r0, #4
	tlsf_assert(!block_is_last(block));
 8018a88:	b933      	cbnz	r3, 8018a98 <block_next+0x1c>
 8018a8a:	4b04      	ldr	r3, [pc, #16]	; (8018a9c <block_next+0x20>)
 8018a8c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8018a90:	4a03      	ldr	r2, [pc, #12]	; (8018aa0 <block_next+0x24>)
 8018a92:	4804      	ldr	r0, [pc, #16]	; (8018aa4 <block_next+0x28>)
 8018a94:	f00a f9cc 	bl	8022e30 <__assert_func>
}
 8018a98:	bd08      	pop	{r3, pc}
 8018a9a:	bf00      	nop
 8018a9c:	080297c2 	.word	0x080297c2
 8018aa0:	08029c2d 	.word	0x08029c2d
 8018aa4:	080297d8 	.word	0x080297d8

08018aa8 <block_link_next>:
{
 8018aa8:	b510      	push	{r4, lr}
 8018aaa:	4604      	mov	r4, r0
	block_header_t* next = block_next(block);
 8018aac:	f7ff ffe6 	bl	8018a7c <block_next>
	next->prev_phys_block = block;
 8018ab0:	6004      	str	r4, [r0, #0]
}
 8018ab2:	bd10      	pop	{r4, pc}

08018ab4 <block_split>:
{
 8018ab4:	b570      	push	{r4, r5, r6, lr}
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018ab6:	6846      	ldr	r6, [r0, #4]
	return tlsf_cast(void*,
 8018ab8:	1842      	adds	r2, r0, r1
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018aba:	f026 0603 	bic.w	r6, r6, #3
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018abe:	1d14      	adds	r4, r2, #4
	const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8018ac0:	1a73      	subs	r3, r6, r1
 8018ac2:	1f1d      	subs	r5, r3, #4
	return tlsf_cast(void*,
 8018ac4:	f102 030c 	add.w	r3, r2, #12
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8018ac8:	320f      	adds	r2, #15
 8018aca:	f022 0203 	bic.w	r2, r2, #3
	tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d006      	beq.n	8018ae0 <block_split+0x2c>
 8018ad2:	4b18      	ldr	r3, [pc, #96]	; (8018b34 <block_split+0x80>)
 8018ad4:	f240 21a3 	movw	r1, #675	; 0x2a3
 8018ad8:	4a17      	ldr	r2, [pc, #92]	; (8018b38 <block_split+0x84>)
	tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8018ada:	4818      	ldr	r0, [pc, #96]	; (8018b3c <block_split+0x88>)
 8018adc:	f00a f9a8 	bl	8022e30 <__assert_func>
 8018ae0:	1d0b      	adds	r3, r1, #4
 8018ae2:	442b      	add	r3, r5
 8018ae4:	42b3      	cmp	r3, r6
 8018ae6:	d004      	beq.n	8018af2 <block_split+0x3e>
 8018ae8:	4b15      	ldr	r3, [pc, #84]	; (8018b40 <block_split+0x8c>)
 8018aea:	f240 21a6 	movw	r1, #678	; 0x2a6
 8018aee:	4a12      	ldr	r2, [pc, #72]	; (8018b38 <block_split+0x84>)
 8018af0:	e7f3      	b.n	8018ada <block_split+0x26>
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8018af2:	6863      	ldr	r3, [r4, #4]
 8018af4:	f003 0303 	and.w	r3, r3, #3
 8018af8:	432b      	orrs	r3, r5
 8018afa:	6063      	str	r3, [r4, #4]
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018afc:	f023 0303 	bic.w	r3, r3, #3
	tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8018b00:	2b0b      	cmp	r3, #11
 8018b02:	d804      	bhi.n	8018b0e <block_split+0x5a>
 8018b04:	4b0f      	ldr	r3, [pc, #60]	; (8018b44 <block_split+0x90>)
 8018b06:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8018b0a:	4a0b      	ldr	r2, [pc, #44]	; (8018b38 <block_split+0x84>)
 8018b0c:	e7e5      	b.n	8018ada <block_split+0x26>
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8018b0e:	6843      	ldr	r3, [r0, #4]
 8018b10:	f003 0303 	and.w	r3, r3, #3
 8018b14:	4319      	orrs	r1, r3
 8018b16:	6041      	str	r1, [r0, #4]
	block_header_t* next = block_link_next(block);
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f7ff ffc5 	bl	8018aa8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018b1e:	6843      	ldr	r3, [r0, #4]
 8018b20:	f043 0302 	orr.w	r3, r3, #2
 8018b24:	6043      	str	r3, [r0, #4]
}
 8018b26:	4620      	mov	r0, r4
	block->size |= block_header_free_bit;
 8018b28:	6863      	ldr	r3, [r4, #4]
 8018b2a:	f043 0301 	orr.w	r3, r3, #1
 8018b2e:	6063      	str	r3, [r4, #4]
}
 8018b30:	bd70      	pop	{r4, r5, r6, pc}
 8018b32:	bf00      	nop
 8018b34:	080297f8 	.word	0x080297f8
 8018b38:	08029c7b 	.word	0x08029c7b
 8018b3c:	080297d8 	.word	0x080297d8
 8018b40:	0802986c 	.word	0x0802986c
 8018b44:	080298ac 	.word	0x080298ac

08018b48 <block_mark_as_used>:
{
 8018b48:	b510      	push	{r4, lr}
 8018b4a:	4604      	mov	r4, r0
	block_header_t* next = block_next(block);
 8018b4c:	f7ff ff96 	bl	8018a7c <block_next>
	block->size &= ~block_header_prev_free_bit;
 8018b50:	6843      	ldr	r3, [r0, #4]
 8018b52:	f023 0302 	bic.w	r3, r3, #2
 8018b56:	6043      	str	r3, [r0, #4]
	block->size &= ~block_header_free_bit;
 8018b58:	6863      	ldr	r3, [r4, #4]
 8018b5a:	f023 0301 	bic.w	r3, r3, #1
 8018b5e:	6063      	str	r3, [r4, #4]
}
 8018b60:	bd10      	pop	{r4, pc}
	...

08018b64 <remove_free_block>:
{
 8018b64:	b570      	push	{r4, r5, r6, lr}
	block_header_t* next = block->next_free;
 8018b66:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
	tlsf_assert(prev && "prev_free field can not be null");
 8018b6a:	b935      	cbnz	r5, 8018b7a <remove_free_block+0x16>
 8018b6c:	4b14      	ldr	r3, [pc, #80]	; (8018bc0 <remove_free_block+0x5c>)
 8018b6e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8018b72:	4a14      	ldr	r2, [pc, #80]	; (8018bc4 <remove_free_block+0x60>)
	tlsf_assert(next && "next_free field can not be null");
 8018b74:	4814      	ldr	r0, [pc, #80]	; (8018bc8 <remove_free_block+0x64>)
 8018b76:	f00a f95b 	bl	8022e30 <__assert_func>
 8018b7a:	b924      	cbnz	r4, 8018b86 <remove_free_block+0x22>
 8018b7c:	4b13      	ldr	r3, [pc, #76]	; (8018bcc <remove_free_block+0x68>)
 8018b7e:	f240 2159 	movw	r1, #601	; 0x259
 8018b82:	4a10      	ldr	r2, [pc, #64]	; (8018bc4 <remove_free_block+0x60>)
 8018b84:	e7f6      	b.n	8018b74 <remove_free_block+0x10>
	next->prev_free = prev;
 8018b86:	60e5      	str	r5, [r4, #12]
	prev->next_free = next;
 8018b88:	60ac      	str	r4, [r5, #8]
	if (control->blocks[fl][sl] == block)
 8018b8a:	eb03 1542 	add.w	r5, r3, r2, lsl #5
 8018b8e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8018b92:	6bae      	ldr	r6, [r5, #56]	; 0x38
 8018b94:	428e      	cmp	r6, r1
 8018b96:	d112      	bne.n	8018bbe <remove_free_block+0x5a>
		if (next == &control->block_null)
 8018b98:	42a0      	cmp	r0, r4
		control->blocks[fl][sl] = next;
 8018b9a:	63ac      	str	r4, [r5, #56]	; 0x38
		if (next == &control->block_null)
 8018b9c:	d10f      	bne.n	8018bbe <remove_free_block+0x5a>
			control->sl_bitmap[fl] &= ~(1U << sl);
 8018b9e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8018ba2:	2101      	movs	r1, #1
 8018ba4:	696c      	ldr	r4, [r5, #20]
 8018ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8018baa:	ea24 0303 	bic.w	r3, r4, r3
 8018bae:	616b      	str	r3, [r5, #20]
			if (!control->sl_bitmap[fl])
 8018bb0:	b92b      	cbnz	r3, 8018bbe <remove_free_block+0x5a>
				control->fl_bitmap &= ~(1U << fl);
 8018bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8018bb6:	6901      	ldr	r1, [r0, #16]
 8018bb8:	ea21 0202 	bic.w	r2, r1, r2
 8018bbc:	6102      	str	r2, [r0, #16]
}
 8018bbe:	bd70      	pop	{r4, r5, r6, pc}
 8018bc0:	08029934 	.word	0x08029934
 8018bc4:	08029c57 	.word	0x08029c57
 8018bc8:	080297d8 	.word	0x080297d8
 8018bcc:	0802995e 	.word	0x0802995e

08018bd0 <block_absorb.part.0>:
static block_header_t* block_absorb(block_header_t* prev, block_header_t* block)
 8018bd0:	b508      	push	{r3, lr}
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8018bd2:	4a03      	ldr	r2, [pc, #12]	; (8018be0 <block_absorb.part.0+0x10>)
 8018bd4:	f240 21b3 	movw	r1, #691	; 0x2b3
 8018bd8:	4b02      	ldr	r3, [pc, #8]	; (8018be4 <block_absorb.part.0+0x14>)
 8018bda:	4803      	ldr	r0, [pc, #12]	; (8018be8 <block_absorb.part.0+0x18>)
 8018bdc:	f00a f928 	bl	8022e30 <__assert_func>
 8018be0:	08029c87 	.word	0x08029c87
 8018be4:	08029988 	.word	0x08029988
 8018be8:	080297d8 	.word	0x080297d8

08018bec <block_prepare_used.part.0>:
static void* block_prepare_used(control_t* control, block_header_t* block, size_t size)
 8018bec:	b508      	push	{r3, lr}
		tlsf_assert(size && "size must be non-zero");
 8018bee:	4a03      	ldr	r2, [pc, #12]	; (8018bfc <block_prepare_used.part.0+0x10>)
 8018bf0:	f44f 714a 	mov.w	r1, #808	; 0x328
 8018bf4:	4b02      	ldr	r3, [pc, #8]	; (8018c00 <block_prepare_used.part.0+0x14>)
 8018bf6:	4803      	ldr	r0, [pc, #12]	; (8018c04 <block_prepare_used.part.0+0x18>)
 8018bf8:	f00a f91a 	bl	8022e30 <__assert_func>
 8018bfc:	08029ce8 	.word	0x08029ce8
 8018c00:	080299bf 	.word	0x080299bf
 8018c04:	080297d8 	.word	0x080297d8

08018c08 <mapping_insert>:
	if (size < SMALL_BLOCK_SIZE)
 8018c08:	287f      	cmp	r0, #127	; 0x7f
	const int bit = word ? 32 - __builtin_clz(word) : 0;
 8018c0a:	bf8e      	itee	hi
 8018c0c:	fab0 f380 	clzhi	r3, r0
		sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8018c10:	1080      	asrls	r0, r0, #2
		fl = 0;
 8018c12:	2300      	movls	r3, #0
{
 8018c14:	b510      	push	{r4, lr}
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018c16:	bf82      	ittt	hi
 8018c18:	f1c3 041a 	rsbhi	r4, r3, #26
		fl -= (FL_INDEX_SHIFT - 1);
 8018c1c:	f1c3 0319 	rsbhi	r3, r3, #25
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018c20:	40e0      	lsrhi	r0, r4
	*fli = fl;
 8018c22:	600b      	str	r3, [r1, #0]
		sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8018c24:	bf88      	it	hi
 8018c26:	f080 0020 	eorhi.w	r0, r0, #32
	*sli = sl;
 8018c2a:	6010      	str	r0, [r2, #0]
}
 8018c2c:	bd10      	pop	{r4, pc}
	...

08018c30 <block_insert>:
{
 8018c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c32:	4604      	mov	r4, r0
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018c34:	6848      	ldr	r0, [r1, #4]
	mapping_insert(block_size(block), &fl, &sl);
 8018c36:	aa01      	add	r2, sp, #4
{
 8018c38:	460d      	mov	r5, r1
	mapping_insert(block_size(block), &fl, &sl);
 8018c3a:	f020 0003 	bic.w	r0, r0, #3
 8018c3e:	4669      	mov	r1, sp
 8018c40:	f7ff ffe2 	bl	8018c08 <mapping_insert>
	insert_free_block(control, block, fl, sl);
 8018c44:	e9dd 0700 	ldrd	r0, r7, [sp]
	block_header_t* current = control->blocks[fl][sl];
 8018c48:	eb07 1240 	add.w	r2, r7, r0, lsl #5
 8018c4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018c50:	6b93      	ldr	r3, [r2, #56]	; 0x38
	tlsf_assert(current && "free list cannot have a null entry");
 8018c52:	b933      	cbnz	r3, 8018c62 <block_insert+0x32>
 8018c54:	4b12      	ldr	r3, [pc, #72]	; (8018ca0 <block_insert+0x70>)
 8018c56:	f44f 711d 	mov.w	r1, #628	; 0x274
 8018c5a:	4a12      	ldr	r2, [pc, #72]	; (8018ca4 <block_insert+0x74>)
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8018c5c:	4812      	ldr	r0, [pc, #72]	; (8018ca8 <block_insert+0x78>)
 8018c5e:	f00a f8e7 	bl	8022e30 <__assert_func>
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8018c62:	f105 010b 	add.w	r1, r5, #11
	return tlsf_cast(void*,
 8018c66:	f105 0608 	add.w	r6, r5, #8
		(tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8018c6a:	f021 0103 	bic.w	r1, r1, #3
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8018c6e:	428e      	cmp	r6, r1
	block->prev_free = &control->block_null;
 8018c70:	e9c5 3402 	strd	r3, r4, [r5, #8]
	current->prev_free = block;
 8018c74:	60dd      	str	r5, [r3, #12]
	tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8018c76:	d004      	beq.n	8018c82 <block_insert+0x52>
 8018c78:	4b0c      	ldr	r3, [pc, #48]	; (8018cac <block_insert+0x7c>)
 8018c7a:	f240 217a 	movw	r1, #634	; 0x27a
 8018c7e:	4a09      	ldr	r2, [pc, #36]	; (8018ca4 <block_insert+0x74>)
 8018c80:	e7ec      	b.n	8018c5c <block_insert+0x2c>
	control->fl_bitmap |= (1U << fl);
 8018c82:	2301      	movs	r3, #1
	control->blocks[fl][sl] = block;
 8018c84:	6395      	str	r5, [r2, #56]	; 0x38
	control->fl_bitmap |= (1U << fl);
 8018c86:	6922      	ldr	r2, [r4, #16]
 8018c88:	fa03 f100 	lsl.w	r1, r3, r0
	control->sl_bitmap[fl] |= (1U << sl);
 8018c8c:	40bb      	lsls	r3, r7
	control->fl_bitmap |= (1U << fl);
 8018c8e:	430a      	orrs	r2, r1
 8018c90:	6122      	str	r2, [r4, #16]
	control->sl_bitmap[fl] |= (1U << sl);
 8018c92:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8018c96:	6962      	ldr	r2, [r4, #20]
 8018c98:	4313      	orrs	r3, r2
 8018c9a:	6163      	str	r3, [r4, #20]
}
 8018c9c:	b003      	add	sp, #12
 8018c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ca0:	080299df 	.word	0x080299df
 8018ca4:	08029c69 	.word	0x08029c69
 8018ca8:	080297d8 	.word	0x080297d8
 8018cac:	08029a0f 	.word	0x08029a0f

08018cb0 <block_trim_free>:
	tlsf_assert(block_is_free(block) && "block must be free");
 8018cb0:	684b      	ldr	r3, [r1, #4]
{
 8018cb2:	b570      	push	{r4, r5, r6, lr}
 8018cb4:	460d      	mov	r5, r1
	tlsf_assert(block_is_free(block) && "block must be free");
 8018cb6:	07d9      	lsls	r1, r3, #31
{
 8018cb8:	4606      	mov	r6, r0
	tlsf_assert(block_is_free(block) && "block must be free");
 8018cba:	d406      	bmi.n	8018cca <block_trim_free+0x1a>
 8018cbc:	4b0f      	ldr	r3, [pc, #60]	; (8018cfc <block_trim_free+0x4c>)
 8018cbe:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8018cc2:	4a0f      	ldr	r2, [pc, #60]	; (8018d00 <block_trim_free+0x50>)
 8018cc4:	480f      	ldr	r0, [pc, #60]	; (8018d04 <block_trim_free+0x54>)
 8018cc6:	f00a f8b3 	bl	8022e30 <__assert_func>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018cca:	f023 0303 	bic.w	r3, r3, #3
	return block_size(block) >= sizeof(block_header_t) + size;
 8018cce:	f102 0110 	add.w	r1, r2, #16
	if (block_can_split(block, size))
 8018cd2:	428b      	cmp	r3, r1
 8018cd4:	d311      	bcc.n	8018cfa <block_trim_free+0x4a>
		block_header_t* remaining_block = block_split(block, size);
 8018cd6:	4611      	mov	r1, r2
 8018cd8:	4628      	mov	r0, r5
 8018cda:	f7ff feeb 	bl	8018ab4 <block_split>
 8018cde:	4604      	mov	r4, r0
		block_link_next(block);
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	f7ff fee1 	bl	8018aa8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018ce6:	6863      	ldr	r3, [r4, #4]
		block_insert(control, remaining_block);
 8018ce8:	4621      	mov	r1, r4
 8018cea:	4630      	mov	r0, r6
	block->size |= block_header_prev_free_bit;
 8018cec:	f043 0302 	orr.w	r3, r3, #2
 8018cf0:	6063      	str	r3, [r4, #4]
}
 8018cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		block_insert(control, remaining_block);
 8018cf6:	f7ff bf9b 	b.w	8018c30 <block_insert>
}
 8018cfa:	bd70      	pop	{r4, r5, r6, pc}
 8018cfc:	08029a71 	.word	0x08029a71
 8018d00:	08029cb6 	.word	0x08029cb6
 8018d04:	080297d8 	.word	0x080297d8

08018d08 <block_remove>:
{
 8018d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d0a:	4605      	mov	r5, r0
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018d0c:	6848      	ldr	r0, [r1, #4]
{
 8018d0e:	460c      	mov	r4, r1
	mapping_insert(block_size(block), &fl, &sl);
 8018d10:	aa01      	add	r2, sp, #4
 8018d12:	4669      	mov	r1, sp
 8018d14:	f020 0003 	bic.w	r0, r0, #3
 8018d18:	f7ff ff76 	bl	8018c08 <mapping_insert>
	remove_free_block(control, block, fl, sl);
 8018d1c:	4621      	mov	r1, r4
 8018d1e:	4628      	mov	r0, r5
 8018d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d24:	f7ff ff1e 	bl	8018b64 <remove_free_block>
}
 8018d28:	b003      	add	sp, #12
 8018d2a:	bd30      	pop	{r4, r5, pc}

08018d2c <block_locate_free>:
	int fl = 0, sl = 0;
 8018d2c:	2300      	movs	r3, #0
{
 8018d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d30:	4605      	mov	r5, r0
	if (size)
 8018d32:	460e      	mov	r6, r1
	int fl = 0, sl = 0;
 8018d34:	e9cd 3300 	strd	r3, r3, [sp]
	if (size)
 8018d38:	b919      	cbnz	r1, 8018d42 <block_locate_free+0x16>
	block_header_t* block = 0;
 8018d3a:	2400      	movs	r4, #0
}
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	b002      	add	sp, #8
 8018d40:	bd70      	pop	{r4, r5, r6, pc}
	if (size >= SMALL_BLOCK_SIZE)
 8018d42:	297f      	cmp	r1, #127	; 0x7f
	mapping_insert(size, fli, sli);
 8018d44:	aa01      	add	r2, sp, #4
	const int bit = word ? 32 - __builtin_clz(word) : 0;
 8018d46:	bf89      	itett	hi
 8018d48:	fab1 f081 	clzhi	r0, r1
		size += round;
 8018d4c:	4608      	movls	r0, r1
		const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8018d4e:	f1c0 031a 	rsbhi	r3, r0, #26
 8018d52:	2001      	movhi	r0, #1
 8018d54:	bf82      	ittt	hi
 8018d56:	4098      	lslhi	r0, r3
 8018d58:	f100 30ff 	addhi.w	r0, r0, #4294967295
		size += round;
 8018d5c:	1840      	addhi	r0, r0, r1
	mapping_insert(size, fli, sli);
 8018d5e:	4669      	mov	r1, sp
 8018d60:	f7ff ff52 	bl	8018c08 <mapping_insert>
		if (fl < FL_INDEX_COUNT)
 8018d64:	9a00      	ldr	r2, [sp, #0]
 8018d66:	2a08      	cmp	r2, #8
 8018d68:	dce7      	bgt.n	8018d3a <block_locate_free+0xe>
	unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8018d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d6e:	9c01      	ldr	r4, [sp, #4]
 8018d70:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8018d74:	fa03 f404 	lsl.w	r4, r3, r4
 8018d78:	6949      	ldr	r1, [r1, #20]
	if (!sl_map)
 8018d7a:	400c      	ands	r4, r1
 8018d7c:	d114      	bne.n	8018da8 <block_locate_free+0x7c>
		const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8018d7e:	3201      	adds	r2, #1
 8018d80:	4093      	lsls	r3, r2
 8018d82:	692a      	ldr	r2, [r5, #16]
		if (!fl_map)
 8018d84:	401a      	ands	r2, r3
 8018d86:	d0d8      	beq.n	8018d3a <block_locate_free+0xe>
	return __builtin_ffs(word) - 1;
 8018d88:	fa92 f2a2 	rbit	r2, r2
 8018d8c:	fab2 f282 	clz	r2, r2
		sl_map = control->sl_bitmap[fl];
 8018d90:	eb05 0382 	add.w	r3, r5, r2, lsl #2
		*fli = fl;
 8018d94:	9200      	str	r2, [sp, #0]
		sl_map = control->sl_bitmap[fl];
 8018d96:	695c      	ldr	r4, [r3, #20]
	tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8018d98:	b934      	cbnz	r4, 8018da8 <block_locate_free+0x7c>
 8018d9a:	4b13      	ldr	r3, [pc, #76]	; (8018de8 <block_locate_free+0xbc>)
 8018d9c:	f240 214b 	movw	r1, #587	; 0x24b
 8018da0:	4a12      	ldr	r2, [pc, #72]	; (8018dec <block_locate_free+0xc0>)
		tlsf_assert(block_size(block) >= size);
 8018da2:	4813      	ldr	r0, [pc, #76]	; (8018df0 <block_locate_free+0xc4>)
 8018da4:	f00a f844 	bl	8022e30 <__assert_func>
	return __builtin_ffs(word) - 1;
 8018da8:	fa94 f3a4 	rbit	r3, r4
 8018dac:	2c00      	cmp	r4, #0
 8018dae:	fab3 f383 	clz	r3, r3
 8018db2:	bf08      	it	eq
 8018db4:	f04f 33ff 	moveq.w	r3, #4294967295
	return control->blocks[fl][sl];
 8018db8:	eb03 1242 	add.w	r2, r3, r2, lsl #5
	*sli = sl;
 8018dbc:	9301      	str	r3, [sp, #4]
	return control->blocks[fl][sl];
 8018dbe:	320e      	adds	r2, #14
 8018dc0:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
	if (block)
 8018dc4:	2c00      	cmp	r4, #0
 8018dc6:	d0b8      	beq.n	8018d3a <block_locate_free+0xe>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018dc8:	6862      	ldr	r2, [r4, #4]
 8018dca:	f022 0203 	bic.w	r2, r2, #3
		tlsf_assert(block_size(block) >= size);
 8018dce:	4296      	cmp	r6, r2
 8018dd0:	d904      	bls.n	8018ddc <block_locate_free+0xb0>
 8018dd2:	4b08      	ldr	r3, [pc, #32]	; (8018df4 <block_locate_free+0xc8>)
 8018dd4:	f44f 7147 	mov.w	r1, #796	; 0x31c
 8018dd8:	4a07      	ldr	r2, [pc, #28]	; (8018df8 <block_locate_free+0xcc>)
 8018dda:	e7e2      	b.n	8018da2 <block_locate_free+0x76>
		remove_free_block(control, block, fl, sl);
 8018ddc:	9a00      	ldr	r2, [sp, #0]
 8018dde:	4621      	mov	r1, r4
 8018de0:	4628      	mov	r0, r5
 8018de2:	f7ff febf 	bl	8018b64 <remove_free_block>
	return block;
 8018de6:	e7a9      	b.n	8018d3c <block_locate_free+0x10>
 8018de8:	08029a9e 	.word	0x08029a9e
 8018dec:	08029c41 	.word	0x08029c41
 8018df0:	080297d8 	.word	0x080297d8
 8018df4:	08029ad7 	.word	0x08029ad7
 8018df8:	08029cd6 	.word	0x08029cd6

08018dfc <adjust_request_size>:
{
 8018dfc:	b508      	push	{r3, lr}
	if (size)
 8018dfe:	b1b0      	cbz	r0, 8018e2e <adjust_request_size+0x32>
	tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8018e00:	1e4b      	subs	r3, r1, #1
 8018e02:	ea11 0203 	ands.w	r2, r1, r3
 8018e06:	d006      	beq.n	8018e16 <adjust_request_size+0x1a>
 8018e08:	4b0a      	ldr	r3, [pc, #40]	; (8018e34 <adjust_request_size+0x38>)
 8018e0a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8018e0e:	4a0a      	ldr	r2, [pc, #40]	; (8018e38 <adjust_request_size+0x3c>)
 8018e10:	480a      	ldr	r0, [pc, #40]	; (8018e3c <adjust_request_size+0x40>)
 8018e12:	f00a f80d 	bl	8022e30 <__assert_func>
	return (x + (align - 1)) & ~(align - 1);
 8018e16:	4403      	add	r3, r0
 8018e18:	4249      	negs	r1, r1
 8018e1a:	4019      	ands	r1, r3
		if (aligned < block_size_max) 
 8018e1c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8018e20:	d203      	bcs.n	8018e2a <adjust_request_size+0x2e>
			adjust = tlsf_max(aligned, block_size_min);
 8018e22:	290c      	cmp	r1, #12
 8018e24:	460a      	mov	r2, r1
 8018e26:	bf38      	it	cc
 8018e28:	220c      	movcc	r2, #12
}
 8018e2a:	4610      	mov	r0, r2
 8018e2c:	bd08      	pop	{r3, pc}
	size_t adjust = 0;
 8018e2e:	4602      	mov	r2, r0
	return adjust;
 8018e30:	e7fb      	b.n	8018e2a <adjust_request_size+0x2e>
 8018e32:	bf00      	nop
 8018e34:	080298f7 	.word	0x080298f7
 8018e38:	08029c38 	.word	0x08029c38
 8018e3c:	080297d8 	.word	0x080297d8

08018e40 <block_merge_next>:
{
 8018e40:	b570      	push	{r4, r5, r6, lr}
 8018e42:	4606      	mov	r6, r0
	block_header_t* next = block_next(block);
 8018e44:	4608      	mov	r0, r1
{
 8018e46:	460c      	mov	r4, r1
	block_header_t* next = block_next(block);
 8018e48:	f7ff fe18 	bl	8018a7c <block_next>
	tlsf_assert(next && "next physical block can't be null");
 8018e4c:	4605      	mov	r5, r0
 8018e4e:	b930      	cbnz	r0, 8018e5e <block_merge_next+0x1e>
 8018e50:	4b13      	ldr	r3, [pc, #76]	; (8018ea0 <block_merge_next+0x60>)
 8018e52:	f240 21cd 	movw	r1, #717	; 0x2cd
 8018e56:	4a13      	ldr	r2, [pc, #76]	; (8018ea4 <block_merge_next+0x64>)
		tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8018e58:	4813      	ldr	r0, [pc, #76]	; (8018ea8 <block_merge_next+0x68>)
 8018e5a:	f009 ffe9 	bl	8022e30 <__assert_func>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018e5e:	6843      	ldr	r3, [r0, #4]
	if (block_is_free(next))
 8018e60:	07db      	lsls	r3, r3, #31
 8018e62:	d51b      	bpl.n	8018e9c <block_merge_next+0x5c>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018e64:	6863      	ldr	r3, [r4, #4]
		tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8018e66:	f033 0303 	bics.w	r3, r3, #3
 8018e6a:	d104      	bne.n	8018e76 <block_merge_next+0x36>
 8018e6c:	4b0f      	ldr	r3, [pc, #60]	; (8018eac <block_merge_next+0x6c>)
 8018e6e:	f240 21d1 	movw	r1, #721	; 0x2d1
 8018e72:	4a0c      	ldr	r2, [pc, #48]	; (8018ea4 <block_merge_next+0x64>)
 8018e74:	e7f0      	b.n	8018e58 <block_merge_next+0x18>
		block_remove(control, next);
 8018e76:	4601      	mov	r1, r0
 8018e78:	4630      	mov	r0, r6
 8018e7a:	f7ff ff45 	bl	8018d08 <block_remove>
	return block_size(block) == 0;
 8018e7e:	6862      	ldr	r2, [r4, #4]
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8018e80:	f032 0303 	bics.w	r3, r2, #3
 8018e84:	d101      	bne.n	8018e8a <block_merge_next+0x4a>
 8018e86:	f7ff fea3 	bl	8018bd0 <block_absorb.part.0>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018e8a:	686b      	ldr	r3, [r5, #4]
	prev->size += block_size(block) + block_header_overhead;
 8018e8c:	3204      	adds	r2, #4
	block_link_next(prev);
 8018e8e:	4620      	mov	r0, r4
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8018e90:	f023 0303 	bic.w	r3, r3, #3
	prev->size += block_size(block) + block_header_overhead;
 8018e94:	4413      	add	r3, r2
 8018e96:	6063      	str	r3, [r4, #4]
	block_link_next(prev);
 8018e98:	f7ff fe06 	bl	8018aa8 <block_link_next>
}
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	bd70      	pop	{r4, r5, r6, pc}
 8018ea0:	08029af1 	.word	0x08029af1
 8018ea4:	08029ca5 	.word	0x08029ca5
 8018ea8:	080297d8 	.word	0x080297d8
 8018eac:	08029b1d 	.word	0x08029b1d

08018eb0 <tlsf_walk_pool>:

void tlsf_walk_pool(pool_t pool, tlsf_walker walker, void* user)
{
 8018eb0:	b570      	push	{r4, r5, r6, lr}
	tlsf_walker pool_walker = walker ? walker : default_walker;
 8018eb2:	4d0c      	ldr	r5, [pc, #48]	; (8018ee4 <tlsf_walk_pool+0x34>)
{
 8018eb4:	4616      	mov	r6, r2
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018eb6:	1f04      	subs	r4, r0, #4
	tlsf_walker pool_walker = walker ? walker : default_walker;
 8018eb8:	2900      	cmp	r1, #0
 8018eba:	bf18      	it	ne
 8018ebc:	460d      	movne	r5, r1
	block_header_t* block =
		offset_to_block(pool, -(int)block_header_overhead);

	while (block && !block_is_last(block))
 8018ebe:	b11c      	cbz	r4, 8018ec8 <tlsf_walk_pool+0x18>
	return block_size(block) == 0;
 8018ec0:	6860      	ldr	r0, [r4, #4]
	while (block && !block_is_last(block))
 8018ec2:	f030 0103 	bics.w	r1, r0, #3
 8018ec6:	d100      	bne.n	8018eca <tlsf_walk_pool+0x1a>
			block_size(block),
			!block_is_free(block),
			user);
		block = block_next(block);
	}
}
 8018ec8:	bd70      	pop	{r4, r5, r6, pc}
		pool_walker(
 8018eca:	43c0      	mvns	r0, r0
 8018ecc:	4633      	mov	r3, r6
 8018ece:	f000 0201 	and.w	r2, r0, #1
 8018ed2:	f104 0008 	add.w	r0, r4, #8
 8018ed6:	47a8      	blx	r5
		block = block_next(block);
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f7ff fdcf 	bl	8018a7c <block_next>
 8018ede:	4604      	mov	r4, r0
 8018ee0:	e7ed      	b.n	8018ebe <tlsf_walk_pool+0xe>
 8018ee2:	bf00      	nop
 8018ee4:	08018a7b 	.word	0x08018a7b

08018ee8 <tlsf_add_pool>:
{
	return block_header_overhead;
}

pool_t tlsf_add_pool(tlsf_t tlsf, void* mem, size_t bytes)
{
 8018ee8:	b538      	push	{r3, r4, r5, lr}
	block_header_t* block;
	block_header_t* next;

	const size_t pool_overhead = tlsf_pool_overhead();
	const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8018eea:	3a08      	subs	r2, #8

	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
 8018eec:	f011 0303 	ands.w	r3, r1, #3
{
 8018ef0:	460c      	mov	r4, r1
	return x - (x & (align - 1));
 8018ef2:	f022 0203 	bic.w	r2, r2, #3
	if (((ptrdiff_t)mem % ALIGN_SIZE) != 0)
 8018ef6:	d115      	bne.n	8018f24 <tlsf_add_pool+0x3c>
		printf("tlsf_add_pool: Memory must be aligned by %u bytes.\n",
			(unsigned int)ALIGN_SIZE);
		return 0;
	}

	if (pool_bytes < block_size_min || pool_bytes > block_size_max)
 8018ef8:	f1a2 050c 	sub.w	r5, r2, #12
 8018efc:	f647 71f4 	movw	r1, #32756	; 0x7ff4
 8018f00:	428d      	cmp	r5, r1
 8018f02:	d811      	bhi.n	8018f28 <tlsf_add_pool+0x40>
	return tlsf_cast(block_header_t*, tlsf_cast(tlsfptr_t, ptr) + size);
 8018f04:	4625      	mov	r5, r4
	block->size &= ~block_header_prev_free_bit;
 8018f06:	f042 0201 	orr.w	r2, r2, #1
	block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8018f0a:	f855 3904 	ldr.w	r3, [r5], #-4
	*/
	block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
	block_set_size(block, pool_bytes);
	block_set_free(block);
	block_set_prev_used(block);
	block_insert(tlsf_cast(control_t*, tlsf), block);
 8018f0e:	4629      	mov	r1, r5
	block->size &= ~block_header_prev_free_bit;
 8018f10:	606a      	str	r2, [r5, #4]
	block_insert(tlsf_cast(control_t*, tlsf), block);
 8018f12:	f7ff fe8d 	bl	8018c30 <block_insert>

	/* Split the block to create a zero-size sentinel block. */
	next = block_link_next(block);
 8018f16:	4628      	mov	r0, r5
 8018f18:	f7ff fdc6 	bl	8018aa8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018f1c:	2302      	movs	r3, #2
 8018f1e:	6043      	str	r3, [r0, #4]
	block_set_size(next, 0);
	block_set_used(next);
	block_set_prev_free(next);

	return mem;
}
 8018f20:	4620      	mov	r0, r4
 8018f22:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8018f24:	2400      	movs	r4, #0
 8018f26:	e7fb      	b.n	8018f20 <tlsf_add_pool+0x38>
 8018f28:	461c      	mov	r4, r3
 8018f2a:	e7f9      	b.n	8018f20 <tlsf_add_pool+0x38>

08018f2c <tlsf_create>:
	{
		return 0;
	}
#endif

	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
 8018f2c:	f010 0203 	ands.w	r2, r0, #3
{
 8018f30:	b530      	push	{r4, r5, lr}
	if (((tlsfptr_t)mem % ALIGN_SIZE) != 0)
 8018f32:	d113      	bne.n	8018f5c <tlsf_create+0x30>
	control->block_null.next_free = &control->block_null;
 8018f34:	f100 0114 	add.w	r1, r0, #20
 8018f38:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8018f3c:	f500 6497 	add.w	r4, r0, #1208	; 0x4b8
	control->fl_bitmap = 0;
 8018f40:	6102      	str	r2, [r0, #16]
	control->block_null.prev_free = &control->block_null;
 8018f42:	e9c0 0002 	strd	r0, r0, [r0, #8]
		control->sl_bitmap[i] = 0;
 8018f46:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8018f4a:	f841 2b04 	str.w	r2, [r1], #4
			control->blocks[i][j] = &control->block_null;
 8018f4e:	f843 0b04 	str.w	r0, [r3], #4
		for (j = 0; j < SL_INDEX_COUNT; ++j)
 8018f52:	42ab      	cmp	r3, r5
 8018f54:	d1fb      	bne.n	8018f4e <tlsf_create+0x22>
	for (i = 0; i < FL_INDEX_COUNT; ++i)
 8018f56:	429c      	cmp	r4, r3
 8018f58:	d1f5      	bne.n	8018f46 <tlsf_create+0x1a>
	}

	control_constructor(tlsf_cast(control_t*, mem));

	return tlsf_cast(tlsf_t, mem);
}
 8018f5a:	bd30      	pop	{r4, r5, pc}
		return 0;
 8018f5c:	2000      	movs	r0, #0
 8018f5e:	e7fc      	b.n	8018f5a <tlsf_create+0x2e>

08018f60 <tlsf_create_with_pool>:

tlsf_t tlsf_create_with_pool(void* mem, size_t bytes)
{
 8018f60:	b570      	push	{r4, r5, r6, lr}
 8018f62:	460e      	mov	r6, r1
 8018f64:	4605      	mov	r5, r0
	tlsf_t tlsf = tlsf_create(mem);
 8018f66:	f7ff ffe1 	bl	8018f2c <tlsf_create>
 8018f6a:	4604      	mov	r4, r0
	tlsf_add_pool(tlsf, (char*)mem + tlsf_size(), bytes - tlsf_size());
 8018f6c:	f5a6 6297 	sub.w	r2, r6, #1208	; 0x4b8
 8018f70:	f505 6197 	add.w	r1, r5, #1208	; 0x4b8
 8018f74:	f7ff ffb8 	bl	8018ee8 <tlsf_add_pool>
	return tlsf;
}
 8018f78:	4620      	mov	r0, r4
 8018f7a:	bd70      	pop	{r4, r5, r6, pc}

08018f7c <tlsf_get_pool>:
}

pool_t tlsf_get_pool(tlsf_t tlsf)
{
	return tlsf_cast(pool_t, (char*)tlsf + tlsf_size());
}
 8018f7c:	f500 6097 	add.w	r0, r0, #1208	; 0x4b8
 8018f80:	4770      	bx	lr

08018f82 <tlsf_malloc>:

void* tlsf_malloc(tlsf_t tlsf, size_t size)
{
 8018f82:	b570      	push	{r4, r5, r6, lr}
 8018f84:	4606      	mov	r6, r0
	if (size)
 8018f86:	460c      	mov	r4, r1
 8018f88:	b141      	cbz	r1, 8018f9c <tlsf_malloc+0x1a>
	return (x + (align - 1)) & ~(align - 1);
 8018f8a:	3403      	adds	r4, #3
 8018f8c:	f024 0403 	bic.w	r4, r4, #3
		if (aligned < block_size_max) 
 8018f90:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8018f94:	d20b      	bcs.n	8018fae <tlsf_malloc+0x2c>
			adjust = tlsf_max(aligned, block_size_min);
 8018f96:	2c0c      	cmp	r4, #12
 8018f98:	bf38      	it	cc
 8018f9a:	240c      	movcc	r4, #12
	control_t* control = tlsf_cast(control_t*, tlsf);
	const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
	block_header_t* block = block_locate_free(control, adjust);
 8018f9c:	4621      	mov	r1, r4
 8018f9e:	4630      	mov	r0, r6
 8018fa0:	f7ff fec4 	bl	8018d2c <block_locate_free>
	if (block)
 8018fa4:	4605      	mov	r5, r0
 8018fa6:	b168      	cbz	r0, 8018fc4 <tlsf_malloc+0x42>
		tlsf_assert(size && "size must be non-zero");
 8018fa8:	b91c      	cbnz	r4, 8018fb2 <tlsf_malloc+0x30>
 8018faa:	f7ff fe1f 	bl	8018bec <block_prepare_used.part.0>
	size_t adjust = 0;
 8018fae:	2400      	movs	r4, #0
 8018fb0:	e7f4      	b.n	8018f9c <tlsf_malloc+0x1a>
		block_trim_free(control, block, size);
 8018fb2:	4601      	mov	r1, r0
 8018fb4:	4622      	mov	r2, r4
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	f7ff fe7a 	bl	8018cb0 <block_trim_free>
		block_mark_as_used(block);
 8018fbc:	4628      	mov	r0, r5
	return tlsf_cast(void*,
 8018fbe:	3508      	adds	r5, #8
		block_mark_as_used(block);
 8018fc0:	f7ff fdc2 	bl	8018b48 <block_mark_as_used>
	return block_prepare_used(control, block, adjust);
}
 8018fc4:	4628      	mov	r0, r5
 8018fc6:	bd70      	pop	{r4, r5, r6, pc}

08018fc8 <tlsf_free>:

	return block_prepare_used(control, block, adjust);
}

void tlsf_free(tlsf_t tlsf, void* ptr)
{
 8018fc8:	b570      	push	{r4, r5, r6, lr}
 8018fca:	4606      	mov	r6, r0
	/* Don't attempt to free a NULL pointer. */
	if (ptr)
 8018fcc:	460d      	mov	r5, r1
 8018fce:	2900      	cmp	r1, #0
 8018fd0:	d049      	beq.n	8019066 <tlsf_free+0x9e>
	return tlsf_cast(int, block->size & block_header_free_bit);
 8018fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
	return tlsf_cast(block_header_t*,
 8018fd6:	f1a1 0408 	sub.w	r4, r1, #8
	{
		control_t* control = tlsf_cast(control_t*, tlsf);
		block_header_t* block = block_from_ptr(ptr);
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 8018fda:	07d9      	lsls	r1, r3, #31
 8018fdc:	d506      	bpl.n	8018fec <tlsf_free+0x24>
 8018fde:	4b22      	ldr	r3, [pc, #136]	; (8019068 <tlsf_free+0xa0>)
 8018fe0:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8018fe4:	4a21      	ldr	r2, [pc, #132]	; (801906c <tlsf_free+0xa4>)
		tlsf_assert(prev && "prev physical block can't be null");
 8018fe6:	4822      	ldr	r0, [pc, #136]	; (8019070 <tlsf_free+0xa8>)
 8018fe8:	f009 ff22 	bl	8022e30 <__assert_func>
	block_header_t* next = block_link_next(block);
 8018fec:	4620      	mov	r0, r4
 8018fee:	f7ff fd5b 	bl	8018aa8 <block_link_next>
	block->size |= block_header_prev_free_bit;
 8018ff2:	6843      	ldr	r3, [r0, #4]
 8018ff4:	f043 0302 	orr.w	r3, r3, #2
 8018ff8:	6043      	str	r3, [r0, #4]
	block->size |= block_header_free_bit;
 8018ffa:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8018ffe:	f043 0301 	orr.w	r3, r3, #1
	if (block_is_prev_free(block))
 8019002:	079a      	lsls	r2, r3, #30
	block->size |= block_header_free_bit;
 8019004:	f845 3c04 	str.w	r3, [r5, #-4]
	if (block_is_prev_free(block))
 8019008:	d523      	bpl.n	8019052 <tlsf_free+0x8a>
	return block->prev_phys_block;
 801900a:	f855 4c08 	ldr.w	r4, [r5, #-8]
		tlsf_assert(prev && "prev physical block can't be null");
 801900e:	b924      	cbnz	r4, 801901a <tlsf_free+0x52>
 8019010:	4b18      	ldr	r3, [pc, #96]	; (8019074 <tlsf_free+0xac>)
 8019012:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8019016:	4a18      	ldr	r2, [pc, #96]	; (8019078 <tlsf_free+0xb0>)
 8019018:	e7e5      	b.n	8018fe6 <tlsf_free+0x1e>
	return tlsf_cast(int, block->size & block_header_free_bit);
 801901a:	6863      	ldr	r3, [r4, #4]
		tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 801901c:	07db      	lsls	r3, r3, #31
 801901e:	d404      	bmi.n	801902a <tlsf_free+0x62>
 8019020:	4b16      	ldr	r3, [pc, #88]	; (801907c <tlsf_free+0xb4>)
 8019022:	f240 21c1 	movw	r1, #705	; 0x2c1
 8019026:	4a14      	ldr	r2, [pc, #80]	; (8019078 <tlsf_free+0xb0>)
 8019028:	e7dd      	b.n	8018fe6 <tlsf_free+0x1e>
		block_remove(control, prev);
 801902a:	4621      	mov	r1, r4
 801902c:	4630      	mov	r0, r6
 801902e:	f7ff fe6b 	bl	8018d08 <block_remove>
	return block_size(block) == 0;
 8019032:	6862      	ldr	r2, [r4, #4]
	tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8019034:	f032 0303 	bics.w	r3, r2, #3
 8019038:	d101      	bne.n	801903e <tlsf_free+0x76>
 801903a:	f7ff fdc9 	bl	8018bd0 <block_absorb.part.0>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801903e:	f855 3c04 	ldr.w	r3, [r5, #-4]
	block_link_next(prev);
 8019042:	4620      	mov	r0, r4
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8019044:	f023 0303 	bic.w	r3, r3, #3
	prev->size += block_size(block) + block_header_overhead;
 8019048:	4413      	add	r3, r2
 801904a:	3304      	adds	r3, #4
 801904c:	6063      	str	r3, [r4, #4]
	block_link_next(prev);
 801904e:	f7ff fd2b 	bl	8018aa8 <block_link_next>
		block_mark_as_free(block);
		block = block_merge_prev(control, block);
		block = block_merge_next(control, block);
 8019052:	4621      	mov	r1, r4
 8019054:	4630      	mov	r0, r6
 8019056:	f7ff fef3 	bl	8018e40 <block_merge_next>
 801905a:	4601      	mov	r1, r0
		block_insert(control, block);
 801905c:	4630      	mov	r0, r6
	}
}
 801905e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		block_insert(control, block);
 8019062:	f7ff bde5 	b.w	8018c30 <block_insert>
}
 8019066:	bd70      	pop	{r4, r5, r6, pc}
 8019068:	08029b55 	.word	0x08029b55
 801906c:	08029cfb 	.word	0x08029cfb
 8019070:	080297d8 	.word	0x080297d8
 8019074:	08029b8d 	.word	0x08029b8d
 8019078:	08029c94 	.word	0x08029c94
 801907c:	08029bb9 	.word	0x08029bb9

08019080 <tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void* tlsf_realloc(tlsf_t tlsf, void* ptr, size_t size)
{
 8019080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019084:	4607      	mov	r7, r0
 8019086:	4615      	mov	r5, r2
	control_t* control = tlsf_cast(control_t*, tlsf);
	void* p = 0;

	/* Zero-size requests are treated as free. */
	if (ptr && size == 0)
 8019088:	460c      	mov	r4, r1
 801908a:	b131      	cbz	r1, 801909a <tlsf_realloc+0x1a>
 801908c:	b952      	cbnz	r2, 80190a4 <tlsf_realloc+0x24>
	void* p = 0;
 801908e:	462e      	mov	r6, r5
	{
		tlsf_free(tlsf, ptr);
 8019090:	f7ff ff9a 	bl	8018fc8 <tlsf_free>
			p = ptr;
		}
	}

	return p;
}
 8019094:	4630      	mov	r0, r6
 8019096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		p = tlsf_malloc(tlsf, size);
 801909a:	4611      	mov	r1, r2
}
 801909c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		p = tlsf_malloc(tlsf, size);
 80190a0:	f7ff bf6f 	b.w	8018f82 <tlsf_malloc>
	return tlsf_cast(block_header_t*,
 80190a4:	f1a1 0908 	sub.w	r9, r1, #8
		block_header_t* next = block_next(block);
 80190a8:	4648      	mov	r0, r9
 80190aa:	f7ff fce7 	bl	8018a7c <block_next>
		const size_t cursize = block_size(block);
 80190ae:	f854 bc04 	ldr.w	fp, [r4, #-4]
		block_header_t* next = block_next(block);
 80190b2:	4682      	mov	sl, r0
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80190b4:	2104      	movs	r1, #4
 80190b6:	4628      	mov	r0, r5
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80190b8:	f02b 0803 	bic.w	r8, fp, #3
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80190bc:	f7ff fe9e 	bl	8018dfc <adjust_request_size>
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 80190c0:	f01b 0f01 	tst.w	fp, #1
		const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80190c4:	4606      	mov	r6, r0
		tlsf_assert(!block_is_free(block) && "block already marked as free");
 80190c6:	d006      	beq.n	80190d6 <tlsf_realloc+0x56>
 80190c8:	4b27      	ldr	r3, [pc, #156]	; (8019168 <tlsf_realloc+0xe8>)
 80190ca:	f240 41e4 	movw	r1, #1252	; 0x4e4
 80190ce:	4a27      	ldr	r2, [pc, #156]	; (801916c <tlsf_realloc+0xec>)
	tlsf_assert(!block_is_free(block) && "block must be used");
 80190d0:	4827      	ldr	r0, [pc, #156]	; (8019170 <tlsf_realloc+0xf0>)
 80190d2:	f009 fead 	bl	8022e30 <__assert_func>
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 80190d6:	4580      	cmp	r8, r0
 80190d8:	d224      	bcs.n	8019124 <tlsf_realloc+0xa4>
		const size_t combined = cursize + block_size(next) + block_header_overhead;
 80190da:	f8da 3004 	ldr.w	r3, [sl, #4]
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 80190de:	07d9      	lsls	r1, r3, #31
 80190e0:	d506      	bpl.n	80190f0 <tlsf_realloc+0x70>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80190e2:	f023 0303 	bic.w	r3, r3, #3
		const size_t combined = cursize + block_size(next) + block_header_overhead;
 80190e6:	f108 0204 	add.w	r2, r8, #4
 80190ea:	4413      	add	r3, r2
		if (adjust > cursize && (!block_is_free(next) || adjust > combined))
 80190ec:	4283      	cmp	r3, r0
 80190ee:	d212      	bcs.n	8019116 <tlsf_realloc+0x96>
			p = tlsf_malloc(tlsf, size);
 80190f0:	4629      	mov	r1, r5
 80190f2:	4638      	mov	r0, r7
 80190f4:	f7ff ff45 	bl	8018f82 <tlsf_malloc>
			if (p)
 80190f8:	4606      	mov	r6, r0
 80190fa:	2800      	cmp	r0, #0
 80190fc:	d0ca      	beq.n	8019094 <tlsf_realloc+0x14>
				lv_memcpy(p, ptr, minsize);
 80190fe:	4545      	cmp	r5, r8
 8019100:	462a      	mov	r2, r5
 8019102:	4621      	mov	r1, r4
 8019104:	bf28      	it	cs
 8019106:	4642      	movcs	r2, r8
 8019108:	f7fe fc3e 	bl	8017988 <lv_memcpy>
				tlsf_free(tlsf, ptr);
 801910c:	4621      	mov	r1, r4
 801910e:	4638      	mov	r0, r7
 8019110:	f7ff ff5a 	bl	8018fc8 <tlsf_free>
 8019114:	e7be      	b.n	8019094 <tlsf_realloc+0x14>
				block_merge_next(control, block);
 8019116:	4649      	mov	r1, r9
 8019118:	4638      	mov	r0, r7
 801911a:	f7ff fe91 	bl	8018e40 <block_merge_next>
				block_mark_as_used(block);
 801911e:	4648      	mov	r0, r9
 8019120:	f7ff fd12 	bl	8018b48 <block_mark_as_used>
	tlsf_assert(!block_is_free(block) && "block must be used");
 8019124:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019128:	07da      	lsls	r2, r3, #31
 801912a:	d504      	bpl.n	8019136 <tlsf_realloc+0xb6>
 801912c:	4b11      	ldr	r3, [pc, #68]	; (8019174 <tlsf_realloc+0xf4>)
 801912e:	f240 21e9 	movw	r1, #745	; 0x2e9
 8019132:	4a11      	ldr	r2, [pc, #68]	; (8019178 <tlsf_realloc+0xf8>)
 8019134:	e7cc      	b.n	80190d0 <tlsf_realloc+0x50>
	return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8019136:	f023 0303 	bic.w	r3, r3, #3
	return block_size(block) >= sizeof(block_header_t) + size;
 801913a:	f106 0210 	add.w	r2, r6, #16
	if (block_can_split(block, size))
 801913e:	4293      	cmp	r3, r2
 8019140:	d30f      	bcc.n	8019162 <tlsf_realloc+0xe2>
		block_header_t* remaining_block = block_split(block, size);
 8019142:	4631      	mov	r1, r6
 8019144:	4648      	mov	r0, r9
 8019146:	f7ff fcb5 	bl	8018ab4 <block_split>
	block->size &= ~block_header_prev_free_bit;
 801914a:	6843      	ldr	r3, [r0, #4]
		block_header_t* remaining_block = block_split(block, size);
 801914c:	4601      	mov	r1, r0
	block->size &= ~block_header_prev_free_bit;
 801914e:	f023 0302 	bic.w	r3, r3, #2
 8019152:	6043      	str	r3, [r0, #4]
		remaining_block = block_merge_next(control, remaining_block);
 8019154:	4638      	mov	r0, r7
 8019156:	f7ff fe73 	bl	8018e40 <block_merge_next>
 801915a:	4601      	mov	r1, r0
		block_insert(control, remaining_block);
 801915c:	4638      	mov	r0, r7
 801915e:	f7ff fd67 	bl	8018c30 <block_insert>
 8019162:	4626      	mov	r6, r4
	return p;
 8019164:	e796      	b.n	8019094 <tlsf_realloc+0x14>
 8019166:	bf00      	nop
 8019168:	08029b55 	.word	0x08029b55
 801916c:	08029d05 	.word	0x08029d05
 8019170:	080297d8 	.word	0x080297d8
 8019174:	08029bff 	.word	0x08029bff
 8019178:	08029cc6 	.word	0x08029cc6

0801917c <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
 801917c:	f990 2000 	ldrsb.w	r2, [r0]
 8019180:	7803      	ldrb	r3, [r0, #0]
 8019182:	2a00      	cmp	r2, #0
 8019184:	da0e      	bge.n	80191a4 <lv_txt_utf8_size+0x28>
        return 1;
    else if((str[0] & 0xE0) == 0xC0)
 8019186:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 801918a:	2ac0      	cmp	r2, #192	; 0xc0
 801918c:	d00c      	beq.n	80191a8 <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
 801918e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8019192:	2ae0      	cmp	r2, #224	; 0xe0
 8019194:	d00a      	beq.n	80191ac <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
 8019196:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801919a:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
 801919c:	bf14      	ite	ne
 801919e:	2000      	movne	r0, #0
 80191a0:	2004      	moveq	r0, #4
 80191a2:	4770      	bx	lr
        return 1;
 80191a4:	2001      	movs	r0, #1
 80191a6:	4770      	bx	lr
        return 2;
 80191a8:	2002      	movs	r0, #2
 80191aa:	4770      	bx	lr
        return 3;
 80191ac:	2003      	movs	r0, #3
    return 0; /*If the char was invalid tell it's 1 byte long*/
}
 80191ae:	4770      	bx	lr

080191b0 <lv_txt_utf8_next>:
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80191b0:	2300      	movs	r3, #0
{
 80191b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
 80191b4:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 80191b6:	b901      	cbnz	r1, 80191ba <lv_txt_utf8_next+0xa>
 80191b8:	a901      	add	r1, sp, #4

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 80191ba:	680a      	ldr	r2, [r1, #0]
 80191bc:	5685      	ldrsb	r5, [r0, r2]
 80191be:	1c54      	adds	r4, r2, #1
 80191c0:	5c83      	ldrb	r3, [r0, r2]
 80191c2:	2d00      	cmp	r5, #0
 80191c4:	db03      	blt.n	80191ce <lv_txt_utf8_next+0x1e>
        result = txt[*i];
 80191c6:	4618      	mov	r0, r3
        (*i)++;
 80191c8:	600c      	str	r4, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 80191ca:	b002      	add	sp, #8
 80191cc:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
 80191ce:	f003 05e0 	and.w	r5, r3, #224	; 0xe0
 80191d2:	2dc0      	cmp	r5, #192	; 0xc0
 80191d4:	d110      	bne.n	80191f8 <lv_txt_utf8_next+0x48>
            (*i)++;
 80191d6:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80191d8:	5d00      	ldrb	r0, [r0, r4]
 80191da:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 80191de:	2c80      	cmp	r4, #128	; 0x80
 80191e0:	d001      	beq.n	80191e6 <lv_txt_utf8_next+0x36>
    uint32_t result = 0;
 80191e2:	2000      	movs	r0, #0
 80191e4:	e7f1      	b.n	80191ca <lv_txt_utf8_next+0x1a>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80191e6:	019b      	lsls	r3, r3, #6
            result += (txt[*i] & 0x3F);
 80191e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            (*i)++;
 80191ec:	3202      	adds	r2, #2
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80191ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 80191f2:	4418      	add	r0, r3
            (*i)++;
 80191f4:	600a      	str	r2, [r1, #0]
 80191f6:	e7e8      	b.n	80191ca <lv_txt_utf8_next+0x1a>
        else if((txt[*i] & 0xF0) == 0xE0) {
 80191f8:	f003 05f0 	and.w	r5, r3, #240	; 0xf0
 80191fc:	2de0      	cmp	r5, #224	; 0xe0
 80191fe:	d117      	bne.n	8019230 <lv_txt_utf8_next+0x80>
            (*i)++;
 8019200:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019202:	5d04      	ldrb	r4, [r0, r4]
 8019204:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8019208:	2d80      	cmp	r5, #128	; 0x80
 801920a:	d1ea      	bne.n	80191e2 <lv_txt_utf8_next+0x32>
            (*i)++;
 801920c:	1c95      	adds	r5, r2, #2
 801920e:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019210:	5d45      	ldrb	r5, [r0, r5]
 8019212:	f005 00c0 	and.w	r0, r5, #192	; 0xc0
 8019216:	2880      	cmp	r0, #128	; 0x80
 8019218:	d1e3      	bne.n	80191e2 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801921a:	0318      	lsls	r0, r3, #12
            result += (txt[*i] & 0x3F);
 801921c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8019220:	01a3      	lsls	r3, r4, #6
            (*i)++;
 8019222:	3203      	adds	r2, #3
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8019224:	b280      	uxth	r0, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8019226:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 801922a:	4428      	add	r0, r5
            result += (txt[*i] & 0x3F);
 801922c:	4418      	add	r0, r3
            (*i)++;
 801922e:	e7e1      	b.n	80191f4 <lv_txt_utf8_next+0x44>
        else if((txt[*i] & 0xF8) == 0xF0) {
 8019230:	f003 05f8 	and.w	r5, r3, #248	; 0xf8
            (*i)++;
 8019234:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
 8019236:	2df0      	cmp	r5, #240	; 0xf0
 8019238:	d1d3      	bne.n	80191e2 <lv_txt_utf8_next+0x32>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801923a:	5d04      	ldrb	r4, [r0, r4]
 801923c:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
 8019240:	2d80      	cmp	r5, #128	; 0x80
 8019242:	d1ce      	bne.n	80191e2 <lv_txt_utf8_next+0x32>
            (*i)++;
 8019244:	1c95      	adds	r5, r2, #2
 8019246:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019248:	5d45      	ldrb	r5, [r0, r5]
 801924a:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 801924e:	2e80      	cmp	r6, #128	; 0x80
 8019250:	d1c7      	bne.n	80191e2 <lv_txt_utf8_next+0x32>
            (*i)++;
 8019252:	1cd6      	adds	r6, r2, #3
 8019254:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8019256:	5d86      	ldrb	r6, [r0, r6]
 8019258:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
 801925c:	2880      	cmp	r0, #128	; 0x80
 801925e:	d1c0      	bne.n	80191e2 <lv_txt_utf8_next+0x32>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8019260:	049b      	lsls	r3, r3, #18
            result += txt[*i] & 0x3F;
 8019262:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8019266:	0320      	lsls	r0, r4, #12
            (*i)++;
 8019268:	3204      	adds	r2, #4
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801926a:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801926e:	f400 307c 	and.w	r0, r0, #258048	; 0x3f000
 8019272:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8019274:	01a8      	lsls	r0, r5, #6
 8019276:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 801927a:	4430      	add	r0, r6
 801927c:	4418      	add	r0, r3
            (*i)++;
 801927e:	e7b9      	b.n	80191f4 <lv_txt_utf8_next+0x44>

08019280 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8019280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
 8019284:	2400      	movs	r4, #0
{
 8019286:	4605      	mov	r5, r0
 8019288:	460f      	mov	r7, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 801928a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80192b4 <lv_txt_utf8_get_byte_id+0x34>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 801928e:	4626      	mov	r6, r4
 8019290:	42be      	cmp	r6, r7
 8019292:	d002      	beq.n	801929a <lv_txt_utf8_get_byte_id+0x1a>
 8019294:	5d2b      	ldrb	r3, [r5, r4]
 8019296:	1928      	adds	r0, r5, r4
 8019298:	b913      	cbnz	r3, 80192a0 <lv_txt_utf8_get_byte_id+0x20>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
 801929a:	4620      	mov	r0, r4
 801929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80192a0:	f8d8 3000 	ldr.w	r3, [r8]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80192a4:	3601      	adds	r6, #1
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80192a6:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
 80192a8:	2801      	cmp	r0, #1
 80192aa:	bf38      	it	cc
 80192ac:	2001      	movcc	r0, #1
 80192ae:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80192b2:	e7ed      	b.n	8019290 <lv_txt_utf8_get_byte_id+0x10>
 80192b4:	20000048 	.word	0x20000048

080192b8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80192b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
 80192ba:	2400      	movs	r4, #0
{
 80192bc:	4606      	mov	r6, r0
 80192be:	460d      	mov	r5, r1
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80192c0:	4f06      	ldr	r7, [pc, #24]	; (80192dc <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
 80192c2:	9401      	str	r4, [sp, #4]
    while(i < byte_id) {
 80192c4:	9b01      	ldr	r3, [sp, #4]
 80192c6:	42ab      	cmp	r3, r5
 80192c8:	d302      	bcc.n	80192d0 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
 80192ca:	4620      	mov	r0, r4
 80192cc:	b003      	add	sp, #12
 80192ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	a901      	add	r1, sp, #4
 80192d4:	4630      	mov	r0, r6
        char_cnt++;
 80192d6:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80192d8:	4798      	blx	r3
        char_cnt++;
 80192da:	e7f3      	b.n	80192c4 <lv_txt_utf8_get_char_id+0xc>
 80192dc:	20000040 	.word	0x20000040

080192e0 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 80192e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
 80192e2:	2400      	movs	r4, #0
{
 80192e4:	4605      	mov	r5, r0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
 80192e6:	4e07      	ldr	r6, [pc, #28]	; (8019304 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
 80192e8:	9401      	str	r4, [sp, #4]
    while(txt[i] != '\0') {
 80192ea:	9b01      	ldr	r3, [sp, #4]
 80192ec:	5ceb      	ldrb	r3, [r5, r3]
 80192ee:	b913      	cbnz	r3, 80192f6 <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
 80192f0:	4620      	mov	r0, r4
 80192f2:	b002      	add	sp, #8
 80192f4:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
 80192f6:	6833      	ldr	r3, [r6, #0]
 80192f8:	a901      	add	r1, sp, #4
 80192fa:	4628      	mov	r0, r5
        len++;
 80192fc:	3401      	adds	r4, #1
        _lv_txt_encoded_next(txt, &i);
 80192fe:	4798      	blx	r3
        len++;
 8019300:	e7f3      	b.n	80192ea <lv_txt_utf8_get_length+0xa>
 8019302:	bf00      	nop
 8019304:	20000040 	.word	0x20000040

08019308 <lv_txt_unicode_to_utf8>:
    if(letter_uni < 128) return letter_uni;
 8019308:	287f      	cmp	r0, #127	; 0x7f
{
 801930a:	b082      	sub	sp, #8
    if(letter_uni < 128) return letter_uni;
 801930c:	d911      	bls.n	8019332 <lv_txt_unicode_to_utf8+0x2a>
    if(letter_uni < 0x0800) {
 801930e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8019312:	d210      	bcs.n	8019336 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8019314:	0983      	lsrs	r3, r0, #6
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019316:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 801931a:	f063 033f 	orn	r3, r3, #63	; 0x3f
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801931e:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8019322:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[2] = 0;
 8019326:	2300      	movs	r3, #0
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019328:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 801932c:	f8ad 3006 	strh.w	r3, [sp, #6]
    return *res_p;
 8019330:	9801      	ldr	r0, [sp, #4]
}
 8019332:	b002      	add	sp, #8
 8019334:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8019336:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801933a:	d214      	bcs.n	8019366 <lv_txt_unicode_to_utf8+0x5e>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 801933c:	0b03      	lsrs	r3, r0, #12
 801933e:	f063 031f 	orn	r3, r3, #31
 8019342:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8019346:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801934a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 801934e:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019352:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8019356:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[3] = 0;
 801935a:	2300      	movs	r3, #0
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801935c:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8019360:	f88d 3007 	strb.w	r3, [sp, #7]
 8019364:	e7e4      	b.n	8019330 <lv_txt_unicode_to_utf8+0x28>
    else if(letter_uni < 0x110000) {
 8019366:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 801936a:	d2e1      	bcs.n	8019330 <lv_txt_unicode_to_utf8+0x28>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 801936c:	0c83      	lsrs	r3, r0, #18
 801936e:	f063 030f 	orn	r3, r3, #15
 8019372:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8019376:	f3c0 3305 	ubfx	r3, r0, #12, #6
 801937a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801937e:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8019382:	f3c0 1385 	ubfx	r3, r0, #6, #6
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019386:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 801938a:	f063 037f 	orn	r3, r3, #127	; 0x7f
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 801938e:	f060 007f 	orn	r0, r0, #127	; 0x7f
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8019392:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8019396:	f88d 0007 	strb.w	r0, [sp, #7]
 801939a:	e7c9      	b.n	8019330 <lv_txt_unicode_to_utf8+0x28>

0801939c <lv_txt_utf8_prev>:
    (*i)--;
 801939c:	680b      	ldr	r3, [r1, #0]
{
 801939e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
 80193a0:	3b01      	subs	r3, #1
{
 80193a2:	4606      	mov	r6, r0
 80193a4:	460c      	mov	r4, r1
    (*i)--;
 80193a6:	2504      	movs	r5, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80193a8:	4f0c      	ldr	r7, [pc, #48]	; (80193dc <lv_txt_utf8_prev+0x40>)
    (*i)--;
 80193aa:	600b      	str	r3, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80193ac:	6820      	ldr	r0, [r4, #0]
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	4430      	add	r0, r6
 80193b2:	4798      	blx	r3
        if(c_size == 0) {
 80193b4:	6823      	ldr	r3, [r4, #0]
 80193b6:	b948      	cbnz	r0, 80193cc <lv_txt_utf8_prev+0x30>
            if(*i != 0)
 80193b8:	b12b      	cbz	r3, 80193c6 <lv_txt_utf8_prev+0x2a>
                (*i)--;
 80193ba:	3d01      	subs	r5, #1
 80193bc:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80193be:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
 80193c2:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80193c4:	d1f2      	bne.n	80193ac <lv_txt_utf8_prev+0x10>
 80193c6:	2000      	movs	r0, #0
}
 80193c8:	b003      	add	sp, #12
 80193ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 80193cc:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 80193ce:	a901      	add	r1, sp, #4
 80193d0:	4b03      	ldr	r3, [pc, #12]	; (80193e0 <lv_txt_utf8_prev+0x44>)
 80193d2:	4630      	mov	r0, r6
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	4798      	blx	r3
    return letter;
 80193d8:	e7f6      	b.n	80193c8 <lv_txt_utf8_prev+0x2c>
 80193da:	bf00      	nop
 80193dc:	20000048 	.word	0x20000048
 80193e0:	20000040 	.word	0x20000040

080193e4 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80193e4:	2923      	cmp	r1, #35	; 0x23
{
 80193e6:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80193e8:	d117      	bne.n	801941a <_lv_txt_is_cmd+0x36>
 80193ea:	7803      	ldrb	r3, [r0, #0]
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80193ec:	b91b      	cbnz	r3, 80193f6 <_lv_txt_is_cmd+0x12>
            *state = LV_TEXT_CMD_STATE_PAR;
 80193ee:	2301      	movs	r3, #1
 80193f0:	7003      	strb	r3, [r0, #0]
            ret    = true;
 80193f2:	2001      	movs	r0, #1
 80193f4:	e004      	b.n	8019400 <_lv_txt_is_cmd+0x1c>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80193f6:	2b01      	cmp	r3, #1
 80193f8:	f04f 0000 	mov.w	r0, #0
 80193fc:	d109      	bne.n	8019412 <_lv_txt_is_cmd+0x2e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80193fe:	7010      	strb	r0, [r2, #0]
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8019400:	7813      	ldrb	r3, [r2, #0]
 8019402:	2b01      	cmp	r3, #1
 8019404:	d104      	bne.n	8019410 <_lv_txt_is_cmd+0x2c>
        if(c == ' ') {
 8019406:	2920      	cmp	r1, #32
        ret = true;
 8019408:	4618      	mov	r0, r3
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801940a:	bf04      	itt	eq
 801940c:	2102      	moveq	r1, #2
 801940e:	7011      	strbeq	r1, [r2, #0]
}
 8019410:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8019412:	2b02      	cmp	r3, #2
 8019414:	d1f4      	bne.n	8019400 <_lv_txt_is_cmd+0x1c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8019416:	7010      	strb	r0, [r2, #0]
 8019418:	e7eb      	b.n	80193f2 <_lv_txt_is_cmd+0xe>
    bool ret = false;
 801941a:	2000      	movs	r0, #0
 801941c:	e7f0      	b.n	8019400 <_lv_txt_is_cmd+0x1c>
	...

08019420 <_lv_txt_get_next_line>:
{
 8019420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019424:	b08f      	sub	sp, #60	; 0x3c
 8019426:	4699      	mov	r9, r3
    if(txt == NULL) return 0;
 8019428:	4607      	mov	r7, r0
{
 801942a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 801942e:	9102      	str	r1, [sp, #8]
 8019430:	9204      	str	r2, [sp, #16]
 8019432:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
 8019434:	b190      	cbz	r0, 801945c <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
 8019436:	2900      	cmp	r1, #0
 8019438:	f000 80cb 	beq.w	80195d2 <_lv_txt_get_next_line+0x1b2>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 801943c:	9b03      	ldr	r3, [sp, #12]
 801943e:	f013 0306 	ands.w	r3, r3, #6
 8019442:	d00e      	beq.n	8019462 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8019444:	2000      	movs	r0, #0
 8019446:	e000      	b.n	801944a <_lv_txt_get_next_line+0x2a>
 8019448:	3001      	adds	r0, #1
 801944a:	5c3b      	ldrb	r3, [r7, r0]
 801944c:	2b0a      	cmp	r3, #10
 801944e:	f000 80c2 	beq.w	80195d6 <_lv_txt_get_next_line+0x1b6>
 8019452:	2b0d      	cmp	r3, #13
 8019454:	f000 80bf 	beq.w	80195d6 <_lv_txt_get_next_line+0x1b6>
 8019458:	2b00      	cmp	r3, #0
 801945a:	d1f5      	bne.n	8019448 <_lv_txt_get_next_line+0x28>
}
 801945c:	b00f      	add	sp, #60	; 0x3c
 801945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019462:	9a03      	ldr	r2, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8019464:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019468:	f012 0202 	ands.w	r2, r2, #2
    uint32_t i = 0;                                        /*Iterating index into txt*/
 801946c:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801946e:	bf18      	it	ne
 8019470:	f44f 49c0 	movne.w	r9, #24576	; 0x6000
 8019474:	9205      	str	r2, [sp, #20]
    while(txt[i] != '\0' && max_width > 0) {
 8019476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019478:	eb07 0a03 	add.w	sl, r7, r3
 801947c:	9300      	str	r3, [sp, #0]
 801947e:	5cfb      	ldrb	r3, [r7, r3]
 8019480:	2b00      	cmp	r3, #0
 8019482:	f000 808d 	beq.w	80195a0 <_lv_txt_get_next_line+0x180>
 8019486:	f1b9 0f00 	cmp.w	r9, #0
 801948a:	f340 8089 	ble.w	80195a0 <_lv_txt_get_next_line+0x180>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801948e:	9b05      	ldr	r3, [sp, #20]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8019490:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
 8019492:	a90c      	add	r1, sp, #48	; 0x30
 8019494:	4650      	mov	r0, sl
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019496:	2b00      	cmp	r3, #0
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8019498:	f04f 3bff 	mov.w	fp, #4294967295
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 801949c:	4625      	mov	r5, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 801949e:	4626      	mov	r6, r4
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80194a0:	bf0c      	ite	eq
 80194a2:	464b      	moveq	r3, r9
 80194a4:	f44f 43c0 	movne.w	r3, #24576	; 0x6000
 80194a8:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
 80194aa:	4b4c      	ldr	r3, [pc, #304]	; (80195dc <_lv_txt_get_next_line+0x1bc>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80194ac:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 80194b0:	681a      	ldr	r2, [r3, #0]
 80194b2:	4790      	blx	r2
    i_next_next = i_next;
 80194b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
 80194b6:	4680      	mov	r8, r0
    uint32_t letter_next = 0; /*Letter at i_next*/
 80194b8:	4622      	mov	r2, r4
    i_next_next = i_next;
 80194ba:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80194bc:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80194be:	9401      	str	r4, [sp, #4]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80194c0:	f003 0301 	and.w	r3, r3, #1
 80194c4:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
 80194c6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 80194ca:	b949      	cbnz	r1, 80194e0 <_lv_txt_get_next_line+0xc0>
    if(break_index == NO_BREAK_FOUND) {
 80194cc:	f1bb 3fff 	cmp.w	fp, #4294967295
 80194d0:	d052      	beq.n	8019578 <_lv_txt_get_next_line+0x158>
    if(force) return break_index;
 80194d2:	9b00      	ldr	r3, [sp, #0]
 80194d4:	465e      	mov	r6, fp
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d056      	beq.n	8019588 <_lv_txt_get_next_line+0x168>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 80194da:	2400      	movs	r4, #0
    return 0;
 80194dc:	4626      	mov	r6, r4
 80194de:	e053      	b.n	8019588 <_lv_txt_get_next_line+0x168>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80194e0:	4b3e      	ldr	r3, [pc, #248]	; (80195dc <_lv_txt_get_next_line+0x1bc>)
 80194e2:	a90d      	add	r1, sp, #52	; 0x34
 80194e4:	4650      	mov	r0, sl
 80194e6:	681a      	ldr	r2, [r3, #0]
 80194e8:	4790      	blx	r2
        word_len++;
 80194ea:	9b01      	ldr	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80194ec:	4602      	mov	r2, r0
        word_len++;
 80194ee:	3301      	adds	r3, #1
 80194f0:	9306      	str	r3, [sp, #24]
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80194f2:	9b08      	ldr	r3, [sp, #32]
 80194f4:	b173      	cbz	r3, 8019514 <_lv_txt_get_next_line+0xf4>
 80194f6:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80194f8:	4641      	mov	r1, r8
 80194fa:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 80194fe:	f7ff ff71 	bl	80193e4 <_lv_txt_is_cmd>
 8019502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019504:	b130      	cbz	r0, 8019514 <_lv_txt_get_next_line+0xf4>
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8019506:	9b06      	ldr	r3, [sp, #24]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8019508:	4690      	mov	r8, r2
        i_next = i_next_next;
 801950a:	e9dd 610c 	ldrd	r6, r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801950e:	9301      	str	r3, [sp, #4]
        i_next = i_next_next;
 8019510:	910c      	str	r1, [sp, #48]	; 0x30
        letter = letter_next;
 8019512:	e7d8      	b.n	80194c6 <_lv_txt_get_next_line+0xa6>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8019514:	4641      	mov	r1, r8
 8019516:	9802      	ldr	r0, [sp, #8]
 8019518:	9209      	str	r2, [sp, #36]	; 0x24
 801951a:	f7fd f8c3 	bl	80166a4 <lv_font_get_glyph_width>
        cur_w += letter_w;
 801951e:	4405      	add	r5, r0
        if(letter_w > 0) {
 8019520:	b200      	sxth	r0, r0
 8019522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019524:	2800      	cmp	r0, #0
        cur_w += letter_w;
 8019526:	b2ad      	uxth	r5, r5
            cur_w += letter_space;
 8019528:	bfc2      	ittt	gt
 801952a:	9b04      	ldrgt	r3, [sp, #16]
 801952c:	18ed      	addgt	r5, r5, r3
 801952e:	b2ad      	uxthgt	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8019530:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019534:	b22d      	sxth	r5, r5
 8019536:	d105      	bne.n	8019544 <_lv_txt_get_next_line+0x124>
 8019538:	9b04      	ldr	r3, [sp, #16]
 801953a:	1ae9      	subs	r1, r5, r3
 801953c:	9b07      	ldr	r3, [sp, #28]
 801953e:	4299      	cmp	r1, r3
 8019540:	bfc8      	it	gt
 8019542:	46b3      	movgt	fp, r6
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
 8019544:	f1b8 0f0a 	cmp.w	r8, #10
 8019548:	d010      	beq.n	801956c <_lv_txt_get_next_line+0x14c>
 801954a:	f1b8 0f0d 	cmp.w	r8, #13
 801954e:	d00d      	beq.n	801956c <_lv_txt_get_next_line+0x14c>
 8019550:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8019552:	b2c8      	uxtb	r0, r1
 8019554:	4b22      	ldr	r3, [pc, #136]	; (80195e0 <_lv_txt_get_next_line+0x1c0>)
 8019556:	5c18      	ldrb	r0, [r3, r0]
 8019558:	b920      	cbnz	r0, 8019564 <_lv_txt_get_next_line+0x144>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801955a:	f1bb 3fff 	cmp.w	fp, #4294967295
 801955e:	bf08      	it	eq
 8019560:	462c      	moveq	r4, r5
 8019562:	e7d0      	b.n	8019506 <_lv_txt_get_next_line+0xe6>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8019564:	4580      	cmp	r8, r0
 8019566:	f101 0101 	add.w	r1, r1, #1
 801956a:	d1f2      	bne.n	8019552 <_lv_txt_get_next_line+0x132>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 801956c:	2e00      	cmp	r6, #0
 801956e:	d1ad      	bne.n	80194cc <_lv_txt_get_next_line+0xac>
 8019570:	f1bb 3fff 	cmp.w	fp, #4294967295
 8019574:	d1ad      	bne.n	80194d2 <_lv_txt_get_next_line+0xb2>
 8019576:	462c      	mov	r4, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8019578:	9b01      	ldr	r3, [sp, #4]
 801957a:	b123      	cbz	r3, 8019586 <_lv_txt_get_next_line+0x166>
 801957c:	f1b8 0f0d 	cmp.w	r8, #13
 8019580:	d102      	bne.n	8019588 <_lv_txt_get_next_line+0x168>
 8019582:	2a0a      	cmp	r2, #10
 8019584:	d100      	bne.n	8019588 <_lv_txt_get_next_line+0x168>
 8019586:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        max_width -= word_w;
 8019588:	eba9 0904 	sub.w	r9, r9, r4
 801958c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801958e:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
 8019592:	b976      	cbnz	r6, 80195b2 <_lv_txt_get_next_line+0x192>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
 8019594:	b95b      	cbnz	r3, 80195ae <_lv_txt_get_next_line+0x18e>
 8019596:	4b11      	ldr	r3, [pc, #68]	; (80195dc <_lv_txt_get_next_line+0x1bc>)
 8019598:	a90b      	add	r1, sp, #44	; 0x2c
 801959a:	4638      	mov	r0, r7
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	4798      	blx	r3
    if(i == 0) {
 80195a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80195a2:	b923      	cbnz	r3, 80195ae <_lv_txt_get_next_line+0x18e>
        _lv_txt_encoded_next(txt, &i);
 80195a4:	4b0d      	ldr	r3, [pc, #52]	; (80195dc <_lv_txt_get_next_line+0x1bc>)
 80195a6:	a90b      	add	r1, sp, #44	; 0x2c
 80195a8:	4638      	mov	r0, r7
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	4798      	blx	r3
    return i;
 80195ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80195b0:	e754      	b.n	801945c <_lv_txt_get_next_line+0x3c>
        i += advance;
 80195b2:	441e      	add	r6, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80195b4:	783b      	ldrb	r3, [r7, #0]
 80195b6:	2b0a      	cmp	r3, #10
        i += advance;
 80195b8:	960b      	str	r6, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80195ba:	d0f1      	beq.n	80195a0 <_lv_txt_get_next_line+0x180>
 80195bc:	2b0d      	cmp	r3, #13
 80195be:	d0ef      	beq.n	80195a0 <_lv_txt_get_next_line+0x180>
        if(txt[i] == '\n' || txt[i] == '\r') {
 80195c0:	5dbb      	ldrb	r3, [r7, r6]
 80195c2:	2b0a      	cmp	r3, #10
 80195c4:	d002      	beq.n	80195cc <_lv_txt_get_next_line+0x1ac>
 80195c6:	2b0d      	cmp	r3, #13
 80195c8:	f47f af55 	bne.w	8019476 <_lv_txt_get_next_line+0x56>
            i++;  /*Include the following newline in the current line*/
 80195cc:	3601      	adds	r6, #1
 80195ce:	960b      	str	r6, [sp, #44]	; 0x2c
            break;
 80195d0:	e7e6      	b.n	80195a0 <_lv_txt_get_next_line+0x180>
    if(txt == NULL) return 0;
 80195d2:	9802      	ldr	r0, [sp, #8]
 80195d4:	e742      	b.n	801945c <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 80195d6:	3001      	adds	r0, #1
 80195d8:	e740      	b.n	801945c <_lv_txt_get_next_line+0x3c>
 80195da:	bf00      	nop
 80195dc:	20000040 	.word	0x20000040
 80195e0:	08029d12 	.word	0x08029d12

080195e4 <_lv_txt_ins>:
{
 80195e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195e8:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
 80195ea:	4610      	mov	r0, r2
{
 80195ec:	4688      	mov	r8, r1
 80195ee:	4616      	mov	r6, r2
    size_t ins_len = strlen(ins_txt);
 80195f0:	f7e6 fe18 	bl	8000224 <strlen>
    if(ins_len == 0) return;
 80195f4:	4605      	mov	r5, r0
 80195f6:	b1a8      	cbz	r0, 8019624 <_lv_txt_ins+0x40>
    size_t old_len = strlen(txt_buf);
 80195f8:	4620      	mov	r0, r4
 80195fa:	f7e6 fe13 	bl	8000224 <strlen>
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 80195fe:	4b0c      	ldr	r3, [pc, #48]	; (8019630 <_lv_txt_ins+0x4c>)
    size_t new_len = ins_len + old_len;
 8019600:	1947      	adds	r7, r0, r5
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8019602:	4641      	mov	r1, r8
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4620      	mov	r0, r4
 8019608:	4798      	blx	r3
        txt_buf[i] = txt_buf[i - ins_len];
 801960a:	1b62      	subs	r2, r4, r5
    for(i = new_len; i >= pos + ins_len; i--) {
 801960c:	182b      	adds	r3, r5, r0
 801960e:	42bb      	cmp	r3, r7
 8019610:	d90a      	bls.n	8019628 <_lv_txt_ins+0x44>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 8019612:	4404      	add	r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 8019614:	3e01      	subs	r6, #1
 8019616:	4425      	add	r5, r4
        *d8 = *s8;
 8019618:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801961c:	f804 3b01 	strb.w	r3, [r4], #1
    while(len) {
 8019620:	42ac      	cmp	r4, r5
 8019622:	d1f9      	bne.n	8019618 <_lv_txt_ins+0x34>
}
 8019624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt_buf[i] = txt_buf[i - ins_len];
 8019628:	5dd1      	ldrb	r1, [r2, r7]
 801962a:	55e1      	strb	r1, [r4, r7]
    for(i = new_len; i >= pos + ins_len; i--) {
 801962c:	3f01      	subs	r7, #1
 801962e:	e7ee      	b.n	801960e <_lv_txt_ins+0x2a>
 8019630:	20000038 	.word	0x20000038

08019634 <_lv_txt_cut>:
{
 8019634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019638:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 801963a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8019678 <_lv_txt_cut+0x44>
{
 801963e:	4617      	mov	r7, r2
 8019640:	9101      	str	r1, [sp, #4]
    size_t old_len = strlen(txt);
 8019642:	f7e6 fdef 	bl	8000224 <strlen>
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8019646:	f8d8 3000 	ldr.w	r3, [r8]
    size_t old_len = strlen(txt);
 801964a:	4605      	mov	r5, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 801964c:	9901      	ldr	r1, [sp, #4]
 801964e:	4630      	mov	r0, r6
 8019650:	4798      	blx	r3
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 8019652:	1834      	adds	r4, r6, r0
 8019654:	f8d8 3000 	ldr.w	r3, [r8]
 8019658:	4639      	mov	r1, r7
 801965a:	4620      	mov	r0, r4
 801965c:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 801965e:	4623      	mov	r3, r4
 8019660:	1a2d      	subs	r5, r5, r0
 8019662:	1b9a      	subs	r2, r3, r6
 8019664:	4295      	cmp	r5, r2
 8019666:	d202      	bcs.n	801966e <_lv_txt_cut+0x3a>
}
 8019668:	b002      	add	sp, #8
 801966a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txt[i] = txt[i + len];
 801966e:	5c1a      	ldrb	r2, [r3, r0]
 8019670:	f803 2b01 	strb.w	r2, [r3], #1
    for(i = pos; i <= old_len - len; i++) {
 8019674:	e7f5      	b.n	8019662 <_lv_txt_cut+0x2e>
 8019676:	bf00      	nop
 8019678:	20000038 	.word	0x20000038

0801967c <_lv_txt_encoded_letter_next_2>:
{
 801967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019680:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8019682:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80196ac <_lv_txt_encoded_letter_next_2+0x30>
{
 8019686:	460f      	mov	r7, r1
 8019688:	4606      	mov	r6, r0
    *letter = _lv_txt_encoded_next(txt, ofs);
 801968a:	f8d8 3000 	ldr.w	r3, [r8]
 801968e:	4621      	mov	r1, r4
{
 8019690:	4615      	mov	r5, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8019692:	4798      	blx	r3
 8019694:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8019696:	b128      	cbz	r0, 80196a4 <_lv_txt_encoded_letter_next_2+0x28>
 8019698:	6820      	ldr	r0, [r4, #0]
 801969a:	2100      	movs	r1, #0
 801969c:	f8d8 3000 	ldr.w	r3, [r8]
 80196a0:	4430      	add	r0, r6
 80196a2:	4798      	blx	r3
 80196a4:	6028      	str	r0, [r5, #0]
}
 80196a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196aa:	bf00      	nop
 80196ac:	20000040 	.word	0x20000040

080196b0 <lv_txt_get_width>:
{
 80196b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196b4:	4688      	mov	r8, r1
 80196b6:	b085      	sub	sp, #20
 80196b8:	4617      	mov	r7, r2
 80196ba:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
 80196bc:	4605      	mov	r5, r0
 80196be:	2800      	cmp	r0, #0
 80196c0:	d035      	beq.n	801972e <lv_txt_get_width+0x7e>
    if(font == NULL) return 0;
 80196c2:	2a00      	cmp	r2, #0
 80196c4:	d035      	beq.n	8019732 <lv_txt_get_width+0x82>
    if(txt[0] == '\0') return 0;
 80196c6:	7804      	ldrb	r4, [r0, #0]
 80196c8:	2300      	movs	r3, #0
 80196ca:	b124      	cbz	r4, 80196d6 <lv_txt_get_width+0x26>
    uint32_t i                   = 0;
 80196cc:	9301      	str	r3, [sp, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80196ce:	f88d 3003 	strb.w	r3, [sp, #3]
    if(length != 0) {
 80196d2:	bb31      	cbnz	r1, 8019722 <lv_txt_get_width+0x72>
    lv_coord_t width             = 0;
 80196d4:	460c      	mov	r4, r1
}
 80196d6:	4620      	mov	r0, r4
 80196d8:	b005      	add	sp, #20
 80196da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 80196de:	ab01      	add	r3, sp, #4
 80196e0:	aa03      	add	r2, sp, #12
 80196e2:	a902      	add	r1, sp, #8
 80196e4:	4628      	mov	r0, r5
 80196e6:	f7ff ffc9 	bl	801967c <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80196ea:	f1b9 0f00 	cmp.w	r9, #0
 80196ee:	d005      	beq.n	80196fc <lv_txt_get_width+0x4c>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 80196f0:	9902      	ldr	r1, [sp, #8]
 80196f2:	f10d 0003 	add.w	r0, sp, #3
 80196f6:	f7ff fe75 	bl	80193e4 <_lv_txt_is_cmd>
 80196fa:	b950      	cbnz	r0, 8019712 <lv_txt_get_width+0x62>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80196fc:	4638      	mov	r0, r7
 80196fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019702:	f7fc ffcf 	bl	80166a4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8019706:	b203      	sxth	r3, r0
 8019708:	2b00      	cmp	r3, #0
 801970a:	dd02      	ble.n	8019712 <lv_txt_get_width+0x62>
                width += letter_space;
 801970c:	4434      	add	r4, r6
 801970e:	4404      	add	r4, r0
 8019710:	b224      	sxth	r4, r4
        while(i < length) {
 8019712:	9b01      	ldr	r3, [sp, #4]
 8019714:	4598      	cmp	r8, r3
 8019716:	d8e2      	bhi.n	80196de <lv_txt_get_width+0x2e>
        if(width > 0) {
 8019718:	2c00      	cmp	r4, #0
 801971a:	dddc      	ble.n	80196d6 <lv_txt_get_width+0x26>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801971c:	1ba4      	subs	r4, r4, r6
 801971e:	b224      	sxth	r4, r4
 8019720:	e7d9      	b.n	80196d6 <lv_txt_get_width+0x26>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019722:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    lv_coord_t width             = 0;
 8019726:	461c      	mov	r4, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8019728:	f009 0901 	and.w	r9, r9, #1
 801972c:	e7f1      	b.n	8019712 <lv_txt_get_width+0x62>
    if(txt == NULL) return 0;
 801972e:	4604      	mov	r4, r0
 8019730:	e7d1      	b.n	80196d6 <lv_txt_get_width+0x26>
 8019732:	4614      	mov	r4, r2
 8019734:	e7cf      	b.n	80196d6 <lv_txt_get_width+0x26>

08019736 <lv_txt_get_size>:
{
 8019736:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801973a:	b087      	sub	sp, #28
    size_res->x = 0;
 801973c:	2500      	movs	r5, #0
{
 801973e:	4698      	mov	r8, r3
 8019740:	4604      	mov	r4, r0
 8019742:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019746:	4616      	mov	r6, r2
 8019748:	f9bd b040 	ldrsh.w	fp, [sp, #64]	; 0x40
    if(text == NULL) return;
 801974c:	460f      	mov	r7, r1
{
 801974e:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8019752:	9302      	str	r3, [sp, #8]
    size_res->x = 0;
 8019754:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
 8019756:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
 8019758:	b309      	cbz	r1, 801979e <lv_txt_get_size+0x68>
    if(font == NULL) return;
 801975a:	b302      	cbz	r2, 801979e <lv_txt_get_size+0x68>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801975c:	f013 0f02 	tst.w	r3, #2
    uint16_t letter_height = lv_font_get_line_height(font);
 8019760:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8019764:	9304      	str	r3, [sp, #16]
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8019766:	bf18      	it	ne
 8019768:	f44f 4ac0 	movne.w	sl, #24576	; 0x6000
    uint16_t letter_height = lv_font_get_line_height(font);
 801976c:	8913      	ldrh	r3, [r2, #8]
 801976e:	9303      	str	r3, [sp, #12]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8019770:	445b      	add	r3, fp
 8019772:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
 8019774:	5d7b      	ldrb	r3, [r7, r5]
 8019776:	eb07 0905 	add.w	r9, r7, r5
 801977a:	b99b      	cbnz	r3, 80197a4 <lv_txt_get_size+0x6e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801977c:	b155      	cbz	r5, 8019794 <lv_txt_get_size+0x5e>
 801977e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 8019782:	2b0a      	cmp	r3, #10
 8019784:	d001      	beq.n	801978a <lv_txt_get_size+0x54>
 8019786:	2b0d      	cmp	r3, #13
 8019788:	d104      	bne.n	8019794 <lv_txt_get_size+0x5e>
        size_res->y += letter_height + line_space;
 801978a:	9b03      	ldr	r3, [sp, #12]
 801978c:	8862      	ldrh	r2, [r4, #2]
 801978e:	445b      	add	r3, fp
 8019790:	4413      	add	r3, r2
 8019792:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 8019794:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019798:	bb23      	cbnz	r3, 80197e4 <lv_txt_get_size+0xae>
        size_res->y = letter_height;
 801979a:	9b04      	ldr	r3, [sp, #16]
        size_res->y -= line_space;
 801979c:	8063      	strh	r3, [r4, #2]
}
 801979e:	b007      	add	sp, #28
 80197a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80197a4:	9b02      	ldr	r3, [sp, #8]
 80197a6:	4642      	mov	r2, r8
 80197a8:	4631      	mov	r1, r6
 80197aa:	4648      	mov	r0, r9
 80197ac:	9300      	str	r3, [sp, #0]
 80197ae:	4653      	mov	r3, sl
 80197b0:	f7ff fe36 	bl	8019420 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80197b4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80197b8:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 80197ba:	4601      	mov	r1, r0
 80197bc:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80197be:	4413      	add	r3, r2
 80197c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80197c4:	d2eb      	bcs.n	801979e <lv_txt_get_size+0x68>
            size_res->y += line_space;
 80197c6:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 80197c8:	4632      	mov	r2, r6
 80197ca:	9b02      	ldr	r3, [sp, #8]
 80197cc:	4648      	mov	r0, r9
 80197ce:	9300      	str	r3, [sp, #0]
 80197d0:	4643      	mov	r3, r8
 80197d2:	f7ff ff6d 	bl	80196b0 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 80197d6:	f9b4 3000 	ldrsh.w	r3, [r4]
 80197da:	4298      	cmp	r0, r3
 80197dc:	bfb8      	it	lt
 80197de:	4618      	movlt	r0, r3
 80197e0:	8020      	strh	r0, [r4, #0]
        line_start  = new_line_start;
 80197e2:	e7c7      	b.n	8019774 <lv_txt_get_size+0x3e>
        size_res->y -= line_space;
 80197e4:	eba3 030b 	sub.w	r3, r3, fp
 80197e8:	e7d8      	b.n	801979c <lv_txt_get_size+0x66>

080197ea <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80197ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197ee:	9d08      	ldr	r5, [sp, #32]
 80197f0:	4680      	mov	r8, r0
 80197f2:	460f      	mov	r7, r1
 80197f4:	4614      	mov	r4, r2
 80197f6:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 80197f8:	b90c      	cbnz	r4, 80197fe <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 80197fa:	4626      	mov	r6, r4
 80197fc:	e012      	b.n	8019824 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
 80197fe:	ea4f 0a54 	mov.w	sl, r4, lsr #1
        if((c = (*cmp)(key, middle)) > 0) {
 8019802:	4640      	mov	r0, r8
        middle += (n / 2) * size;
 8019804:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
 8019808:	4631      	mov	r1, r6
 801980a:	47a8      	blx	r5
 801980c:	2800      	cmp	r0, #0
 801980e:	dd08      	ble.n	8019822 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
 8019810:	43e4      	mvns	r4, r4
            base = (middle += size);
 8019812:	eb06 0709 	add.w	r7, r6, r9
 8019816:	f004 0401 	and.w	r4, r4, #1
            n    = (n / 2) - ((n & 1) == 0);
 801981a:	ebaa 0a04 	sub.w	sl, sl, r4
{
 801981e:	4654      	mov	r4, sl
 8019820:	e7ea      	b.n	80197f8 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
 8019822:	d1fc      	bne.n	801981e <_lv_utils_bsearch+0x34>
}
 8019824:	4630      	mov	r0, r6
 8019826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801982a <lv_obj_get_style_pad_left>:
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801982a:	f241 0212 	movw	r2, #4114	; 0x1012
{
 801982e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019830:	f7ed fe4a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8019834:	b200      	sxth	r0, r0
 8019836:	bd08      	pop	{r3, pc}

08019838 <lv_obj_get_style_pad_right>:

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019838:	f241 0213 	movw	r2, #4115	; 0x1013
{
 801983c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801983e:	f7ed fe43 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}
 8019842:	b200      	sxth	r0, r0
 8019844:	bd08      	pop	{r3, pc}

08019846 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019846:	f241 0210 	movw	r2, #4112	; 0x1010
{
 801984a:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801984c:	f7ed fe3c 	bl	80074c8 <lv_obj_get_style_prop>
}
 8019850:	b200      	sxth	r0, r0
 8019852:	bd08      	pop	{r3, pc}

08019854 <lv_obj_get_style_pad_bottom>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019854:	f241 0211 	movw	r2, #4113	; 0x1011
{
 8019858:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801985a:	f7ed fe35 	bl	80074c8 <lv_obj_get_style_prop>
}
 801985e:	b200      	sxth	r0, r0
 8019860:	bd08      	pop	{r3, pc}
	...

08019864 <lv_arc_constructor>:
    LV_TRACE_OBJ_CREATE("begin");

    lv_arc_t * arc = (lv_arc_t *)obj;

   /*Initialize the allocated 'ext'*/
   arc->rotation = 0;
 8019864:	f44f 0307 	mov.w	r3, #8847360	; 0x870000
   arc->indic_angle_start = 135;
   arc->indic_angle_end   = 270;
   arc->type = LV_ARC_MODE_NORMAL;
   arc->value = VALUE_UNSET;
   arc->min_close = 1;
   arc->min_value = 0;
 8019868:	4a12      	ldr	r2, [pc, #72]	; (80198b4 <lv_arc_constructor+0x50>)
{
 801986a:	b510      	push	{r4, lr}
   arc->rotation = 0;
 801986c:	624b      	str	r3, [r1, #36]	; 0x24
   arc->indic_angle_end   = 270;
 801986e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
{
 8019872:	460c      	mov	r4, r1
   arc->indic_angle_end   = 270;
 8019874:	628b      	str	r3, [r1, #40]	; 0x28
   arc->min_value = 0;
 8019876:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801987a:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
   arc->max_value = 100;
   arc->dragging = false;
 801987e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8019882:	f023 030f 	bic.w	r3, r3, #15
 8019886:	f043 0308 	orr.w	r3, r3, #8
 801988a:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
   arc->chg_rate = 720;
 801988e:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8019892:	86cb      	strh	r3, [r1, #54]	; 0x36
   arc->last_tick = lv_tick_get();
 8019894:	f7fd f9ac 	bl	8016bf0 <lv_tick_get>
   arc->last_angle =arc->indic_angle_end;
 8019898:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   arc->last_tick = lv_tick_get();
 801989a:	63a0      	str	r0, [r4, #56]	; 0x38

   lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801989c:	2102      	movs	r1, #2
 801989e:	4620      	mov	r0, r4
   arc->last_angle =arc->indic_angle_end;
 80198a0:	87a3      	strh	r3, [r4, #60]	; 0x3c
   lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80198a2:	f7ea fae1 	bl	8003e68 <lv_obj_add_flag>
   lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 80198a6:	4620      	mov	r0, r4
 80198a8:	210d      	movs	r1, #13


    LV_TRACE_OBJ_CREATE("finished");
}
 80198aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 80198ae:	f7eb bee5 	b.w	800567c <lv_obj_set_ext_click_area>
 80198b2:	bf00      	nop
 80198b4:	8000002d 	.word	0x8000002d

080198b8 <get_center>:
        lv_obj_invalidate(obj);
    }
}

static void get_center(lv_obj_t * obj, lv_point_t * center, lv_coord_t * arc_r)
{
 80198b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198bc:	4604      	mov	r4, r0
 80198be:	460f      	mov	r7, r1
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80198c0:	2100      	movs	r1, #0
{
 80198c2:	4690      	mov	r8, r2
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80198c4:	f7ff ffb1 	bl	801982a <lv_obj_get_style_pad_left>
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80198c8:	2100      	movs	r1, #0
    lv_coord_t left_bg = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80198ca:	4605      	mov	r5, r0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80198cc:	4620      	mov	r0, r4
 80198ce:	f7ff ffb3 	bl	8019838 <lv_obj_get_style_pad_right>
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80198d2:	2100      	movs	r1, #0
    lv_coord_t right_bg = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80198d4:	4682      	mov	sl, r0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80198d6:	4620      	mov	r0, r4
 80198d8:	f7ff ffb5 	bl	8019846 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80198dc:	2100      	movs	r1, #0
    lv_coord_t top_bg = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80198de:	4606      	mov	r6, r0
    lv_coord_t bottom_bg = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80198e0:	4620      	mov	r0, r4
 80198e2:	f7ff ffb7 	bl	8019854 <lv_obj_get_style_pad_bottom>
 80198e6:	4681      	mov	r9, r0

    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80198e8:	4620      	mov	r0, r4
 80198ea:	f7eb fb70 	bl	8004fce <lv_obj_get_width>
 80198ee:	1b40      	subs	r0, r0, r5
 80198f0:	eba0 0b0a 	sub.w	fp, r0, sl
 80198f4:	4620      	mov	r0, r4
 80198f6:	f7eb fb70 	bl	8004fda <lv_obj_get_height>
 80198fa:	1b80      	subs	r0, r0, r6
 80198fc:	eba0 0009 	sub.w	r0, r0, r9
 8019900:	4583      	cmp	fp, r0
 8019902:	4620      	mov	r0, r4
 8019904:	da1d      	bge.n	8019942 <get_center+0x8a>
 8019906:	f7eb fb62 	bl	8004fce <lv_obj_get_width>
 801990a:	1b42      	subs	r2, r0, r5
 801990c:	eba2 030a 	sub.w	r3, r2, sl
                                lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8019910:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019914:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019918:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 801991c:	f343 034f 	sbfx	r3, r3, #1, #16

    *arc_r = r;
 8019920:	f8a8 3000 	strh.w	r3, [r8]
    center->x = obj->coords.x1 + r + left_bg;
 8019924:	8aa0      	ldrh	r0, [r4, #20]
 8019926:	4405      	add	r5, r0
    center->y = obj->coords.y1 + r + top_bg;
 8019928:	8ae0      	ldrh	r0, [r4, #22]
 801992a:	4406      	add	r6, r0
    center->x = obj->coords.x1 + r + left_bg;
 801992c:	fa15 f583 	uxtah	r5, r5, r3
 8019930:	4620      	mov	r0, r4
    center->y = obj->coords.y1 + r + top_bg;
 8019932:	fa16 f383 	uxtah	r3, r6, r3
    center->x = obj->coords.x1 + r + left_bg;
 8019936:	803d      	strh	r5, [r7, #0]
    center->y = obj->coords.y1 + r + top_bg;
 8019938:	807b      	strh	r3, [r7, #2]

    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
    r -= indic_width;
}
 801993a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801993e:	f7ed bdc3 	b.w	80074c8 <lv_obj_get_style_prop>
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8019942:	f7eb fb4a 	bl	8004fda <lv_obj_get_height>
 8019946:	1b82      	subs	r2, r0, r6
 8019948:	eba2 0309 	sub.w	r3, r2, r9
 801994c:	e7e0      	b.n	8019910 <get_center+0x58>

0801994e <inv_arc_area>:
{
 801994e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019952:	b08d      	sub	sp, #52	; 0x34
 8019954:	4681      	mov	r9, r0
 8019956:	460f      	mov	r7, r1
 8019958:	4615      	mov	r5, r2
 801995a:	469b      	mov	fp, r3
    if(lv_obj_is_visible(obj) == false) return;
 801995c:	f7eb fe70 	bl	8005640 <lv_obj_is_visible>
 8019960:	2800      	cmp	r0, #0
 8019962:	f000 80f4 	beq.w	8019b4e <inv_arc_area+0x200>
    start_angle +=arc->rotation;
 8019966:	f8b9 0024 	ldrh.w	r0, [r9, #36]	; 0x24
    uint8_t start_quarter = start_angle / 90;
 801996a:	225a      	movs	r2, #90	; 0x5a
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801996c:	2100      	movs	r1, #0
    start_angle +=arc->rotation;
 801996e:	4407      	add	r7, r0
    end_angle +=arc->rotation;
 8019970:	4405      	add	r5, r0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8019972:	4648      	mov	r0, r9
    start_angle +=arc->rotation;
 8019974:	b2bf      	uxth	r7, r7
    end_angle +=arc->rotation;
 8019976:	b2ad      	uxth	r5, r5
    if(start_angle >= 360) start_angle -= 360;
 8019978:	f5b7 7fb4 	cmp.w	r7, #360	; 0x168
 801997c:	bf24      	itt	cs
 801997e:	f5a7 77b4 	subcs.w	r7, r7, #360	; 0x168
 8019982:	b2bf      	uxthcs	r7, r7
    if(end_angle >= 360) end_angle -= 360;
 8019984:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8019988:	bf28      	it	cs
 801998a:	f5a5 75b4 	subcs.w	r5, r5, #360	; 0x168
    uint8_t start_quarter = start_angle / 90;
 801998e:	fbb7 f3f2 	udiv	r3, r7, r2
    if(end_angle >= 360) end_angle -= 360;
 8019992:	bf28      	it	cs
 8019994:	b2ad      	uxthcs	r5, r5
    uint8_t start_quarter = start_angle / 90;
 8019996:	b2db      	uxtb	r3, r3
    uint8_t end_quarter = end_angle / 90;
 8019998:	fbb5 f2f2 	udiv	r2, r5, r2
    uint8_t start_quarter = start_angle / 90;
 801999c:	9301      	str	r3, [sp, #4]
    uint8_t end_quarter = end_angle / 90;
 801999e:	b2d3      	uxtb	r3, r2
 80199a0:	9302      	str	r3, [sp, #8]
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80199a2:	f7ff ff42 	bl	801982a <lv_obj_get_style_pad_left>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80199a6:	2100      	movs	r1, #0
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80199a8:	4604      	mov	r4, r0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80199aa:	4648      	mov	r0, r9
 80199ac:	f7ff ff44 	bl	8019838 <lv_obj_get_style_pad_right>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80199b0:	2100      	movs	r1, #0
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80199b2:	4606      	mov	r6, r0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80199b4:	4648      	mov	r0, r9
 80199b6:	f7ff ff46 	bl	8019846 <lv_obj_get_style_pad_top>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80199ba:	2100      	movs	r1, #0
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80199bc:	4682      	mov	sl, r0
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80199be:	4648      	mov	r0, r9
 80199c0:	f7ff ff48 	bl	8019854 <lv_obj_get_style_pad_bottom>
 80199c4:	4680      	mov	r8, r0
    lv_coord_t rout       = (LV_MIN(lv_obj_get_width(obj) - left - right, lv_obj_get_height(obj) - top - bottom)) / 2;
 80199c6:	4648      	mov	r0, r9
 80199c8:	f7eb fb01 	bl	8004fce <lv_obj_get_width>
 80199cc:	1b00      	subs	r0, r0, r4
 80199ce:	1b82      	subs	r2, r0, r6
 80199d0:	4648      	mov	r0, r9
 80199d2:	9200      	str	r2, [sp, #0]
 80199d4:	f7eb fb01 	bl	8004fda <lv_obj_get_height>
 80199d8:	eba0 000a 	sub.w	r0, r0, sl
 80199dc:	9a00      	ldr	r2, [sp, #0]
 80199de:	eba0 0008 	sub.w	r0, r0, r8
 80199e2:	4282      	cmp	r2, r0
 80199e4:	4648      	mov	r0, r9
 80199e6:	f280 80b5 	bge.w	8019b54 <inv_arc_area+0x206>
 80199ea:	f7eb faf0 	bl	8004fce <lv_obj_get_width>
 80199ee:	1b00      	subs	r0, r0, r4
 80199f0:	1b86      	subs	r6, r0, r6
 80199f2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80199f6:	f346 064f 	sbfx	r6, r6, #1, #16
    lv_coord_t x       = obj->coords.x1 + rout + left;
 80199fa:	f8b9 0014 	ldrh.w	r0, [r9, #20]
 80199fe:	b2b3      	uxth	r3, r6
 8019a00:	f44f 6205 	mov.w	r2, #2128	; 0x850
 8019a04:	4659      	mov	r1, fp
 8019a06:	4404      	add	r4, r0
 8019a08:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8019a0c:	9303      	str	r3, [sp, #12]
 8019a0e:	4482      	add	sl, r0
 8019a10:	b2a3      	uxth	r3, r4
 8019a12:	4648      	mov	r0, r9
 8019a14:	fa13 f886 	uxtah	r8, r3, r6
 8019a18:	9305      	str	r3, [sp, #20]
 8019a1a:	fa1f f38a 	uxth.w	r3, sl
 8019a1e:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t y       = obj->coords.y1 + rout + top;
 8019a22:	fa13 f486 	uxtah	r4, r3, r6
 8019a26:	9304      	str	r3, [sp, #16]
 8019a28:	b2a3      	uxth	r3, r4
 8019a2a:	9300      	str	r3, [sp, #0]
 8019a2c:	f7ed fd4c 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019a30:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8019a32:	4682      	mov	sl, r0
}

static inline lv_coord_t lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8019a34:	2251      	movs	r2, #81	; 0x51
 8019a36:	4659      	mov	r1, fp
 8019a38:	4648      	mov	r0, r9
    return (lv_coord_t)v.num;
 8019a3a:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8019a3c:	f7ed fd44 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t rin       = rout - w;
 8019a40:	9b03      	ldr	r3, [sp, #12]
    return (lv_coord_t)v.num;
 8019a42:	b204      	sxth	r4, r0
 8019a44:	eba3 0a0a 	sub.w	sl, r3, sl
    extra_area = rounded ? w / 2 + 2 : 0;
 8019a48:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t rin       = rout - w;
 8019a4a:	fa0f fa8a 	sxth.w	sl, sl
    extra_area = rounded ? w / 2 + 2 : 0;
 8019a4e:	b124      	cbz	r4, 8019a5a <inv_arc_area+0x10c>
 8019a50:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
 8019a54:	1064      	asrs	r4, r4, #1
 8019a56:	3402      	adds	r4, #2
 8019a58:	b224      	sxth	r4, r4
    if(part == LV_PART_INDICATOR) {
 8019a5a:	f5bb 3f00 	cmp.w	fp, #131072	; 0x20000
 8019a5e:	d139      	bne.n	8019ad4 <inv_arc_area+0x186>
        lv_coord_t knob_extra_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019a60:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8019a64:	4648      	mov	r0, r9
 8019a66:	9309      	str	r3, [sp, #36]	; 0x24
 8019a68:	f7eb f89d 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019a6c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_extra_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019a70:	9006      	str	r0, [sp, #24]
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019a72:	4648      	mov	r0, r9
 8019a74:	f7ff fed9 	bl	801982a <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019a78:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 8019a7c:	9007      	str	r0, [sp, #28]
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019a7e:	4648      	mov	r0, r9
 8019a80:	f7ff feda 	bl	8019838 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019a84:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 8019a88:	9008      	str	r0, [sp, #32]
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019a8a:	4648      	mov	r0, r9
 8019a8c:	f7ff fedb 	bl	8019846 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019a90:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 8019a94:	4683      	mov	fp, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 8019a96:	4648      	mov	r0, r9
 8019a98:	f7ff fedc 	bl	8019854 <lv_obj_get_style_pad_bottom>
        knob_extra_size += LV_MAX4(knob_left, knob_right, knob_top, knob_bottom);
 8019a9c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019aa0:	4293      	cmp	r3, r2
 8019aa2:	bfb8      	it	lt
 8019aa4:	4613      	movlt	r3, r2
 8019aa6:	b21a      	sxth	r2, r3
 8019aa8:	9b06      	ldr	r3, [sp, #24]
 8019aaa:	4593      	cmp	fp, r2
 8019aac:	bfb8      	it	lt
 8019aae:	4693      	movlt	fp, r2
 8019ab0:	fa0f fb8b 	sxth.w	fp, fp
 8019ab4:	4583      	cmp	fp, r0
 8019ab6:	bfac      	ite	ge
 8019ab8:	445b      	addge	r3, fp
 8019aba:	181b      	addlt	r3, r3, r0
 8019abc:	4618      	mov	r0, r3
        extra_area = LV_MAX(extra_area, w / 2 + 2 + knob_extra_size);
 8019abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ac0:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8019ac4:	1052      	asrs	r2, r2, #1
 8019ac6:	3202      	adds	r2, #2
 8019ac8:	fa02 f280 	sxtah	r2, r2, r0
 8019acc:	4294      	cmp	r4, r2
 8019ace:	bfb8      	it	lt
 8019ad0:	4614      	movlt	r4, r2
 8019ad2:	b224      	sxth	r4, r4
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8019ad4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8019ad8:	4293      	cmp	r3, r2
 8019ada:	f040 80de 	bne.w	8019c9a <inv_arc_area+0x34c>
 8019ade:	42af      	cmp	r7, r5
 8019ae0:	f200 80db 	bhi.w	8019c9a <inv_arc_area+0x34c>
        if(start_quarter == 0) {
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d140      	bne.n	8019b6a <inv_arc_area+0x21c>
            inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019ae8:	b238      	sxth	r0, r7
 8019aea:	b2a4      	uxth	r4, r4
 8019aec:	f7fd fe36 	bl	801775c <lv_trigo_sin>
 8019af0:	9b00      	ldr	r3, [sp, #0]
 8019af2:	fb00 f00a 	mul.w	r0, r0, sl
 8019af6:	1b1b      	subs	r3, r3, r4
 8019af8:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019afc:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b00:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019b04:	b200      	sxth	r0, r0
 8019b06:	f7fd fe29 	bl	801775c <lv_trigo_sin>
 8019b0a:	eb08 0304 	add.w	r3, r8, r4
 8019b0e:	4370      	muls	r0, r6
 8019b10:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019b14:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b18:	b228      	sxth	r0, r5
 8019b1a:	f7fd fe1f 	bl	801775c <lv_trigo_sin>
 8019b1e:	9b00      	ldr	r3, [sp, #0]
 8019b20:	4370      	muls	r0, r6
 8019b22:	191e      	adds	r6, r3, r4
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019b24:	eba8 0404 	sub.w	r4, r8, r4
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b28:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019b2c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019b30:	b200      	sxth	r0, r0
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b32:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019b36:	f7fd fe11 	bl	801775c <lv_trigo_sin>
 8019b3a:	fb0a f000 	mul.w	r0, sl, r0
 8019b3e:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019b42:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
        lv_obj_invalidate_area(obj, &inv_area);
 8019b46:	a90a      	add	r1, sp, #40	; 0x28
 8019b48:	4648      	mov	r0, r9
 8019b4a:	f7eb fb7b 	bl	8005244 <lv_obj_invalidate_area>
}
 8019b4e:	b00d      	add	sp, #52	; 0x34
 8019b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t rout       = (LV_MIN(lv_obj_get_width(obj) - left - right, lv_obj_get_height(obj) - top - bottom)) / 2;
 8019b54:	f7eb fa41 	bl	8004fda <lv_obj_get_height>
 8019b58:	eba0 000a 	sub.w	r0, r0, sl
 8019b5c:	eba0 0808 	sub.w	r8, r0, r8
 8019b60:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8019b64:	f348 064f 	sbfx	r6, r8, #1, #16
 8019b68:	e747      	b.n	80199fa <inv_arc_area+0xac>
        else if(start_quarter == 1) {
 8019b6a:	9b01      	ldr	r3, [sp, #4]
 8019b6c:	2b01      	cmp	r3, #1
 8019b6e:	d132      	bne.n	8019bd6 <inv_arc_area+0x288>
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b70:	b238      	sxth	r0, r7
 8019b72:	f7fd fdf3 	bl	801775c <lv_trigo_sin>
 8019b76:	9b00      	ldr	r3, [sp, #0]
 8019b78:	fa1f fb84 	uxth.w	fp, r4
 8019b7c:	4370      	muls	r0, r6
 8019b7e:	fa13 f484 	uxtah	r4, r3, r4
 8019b82:	eb04 34e0 	add.w	r4, r4, r0, asr #15
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019b86:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019b8a:	b200      	sxth	r0, r0
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019b8c:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019b90:	f7fd fde4 	bl	801775c <lv_trigo_sin>
 8019b94:	eb08 030b 	add.w	r3, r8, fp
 8019b98:	fb00 f00a 	mul.w	r0, r0, sl
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019b9c:	eba8 080b 	sub.w	r8, r8, fp
            inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019ba0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019ba4:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019ba8:	b228      	sxth	r0, r5
 8019baa:	f7fd fdd7 	bl	801775c <lv_trigo_sin>
 8019bae:	9b00      	ldr	r3, [sp, #0]
 8019bb0:	fb0a f000 	mul.w	r0, sl, r0
 8019bb4:	eba3 0a0b 	sub.w	sl, r3, fp
 8019bb8:	eb0a 3ae0 	add.w	sl, sl, r0, asr #15
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bbc:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019bc0:	b200      	sxth	r0, r0
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019bc2:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
            inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bc6:	f7fd fdc9 	bl	801775c <lv_trigo_sin>
 8019bca:	4370      	muls	r0, r6
 8019bcc:	eb08 38e0 	add.w	r8, r8, r0, asr #15
 8019bd0:	f8ad 8028 	strh.w	r8, [sp, #40]	; 0x28
            lv_obj_invalidate_area(obj, &inv_area);
 8019bd4:	e7b7      	b.n	8019b46 <inv_arc_area+0x1f8>
        else if(start_quarter == 2) {
 8019bd6:	9b01      	ldr	r3, [sp, #4]
 8019bd8:	2b02      	cmp	r3, #2
 8019bda:	d12e      	bne.n	8019c3a <inv_arc_area+0x2ec>
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019bdc:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019be0:	b2a4      	uxth	r4, r4
 8019be2:	b200      	sxth	r0, r0
 8019be4:	f7fd fdba 	bl	801775c <lv_trigo_sin>
 8019be8:	eba8 0304 	sub.w	r3, r8, r4
 8019bec:	4370      	muls	r0, r6
 8019bee:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019bf2:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019bf6:	b238      	sxth	r0, r7
 8019bf8:	f7fd fdb0 	bl	801775c <lv_trigo_sin>
 8019bfc:	9b00      	ldr	r3, [sp, #0]
 8019bfe:	fb00 f00a 	mul.w	r0, r0, sl
 8019c02:	4423      	add	r3, r4
 8019c04:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019c08:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019c0c:	b228      	sxth	r0, r5
 8019c0e:	f7fd fda5 	bl	801775c <lv_trigo_sin>
 8019c12:	9b00      	ldr	r3, [sp, #0]
 8019c14:	4370      	muls	r0, r6
 8019c16:	1b1e      	subs	r6, r3, r4
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c18:	4444      	add	r4, r8
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019c1a:	eb06 36e0 	add.w	r6, r6, r0, asr #15
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c1e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019c22:	b200      	sxth	r0, r0
            inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019c24:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c28:	f7fd fd98 	bl	801775c <lv_trigo_sin>
 8019c2c:	fb0a f000 	mul.w	r0, sl, r0
 8019c30:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019c34:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
            lv_obj_invalidate_area(obj, &inv_area);
 8019c38:	e785      	b.n	8019b46 <inv_arc_area+0x1f8>
        else if(start_quarter == 3) {
 8019c3a:	9b01      	ldr	r3, [sp, #4]
 8019c3c:	2b03      	cmp	r3, #3
 8019c3e:	d186      	bne.n	8019b4e <inv_arc_area+0x200>
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019c40:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019c44:	b2a4      	uxth	r4, r4
 8019c46:	b200      	sxth	r0, r0
 8019c48:	f7fd fd88 	bl	801775c <lv_trigo_sin>
 8019c4c:	eba8 0304 	sub.w	r3, r8, r4
 8019c50:	fb00 f00a 	mul.w	r0, r0, sl
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019c54:	44a0      	add	r8, r4
            inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019c56:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019c5a:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
            inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019c5e:	b238      	sxth	r0, r7
 8019c60:	f7fd fd7c 	bl	801775c <lv_trigo_sin>
 8019c64:	9b00      	ldr	r3, [sp, #0]
 8019c66:	4370      	muls	r0, r6
 8019c68:	1b1b      	subs	r3, r3, r4
 8019c6a:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019c6e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019c72:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019c76:	b200      	sxth	r0, r0
 8019c78:	f7fd fd70 	bl	801775c <lv_trigo_sin>
 8019c7c:	4370      	muls	r0, r6
 8019c7e:	eb08 38e0 	add.w	r8, r8, r0, asr #15
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c82:	b228      	sxth	r0, r5
            inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019c84:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
            inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019c88:	f7fd fd68 	bl	801775c <lv_trigo_sin>
 8019c8c:	9b00      	ldr	r3, [sp, #0]
 8019c8e:	fb0a f000 	mul.w	r0, sl, r0
 8019c92:	441c      	add	r4, r3
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019c94:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8019c98:	e03c      	b.n	8019d14 <inv_arc_area+0x3c6>
    else if(start_quarter == 0 && end_quarter == 1) {
 8019c9a:	9b01      	ldr	r3, [sp, #4]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d13c      	bne.n	8019d1a <inv_arc_area+0x3cc>
 8019ca0:	9b02      	ldr	r3, [sp, #8]
 8019ca2:	2b01      	cmp	r3, #1
 8019ca4:	f040 80f1 	bne.w	8019e8a <inv_arc_area+0x53c>
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019ca8:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019cac:	b2a4      	uxth	r4, r4
 8019cae:	b200      	sxth	r0, r0
 8019cb0:	f7fd fd54 	bl	801775c <lv_trigo_sin>
 8019cb4:	eba8 0304 	sub.w	r3, r8, r4
 8019cb8:	4370      	muls	r0, r6
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019cba:	b22a      	sxth	r2, r5
 8019cbc:	b23d      	sxth	r5, r7
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019cbe:	44a0      	add	r8, r4
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019cc0:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019cc4:	9201      	str	r2, [sp, #4]
        inv_area.x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019cc6:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019cca:	4610      	mov	r0, r2
 8019ccc:	f7fd fd46 	bl	801775c <lv_trigo_sin>
 8019cd0:	4683      	mov	fp, r0
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	f7fd fd42 	bl	801775c <lv_trigo_sin>
 8019cd8:	4583      	cmp	fp, r0
 8019cda:	bfb6      	itet	lt
 8019cdc:	9a01      	ldrlt	r2, [sp, #4]
 8019cde:	4628      	movge	r0, r5
 8019ce0:	4610      	movlt	r0, r2
 8019ce2:	f7fd fd3b 	bl	801775c <lv_trigo_sin>
                                        lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019ce6:	9b00      	ldr	r3, [sp, #0]
 8019ce8:	fb00 f00a 	mul.w	r0, r0, sl
 8019cec:	eba3 0a04 	sub.w	sl, r3, r4
 8019cf0:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        inv_area.y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8019cf4:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019cf8:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019cfc:	b200      	sxth	r0, r0
 8019cfe:	f7fd fd2d 	bl	801775c <lv_trigo_sin>
        inv_area.y2 = y + rout + extra_area;
 8019d02:	9b03      	ldr	r3, [sp, #12]
 8019d04:	9a00      	ldr	r2, [sp, #0]
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019d06:	4370      	muls	r0, r6
        inv_area.y2 = y + rout + extra_area;
 8019d08:	4413      	add	r3, r2
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019d0a:	eb08 38e0 	add.w	r8, r8, r0, asr #15
        inv_area.y2 = y + rout + extra_area;
 8019d0e:	441c      	add	r4, r3
        inv_area.x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019d10:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019d14:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
        lv_obj_invalidate_area(obj, &inv_area);
 8019d18:	e715      	b.n	8019b46 <inv_arc_area+0x1f8>
    else if(start_quarter == 1 && end_quarter == 2) {
 8019d1a:	9b01      	ldr	r3, [sp, #4]
 8019d1c:	2b01      	cmp	r3, #1
 8019d1e:	d135      	bne.n	8019d8c <inv_arc_area+0x43e>
 8019d20:	9b02      	ldr	r3, [sp, #8]
 8019d22:	2b02      	cmp	r3, #2
 8019d24:	f040 80b1 	bne.w	8019e8a <inv_arc_area+0x53c>
        inv_area.x1 = x - rout - extra_area;
 8019d28:	b2a4      	uxth	r4, r4
 8019d2a:	9b05      	ldr	r3, [sp, #20]
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019d2c:	f107 0b5a 	add.w	fp, r7, #90	; 0x5a
        inv_area.x1 = x - rout - extra_area;
 8019d30:	1b18      	subs	r0, r3, r4
                                        lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019d32:	44a0      	add	r8, r4
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019d34:	fa0f fb8b 	sxth.w	fp, fp
        inv_area.x1 = x - rout - extra_area;
 8019d38:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019d3c:	b228      	sxth	r0, r5
 8019d3e:	f7fd fd0d 	bl	801775c <lv_trigo_sin>
 8019d42:	9b00      	ldr	r3, [sp, #0]
 8019d44:	4370      	muls	r0, r6
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019d46:	355a      	adds	r5, #90	; 0x5a
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019d48:	1b1b      	subs	r3, r3, r4
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019d4a:	b22d      	sxth	r5, r5
        inv_area.y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019d4c:	eb03 30e0 	add.w	r0, r3, r0, asr #15
 8019d50:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019d54:	4658      	mov	r0, fp
 8019d56:	f7fd fd01 	bl	801775c <lv_trigo_sin>
 8019d5a:	9001      	str	r0, [sp, #4]
 8019d5c:	4628      	mov	r0, r5
 8019d5e:	f7fd fcfd 	bl	801775c <lv_trigo_sin>
 8019d62:	9b01      	ldr	r3, [sp, #4]
 8019d64:	4283      	cmp	r3, r0
 8019d66:	bfcc      	ite	gt
 8019d68:	4658      	movgt	r0, fp
 8019d6a:	4628      	movle	r0, r5
 8019d6c:	f7fd fcf6 	bl	801775c <lv_trigo_sin>
                                        lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019d70:	fb00 f00a 	mul.w	r0, r0, sl
 8019d74:	eb08 30e0 	add.w	r0, r8, r0, asr #15
        inv_area.x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8019d78:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019d7c:	b238      	sxth	r0, r7
 8019d7e:	f7fd fced 	bl	801775c <lv_trigo_sin>
 8019d82:	9b00      	ldr	r3, [sp, #0]
 8019d84:	4370      	muls	r0, r6
 8019d86:	4423      	add	r3, r4
 8019d88:	461c      	mov	r4, r3
 8019d8a:	e783      	b.n	8019c94 <inv_arc_area+0x346>
    else if(start_quarter == 2 && end_quarter == 3) {
 8019d8c:	9b01      	ldr	r3, [sp, #4]
 8019d8e:	2b02      	cmp	r3, #2
 8019d90:	d13a      	bne.n	8019e08 <inv_arc_area+0x4ba>
 8019d92:	9b02      	ldr	r3, [sp, #8]
 8019d94:	2b03      	cmp	r3, #3
 8019d96:	d178      	bne.n	8019e8a <inv_arc_area+0x53c>
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019d98:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8019d9c:	b2a4      	uxth	r4, r4
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019d9e:	b23f      	sxth	r7, r7
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019da0:	b200      	sxth	r0, r0
 8019da2:	f7fd fcdb 	bl	801775c <lv_trigo_sin>
 8019da6:	eba8 0304 	sub.w	r3, r8, r4
 8019daa:	4370      	muls	r0, r6
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019dac:	44a0      	add	r8, r4
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019dae:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.y1 = y - rout - extra_area;
 8019db2:	9b04      	ldr	r3, [sp, #16]
        inv_area.x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019db4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y - rout - extra_area;
 8019db8:	1b18      	subs	r0, r3, r4
 8019dba:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019dbe:	f105 005a 	add.w	r0, r5, #90	; 0x5a
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019dc2:	b22d      	sxth	r5, r5
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019dc4:	b200      	sxth	r0, r0
 8019dc6:	f7fd fcc9 	bl	801775c <lv_trigo_sin>
 8019dca:	4370      	muls	r0, r6
 8019dcc:	eb08 38e0 	add.w	r8, r8, r0, asr #15
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019dd0:	4628      	mov	r0, r5
        inv_area.x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019dd2:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019dd6:	f7fd fcc1 	bl	801775c <lv_trigo_sin>
 8019dda:	fb00 f60a 	mul.w	r6, r0, sl
 8019dde:	4638      	mov	r0, r7
 8019de0:	f7fd fcbc 	bl	801775c <lv_trigo_sin>
 8019de4:	fb0a f000 	mul.w	r0, sl, r0
 8019de8:	4286      	cmp	r6, r0
 8019dea:	bfcc      	ite	gt
 8019dec:	4628      	movgt	r0, r5
 8019dee:	4638      	movle	r0, r7
 8019df0:	f7fd fcb4 	bl	801775c <lv_trigo_sin>
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019df4:	9b00      	ldr	r3, [sp, #0]
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019df6:	fb0a f000 	mul.w	r0, sl, r0
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019dfa:	4423      	add	r3, r4
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019dfc:	f3c0 3acf 	ubfx	sl, r0, #15, #16
                                       lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8019e00:	449a      	add	sl, r3
        inv_area.y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8019e02:	f8ad a02e 	strh.w	sl, [sp, #46]	; 0x2e
        lv_obj_invalidate_area(obj, &inv_area);
 8019e06:	e69e      	b.n	8019b46 <inv_arc_area+0x1f8>
    else if(start_quarter == 3 && end_quarter == 0) {
 8019e08:	9b01      	ldr	r3, [sp, #4]
 8019e0a:	2b03      	cmp	r3, #3
 8019e0c:	d13d      	bne.n	8019e8a <inv_arc_area+0x53c>
 8019e0e:	9b02      	ldr	r3, [sp, #8]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d13a      	bne.n	8019e8a <inv_arc_area+0x53c>
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019e14:	f105 035a 	add.w	r3, r5, #90	; 0x5a
 8019e18:	f107 0b5a 	add.w	fp, r7, #90	; 0x5a
                                        lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019e1c:	b2a4      	uxth	r4, r4
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019e1e:	b21b      	sxth	r3, r3
 8019e20:	fa0f fb8b 	sxth.w	fp, fp
 8019e24:	4618      	mov	r0, r3
 8019e26:	9302      	str	r3, [sp, #8]
 8019e28:	f7fd fc98 	bl	801775c <lv_trigo_sin>
 8019e2c:	9001      	str	r0, [sp, #4]
 8019e2e:	4658      	mov	r0, fp
 8019e30:	f7fd fc94 	bl	801775c <lv_trigo_sin>
 8019e34:	9a01      	ldr	r2, [sp, #4]
 8019e36:	4282      	cmp	r2, r0
 8019e38:	bfb6      	itet	lt
 8019e3a:	9b02      	ldrlt	r3, [sp, #8]
 8019e3c:	4658      	movge	r0, fp
 8019e3e:	4618      	movlt	r0, r3
 8019e40:	f7fd fc8c 	bl	801775c <lv_trigo_sin>
                                        lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8019e44:	fb00 f00a 	mul.w	r0, r0, sl
 8019e48:	eba8 0a04 	sub.w	sl, r8, r4
 8019e4c:	eb0a 30e0 	add.w	r0, sl, r0, asr #15
        inv_area.x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8019e50:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
        inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019e54:	b238      	sxth	r0, r7
 8019e56:	f7fd fc81 	bl	801775c <lv_trigo_sin>
 8019e5a:	9b00      	ldr	r3, [sp, #0]
 8019e5c:	4370      	muls	r0, r6
 8019e5e:	1b1b      	subs	r3, r3, r4
 8019e60:	eb03 30e0 	add.w	r0, r3, r0, asr #15
        inv_area.x2 = x + rout + extra_area;
 8019e64:	9b03      	ldr	r3, [sp, #12]
 8019e66:	4443      	add	r3, r8
        inv_area.y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8019e68:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
        inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019e6c:	b228      	sxth	r0, r5
        inv_area.x2 = x + rout + extra_area;
 8019e6e:	4698      	mov	r8, r3
 8019e70:	44a0      	add	r8, r4
 8019e72:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
        inv_area.y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8019e76:	f7fd fc71 	bl	801775c <lv_trigo_sin>
 8019e7a:	9b00      	ldr	r3, [sp, #0]
 8019e7c:	4370      	muls	r0, r6
 8019e7e:	191e      	adds	r6, r3, r4
 8019e80:	eb06 30e0 	add.w	r0, r6, r0, asr #15
 8019e84:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8019e88:	e65d      	b.n	8019b46 <inv_arc_area+0x1f8>
        lv_obj_invalidate(obj);
 8019e8a:	4648      	mov	r0, r9
 8019e8c:	f7eb f9f4 	bl	8005278 <lv_obj_invalidate>
 8019e90:	e65d      	b.n	8019b4e <inv_arc_area+0x200>

08019e92 <lv_arc_set_start_angle>:
    if(start > 360) start -= 360;
 8019e92:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
{
 8019e96:	b538      	push	{r3, r4, r5, lr}
 8019e98:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 8019e9a:	bf88      	it	hi
 8019e9c:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
    if(LV_ABS(start -arc->indic_angle_start) >= 180) {
 8019ea0:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
{
 8019ea2:	4605      	mov	r5, r0
    if(start > 360) start -= 360;
 8019ea4:	bf88      	it	hi
 8019ea6:	b2a4      	uxthhi	r4, r4
    if(LV_ABS(start -arc->indic_angle_start) >= 180) {
 8019ea8:	1a63      	subs	r3, r4, r1
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	bfb8      	it	lt
 8019eae:	425b      	neglt	r3, r3
 8019eb0:	2bb3      	cmp	r3, #179	; 0xb3
 8019eb2:	dd04      	ble.n	8019ebe <lv_arc_set_start_angle+0x2c>
        lv_obj_invalidate(obj);
 8019eb4:	4628      	mov	r0, r5
 8019eb6:	f7eb f9df 	bl	8005278 <lv_obj_invalidate>
   arc->indic_angle_start = start;
 8019eba:	84ec      	strh	r4, [r5, #38]	; 0x26
}
 8019ebc:	bd38      	pop	{r3, r4, r5, pc}
    else if(arc->indic_angle_start >arc->indic_angle_end && start >arc->indic_angle_end) {
 8019ebe:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8019ec0:	4299      	cmp	r1, r3
 8019ec2:	d90e      	bls.n	8019ee2 <lv_arc_set_start_angle+0x50>
 8019ec4:	42a3      	cmp	r3, r4
 8019ec6:	d20c      	bcs.n	8019ee2 <lv_arc_set_start_angle+0x50>
        inv_arc_area(obj, LV_MIN(arc->indic_angle_start, start), LV_MAX(arc->indic_angle_start, start),
 8019ec8:	42a1      	cmp	r1, r4
 8019eca:	460a      	mov	r2, r1
 8019ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	bf38      	it	cc
 8019ed4:	4622      	movcc	r2, r4
 8019ed6:	42a1      	cmp	r1, r4
 8019ed8:	bf28      	it	cs
 8019eda:	4621      	movcs	r1, r4
 8019edc:	f7ff fd37 	bl	801994e <inv_arc_area>
 8019ee0:	e7eb      	b.n	8019eba <lv_arc_set_start_angle+0x28>
    else  if(arc->indic_angle_start <arc->indic_angle_end && start <arc->indic_angle_end) {
 8019ee2:	4299      	cmp	r1, r3
 8019ee4:	d2e6      	bcs.n	8019eb4 <lv_arc_set_start_angle+0x22>
 8019ee6:	42a3      	cmp	r3, r4
 8019ee8:	d9e4      	bls.n	8019eb4 <lv_arc_set_start_angle+0x22>
 8019eea:	e7ed      	b.n	8019ec8 <lv_arc_set_start_angle+0x36>

08019eec <lv_arc_set_end_angle>:
{
 8019eec:	b538      	push	{r3, r4, r5, lr}
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019eee:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
{
 8019ef0:	460c      	mov	r4, r1
 8019ef2:	4605      	mov	r5, r0
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019ef4:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8019ef8:	4291      	cmp	r1, r2
    if(LV_ABS(end -arc->indic_angle_end) >= 180) {
 8019efa:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    if(end > (arc->indic_angle_start + 360)) end =arc->indic_angle_start + 360;
 8019efc:	bfc8      	it	gt
 8019efe:	b294      	uxthgt	r4, r2
    if(LV_ABS(end -arc->indic_angle_end) >= 180) {
 8019f00:	1a62      	subs	r2, r4, r1
 8019f02:	2a00      	cmp	r2, #0
 8019f04:	bfb8      	it	lt
 8019f06:	4252      	neglt	r2, r2
 8019f08:	2ab3      	cmp	r2, #179	; 0xb3
 8019f0a:	dd04      	ble.n	8019f16 <lv_arc_set_end_angle+0x2a>
        lv_obj_invalidate(obj);
 8019f0c:	4628      	mov	r0, r5
 8019f0e:	f7eb f9b3 	bl	8005278 <lv_obj_invalidate>
   arc->indic_angle_end = end;
 8019f12:	852c      	strh	r4, [r5, #40]	; 0x28
}
 8019f14:	bd38      	pop	{r3, r4, r5, pc}
    else if(arc->indic_angle_end >arc->indic_angle_start && end >arc->indic_angle_start) {
 8019f16:	428b      	cmp	r3, r1
 8019f18:	d20e      	bcs.n	8019f38 <lv_arc_set_end_angle+0x4c>
 8019f1a:	42a3      	cmp	r3, r4
 8019f1c:	d20c      	bcs.n	8019f38 <lv_arc_set_end_angle+0x4c>
        inv_arc_area(obj, LV_MIN(arc->indic_angle_end, end), LV_MAX(arc->indic_angle_end, end), LV_PART_INDICATOR);
 8019f1e:	42a1      	cmp	r1, r4
 8019f20:	460a      	mov	r2, r1
 8019f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019f26:	4628      	mov	r0, r5
 8019f28:	bf38      	it	cc
 8019f2a:	4622      	movcc	r2, r4
 8019f2c:	42a1      	cmp	r1, r4
 8019f2e:	bf28      	it	cs
 8019f30:	4621      	movcs	r1, r4
 8019f32:	f7ff fd0c 	bl	801994e <inv_arc_area>
 8019f36:	e7ec      	b.n	8019f12 <lv_arc_set_end_angle+0x26>
    else  if(arc->indic_angle_end <arc->indic_angle_start && end <arc->indic_angle_start) {
 8019f38:	428b      	cmp	r3, r1
 8019f3a:	d9e7      	bls.n	8019f0c <lv_arc_set_end_angle+0x20>
 8019f3c:	42a3      	cmp	r3, r4
 8019f3e:	d9e5      	bls.n	8019f0c <lv_arc_set_end_angle+0x20>
 8019f40:	e7ed      	b.n	8019f1e <lv_arc_set_end_angle+0x32>

08019f42 <value_update>:
/**
 * Used internally to update arc angles after a value change
 * @param arc pointer to a arc object
 */
static void value_update(lv_obj_t * obj)
{
 8019f42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f44:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_arc_t * arc = (lv_arc_t *)obj;

    /*If the value is still not set to any value do not update*/
    if(arc->value == VALUE_UNSET) return;
 8019f46:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 8019f4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019f4e:	d03c      	beq.n	8019fca <value_update+0x88>

    int16_t bg_midpoint, range_midpoint, bg_end =arc->bg_angle_end;
 8019f50:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 8019f52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a

    int16_t angle;
    switch(arc->type) {
 8019f54:	f894 6034 	ldrb.w	r6, [r4, #52]	; 0x34
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 8019f58:	429d      	cmp	r5, r3
 8019f5a:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    switch(arc->type) {
 8019f5e:	f3c6 0641 	ubfx	r6, r6, #1, #2
 8019f62:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
    if(arc->bg_angle_end <arc->bg_angle_start) bg_end =arc->bg_angle_end + 360;
 8019f66:	bf3c      	itt	cc
 8019f68:	f505 75b4 	addcc.w	r5, r5, #360	; 0x168
 8019f6c:	b2ad      	uxthcc	r5, r5
    switch(arc->type) {
 8019f6e:	2e01      	cmp	r6, #1
 8019f70:	b22d      	sxth	r5, r5
 8019f72:	d00b      	beq.n	8019f8c <value_update+0x4a>
 8019f74:	2e02      	cmp	r6, #2
 8019f76:	d037      	beq.n	8019fe8 <value_update+0xa6>
        case LV_ARC_MODE_REVERSE:
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
            lv_arc_set_start_angle(obj, angle);
            break;
        default: /** LV_ARC_TYPE_NORMAL*/
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019f78:	9500      	str	r5, [sp, #0]
 8019f7a:	f7fd fc9c 	bl	80178b6 <lv_map>
            lv_arc_set_end_angle(obj, angle);
 8019f7e:	b281      	uxth	r1, r0
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019f80:	b205      	sxth	r5, r0
            lv_arc_set_end_angle(obj, angle);
 8019f82:	4620      	mov	r0, r4
 8019f84:	f7ff ffb2 	bl	8019eec <lv_arc_set_end_angle>
            lv_arc_set_start_angle(obj,arc->bg_angle_start);
 8019f88:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8019f8a:	e032      	b.n	8019ff2 <value_update+0xb0>
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019f8c:	188e      	adds	r6, r1, r2
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8019f8e:	18ef      	adds	r7, r5, r3
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019f90:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8019f94:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 8019f98:	ea4f 0c66 	mov.w	ip, r6, asr #1
            if(arc->value < range_midpoint) {
 8019f9c:	f346 064f 	sbfx	r6, r6, #1, #16
 8019fa0:	f347 0e4f 	sbfx	lr, r7, #1, #16
 8019fa4:	f3c7 074f 	ubfx	r7, r7, #1, #16
 8019fa8:	42b0      	cmp	r0, r6
 8019faa:	da10      	bge.n	8019fce <value_update+0x8c>
                angle = lv_map(arc->value,arc->min_value, range_midpoint,arc->bg_angle_start, bg_midpoint);
 8019fac:	4662      	mov	r2, ip
 8019fae:	f8cd e000 	str.w	lr, [sp]
 8019fb2:	f7fd fc80 	bl	80178b6 <lv_map>
                lv_arc_set_start_angle(obj, angle);
 8019fb6:	b281      	uxth	r1, r0
                angle = lv_map(arc->value,arc->min_value, range_midpoint,arc->bg_angle_start, bg_midpoint);
 8019fb8:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8019fba:	4620      	mov	r0, r4
 8019fbc:	f7ff ff69 	bl	8019e92 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8019fc0:	4639      	mov	r1, r7
                lv_arc_set_end_angle(obj, angle);
 8019fc2:	4620      	mov	r0, r4
 8019fc4:	f7ff ff92 	bl	8019eec <lv_arc_set_end_angle>
    }
   arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8019fc8:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8019fca:	b003      	add	sp, #12
 8019fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                angle = lv_map(arc->value, range_midpoint,arc->max_value, bg_midpoint, bg_end);
 8019fce:	4661      	mov	r1, ip
 8019fd0:	4673      	mov	r3, lr
 8019fd2:	9500      	str	r5, [sp, #0]
 8019fd4:	f7fd fc6f 	bl	80178b6 <lv_map>
 8019fd8:	4606      	mov	r6, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8019fda:	4639      	mov	r1, r7
                angle = lv_map(arc->value, range_midpoint,arc->max_value, bg_midpoint, bg_end);
 8019fdc:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8019fde:	4620      	mov	r0, r4
 8019fe0:	f7ff ff57 	bl	8019e92 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8019fe4:	b2b1      	uxth	r1, r6
 8019fe6:	e7ec      	b.n	8019fc2 <value_update+0x80>
            angle = lv_map(arc->value,arc->min_value,arc->max_value,arc->bg_angle_start, bg_end);
 8019fe8:	9500      	str	r5, [sp, #0]
 8019fea:	f7fd fc64 	bl	80178b6 <lv_map>
 8019fee:	b205      	sxth	r5, r0
            lv_arc_set_start_angle(obj, angle);
 8019ff0:	b281      	uxth	r1, r0
            lv_arc_set_start_angle(obj,arc->bg_angle_start);
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f7ff ff4d 	bl	8019e92 <lv_arc_set_start_angle>
 8019ff8:	e7e6      	b.n	8019fc8 <value_update+0x86>

08019ffa <lv_arc_set_value>:
{
 8019ffa:	b410      	push	{r4}
    if(arc->value == value) return;
 8019ffc:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 801a000:	428c      	cmp	r4, r1
 801a002:	d010      	beq.n	801a026 <lv_arc_set_value+0x2c>
    new_value = value >arc->max_value ?arc->max_value : value;
 801a004:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 801a008:	428a      	cmp	r2, r1
 801a00a:	bfa8      	it	ge
 801a00c:	460a      	movge	r2, r1
    new_value = new_value <arc->min_value ?arc->min_value : new_value;
 801a00e:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 801a012:	4291      	cmp	r1, r2
 801a014:	bfb8      	it	lt
 801a016:	4611      	movlt	r1, r2
    if(arc->value == new_value) return;
 801a018:	428c      	cmp	r4, r1
 801a01a:	d004      	beq.n	801a026 <lv_arc_set_value+0x2c>
}
 801a01c:	f85d 4b04 	ldr.w	r4, [sp], #4
   arc->value = new_value;
 801a020:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 801a022:	f7ff bf8e 	b.w	8019f42 <value_update>
}
 801a026:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a02a:	4770      	bx	lr

0801a02c <lv_arc_event>:
{
 801a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801a030:	48cb      	ldr	r0, [pc, #812]	; (801a360 <lv_arc_event+0x334>)
{
 801a032:	b0ad      	sub	sp, #180	; 0xb4
 801a034:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801a036:	f7e7 ff80 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801a03a:	2801      	cmp	r0, #1
 801a03c:	d138      	bne.n	801a0b0 <lv_arc_event+0x84>
    lv_event_code_t code = lv_event_get_code(e);
 801a03e:	4638      	mov	r0, r7
 801a040:	f7e8 f814 	bl	800206c <lv_event_get_code>
 801a044:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801a046:	4638      	mov	r0, r7
 801a048:	f7e8 f80e 	bl	8002068 <lv_event_get_target>
 801a04c:	4605      	mov	r5, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 801a04e:	4638      	mov	r0, r7
 801a050:	f7e8 f80a 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_PRESSING) {
 801a054:	2e02      	cmp	r6, #2
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 801a056:	4604      	mov	r4, r0
    if(code == LV_EVENT_PRESSING) {
 801a058:	f040 80e9 	bne.w	801a22e <lv_arc_event+0x202>
        lv_indev_t * indev = lv_indev_get_act();
 801a05c:	f7e8 fa7a 	bl	8002554 <lv_indev_get_act>
        if(indev == NULL) return;
 801a060:	4606      	mov	r6, r0
 801a062:	b328      	cbz	r0, 801a0b0 <lv_arc_event+0x84>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801a064:	f7e8 fa7c 	bl	8002560 <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 801a068:	2801      	cmp	r0, #1
 801a06a:	d121      	bne.n	801a0b0 <lv_arc_event+0x84>
        lv_indev_get_point(indev, &p);
 801a06c:	a90d      	add	r1, sp, #52	; 0x34
 801a06e:	4630      	mov	r0, r6
 801a070:	f7e8 fad1 	bl	8002616 <lv_indev_get_point>
        get_center(obj, &center, &r);
 801a074:	aa0a      	add	r2, sp, #40	; 0x28
 801a076:	a91a      	add	r1, sp, #104	; 0x68
 801a078:	4628      	mov	r0, r5
 801a07a:	f7ff fc1d 	bl	80198b8 <get_center>
        p.x -=  center.x;
 801a07e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801a082:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 801a086:	1a9b      	subs	r3, r3, r2
        p.y -=  center.y;
 801a088:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
        p.x -=  center.x;
 801a08c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        p.y -=  center.y;
 801a090:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801a094:	1a9b      	subs	r3, r3, r2
 801a096:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if(arc->dragging == false) {
 801a09a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801a09e:	07da      	lsls	r2, r3, #31
 801a0a0:	d509      	bpl.n	801a0b6 <lv_arc_event+0x8a>
        if(p.x == 0 && p.y == 0) return;
 801a0a2:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801a0a6:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801a0aa:	ea51 0300 	orrs.w	r3, r1, r0
 801a0ae:	d12e      	bne.n	801a10e <lv_arc_event+0xe2>
}
 801a0b0:	b02d      	add	sp, #180	; 0xb4
 801a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801a0b6:	f44f 6205 	mov.w	r2, #2128	; 0x850
 801a0ba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a0be:	4628      	mov	r0, r5
 801a0c0:	f7ed fa02 	bl	80074c8 <lv_obj_get_style_prop>
            r -=  indic_width;
 801a0c4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
            if(p.x * p.x + p.y * p.y > r * r) {
 801a0c8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
            r -=  indic_width;
 801a0cc:	1a10      	subs	r0, r2, r0
            if(p.x * p.x + p.y * p.y > r * r) {
 801a0ce:	4349      	muls	r1, r1
            r -= r / 2; /*Add some more sensitive area*/
 801a0d0:	f3c0 32c0 	ubfx	r2, r0, #15, #1
            r -=  indic_width;
 801a0d4:	b283      	uxth	r3, r0
            r -= r / 2; /*Add some more sensitive area*/
 801a0d6:	fa02 f080 	sxtah	r0, r2, r0
            if(p.x * p.x + p.y * p.y > r * r) {
 801a0da:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
            r -= r / 2; /*Add some more sensitive area*/
 801a0de:	eba3 0360 	sub.w	r3, r3, r0, asr #1
            if(p.x * p.x + p.y * p.y > r * r) {
 801a0e2:	fb02 1202 	mla	r2, r2, r2, r1
            r -= r / 2; /*Add some more sensitive area*/
 801a0e6:	b21b      	sxth	r3, r3
 801a0e8:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            if(p.x * p.x + p.y * p.y > r * r) {
 801a0ec:	435b      	muls	r3, r3
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	dd08      	ble.n	801a104 <lv_arc_event+0xd8>
               arc->dragging = true;
 801a0f2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801a0f6:	f043 0301 	orr.w	r3, r3, #1
 801a0fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
               arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 801a0fe:	f7fc fd77 	bl	8016bf0 <lv_tick_get>
 801a102:	63a0      	str	r0, [r4, #56]	; 0x38
        if(arc->dragging == false) return;
 801a104:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801a108:	07db      	lsls	r3, r3, #31
 801a10a:	d5d1      	bpl.n	801a0b0 <lv_arc_event+0x84>
 801a10c:	e7c9      	b.n	801a0a2 <lv_arc_event+0x76>
        int16_t bg_end =arc->bg_angle_end;
 801a10e:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
        if(arc->bg_angle_end <arc->bg_angle_start) {
 801a110:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801a112:	42b3      	cmp	r3, r6
            bg_end =arc->bg_angle_end + 360;
 801a114:	bf84      	itt	hi
 801a116:	f506 76b4 	addhi.w	r6, r6, #360	; 0x168
 801a11a:	b2b6      	uxthhi	r6, r6
        angle = lv_atan2(p.y, p.x);
 801a11c:	f7fd fb7f 	bl	801781e <lv_atan2>
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 801a120:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801a122:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801a124:	b237      	sxth	r7, r6
        int16_t deg_range = bg_end -arc->bg_angle_start;
 801a126:	1af6      	subs	r6, r6, r3
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 801a128:	441a      	add	r2, r3
        int16_t deg_range = bg_end -arc->bg_angle_start;
 801a12a:	b236      	sxth	r6, r6
        angle -=arc->bg_angle_start;   /*Make the angle relative to the start angle*/
 801a12c:	1a80      	subs	r0, r0, r2
 801a12e:	b282      	uxth	r2, r0
 801a130:	b200      	sxth	r0, r0
        if(angle < 0) angle += 360;
 801a132:	2800      	cmp	r0, #0
 801a134:	bfb8      	it	lt
 801a136:	f502 70b4 	addlt.w	r0, r2, #360	; 0x168
        int16_t last_angle_rel =arc->last_angle -arc->bg_angle_start;
 801a13a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
        if(angle < 0) angle += 360;
 801a13c:	bfb8      	it	lt
 801a13e:	b200      	sxthlt	r0, r0
        int16_t last_angle_rel =arc->last_angle -arc->bg_angle_start;
 801a140:	eba2 0803 	sub.w	r8, r2, r3
 801a144:	1a9b      	subs	r3, r3, r2
 801a146:	fa1f f888 	uxth.w	r8, r8
        int16_t delta_angle = angle - last_angle_rel;
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	fa10 f383 	uxtah	r3, r0, r3
        if(LV_ABS(delta_angle) > 280) {
 801a150:	b21b      	sxth	r3, r3
 801a152:	2b00      	cmp	r3, #0
 801a154:	bfb8      	it	lt
 801a156:	425b      	neglt	r3, r3
 801a158:	b29b      	uxth	r3, r3
 801a15a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801a15e:	d940      	bls.n	801a1e2 <lv_arc_event+0x1b6>
            if(arc->min_close) angle = 0;
 801a160:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
            else angle = deg_range;
 801a164:	f013 0f08 	tst.w	r3, #8
 801a168:	bf0c      	ite	eq
 801a16a:	4630      	moveq	r0, r6
 801a16c:	2000      	movne	r0, #0
        delta_angle = angle - last_angle_rel;
 801a16e:	4410      	add	r0, r2
 801a170:	b206      	sxth	r6, r0
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 801a172:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801a174:	f7fc fd4a 	bl	8016c0c <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 801a178:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a17a:	4358      	muls	r0, r3
 801a17c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a180:	fbb0 f3f3 	udiv	r3, r0, r3
 801a184:	b21a      	sxth	r2, r3
        if(delta_angle > delta_angle_max) {
 801a186:	4296      	cmp	r6, r2
 801a188:	dc05      	bgt.n	801a196 <lv_arc_event+0x16a>
        else if(delta_angle < -delta_angle_max) {
 801a18a:	4250      	negs	r0, r2
 801a18c:	4286      	cmp	r6, r0
            delta_angle = -delta_angle_max;
 801a18e:	bfb6      	itet	lt
 801a190:	425b      	neglt	r3, r3
 801a192:	4632      	movge	r2, r6
 801a194:	b21a      	sxthlt	r2, r3
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 801a196:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 801a198:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801a19c:	f9b4 c032 	ldrsh.w	ip, [r4, #50]	; 0x32
 801a1a0:	1a78      	subs	r0, r7, r1
        int16_t old_value =arc->value;
 801a1a2:	f9b4 902e 	ldrsh.w	r9, [r4, #46]	; 0x2e
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 801a1a6:	ebac 0603 	sub.w	r6, ip, r3
 801a1aa:	00c0      	lsls	r0, r0, #3
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 801a1ac:	f8cd c000 	str.w	ip, [sp]
        int32_t round = ((bg_end -arc->bg_angle_start) * 8) / (arc->max_value -arc->min_value);
 801a1b0:	fb90 f0f6 	sdiv	r0, r0, r6
        round = (round + 4) >> 4;
 801a1b4:	1d06      	adds	r6, r0, #4
        angle +=arc->bg_angle_start;   /*Make the angle absolute again*/
 801a1b6:	eb08 0001 	add.w	r0, r8, r1
 801a1ba:	eb00 1026 	add.w	r0, r0, r6, asr #4
 801a1be:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 801a1c0:	463a      	mov	r2, r7
 801a1c2:	b200      	sxth	r0, r0
 801a1c4:	f7fd fb77 	bl	80178b6 <lv_map>
        if(new_value != lv_arc_get_value(obj)) {
 801a1c8:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
        int16_t new_value = lv_map(angle,arc->bg_angle_start, bg_end,arc->min_value,arc->max_value);
 801a1cc:	b206      	sxth	r6, r0
        if(new_value != lv_arc_get_value(obj)) {
 801a1ce:	42b3      	cmp	r3, r6
 801a1d0:	d115      	bne.n	801a1fe <lv_arc_event+0x1d2>
        if(new_value ==arc->min_value || new_value ==arc->max_value) {
 801a1d2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801a1d6:	42b3      	cmp	r3, r6
 801a1d8:	d123      	bne.n	801a222 <lv_arc_event+0x1f6>
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801a1da:	f7fc fd09 	bl	8016bf0 <lv_tick_get>
 801a1de:	63a0      	str	r0, [r4, #56]	; 0x38
 801a1e0:	e766      	b.n	801a0b0 <lv_arc_event+0x84>
            if(angle < deg_range / 2)arc->min_close = 1;
 801a1e2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801a1e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801a1ea:	ebb0 0f66 	cmp.w	r0, r6, asr #1
 801a1ee:	bfb4      	ite	lt
 801a1f0:	f043 0308 	orrlt.w	r3, r3, #8
            else arc->min_close = 0;
 801a1f4:	f36f 03c3 	bfcge	r3, #3, #1
 801a1f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 801a1fc:	e7b7      	b.n	801a16e <lv_arc_event+0x142>
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801a1fe:	f7fc fcf7 	bl	8016bf0 <lv_tick_get>
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 801a202:	4631      	mov	r1, r6
           arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 801a204:	63a0      	str	r0, [r4, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 801a206:	4628      	mov	r0, r5
 801a208:	f7ff fef7 	bl	8019ffa <lv_arc_set_value>
            if(new_value != old_value) {
 801a20c:	45b1      	cmp	r9, r6
 801a20e:	d0e0      	beq.n	801a1d2 <lv_arc_event+0x1a6>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a210:	2200      	movs	r2, #0
 801a212:	211c      	movs	r1, #28
 801a214:	4628      	mov	r0, r5
 801a216:	f7e7 ff07 	bl	8002028 <lv_event_send>
                if(res != LV_RES_OK) return;
 801a21a:	2801      	cmp	r0, #1
 801a21c:	f47f af48 	bne.w	801a0b0 <lv_arc_event+0x84>
 801a220:	e7d7      	b.n	801a1d2 <lv_arc_event+0x1a6>
        if(new_value ==arc->min_value || new_value ==arc->max_value) {
 801a222:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 801a226:	42b3      	cmp	r3, r6
 801a228:	f47f af42 	bne.w	801a0b0 <lv_arc_event+0x84>
 801a22c:	e7d5      	b.n	801a1da <lv_arc_event+0x1ae>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801a22e:	2e08      	cmp	r6, #8
 801a230:	d001      	beq.n	801a236 <lv_arc_event+0x20a>
 801a232:	2e03      	cmp	r6, #3
 801a234:	d11b      	bne.n	801a26e <lv_arc_event+0x242>
       arc->dragging = false;
 801a236:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 801a23a:	4628      	mov	r0, r5
       arc->dragging = false;
 801a23c:	f36f 0300 	bfc	r3, #0, #1
 801a240:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 801a244:	f7e9 fe7c 	bl	8003f40 <lv_obj_get_group>
 801a248:	4604      	mov	r4, r0
        bool editing               = lv_group_get_editing(g);
 801a24a:	f7e8 f90f 	bl	800246c <lv_group_get_editing>
 801a24e:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801a250:	f7e8 f980 	bl	8002554 <lv_indev_get_act>
 801a254:	f7e8 f984 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801a258:	2804      	cmp	r0, #4
 801a25a:	f47f af29 	bne.w	801a0b0 <lv_arc_event+0x84>
            if(editing) lv_group_set_editing(g, false);
 801a25e:	2d00      	cmp	r5, #0
 801a260:	f43f af26 	beq.w	801a0b0 <lv_arc_event+0x84>
 801a264:	2100      	movs	r1, #0
 801a266:	4620      	mov	r0, r4
 801a268:	f7e8 f89c 	bl	80023a4 <lv_group_set_editing>
 801a26c:	e720      	b.n	801a0b0 <lv_arc_event+0x84>
    else if(code == LV_EVENT_KEY) {
 801a26e:	2e0d      	cmp	r6, #13
 801a270:	d122      	bne.n	801a2b8 <lv_arc_event+0x28c>
        char c = *((char *)lv_event_get_param(e));
 801a272:	4638      	mov	r0, r7
 801a274:	f7e7 fefc 	bl	8002070 <lv_event_get_param>
 801a278:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value =arc->value;
 801a27a:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801a27e:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801a282:	2a11      	cmp	r2, #17
 801a284:	d110      	bne.n	801a2a8 <lv_arc_event+0x27c>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 801a286:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 801a288:	3101      	adds	r1, #1
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 801a28a:	b209      	sxth	r1, r1
 801a28c:	4628      	mov	r0, r5
 801a28e:	f7ff feb4 	bl	8019ffa <lv_arc_set_value>
        if(old_value !=arc->value) {
 801a292:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 801a296:	42b3      	cmp	r3, r6
 801a298:	f43f af0a 	beq.w	801a0b0 <lv_arc_event+0x84>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801a29c:	2200      	movs	r2, #0
 801a29e:	211c      	movs	r1, #28
 801a2a0:	4628      	mov	r0, r5
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a2a2:	f7e7 fec1 	bl	8002028 <lv_event_send>
}
 801a2a6:	e703      	b.n	801a0b0 <lv_arc_event+0x84>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801a2a8:	2b14      	cmp	r3, #20
 801a2aa:	d002      	beq.n	801a2b2 <lv_arc_event+0x286>
 801a2ac:	2b12      	cmp	r3, #18
 801a2ae:	f47f aeff 	bne.w	801a0b0 <lv_arc_event+0x84>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 801a2b2:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 801a2b4:	3901      	subs	r1, #1
 801a2b6:	e7e8      	b.n	801a28a <lv_arc_event+0x25e>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801a2b8:	2e13      	cmp	r6, #19
 801a2ba:	d153      	bne.n	801a364 <lv_arc_event+0x338>
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801a2bc:	2100      	movs	r1, #0
 801a2be:	4628      	mov	r0, r5
 801a2c0:	f7ff fab3 	bl	801982a <lv_obj_get_style_pad_left>
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801a2c4:	2100      	movs	r1, #0
        lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801a2c6:	4604      	mov	r4, r0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801a2c8:	4628      	mov	r0, r5
 801a2ca:	f7ff fab5 	bl	8019838 <lv_obj_get_style_pad_right>
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801a2ce:	2100      	movs	r1, #0
        lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801a2d0:	4681      	mov	r9, r0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801a2d2:	4628      	mov	r0, r5
 801a2d4:	f7ff fab7 	bl	8019846 <lv_obj_get_style_pad_top>
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801a2d8:	2100      	movs	r1, #0
        lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801a2da:	4680      	mov	r8, r0
        lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 801a2dc:	4628      	mov	r0, r5
 801a2de:	f7ff fab9 	bl	8019854 <lv_obj_get_style_pad_bottom>
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 801a2e2:	454c      	cmp	r4, r9
 801a2e4:	4621      	mov	r1, r4
 801a2e6:	bfb8      	it	lt
 801a2e8:	4649      	movlt	r1, r9
 801a2ea:	b20a      	sxth	r2, r1
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a2ec:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 801a2f0:	4542      	cmp	r2, r8
 801a2f2:	bfb8      	it	lt
 801a2f4:	4642      	movlt	r2, r8
 801a2f6:	b214      	sxth	r4, r2
 801a2f8:	42a0      	cmp	r0, r4
 801a2fa:	bfb8      	it	lt
 801a2fc:	4620      	movlt	r0, r4
 801a2fe:	b206      	sxth	r6, r0
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a300:	4628      	mov	r0, r5
 801a302:	f7ff fa92 	bl	801982a <lv_obj_get_style_pad_left>
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a306:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_left = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a30a:	4604      	mov	r4, r0
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a30c:	4628      	mov	r0, r5
 801a30e:	f7ff fa93 	bl	8019838 <lv_obj_get_style_pad_right>
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a312:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a316:	4681      	mov	r9, r0
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a318:	4628      	mov	r0, r5
 801a31a:	f7ff fa94 	bl	8019846 <lv_obj_get_style_pad_top>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a31e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a322:	4680      	mov	r8, r0
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a324:	4628      	mov	r0, r5
 801a326:	f7ff fa95 	bl	8019854 <lv_obj_get_style_pad_bottom>
 801a32a:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 801a32c:	4638      	mov	r0, r7
 801a32e:	f7e7 fe9f 	bl	8002070 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 801a332:	454c      	cmp	r4, r9
        lv_coord_t * s = lv_event_get_param(e);
 801a334:	4602      	mov	r2, r0
        *s = LV_MAX(*s, knob_pad - bg_pad);
 801a336:	f9b0 0000 	ldrsh.w	r0, [r0]
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 801a33a:	bfb8      	it	lt
 801a33c:	464c      	movlt	r4, r9
 801a33e:	b224      	sxth	r4, r4
 801a340:	4544      	cmp	r4, r8
 801a342:	bfb8      	it	lt
 801a344:	4644      	movlt	r4, r8
 801a346:	b223      	sxth	r3, r4
 801a348:	42ab      	cmp	r3, r5
 801a34a:	bfb8      	it	lt
 801a34c:	462b      	movlt	r3, r5
 801a34e:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad - bg_pad);
 801a350:	b21b      	sxth	r3, r3
 801a352:	1b9b      	subs	r3, r3, r6
 801a354:	4283      	cmp	r3, r0
 801a356:	bfb8      	it	lt
 801a358:	4603      	movlt	r3, r0
 801a35a:	8013      	strh	r3, [r2, #0]
 801a35c:	e6a8      	b.n	801a0b0 <lv_arc_event+0x84>
 801a35e:	bf00      	nop
 801a360:	08029d1c 	.word	0x08029d1c
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801a364:	2e15      	cmp	r6, #21
 801a366:	f47f aea3 	bne.w	801a0b0 <lv_arc_event+0x84>
    lv_obj_t * obj = lv_event_get_target(e);
 801a36a:	4638      	mov	r0, r7
    get_center(obj, &center, &arc_r);
 801a36c:	ae07      	add	r6, sp, #28
    lv_obj_t * obj = lv_event_get_target(e);
 801a36e:	f7e7 fe7b 	bl	8002068 <lv_event_get_target>
 801a372:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a374:	4638      	mov	r0, r7
 801a376:	f7e7 fe7b 	bl	8002070 <lv_event_get_param>
 801a37a:	4607      	mov	r7, r0
    get_center(obj, &center, &arc_r);
 801a37c:	f10d 021a 	add.w	r2, sp, #26
 801a380:	4631      	mov	r1, r6
 801a382:	4620      	mov	r0, r4
 801a384:	f7ff fa98 	bl	80198b8 <get_center>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a388:	4639      	mov	r1, r7
 801a38a:	a81a      	add	r0, sp, #104	; 0x68
 801a38c:	f7ea fc7c 	bl	8004c88 <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 801a390:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a394:	2b00      	cmp	r3, #0
 801a396:	dd2d      	ble.n	801a3f4 <lv_arc_event+0x3c8>
        lv_draw_arc_dsc_init(&arc_dsc);
 801a398:	a80a      	add	r0, sp, #40	; 0x28
 801a39a:	f7ee faee 	bl	800897a <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 801a39e:	aa0a      	add	r2, sp, #40	; 0x28
 801a3a0:	2100      	movs	r1, #0
 801a3a2:	4620      	mov	r0, r4
 801a3a4:	f7ea fbbe 	bl	8004b24 <lv_obj_init_draw_arc_dsc>
        obj_draw_dsc.part = LV_PART_MAIN;
 801a3a8:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3aa:	aa1a      	add	r2, sp, #104	; 0x68
 801a3ac:	211a      	movs	r1, #26
        obj_draw_dsc.part = LV_PART_MAIN;
 801a3ae:	9327      	str	r3, [sp, #156]	; 0x9c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3b0:	4620      	mov	r0, r4
        obj_draw_dsc.radius = arc_r;
 801a3b2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        obj_draw_dsc.p1 = &center;
 801a3b6:	9621      	str	r6, [sp, #132]	; 0x84
        obj_draw_dsc.radius = arc_r;
 801a3b8:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        obj_draw_dsc.arc_dsc = &arc_dsc;
 801a3bc:	ab0a      	add	r3, sp, #40	; 0x28
 801a3be:	9320      	str	r3, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a3c0:	f7e7 fe32 	bl	8002028 <lv_event_send>
        lv_draw_arc(center.x, center.y, arc_r, arc->bg_angle_start + arc->rotation,
 801a3c4:	a90a      	add	r1, sp, #40	; 0x28
 801a3c6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801a3c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801a3ca:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a3ce:	4413      	add	r3, r2
 801a3d0:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a3d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	440a      	add	r2, r1
 801a3da:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a3de:	b292      	uxth	r2, r2
 801a3e0:	9200      	str	r2, [sp, #0]
 801a3e2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a3e6:	f7ee fad3 	bl	8008990 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a3ea:	aa1a      	add	r2, sp, #104	; 0x68
 801a3ec:	211b      	movs	r1, #27
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	f7e7 fe1a 	bl	8002028 <lv_event_send>
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 801a3f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a3f8:	4620      	mov	r0, r4
 801a3fa:	f7ff fa16 	bl	801982a <lv_obj_get_style_pad_left>
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801a3fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t left_indic = lv_obj_get_style_pad_left(obj, LV_PART_INDICATOR);
 801a402:	4605      	mov	r5, r0
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801a404:	4620      	mov	r0, r4
 801a406:	f7ff fa17 	bl	8019838 <lv_obj_get_style_pad_right>
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801a40a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t right_indic = lv_obj_get_style_pad_right(obj, LV_PART_INDICATOR);
 801a40e:	4681      	mov	r9, r0
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801a410:	4620      	mov	r0, r4
 801a412:	f7ff fa18 	bl	8019846 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 801a416:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_coord_t top_indic = lv_obj_get_style_pad_top(obj, LV_PART_INDICATOR);
 801a41a:	4680      	mov	r8, r0
    lv_coord_t bottom_indic = lv_obj_get_style_pad_bottom(obj, LV_PART_INDICATOR);
 801a41c:	4620      	mov	r0, r4
 801a41e:	f7ff fa19 	bl	8019854 <lv_obj_get_style_pad_bottom>
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 801a422:	454d      	cmp	r5, r9
 801a424:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801a428:	bfb8      	it	lt
 801a42a:	464d      	movlt	r5, r9
 801a42c:	b22d      	sxth	r5, r5
 801a42e:	4545      	cmp	r5, r8
 801a430:	bfb8      	it	lt
 801a432:	4645      	movlt	r5, r8
 801a434:	b22d      	sxth	r5, r5
 801a436:	4285      	cmp	r5, r0
 801a438:	bfac      	ite	ge
 801a43a:	1b5d      	subge	r5, r3, r5
 801a43c:	1a1d      	sublt	r5, r3, r0
 801a43e:	fa1f f885 	uxth.w	r8, r5
 801a442:	b22d      	sxth	r5, r5
    if(indic_r > 0) {
 801a444:	2d00      	cmp	r5, #0
 801a446:	dd2c      	ble.n	801a4a2 <lv_arc_event+0x476>
        lv_draw_arc_dsc_init(&arc_dsc);
 801a448:	a80a      	add	r0, sp, #40	; 0x28
 801a44a:	f7ee fa96 	bl	800897a <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 801a44e:	aa0a      	add	r2, sp, #40	; 0x28
 801a450:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a454:	4620      	mov	r0, r4
 801a456:	f7ea fb65 	bl	8004b24 <lv_obj_init_draw_arc_dsc>
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a45a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a45e:	aa1a      	add	r2, sp, #104	; 0x68
 801a460:	211a      	movs	r1, #26
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801a462:	9327      	str	r3, [sp, #156]	; 0x9c
        obj_draw_dsc.arc_dsc = &arc_dsc;
 801a464:	ab0a      	add	r3, sp, #40	; 0x28
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a466:	4620      	mov	r0, r4
        obj_draw_dsc.p1 = &center;
 801a468:	9621      	str	r6, [sp, #132]	; 0x84
        obj_draw_dsc.arc_dsc = &arc_dsc;
 801a46a:	9320      	str	r3, [sp, #128]	; 0x80
        obj_draw_dsc.radius = indic_r;
 801a46c:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a470:	f7e7 fdda 	bl	8002028 <lv_event_send>
        lv_draw_arc(center.x, center.y, indic_r, arc->indic_angle_start +arc->rotation,
 801a474:	a90a      	add	r1, sp, #40	; 0x28
 801a476:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801a478:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a47a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a47e:	4413      	add	r3, r2
 801a480:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a484:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801a486:	b29b      	uxth	r3, r3
 801a488:	440a      	add	r2, r1
 801a48a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a48e:	b292      	uxth	r2, r2
 801a490:	9200      	str	r2, [sp, #0]
 801a492:	4642      	mov	r2, r8
 801a494:	f7ee fa7c 	bl	8008990 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a498:	aa1a      	add	r2, sp, #104	; 0x68
 801a49a:	211b      	movs	r1, #27
 801a49c:	4620      	mov	r0, r4
 801a49e:	f7e7 fdc3 	bl	8002028 <lv_event_send>
 801a4a2:	f44f 6205 	mov.w	r2, #2128	; 0x850
 801a4a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a4aa:	4620      	mov	r0, r4
    get_knob_area(obj, &center, arc_r, &knob_area);
 801a4ac:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801a4b0:	f7ed f80a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t indic_width_half = indic_width / 2;
 801a4b4:	f3c0 35c0 	ubfx	r5, r0, #15, #1
    if(arc->type == LV_ARC_MODE_NORMAL) {
 801a4b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    lv_coord_t indic_width_half = indic_width / 2;
 801a4bc:	fa05 f080 	sxtah	r0, r5, r0
    uint16_t angle =arc->rotation;
 801a4c0:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 801a4c4:	f013 0306 	ands.w	r3, r3, #6
    r -= indic_width_half;
 801a4c8:	f3c0 054f 	ubfx	r5, r0, #1, #16
 801a4cc:	eba6 0605 	sub.w	r6, r6, r5
 801a4d0:	b236      	sxth	r6, r6
    if(arc->type == LV_ARC_MODE_NORMAL) {
 801a4d2:	d101      	bne.n	801a4d8 <lv_arc_event+0x4ac>
        else angle +=arc->indic_angle_end;
 801a4d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a4d6:	e002      	b.n	801a4de <lv_arc_event+0x4b2>
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 801a4d8:	2b04      	cmp	r3, #4
 801a4da:	d163      	bne.n	801a5a4 <lv_arc_event+0x578>
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a4dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        else angle +=arc->indic_angle_end;
 801a4de:	4498      	add	r8, r3
 801a4e0:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801a4e4:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 801a4e8:	b200      	sxth	r0, r0
 801a4ea:	f7fd f937 	bl	801775c <lv_trigo_sin>
 801a4ee:	9005      	str	r0, [sp, #20]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801a4f0:	fa0f f088 	sxth.w	r0, r8
 801a4f4:	f7fd f932 	bl	801775c <lv_trigo_sin>
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a4f8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801a4fc:	4683      	mov	fp, r0
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a4fe:	4620      	mov	r0, r4
 801a500:	f7ff f993 	bl	801982a <lv_obj_get_style_pad_left>
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a504:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
 801a508:	4681      	mov	r9, r0
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a50a:	4620      	mov	r0, r4
 801a50c:	f7ff f994 	bl	8019838 <lv_obj_get_style_pad_right>
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a510:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
 801a514:	4682      	mov	sl, r0
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a516:	4620      	mov	r0, r4
 801a518:	f7ff f995 	bl	8019846 <lv_obj_get_style_pad_top>
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a51c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
 801a520:	4680      	mov	r8, r0
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);
 801a522:	4620      	mov	r0, r4
 801a524:	f7ff f996 	bl	8019854 <lv_obj_get_style_pad_bottom>
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801a528:	9b05      	ldr	r3, [sp, #20]
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a52a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a52e:	44a9      	add	r9, r5
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 801a530:	4373      	muls	r3, r6
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801a532:	44aa      	add	sl, r5
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 801a534:	fb06 f60b 	mul.w	r6, r6, fp
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a538:	44a8      	add	r8, r5
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a53a:	eb02 32e3 	add.w	r2, r2, r3, asr #15
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a53e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801a542:	4405      	add	r5, r0
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a544:	eb03 33e6 	add.w	r3, r3, r6, asr #15
    obj_draw_dsc.draw_area = &knob_area;
 801a548:	ae08      	add	r6, sp, #32
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a54a:	b292      	uxth	r2, r2
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a54c:	b29b      	uxth	r3, r3
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a54e:	eba2 0909 	sub.w	r9, r2, r9
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801a552:	4452      	add	r2, sl
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a554:	eba3 0808 	sub.w	r8, r3, r8
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801a558:	442b      	add	r3, r5
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a55a:	ad0d      	add	r5, sp, #52	; 0x34
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 801a55c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 801a560:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a564:	4628      	mov	r0, r5
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 801a566:	f8ad 9020 	strh.w	r9, [sp, #32]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 801a56a:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801a56e:	f7f2 fb3b 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801a572:	462a      	mov	r2, r5
 801a574:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801a578:	4620      	mov	r0, r4
 801a57a:	f7ea f8a1 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    obj_draw_dsc.part = LV_PART_KNOB;
 801a57e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a582:	aa1a      	add	r2, sp, #104	; 0x68
 801a584:	211a      	movs	r1, #26
 801a586:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_KNOB;
 801a588:	9327      	str	r3, [sp, #156]	; 0x9c
    obj_draw_dsc.rect_dsc = &knob_rect_dsc;
 801a58a:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a58e:	f7e7 fd4b 	bl	8002028 <lv_event_send>
    lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
 801a592:	462a      	mov	r2, r5
 801a594:	4639      	mov	r1, r7
 801a596:	4630      	mov	r0, r6
 801a598:	f7f2 fb48 	bl	800cc2c <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801a59c:	aa1a      	add	r2, sp, #104	; 0x68
 801a59e:	211b      	movs	r1, #27
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	e67e      	b.n	801a2a2 <lv_arc_event+0x276>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 801a5a4:	2b02      	cmp	r3, #2
 801a5a6:	d19d      	bne.n	801a4e4 <lv_arc_event+0x4b8>
        int32_t range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 801a5a8:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 801a5ac:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801a5b0:	4413      	add	r3, r2
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a5b2:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
        int32_t range_midpoint = (int32_t)(arc->min_value +arc->max_value) / 2;
 801a5b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        if(arc->value < range_midpoint) angle +=arc->indic_angle_start;
 801a5ba:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 801a5be:	da89      	bge.n	801a4d4 <lv_arc_event+0x4a8>
 801a5c0:	e78c      	b.n	801a4dc <lv_arc_event+0x4b0>
 801a5c2:	bf00      	nop

0801a5c4 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a5c4:	8883      	ldrh	r3, [r0, #4]
 801a5c6:	8800      	ldrh	r0, [r0, #0]
 801a5c8:	3301      	adds	r3, #1
 801a5ca:	1a18      	subs	r0, r3, r0
}
 801a5cc:	b200      	sxth	r0, r0
 801a5ce:	4770      	bx	lr

0801a5d0 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a5d0:	88c3      	ldrh	r3, [r0, #6]
 801a5d2:	8840      	ldrh	r0, [r0, #2]
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	1a18      	subs	r0, r3, r0
}
 801a5d8:	b200      	sxth	r0, r0
 801a5da:	4770      	bx	lr

0801a5dc <lv_bar_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_bar_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801a5dc:	b510      	push	{r4, lr}
 801a5de:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_bar_t * bar = (lv_bar_t *)obj;

    lv_anim_del(&bar->cur_value_anim, NULL);
 801a5e0:	2100      	movs	r1, #0
 801a5e2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801a5e6:	f7fc fc33 	bl	8016e50 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 801a5ea:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801a5ee:	2100      	movs	r1, #0
}
 801a5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_anim_del(&bar->start_value_anim, NULL);
 801a5f4:	f7fc bc2c 	b.w	8016e50 <lv_anim_del>

0801a5f8 <lv_bar_anim_ready>:
    lv_obj_invalidate(bar_anim->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
    _lv_bar_anim_t * var = a->var;
 801a5f8:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
    lv_bar_t * bar = (lv_bar_t *)obj;

    var->anim_state = LV_BAR_ANIM_STATE_INV;
 801a5fa:	f04f 32ff 	mov.w	r2, #4294967295
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 801a5fe:	6818      	ldr	r0, [r3, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 801a600:	60da      	str	r2, [r3, #12]
    if(var == &bar->cur_value_anim)
 801a602:	f100 023c 	add.w	r2, r0, #60	; 0x3c
 801a606:	4293      	cmp	r3, r2
 801a608:	d103      	bne.n	801a612 <lv_bar_anim_ready+0x1a>
        bar->cur_value = var->anim_end;
 801a60a:	689b      	ldr	r3, [r3, #8]
 801a60c:	6243      	str	r3, [r0, #36]	; 0x24
    else if(var == &bar->start_value_anim)
        bar->start_value = var->anim_end;
    lv_obj_invalidate(var->bar);
 801a60e:	f7ea be33 	b.w	8005278 <lv_obj_invalidate>
    else if(var == &bar->start_value_anim)
 801a612:	f100 024c 	add.w	r2, r0, #76	; 0x4c
 801a616:	4293      	cmp	r3, r2
        bar->start_value = var->anim_end;
 801a618:	bf04      	itt	eq
 801a61a:	689b      	ldreq	r3, [r3, #8]
 801a61c:	6303      	streq	r3, [r0, #48]	; 0x30
 801a61e:	e7f6      	b.n	801a60e <lv_bar_anim_ready+0x16>

0801a620 <lv_bar_anim>:
    bar_anim->anim_state    = value;
 801a620:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 801a622:	6800      	ldr	r0, [r0, #0]
 801a624:	f7ea be28 	b.w	8005278 <lv_obj_invalidate>

0801a628 <lv_bar_set_value_with_anim.part.0>:
}

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a628:	b530      	push	{r4, r5, lr}
 801a62a:	b093      	sub	sp, #76	; 0x4c
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_info->anim_start = anim_info->anim_end;
            anim_info->anim_end   = new_value;
        }
        *value_ptr = new_value;
 801a62c:	6011      	str	r1, [r2, #0]
static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a62e:	4605      	mov	r5, r0
        /*Stop the previous animation if it exists*/
        lv_anim_del(anim_info, NULL);
 801a630:	2100      	movs	r1, #0
 801a632:	4618      	mov	r0, r3
static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
 801a634:	461c      	mov	r4, r3
        lv_anim_del(anim_info, NULL);
 801a636:	f7fc fc0b 	bl	8016e50 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801a63a:	a801      	add	r0, sp, #4
 801a63c:	f7fc fbee 	bl	8016e1c <lv_anim_init>
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 801a640:	4b0a      	ldr	r3, [pc, #40]	; (801a66c <lv_bar_set_value_with_anim.part.0+0x44>)
 * @param start the start value
 * @param end the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
 801a642:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801a644:	2265      	movs	r2, #101	; 0x65
    a->exec_cb = exec_cb;
 801a646:	9302      	str	r3, [sp, #8]
    a->current_value = start;
    a->end_value = end;
 801a648:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a64c:	4628      	mov	r0, r5
    a->var = var;
 801a64e:	9401      	str	r4, [sp, #4]
    a->end_value = end;
 801a650:	930a      	str	r3, [sp, #40]	; 0x28
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 801a652:	4b07      	ldr	r3, [pc, #28]	; (801a670 <lv_bar_set_value_with_anim.part.0+0x48>)
    a->current_value = start;
 801a654:	e9cd 1108 	strd	r1, r1, [sp, #32]
    a->ready_cb = ready_cb;
 801a658:	9304      	str	r3, [sp, #16]
 801a65a:	f7ec ff35 	bl	80074c8 <lv_obj_get_style_prop>
    a->time = duration;
 801a65e:	900b      	str	r0, [sp, #44]	; 0x2c
        lv_anim_set_var(&a, anim_info);
        lv_anim_set_exec_cb(&a, lv_bar_anim);
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
 801a660:	a801      	add	r0, sp, #4
 801a662:	f7fc fc21 	bl	8016ea8 <lv_anim_start>
    }
}
 801a666:	b013      	add	sp, #76	; 0x4c
 801a668:	bd30      	pop	{r4, r5, pc}
 801a66a:	bf00      	nop
 801a66c:	0801a621 	.word	0x0801a621
 801a670:	0801a5f9 	.word	0x0801a5f9

0801a674 <draw_indic>:
{
 801a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a678:	4605      	mov	r5, r0
 801a67a:	b0bf      	sub	sp, #252	; 0xfc
    lv_obj_t * obj = lv_event_get_target(e);
 801a67c:	f7e7 fcf4 	bl	8002068 <lv_event_get_target>
 801a680:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a682:	4628      	mov	r0, r5
 801a684:	f7e7 fcf4 	bl	8002070 <lv_event_get_param>
    lv_obj_get_coords(obj, &bar_coords);
 801a688:	a90b      	add	r1, sp, #44	; 0x2c
    const lv_area_t * clip_area = lv_event_get_param(e);
 801a68a:	4683      	mov	fp, r0
    lv_obj_get_coords(obj, &bar_coords);
 801a68c:	4620      	mov	r0, r4
 801a68e:	f7ea fc4e 	bl	8004f2e <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801a692:	f640 020a 	movw	r2, #2058	; 0x80a
 801a696:	2100      	movs	r1, #0
 801a698:	4620      	mov	r0, r4
 801a69a:	f7ec ff15 	bl	80074c8 <lv_obj_get_style_prop>
 801a69e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801a6a0:	f640 020b 	movw	r2, #2059	; 0x80b
 801a6a4:	2100      	movs	r1, #0
 801a6a6:	4620      	mov	r0, r4
    bar_coords.x1 -= transf_w;
 801a6a8:	b2b6      	uxth	r6, r6
 801a6aa:	f7ec ff0d 	bl	80074c8 <lv_obj_get_style_prop>
 801a6ae:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
    bar_coords.y1 -= transf_h;
 801a6b2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a6b6:	b285      	uxth	r5, r0
    bar_coords.x1 -= transf_w;
 801a6b8:	1bbb      	subs	r3, r7, r6
    bar_coords.x2 += transf_w;
 801a6ba:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    bar_coords.x1 -= transf_w;
 801a6be:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    bar_coords.y1 -= transf_h;
 801a6c2:	1b4b      	subs	r3, r1, r5
    bar_coords.x2 += transf_w;
 801a6c4:	4432      	add	r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a6c6:	3601      	adds	r6, #1
    bar_coords.y1 -= transf_h;
 801a6c8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    bar_coords.y2 += transf_h;
 801a6cc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    bar_coords.x2 += transf_w;
 801a6d0:	b292      	uxth	r2, r2
    bar_coords.y2 += transf_h;
 801a6d2:	442b      	add	r3, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a6d4:	3501      	adds	r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a6d6:	4416      	add	r6, r2
    bar_coords.x2 += transf_w;
 801a6d8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    bar_coords.y2 += transf_h;
 801a6dc:	b29b      	uxth	r3, r3
 801a6de:	1bf6      	subs	r6, r6, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a6e0:	441d      	add	r5, r3
 801a6e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a6e6:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a6e8:	1a6d      	subs	r5, r5, r1
    int32_t range = bar->max_value - bar->min_value;
 801a6ea:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 801a6ee:	b22d      	sxth	r5, r5
 801a6f0:	1aca      	subs	r2, r1, r3
 801a6f2:	9202      	str	r2, [sp, #8]
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 801a6f4:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 801a6f8:	f002 0203 	and.w	r2, r2, #3
 801a6fc:	2a01      	cmp	r2, #1
 801a6fe:	f040 81cd 	bne.w	801aa9c <draw_indic+0x428>
 801a702:	2b00      	cmp	r3, #0
 801a704:	f280 81ca 	bge.w	801aa9c <draw_indic+0x428>
 801a708:	2900      	cmp	r1, #0
 801a70a:	f340 81c7 	ble.w	801aa9c <draw_indic+0x428>
 801a70e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a710:	1ad0      	subs	r0, r2, r3
 801a712:	4243      	negs	r3, r0
 801a714:	4143      	adcs	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a716:	f241 0212 	movw	r2, #4114	; 0x1012
 801a71a:	2100      	movs	r1, #0
 801a71c:	4620      	mov	r0, r4
    bool sym = false;
 801a71e:	9303      	str	r3, [sp, #12]
 801a720:	f7ec fed2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a724:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a728:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a72a:	2100      	movs	r1, #0
 801a72c:	4620      	mov	r0, r4
    lv_area_copy(&bar->indic_area, &bar_coords);
 801a72e:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 801a732:	f7ec fec9 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a736:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a73a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a73c:	2100      	movs	r1, #0
 801a73e:	4620      	mov	r0, r4
 801a740:	f7ec fec2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a744:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a748:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a74a:	2100      	movs	r1, #0
 801a74c:	4620      	mov	r0, r4
 801a74e:	f7ec febb 	bl	80074c8 <lv_obj_get_style_prop>
    dest->x2 = src->x2;
 801a752:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    bar->indic_area.x1 += bg_left;
 801a756:	b2ba      	uxth	r2, r7
    dest->y1 = src->y1;
 801a758:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    dest->y2 = src->y2;
 801a75c:	f9bd e032 	ldrsh.w	lr, [sp, #50]	; 0x32
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a760:	42b5      	cmp	r5, r6
    bar->indic_area.x1 += bg_left;
 801a762:	9206      	str	r2, [sp, #24]
    bar->indic_area.x2 -= bg_right;
 801a764:	fa1f f289 	uxth.w	r2, r9
    bar->indic_area.x1 += bg_left;
 801a768:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
    bar->indic_area.x2 -= bg_right;
 801a76c:	eba3 0302 	sub.w	r3, r3, r2
 801a770:	9204      	str	r2, [sp, #16]
    bar->indic_area.y1 += bg_top;
 801a772:	fa1f f288 	uxth.w	r2, r8
    bar->indic_area.x1 += bg_left;
 801a776:	fa1c f787 	uxtah	r7, ip, r7
    bar->indic_area.y1 += bg_top;
 801a77a:	fa11 f888 	uxtah	r8, r1, r8
    bar->indic_area.x2 -= bg_right;
 801a77e:	b29b      	uxth	r3, r3
    bar->indic_area.y1 += bg_top;
 801a780:	9207      	str	r2, [sp, #28]
    bar->indic_area.y2 -= bg_bottom;
 801a782:	b282      	uxth	r2, r0
    bar->indic_area.x1 += bg_left;
 801a784:	b2bf      	uxth	r7, r7
    bar->indic_area.x2 -= bg_right;
 801a786:	8723      	strh	r3, [r4, #56]	; 0x38
    bar->indic_area.y2 -= bg_bottom;
 801a788:	9205      	str	r2, [sp, #20]
 801a78a:	ebae 0202 	sub.w	r2, lr, r2
    bar->indic_area.y1 += bg_top;
 801a78e:	fa1f f888 	uxth.w	r8, r8
    bar->indic_area.x1 += bg_left;
 801a792:	86a7      	strh	r7, [r4, #52]	; 0x34
    bar->indic_area.y2 -= bg_bottom;
 801a794:	b292      	uxth	r2, r2
    bar->indic_area.y1 += bg_top;
 801a796:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 801a79a:	8762      	strh	r2, [r4, #58]	; 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801a79c:	f300 8180 	bgt.w	801aaa0 <draw_indic+0x42c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a7a0:	3201      	adds	r2, #1
 801a7a2:	eba2 0208 	sub.w	r2, r2, r8
 801a7a6:	b212      	sxth	r2, r2
 801a7a8:	2a03      	cmp	r2, #3
 801a7aa:	dc09      	bgt.n	801a7c0 <draw_indic+0x14c>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a7ac:	8ae2      	ldrh	r2, [r4, #22]
 801a7ae:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801a7b2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801a7b6:	b29b      	uxth	r3, r3
 801a7b8:	1e9a      	subs	r2, r3, #2
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801a7ba:	3302      	adds	r3, #2
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801a7bc:	86e2      	strh	r2, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 801a7be:	8763      	strh	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a7c0:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
    lv_coord_t anim_length = hor ? indicw : indich;
 801a7c4:	42b5      	cmp	r5, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a7c6:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a7ca:	bfd8      	it	le
 801a7cc:	3301      	addle	r3, #1
 801a7ce:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a7d2:	bfc8      	it	gt
 801a7d4:	1c53      	addgt	r3, r2, #1
 801a7d6:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a7da:	bfd8      	it	le
 801a7dc:	1a5b      	suble	r3, r3, r1
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 801a7de:	6da7      	ldr	r7, [r4, #88]	; 0x58
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a7e0:	bfc8      	it	gt
 801a7e2:	1a1b      	subgt	r3, r3, r0
    if(hor) {
 801a7e4:	42b5      	cmp	r5, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a7e6:	b29b      	uxth	r3, r3
        indic_length_calc = lv_area_get_width;
 801a7e8:	bfd6      	itet	le
 801a7ea:	4abe      	ldrle	r2, [pc, #760]	; (801aae4 <draw_indic+0x470>)
        indic_length_calc = lv_area_get_height;
 801a7ec:	4abe      	ldrgt	r2, [pc, #760]	; (801aae8 <draw_indic+0x474>)
        axis2 = &bar->indic_area.x2;
 801a7ee:	f104 0938 	addle.w	r9, r4, #56	; 0x38
 801a7f2:	b21b      	sxth	r3, r3
        axis2 = &bar->indic_area.y2;
 801a7f4:	bfc8      	it	gt
 801a7f6:	f104 093a 	addgt.w	r9, r4, #58	; 0x3a
        indic_length_calc = lv_area_get_height;
 801a7fa:	9208      	str	r2, [sp, #32]
 801a7fc:	9301      	str	r3, [sp, #4]
        axis1 = &bar->indic_area.x1;
 801a7fe:	bfd4      	ite	le
 801a800:	4653      	movle	r3, sl
        axis1 = &bar->indic_area.y1;
 801a802:	f104 0336 	addgt.w	r3, r4, #54	; 0x36
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 801a806:	1c79      	adds	r1, r7, #1
 801a808:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a80a:	f000 815a 	beq.w	801aac2 <draw_indic+0x44e>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 801a80e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a810:	eba1 0c02 	sub.w	ip, r1, r2
 801a814:	9901      	ldr	r1, [sp, #4]
 801a816:	fb01 fc0c 	mul.w	ip, r1, ip
 801a81a:	9902      	ldr	r1, [sp, #8]
 801a81c:	fb9c fcf1 	sdiv	ip, ip, r1
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 801a820:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801a822:	1a88      	subs	r0, r1, r2
 801a824:	9901      	ldr	r1, [sp, #4]
 801a826:	4348      	muls	r0, r1
 801a828:	9902      	ldr	r1, [sp, #8]
 801a82a:	fb90 f0f1 	sdiv	r0, r0, r1
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 801a82e:	fa0f f18c 	sxth.w	r1, ip
 801a832:	b200      	sxth	r0, r0
 801a834:	1a40      	subs	r0, r0, r1
 801a836:	4347      	muls	r7, r0
 801a838:	bf48      	it	mi
 801a83a:	37ff      	addmi	r7, #255	; 0xff
        anim_start_value_x += anim_start_value_start_x;
 801a83c:	eb0c 2727 	add.w	r7, ip, r7, asr #8
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801a840:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801a844:	b23f      	sxth	r7, r7
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 801a846:	f1b8 3fff 	cmp.w	r8, #4294967295
 801a84a:	f000 8142 	beq.w	801aad2 <draw_indic+0x45e>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 801a84e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a850:	9901      	ldr	r1, [sp, #4]
 801a852:	1a80      	subs	r0, r0, r2
 801a854:	4348      	muls	r0, r1
 801a856:	9902      	ldr	r1, [sp, #8]
 801a858:	fb90 f0f1 	sdiv	r0, r0, r1
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 801a85c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a85e:	1a89      	subs	r1, r1, r2
 801a860:	9a01      	ldr	r2, [sp, #4]
 801a862:	4351      	muls	r1, r2
 801a864:	9a02      	ldr	r2, [sp, #8]
 801a866:	fb91 f2f2 	sdiv	r2, r1, r2
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801a86a:	b211      	sxth	r1, r2
 801a86c:	b202      	sxth	r2, r0
 801a86e:	1a8a      	subs	r2, r1, r2
                                                      bar->cur_value_anim.anim_state) /
 801a870:	4641      	mov	r1, r8
 801a872:	4351      	muls	r1, r2
 801a874:	460a      	mov	r2, r1
 801a876:	bf48      	it	mi
 801a878:	32ff      	addmi	r2, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 801a87a:	eb00 2822 	add.w	r8, r0, r2, asr #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a87e:	f241 426a 	movw	r2, #5226	; 0x146a
 801a882:	2100      	movs	r1, #0
 801a884:	4620      	mov	r0, r4
 801a886:	9309      	str	r3, [sp, #36]	; 0x24
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801a888:	fa0f f888 	sxth.w	r8, r8
 801a88c:	f7ec fe1c 	bl	80074c8 <lv_obj_get_style_prop>
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 801a890:	42b5      	cmp	r5, r6
 801a892:	fa1f f188 	uxth.w	r1, r8
 801a896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a898:	b2ba      	uxth	r2, r7
 801a89a:	f300 816f 	bgt.w	801ab7c <draw_indic+0x508>
 801a89e:	b2c0      	uxtb	r0, r0
 801a8a0:	2801      	cmp	r0, #1
 801a8a2:	d108      	bne.n	801a8b6 <draw_indic+0x242>
        anim_start_value_x = -anim_start_value_x;
 801a8a4:	4257      	negs	r7, r2
        anim_cur_value_x = -anim_cur_value_x;
 801a8a6:	f1c1 0800 	rsb	r8, r1, #0
        anim_start_value_x = -anim_start_value_x;
 801a8aa:	461a      	mov	r2, r3
 801a8ac:	464b      	mov	r3, r9
        anim_cur_value_x = -anim_cur_value_x;
 801a8ae:	fa0f f888 	sxth.w	r8, r8
        anim_start_value_x = -anim_start_value_x;
 801a8b2:	b23f      	sxth	r7, r7
 801a8b4:	4691      	mov	r9, r2
        *axis2 = *axis1 + anim_cur_value_x;
 801a8b6:	881a      	ldrh	r2, [r3, #0]
 801a8b8:	4490      	add	r8, r2
 801a8ba:	f8a9 8000 	strh.w	r8, [r9]
        *axis1 += anim_start_value_x;
 801a8be:	881a      	ldrh	r2, [r3, #0]
 801a8c0:	4417      	add	r7, r2
 801a8c2:	801f      	strh	r7, [r3, #0]
    if(sym) {
 801a8c4:	9a03      	ldr	r2, [sp, #12]
 801a8c6:	2a00      	cmp	r2, #0
 801a8c8:	f000 813c 	beq.w	801ab44 <draw_indic+0x4d0>
        shift = (-bar->min_value * anim_length) / range;
 801a8cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
        if(hor) {
 801a8ce:	42b5      	cmp	r5, r6
        shift = (-bar->min_value * anim_length) / range;
 801a8d0:	9a01      	ldr	r2, [sp, #4]
 801a8d2:	f1c0 0100 	rsb	r1, r0, #0
 801a8d6:	f9b9 7000 	ldrsh.w	r7, [r9]
 801a8da:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a8de:	fb02 f201 	mul.w	r2, r2, r1
 801a8e2:	4611      	mov	r1, r2
 801a8e4:	9a02      	ldr	r2, [sp, #8]
 801a8e6:	fb91 f1f2 	sdiv	r1, r1, r2
 801a8ea:	b289      	uxth	r1, r1
        if(hor) {
 801a8ec:	f300 80fe 	bgt.w	801aaec <draw_indic+0x478>
            zero = *axis1 + shift;
 801a8f0:	4401      	add	r1, r0
 801a8f2:	b209      	sxth	r1, r1
            if(*axis2 > zero)
 801a8f4:	428f      	cmp	r7, r1
                *axis1 = *axis2;
 801a8f6:	bfd6      	itet	le
 801a8f8:	801f      	strhle	r7, [r3, #0]
                *axis1 = zero;
 801a8fa:	8019      	strhgt	r1, [r3, #0]
                *axis2 = zero;
 801a8fc:	f8a9 1000 	strhle.w	r1, [r9]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 801a900:	2260      	movs	r2, #96	; 0x60
 801a902:	2100      	movs	r1, #0
 801a904:	4620      	mov	r0, r4
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801a906:	462f      	mov	r7, r5
 801a908:	f7ec fdde 	bl	80074c8 <lv_obj_get_style_prop>
 801a90c:	42b5      	cmp	r5, r6
    return (lv_coord_t)v.num;
 801a90e:	b200      	sxth	r0, r0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801a910:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 801a914:	bfa8      	it	ge
 801a916:	4637      	movge	r7, r6
 801a918:	107f      	asrs	r7, r7, #1
 801a91a:	4287      	cmp	r7, r0
 801a91c:	bfa8      	it	ge
 801a91e:	4607      	movge	r7, r0
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 801a920:	4640      	mov	r0, r8
 801a922:	f7f2 f961 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 801a926:	4642      	mov	r2, r8
 801a928:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801a92c:	4620      	mov	r0, r4
 801a92e:	f7e9 fec7 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801a932:	4659      	mov	r1, fp
 801a934:	a82c      	add	r0, sp, #176	; 0xb0
 801a936:	f7ea f9a7 	bl	8004c88 <lv_obj_draw_dsc_init>
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801a93a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a93e:	211a      	movs	r1, #26
 801a940:	aa2c      	add	r2, sp, #176	; 0xb0
 801a942:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801a944:	9339      	str	r3, [sp, #228]	; 0xe4
	obj_draw_dsc.draw_area = &bar->indic_area;
 801a946:	e9cd a82d 	strd	sl, r8, [sp, #180]	; 0xb4
	lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801a94a:	f7e7 fb6d 	bl	8002028 <lv_event_send>
    if((hor && lv_area_get_width(&bar->indic_area) > bg_radius * 2) ||
 801a94e:	42b5      	cmp	r5, r6
 801a950:	ea4f 0247 	mov.w	r2, r7, lsl #1
 801a954:	bfd7      	itett	le
 801a956:	8f23      	ldrhle	r3, [r4, #56]	; 0x38
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a958:	8f63      	ldrhgt	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a95a:	3301      	addle	r3, #1
 801a95c:	8ea1      	ldrhle	r1, [r4, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a95e:	bfc4      	itt	gt
 801a960:	3301      	addgt	r3, #1
 801a962:	8ee1      	ldrhgt	r1, [r4, #54]	; 0x36
 801a964:	1a5b      	subs	r3, r3, r1
       (!hor && lv_area_get_height(&bar->indic_area) > bg_radius * 2)) {
 801a966:	b21b      	sxth	r3, r3
 801a968:	4293      	cmp	r3, r2
 801a96a:	dd19      	ble.n	801a9a0 <draw_indic+0x32c>
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a96c:	2200      	movs	r2, #0
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 801a96e:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 801a972:	f89d 9092 	ldrb.w	r9, [sp, #146]	; 0x92
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a976:	4659      	mov	r1, fp
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 801a978:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a97c:	4650      	mov	r0, sl
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801a97e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 801a982:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a986:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a98a:	aa1f      	add	r2, sp, #124	; 0x7c
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 801a98c:	9301      	str	r3, [sp, #4]
        lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801a98e:	f7f2 f94d 	bl	800cc2c <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 801a992:	9b01      	ldr	r3, [sp, #4]
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 801a994:	f88d 9092 	strb.w	r9, [sp, #146]	; 0x92
        draw_rect_dsc.bg_opa = bg_opa;
 801a998:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
        draw_rect_dsc.border_opa = border_opa;
 801a99c:	f88d 809a 	strb.w	r8, [sp, #154]	; 0x9a
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a9a0:	9a06      	ldr	r2, [sp, #24]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a9a2:	a90d      	add	r1, sp, #52	; 0x34
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a9a4:	8aa3      	ldrh	r3, [r4, #20]
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a9a6:	a811      	add	r0, sp, #68	; 0x44
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a9a8:	4413      	add	r3, r2
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a9aa:	9a04      	ldr	r2, [sp, #16]
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 801a9ac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a9b0:	8b23      	ldrh	r3, [r4, #24]
 801a9b2:	1a9b      	subs	r3, r3, r2
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a9b4:	9a07      	ldr	r2, [sp, #28]
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 801a9b6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a9ba:	8ae3      	ldrh	r3, [r4, #22]
 801a9bc:	4413      	add	r3, r2
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a9be:	9a05      	ldr	r2, [sp, #20]
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 801a9c0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a9c4:	8b63      	ldrh	r3, [r4, #26]
 801a9c6:	1a9b      	subs	r3, r3, r2
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a9c8:	463a      	mov	r2, r7
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 801a9ca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	f7f1 fd6c 	bl	800c4ac <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801a9d4:	2100      	movs	r1, #0
 801a9d6:	a811      	add	r0, sp, #68	; 0x44
 801a9d8:	f7f1 fc02 	bl	800c1e0 <lv_draw_mask_add>
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a9dc:	2300      	movs	r3, #0
    mask_indic_max_area.x1 += bg_left;
 801a9de:	9906      	ldr	r1, [sp, #24]
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 801a9e0:	4607      	mov	r7, r0
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 801a9e2:	f89d 809a 	ldrb.w	r8, [sp, #154]	; 0x9a
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801a9e6:	42b5      	cmp	r5, r6
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 801a9e8:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 801a9ec:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
    mask_indic_max_area.x1 += bg_left;
 801a9f0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    dest->y1 = src->y1;
 801a9f4:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a9f8:	440b      	add	r3, r1
    mask_indic_max_area.y1 += bg_top;
 801a9fa:	9907      	ldr	r1, [sp, #28]
    dest->x2 = src->x2;
 801a9fc:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 801aa00:	440a      	add	r2, r1
    mask_indic_max_area.x2 -= bg_right;
 801aa02:	9904      	ldr	r1, [sp, #16]
    dest->y2 = src->y2;
 801aa04:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
    mask_indic_max_area.x1 += bg_left;
 801aa08:	b29b      	uxth	r3, r3
    mask_indic_max_area.x2 -= bg_right;
 801aa0a:	eba9 0901 	sub.w	r9, r9, r1
    mask_indic_max_area.y2 -= bg_bottom;
 801aa0e:	9905      	ldr	r1, [sp, #20]
    mask_indic_max_area.y1 += bg_top;
 801aa10:	b292      	uxth	r2, r2
    mask_indic_max_area.x1 += bg_left;
 801aa12:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    mask_indic_max_area.y2 -= bg_bottom;
 801aa16:	eba0 0001 	sub.w	r0, r0, r1
    mask_indic_max_area.x2 -= bg_right;
 801aa1a:	fa1f f989 	uxth.w	r9, r9
    mask_indic_max_area.y1 += bg_top;
 801aa1e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    mask_indic_max_area.y2 -= bg_bottom;
 801aa22:	b280      	uxth	r0, r0
    mask_indic_max_area.x2 -= bg_right;
 801aa24:	f8ad 9040 	strh.w	r9, [sp, #64]	; 0x40
    mask_indic_max_area.y2 -= bg_bottom;
 801aa28:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801aa2c:	dc74      	bgt.n	801ab18 <draw_indic+0x4a4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801aa2e:	3001      	adds	r0, #1
 801aa30:	1a80      	subs	r0, r0, r2
 801aa32:	b200      	sxth	r0, r0
 801aa34:	2803      	cmp	r0, #3
 801aa36:	dc0b      	bgt.n	801aa50 <draw_indic+0x3dc>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801aa38:	8ae3      	ldrh	r3, [r4, #22]
 801aa3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801aa3e:	eb03 0565 	add.w	r5, r3, r5, asr #1
 801aa42:	b2ad      	uxth	r5, r5
 801aa44:	1eab      	subs	r3, r5, #2
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801aa46:	3502      	adds	r5, #2
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 801aa48:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 801aa4c:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 801aa50:	2300      	movs	r3, #0
 801aa52:	f9bd 207c 	ldrsh.w	r2, [sp, #124]	; 0x7c
 801aa56:	4651      	mov	r1, sl
 801aa58:	a818      	add	r0, sp, #96	; 0x60
 801aa5a:	f7f1 fd27 	bl	800c4ac <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801aa5e:	2100      	movs	r1, #0
 801aa60:	a818      	add	r0, sp, #96	; 0x60
 801aa62:	f7f1 fbbd 	bl	800c1e0 <lv_draw_mask_add>
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_rect_dsc);
 801aa66:	aa1f      	add	r2, sp, #124	; 0x7c
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 801aa68:	4605      	mov	r5, r0
    lv_draw_rect(&mask_indic_max_area, clip_area, &draw_rect_dsc);
 801aa6a:	4659      	mov	r1, fp
 801aa6c:	a80f      	add	r0, sp, #60	; 0x3c
 801aa6e:	f7f2 f8dd 	bl	800cc2c <lv_draw_rect>
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801aa72:	2300      	movs	r3, #0
    lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801aa74:	aa1f      	add	r2, sp, #124	; 0x7c
 801aa76:	4659      	mov	r1, fp
 801aa78:	4650      	mov	r0, sl
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 801aa7a:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 801aa7e:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 801aa82:	f88d 30ae 	strb.w	r3, [sp, #174]	; 0xae
    draw_rect_dsc.border_opa = border_opa;
 801aa86:	f88d 809a 	strb.w	r8, [sp, #154]	; 0x9a
    lv_draw_rect(&bar->indic_area, clip_area, &draw_rect_dsc);
 801aa8a:	f7f2 f8cf 	bl	800cc2c <lv_draw_rect>
    lv_draw_mask_remove_id(mask_indic_id);
 801aa8e:	4628      	mov	r0, r5
 801aa90:	f7f1 fbde 	bl	800c250 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 801aa94:	4638      	mov	r0, r7
 801aa96:	f7f1 fbdb 	bl	800c250 <lv_draw_mask_remove_id>
 801aa9a:	e067      	b.n	801ab6c <draw_indic+0x4f8>
    bool sym = false;
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	e63a      	b.n	801a716 <draw_indic+0xa2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801aaa0:	3301      	adds	r3, #1
 801aaa2:	1bdf      	subs	r7, r3, r7
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 801aaa4:	b23f      	sxth	r7, r7
 801aaa6:	2f03      	cmp	r7, #3
 801aaa8:	f73f ae8a 	bgt.w	801a7c0 <draw_indic+0x14c>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801aaac:	8aa2      	ldrh	r2, [r4, #20]
 801aaae:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 801aab2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801aab6:	b29b      	uxth	r3, r3
 801aab8:	1e9a      	subs	r2, r3, #2
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801aaba:	3302      	adds	r3, #2
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801aabc:	86a2      	strh	r2, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 801aabe:	8723      	strh	r3, [r4, #56]	; 0x38
 801aac0:	e67e      	b.n	801a7c0 <draw_indic+0x14c>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 801aac2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 801aac4:	9901      	ldr	r1, [sp, #4]
 801aac6:	1abf      	subs	r7, r7, r2
 801aac8:	434f      	muls	r7, r1
 801aaca:	9902      	ldr	r1, [sp, #8]
 801aacc:	fb97 f7f1 	sdiv	r7, r7, r1
 801aad0:	e6b6      	b.n	801a840 <draw_indic+0x1cc>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 801aad2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aad4:	1a89      	subs	r1, r1, r2
 801aad6:	9a01      	ldr	r2, [sp, #4]
 801aad8:	fb02 f801 	mul.w	r8, r2, r1
 801aadc:	9a02      	ldr	r2, [sp, #8]
 801aade:	fb98 f8f2 	sdiv	r8, r8, r2
 801aae2:	e6cc      	b.n	801a87e <draw_indic+0x20a>
 801aae4:	0801a5c5 	.word	0x0801a5c5
 801aae8:	0801a5d1 	.word	0x0801a5d1
            zero = *axis2 - shift + 1;
 801aaec:	f1c1 0201 	rsb	r2, r1, #1
 801aaf0:	443a      	add	r2, r7
 801aaf2:	b212      	sxth	r2, r2
            if(*axis1 > zero)
 801aaf4:	4282      	cmp	r2, r0
                *axis2 = *axis1;
 801aaf6:	bfaa      	itet	ge
 801aaf8:	f8a9 0000 	strhge.w	r0, [r9]
                *axis2 = zero;
 801aafc:	f8a9 2000 	strhlt.w	r2, [r9]
                *axis1 = zero;
 801ab00:	801a      	strhge	r2, [r3, #0]
            if(*axis2 < *axis1) {
 801ab02:	f9b9 1000 	ldrsh.w	r1, [r9]
 801ab06:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab0a:	4291      	cmp	r1, r2
 801ab0c:	f6bf aef8 	bge.w	801a900 <draw_indic+0x28c>
                *axis1 = *axis2;
 801ab10:	8019      	strh	r1, [r3, #0]
                *axis2 = zero;
 801ab12:	f8a9 2000 	strh.w	r2, [r9]
 801ab16:	e6f3      	b.n	801a900 <draw_indic+0x28c>
 801ab18:	f109 0901 	add.w	r9, r9, #1
 801ab1c:	eba9 0903 	sub.w	r9, r9, r3
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 801ab20:	fa0f f989 	sxth.w	r9, r9
 801ab24:	f1b9 0f03 	cmp.w	r9, #3
 801ab28:	dc92      	bgt.n	801aa50 <draw_indic+0x3dc>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801ab2a:	8aa3      	ldrh	r3, [r4, #20]
 801ab2c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801ab30:	eb03 0666 	add.w	r6, r3, r6, asr #1
 801ab34:	b2b6      	uxth	r6, r6
 801ab36:	1eb3      	subs	r3, r6, #2
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801ab38:	3602      	adds	r6, #2
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 801ab3a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 801ab3e:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801ab42:	e785      	b.n	801aa50 <draw_indic+0x3dc>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 801ab44:	4650      	mov	r0, sl
 801ab46:	9b08      	ldr	r3, [sp, #32]
 801ab48:	4798      	blx	r3
 801ab4a:	2801      	cmp	r0, #1
 801ab4c:	f73f aed8 	bgt.w	801a900 <draw_indic+0x28c>
        lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801ab50:	4659      	mov	r1, fp
 801ab52:	a82c      	add	r0, sp, #176	; 0xb0
 801ab54:	f7ea f898 	bl	8004c88 <lv_obj_draw_dsc_init>
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801ab58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801ab5c:	aa2c      	add	r2, sp, #176	; 0xb0
 801ab5e:	211a      	movs	r1, #26
 801ab60:	4620      	mov	r0, r4
        obj_draw_dsc.part = LV_PART_INDICATOR;
 801ab62:	9339      	str	r3, [sp, #228]	; 0xe4
        obj_draw_dsc.draw_area = &bar->indic_area;
 801ab64:	f8cd a0b4 	str.w	sl, [sp, #180]	; 0xb4
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801ab68:	f7e7 fa5e 	bl	8002028 <lv_event_send>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801ab6c:	aa2c      	add	r2, sp, #176	; 0xb0
 801ab6e:	211b      	movs	r1, #27
 801ab70:	4620      	mov	r0, r4
 801ab72:	f7e7 fa59 	bl	8002028 <lv_event_send>
}
 801ab76:	b03f      	add	sp, #252	; 0xfc
 801ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *axis1 = *axis2 - anim_cur_value_x + 1;
 801ab7c:	f8b9 8000 	ldrh.w	r8, [r9]
 801ab80:	f108 0801 	add.w	r8, r8, #1
 801ab84:	eba8 0801 	sub.w	r8, r8, r1
 801ab88:	f8a3 8000 	strh.w	r8, [r3]
        *axis2 -= anim_start_value_x;
 801ab8c:	f8b9 7000 	ldrh.w	r7, [r9]
 801ab90:	1aba      	subs	r2, r7, r2
 801ab92:	f8a9 2000 	strh.w	r2, [r9]
 801ab96:	e695      	b.n	801a8c4 <draw_indic+0x250>

0801ab98 <lv_bar_event>:
{
 801ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801ab9c:	4831      	ldr	r0, [pc, #196]	; (801ac64 <lv_bar_event+0xcc>)
{
 801ab9e:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801aba0:	f7e7 f9cb 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801aba4:	2801      	cmp	r0, #1
 801aba6:	d148      	bne.n	801ac3a <lv_bar_event+0xa2>
    lv_event_code_t code = lv_event_get_code(e);
 801aba8:	4620      	mov	r0, r4
 801abaa:	f7e7 fa5f 	bl	800206c <lv_event_get_code>
 801abae:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801abb0:	4620      	mov	r0, r4
 801abb2:	f7e7 fa59 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801abb6:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801abb8:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801abba:	d140      	bne.n	801ac3e <lv_bar_event+0xa6>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801abbc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801abc0:	f7e9 fff1 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
 801abc4:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 801abc6:	4620      	mov	r0, r4
 801abc8:	f7e7 fa52 	bl	8002070 <lv_event_get_param>
        *s = LV_MAX(*s, indic_size);
 801abcc:	f9b0 3000 	ldrsh.w	r3, [r0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801abd0:	f241 0212 	movw	r2, #4114	; 0x1012
 801abd4:	2100      	movs	r1, #0
 801abd6:	42bb      	cmp	r3, r7
        lv_coord_t * s = lv_event_get_param(e);
 801abd8:	4606      	mov	r6, r0
        *s = LV_MAX(*s, indic_size);
 801abda:	bfb8      	it	lt
 801abdc:	463b      	movlt	r3, r7
 801abde:	8003      	strh	r3, [r0, #0]
 801abe0:	4628      	mov	r0, r5
 801abe2:	f7ec fc71 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801abe6:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801abea:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801abee:	2100      	movs	r1, #0
 801abf0:	4628      	mov	r0, r5
 801abf2:	f7ec fc69 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801abf6:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801abfa:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801abfc:	2100      	movs	r1, #0
 801abfe:	4628      	mov	r0, r5
 801ac00:	f7ec fc62 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac04:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801ac08:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ac0a:	2100      	movs	r1, #0
 801ac0c:	4628      	mov	r0, r5
 801ac0e:	f7ec fc5b 	bl	80074c8 <lv_obj_get_style_prop>
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 801ac12:	4544      	cmp	r4, r8
 801ac14:	4623      	mov	r3, r4
    return (lv_coord_t)v.num;
 801ac16:	b202      	sxth	r2, r0
 801ac18:	bfa8      	it	ge
 801ac1a:	4643      	movge	r3, r8
 801ac1c:	42bb      	cmp	r3, r7
 801ac1e:	bfa8      	it	ge
 801ac20:	463b      	movge	r3, r7
 801ac22:	4293      	cmp	r3, r2
 801ac24:	bfa8      	it	ge
 801ac26:	4613      	movge	r3, r2
        if(pad < 0) {
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	da06      	bge.n	801ac3a <lv_bar_event+0xa2>
            *s = LV_MAX(*s, -pad);
 801ac2c:	425b      	negs	r3, r3
 801ac2e:	f9b6 0000 	ldrsh.w	r0, [r6]
 801ac32:	4283      	cmp	r3, r0
 801ac34:	bfb8      	it	lt
 801ac36:	4603      	movlt	r3, r0
 801ac38:	8033      	strh	r3, [r6, #0]
}
 801ac3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801ac3e:	2e01      	cmp	r6, #1
 801ac40:	d001      	beq.n	801ac46 <lv_bar_event+0xae>
 801ac42:	2e08      	cmp	r6, #8
 801ac44:	d106      	bne.n	801ac54 <lv_bar_event+0xbc>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801ac46:	f105 0134 	add.w	r1, r5, #52	; 0x34
 801ac4a:	4628      	mov	r0, r5
}
 801ac4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_invalidate_area(obj, &bar->indic_area);
 801ac50:	f7ea baf8 	b.w	8005244 <lv_obj_invalidate_area>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801ac54:	2e15      	cmp	r6, #21
 801ac56:	d1f0      	bne.n	801ac3a <lv_bar_event+0xa2>
        draw_indic(e);
 801ac58:	4620      	mov	r0, r4
}
 801ac5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        draw_indic(e);
 801ac5e:	f7ff bd09 	b.w	801a674 <draw_indic>
 801ac62:	bf00      	nop
 801ac64:	08029d38 	.word	0x08029d38

0801ac68 <lv_bar_set_value>:
{
 801ac68:	b470      	push	{r4, r5, r6}
    if(bar->cur_value == value) return;
 801ac6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ac6c:	428d      	cmp	r5, r1
 801ac6e:	d020      	beq.n	801acb2 <lv_bar_set_value+0x4a>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801ac70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller then the left value*/
 801ac72:	6b06      	ldr	r6, [r0, #48]	; 0x30
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801ac74:	4299      	cmp	r1, r3
 801ac76:	bfa8      	it	ge
 801ac78:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller then the left value*/
 801ac7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ac7c:	42b3      	cmp	r3, r6
 801ac7e:	bfb8      	it	lt
 801ac80:	4633      	movlt	r3, r6
 801ac82:	4299      	cmp	r1, r3
 801ac84:	bfb8      	it	lt
 801ac86:	4619      	movlt	r1, r3
    if(bar->cur_value == value) return;
 801ac88:	428d      	cmp	r5, r1
 801ac8a:	d012      	beq.n	801acb2 <lv_bar_set_value+0x4a>
    if(en == LV_ANIM_OFF) {
 801ac8c:	b91a      	cbnz	r2, 801ac96 <lv_bar_set_value+0x2e>
        *value_ptr = new_value;
 801ac8e:	6241      	str	r1, [r0, #36]	; 0x24
}
 801ac90:	bc70      	pop	{r4, r5, r6}
        lv_obj_invalidate((lv_obj_t*)obj);
 801ac92:	f7ea baf1 	b.w	8005278 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801ac96:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801ac98:	f100 0224 	add.w	r2, r0, #36	; 0x24
 801ac9c:	3301      	adds	r3, #1
            anim_info->anim_start = anim_info->anim_end;
 801ac9e:	bf16      	itet	ne
 801aca0:	6c43      	ldrne	r3, [r0, #68]	; 0x44
            anim_info->anim_start = *value_ptr;
 801aca2:	6405      	streq	r5, [r0, #64]	; 0x40
            anim_info->anim_start = anim_info->anim_end;
 801aca4:	6403      	strne	r3, [r0, #64]	; 0x40
            anim_info->anim_end   = new_value;
 801aca6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 801acaa:	6441      	str	r1, [r0, #68]	; 0x44
}
 801acac:	bc70      	pop	{r4, r5, r6}
 801acae:	f7ff bcbb 	b.w	801a628 <lv_bar_set_value_with_anim.part.0>
 801acb2:	bc70      	pop	{r4, r5, r6}
 801acb4:	4770      	bx	lr

0801acb6 <lv_bar_constructor>:
{
 801acb6:	b538      	push	{r3, r4, r5, lr}
    bar->max_value = 100;
 801acb8:	2500      	movs	r5, #0
 801acba:	2364      	movs	r3, #100	; 0x64
{
 801acbc:	460c      	mov	r4, r1
    bar->start_value = 0;
 801acbe:	630d      	str	r5, [r1, #48]	; 0x30
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801acc0:	4620      	mov	r0, r4
    bar->cur_value = 0;
 801acc2:	624d      	str	r5, [r1, #36]	; 0x24

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
    bar_anim->anim_start = 0;
    bar_anim->anim_end = 0;
 801acc4:	644d      	str	r5, [r1, #68]	; 0x44
    bar->max_value = 100;
 801acc6:	e9c1 530a 	strd	r5, r3, [r1, #40]	; 0x28
    bar->mode         = LV_BAR_MODE_NORMAL;
 801acca:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 801acce:	f365 0301 	bfi	r3, r5, #0, #2
 801acd2:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801acd6:	f04f 33ff 	mov.w	r3, #4294967295
    bar_anim->anim_start = 0;
 801acda:	e9c1 150f 	strd	r1, r5, [r1, #60]	; 0x3c
    bar_anim->bar = obj;
 801acde:	e9c1 3112 	strd	r3, r1, [r1, #72]	; 0x48
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 801ace2:	658b      	str	r3, [r1, #88]	; 0x58
    bar_anim->anim_end = 0;
 801ace4:	e9c1 5514 	strd	r5, r5, [r1, #80]	; 0x50
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801ace8:	2108      	movs	r1, #8
 801acea:	f7e9 f8e0 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801acee:	4620      	mov	r0, r4
 801acf0:	2110      	movs	r1, #16
 801acf2:	f7e9 f8dc 	bl	8003eae <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 801acf6:	462a      	mov	r2, r5
 801acf8:	4629      	mov	r1, r5
 801acfa:	4620      	mov	r0, r4
}
 801acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 801ad00:	f7ff bfb2 	b.w	801ac68 <lv_bar_set_value>

0801ad04 <lv_bar_set_start_value>:
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 801ad04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ad06:	4299      	cmp	r1, r3
 801ad08:	bfa8      	it	ge
 801ad0a:	4619      	movge	r1, r3
 801ad0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ad0e:	4299      	cmp	r1, r3
 801ad10:	bfb8      	it	lt
 801ad12:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater then the right value*/
 801ad14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ad16:	4299      	cmp	r1, r3
 801ad18:	bfa8      	it	ge
 801ad1a:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 801ad1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ad1e:	428b      	cmp	r3, r1
{
 801ad20:	b410      	push	{r4}
    if(bar->start_value == value) return;
 801ad22:	d013      	beq.n	801ad4c <lv_bar_set_start_value+0x48>
    if(en == LV_ANIM_OFF) {
 801ad24:	b922      	cbnz	r2, 801ad30 <lv_bar_set_start_value+0x2c>
}
 801ad26:	f85d 4b04 	ldr.w	r4, [sp], #4
        *value_ptr = new_value;
 801ad2a:	6301      	str	r1, [r0, #48]	; 0x30
        lv_obj_invalidate((lv_obj_t*)obj);
 801ad2c:	f7ea baa4 	b.w	8005278 <lv_obj_invalidate>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801ad30:	6d82      	ldr	r2, [r0, #88]	; 0x58
}
 801ad32:	f85d 4b04 	ldr.w	r4, [sp], #4
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 801ad36:	3201      	adds	r2, #1
            anim_info->anim_start = anim_info->anim_end;
 801ad38:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801ad3c:	bf18      	it	ne
 801ad3e:	6d43      	ldrne	r3, [r0, #84]	; 0x54
            anim_info->anim_end   = new_value;
 801ad40:	e9c0 3114 	strd	r3, r1, [r0, #80]	; 0x50
 801ad44:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 801ad48:	f7ff bc6e 	b.w	801a628 <lv_bar_set_value_with_anim.part.0>
}
 801ad4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad50:	4770      	bx	lr

0801ad52 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 801ad52:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801ad54:	3301      	adds	r3, #1
 801ad56:	bf14      	ite	ne
 801ad58:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 801ad5a:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 801ad5c:	4770      	bx	lr

0801ad5e <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 801ad5e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 801ad62:	f003 0303 	and.w	r3, r3, #3
 801ad66:	2b02      	cmp	r3, #2
 801ad68:	d001      	beq.n	801ad6e <lv_bar_get_start_value+0x10>
 801ad6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ad6c:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 801ad6e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 801ad70:	3301      	adds	r3, #1
 801ad72:	bf14      	ite	ne
 801ad74:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 801ad76:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 801ad78:	4770      	bx	lr

0801ad7a <lv_bar_get_mode>:
    return bar->mode;
 801ad7a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 801ad7e:	f000 0003 	and.w	r0, r0, #3
 801ad82:	4770      	bx	lr

0801ad84 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801ad84:	b507      	push	{r0, r1, r2, lr}
 801ad86:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801ad88:	2110      	movs	r1, #16
 801ad8a:	9001      	str	r0, [sp, #4]
 801ad8c:	f7e9 f88f 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801ad90:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ad94:	9801      	ldr	r0, [sp, #4]

    LV_TRACE_OBJ_CREATE("finished");
}
 801ad96:	b003      	add	sp, #12
 801ad98:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801ad9c:	f7e9 b864 	b.w	8003e68 <lv_obj_add_flag>

0801ada0 <lv_btn_create>:
{
 801ada0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801ada2:	4804      	ldr	r0, [pc, #16]	; (801adb4 <lv_btn_create+0x14>)
{
 801ada4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801ada6:	f7e9 fbbd 	bl	8004524 <lv_obj_class_create_obj>
 801adaa:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801adac:	f7e9 fc47 	bl	800463e <lv_obj_class_init_obj>
}
 801adb0:	4620      	mov	r0, r4
 801adb2:	bd10      	pop	{r4, pc}
 801adb4:	08029d54 	.word	0x08029d54

0801adb8 <lv_btnmatrix_destructor>:

    LV_TRACE_OBJ_CREATE("finshed");
}

static void lv_btnmatrix_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801adb8:	b510      	push	{r4, lr}
 801adba:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");
    LV_UNUSED(class_p);
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    lv_mem_free(btnm->button_areas);
 801adbc:	6a88      	ldr	r0, [r1, #40]	; 0x28
 801adbe:	f7fc fda9 	bl	8017914 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 801adc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801adc4:	f7fc fda6 	bl	8017914 <lv_mem_free>
    btnm->button_areas = NULL;
 801adc8:	2300      	movs	r3, #0
    btnm->ctrl_bits = NULL;
 801adca:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    LV_TRACE_OBJ_CREATE("finshed");
}
 801adce:	bd10      	pop	{r4, pc}

0801add0 <lv_obj_get_style_pad_column.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801add0:	f241 0215 	movw	r2, #4117	; 0x1015
 801add4:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
 801add6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801add8:	f7ec fb76 	bl	80074c8 <lv_obj_get_style_prop>
}
 801addc:	b200      	sxth	r0, r0
 801adde:	bd08      	pop	{r3, pc}

0801ade0 <draw_main>:
    }

}

static void draw_main(lv_event_t * e)
{
 801ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade4:	b0cf      	sub	sp, #316	; 0x13c
 801ade6:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ade8:	f7e7 f93e 	bl	8002068 <lv_event_get_target>
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;
    if(btnm->btn_cnt == 0) return;
 801adec:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    lv_obj_t * obj = lv_event_get_target(e);
 801adee:	4604      	mov	r4, r0
    if(btnm->btn_cnt == 0) return;
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	f000 81a7 	beq.w	801b144 <draw_main+0x364>

    const lv_area_t * clip_area = lv_event_get_param(e);
 801adf6:	4628      	mov	r0, r5
    lv_obj_draw_dsc_init(&dsc, clip_area);
    dsc.part = LV_PART_ITEMS;
    dsc.rect_dsc = &draw_rect_dsc_act;
    dsc.label_dsc = &draw_label_dsc_act;

    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801adf8:	f04f 0800 	mov.w	r8, #0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801adfc:	f7e7 f938 	bl	8002070 <lv_event_get_param>
    obj->skip_trans = 1;
 801ae00:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 801ae04:	a90e      	add	r1, sp, #56	; 0x38
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ae06:	4607      	mov	r7, r0
    obj->skip_trans = 1;
 801ae08:	f043 0304 	orr.w	r3, r3, #4
    lv_obj_get_coords(obj, &area_obj);
 801ae0c:	4620      	mov	r0, r4
    uint16_t txt_i = 0;
 801ae0e:	4645      	mov	r5, r8
        /*Search the next valid text in the map*/
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801ae10:	f8df a33c 	ldr.w	sl, [pc, #828]	; 801b150 <draw_main+0x370>
    obj->skip_trans = 1;
 801ae14:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 801ae18:	f7ea f889 	bl	8004f2e <lv_obj_get_coords>
    obj->state = LV_STATE_DEFAULT;
 801ae1c:	6a22      	ldr	r2, [r4, #32]
 801ae1e:	4bcb      	ldr	r3, [pc, #812]	; (801b14c <draw_main+0x36c>)
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 801ae20:	a82f      	add	r0, sp, #188	; 0xbc
    lv_state_t state_ori = obj->state;
 801ae22:	8c26      	ldrh	r6, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801ae24:	4013      	ands	r3, r2
 801ae26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ae2a:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 801ae2c:	f7f1 fedc 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 801ae30:	a81a      	add	r0, sp, #104	; 0x68
 801ae32:	f7ef fc25 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 801ae36:	aa2f      	add	r2, sp, #188	; 0xbc
 801ae38:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	f7e9 fc3f 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 801ae42:	aa1a      	add	r2, sp, #104	; 0x68
 801ae44:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f7e9 fd75 	bl	8004938 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 801ae4e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ae52:	f241 0210 	movw	r2, #4112	; 0x1010
 801ae56:	2100      	movs	r1, #0
 801ae58:	f36f 0382 	bfc	r3, #2, #1
 801ae5c:	4620      	mov	r0, r4
    obj->state = state_ori;
 801ae5e:	8426      	strh	r6, [r4, #32]
    obj->skip_trans = 0;
 801ae60:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801ae64:	f7ec fb30 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ae68:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801ae6c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ae6e:	2100      	movs	r1, #0
 801ae70:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801ae72:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ae74:	f7ec fb28 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ae78:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ae7a:	f241 0212 	movw	r2, #4114	; 0x1012
 801ae7e:	2100      	movs	r1, #0
 801ae80:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801ae82:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ae84:	f7ec fb20 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ae88:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ae8a:	f241 0213 	movw	r2, #4115	; 0x1013
 801ae8e:	2100      	movs	r1, #0
 801ae90:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801ae92:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ae94:	f7ec fb18 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ae98:	b203      	sxth	r3, r0
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801ae9a:	4639      	mov	r1, r7
 801ae9c:	a83c      	add	r0, sp, #240	; 0xf0
 801ae9e:	9306      	str	r3, [sp, #24]
 801aea0:	f7e9 fef2 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 801aea4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801aea8:	9349      	str	r3, [sp, #292]	; 0x124
    dsc.rect_dsc = &draw_rect_dsc_act;
 801aeaa:	ab22      	add	r3, sp, #136	; 0x88
 801aeac:	933e      	str	r3, [sp, #248]	; 0xf8
    dsc.label_dsc = &draw_label_dsc_act;
 801aeae:	ab12      	add	r3, sp, #72	; 0x48
 801aeb0:	933f      	str	r3, [sp, #252]	; 0xfc
        /*Get the state of the button*/
        lv_state_t btn_state = LV_STATE_DEFAULT;
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
        if(btn_i == btnm->btn_id_sel) {
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 801aeb2:	f006 0320 	and.w	r3, r6, #32
 801aeb6:	930a      	str	r3, [sp, #40]	; 0x28
 801aeb8:	fa1f f988 	uxth.w	r9, r8
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801aebc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801aebe:	454b      	cmp	r3, r9
 801aec0:	f240 813a 	bls.w	801b138 <draw_main+0x358>
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 801aec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aec6:	00aa      	lsls	r2, r5, #2
 801aec8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aecc:	3501      	adds	r5, #1
 801aece:	4651      	mov	r1, sl
 801aed0:	930b      	str	r3, [sp, #44]	; 0x2c
 801aed2:	9205      	str	r2, [sp, #20]
 801aed4:	b2ad      	uxth	r5, r5
 801aed6:	f7e5 f99b 	bl	8000210 <strcmp>
 801aeda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aedc:	2800      	cmp	r0, #0
 801aede:	d0f2      	beq.n	801aec6 <draw_main+0xe6>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801aee0:	fa1f fb88 	uxth.w	fp, r8
 801aee4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return w != 0 ? w : 1;
}

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801aee6:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 801aeea:	070b      	lsls	r3, r1, #28
 801aeec:	f100 8100 	bmi.w	801b0f0 <draw_main+0x310>
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801aef0:	0688      	lsls	r0, r1, #26
        lv_state_t btn_state = LV_STATE_DEFAULT;
 801aef2:	f3c1 12c0 	ubfx	r2, r1, #7, #1
        if(btn_i == btnm->btn_id_sel) {
 801aef6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 801aef8:	bf48      	it	mi
 801aefa:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
        if(btn_i == btnm->btn_id_sel) {
 801aefe:	4549      	cmp	r1, r9
 801af00:	d10f      	bne.n	801af22 <draw_main+0x142>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 801af02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af04:	b10b      	cbz	r3, 801af0a <draw_main+0x12a>
 801af06:	f042 0220 	orr.w	r2, r2, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 801af0a:	07b1      	lsls	r1, r6, #30
 801af0c:	bf48      	it	mi
 801af0e:	f042 0202 	orrmi.w	r2, r2, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 801af12:	0773      	lsls	r3, r6, #29
 801af14:	bf48      	it	mi
 801af16:	f042 0204 	orrmi.w	r2, r2, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 801af1a:	0730      	lsls	r0, r6, #28
 801af1c:	bf48      	it	mi
 801af1e:	f042 0208 	orrmi.w	r2, r2, #8
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 801af22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801af24:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
        btn_area.x1 += area_obj.x1;
 801af28:	f831 103b 	ldrh.w	r1, [r1, fp, lsl #3]
    dest->y1 = src->y1;
 801af2c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
    dest->x2 = src->x2;
 801af30:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
    dest->y2 = src->y2;
 801af34:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801af38:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801af3c:	4401      	add	r1, r0
        btn_area.x2 += area_obj.x1;
 801af3e:	4448      	add	r0, r9
        btn_area.x1 += area_obj.x1;
 801af40:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
        btn_area.y1 += area_obj.y1;
 801af44:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
        btn_area.x2 += area_obj.x1;
 801af48:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
        btn_area.y1 += area_obj.y1;
 801af4c:	448c      	add	ip, r1
        btn_area.y2 += area_obj.y1;
 801af4e:	4471      	add	r1, lr
        btn_area.y1 += area_obj.y1;
 801af50:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
        btn_area.y2 += area_obj.y1;
 801af54:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
        if(btn_state == LV_STATE_DEFAULT) {
 801af58:	2a00      	cmp	r2, #0
 801af5a:	f040 80cc 	bne.w	801b0f6 <draw_main+0x316>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801af5e:	2234      	movs	r2, #52	; 0x34
 801af60:	a92f      	add	r1, sp, #188	; 0xbc
 801af62:	a822      	add	r0, sp, #136	; 0x88
 801af64:	f7fc fd10 	bl	8017988 <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801af68:	2220      	movs	r2, #32
 801af6a:	a91a      	add	r1, sp, #104	; 0x68
 801af6c:	a812      	add	r0, sp, #72	; 0x48
 801af6e:	f7fc fd0b 	bl	8017988 <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 801af72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        dsc.draw_area = &btn_area;
 801af74:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 801af78:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801af7c:	4620      	mov	r0, r4
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
 801af7e:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
        dsc.draw_area = &btn_area;
 801af82:	f8cd 90f4 	str.w	r9, [sp, #244]	; 0xf4
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801af86:	04c9      	lsls	r1, r1, #19
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801af88:	f04f 011a 	mov.w	r1, #26
        dsc.id = btn_i;
 801af8c:	f8cd b128 	str.w	fp, [sp, #296]	; 0x128
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 801af90:	bf4c      	ite	mi
 801af92:	f042 0201 	orrmi.w	r2, r2, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 801af96:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
 801af9a:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
        lv_event_send(obj,LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801af9e:	aa3c      	add	r2, sp, #240	; 0xf0
 801afa0:	f7e7 f842 	bl	8002028 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 801afa4:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801afa8:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801afac:	06d2      	lsls	r2, r2, #27
 801afae:	d54a      	bpl.n	801b046 <draw_main+0x266>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801afb0:	220f      	movs	r2, #15
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801afb2:	9907      	ldr	r1, [sp, #28]
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801afb4:	f362 0345 	bfi	r3, r2, #1, #5
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801afb8:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 801afbc:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801afc0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801afc4:	440b      	add	r3, r1
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801afc6:	9906      	ldr	r1, [sp, #24]
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801afc8:	429a      	cmp	r2, r3
 801afca:	bf02      	ittt	eq
 801afcc:	f89d 30a7 	ldrbeq.w	r3, [sp, #167]	; 0xa7
 801afd0:	220b      	moveq	r2, #11
 801afd2:	f362 0345 	bfieq	r3, r2, #1, #5
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801afd6:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 801afda:	bf08      	it	eq
 801afdc:	f88d 30a7 	strbeq.w	r3, [sp, #167]	; 0xa7
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 801afe0:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801afe4:	1a5b      	subs	r3, r3, r1
 801afe6:	429a      	cmp	r2, r3
 801afe8:	d109      	bne.n	801affe <draw_main+0x21e>
 801afea:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801afee:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801aff2:	f002 0217 	and.w	r2, r2, #23
 801aff6:	f362 0345 	bfi	r3, r2, #1, #5
 801affa:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 801affe:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801b002:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b004:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801b008:	440b      	add	r3, r1
 801b00a:	429a      	cmp	r2, r3
 801b00c:	d109      	bne.n	801b022 <draw_main+0x242>
 801b00e:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801b012:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801b016:	f002 021d 	and.w	r2, r2, #29
 801b01a:	f362 0345 	bfi	r3, r2, #1, #5
 801b01e:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 801b022:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801b026:	9908      	ldr	r1, [sp, #32]
 801b028:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801b02c:	1a5b      	subs	r3, r3, r1
 801b02e:	429a      	cmp	r2, r3
 801b030:	d109      	bne.n	801b046 <draw_main+0x266>
 801b032:	f89d 30a7 	ldrb.w	r3, [sp, #167]	; 0xa7
 801b036:	f3c3 0244 	ubfx	r2, r3, #1, #5
 801b03a:	f002 021e 	and.w	r2, r2, #30
 801b03e:	f362 0345 	bfi	r3, r2, #1, #5
 801b042:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
        lv_draw_rect(&btn_area, clip_area, &draw_rect_dsc_act);
 801b046:	aa22      	add	r2, sp, #136	; 0x88
 801b048:	4639      	mov	r1, r7
 801b04a:	4648      	mov	r0, r9
 801b04c:	f7f1 fdee 	bl	800cc2c <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 801b050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b052:	9a05      	ldr	r2, [sp, #20]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801b054:	a80d      	add	r0, sp, #52	; 0x34
        const char * txt = btnm->map_p[txt_i];
 801b056:	5899      	ldr	r1, [r3, r2]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 801b058:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b05c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b060:	9302      	str	r3, [sp, #8]
 801b062:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b066:	9105      	str	r1, [sp, #20]
 801b068:	3301      	adds	r3, #1
 801b06a:	1a9b      	subs	r3, r3, r2
 801b06c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b06e:	b21b      	sxth	r3, r3
 801b070:	9301      	str	r3, [sp, #4]
 801b072:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801b076:	9300      	str	r3, [sp, #0]
 801b078:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801b07c:	f7fe fb5b 	bl	8019736 <lv_txt_get_size>
 801b080:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b084:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801b088:	3301      	adds	r3, #1
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 801b08a:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b08e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b092:	1a1b      	subs	r3, r3, r0
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801b094:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801b098:	9905      	ldr	r1, [sp, #20]
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 801b09a:	b21b      	sxth	r3, r3
 801b09c:	eba3 030e 	sub.w	r3, r3, lr
 801b0a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801b0a4:	eb00 0363 	add.w	r3, r0, r3, asr #1
 801b0a8:	b298      	uxth	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b0aa:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801b0ae:	3301      	adds	r3, #1
 801b0b0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        btn_area.x2 = btn_area.x1 + txt_size.x;
 801b0b4:	4470      	add	r0, lr
 801b0b6:	1a9b      	subs	r3, r3, r2
 801b0b8:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801b0bc:	4648      	mov	r0, r9
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801b0be:	b21b      	sxth	r3, r3
 801b0c0:	eba3 030c 	sub.w	r3, r3, ip
 801b0c4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801b0c8:	eb02 0363 	add.w	r3, r2, r3, asr #1
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801b0cc:	aa12      	add	r2, sp, #72	; 0x48
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        btn_area.y2 = btn_area.y1 + txt_size.y;
 801b0d4:	4463      	add	r3, ip
 801b0d6:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        lv_draw_label(&btn_area, clip_area, &draw_label_dsc_act, txt, NULL);
 801b0da:	2300      	movs	r3, #0
 801b0dc:	9300      	str	r3, [sp, #0]
 801b0de:	460b      	mov	r3, r1
 801b0e0:	4639      	mov	r1, r7
 801b0e2:	f7ef fca5 	bl	800aa30 <lv_draw_label>
        lv_event_send(obj,LV_EVENT_DRAW_PART_END, &dsc);
 801b0e6:	aa3c      	add	r2, sp, #240	; 0xf0
 801b0e8:	211b      	movs	r1, #27
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	f7e6 ff9c 	bl	8002028 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 801b0f0:	f108 0801 	add.w	r8, r8, #1
 801b0f4:	e6e0      	b.n	801aeb8 <draw_main+0xd8>
            obj->state = btn_state;
 801b0f6:	8422      	strh	r2, [r4, #32]
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801b0f8:	a822      	add	r0, sp, #136	; 0x88
            obj->skip_trans = 1;
 801b0fa:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801b0fe:	f042 0204 	orr.w	r2, r2, #4
 801b102:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 801b106:	f7f1 fd6f 	bl	800cbe8 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 801b10a:	a812      	add	r0, sp, #72	; 0x48
 801b10c:	f7ef fab8 	bl	800a680 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 801b110:	aa22      	add	r2, sp, #136	; 0x88
 801b112:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b116:	4620      	mov	r0, r4
 801b118:	f7e9 fad2 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 801b11c:	aa12      	add	r2, sp, #72	; 0x48
 801b11e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b122:	4620      	mov	r0, r4
 801b124:	f7e9 fc08 	bl	8004938 <lv_obj_init_draw_label_dsc>
            obj->skip_trans = 0;
 801b128:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
            obj->state = state_ori;
 801b12c:	8426      	strh	r6, [r4, #32]
            obj->skip_trans = 0;
 801b12e:	f36f 0282 	bfc	r2, #2, #1
 801b132:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 801b136:	e71c      	b.n	801af72 <draw_main+0x192>
    obj->skip_trans = 0;
 801b138:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801b13c:	f36f 0382 	bfc	r3, #2, #1
 801b140:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801b144:	b04f      	add	sp, #316	; 0x13c
 801b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b14a:	bf00      	nop
 801b14c:	fffb0000 	.word	0xfffb0000
 801b150:	08029f9a 	.word	0x08029f9a

0801b154 <invalidate_button_area>:

    return i;
}

static void invalidate_button_area(const lv_obj_t * obj, uint16_t btn_idx)
{
 801b154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 801b156:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 801b15a:	4604      	mov	r4, r0
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 801b15c:	4299      	cmp	r1, r3
 801b15e:	d041      	beq.n	801b1e4 <invalidate_button_area+0x90>

    lv_area_t btn_area;
    lv_area_t obj_area;

    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 801b160:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801b162:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 801b166:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
    lv_obj_get_coords(obj, &obj_area);
 801b16a:	a902      	add	r1, sp, #8
 801b16c:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 801b170:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b174:	f8ad 2002 	strh.w	r2, [sp, #2]
    dest->x2 = src->x2;
 801b178:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dest->y2 = src->y2;
 801b17c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    dest->x2 = src->x2;
 801b180:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 801b184:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b188:	f7e9 fed1 	bl	8004f2e <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b18c:	f241 0214 	movw	r2, #4116	; 0x1014
 801b190:	2100      	movs	r1, #0
 801b192:	4620      	mov	r0, r4
 801b194:	f7ec f998 	bl	80074c8 <lv_obj_get_style_prop>
 801b198:	4605      	mov	r5, r0

    /*The buttons might have outline and shadow so make the invalidation larger with the gaps between the buttons.
     *It assumes that the outline or shadow is smaller then the gaps*/
    lv_coord_t row_gap = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b19a:	4620      	mov	r0, r4
 801b19c:	f7ff fe18 	bl	801add0 <lv_obj_get_style_pad_column.constprop.0>

    /*Convert relative coordinates to absolute*/
    btn_area.x1 += obj_area.x1 - row_gap;
 801b1a0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b1a4:	f8bd 3000 	ldrh.w	r3, [sp]
 801b1a8:	b2a9      	uxth	r1, r5
    btn_area.y1 += obj_area.y1 - col_gap;
 801b1aa:	f8bd 600a 	ldrh.w	r6, [sp, #10]
    btn_area.x1 += obj_area.x1 - row_gap;
 801b1ae:	4413      	add	r3, r2
    btn_area.y1 += obj_area.y1 - col_gap;
 801b1b0:	f8bd 5002 	ldrh.w	r5, [sp, #2]
    btn_area.x2 += obj_area.x1 + row_gap;
 801b1b4:	440a      	add	r2, r1
    btn_area.x1 += obj_area.x1 - row_gap;
 801b1b6:	1a5b      	subs	r3, r3, r1
    btn_area.y1 += obj_area.y1 - col_gap;
 801b1b8:	4435      	add	r5, r6
    btn_area.x2 += obj_area.x1 + row_gap;
 801b1ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    btn_area.x1 += obj_area.x1 - row_gap;
 801b1be:	f8ad 3000 	strh.w	r3, [sp]
    btn_area.y1 += obj_area.y1 - col_gap;
 801b1c2:	b283      	uxth	r3, r0
    btn_area.y2 += obj_area.y1 + col_gap;
 801b1c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    btn_area.x2 += obj_area.x1 + row_gap;
 801b1c8:	440a      	add	r2, r1
    btn_area.y1 += obj_area.y1 - col_gap;
 801b1ca:	1aed      	subs	r5, r5, r3

    lv_obj_invalidate_area(obj, &btn_area);
 801b1cc:	4669      	mov	r1, sp
    btn_area.y2 += obj_area.y1 + col_gap;
 801b1ce:	4406      	add	r6, r0
    lv_obj_invalidate_area(obj, &btn_area);
 801b1d0:	4620      	mov	r0, r4
    btn_area.y1 += obj_area.y1 - col_gap;
 801b1d2:	f8ad 5002 	strh.w	r5, [sp, #2]
    btn_area.y2 += obj_area.y1 + col_gap;
 801b1d6:	4433      	add	r3, r6
    btn_area.x2 += obj_area.x1 + row_gap;
 801b1d8:	f8ad 2004 	strh.w	r2, [sp, #4]
    btn_area.y2 += obj_area.y1 + col_gap;
 801b1dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &btn_area);
 801b1e0:	f7ea f830 	bl	8005244 <lv_obj_invalidate_area>
}
 801b1e4:	b004      	add	sp, #16
 801b1e6:	bd70      	pop	{r4, r5, r6, pc}

0801b1e8 <get_button_from_point>:
{
 801b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ec:	ed2d 8b02 	vpush	{d8}
 801b1f0:	b08b      	sub	sp, #44	; 0x2c
 801b1f2:	4605      	mov	r5, r0
 801b1f4:	ee08 1a10 	vmov	s16, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b1f8:	f04f 0b00 	mov.w	fp, #0
    lv_obj_get_coords(obj, &obj_cords);
 801b1fc:	a906      	add	r1, sp, #24
 801b1fe:	f7e9 fe96 	bl	8004f2e <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(obj);
 801b202:	4628      	mov	r0, r5
 801b204:	f7e9 fee3 	bl	8004fce <lv_obj_get_width>
 801b208:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 801b20a:	4628      	mov	r0, r5
 801b20c:	f7e9 fee5 	bl	8004fda <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b210:	f241 0212 	movw	r2, #4114	; 0x1012
 801b214:	2100      	movs	r1, #0
 801b216:	9003      	str	r0, [sp, #12]
 801b218:	4628      	mov	r0, r5
 801b21a:	f7ec f955 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b21e:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801b222:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b226:	2100      	movs	r1, #0
 801b228:	4628      	mov	r0, r5
 801b22a:	f7ec f94d 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b22e:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801b232:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b234:	2100      	movs	r1, #0
 801b236:	4628      	mov	r0, r5
 801b238:	f7ec f946 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b23c:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801b240:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b242:	2100      	movs	r1, #0
 801b244:	4628      	mov	r0, r5
 801b246:	f7ec f93f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b24a:	f241 0214 	movw	r2, #4116	; 0x1014
    return (lv_coord_t)v.num;
 801b24e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b252:	2100      	movs	r1, #0
 801b254:	4628      	mov	r0, r5
 801b256:	f7ec f937 	bl	80074c8 <lv_obj_get_style_prop>
 801b25a:	4604      	mov	r4, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b25c:	4628      	mov	r0, r5
 801b25e:	f7ff fdb7 	bl	801add0 <lv_obj_get_style_pad_column.constprop.0>
    prow = (prow / 2) + 1 + (prow & 1);
 801b262:	f004 0301 	and.w	r3, r4, #1
 801b266:	1c5a      	adds	r2, r3, #1
 801b268:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801b26c:	fa03 f384 	sxtah	r3, r3, r4
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b270:	f000 0401 	and.w	r4, r0, #1
    prow = (prow / 2) + 1 + (prow & 1);
 801b274:	eb02 0363 	add.w	r3, r2, r3, asr #1
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b278:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
    prow = (prow / 2) + 1 + (prow & 1);
 801b27c:	b21b      	sxth	r3, r3
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b27e:	eb04 0462 	add.w	r4, r4, r2, asr #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801b282:	2b0d      	cmp	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b284:	f104 0401 	add.w	r4, r4, #1
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801b288:	bfa8      	it	ge
 801b28a:	230d      	movge	r3, #13
    pcol = (pcol / 2) + 1 + (pcol & 1);
 801b28c:	b224      	sxth	r4, r4
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 801b28e:	9301      	str	r3, [sp, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b290:	4653      	mov	r3, sl
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 801b292:	2c0d      	cmp	r4, #13
 801b294:	bfa8      	it	ge
 801b296:	240d      	movge	r4, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 801b298:	2e0d      	cmp	r6, #13
 801b29a:	bfa8      	it	ge
 801b29c:	260d      	movge	r6, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b29e:	2f0d      	cmp	r7, #13
 801b2a0:	bfa8      	it	ge
 801b2a2:	270d      	movge	r7, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 801b2a4:	f1b8 0f0d 	cmp.w	r8, #13
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b2a8:	eba9 0906 	sub.w	r9, r9, r6
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 801b2ac:	bfa8      	it	ge
 801b2ae:	f04f 080d 	movge.w	r8, #13
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b2b2:	2b0d      	cmp	r3, #13
 801b2b4:	bfa8      	it	ge
 801b2b6:	230d      	movge	r3, #13
 801b2b8:	9304      	str	r3, [sp, #16]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b2ba:	f1a9 0302 	sub.w	r3, r9, #2
 801b2be:	9305      	str	r3, [sp, #20]
 801b2c0:	fa1f f98b 	uxth.w	r9, fp
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b2c4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 801b2c6:	454b      	cmp	r3, r9
 801b2c8:	d950      	bls.n	801b36c <get_button_from_point+0x184>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 801b2ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801b2cc:	fa1f f38b 	uxth.w	r3, fp
 801b2d0:	f10b 0b01 	add.w	fp, fp, #1
    dest->x1 = src->x1;
 801b2d4:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
 801b2d8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    dest->y1 = src->y1;
 801b2dc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b2e0:	458a      	cmp	sl, r1
 801b2e2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801b2e6:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801b2ea:	bfac      	ite	ge
 801b2ec:	9904      	ldrge	r1, [sp, #16]
        else btn_area.x1 += obj_cords.x1 - pcol;
 801b2ee:	1b11      	sublt	r1, r2, r4
    dest->x2 = src->x2;
 801b2f0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 801b2f4:	bfa8      	it	ge
 801b2f6:	1a51      	subge	r1, r2, r1
    dest->y2 = src->y2;
 801b2f8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b2fc:	4577      	cmp	r7, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 801b2fe:	440b      	add	r3, r1
 801b300:	9002      	str	r0, [sp, #8]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b302:	bfb8      	it	lt
 801b304:	9801      	ldrlt	r0, [sp, #4]
 801b306:	fa1f f18e 	uxth.w	r1, lr
        else btn_area.x1 += obj_cords.x1 - pcol;
 801b30a:	b21b      	sxth	r3, r3
 801b30c:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b310:	f8bd 301a 	ldrh.w	r3, [sp, #26]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b314:	bfb4      	ite	lt
 801b316:	eba3 0e00 	sublt.w	lr, r3, r0
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 801b31a:	eba3 0e07 	subge.w	lr, r3, r7
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b31e:	9805      	ldr	r0, [sp, #20]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b320:	4471      	add	r1, lr
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b322:	4584      	cmp	ip, r0
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b324:	9802      	ldr	r0, [sp, #8]
        else btn_area.y1 += obj_cords.y1 - prow;
 801b326:	b209      	sxth	r1, r1
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 801b328:	bfac      	ite	ge
 801b32a:	1992      	addge	r2, r2, r6
        else btn_area.x2 += obj_cords.x1 + pcol;
 801b32c:	1912      	addlt	r2, r2, r4
 801b32e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b332:	fa1f f18c 	uxth.w	r1, ip
 801b336:	440a      	add	r2, r1
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b338:	9903      	ldr	r1, [sp, #12]
 801b33a:	eba1 0108 	sub.w	r1, r1, r8
        else btn_area.x2 += obj_cords.x1 + pcol;
 801b33e:	b212      	sxth	r2, r2
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b340:	3902      	subs	r1, #2
 801b342:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b346:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b34a:	4288      	cmp	r0, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b34c:	a808      	add	r0, sp, #32
        else btn_area.y2 += obj_cords.y1 + prow;
 801b34e:	bfb6      	itet	lt
 801b350:	9901      	ldrlt	r1, [sp, #4]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 801b352:	4443      	addge	r3, r8
        else btn_area.y2 += obj_cords.y1 + prow;
 801b354:	185b      	addlt	r3, r3, r1
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b356:	ee18 1a10 	vmov	r1, s16
        else btn_area.y2 += obj_cords.y1 + prow;
 801b35a:	4413      	add	r3, r2
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b35c:	2200      	movs	r2, #0
        else btn_area.y2 += obj_cords.y1 + prow;
 801b35e:	b21b      	sxth	r3, r3
 801b360:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 801b364:	f7fb fed3 	bl	801710e <_lv_area_is_point_on>
 801b368:	2800      	cmp	r0, #0
 801b36a:	d0a9      	beq.n	801b2c0 <get_button_from_point+0xd8>
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 801b36c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 801b36e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b372:	454a      	cmp	r2, r9
 801b374:	bf08      	it	eq
 801b376:	4699      	moveq	r9, r3
}
 801b378:	4648      	mov	r0, r9
 801b37a:	b00b      	add	sp, #44	; 0x2c
 801b37c:	ecbd 8b02 	vpop	{d8}
 801b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b384 <lv_btnmatrix_set_map.part.0>:
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 801b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    while(map[i] && map[i][0] != '\0') {
 801b388:	2700      	movs	r7, #0
void lv_btnmatrix_set_map(lv_obj_t * obj, const char * map[])
 801b38a:	b095      	sub	sp, #84	; 0x54
 801b38c:	4604      	mov	r4, r0
 801b38e:	460d      	mov	r5, r1
    uint16_t btn_cnt = 0;
 801b390:	463e      	mov	r6, r7
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801b392:	f8df 8274 	ldr.w	r8, [pc, #628]	; 801b608 <lv_btnmatrix_set_map.part.0+0x284>
    while(map[i] && map[i][0] != '\0') {
 801b396:	b2bb      	uxth	r3, r7
 801b398:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801b39c:	b108      	cbz	r0, 801b3a2 <lv_btnmatrix_set_map.part.0+0x1e>
 801b39e:	7803      	ldrb	r3, [r0, #0]
 801b3a0:	b9a3      	cbnz	r3, 801b3cc <lv_btnmatrix_set_map.part.0+0x48>
    if(btn_cnt == btnm->btn_cnt) return;
 801b3a2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b3a4:	42b3      	cmp	r3, r6
 801b3a6:	d027      	beq.n	801b3f8 <lv_btnmatrix_set_map.part.0+0x74>
    if(btnm->button_areas != NULL) {
 801b3a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b3aa:	b118      	cbz	r0, 801b3b4 <lv_btnmatrix_set_map.part.0+0x30>
        lv_mem_free(btnm->button_areas);
 801b3ac:	f7fc fab2 	bl	8017914 <lv_mem_free>
        btnm->button_areas = NULL;
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	62a3      	str	r3, [r4, #40]	; 0x28
    if(btnm->ctrl_bits != NULL) {
 801b3b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b3b6:	b118      	cbz	r0, 801b3c0 <lv_btnmatrix_set_map.part.0+0x3c>
        lv_mem_free(btnm->ctrl_bits);
 801b3b8:	f7fc faac 	bl	8017914 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 801b3bc:	2300      	movs	r3, #0
 801b3be:	62e3      	str	r3, [r4, #44]	; 0x2c
    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 801b3c0:	00f0      	lsls	r0, r6, #3
 801b3c2:	f7fc fc29 	bl	8017c18 <lv_mem_alloc>
 801b3c6:	62a0      	str	r0, [r4, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 801b3c8:	b940      	cbnz	r0, 801b3dc <lv_btnmatrix_set_map.part.0+0x58>
 801b3ca:	e7fe      	b.n	801b3ca <lv_btnmatrix_set_map.part.0+0x46>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801b3cc:	4641      	mov	r1, r8
 801b3ce:	f7e4 ff1f 	bl	8000210 <strcmp>
 801b3d2:	b108      	cbz	r0, 801b3d8 <lv_btnmatrix_set_map.part.0+0x54>
            btn_cnt++;
 801b3d4:	3601      	adds	r6, #1
 801b3d6:	b2b6      	uxth	r6, r6
        i++;
 801b3d8:	3701      	adds	r7, #1
 801b3da:	e7dc      	b.n	801b396 <lv_btnmatrix_set_map.part.0+0x12>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801b3dc:	0070      	lsls	r0, r6, #1
 801b3de:	f7fc fc1b 	bl	8017c18 <lv_mem_alloc>
 801b3e2:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 801b3e4:	b900      	cbnz	r0, 801b3e8 <lv_btnmatrix_set_map.part.0+0x64>
 801b3e6:	e7fe      	b.n	801b3e6 <lv_btnmatrix_set_map.part.0+0x62>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 801b3e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	bf08      	it	eq
 801b3ee:	2600      	moveq	r6, #0
    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 801b3f0:	0071      	lsls	r1, r6, #1
 801b3f2:	f7fc fc8f 	bl	8017d14 <lv_memset_00>
    btnm->btn_cnt = btn_cnt;
 801b3f6:	8626      	strh	r6, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801b3f8:	f241 426a 	movw	r2, #5226	; 0x146a
 801b3fc:	2100      	movs	r1, #0
 801b3fe:	4620      	mov	r0, r4
    btnm->map_p = map;
 801b400:	6265      	str	r5, [r4, #36]	; 0x24
 801b402:	f7ec f861 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b406:	f241 0212 	movw	r2, #4114	; 0x1012
    return (lv_base_dir_t)v.num;
 801b40a:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b40c:	2100      	movs	r1, #0
 801b40e:	4620      	mov	r0, r4
    uint8_t row_cnt = 1;
 801b410:	f04f 0b01 	mov.w	fp, #1
    return (lv_base_dir_t)v.num;
 801b414:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b416:	f7ec f857 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b41a:	f241 0210 	movw	r2, #4112	; 0x1010
 801b41e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b420:	900e      	str	r0, [sp, #56]	; 0x38
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b422:	4620      	mov	r0, r4
 801b424:	f7ec f850 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b428:	f241 0214 	movw	r2, #4116	; 0x1014
 801b42c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b42e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801b430:	4620      	mov	r0, r4
 801b432:	f7ec f849 	bl	80074c8 <lv_obj_get_style_prop>
 801b436:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801b438:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801b43c:	4620      	mov	r0, r4
 801b43e:	f7ff fcc7 	bl	801add0 <lv_obj_get_style_pad_column.constprop.0>
 801b442:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 801b444:	4620      	mov	r0, r4
 801b446:	f7e9 fdce 	bl	8004fe6 <lv_obj_get_content_width>
 801b44a:	4606      	mov	r6, r0
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 801b44c:	4620      	mov	r0, r4
 801b44e:	f7e9 fde4 	bl	800501a <lv_obj_get_content_height>
 801b452:	1f2a      	subs	r2, r5, #4
 801b454:	4682      	mov	sl, r0
        if(strcmp(map[i], "\n") == 0) row_cnt++;
 801b456:	496c      	ldr	r1, [pc, #432]	; (801b608 <lv_btnmatrix_set_map.part.0+0x284>)
    for(i = 0; map[i] && map[i][0] != '\0'; i++) {
 801b458:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b45c:	b108      	cbz	r0, 801b462 <lv_btnmatrix_set_map.part.0+0xde>
 801b45e:	7803      	ldrb	r3, [r0, #0]
 801b460:	bb0b      	cbnz	r3, 801b4a6 <lv_btnmatrix_set_map.part.0+0x122>
    lv_coord_t max_h_no_gap = max_h - (prow * (row_cnt - 1));
 801b462:	f10b 30ff 	add.w	r0, fp, #4294967295
 801b466:	fb10 f909 	smulbb	r9, r0, r9
 801b46a:	ebaa 0a09 	sub.w	sl, sl, r9
 801b46e:	fa0f f38a 	sxth.w	r3, sl
    for(row = 0; row < row_cnt; row++) {
 801b472:	f04f 0a00 	mov.w	sl, #0
 801b476:	930c      	str	r3, [sp, #48]	; 0x30
 801b478:	fa1f f388 	uxth.w	r3, r8
 801b47c:	f8cd a018 	str.w	sl, [sp, #24]
 801b480:	9310      	str	r3, [sp, #64]	; 0x40
 801b482:	b2bb      	uxth	r3, r7
    uint32_t txt_tot_i = 0; /*Act. index in the str map*/
 801b484:	f8cd a00c 	str.w	sl, [sp, #12]
 801b488:	9305      	str	r3, [sp, #20]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b48a:	b2b3      	uxth	r3, r6
 801b48c:	9308      	str	r3, [sp, #32]
 801b48e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b492:	9312      	str	r3, [sp, #72]	; 0x48
    for(row = 0; row < row_cnt; row++) {
 801b494:	9b06      	ldr	r3, [sp, #24]
 801b496:	455b      	cmp	r3, fp
 801b498:	d33f      	bcc.n	801b51a <lv_btnmatrix_set_map.part.0+0x196>
    lv_obj_invalidate(obj);
 801b49a:	4620      	mov	r0, r4
}
 801b49c:	b015      	add	sp, #84	; 0x54
 801b49e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_invalidate(obj);
 801b4a2:	f7e9 bee9 	b.w	8005278 <lv_obj_invalidate>
 801b4a6:	9203      	str	r2, [sp, #12]
        if(strcmp(map[i], "\n") == 0) row_cnt++;
 801b4a8:	f7e4 feb2 	bl	8000210 <strcmp>
 801b4ac:	4956      	ldr	r1, [pc, #344]	; (801b608 <lv_btnmatrix_set_map.part.0+0x284>)
 801b4ae:	9a03      	ldr	r2, [sp, #12]
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	d1d1      	bne.n	801b458 <lv_btnmatrix_set_map.part.0+0xd4>
 801b4b4:	f10b 0301 	add.w	r3, fp, #1
 801b4b8:	fa5f fb83 	uxtb.w	fp, r3
    for(i = 0; map[i] && map[i][0] != '\0'; i++) {
 801b4bc:	e7cc      	b.n	801b458 <lv_btnmatrix_set_map.part.0+0xd4>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801b4be:	9b03      	ldr	r3, [sp, #12]
 801b4c0:	9a04      	ldr	r2, [sp, #16]
 801b4c2:	441e      	add	r6, r3
 801b4c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801b4c6:	f813 3016 	ldrb.w	r3, [r3, r6, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 801b4ca:	f003 0307 	and.w	r3, r3, #7
 801b4ce:	2b01      	cmp	r3, #1
 801b4d0:	bf2c      	ite	cs
 801b4d2:	18d2      	addcs	r2, r2, r3
 801b4d4:	3201      	addcc	r2, #1
 801b4d6:	b293      	uxth	r3, r2
 801b4d8:	9304      	str	r3, [sp, #16]
            btn_cnt++;
 801b4da:	fa1f f788 	uxth.w	r7, r8
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 801b4de:	f855 9027 	ldr.w	r9, [r5, r7, lsl #2]
 801b4e2:	463e      	mov	r6, r7
 801b4e4:	f1b9 0f00 	cmp.w	r9, #0
 801b4e8:	d00a      	beq.n	801b500 <lv_btnmatrix_set_map.part.0+0x17c>
 801b4ea:	4947      	ldr	r1, [pc, #284]	; (801b608 <lv_btnmatrix_set_map.part.0+0x284>)
 801b4ec:	4648      	mov	r0, r9
 801b4ee:	f7e4 fe8f 	bl	8000210 <strcmp>
 801b4f2:	b128      	cbz	r0, 801b500 <lv_btnmatrix_set_map.part.0+0x17c>
 801b4f4:	f899 3000 	ldrb.w	r3, [r9]
 801b4f8:	f108 0801 	add.w	r8, r8, #1
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d1de      	bne.n	801b4be <lv_btnmatrix_set_map.part.0+0x13a>
        if(btn_cnt == 0) {
 801b500:	9b06      	ldr	r3, [sp, #24]
 801b502:	3301      	adds	r3, #1
 801b504:	9306      	str	r3, [sp, #24]
 801b506:	b96f      	cbnz	r7, 801b524 <lv_btnmatrix_set_map.part.0+0x1a0>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 801b508:	3504      	adds	r5, #4
    for(row = 0; row < row_cnt; row++) {
 801b50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b50c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b50e:	449a      	add	sl, r3
 801b510:	9b05      	ldr	r3, [sp, #20]
 801b512:	4413      	add	r3, r2
 801b514:	b29b      	uxth	r3, r3
 801b516:	9305      	str	r3, [sp, #20]
 801b518:	e7bc      	b.n	801b494 <lv_btnmatrix_set_map.part.0+0x110>
 801b51a:	f04f 0800 	mov.w	r8, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 801b51e:	f8cd 8010 	str.w	r8, [sp, #16]
 801b522:	e7da      	b.n	801b4da <lv_btnmatrix_set_map.part.0+0x156>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801b524:	fbba f2fb 	udiv	r2, sl, fp
 801b528:	9b05      	ldr	r3, [sp, #20]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b52a:	3f01      	subs	r7, #1
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801b52c:	9905      	ldr	r1, [sp, #20]
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801b52e:	441a      	add	r2, r3
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801b530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b532:	3901      	subs	r1, #1
 801b534:	4453      	add	r3, sl
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / row_cnt + row * prow;
 801b536:	b212      	sxth	r2, r2
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / row_cnt + row * prow - 1;
 801b538:	fbb3 f3fb 	udiv	r3, r3, fp
 801b53c:	440b      	add	r3, r1
 801b53e:	b21b      	sxth	r3, r3
 801b540:	930d      	str	r3, [sp, #52]	; 0x34
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b544:	fb17 f703 	smulbb	r7, r7, r3
 801b548:	9b08      	ldr	r3, [sp, #32]
 801b54a:	1bdf      	subs	r7, r3, r7
 801b54c:	b23f      	sxth	r7, r7
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 801b54e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 801b552:	2700      	movs	r7, #0
 801b554:	930a      	str	r3, [sp, #40]	; 0x28
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 801b556:	46b9      	mov	r9, r7
 801b558:	9b03      	ldr	r3, [sp, #12]
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 801b55a:	9707      	str	r7, [sp, #28]
 801b55c:	ea4f 0843 	mov.w	r8, r3, lsl #1
            btn_x1 += pleft;
 801b560:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b564:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b568:	9904      	ldr	r1, [sp, #16]
 801b56a:	fb03 f309 	mul.w	r3, r3, r9
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 801b56e:	9213      	str	r2, [sp, #76]	; 0x4c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b570:	fbb3 f3f1 	udiv	r3, r3, r1
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 801b574:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b576:	443b      	add	r3, r7
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 801b578:	f811 1008 	ldrb.w	r1, [r1, r8]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b57c:	b29b      	uxth	r3, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 801b57e:	f001 0107 	and.w	r1, r1, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b582:	2901      	cmp	r1, #1
 801b584:	bf2c      	ite	cs
 801b586:	4489      	addcs	r9, r1
 801b588:	f109 0901 	addcc.w	r9, r9, #1
 801b58c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b58e:	fb09 f001 	mul.w	r0, r9, r1
 801b592:	9904      	ldr	r1, [sp, #16]
 801b594:	fbb0 f0f1 	udiv	r0, r0, r1
 801b598:	1e79      	subs	r1, r7, #1
 801b59a:	4408      	add	r0, r1
            if(base_dir == LV_BASE_DIR_RTL) {
 801b59c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b59e:	2901      	cmp	r1, #1
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b5a0:	b280      	uxth	r0, r0
                btn_x1 = max_w - btn_x1;
 801b5a2:	bf0d      	iteet	eq
 801b5a4:	9908      	ldreq	r1, [sp, #32]
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 801b5a6:	b219      	sxthne	r1, r3
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 801b5a8:	b203      	sxthne	r3, r0
                btn_x1 = max_w - btn_x1;
 801b5aa:	1a08      	subeq	r0, r1, r0
 801b5ac:	bf02      	ittt	eq
 801b5ae:	b201      	sxtheq	r1, r0
                btn_x2 = max_w - btn_x2;
 801b5b0:	9808      	ldreq	r0, [sp, #32]
 801b5b2:	1ac3      	subeq	r3, r0, r3
            btn_x1 += pleft;
 801b5b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
                btn_x2 = max_w - btn_x2;
 801b5b6:	bf08      	it	eq
 801b5b8:	b21b      	sxtheq	r3, r3
            btn_x1 += pleft;
 801b5ba:	4401      	add	r1, r0
            btn_x2 += pleft;
 801b5bc:	4403      	add	r3, r0
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 801b5be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b5c0:	b209      	sxth	r1, r1
 801b5c2:	9011      	str	r0, [sp, #68]	; 0x44
 801b5c4:	b21b      	sxth	r3, r3
 801b5c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b5c8:	9000      	str	r0, [sp, #0]
 801b5ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b5cc:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801b5d0:	f108 0802 	add.w	r8, r8, #2
 801b5d4:	f7fb fd10 	bl	8016ff8 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 801b5d8:	9b07      	ldr	r3, [sp, #28]
 801b5da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b5dc:	3301      	adds	r3, #1
 801b5de:	9307      	str	r3, [sp, #28]
 801b5e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b5e2:	441f      	add	r7, r3
 801b5e4:	9b07      	ldr	r3, [sp, #28]
 801b5e6:	42b3      	cmp	r3, r6
 801b5e8:	b2bf      	uxth	r7, r7
 801b5ea:	d3bc      	bcc.n	801b566 <lv_btnmatrix_set_map.part.0+0x1e2>
 801b5ec:	2e00      	cmp	r6, #0
 801b5ee:	9a03      	ldr	r2, [sp, #12]
 801b5f0:	f106 33ff 	add.w	r3, r6, #4294967295
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 801b5f4:	f106 0601 	add.w	r6, r6, #1
 801b5f8:	bf08      	it	eq
 801b5fa:	2300      	moveq	r3, #0
 801b5fc:	3201      	adds	r2, #1
 801b5fe:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801b602:	4413      	add	r3, r2
 801b604:	9303      	str	r3, [sp, #12]
 801b606:	e780      	b.n	801b50a <lv_btnmatrix_set_map.part.0+0x186>
 801b608:	08029f9a 	.word	0x08029f9a

0801b60c <lv_btnmatrix_constructor>:
    btnm->btn_cnt        = 0;
 801b60c:	4a07      	ldr	r2, [pc, #28]	; (801b62c <lv_btnmatrix_constructor+0x20>)
    btnm->map_p          = NULL;
 801b60e:	2300      	movs	r3, #0
{
 801b610:	4608      	mov	r0, r1
    btnm->btn_cnt        = 0;
 801b612:	630a      	str	r2, [r1, #48]	; 0x30
    btnm->one_check      = 0;
 801b614:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    btnm->ctrl_bits      = NULL;
 801b618:	62cb      	str	r3, [r1, #44]	; 0x2c
    btnm->one_check      = 0;
 801b61a:	f363 0200 	bfi	r2, r3, #0, #1
    btnm->button_areas   = NULL;
 801b61e:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
    btnm->one_check      = 0;
 801b622:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
    if(map == NULL) return;
 801b626:	4902      	ldr	r1, [pc, #8]	; (801b630 <lv_btnmatrix_constructor+0x24>)
 801b628:	f7ff beac 	b.w	801b384 <lv_btnmatrix_set_map.part.0>
 801b62c:	ffff0000 	.word	0xffff0000
 801b630:	20000054 	.word	0x20000054

0801b634 <lv_btnmatrix_create>:
{
 801b634:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801b636:	4804      	ldr	r0, [pc, #16]	; (801b648 <lv_btnmatrix_create+0x14>)
{
 801b638:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801b63a:	f7e8 ff73 	bl	8004524 <lv_obj_class_create_obj>
 801b63e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801b640:	f7e8 fffd 	bl	800463e <lv_obj_class_init_obj>
}
 801b644:	4620      	mov	r0, r4
 801b646:	bd10      	pop	{r4, pc}
 801b648:	08029d8c 	.word	0x08029d8c

0801b64c <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 801b64c:	b109      	cbz	r1, 801b652 <lv_btnmatrix_set_map+0x6>
 801b64e:	f7ff be99 	b.w	801b384 <lv_btnmatrix_set_map.part.0>
}
 801b652:	4770      	bx	lr

0801b654 <lv_btnmatrix_set_ctrl_map>:
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801b654:	8e02      	ldrh	r2, [r0, #48]	; 0x30
{
 801b656:	b510      	push	{r4, lr}
 801b658:	4604      	mov	r4, r0
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801b65a:	0052      	lsls	r2, r2, #1
 801b65c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b65e:	f7fc f993 	bl	8017988 <lv_memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 801b662:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b664:	4620      	mov	r0, r4
}
 801b666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_btnmatrix_set_map(obj, btnm->map_p);
 801b66a:	f7ff bfef 	b.w	801b64c <lv_btnmatrix_set_map>

0801b66e <lv_btnmatrix_clear_btn_ctrl>:
{
 801b66e:	b430      	push	{r4, r5}
    if(btn_id >= btnm->btn_cnt) return;
 801b670:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801b672:	428d      	cmp	r5, r1
 801b674:	d909      	bls.n	801b68a <lv_btnmatrix_clear_btn_ctrl+0x1c>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 801b676:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801b678:	f835 4011 	ldrh.w	r4, [r5, r1, lsl #1]
 801b67c:	ea24 0202 	bic.w	r2, r4, r2
 801b680:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}
 801b684:	bc30      	pop	{r4, r5}
    invalidate_button_area(obj, btn_id);
 801b686:	f7ff bd65 	b.w	801b154 <invalidate_button_area>
}
 801b68a:	bc30      	pop	{r4, r5}
 801b68c:	4770      	bx	lr

0801b68e <lv_btnmatrix_clear_btn_ctrl_all>:
{
 801b68e:	b570      	push	{r4, r5, r6, lr}
 801b690:	4604      	mov	r4, r0
 801b692:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b694:	2500      	movs	r5, #0
 801b696:	b2a9      	uxth	r1, r5
 801b698:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b69a:	428b      	cmp	r3, r1
 801b69c:	d800      	bhi.n	801b6a0 <lv_btnmatrix_clear_btn_ctrl_all+0x12>
}
 801b69e:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 801b6a0:	4632      	mov	r2, r6
 801b6a2:	4620      	mov	r0, r4
 801b6a4:	3501      	adds	r5, #1
 801b6a6:	f7ff ffe2 	bl	801b66e <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b6aa:	e7f4      	b.n	801b696 <lv_btnmatrix_clear_btn_ctrl_all+0x8>

0801b6ac <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 801b6ac:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b6ae:	428b      	cmp	r3, r1
{
 801b6b0:	b570      	push	{r4, r5, r6, lr}
 801b6b2:	4604      	mov	r4, r0
 801b6b4:	460d      	mov	r5, r1
 801b6b6:	4616      	mov	r6, r2
    if(btn_id >= btnm->btn_cnt) return;
 801b6b8:	d914      	bls.n	801b6e4 <lv_btnmatrix_set_btn_ctrl+0x38>
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 801b6ba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801b6be:	07da      	lsls	r2, r3, #31
 801b6c0:	d504      	bpl.n	801b6cc <lv_btnmatrix_set_btn_ctrl+0x20>
 801b6c2:	0633      	lsls	r3, r6, #24
 801b6c4:	d502      	bpl.n	801b6cc <lv_btnmatrix_set_btn_ctrl+0x20>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 801b6c6:	2180      	movs	r1, #128	; 0x80
 801b6c8:	f7ff ffe1 	bl	801b68e <lv_btnmatrix_clear_btn_ctrl_all>
    btnm->ctrl_bits[btn_id] |= ctrl;
 801b6cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    invalidate_button_area(obj, btn_id);
 801b6ce:	4629      	mov	r1, r5
 801b6d0:	4620      	mov	r0, r4
    btnm->ctrl_bits[btn_id] |= ctrl;
 801b6d2:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 801b6d6:	4316      	orrs	r6, r2
 801b6d8:	f823 6015 	strh.w	r6, [r3, r5, lsl #1]
}
 801b6dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    invalidate_button_area(obj, btn_id);
 801b6e0:	f7ff bd38 	b.w	801b154 <invalidate_button_area>
}
 801b6e4:	bd70      	pop	{r4, r5, r6, pc}

0801b6e6 <lv_btnmatrix_set_btn_ctrl_all>:
{
 801b6e6:	b570      	push	{r4, r5, r6, lr}
 801b6e8:	4604      	mov	r4, r0
 801b6ea:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b6ec:	2500      	movs	r5, #0
 801b6ee:	b2a9      	uxth	r1, r5
 801b6f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b6f2:	428b      	cmp	r3, r1
 801b6f4:	d800      	bhi.n	801b6f8 <lv_btnmatrix_set_btn_ctrl_all+0x12>
}
 801b6f6:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_set_btn_ctrl(obj, i, ctrl);
 801b6f8:	4632      	mov	r2, r6
 801b6fa:	4620      	mov	r0, r4
 801b6fc:	3501      	adds	r5, #1
 801b6fe:	f7ff ffd5 	bl	801b6ac <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 801b702:	e7f4      	b.n	801b6ee <lv_btnmatrix_set_btn_ctrl_all+0x8>

0801b704 <lv_btnmatrix_get_selected_btn>:
}
 801b704:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 801b706:	4770      	bx	lr

0801b708 <lv_btnmatrix_get_btn_text>:
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b70c:	4299      	cmp	r1, r3
{
 801b70e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b712:	4605      	mov	r5, r0
 801b714:	460f      	mov	r7, r1
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b716:	d020      	beq.n	801b75a <lv_btnmatrix_get_btn_text+0x52>
    if(btn_id > btnm->btn_cnt) return NULL;
 801b718:	f8b0 9030 	ldrh.w	r9, [r0, #48]	; 0x30
 801b71c:	4589      	cmp	r9, r1
 801b71e:	d31c      	bcc.n	801b75a <lv_btnmatrix_get_btn_text+0x52>
 801b720:	2600      	movs	r6, #0
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b722:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801b760 <lv_btnmatrix_get_btn_text+0x58>
    uint16_t txt_i = 0;
 801b726:	46b0      	mov	r8, r6
    while(btn_i != btn_id) {
 801b728:	42be      	cmp	r6, r7
 801b72a:	d106      	bne.n	801b73a <lv_btnmatrix_get_btn_text+0x32>
    if(btn_i == btnm->btn_cnt) return NULL;
 801b72c:	45b1      	cmp	r9, r6
 801b72e:	d014      	beq.n	801b75a <lv_btnmatrix_get_btn_text+0x52>
    return btnm->map_p[txt_i];
 801b730:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b732:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
}
 801b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        txt_i++;
 801b73a:	f108 0401 	add.w	r4, r8, #1
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b73e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b740:	4651      	mov	r1, sl
        txt_i++;
 801b742:	b2a4      	uxth	r4, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 801b744:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b748:	f7e4 fd62 	bl	8000210 <strcmp>
 801b74c:	b910      	cbnz	r0, 801b754 <lv_btnmatrix_get_btn_text+0x4c>
 801b74e:	f108 0402 	add.w	r4, r8, #2
 801b752:	b2a4      	uxth	r4, r4
 801b754:	3601      	adds	r6, #1
{
 801b756:	46a0      	mov	r8, r4
 801b758:	e7e6      	b.n	801b728 <lv_btnmatrix_get_btn_text+0x20>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 801b75a:	2000      	movs	r0, #0
 801b75c:	e7eb      	b.n	801b736 <lv_btnmatrix_get_btn_text+0x2e>
 801b75e:	bf00      	nop
 801b760:	08029f9a 	.word	0x08029f9a

0801b764 <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 801b764:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b766:	428b      	cmp	r3, r1
 801b768:	d907      	bls.n	801b77a <lv_btnmatrix_has_btn_ctrl+0x16>
    return (btnm->ctrl_bits[btn_id] & ctrl) ? true : false;
 801b76a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801b76c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801b770:	421a      	tst	r2, r3
 801b772:	bf14      	ite	ne
 801b774:	2001      	movne	r0, #1
 801b776:	2000      	moveq	r0, #0
 801b778:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 801b77a:	2000      	movs	r0, #0
}
 801b77c:	4770      	bx	lr

0801b77e <make_one_button_checked>:
 * It simply clears the toggle flag on other buttons.
 * @param obj Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_checked(lv_obj_t * obj, uint16_t btn_idx)
{
 801b77e:	b570      	push	{r4, r5, r6, lr}
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b780:	2280      	movs	r2, #128	; 0x80
{
 801b782:	4604      	mov	r4, r0
 801b784:	460d      	mov	r5, r1
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b786:	f7ff ffed 	bl	801b764 <lv_btnmatrix_has_btn_ctrl>
 801b78a:	4606      	mov	r6, r0

    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 801b78c:	2180      	movs	r1, #128	; 0x80
 801b78e:	4620      	mov	r0, r4
 801b790:	f7ff ff7d 	bl	801b68e <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b794:	b136      	cbz	r6, 801b7a4 <make_one_button_checked+0x26>
 801b796:	4629      	mov	r1, r5
 801b798:	4620      	mov	r0, r4
 801b79a:	2280      	movs	r2, #128	; 0x80
}
 801b79c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 801b7a0:	f7ff bf84 	b.w	801b6ac <lv_btnmatrix_set_btn_ctrl>
}
 801b7a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b7a8 <lv_btnmatrix_event>:
{
 801b7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801b7ac:	48b1      	ldr	r0, [pc, #708]	; (801ba74 <lv_btnmatrix_event+0x2cc>)
{
 801b7ae:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801b7b0:	f7e6 fbc3 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801b7b4:	2801      	cmp	r0, #1
 801b7b6:	d10c      	bne.n	801b7d2 <lv_btnmatrix_event+0x2a>
    lv_event_code_t code = lv_event_get_code(e);
 801b7b8:	4630      	mov	r0, r6
 801b7ba:	f7e6 fc57 	bl	800206c <lv_event_get_code>
 801b7be:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801b7c0:	4630      	mov	r0, r6
 801b7c2:	f7e6 fc51 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b7c6:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801b7c8:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801b7ca:	d105      	bne.n	801b7d8 <lv_btnmatrix_event+0x30>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 801b7cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b7ce:	f7ff ff3d 	bl	801b64c <lv_btnmatrix_set_map>
}
 801b7d2:	b003      	add	sp, #12
 801b7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801b7d8:	2d23      	cmp	r5, #35	; 0x23
 801b7da:	d0f7      	beq.n	801b7cc <lv_btnmatrix_event+0x24>
    else if(code == LV_EVENT_PRESSED) {
 801b7dc:	2d01      	cmp	r5, #1
 801b7de:	d138      	bne.n	801b852 <lv_btnmatrix_event+0xaa>
        void * param = lv_event_get_param(e);
 801b7e0:	4630      	mov	r0, r6
 801b7e2:	f7e6 fc45 	bl	8002070 <lv_event_get_param>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b7e6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        void * param = lv_event_get_param(e);
 801b7e8:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b7ea:	4620      	mov	r0, r4
 801b7ec:	f7ff fcb2 	bl	801b154 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b7f0:	f7e6 feb0 	bl	8002554 <lv_indev_get_act>
 801b7f4:	f7e6 feb4 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b7f8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b7fc:	2801      	cmp	r0, #1
 801b7fe:	d117      	bne.n	801b830 <lv_btnmatrix_event+0x88>
            lv_indev_get_point(param, &p);
 801b800:	4669      	mov	r1, sp
 801b802:	4628      	mov	r0, r5
 801b804:	f7e6 ff07 	bl	8002616 <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 801b808:	4669      	mov	r1, sp
 801b80a:	4620      	mov	r0, r4
 801b80c:	f7ff fcec 	bl	801b1e8 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801b810:	f64f 73ff 	movw	r3, #65535	; 0xffff
            btn_pr = get_button_from_point(obj, &p);
 801b814:	4601      	mov	r1, r0
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 801b816:	4298      	cmp	r0, r3
 801b818:	d00a      	beq.n	801b830 <lv_btnmatrix_event+0x88>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b81a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b81c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b820:	069d      	lsls	r5, r3, #26
 801b822:	d405      	bmi.n	801b830 <lv_btnmatrix_event+0x88>
 801b824:	0718      	lsls	r0, r3, #28
 801b826:	d403      	bmi.n	801b830 <lv_btnmatrix_event+0x88>
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 801b828:	4620      	mov	r0, r4
                    btnm->btn_id_sel = btn_pr;
 801b82a:	8661      	strh	r1, [r4, #50]	; 0x32
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 801b82c:	f7ff fc92 	bl	801b154 <invalidate_button_area>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b830:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b836:	4293      	cmp	r3, r2
 801b838:	d0cb      	beq.n	801b7d2 <lv_btnmatrix_event+0x2a>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b83a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b83c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b840:	f412 7f80 	tst.w	r2, #256	; 0x100
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b844:	d1c5      	bne.n	801b7d2 <lv_btnmatrix_event+0x2a>
 801b846:	0691      	lsls	r1, r2, #26
 801b848:	d4c3      	bmi.n	801b7d2 <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b84a:	0712      	lsls	r2, r2, #28
 801b84c:	d4c1      	bmi.n	801b7d2 <lv_btnmatrix_event+0x2a>
                uint32_t b = btnm->btn_id_sel;
 801b84e:	9301      	str	r3, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b850:	e03a      	b.n	801b8c8 <lv_btnmatrix_event+0x120>
    else if(code == LV_EVENT_PRESSING) {
 801b852:	2d02      	cmp	r5, #2
 801b854:	d13e      	bne.n	801b8d4 <lv_btnmatrix_event+0x12c>
        void * param = lv_event_get_param(e);
 801b856:	4630      	mov	r0, r6
 801b858:	f7e6 fc0a 	bl	8002070 <lv_event_get_param>
 801b85c:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 801b85e:	f7e6 fe79 	bl	8002554 <lv_indev_get_act>
 801b862:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b864:	f7e6 fe7c 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 801b868:	2804      	cmp	r0, #4
 801b86a:	d0b2      	beq.n	801b7d2 <lv_btnmatrix_event+0x2a>
 801b86c:	2802      	cmp	r0, #2
 801b86e:	d0b0      	beq.n	801b7d2 <lv_btnmatrix_event+0x2a>
        lv_indev_get_point(indev, &p);
 801b870:	4628      	mov	r0, r5
 801b872:	4669      	mov	r1, sp
 801b874:	f7e6 fecf 	bl	8002616 <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 801b878:	4669      	mov	r1, sp
 801b87a:	4620      	mov	r0, r4
 801b87c:	f7ff fcb4 	bl	801b1e8 <get_button_from_point>
        if(btn_pr != btnm->btn_id_sel) {
 801b880:	8e61      	ldrh	r1, [r4, #50]	; 0x32
        btn_pr = get_button_from_point(obj, &p);
 801b882:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 801b884:	4281      	cmp	r1, r0
 801b886:	d0a4      	beq.n	801b7d2 <lv_btnmatrix_event+0x2a>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b88c:	4299      	cmp	r1, r3
 801b88e:	d002      	beq.n	801b896 <lv_btnmatrix_event+0xee>
                invalidate_button_area(obj, btnm->btn_id_sel);
 801b890:	4620      	mov	r0, r4
 801b892:	f7ff fc5f 	bl	801b154 <invalidate_button_area>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801b896:	4630      	mov	r0, r6
            btnm->btn_id_sel = btn_pr;
 801b898:	8665      	strh	r5, [r4, #50]	; 0x32
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 801b89a:	f7e6 feaf 	bl	80025fc <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801b89e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8a2:	429d      	cmp	r5, r3
 801b8a4:	d095      	beq.n	801b7d2 <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b8a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801b8a8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 801b8ac:	0699      	lsls	r1, r3, #26
 801b8ae:	d490      	bmi.n	801b7d2 <lv_btnmatrix_event+0x2a>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 801b8b0:	071a      	lsls	r2, r3, #28
 801b8b2:	d48e      	bmi.n	801b7d2 <lv_btnmatrix_event+0x2a>
                invalidate_button_area(obj, btn_pr);
 801b8b4:	4629      	mov	r1, r5
 801b8b6:	4620      	mov	r0, r4
 801b8b8:	f7ff fc4c 	bl	801b154 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false) {
 801b8bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b8be:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false) {
 801b8c2:	05db      	lsls	r3, r3, #23
 801b8c4:	d485      	bmi.n	801b7d2 <lv_btnmatrix_event+0x2a>
                    uint32_t b = btn_pr;
 801b8c6:	9501      	str	r5, [sp, #4]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b8c8:	aa01      	add	r2, sp, #4
 801b8ca:	211c      	movs	r1, #28
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f7e6 fbab 	bl	8002028 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801b8d2:	e77e      	b.n	801b7d2 <lv_btnmatrix_event+0x2a>
    else if(code == LV_EVENT_RELEASED) {
 801b8d4:	2d08      	cmp	r5, #8
 801b8d6:	d145      	bne.n	801b964 <lv_btnmatrix_event+0x1bc>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b8d8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b8da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b8de:	429a      	cmp	r2, r3
 801b8e0:	d02c      	beq.n	801b93c <lv_btnmatrix_event+0x194>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 801b8e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801b8e4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 801b8e8:	065f      	lsls	r7, r3, #25
 801b8ea:	d514      	bpl.n	801b916 <lv_btnmatrix_event+0x16e>
 801b8ec:	069e      	lsls	r6, r3, #26
 801b8ee:	d412      	bmi.n	801b916 <lv_btnmatrix_event+0x16e>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 801b8f0:	061d      	lsls	r5, r3, #24
 801b8f2:	d534      	bpl.n	801b95e <lv_btnmatrix_event+0x1b6>
 801b8f4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801b8f8:	07c0      	lsls	r0, r0, #31
 801b8fa:	d430      	bmi.n	801b95e <lv_btnmatrix_event+0x1b6>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 801b8fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b900:	b29b      	uxth	r3, r3
 801b902:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 801b906:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801b90a:	07df      	lsls	r7, r3, #31
 801b90c:	d503      	bpl.n	801b916 <lv_btnmatrix_event+0x16e>
 801b90e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b910:	4620      	mov	r0, r4
 801b912:	f7ff ff34 	bl	801b77e <make_one_button_checked>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true &&
 801b916:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801b918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 801b91a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true &&
 801b91e:	05de      	lsls	r6, r3, #23
 801b920:	d50c      	bpl.n	801b93c <lv_btnmatrix_event+0x194>
 801b922:	069d      	lsls	r5, r3, #26
 801b924:	d40a      	bmi.n	801b93c <lv_btnmatrix_event+0x194>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b926:	0718      	lsls	r0, r3, #28
 801b928:	d408      	bmi.n	801b93c <lv_btnmatrix_event+0x194>
                uint32_t b = btnm->btn_id_sel;
 801b92a:	9201      	str	r2, [sp, #4]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 801b92c:	211c      	movs	r1, #28
 801b92e:	aa01      	add	r2, sp, #4
 801b930:	4620      	mov	r0, r4
 801b932:	f7e6 fb79 	bl	8002028 <lv_event_send>
                if(res != LV_RES_OK) return;
 801b936:	2801      	cmp	r0, #1
 801b938:	f47f af4b 	bne.w	801b7d2 <lv_btnmatrix_event+0x2a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b93c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801b93e:	4620      	mov	r0, r4
 801b940:	f7ff fc08 	bl	801b154 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801b944:	f7e6 fe06 	bl	8002554 <lv_indev_get_act>
 801b948:	f7e6 fe0a 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 801b94c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801b950:	2801      	cmp	r0, #1
 801b952:	f47f af3e 	bne.w	801b7d2 <lv_btnmatrix_event+0x2a>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 801b956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b95a:	8663      	strh	r3, [r4, #50]	; 0x32
 801b95c:	e739      	b.n	801b7d2 <lv_btnmatrix_event+0x2a>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 801b95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b962:	e7ce      	b.n	801b902 <lv_btnmatrix_event+0x15a>
    else if(code == LV_EVENT_LONG_PRESSED_REPEAT) {
 801b964:	2d06      	cmp	r5, #6
 801b966:	d10b      	bne.n	801b980 <lv_btnmatrix_event+0x1d8>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 801b968:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801b96a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b96e:	4293      	cmp	r3, r2
 801b970:	f43f af2f 	beq.w	801b7d2 <lv_btnmatrix_event+0x2a>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b974:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 801b976:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 801b97a:	f012 0f10 	tst.w	r2, #16
 801b97e:	e761      	b.n	801b844 <lv_btnmatrix_event+0x9c>
    else if(code == LV_EVENT_PRESS_LOST) {
 801b980:	2d03      	cmp	r5, #3
 801b982:	d103      	bne.n	801b98c <lv_btnmatrix_event+0x1e4>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801b984:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b986:	f7ff fbe5 	bl	801b154 <invalidate_button_area>
 801b98a:	e7e4      	b.n	801b956 <lv_btnmatrix_event+0x1ae>
    else if(code == LV_EVENT_FOCUSED) {
 801b98c:	2d0e      	cmp	r5, #14
 801b98e:	d132      	bne.n	801b9f6 <lv_btnmatrix_event+0x24e>
        lv_indev_t * indev = lv_event_get_param(e);
 801b990:	4630      	mov	r0, r6
 801b992:	f7e6 fb6d 	bl	8002070 <lv_event_get_param>
 801b996:	4606      	mov	r6, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801b998:	f7e6 fde2 	bl	8002560 <lv_indev_get_type>
 801b99c:	4605      	mov	r5, r0
        if(indev == NULL) {
 801b99e:	b92e      	cbnz	r6, 801b9ac <lv_btnmatrix_event+0x204>
            indev = lv_indev_get_next(NULL);
 801b9a0:	2000      	movs	r0, #0
 801b9a2:	f7fb f8ef 	bl	8016b84 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 801b9a6:	f7e6 fddb 	bl	8002560 <lv_indev_get_type>
 801b9aa:	4605      	mov	r5, r0
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 801b9ac:	4620      	mov	r0, r4
 801b9ae:	f7e8 fac7 	bl	8003f40 <lv_obj_get_group>
 801b9b2:	f7e6 fd5b 	bl	800246c <lv_group_get_editing>
        if(indev_type == LV_INDEV_TYPE_KEYPAD|| (indev_type == LV_INDEV_TYPE_ENCODER&& editing)) {
 801b9b6:	2d02      	cmp	r5, #2
 801b9b8:	d003      	beq.n	801b9c2 <lv_btnmatrix_event+0x21a>
 801b9ba:	2d04      	cmp	r5, #4
 801b9bc:	d1cb      	bne.n	801b956 <lv_btnmatrix_event+0x1ae>
 801b9be:	2800      	cmp	r0, #0
 801b9c0:	d0c9      	beq.n	801b956 <lv_btnmatrix_event+0x1ae>
            if(btnm->one_check) {
 801b9c2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 801b9c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b9c8:	f013 0301 	ands.w	r3, r3, #1
 801b9cc:	d111      	bne.n	801b9f2 <lv_btnmatrix_event+0x24a>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b9ce:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 801b9d2:	0710      	lsls	r0, r2, #28
 801b9d4:	d401      	bmi.n	801b9da <lv_btnmatrix_event+0x232>
 801b9d6:	0697      	lsls	r7, r2, #26
 801b9d8:	d5bf      	bpl.n	801b95a <lv_btnmatrix_event+0x1b2>
 801b9da:	3301      	adds	r3, #1
 801b9dc:	e7f7      	b.n	801b9ce <lv_btnmatrix_event+0x226>
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) || button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801b9de:	3301      	adds	r3, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801b9e0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) || button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 801b9e4:	0717      	lsls	r7, r2, #28
 801b9e6:	d4fa      	bmi.n	801b9de <lv_btnmatrix_event+0x236>
 801b9e8:	0696      	lsls	r6, r2, #26
 801b9ea:	d4f8      	bmi.n	801b9de <lv_btnmatrix_event+0x236>
 801b9ec:	0615      	lsls	r5, r2, #24
 801b9ee:	d5f6      	bpl.n	801b9de <lv_btnmatrix_event+0x236>
 801b9f0:	e7b3      	b.n	801b95a <lv_btnmatrix_event+0x1b2>
            uint32_t b = 0;
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	e7f4      	b.n	801b9e0 <lv_btnmatrix_event+0x238>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801b9f6:	f1a5 030f 	sub.w	r3, r5, #15
 801b9fa:	b2db      	uxtb	r3, r3
 801b9fc:	2b01      	cmp	r3, #1
 801b9fe:	d809      	bhi.n	801ba14 <lv_btnmatrix_event+0x26c>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 801ba00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba04:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801ba06:	4299      	cmp	r1, r3
 801ba08:	461d      	mov	r5, r3
 801ba0a:	d001      	beq.n	801ba10 <lv_btnmatrix_event+0x268>
 801ba0c:	f7ff fba2 	bl	801b154 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 801ba10:	8665      	strh	r5, [r4, #50]	; 0x32
 801ba12:	e6de      	b.n	801b7d2 <lv_btnmatrix_event+0x2a>
    else if(code == LV_EVENT_KEY) {
 801ba14:	2d0d      	cmp	r5, #13
 801ba16:	f040 80e3 	bne.w	801bbe0 <lv_btnmatrix_event+0x438>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801ba1a:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801ba1c:	f7ff fb9a 	bl	801b154 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 801ba20:	4630      	mov	r0, r6
 801ba22:	f7e6 fb25 	bl	8002070 <lv_event_get_param>
 801ba26:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 801ba28:	2b13      	cmp	r3, #19
 801ba2a:	d125      	bne.n	801ba78 <lv_btnmatrix_event+0x2d0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801ba2c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801ba2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801ba32:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801ba34:	2500      	movs	r5, #0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801ba36:	4293      	cmp	r3, r2
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801ba38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            else btnm->btn_id_sel++;
 801ba3a:	bf16      	itet	ne
 801ba3c:	3301      	addne	r3, #1
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 801ba3e:	2300      	moveq	r3, #0
            else btnm->btn_id_sel++;
 801ba40:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801ba42:	4299      	cmp	r1, r3
 801ba44:	8663      	strh	r3, [r4, #50]	; 0x32
 801ba46:	bf9c      	itt	ls
 801ba48:	2300      	movls	r3, #0
 801ba4a:	8663      	strhls	r3, [r4, #50]	; 0x32
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801ba4c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801ba4e:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801ba52:	0716      	lsls	r6, r2, #28
 801ba54:	d406      	bmi.n	801ba64 <lv_btnmatrix_event+0x2bc>
 801ba56:	0692      	lsls	r2, r2, #26
 801ba58:	d404      	bmi.n	801ba64 <lv_btnmatrix_event+0x2bc>
        invalidate_button_area(obj, btnm->btn_id_sel);
 801ba5a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	f7ff fb79 	bl	801b154 <invalidate_button_area>
 801ba62:	e6b6      	b.n	801b7d2 <lv_btnmatrix_event+0x2a>
                btnm->btn_id_sel++;
 801ba64:	3301      	adds	r3, #1
 801ba66:	b29b      	uxth	r3, r3
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801ba68:	4299      	cmp	r1, r3
                btnm->btn_id_sel++;
 801ba6a:	8663      	strh	r3, [r4, #50]	; 0x32
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801ba6c:	bf98      	it	ls
 801ba6e:	8665      	strhls	r5, [r4, #50]	; 0x32
 801ba70:	e7ec      	b.n	801ba4c <lv_btnmatrix_event+0x2a4>
 801ba72:	bf00      	nop
 801ba74:	08029d8c 	.word	0x08029d8c
        else if(c == LV_KEY_LEFT) {
 801ba78:	2b14      	cmp	r3, #20
 801ba7a:	d11b      	bne.n	801bab4 <lv_btnmatrix_event+0x30c>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 801ba7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba80:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801ba82:	429a      	cmp	r2, r3
 801ba84:	bf04      	itt	eq
 801ba86:	2300      	moveq	r3, #0
 801ba88:	8663      	strheq	r3, [r4, #50]	; 0x32
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801ba8a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801ba8c:	b903      	cbnz	r3, 801ba90 <lv_btnmatrix_event+0x2e8>
 801ba8e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ba90:	3b01      	subs	r3, #1
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801ba92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 801ba94:	b29b      	uxth	r3, r3
 801ba96:	8663      	strh	r3, [r4, #50]	; 0x32
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801ba98:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801ba9a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801ba9e:	0717      	lsls	r7, r2, #28
 801baa0:	d401      	bmi.n	801baa6 <lv_btnmatrix_event+0x2fe>
 801baa2:	0696      	lsls	r6, r2, #26
 801baa4:	d5d9      	bpl.n	801ba5a <lv_btnmatrix_event+0x2b2>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 801baa6:	b11b      	cbz	r3, 801bab0 <lv_btnmatrix_event+0x308>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 801baa8:	3b01      	subs	r3, #1
 801baaa:	b29b      	uxth	r3, r3
 801baac:	8663      	strh	r3, [r4, #50]	; 0x32
 801baae:	e7f3      	b.n	801ba98 <lv_btnmatrix_event+0x2f0>
 801bab0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801bab2:	e7f9      	b.n	801baa8 <lv_btnmatrix_event+0x300>
        else if(c == LV_KEY_DOWN) {
 801bab4:	2b12      	cmp	r3, #18
 801bab6:	d149      	bne.n	801bb4c <lv_btnmatrix_event+0x3a4>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801bab8:	4620      	mov	r0, r4
 801baba:	f7ff f989 	bl	801add0 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801babe:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801bac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d112      	bne.n	801baee <lv_btnmatrix_event+0x346>
                btnm->btn_id_sel = 0;
 801bac8:	2300      	movs	r3, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801baca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bacc:	461a      	mov	r2, r3
                btnm->btn_id_sel = 0;
 801bace:	8663      	strh	r3, [r4, #50]	; 0x32
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801bad0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801bad2:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801bad6:	070d      	lsls	r5, r1, #28
 801bad8:	d401      	bmi.n	801bade <lv_btnmatrix_event+0x336>
 801bada:	0689      	lsls	r1, r1, #26
 801badc:	d5bd      	bpl.n	801ba5a <lv_btnmatrix_event+0x2b2>
                    btnm->btn_id_sel++;
 801bade:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bae0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801bae2:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bae4:	4299      	cmp	r1, r3
                    btnm->btn_id_sel++;
 801bae6:	8663      	strh	r3, [r4, #50]	; 0x32
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bae8:	bf98      	it	ls
 801baea:	8662      	strhls	r2, [r4, #50]	; 0x32
 801baec:	e7f0      	b.n	801bad0 <lv_btnmatrix_event+0x328>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801baee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801baf0:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801baf4:	eb05 07c2 	add.w	r7, r5, r2, lsl #3
 801baf8:	f835 1032 	ldrh.w	r1, [r5, r2, lsl #3]
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801bafc:	f105 0e02 	add.w	lr, r5, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801bb00:	f105 0804 	add.w	r8, r5, #4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801bb04:	88bb      	ldrh	r3, [r7, #4]
 801bb06:	3301      	adds	r3, #1
 801bb08:	1a5b      	subs	r3, r3, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801bb0a:	f343 034e 	sbfx	r3, r3, #1, #15
 801bb0e:	440b      	add	r3, r1
 801bb10:	0051      	lsls	r1, r2, #1
                lv_coord_t pr_center =
 801bb12:	b21b      	sxth	r3, r3
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801bb14:	4594      	cmp	ip, r2
 801bb16:	d9a0      	bls.n	801ba5a <lv_btnmatrix_event+0x2b2>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 801bb18:	f93e 9021 	ldrsh.w	r9, [lr, r1, lsl #2]
 801bb1c:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 801bb20:	45b1      	cmp	r9, r6
 801bb22:	dd0f      	ble.n	801bb44 <lv_btnmatrix_event+0x39c>
 801bb24:	f935 6021 	ldrsh.w	r6, [r5, r1, lsl #2]
 801bb28:	429e      	cmp	r6, r3
 801bb2a:	dc0b      	bgt.n	801bb44 <lv_btnmatrix_event+0x39c>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801bb2c:	f938 6021 	ldrsh.w	r6, [r8, r1, lsl #2]
 801bb30:	4406      	add	r6, r0
                       pr_center >= btnm->button_areas[area_below].x1 &&
 801bb32:	42b3      	cmp	r3, r6
 801bb34:	dc06      	bgt.n	801bb44 <lv_btnmatrix_event+0x39c>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801bb36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801bb38:	5a76      	ldrh	r6, [r6, r1]
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 801bb3a:	f016 0f20 	tst.w	r6, #32
 801bb3e:	d101      	bne.n	801bb44 <lv_btnmatrix_event+0x39c>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 801bb40:	0736      	lsls	r6, r6, #28
 801bb42:	d554      	bpl.n	801bbee <lv_btnmatrix_event+0x446>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 801bb44:	3201      	adds	r2, #1
 801bb46:	3102      	adds	r1, #2
 801bb48:	b292      	uxth	r2, r2
 801bb4a:	e7e3      	b.n	801bb14 <lv_btnmatrix_event+0x36c>
        else if(c == LV_KEY_UP) {
 801bb4c:	2b11      	cmp	r3, #17
 801bb4e:	d184      	bne.n	801ba5a <lv_btnmatrix_event+0x2b2>
            lv_coord_t col_gap = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);
 801bb50:	4620      	mov	r0, r4
 801bb52:	f7ff f93d 	bl	801add0 <lv_obj_get_style_pad_column.constprop.0>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 801bb56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801bb58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb5c:	4293      	cmp	r3, r2
 801bb5e:	d113      	bne.n	801bb88 <lv_btnmatrix_event+0x3e0>
                btnm->btn_id_sel = 0;
 801bb60:	2300      	movs	r3, #0
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801bb62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bb64:	461a      	mov	r2, r3
                btnm->btn_id_sel = 0;
 801bb66:	8663      	strh	r3, [r4, #50]	; 0x32
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801bb68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 801bb6a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 801bb6e:	070d      	lsls	r5, r1, #28
 801bb70:	d402      	bmi.n	801bb78 <lv_btnmatrix_event+0x3d0>
 801bb72:	0689      	lsls	r1, r1, #26
 801bb74:	f57f af71 	bpl.w	801ba5a <lv_btnmatrix_event+0x2b2>
                    btnm->btn_id_sel++;
 801bb78:	3301      	adds	r3, #1
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bb7a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
                    btnm->btn_id_sel++;
 801bb7c:	b29b      	uxth	r3, r3
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bb7e:	4299      	cmp	r1, r3
                    btnm->btn_id_sel++;
 801bb80:	8663      	strh	r3, [r4, #50]	; 0x32
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 801bb82:	bf98      	it	ls
 801bb84:	8662      	strhls	r2, [r4, #50]	; 0x32
 801bb86:	e7ef      	b.n	801bb68 <lv_btnmatrix_event+0x3c0>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801bb88:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801bb8a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 801bb8e:	f835 1033 	ldrh.w	r1, [r5, r3, lsl #3]
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801bb92:	1caf      	adds	r7, r5, #2
 801bb94:	b21b      	sxth	r3, r3
 801bb96:	88b2      	ldrh	r2, [r6, #4]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801bb98:	f105 0c04 	add.w	ip, r5, #4
 801bb9c:	3201      	adds	r2, #1
 801bb9e:	1a52      	subs	r2, r2, r1
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 801bba0:	f342 024e 	sbfx	r2, r2, #1, #15
 801bba4:	440a      	add	r2, r1
                lv_coord_t pr_center =
 801bba6:	b212      	sxth	r2, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801bba8:	0419      	lsls	r1, r3, #16
 801bbaa:	f53f af56 	bmi.w	801ba5a <lv_btnmatrix_event+0x2b2>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801bbae:	f937 e033 	ldrsh.w	lr, [r7, r3, lsl #3]
 801bbb2:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 801bbb6:	458e      	cmp	lr, r1
 801bbb8:	da10      	bge.n	801bbdc <lv_btnmatrix_event+0x434>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801bbba:	f935 1033 	ldrsh.w	r1, [r5, r3, lsl #3]
 801bbbe:	1a09      	subs	r1, r1, r0
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 801bbc0:	428a      	cmp	r2, r1
 801bbc2:	db0b      	blt.n	801bbdc <lv_btnmatrix_event+0x434>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 801bbc4:	f93c 1033 	ldrsh.w	r1, [ip, r3, lsl #3]
 801bbc8:	4291      	cmp	r1, r2
 801bbca:	db07      	blt.n	801bbdc <lv_btnmatrix_event+0x434>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801bbcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 801bbce:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
                       pr_center <= btnm->button_areas[area_above].x2 &&
 801bbd2:	f011 0f20 	tst.w	r1, #32
 801bbd6:	d101      	bne.n	801bbdc <lv_btnmatrix_event+0x434>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 801bbd8:	0709      	lsls	r1, r1, #28
 801bbda:	d50a      	bpl.n	801bbf2 <lv_btnmatrix_event+0x44a>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 801bbdc:	3b01      	subs	r3, #1
 801bbde:	e7e3      	b.n	801bba8 <lv_btnmatrix_event+0x400>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801bbe0:	2d15      	cmp	r5, #21
 801bbe2:	f47f adf6 	bne.w	801b7d2 <lv_btnmatrix_event+0x2a>
        draw_main(e);
 801bbe6:	4630      	mov	r0, r6
 801bbe8:	f7ff f8fa 	bl	801ade0 <draw_main>
 801bbec:	e5f1      	b.n	801b7d2 <lv_btnmatrix_event+0x2a>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 801bbee:	8662      	strh	r2, [r4, #50]	; 0x32
 801bbf0:	e733      	b.n	801ba5a <lv_btnmatrix_event+0x2b2>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 801bbf2:	8663      	strh	r3, [r4, #50]	; 0x32
 801bbf4:	e731      	b.n	801ba5a <lv_btnmatrix_event+0x2b2>
 801bbf6:	bf00      	nop

0801bbf8 <lv_btnmatrix_set_one_checked>:
    btnm->one_check     = en;
 801bbf8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 801bbfc:	f361 0200 	bfi	r2, r1, #0, #1
    make_one_button_checked(obj, 0);
 801bc00:	2100      	movs	r1, #0
    btnm->one_check     = en;
 801bc02:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    make_one_button_checked(obj, 0);
 801bc06:	f7ff bdba 	b.w	801b77e <make_one_button_checked>
	...

0801bc0c <lv_checkbox_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    cb->txt = "Check box";
 801bc0c:	4b0c      	ldr	r3, [pc, #48]	; (801bc40 <lv_checkbox_constructor+0x34>)
{
 801bc0e:	b510      	push	{r4, lr}
    cb->txt = "Check box";
 801bc10:	624b      	str	r3, [r1, #36]	; 0x24
{
 801bc12:	460c      	mov	r4, r1
    cb->static_txt = 1;
 801bc14:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801bc18:	4620      	mov	r0, r4
    cb->static_txt = 1;
 801bc1a:	f043 0301 	orr.w	r3, r3, #1
 801bc1e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801bc22:	2102      	movs	r1, #2
 801bc24:	f7e8 f920 	bl	8003e68 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801bc28:	4620      	mov	r0, r4
 801bc2a:	2108      	movs	r1, #8
 801bc2c:	f7e8 f91c 	bl	8003e68 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801bc30:	4620      	mov	r0, r4
 801bc32:	f44f 7100 	mov.w	r1, #512	; 0x200

    LV_TRACE_OBJ_CREATE("finished");
}
 801bc36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801bc3a:	f7e8 b915 	b.w	8003e68 <lv_obj_add_flag>
 801bc3e:	bf00      	nop
 801bc40:	08029da8 	.word	0x08029da8

0801bc44 <lv_checkbox_destructor>:

static void lv_checkbox_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801bc44:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_checkbox_t * cb = (lv_checkbox_t *)obj;
    if(!cb->static_txt) {
 801bc46:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
{
 801bc4a:	460c      	mov	r4, r1
    if(!cb->static_txt) {
 801bc4c:	f013 0501 	ands.w	r5, r3, #1
 801bc50:	d103      	bne.n	801bc5a <lv_checkbox_destructor+0x16>
        lv_mem_free(cb->txt);
 801bc52:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801bc54:	f7fb fe5e 	bl	8017914 <lv_mem_free>
        cb->txt = NULL;
 801bc58:	6265      	str	r5, [r4, #36]	; 0x24
    }
    LV_TRACE_OBJ_CREATE("finished");
}
 801bc5a:	bd38      	pop	{r3, r4, r5, pc}

0801bc5c <lv_checkbox_event>:

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801bc60:	48c1      	ldr	r0, [pc, #772]	; (801bf68 <lv_checkbox_event+0x30c>)
{
 801bc62:	b0b7      	sub	sp, #220	; 0xdc
 801bc64:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801bc66:	f7e6 f968 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801bc6a:	2801      	cmp	r0, #1
 801bc6c:	d10e      	bne.n	801bc8c <lv_checkbox_event+0x30>

    lv_event_code_t code = lv_event_get_code(e);
 801bc6e:	4628      	mov	r0, r5
 801bc70:	f7e6 f9fc 	bl	800206c <lv_event_get_code>
 801bc74:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801bc76:	4628      	mov	r0, r5
 801bc78:	f7e6 f9f6 	bl	8002068 <lv_event_get_target>

    if (code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801bc7c:	2e01      	cmp	r6, #1
    lv_obj_t * obj = lv_event_get_target(e);
 801bc7e:	4604      	mov	r4, r0
    if (code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 801bc80:	d001      	beq.n	801bc86 <lv_checkbox_event+0x2a>
 801bc82:	2e08      	cmp	r6, #8
 801bc84:	d105      	bne.n	801bc92 <lv_checkbox_event+0x36>
       lv_obj_invalidate(obj);
 801bc86:	4620      	mov	r0, r4
 801bc88:	f7e9 faf6 	bl	8005278 <lv_obj_invalidate>

        lv_obj_invalidate(obj);
    } else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 801bc8c:	b037      	add	sp, #220	; 0xdc
 801bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (code == LV_EVENT_GET_SELF_SIZE) {
 801bc92:	2e26      	cmp	r6, #38	; 0x26
 801bc94:	d164      	bne.n	801bd60 <lv_checkbox_event+0x104>
        lv_point_t * p = lv_event_get_param(e);
 801bc96:	4628      	mov	r0, r5
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bc98:	f04f 0900 	mov.w	r9, #0
        lv_point_t * p = lv_event_get_param(e);
 801bc9c:	f7e6 f9e8 	bl	8002070 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bca0:	f241 4259 	movw	r2, #5209	; 0x1459
 801bca4:	4606      	mov	r6, r0
 801bca6:	2100      	movs	r1, #0
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f7eb fc0d 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bcae:	f241 425b 	movw	r2, #5211	; 0x145b
        lv_coord_t font_h = lv_font_get_line_height(font);
 801bcb2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bcb6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bcb8:	2100      	movs	r1, #0
 801bcba:	4620      	mov	r0, r4
 801bcbc:	f7eb fc04 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bcc0:	f241 425a 	movw	r2, #5210	; 0x145a
    return (lv_coord_t)v.num;
 801bcc4:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bcc8:	2100      	movs	r1, #0
 801bcca:	4620      	mov	r0, r4
 801bccc:	f7eb fbfc 	bl	80074c8 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bcd0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801bcd4:	462a      	mov	r2, r5
 801bcd6:	f8cd 8000 	str.w	r8, [sp]
 801bcda:	e9cd 3901 	strd	r3, r9, [sp, #4]
 801bcde:	b203      	sxth	r3, r0
 801bce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bce2:	a824      	add	r0, sp, #144	; 0x90
 801bce4:	f7fd fd27 	bl	8019736 <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bce8:	4649      	mov	r1, r9
 801bcea:	f241 0215 	movw	r2, #4117	; 0x1015
 801bcee:	4620      	mov	r0, r4
 801bcf0:	f7eb fbea 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bcf4:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bcf8:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bcfa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bcfe:	4620      	mov	r0, r4
 801bd00:	f7eb fbe2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bd04:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bd08:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bd0a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bd0e:	4620      	mov	r0, r4
 801bd10:	f7eb fbda 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bd14:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bd18:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bd1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bd1e:	4620      	mov	r0, r4
 801bd20:	f7eb fbd2 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bd24:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bd28:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801bd2a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bd2e:	4620      	mov	r0, r4
 801bd30:	f7eb fbca 	bl	80074c8 <lv_obj_get_style_prop>
        p->x = marker_size.x + txt_size.x + bg_colp;
 801bd34:	eb05 030a 	add.w	r3, r5, sl
 801bd38:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801bd3c:	442b      	add	r3, r5
 801bd3e:	eb03 0509 	add.w	r5, r3, r9
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801bd42:	eb08 0300 	add.w	r3, r8, r0
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801bd46:	f9bd 0092 	ldrsh.w	r0, [sp, #146]	; 0x92
        marker_size.y = font_h + marker_topp + marker_bottomp;
 801bd4a:	fa13 f387 	uxtah	r3, r3, r7
        p->x = marker_size.x + txt_size.x + bg_colp;
 801bd4e:	fa15 f587 	uxtah	r5, r5, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801bd52:	b21b      	sxth	r3, r3
        p->x = marker_size.x + txt_size.x + bg_colp;
 801bd54:	8035      	strh	r5, [r6, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 801bd56:	4283      	cmp	r3, r0
 801bd58:	bfb8      	it	lt
 801bd5a:	4603      	movlt	r3, r0
 801bd5c:	8073      	strh	r3, [r6, #2]
 801bd5e:	e795      	b.n	801bc8c <lv_checkbox_event+0x30>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801bd60:	2e13      	cmp	r6, #19
 801bd62:	d10f      	bne.n	801bd84 <lv_checkbox_event+0x128>
        lv_coord_t *s = lv_event_get_param(e);
 801bd64:	4628      	mov	r0, r5
 801bd66:	f7e6 f983 	bl	8002070 <lv_event_get_param>
 801bd6a:	4605      	mov	r5, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 801bd6c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bd70:	4620      	mov	r0, r4
 801bd72:	f7e8 ff18 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 801bd76:	f9b5 3000 	ldrsh.w	r3, [r5]
 801bd7a:	4298      	cmp	r0, r3
 801bd7c:	bfb8      	it	lt
 801bd7e:	4618      	movlt	r0, r3
 801bd80:	8028      	strh	r0, [r5, #0]
 801bd82:	e783      	b.n	801bc8c <lv_checkbox_event+0x30>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801bd84:	2e15      	cmp	r6, #21
 801bd86:	d181      	bne.n	801bc8c <lv_checkbox_event+0x30>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801bd88:	4628      	mov	r0, r5
 801bd8a:	f7e6 f96d 	bl	8002068 <lv_event_get_target>
 801bd8e:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    const lv_area_t * clip_area = lv_event_get_param(e);
 801bd90:	4628      	mov	r0, r5

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 801bd92:	ad17      	add	r5, sp, #92	; 0x5c
    const lv_area_t * clip_area = lv_event_get_param(e);
 801bd94:	f7e6 f96c 	bl	8002070 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bd98:	f241 4259 	movw	r2, #5209	; 0x1459
 801bd9c:	4681      	mov	r9, r0
 801bd9e:	2100      	movs	r1, #0
 801bda0:	4620      	mov	r0, r4
 801bda2:	f7eb fb91 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bda6:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_coord_t font_h = lv_font_get_line_height(font);
 801bdaa:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bdae:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bdb0:	2100      	movs	r1, #0
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	f7eb fb88 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bdb8:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bdbc:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bdbe:	2100      	movs	r1, #0
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	f7eb fb81 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bdc6:	f241 0215 	movw	r2, #4117	; 0x1015
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bdca:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bdcc:	2100      	movs	r1, #0
 801bdce:	4620      	mov	r0, r4
 801bdd0:	f7eb fb7a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bdd4:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bdd8:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bdda:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bdde:	4620      	mov	r0, r4
 801bde0:	f7eb fb72 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bde4:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bde8:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bdea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bdee:	4620      	mov	r0, r4
 801bdf0:	f7eb fb6a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bdf4:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bdf8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bdfa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bdfe:	4620      	mov	r0, r4
 801be00:	f7eb fb62 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801be04:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801be08:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801be0a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801be0e:	4620      	mov	r0, r4
 801be10:	f7eb fb5a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801be14:	f640 020a 	movw	r2, #2058	; 0x80a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801be18:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801be1a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801be1e:	4620      	mov	r0, r4
 801be20:	f7eb fb52 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801be24:	f640 020b 	movw	r2, #2059	; 0x80b
 801be28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801be2c:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801be2e:	4620      	mov	r0, r4
 801be30:	f7eb fb4a 	bl	80074c8 <lv_obj_get_style_prop>
 801be34:	9008      	str	r0, [sp, #32]
    lv_draw_rect_dsc_init(&indic_dsc);
 801be36:	4628      	mov	r0, r5
 801be38:	f7f0 fed6 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 801be3c:	462a      	mov	r2, r5
 801be3e:	4620      	mov	r0, r4
 801be40:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801be44:	f7e8 fc3c 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801be48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801be4a:	8ae0      	ldrh	r0, [r4, #22]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801be4c:	19da      	adds	r2, r3, r7
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801be4e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 801be52:	9b04      	ldr	r3, [sp, #16]
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801be54:	b2b7      	uxth	r7, r6
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801be56:	3a01      	subs	r2, #1
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801be58:	fa10 f686 	uxtah	r6, r0, r6
 801be5c:	9806      	ldr	r0, [sp, #24]
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 801be5e:	44c4      	add	ip, r8
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801be60:	fa12 f28b 	uxtah	r2, r2, fp
    marker_area.y1 = obj->coords.y1 + bg_topp;
 801be64:	b2b6      	uxth	r6, r6
 801be66:	4403      	add	r3, r0
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 801be68:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801be6c:	fa12 f28c 	uxtah	r2, r2, ip
 801be70:	1e59      	subs	r1, r3, #1
    marker_area_transf.x1 -= transf_w;
 801be72:	ebac 0c00 	sub.w	ip, ip, r0
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 801be76:	fa1f f882 	uxth.w	r8, r2
    marker_area_transf.x2 += transf_w;
 801be7a:	fa10 f282 	uxtah	r2, r0, r2
 801be7e:	fa11 f18b 	uxtah	r1, r1, fp
    marker_area_transf.y1 -= transf_h;
 801be82:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    marker_area_transf.x2 += transf_w;
 801be86:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801be8a:	b28b      	uxth	r3, r1
    marker_area_transf.y2 += transf_h;
 801be8c:	fa10 f181 	uxtah	r1, r0, r1
    marker_area_transf.y1 -= transf_h;
 801be90:	1a32      	subs	r2, r6, r0

    lv_obj_draw_part_dsc_t obj_draw_dsc;
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801be92:	a824      	add	r0, sp, #144	; 0x90
    marker_area_transf.y2 += transf_h;
 801be94:	440e      	add	r6, r1
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801be96:	4649      	mov	r1, r9
    marker_area_transf.x1 -= transf_w;
 801be98:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801be9c:	9304      	str	r3, [sp, #16]
    marker_area_transf.y1 -= transf_h;
 801be9e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    marker_area_transf.y2 += transf_h;
 801bea2:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
    lv_obj_draw_dsc_init(&obj_draw_dsc, clip_area);
 801bea6:	f7e8 feef 	bl	8004c88 <lv_obj_draw_dsc_init>
    obj_draw_dsc.rect_dsc = &indic_dsc;
    obj_draw_dsc.draw_area = &marker_area_transf;
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801beaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    obj_draw_dsc.draw_area = &marker_area_transf;
 801beae:	ae0b      	add	r6, sp, #44	; 0x2c

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801beb0:	211a      	movs	r1, #26
 801beb2:	4620      	mov	r0, r4
    obj_draw_dsc.part = LV_PART_INDICATOR;
 801beb4:	9231      	str	r2, [sp, #196]	; 0xc4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801beb6:	aa24      	add	r2, sp, #144	; 0x90
    obj_draw_dsc.rect_dsc = &indic_dsc;
 801beb8:	9526      	str	r5, [sp, #152]	; 0x98
    obj_draw_dsc.draw_area = &marker_area_transf;
 801beba:	9625      	str	r6, [sp, #148]	; 0x94
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &obj_draw_dsc);
 801bebc:	f7e6 f8b4 	bl	8002028 <lv_event_send>
    lv_draw_rect(&marker_area_transf, clip_area, &indic_dsc);
 801bec0:	462a      	mov	r2, r5
 801bec2:	4649      	mov	r1, r9
 801bec4:	4630      	mov	r0, r6

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bec6:	2600      	movs	r6, #0
    lv_draw_rect(&marker_area_transf, clip_area, &indic_dsc);
 801bec8:	f7f0 feb0 	bl	800cc2c <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &obj_draw_dsc);
 801becc:	aa24      	add	r2, sp, #144	; 0x90
 801bece:	211b      	movs	r1, #27
 801bed0:	4620      	mov	r0, r4
 801bed2:	f7e6 f8a9 	bl	8002028 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bed6:	f241 425b 	movw	r2, #5211	; 0x145b
 801beda:	2100      	movs	r1, #0
 801bedc:	4620      	mov	r0, r4
 801bede:	f7eb faf3 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bee2:	f241 425a 	movw	r2, #5210	; 0x145a
    return (lv_coord_t)v.num;
 801bee6:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801bee8:	2100      	movs	r1, #0
 801beea:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801beec:	461d      	mov	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801beee:	f7eb faeb 	bl	80074c8 <lv_obj_get_style_prop>
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801bef2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801bef6:	4652      	mov	r2, sl
 801bef8:	9500      	str	r5, [sp, #0]
 801befa:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801befe:	b203      	sxth	r3, r0
 801bf00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bf02:	a80a      	add	r0, sp, #40	; 0x28
 801bf04:	f7fd fc17 	bl	8019736 <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 801bf08:	a80f      	add	r0, sp, #60	; 0x3c
 801bf0a:	f7ee fbb9 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 801bf0e:	aa0f      	add	r2, sp, #60	; 0x3c
 801bf10:	4631      	mov	r1, r6
 801bf12:	4620      	mov	r0, r4
 801bf14:	f7e8 fd10 	bl	8004938 <lv_obj_init_draw_label_dsc>

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 801bf18:	9b05      	ldr	r3, [sp, #20]
    txt_area.x2 = txt_area.x1 + txt_size.x;
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
    txt_area.y2 = txt_area.y1 + txt_size.y;

    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bf1a:	aa0f      	add	r2, sp, #60	; 0x3c
 801bf1c:	4649      	mov	r1, r9
    txt_area.x1 = marker_area.x2 + bg_colp;
 801bf1e:	4498      	add	r8, r3
    txt_area.x2 = txt_area.x1 + txt_size.x;
 801bf20:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bf24:	a80d      	add	r0, sp, #52	; 0x34
    txt_area.x1 = marker_area.x2 + bg_colp;
 801bf26:	fa1f f888 	uxth.w	r8, r8
 801bf2a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    txt_area.x2 = txt_area.x1 + txt_size.x;
 801bf2e:	4498      	add	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801bf30:	9b04      	ldr	r3, [sp, #16]
 801bf32:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 801bf36:	1c5d      	adds	r5, r3, #1
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801bf38:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 801bf3c:	b22d      	sxth	r5, r5
 801bf3e:	eba5 0b0b 	sub.w	fp, r5, fp
 801bf42:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 801bf46:	eb07 076b 	add.w	r7, r7, fp, asr #1
 801bf4a:	f8b4 b016 	ldrh.w	fp, [r4, #22]
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bf4e:	9600      	str	r6, [sp, #0]
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 801bf50:	445f      	add	r7, fp
 801bf52:	b2bf      	uxth	r7, r7
 801bf54:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801bf58:	441f      	add	r7, r3
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bf5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    txt_area.y2 = txt_area.y1 + txt_size.y;
 801bf5c:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
    lv_draw_label(&txt_area, clip_area, &txt_dsc, cb->txt, NULL);
 801bf60:	f7ee fd66 	bl	800aa30 <lv_draw_label>
}
 801bf64:	e692      	b.n	801bc8c <lv_checkbox_event+0x30>
 801bf66:	bf00      	nop
 801bf68:	08029db4 	.word	0x08029db4

0801bf6c <lv_dropdownlist_destructor>:
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 801bf6c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801bf6e:	2200      	movs	r2, #0
 801bf70:	625a      	str	r2, [r3, #36]	; 0x24
}
 801bf72:	4770      	bx	lr

0801bf74 <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 801bf74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801bf76:	b110      	cbz	r0, 801bf7e <get_label+0xa>

    return lv_obj_get_child(dropdown->list, 0);
 801bf78:	2100      	movs	r1, #0
 801bf7a:	f7eb bdf2 	b.w	8007b62 <lv_obj_get_child>
}
 801bf7e:	4770      	bx	lr

0801bf80 <lv_dropdownlist_constructor>:
{
 801bf80:	b507      	push	{r0, r1, r2, lr}
 801bf82:	4608      	mov	r0, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801bf84:	f44f 7100 	mov.w	r1, #512	; 0x200
 801bf88:	9001      	str	r0, [sp, #4]
 801bf8a:	f7e7 ff90 	bl	8003eae <lv_obj_clear_flag>
    lv_label_create(obj);
 801bf8e:	9801      	ldr	r0, [sp, #4]
}
 801bf90:	b003      	add	sp, #12
 801bf92:	f85d eb04 	ldr.w	lr, [sp], #4
    lv_label_create(obj);
 801bf96:	f001 bedf 	b.w	801dd58 <lv_label_create>

0801bf9a <lv_dropdown_destructor>:
    if(dropdown->list) {
 801bf9a:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 801bf9c:	b538      	push	{r3, r4, r5, lr}
 801bf9e:	460c      	mov	r4, r1
    if(dropdown->list) {
 801bfa0:	b118      	cbz	r0, 801bfaa <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 801bfa2:	f7eb fe9d 	bl	8007ce0 <lv_obj_del>
        dropdown->list = NULL;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 801bfaa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801bfae:	f013 0510 	ands.w	r5, r3, #16
 801bfb2:	d103      	bne.n	801bfbc <lv_dropdown_destructor+0x22>
        lv_mem_free(dropdown->options);
 801bfb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bfb6:	f7fb fcad 	bl	8017914 <lv_mem_free>
        dropdown->options = NULL;
 801bfba:	6325      	str	r5, [r4, #48]	; 0x30
}
 801bfbc:	bd38      	pop	{r3, r4, r5, pc}

0801bfbe <get_id_on_point>:
{
 801bfbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfc2:	4606      	mov	r6, r0
 801bfc4:	460d      	mov	r5, r1
    lv_obj_t * label = get_label(dropdown_obj);
 801bfc6:	f7ff ffd5 	bl	801bf74 <get_label>
    if(label == NULL) return 0;
 801bfca:	4604      	mov	r4, r0
 801bfcc:	b308      	cbz	r0, 801c012 <get_id_on_point+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801bfce:	f241 4259 	movw	r2, #5209	; 0x1459
 801bfd2:	2100      	movs	r1, #0
    y -= label->coords.y1;
 801bfd4:	f8b0 8016 	ldrh.w	r8, [r0, #22]
 801bfd8:	f7eb fa76 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801bfdc:	f241 425b 	movw	r2, #5211	; 0x145b
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801bfe0:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801bfe4:	2100      	movs	r1, #0
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	f7eb fa6e 	bl	80074c8 <lv_obj_get_style_prop>
    y += line_space / 2;
 801bfec:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801bff0:	fa04 f480 	sxtah	r4, r4, r0
    lv_coord_t h = font_h + line_space;
 801bff4:	4438      	add	r0, r7
    y += line_space / 2;
 801bff6:	eb05 0464 	add.w	r4, r5, r4, asr #1
    uint16_t opt = y / h;
 801bffa:	b200      	sxth	r0, r0
    y += line_space / 2;
 801bffc:	eba4 0408 	sub.w	r4, r4, r8
    uint16_t opt = y / h;
 801c000:	b224      	sxth	r4, r4
 801c002:	fb94 f4f0 	sdiv	r4, r4, r0
 801c006:	b2a0      	uxth	r0, r4
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 801c008:	8eb4      	ldrh	r4, [r6, #52]	; 0x34
 801c00a:	4284      	cmp	r4, r0
 801c00c:	d801      	bhi.n	801c012 <get_id_on_point+0x54>
 801c00e:	3c01      	subs	r4, #1
 801c010:	b2a0      	uxth	r0, r4
}
 801c012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c016 <draw_box>:
{
 801c016:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c01a:	4693      	mov	fp, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 801c01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801c020:	b093      	sub	sp, #76	; 0x4c
 801c022:	4606      	mov	r6, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 801c024:	4593      	cmp	fp, r2
{
 801c026:	460f      	mov	r7, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 801c028:	d053      	beq.n	801c0d2 <draw_box+0xbc>
    lv_obj_t * list_obj = dropdown->list;
 801c02a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c02c:	f241 4259 	movw	r2, #5209	; 0x1459
 801c030:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_state_t state_ori = list_obj->state;
 801c034:	f8b5 8020 	ldrh.w	r8, [r5, #32]
 801c038:	4628      	mov	r0, r5
    if(state != list_obj->state) {
 801c03a:	4598      	cmp	r8, r3
        list_obj->state = state;
 801c03c:	bf1f      	itttt	ne
 801c03e:	842b      	strhne	r3, [r5, #32]
        list_obj->skip_trans = 1;
 801c040:	f895 3022 	ldrbne.w	r3, [r5, #34]	; 0x22
 801c044:	f043 0304 	orrne.w	r3, r3, #4
 801c048:	f885 3022 	strbne.w	r3, [r5, #34]	; 0x22
 801c04c:	f7eb fa3c 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c050:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c054:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c056:	f241 425b 	movw	r2, #5211	; 0x145b
 801c05a:	4628      	mov	r0, r5
 801c05c:	f7eb fa34 	bl	80074c8 <lv_obj_get_style_prop>
 801c060:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801c062:	b203      	sxth	r3, r0
    lv_obj_t * label = get_label(dropdown_obj);
 801c064:	4630      	mov	r0, r6
    lv_coord_t font_h         = lv_font_get_line_height(font);
 801c066:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801c06a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c06e:	9301      	str	r3, [sp, #4]
    lv_obj_t * label = get_label(dropdown_obj);
 801c070:	f7ff ff80 	bl	801bf74 <get_label>
    rect_area.y1 += id * (font_h + line_space);
 801c074:	9b01      	ldr	r3, [sp, #4]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801c076:	44d1      	add	r9, sl
    rect_area.y1 += id * (font_h + line_space);
 801c078:	eb0a 0403 	add.w	r4, sl, r3
    rect_area.y1 -= line_space / 2;
 801c07c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    rect_area.y1 += id * (font_h + line_space);
 801c080:	fb14 f20b 	smulbb	r2, r4, fp
    rect_area.y1 -= line_space / 2;
 801c084:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 801c088:	8ac2      	ldrh	r2, [r0, #22]
    lv_draw_rect_dsc_init(&sel_rect);
 801c08a:	a805      	add	r0, sp, #20
    rect_area.y1 -= line_space / 2;
 801c08c:	4413      	add	r3, r2
 801c08e:	b29b      	uxth	r3, r3
 801c090:	f8ad 300e 	strh.w	r3, [sp, #14]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801c094:	444b      	add	r3, r9
 801c096:	f8ad 3012 	strh.w	r3, [sp, #18]
    rect_area.x1 = dropdown->list->coords.x1;
 801c09a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c09c:	8a9a      	ldrh	r2, [r3, #20]
    rect_area.x2 = dropdown->list->coords.x2;
 801c09e:	8b1b      	ldrh	r3, [r3, #24]
    rect_area.x1 = dropdown->list->coords.x1;
 801c0a0:	f8ad 200c 	strh.w	r2, [sp, #12]
    rect_area.x2 = dropdown->list->coords.x2;
 801c0a4:	f8ad 3010 	strh.w	r3, [sp, #16]
    lv_draw_rect_dsc_init(&sel_rect);
 801c0a8:	f7f0 fd9e 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 801c0ac:	aa05      	add	r2, sp, #20
 801c0ae:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801c0b2:	4628      	mov	r0, r5
 801c0b4:	f7e8 fb04 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(&rect_area, clip_area, &sel_rect);
 801c0b8:	aa05      	add	r2, sp, #20
 801c0ba:	4639      	mov	r1, r7
 801c0bc:	a803      	add	r0, sp, #12
 801c0be:	f7f0 fdb5 	bl	800cc2c <lv_draw_rect>
    list_obj->skip_trans = 0;
 801c0c2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    list_obj->state = state_ori;
 801c0c6:	f8a5 8020 	strh.w	r8, [r5, #32]
    list_obj->skip_trans = 0;
 801c0ca:	f36f 0382 	bfc	r3, #2, #1
 801c0ce:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 801c0d2:	b013      	add	sp, #76	; 0x4c
 801c0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0d8 <draw_box_label>:
{
 801c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0dc:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 801c0de:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 801c0e2:	b08e      	sub	sp, #56	; 0x38
 801c0e4:	4605      	mov	r5, r0
    if(id == LV_DROPDOWN_PR_NONE) return;
 801c0e6:	4590      	cmp	r8, r2
{
 801c0e8:	460e      	mov	r6, r1
    if(id == LV_DROPDOWN_PR_NONE) return;
 801c0ea:	d058      	beq.n	801c19e <draw_box_label+0xc6>
    lv_obj_t * list_obj = dropdown->list;
 801c0ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
    lv_draw_label_dsc_init(&label_dsc);
 801c0ee:	a806      	add	r0, sp, #24
    lv_state_t state_orig = list_obj->state;
 801c0f0:	8c27      	ldrh	r7, [r4, #32]
    if(state != list_obj->state) {
 801c0f2:	429f      	cmp	r7, r3
        list_obj->state =  state;
 801c0f4:	bf1f      	itttt	ne
 801c0f6:	8423      	strhne	r3, [r4, #32]
        list_obj->skip_trans = 1;
 801c0f8:	f894 3022 	ldrbne.w	r3, [r4, #34]	; 0x22
 801c0fc:	f043 0304 	orrne.w	r3, r3, #4
 801c100:	f884 3022 	strbne.w	r3, [r4, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 801c104:	f7ee fabc 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 801c108:	aa06      	add	r2, sp, #24
 801c10a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801c10e:	4620      	mov	r0, r4
 801c110:	f7e8 fc12 	bl	8004938 <lv_obj_init_draw_label_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c114:	f241 425b 	movw	r2, #5211	; 0x145b
 801c118:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801c11c:	4620      	mov	r0, r4
 801c11e:	f7eb f9d3 	bl	80074c8 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj, LV_PART_SELECTED);  /*Line space should come from the list*/
 801c122:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 801c126:	4628      	mov	r0, r5
 801c128:	f7ff ff24 	bl	801bf74 <get_label>
    if(label == NULL) return;
 801c12c:	4605      	mov	r5, r0
 801c12e:	2800      	cmp	r0, #0
 801c130:	d035      	beq.n	801c19e <draw_box_label+0xc6>
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 801c132:	9b06      	ldr	r3, [sp, #24]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801c134:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 801c138:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
    area_sel.y1 -= label_dsc.line_space / 2;
 801c13c:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801c140:	eb0c 0100 	add.w	r1, ip, r0
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801c144:	3801      	subs	r0, #1
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 801c146:	fb11 f208 	smulbb	r2, r1, r8
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801c14a:	4460      	add	r0, ip
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801c14c:	4631      	mov	r1, r6
    area_sel.y1 -= label_dsc.line_space / 2;
 801c14e:	eba2 0363 	sub.w	r3, r2, r3, asr #1
 801c152:	8aea      	ldrh	r2, [r5, #22]
 801c154:	4413      	add	r3, r2
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801c156:	aa02      	add	r2, sp, #8
    area_sel.y1 -= label_dsc.line_space / 2;
 801c158:	b29b      	uxth	r3, r3
 801c15a:	f8ad 300a 	strh.w	r3, [sp, #10]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801c15e:	4403      	add	r3, r0
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801c160:	a804      	add	r0, sp, #16
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 801c162:	f8ad 300e 	strh.w	r3, [sp, #14]
    area_sel.x1 = list_obj->coords.x1;
 801c166:	8aa3      	ldrh	r3, [r4, #20]
 801c168:	f8ad 3008 	strh.w	r3, [sp, #8]
    area_sel.x2 = list_obj->coords.x2;
 801c16c:	8b23      	ldrh	r3, [r4, #24]
 801c16e:	f8ad 300c 	strh.w	r3, [sp, #12]
    area_ok = _lv_area_intersect(&mask_sel, clip_area, &area_sel);
 801c172:	f7fa ff80 	bl	8017076 <_lv_area_intersect>
    if(area_ok) {
 801c176:	b158      	cbz	r0, 801c190 <draw_box_label+0xb8>
        lv_draw_label(&label->coords, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801c178:	4628      	mov	r0, r5
 801c17a:	f001 feab 	bl	801ded4 <lv_label_get_text>
 801c17e:	2200      	movs	r2, #0
 801c180:	4603      	mov	r3, r0
 801c182:	a904      	add	r1, sp, #16
 801c184:	9200      	str	r2, [sp, #0]
 801c186:	f105 0014 	add.w	r0, r5, #20
 801c18a:	aa06      	add	r2, sp, #24
 801c18c:	f7ee fc50 	bl	800aa30 <lv_draw_label>
    list_obj->skip_trans = 0;
 801c190:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    list_obj->state = state_orig;
 801c194:	8427      	strh	r7, [r4, #32]
    list_obj->skip_trans = 0;
 801c196:	f36f 0382 	bfc	r3, #2, #1
 801c19a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 801c19e:	b00e      	add	sp, #56	; 0x38
 801c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c1a4 <position_to_selected>:
{
 801c1a4:	b570      	push	{r4, r5, r6, lr}
 801c1a6:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 801c1a8:	f7ff fee4 	bl	801bf74 <get_label>
    if(label == NULL) return;
 801c1ac:	4605      	mov	r5, r0
 801c1ae:	b318      	cbz	r0, 801c1f8 <position_to_selected+0x54>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 801c1b0:	f7e8 ff13 	bl	8004fda <lv_obj_get_height>
 801c1b4:	4606      	mov	r6, r0
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	f7e8 ff2f 	bl	800501a <lv_obj_get_content_height>
 801c1bc:	4286      	cmp	r6, r0
 801c1be:	dd1b      	ble.n	801c1f8 <position_to_selected+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c1c0:	f241 4259 	movw	r2, #5209	; 0x1459
 801c1c4:	2100      	movs	r1, #0
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	f7eb f97e 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801c1cc:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801c1d0:	f241 425b 	movw	r2, #5211	; 0x145b
 801c1d4:	2100      	movs	r1, #0
 801c1d6:	4628      	mov	r0, r5
 801c1d8:	f7eb f976 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 801c1dc:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    lv_coord_t unit_h = font_h + line_space;
 801c1de:	4430      	add	r0, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 801c1e0:	2200      	movs	r2, #0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 801c1e2:	fb11 f100 	smulbb	r1, r1, r0
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 801c1e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c1e8:	b209      	sxth	r1, r1
 801c1ea:	f7ea fa89 	bl	8006700 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 801c1ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
 801c1f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(dropdown->list);
 801c1f4:	f7e9 b840 	b.w	8005278 <lv_obj_invalidate>
}
 801c1f8:	bd70      	pop	{r4, r5, r6, pc}

0801c1fa <lv_dropdown_set_options_static>:
{
 801c1fa:	b538      	push	{r3, r4, r5, lr}
 801c1fc:	4604      	mov	r4, r0
    LV_ASSERT_NULL(options);
 801c1fe:	460d      	mov	r5, r1
 801c200:	b901      	cbnz	r1, 801c204 <lv_dropdown_set_options_static+0xa>
 801c202:	e7fe      	b.n	801c202 <lv_dropdown_set_options_static+0x8>
    dropdown->option_cnt = 0;
 801c204:	2300      	movs	r3, #0
 801c206:	3901      	subs	r1, #1
 801c208:	8683      	strh	r3, [r0, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801c20a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c20c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c210:	3301      	adds	r3, #1
 801c212:	b29b      	uxth	r3, r3
 801c214:	b992      	cbnz	r2, 801c23c <lv_dropdown_set_options_static+0x42>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 801c216:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801c218:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 801c21c:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801c21e:	06db      	lsls	r3, r3, #27
    dropdown->sel_opt_id_orig = 0;
 801c220:	8722      	strh	r2, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801c222:	d403      	bmi.n	801c22c <lv_dropdown_set_options_static+0x32>
 801c224:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c226:	b108      	cbz	r0, 801c22c <lv_dropdown_set_options_static+0x32>
        lv_mem_free(dropdown->options);
 801c228:	f7fb fb74 	bl	8017914 <lv_mem_free>
    dropdown->static_txt = 1;
 801c22c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    dropdown->options = (char *)options;
 801c230:	6325      	str	r5, [r4, #48]	; 0x30
    dropdown->static_txt = 1;
 801c232:	f043 0310 	orr.w	r3, r3, #16
 801c236:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 801c23a:	bd38      	pop	{r3, r4, r5, pc}
        if(options[i] == '\n') dropdown->option_cnt++;
 801c23c:	2a0a      	cmp	r2, #10
 801c23e:	bf08      	it	eq
 801c240:	86a3      	strheq	r3, [r4, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801c242:	e7e2      	b.n	801c20a <lv_dropdown_set_options_static+0x10>

0801c244 <lv_dropdown_constructor>:
    dropdown->list          = NULL;
 801c244:	2300      	movs	r3, #0
    dropdown->symbol         = LV_SYMBOL_DOWN;
 801c246:	4a0f      	ldr	r2, [pc, #60]	; (801c284 <lv_dropdown_constructor+0x40>)
{
 801c248:	b510      	push	{r4, lr}
    dropdown->list          = NULL;
 801c24a:	624b      	str	r3, [r1, #36]	; 0x24
{
 801c24c:	460c      	mov	r4, r1
    dropdown->text         = NULL;
 801c24e:	e9c1 320a 	strd	r3, r2, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 801c252:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
    dropdown->sel_opt_id_orig = 0;
 801c256:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801c25a:	4620      	mov	r0, r4
    dropdown->sel_opt_id_orig = 0;
 801c25c:	638b      	str	r3, [r1, #56]	; 0x38
    dropdown->dir = LV_DIR_BOTTOM;
 801c25e:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 801c262:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801c266:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801c26a:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801c26e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c272:	f7e7 fdf9 	bl	8003e68 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801c276:	4620      	mov	r0, r4
 801c278:	4903      	ldr	r1, [pc, #12]	; (801c288 <lv_dropdown_constructor+0x44>)
}
 801c27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801c27e:	f7ff bfbc 	b.w	801c1fa <lv_dropdown_set_options_static>
 801c282:	bf00      	nop
 801c284:	08029dd0 	.word	0x08029dd0
 801c288:	08029dd4 	.word	0x08029dd4

0801c28c <lv_dropdown_get_selected_str>:
{
 801c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t txt_len     = strlen(dropdown->options);
 801c290:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
{
 801c294:	4605      	mov	r5, r0
 801c296:	460e      	mov	r6, r1
 801c298:	4617      	mov	r7, r2
    size_t txt_len     = strlen(dropdown->options);
 801c29a:	4640      	mov	r0, r8
 801c29c:	f7e3 ffc2 	bl	8000224 <strlen>
    uint32_t line        = 0;
 801c2a0:	2300      	movs	r3, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801c2a2:	461c      	mov	r4, r3
 801c2a4:	4284      	cmp	r4, r0
 801c2a6:	d01d      	beq.n	801c2e4 <lv_dropdown_get_selected_str+0x58>
 801c2a8:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 801c2aa:	f818 1004 	ldrb.w	r1, [r8, r4]
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	d112      	bne.n	801c2d8 <lv_dropdown_get_selected_str+0x4c>
 801c2b2:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 801c2b4:	1e79      	subs	r1, r7, #1
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801c2b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c2b8:	4422      	add	r2, r4
 801c2ba:	5cd2      	ldrb	r2, [r2, r3]
 801c2bc:	2a0a      	cmp	r2, #10
 801c2be:	d007      	beq.n	801c2d0 <lv_dropdown_get_selected_str+0x44>
        if(buf_size && c >= buf_size - 1) {
 801c2c0:	b10f      	cbz	r7, 801c2c6 <lv_dropdown_get_selected_str+0x3a>
 801c2c2:	4299      	cmp	r1, r3
 801c2c4:	d904      	bls.n	801c2d0 <lv_dropdown_get_selected_str+0x44>
        buf[c] = dropdown->options[i];
 801c2c6:	54f2      	strb	r2, [r6, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801c2c8:	3301      	adds	r3, #1
 801c2ca:	18e2      	adds	r2, r4, r3
 801c2cc:	4282      	cmp	r2, r0
 801c2ce:	d3f2      	bcc.n	801c2b6 <lv_dropdown_get_selected_str+0x2a>
    buf[c] = '\0';
 801c2d0:	2200      	movs	r2, #0
 801c2d2:	54f2      	strb	r2, [r6, r3]
}
 801c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dropdown->options[i] == '\n') line++;
 801c2d8:	290a      	cmp	r1, #10
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801c2da:	f104 0401 	add.w	r4, r4, #1
        if(dropdown->options[i] == '\n') line++;
 801c2de:	bf08      	it	eq
 801c2e0:	3301      	addeq	r3, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801c2e2:	e7df      	b.n	801c2a4 <lv_dropdown_get_selected_str+0x18>
 801c2e4:	2300      	movs	r3, #0
 801c2e6:	e7f3      	b.n	801c2d0 <lv_dropdown_get_selected_str+0x44>

0801c2e8 <lv_dropdown_open>:
{
 801c2e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801c2ec:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 801c2ee:	2101      	movs	r1, #1
 801c2f0:	f7e7 fe05 	bl	8003efe <lv_obj_add_state>
    if(dropdown->list == NULL) {
 801c2f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c2f6:	b9bb      	cbnz	r3, 801c328 <lv_dropdown_open+0x40>
        lv_obj_t * list_obj = lv_dropdown_list_create(lv_obj_get_screen(dropdown_obj));
 801c2f8:	4620      	mov	r0, r4
 801c2fa:	f7eb fc08 	bl	8007b0e <lv_obj_get_screen>
 801c2fe:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 801c300:	4890      	ldr	r0, [pc, #576]	; (801c544 <lv_dropdown_open+0x25c>)
 801c302:	f7e8 f90f 	bl	8004524 <lv_obj_class_create_obj>
 801c306:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 801c308:	f7e8 f999 	bl	800463e <lv_obj_class_init_obj>
        lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801c30c:	2104      	movs	r1, #4
 801c30e:	4628      	mov	r0, r5
        ((lv_dropdown_list_t*) list_obj)->dropdown = dropdown_obj;
 801c310:	626c      	str	r4, [r5, #36]	; 0x24
        dropdown->list = list_obj;
 801c312:	6265      	str	r5, [r4, #36]	; 0x24
        lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801c314:	f7e7 fdcb 	bl	8003eae <lv_obj_clear_flag>
        lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_IGNORE_LAYOUT);
 801c318:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c31a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c31e:	f7e7 fda3 	bl	8003e68 <lv_obj_add_flag>
        lv_obj_update_layout(dropdown->list);
 801c322:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c324:	f7e9 fc10 	bl	8005b48 <lv_obj_update_layout>
    lv_obj_t * label = get_label(dropdown_obj);
 801c328:	4620      	mov	r0, r4
 801c32a:	f7ff fe23 	bl	801bf74 <get_label>
    lv_label_set_text_static(label, dropdown->options);
 801c32e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lv_obj_t * label = get_label(dropdown_obj);
 801c330:	4606      	mov	r6, r0
    lv_label_set_text_static(label, dropdown->options);
 801c332:	f001 fd58 	bl	801dde6 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 801c336:	f242 71d1 	movw	r1, #10193	; 0x27d1
 801c33a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c33c:	f7e8 fcf6 	bl	8004d2c <lv_obj_set_width>
    lv_obj_update_layout(label);
 801c340:	4630      	mov	r0, r6
 801c342:	f7e9 fc01 	bl	8005b48 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 801c346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c348:	f7e8 fe41 	bl	8004fce <lv_obj_get_width>
 801c34c:	4605      	mov	r5, r0
 801c34e:	4620      	mov	r0, r4
 801c350:	f7e8 fe3d 	bl	8004fce <lv_obj_get_width>
 801c354:	4285      	cmp	r5, r0
 801c356:	dc0f      	bgt.n	801c378 <lv_dropdown_open+0x90>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801c358:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801c35c:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 801c360:	2b04      	cmp	r3, #4
 801c362:	d001      	beq.n	801c368 <lv_dropdown_open+0x80>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801c364:	2b08      	cmp	r3, #8
 801c366:	d107      	bne.n	801c378 <lv_dropdown_open+0x90>
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 801c368:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c36a:	4620      	mov	r0, r4
 801c36c:	f7e8 fe2f 	bl	8004fce <lv_obj_get_width>
 801c370:	4601      	mov	r1, r0
 801c372:	4628      	mov	r0, r5
 801c374:	f7e8 fcda 	bl	8004d2c <lv_obj_set_width>
    lv_coord_t label_h = lv_obj_get_height(label);
 801c378:	4630      	mov	r0, r6
 801c37a:	f7e8 fe2e 	bl	8004fda <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c37e:	f241 0232 	movw	r2, #4146	; 0x1032
 801c382:	4680      	mov	r8, r0
 801c384:	2100      	movs	r1, #0
 801c386:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c388:	f7eb f89e 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c38c:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c390:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c392:	2100      	movs	r1, #0
 801c394:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c396:	f7eb f897 	bl	80074c8 <lv_obj_get_style_prop>
 801c39a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c39c:	f241 0211 	movw	r2, #4113	; 0x1011
 801c3a0:	2100      	movs	r1, #0
 801c3a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c3a4:	f7eb f890 	bl	80074c8 <lv_obj_get_style_prop>
    lv_dir_t dir = dropdown->dir;
 801c3a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    lv_coord_t list_fit_h = label_h + top + bottom;
 801c3ac:	4407      	add	r7, r0
 801c3ae:	eb07 0545 	add.w	r5, r7, r5, lsl #1
    lv_dir_t dir = dropdown->dir;
 801c3b2:	f003 070f 	and.w	r7, r3, #15
    lv_coord_t list_fit_h = label_h + top + bottom;
 801c3b6:	eb05 0008 	add.w	r0, r5, r8
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801c3ba:	2f08      	cmp	r7, #8
    lv_coord_t list_fit_h = label_h + top + bottom;
 801c3bc:	b205      	sxth	r5, r0
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801c3be:	d170      	bne.n	801c4a2 <lv_dropdown_open+0x1ba>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 801c3c0:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 801c3c4:	f7fa fb60 	bl	8016a88 <lv_disp_get_default>
 801c3c8:	f7fa fb74 	bl	8016ab4 <lv_disp_get_ver_res>
 801c3cc:	44a8      	add	r8, r5
 801c3ce:	4580      	cmp	r8, r0
 801c3d0:	f340 8084 	ble.w	801c4dc <lv_dropdown_open+0x1f4>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 801c3d4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801c3d8:	f7fa fb56 	bl	8016a88 <lv_disp_get_default>
 801c3dc:	f7fa fb6a 	bl	8016ab4 <lv_disp_get_ver_res>
 801c3e0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801c3e4:	1ac0      	subs	r0, r0, r3
 801c3e6:	4580      	cmp	r8, r0
 801c3e8:	dd52      	ble.n	801c490 <lv_dropdown_open+0x1a8>
                list_h = dropdown_obj->coords.y1 - 1;
 801c3ea:	8ae1      	ldrh	r1, [r4, #22]
                dir = LV_DIR_TOP;
 801c3ec:	2704      	movs	r7, #4
                list_h = dropdown_obj->coords.y1 - 1;
 801c3ee:	3901      	subs	r1, #1
 801c3f0:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 801c3f2:	42a9      	cmp	r1, r5
 801c3f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c3f6:	bfa8      	it	ge
 801c3f8:	4629      	movge	r1, r5
 801c3fa:	f7e8 fcb1 	bl	8004d60 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 801c3fe:	4620      	mov	r0, r4
 801c400:	f7ff fed0 	bl	801c1a4 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801c404:	2f08      	cmp	r7, #8
 801c406:	d16b      	bne.n	801c4e0 <lv_dropdown_open+0x1f8>
 801c408:	2300      	movs	r3, #0
 801c40a:	220d      	movs	r2, #13
 801c40c:	4621      	mov	r1, r4
 801c40e:	9300      	str	r3, [sp, #0]
 801c410:	6a60      	ldr	r0, [r4, #36]	; 0x24
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801c412:	f7e9 fbb3 	bl	8005b7c <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 801c416:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c418:	f7e9 fb96 	bl	8005b48 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 801c41c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801c420:	f003 030f 	and.w	r3, r3, #15
 801c424:	3b01      	subs	r3, #1
 801c426:	2b01      	cmp	r3, #1
 801c428:	d81a      	bhi.n	801c460 <lv_dropdown_open+0x178>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 801c42a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c42c:	f7e8 fda8 	bl	8004f80 <lv_obj_get_y>
 801c430:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 801c432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c434:	f7e8 fdc0 	bl	8004fb8 <lv_obj_get_y2>
 801c438:	4607      	mov	r7, r0
        if(y2 >= LV_VER_RES) {
 801c43a:	f7fa fb25 	bl	8016a88 <lv_disp_get_default>
 801c43e:	f7fa fb39 	bl	8016ab4 <lv_disp_get_ver_res>
 801c442:	42b8      	cmp	r0, r7
 801c444:	dc0c      	bgt.n	801c460 <lv_dropdown_open+0x178>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 801c446:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801c44a:	f7fa fb1d 	bl	8016a88 <lv_disp_get_default>
 801c44e:	f7fa fb31 	bl	8016ab4 <lv_disp_get_ver_res>
 801c452:	1e6b      	subs	r3, r5, #1
 801c454:	1bdd      	subs	r5, r3, r7
 801c456:	4428      	add	r0, r5
 801c458:	b201      	sxth	r1, r0
 801c45a:	4640      	mov	r0, r8
 801c45c:	f7e8 fcf8 	bl	8004e50 <lv_obj_set_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801c460:	2100      	movs	r1, #0
 801c462:	f241 425d 	movw	r2, #5213	; 0x145d
 801c466:	4630      	mov	r0, r6
 801c468:	f7eb f82e 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801c46c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 801c470:	d14a      	bne.n	801c508 <lv_dropdown_open+0x220>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c472:	f241 426a 	movw	r2, #5226	; 0x146a
 801c476:	4630      	mov	r0, r6
 801c478:	f7eb f826 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c47c:	b2c0      	uxtb	r0, r0
       if(lv_obj_get_style_base_dir(label, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
 801c47e:	2801      	cmp	r0, #1
    switch(align) {
 801c480:	d046      	beq.n	801c510 <lv_dropdown_open+0x228>
        lv_obj_set_x(label, 0);
 801c482:	2100      	movs	r1, #0
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801c484:	4630      	mov	r0, r6
}
 801c486:	b002      	add	sp, #8
 801c488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801c48c:	f7e8 bcc2 	b.w	8004e14 <lv_obj_set_x>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 801c490:	f7fa fafa 	bl	8016a88 <lv_disp_get_default>
 801c494:	f7fa fb0e 	bl	8016ab4 <lv_disp_get_ver_res>
 801c498:	8b63      	ldrh	r3, [r4, #26]
 801c49a:	43db      	mvns	r3, r3
 801c49c:	4418      	add	r0, r3
 801c49e:	b201      	sxth	r1, r0
 801c4a0:	e7a7      	b.n	801c3f2 <lv_dropdown_open+0x10a>
    else if(dropdown->dir == LV_DIR_TOP) {
 801c4a2:	2f04      	cmp	r7, #4
 801c4a4:	d11a      	bne.n	801c4dc <lv_dropdown_open+0x1f4>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 801c4a6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801c4aa:	eba8 0305 	sub.w	r3, r8, r5
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	da14      	bge.n	801c4dc <lv_dropdown_open+0x1f4>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 801c4b2:	f7fa fae9 	bl	8016a88 <lv_disp_get_default>
 801c4b6:	f7fa fafd 	bl	8016ab4 <lv_disp_get_ver_res>
 801c4ba:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801c4be:	1ac0      	subs	r0, r0, r3
 801c4c0:	4580      	cmp	r8, r0
 801c4c2:	da08      	bge.n	801c4d6 <lv_dropdown_open+0x1ee>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801c4c4:	f7fa fae0 	bl	8016a88 <lv_disp_get_default>
                dir = LV_DIR_BOTTOM;
 801c4c8:	2708      	movs	r7, #8
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801c4ca:	f7fa faf3 	bl	8016ab4 <lv_disp_get_ver_res>
 801c4ce:	8b61      	ldrh	r1, [r4, #26]
 801c4d0:	1a41      	subs	r1, r0, r1
 801c4d2:	b209      	sxth	r1, r1
 801c4d4:	e78d      	b.n	801c3f2 <lv_dropdown_open+0x10a>
                list_h = dropdown_obj->coords.y1;
 801c4d6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801c4da:	e78a      	b.n	801c3f2 <lv_dropdown_open+0x10a>
    lv_coord_t list_h = list_fit_h;
 801c4dc:	4629      	mov	r1, r5
 801c4de:	e788      	b.n	801c3f2 <lv_dropdown_open+0x10a>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 801c4e0:	2f04      	cmp	r7, #4
 801c4e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c4e4:	d104      	bne.n	801c4f0 <lv_dropdown_open+0x208>
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	220a      	movs	r2, #10
 801c4ea:	9300      	str	r3, [sp, #0]
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801c4ec:	4621      	mov	r1, r4
 801c4ee:	e790      	b.n	801c412 <lv_dropdown_open+0x12a>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 801c4f0:	2f01      	cmp	r7, #1
 801c4f2:	d103      	bne.n	801c4fc <lv_dropdown_open+0x214>
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	2210      	movs	r2, #16
 801c4f8:	9300      	str	r3, [sp, #0]
 801c4fa:	e7f7      	b.n	801c4ec <lv_dropdown_open+0x204>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801c4fc:	2f02      	cmp	r7, #2
 801c4fe:	d18a      	bne.n	801c416 <lv_dropdown_open+0x12e>
 801c500:	2300      	movs	r3, #0
 801c502:	2213      	movs	r2, #19
 801c504:	9300      	str	r3, [sp, #0]
 801c506:	e7f1      	b.n	801c4ec <lv_dropdown_open+0x204>
    switch(align) {
 801c508:	2902      	cmp	r1, #2
 801c50a:	d00b      	beq.n	801c524 <lv_dropdown_open+0x23c>
 801c50c:	2903      	cmp	r1, #3
 801c50e:	e7b7      	b.n	801c480 <lv_dropdown_open+0x198>
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) - lv_obj_get_width(label));
 801c510:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c512:	f7e8 fd68 	bl	8004fe6 <lv_obj_get_content_width>
 801c516:	4604      	mov	r4, r0
 801c518:	4630      	mov	r0, r6
 801c51a:	f7e8 fd58 	bl	8004fce <lv_obj_get_width>
 801c51e:	1a20      	subs	r0, r4, r0
 801c520:	b201      	sxth	r1, r0
 801c522:	e7af      	b.n	801c484 <lv_dropdown_open+0x19c>
        lv_obj_set_x(label, lv_obj_get_content_width(dropdown->list) / 2 - lv_obj_get_width(label) / 2);
 801c524:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c526:	f7e8 fd5e 	bl	8004fe6 <lv_obj_get_content_width>
 801c52a:	4604      	mov	r4, r0
 801c52c:	4630      	mov	r0, r6
 801c52e:	f7e8 fd4e 	bl	8004fce <lv_obj_get_width>
 801c532:	eb00 71d0 	add.w	r1, r0, r0, lsr #31
 801c536:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 801c53a:	1049      	asrs	r1, r1, #1
 801c53c:	ebc1 0164 	rsb	r1, r1, r4, asr #1
 801c540:	b209      	sxth	r1, r1
 801c542:	e79f      	b.n	801c484 <lv_dropdown_open+0x19c>
 801c544:	08029e0c 	.word	0x08029e0c

0801c548 <lv_dropdown_close>:
{
 801c548:	b510      	push	{r4, lr}
 801c54a:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801c54c:	2101      	movs	r1, #1
 801c54e:	f7e7 fcdf 	bl	8003f10 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801c552:	f64f 73ff 	movw	r3, #65535	; 0xffff
    if(dropdown->list) lv_obj_del(dropdown->list);
 801c556:	6a60      	ldr	r0, [r4, #36]	; 0x24
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801c558:	8763      	strh	r3, [r4, #58]	; 0x3a
    if(dropdown->list) lv_obj_del(dropdown->list);
 801c55a:	b118      	cbz	r0, 801c564 <lv_dropdown_close+0x1c>
}
 801c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if(dropdown->list) lv_obj_del(dropdown->list);
 801c560:	f7eb bbbe 	b.w	8007ce0 <lv_obj_del>
}
 801c564:	bd10      	pop	{r4, pc}
	...

0801c568 <lv_dropdown_event>:
{
 801c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801c56c:	48bc      	ldr	r0, [pc, #752]	; (801c860 <lv_dropdown_event+0x2f8>)
{
 801c56e:	b09d      	sub	sp, #116	; 0x74
 801c570:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801c572:	f7e5 fce2 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801c576:	2801      	cmp	r0, #1
 801c578:	d14a      	bne.n	801c610 <lv_dropdown_event+0xa8>
    lv_event_code_t code = lv_event_get_code(e);
 801c57a:	4630      	mov	r0, r6
 801c57c:	f7e5 fd76 	bl	800206c <lv_event_get_code>
 801c580:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801c582:	4630      	mov	r0, r6
 801c584:	f7e5 fd70 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_FOCUSED) {
 801c588:	2d0e      	cmp	r5, #14
    lv_obj_t * obj = lv_event_get_target(e);
 801c58a:	4604      	mov	r4, r0
    if(code == LV_EVENT_FOCUSED) {
 801c58c:	d10f      	bne.n	801c5ae <lv_dropdown_event+0x46>
        lv_group_t * g             = lv_obj_get_group(obj);
 801c58e:	f7e7 fcd7 	bl	8003f40 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801c592:	f7e5 ff6b 	bl	800246c <lv_group_get_editing>
 801c596:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801c598:	f7e5 ffdc 	bl	8002554 <lv_indev_get_act>
 801c59c:	f7e5 ffe0 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801c5a0:	2804      	cmp	r0, #4
 801c5a2:	d135      	bne.n	801c610 <lv_dropdown_event+0xa8>
            if(editing) lv_dropdown_open(obj);
 801c5a4:	4620      	mov	r0, r4
 801c5a6:	b13d      	cbz	r5, 801c5b8 <lv_dropdown_event+0x50>
                lv_dropdown_open(obj);
 801c5a8:	f7ff fe9e 	bl	801c2e8 <lv_dropdown_open>
 801c5ac:	e030      	b.n	801c610 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 801c5ae:	f1a5 030f 	sub.w	r3, r5, #15
 801c5b2:	b2db      	uxtb	r3, r3
 801c5b4:	2b01      	cmp	r3, #1
 801c5b6:	d802      	bhi.n	801c5be <lv_dropdown_event+0x56>
            lv_dropdown_close(obj);
 801c5b8:	f7ff ffc6 	bl	801c548 <lv_dropdown_close>
 801c5bc:	e028      	b.n	801c610 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_RELEASED) {
 801c5be:	2d08      	cmp	r5, #8
 801c5c0:	d12f      	bne.n	801c622 <lv_dropdown_event+0xba>
        lv_indev_t * indev = lv_indev_get_act();
 801c5c2:	f7e5 ffc7 	bl	8002554 <lv_indev_get_act>
 801c5c6:	4605      	mov	r5, r0
        if(lv_indev_get_scroll_obj(indev) == NULL) {
 801c5c8:	f7e6 f848 	bl	800265c <lv_indev_get_scroll_obj>
 801c5cc:	bb18      	cbnz	r0, 801c616 <lv_dropdown_event+0xae>
            if(dropdown->list) {
 801c5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
                lv_dropdown_close(obj);
 801c5d0:	4620      	mov	r0, r4
            if(dropdown->list) {
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d0e8      	beq.n	801c5a8 <lv_dropdown_event+0x40>
                lv_dropdown_close(obj);
 801c5d6:	f7ff ffb7 	bl	801c548 <lv_dropdown_close>
                if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 801c5da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c5dc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801c5de:	429a      	cmp	r2, r3
 801c5e0:	d00b      	beq.n	801c5fa <lv_dropdown_event+0x92>
                    dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c5e2:	8723      	strh	r3, [r4, #56]	; 0x38
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801c5e4:	aa14      	add	r2, sp, #80	; 0x50
 801c5e6:	211c      	movs	r1, #28
 801c5e8:	4620      	mov	r0, r4
                    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c5ea:	9314      	str	r3, [sp, #80]	; 0x50
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801c5ec:	f7e5 fd1c 	bl	8002028 <lv_event_send>
                    if(res != LV_RES_OK) return;
 801c5f0:	2801      	cmp	r0, #1
 801c5f2:	d10d      	bne.n	801c610 <lv_dropdown_event+0xa8>
                    lv_obj_invalidate(obj);
 801c5f4:	4620      	mov	r0, r4
 801c5f6:	f7e8 fe3f 	bl	8005278 <lv_obj_invalidate>
                lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801c5fa:	4628      	mov	r0, r5
 801c5fc:	f7e5 ffb0 	bl	8002560 <lv_indev_get_type>
                if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801c600:	2804      	cmp	r0, #4
 801c602:	d105      	bne.n	801c610 <lv_dropdown_event+0xa8>
                    lv_group_set_editing(lv_obj_get_group(obj), false);
 801c604:	4620      	mov	r0, r4
 801c606:	f7e7 fc9b 	bl	8003f40 <lv_obj_get_group>
 801c60a:	2100      	movs	r1, #0
 801c60c:	f7e5 feca 	bl	80023a4 <lv_group_set_editing>
}
 801c610:	b01d      	add	sp, #116	; 0x74
 801c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c616:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            lv_obj_invalidate(obj);
 801c618:	4620      	mov	r0, r4
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c61a:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 801c61c:	f7e8 fe2c 	bl	8005278 <lv_obj_invalidate>
 801c620:	e7f6      	b.n	801c610 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801c622:	2d24      	cmp	r5, #36	; 0x24
 801c624:	d102      	bne.n	801c62c <lv_dropdown_event+0xc4>
        lv_obj_refresh_self_size(obj);
 801c626:	f7e8 fd62 	bl	80050ee <lv_obj_refresh_self_size>
 801c62a:	e7f1      	b.n	801c610 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801c62c:	2d23      	cmp	r5, #35	; 0x23
 801c62e:	d0fa      	beq.n	801c626 <lv_dropdown_event+0xbe>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801c630:	2d26      	cmp	r5, #38	; 0x26
 801c632:	d10d      	bne.n	801c650 <lv_dropdown_event+0xe8>
        lv_point_t * p = lv_event_get_param(e);
 801c634:	4630      	mov	r0, r6
 801c636:	f7e5 fd1b 	bl	8002070 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801c63a:	f241 4259 	movw	r2, #5209	; 0x1459
 801c63e:	4605      	mov	r5, r0
 801c640:	2100      	movs	r1, #0
 801c642:	4620      	mov	r0, r4
 801c644:	f7ea ff40 	bl	80074c8 <lv_obj_get_style_prop>
        p->y = lv_font_get_line_height(font);
 801c648:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801c64c:	806b      	strh	r3, [r5, #2]
 801c64e:	e7df      	b.n	801c610 <lv_dropdown_event+0xa8>
    else if(code == LV_EVENT_KEY) {
 801c650:	2d0d      	cmp	r5, #13
 801c652:	d127      	bne.n	801c6a4 <lv_dropdown_event+0x13c>
        char c = *((char *)lv_event_get_param(e));
 801c654:	4630      	mov	r0, r6
 801c656:	f7e5 fd0b 	bl	8002070 <lv_event_get_param>
 801c65a:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801c65c:	f1a3 0212 	sub.w	r2, r3, #18
 801c660:	2a01      	cmp	r2, #1
 801c662:	d80d      	bhi.n	801c680 <lv_dropdown_event+0x118>
            if(dropdown->list == NULL) {
 801c664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c666:	b90b      	cbnz	r3, 801c66c <lv_dropdown_event+0x104>
                lv_dropdown_open(obj);
 801c668:	4620      	mov	r0, r4
 801c66a:	e79d      	b.n	801c5a8 <lv_dropdown_event+0x40>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 801c66c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c66e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c670:	3301      	adds	r3, #1
 801c672:	4293      	cmp	r3, r2
 801c674:	dacc      	bge.n	801c610 <lv_dropdown_event+0xa8>
                position_to_selected(obj);
 801c676:	4620      	mov	r0, r4
                dropdown->sel_opt_id--;
 801c678:	86e3      	strh	r3, [r4, #54]	; 0x36
                position_to_selected(obj);
 801c67a:	f7ff fd93 	bl	801c1a4 <position_to_selected>
 801c67e:	e7c7      	b.n	801c610 <lv_dropdown_event+0xa8>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801c680:	2b14      	cmp	r3, #20
 801c682:	d001      	beq.n	801c688 <lv_dropdown_event+0x120>
 801c684:	2b11      	cmp	r3, #17
 801c686:	d107      	bne.n	801c698 <lv_dropdown_event+0x130>
            if(dropdown->list == NULL) {
 801c688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d0ec      	beq.n	801c668 <lv_dropdown_event+0x100>
            else if(dropdown->sel_opt_id > 0) {
 801c68e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c690:	2b00      	cmp	r3, #0
 801c692:	d0bd      	beq.n	801c610 <lv_dropdown_event+0xa8>
                dropdown->sel_opt_id--;
 801c694:	3b01      	subs	r3, #1
 801c696:	e7ee      	b.n	801c676 <lv_dropdown_event+0x10e>
        else if(c == LV_KEY_ESC) {
 801c698:	2b1b      	cmp	r3, #27
 801c69a:	d1b9      	bne.n	801c610 <lv_dropdown_event+0xa8>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c69c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
            lv_dropdown_close(obj);
 801c69e:	4620      	mov	r0, r4
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 801c6a0:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_dropdown_close(obj);
 801c6a2:	e789      	b.n	801c5b8 <lv_dropdown_event+0x50>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801c6a4:	2d15      	cmp	r5, #21
 801c6a6:	d1b3      	bne.n	801c610 <lv_dropdown_event+0xa8>
    lv_obj_t * obj = lv_event_get_target(e);
 801c6a8:	4630      	mov	r0, r6
 801c6aa:	f7e5 fcdd 	bl	8002068 <lv_event_get_target>
 801c6ae:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801c6b0:	4630      	mov	r0, r6
 801c6b2:	f7e5 fcdd 	bl	8002070 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c6b6:	f241 0232 	movw	r2, #4146	; 0x1032
 801c6ba:	2100      	movs	r1, #0
 801c6bc:	4682      	mov	sl, r0
 801c6be:	4620      	mov	r0, r4
 801c6c0:	f7ea ff02 	bl	80074c8 <lv_obj_get_style_prop>
 801c6c4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c6c6:	f241 0212 	movw	r2, #4114	; 0x1012
 801c6ca:	2100      	movs	r1, #0
 801c6cc:	4620      	mov	r0, r4
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c6ce:	b2b7      	uxth	r7, r6
 801c6d0:	f7ea fefa 	bl	80074c8 <lv_obj_get_style_prop>
 801c6d4:	fa10 f086 	uxtah	r0, r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c6d8:	f241 0213 	movw	r2, #4115	; 0x1013
 801c6dc:	2100      	movs	r1, #0
 801c6de:	b283      	uxth	r3, r0
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	9304      	str	r3, [sp, #16]
 801c6e4:	f7ea fef0 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801c6e8:	4438      	add	r0, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c6ea:	f241 0210 	movw	r2, #4112	; 0x1010
 801c6ee:	2100      	movs	r1, #0
 801c6f0:	fa1f f980 	uxth.w	r9, r0
 801c6f4:	4620      	mov	r0, r4
 801c6f6:	f7ea fee7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801c6fa:	4438      	add	r0, r7
 801c6fc:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 801c6fe:	a80c      	add	r0, sp, #48	; 0x30
 801c700:	f7ed ffbe 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 801c704:	aa0c      	add	r2, sp, #48	; 0x30
 801c706:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c70a:	4620      	mov	r0, r4
 801c70c:	f7e8 f914 	bl	8004938 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 801c710:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801c712:	b947      	cbnz	r7, 801c726 <lv_dropdown_event+0x1be>
        char * buf = lv_mem_buf_get(128);
 801c714:	2080      	movs	r0, #128	; 0x80
 801c716:	f7fb faaf 	bl	8017c78 <lv_mem_buf_get>
        lv_dropdown_get_selected_str(obj, buf, 128);
 801c71a:	2280      	movs	r2, #128	; 0x80
        char * buf = lv_mem_buf_get(128);
 801c71c:	4607      	mov	r7, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 801c71e:	4601      	mov	r1, r0
 801c720:	4620      	mov	r0, r4
 801c722:	f7ff fdb3 	bl	801c28c <lv_dropdown_get_selected_str>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c726:	f241 426a 	movw	r2, #5226	; 0x146a
 801c72a:	2100      	movs	r1, #0
 801c72c:	4620      	mov	r0, r4
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801c72e:	f894 603c 	ldrb.w	r6, [r4, #60]	; 0x3c
 801c732:	f7ea fec9 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c736:	fa5f f880 	uxtb.w	r8, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 801c73a:	f1b8 0f01 	cmp.w	r8, #1
 801c73e:	d007      	beq.n	801c750 <lv_dropdown_event+0x1e8>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801c740:	f006 080f 	and.w	r8, r6, #15
 801c744:	f108 33ff 	add.w	r3, r8, #4294967295
 801c748:	f1d3 0800 	rsbs	r8, r3, #0
 801c74c:	eb48 0803 	adc.w	r8, r8, r3
    if(dropdown->symbol) {
 801c750:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c752:	2800      	cmp	r0, #0
 801c754:	d03b      	beq.n	801c7ce <lv_dropdown_event+0x266>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801c756:	f7ed ff71 	bl	800a63c <lv_img_src_get_type>
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c75a:	2802      	cmp	r0, #2
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 801c75c:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c75e:	d16d      	bne.n	801c83c <lv_dropdown_event+0x2d4>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX, symbol_dsc.flag);
 801c760:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801c764:	a814      	add	r0, sp, #80	; 0x50
 801c766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c768:	9302      	str	r3, [sp, #8]
 801c76a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801c76e:	9301      	str	r3, [sp, #4]
 801c770:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801c774:	9300      	str	r3, [sp, #0]
 801c776:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801c77a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c77c:	f7fc ffdb 	bl	8019736 <lv_txt_get_size>
            symbol_w = size.x;
 801c780:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
            symbol_h = size.y;
 801c784:	f9bd 6052 	ldrsh.w	r6, [sp, #82]	; 0x52
        if(symbol_to_left) {
 801c788:	b299      	uxth	r1, r3
 801c78a:	f1b8 0f00 	cmp.w	r8, #0
 801c78e:	d069      	beq.n	801c864 <lv_dropdown_event+0x2fc>
            symbol_area.x1 = obj->coords.x1 + left;
 801c790:	8aa2      	ldrh	r2, [r4, #20]
 801c792:	9804      	ldr	r0, [sp, #16]
 801c794:	4402      	add	r2, r0
 801c796:	b292      	uxth	r2, r2
 801c798:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c79c:	3a01      	subs	r2, #1
 801c79e:	440a      	add	r2, r1
 801c7a0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801c7a4:	f1bb 0f02 	cmp.w	fp, #2
 801c7a8:	8ae2      	ldrh	r2, [r4, #22]
 801c7aa:	b2b1      	uxth	r1, r6
 801c7ac:	d165      	bne.n	801c87a <lv_dropdown_event+0x312>
            symbol_area.y1 = obj->coords.y1 + top;
 801c7ae:	442a      	add	r2, r5
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	a80a      	add	r0, sp, #40	; 0x28
            symbol_area.y1 = obj->coords.y1 + top;
 801c7b4:	b292      	uxth	r2, r2
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c7b6:	9300      	str	r3, [sp, #0]
 801c7b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            symbol_area.y1 = obj->coords.y1 + top;
 801c7ba:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c7be:	3a01      	subs	r2, #1
 801c7c0:	4411      	add	r1, r2
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c7c2:	aa0c      	add	r2, sp, #48	; 0x30
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c7c4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            lv_draw_label(&symbol_area, clip_area, &symbol_dsc, dropdown->symbol, NULL);
 801c7c8:	4651      	mov	r1, sl
 801c7ca:	f7ee f931 	bl	800aa30 <lv_draw_label>
    lv_draw_label_dsc_init(&label_dsc);
 801c7ce:	a814      	add	r0, sp, #80	; 0x50
 801c7d0:	f7ed ff56 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 801c7d4:	aa14      	add	r2, sp, #80	; 0x50
 801c7d6:	2100      	movs	r1, #0
 801c7d8:	4620      	mov	r0, r4
 801c7da:	f7e8 f8ad 	bl	8004938 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX, label_dsc.flag);
 801c7de:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801c7e2:	a809      	add	r0, sp, #36	; 0x24
 801c7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7e6:	9302      	str	r3, [sp, #8]
 801c7e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801c7ec:	4639      	mov	r1, r7
 801c7ee:	9301      	str	r3, [sp, #4]
 801c7f0:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801c7f4:	9300      	str	r3, [sp, #0]
 801c7f6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 801c7fa:	f7fc ff9c 	bl	8019736 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 801c7fe:	8ae0      	ldrh	r0, [r4, #22]
    txt_area.y2 = txt_area.y1 + size.y;
 801c800:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    txt_area.y1 = obj->coords.y1 + top;
 801c804:	4405      	add	r5, r0
 801c806:	b2ad      	uxth	r5, r5
 801c808:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
    txt_area.y2 = txt_area.y1 + size.y;
 801c80c:	441d      	add	r5, r3
    if(dropdown->symbol == NULL) {
 801c80e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    txt_area.y2 = txt_area.y1 + size.y;
 801c810:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    if(dropdown->symbol == NULL) {
 801c814:	2b00      	cmp	r3, #0
 801c816:	d168      	bne.n	801c8ea <lv_dropdown_event+0x382>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 801c818:	4620      	mov	r0, r4
 801c81a:	8aa5      	ldrh	r5, [r4, #20]
 801c81c:	f7e8 fbd7 	bl	8004fce <lv_obj_get_width>
 801c820:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801c824:	1a80      	subs	r0, r0, r2
 801c826:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801c82a:	eb05 0560 	add.w	r5, r5, r0, asr #1
 801c82e:	b2ab      	uxth	r3, r5
            txt_area.x1 = obj->coords.x1 + left;
 801c830:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            txt_area.x2 = txt_area.x1 + size.x;
 801c834:	4413      	add	r3, r2
 801c836:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c83a:	e066      	b.n	801c90a <lv_dropdown_event+0x3a2>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 801c83c:	a914      	add	r1, sp, #80	; 0x50
 801c83e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c840:	f7f2 fd5c 	bl	800f2fc <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801c844:	2801      	cmp	r0, #1
                symbol_w = header.w;
 801c846:	bf09      	itett	eq
 801c848:	9b14      	ldreq	r3, [sp, #80]	; 0x50
                symbol_h = -1;
 801c84a:	f04f 36ff 	movne.w	r6, #4294967295
                symbol_h = header.h;
 801c84e:	f8bd 6052 	ldrheq.w	r6, [sp, #82]	; 0x52
                symbol_w = header.w;
 801c852:	f3c3 238a 	ubfxeq	r3, r3, #10, #11
                symbol_w = -1;
 801c856:	bf14      	ite	ne
 801c858:	4633      	movne	r3, r6
                symbol_h = header.h;
 801c85a:	f3c6 164a 	ubfxeq	r6, r6, #5, #11
 801c85e:	e793      	b.n	801c788 <lv_dropdown_event+0x220>
 801c860:	08029df0 	.word	0x08029df0
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801c864:	8b20      	ldrh	r0, [r4, #24]
 801c866:	eba0 0009 	sub.w	r0, r0, r9
 801c86a:	b280      	uxth	r0, r0
 801c86c:	1a42      	subs	r2, r0, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c86e:	3801      	subs	r0, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801c870:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801c874:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 801c878:	e794      	b.n	801c7a4 <lv_dropdown_event+0x23c>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c87a:	4620      	mov	r0, r4
 801c87c:	9305      	str	r3, [sp, #20]
 801c87e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801c882:	f7e8 fbaa 	bl	8004fda <lv_obj_get_height>
 801c886:	1b80      	subs	r0, r0, r6
 801c888:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.y = symbol_h / 2;
 801c88a:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c88e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c892:	9906      	ldr	r1, [sp, #24]
            img_dsc.pivot.y = symbol_h / 2;
 801c894:	1076      	asrs	r6, r6, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c896:	eb02 0260 	add.w	r2, r2, r0, asr #1
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c89a:	3901      	subs	r1, #1
            lv_draw_img_dsc_init(&img_dsc);
 801c89c:	a814      	add	r0, sp, #80	; 0x50
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801c89e:	b292      	uxth	r2, r2
 801c8a0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801c8a4:	440a      	add	r2, r1
 801c8a6:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            lv_draw_img_dsc_init(&img_dsc);
 801c8aa:	f7ed fda5 	bl	800a3f8 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 801c8ae:	aa14      	add	r2, sp, #80	; 0x50
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c8b6:	f7e8 f89f 	bl	80049f8 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 801c8ba:	9b05      	ldr	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c8bc:	f640 020f 	movw	r2, #2063	; 0x80f
 801c8c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c8c4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c8c8:	4620      	mov	r0, r4
            img_dsc.pivot.y = symbol_h / 2;
 801c8ca:	f8ad 6056 	strh.w	r6, [sp, #86]	; 0x56
            img_dsc.pivot.x = symbol_w / 2;
 801c8ce:	105b      	asrs	r3, r3, #1
 801c8d0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 801c8d4:	f7ea fdf8 	bl	80074c8 <lv_obj_get_style_prop>
            lv_draw_img(&symbol_area, clip_area, dropdown->symbol, &img_dsc);
 801c8d8:	ab14      	add	r3, sp, #80	; 0x50
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 801c8da:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
            lv_draw_img(&symbol_area, clip_area, dropdown->symbol, &img_dsc);
 801c8de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c8e0:	4651      	mov	r1, sl
 801c8e2:	a80a      	add	r0, sp, #40	; 0x28
 801c8e4:	f7ed fdbc 	bl	800a460 <lv_draw_img>
 801c8e8:	e771      	b.n	801c7ce <lv_dropdown_event+0x266>
        if(symbol_to_left) {
 801c8ea:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c8ee:	f1b8 0f00 	cmp.w	r8, #0
 801c8f2:	d01a      	beq.n	801c92a <lv_dropdown_event+0x3c2>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801c8f4:	8b20      	ldrh	r0, [r4, #24]
 801c8f6:	eba0 0909 	sub.w	r9, r0, r9
 801c8fa:	fa1f f989 	uxth.w	r9, r9
 801c8fe:	eba9 0302 	sub.w	r3, r9, r2
            txt_area.x2 = txt_area.x1 + size.x;
 801c902:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
            txt_area.x1 = obj->coords.x2 - right - size.x;
 801c906:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    lv_draw_label(&txt_area, clip_area, &label_dsc, opt_txt, NULL);
 801c90a:	2300      	movs	r3, #0
 801c90c:	aa14      	add	r2, sp, #80	; 0x50
 801c90e:	4651      	mov	r1, sl
 801c910:	a80a      	add	r0, sp, #40	; 0x28
 801c912:	9300      	str	r3, [sp, #0]
 801c914:	463b      	mov	r3, r7
 801c916:	f7ee f88b 	bl	800aa30 <lv_draw_label>
    if(dropdown->text == NULL) {
 801c91a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	f47f ae77 	bne.w	801c610 <lv_dropdown_event+0xa8>
        lv_mem_buf_release((char *)opt_txt);
 801c922:	4638      	mov	r0, r7
 801c924:	f7fb f804 	bl	8017930 <lv_mem_buf_release>
}
 801c928:	e672      	b.n	801c610 <lv_dropdown_event+0xa8>
            txt_area.x1 = obj->coords.x1 + left;
 801c92a:	8aa3      	ldrh	r3, [r4, #20]
 801c92c:	9904      	ldr	r1, [sp, #16]
 801c92e:	4419      	add	r1, r3
 801c930:	b28b      	uxth	r3, r1
 801c932:	e77d      	b.n	801c830 <lv_dropdown_event+0x2c8>

0801c934 <lv_dropdown_list_event>:
{
 801c934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801c936:	4608      	mov	r0, r1
{
 801c938:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801c93a:	f7e5 fb97 	bl	800206c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 801c93e:	2818      	cmp	r0, #24
    lv_event_code_t code = lv_event_get_code(e);
 801c940:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 801c942:	d141      	bne.n	801c9c8 <lv_dropdown_list_event+0x94>
    lv_obj_t * list = lv_event_get_target(e);
 801c944:	4628      	mov	r0, r5
 801c946:	f7e5 fb8f 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_RELEASED) {
 801c94a:	2c08      	cmp	r4, #8
    lv_obj_t * list = lv_event_get_target(e);
 801c94c:	4606      	mov	r6, r0
    if(code == LV_EVENT_RELEASED) {
 801c94e:	d149      	bne.n	801c9e4 <lv_dropdown_list_event+0xb0>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 801c950:	f7e5 fe00 	bl	8002554 <lv_indev_get_act>
 801c954:	f7e5 fe82 	bl	800265c <lv_indev_get_scroll_obj>
 801c958:	4607      	mov	r7, r0
 801c95a:	2800      	cmp	r0, #0
 801c95c:	d13a      	bne.n	801c9d4 <lv_dropdown_list_event+0xa0>
    lv_obj_t * dropdown_obj = list->dropdown;
 801c95e:	6a74      	ldr	r4, [r6, #36]	; 0x24
    lv_indev_t * indev = lv_indev_get_act();
 801c960:	f7e5 fdf8 	bl	8002554 <lv_indev_get_act>
 801c964:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801c966:	f7e5 fdfb 	bl	8002560 <lv_indev_get_type>
 801c96a:	2804      	cmp	r0, #4
 801c96c:	d10c      	bne.n	801c988 <lv_dropdown_list_event+0x54>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c96e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801c970:	4620      	mov	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c972:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801c974:	f7e7 fae4 	bl	8003f40 <lv_obj_get_group>
 801c978:	4606      	mov	r6, r0
        if(lv_group_get_editing(g)) {
 801c97a:	f7e5 fd77 	bl	800246c <lv_group_get_editing>
 801c97e:	b118      	cbz	r0, 801c988 <lv_dropdown_list_event+0x54>
            lv_group_set_editing(g, false);
 801c980:	4639      	mov	r1, r7
 801c982:	4630      	mov	r0, r6
 801c984:	f7e5 fd0e 	bl	80023a4 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801c988:	4628      	mov	r0, r5
 801c98a:	f7e5 fde9 	bl	8002560 <lv_indev_get_type>
 801c98e:	2801      	cmp	r0, #1
 801c990:	d122      	bne.n	801c9d8 <lv_dropdown_list_event+0xa4>
        lv_indev_get_point(indev, &p);
 801c992:	4669      	mov	r1, sp
 801c994:	4628      	mov	r0, r5
 801c996:	f7e5 fe3e 	bl	8002616 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 801c99a:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801c99e:	4620      	mov	r0, r4
 801c9a0:	f7ff fb0d 	bl	801bfbe <get_id_on_point>
 801c9a4:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801c9a6:	8720      	strh	r0, [r4, #56]	; 0x38
    lv_dropdown_close(dropdown_obj);
 801c9a8:	4620      	mov	r0, r4
 801c9aa:	f7ff fdcd 	bl	801c548 <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 801c9ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801c9b0:	b913      	cbnz	r3, 801c9b8 <lv_dropdown_list_event+0x84>
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	f7e8 fc60 	bl	8005278 <lv_obj_invalidate>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c9b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801c9ba:	466a      	mov	r2, sp
 801c9bc:	211c      	movs	r1, #28
 801c9be:	4620      	mov	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801c9c0:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801c9c2:	f7e5 fb31 	bl	8002028 <lv_event_send>
    if(res != LV_RES_OK) return res;
 801c9c6:	e005      	b.n	801c9d4 <lv_dropdown_list_event+0xa0>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801c9c8:	4629      	mov	r1, r5
 801c9ca:	483c      	ldr	r0, [pc, #240]	; (801cabc <lv_dropdown_list_event+0x188>)
 801c9cc:	f7e5 fab5 	bl	8001f3a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801c9d0:	2801      	cmp	r0, #1
 801c9d2:	d0b7      	beq.n	801c944 <lv_dropdown_list_event+0x10>
}
 801c9d4:	b003      	add	sp, #12
 801c9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801c9d8:	4628      	mov	r0, r5
 801c9da:	f7e5 fdc1 	bl	8002560 <lv_indev_get_type>
 801c9de:	2803      	cmp	r0, #3
 801c9e0:	d1e2      	bne.n	801c9a8 <lv_dropdown_list_event+0x74>
 801c9e2:	e7d6      	b.n	801c992 <lv_dropdown_list_event+0x5e>
    else if(code == LV_EVENT_PRESSED) {
 801c9e4:	2c01      	cmp	r4, #1
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 801c9e6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    else if(code == LV_EVENT_PRESSED) {
 801c9e8:	d11c      	bne.n	801ca24 <lv_dropdown_list_event+0xf0>
    lv_indev_t * indev = lv_indev_get_act();
 801c9ea:	f7e5 fdb3 	bl	8002554 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 801c9ee:	4604      	mov	r4, r0
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	d0ef      	beq.n	801c9d4 <lv_dropdown_list_event+0xa0>
 801c9f4:	f7e5 fdb4 	bl	8002560 <lv_indev_get_type>
 801c9f8:	2801      	cmp	r0, #1
 801c9fa:	d10d      	bne.n	801ca18 <lv_dropdown_list_event+0xe4>
        lv_indev_get_point(indev, &p);
 801c9fc:	4669      	mov	r1, sp
 801c9fe:	4620      	mov	r0, r4
 801ca00:	f7e5 fe09 	bl	8002616 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 801ca04:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801ca08:	4638      	mov	r0, r7
 801ca0a:	f7ff fad8 	bl	801bfbe <get_id_on_point>
 801ca0e:	8778      	strh	r0, [r7, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 801ca10:	4630      	mov	r0, r6
        lv_obj_invalidate(list);
 801ca12:	f7e8 fc31 	bl	8005278 <lv_obj_invalidate>
 801ca16:	e7dd      	b.n	801c9d4 <lv_dropdown_list_event+0xa0>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f7e5 fda1 	bl	8002560 <lv_indev_get_type>
 801ca1e:	2803      	cmp	r0, #3
 801ca20:	d1d8      	bne.n	801c9d4 <lv_dropdown_list_event+0xa0>
 801ca22:	e7eb      	b.n	801c9fc <lv_dropdown_list_event+0xc8>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 801ca24:	2c09      	cmp	r4, #9
 801ca26:	d103      	bne.n	801ca30 <lv_dropdown_list_event+0xfc>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801ca28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ca2c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801ca2e:	e7f0      	b.n	801ca12 <lv_dropdown_list_event+0xde>
    else if(code == LV_EVENT_DRAW_POST) {
 801ca30:	2c18      	cmp	r4, #24
 801ca32:	d1cf      	bne.n	801c9d4 <lv_dropdown_list_event+0xa0>
    lv_obj_t * list_obj = lv_event_get_target(e);
 801ca34:	4628      	mov	r0, r5
 801ca36:	f7e5 fb17 	bl	8002068 <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 801ca3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ca3c:	4628      	mov	r0, r5
 801ca3e:	f7e5 fb17 	bl	8002070 <lv_event_get_param>
    if(dropdown->list) {
 801ca42:	6a62      	ldr	r2, [r4, #36]	; 0x24
    const lv_area_t * clip_area = lv_event_get_param(e);
 801ca44:	4601      	mov	r1, r0
    if(dropdown->list) {
 801ca46:	b362      	cbz	r2, 801caa2 <lv_dropdown_list_event+0x16e>
        has_common = _lv_area_intersect(&clip_area_core, clip_area, &dropdown->list->coords);
 801ca48:	3214      	adds	r2, #20
 801ca4a:	4668      	mov	r0, sp
 801ca4c:	f7fa fb13 	bl	8017076 <_lv_area_intersect>
        if(has_common) {
 801ca50:	b338      	cbz	r0, 801caa2 <lv_dropdown_list_event+0x16e>
            if(dropdown->selected_highlight) {
 801ca52:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801ca56:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801ca58:	069b      	lsls	r3, r3, #26
 801ca5a:	d527      	bpl.n	801caac <lv_dropdown_list_event+0x178>
                if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 801ca5c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801ca5e:	4291      	cmp	r1, r2
 801ca60:	d108      	bne.n	801ca74 <lv_dropdown_list_event+0x140>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801ca62:	2321      	movs	r3, #33	; 0x21
 801ca64:	460a      	mov	r2, r1
 801ca66:	4620      	mov	r0, r4
 801ca68:	4669      	mov	r1, sp
 801ca6a:	f7ff fad4 	bl	801c016 <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801ca6e:	2321      	movs	r3, #33	; 0x21
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801ca70:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801ca72:	e012      	b.n	801ca9a <lv_dropdown_list_event+0x166>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801ca74:	2320      	movs	r3, #32
 801ca76:	4669      	mov	r1, sp
 801ca78:	4620      	mov	r0, r4
 801ca7a:	f7ff facc 	bl	801c016 <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801ca7e:	2320      	movs	r3, #32
 801ca80:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 801ca82:	4669      	mov	r1, sp
 801ca84:	4620      	mov	r0, r4
 801ca86:	f7ff fb27 	bl	801c0d8 <draw_box_label>
                    draw_box(dropdown_obj, &clip_area_core, dropdown->sel_opt_id, LV_STATE_CHECKED);
 801ca8a:	2301      	movs	r3, #1
 801ca8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ca8e:	4669      	mov	r1, sp
 801ca90:	4620      	mov	r0, r4
 801ca92:	f7ff fac0 	bl	801c016 <draw_box>
                    draw_box_label(dropdown_obj, &clip_area_core, dropdown->sel_opt_id, LV_STATE_CHECKED);
 801ca96:	2301      	movs	r3, #1
 801ca98:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801ca9a:	4669      	mov	r1, sp
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	f7ff fb1b 	bl	801c0d8 <draw_box_label>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801caa2:	4629      	mov	r1, r5
 801caa4:	4805      	ldr	r0, [pc, #20]	; (801cabc <lv_dropdown_list_event+0x188>)
 801caa6:	f7e5 fa48 	bl	8001f3a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801caaa:	e793      	b.n	801c9d4 <lv_dropdown_list_event+0xa0>
                draw_box(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801caac:	2320      	movs	r3, #32
 801caae:	4669      	mov	r1, sp
 801cab0:	4620      	mov	r0, r4
 801cab2:	f7ff fab0 	bl	801c016 <draw_box>
                draw_box_label(dropdown_obj, &clip_area_core, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801cab6:	2320      	movs	r3, #32
 801cab8:	e7da      	b.n	801ca70 <lv_dropdown_list_event+0x13c>
 801caba:	bf00      	nop
 801cabc:	08029e0c 	.word	0x08029e0c

0801cac0 <lv_img_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_img_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801cac0:	b538      	push	{r3, r4, r5, lr}
    LV_TRACE_OBJ_CREATE("begin");

    lv_img_t * img = (lv_img_t *)obj;

    img->src       = NULL;
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 801cac2:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    img->src       = NULL;
 801cac6:	2500      	movs	r5, #0
{
 801cac8:	460c      	mov	r4, r1
    img->cf        = LV_IMG_CF_UNKNOWN;
    img->w         = lv_obj_get_width(obj);
 801caca:	4608      	mov	r0, r1
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 801cacc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    img->src       = NULL;
 801cad0:	624d      	str	r5, [r1, #36]	; 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 801cad2:	f043 0303 	orr.w	r3, r3, #3
 801cad6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    img->w         = lv_obj_get_width(obj);
 801cada:	f7e8 fa78 	bl	8004fce <lv_obj_get_width>
 801cade:	85a0      	strh	r0, [r4, #44]	; 0x2c
    img->h         = lv_obj_get_height(obj);
 801cae0:	4620      	mov	r0, r4
 801cae2:	f7e8 fa7a 	bl	8004fda <lv_obj_get_height>
    img->zoom = LV_IMG_ZOOM_NONE;
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
    img->offset.x  = 0;
    img->offset.y  = 0;
    img->pivot.x = 0;
    img->pivot.y = 0;
 801cae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    img->h         = lv_obj_get_height(obj);
 801caea:	85e0      	strh	r0, [r4, #46]	; 0x2e

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801caec:	2102      	movs	r1, #2
    img->pivot.y = 0;
 801caee:	6363      	str	r3, [r4, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801caf0:	4620      	mov	r0, r4
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801caf2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    img->offset.x  = 0;
 801caf6:	62a5      	str	r5, [r4, #40]	; 0x28
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801caf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    img->angle = 0;
 801cafc:	6325      	str	r5, [r4, #48]	; 0x30
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 801cafe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801cb02:	f7e7 f9d4 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 801cb06:	4620      	mov	r0, r4
 801cb08:	f44f 4180 	mov.w	r1, #16384	; 0x4000

    LV_TRACE_OBJ_CREATE("finished");
}
 801cb0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 801cb10:	f7e7 b9aa 	b.w	8003e68 <lv_obj_add_flag>

0801cb14 <lv_img_destructor>:

static void lv_img_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
    LV_UNUSED(class_p);
    lv_img_t * img = (lv_img_t *)obj;
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 801cb14:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 801cb18:	f003 0303 	and.w	r3, r3, #3
 801cb1c:	3b01      	subs	r3, #1
 801cb1e:	2b01      	cmp	r3, #1
{
 801cb20:	b510      	push	{r4, lr}
 801cb22:	460c      	mov	r4, r1
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 801cb24:	d80a      	bhi.n	801cb3c <lv_img_destructor+0x28>
        lv_mem_free((void*)img->src);
 801cb26:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801cb28:	f7fa fef4 	bl	8017914 <lv_mem_free>
        img->src      = NULL;
 801cb2c:	2300      	movs	r3, #0
 801cb2e:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 801cb30:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cb34:	f043 0303 	orr.w	r3, r3, #3
 801cb38:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    }
}
 801cb3c:	bd10      	pop	{r4, pc}

0801cb3e <lv_obj_get_style_transform_angle.constprop.0>:
 801cb3e:	f640 020f 	movw	r2, #2063	; 0x80f
 801cb42:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t part)
 801cb44:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801cb46:	f7ea fcbf 	bl	80074c8 <lv_obj_get_style_prop>
}
 801cb4a:	b200      	sxth	r0, r0
 801cb4c:	bd08      	pop	{r3, pc}

0801cb4e <lv_obj_get_style_transform_zoom.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801cb4e:	f640 020e 	movw	r2, #2062	; 0x80e
 801cb52:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_transform_zoom(const struct _lv_obj_t * obj, uint32_t part)
 801cb54:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801cb56:	f7ea fcb7 	bl	80074c8 <lv_obj_get_style_prop>
}
 801cb5a:	b200      	sxth	r0, r0
 801cb5c:	bd08      	pop	{r3, pc}
	...

0801cb60 <lv_img_create>:
{
 801cb60:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801cb62:	4804      	ldr	r0, [pc, #16]	; (801cb74 <lv_img_create+0x14>)
{
 801cb64:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801cb66:	f7e7 fcdd 	bl	8004524 <lv_obj_class_create_obj>
 801cb6a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801cb6c:	f7e7 fd67 	bl	800463e <lv_obj_class_init_obj>
}
 801cb70:	4620      	mov	r0, r4
 801cb72:	bd10      	pop	{r4, pc}
 801cb74:	08029e28 	.word	0x08029e28

0801cb78 <lv_img_set_src>:
{
 801cb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb7c:	460e      	mov	r6, r1
 801cb7e:	b088      	sub	sp, #32
 801cb80:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 801cb82:	f7e8 fb79 	bl	8005278 <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801cb86:	4630      	mov	r0, r6
 801cb88:	f7ed fd58 	bl	800a63c <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801cb8c:	2803      	cmp	r0, #3
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801cb8e:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 801cb90:	d114      	bne.n	801cbbc <lv_img_set_src+0x44>
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 801cb92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cb96:	f003 0303 	and.w	r3, r3, #3
 801cb9a:	3b01      	subs	r3, #1
 801cb9c:	2b01      	cmp	r3, #1
 801cb9e:	d802      	bhi.n	801cba6 <lv_img_set_src+0x2e>
            lv_mem_free((void*)img->src);
 801cba0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cba2:	f7fa feb7 	bl	8017914 <lv_mem_free>
        img->src      = NULL;
 801cba6:	2300      	movs	r3, #0
 801cba8:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 801cbaa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cbae:	f043 0303 	orr.w	r3, r3, #3
 801cbb2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 801cbb6:	b008      	add	sp, #32
 801cbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_img_decoder_get_info(src, &header);
 801cbbc:	a906      	add	r1, sp, #24
 801cbbe:	4630      	mov	r0, r6
 801cbc0:	f7f2 fb9c 	bl	800f2fc <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801cbc4:	2d00      	cmp	r5, #0
 801cbc6:	d138      	bne.n	801cc3a <lv_img_set_src+0xc2>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 801cbc8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cbcc:	f003 0303 	and.w	r3, r3, #3
 801cbd0:	3b01      	subs	r3, #1
 801cbd2:	2b01      	cmp	r3, #1
 801cbd4:	d802      	bhi.n	801cbdc <lv_img_set_src+0x64>
            lv_mem_free((void*)img->src);
 801cbd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cbd8:	f7fa fe9c 	bl	8017914 <lv_mem_free>
        img->src = src;
 801cbdc:	6266      	str	r6, [r4, #36]	; 0x24
    img->w        = header.w;
 801cbde:	9a06      	ldr	r2, [sp, #24]
    img->src_type = src_type;
 801cbe0:	f005 0503 	and.w	r5, r5, #3
    img->cf       = header.cf;
 801cbe4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    img->w        = header.w;
 801cbe8:	f3c2 238a 	ubfx	r3, r2, #10, #11
    img->pivot.x = header.w / 2;
 801cbec:	f3c2 22c9 	ubfx	r2, r2, #11, #10
    img->cf       = header.cf;
 801cbf0:	f3c0 0004 	ubfx	r0, r0, #0, #5
    img->w        = header.w;
 801cbf4:	85a3      	strh	r3, [r4, #44]	; 0x2c
    img->h        = header.h;
 801cbf6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    img->src_type = src_type;
 801cbfa:	ea45 0580 	orr.w	r5, r5, r0, lsl #2
    img->pivot.x = header.w / 2;
 801cbfe:	8662      	strh	r2, [r4, #50]	; 0x32
    lv_obj_refresh_self_size(obj);
 801cc00:	4620      	mov	r0, r4
    img->h        = header.h;
 801cc02:	f3c3 114a 	ubfx	r1, r3, #5, #11
    img->pivot.y = header.h / 2;
 801cc06:	f3c3 1389 	ubfx	r3, r3, #6, #10
    img->h        = header.h;
 801cc0a:	85e1      	strh	r1, [r4, #46]	; 0x2e
    img->src_type = src_type;
 801cc0c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    img->pivot.y = header.h / 2;
 801cc10:	86a3      	strh	r3, [r4, #52]	; 0x34
    img->src_type = src_type;
 801cc12:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 801cc16:	430d      	orrs	r5, r1
 801cc18:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    lv_obj_refresh_self_size(obj);
 801cc1c:	f7e8 fa67 	bl	80050ee <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 801cc20:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cc22:	b91b      	cbnz	r3, 801cc2c <lv_img_set_src+0xb4>
 801cc24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801cc26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cc2a:	d002      	beq.n	801cc32 <lv_img_set_src+0xba>
 801cc2c:	4620      	mov	r0, r4
 801cc2e:	f7e8 f838 	bl	8004ca2 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 801cc32:	4620      	mov	r0, r4
 801cc34:	f7e8 fb20 	bl	8005278 <lv_obj_invalidate>
 801cc38:	e7bd      	b.n	801cbb6 <lv_img_set_src+0x3e>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 801cc3a:	1e6b      	subs	r3, r5, #1
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	2b01      	cmp	r3, #1
 801cc40:	d81c      	bhi.n	801cc7c <lv_img_set_src+0x104>
        if(img->src != src) {
 801cc42:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801cc44:	42b7      	cmp	r7, r6
 801cc46:	d019      	beq.n	801cc7c <lv_img_set_src+0x104>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 801cc48:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 801cc4c:	4630      	mov	r0, r6
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 801cc4e:	f003 0303 	and.w	r3, r3, #3
 801cc52:	3b01      	subs	r3, #1
            const void * old_src = NULL;
 801cc54:	2b01      	cmp	r3, #1
 801cc56:	bf88      	it	hi
 801cc58:	2700      	movhi	r7, #0
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 801cc5a:	f7e3 fae3 	bl	8000224 <strlen>
 801cc5e:	3001      	adds	r0, #1
 801cc60:	f7fa ffda 	bl	8017c18 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 801cc64:	4680      	mov	r8, r0
 801cc66:	b900      	cbnz	r0, 801cc6a <lv_img_set_src+0xf2>
 801cc68:	e7fe      	b.n	801cc68 <lv_img_set_src+0xf0>
            strcpy(new_str, src);
 801cc6a:	4631      	mov	r1, r6
 801cc6c:	f007 f80c 	bl	8023c88 <strcpy>
            img->src = new_str;
 801cc70:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void*)old_src);
 801cc74:	b117      	cbz	r7, 801cc7c <lv_img_set_src+0x104>
 801cc76:	4638      	mov	r0, r7
 801cc78:	f7fa fe4c 	bl	8017914 <lv_mem_free>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801cc7c:	2d02      	cmp	r5, #2
 801cc7e:	d1ae      	bne.n	801cbde <lv_img_set_src+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801cc80:	f241 4259 	movw	r2, #5209	; 0x1459
 801cc84:	2100      	movs	r1, #0
 801cc86:	4620      	mov	r0, r4
 801cc88:	f7ea fc1e 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801cc8c:	f241 425a 	movw	r2, #5210	; 0x145a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801cc90:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801cc92:	2100      	movs	r1, #0
 801cc94:	4620      	mov	r0, r4
 801cc96:	f7ea fc17 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801cc9a:	f241 425b 	movw	r2, #5211	; 0x145b
    return (lv_coord_t)v.num;
 801cc9e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801cca0:	2100      	movs	r1, #0
 801cca2:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801cca4:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801cca6:	f7ea fc0f 	bl	80074c8 <lv_obj_get_style_prop>
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801ccaa:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    return (lv_coord_t)v.num;
 801ccae:	b200      	sxth	r0, r0
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	4631      	mov	r1, r6
 801ccb4:	9000      	str	r0, [sp, #0]
 801ccb6:	a807      	add	r0, sp, #28
 801ccb8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801ccbc:	9b05      	ldr	r3, [sp, #20]
 801ccbe:	463a      	mov	r2, r7
 801ccc0:	f7fc fd39 	bl	8019736 <lv_txt_get_size>
        header.w = size.x;
 801ccc4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ccc8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801cccc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801ccd0:	055b      	lsls	r3, r3, #21
 801ccd2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801ccd6:	9a06      	ldr	r2, [sp, #24]
 801ccd8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801ccdc:	4313      	orrs	r3, r2
 801ccde:	9306      	str	r3, [sp, #24]
 801cce0:	e77d      	b.n	801cbde <lv_img_set_src+0x66>
	...

0801cce4 <lv_img_event>:

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 801cce8:	4608      	mov	r0, r1
{
 801ccea:	b09b      	sub	sp, #108	; 0x6c
 801ccec:	460f      	mov	r7, r1
    lv_event_code_t code = lv_event_get_code(e);
 801ccee:	f7e5 f9bd 	bl	800206c <lv_event_get_code>

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 801ccf2:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 801ccf4:	4605      	mov	r5, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 801ccf6:	d10f      	bne.n	801cd18 <lv_img_event+0x34>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 801ccf8:	4638      	mov	r0, r7
 801ccfa:	f7e5 f9b5 	bl	8002068 <lv_event_get_target>
    lv_img_t * img = (lv_img_t *)obj;

    if(code == LV_EVENT_STYLE_CHANGED) {
 801ccfe:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801cd00:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801cd02:	d117      	bne.n	801cd34 <lv_img_event+0x50>
        /*Refresh the file name to refresh the symbol text size*/
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 801cd04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801cd08:	f003 0303 	and.w	r3, r3, #3
 801cd0c:	2b02      	cmp	r3, #2
 801cd0e:	d10e      	bne.n	801cd2e <lv_img_event+0x4a>
            lv_img_set_src(obj, img->src);
 801cd10:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801cd12:	f7ff ff31 	bl	801cb78 <lv_img_set_src>
 801cd16:	e007      	b.n	801cd28 <lv_img_event+0x44>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 801cd18:	2818      	cmp	r0, #24
 801cd1a:	d0ed      	beq.n	801ccf8 <lv_img_event+0x14>
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801cd1c:	4639      	mov	r1, r7
 801cd1e:	48ac      	ldr	r0, [pc, #688]	; (801cfd0 <lv_img_event+0x2ec>)
 801cd20:	f7e5 f90b 	bl	8001f3a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801cd24:	2801      	cmp	r0, #1
 801cd26:	d0e7      	beq.n	801ccf8 <lv_img_event+0x14>
        p->y = img->h;
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
        draw_img(e);
    }
}
 801cd28:	b01b      	add	sp, #108	; 0x6c
 801cd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_refresh_ext_draw_size(obj);
 801cd2e:	f7e7 ffb8 	bl	8004ca2 <lv_obj_refresh_ext_draw_size>
 801cd32:	e7f9      	b.n	801cd28 <lv_img_event+0x44>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801cd34:	2d13      	cmp	r5, #19
 801cd36:	d153      	bne.n	801cde0 <lv_img_event+0xfc>
        lv_coord_t * s = lv_event_get_param(e);
 801cd38:	4638      	mov	r0, r7
 801cd3a:	f7e5 f999 	bl	8002070 <lv_event_get_param>
 801cd3e:	4605      	mov	r5, r0
        lv_coord_t transf_zoom = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 801cd40:	4620      	mov	r0, r4
 801cd42:	f7ff ff04 	bl	801cb4e <lv_obj_get_style_transform_zoom.constprop.0>
        transf_zoom = (transf_zoom * img->zoom) >> 8;
 801cd46:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
 801cd4a:	fb00 f008 	mul.w	r0, r0, r8
 801cd4e:	ea4f 2820 	mov.w	r8, r0, asr #8
        lv_coord_t transf_angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801cd52:	4620      	mov	r0, r4
 801cd54:	f7ff fef3 	bl	801cb3e <lv_obj_get_style_transform_angle.constprop.0>
        transf_angle += img->angle;
 801cd58:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
 801cd5c:	4448      	add	r0, r9
 801cd5e:	fa0f f980 	sxth.w	r9, r0
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
 801cd62:	f1b9 0f00 	cmp.w	r9, #0
 801cd66:	d104      	bne.n	801cd72 <lv_img_event+0x8e>
 801cd68:	fa0f f388 	sxth.w	r3, r8
 801cd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd70:	d0da      	beq.n	801cd28 <lv_img_event+0x44>
            lv_coord_t w = lv_obj_get_width(obj);
 801cd72:	4620      	mov	r0, r4
 801cd74:	f7e8 f92b 	bl	8004fce <lv_obj_get_width>
 801cd78:	4607      	mov	r7, r0
            lv_coord_t h = lv_obj_get_height(obj);
 801cd7a:	4620      	mov	r0, r4
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &img->pivot);
 801cd7c:	3432      	adds	r4, #50	; 0x32
            lv_coord_t h = lv_obj_get_height(obj);
 801cd7e:	f7e8 f92c 	bl	8004fda <lv_obj_get_height>
 801cd82:	4606      	mov	r6, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &img->pivot);
 801cd84:	fa1f f088 	uxth.w	r0, r8
 801cd88:	464b      	mov	r3, r9
 801cd8a:	4632      	mov	r2, r6
 801cd8c:	4639      	mov	r1, r7
 801cd8e:	9000      	str	r0, [sp, #0]
 801cd90:	a812      	add	r0, sp, #72	; 0x48
 801cd92:	9401      	str	r4, [sp, #4]
 801cd94:	f7f1 fcea 	bl	800e76c <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, pad_ori - a.x1);
 801cd98:	f9b5 0000 	ldrsh.w	r0, [r5]
 801cd9c:	f9bd 1048 	ldrsh.w	r1, [sp, #72]	; 0x48
 801cda0:	1a41      	subs	r1, r0, r1
 801cda2:	4281      	cmp	r1, r0
 801cda4:	bfb8      	it	lt
 801cda6:	4601      	movlt	r1, r0
 801cda8:	b209      	sxth	r1, r1
 801cdaa:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, pad_ori - a.y1);
 801cdac:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	; 0x4a
 801cdb0:	1a82      	subs	r2, r0, r2
 801cdb2:	428a      	cmp	r2, r1
 801cdb4:	bfb8      	it	lt
 801cdb6:	460a      	movlt	r2, r1
 801cdb8:	b211      	sxth	r1, r2
 801cdba:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, pad_ori + a.x2 - w);
 801cdbc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801cdc0:	4403      	add	r3, r0
 801cdc2:	1bdb      	subs	r3, r3, r7
 801cdc4:	428b      	cmp	r3, r1
 801cdc6:	bfb8      	it	lt
 801cdc8:	460b      	movlt	r3, r1
 801cdca:	b219      	sxth	r1, r3
 801cdcc:	8029      	strh	r1, [r5, #0]
            *s = LV_MAX(*s, pad_ori + a.y2 - h);
 801cdce:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801cdd2:	4410      	add	r0, r2
 801cdd4:	1b80      	subs	r0, r0, r6
 801cdd6:	4281      	cmp	r1, r0
 801cdd8:	bfb8      	it	lt
 801cdda:	4601      	movlt	r1, r0
 801cddc:	8029      	strh	r1, [r5, #0]
 801cdde:	e7a3      	b.n	801cd28 <lv_img_event+0x44>
    else if(code == LV_EVENT_HIT_TEST) {
 801cde0:	2d11      	cmp	r5, #17
 801cde2:	d16e      	bne.n	801cec2 <lv_img_event+0x1de>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801cde4:	4638      	mov	r0, r7
 801cde6:	f7e5 f943 	bl	8002070 <lv_event_get_param>
 801cdea:	4605      	mov	r5, r0
        lv_coord_t zoom = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 801cdec:	4620      	mov	r0, r4
 801cdee:	f7ff feae 	bl	801cb4e <lv_obj_get_style_transform_zoom.constprop.0>
 801cdf2:	4681      	mov	r9, r0
        lv_coord_t angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801cdf4:	4620      	mov	r0, r4
        zoom = (zoom * img->zoom) >> 8;
 801cdf6:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
        lv_coord_t angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801cdf8:	f7ff fea1 	bl	801cb3e <lv_obj_get_style_transform_angle.constprop.0>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 801cdfc:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
        lv_coord_t angle = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801ce00:	4606      	mov	r6, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 801ce02:	4620      	mov	r0, r4
        angle += img->angle;
 801ce04:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 801ce08:	f7e8 f8e1 	bl	8004fce <lv_obj_get_width>
 801ce0c:	4582      	cmp	sl, r0
 801ce0e:	d153      	bne.n	801ceb8 <lv_img_event+0x1d4>
 801ce10:	f9b4 a02e 	ldrsh.w	sl, [r4, #46]	; 0x2e
 801ce14:	4620      	mov	r0, r4
 801ce16:	f7e8 f8e0 	bl	8004fda <lv_obj_get_height>
 801ce1a:	4582      	cmp	sl, r0
 801ce1c:	d14c      	bne.n	801ceb8 <lv_img_event+0x1d4>
        zoom = (zoom * img->zoom) >> 8;
 801ce1e:	fb07 f209 	mul.w	r2, r7, r9
        angle += img->angle;
 801ce22:	eb08 0006 	add.w	r0, r8, r6
        zoom = (zoom * img->zoom) >> 8;
 801ce26:	1217      	asrs	r7, r2, #8
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 801ce28:	f342 220f 	sbfx	r2, r2, #8, #16
        angle += img->angle;
 801ce2c:	b206      	sxth	r6, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 801ce2e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801ce32:	d112      	bne.n	801ce5a <lv_img_event+0x176>
                (zoom != LV_IMG_ZOOM_NONE || angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 801ce34:	b98e      	cbnz	r6, 801ce5a <lv_img_event+0x176>
 801ce36:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801ce3a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 801ce3e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801ce42:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801ce46:	d108      	bne.n	801ce5a <lv_img_event+0x176>
 801ce48:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 801ce4c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 801ce50:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801ce54:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801ce58:	d02e      	beq.n	801ceb8 <lv_img_event+0x1d4>
            lv_coord_t w = lv_obj_get_width(obj);
 801ce5a:	4620      	mov	r0, r4
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &img->pivot);
 801ce5c:	b2bf      	uxth	r7, r7
            lv_coord_t w = lv_obj_get_width(obj);
 801ce5e:	f7e8 f8b6 	bl	8004fce <lv_obj_get_width>
 801ce62:	9003      	str	r0, [sp, #12]
            lv_coord_t h = lv_obj_get_height(obj);
 801ce64:	4620      	mov	r0, r4
 801ce66:	f7e8 f8b8 	bl	8004fda <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &img->pivot);
 801ce6a:	f104 0332 	add.w	r3, r4, #50	; 0x32
            lv_coord_t h = lv_obj_get_height(obj);
 801ce6e:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &img->pivot);
 801ce70:	9903      	ldr	r1, [sp, #12]
 801ce72:	9301      	str	r3, [sp, #4]
 801ce74:	a812      	add	r0, sp, #72	; 0x48
 801ce76:	4633      	mov	r3, r6
 801ce78:	9700      	str	r7, [sp, #0]
 801ce7a:	f7f1 fc77 	bl	800e76c <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 801ce7e:	8aa2      	ldrh	r2, [r4, #20]
 801ce80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
            coords.y1 += obj->coords.y1;
 801ce84:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
            coords.x1 += obj->coords.x1;
 801ce88:	4413      	add	r3, r2
 801ce8a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            coords.y1 += obj->coords.y1;
 801ce8e:	8ae3      	ldrh	r3, [r4, #22]
 801ce90:	4419      	add	r1, r3
 801ce92:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
            coords.x2 += obj->coords.x1;
 801ce96:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801ce9a:	440a      	add	r2, r1
 801ce9c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            coords.y2 += obj->coords.y1;
 801cea0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801cea4:	4413      	add	r3, r2
 801cea6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 801ceaa:	2200      	movs	r2, #0
 801ceac:	6829      	ldr	r1, [r5, #0]
 801ceae:	a812      	add	r0, sp, #72	; 0x48
 801ceb0:	f7fa f92d 	bl	801710e <_lv_area_is_point_on>
 801ceb4:	7128      	strb	r0, [r5, #4]
 801ceb6:	e737      	b.n	801cd28 <lv_img_event+0x44>
            lv_obj_get_click_area(obj, &a);
 801ceb8:	a912      	add	r1, sp, #72	; 0x48
 801ceba:	4620      	mov	r0, r4
 801cebc:	f7e8 fbe6 	bl	800568c <lv_obj_get_click_area>
 801cec0:	e7f3      	b.n	801ceaa <lv_img_event+0x1c6>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801cec2:	2d26      	cmp	r5, #38	; 0x26
 801cec4:	d107      	bne.n	801ced6 <lv_img_event+0x1f2>
        lv_point_t * p = lv_event_get_param(e);;
 801cec6:	4638      	mov	r0, r7
 801cec8:	f7e5 f8d2 	bl	8002070 <lv_event_get_param>
        p->x = img->w;
 801cecc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801cece:	8003      	strh	r3, [r0, #0]
        p->y = img->h;
 801ced0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801ced2:	8043      	strh	r3, [r0, #2]
 801ced4:	e728      	b.n	801cd28 <lv_img_event+0x44>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 801ced6:	2d18      	cmp	r5, #24
 801ced8:	f63f af26 	bhi.w	801cd28 <lv_img_event+0x44>
 801cedc:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 801cee0:	fa20 f505 	lsr.w	r5, r0, r5
 801cee4:	07e9      	lsls	r1, r5, #31
 801cee6:	f57f af1f 	bpl.w	801cd28 <lv_img_event+0x44>

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 801ceea:	4638      	mov	r0, r7
 801ceec:	f7e5 f8be 	bl	800206c <lv_event_get_code>
 801cef0:	4681      	mov	r9, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801cef2:	4638      	mov	r0, r7
 801cef4:	f7e5 f8b8 	bl	8002068 <lv_event_get_target>
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 801cef8:	f1b9 0f12 	cmp.w	r9, #18
    lv_obj_t * obj = lv_event_get_target(e);
 801cefc:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 801cefe:	d169      	bne.n	801cfd4 <lv_img_event+0x2f0>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 801cf00:	4638      	mov	r0, r7
 801cf02:	f7e5 f8b5 	bl	8002070 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 801cf06:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 801cf08:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 801cf0a:	2b02      	cmp	r3, #2
 801cf0c:	f43f af0c 	beq.w	801cd28 <lv_img_event+0x44>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 801cf10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cf14:	079a      	lsls	r2, r3, #30
 801cf16:	d502      	bpl.n	801cf1e <lv_img_event+0x23a>
            a.y1 += obj->coords.y1;
            a.x2 += obj->coords.x1;
            a.y2 += obj->coords.y1;

            if(_lv_area_is_in(clip_area, &a, 0) == false) {
                info->res = LV_COVER_RES_NOT_COVER;
 801cf18:	2301      	movs	r3, #1
 801cf1a:	702b      	strb	r3, [r5, #0]
                return;
 801cf1c:	e704      	b.n	801cd28 <lv_img_event+0x44>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 801cf1e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 801cf22:	2b10      	cmp	r3, #16
 801cf24:	d001      	beq.n	801cf2a <lv_img_event+0x246>
 801cf26:	2b04      	cmp	r3, #4
 801cf28:	d1f6      	bne.n	801cf18 <lv_img_event+0x234>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 801cf2a:	2246      	movs	r2, #70	; 0x46
 801cf2c:	2100      	movs	r1, #0
 801cf2e:	4620      	mov	r0, r4
 801cf30:	f7ea faca 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801cf34:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 801cf36:	28ff      	cmp	r0, #255	; 0xff
 801cf38:	d1ee      	bne.n	801cf18 <lv_img_event+0x234>
        int32_t angle_final = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f7ff fdff 	bl	801cb3e <lv_obj_get_style_transform_angle.constprop.0>
        angle_final += img->angle;
 801cf40:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
        if(angle_final != 0) {
 801cf44:	eb18 0800 	adds.w	r8, r8, r0
 801cf48:	d1e6      	bne.n	801cf18 <lv_img_event+0x234>
        int32_t zoom_final = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 801cf4a:	4620      	mov	r0, r4
 801cf4c:	f7ff fdff 	bl	801cb4e <lv_obj_get_style_transform_zoom.constprop.0>
        zoom_final = (zoom_final * img->zoom) >> 8;
 801cf50:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
 801cf52:	4370      	muls	r0, r6
 801cf54:	1206      	asrs	r6, r0, #8
        const lv_area_t * clip_area = lv_event_get_param(e);
 801cf56:	4638      	mov	r0, r7
 801cf58:	f7e5 f88a 	bl	8002070 <lv_event_get_param>
 801cf5c:	4607      	mov	r7, r0
        if(zoom_final == LV_IMG_ZOOM_NONE) {
 801cf5e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 801cf62:	d108      	bne.n	801cf76 <lv_img_event+0x292>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 801cf64:	4642      	mov	r2, r8
 801cf66:	f104 0114 	add.w	r1, r4, #20
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801cf6a:	f7fa f983 	bl	8017274 <_lv_area_is_in>
 801cf6e:	2800      	cmp	r0, #0
 801cf70:	f47f aeda 	bne.w	801cd28 <lv_img_event+0x44>
 801cf74:	e7d0      	b.n	801cf18 <lv_img_event+0x234>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, zoom_final, &img->pivot);
 801cf76:	4620      	mov	r0, r4
 801cf78:	b2b6      	uxth	r6, r6
 801cf7a:	f7e8 f828 	bl	8004fce <lv_obj_get_width>
 801cf7e:	9003      	str	r0, [sp, #12]
 801cf80:	4620      	mov	r0, r4
 801cf82:	f7e8 f82a 	bl	8004fda <lv_obj_get_height>
 801cf86:	f104 0332 	add.w	r3, r4, #50	; 0x32
 801cf8a:	4602      	mov	r2, r0
 801cf8c:	9903      	ldr	r1, [sp, #12]
 801cf8e:	a812      	add	r0, sp, #72	; 0x48
 801cf90:	9301      	str	r3, [sp, #4]
 801cf92:	9600      	str	r6, [sp, #0]
 801cf94:	4643      	mov	r3, r8
 801cf96:	f7f1 fbe9 	bl	800e76c <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 801cf9a:	8aa2      	ldrh	r2, [r4, #20]
 801cf9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801cfa0:	4638      	mov	r0, r7
            a.y1 += obj->coords.y1;
 801cfa2:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
            a.x1 += obj->coords.x1;
 801cfa6:	4413      	add	r3, r2
 801cfa8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            a.y1 += obj->coords.y1;
 801cfac:	8ae3      	ldrh	r3, [r4, #22]
 801cfae:	4419      	add	r1, r3
 801cfb0:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
            a.x2 += obj->coords.x1;
 801cfb4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801cfb8:	440a      	add	r2, r1
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801cfba:	a912      	add	r1, sp, #72	; 0x48
            a.x2 += obj->coords.x1;
 801cfbc:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
            a.y2 += obj->coords.y1;
 801cfc0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801cfc4:	4413      	add	r3, r2
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801cfc6:	4642      	mov	r2, r8
            a.y2 += obj->coords.y1;
 801cfc8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801cfcc:	e7cd      	b.n	801cf6a <lv_img_event+0x286>
 801cfce:	bf00      	nop
 801cfd0:	08029e28 	.word	0x08029e28
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 801cfd4:	f1b9 0f15 	cmp.w	r9, #21
 801cfd8:	d003      	beq.n	801cfe2 <lv_img_event+0x2fe>
 801cfda:	f1b9 0f18 	cmp.w	r9, #24
 801cfde:	f47f aea3 	bne.w	801cd28 <lv_img_event+0x44>

        int32_t zoom_final = lv_obj_get_style_transform_zoom(obj, LV_PART_MAIN);
 801cfe2:	4620      	mov	r0, r4
 801cfe4:	f7ff fdb3 	bl	801cb4e <lv_obj_get_style_transform_zoom.constprop.0>
        zoom_final = (zoom_final * img->zoom) >> 8;
 801cfe8:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
 801cfea:	4370      	muls	r0, r6
 801cfec:	1206      	asrs	r6, r0, #8

        int32_t angle_final = lv_obj_get_style_transform_angle(obj, LV_PART_MAIN);
 801cfee:	4620      	mov	r0, r4
 801cff0:	f7ff fda5 	bl	801cb3e <lv_obj_get_style_transform_angle.constprop.0>
        angle_final += img->angle;
 801cff4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801cff6:	4403      	add	r3, r0

        lv_coord_t obj_w = lv_obj_get_width(obj);
 801cff8:	4620      	mov	r0, r4
        angle_final += img->angle;
 801cffa:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(obj);
 801cffc:	f7e7 ffe7 	bl	8004fce <lv_obj_get_width>
 801d000:	4683      	mov	fp, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 801d002:	4620      	mov	r0, r4
 801d004:	f7e7 ffe9 	bl	8004fda <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801d008:	f241 0232 	movw	r2, #4146	; 0x1032
 801d00c:	4680      	mov	r8, r0
 801d00e:	2100      	movs	r1, #0
 801d010:	4620      	mov	r0, r4
 801d012:	f7ea fa59 	bl	80074c8 <lv_obj_get_style_prop>
 801d016:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d018:	f241 0212 	movw	r2, #4114	; 0x1012
 801d01c:	2100      	movs	r1, #0
 801d01e:	4620      	mov	r0, r4

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801d020:	fa1f fa85 	uxth.w	sl, r5
 801d024:	f7ea fa50 	bl	80074c8 <lv_obj_get_style_prop>
 801d028:	fa10 f085 	uxtah	r0, r0, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d02c:	f241 0213 	movw	r2, #4115	; 0x1013
 801d030:	2100      	movs	r1, #0
 801d032:	b283      	uxth	r3, r0
 801d034:	4620      	mov	r0, r4
 801d036:	9303      	str	r3, [sp, #12]
 801d038:	f7ea fa46 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d03c:	f241 0210 	movw	r2, #4112	; 0x1010
 801d040:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d042:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d044:	4620      	mov	r0, r4
 801d046:	f7ea fa3f 	bl	80074c8 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801d04a:	4450      	add	r0, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d04c:	f241 0211 	movw	r2, #4113	; 0x1011
 801d050:	2100      	movs	r1, #0
 801d052:	b285      	uxth	r5, r0
 801d054:	4620      	mov	r0, r4
 801d056:	f7ea fa37 	bl	80074c8 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
 801d05a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801d05c:	9a03      	ldr	r2, [sp, #12]
        bg_pivot.y = img->pivot.y + ptop;
        lv_area_t bg_coords;
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801d05e:	4659      	mov	r1, fp
 801d060:	9008      	str	r0, [sp, #32]
 801d062:	a80c      	add	r0, sp, #48	; 0x30
        bg_pivot.x = img->pivot.x + pleft;
 801d064:	4413      	add	r3, r2
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801d066:	4642      	mov	r2, r8
        bg_pivot.x = img->pivot.x + pleft;
 801d068:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        bg_pivot.y = img->pivot.y + ptop;
 801d06c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d06e:	442b      	add	r3, r5
 801d070:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801d074:	b2b3      	uxth	r3, r6
 801d076:	9305      	str	r3, [sp, #20]
 801d078:	ab0b      	add	r3, sp, #44	; 0x2c
 801d07a:	9301      	str	r3, [sp, #4]
 801d07c:	9b05      	ldr	r3, [sp, #20]
 801d07e:	9300      	str	r3, [sp, #0]
 801d080:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d084:	f7f1 fb72 	bl	800e76c <_lv_img_buf_get_transformed_area>
                angle_final, zoom_final, &bg_pivot);

        /*Modify the coordinates to draw the background for the rotated and scaled coordinates*/
        bg_coords.x1 += obj->coords.x1;
 801d088:	8aa1      	ldrh	r1, [r4, #20]
        bg_coords.y1 += obj->coords.y1;
        bg_coords.x2 += obj->coords.x1;
 801d08a:	f8bd e034 	ldrh.w	lr, [sp, #52]	; 0x34
        bg_coords.x1 += obj->coords.x1;
 801d08e:	f8bd c030 	ldrh.w	ip, [sp, #48]	; 0x30
        bg_coords.y1 += obj->coords.y1;
 801d092:	8ae2      	ldrh	r2, [r4, #22]
 801d094:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
        bg_coords.x1 += obj->coords.x1;
 801d098:	448c      	add	ip, r1
        bg_coords.x2 += obj->coords.x1;
 801d09a:	4471      	add	r1, lr
        bg_coords.y2 += obj->coords.y1;
 801d09c:	f8bd e036 	ldrh.w	lr, [sp, #54]	; 0x36
        bg_coords.y1 += obj->coords.y1;
 801d0a0:	4410      	add	r0, r2
        bg_coords.x1 += obj->coords.x1;
 801d0a2:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
        bg_coords.y2 += obj->coords.y1;
 801d0a6:	4472      	add	r2, lr
        bg_coords.x1 += obj->coords.x1;
 801d0a8:	fa0f fc8c 	sxth.w	ip, ip
        bg_coords.y1 += obj->coords.y1;
 801d0ac:	b200      	sxth	r0, r0
        bg_coords.x1 += obj->coords.x1;
 801d0ae:	9309      	str	r3, [sp, #36]	; 0x24
        bg_coords.x2 += obj->coords.x1;
 801d0b0:	b209      	sxth	r1, r1
        bg_coords.y1 += obj->coords.y1;
 801d0b2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
        bg_coords.y2 += obj->coords.y1;
 801d0b6:	b212      	sxth	r2, r2
    dest->x2 = src->x2;
 801d0b8:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
    dest->y2 = src->y2;
 801d0bc:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
        bg_coords.y1 += obj->coords.y1;
 801d0c0:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
        bg_coords.x2 += obj->coords.x1;
 801d0c4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    dest->y1 = src->y1;
 801d0c8:	82e0      	strh	r0, [r4, #22]
    dest->x2 = src->x2;
 801d0ca:	8321      	strh	r1, [r4, #24]

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801d0cc:	4639      	mov	r1, r7
 801d0ce:	4877      	ldr	r0, [pc, #476]	; (801d2ac <lv_img_event+0x5c8>)
    dest->x1 = src->x1;
 801d0d0:	f8a4 c014 	strh.w	ip, [r4, #20]
    dest->y2 = src->y2;
 801d0d4:	8362      	strh	r2, [r4, #26]
        bg_coords.y1 += obj->coords.y1;
 801d0d6:	9306      	str	r3, [sp, #24]
        bg_coords.x1 += obj->coords.x1;
 801d0d8:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
        bg_coords.y2 += obj->coords.y1;
 801d0dc:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801d0e0:	f7e4 ff2b 	bl	8001f3a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801d0e4:	2801      	cmp	r0, #1
 801d0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0e8:	f47f ae1e 	bne.w	801cd28 <lv_img_event+0x44>
    dest->x1 = src->x1;
 801d0ec:	82a3      	strh	r3, [r4, #20]

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 801d0ee:	f1b9 0f15 	cmp.w	r9, #21
    dest->y1 = src->y1;
 801d0f2:	9b06      	ldr	r3, [sp, #24]
    dest->x2 = src->x2;
 801d0f4:	f8a4 b018 	strh.w	fp, [r4, #24]
    dest->y1 = src->y1;
 801d0f8:	82e3      	strh	r3, [r4, #22]
    dest->y2 = src->y2;
 801d0fa:	f8a4 801a 	strh.w	r8, [r4, #26]
 801d0fe:	f47f ae13 	bne.w	801cd28 <lv_img_event+0x44>
            if(img->h == 0 || img->w == 0) return;
 801d102:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 801d106:	2b00      	cmp	r3, #0
 801d108:	f43f ae0e 	beq.w	801cd28 <lv_img_event+0x44>
 801d10c:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801d110:	2b00      	cmp	r3, #0
 801d112:	f43f ae09 	beq.w	801cd28 <lv_img_event+0x44>
            if(zoom_final == 0) return;
 801d116:	2e00      	cmp	r6, #0
 801d118:	f43f ae06 	beq.w	801cd28 <lv_img_event+0x44>

            const lv_area_t * clip_area = lv_event_get_param(e);
 801d11c:	4638      	mov	r0, r7
 801d11e:	f7e4 ffa7 	bl	8002070 <lv_event_get_param>
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 801d122:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
            const lv_area_t * clip_area = lv_event_get_param(e);
 801d126:	4681      	mov	r9, r0
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 801d128:	f013 0102 	ands.w	r1, r3, #2
 801d12c:	f040 809f 	bne.w	801d26e <lv_img_event+0x58a>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801d130:	9b07      	ldr	r3, [sp, #28]
                lv_draw_img_dsc_t img_dsc;
                lv_draw_img_dsc_init(&img_dsc);
 801d132:	a812      	add	r0, sp, #72	; 0x48
    dest->x2 = src->x2;
 801d134:	f9b4 b018 	ldrsh.w	fp, [r4, #24]
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801d138:	4453      	add	r3, sl
            img_max_area.y1 += ptop;
 801d13a:	8ae7      	ldrh	r7, [r4, #22]
 801d13c:	9109      	str	r1, [sp, #36]	; 0x24
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801d13e:	fa1f f883 	uxth.w	r8, r3
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801d142:	9b08      	ldr	r3, [sp, #32]
            img_max_area.y1 += ptop;
 801d144:	442f      	add	r7, r5
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801d146:	4453      	add	r3, sl
    dest->y2 = src->y2;
 801d148:	f9b4 a01a 	ldrsh.w	sl, [r4, #26]
            img_max_area.y1 += ptop;
 801d14c:	b2bf      	uxth	r7, r7
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801d14e:	b29e      	uxth	r6, r3
    dest->x1 = src->x1;
 801d150:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801d154:	9306      	str	r3, [sp, #24]
                lv_draw_img_dsc_init(&img_dsc);
 801d156:	f7ed f94f 	bl	800a3f8 <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 801d15a:	aa12      	add	r2, sp, #72	; 0x48
 801d15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d15e:	4620      	mov	r0, r4
 801d160:	f7e7 fc4a 	bl	80049f8 <lv_obj_init_draw_img_dsc>

                img_dsc.zoom = zoom_final;
                img_dsc.angle = angle_final;
                img_dsc.pivot.x = img->pivot.x;
 801d164:	8e62      	ldrh	r2, [r4, #50]	; 0x32
                img_dsc.zoom = zoom_final;
 801d166:	9b05      	ldr	r3, [sp, #20]
                img_dsc.pivot.x = img->pivot.x;
 801d168:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
                img_dsc.pivot.y = img->pivot.y;
 801d16c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
                img_dsc.antialias = img->antialias;
 801d16e:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
                img_dsc.pivot.y = img->pivot.y;
 801d172:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
                img_dsc.antialias = img->antialias;
 801d176:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                img_dsc.zoom = zoom_final;
 801d17a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                img_dsc.antialias = img->antialias;
 801d17e:	09d2      	lsrs	r2, r2, #7
                img_dsc.angle = angle_final;
 801d180:	9b04      	ldr	r3, [sp, #16]

                lv_area_t img_clip_area;
                img_clip_area.x1 = bg_coords.x1 + pleft;
                img_clip_area.y1 = bg_coords.y1 + ptop;
 801d182:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
                img_dsc.antialias = img->antialias;
 801d186:	f362 0100 	bfi	r1, r2, #0, #1
                img_dsc.angle = angle_final;
 801d18a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801d18e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
                img_clip_area.y1 = bg_coords.y1 + ptop;
 801d192:	4405      	add	r5, r0
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801d194:	9b03      	ldr	r3, [sp, #12]
                img_dsc.antialias = img->antialias;
 801d196:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
                img_clip_area.x2 = bg_coords.x2 - pright;
                img_clip_area.y2 = bg_coords.y2 - pbottom;

                _lv_area_intersect(&img_clip_area, clip_area, &img_clip_area);
 801d19a:	4649      	mov	r1, r9
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801d19c:	441a      	add	r2, r3
                img_clip_area.y1 = bg_coords.y1 + ptop;
 801d19e:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801d1a2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
                img_clip_area.x2 = bg_coords.x2 - pright;
 801d1a6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d1aa:	eba2 0208 	sub.w	r2, r2, r8
            img_max_area.x2 -= pright;
 801d1ae:	ebab 0808 	sub.w	r8, fp, r8
                img_clip_area.x2 = bg_coords.x2 - pright;
 801d1b2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
            img_max_area.x2 -= pright;
 801d1b6:	fa0f f888 	sxth.w	r8, r8
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801d1ba:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801d1be:	1b92      	subs	r2, r2, r6
            img_max_area.y2 -= pbottom;
 801d1c0:	ebaa 0606 	sub.w	r6, sl, r6
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801d1c4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
                _lv_area_intersect(&img_clip_area, clip_area, &img_clip_area);
 801d1c8:	aa0e      	add	r2, sp, #56	; 0x38
            img_max_area.y2 -= pbottom;
 801d1ca:	b236      	sxth	r6, r6
                _lv_area_intersect(&img_clip_area, clip_area, &img_clip_area);
 801d1cc:	4610      	mov	r0, r2
 801d1ce:	f7f9 ff52 	bl	8017076 <_lv_area_intersect>

                lv_area_t coords_tmp;
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 801d1d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 801d1d4:	9b06      	ldr	r3, [sp, #24]
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 801d1d6:	443a      	add	r2, r7
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 801d1d8:	b23f      	sxth	r7, r7
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 801d1da:	b291      	uxth	r1, r2
 801d1dc:	b212      	sxth	r2, r2
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 801d1de:	4297      	cmp	r7, r2
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 801d1e0:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 801d1e4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 801d1e6:	bfbc      	itt	lt
 801d1e8:	1a89      	sublt	r1, r1, r2
 801d1ea:	f8ad 1042 	strhlt.w	r1, [sp, #66]	; 0x42
            img_max_area.x1 += pleft;
 801d1ee:	9903      	ldr	r1, [sp, #12]
 801d1f0:	4419      	add	r1, r3
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 801d1f2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
            img_max_area.x1 += pleft;
 801d1f6:	b28f      	uxth	r7, r1
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 801d1f8:	3b01      	subs	r3, #1
            img_max_area.x1 += pleft;
 801d1fa:	b20d      	sxth	r5, r1

                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img->h, coords_tmp.y2 += img->h) {
 801d1fc:	4413      	add	r3, r2
 801d1fe:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 801d202:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d206:	42b3      	cmp	r3, r6
 801d208:	f6bf ad8e 	bge.w	801cd28 <lv_img_event+0x44>
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 801d20c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d20e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801d210:	443b      	add	r3, r7
 801d212:	b299      	uxth	r1, r3
 801d214:	b21b      	sxth	r3, r3
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 801d216:	429d      	cmp	r5, r3
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 801d218:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 801d21c:	bfbc      	itt	lt
 801d21e:	1a8b      	sublt	r3, r1, r2
 801d220:	f8ad 3040 	strhlt.w	r3, [sp, #64]	; 0x40
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 801d224:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d228:	3b01      	subs	r3, #1
 801d22a:	441a      	add	r2, r3
 801d22c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44

                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img->w, coords_tmp.x2 += img->w) {
 801d230:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801d234:	4543      	cmp	r3, r8
 801d236:	db08      	blt.n	801d24a <lv_img_event+0x566>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img->h, coords_tmp.y2 += img->h) {
 801d238:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d23c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801d23e:	441a      	add	r2, r3
 801d240:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801d244:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 801d248:	e7d8      	b.n	801d1fc <lv_img_event+0x518>
                        lv_draw_img(&coords_tmp, &img_clip_area, img->src, &img_dsc);
 801d24a:	ab12      	add	r3, sp, #72	; 0x48
 801d24c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d24e:	a90e      	add	r1, sp, #56	; 0x38
 801d250:	a810      	add	r0, sp, #64	; 0x40
 801d252:	f7ed f905 	bl	800a460 <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img->w, coords_tmp.x2 += img->w) {
 801d256:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 801d258:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d25c:	441a      	add	r2, r3
 801d25e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d262:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801d266:	4413      	add	r3, r2
 801d268:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d26c:	e7e0      	b.n	801d230 <lv_img_event+0x54c>
                    }
                }
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 801d26e:	f003 0303 	and.w	r3, r3, #3
        lv_area_copy(&ori_coords, &obj->coords);
 801d272:	f104 0514 	add.w	r5, r4, #20
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 801d276:	2b02      	cmp	r3, #2
 801d278:	d110      	bne.n	801d29c <lv_img_event+0x5b8>
                lv_draw_label_dsc_t label_dsc;
                lv_draw_label_dsc_init(&label_dsc);
 801d27a:	a812      	add	r0, sp, #72	; 0x48
 801d27c:	f7ed fa00 	bl	800a680 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 801d280:	aa12      	add	r2, sp, #72	; 0x48
 801d282:	4620      	mov	r0, r4
 801d284:	2100      	movs	r1, #0
 801d286:	f7e7 fb57 	bl	8004938 <lv_obj_init_draw_label_dsc>

                lv_draw_label(&obj->coords, clip_area, &label_dsc, img->src, NULL);
 801d28a:	2300      	movs	r3, #0
 801d28c:	aa12      	add	r2, sp, #72	; 0x48
 801d28e:	4649      	mov	r1, r9
 801d290:	9300      	str	r3, [sp, #0]
 801d292:	4628      	mov	r0, r5
 801d294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d296:	f7ed fbcb 	bl	800aa30 <lv_draw_label>
 801d29a:	e545      	b.n	801cd28 <lv_img_event+0x44>
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(&obj->coords, clip_area, NULL, NULL);
 801d29c:	2300      	movs	r3, #0
 801d29e:	4601      	mov	r1, r0
 801d2a0:	4628      	mov	r0, r5
 801d2a2:	461a      	mov	r2, r3
 801d2a4:	f7ed f8dc 	bl	800a460 <lv_draw_img>
 801d2a8:	e53e      	b.n	801cd28 <lv_img_event+0x44>
 801d2aa:	bf00      	nop
 801d2ac:	08029e28 	.word	0x08029e28

0801d2b0 <lv_label_dot_tmp_free>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801d2b0:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801d2b4:	065b      	lsls	r3, r3, #25
{
 801d2b6:	b510      	push	{r4, lr}
 801d2b8:	4604      	mov	r4, r0
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801d2ba:	d503      	bpl.n	801d2c4 <lv_label_dot_tmp_free+0x14>
 801d2bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d2be:	b108      	cbz	r0, 801d2c4 <lv_label_dot_tmp_free+0x14>
        lv_mem_free(label->dot.tmp_ptr);
 801d2c0:	f7fa fb28 	bl	8017914 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 801d2c4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d2c8:	f36f 1386 	bfc	r3, #6, #1
 801d2cc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 801d2d4:	bd10      	pop	{r4, pc}

0801d2d6 <lv_label_destructor>:
{
 801d2d6:	b510      	push	{r4, lr}
 801d2d8:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 801d2da:	4608      	mov	r0, r1
 801d2dc:	f7ff ffe8 	bl	801d2b0 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 801d2e0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d2e4:	071b      	lsls	r3, r3, #28
 801d2e6:	d402      	bmi.n	801d2ee <lv_label_destructor+0x18>
 801d2e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d2ea:	f7fa fb13 	bl	8017914 <lv_mem_free>
    label->text = NULL;
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	6263      	str	r3, [r4, #36]	; 0x24
}
 801d2f2:	bd10      	pop	{r4, pc}

0801d2f4 <set_ofs_y_anim>:
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 801d2f4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 801d2f8:	f7e7 bfbe 	b.w	8005278 <lv_obj_invalidate>

0801d2fc <set_ofs_x_anim>:
    label->offset.x    = v;
 801d2fc:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 801d300:	f7e7 bfba 	b.w	8005278 <lv_obj_invalidate>

0801d304 <lv_label_revert_dots>:
{
 801d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801d306:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801d30a:	4604      	mov	r4, r0
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 801d30c:	f003 0307 	and.w	r3, r3, #7
 801d310:	2b01      	cmp	r3, #1
 801d312:	d123      	bne.n	801d35c <lv_label_revert_dots+0x58>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 801d314:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801d316:	1c4a      	adds	r2, r1, #1
 801d318:	d020      	beq.n	801d35c <lv_label_revert_dots+0x58>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 801d31a:	4b12      	ldr	r3, [pc, #72]	; (801d364 <lv_label_revert_dots+0x60>)
 801d31c:	3903      	subs	r1, #3
 801d31e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 801d324:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d328:	065b      	lsls	r3, r3, #25
    while(label->text[byte_i + i] != '\0') {
 801d32a:	f04f 0300 	mov.w	r3, #0
        return label->dot.tmp_ptr;
 801d32e:	bf4c      	ite	mi
 801d330:	6aa6      	ldrmi	r6, [r4, #40]	; 0x28
        return label->dot.tmp;
 801d332:	f104 0628 	addpl.w	r6, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 801d336:	fa50 f283 	uxtab	r2, r0, r3
 801d33a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d33c:	b2dd      	uxtb	r5, r3
 801d33e:	3301      	adds	r3, #1
 801d340:	f811 c002 	ldrb.w	ip, [r1, r2]
 801d344:	188f      	adds	r7, r1, r2
 801d346:	5d75      	ldrb	r5, [r6, r5]
 801d348:	f1bc 0f00 	cmp.w	ip, #0
 801d34c:	d107      	bne.n	801d35e <lv_label_revert_dots+0x5a>
    lv_label_dot_tmp_free(obj);
 801d34e:	4620      	mov	r0, r4
    label->text[byte_i + i] = dot_tmp[i];
 801d350:	703d      	strb	r5, [r7, #0]
    lv_label_dot_tmp_free(obj);
 801d352:	f7ff ffad 	bl	801d2b0 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 801d356:	f04f 33ff 	mov.w	r3, #4294967295
 801d35a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 801d35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        label->text[byte_i + i] = dot_tmp[i];
 801d35e:	548d      	strb	r5, [r1, r2]
        i++;
 801d360:	e7e9      	b.n	801d336 <lv_label_revert_dots+0x32>
 801d362:	bf00      	nop
 801d364:	20000038 	.word	0x20000038

0801d368 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801d368:	f241 425b 	movw	r2, #5211	; 0x145b
 801d36c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801d36e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801d370:	f7ea f8aa 	bl	80074c8 <lv_obj_get_style_prop>
}
 801d374:	b200      	sxth	r0, r0
 801d376:	bd08      	pop	{r3, pc}

0801d378 <lv_obj_get_style_text_letter_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801d378:	f241 425a 	movw	r2, #5210	; 0x145a
 801d37c:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
 801d37e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801d380:	f7ea f8a2 	bl	80074c8 <lv_obj_get_style_prop>
}
 801d384:	b200      	sxth	r0, r0
 801d386:	bd08      	pop	{r3, pc}

0801d388 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801d388:	f241 4259 	movw	r2, #5209	; 0x1459
 801d38c:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 801d38e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801d390:	f7ea f89a 	bl	80074c8 <lv_obj_get_style_prop>
}
 801d394:	bd08      	pop	{r3, pc}

0801d396 <lv_obj_get_style_width.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d396:	f241 0201 	movw	r2, #4097	; 0x1001
 801d39a:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
 801d39c:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d39e:	f7ea f893 	bl	80074c8 <lv_obj_get_style_prop>
}
 801d3a2:	b200      	sxth	r0, r0
 801d3a4:	bd08      	pop	{r3, pc}
	...

0801d3a8 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801d3ac:	f9b1 3000 	ldrsh.w	r3, [r1]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 801d3b0:	460c      	mov	r4, r1
 801d3b2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d3b4:	f241 0212 	movw	r2, #4114	; 0x1012
 801d3b8:	2100      	movs	r1, #0
 801d3ba:	ed2d 8b02 	vpush	{d8}
 801d3be:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801d3c0:	9304      	str	r3, [sp, #16]
 801d3c2:	f7ea f881 	bl	80074c8 <lv_obj_get_style_prop>
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801d3c6:	8864      	ldrh	r4, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d3c8:	f241 0210 	movw	r2, #4112	; 0x1010
 801d3cc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d3ce:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d3d0:	4630      	mov	r0, r6
 801d3d2:	f7ea f879 	bl	80074c8 <lv_obj_get_style_prop>
 801d3d6:	1a20      	subs	r0, r4, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801d3d8:	a90c      	add	r1, sp, #48	; 0x30
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801d3da:	b203      	sxth	r3, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801d3dc:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801d3de:	9305      	str	r3, [sp, #20]
    lv_obj_get_content_coords(obj, &txt_coords);
 801d3e0:	f7e7 fe35 	bl	800504e <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d3e4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d3e8:	4630      	mov	r0, r6
 801d3ea:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d3ee:	3301      	adds	r3, #1
    return label->text;
 801d3f0:	f8d6 b024 	ldr.w	fp, [r6, #36]	; 0x24
 801d3f4:	1a9b      	subs	r3, r3, r2
 801d3f6:	b21b      	sxth	r3, r3
 801d3f8:	ee08 3a90 	vmov	s17, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d3fc:	f7ff ffc4 	bl	801d388 <lv_obj_get_style_text_font.constprop.0>
 801d400:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d402:	4630      	mov	r0, r6
 801d404:	f7ff ffb0 	bl	801d368 <lv_obj_get_style_text_line_space.constprop.0>
 801d408:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d40a:	4630      	mov	r0, r6
 801d40c:	f7ff ffb4 	bl	801d378 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d410:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d414:	ee08 0a10 	vmov	s16, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d418:	4630      	mov	r0, r6
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801d41a:	9303      	str	r3, [sp, #12]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d41c:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d420:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d422:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d426:	bf48      	it	mi
 801d428:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d42c:	f7ff ffb3 	bl	801d396 <lv_obj_get_style_width.constprop.0>
 801d430:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d434:	4298      	cmp	r0, r3
 801d436:	d105      	bne.n	801d444 <lv_label_get_letter_on.part.0+0x9c>
 801d438:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 801d43c:	075b      	lsls	r3, r3, #29
 801d43e:	bf58      	it	pl
 801d440:	f047 0704 	orrpl.w	r7, r7, #4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801d444:	f241 425d 	movw	r2, #5213	; 0x145d
 801d448:	2100      	movs	r1, #0
 801d44a:	4630      	mov	r0, r6
 801d44c:	f7ea f83c 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801d450:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 801d454:	d10a      	bne.n	801d46c <lv_label_get_letter_on.part.0+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d456:	4621      	mov	r1, r4
 801d458:	f241 426a 	movw	r2, #5226	; 0x146a
 801d45c:	4630      	mov	r0, r6
 801d45e:	f7ea f833 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801d462:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801d464:	2801      	cmp	r0, #1
 801d466:	bf0c      	ite	eq
 801d468:	2403      	moveq	r4, #3
 801d46a:	2401      	movne	r4, #1
        y += letter_height + line_space;
 801d46c:	9b03      	ldr	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d46e:	f04f 0900 	mov.w	r9, #0
        y += letter_height + line_space;
 801d472:	442b      	add	r3, r5
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d474:	464e      	mov	r6, r9
        y += letter_height + line_space;
 801d476:	9307      	str	r3, [sp, #28]
 801d478:	e07f      	b.n	801d57a <lv_label_get_letter_on.part.0+0x1d2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d47a:	ee18 3a90 	vmov	r3, s17
 801d47e:	ee18 2a10 	vmov	r2, s16
 801d482:	4641      	mov	r1, r8
 801d484:	4650      	mov	r0, sl
 801d486:	9700      	str	r7, [sp, #0]
 801d488:	f7fb ffca 	bl	8019420 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 801d48c:	9b03      	ldr	r3, [sp, #12]
 801d48e:	9a05      	ldr	r2, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d490:	1985      	adds	r5, r0, r6
        if(pos.y <= y + letter_height) {
 801d492:	444b      	add	r3, r9
 801d494:	429a      	cmp	r2, r3
 801d496:	dc6b      	bgt.n	801d570 <lv_label_get_letter_on.part.0+0x1c8>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801d498:	4b4a      	ldr	r3, [pc, #296]	; (801d5c4 <lv_label_get_letter_on.part.0+0x21c>)
 801d49a:	a90b      	add	r1, sp, #44	; 0x2c
 801d49c:	4658      	mov	r0, fp
            uint32_t tmp = new_line_start;
 801d49e:	950b      	str	r5, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 801d4a4:	280a      	cmp	r0, #10
 801d4a6:	d003      	beq.n	801d4b0 <lv_label_get_letter_on.part.0+0x108>
 801d4a8:	f81b 3005 	ldrb.w	r3, [fp, r5]
 801d4ac:	b903      	cbnz	r3, 801d4b0 <lv_label_get_letter_on.part.0+0x108>
 801d4ae:	3501      	adds	r5, #1
    if(align == LV_TEXT_ALIGN_CENTER) {
 801d4b0:	2c02      	cmp	r4, #2
 801d4b2:	d16b      	bne.n	801d58c <lv_label_get_letter_on.part.0+0x1e4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801d4b4:	ee18 3a10 	vmov	r3, s16
 801d4b8:	4642      	mov	r2, r8
 801d4ba:	1ba9      	subs	r1, r5, r6
 801d4bc:	4650      	mov	r0, sl
 801d4be:	9700      	str	r7, [sp, #0]
 801d4c0:	f7fc f8f6 	bl	80196b0 <lv_txt_get_width>
 801d4c4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801d4c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801d4cc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801d4d0:	3401      	adds	r4, #1
 801d4d2:	1ae4      	subs	r4, r4, r3
 801d4d4:	f3c4 33c0 	ubfx	r3, r4, #15, #1
 801d4d8:	fa03 f384 	sxtah	r3, r3, r4
 801d4dc:	1044      	asrs	r4, r0, #1
 801d4de:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801d4e2:	b224      	sxth	r4, r4
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint32_t i = 0;
 801d4ea:	9309      	str	r3, [sp, #36]	; 0x24
    if(new_line_start > 0) {
 801d4ec:	b385      	cbz	r5, 801d550 <lv_label_get_letter_on.part.0+0x1a8>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801d4ee:	9a04      	ldr	r2, [sp, #16]
    uint32_t i_act = i;
 801d4f0:	4699      	mov	r9, r3
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801d4f2:	9906      	ldr	r1, [sp, #24]
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801d4f4:	f007 0701 	and.w	r7, r7, #1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801d4f8:	1a52      	subs	r2, r2, r1
 801d4fa:	b212      	sxth	r2, r2
 801d4fc:	9203      	str	r2, [sp, #12]
        while(i + line_start < new_line_start) {
 801d4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d500:	4433      	add	r3, r6
 801d502:	429d      	cmp	r5, r3
 801d504:	d924      	bls.n	801d550 <lv_label_get_letter_on.part.0+0x1a8>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 801d506:	ab09      	add	r3, sp, #36	; 0x24
 801d508:	aa0b      	add	r2, sp, #44	; 0x2c
 801d50a:	a90a      	add	r1, sp, #40	; 0x28
 801d50c:	4650      	mov	r0, sl
 801d50e:	f7fc f8b5 	bl	801967c <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801d512:	b147      	cbz	r7, 801d526 <lv_label_get_letter_on.part.0+0x17e>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 801d514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d516:	f10d 0023 	add.w	r0, sp, #35	; 0x23
 801d51a:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801d51e:	f7fb ff61 	bl	80193e4 <_lv_txt_is_cmd>
 801d522:	2800      	cmp	r0, #0
 801d524:	d1eb      	bne.n	801d4fe <lv_label_get_letter_on.part.0+0x156>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 801d526:	4640      	mov	r0, r8
 801d528:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801d52c:	f7f9 f8ba 	bl	80166a4 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801d530:	9a03      	ldr	r2, [sp, #12]
 801d532:	fa04 f380 	sxtah	r3, r4, r0
 801d536:	429a      	cmp	r2, r3
 801d538:	db08      	blt.n	801d54c <lv_label_get_letter_on.part.0+0x1a4>
 801d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d53c:	18f2      	adds	r2, r6, r3
 801d53e:	4295      	cmp	r5, r2
 801d540:	d004      	beq.n	801d54c <lv_label_get_letter_on.part.0+0x1a4>
 801d542:	eb0b 0206 	add.w	r2, fp, r6
 801d546:	f812 2009 	ldrb.w	r2, [r2, r9]
 801d54a:	bba2      	cbnz	r2, 801d5b6 <lv_label_get_letter_on.part.0+0x20e>
                i = i_act;
 801d54c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801d550:	4d1d      	ldr	r5, [pc, #116]	; (801d5c8 <lv_label_get_letter_on.part.0+0x220>)
 801d552:	4650      	mov	r0, sl
 801d554:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d556:	682b      	ldr	r3, [r5, #0]
 801d558:	4798      	blx	r3
 801d55a:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 801d55c:	682b      	ldr	r3, [r5, #0]
 801d55e:	4631      	mov	r1, r6
 801d560:	4658      	mov	r0, fp
 801d562:	4798      	blx	r3
}
 801d564:	4420      	add	r0, r4
 801d566:	b00f      	add	sp, #60	; 0x3c
 801d568:	ecbd 8b02 	vpop	{d8}
 801d56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
 801d570:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801d572:	462e      	mov	r6, r5
 801d574:	4499      	add	r9, r3
 801d576:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
 801d57a:	f81b 3006 	ldrb.w	r3, [fp, r6]
 801d57e:	eb0b 0a06 	add.w	sl, fp, r6
 801d582:	2b00      	cmp	r3, #0
 801d584:	f47f af79 	bne.w	801d47a <lv_label_get_letter_on.part.0+0xd2>
 801d588:	4635      	mov	r5, r6
 801d58a:	e791      	b.n	801d4b0 <lv_label_get_letter_on.part.0+0x108>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801d58c:	2c03      	cmp	r4, #3
 801d58e:	d110      	bne.n	801d5b2 <lv_label_get_letter_on.part.0+0x20a>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801d590:	ee18 3a10 	vmov	r3, s16
 801d594:	4642      	mov	r2, r8
 801d596:	1ba9      	subs	r1, r5, r6
 801d598:	4650      	mov	r0, sl
 801d59a:	9700      	str	r7, [sp, #0]
 801d59c:	f7fc f888 	bl	80196b0 <lv_txt_get_width>
 801d5a0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801d5a4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801d5a8:	3301      	adds	r3, #1
 801d5aa:	1b1b      	subs	r3, r3, r4
        x += lv_area_get_width(&txt_coords) - line_w;
 801d5ac:	1a18      	subs	r0, r3, r0
 801d5ae:	b204      	sxth	r4, r0
 801d5b0:	e798      	b.n	801d4e4 <lv_label_get_letter_on.part.0+0x13c>
    lv_coord_t x = 0;
 801d5b2:	2400      	movs	r4, #0
 801d5b4:	e796      	b.n	801d4e4 <lv_label_get_letter_on.part.0+0x13c>
            x += letter_space;
 801d5b6:	ee18 2a10 	vmov	r2, s16
            i_act = i;
 801d5ba:	4699      	mov	r9, r3
            x += letter_space;
 801d5bc:	4414      	add	r4, r2
 801d5be:	4404      	add	r4, r0
 801d5c0:	b224      	sxth	r4, r4
            i_act = i;
 801d5c2:	e79c      	b.n	801d4fe <lv_label_get_letter_on.part.0+0x156>
 801d5c4:	20000044 	.word	0x20000044
 801d5c8:	2000003c 	.word	0x2000003c

0801d5cc <lv_label_refr_text>:
    if(label->text == NULL) return;
 801d5cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 801d5ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	b09d      	sub	sp, #116	; 0x74
    if(label->text == NULL) return;
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	f000 80df 	beq.w	801d79a <lv_label_refr_text+0x1ce>
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801d5dc:	f04f 33ff 	mov.w	r3, #4294967295
    lv_obj_get_content_coords(obj, &txt_coords);
 801d5e0:	a909      	add	r1, sp, #36	; 0x24
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 801d5e2:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 801d5e4:	f7e7 fd33 	bl	800504e <lv_obj_get_content_coords>
 801d5e8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 801d5ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	f109 0901 	add.w	r9, r9, #1
 801d5f6:	eba9 0903 	sub.w	r9, r9, r3
 801d5fa:	f7ff fec5 	bl	801d388 <lv_obj_get_style_text_font.constprop.0>
 801d5fe:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801d600:	4620      	mov	r0, r4
 801d602:	f7ff feb1 	bl	801d368 <lv_obj_get_style_text_line_space.constprop.0>
 801d606:	4605      	mov	r5, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d608:	4620      	mov	r0, r4
 801d60a:	fa0f f989 	sxth.w	r9, r9
 801d60e:	f7ff feb3 	bl	801d378 <lv_obj_get_style_text_letter_space.constprop.0>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d612:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801d616:	4680      	mov	r8, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d618:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d61a:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801d61c:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801d620:	bf48      	it	mi
 801d622:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801d626:	f7ff feb6 	bl	801d396 <lv_obj_get_style_width.constprop.0>
 801d62a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801d62e:	4298      	cmp	r0, r3
 801d630:	d105      	bne.n	801d63e <lv_label_refr_text+0x72>
 801d632:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801d636:	075b      	lsls	r3, r3, #29
 801d638:	bf58      	it	pl
 801d63a:	f047 0704 	orrpl.w	r7, r7, #4
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 801d63e:	4643      	mov	r3, r8
 801d640:	4632      	mov	r2, r6
 801d642:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d644:	a807      	add	r0, sp, #28
 801d646:	9500      	str	r5, [sp, #0]
 801d648:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801d64c:	f7fc f873 	bl	8019736 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 801d650:	4620      	mov	r0, r4
 801d652:	f7e7 fd4c 	bl	80050ee <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 801d656:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
 801d65a:	f009 0907 	and.w	r9, r9, #7
 801d65e:	f1b9 0f02 	cmp.w	r9, #2
 801d662:	f040 80a8 	bne.w	801d7b6 <lv_label_refr_text+0x1ea>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 801d666:	2266      	movs	r2, #102	; 0x66
 801d668:	2100      	movs	r1, #0
 801d66a:	4620      	mov	r0, r4
 801d66c:	f7e9 ff2c 	bl	80074c8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801d670:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801d672:	b947      	cbnz	r7, 801d686 <lv_label_refr_text+0xba>
 801d674:	2703      	movs	r7, #3
 801d676:	4620      	mov	r0, r4
 801d678:	f7ea fa50 	bl	8007b1c <lv_obj_get_disp>
 801d67c:	f7f9 fa2a 	bl	8016ad4 <lv_disp_get_dpi>
 801d680:	fb90 f0f7 	sdiv	r0, r0, r7
 801d684:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 801d686:	a80b      	add	r0, sp, #44	; 0x2c
 801d688:	2500      	movs	r5, #0
 801d68a:	f7f9 fbc7 	bl	8016e1c <lv_anim_init>
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 801d68e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d692:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d696:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    a->playback_delay = delay;
 801d69a:	f44f 7396 	mov.w	r3, #300	; 0x12c
        if(size.x > lv_area_get_width(&txt_coords)) {
 801d69e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d6a2:	9317      	str	r3, [sp, #92]	; 0x5c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 801d6a4:	9319      	str	r3, [sp, #100]	; 0x64
 801d6a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var = var;
 801d6aa:	940b      	str	r4, [sp, #44]	; 0x2c
 801d6ac:	3301      	adds	r3, #1
 801d6ae:	1a5b      	subs	r3, r3, r1
 801d6b0:	b21b      	sxth	r3, r3
 801d6b2:	429a      	cmp	r2, r3
 801d6b4:	dd76      	ble.n	801d7a4 <lv_label_refr_text+0x1d8>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 801d6b6:	1a9b      	subs	r3, r3, r2
    a->exec_cb = exec_cb;
 801d6b8:	498f      	ldr	r1, [pc, #572]	; (801d8f8 <lv_label_refr_text+0x32c>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 801d6ba:	4620      	mov	r0, r4
    a->end_value = end;
 801d6bc:	9314      	str	r3, [sp, #80]	; 0x50
    a->exec_cb = exec_cb;
 801d6be:	910c      	str	r1, [sp, #48]	; 0x30
    a->current_value = start;
 801d6c0:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 801d6c4:	f7f9 fc36 	bl	8016f34 <lv_anim_get>
            if(anim_cur) {
 801d6c8:	2800      	cmp	r0, #0
 801d6ca:	d069      	beq.n	801d7a0 <lv_label_refr_text+0x1d4>
                act_time = anim_cur->act_time;
 801d6cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 801d6ce:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 801d6d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
            if(act_time < a.time) {
 801d6d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d6d8:	429a      	cmp	r2, r3
 801d6da:	dd10      	ble.n	801d6fe <lv_label_refr_text+0x132>
                a.act_time = act_time;      /*To keep the old position*/
 801d6dc:	9316      	str	r3, [sp, #88]	; 0x58
                a.early_apply = 0;
 801d6de:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801d6e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6e4:	f36f 0300 	bfc	r3, #0, #1
 801d6e8:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d6ea:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
                if(playback_now) {
 801d6ee:	b130      	cbz	r0, 801d6fe <lv_label_refr_text+0x132>
                    a.playback_now = 1;
 801d6f0:	b2db      	uxtb	r3, r3
                    a.start_value = a.end_value;
 801d6f2:	9112      	str	r1, [sp, #72]	; 0x48
                    a.end_value   = tmp;
 801d6f4:	9214      	str	r2, [sp, #80]	; 0x50
                    a.playback_now = 1;
 801d6f6:	f043 0302 	orr.w	r3, r3, #2
 801d6fa:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801d6fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d700:	4638      	mov	r0, r7
 801d702:	9912      	ldr	r1, [sp, #72]	; 0x48
            hor_anim = true;
 801d704:	2501      	movs	r5, #1
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801d706:	f7f9 fc2b 	bl	8016f60 <lv_anim_speed_to_time>
    a->time = duration;
 801d70a:	9015      	str	r0, [sp, #84]	; 0x54
    a->playback_time = time;
 801d70c:	9018      	str	r0, [sp, #96]	; 0x60
            lv_anim_start(&a);
 801d70e:	a80b      	add	r0, sp, #44	; 0x2c
 801d710:	f7f9 fbca 	bl	8016ea8 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d714:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d718:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801d71c:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801d71e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801d722:	1a5b      	subs	r3, r3, r1
 801d724:	b21b      	sxth	r3, r3
 801d726:	429a      	cmp	r2, r3
 801d728:	f340 80c7 	ble.w	801d8ba <lv_label_refr_text+0x2ee>
 801d72c:	2d00      	cmp	r5, #0
 801d72e:	f040 80c4 	bne.w	801d8ba <lv_label_refr_text+0x2ee>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801d732:	1a9b      	subs	r3, r3, r2
 801d734:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
    a->exec_cb = exec_cb;
 801d738:	4970      	ldr	r1, [pc, #448]	; (801d8fc <lv_label_refr_text+0x330>)
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801d73a:	4620      	mov	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801d73c:	1a9b      	subs	r3, r3, r2
 801d73e:	910c      	str	r1, [sp, #48]	; 0x30
    a->end_value = end;
 801d740:	9314      	str	r3, [sp, #80]	; 0x50
    a->current_value = start;
 801d742:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801d746:	f7f9 fbf5 	bl	8016f34 <lv_anim_get>
            if(anim_cur) {
 801d74a:	2800      	cmp	r0, #0
 801d74c:	d031      	beq.n	801d7b2 <lv_label_refr_text+0x1e6>
                playback_now = anim_cur->playback_now;
 801d74e:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
                act_time = anim_cur->act_time;
 801d752:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                playback_now = anim_cur->playback_now;
 801d754:	f3c5 0540 	ubfx	r5, r5, #1, #1
            if(act_time < a.time) {
 801d758:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d75a:	429a      	cmp	r2, r3
 801d75c:	dd10      	ble.n	801d780 <lv_label_refr_text+0x1b4>
                a.act_time = act_time;      /*To keep the old position*/
 801d75e:	9316      	str	r3, [sp, #88]	; 0x58
                a.early_apply = 0;
 801d760:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801d764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d766:	f36f 0300 	bfc	r3, #0, #1
 801d76a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d76c:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
                if(playback_now) {
 801d770:	b135      	cbz	r5, 801d780 <lv_label_refr_text+0x1b4>
                    a.playback_now = 1;
 801d772:	b2db      	uxtb	r3, r3
                    a.start_value = a.end_value;
 801d774:	9112      	str	r1, [sp, #72]	; 0x48
                    a.end_value   = tmp;
 801d776:	9214      	str	r2, [sp, #80]	; 0x50
                    a.playback_now = 1;
 801d778:	f043 0302 	orr.w	r3, r3, #2
 801d77c:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801d780:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d782:	4638      	mov	r0, r7
 801d784:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d786:	f7f9 fbeb 	bl	8016f60 <lv_anim_speed_to_time>
    a->time = duration;
 801d78a:	9015      	str	r0, [sp, #84]	; 0x54
    a->playback_time = time;
 801d78c:	9018      	str	r0, [sp, #96]	; 0x60
            lv_anim_start(&a);
 801d78e:	a80b      	add	r0, sp, #44	; 0x2c
 801d790:	f7f9 fb8a 	bl	8016ea8 <lv_anim_start>
    lv_obj_invalidate(obj);
 801d794:	4620      	mov	r0, r4
 801d796:	f7e7 fd6f 	bl	8005278 <lv_obj_invalidate>
}
 801d79a:	b01d      	add	sp, #116	; 0x74
 801d79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int32_t act_time = 0;
 801d7a0:	4603      	mov	r3, r0
 801d7a2:	e798      	b.n	801d6d6 <lv_label_refr_text+0x10a>
            lv_anim_del(obj, set_ofs_x_anim);
 801d7a4:	4954      	ldr	r1, [pc, #336]	; (801d8f8 <lv_label_refr_text+0x32c>)
 801d7a6:	4620      	mov	r0, r4
 801d7a8:	f7f9 fb52 	bl	8016e50 <lv_anim_del>
            label->offset.x = 0;
 801d7ac:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801d7b0:	e7b0      	b.n	801d714 <lv_label_refr_text+0x148>
            int32_t act_time = 0;
 801d7b2:	462b      	mov	r3, r5
 801d7b4:	e7d0      	b.n	801d758 <lv_label_refr_text+0x18c>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801d7b6:	f1b9 0f03 	cmp.w	r9, #3
 801d7ba:	f040 8086 	bne.w	801d8ca <lv_label_refr_text+0x2fe>
 801d7be:	2266      	movs	r2, #102	; 0x66
 801d7c0:	2100      	movs	r1, #0
 801d7c2:	4620      	mov	r0, r4
 801d7c4:	f7e9 fe80 	bl	80074c8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801d7c8:	b287      	uxth	r7, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801d7ca:	b93f      	cbnz	r7, 801d7dc <lv_label_refr_text+0x210>
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f7ea f9a5 	bl	8007b1c <lv_obj_get_disp>
 801d7d2:	f7f9 f97f 	bl	8016ad4 <lv_disp_get_dpi>
 801d7d6:	fb90 f0f9 	sdiv	r0, r0, r9
 801d7da:	b287      	uxth	r7, r0
        lv_anim_init(&a);
 801d7dc:	a80b      	add	r0, sp, #44	; 0x2c
 801d7de:	f7f9 fb1d 	bl	8016e1c <lv_anim_init>
    a->repeat_cnt = cnt;
 801d7e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d7e6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d7ea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 801d7ee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a->var = var;
 801d7f2:	940b      	str	r4, [sp, #44]	; 0x2c
 801d7f4:	3301      	adds	r3, #1
 801d7f6:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801d7f8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d7fc:	b21b      	sxth	r3, r3
 801d7fe:	429a      	cmp	r2, r3
 801d800:	dd53      	ble.n	801d8aa <lv_label_refr_text+0x2de>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 801d802:	2220      	movs	r2, #32
 801d804:	4630      	mov	r0, r6
    a->exec_cb = exec_cb;
 801d806:	4d3c      	ldr	r5, [pc, #240]	; (801d8f8 <lv_label_refr_text+0x32c>)
 801d808:	4611      	mov	r1, r2
 801d80a:	f7f8 ff4b 	bl	80166a4 <lv_font_get_glyph_width>
 801d80e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d812:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    a->start_value = start;
 801d816:	2100      	movs	r1, #0
    a->exec_cb = exec_cb;
 801d818:	950c      	str	r5, [sp, #48]	; 0x30
 801d81a:	1a82      	subs	r2, r0, r2
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801d81c:	4638      	mov	r0, r7
    a->current_value = start;
 801d81e:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
    a->end_value = end;
 801d822:	9214      	str	r2, [sp, #80]	; 0x50
 801d824:	f7f9 fb9c 	bl	8016f60 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 801d828:	4629      	mov	r1, r5
    a->time = duration;
 801d82a:	9015      	str	r0, [sp, #84]	; 0x54
 801d82c:	4620      	mov	r0, r4
 801d82e:	f7f9 fb81 	bl	8016f34 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801d832:	b100      	cbz	r0, 801d836 <lv_label_refr_text+0x26a>
 801d834:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801d836:	9b15      	ldr	r3, [sp, #84]	; 0x54
            hor_anim = true;
 801d838:	2501      	movs	r5, #1
            if(act_time < a.time) {
 801d83a:	4283      	cmp	r3, r0
                a.early_apply = 0;
 801d83c:	bfc4      	itt	gt
 801d83e:	f89d 306a 	ldrbgt.w	r3, [sp, #106]	; 0x6a
                a.act_time = act_time;      /*To keep the old position*/
 801d842:	9016      	strgt	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 801d844:	a80b      	add	r0, sp, #44	; 0x2c
                a.early_apply = 0;
 801d846:	bfc4      	itt	gt
 801d848:	f36f 0300 	bfcgt	r3, #0, #1
 801d84c:	f88d 306a 	strbgt.w	r3, [sp, #106]	; 0x6a
            lv_anim_start(&a);
 801d850:	f7f9 fb2a 	bl	8016ea8 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d854:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d858:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801d85c:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801d85e:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801d862:	1a5b      	subs	r3, r3, r1
 801d864:	b21b      	sxth	r3, r3
 801d866:	429a      	cmp	r2, r3
 801d868:	dd27      	ble.n	801d8ba <lv_label_refr_text+0x2ee>
 801d86a:	bb35      	cbnz	r5, 801d8ba <lv_label_refr_text+0x2ee>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801d86c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 801d870:	4252      	negs	r2, r2
    a->exec_cb = exec_cb;
 801d872:	4e22      	ldr	r6, [pc, #136]	; (801d8fc <lv_label_refr_text+0x330>)
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801d874:	4629      	mov	r1, r5
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 801d876:	1ad2      	subs	r2, r2, r3
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801d878:	4638      	mov	r0, r7
 801d87a:	960c      	str	r6, [sp, #48]	; 0x30
    a->end_value = end;
 801d87c:	9214      	str	r2, [sp, #80]	; 0x50
    a->current_value = start;
 801d87e:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
 801d882:	f7f9 fb6d 	bl	8016f60 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801d886:	4631      	mov	r1, r6
    a->time = duration;
 801d888:	9015      	str	r0, [sp, #84]	; 0x54
 801d88a:	4620      	mov	r0, r4
 801d88c:	f7f9 fb52 	bl	8016f34 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801d890:	b100      	cbz	r0, 801d894 <lv_label_refr_text+0x2c8>
 801d892:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801d894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d896:	42ab      	cmp	r3, r5
                a.early_apply = 0;
 801d898:	bfc1      	itttt	gt
 801d89a:	f89d 306a 	ldrbgt.w	r3, [sp, #106]	; 0x6a
                a.act_time = act_time;      /*To keep the old position*/
 801d89e:	9516      	strgt	r5, [sp, #88]	; 0x58
                a.early_apply = 0;
 801d8a0:	f36f 0300 	bfcgt	r3, #0, #1
 801d8a4:	f88d 306a 	strbgt.w	r3, [sp, #106]	; 0x6a
 801d8a8:	e771      	b.n	801d78e <lv_label_refr_text+0x1c2>
            label->offset.x = 0;
 801d8aa:	2500      	movs	r5, #0
            lv_anim_del(obj, set_ofs_x_anim);
 801d8ac:	4912      	ldr	r1, [pc, #72]	; (801d8f8 <lv_label_refr_text+0x32c>)
 801d8ae:	4620      	mov	r0, r4
 801d8b0:	f7f9 face 	bl	8016e50 <lv_anim_del>
            label->offset.x = 0;
 801d8b4:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 801d8b8:	e7cc      	b.n	801d854 <lv_label_refr_text+0x288>
            lv_anim_del(obj, set_ofs_y_anim);
 801d8ba:	4910      	ldr	r1, [pc, #64]	; (801d8fc <lv_label_refr_text+0x330>)
 801d8bc:	4620      	mov	r0, r4
 801d8be:	f7f9 fac7 	bl	8016e50 <lv_anim_del>
            label->offset.y = 0;
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801d8c8:	e764      	b.n	801d794 <lv_label_refr_text+0x1c8>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 801d8ca:	f1b9 0f01 	cmp.w	r9, #1
 801d8ce:	f47f af61 	bne.w	801d794 <lv_label_refr_text+0x1c8>
        lv_obj_refresh_self_size(obj);
 801d8d2:	4620      	mov	r0, r4
 801d8d4:	f7e7 fc0b 	bl	80050ee <lv_obj_refresh_self_size>
 801d8d8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d8dc:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 801d8e0:	3301      	adds	r3, #1
 801d8e2:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 801d8e4:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801d8e8:	b21b      	sxth	r3, r3
 801d8ea:	429a      	cmp	r2, r3
 801d8ec:	dc08      	bgt.n	801d900 <lv_label_refr_text+0x334>
            label->dot_end = LV_LABEL_DOT_END_INV;
 801d8ee:	f04f 33ff 	mov.w	r3, #4294967295
 801d8f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d8f4:	e74e      	b.n	801d794 <lv_label_refr_text+0x1c8>
 801d8f6:	bf00      	nop
 801d8f8:	0801d2fd 	.word	0x0801d2fd
 801d8fc:	0801d2f5 	.word	0x0801d2f5
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 801d900:	4b4f      	ldr	r3, [pc, #316]	; (801da40 <lv_label_refr_text+0x474>)
 801d902:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	4798      	blx	r3
 801d908:	2803      	cmp	r0, #3
 801d90a:	d9f0      	bls.n	801d8ee <lv_label_refr_text+0x322>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d90c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 801d910:	222e      	movs	r2, #46	; 0x2e
 801d912:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d916:	4630      	mov	r0, r6
 801d918:	3701      	adds	r7, #1
 801d91a:	4611      	mov	r1, r2
 801d91c:	1aff      	subs	r7, r7, r3
 801d91e:	f7f8 fec1 	bl	80166a4 <lv_font_get_glyph_width>
 801d922:	4440      	add	r0, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d924:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d928:	b2bf      	uxth	r7, r7
                _lv_txt_encoded_prev(label->text, &byte_id);
 801d92a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 801da48 <lv_label_refr_text+0x47c>
            p.x = lv_area_get_width(&txt_coords) -
 801d92e:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d932:	3101      	adds	r1, #1
 801d934:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801d938:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d93c:	4407      	add	r7, r0
 801d93e:	1ac9      	subs	r1, r1, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801d940:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801d944:	b28a      	uxth	r2, r1
            p.x = lv_area_get_width(&txt_coords) -
 801d946:	f8ad 7020 	strh.w	r7, [sp, #32]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 801d94a:	1946      	adds	r6, r0, r5
            y_overed = p.y %
 801d94c:	b209      	sxth	r1, r1
 801d94e:	fb91 f3f6 	sdiv	r3, r1, r6
 801d952:	fb06 1113 	mls	r1, r6, r3, r1
            if(y_overed >= lv_font_get_line_height(font)) {
 801d956:	b20b      	sxth	r3, r1
 801d958:	4298      	cmp	r0, r3
                p.y += lv_font_get_line_height(font);
 801d95a:	bfd4      	ite	le
 801d95c:	1813      	addle	r3, r2, r0
                p.y -= line_space;
 801d95e:	1b53      	subgt	r3, r2, r5
 801d960:	4620      	mov	r0, r4
 801d962:	1a5b      	subs	r3, r3, r1
 801d964:	a908      	add	r1, sp, #32
 801d966:	b21b      	sxth	r3, r3
 801d968:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    LV_ASSERT_NULL(pos_in);
 801d96c:	f7ff fd1c 	bl	801d3a8 <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 801d970:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801d972:	4605      	mov	r5, r0
 801d974:	4638      	mov	r0, r7
 801d976:	f7e2 fc55 	bl	8000224 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 801d97a:	4b32      	ldr	r3, [pc, #200]	; (801da44 <lv_label_refr_text+0x478>)
            size_t txt_len = strlen(label->text);
 801d97c:	4606      	mov	r6, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 801d97e:	4629      	mov	r1, r5
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	4638      	mov	r0, r7
 801d984:	4798      	blx	r3
 801d986:	900b      	str	r0, [sp, #44]	; 0x2c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 801d988:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d98a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d98c:	f107 0b03 	add.w	fp, r7, #3
 801d990:	455e      	cmp	r6, fp
 801d992:	d343      	bcc.n	801da1c <lv_label_refr_text+0x450>
 801d994:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
 801d998:	2600      	movs	r6, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801d99a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801da4c <lv_label_refr_text+0x480>
                _lv_txt_encoded_next(label->text, &byte_id);
 801d99e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801da50 <lv_label_refr_text+0x484>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801d9a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d9a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d9a6:	f8d9 3000 	ldr.w	r3, [r9]
 801d9aa:	4410      	add	r0, r2
 801d9ac:	4798      	blx	r3
                _lv_txt_encoded_next(label->text, &byte_id);
 801d9ae:	f8da 3000 	ldr.w	r3, [sl]
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801d9b2:	4406      	add	r6, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 801d9b4:	a90b      	add	r1, sp, #44	; 0x2c
 801d9b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d9b8:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801d9ba:	f1b8 0801 	subs.w	r8, r8, #1
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 801d9be:	b2f6      	uxtb	r6, r6
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 801d9c0:	d1ef      	bne.n	801d9a2 <lv_label_refr_text+0x3d6>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 801d9c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 801d9c4:	4620      	mov	r0, r4
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 801d9c6:	4439      	add	r1, r7
 801d9c8:	9105      	str	r1, [sp, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 801d9ca:	f7ff fc71 	bl	801d2b0 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 801d9ce:	2e04      	cmp	r6, #4
 801d9d0:	9905      	ldr	r1, [sp, #20]
 801d9d2:	d929      	bls.n	801da28 <lv_label_refr_text+0x45c>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 801d9d4:	1c70      	adds	r0, r6, #1
 801d9d6:	f7fa f91f 	bl	8017c18 <lv_mem_alloc>
 801d9da:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 801d9dc:	2800      	cmp	r0, #0
 801d9de:	f43f aed9 	beq.w	801d794 <lv_label_refr_text+0x1c8>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 801d9e2:	4632      	mov	r2, r6
 801d9e4:	9905      	ldr	r1, [sp, #20]
 801d9e6:	f7f9 ffcf 	bl	8017988 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 801d9ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d9ec:	f803 8006 	strb.w	r8, [r3, r6]
        label->dot_tmp_alloc    = true;
 801d9f0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801d9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d9f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                    label->text[byte_id_ori + i] = '.';
 801d9fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d9fe:	222e      	movs	r2, #46	; 0x2e
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801da00:	3503      	adds	r5, #3
                    label->text[byte_id_ori + i] = '.';
 801da02:	55da      	strb	r2, [r3, r7]
 801da04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da06:	443b      	add	r3, r7
 801da08:	705a      	strb	r2, [r3, #1]
 801da0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da0c:	441f      	add	r7, r3
 801da0e:	70ba      	strb	r2, [r7, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 801da10:	2200      	movs	r2, #0
 801da12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da14:	f803 200b 	strb.w	r2, [r3, fp]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 801da18:	62e5      	str	r5, [r4, #44]	; 0x2c
 801da1a:	e6bb      	b.n	801d794 <lv_label_refr_text+0x1c8>
                _lv_txt_encoded_prev(label->text, &byte_id);
 801da1c:	f8d8 3000 	ldr.w	r3, [r8]
 801da20:	a90b      	add	r1, sp, #44	; 0x2c
                letter_id--;
 801da22:	3d01      	subs	r5, #1
                _lv_txt_encoded_prev(label->text, &byte_id);
 801da24:	4798      	blx	r3
                letter_id--;
 801da26:	e7af      	b.n	801d988 <lv_label_refr_text+0x3bc>
        label->dot_tmp_alloc = false;
 801da28:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 801da2c:	4632      	mov	r2, r6
 801da2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
        label->dot_tmp_alloc = false;
 801da32:	f368 1386 	bfi	r3, r8, #6, #1
 801da36:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 801da3a:	f7f9 ffa5 	bl	8017988 <lv_memcpy>
 801da3e:	e7dd      	b.n	801d9fc <lv_label_refr_text+0x430>
 801da40:	2000004c 	.word	0x2000004c
 801da44:	20000038 	.word	0x20000038
 801da48:	20000044 	.word	0x20000044
 801da4c:	20000048 	.word	0x20000048
 801da50:	20000040 	.word	0x20000040

0801da54 <lv_label_event>:
{
 801da54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801da58:	48be      	ldr	r0, [pc, #760]	; (801dd54 <lv_label_event+0x300>)
{
 801da5a:	b095      	sub	sp, #84	; 0x54
 801da5c:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801da5e:	f7e4 fa6c 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801da62:	2801      	cmp	r0, #1
 801da64:	d10e      	bne.n	801da84 <lv_label_event+0x30>
    lv_event_code_t code = lv_event_get_code(e);
 801da66:	4630      	mov	r0, r6
 801da68:	f7e4 fb00 	bl	800206c <lv_event_get_code>
 801da6c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801da6e:	4630      	mov	r0, r6
 801da70:	f7e4 fafa 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801da74:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801da76:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801da78:	d107      	bne.n	801da8a <lv_label_event+0x36>
        lv_label_revert_dots(obj);
 801da7a:	f7ff fc43 	bl	801d304 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 801da7e:	4620      	mov	r0, r4
 801da80:	f7ff fda4 	bl	801d5cc <lv_label_refr_text>
}
 801da84:	b015      	add	sp, #84	; 0x54
 801da86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801da8a:	2d23      	cmp	r5, #35	; 0x23
 801da8c:	d0f5      	beq.n	801da7a <lv_label_event+0x26>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801da8e:	2d26      	cmp	r5, #38	; 0x26
 801da90:	d144      	bne.n	801db1c <lv_label_event+0xc8>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801da92:	f7ff fc79 	bl	801d388 <lv_obj_get_style_text_font.constprop.0>
 801da96:	4605      	mov	r5, r0
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801da98:	4620      	mov	r0, r4
 801da9a:	f7ff fc6d 	bl	801d378 <lv_obj_get_style_text_letter_space.constprop.0>
 801da9e:	4607      	mov	r7, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801daa0:	4620      	mov	r0, r4
 801daa2:	f7ff fc61 	bl	801d368 <lv_obj_get_style_text_line_space.constprop.0>
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801daa6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801daaa:	4680      	mov	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801daac:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801dab0:	0698      	lsls	r0, r3, #26
        lv_coord_t w = lv_obj_get_content_width(obj);
 801dab2:	4620      	mov	r0, r4
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801dab4:	bf48      	it	mi
 801dab6:	f049 0902 	orrmi.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 801daba:	f7e7 fa94 	bl	8004fe6 <lv_obj_get_content_width>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 801dabe:	4620      	mov	r0, r4
 801dac0:	f7ff fc69 	bl	801d396 <lv_obj_get_style_width.constprop.0>
 801dac4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801dac8:	4298      	cmp	r0, r3
 801daca:	d103      	bne.n	801dad4 <lv_label_event+0x80>
 801dacc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801dad0:	0759      	lsls	r1, r3, #29
 801dad2:	d520      	bpl.n	801db16 <lv_label_event+0xc2>
        else w = lv_obj_get_content_width(obj);
 801dad4:	4620      	mov	r0, r4
 801dad6:	f7e7 fa86 	bl	8004fe6 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 801dada:	463b      	mov	r3, r7
 801dadc:	462a      	mov	r2, r5
 801dade:	f8cd 8000 	str.w	r8, [sp]
 801dae2:	e9cd 0901 	strd	r0, r9, [sp, #4]
 801dae6:	a80c      	add	r0, sp, #48	; 0x30
 801dae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801daea:	f7fb fe24 	bl	8019736 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 801daee:	4630      	mov	r0, r6
 801daf0:	f7e4 fabe 	bl	8002070 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 801daf4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801daf8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dafc:	4293      	cmp	r3, r2
 801dafe:	bfb8      	it	lt
 801db00:	4613      	movlt	r3, r2
        self_size->y = LV_MAX(self_size->y, size.y);
 801db02:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        self_size->x = LV_MAX(self_size->x, size.x);
 801db06:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 801db08:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801db0c:	4293      	cmp	r3, r2
 801db0e:	bfb8      	it	lt
 801db10:	4613      	movlt	r3, r2
 801db12:	8043      	strh	r3, [r0, #2]
 801db14:	e7b6      	b.n	801da84 <lv_label_event+0x30>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 801db16:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801db1a:	e7de      	b.n	801dada <lv_label_event+0x86>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801db1c:	2d15      	cmp	r5, #21
 801db1e:	d1b1      	bne.n	801da84 <lv_label_event+0x30>
    lv_obj_t * obj = lv_event_get_target(e);
 801db20:	4630      	mov	r0, r6
 801db22:	f7e4 faa1 	bl	8002068 <lv_event_get_target>
 801db26:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801db28:	4630      	mov	r0, r6
 801db2a:	f7e4 faa1 	bl	8002070 <lv_event_get_param>
    lv_obj_get_content_coords(obj, &txt_coords);
 801db2e:	a908      	add	r1, sp, #32
    const lv_area_t * clip_area = lv_event_get_param(e);
 801db30:	4680      	mov	r8, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 801db32:	4620      	mov	r0, r4
 801db34:	f7e7 fa8b 	bl	800504e <lv_obj_get_content_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801db38:	f241 425d 	movw	r2, #5213	; 0x145d
 801db3c:	2100      	movs	r1, #0
 801db3e:	4620      	mov	r0, r4
 801db40:	f7e9 fcc2 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801db44:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 801db48:	d10a      	bne.n	801db60 <lv_label_event+0x10c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801db4a:	4629      	mov	r1, r5
 801db4c:	f241 426a 	movw	r2, #5226	; 0x146a
 801db50:	4620      	mov	r0, r4
 801db52:	f7e9 fcb9 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801db56:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801db58:	2801      	cmp	r0, #1
 801db5a:	bf0c      	ite	eq
 801db5c:	2503      	moveq	r5, #3
 801db5e:	2501      	movne	r5, #1
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801db60:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801db64:	4620      	mov	r0, r4
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801db66:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801db68:	f3c3 1700 	ubfx	r7, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801db6c:	bf48      	it	mi
 801db6e:	f047 0702 	orrmi.w	r7, r7, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801db72:	f7ff fc10 	bl	801d396 <lv_obj_get_style_width.constprop.0>
 801db76:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801db7a:	4298      	cmp	r0, r3
 801db7c:	d105      	bne.n	801db8a <lv_label_event+0x136>
 801db7e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801db82:	075b      	lsls	r3, r3, #29
 801db84:	bf58      	it	pl
 801db86:	f047 0704 	orrpl.w	r7, r7, #4
    lv_draw_label_dsc_init(&label_draw_dsc);
 801db8a:	a80c      	add	r0, sp, #48	; 0x30
 801db8c:	f7ec fd78 	bl	800a680 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 801db90:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801db94:	aa0c      	add	r2, sp, #48	; 0x30
 801db96:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 801db98:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801db9c:	4620      	mov	r0, r4
    label_draw_dsc.ofs_y = label->offset.y;
 801db9e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    label_draw_dsc.flag = flag;
 801dba2:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
    label_draw_dsc.ofs_y = label->offset.y;
 801dba6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 801dbaa:	f7e6 fec5 	bl	8004938 <lv_obj_init_draw_label_dsc>
    return label->sel_start;
 801dbae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801dbb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return label->sel_end;
 801dbb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801dbb6:	4299      	cmp	r1, r3
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 801dbb8:	910d      	str	r1, [sp, #52]	; 0x34
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 801dbba:	920e      	str	r2, [sp, #56]	; 0x38
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 801dbbc:	d012      	beq.n	801dbe4 <lv_label_event+0x190>
 801dbbe:	429a      	cmp	r2, r3
 801dbc0:	d010      	beq.n	801dbe4 <lv_label_event+0x190>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR_FILTERED);
 801dbc2:	f244 4257 	movw	r2, #17495	; 0x4457
 801dbc6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801dbca:	4620      	mov	r0, r4
 801dbcc:	f7e9 fc7c 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 801dbd0:	2220      	movs	r2, #32
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 801dbd2:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
 801dbd6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801dbda:	4620      	mov	r0, r4
 801dbdc:	f7e9 fc74 	bl	80074c8 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 801dbe0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 801dbe4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801dbe8:	f003 0306 	and.w	r3, r3, #6
 801dbec:	2b02      	cmp	r3, #2
 801dbee:	d122      	bne.n	801dc36 <lv_label_event+0x1e2>
 801dbf0:	3d02      	subs	r5, #2
 801dbf2:	2d01      	cmp	r5, #1
 801dbf4:	d81f      	bhi.n	801dc36 <lv_label_event+0x1e2>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801dbf6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801dbfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dbfc:	9702      	str	r7, [sp, #8]
 801dbfe:	a80a      	add	r0, sp, #40	; 0x28
 801dc00:	9301      	str	r3, [sp, #4]
 801dc02:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801dc06:	9300      	str	r3, [sp, #0]
 801dc08:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801dc0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801dc0e:	f7fb fd92 	bl	8019736 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801dc12:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801dc16:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dc1a:	3301      	adds	r3, #1
 801dc1c:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 801dc1e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dc22:	b21b      	sxth	r3, r3
 801dc24:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 801dc26:	bfc1      	itttt	gt
 801dc28:	f89d 304d 	ldrbgt.w	r3, [sp, #77]	; 0x4d
 801dc2c:	2201      	movgt	r2, #1
 801dc2e:	f362 0301 	bfigt	r3, r2, #0, #2
 801dc32:	f88d 304d 	strbgt.w	r3, [sp, #77]	; 0x4d
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 801dc36:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801dc3a:	f003 0307 	and.w	r3, r3, #7
 801dc3e:	2b03      	cmp	r3, #3
 801dc40:	f000 8086 	beq.w	801dd50 <lv_label_event+0x2fc>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801dc44:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801dc48:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801dc4c:	3301      	adds	r3, #1
 801dc4e:	1a9b      	subs	r3, r3, r2
 801dc50:	b21b      	sxth	r3, r3
 801dc52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc56:	db7b      	blt.n	801dd50 <lv_label_event+0x2fc>
    lv_draw_label_hint_t * hint = &label->hint;
 801dc58:	f104 0630 	add.w	r6, r4, #48	; 0x30
    bool is_common = _lv_area_intersect(&txt_clip, clip_area, clip_area);
 801dc5c:	4642      	mov	r2, r8
 801dc5e:	4641      	mov	r1, r8
 801dc60:	a80a      	add	r0, sp, #40	; 0x28
 801dc62:	f7f9 fa08 	bl	8017076 <_lv_area_intersect>
    if(!is_common) return;
 801dc66:	2800      	cmp	r0, #0
 801dc68:	f43f af0c 	beq.w	801da84 <lv_label_event+0x30>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 801dc6c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 801dc70:	f011 0107 	ands.w	r1, r1, #7
 801dc74:	d10c      	bne.n	801dc90 <lv_label_event+0x23c>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 801dc76:	4620      	mov	r0, r4
 801dc78:	9105      	str	r1, [sp, #20]
 801dc7a:	f7e8 f9fb 	bl	8006074 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 801dc7e:	4240      	negs	r0, r0
 801dc80:	9905      	ldr	r1, [sp, #20]
 801dc82:	b202      	sxth	r2, r0
 801dc84:	a808      	add	r0, sp, #32
 801dc86:	f7f9 f9e5 	bl	8017054 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 801dc8a:	8b63      	ldrh	r3, [r4, #26]
 801dc8c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dc90:	9600      	str	r6, [sp, #0]
 801dc92:	aa0c      	add	r2, sp, #48	; 0x30
 801dc94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dc96:	a90a      	add	r1, sp, #40	; 0x28
 801dc98:	a808      	add	r0, sp, #32
 801dc9a:	f7ec fec9 	bl	800aa30 <lv_draw_label>
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801dc9e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801dca2:	f003 0307 	and.w	r3, r3, #7
 801dca6:	2b03      	cmp	r3, #3
 801dca8:	f47f aeec 	bne.w	801da84 <lv_label_event+0x30>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801dcac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801dcb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dcb2:	9702      	str	r7, [sp, #8]
 801dcb4:	a807      	add	r0, sp, #28
 801dcb6:	9301      	str	r3, [sp, #4]
 801dcb8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801dcbc:	9300      	str	r3, [sp, #0]
 801dcbe:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801dcc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801dcc4:	f7fb fd37 	bl	8019736 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801dcc8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801dccc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801dcd0:	3201      	adds	r2, #1
        if(size.x > lv_area_get_width(&txt_coords)) {
 801dcd2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dcd6:	1a52      	subs	r2, r2, r1
 801dcd8:	b212      	sxth	r2, r2
 801dcda:	4293      	cmp	r3, r2
 801dcdc:	dd18      	ble.n	801dd10 <lv_label_event+0x2bc>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801dcde:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801dce2:	2220      	movs	r2, #32
 801dce4:	980c      	ldr	r0, [sp, #48]	; 0x30
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801dce6:	442b      	add	r3, r5
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801dce8:	4611      	mov	r1, r2
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801dcea:	b29d      	uxth	r5, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801dcec:	f7f8 fcda 	bl	80166a4 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_y = label->offset.y;
 801dcf0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801dcf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dcf8:	9600      	str	r6, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y;
 801dcfa:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dcfe:	aa0c      	add	r2, sp, #48	; 0x30
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801dd00:	4405      	add	r5, r0
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dd02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dd04:	a90a      	add	r1, sp, #40	; 0x28
 801dd06:	a808      	add	r0, sp, #32
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801dd08:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dd0c:	f7ec fe90 	bl	800aa30 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801dd10:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801dd14:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801dd18:	3301      	adds	r3, #1
        if(size.y > lv_area_get_height(&txt_coords)) {
 801dd1a:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801dd1e:	1a5b      	subs	r3, r3, r1
 801dd20:	b21b      	sxth	r3, r3
 801dd22:	429a      	cmp	r2, r3
 801dd24:	f77f aeae 	ble.w	801da84 <lv_label_event+0x30>
            label_draw_dsc.ofs_x = label->offset.x;
 801dd28:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dd2c:	a90a      	add	r1, sp, #40	; 0x28
 801dd2e:	a808      	add	r0, sp, #32
            label_draw_dsc.ofs_x = label->offset.x;
 801dd30:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801dd34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd36:	891b      	ldrh	r3, [r3, #8]
 801dd38:	441a      	add	r2, r3
 801dd3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dd3e:	9600      	str	r6, [sp, #0]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801dd40:	441a      	add	r2, r3
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 801dd44:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
            lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, label->text, hint);
 801dd48:	aa0c      	add	r2, sp, #48	; 0x30
 801dd4a:	f7ec fe71 	bl	800aa30 <lv_draw_label>
 801dd4e:	e699      	b.n	801da84 <lv_label_event+0x30>
        hint = NULL;
 801dd50:	2600      	movs	r6, #0
 801dd52:	e783      	b.n	801dc5c <lv_label_event+0x208>
 801dd54:	08029e4c 	.word	0x08029e4c

0801dd58 <lv_label_create>:
{
 801dd58:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801dd5a:	4804      	ldr	r0, [pc, #16]	; (801dd6c <lv_label_create+0x14>)
{
 801dd5c:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801dd5e:	f7e6 fbe1 	bl	8004524 <lv_obj_class_create_obj>
 801dd62:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 801dd64:	f7e6 fc6b 	bl	800463e <lv_obj_class_init_obj>
}
 801dd68:	4620      	mov	r0, r4
 801dd6a:	bd10      	pop	{r4, pc}
 801dd6c:	08029e4c 	.word	0x08029e4c

0801dd70 <lv_label_set_text>:
{
 801dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd72:	4604      	mov	r4, r0
 801dd74:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 801dd76:	f7e7 fa7f 	bl	8005278 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 801dd7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801dd7c:	2d00      	cmp	r5, #0
 801dd7e:	bf08      	it	eq
 801dd80:	4635      	moveq	r5, r6
    if(label->text == text && label->static_txt == 0) {
 801dd82:	42ae      	cmp	r6, r5
 801dd84:	d112      	bne.n	801ddac <lv_label_set_text+0x3c>
 801dd86:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801dd8a:	071b      	lsls	r3, r3, #28
 801dd8c:	d418      	bmi.n	801ddc0 <lv_label_set_text+0x50>
 801dd8e:	4630      	mov	r0, r6
 801dd90:	f7e2 fa48 	bl	8000224 <strlen>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801dd94:	1c41      	adds	r1, r0, #1
 801dd96:	4630      	mov	r0, r6
 801dd98:	f7f9 ff54 	bl	8017c44 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 801dd9c:	b128      	cbz	r0, 801ddaa <lv_label_set_text+0x3a>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801dd9e:	6260      	str	r0, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 801dda0:	4620      	mov	r0, r4
}
 801dda2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(obj);
 801dda6:	f7ff bc11 	b.w	801d5cc <lv_label_refr_text>
        LV_ASSERT_MALLOC(label->text);
 801ddaa:	e7fe      	b.n	801ddaa <lv_label_set_text+0x3a>
        if(label->text != NULL && label->static_txt == 0) {
 801ddac:	b146      	cbz	r6, 801ddc0 <lv_label_set_text+0x50>
 801ddae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801ddb2:	f013 0708 	ands.w	r7, r3, #8
 801ddb6:	d103      	bne.n	801ddc0 <lv_label_set_text+0x50>
            lv_mem_free(label->text);
 801ddb8:	4630      	mov	r0, r6
 801ddba:	f7f9 fdab 	bl	8017914 <lv_mem_free>
            label->text = NULL;
 801ddbe:	6267      	str	r7, [r4, #36]	; 0x24
        size_t len = strlen(text) + 1;
 801ddc0:	4628      	mov	r0, r5
 801ddc2:	f7e2 fa2f 	bl	8000224 <strlen>
        label->text = lv_mem_alloc(len);
 801ddc6:	3001      	adds	r0, #1
 801ddc8:	f7f9 ff26 	bl	8017c18 <lv_mem_alloc>
 801ddcc:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 801ddce:	b900      	cbnz	r0, 801ddd2 <lv_label_set_text+0x62>
 801ddd0:	e7fe      	b.n	801ddd0 <lv_label_set_text+0x60>
        strcpy(label->text, text);
 801ddd2:	4629      	mov	r1, r5
 801ddd4:	f005 ff58 	bl	8023c88 <strcpy>
        label->static_txt = 0;
 801ddd8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801dddc:	f36f 03c3 	bfc	r3, #3, #1
 801dde0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801dde4:	e7dc      	b.n	801dda0 <lv_label_set_text+0x30>

0801dde6 <lv_label_set_text_static>:
    if(label->static_txt == 0 && label->text != NULL) {
 801dde6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 801ddea:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 801ddec:	f013 0608 	ands.w	r6, r3, #8
{
 801ddf0:	4604      	mov	r4, r0
 801ddf2:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 801ddf4:	d104      	bne.n	801de00 <lv_label_set_text_static+0x1a>
 801ddf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ddf8:	b110      	cbz	r0, 801de00 <lv_label_set_text_static+0x1a>
        lv_mem_free(label->text);
 801ddfa:	f7f9 fd8b 	bl	8017914 <lv_mem_free>
        label->text = NULL;
 801ddfe:	6266      	str	r6, [r4, #36]	; 0x24
    if(text != NULL) {
 801de00:	b135      	cbz	r5, 801de10 <lv_label_set_text_static+0x2a>
        label->static_txt = 1;
 801de02:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 801de06:	6265      	str	r5, [r4, #36]	; 0x24
        label->static_txt = 1;
 801de08:	f043 0308 	orr.w	r3, r3, #8
 801de0c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801de10:	4620      	mov	r0, r4
}
 801de12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(obj);
 801de16:	f7ff bbd9 	b.w	801d5cc <lv_label_refr_text>
	...

0801de1c <lv_label_set_long_mode>:
{
 801de1c:	b538      	push	{r3, r4, r5, lr}
 801de1e:	4604      	mov	r4, r0
 801de20:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 801de22:	4914      	ldr	r1, [pc, #80]	; (801de74 <lv_label_set_long_mode+0x58>)
 801de24:	f7f9 f814 	bl	8016e50 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 801de28:	4913      	ldr	r1, [pc, #76]	; (801de78 <lv_label_set_long_mode+0x5c>)
 801de2a:	4620      	mov	r0, r4
 801de2c:	f7f9 f810 	bl	8016e50 <lv_anim_del>
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801de30:	1eaa      	subs	r2, r5, #2
    label->offset.x = 0;
 801de32:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801de34:	2a02      	cmp	r2, #2
    label->offset.x = 0;
 801de36:	6463      	str	r3, [r4, #68]	; 0x44
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 801de38:	bf8c      	ite	hi
 801de3a:	2200      	movhi	r2, #0
 801de3c:	2201      	movls	r2, #1
 801de3e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801de42:	f362 1345 	bfi	r3, r2, #5, #1
 801de46:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801de4a:	f003 0307 	and.w	r3, r3, #7
 801de4e:	2b01      	cmp	r3, #1
 801de50:	d105      	bne.n	801de5e <lv_label_set_long_mode+0x42>
 801de52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801de54:	3301      	adds	r3, #1
 801de56:	d002      	beq.n	801de5e <lv_label_set_long_mode+0x42>
        lv_label_revert_dots(obj);
 801de58:	4620      	mov	r0, r4
 801de5a:	f7ff fa53 	bl	801d304 <lv_label_revert_dots>
    label->long_mode = long_mode;
 801de5e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 801de62:	4620      	mov	r0, r4
    label->long_mode = long_mode;
 801de64:	f365 0302 	bfi	r3, r5, #0, #3
 801de68:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 801de6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(obj);
 801de70:	f7ff bbac 	b.w	801d5cc <lv_label_refr_text>
 801de74:	0801d2fd 	.word	0x0801d2fd
 801de78:	0801d2f5 	.word	0x0801d2f5

0801de7c <lv_label_constructor>:
{
 801de7c:	b538      	push	{r3, r4, r5, lr}
    label->dot_end    = LV_LABEL_DOT_END_INV;
 801de7e:	f04f 33ff 	mov.w	r3, #4294967295
{
 801de82:	460c      	mov	r4, r1
    label->text       = NULL;
 801de84:	2500      	movs	r5, #0
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801de86:	4620      	mov	r0, r4
    label->offset.x = 0;
 801de88:	644d      	str	r5, [r1, #68]	; 0x44
    label->hint.line_start = -1;
 801de8a:	e9c1 330b 	strd	r3, r3, [r1, #44]	; 0x2c
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 801de8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 801de92:	e9c1 330f 	strd	r3, r3, [r1, #60]	; 0x3c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801de96:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 801de9a:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    label->dot.tmp_ptr   = NULL;
 801de9e:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801dea2:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    label->hint.coord_y    = 0;
 801dea6:	e9c1 550d 	strd	r5, r5, [r1, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801deaa:	2102      	movs	r1, #2
 801deac:	f7e5 ffff 	bl	8003eae <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 801deb0:	4629      	mov	r1, r5
 801deb2:	4620      	mov	r0, r4
 801deb4:	f7ff ffb2 	bl	801de1c <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 801deb8:	4620      	mov	r0, r4
 801deba:	4902      	ldr	r1, [pc, #8]	; (801dec4 <lv_label_constructor+0x48>)
}
 801debc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_set_text(obj, "Text");
 801dec0:	f7ff bf56 	b.w	801dd70 <lv_label_set_text>
 801dec4:	08029e44 	.word	0x08029e44

0801dec8 <lv_label_set_text_sel_start>:
    label->sel_start   = index;
 801dec8:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 801deca:	f7e7 b9d5 	b.w	8005278 <lv_obj_invalidate>

0801dece <lv_label_set_text_sel_end>:
    label->sel_end     = index;
 801dece:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 801ded0:	f7e7 b9d2 	b.w	8005278 <lv_obj_invalidate>

0801ded4 <lv_label_get_text>:
}
 801ded4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ded6:	4770      	bx	lr

0801ded8 <lv_label_get_letter_pos>:
{
 801ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dedc:	ed2d 8b02 	vpush	{d8}
 801dee0:	b08b      	sub	sp, #44	; 0x2c
 801dee2:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 801dee4:	4690      	mov	r8, r2
{
 801dee6:	9106      	str	r1, [sp, #24]
    LV_ASSERT_NULL(pos);
 801dee8:	b902      	cbnz	r2, 801deec <lv_label_get_letter_pos+0x14>
 801deea:	e7fe      	b.n	801deea <lv_label_get_letter_pos+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801deec:	f241 425d 	movw	r2, #5213	; 0x145d
 801def0:	2100      	movs	r1, #0
    return label->text;
 801def2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801def4:	f7e9 fae8 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801def8:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 801defc:	d10a      	bne.n	801df14 <lv_label_get_letter_pos+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801defe:	4639      	mov	r1, r7
 801df00:	f241 426a 	movw	r2, #5226	; 0x146a
 801df04:	4628      	mov	r0, r5
 801df06:	f7e9 fadf 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801df0a:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801df0c:	2801      	cmp	r0, #1
 801df0e:	bf0c      	ite	eq
 801df10:	2703      	moveq	r7, #3
 801df12:	2701      	movne	r7, #1
    if(txt[0] == '\0') {
 801df14:	7823      	ldrb	r3, [r4, #0]
 801df16:	b9db      	cbnz	r3, 801df50 <lv_label_get_letter_pos+0x78>
        switch(align) {
 801df18:	2f02      	cmp	r7, #2
        pos->y = 0;
 801df1a:	f8a8 3002 	strh.w	r3, [r8, #2]
        switch(align) {
 801df1e:	d010      	beq.n	801df42 <lv_label_get_letter_pos+0x6a>
 801df20:	2f03      	cmp	r7, #3
 801df22:	d008      	beq.n	801df36 <lv_label_get_letter_pos+0x5e>
 801df24:	2f01      	cmp	r7, #1
 801df26:	d101      	bne.n	801df2c <lv_label_get_letter_pos+0x54>
                pos->x = 0;
 801df28:	f8a8 3000 	strh.w	r3, [r8]
}
 801df2c:	b00b      	add	sp, #44	; 0x2c
 801df2e:	ecbd 8b02 	vpop	{d8}
 801df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                pos->x = lv_obj_get_content_width(obj);
 801df36:	4628      	mov	r0, r5
 801df38:	f7e7 f855 	bl	8004fe6 <lv_obj_get_content_width>
                pos->x = lv_obj_get_content_width(obj) / 2;
 801df3c:	f8a8 0000 	strh.w	r0, [r8]
                break;
 801df40:	e7f4      	b.n	801df2c <lv_label_get_letter_pos+0x54>
                pos->x = lv_obj_get_content_width(obj) / 2;
 801df42:	4628      	mov	r0, r5
 801df44:	f7e7 f84f 	bl	8004fe6 <lv_obj_get_content_width>
 801df48:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801df4c:	1040      	asrs	r0, r0, #1
 801df4e:	e7f5      	b.n	801df3c <lv_label_get_letter_pos+0x64>
    lv_obj_get_content_coords(obj, &txt_coords);
 801df50:	a908      	add	r1, sp, #32
 801df52:	4628      	mov	r0, r5
 801df54:	f7e7 f87b 	bl	800504e <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801df58:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801df5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801df60:	4628      	mov	r0, r5
 801df62:	3301      	adds	r3, #1
 801df64:	1a9b      	subs	r3, r3, r2
 801df66:	b21b      	sxth	r3, r3
 801df68:	ee08 3a10 	vmov	s16, r3
 801df6c:	f7ff fa0c 	bl	801d388 <lv_obj_get_style_text_font.constprop.0>
 801df70:	4682      	mov	sl, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801df72:	4628      	mov	r0, r5
 801df74:	f7ff f9f8 	bl	801d368 <lv_obj_get_style_text_line_space.constprop.0>
 801df78:	9004      	str	r0, [sp, #16]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801df7a:	4628      	mov	r0, r5
 801df7c:	f7ff f9fc 	bl	801d378 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801df80:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801df84:	4683      	mov	fp, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801df86:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801df88:	9305      	str	r3, [sp, #20]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801df8a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801df8e:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801df90:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801df94:	bf48      	it	mi
 801df96:	f049 0902 	orrmi.w	r9, r9, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801df9a:	f7ff f9fc 	bl	801d396 <lv_obj_get_style_width.constprop.0>
 801df9e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801dfa2:	4298      	cmp	r0, r3
 801dfa4:	d105      	bne.n	801dfb2 <lv_label_get_letter_pos+0xda>
 801dfa6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801dfaa:	075b      	lsls	r3, r3, #29
 801dfac:	bf58      	it	pl
 801dfae:	f049 0904 	orrpl.w	r9, r9, #4
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801dfb2:	4b40      	ldr	r3, [pc, #256]	; (801e0b4 <lv_label_get_letter_pos+0x1dc>)
 801dfb4:	4620      	mov	r0, r4
 801dfb6:	9906      	ldr	r1, [sp, #24]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	4798      	blx	r3
    lv_coord_t y             = 0;
 801dfbc:	2300      	movs	r3, #0
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 801dfbe:	4605      	mov	r5, r0
    uint32_t line_start      = 0;
 801dfc0:	461e      	mov	r6, r3
    lv_coord_t y             = 0;
 801dfc2:	9303      	str	r3, [sp, #12]
        y += letter_height + line_space;
 801dfc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dfc8:	4413      	add	r3, r2
 801dfca:	9307      	str	r3, [sp, #28]
    while(txt[new_line_start] != '\0') {
 801dfcc:	5da3      	ldrb	r3, [r4, r6]
 801dfce:	19a0      	adds	r0, r4, r6
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d145      	bne.n	801e060 <lv_label_get_letter_pos+0x188>
 801dfd4:	9602      	str	r6, [sp, #8]
    if(byte_id > 0) {
 801dfd6:	b18d      	cbz	r5, 801dffc <lv_label_get_letter_pos+0x124>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 801dfd8:	1963      	adds	r3, r4, r5
 801dfda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801dfde:	2b0a      	cmp	r3, #10
 801dfe0:	d001      	beq.n	801dfe6 <lv_label_get_letter_pos+0x10e>
 801dfe2:	2b0d      	cmp	r3, #13
 801dfe4:	d10a      	bne.n	801dffc <lv_label_get_letter_pos+0x124>
 801dfe6:	5d63      	ldrb	r3, [r4, r5]
 801dfe8:	b943      	cbnz	r3, 801dffc <lv_label_get_letter_pos+0x124>
            y += letter_height + line_space;
 801dfea:	462e      	mov	r6, r5
 801dfec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dff0:	4413      	add	r3, r2
 801dff2:	4618      	mov	r0, r3
 801dff4:	9b03      	ldr	r3, [sp, #12]
 801dff6:	4418      	add	r0, r3
 801dff8:	b203      	sxth	r3, r0
 801dffa:	9303      	str	r3, [sp, #12]
    bidi_txt = &txt[line_start];
 801dffc:	4434      	add	r4, r6
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 801dffe:	465b      	mov	r3, fp
 801e000:	1ba9      	subs	r1, r5, r6
 801e002:	4652      	mov	r2, sl
 801e004:	4620      	mov	r0, r4
 801e006:	f8cd 9000 	str.w	r9, [sp]
 801e00a:	f7fb fb51 	bl	80196b0 <lv_txt_get_width>
    if(char_id != line_start) x += letter_space;
 801e00e:	9b06      	ldr	r3, [sp, #24]
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 801e010:	4605      	mov	r5, r0
    if(char_id != line_start) x += letter_space;
 801e012:	429e      	cmp	r6, r3
 801e014:	bf1c      	itt	ne
 801e016:	445d      	addne	r5, fp
 801e018:	b22d      	sxthne	r5, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801e01a:	2f02      	cmp	r7, #2
 801e01c:	d136      	bne.n	801e08c <lv_label_get_letter_pos+0x1b4>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801e01e:	9902      	ldr	r1, [sp, #8]
 801e020:	465b      	mov	r3, fp
 801e022:	4652      	mov	r2, sl
 801e024:	4620      	mov	r0, r4
 801e026:	1b89      	subs	r1, r1, r6
 801e028:	f8cd 9000 	str.w	r9, [sp]
 801e02c:	f7fb fb40 	bl	80196b0 <lv_txt_get_width>
 801e030:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801e034:	f8bd 2020 	ldrh.w	r2, [sp, #32]
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801e038:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e03c:	3301      	adds	r3, #1
 801e03e:	f340 004f 	sbfx	r0, r0, #1, #16
 801e042:	1a9b      	subs	r3, r3, r2
 801e044:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801e048:	fa02 f383 	sxtah	r3, r2, r3
 801e04c:	ebc0 0063 	rsb	r0, r0, r3, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
 801e050:	4405      	add	r5, r0
 801e052:	b22d      	sxth	r5, r5
    pos->y = y;
 801e054:	9b03      	ldr	r3, [sp, #12]
    pos->x = x;
 801e056:	f8a8 5000 	strh.w	r5, [r8]
    pos->y = y;
 801e05a:	f8a8 3002 	strh.w	r3, [r8, #2]
 801e05e:	e765      	b.n	801df2c <lv_label_get_letter_pos+0x54>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801e060:	ee18 3a10 	vmov	r3, s16
 801e064:	465a      	mov	r2, fp
 801e066:	4651      	mov	r1, sl
 801e068:	f8cd 9000 	str.w	r9, [sp]
 801e06c:	f7fb f9d8 	bl	8019420 <_lv_txt_get_next_line>
 801e070:	1833      	adds	r3, r6, r0
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 801e072:	429d      	cmp	r5, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801e074:	9302      	str	r3, [sp, #8]
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 801e076:	d3ae      	bcc.n	801dfd6 <lv_label_get_letter_pos+0xfe>
 801e078:	5ce3      	ldrb	r3, [r4, r3]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d0ab      	beq.n	801dfd6 <lv_label_get_letter_pos+0xfe>
        y += letter_height + line_space;
 801e07e:	9b03      	ldr	r3, [sp, #12]
 801e080:	9a07      	ldr	r2, [sp, #28]
 801e082:	9e02      	ldr	r6, [sp, #8]
 801e084:	4413      	add	r3, r2
 801e086:	b21b      	sxth	r3, r3
 801e088:	9303      	str	r3, [sp, #12]
        line_start = new_line_start;
 801e08a:	e79f      	b.n	801dfcc <lv_label_get_letter_pos+0xf4>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801e08c:	2f03      	cmp	r7, #3
 801e08e:	d1e1      	bne.n	801e054 <lv_label_get_letter_pos+0x17c>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801e090:	9902      	ldr	r1, [sp, #8]
 801e092:	465b      	mov	r3, fp
 801e094:	4652      	mov	r2, sl
 801e096:	4620      	mov	r0, r4
 801e098:	1b89      	subs	r1, r1, r6
 801e09a:	f8cd 9000 	str.w	r9, [sp]
 801e09e:	f7fb fb07 	bl	80196b0 <lv_txt_get_width>
 801e0a2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801e0a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e0aa:	3301      	adds	r3, #1
 801e0ac:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 801e0ae:	b21b      	sxth	r3, r3
 801e0b0:	1a18      	subs	r0, r3, r0
 801e0b2:	e7cd      	b.n	801e050 <lv_label_get_letter_pos+0x178>
 801e0b4:	20000038 	.word	0x20000038

0801e0b8 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 801e0b8:	b901      	cbnz	r1, 801e0bc <lv_label_get_letter_on+0x4>
 801e0ba:	e7fe      	b.n	801e0ba <lv_label_get_letter_on+0x2>
 801e0bc:	f7ff b974 	b.w	801d3a8 <lv_label_get_letter_on.part.0>

0801e0c0 <lv_label_is_char_under_pos>:
{
 801e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0c4:	ed2d 8b02 	vpush	{d8}
 801e0c8:	b08d      	sub	sp, #52	; 0x34
 801e0ca:	4605      	mov	r5, r0
    LV_ASSERT_NULL(pos);
 801e0cc:	9103      	str	r1, [sp, #12]
 801e0ce:	b901      	cbnz	r1, 801e0d2 <lv_label_is_char_under_pos+0x12>
 801e0d0:	e7fe      	b.n	801e0d0 <lv_label_is_char_under_pos+0x10>
    lv_obj_get_content_coords(obj, &txt_coords);
 801e0d2:	a90a      	add	r1, sp, #40	; 0x28
 801e0d4:	f7e6 ffbb 	bl	800504e <lv_obj_get_content_coords>
 801e0d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801e0dc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e0e0:	4628      	mov	r0, r5
 801e0e2:	3301      	adds	r3, #1
    return label->text;
 801e0e4:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
 801e0e8:	1a9b      	subs	r3, r3, r2
 801e0ea:	b21b      	sxth	r3, r3
 801e0ec:	ee08 3a10 	vmov	s16, r3
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e0f0:	f7ff f94a 	bl	801d388 <lv_obj_get_style_text_font.constprop.0>
 801e0f4:	4680      	mov	r8, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e0f6:	4628      	mov	r0, r5
 801e0f8:	f7ff f936 	bl	801d368 <lv_obj_get_style_text_line_space.constprop.0>
 801e0fc:	4604      	mov	r4, r0
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801e0fe:	4628      	mov	r0, r5
 801e100:	f7ff f93a 	bl	801d378 <lv_obj_get_style_text_letter_space.constprop.0>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801e104:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 801e108:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801e10a:	f241 425d 	movw	r2, #5213	; 0x145d
 801e10e:	2100      	movs	r1, #0
 801e110:	4628      	mov	r0, r5
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 801e112:	9304      	str	r3, [sp, #16]
 801e114:	f7e9 f9d8 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801e118:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 801e11c:	d10c      	bne.n	801e138 <lv_label_is_char_under_pos+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e11e:	4649      	mov	r1, r9
 801e120:	f241 426a 	movw	r2, #5226	; 0x146a
 801e124:	4628      	mov	r0, r5
 801e126:	f7e9 f9cf 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801e12a:	b2c0      	uxtb	r0, r0
       else align = LV_TEXT_ALIGN_LEFT;
 801e12c:	2801      	cmp	r0, #1
 801e12e:	bf0c      	ite	eq
 801e130:	f04f 0903 	moveq.w	r9, #3
 801e134:	f04f 0901 	movne.w	r9, #1
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801e138:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801e13c:	4628      	mov	r0, r5
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801e13e:	069a      	lsls	r2, r3, #26
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801e140:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801e144:	bf48      	it	mi
 801e146:	f046 0602 	orrmi.w	r6, r6, #2
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801e14a:	f7ff f924 	bl	801d396 <lv_obj_get_style_width.constprop.0>
 801e14e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801e152:	4298      	cmp	r0, r3
 801e154:	d105      	bne.n	801e162 <lv_label_is_char_under_pos+0xa2>
 801e156:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801e15a:	075b      	lsls	r3, r3, #29
 801e15c:	d401      	bmi.n	801e162 <lv_label_is_char_under_pos+0xa2>
 801e15e:	f046 0604 	orr.w	r6, r6, #4
       else align = LV_TEXT_ALIGN_LEFT;
 801e162:	2300      	movs	r3, #0
 801e164:	461d      	mov	r5, r3
 801e166:	9302      	str	r3, [sp, #8]
        y += letter_height + line_space;
 801e168:	9b04      	ldr	r3, [sp, #16]
 801e16a:	4423      	add	r3, r4
 801e16c:	9305      	str	r3, [sp, #20]
 801e16e:	e016      	b.n	801e19e <lv_label_is_char_under_pos+0xde>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801e170:	ee18 3a10 	vmov	r3, s16
 801e174:	463a      	mov	r2, r7
 801e176:	4641      	mov	r1, r8
 801e178:	4658      	mov	r0, fp
 801e17a:	9600      	str	r6, [sp, #0]
 801e17c:	f7fb f950 	bl	8019420 <_lv_txt_get_next_line>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801e180:	9b03      	ldr	r3, [sp, #12]
 801e182:	9904      	ldr	r1, [sp, #16]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
 801e184:	182c      	adds	r4, r5, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 801e186:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e18a:	9b02      	ldr	r3, [sp, #8]
 801e18c:	440b      	add	r3, r1
 801e18e:	429a      	cmp	r2, r3
 801e190:	dd0c      	ble.n	801e1ac <lv_label_is_char_under_pos+0xec>
        y += letter_height + line_space;
 801e192:	9b02      	ldr	r3, [sp, #8]
        line_start = new_line_start;
 801e194:	4625      	mov	r5, r4
 801e196:	9a05      	ldr	r2, [sp, #20]
 801e198:	4413      	add	r3, r2
 801e19a:	b21b      	sxth	r3, r3
 801e19c:	9302      	str	r3, [sp, #8]
    while(txt[line_start] != '\0') {
 801e19e:	f81a 3005 	ldrb.w	r3, [sl, r5]
 801e1a2:	eb0a 0b05 	add.w	fp, sl, r5
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d1e2      	bne.n	801e170 <lv_label_is_char_under_pos+0xb0>
 801e1aa:	462c      	mov	r4, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 801e1ac:	f1b9 0f02 	cmp.w	r9, #2
 801e1b0:	d13b      	bne.n	801e22a <lv_label_is_char_under_pos+0x16a>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801e1b2:	463b      	mov	r3, r7
 801e1b4:	4642      	mov	r2, r8
 801e1b6:	1b61      	subs	r1, r4, r5
 801e1b8:	4658      	mov	r0, fp
 801e1ba:	9600      	str	r6, [sp, #0]
 801e1bc:	f7fb fa78 	bl	80196b0 <lv_txt_get_width>
 801e1c0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 801e1c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 801e1c8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e1cc:	f109 0901 	add.w	r9, r9, #1
 801e1d0:	eba9 0903 	sub.w	r9, r9, r3
 801e1d4:	f3c9 33c0 	ubfx	r3, r9, #15, #1
 801e1d8:	fa03 f389 	sxtah	r3, r3, r9
 801e1dc:	ea4f 0960 	mov.w	r9, r0, asr #1
 801e1e0:	ebc9 0963 	rsb	r9, r9, r3, asr #1
 801e1e4:	fa0f f989 	sxth.w	r9, r9
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 801e1e8:	2000      	movs	r0, #0
 801e1ea:	f88d 001b 	strb.w	r0, [sp, #27]
    uint32_t letter_next = '\0';
 801e1ee:	9009      	str	r0, [sp, #36]	; 0x24
    uint32_t letter      = '\0';
 801e1f0:	e9cd 5007 	strd	r5, r0, [sp, #28]
    if(new_line_start > 0) {
 801e1f4:	2c00      	cmp	r4, #0
 801e1f6:	d159      	bne.n	801e2ac <lv_label_is_char_under_pos+0x1ec>
    lv_coord_t last_x = 0;
 801e1f8:	46a3      	mov	fp, r4
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 801e1fa:	4640      	mov	r0, r8
 801e1fc:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801e200:	f7f8 fa50 	bl	80166a4 <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801e204:	9b03      	ldr	r3, [sp, #12]
 801e206:	ebab 0207 	sub.w	r2, fp, r7
 801e20a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e20e:	4293      	cmp	r3, r2
 801e210:	db51      	blt.n	801e2b6 <lv_label_is_char_under_pos+0x1f6>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 801e212:	4438      	add	r0, r7
 801e214:	1c47      	adds	r7, r0, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801e216:	44bb      	add	fp, r7
 801e218:	455b      	cmp	r3, fp
 801e21a:	bfcc      	ite	gt
 801e21c:	2000      	movgt	r0, #0
 801e21e:	2001      	movle	r0, #1
}
 801e220:	b00d      	add	sp, #52	; 0x34
 801e222:	ecbd 8b02 	vpop	{d8}
 801e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 801e22a:	f1b9 0f03 	cmp.w	r9, #3
 801e22e:	d111      	bne.n	801e254 <lv_label_is_char_under_pos+0x194>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 801e230:	463b      	mov	r3, r7
 801e232:	4642      	mov	r2, r8
 801e234:	1b61      	subs	r1, r4, r5
 801e236:	4658      	mov	r0, fp
 801e238:	9600      	str	r6, [sp, #0]
 801e23a:	f7fb fa39 	bl	80196b0 <lv_txt_get_width>
 801e23e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801e242:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 801e246:	3301      	adds	r3, #1
 801e248:	eba3 0309 	sub.w	r3, r3, r9
        x += lv_area_get_width(&txt_coords) - line_w;
 801e24c:	1a18      	subs	r0, r3, r0
 801e24e:	fa0f f980 	sxth.w	r9, r0
 801e252:	e7c9      	b.n	801e1e8 <lv_label_is_char_under_pos+0x128>
    lv_coord_t x      = 0;
 801e254:	f04f 0900 	mov.w	r9, #0
 801e258:	e7c6      	b.n	801e1e8 <lv_label_is_char_under_pos+0x128>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801e25a:	9b07      	ldr	r3, [sp, #28]
 801e25c:	f10d 001b 	add.w	r0, sp, #27
 801e260:	f81a 1003 	ldrb.w	r1, [sl, r3]
 801e264:	f7fb f8be 	bl	80193e4 <_lv_txt_is_cmd>
 801e268:	b150      	cbz	r0, 801e280 <lv_label_is_char_under_pos+0x1c0>
        while(i <= new_line_start - 1) {
 801e26a:	9b07      	ldr	r3, [sp, #28]
 801e26c:	429c      	cmp	r4, r3
 801e26e:	d3c4      	bcc.n	801e1fa <lv_label_is_char_under_pos+0x13a>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 801e270:	ab07      	add	r3, sp, #28
 801e272:	aa09      	add	r2, sp, #36	; 0x24
 801e274:	a908      	add	r1, sp, #32
 801e276:	4650      	mov	r0, sl
 801e278:	f7fb fa00 	bl	801967c <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801e27c:	2e00      	cmp	r6, #0
 801e27e:	d1ec      	bne.n	801e25a <lv_label_is_char_under_pos+0x19a>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801e280:	4640      	mov	r0, r8
 801e282:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801e286:	f7f8 fa0d 	bl	80166a4 <lv_font_get_glyph_width>
            if(pos->x < x) {
 801e28a:	9a03      	ldr	r2, [sp, #12]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801e28c:	4448      	add	r0, r9
            if(pos->x < x) {
 801e28e:	f9b2 2000 	ldrsh.w	r2, [r2]
            x += lv_font_get_glyph_width(font, letter, letter_next);
 801e292:	b283      	uxth	r3, r0
            if(pos->x < x) {
 801e294:	b200      	sxth	r0, r0
 801e296:	4282      	cmp	r2, r0
 801e298:	da02      	bge.n	801e2a0 <lv_label_is_char_under_pos+0x1e0>
                break;
 801e29a:	46cb      	mov	fp, r9
                i = i_current;
 801e29c:	9507      	str	r5, [sp, #28]
                break;
 801e29e:	e7ac      	b.n	801e1fa <lv_label_is_char_under_pos+0x13a>
            x += letter_space;
 801e2a0:	443b      	add	r3, r7
            i_current = i;
 801e2a2:	46cb      	mov	fp, r9
 801e2a4:	9d07      	ldr	r5, [sp, #28]
            x += letter_space;
 801e2a6:	fa0f f983 	sxth.w	r9, r3
 801e2aa:	e7de      	b.n	801e26a <lv_label_is_char_under_pos+0x1aa>
    lv_coord_t last_x = 0;
 801e2ac:	4683      	mov	fp, r0
        while(i <= new_line_start - 1) {
 801e2ae:	3c01      	subs	r4, #1
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801e2b0:	f006 0601 	and.w	r6, r6, #1
 801e2b4:	e7d9      	b.n	801e26a <lv_label_is_char_under_pos+0x1aa>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 801e2b6:	2000      	movs	r0, #0
 801e2b8:	e7b2      	b.n	801e220 <lv_label_is_char_under_pos+0x160>

0801e2ba <lv_label_get_text_selection_start>:
}
 801e2ba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e2bc:	4770      	bx	lr

0801e2be <lv_label_get_text_selection_end>:
}
 801e2be:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e2c0:	4770      	bx	lr
	...

0801e2c4 <lv_label_ins_text>:
{
 801e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2c8:	4604      	mov	r4, r0
 801e2ca:	460d      	mov	r5, r1
    LV_ASSERT_NULL(txt);
 801e2cc:	4616      	mov	r6, r2
 801e2ce:	b902      	cbnz	r2, 801e2d2 <lv_label_ins_text+0xe>
 801e2d0:	e7fe      	b.n	801e2d0 <lv_label_ins_text+0xc>
    if(label->static_txt != 0) return;
 801e2d2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801e2d6:	071b      	lsls	r3, r3, #28
 801e2d8:	d425      	bmi.n	801e326 <lv_label_ins_text+0x62>
    lv_obj_invalidate(obj);
 801e2da:	f7e6 ffcd 	bl	8005278 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 801e2de:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 801e2e2:	4640      	mov	r0, r8
 801e2e4:	f7e1 ff9e 	bl	8000224 <strlen>
 801e2e8:	4607      	mov	r7, r0
    size_t ins_len = strlen(txt);
 801e2ea:	4630      	mov	r0, r6
 801e2ec:	f7e1 ff9a 	bl	8000224 <strlen>
    size_t new_len = ins_len + old_len;
 801e2f0:	4438      	add	r0, r7
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 801e2f2:	1c41      	adds	r1, r0, #1
 801e2f4:	4640      	mov	r0, r8
 801e2f6:	f7f9 fca5 	bl	8017c44 <lv_mem_realloc>
 801e2fa:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 801e2fc:	b900      	cbnz	r0, 801e300 <lv_label_ins_text+0x3c>
 801e2fe:	e7fe      	b.n	801e2fe <lv_label_ins_text+0x3a>
    if(pos == LV_LABEL_POS_LAST) {
 801e300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e304:	429d      	cmp	r5, r3
 801e306:	d103      	bne.n	801e310 <lv_label_ins_text+0x4c>
        pos = _lv_txt_get_encoded_length(label->text);
 801e308:	4b08      	ldr	r3, [pc, #32]	; (801e32c <lv_label_ins_text+0x68>)
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	4798      	blx	r3
 801e30e:	4605      	mov	r5, r0
    _lv_txt_ins(label->text, pos, txt);
 801e310:	4629      	mov	r1, r5
 801e312:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e314:	4632      	mov	r2, r6
 801e316:	f7fb f965 	bl	80195e4 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 801e31a:	4620      	mov	r0, r4
 801e31c:	2100      	movs	r1, #0
}
 801e31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    lv_label_set_text(obj, NULL);
 801e322:	f7ff bd25 	b.w	801dd70 <lv_label_set_text>
}
 801e326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e32a:	bf00      	nop
 801e32c:	2000004c 	.word	0x2000004c

0801e330 <lv_line_constructor>:
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_line_t * line = (lv_line_t *)obj;

    line->point_num   = 0;
 801e330:	2300      	movs	r3, #0
    line->point_array = NULL;
    line->y_inv       = 0;
 801e332:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
{
 801e336:	4608      	mov	r0, r1
    line->y_inv       = 0;
 801e338:	f363 0200 	bfi	r2, r3, #0, #1
    line->point_num   = 0;
 801e33c:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 801e33e:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 801e340:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801e344:	2102      	movs	r1, #2
 801e346:	f7e5 bdb2 	b.w	8003eae <lv_obj_clear_flag>
	...

0801e34c <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801e34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801e350:	4858      	ldr	r0, [pc, #352]	; (801e4b4 <lv_line_event+0x168>)
{
 801e352:	b089      	sub	sp, #36	; 0x24
 801e354:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801e356:	f7e3 fdf0 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801e35a:	2801      	cmp	r0, #1
 801e35c:	d117      	bne.n	801e38e <lv_line_event+0x42>

    lv_event_code_t code = lv_event_get_code(e);
 801e35e:	4628      	mov	r0, r5
 801e360:	f7e3 fe84 	bl	800206c <lv_event_get_code>
 801e364:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e366:	4628      	mov	r0, r5
 801e368:	f7e3 fe7e 	bl	8002068 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e36c:	2e13      	cmp	r6, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801e36e:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e370:	d110      	bne.n	801e394 <lv_line_event+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801e372:	f640 0249 	movw	r2, #2121	; 0x849
 801e376:	2100      	movs	r1, #0
 801e378:	f7e9 f8a6 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e37c:	b204      	sxth	r4, r0
        /*The corner of the skew lines is out of the intended area*/
        lv_coord_t line_width = lv_obj_get_style_line_width(obj, LV_PART_MAIN);
        lv_coord_t * s = lv_event_get_param(e);
 801e37e:	4628      	mov	r0, r5
 801e380:	f7e3 fe76 	bl	8002070 <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 801e384:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e388:	42a3      	cmp	r3, r4
 801e38a:	da00      	bge.n	801e38e <lv_line_event+0x42>
 801e38c:	8004      	strh	r4, [r0, #0]
            }
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 801e38e:	b009      	add	sp, #36	; 0x24
 801e390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801e394:	2e26      	cmp	r6, #38	; 0x26
 801e396:	d128      	bne.n	801e3ea <lv_line_event+0x9e>
        lv_point_t * p = lv_event_get_param(e);
 801e398:	4628      	mov	r0, r5
 801e39a:	f7e3 fe69 	bl	8002070 <lv_event_get_param>
        if(line->point_num > 0) {
 801e39e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        lv_point_t * p = lv_event_get_param(e);
 801e3a0:	4606      	mov	r6, r0
        if(line->point_num > 0) {
 801e3a2:	2a00      	cmp	r2, #0
 801e3a4:	d0f3      	beq.n	801e38e <lv_line_event+0x42>
 801e3a6:	2300      	movs	r3, #0
        lv_coord_t h = 0;
 801e3a8:	461f      	mov	r7, r3
        lv_coord_t w = 0;
 801e3aa:	461d      	mov	r5, r3
 801e3ac:	e00d      	b.n	801e3ca <lv_line_event+0x7e>
                w = LV_MAX(line->point_array[i].x, w);
 801e3ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e3b0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801e3b4:	f931 1023 	ldrsh.w	r1, [r1, r3, lsl #2]
 801e3b8:	3301      	adds	r3, #1
 801e3ba:	428d      	cmp	r5, r1
 801e3bc:	bfb8      	it	lt
 801e3be:	460d      	movlt	r5, r1
                h = LV_MAX(line->point_array[i].y, h);
 801e3c0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801e3c4:	428f      	cmp	r7, r1
 801e3c6:	bfb8      	it	lt
 801e3c8:	460f      	movlt	r7, r1
            for(i = 0; i < line->point_num; i++) {
 801e3ca:	b299      	uxth	r1, r3
 801e3cc:	428a      	cmp	r2, r1
 801e3ce:	d8ee      	bhi.n	801e3ae <lv_line_event+0x62>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801e3d0:	f640 0249 	movw	r2, #2121	; 0x849
 801e3d4:	2100      	movs	r1, #0
 801e3d6:	4620      	mov	r0, r4
 801e3d8:	f7e9 f876 	bl	80074c8 <lv_obj_get_style_prop>
            w += line_width;
 801e3dc:	fa15 f580 	uxtah	r5, r5, r0
            h += line_width;
 801e3e0:	fa17 f080 	uxtah	r0, r7, r0
            p->x = w;
 801e3e4:	8035      	strh	r5, [r6, #0]
            p->y = h;
 801e3e6:	8070      	strh	r0, [r6, #2]
 801e3e8:	e7d1      	b.n	801e38e <lv_line_event+0x42>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801e3ea:	2e15      	cmp	r6, #21
 801e3ec:	d1cf      	bne.n	801e38e <lv_line_event+0x42>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801e3ee:	4628      	mov	r0, r5
 801e3f0:	f7e3 fe3e 	bl	8002070 <lv_event_get_param>
        if(line->point_num == 0 || line->point_array == NULL) return;
 801e3f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        const lv_area_t * clip_area = lv_event_get_param(e);
 801e3f6:	4681      	mov	r9, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d0c8      	beq.n	801e38e <lv_line_event+0x42>
 801e3fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d0c5      	beq.n	801e38e <lv_line_event+0x42>
        lv_obj_get_coords(obj, &area);
 801e402:	a903      	add	r1, sp, #12
 801e404:	4620      	mov	r0, r4
 801e406:	f7e6 fd92 	bl	8004f2e <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801e40a:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 801e40e:	4620      	mov	r0, r4
        for(i = 0; i < line->point_num - 1; i++) {
 801e410:	f04f 0800 	mov.w	r8, #0
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801e414:	f7e7 fe0a 	bl	800602c <lv_obj_get_scroll_x>
 801e418:	1a28      	subs	r0, r5, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801e41a:	f8bd 500e 	ldrh.w	r5, [sp, #14]
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 801e41e:	b287      	uxth	r7, r0
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 801e420:	4620      	mov	r0, r4
 801e422:	f7e7 fe15 	bl	8006050 <lv_obj_get_scroll_y>
 801e426:	1a28      	subs	r0, r5, r0
 801e428:	b286      	uxth	r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 801e42a:	4620      	mov	r0, r4
 801e42c:	f7e6 fdd5 	bl	8004fda <lv_obj_get_height>
 801e430:	4605      	mov	r5, r0
        lv_draw_line_dsc_init(&line_dsc);
 801e432:	a805      	add	r0, sp, #20
 801e434:	4435      	add	r5, r6
 801e436:	f7ec fd9d 	bl	800af74 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801e43a:	aa05      	add	r2, sp, #20
 801e43c:	2100      	movs	r1, #0
 801e43e:	b2ad      	uxth	r5, r5
 801e440:	4620      	mov	r0, r4
 801e442:	f7e6 fb21 	bl	8004a88 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 801e446:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801e448:	fa1f f388 	uxth.w	r3, r8
 801e44c:	3a01      	subs	r2, #1
 801e44e:	4293      	cmp	r3, r2
 801e450:	da9d      	bge.n	801e38e <lv_line_event+0x42>
            p1.x = line->point_array[i].x + x_ofs;
 801e452:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e454:	009a      	lsls	r2, r3, #2
 801e456:	f108 0801 	add.w	r8, r8, #1
 801e45a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801e45e:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 801e462:	443b      	add	r3, r7
 801e464:	f8ad 3004 	strh.w	r3, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 801e468:	1d13      	adds	r3, r2, #4
 801e46a:	18ca      	adds	r2, r1, r3
 801e46c:	5acb      	ldrh	r3, [r1, r3]
            if(line->y_inv == 0) {
 801e46e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
            p2.x = line->point_array[i + 1].x + x_ofs;
 801e472:	443b      	add	r3, r7
            if(line->y_inv == 0) {
 801e474:	07c9      	lsls	r1, r1, #31
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801e476:	a902      	add	r1, sp, #8
            p2.x = line->point_array[i + 1].x + x_ofs;
 801e478:	f8ad 3008 	strh.w	r3, [sp, #8]
                p1.y = line->point_array[i].y + y_ofs;
 801e47c:	8843      	ldrh	r3, [r0, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801e47e:	a801      	add	r0, sp, #4
                p1.y = line->point_array[i].y + y_ofs;
 801e480:	bf55      	itete	pl
 801e482:	199b      	addpl	r3, r3, r6
                p1.y = h - line->point_array[i].y + y_ofs;
 801e484:	1aeb      	submi	r3, r5, r3
                p1.y = line->point_array[i].y + y_ofs;
 801e486:	f8ad 3006 	strhpl.w	r3, [sp, #6]
                p1.y = h - line->point_array[i].y + y_ofs;
 801e48a:	f8ad 3006 	strhmi.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 801e48e:	bf54      	ite	pl
 801e490:	8853      	ldrhpl	r3, [r2, #2]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801e492:	8853      	ldrhmi	r3, [r2, #2]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801e494:	464a      	mov	r2, r9
                p2.y = line->point_array[i + 1].y + y_ofs;
 801e496:	bf54      	ite	pl
 801e498:	199b      	addpl	r3, r3, r6
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 801e49a:	1aeb      	submi	r3, r5, r3
 801e49c:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(&p1, &p2, clip_area, &line_dsc);
 801e4a0:	ab05      	add	r3, sp, #20
 801e4a2:	f7ec fd73 	bl	800af8c <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 801e4a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801e4aa:	f36f 0382 	bfc	r3, #2, #1
 801e4ae:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 801e4b2:	e7c8      	b.n	801e446 <lv_line_event+0xfa>
 801e4b4:	08029e68 	.word	0x08029e68

0801e4b8 <set_y_anim>:
}


static void set_y_anim(void * obj, int32_t v)
{
    lv_obj_set_y(obj, v);
 801e4b8:	b209      	sxth	r1, r1
 801e4ba:	f7e6 bcc9 	b.w	8004e50 <lv_obj_set_y>

0801e4be <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801e4be:	f241 4259 	movw	r2, #5209	; 0x1459
{
 801e4c2:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801e4c4:	f7e9 f800 	bl	80074c8 <lv_obj_get_style_prop>
}
 801e4c8:	bd08      	pop	{r3, pc}

0801e4ca <get_label>:
    return lv_obj_get_child(obj, 0);
 801e4ca:	2100      	movs	r1, #0
 801e4cc:	f7e9 bb49 	b.w	8007b62 <lv_obj_get_child>

0801e4d0 <lv_obj_get_style_text_line_space.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801e4d0:	f241 425b 	movw	r2, #5211	; 0x145b
 801e4d4:	2100      	movs	r1, #0
static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
 801e4d6:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801e4d8:	f7e8 fff6 	bl	80074c8 <lv_obj_get_style_prop>
}
 801e4dc:	b200      	sxth	r0, r0
 801e4de:	bd08      	pop	{r3, pc}

0801e4e0 <inf_normalize>:
{
 801e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801e4e2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
{
 801e4e6:	4604      	mov	r4, r0
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801e4e8:	07db      	lsls	r3, r3, #31
 801e4ea:	d537      	bpl.n	801e55c <inf_normalize+0x7c>
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801e4ec:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801e4ee:	2307      	movs	r3, #7
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801e4f0:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801e4f2:	fbb2 f2f3 	udiv	r2, r2, r3
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801e4f6:	fbb5 f3f2 	udiv	r3, r5, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801e4fa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801e4fe:	fb02 5313 	mls	r3, r2, r3, r5
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801e502:	fa13 f381 	uxtah	r3, r3, r1
 801e506:	b29b      	uxth	r3, r3
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801e508:	fbb3 f5f2 	udiv	r5, r3, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801e50c:	84c3      	strh	r3, [r0, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801e50e:	fb02 3315 	mls	r3, r2, r5, r3
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801e512:	fa13 f181 	uxtah	r1, r3, r1
 801e516:	8501      	strh	r1, [r0, #40]	; 0x28
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e518:	2100      	movs	r1, #0
 801e51a:	f7ff ffd0 	bl	801e4be <lv_obj_get_style_text_font>
 801e51e:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e520:	4620      	mov	r0, r4
 801e522:	f7ff ffd5 	bl	801e4d0 <lv_obj_get_style_text_line_space.constprop.0>
        lv_coord_t font_h              = lv_font_get_line_height(font);
 801e526:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e52a:	4607      	mov	r7, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 801e52c:	4620      	mov	r0, r4
 801e52e:	f7e6 fd74 	bl	800501a <lv_obj_get_content_height>
 801e532:	4605      	mov	r5, r0
        lv_obj_t * label = get_label(obj);
 801e534:	4620      	mov	r0, r4
 801e536:	f7ff ffc8 	bl	801e4ca <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801e53a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e53c:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801e540:	443e      	add	r6, r7
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e542:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801e546:	fb13 f606 	smulbb	r6, r3, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e54a:	1049      	asrs	r1, r1, #1
 801e54c:	ebc1 0165 	rsb	r1, r1, r5, asr #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 801e550:	1b89      	subs	r1, r1, r6
}
 801e552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        lv_obj_set_y(label, new_y);
 801e556:	b209      	sxth	r1, r1
 801e558:	f7e6 bc7a 	b.w	8004e50 <lv_obj_set_y>
}
 801e55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e55e <scroll_anim_ready_cb>:
{
 801e55e:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 801e560:	6800      	ldr	r0, [r0, #0]
 801e562:	f7e9 fafb 	bl	8007b5c <lv_obj_get_parent>
}
 801e566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    inf_normalize(obj);
 801e56a:	f7ff bfb9 	b.w	801e4e0 <inf_normalize>

0801e56e <lv_roller_set_options.part.0>:
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
 801e56e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e572:	4689      	mov	r9, r1
 801e574:	4604      	mov	r4, r0
 801e576:	4615      	mov	r5, r2
    lv_obj_t * label = get_label(obj);
 801e578:	f7ff ffa7 	bl	801e4ca <get_label>
    roller->option_cnt = 0;
 801e57c:	2300      	movs	r3, #0
    lv_obj_t * label = get_label(obj);
 801e57e:	4606      	mov	r6, r0
    roller->option_cnt = 0;
 801e580:	f109 31ff 	add.w	r1, r9, #4294967295
 801e584:	6263      	str	r3, [r4, #36]	; 0x24
    roller->sel_opt_id_ori = 0;
 801e586:	8523      	strh	r3, [r4, #40]	; 0x28
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801e588:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801e58a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801e58e:	3301      	adds	r3, #1
 801e590:	b29b      	uxth	r3, r3
 801e592:	b992      	cbnz	r2, 801e5ba <lv_roller_set_options.part.0+0x4c>
    roller->option_cnt++; /*Last option has no `\n`*/
 801e594:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 801e596:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801e59a:	b995      	cbnz	r5, 801e5c2 <lv_roller_set_options.part.0+0x54>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801e59c:	f365 0300 	bfi	r3, r5, #0, #1
        lv_label_set_text(label, options);
 801e5a0:	4649      	mov	r1, r9
 801e5a2:	4630      	mov	r0, r6
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801e5a4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 801e5a8:	f7ff fbe2 	bl	801dd70 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801e5ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_obj_refresh_ext_draw_size(label);
 801e5ae:	4630      	mov	r0, r6
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801e5b0:	8523      	strh	r3, [r4, #40]	; 0x28
}
 801e5b2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_ext_draw_size(label);
 801e5b6:	f7e6 bb74 	b.w	8004ca2 <lv_obj_refresh_ext_draw_size>
        if(options[cnt] == '\n') roller->option_cnt++;
 801e5ba:	2a0a      	cmp	r2, #10
 801e5bc:	bf08      	it	eq
 801e5be:	84a3      	strheq	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801e5c0:	e7e2      	b.n	801e588 <lv_roller_set_options.part.0+0x1a>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801e5c2:	f043 0301 	orr.w	r3, r3, #1
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801e5c6:	4648      	mov	r0, r9
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801e5c8:	f04f 0807 	mov.w	r8, #7
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801e5cc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801e5d0:	f7e1 fe28 	bl	8000224 <strlen>
 801e5d4:	1c45      	adds	r5, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801e5d6:	ebc5 0ac5 	rsb	sl, r5, r5, lsl #3
 801e5da:	4650      	mov	r0, sl
 801e5dc:	f7f9 fb4c 	bl	8017c78 <lv_mem_buf_get>
 801e5e0:	4607      	mov	r7, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801e5e2:	eb00 0b05 	add.w	fp, r0, r5
            strcpy(&opt_extra[opt_len * i], options);
 801e5e6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5ea:	ebab 0005 	sub.w	r0, fp, r5
 801e5ee:	4649      	mov	r1, r9
 801e5f0:	f005 fb4a 	bl	8023c88 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801e5f4:	230a      	movs	r3, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801e5f6:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801e5fa:	f80b 3c01 	strb.w	r3, [fp, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801e5fe:	44ab      	add	fp, r5
 801e600:	d1f1      	bne.n	801e5e6 <lv_roller_set_options.part.0+0x78>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801e602:	44ba      	add	sl, r7
        lv_label_set_text(label, opt_extra);
 801e604:	4639      	mov	r1, r7
 801e606:	4630      	mov	r0, r6
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801e608:	f80a 8c01 	strb.w	r8, [sl, #-1]
        lv_label_set_text(label, opt_extra);
 801e60c:	f7ff fbb0 	bl	801dd70 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 801e610:	4638      	mov	r0, r7
 801e612:	f7f9 f98d 	bl	8017930 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801e616:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 801e618:	4620      	mov	r0, r4
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801e61a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801e61e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801e622:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801e624:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 801e626:	f7ff ff5b 	bl	801e4e0 <inf_normalize>
 801e62a:	e7bf      	b.n	801e5ac <lv_roller_set_options.part.0+0x3e>

0801e62c <lv_roller_constructor>:
{
 801e62c:	b538      	push	{r3, r4, r5, lr}
    roller->option_cnt = 0;
 801e62e:	2500      	movs	r5, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801e630:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
{
 801e634:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801e636:	f365 0300 	bfi	r3, r5, #0, #1
    roller->option_cnt = 0;
 801e63a:	624d      	str	r5, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801e63c:	4620      	mov	r0, r4
    roller->sel_opt_id_ori = 0;
 801e63e:	850d      	strh	r5, [r1, #40]	; 0x28
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801e640:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801e644:	2110      	movs	r1, #16
 801e646:	f7e5 fc32 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801e64a:	4620      	mov	r0, r4
 801e64c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e650:	f7e5 fc2d 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 801e654:	4621      	mov	r1, r4
 801e656:	4806      	ldr	r0, [pc, #24]	; (801e670 <lv_roller_constructor+0x44>)
 801e658:	f7e5 ff64 	bl	8004524 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 801e65c:	f7e5 ffef 	bl	800463e <lv_obj_class_init_obj>
    LV_ASSERT_NULL(options);
 801e660:	462a      	mov	r2, r5
 801e662:	4620      	mov	r0, r4
 801e664:	4903      	ldr	r1, [pc, #12]	; (801e674 <lv_roller_constructor+0x48>)
}
 801e666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e66a:	f7ff bf80 	b.w	801e56e <lv_roller_set_options.part.0>
 801e66e:	bf00      	nop
 801e670:	08029ed0 	.word	0x08029ed0
 801e674:	08029e84 	.word	0x08029e84

0801e678 <get_selected_label_width>:
{
 801e678:	b570      	push	{r4, r5, r6, lr}
 801e67a:	b088      	sub	sp, #32
 801e67c:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 801e67e:	f7ff ff24 	bl	801e4ca <get_label>
    if(label == NULL) return 0;
 801e682:	4604      	mov	r4, r0
 801e684:	b1f8      	cbz	r0, 801e6c6 <get_selected_label_width+0x4e>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_SELECTED);
 801e686:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801e68a:	4628      	mov	r0, r5
 801e68c:	f7ff ff17 	bl	801e4be <lv_obj_get_style_text_font>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801e690:	f241 425a 	movw	r2, #5210	; 0x145a
 801e694:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801e698:	4606      	mov	r6, r0
 801e69a:	4628      	mov	r0, r5
 801e69c:	f7e8 ff14 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e6a0:	b203      	sxth	r3, r0
    const char * txt = lv_label_get_text(label);
 801e6a2:	4620      	mov	r0, r4
 801e6a4:	9305      	str	r3, [sp, #20]
 801e6a6:	f7ff fc15 	bl	801ded4 <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801e6aa:	2200      	movs	r2, #0
    const char * txt = lv_label_get_text(label);
 801e6ac:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801e6ae:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 801e6b2:	9b05      	ldr	r3, [sp, #20]
 801e6b4:	9200      	str	r2, [sp, #0]
 801e6b6:	e9cd 0201 	strd	r0, r2, [sp, #4]
 801e6ba:	a807      	add	r0, sp, #28
 801e6bc:	4632      	mov	r2, r6
 801e6be:	f7fb f83a 	bl	8019736 <lv_txt_get_size>
    return size.x;
 801e6c2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
}
 801e6c6:	b008      	add	sp, #32
 801e6c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e6cc <refr_position>:
{
 801e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d0:	b093      	sub	sp, #76	; 0x4c
 801e6d2:	4605      	mov	r5, r0
 801e6d4:	460f      	mov	r7, r1
    lv_obj_t * label = get_label(obj);
 801e6d6:	f7ff fef8 	bl	801e4ca <get_label>
    if(label == NULL) return;
 801e6da:	4604      	mov	r4, r0
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	d067      	beq.n	801e7b0 <refr_position+0xe4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801e6e0:	2100      	movs	r1, #0
 801e6e2:	f241 425d 	movw	r2, #5213	; 0x145d
 801e6e6:	f7e8 feef 	bl	80074c8 <lv_obj_get_style_prop>
    if(align == LV_TEXT_ALIGN_AUTO) {
 801e6ea:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 801e6ee:	d111      	bne.n	801e714 <refr_position+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801e6f0:	f241 426a 	movw	r2, #5226	; 0x146a
 801e6f4:	4628      	mov	r0, r5
 801e6f6:	f7e8 fee7 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801e6fa:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
 801e6fc:	2801      	cmp	r0, #1
 801e6fe:	d10f      	bne.n	801e720 <refr_position+0x54>
        lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 801e700:	4628      	mov	r0, r5
 801e702:	f7e6 fc70 	bl	8004fe6 <lv_obj_get_content_width>
 801e706:	4606      	mov	r6, r0
 801e708:	4620      	mov	r0, r4
 801e70a:	f7e6 fc60 	bl	8004fce <lv_obj_get_width>
 801e70e:	1a30      	subs	r0, r6, r0
 801e710:	b201      	sxth	r1, r0
 801e712:	e013      	b.n	801e73c <refr_position+0x70>
    switch(align) {
 801e714:	2902      	cmp	r1, #2
 801e716:	d005      	beq.n	801e724 <refr_position+0x58>
 801e718:	2903      	cmp	r1, #3
 801e71a:	d0f1      	beq.n	801e700 <refr_position+0x34>
 801e71c:	2901      	cmp	r1, #1
 801e71e:	d110      	bne.n	801e742 <refr_position+0x76>
        lv_obj_set_x(label, 0);
 801e720:	2100      	movs	r1, #0
 801e722:	e00b      	b.n	801e73c <refr_position+0x70>
        lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 801e724:	4628      	mov	r0, r5
 801e726:	f7e6 fc5e 	bl	8004fe6 <lv_obj_get_content_width>
 801e72a:	4606      	mov	r6, r0
 801e72c:	4620      	mov	r0, r4
 801e72e:	f7e6 fc4e 	bl	8004fce <lv_obj_get_width>
 801e732:	1a30      	subs	r0, r6, r0
 801e734:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e738:	f340 014f 	sbfx	r1, r0, #1, #16
        lv_obj_set_x(label, 0);
 801e73c:	4620      	mov	r0, r4
 801e73e:	f7e6 fb69 	bl	8004e14 <lv_obj_set_x>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801e742:	2100      	movs	r1, #0
 801e744:	4628      	mov	r0, r5
 801e746:	f7ff feba 	bl	801e4be <lv_obj_get_style_text_font>
 801e74a:	4606      	mov	r6, r0
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801e74c:	4628      	mov	r0, r5
 801e74e:	f7ff febf 	bl	801e4d0 <lv_obj_get_style_text_line_space.constprop.0>
 801e752:	4681      	mov	r9, r0
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801e754:	4628      	mov	r0, r5
    lv_coord_t font_h              = lv_font_get_line_height(font);
 801e756:	f9b6 8008 	ldrsh.w	r8, [r6, #8]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801e75a:	f7e6 fc5e 	bl	800501a <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801e75e:	2265      	movs	r2, #101	; 0x65
 801e760:	4683      	mov	fp, r0
 801e762:	2100      	movs	r1, #0
 801e764:	4628      	mov	r0, r5
 801e766:	f7e8 feaf 	bl	80074c8 <lv_obj_get_style_prop>
 801e76a:	4606      	mov	r6, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 801e76c:	fa1f fa80 	uxth.w	sl, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801e770:	b117      	cbz	r7, 801e778 <refr_position+0xac>
 801e772:	f1ba 0f00 	cmp.w	sl, #0
 801e776:	d102      	bne.n	801e77e <refr_position+0xb2>
        inf_normalize(obj);
 801e778:	4628      	mov	r0, r5
 801e77a:	f7ff feb1 	bl	801e4e0 <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e77e:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801e782:	8ced      	ldrh	r5, [r5, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e784:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801e788:	44c8      	add	r8, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e78a:	105b      	asrs	r3, r3, #1
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801e78c:	fb15 f508 	smulbb	r5, r5, r8
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801e790:	ebc3 036b 	rsb	r3, r3, fp, asr #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 801e794:	1b5d      	subs	r5, r3, r5
 801e796:	b22d      	sxth	r5, r5
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801e798:	b117      	cbz	r7, 801e7a0 <refr_position+0xd4>
 801e79a:	f1ba 0f00 	cmp.w	sl, #0
 801e79e:	d10a      	bne.n	801e7b6 <refr_position+0xea>
        lv_anim_del(label, set_y_anim);
 801e7a0:	4910      	ldr	r1, [pc, #64]	; (801e7e4 <refr_position+0x118>)
 801e7a2:	4620      	mov	r0, r4
 801e7a4:	f7f8 fb54 	bl	8016e50 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 801e7a8:	4629      	mov	r1, r5
 801e7aa:	4620      	mov	r0, r4
 801e7ac:	f7e6 fb50 	bl	8004e50 <lv_obj_set_y>
}
 801e7b0:	b013      	add	sp, #76	; 0x4c
 801e7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_anim_init(&a);
 801e7b6:	a801      	add	r0, sp, #4
 801e7b8:	b2b6      	uxth	r6, r6
 801e7ba:	f7f8 fb2f 	bl	8016e1c <lv_anim_init>
    a->exec_cb = exec_cb;
 801e7be:	4b09      	ldr	r3, [pc, #36]	; (801e7e4 <refr_position+0x118>)
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 801e7c0:	4620      	mov	r0, r4
    a->var = var;
 801e7c2:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 801e7c4:	9302      	str	r3, [sp, #8]
 801e7c6:	f7e6 fbdb 	bl	8004f80 <lv_obj_get_y>
    a->ready_cb = ready_cb;
 801e7ca:	4b07      	ldr	r3, [pc, #28]	; (801e7e8 <refr_position+0x11c>)
 801e7cc:	950a      	str	r5, [sp, #40]	; 0x28
 801e7ce:	9304      	str	r3, [sp, #16]
    a->path_cb = path_cb;
 801e7d0:	4b06      	ldr	r3, [pc, #24]	; (801e7ec <refr_position+0x120>)
    a->time = duration;
 801e7d2:	960b      	str	r6, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 801e7d4:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 801e7d6:	e9cd 0008 	strd	r0, r0, [sp, #32]
        lv_anim_start(&a);
 801e7da:	a801      	add	r0, sp, #4
 801e7dc:	f7f8 fb64 	bl	8016ea8 <lv_anim_start>
 801e7e0:	e7e6      	b.n	801e7b0 <refr_position+0xe4>
 801e7e2:	bf00      	nop
 801e7e4:	0801e4b9 	.word	0x0801e4b9
 801e7e8:	0801e55f 	.word	0x0801e55f
 801e7ec:	08016f7d 	.word	0x08016f7d

0801e7f0 <lv_roller_label_event>:
{
 801e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801e7f4:	4608      	mov	r0, r1
{
 801e7f6:	b08e      	sub	sp, #56	; 0x38
 801e7f8:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801e7fa:	f7e3 fc37 	bl	800206c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 801e7fe:	2815      	cmp	r0, #21
    lv_event_code_t code = lv_event_get_code(e);
 801e800:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 801e802:	d11a      	bne.n	801e83a <lv_roller_label_event+0x4a>
    lv_obj_t * label = lv_event_get_target(e);
 801e804:	4628      	mov	r0, r5
 801e806:	f7e3 fc2f 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e80a:	2c13      	cmp	r4, #19
    lv_obj_t * label = lv_event_get_target(e);
 801e80c:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801e80e:	d11d      	bne.n	801e84c <lv_roller_label_event+0x5c>
        lv_coord_t * s = lv_event_get_param(e);
 801e810:	4628      	mov	r0, r5
 801e812:	f7e3 fc2d 	bl	8002070 <lv_event_get_param>
 801e816:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 801e818:	4630      	mov	r0, r6
 801e81a:	f7e9 f99f 	bl	8007b5c <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 801e81e:	f7ff ff2b 	bl	801e678 <get_selected_label_width>
 801e822:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 801e824:	4630      	mov	r0, r6
 801e826:	f7e6 fbd2 	bl	8004fce <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 801e82a:	1a24      	subs	r4, r4, r0
 801e82c:	f9b5 0000 	ldrsh.w	r0, [r5]
 801e830:	4284      	cmp	r4, r0
 801e832:	bfb8      	it	lt
 801e834:	4604      	movlt	r4, r0
 801e836:	802c      	strh	r4, [r5, #0]
 801e838:	e005      	b.n	801e846 <lv_roller_label_event+0x56>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 801e83a:	4629      	mov	r1, r5
 801e83c:	4840      	ldr	r0, [pc, #256]	; (801e940 <lv_roller_label_event+0x150>)
 801e83e:	f7e3 fb7c 	bl	8001f3a <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801e842:	2801      	cmp	r0, #1
 801e844:	d0de      	beq.n	801e804 <lv_roller_label_event+0x14>
}
 801e846:	b00e      	add	sp, #56	; 0x38
 801e848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801e84c:	2c23      	cmp	r4, #35	; 0x23
 801e84e:	d105      	bne.n	801e85c <lv_roller_label_event+0x6c>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 801e850:	f7e9 f984 	bl	8007b5c <lv_obj_get_parent>
 801e854:	2100      	movs	r1, #0
 801e856:	f7ff ff39 	bl	801e6cc <refr_position>
 801e85a:	e7f4      	b.n	801e846 <lv_roller_label_event+0x56>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801e85c:	2c15      	cmp	r4, #21
 801e85e:	d1f2      	bne.n	801e846 <lv_roller_label_event+0x56>
    lv_obj_t * label_obj = lv_event_get_target(e);
 801e860:	4628      	mov	r0, r5
 801e862:	f7e3 fc01 	bl	8002068 <lv_event_get_target>
 801e866:	4604      	mov	r4, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 801e868:	f7e9 f978 	bl	8007b5c <lv_obj_get_parent>
 801e86c:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 801e86e:	a806      	add	r0, sp, #24
 801e870:	f7eb ff06 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 801e874:	aa06      	add	r2, sp, #24
 801e876:	2100      	movs	r1, #0
 801e878:	4630      	mov	r0, r6
 801e87a:	f7e6 f85d 	bl	8004938 <lv_obj_init_draw_label_dsc>
    lv_coord_t font_h        = lv_font_get_line_height(font);
 801e87e:	9b06      	ldr	r3, [sp, #24]
    const lv_area_t * clip_area = lv_event_get_param(e);
 801e880:	4628      	mov	r0, r5
    lv_coord_t line_space = label_draw_dsc.line_space;
 801e882:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
    lv_coord_t font_h        = lv_font_get_line_height(font);
 801e886:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
    const lv_area_t * clip_area = lv_event_get_param(e);
 801e88a:	f7e3 fbf1 	bl	8002070 <lv_event_get_param>
 801e88e:	4607      	mov	r7, r0
    rect_area.y1 = roller->coords.y1 + (lv_obj_get_height(roller) - font_h - line_space) / 2;
 801e890:	4630      	mov	r0, r6
 801e892:	8af5      	ldrh	r5, [r6, #22]
 801e894:	f7e6 fba1 	bl	8004fda <lv_obj_get_height>
 801e898:	eba0 030a 	sub.w	r3, r0, sl
    if((font_h & 0x1) && (line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801e89c:	f01a 0f01 	tst.w	sl, #1
 801e8a0:	fa1f f88a 	uxth.w	r8, sl
    rect_area.y1 = roller->coords.y1 + (lv_obj_get_height(roller) - font_h - line_space) / 2;
 801e8a4:	eba3 0309 	sub.w	r3, r3, r9
 801e8a8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801e8ac:	eb05 0363 	add.w	r3, r5, r3, asr #1
 801e8b0:	b29a      	uxth	r2, r3
 801e8b2:	b21d      	sxth	r5, r3
    if((font_h & 0x1) && (line_space & 0x1)) rect_area.y1--; /*Compensate the two rounding error*/
 801e8b4:	d005      	beq.n	801e8c2 <lv_roller_label_event+0xd2>
 801e8b6:	f019 0f01 	tst.w	r9, #1
 801e8ba:	bf1c      	itt	ne
 801e8bc:	f102 35ff 	addne.w	r5, r2, #4294967295
 801e8c0:	b22d      	sxthne	r5, r5
    lv_obj_get_coords(roller, &roller_coords);
 801e8c2:	a902      	add	r1, sp, #8
 801e8c4:	4630      	mov	r0, r6
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e8c6:	f109 39ff 	add.w	r9, r9, #4294967295
    lv_obj_get_coords(roller, &roller_coords);
 801e8ca:	f7e6 fb30 	bl	8004f2e <lv_obj_get_coords>
    clip2.x1 = label_obj->coords.x1;
 801e8ce:	6962      	ldr	r2, [r4, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e8d0:	4639      	mov	r1, r7
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e8d2:	44c8      	add	r8, r9
    clip2.x2 = label_obj->coords.x2;
 801e8d4:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    clip2.x1 = label_obj->coords.x1;
 801e8d8:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e8da:	aa04      	add	r2, sp, #16
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e8dc:	44a8      	add	r8, r5
    clip2.x2 = label_obj->coords.x2;
 801e8de:	f8ad 3014 	strh.w	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e8e2:	4610      	mov	r0, r2
    clip2.y2 = rect_area.y1;
 801e8e4:	f8ad 5016 	strh.w	r5, [sp, #22]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801e8e8:	fa0f f888 	sxth.w	r8, r8
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e8ec:	f7f8 fbc3 	bl	8017076 <_lv_area_intersect>
 801e8f0:	b158      	cbz	r0, 801e90a <lv_roller_label_event+0x11a>
        lv_draw_label(&label_obj->coords, &clip2, &label_draw_dsc, lv_label_get_text(label_obj), NULL);
 801e8f2:	4620      	mov	r0, r4
 801e8f4:	f7ff faee 	bl	801ded4 <lv_label_get_text>
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	4603      	mov	r3, r0
 801e8fc:	a904      	add	r1, sp, #16
 801e8fe:	9200      	str	r2, [sp, #0]
 801e900:	f104 0014 	add.w	r0, r4, #20
 801e904:	aa06      	add	r2, sp, #24
 801e906:	f7ec f893 	bl	800aa30 <lv_draw_label>
    clip2.x1 = label_obj->coords.x1;
 801e90a:	8aa3      	ldrh	r3, [r4, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e90c:	aa04      	add	r2, sp, #16
 801e90e:	4639      	mov	r1, r7
    clip2.y1 = rect_area.y2;
 801e910:	f8ad 8012 	strh.w	r8, [sp, #18]
    clip2.x1 = label_obj->coords.x1;
 801e914:	f8ad 3010 	strh.w	r3, [sp, #16]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e918:	4610      	mov	r0, r2
    clip2.x2 = label_obj->coords.x2;
 801e91a:	69a3      	ldr	r3, [r4, #24]
 801e91c:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, clip_area, &clip2)) {
 801e91e:	f7f8 fbaa 	bl	8017076 <_lv_area_intersect>
 801e922:	2800      	cmp	r0, #0
 801e924:	d08f      	beq.n	801e846 <lv_roller_label_event+0x56>
        lv_draw_label(&label_obj->coords, &clip2, &label_draw_dsc, lv_label_get_text(label_obj), NULL);
 801e926:	4620      	mov	r0, r4
 801e928:	f7ff fad4 	bl	801ded4 <lv_label_get_text>
 801e92c:	2200      	movs	r2, #0
 801e92e:	4603      	mov	r3, r0
 801e930:	a904      	add	r1, sp, #16
 801e932:	9200      	str	r2, [sp, #0]
 801e934:	f104 0014 	add.w	r0, r4, #20
 801e938:	aa06      	add	r2, sp, #24
 801e93a:	f7ec f879 	bl	800aa30 <lv_draw_label>
}
 801e93e:	e782      	b.n	801e846 <lv_roller_label_event+0x56>
 801e940:	08029ed0 	.word	0x08029ed0

0801e944 <lv_roller_set_selected>:
{
 801e944:	460b      	mov	r3, r1
 801e946:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801e948:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 801e94c:	07d2      	lsls	r2, r2, #31
{
 801e94e:	b430      	push	{r4, r5}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801e950:	d50e      	bpl.n	801e970 <lv_roller_set_selected+0x2c>
        uint16_t page = roller->sel_opt_id / LV_ROLLER_INF_PAGES;
 801e952:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801e954:	2407      	movs	r4, #7
 801e956:	fbb2 f5f4 	udiv	r5, r2, r4
        if(page != 0) {
 801e95a:	2a06      	cmp	r2, #6
 801e95c:	ea4f 04c5 	mov.w	r4, r5, lsl #3
            sel_opt_signed -= page * LV_ROLLER_INF_PAGES;
 801e960:	bf88      	it	hi
 801e962:	1b2a      	subhi	r2, r5, r4
        sel_opt = page * LV_ROLLER_INF_PAGES + sel_opt_signed;
 801e964:	eba4 0405 	sub.w	r4, r4, r5
            sel_opt_signed -= page * LV_ROLLER_INF_PAGES;
 801e968:	bf88      	it	hi
 801e96a:	189b      	addhi	r3, r3, r2
        sel_opt = page * LV_ROLLER_INF_PAGES + sel_opt_signed;
 801e96c:	4423      	add	r3, r4
 801e96e:	b29b      	uxth	r3, r3
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801e970:	8c84      	ldrh	r4, [r0, #36]	; 0x24
 801e972:	429c      	cmp	r4, r3
 801e974:	bf9c      	itt	ls
 801e976:	f104 33ff 	addls.w	r3, r4, #4294967295
 801e97a:	b29b      	uxthls	r3, r3
}
 801e97c:	bc30      	pop	{r4, r5}
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801e97e:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801e980:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 801e982:	f7ff bea3 	b.w	801e6cc <refr_position>
	...

0801e988 <lv_roller_event>:
{
 801e988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801e98c:	48c2      	ldr	r0, [pc, #776]	; (801ec98 <lv_roller_event+0x310>)
{
 801e98e:	b09c      	sub	sp, #112	; 0x70
 801e990:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801e992:	f7e3 fad2 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801e996:	2801      	cmp	r0, #1
 801e998:	d111      	bne.n	801e9be <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801e99a:	4630      	mov	r0, r6
 801e99c:	f7e3 fb66 	bl	800206c <lv_event_get_code>
 801e9a0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e9a2:	4630      	mov	r0, r6
 801e9a4:	f7e3 fb60 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801e9a8:	2d26      	cmp	r5, #38	; 0x26
    lv_obj_t * obj = lv_event_get_target(e);
 801e9aa:	4604      	mov	r4, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801e9ac:	d10a      	bne.n	801e9c4 <lv_roller_event+0x3c>
        lv_point_t * p = lv_event_get_param(e);
 801e9ae:	4630      	mov	r0, r6
 801e9b0:	f7e3 fb5e 	bl	8002070 <lv_event_get_param>
 801e9b4:	4605      	mov	r5, r0
        p->x =  get_selected_label_width(obj);
 801e9b6:	4620      	mov	r0, r4
 801e9b8:	f7ff fe5e 	bl	801e678 <get_selected_label_width>
 801e9bc:	8028      	strh	r0, [r5, #0]
}
 801e9be:	b01c      	add	sp, #112	; 0x70
 801e9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801e9c4:	2d24      	cmp	r5, #36	; 0x24
 801e9c6:	d10c      	bne.n	801e9e2 <lv_roller_event+0x5a>
        lv_obj_t * label = get_label(obj);
 801e9c8:	f7ff fd7f 	bl	801e4ca <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 801e9cc:	b118      	cbz	r0, 801e9d6 <lv_roller_event+0x4e>
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	4629      	mov	r1, r5
 801e9d2:	f7e3 fb29 	bl	8002028 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 801e9d6:	4620      	mov	r0, r4
 801e9d8:	f7e6 fb89 	bl	80050ee <lv_obj_refresh_self_size>
        refr_position(obj, false);
 801e9dc:	2100      	movs	r1, #0
                    refr_position(obj, true);
 801e9de:	4620      	mov	r0, r4
 801e9e0:	e002      	b.n	801e9e8 <lv_roller_event+0x60>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801e9e2:	2d23      	cmp	r5, #35	; 0x23
 801e9e4:	d103      	bne.n	801e9ee <lv_roller_event+0x66>
        refr_position(obj, false);
 801e9e6:	2100      	movs	r1, #0
 801e9e8:	f7ff fe70 	bl	801e6cc <refr_position>
 801e9ec:	e7e7      	b.n	801e9be <lv_roller_event+0x36>
    else if(code == LV_EVENT_PRESSED) {
 801e9ee:	2d01      	cmp	r5, #1
 801e9f0:	d10b      	bne.n	801ea0a <lv_roller_event+0x82>
        roller->moved = 0;
 801e9f2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 801e9f6:	f36f 0341 	bfc	r3, #1, #1
 801e9fa:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 801e9fe:	f7ff fd64 	bl	801e4ca <get_label>
 801ea02:	49a6      	ldr	r1, [pc, #664]	; (801ec9c <lv_roller_event+0x314>)
 801ea04:	f7f8 fa24 	bl	8016e50 <lv_anim_del>
 801ea08:	e7d9      	b.n	801e9be <lv_roller_event+0x36>
    else if(code == LV_EVENT_PRESSING) {
 801ea0a:	2d02      	cmp	r5, #2
 801ea0c:	d11c      	bne.n	801ea48 <lv_roller_event+0xc0>
        lv_indev_t * indev = lv_indev_get_act();
 801ea0e:	f7e3 fda1 	bl	8002554 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 801ea12:	a90f      	add	r1, sp, #60	; 0x3c
 801ea14:	f7e3 fe2d 	bl	8002672 <lv_indev_get_vect>
        if(p.y) {
 801ea18:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d0ce      	beq.n	801e9be <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 801ea20:	4620      	mov	r0, r4
 801ea22:	f7ff fd52 	bl	801e4ca <get_label>
 801ea26:	4605      	mov	r5, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 801ea28:	f7e6 faaa 	bl	8004f80 <lv_obj_get_y>
 801ea2c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 801ea30:	4401      	add	r1, r0
 801ea32:	4628      	mov	r0, r5
 801ea34:	b209      	sxth	r1, r1
 801ea36:	f7e6 fa0b 	bl	8004e50 <lv_obj_set_y>
            roller->moved = 1;
 801ea3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801ea3e:	f043 0302 	orr.w	r3, r3, #2
 801ea42:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 801ea46:	e7ba      	b.n	801e9be <lv_roller_event+0x36>
    else if(code == LV_EVENT_RELEASED) {
 801ea48:	2d08      	cmp	r5, #8
 801ea4a:	f040 8094 	bne.w	801eb76 <lv_roller_event+0x1ee>
    lv_obj_t * label = get_label(obj);
 801ea4e:	f7ff fd3c 	bl	801e4ca <get_label>
    if(label == NULL) return LV_RES_OK;
 801ea52:	4607      	mov	r7, r0
 801ea54:	2800      	cmp	r0, #0
 801ea56:	d0b2      	beq.n	801e9be <lv_roller_event+0x36>
    lv_indev_t * indev = lv_indev_get_act();
 801ea58:	f7e3 fd7c 	bl	8002554 <lv_indev_get_act>
 801ea5c:	4680      	mov	r8, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801ea5e:	f7e3 fd7f 	bl	8002560 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801ea62:	2804      	cmp	r0, #4
 801ea64:	d001      	beq.n	801ea6a <lv_roller_event+0xe2>
 801ea66:	2802      	cmp	r0, #2
 801ea68:	d10e      	bne.n	801ea88 <lv_roller_event+0x100>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801ea6a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801ea6c:	2804      	cmp	r0, #4
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801ea6e:	8523      	strh	r3, [r4, #40]	; 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801ea70:	d10a      	bne.n	801ea88 <lv_roller_event+0x100>
            lv_group_t * g      = lv_obj_get_group(obj);
 801ea72:	4620      	mov	r0, r4
 801ea74:	f7e5 fa64 	bl	8003f40 <lv_obj_get_group>
 801ea78:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 801ea7a:	f7e3 fcf7 	bl	800246c <lv_group_get_editing>
 801ea7e:	b118      	cbz	r0, 801ea88 <lv_roller_event+0x100>
                lv_group_set_editing(g, false);
 801ea80:	2100      	movs	r1, #0
 801ea82:	4628      	mov	r0, r5
 801ea84:	f7e3 fc8e 	bl	80023a4 <lv_group_set_editing>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801ea88:	4640      	mov	r0, r8
 801ea8a:	f7e3 fd69 	bl	8002560 <lv_indev_get_type>
 801ea8e:	2801      	cmp	r0, #1
 801ea90:	d12e      	bne.n	801eaf0 <lv_roller_event+0x168>
        if(roller->moved == 0) {
 801ea92:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 801ea96:	f016 0602 	ands.w	r6, r6, #2
 801ea9a:	d036      	beq.n	801eb0a <lv_roller_event+0x182>
            const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ea9c:	2100      	movs	r1, #0
 801ea9e:	4620      	mov	r0, r4
 801eaa0:	f7ff fd0d 	bl	801e4be <lv_obj_get_style_text_font>
 801eaa4:	4605      	mov	r5, r0
            lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801eaa6:	4620      	mov	r0, r4
 801eaa8:	f7ff fd12 	bl	801e4d0 <lv_obj_get_style_text_line_space.constprop.0>
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801eaac:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801eab0:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801eab4:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 801eab6:	f8b5 9008 	ldrh.w	r9, [r5, #8]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801eaba:	1af6      	subs	r6, r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801eabc:	8afd      	ldrh	r5, [r7, #22]
            lv_coord_t label_unit = font_h + line_space;
 801eabe:	4448      	add	r0, r9
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801eac0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
            lv_coord_t label_unit = font_h + line_space;
 801eac4:	fa0f f980 	sxth.w	r9, r0
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801eac8:	4640      	mov	r0, r8
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801eaca:	eb03 0366 	add.w	r3, r3, r6, asr #1
 801eace:	b21e      	sxth	r6, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801ead0:	f7e5 f82c 	bl	8003b2c <lv_indev_scroll_throw_predict>
 801ead4:	4405      	add	r5, r0
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801ead6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
            int32_t id = (mid - label_y1) / label_unit;
 801ead8:	b22d      	sxth	r5, r5
 801eada:	1b75      	subs	r5, r6, r5
 801eadc:	fb95 f5f9 	sdiv	r5, r5, r9
            if(id < 0) id = 0;
 801eae0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801eae4:	429d      	cmp	r5, r3
 801eae6:	bfa8      	it	ge
 801eae8:	f103 35ff 	addge.w	r5, r3, #4294967295
            new_opt = id;
 801eaec:	b22d      	sxth	r5, r5
 801eaee:	e02c      	b.n	801eb4a <lv_roller_event+0x1c2>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801eaf0:	4640      	mov	r0, r8
 801eaf2:	f7e3 fd35 	bl	8002560 <lv_indev_get_type>
 801eaf6:	2803      	cmp	r0, #3
 801eaf8:	d0cb      	beq.n	801ea92 <lv_roller_event+0x10a>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801eafa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801eafc:	aa0f      	add	r2, sp, #60	; 0x3c
 801eafe:	211c      	movs	r1, #28
 801eb00:	4620      	mov	r0, r4
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801eb02:	930f      	str	r3, [sp, #60]	; 0x3c
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801eb04:	f7e3 fa90 	bl	8002028 <lv_event_send>
    return res;
 801eb08:	e759      	b.n	801e9be <lv_roller_event+0x36>
            lv_indev_get_point(indev, &p);
 801eb0a:	4640      	mov	r0, r8
 801eb0c:	a90d      	add	r1, sp, #52	; 0x34
 801eb0e:	f7e3 fd82 	bl	8002616 <lv_indev_get_point>
            p.y -= label->coords.y1;
 801eb12:	8afa      	ldrh	r2, [r7, #22]
 801eb14:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
            letter_i = lv_label_get_letter_on(label, &p);
 801eb18:	a90d      	add	r1, sp, #52	; 0x34
 801eb1a:	4638      	mov	r0, r7
            new_opt = 0;
 801eb1c:	4635      	mov	r5, r6
            p.y -= label->coords.y1;
 801eb1e:	1a9b      	subs	r3, r3, r2
            p.x -= label->coords.x1;
 801eb20:	8aba      	ldrh	r2, [r7, #20]
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801eb22:	f8df a17c 	ldr.w	sl, [pc, #380]	; 801eca0 <lv_roller_event+0x318>
            p.y -= label->coords.y1;
 801eb26:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            p.x -= label->coords.x1;
 801eb2a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801eb2e:	1a9b      	subs	r3, r3, r2
 801eb30:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            letter_i = lv_label_get_letter_on(label, &p);
 801eb34:	f7ff fac0 	bl	801e0b8 <lv_label_get_letter_on>
 801eb38:	4680      	mov	r8, r0
            const char * txt  = lv_label_get_text(label);
 801eb3a:	4638      	mov	r0, r7
 801eb3c:	f7ff f9ca 	bl	801ded4 <lv_label_get_text>
            uint32_t i_prev   = 0;
 801eb40:	4637      	mov	r7, r6
            const char * txt  = lv_label_get_text(label);
 801eb42:	4681      	mov	r9, r0
            uint32_t i        = 0;
 801eb44:	960f      	str	r6, [sp, #60]	; 0x3c
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801eb46:	45b0      	cmp	r8, r6
 801eb48:	d107      	bne.n	801eb5a <lv_roller_event+0x1d2>
        if(new_opt >= 0) {
 801eb4a:	2d00      	cmp	r5, #0
 801eb4c:	dbd5      	blt.n	801eafa <lv_roller_event+0x172>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 801eb4e:	2201      	movs	r2, #1
 801eb50:	b2a9      	uxth	r1, r5
 801eb52:	4620      	mov	r0, r4
 801eb54:	f7ff fef6 	bl	801e944 <lv_roller_set_selected>
 801eb58:	e7cf      	b.n	801eafa <lv_roller_event+0x172>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801eb5a:	f8da 3000 	ldr.w	r3, [sl]
 801eb5e:	a90f      	add	r1, sp, #60	; 0x3c
 801eb60:	4648      	mov	r0, r9
 801eb62:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 801eb64:	280a      	cmp	r0, #10
 801eb66:	d103      	bne.n	801eb70 <lv_roller_event+0x1e8>
 801eb68:	45b8      	cmp	r8, r7
 801eb6a:	bf1c      	itt	ne
 801eb6c:	3501      	addne	r5, #1
 801eb6e:	b22d      	sxthne	r5, r5
                i_prev = i;
 801eb70:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801eb72:	3601      	adds	r6, #1
 801eb74:	e7e7      	b.n	801eb46 <lv_roller_event+0x1be>
    else if(code == LV_EVENT_FOCUSED) {
 801eb76:	2d0e      	cmp	r5, #14
 801eb78:	d115      	bne.n	801eba6 <lv_roller_event+0x21e>
        lv_group_t * g             = lv_obj_get_group(obj);
 801eb7a:	f7e5 f9e1 	bl	8003f40 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801eb7e:	f7e3 fc75 	bl	800246c <lv_group_get_editing>
 801eb82:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801eb84:	f7e3 fce6 	bl	8002554 <lv_indev_get_act>
 801eb88:	f7e3 fcea 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801eb8c:	2804      	cmp	r0, #4
 801eb8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801eb90:	d107      	bne.n	801eba2 <lv_roller_event+0x21a>
            if(!editing) {
 801eb92:	b935      	cbnz	r5, 801eba2 <lv_roller_event+0x21a>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801eb94:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801eb96:	429a      	cmp	r2, r3
 801eb98:	f43f af11 	beq.w	801e9be <lv_roller_event+0x36>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 801eb9c:	84e2      	strh	r2, [r4, #38]	; 0x26
                    refr_position(obj, true);
 801eb9e:	2101      	movs	r1, #1
 801eba0:	e71d      	b.n	801e9de <lv_roller_event+0x56>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 801eba2:	8523      	strh	r3, [r4, #40]	; 0x28
 801eba4:	e70b      	b.n	801e9be <lv_roller_event+0x36>
    else if(code == LV_EVENT_DEFOCUSED) {
 801eba6:	2d0f      	cmp	r5, #15
 801eba8:	d106      	bne.n	801ebb8 <lv_roller_event+0x230>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801ebaa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 801ebac:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ebae:	429a      	cmp	r2, r3
 801ebb0:	f43f af05 	beq.w	801e9be <lv_roller_event+0x36>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 801ebb4:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, true);
 801ebb6:	e7f2      	b.n	801eb9e <lv_roller_event+0x216>
    else if(code == LV_EVENT_KEY) {
 801ebb8:	2d0d      	cmp	r5, #13
 801ebba:	d121      	bne.n	801ec00 <lv_roller_event+0x278>
        char c = *((char *)lv_event_get_param(e));
 801ebbc:	4630      	mov	r0, r6
 801ebbe:	f7e3 fa57 	bl	8002070 <lv_event_get_param>
 801ebc2:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801ebc4:	f1a3 0212 	sub.w	r2, r3, #18
 801ebc8:	2a01      	cmp	r2, #1
 801ebca:	d80d      	bhi.n	801ebe8 <lv_roller_event+0x260>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 801ebcc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801ebce:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 801ebd0:	3101      	adds	r1, #1
 801ebd2:	4299      	cmp	r1, r3
 801ebd4:	f6bf aef3 	bge.w	801e9be <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801ebd8:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, true);
 801ebda:	2201      	movs	r2, #1
 801ebdc:	b289      	uxth	r1, r1
 801ebde:	4620      	mov	r0, r4
 801ebe0:	f7ff feb0 	bl	801e944 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 801ebe4:	8525      	strh	r5, [r4, #40]	; 0x28
 801ebe6:	e6ea      	b.n	801e9be <lv_roller_event+0x36>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801ebe8:	2b14      	cmp	r3, #20
 801ebea:	d002      	beq.n	801ebf2 <lv_roller_event+0x26a>
 801ebec:	2b11      	cmp	r3, #17
 801ebee:	f47f aee6 	bne.w	801e9be <lv_roller_event+0x36>
            if(roller->sel_opt_id > 0) {
 801ebf2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801ebf4:	2900      	cmp	r1, #0
 801ebf6:	f43f aee2 	beq.w	801e9be <lv_roller_event+0x36>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801ebfa:	8d25      	ldrh	r5, [r4, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, true);
 801ebfc:	3901      	subs	r1, #1
 801ebfe:	e7ec      	b.n	801ebda <lv_roller_event+0x252>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 801ec00:	2d15      	cmp	r5, #21
 801ec02:	d002      	beq.n	801ec0a <lv_roller_event+0x282>
 801ec04:	2d18      	cmp	r5, #24
 801ec06:	f47f aeda 	bne.w	801e9be <lv_roller_event+0x36>
    lv_event_code_t code = lv_event_get_code(e);
 801ec0a:	4630      	mov	r0, r6
 801ec0c:	f7e3 fa2e 	bl	800206c <lv_event_get_code>
 801ec10:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ec12:	4630      	mov	r0, r6
 801ec14:	f7e3 fa28 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_DRAW_MAIN) {
 801ec18:	2d15      	cmp	r5, #21
    lv_obj_t * obj = lv_event_get_target(e);
 801ec1a:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 801ec1c:	d142      	bne.n	801eca4 <lv_roller_event+0x31c>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801ec1e:	4630      	mov	r0, r6
 801ec20:	f7e3 fa26 	bl	8002070 <lv_event_get_param>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ec24:	2100      	movs	r1, #0
        const lv_area_t * clip_area = lv_event_get_param(e);
 801ec26:	4606      	mov	r6, r0
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ec28:	4620      	mov	r0, r4
 801ec2a:	f7ff fc48 	bl	801e4be <lv_obj_get_style_text_font>
 801ec2e:	4605      	mov	r5, r0
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801ec30:	4620      	mov	r0, r4
 801ec32:	f7ff fc4d 	bl	801e4d0 <lv_obj_get_style_text_line_space.constprop.0>
        lv_coord_t font_h        = lv_font_get_line_height(font);
 801ec36:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 801ec3a:	4607      	mov	r7, r0
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801ec3c:	4620      	mov	r0, r4
 801ec3e:	8ae5      	ldrh	r5, [r4, #22]
 801ec40:	f7e6 f9cb 	bl	8004fda <lv_obj_get_height>
 801ec44:	eba0 0208 	sub.w	r2, r0, r8
        lv_obj_get_coords(obj, &roller_coords);
 801ec48:	a90d      	add	r1, sp, #52	; 0x34
 801ec4a:	4620      	mov	r0, r4
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801ec4c:	1bd2      	subs	r2, r2, r7
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801ec4e:	3f01      	subs	r7, #1
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801ec50:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801ec54:	4447      	add	r7, r8
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - font_h - line_space) / 2;
 801ec56:	eb05 0562 	add.w	r5, r5, r2, asr #1
 801ec5a:	b2ab      	uxth	r3, r5
 801ec5c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 801ec60:	443b      	add	r3, r7
 801ec62:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
        lv_obj_get_coords(obj, &roller_coords);
 801ec66:	f7e6 f962 	bl	8004f2e <lv_obj_get_coords>
        rect_area.x1 = roller_coords.x1;
 801ec6a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
        lv_draw_rect_dsc_init(&sel_dsc);
 801ec6e:	a80f      	add	r0, sp, #60	; 0x3c
        rect_area.x1 = roller_coords.x1;
 801ec70:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        rect_area.x2 = roller_coords.x2;
 801ec74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801ec78:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
        lv_draw_rect_dsc_init(&sel_dsc);
 801ec7c:	f7ed ffb4 	bl	800cbe8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 801ec80:	aa0f      	add	r2, sp, #60	; 0x3c
 801ec82:	4620      	mov	r0, r4
 801ec84:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801ec88:	f7e5 fd1a 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&rect_area, clip_area, &sel_dsc);
 801ec8c:	aa0f      	add	r2, sp, #60	; 0x3c
 801ec8e:	4631      	mov	r1, r6
 801ec90:	a80b      	add	r0, sp, #44	; 0x2c
 801ec92:	f7ed ffcb 	bl	800cc2c <lv_draw_rect>
 801ec96:	e692      	b.n	801e9be <lv_roller_event+0x36>
 801ec98:	08029eb4 	.word	0x08029eb4
 801ec9c:	0801e4b9 	.word	0x0801e4b9
 801eca0:	20000040 	.word	0x20000040
    else if(code == LV_EVENT_DRAW_POST) {
 801eca4:	2d18      	cmp	r5, #24
 801eca6:	f47f ae8a 	bne.w	801e9be <lv_roller_event+0x36>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801ecaa:	4630      	mov	r0, r6
 801ecac:	f7e3 f9e0 	bl	8002070 <lv_event_get_param>
 801ecb0:	4606      	mov	r6, r0
        lv_draw_label_dsc_init(&label_dsc);
 801ecb2:	a80f      	add	r0, sp, #60	; 0x3c
 801ecb4:	f7eb fce4 	bl	800a680 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 801ecb8:	aa0f      	add	r2, sp, #60	; 0x3c
 801ecba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801ecbe:	4620      	mov	r0, r4
 801ecc0:	f7e5 fe3a 	bl	8004938 <lv_obj_init_draw_label_dsc>
        lv_coord_t bg_font_h = lv_font_get_line_height(lv_obj_get_style_text_font(obj, LV_PART_MAIN));
 801ecc4:	2100      	movs	r1, #0
 801ecc6:	4620      	mov	r0, r4
 801ecc8:	f7ff fbf9 	bl	801e4be <lv_obj_get_style_text_font>
 801eccc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801ecd0:	4620      	mov	r0, r4
 801ecd2:	8ae5      	ldrh	r5, [r4, #22]
 801ecd4:	f7e6 f981 	bl	8004fda <lv_obj_get_height>
 801ecd8:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801ecdc:	1bc2      	subs	r2, r0, r7
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801ecde:	a80b      	add	r0, sp, #44	; 0x2c
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801ece0:	1a52      	subs	r2, r2, r1
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801ece2:	3901      	subs	r1, #1
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801ece4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801ece8:	4439      	add	r1, r7
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801ecea:	eb05 0562 	add.w	r5, r5, r2, asr #1
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801ecee:	aa09      	add	r2, sp, #36	; 0x24
        rect_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - bg_font_h - label_dsc.line_space) / 2;
 801ecf0:	b2ab      	uxth	r3, r5
 801ecf2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801ecf6:	440b      	add	r3, r1
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801ecf8:	4631      	mov	r1, r6
        rect_area.y2 = rect_area.y1 + bg_font_h + label_dsc.line_space - 1;
 801ecfa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        rect_area.x1 = obj->coords.x1;
 801ecfe:	8aa3      	ldrh	r3, [r4, #20]
 801ed00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_area.x2 = obj->coords.x2;
 801ed04:	8b23      	ldrh	r3, [r4, #24]
 801ed06:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        area_ok = _lv_area_intersect(&mask_sel, clip_area, &rect_area);
 801ed0a:	f7f8 f9b4 	bl	8017076 <_lv_area_intersect>
        if(area_ok) {
 801ed0e:	2800      	cmp	r0, #0
 801ed10:	f43f ae55 	beq.w	801e9be <lv_roller_event+0x36>
            lv_obj_t * label = get_label(obj);
 801ed14:	4620      	mov	r0, r4
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801ed16:	2702      	movs	r7, #2
            lv_obj_t * label = get_label(obj);
 801ed18:	f7ff fbd7 	bl	801e4ca <get_label>
 801ed1c:	4606      	mov	r6, r0
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801ed1e:	f7ff f8d9 	bl	801ded4 <lv_label_get_text>
 801ed22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed24:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 801ed28:	f9bd 504e 	ldrsh.w	r5, [sp, #78]	; 0x4e
 801ed2c:	9007      	str	r0, [sp, #28]
 801ed2e:	4620      	mov	r0, r4
 801ed30:	9206      	str	r2, [sp, #24]
 801ed32:	9305      	str	r3, [sp, #20]
 801ed34:	f7e6 f94b 	bl	8004fce <lv_obj_get_width>
 801ed38:	9907      	ldr	r1, [sp, #28]
 801ed3a:	9500      	str	r5, [sp, #0]
 801ed3c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801ed40:	e9cd 0701 	strd	r0, r7, [sp, #4]
 801ed44:	a808      	add	r0, sp, #32
 801ed46:	f7fa fcf6 	bl	8019736 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	f7e6 f945 	bl	8004fda <lv_obj_get_height>
                    obj->coords.y1); /*label offset from the middle line of the roller*/
 801ed50:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801ed54:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801ed58:	f9b6 5016 	ldrsh.w	r5, [r6, #22]
 801ed5c:	f340 074f 	sbfx	r7, r0, #1, #16
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801ed60:	4630      	mov	r0, r6
 801ed62:	f7e6 f93a 	bl	8004fda <lv_obj_get_height>
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ed66:	2100      	movs	r1, #0
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801ed68:	44b8      	add	r8, r7
 801ed6a:	eba5 0508 	sub.w	r5, r5, r8
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801ed6e:	03ad      	lsls	r5, r5, #14
 801ed70:	fb95 f5f0 	sdiv	r5, r5, r0
            const lv_font_t * normal_label_font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 801ed74:	4620      	mov	r0, r4
 801ed76:	f7ff fba2 	bl	801e4be <lv_obj_get_style_text_font>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801ed7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            res_p.y -= corr;
 801ed7c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801ed80:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ed84:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801ed88:	1ad2      	subs	r2, r2, r3
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801ed8a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801ed8e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801ed92:	443b      	add	r3, r7
            res_p.y -= corr;
 801ed94:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 801ed98:	b208      	sxth	r0, r1
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801ed9a:	4345      	muls	r5, r0
            res_p.y -= corr;
 801ed9c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
            lv_draw_label(&label_sel_area, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801eda0:	4630      	mov	r0, r6
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801eda2:	eb03 33a5 	add.w	r3, r3, r5, asr #14
            label_sel_y -= corr;
 801eda6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
            label_sel_area.x1 = label->coords.x1;
 801edaa:	8ab2      	ldrh	r2, [r6, #20]
            label_sel_area.y1 = label_sel_y;
 801edac:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801edb0:	fa13 f381 	uxtah	r3, r3, r1
            label_sel_area.x1 = label->coords.x1;
 801edb4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
            label_sel_area.x2 = label->coords.x2;
 801edb8:	8b32      	ldrh	r2, [r6, #24]
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801edba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801edbe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
            label_sel_area.x2 = label->coords.x2;
 801edc2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801edc6:	f043 0302 	orr.w	r3, r3, #2
 801edca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
            lv_draw_label(&label_sel_area, &mask_sel, &label_dsc, lv_label_get_text(label), NULL);
 801edce:	f7ff f881 	bl	801ded4 <lv_label_get_text>
 801edd2:	2200      	movs	r2, #0
 801edd4:	4603      	mov	r3, r0
 801edd6:	a90b      	add	r1, sp, #44	; 0x2c
 801edd8:	a80d      	add	r0, sp, #52	; 0x34
 801edda:	9200      	str	r2, [sp, #0]
 801eddc:	aa0f      	add	r2, sp, #60	; 0x3c
 801edde:	f7eb fe27 	bl	800aa30 <lv_draw_label>
 801ede2:	e5ec      	b.n	801e9be <lv_roller_event+0x36>

0801ede4 <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 801ede4:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 801ede6:	f7fb ffc8 	bl	801ad7a <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 801edea:	2801      	cmp	r0, #1
 801edec:	d002      	beq.n	801edf4 <lv_slider_get_mode+0x10>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
    else return LV_SLIDER_MODE_NORMAL;
 801edee:	2802      	cmp	r0, #2
 801edf0:	bf18      	it	ne
 801edf2:	2000      	movne	r0, #0
}
 801edf4:	bd08      	pop	{r3, pc}

0801edf6 <lv_slider_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_slider_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801edf6:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(class_p);
    lv_slider_t * slider = (lv_slider_t *)obj;

    /*Initialize the allocated 'slider'*/
    slider->value_to_set = NULL;
    slider->dragging = 0;
 801edf8:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
{
 801edfc:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 801edfe:	2500      	movs	r5, #0
    slider->dragging = 0;
 801ee00:	f023 0303 	bic.w	r3, r3, #3
    slider->left_knob_focus = 0;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801ee04:	4620      	mov	r0, r4
    slider->value_to_set = NULL;
 801ee06:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0;
 801ee08:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801ee0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ee10:	f7e5 f84d 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801ee14:	2110      	movs	r1, #16
 801ee16:	4620      	mov	r0, r4
 801ee18:	f7e5 f849 	bl	8003eae <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801ee1c:	4628      	mov	r0, r5
 801ee1e:	f7f7 fe59 	bl	8016ad4 <lv_disp_get_dpi>
 801ee22:	281d      	cmp	r0, #29
 801ee24:	dd0c      	ble.n	801ee40 <lv_slider_constructor+0x4a>
 801ee26:	4628      	mov	r0, r5
 801ee28:	f7f7 fe54 	bl	8016ad4 <lv_disp_get_dpi>
 801ee2c:	2114      	movs	r1, #20
 801ee2e:	300a      	adds	r0, #10
 801ee30:	fb90 f1f1 	sdiv	r1, r0, r1
 801ee34:	b209      	sxth	r1, r1
 801ee36:	4620      	mov	r0, r4
}
 801ee38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 801ee3c:	f7e6 bc1e 	b.w	800567c <lv_obj_set_ext_click_area>
 801ee40:	2101      	movs	r1, #1
 801ee42:	e7f8      	b.n	801ee36 <lv_slider_constructor+0x40>

0801ee44 <position_knob>:
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
    }
}

static void position_knob(lv_obj_t * obj, lv_area_t * knob_area, lv_coord_t knob_size, bool hor)
{
 801ee44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee48:	460c      	mov	r4, r1
 801ee4a:	f3c2 014f 	ubfx	r1, r2, #1, #16
 801ee4e:	3a01      	subs	r2, #1
 801ee50:	4605      	mov	r5, r0
 801ee52:	b292      	uxth	r2, r2

    if(hor) {
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d053      	beq.n	801ef00 <position_knob+0xbc>
        knob_area->x1 -= (knob_size >> 1);
 801ee58:	8823      	ldrh	r3, [r4, #0]
 801ee5a:	1a5b      	subs	r3, r3, r1
 801ee5c:	b29b      	uxth	r3, r3
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801ee5e:	441a      	add	r2, r3
        knob_area->x1 -= (knob_size >> 1);
 801ee60:	8023      	strh	r3, [r4, #0]
        knob_area->y1 = obj->coords.y1;
 801ee62:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801ee66:	80a2      	strh	r2, [r4, #4]
        knob_area->y1 = obj->coords.y1;
 801ee68:	8063      	strh	r3, [r4, #2]
        knob_area->y2 = obj->coords.y2;
 801ee6a:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801ee6e:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ee70:	f241 0212 	movw	r2, #4114	; 0x1012
 801ee74:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ee78:	4628      	mov	r0, r5
 801ee7a:	f7e8 fb25 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ee7e:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ee82:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ee84:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ee88:	4628      	mov	r0, r5
 801ee8a:	f7e8 fb1d 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ee8e:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ee92:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ee94:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ee98:	4628      	mov	r0, r5
 801ee9a:	f7e8 fb15 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ee9e:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801eea2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801eea4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801eea8:	4628      	mov	r0, r5
 801eeaa:	f7e8 fb0d 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801eeae:	f640 020a 	movw	r2, #2058	; 0x80a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801eeb2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801eeb4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801eeb8:	4628      	mov	r0, r5
 801eeba:	f7e8 fb05 	bl	80074c8 <lv_obj_get_style_prop>
 801eebe:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801eec0:	f640 020b 	movw	r2, #2059	; 0x80b
 801eec4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801eec8:	4628      	mov	r0, r5

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_KNOB);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left + transf_w;
 801eeca:	fa18 f886 	uxtah	r8, r8, r6
 801eece:	f7e8 fafb 	bl	80074c8 <lv_obj_get_style_prop>
    knob_area->x2 += knob_right + transf_w;
 801eed2:	fa1a f686 	uxtah	r6, sl, r6
 801eed6:	4603      	mov	r3, r0
    knob_area->x1 -= knob_left + transf_w;
 801eed8:	8822      	ldrh	r2, [r4, #0]
    knob_area->x2 += knob_right + transf_w;
 801eeda:	88a0      	ldrh	r0, [r4, #4]
    knob_area->x1 -= knob_left + transf_w;
 801eedc:	eba2 0808 	sub.w	r8, r2, r8
    knob_area->y1 -= knob_top + transf_h;
 801eee0:	fa17 f783 	uxtah	r7, r7, r3
    knob_area->x2 += knob_right + transf_w;
 801eee4:	4406      	add	r6, r0
    knob_area->y1 -= knob_top + transf_h;
 801eee6:	8862      	ldrh	r2, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801eee8:	fa19 f083 	uxtah	r0, r9, r3
 801eeec:	88e3      	ldrh	r3, [r4, #6]
    knob_area->y1 -= knob_top + transf_h;
 801eeee:	1bd7      	subs	r7, r2, r7
    knob_area->x1 -= knob_left + transf_w;
 801eef0:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->y2 += knob_bottom + transf_h;
 801eef4:	4403      	add	r3, r0
    knob_area->x2 += knob_right + transf_w;
 801eef6:	80a6      	strh	r6, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 801eef8:	8067      	strh	r7, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801eefa:	80e3      	strh	r3, [r4, #6]
}
 801eefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 801ef00:	8863      	ldrh	r3, [r4, #2]
 801ef02:	1a5b      	subs	r3, r3, r1
 801ef04:	b29b      	uxth	r3, r3
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801ef06:	441a      	add	r2, r3
        knob_area->y1 -= (knob_size >> 1);
 801ef08:	8063      	strh	r3, [r4, #2]
        knob_area->x1 = obj->coords.x1;
 801ef0a:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801ef0e:	80e2      	strh	r2, [r4, #6]
        knob_area->x1 = obj->coords.x1;
 801ef10:	8023      	strh	r3, [r4, #0]
        knob_area->x2 = obj->coords.x2;
 801ef12:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801ef16:	80a3      	strh	r3, [r4, #4]
 801ef18:	e7aa      	b.n	801ee70 <position_knob+0x2c>
	...

0801ef1c <lv_slider_event>:
{
 801ef1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801ef20:	48c4      	ldr	r0, [pc, #784]	; (801f234 <lv_slider_event+0x318>)
{
 801ef22:	b0b1      	sub	sp, #196	; 0xc4
 801ef24:	460f      	mov	r7, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801ef26:	f7e3 f808 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801ef2a:	2801      	cmp	r0, #1
 801ef2c:	d121      	bne.n	801ef72 <lv_slider_event+0x56>
    lv_event_code_t code = lv_event_get_code(e);
 801ef2e:	4638      	mov	r0, r7
 801ef30:	f7e3 f89c 	bl	800206c <lv_event_get_code>
 801ef34:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ef36:	4638      	mov	r0, r7
 801ef38:	f7e3 f896 	bl	8002068 <lv_event_get_target>
 801ef3c:	4604      	mov	r4, r0
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801ef3e:	f7ff ff51 	bl	801ede4 <lv_slider_get_mode>
    if(code == LV_EVENT_HIT_TEST) {
 801ef42:	2d11      	cmp	r5, #17
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 801ef44:	4606      	mov	r6, r0
    if(code == LV_EVENT_HIT_TEST) {
 801ef46:	d117      	bne.n	801ef78 <lv_slider_event+0x5c>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801ef48:	4638      	mov	r0, r7
 801ef4a:	f7e3 f891 	bl	8002070 <lv_event_get_param>
 801ef4e:	4605      	mov	r5, r0
        info->res = _lv_area_is_point_on(&slider->right_knob_area, info->point, 0);
 801ef50:	2200      	movs	r2, #0
 801ef52:	6801      	ldr	r1, [r0, #0]
 801ef54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ef58:	f7f8 f8d9 	bl	801710e <_lv_area_is_point_on>
 801ef5c:	4602      	mov	r2, r0
 801ef5e:	7128      	strb	r0, [r5, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 801ef60:	b938      	cbnz	r0, 801ef72 <lv_slider_event+0x56>
 801ef62:	2e02      	cmp	r6, #2
 801ef64:	d105      	bne.n	801ef72 <lv_slider_event+0x56>
            info->res = _lv_area_is_point_on(&slider->left_knob_area, info->point, 0);
 801ef66:	6829      	ldr	r1, [r5, #0]
 801ef68:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801ef6c:	f7f8 f8cf 	bl	801710e <_lv_area_is_point_on>
 801ef70:	7128      	strb	r0, [r5, #4]
}
 801ef72:	b031      	add	sp, #196	; 0xc4
 801ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(code == LV_EVENT_PRESSED) {
 801ef78:	2d01      	cmp	r5, #1
 801ef7a:	f040 808a 	bne.w	801f092 <lv_slider_event+0x176>
        lv_obj_invalidate(obj);
 801ef7e:	4620      	mov	r0, r4
 801ef80:	f7e6 f97a 	bl	8005278 <lv_obj_invalidate>
        slider->dragging = true;
 801ef84:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801ef88:	2e01      	cmp	r6, #1
        slider->dragging = true;
 801ef8a:	f043 0301 	orr.w	r3, r3, #1
 801ef8e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 801ef92:	d802      	bhi.n	801ef9a <lv_slider_event+0x7e>
                    slider->value_to_set = &slider->bar.cur_value;
 801ef94:	f104 0324 	add.w	r3, r4, #36	; 0x24
 801ef98:	e053      	b.n	801f042 <lv_slider_event+0x126>
        else if(type == LV_SLIDER_MODE_RANGE) {
 801ef9a:	2e02      	cmp	r6, #2
 801ef9c:	d1e9      	bne.n	801ef72 <lv_slider_event+0x56>
            lv_indev_get_point(lv_indev_get_act(), &p);
 801ef9e:	f7e3 fad9 	bl	8002554 <lv_indev_get_act>
 801efa2:	a91e      	add	r1, sp, #120	; 0x78
 801efa4:	f7e3 fb37 	bl	8002616 <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801efa8:	4620      	mov	r0, r4
 801efaa:	f7e6 f810 	bl	8004fce <lv_obj_get_width>
 801efae:	4606      	mov	r6, r0
 801efb0:	4620      	mov	r0, r4
 801efb2:	f7e6 f812 	bl	8004fda <lv_obj_get_height>
 801efb6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801efb8:	f241 426a 	movw	r2, #5226	; 0x146a
 801efbc:	2100      	movs	r1, #0
 801efbe:	4620      	mov	r0, r4
 801efc0:	f7e8 fa82 	bl	80074c8 <lv_obj_get_style_prop>
            if(hor) {
 801efc4:	42ae      	cmp	r6, r5
 801efc6:	db46      	blt.n	801f056 <lv_slider_event+0x13a>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801efc8:	b2c0      	uxtb	r0, r0
 801efca:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	; 0x78
 801efce:	2801      	cmp	r0, #1
 801efd0:	d02d      	beq.n	801f02e <lv_slider_event+0x112>
 801efd2:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801efd6:	428b      	cmp	r3, r1
 801efd8:	dbdc      	blt.n	801ef94 <lv_slider_event+0x78>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801efda:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801efde:	428b      	cmp	r3, r1
 801efe0:	dc2d      	bgt.n	801f03e <lv_slider_event+0x122>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801efe2:	f9b4 2060 	ldrsh.w	r2, [r4, #96]	; 0x60
 801efe6:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801efea:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801efee:	1a80      	subs	r0, r0, r2
 801eff0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801eff4:	eb02 0260 	add.w	r2, r2, r0, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801eff8:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 801effc:	1ac0      	subs	r0, r0, r3
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801effe:	1a52      	subs	r2, r2, r1
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801f000:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801f004:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801f006:	eb03 0360 	add.w	r3, r3, r0, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 801f00a:	bfb8      	it	lt
 801f00c:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 801f00e:	1a5b      	subs	r3, r3, r1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801f010:	2b00      	cmp	r3, #0
                    if(dist_right < dist_left) {
 801f012:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801f014:	bfb8      	it	lt
 801f016:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 801f018:	b21b      	sxth	r3, r3
 801f01a:	429a      	cmp	r2, r3
 801f01c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801f020:	dd11      	ble.n	801f046 <lv_slider_event+0x12a>
                        slider->value_to_set = &slider->bar.cur_value;
 801f022:	f104 0224 	add.w	r2, r4, #36	; 0x24
 801f026:	6722      	str	r2, [r4, #112]	; 0x70
            slider->left_knob_focus = 0;
 801f028:	f36f 0341 	bfc	r3, #1, #1
 801f02c:	e010      	b.n	801f050 <lv_slider_event+0x134>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 801f02e:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801f032:	428b      	cmp	r3, r1
 801f034:	dcae      	bgt.n	801ef94 <lv_slider_event+0x78>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 801f036:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 801f03a:	428b      	cmp	r3, r1
 801f03c:	dad1      	bge.n	801efe2 <lv_slider_event+0xc6>
                    slider->value_to_set = &slider->bar.start_value;
 801f03e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f042:	6723      	str	r3, [r4, #112]	; 0x70
 801f044:	e795      	b.n	801ef72 <lv_slider_event+0x56>
                        slider->value_to_set = &slider->bar.start_value;
 801f046:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801f04a:	6722      	str	r2, [r4, #112]	; 0x70
                        slider->left_knob_focus = 1;
 801f04c:	f043 0302 	orr.w	r3, r3, #2
 801f050:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 801f054:	e78d      	b.n	801ef72 <lv_slider_event+0x56>
                if(p.y < slider->right_knob_area.y1) {
 801f056:	f9bd 007a 	ldrsh.w	r0, [sp, #122]	; 0x7a
 801f05a:	f9b4 306a 	ldrsh.w	r3, [r4, #106]	; 0x6a
 801f05e:	4298      	cmp	r0, r3
 801f060:	db98      	blt.n	801ef94 <lv_slider_event+0x78>
                else if(p.y > slider->left_knob_area.y2) {
 801f062:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 801f066:	4288      	cmp	r0, r1
 801f068:	dce9      	bgt.n	801f03e <lv_slider_event+0x122>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801f06a:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801f06e:	1a89      	subs	r1, r1, r2
 801f070:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801f074:	eb02 0261 	add.w	r2, r2, r1, asr #1
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801f078:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 801f07c:	1ac9      	subs	r1, r1, r3
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801f07e:	1a12      	subs	r2, r2, r0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801f080:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801f084:	2a00      	cmp	r2, #0
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801f086:	eb03 0361 	add.w	r3, r3, r1, asr #1
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 801f08a:	bfb8      	it	lt
 801f08c:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 801f08e:	1a1b      	subs	r3, r3, r0
 801f090:	e7be      	b.n	801f010 <lv_slider_event+0xf4>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 801f092:	2d02      	cmp	r5, #2
 801f094:	f040 8087 	bne.w	801f1a6 <lv_slider_event+0x28a>
 801f098:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	f43f af69 	beq.w	801ef72 <lv_slider_event+0x56>
        lv_indev_t * indev = lv_indev_get_act();
 801f0a0:	f7e3 fa58 	bl	8002554 <lv_indev_get_act>
 801f0a4:	4605      	mov	r5, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 801f0a6:	f7e3 fa5b 	bl	8002560 <lv_indev_get_type>
 801f0aa:	2801      	cmp	r0, #1
 801f0ac:	f47f af61 	bne.w	801ef72 <lv_slider_event+0x56>
        lv_indev_get_point(indev, &p);
 801f0b0:	4628      	mov	r0, r5
 801f0b2:	a91e      	add	r1, sp, #120	; 0x78
 801f0b4:	f7e3 faaf 	bl	8002616 <lv_indev_get_point>
 801f0b8:	f241 426a 	movw	r2, #5226	; 0x146a
 801f0bc:	2100      	movs	r1, #0
 801f0be:	4620      	mov	r0, r4
 801f0c0:	f7e8 fa02 	bl	80074c8 <lv_obj_get_style_prop>
 801f0c4:	4682      	mov	sl, r0
        lv_coord_t w = lv_obj_get_width(obj);
 801f0c6:	4620      	mov	r0, r4
 801f0c8:	f7e5 ff81 	bl	8004fce <lv_obj_get_width>
 801f0cc:	4606      	mov	r6, r0
        lv_coord_t h = lv_obj_get_height(obj);
 801f0ce:	4620      	mov	r0, r4
 801f0d0:	f7e5 ff83 	bl	8004fda <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f0d4:	f241 0212 	movw	r2, #4114	; 0x1012
 801f0d8:	4605      	mov	r5, r0
 801f0da:	2100      	movs	r1, #0
 801f0dc:	4620      	mov	r0, r4
 801f0de:	f7e8 f9f3 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f0e2:	f241 0213 	movw	r2, #4115	; 0x1013
 801f0e6:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f0e8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f0ea:	4620      	mov	r0, r4
 801f0ec:	f7e8 f9ec 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f0f0:	f241 0210 	movw	r2, #4112	; 0x1010
 801f0f4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f0f6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f0f8:	4620      	mov	r0, r4
 801f0fa:	f7e8 f9e5 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f0fe:	f241 0211 	movw	r2, #4113	; 0x1011
 801f102:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f104:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f106:	4620      	mov	r0, r4
 801f108:	f7e8 f9de 	bl	80074c8 <lv_obj_get_style_prop>
        if(w >= h) {
 801f10c:	42ae      	cmp	r6, r5
        int32_t range = slider->bar.max_value - slider->bar.min_value;
 801f10e:	e9d4 1c0a 	ldrd	r1, ip, [r4, #40]	; 0x28
 801f112:	ebac 0201 	sub.w	r2, ip, r1
        if(w >= h) {
 801f116:	db38      	blt.n	801f18a <lv_slider_event+0x26e>
            lv_coord_t indic_w = w - bg_left - bg_right;
 801f118:	eb07 0308 	add.w	r3, r7, r8
            if(base_dir == LV_BASE_DIR_RTL) {
 801f11c:	fa5f fa8a 	uxtb.w	sl, sl
            lv_coord_t indic_w = w - bg_left - bg_right;
 801f120:	1af6      	subs	r6, r6, r3
            if(base_dir == LV_BASE_DIR_RTL) {
 801f122:	f1ba 0f01 	cmp.w	sl, #1
 801f126:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
            lv_coord_t indic_w = w - bg_left - bg_right;
 801f12a:	b236      	sxth	r6, r6
            if(base_dir == LV_BASE_DIR_RTL) {
 801f12c:	d127      	bne.n	801f17e <lv_slider_event+0x262>
                new_value = (obj->coords.x2 - bg_right) - p.x; /*Make the point relative to the indicator*/
 801f12e:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 801f132:	fa0f f888 	sxth.w	r8, r8
 801f136:	eba0 0808 	sub.w	r8, r0, r8
 801f13a:	eba8 0303 	sub.w	r3, r8, r3
            new_value = (new_value * range) / indic_w;
 801f13e:	4353      	muls	r3, r2
 801f140:	fb93 f3f6 	sdiv	r3, r3, r6
        if(slider->value_to_set == &slider->bar.start_value) {
 801f144:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801f146:	f104 0030 	add.w	r0, r4, #48	; 0x30
            new_value += slider->bar.min_value;
 801f14a:	440b      	add	r3, r1
        if(slider->value_to_set == &slider->bar.start_value) {
 801f14c:	4282      	cmp	r2, r0
            real_min_value = slider->bar.start_value;
 801f14e:	bf14      	ite	ne
 801f150:	6b21      	ldrne	r1, [r4, #48]	; 0x30
            real_max_value = slider->bar.cur_value;
 801f152:	f8d4 c024 	ldreq.w	ip, [r4, #36]	; 0x24
        if(new_value < real_min_value) new_value = real_min_value;
 801f156:	428b      	cmp	r3, r1
 801f158:	db03      	blt.n	801f162 <lv_slider_event+0x246>
        else if(new_value > real_max_value) new_value = real_max_value;
 801f15a:	4563      	cmp	r3, ip
 801f15c:	bfa8      	it	ge
 801f15e:	4663      	movge	r3, ip
 801f160:	4619      	mov	r1, r3
        if(*slider->value_to_set != new_value) {
 801f162:	6813      	ldr	r3, [r2, #0]
 801f164:	428b      	cmp	r3, r1
 801f166:	f43f af04 	beq.w	801ef72 <lv_slider_event+0x56>
            lv_obj_invalidate(obj);
 801f16a:	4620      	mov	r0, r4
            *slider->value_to_set = new_value;
 801f16c:	6011      	str	r1, [r2, #0]
            lv_obj_invalidate(obj);
 801f16e:	f7e6 f883 	bl	8005278 <lv_obj_invalidate>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801f172:	2200      	movs	r2, #0
 801f174:	211c      	movs	r1, #28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801f176:	4620      	mov	r0, r4
 801f178:	f7e2 ff56 	bl	8002028 <lv_event_send>
}
 801f17c:	e6f9      	b.n	801ef72 <lv_slider_event+0x56>
                new_value = p.x - (obj->coords.x1 + bg_left); /*Make the point relative to the indicator*/
 801f17e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801f182:	fa00 f787 	sxtah	r7, r0, r7
 801f186:	1bdb      	subs	r3, r3, r7
 801f188:	e7d9      	b.n	801f13e <lv_slider_event+0x222>
            new_value = p.y - (obj->coords.y2 + bg_bottom); /*Make the point relative to the indicator*/
 801f18a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801f18e:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
 801f192:	fa03 f380 	sxtah	r3, r3, r0
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801f196:	4448      	add	r0, r9
            new_value = (-new_value * range) / indic_h;
 801f198:	1b9b      	subs	r3, r3, r6
            lv_coord_t indic_h = h - bg_bottom - bg_top;
 801f19a:	1a2d      	subs	r5, r5, r0
            new_value = (-new_value * range) / indic_h;
 801f19c:	4353      	muls	r3, r2
 801f19e:	b22a      	sxth	r2, r5
 801f1a0:	fb93 f3f2 	sdiv	r3, r3, r2
 801f1a4:	e7ce      	b.n	801f144 <lv_slider_event+0x228>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 801f1a6:	2d08      	cmp	r5, #8
 801f1a8:	d001      	beq.n	801f1ae <lv_slider_event+0x292>
 801f1aa:	2d03      	cmp	r5, #3
 801f1ac:	d12e      	bne.n	801f20c <lv_slider_event+0x2f0>
        slider->dragging = false;
 801f1ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
        slider->value_to_set = NULL;
 801f1b2:	2600      	movs	r6, #0
        lv_obj_invalidate(obj);
 801f1b4:	4620      	mov	r0, r4
        slider->dragging = false;
 801f1b6:	f36f 0300 	bfc	r3, #0, #1
        slider->value_to_set = NULL;
 801f1ba:	6726      	str	r6, [r4, #112]	; 0x70
        slider->dragging = false;
 801f1bc:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        lv_obj_invalidate(obj);
 801f1c0:	f7e6 f85a 	bl	8005278 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	f7e4 febb 	bl	8003f40 <lv_obj_get_group>
 801f1ca:	4605      	mov	r5, r0
        bool editing     = lv_group_get_editing(g);
 801f1cc:	f7e3 f94e 	bl	800246c <lv_group_get_editing>
 801f1d0:	4607      	mov	r7, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801f1d2:	f7e3 f9bf 	bl	8002554 <lv_indev_get_act>
 801f1d6:	f7e3 f9c3 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801f1da:	2804      	cmp	r0, #4
 801f1dc:	f47f aec9 	bne.w	801ef72 <lv_slider_event+0x56>
            if(editing) {
 801f1e0:	2f00      	cmp	r7, #0
 801f1e2:	f43f aec6 	beq.w	801ef72 <lv_slider_event+0x56>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f7ff fdfc 	bl	801ede4 <lv_slider_get_mode>
 801f1ec:	2802      	cmp	r0, #2
 801f1ee:	d108      	bne.n	801f202 <lv_slider_event+0x2e6>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 801f1f0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801f1f4:	079f      	lsls	r7, r3, #30
 801f1f6:	f57f af29 	bpl.w	801f04c <lv_slider_event+0x130>
                        slider->left_knob_focus = 0;
 801f1fa:	f366 0341 	bfi	r3, r6, #1, #1
 801f1fe:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
                    lv_group_set_editing(g, false);
 801f202:	4631      	mov	r1, r6
 801f204:	4628      	mov	r0, r5
 801f206:	f7e3 f8cd 	bl	80023a4 <lv_group_set_editing>
 801f20a:	e6b2      	b.n	801ef72 <lv_slider_event+0x56>
    else if(code == LV_EVENT_FOCUSED) {
 801f20c:	2d0e      	cmp	r5, #14
 801f20e:	d10b      	bne.n	801f228 <lv_slider_event+0x30c>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801f210:	f7e3 f9a0 	bl	8002554 <lv_indev_get_act>
 801f214:	f7e3 f9a4 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801f218:	2804      	cmp	r0, #4
 801f21a:	d002      	beq.n	801f222 <lv_slider_event+0x306>
 801f21c:	2802      	cmp	r0, #2
 801f21e:	f47f aea8 	bne.w	801ef72 <lv_slider_event+0x56>
            slider->left_knob_focus = 0;
 801f222:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801f226:	e6ff      	b.n	801f028 <lv_slider_event+0x10c>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801f228:	2d23      	cmp	r5, #35	; 0x23
 801f22a:	d105      	bne.n	801f238 <lv_slider_event+0x31c>
        lv_obj_refresh_ext_draw_size(obj);
 801f22c:	4620      	mov	r0, r4
 801f22e:	f7e5 fd38 	bl	8004ca2 <lv_obj_refresh_ext_draw_size>
 801f232:	e69e      	b.n	801ef72 <lv_slider_event+0x56>
 801f234:	08029eec 	.word	0x08029eec
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801f238:	2d13      	cmp	r5, #19
 801f23a:	d17c      	bne.n	801f336 <lv_slider_event+0x41a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f23c:	f241 0212 	movw	r2, #4114	; 0x1012
 801f240:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f244:	4620      	mov	r0, r4
 801f246:	f7e8 f93f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f24a:	f241 0213 	movw	r2, #4115	; 0x1013
 801f24e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f252:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f256:	4620      	mov	r0, r4
 801f258:	f7e8 f936 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f25c:	f241 0210 	movw	r2, #4112	; 0x1010
 801f260:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f264:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f266:	4620      	mov	r0, r4
 801f268:	f7e8 f92e 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f26c:	f241 0211 	movw	r2, #4113	; 0x1011
 801f270:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f274:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f278:	4620      	mov	r0, r4
 801f27a:	f7e8 f925 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801f27e:	f640 020e 	movw	r2, #2062	; 0x80e
 801f282:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f286:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801f28a:	4620      	mov	r0, r4
 801f28c:	f7e8 f91c 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801f290:	f640 020a 	movw	r2, #2058	; 0x80a
 801f294:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f298:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801f29c:	4620      	mov	r0, r4
 801f29e:	f7e8 f913 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801f2a2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f2a6:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801f2a8:	f640 020b 	movw	r2, #2059	; 0x80b
 801f2ac:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801f2ae:	9300      	str	r3, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801f2b0:	f7e8 f90a 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f2b4:	b202      	sxth	r2, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801f2b6:	4620      	mov	r0, r4
 801f2b8:	9201      	str	r2, [sp, #4]
 801f2ba:	f7e5 fe88 	bl	8004fce <lv_obj_get_width>
 801f2be:	9b00      	ldr	r3, [sp, #0]
 801f2c0:	005e      	lsls	r6, r3, #1
 801f2c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f2c6:	4620      	mov	r0, r4
 801f2c8:	9300      	str	r3, [sp, #0]
 801f2ca:	f7e5 fe86 	bl	8004fda <lv_obj_get_height>
 801f2ce:	9a01      	ldr	r2, [sp, #4]
 801f2d0:	9b00      	ldr	r3, [sp, #0]
 801f2d2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801f2d6:	0051      	lsls	r1, r2, #1
 801f2d8:	4283      	cmp	r3, r0
 801f2da:	da25      	bge.n	801f328 <lv_slider_event+0x40c>
 801f2dc:	4620      	mov	r0, r4
 801f2de:	f7e5 fe76 	bl	8004fce <lv_obj_get_width>
 801f2e2:	4430      	add	r0, r6
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801f2e4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801f2e8:	f340 064f 	sbfx	r6, r0, #1, #16
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801f2ec:	4620      	mov	r0, r4
 801f2ee:	f7e5 fc5a 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
 801f2f2:	4604      	mov	r4, r0
        lv_coord_t * s = lv_event_get_param(e);
 801f2f4:	4638      	mov	r0, r7
        knob_size = (knob_size * zoom) >> 8;
 801f2f6:	fb06 f608 	mul.w	r6, r6, r8
        lv_coord_t * s = lv_event_get_param(e);
 801f2fa:	f7e2 feb9 	bl	8002070 <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801f2fe:	455d      	cmp	r5, fp
        *s  = LV_MAX(*s, knob_size);
 801f300:	f9b0 1000 	ldrsh.w	r1, [r0]
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 801f304:	bfb8      	it	lt
 801f306:	465d      	movlt	r5, fp
 801f308:	4555      	cmp	r5, sl
 801f30a:	bfb8      	it	lt
 801f30c:	4655      	movlt	r5, sl
 801f30e:	454d      	cmp	r5, r9
 801f310:	bfb8      	it	lt
 801f312:	464d      	movlt	r5, r9
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801f314:	3502      	adds	r5, #2
 801f316:	192b      	adds	r3, r5, r4
 801f318:	eb03 2326 	add.w	r3, r3, r6, asr #8
        *s  = LV_MAX(*s, knob_size);
 801f31c:	b21b      	sxth	r3, r3
 801f31e:	428b      	cmp	r3, r1
 801f320:	bfb8      	it	lt
 801f322:	460b      	movlt	r3, r1
 801f324:	8003      	strh	r3, [r0, #0]
 801f326:	e624      	b.n	801ef72 <lv_slider_event+0x56>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 801f328:	4620      	mov	r0, r4
 801f32a:	9100      	str	r1, [sp, #0]
 801f32c:	f7e5 fe55 	bl	8004fda <lv_obj_get_height>
 801f330:	9900      	ldr	r1, [sp, #0]
 801f332:	4408      	add	r0, r1
 801f334:	e7d6      	b.n	801f2e4 <lv_slider_event+0x3c8>
    else if(code == LV_EVENT_KEY) {
 801f336:	2d0d      	cmp	r5, #13
 801f338:	d130      	bne.n	801f39c <lv_slider_event+0x480>
        char c = *((char *)lv_event_get_param(e));
 801f33a:	4638      	mov	r0, r7
 801f33c:	f7e2 fe98 	bl	8002070 <lv_event_get_param>
 801f340:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801f342:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801f346:	2a11      	cmp	r2, #17
 801f348:	d114      	bne.n	801f374 <lv_slider_event+0x458>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 801f34a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 801f34e:	4620      	mov	r0, r4
 801f350:	079d      	lsls	r5, r3, #30
 801f352:	d407      	bmi.n	801f364 <lv_slider_event+0x448>
 801f354:	f7fb fcfd 	bl	801ad52 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801f358:	2201      	movs	r2, #1
 801f35a:	1881      	adds	r1, r0, r2
 801f35c:	4620      	mov	r0, r4
 801f35e:	f7fb fc83 	bl	801ac68 <lv_bar_set_value>
}
 801f362:	e706      	b.n	801f172 <lv_slider_event+0x256>
    return lv_bar_get_start_value(obj);
 801f364:	f7fb fcfb 	bl	801ad5e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801f368:	2201      	movs	r2, #1
 801f36a:	1881      	adds	r1, r0, r2
 801f36c:	4620      	mov	r0, r4
 801f36e:	f7fb fcc9 	bl	801ad04 <lv_bar_set_start_value>
}
 801f372:	e6fe      	b.n	801f172 <lv_slider_event+0x256>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801f374:	2b14      	cmp	r3, #20
 801f376:	d002      	beq.n	801f37e <lv_slider_event+0x462>
 801f378:	2b12      	cmp	r3, #18
 801f37a:	f47f adfa 	bne.w	801ef72 <lv_slider_event+0x56>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 801f37e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    return lv_bar_get_value(obj);
 801f382:	4620      	mov	r0, r4
 801f384:	0799      	lsls	r1, r3, #30
 801f386:	d404      	bmi.n	801f392 <lv_slider_event+0x476>
 801f388:	f7fb fce3 	bl	801ad52 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 801f38c:	2201      	movs	r2, #1
 801f38e:	1e41      	subs	r1, r0, #1
 801f390:	e7e4      	b.n	801f35c <lv_slider_event+0x440>
    return lv_bar_get_start_value(obj);
 801f392:	f7fb fce4 	bl	801ad5e <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 801f396:	2201      	movs	r2, #1
 801f398:	1e41      	subs	r1, r0, #1
 801f39a:	e7e7      	b.n	801f36c <lv_slider_event+0x450>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 801f39c:	2d15      	cmp	r5, #21
 801f39e:	f47f ade8 	bne.w	801ef72 <lv_slider_event+0x56>
    lv_obj_t * obj = lv_event_get_target(e);
 801f3a2:	4638      	mov	r0, r7
 801f3a4:	f7e2 fe60 	bl	8002068 <lv_event_get_target>
 801f3a8:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801f3aa:	4638      	mov	r0, r7
 801f3ac:	f7e2 fe60 	bl	8002070 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f3b0:	f241 426a 	movw	r2, #5226	; 0x146a
 801f3b4:	2100      	movs	r1, #0
 801f3b6:	4607      	mov	r7, r0
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f7e8 f885 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801f3be:	fa5f f880 	uxtb.w	r8, r0
    lv_coord_t objw = lv_obj_get_width(obj);
 801f3c2:	4620      	mov	r0, r4
 801f3c4:	f7e5 fe03 	bl	8004fce <lv_obj_get_width>
 801f3c8:	4605      	mov	r5, r0
    lv_coord_t objh = lv_obj_get_height(obj);
 801f3ca:	4620      	mov	r0, r4
 801f3cc:	f7e5 fe05 	bl	8004fda <lv_obj_get_height>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801f3d0:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    bool hor = objw >= objh ? true : false;
 801f3d4:	4285      	cmp	r5, r0
 801f3d6:	46a9      	mov	r9, r5
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801f3d8:	f002 0203 	and.w	r2, r2, #3
    lv_coord_t objh = lv_obj_get_height(obj);
 801f3dc:	4606      	mov	r6, r0
    bool hor = objw >= objh ? true : false;
 801f3de:	bfb4      	ite	lt
 801f3e0:	f04f 0b00 	movlt.w	fp, #0
 801f3e4:	f04f 0b01 	movge.w	fp, #1
    lv_coord_t knob_size = hor ? objh : objw;
 801f3e8:	4285      	cmp	r5, r0
 801f3ea:	bfa8      	it	ge
 801f3ec:	4681      	movge	r9, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 && slider->bar.max_value > 0) sym = true;
 801f3ee:	2a01      	cmp	r2, #1
 801f3f0:	fa0f f989 	sxth.w	r9, r9
 801f3f4:	d106      	bne.n	801f404 <lv_slider_event+0x4e8>
 801f3f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	da03      	bge.n	801f404 <lv_slider_event+0x4e8>
 801f3fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	f300 80a3 	bgt.w	801f54a <lv_slider_event+0x62e>
    if(hor) {
 801f404:	42b5      	cmp	r5, r6
 801f406:	da05      	bge.n	801f414 <lv_slider_event+0x4f8>
                knob_area.y1 = slider->bar.indic_area.y1;
 801f408:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
                knob_area.y1 = slider->bar.indic_area.y2;
 801f40a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f40e:	e008      	b.n	801f422 <lv_slider_event+0x506>
            if(slider->bar.cur_value >= 0) {
 801f410:	2b00      	cmp	r3, #0
 801f412:	db46      	blt.n	801f4a2 <lv_slider_event+0x586>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir == LV_BASE_DIR_RTL, slider->bar.indic_area);
 801f414:	f1b8 0f01 	cmp.w	r8, #1
 801f418:	d146      	bne.n	801f4a8 <lv_slider_event+0x58c>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801f41a:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 801f41e:	f8ad 3008 	strh.w	r3, [sp, #8]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801f422:	a804      	add	r0, sp, #16
    lv_area_copy(&slider->right_knob_area, &knob_area);
 801f424:	f104 0a68 	add.w	sl, r4, #104	; 0x68
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801f428:	f7ed fbde 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801f42c:	aa04      	add	r2, sp, #16
 801f42e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f432:	4620      	mov	r0, r4
 801f434:	f7e5 f944 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, hor);
 801f438:	464a      	mov	r2, r9
 801f43a:	465b      	mov	r3, fp
 801f43c:	a902      	add	r1, sp, #8
 801f43e:	4620      	mov	r0, r4
 801f440:	f7ff fd00 	bl	801ee44 <position_knob>
    dest->x1 = src->x1;
 801f444:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801f448:	4639      	mov	r1, r7
 801f44a:	a81e      	add	r0, sp, #120	; 0x78
 801f44c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    dest->y1 = src->y1;
 801f450:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f454:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    dest->x2 = src->x2;
 801f458:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f45c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
    dest->y2 = src->y2;
 801f460:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801f464:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801f468:	f7e5 fc0e 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.id = 0;
 801f46c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801f470:	2300      	movs	r3, #0
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801f472:	4620      	mov	r0, r4
    dsc.draw_area = &slider->right_knob_area;
 801f474:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
    dsc.id = 0;
 801f478:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
    dsc.rect_dsc = &knob_rect_dsc;
 801f47c:	ab04      	add	r3, sp, #16
 801f47e:	9320      	str	r3, [sp, #128]	; 0x80
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 801f480:	f7ff fcb0 	bl	801ede4 <lv_slider_get_mode>
 801f484:	2802      	cmp	r0, #2
 801f486:	d012      	beq.n	801f4ae <lv_slider_event+0x592>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f488:	aa1e      	add	r2, sp, #120	; 0x78
 801f48a:	211a      	movs	r1, #26
 801f48c:	4620      	mov	r0, r4
 801f48e:	f7e2 fdcb 	bl	8002028 <lv_event_send>
        lv_draw_rect(&slider->right_knob_area, clip_area, &knob_rect_dsc);
 801f492:	aa04      	add	r2, sp, #16
 801f494:	4639      	mov	r1, r7
 801f496:	4650      	mov	r0, sl
        lv_draw_rect(&slider->left_knob_area, clip_area, &knob_rect_dsc);
 801f498:	f7ed fbc8 	bl	800cc2c <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801f49c:	aa1e      	add	r2, sp, #120	; 0x78
 801f49e:	211b      	movs	r1, #27
 801f4a0:	e669      	b.n	801f176 <lv_slider_event+0x25a>
                knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801f4a2:	f1b8 0f01 	cmp.w	r8, #1
 801f4a6:	d1b8      	bne.n	801f41a <lv_slider_event+0x4fe>
 801f4a8:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 801f4ac:	e7b7      	b.n	801f41e <lv_slider_event+0x502>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 801f4ae:	2234      	movs	r2, #52	; 0x34
 801f4b0:	a904      	add	r1, sp, #16
 801f4b2:	a811      	add	r0, sp, #68	; 0x44
 801f4b4:	f7f8 fa68 	bl	8017988 <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f4b8:	aa1e      	add	r2, sp, #120	; 0x78
 801f4ba:	211a      	movs	r1, #26
 801f4bc:	4620      	mov	r0, r4
 801f4be:	f7e2 fdb3 	bl	8002028 <lv_event_send>
        lv_draw_rect(&slider->right_knob_area, clip_area, &knob_rect_dsc);
 801f4c2:	aa04      	add	r2, sp, #16
 801f4c4:	4639      	mov	r1, r7
 801f4c6:	4650      	mov	r0, sl
 801f4c8:	f7ed fbb0 	bl	800cc2c <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801f4cc:	aa1e      	add	r2, sp, #120	; 0x78
 801f4ce:	211b      	movs	r1, #27
 801f4d0:	4620      	mov	r0, r4
 801f4d2:	f7e2 fda9 	bl	8002028 <lv_event_send>
        if(hor) {
 801f4d6:	42b5      	cmp	r5, r6
 801f4d8:	db33      	blt.n	801f542 <lv_slider_event+0x626>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(hor, base_dir != LV_BASE_DIR_RTL, slider->bar.indic_area);
 801f4da:	f1b8 0f01 	cmp.w	r8, #1
 801f4de:	bf14      	ite	ne
 801f4e0:	f9b4 3034 	ldrshne.w	r3, [r4, #52]	; 0x34
 801f4e4:	f9b4 3038 	ldrsheq.w	r3, [r4, #56]	; 0x38
 801f4e8:	f8ad 3008 	strh.w	r3, [sp, #8]
        position_knob(obj, &knob_area, knob_size, hor);
 801f4ec:	465b      	mov	r3, fp
 801f4ee:	464a      	mov	r2, r9
 801f4f0:	a902      	add	r1, sp, #8
 801f4f2:	4620      	mov	r0, r4
 801f4f4:	f7ff fca6 	bl	801ee44 <position_knob>
    dest->x1 = src->x1;
 801f4f8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801f4fc:	2234      	movs	r2, #52	; 0x34
 801f4fe:	a911      	add	r1, sp, #68	; 0x44
 801f500:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 801f504:	a804      	add	r0, sp, #16
    dest->y1 = src->y1;
 801f506:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        lv_area_copy(&slider->left_knob_area, &knob_area);
 801f50a:	f104 0560 	add.w	r5, r4, #96	; 0x60
 801f50e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    dest->x2 = src->x2;
 801f512:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801f516:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    dest->y2 = src->y2;
 801f51a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801f51e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 801f522:	f7f8 fa31 	bl	8017988 <lv_memcpy>
        dsc.rect_dsc = &knob_rect_dsc;
 801f526:	ab04      	add	r3, sp, #16
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f528:	aa1e      	add	r2, sp, #120	; 0x78
 801f52a:	211a      	movs	r1, #26
        dsc.rect_dsc = &knob_rect_dsc;
 801f52c:	9320      	str	r3, [sp, #128]	; 0x80
        dsc.id = 1;
 801f52e:	2301      	movs	r3, #1
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f530:	4620      	mov	r0, r4
        dsc.draw_area = &slider->left_knob_area;
 801f532:	951f      	str	r5, [sp, #124]	; 0x7c
        dsc.id = 1;
 801f534:	932c      	str	r3, [sp, #176]	; 0xb0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801f536:	f7e2 fd77 	bl	8002028 <lv_event_send>
        lv_draw_rect(&slider->left_knob_area, clip_area, &knob_rect_dsc);
 801f53a:	aa04      	add	r2, sp, #16
 801f53c:	4639      	mov	r1, r7
 801f53e:	4628      	mov	r0, r5
 801f540:	e7aa      	b.n	801f498 <lv_slider_event+0x57c>
            knob_area.y1 = slider->bar.indic_area.y2;
 801f542:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801f544:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f548:	e7d0      	b.n	801f4ec <lv_slider_event+0x5d0>
    if(hor) {
 801f54a:	4285      	cmp	r5, r0
 801f54c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f54e:	f6bf af5f 	bge.w	801f410 <lv_slider_event+0x4f4>
            if(slider->bar.cur_value >= 0) {
 801f552:	2b00      	cmp	r3, #0
 801f554:	f6bf af58 	bge.w	801f408 <lv_slider_event+0x4ec>
                knob_area.y1 = slider->bar.indic_area.y2;
 801f558:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801f55a:	e756      	b.n	801f40a <lv_slider_event+0x4ee>

0801f55c <lv_switch_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_switch_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801f55c:	b507      	push	{r0, r1, r2, lr}
 801f55e:	4608      	mov	r0, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

   lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801f560:	2110      	movs	r1, #16
 801f562:	9001      	str	r0, [sp, #4]
 801f564:	f7e4 fca3 	bl	8003eae <lv_obj_clear_flag>
   lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 801f568:	9801      	ldr	r0, [sp, #4]
 801f56a:	2108      	movs	r1, #8
 801f56c:	f7e4 fc7c 	bl	8003e68 <lv_obj_add_flag>
   lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801f570:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f574:	9801      	ldr	r0, [sp, #4]

   LV_TRACE_OBJ_CREATE("finished");
}
 801f576:	b003      	add	sp, #12
 801f578:	f85d eb04 	ldr.w	lr, [sp], #4
   lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801f57c:	f7e4 bc74 	b.w	8003e68 <lv_obj_add_flag>

0801f580 <lv_switch_event>:


static void lv_switch_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801f584:	489a      	ldr	r0, [pc, #616]	; (801f7f0 <lv_switch_event+0x270>)
{
 801f586:	b091      	sub	sp, #68	; 0x44
 801f588:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801f58a:	f7e2 fcd6 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801f58e:	2801      	cmp	r0, #1
 801f590:	d151      	bne.n	801f636 <lv_switch_event+0xb6>

    lv_event_code_t code = lv_event_get_code(e);
 801f592:	4630      	mov	r0, r6
 801f594:	f7e2 fd6a 	bl	800206c <lv_event_get_code>
 801f598:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801f59a:	4630      	mov	r0, r6
 801f59c:	f7e2 fd64 	bl	8002068 <lv_event_get_target>

    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801f5a0:	2c13      	cmp	r4, #19
    lv_obj_t * obj = lv_event_get_target(e);
 801f5a2:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801f5a4:	d150      	bne.n	801f648 <lv_switch_event+0xc8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f5a6:	f241 0212 	movw	r2, #4114	; 0x1012
 801f5aa:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f5ae:	f7e7 ff8b 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f5b2:	f241 0213 	movw	r2, #4115	; 0x1013
    return (lv_coord_t)v.num;
 801f5b6:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f5ba:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f5be:	4628      	mov	r0, r5
 801f5c0:	f7e7 ff82 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f5c4:	f241 0210 	movw	r2, #4112	; 0x1010
    return (lv_coord_t)v.num;
 801f5c8:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f5ca:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f5ce:	4628      	mov	r0, r5
 801f5d0:	f7e7 ff7a 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f5d4:	f241 0211 	movw	r2, #4113	; 0x1011
    return (lv_coord_t)v.num;
 801f5d8:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f5dc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f5e0:	4628      	mov	r0, r5
 801f5e2:	f7e7 ff71 	bl	80074c8 <lv_obj_get_style_prop>
        lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

        /*The smaller size is the knob diameter*/
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
        knob_size += 2;         /*For rounding error*/
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801f5e6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    return (lv_coord_t)v.num;
 801f5ea:	b207      	sxth	r7, r0
 801f5ec:	4628      	mov	r0, r5
 801f5ee:	f7e5 fada 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801f5f2:	454c      	cmp	r4, r9
 801f5f4:	4623      	mov	r3, r4
 801f5f6:	bfb8      	it	lt
 801f5f8:	464b      	movlt	r3, r9
 801f5fa:	4543      	cmp	r3, r8
 801f5fc:	bfb8      	it	lt
 801f5fe:	4643      	movlt	r3, r8
 801f600:	42bb      	cmp	r3, r7
 801f602:	bfb8      	it	lt
 801f604:	463b      	movlt	r3, r7
        knob_size += 2;         /*For rounding error*/
 801f606:	3302      	adds	r3, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 801f608:	4418      	add	r0, r3
 801f60a:	b284      	uxth	r4, r0

        lv_coord_t * s = lv_event_get_param(e);
 801f60c:	4630      	mov	r0, r6
 801f60e:	f7e2 fd2f 	bl	8002070 <lv_event_get_param>
 801f612:	4606      	mov	r6, r0
        *s = LV_MAX(*s, knob_size);
 801f614:	b224      	sxth	r4, r4
 801f616:	f9b0 0000 	ldrsh.w	r0, [r0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801f61a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
        *s = LV_MAX(*s, knob_size);
 801f61e:	4284      	cmp	r4, r0
 801f620:	bfb8      	it	lt
 801f622:	4604      	movlt	r4, r0
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801f624:	4628      	mov	r0, r5
        *s = LV_MAX(*s, knob_size);
 801f626:	8034      	strh	r4, [r6, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801f628:	f7e5 fabd 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
 801f62c:	4284      	cmp	r4, r0
 801f62e:	dd05      	ble.n	801f63c <lv_switch_event+0xbc>
 801f630:	f9b6 0000 	ldrsh.w	r0, [r6]
 801f634:	8030      	strh	r0, [r6, #0]
        lv_obj_invalidate(obj);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_main(e);
    }
}
 801f636:	b011      	add	sp, #68	; 0x44
 801f638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801f63c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801f640:	4628      	mov	r0, r5
 801f642:	f7e5 fab0 	bl	8004ba6 <lv_obj_calculate_ext_draw_size>
 801f646:	e7f5      	b.n	801f634 <lv_switch_event+0xb4>
    else if(code == LV_EVENT_CLICKED) {
 801f648:	2c07      	cmp	r4, #7
 801f64a:	d10f      	bne.n	801f66c <lv_switch_event+0xec>
        uint32_t v = lv_obj_get_state(obj) & LV_STATE_CHECKED ? 1 : 0;
 801f64c:	f7e4 fc76 	bl	8003f3c <lv_obj_get_state>
 801f650:	f000 0001 	and.w	r0, r0, #1
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &v);
 801f654:	aa03      	add	r2, sp, #12
 801f656:	211c      	movs	r1, #28
        uint32_t v = lv_obj_get_state(obj) & LV_STATE_CHECKED ? 1 : 0;
 801f658:	9003      	str	r0, [sp, #12]
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &v);
 801f65a:	4628      	mov	r0, r5
 801f65c:	f7e2 fce4 	bl	8002028 <lv_event_send>
        if(res != LV_RES_OK) return;
 801f660:	2801      	cmp	r0, #1
 801f662:	d1e8      	bne.n	801f636 <lv_switch_event+0xb6>
        lv_obj_invalidate(obj);
 801f664:	4628      	mov	r0, r5
 801f666:	f7e5 fe07 	bl	8005278 <lv_obj_invalidate>
 801f66a:	e7e4      	b.n	801f636 <lv_switch_event+0xb6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801f66c:	2c15      	cmp	r4, #21
 801f66e:	d1e2      	bne.n	801f636 <lv_switch_event+0xb6>

static void draw_main(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 801f670:	4630      	mov	r0, r6
 801f672:	f7e2 fcf9 	bl	8002068 <lv_event_get_target>
 801f676:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801f678:	4630      	mov	r0, r6
 801f67a:	f7e2 fcf9 	bl	8002070 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801f67e:	f241 426a 	movw	r2, #5226	; 0x146a
 801f682:	2100      	movs	r1, #0
 801f684:	4607      	mov	r7, r0
 801f686:	4620      	mov	r0, r4
 801f688:	f7e7 ff1e 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f68c:	f241 0212 	movw	r2, #4114	; 0x1012
 801f690:	2100      	movs	r1, #0
    return (lv_base_dir_t)v.num;
 801f692:	fa5f fb80 	uxtb.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f696:	4620      	mov	r0, r4
 801f698:	f7e7 ff16 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f69c:	f241 0213 	movw	r2, #4115	; 0x1013
 801f6a0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f6a2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	f7e7 ff0f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f6aa:	f241 0210 	movw	r2, #4112	; 0x1010
 801f6ae:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f6b0:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f6b2:	4620      	mov	r0, r4
 801f6b4:	f7e7 ff08 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f6b8:	f241 0211 	movw	r2, #4113	; 0x1011
 801f6bc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f6be:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f6c0:	4620      	mov	r0, r4
 801f6c2:	f7e7 ff01 	bl	80074c8 <lv_obj_get_style_prop>
 801f6c6:	4680      	mov	r8, r0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj,     LV_PART_MAIN);
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj,   LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj,       LV_PART_MAIN);
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);

    bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801f6c8:	4620      	mov	r0, r4
 801f6ca:	f7e4 fc37 	bl	8003f3c <lv_obj_get_state>
    /*Draw the indicator in checked state*/
    if(chk) {
 801f6ce:	f010 0901 	ands.w	r9, r0, #1
 801f6d2:	d022      	beq.n	801f71a <lv_switch_event+0x19a>
        /*Respect the background's padding*/
        lv_area_t indic_area;
        lv_area_copy(&indic_area, &obj->coords);
        indic_area.x1 += bg_left;
 801f6d4:	8aa0      	ldrh	r0, [r4, #20]
    dest->y1 = src->y1;
 801f6d6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 801f6da:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801f6de:	4428      	add	r0, r5
    dest->y2 = src->y2;
 801f6e0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        indic_area.x2 -= bg_right;
        indic_area.y1 += bg_top;
 801f6e4:	4432      	add	r2, r6
        indic_area.x2 -= bg_right;
 801f6e6:	eba1 010a 	sub.w	r1, r1, sl
        indic_area.x1 += bg_left;
 801f6ea:	f8ad 0004 	strh.w	r0, [sp, #4]
        indic_area.y2 -= bg_bottom;
 801f6ee:	eba3 0308 	sub.w	r3, r3, r8

        lv_draw_rect_dsc_t draw_indic_dsc;
        lv_draw_rect_dsc_init(&draw_indic_dsc);
 801f6f2:	a803      	add	r0, sp, #12
        indic_area.x2 -= bg_right;
 801f6f4:	f8ad 1008 	strh.w	r1, [sp, #8]
        indic_area.y1 += bg_top;
 801f6f8:	f8ad 2006 	strh.w	r2, [sp, #6]
        indic_area.y2 -= bg_bottom;
 801f6fc:	f8ad 300a 	strh.w	r3, [sp, #10]
        lv_draw_rect_dsc_init(&draw_indic_dsc);
 801f700:	f7ed fa72 	bl	800cbe8 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 801f704:	aa03      	add	r2, sp, #12
 801f706:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801f70a:	4620      	mov	r0, r4
 801f70c:	f7e4 ffd8 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&indic_area, clip_area, &draw_indic_dsc);
 801f710:	aa03      	add	r2, sp, #12
 801f712:	4639      	mov	r1, r7
 801f714:	a801      	add	r0, sp, #4
 801f716:	f7ed fa89 	bl	800cc2c <lv_draw_rect>
    }

    /*Draw the knob*/
    lv_coord_t objh = lv_obj_get_height(obj);
 801f71a:	4620      	mov	r0, r4
 801f71c:	f7e5 fc5d 	bl	8004fda <lv_obj_get_height>
    lv_coord_t knob_size = objh;
    lv_area_t knob_area;

    /*Left*/
    if((base_dir != LV_BASE_DIR_RTL && !chk) || (base_dir == LV_BASE_DIR_RTL && chk)) {
 801f720:	f1bb 0f01 	cmp.w	fp, #1
 801f724:	d00c      	beq.n	801f740 <lv_switch_event+0x1c0>
 801f726:	f1b9 0f00 	cmp.w	r9, #0
 801f72a:	d00c      	beq.n	801f746 <lv_switch_event+0x1c6>
        knob_area.x1 = obj->coords.x1 + bg_left;
        knob_area.x2 = knob_area.x1 + knob_size;
    }
    else {
        knob_area.x2 = obj->coords.x2 - bg_right;
 801f72c:	8b21      	ldrh	r1, [r4, #24]
 801f72e:	eba1 020a 	sub.w	r2, r1, sl
 801f732:	b293      	uxth	r3, r2
        knob_area.x1 = knob_area.x2 - knob_size;
 801f734:	1a18      	subs	r0, r3, r0
        knob_area.x2 = obj->coords.x2 - bg_right;
 801f736:	f8ad 3008 	strh.w	r3, [sp, #8]
        knob_area.x1 = knob_area.x2 - knob_size;
 801f73a:	f8ad 0004 	strh.w	r0, [sp, #4]
 801f73e:	e00a      	b.n	801f756 <lv_switch_event+0x1d6>
    if((base_dir != LV_BASE_DIR_RTL && !chk) || (base_dir == LV_BASE_DIR_RTL && chk)) {
 801f740:	f1b9 0f00 	cmp.w	r9, #0
 801f744:	d0f2      	beq.n	801f72c <lv_switch_event+0x1ac>
        knob_area.x1 = obj->coords.x1 + bg_left;
 801f746:	8aa3      	ldrh	r3, [r4, #20]
 801f748:	442b      	add	r3, r5
 801f74a:	b29d      	uxth	r5, r3
 801f74c:	f8ad 5004 	strh.w	r5, [sp, #4]
        knob_area.x2 = knob_area.x1 + knob_size;
 801f750:	4405      	add	r5, r0
 801f752:	f8ad 5008 	strh.w	r5, [sp, #8]
    }

    knob_area.y1 = obj->coords.y1 + bg_top;
 801f756:	8ae0      	ldrh	r0, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f758:	f241 0212 	movw	r2, #4114	; 0x1012
 801f75c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f760:	4406      	add	r6, r0
    knob_area.y2 = obj->coords.y2 - bg_bottom;
 801f762:	8b60      	ldrh	r0, [r4, #26]
 801f764:	eba0 0808 	sub.w	r8, r0, r8
 801f768:	4620      	mov	r0, r4
    knob_area.y1 = obj->coords.y1 + bg_top;
 801f76a:	f8ad 6006 	strh.w	r6, [sp, #6]
    knob_area.y2 = obj->coords.y2 - bg_bottom;
 801f76e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f772:	f7e7 fea9 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f776:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f77a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f77c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f780:	4620      	mov	r0, r4
 801f782:	f7e7 fea1 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f786:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f78a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f78c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f790:	4620      	mov	r0, r4
 801f792:	f7e7 fe99 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f796:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f79a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f79c:	f241 0211 	movw	r2, #4113	; 0x1011
 801f7a0:	4620      	mov	r0, r4
 801f7a2:	f7e7 fe91 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t knob_right = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
    lv_coord_t knob_top = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
    lv_coord_t knob_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area.x1 -= knob_left;
 801f7a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801f7aa:	eba2 0308 	sub.w	r3, r2, r8
    knob_area.x2 += knob_right;
    knob_area.y1 -= knob_top;
 801f7ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    knob_area.x1 -= knob_left;
 801f7b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    knob_area.x2 += knob_right;
 801f7b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f7ba:	441d      	add	r5, r3
    knob_area.y1 -= knob_top;
 801f7bc:	1b93      	subs	r3, r2, r6
 801f7be:	f8ad 3006 	strh.w	r3, [sp, #6]
    knob_area.y2 += knob_bottom;
 801f7c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    knob_area.x2 += knob_right;
 801f7c6:	f8ad 5008 	strh.w	r5, [sp, #8]
    knob_area.y2 += knob_bottom;
 801f7ca:	4418      	add	r0, r3
 801f7cc:	f8ad 000a 	strh.w	r0, [sp, #10]

    lv_draw_rect_dsc_t knob_rect_dsc;
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801f7d0:	a803      	add	r0, sp, #12
 801f7d2:	f7ed fa09 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801f7d6:	aa03      	add	r2, sp, #12
 801f7d8:	4620      	mov	r0, r4
 801f7da:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801f7de:	f7e4 ff6f 	bl	80046c0 <lv_obj_init_draw_rect_dsc>

    lv_draw_rect(&knob_area, clip_area, &knob_rect_dsc);
 801f7e2:	aa03      	add	r2, sp, #12
 801f7e4:	4639      	mov	r1, r7
 801f7e6:	a801      	add	r0, sp, #4
 801f7e8:	f7ed fa20 	bl	800cc2c <lv_draw_rect>

}
 801f7ec:	e723      	b.n	801f636 <lv_switch_event+0xb6>
 801f7ee:	bf00      	nop
 801f7f0:	08029f08 	.word	0x08029f08

0801f7f4 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f7f4:	f241 0212 	movw	r2, #4114	; 0x1012
{
 801f7f8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f7fa:	f7e7 fe65 	bl	80074c8 <lv_obj_get_style_prop>
}
 801f7fe:	b200      	sxth	r0, r0
 801f800:	bd08      	pop	{r3, pc}

0801f802 <lv_obj_get_style_pad_right>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f802:	f241 0213 	movw	r2, #4115	; 0x1013
{
 801f806:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f808:	f7e7 fe5e 	bl	80074c8 <lv_obj_get_style_prop>
}
 801f80c:	b200      	sxth	r0, r0
 801f80e:	bd08      	pop	{r3, pc}

0801f810 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f810:	f241 0210 	movw	r2, #4112	; 0x1010
{
 801f814:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801f816:	f7e7 fe57 	bl	80074c8 <lv_obj_get_style_prop>
}
 801f81a:	b200      	sxth	r0, r0
 801f81c:	bd08      	pop	{r3, pc}

0801f81e <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 801f81e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f822:	ed2d 8b02 	vpush	{d8}
 801f826:	b08f      	sub	sp, #60	; 0x3c
 801f828:	ee08 3a10 	vmov	s16, r3
 801f82c:	4690      	mov	r8, r2
 801f82e:	4607      	mov	r7, r0
 801f830:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    uint16_t row_start = row_id * table->col_cnt;
    uint16_t cell;
    uint16_t col;
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;

    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801f834:	2600      	movs	r6, #0
{
 801f836:	f9bd 9074 	ldrsh.w	r9, [sp, #116]	; 0x74
 801f83a:	f9bd a078 	ldrsh.w	sl, [sp, #120]	; 0x78
 801f83e:	9309      	str	r3, [sp, #36]	; 0x24
 801f840:	eb09 050a 	add.w	r5, r9, sl
    uint16_t row_start = row_id * table->col_cnt;
 801f844:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 801f846:	fb13 f101 	smulbb	r1, r3, r1
 801f84a:	b2ab      	uxth	r3, r5
 801f84c:	9308      	str	r3, [sp, #32]
 801f84e:	fa1f fb81 	uxth.w	fp, r1
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801f852:	8913      	ldrh	r3, [r2, #8]
                h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
                                    h_max);
            }
            /*Without text crop calculate the height of the text in the cell*/
            else {
                txt_w -= cell_left + cell_right;
 801f854:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801f858:	465c      	mov	r4, fp
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801f85a:	fa13 f585 	uxtah	r5, r3, r5
                txt_w -= cell_left + cell_right;
 801f85e:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 801f862:	b22d      	sxth	r5, r5
                txt_w -= cell_left + cell_right;
 801f864:	18d3      	adds	r3, r2, r3
 801f866:	930b      	str	r3, [sp, #44]	; 0x2c
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801f868:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801f86a:	eb0b 0300 	add.w	r3, fp, r0
 801f86e:	429c      	cmp	r4, r3
 801f870:	db05      	blt.n	801f87e <get_row_height+0x60>
            }
        }
    }

    return h_max;
}
 801f872:	4628      	mov	r0, r5
 801f874:	b00f      	add	sp, #60	; 0x3c
 801f876:	ecbd 8b02 	vpop	{d8}
 801f87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(table->cell_data[cell] != NULL) {
 801f87e:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
 801f882:	f85e 1024 	ldr.w	r1, [lr, r4, lsl #2]
 801f886:	b1e9      	cbz	r1, 801f8c4 <get_row_height+0xa6>
            txt_w              = table->col_w[col];
 801f888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f88a:	3801      	subs	r0, #1
 801f88c:	2200      	movs	r2, #0
            txt_w              = table->col_w[col];
 801f88e:	9306      	str	r3, [sp, #24]
 801f890:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f894:	900a      	str	r0, [sp, #40]	; 0x28
            txt_w              = table->col_w[col];
 801f896:	9305      	str	r3, [sp, #20]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f898:	b293      	uxth	r3, r2
 801f89a:	fa16 f082 	uxtah	r0, r6, r2
 801f89e:	469c      	mov	ip, r3
 801f8a0:	9307      	str	r3, [sp, #28]
 801f8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8a4:	4298      	cmp	r0, r3
 801f8a6:	db12      	blt.n	801f8ce <get_row_height+0xb0>
            if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 801f8a8:	780a      	ldrb	r2, [r1, #0]
 801f8aa:	f012 0202 	ands.w	r2, r2, #2
 801f8ae:	d023      	beq.n	801f8f8 <get_row_height+0xda>
                h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 801f8b0:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 801f8b4:	eb03 0209 	add.w	r2, r3, r9
 801f8b8:	4452      	add	r2, sl
 801f8ba:	42aa      	cmp	r2, r5
 801f8bc:	dd02      	ble.n	801f8c4 <get_row_height+0xa6>
 801f8be:	9a08      	ldr	r2, [sp, #32]
 801f8c0:	18d5      	adds	r5, r2, r3
 801f8c2:	b22d      	sxth	r5, r5
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 801f8c4:	3401      	adds	r4, #1
 801f8c6:	3601      	adds	r6, #1
 801f8c8:	b2a4      	uxth	r4, r4
 801f8ca:	b2b6      	uxth	r6, r6
 801f8cc:	e7cc      	b.n	801f868 <get_row_height+0x4a>
                if(table->cell_data[cell + col_merge] != NULL) {
 801f8ce:	44a4      	add	ip, r4
 801f8d0:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 801f8d4:	f1bc 0f00 	cmp.w	ip, #0
 801f8d8:	d0e6      	beq.n	801f8a8 <get_row_height+0x8a>
                    if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT)
 801f8da:	f89c c000 	ldrb.w	ip, [ip]
 801f8de:	3201      	adds	r2, #1
 801f8e0:	f01c 0f01 	tst.w	ip, #1
 801f8e4:	d0e0      	beq.n	801f8a8 <get_row_height+0x8a>
                        txt_w += table->col_w[col + col_merge + 1];
 801f8e6:	9b06      	ldr	r3, [sp, #24]
 801f8e8:	3001      	adds	r0, #1
 801f8ea:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801f8ee:	9b05      	ldr	r3, [sp, #20]
 801f8f0:	4403      	add	r3, r0
 801f8f2:	b21b      	sxth	r3, r3
 801f8f4:	9305      	str	r3, [sp, #20]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801f8f6:	e7cf      	b.n	801f898 <get_row_height+0x7a>
                txt_w -= cell_left + cell_right;
 801f8f8:	9805      	ldr	r0, [sp, #20]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801f8fa:	3101      	adds	r1, #1
                txt_w -= cell_left + cell_right;
 801f8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801f8fe:	9202      	str	r2, [sp, #8]
 801f900:	4642      	mov	r2, r8
                txt_w -= cell_left + cell_right;
 801f902:	1ac3      	subs	r3, r0, r3
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 801f904:	a80d      	add	r0, sp, #52	; 0x34
 801f906:	b21b      	sxth	r3, r3
 801f908:	9301      	str	r3, [sp, #4]
 801f90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f90c:	9300      	str	r3, [sp, #0]
 801f90e:	ee18 3a10 	vmov	r3, s16
 801f912:	f7f9 ff10 	bl	8019736 <lv_txt_get_size>
                h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801f916:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f91a:	444b      	add	r3, r9
 801f91c:	4453      	add	r3, sl
 801f91e:	429d      	cmp	r5, r3
 801f920:	bfb8      	it	lt
 801f922:	461d      	movlt	r5, r3
                cell += col_merge;
 801f924:	9b07      	ldr	r3, [sp, #28]
 801f926:	441c      	add	r4, r3
                col += col_merge;
 801f928:	441e      	add	r6, r3
                h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 801f92a:	b22d      	sxth	r5, r5
                cell += col_merge;
 801f92c:	b2a4      	uxth	r4, r4
                col += col_merge;
 801f92e:	b2b6      	uxth	r6, r6
 801f930:	e7c8      	b.n	801f8c4 <get_row_height+0xa6>

0801f932 <lv_table_destructor>:
{
 801f932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801f934:	2500      	movs	r5, #0
{
 801f936:	460c      	mov	r4, r1
            table->cell_data[i] = NULL;
 801f938:	462f      	mov	r7, r5
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801f93a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801f93c:	b2ae      	uxth	r6, r5
 801f93e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801f940:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801f942:	4353      	muls	r3, r2
 801f944:	429e      	cmp	r6, r3
 801f946:	db08      	blt.n	801f95a <lv_table_destructor+0x28>
    if(table->cell_data) lv_mem_free(table->cell_data);
 801f948:	b108      	cbz	r0, 801f94e <lv_table_destructor+0x1c>
 801f94a:	f7f7 ffe3 	bl	8017914 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 801f94e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f950:	b168      	cbz	r0, 801f96e <lv_table_destructor+0x3c>
}
 801f952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if(table->row_h) lv_mem_free(table->row_h);
 801f956:	f7f7 bfdd 	b.w	8017914 <lv_mem_free>
        if(table->cell_data[i]) {
 801f95a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 801f95e:	b120      	cbz	r0, 801f96a <lv_table_destructor+0x38>
            lv_mem_free(table->cell_data[i]);
 801f960:	f7f7 ffd8 	bl	8017914 <lv_mem_free>
            table->cell_data[i] = NULL;
 801f964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f966:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 801f96a:	3501      	adds	r5, #1
 801f96c:	e7e5      	b.n	801f93a <lv_table_destructor+0x8>
}
 801f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f970 <lv_table_constructor>:
    table->col_cnt = 1;
 801f970:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801f974:	2002      	movs	r0, #2
{
 801f976:	b510      	push	{r4, lr}
 801f978:	460c      	mov	r4, r1
    table->col_cnt = 1;
 801f97a:	624b      	str	r3, [r1, #36]	; 0x24
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 801f97c:	f7f8 f94c 	bl	8017c18 <lv_mem_alloc>
 801f980:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801f982:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 801f984:	0040      	lsls	r0, r0, #1
 801f986:	f7f8 f947 	bl	8017c18 <lv_mem_alloc>
    table->col_w[0] = LV_DPI_DEF;
 801f98a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801f98c:	2382      	movs	r3, #130	; 0x82
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 801f98e:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 801f990:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 801f992:	8003      	strh	r3, [r0, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801f994:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801f996:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801f998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801f99a:	4359      	muls	r1, r3
 801f99c:	0089      	lsls	r1, r1, #2
 801f99e:	f7f8 f951 	bl	8017c44 <lv_mem_realloc>
    table->cell_data[0] = NULL;
 801f9a2:	2300      	movs	r3, #0
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 801f9a4:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 801f9a6:	6003      	str	r3, [r0, #0]
}
 801f9a8:	bd10      	pop	{r4, pc}

0801f9aa <refr_size>:
{
 801f9aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ae:	4604      	mov	r4, r0
 801f9b0:	b08b      	sub	sp, #44	; 0x2c
 801f9b2:	460d      	mov	r5, r1
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801f9b4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f9b8:	f7ff ff1c 	bl	801f7f4 <lv_obj_get_style_pad_left>
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801f9bc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801f9c0:	9006      	str	r0, [sp, #24]
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801f9c2:	4620      	mov	r0, r4
 801f9c4:	f7ff ff1d 	bl	801f802 <lv_obj_get_style_pad_right>
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801f9c8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801f9cc:	9007      	str	r0, [sp, #28]
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801f9ce:	4620      	mov	r0, r4
 801f9d0:	f7ff ff1e 	bl	801f810 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801f9d4:	f241 0211 	movw	r2, #4113	; 0x1011
 801f9d8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f9dc:	9008      	str	r0, [sp, #32]
 801f9de:	4620      	mov	r0, r4
 801f9e0:	f7e7 fd72 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801f9e4:	f241 425a 	movw	r2, #5210	; 0x145a
 801f9e8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801f9ec:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801f9f0:	4620      	mov	r0, r4
 801f9f2:	f7e7 fd69 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f9f6:	f241 425b 	movw	r2, #5211	; 0x145b
 801f9fa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    return (lv_coord_t)v.num;
 801f9fe:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801fa02:	4620      	mov	r0, r4
 801fa04:	f7e7 fd60 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801fa08:	f241 4259 	movw	r2, #5209	; 0x1459
    return (lv_coord_t)v.num;
 801fa0c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801fa0e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fa12:	4620      	mov	r0, r4
    return (lv_coord_t)v.num;
 801fa14:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801fa16:	f7e7 fd57 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801fa1a:	f241 0205 	movw	r2, #4101	; 0x1005
 801fa1e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801fa22:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801fa24:	4620      	mov	r0, r4
 801fa26:	f7e7 fd4f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801fa2a:	f241 0206 	movw	r2, #4102	; 0x1006
    return (lv_coord_t)v.num;
 801fa2e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801fa30:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fa34:	4620      	mov	r0, r4
 801fa36:	f7e7 fd47 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801fa3a:	b206      	sxth	r6, r0
    for(i = strat_row; i < table->row_cnt; i++) {
 801fa3c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 801fa3e:	42aa      	cmp	r2, r5
 801fa40:	d805      	bhi.n	801fa4e <refr_size+0xa4>
    lv_obj_refresh_self_size(obj) ;
 801fa42:	4620      	mov	r0, r4
}
 801fa44:	b00b      	add	sp, #44	; 0x2c
 801fa46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    lv_obj_refresh_self_size(obj) ;
 801fa4a:	f7e5 bb50 	b.w	80050ee <lv_obj_refresh_self_size>
        table->row_h[i] = get_row_height(obj, i, font, letter_space, line_space,
 801fa4e:	9b08      	ldr	r3, [sp, #32]
 801fa50:	b2a9      	uxth	r1, r5
 801fa52:	4642      	mov	r2, r8
 801fa54:	4620      	mov	r0, r4
 801fa56:	9303      	str	r3, [sp, #12]
 801fa58:	9b07      	ldr	r3, [sp, #28]
 801fa5a:	f8cd a010 	str.w	sl, [sp, #16]
 801fa5e:	9302      	str	r3, [sp, #8]
 801fa60:	9b06      	ldr	r3, [sp, #24]
 801fa62:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
 801fa66:	9301      	str	r3, [sp, #4]
 801fa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa6a:	9300      	str	r3, [sp, #0]
 801fa6c:	464b      	mov	r3, r9
 801fa6e:	f7ff fed6 	bl	801f81e <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, table->row_h[i], maxh);
 801fa72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        table->row_h[i] = get_row_height(obj, i, font, letter_space, line_space,
 801fa74:	f82b 0015 	strh.w	r0, [fp, r5, lsl #1]
        table->row_h[i] = LV_CLAMP(minh, table->row_h[i], maxh);
 801fa78:	f931 2015 	ldrsh.w	r2, [r1, r5, lsl #1]
 801fa7c:	42b2      	cmp	r2, r6
 801fa7e:	bfa8      	it	ge
 801fa80:	4632      	movge	r2, r6
 801fa82:	42ba      	cmp	r2, r7
 801fa84:	bfb8      	it	lt
 801fa86:	463a      	movlt	r2, r7
 801fa88:	f821 2015 	strh.w	r2, [r1, r5, lsl #1]
    for(i = strat_row; i < table->row_cnt; i++) {
 801fa8c:	3501      	adds	r5, #1
 801fa8e:	e7d5      	b.n	801fa3c <refr_size+0x92>

0801fa90 <draw_main>:
{
 801fa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa94:	4605      	mov	r5, r0
 801fa96:	b0db      	sub	sp, #364	; 0x16c
    lv_obj_t * obj = lv_event_get_target(e);
 801fa98:	f7e2 fae6 	bl	8002068 <lv_event_get_target>
 801fa9c:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801fa9e:	4628      	mov	r0, r5
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801faa0:	ad16      	add	r5, sp, #88	; 0x58
    const lv_area_t * clip_area = lv_event_get_param(e);
 801faa2:	f7e2 fae5 	bl	8002070 <lv_event_get_param>
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801faa6:	2100      	movs	r1, #0
    const lv_area_t * clip_area = lv_event_get_param(e);
 801faa8:	4680      	mov	r8, r0
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801faaa:	4620      	mov	r0, r4
 801faac:	f7ff feb0 	bl	801f810 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801fab0:	f241 0211 	movw	r2, #4113	; 0x1011
 801fab4:	2100      	movs	r1, #0
 801fab6:	9007      	str	r0, [sp, #28]
 801fab8:	4620      	mov	r0, r4
    for(row = 0; row < table->row_cnt; row++) {
 801faba:	f04f 0900 	mov.w	r9, #0
 801fabe:	f7e7 fd03 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801fac2:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 801fac4:	b203      	sxth	r3, r0
 801fac6:	4620      	mov	r0, r4
    uint16_t cell = 0;
 801fac8:	46ca      	mov	sl, r9
 801faca:	9313      	str	r3, [sp, #76]	; 0x4c
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801facc:	f7ff fe92 	bl	801f7f4 <lv_obj_get_style_pad_left>
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801fad0:	2100      	movs	r1, #0
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801fad2:	9008      	str	r0, [sp, #32]
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801fad4:	4620      	mov	r0, r4
 801fad6:	f7ff fe94 	bl	801f802 <lv_obj_get_style_pad_right>
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801fada:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 801fade:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801fae0:	4620      	mov	r0, r4
 801fae2:	f7ff fe87 	bl	801f7f4 <lv_obj_get_style_pad_left>
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801fae6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_left = lv_obj_get_style_pad_left(obj, LV_PART_ITEMS);
 801faea:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801faec:	4620      	mov	r0, r4
 801faee:	f7ff fe88 	bl	801f802 <lv_obj_get_style_pad_right>
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801faf2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
    lv_coord_t cell_right = lv_obj_get_style_pad_right(obj, LV_PART_ITEMS);
 801faf6:	9010      	str	r0, [sp, #64]	; 0x40
    lv_coord_t cell_top = lv_obj_get_style_pad_top(obj, LV_PART_ITEMS);
 801faf8:	4620      	mov	r0, r4
 801fafa:	f7ff fe89 	bl	801f810 <lv_obj_get_style_pad_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801fafe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fb02:	f241 0211 	movw	r2, #4113	; 0x1011
 801fb06:	9011      	str	r0, [sp, #68]	; 0x44
 801fb08:	4620      	mov	r0, r4
 801fb0a:	f7e7 fcdd 	bl	80074c8 <lv_obj_get_style_prop>
    lv_state_t state_ori = obj->state;
 801fb0e:	8c23      	ldrh	r3, [r4, #32]
    obj->state = LV_STATE_DEFAULT;
 801fb10:	6a22      	ldr	r2, [r4, #32]
    lv_state_t state_ori = obj->state;
 801fb12:	930a      	str	r3, [sp, #40]	; 0x28
    obj->state = LV_STATE_DEFAULT;
 801fb14:	4bb1      	ldr	r3, [pc, #708]	; (801fddc <draw_main+0x34c>)
 801fb16:	9012      	str	r0, [sp, #72]	; 0x48
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801fb18:	a82e      	add	r0, sp, #184	; 0xb8
    obj->state = LV_STATE_DEFAULT;
 801fb1a:	4013      	ands	r3, r2
 801fb1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801fb20:	6223      	str	r3, [r4, #32]
    lv_draw_rect_dsc_init(&rect_dsc_def);
 801fb22:	f7ed f861 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 801fb26:	aa2e      	add	r2, sp, #184	; 0xb8
 801fb28:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fb2c:	4620      	mov	r0, r4
 801fb2e:	f7e4 fdc7 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 801fb32:	a81e      	add	r0, sp, #120	; 0x78
 801fb34:	f7ea fda4 	bl	800a680 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 801fb38:	aa1e      	add	r2, sp, #120	; 0x78
 801fb3a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fb3e:	4620      	mov	r0, r4
 801fb40:	f7e4 fefa 	bl	8004938 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 801fb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801fb46:	4620      	mov	r0, r4
 801fb48:	8ae6      	ldrh	r6, [r4, #22]
    obj->state = state_ori;
 801fb4a:	8423      	strh	r3, [r4, #32]
    obj->skip_trans = 0;
 801fb4c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801fb50:	f36f 0382 	bfc	r3, #2, #1
 801fb54:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801fb58:	f7e6 fa7a 	bl	8006050 <lv_obj_get_scroll_y>
 801fb5c:	9b07      	ldr	r3, [sp, #28]
 801fb5e:	3b01      	subs	r3, #1
 801fb60:	441e      	add	r6, r3
 801fb62:	1a36      	subs	r6, r6, r0
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801fb64:	4620      	mov	r0, r4
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) ;
 801fb66:	80ee      	strh	r6, [r5, #6]
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 801fb68:	f7e6 fa60 	bl	800602c <lv_obj_get_scroll_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801fb6c:	f241 426a 	movw	r2, #5226	; 0x146a
 801fb70:	4606      	mov	r6, r0
 801fb72:	2100      	movs	r1, #0
 801fb74:	4620      	mov	r0, r4
 801fb76:	f7e7 fca7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_obj_draw_dsc_init(&dsc, clip_area);
 801fb7a:	4641      	mov	r1, r8
    return (lv_base_dir_t)v.num;
 801fb7c:	b2c3      	uxtb	r3, r0
 801fb7e:	a848      	add	r0, sp, #288	; 0x120
 801fb80:	9305      	str	r3, [sp, #20]
 801fb82:	f7e5 f881 	bl	8004c88 <lv_obj_draw_dsc_init>
    dsc.part = LV_PART_ITEMS;
 801fb86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801fb8a:	9355      	str	r3, [sp, #340]	; 0x154
    dsc.rect_dsc = &rect_dsc_act;
 801fb8c:	ab3b      	add	r3, sp, #236	; 0xec
 801fb8e:	934a      	str	r3, [sp, #296]	; 0x128
    dsc.label_dsc = &label_dsc_act;
 801fb90:	ab26      	add	r3, sp, #152	; 0x98
 801fb92:	934b      	str	r3, [sp, #300]	; 0x12c
    for(row = 0; row < table->row_cnt; row++) {
 801fb94:	b2b3      	uxth	r3, r6
 801fb96:	930c      	str	r3, [sp, #48]	; 0x30
 801fb98:	fa1f f389 	uxth.w	r3, r9
 801fb9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fba0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801fba2:	4293      	cmp	r3, r2
 801fba4:	d802      	bhi.n	801fbac <draw_main+0x11c>
}
 801fba6:	b05b      	add	sp, #364	; 0x16c
 801fba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_coord_t h_row = table->row_h[row];
 801fbac:	fa1f f389 	uxth.w	r3, r9
 801fbb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        cell_area.y1 = cell_area.y2 + 1;
 801fbb2:	88e9      	ldrh	r1, [r5, #6]
        lv_coord_t h_row = table->row_h[row];
 801fbb4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 801fbb8:	1c4b      	adds	r3, r1, #1
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801fbba:	4411      	add	r1, r2
        cell_area.y1 = cell_area.y2 + 1;
 801fbbc:	b21b      	sxth	r3, r3
        cell_area.y2 = cell_area.y1 + h_row - 1;
 801fbbe:	80e9      	strh	r1, [r5, #6]
        if(cell_area.y1 > clip_area->y2) return;
 801fbc0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
        cell_area.y1 = cell_area.y2 + 1;
 801fbc4:	806b      	strh	r3, [r5, #2]
        if(cell_area.y1 > clip_area->y2) return;
 801fbc6:	4299      	cmp	r1, r3
 801fbc8:	dbed      	blt.n	801fba6 <draw_main+0x116>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x;
 801fbca:	9b05      	ldr	r3, [sp, #20]
 801fbcc:	2b01      	cmp	r3, #1
 801fbce:	d112      	bne.n	801fbf6 <draw_main+0x166>
 801fbd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fbd2:	8b23      	ldrh	r3, [r4, #24]
 801fbd4:	1a5b      	subs	r3, r3, r1
 801fbd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fbd8:	3b01      	subs	r3, #1
 801fbda:	1a5b      	subs	r3, r3, r1
 801fbdc:	802b      	strh	r3, [r5, #0]
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801fbde:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801fbe2:	2700      	movs	r7, #0
 801fbe4:	f3c2 034f 	ubfx	r3, r2, #1, #16
 801fbe8:	930e      	str	r3, [sp, #56]	; 0x38
        for(col = 0; col < table->col_cnt; col++) {
 801fbea:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801fbec:	42b9      	cmp	r1, r7
 801fbee:	d80a      	bhi.n	801fc06 <draw_main+0x176>
    for(row = 0; row < table->row_cnt; row++) {
 801fbf0:	f109 0901 	add.w	r9, r9, #1
 801fbf4:	e7d0      	b.n	801fb98 <draw_main+0x108>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x;
 801fbf6:	9b08      	ldr	r3, [sp, #32]
 801fbf8:	8aa1      	ldrh	r1, [r4, #20]
 801fbfa:	3b01      	subs	r3, #1
 801fbfc:	440b      	add	r3, r1
 801fbfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fc00:	1a5b      	subs	r3, r3, r1
 801fc02:	80ab      	strh	r3, [r5, #4]
 801fc04:	e7eb      	b.n	801fbde <draw_main+0x14e>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 801fc06:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 801fc0a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801fc0e:	f85b 602a 	ldr.w	r6, [fp, sl, lsl #2]
 801fc12:	9306      	str	r3, [sp, #24]
 801fc14:	b106      	cbz	r6, 801fc18 <draw_main+0x188>
 801fc16:	7836      	ldrb	r6, [r6, #0]
            if(rtl) {
 801fc18:	9b05      	ldr	r3, [sp, #20]
 801fc1a:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 801fc1e:	2b01      	cmp	r3, #1
 801fc20:	f040 80b8 	bne.w	801fd94 <draw_main+0x304>
                cell_area.x2 = cell_area.x1 - 1;
 801fc24:	882b      	ldrh	r3, [r5, #0]
 801fc26:	1e5a      	subs	r2, r3, #1
 801fc28:	80aa      	strh	r2, [r5, #4]
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 801fc2a:	f83e 2017 	ldrh.w	r2, [lr, r7, lsl #1]
 801fc2e:	1a9b      	subs	r3, r3, r2
 801fc30:	802b      	strh	r3, [r5, #0]
            lv_table_cell_ctrl_t ctrl = 0;
 801fc32:	2200      	movs	r2, #0
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801fc34:	3901      	subs	r1, #1
 801fc36:	fa17 f082 	uxtah	r0, r7, r2
 801fc3a:	b293      	uxth	r3, r2
 801fc3c:	4288      	cmp	r0, r1
 801fc3e:	469c      	mov	ip, r3
 801fc40:	f2c0 80b0 	blt.w	801fda4 <draw_main+0x314>
            if(cell_area.y2 < clip_area->y1) {
 801fc44:	3301      	adds	r3, #1
 801fc46:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801fc4a:	b29a      	uxth	r2, r3
 801fc4c:	fa1a f383 	uxtah	r3, sl, r3
 801fc50:	fa1f fa83 	uxth.w	sl, r3
 801fc54:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801fc58:	920d      	str	r2, [sp, #52]	; 0x34
 801fc5a:	428b      	cmp	r3, r1
 801fc5c:	f300 8139 	bgt.w	801fed2 <draw_main+0x442>
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 801fc60:	f89d 00d7 	ldrb.w	r0, [sp, #215]	; 0xd7
    dest->x1 = src->x1;
 801fc64:	f9b5 2000 	ldrsh.w	r2, [r5]
    dest->y1 = src->y1;
 801fc68:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801fc6c:	f3c0 0c44 	ubfx	ip, r0, #1, #5
    dest->x2 = src->x2;
 801fc70:	f9b5 e004 	ldrsh.w	lr, [r5, #4]
 801fc74:	0700      	lsls	r0, r0, #28
    dest->x1 = src->x1;
 801fc76:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    dest->y1 = src->y1;
 801fc7a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    dest->x2 = src->x2;
 801fc7e:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
    dest->y2 = src->y2;
 801fc82:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
 801fc86:	d50d      	bpl.n	801fca4 <draw_main+0x214>
 801fc88:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 801fc8c:	9808      	ldr	r0, [sp, #32]
 801fc8e:	4458      	add	r0, fp
 801fc90:	4282      	cmp	r2, r0
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 801fc92:	bfc1      	itttt	gt
 801fc94:	f9bd 00d4 	ldrshgt.w	r0, [sp, #212]	; 0xd4
 801fc98:	eb00 70d0 	addgt.w	r0, r0, r0, lsr #31
 801fc9c:	eba2 0060 	subgt.w	r0, r2, r0, asr #1
 801fca0:	f8ad 0068 	strhgt.w	r0, [sp, #104]	; 0x68
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 801fca4:	f01c 0f02 	tst.w	ip, #2
 801fca8:	d00d      	beq.n	801fcc6 <draw_main+0x236>
 801fcaa:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801fcae:	9807      	ldr	r0, [sp, #28]
 801fcb0:	4402      	add	r2, r0
 801fcb2:	4293      	cmp	r3, r2
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 801fcb4:	bfc1      	itttt	gt
 801fcb6:	f9bd 20d4 	ldrshgt.w	r2, [sp, #212]	; 0xd4
 801fcba:	eb02 72d2 	addgt.w	r2, r2, r2, lsr #31
 801fcbe:	eba3 0362 	subgt.w	r3, r3, r2, asr #1
 801fcc2:	f8ad 306a 	strhgt.w	r3, [sp, #106]	; 0x6a
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 801fcc6:	f01c 0f08 	tst.w	ip, #8
 801fcca:	d011      	beq.n	801fcf0 <draw_main+0x260>
 801fccc:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801fcd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fcd2:	1a9b      	subs	r3, r3, r2
 801fcd4:	3b01      	subs	r3, #1
 801fcd6:	459e      	cmp	lr, r3
 801fcd8:	da0a      	bge.n	801fcf0 <draw_main+0x260>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801fcda:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801fcde:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801fce2:	f003 0301 	and.w	r3, r3, #1
 801fce6:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801fcea:	449e      	add	lr, r3
 801fcec:	f8ad e06c 	strh.w	lr, [sp, #108]	; 0x6c
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801fcf0:	f01c 0f01 	tst.w	ip, #1
 801fcf4:	d011      	beq.n	801fd1a <draw_main+0x28a>
                    cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 801fcf6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801fcfa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fcfc:	1a9b      	subs	r3, r3, r2
 801fcfe:	3b01      	subs	r3, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 801fd00:	4299      	cmp	r1, r3
 801fd02:	da0a      	bge.n	801fd1a <draw_main+0x28a>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 801fd04:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801fd08:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801fd0c:	f003 0301 	and.w	r3, r3, #1
 801fd10:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801fd14:	4419      	add	r1, r3
 801fd16:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
            if(row == table->row_act && col == table->col_act) {
 801fd1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801fd1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fd1e:	4293      	cmp	r3, r2
 801fd20:	d160      	bne.n	801fde4 <draw_main+0x354>
 801fd22:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fd24:	42bb      	cmp	r3, r7
 801fd26:	d15d      	bne.n	801fde4 <draw_main+0x354>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 801fd28:	8c22      	ldrh	r2, [r4, #32]
 801fd2a:	f002 0360 	and.w	r3, r2, #96	; 0x60
            lv_state_t cell_state = LV_STATE_DEFAULT;
 801fd2e:	2b20      	cmp	r3, #32
 801fd30:	bf18      	it	ne
 801fd32:	2300      	movne	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 801fd34:	0790      	lsls	r0, r2, #30
 801fd36:	bf48      	it	mi
 801fd38:	f043 0302 	orrmi.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 801fd3c:	0751      	lsls	r1, r2, #29
 801fd3e:	bf44      	itt	mi
 801fd40:	f043 0304 	orrmi.w	r3, r3, #4
 801fd44:	b29b      	uxthmi	r3, r3
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 801fd46:	0712      	lsls	r2, r2, #28
 801fd48:	d54a      	bpl.n	801fde0 <draw_main+0x350>
 801fd4a:	f043 0308 	orr.w	r3, r3, #8
 801fd4e:	b29b      	uxth	r3, r3
                obj->state = cell_state;
 801fd50:	8423      	strh	r3, [r4, #32]
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801fd52:	a83b      	add	r0, sp, #236	; 0xec
                obj->skip_trans = 1;
 801fd54:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801fd58:	f043 0304 	orr.w	r3, r3, #4
 801fd5c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 801fd60:	f7ec ff42 	bl	800cbe8 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 801fd64:	a826      	add	r0, sp, #152	; 0x98
 801fd66:	f7ea fc8b 	bl	800a680 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 801fd6a:	aa3b      	add	r2, sp, #236	; 0xec
 801fd6c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fd70:	4620      	mov	r0, r4
 801fd72:	f7e4 fca5 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 801fd76:	aa26      	add	r2, sp, #152	; 0x98
 801fd78:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801fd7c:	4620      	mov	r0, r4
 801fd7e:	f7e4 fddb 	bl	8004938 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 801fd82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd84:	8423      	strh	r3, [r4, #32]
                obj->skip_trans = 0;
 801fd86:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801fd8a:	f36f 0382 	bfc	r3, #2, #1
 801fd8e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801fd92:	e031      	b.n	801fdf8 <draw_main+0x368>
                cell_area.x1 = cell_area.x2 + 1;
 801fd94:	88ab      	ldrh	r3, [r5, #4]
 801fd96:	1c5a      	adds	r2, r3, #1
 801fd98:	802a      	strh	r2, [r5, #0]
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 801fd9a:	f83e 2017 	ldrh.w	r2, [lr, r7, lsl #1]
 801fd9e:	4413      	add	r3, r2
 801fda0:	80ab      	strh	r3, [r5, #4]
 801fda2:	e746      	b.n	801fc32 <draw_main+0x1a2>
                if(table->cell_data[cell + col_merge]) {
 801fda4:	44d4      	add	ip, sl
 801fda6:	f85b c02c 	ldr.w	ip, [fp, ip, lsl #2]
 801fdaa:	f1bc 0f00 	cmp.w	ip, #0
 801fdae:	f43f af49 	beq.w	801fc44 <draw_main+0x1b4>
                    if(next_cell_data) ctrl = next_cell_data[0];
 801fdb2:	f89c 6000 	ldrb.w	r6, [ip]
                    if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT)
 801fdb6:	f016 0f01 	tst.w	r6, #1
 801fdba:	f43f af43 	beq.w	801fc44 <draw_main+0x1b4>
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801fdbe:	3001      	adds	r0, #1
 801fdc0:	3201      	adds	r2, #1
 801fdc2:	f83e 3010 	ldrh.w	r3, [lr, r0, lsl #1]
 801fdc6:	9805      	ldr	r0, [sp, #20]
 801fdc8:	2801      	cmp	r0, #1
 801fdca:	bf0b      	itete	eq
 801fdcc:	8828      	ldrheq	r0, [r5, #0]
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801fdce:	88a8      	ldrhne	r0, [r5, #4]
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801fdd0:	1ac3      	subeq	r3, r0, r3
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801fdd2:	181b      	addne	r3, r3, r0
                        if(rtl) cell_area.x1 -= table->col_w[col + col_merge + 1];
 801fdd4:	bf0c      	ite	eq
 801fdd6:	802b      	strheq	r3, [r5, #0]
                        else cell_area.x2 += table->col_w[col + col_merge + 1];
 801fdd8:	80ab      	strhne	r3, [r5, #4]
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 801fdda:	e72c      	b.n	801fc36 <draw_main+0x1a6>
 801fddc:	fffb0000 	.word	0xfffb0000
            if(cell_state == LV_STATE_DEFAULT) {
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d1b5      	bne.n	801fd50 <draw_main+0x2c0>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 801fde4:	2234      	movs	r2, #52	; 0x34
 801fde6:	a92e      	add	r1, sp, #184	; 0xb8
 801fde8:	a83b      	add	r0, sp, #236	; 0xec
 801fdea:	f7f7 fdcd 	bl	8017988 <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 801fdee:	2220      	movs	r2, #32
 801fdf0:	a91e      	add	r1, sp, #120	; 0x78
 801fdf2:	a826      	add	r0, sp, #152	; 0x98
 801fdf4:	f7f7 fdc8 	bl	8017988 <lv_memcpy>
            dsc.id = row * table->col_cnt + col;
 801fdf8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801fdfa:	fa1f f389 	uxth.w	r3, r9
            dsc.draw_area = &cell_area_border;
 801fdfe:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801fe02:	211a      	movs	r1, #26
            dsc.id = row * table->col_cnt + col;
 801fe04:	fb02 7303 	mla	r3, r2, r3, r7
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801fe08:	4620      	mov	r0, r4
 801fe0a:	aa48      	add	r2, sp, #288	; 0x120
            dsc.draw_area = &cell_area_border;
 801fe0c:	f8cd b124 	str.w	fp, [sp, #292]	; 0x124
            dsc.id = row * table->col_cnt + col;
 801fe10:	9356      	str	r3, [sp, #344]	; 0x158
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &dsc);
 801fe12:	f7e2 f909 	bl	8002028 <lv_event_send>
            lv_draw_rect(&cell_area_border, clip_area, &rect_dsc_act);
 801fe16:	aa3b      	add	r2, sp, #236	; 0xec
 801fe18:	4641      	mov	r1, r8
 801fe1a:	4658      	mov	r0, fp
 801fe1c:	f7ec ff06 	bl	800cc2c <lv_draw_rect>
            if(table->cell_data[cell]) {
 801fe20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fe22:	9a06      	ldr	r2, [sp, #24]
 801fe24:	5899      	ldr	r1, [r3, r2]
 801fe26:	2900      	cmp	r1, #0
 801fe28:	d04e      	beq.n	801fec8 <draw_main+0x438>
                txt_area.x1 = cell_area.x1 + cell_left;
 801fe2a:	882b      	ldrh	r3, [r5, #0]
                bool crop = ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP ? true : false;
 801fe2c:	f3c6 0b40 	ubfx	fp, r6, #1, #1
                txt_area.x1 = cell_area.x1 + cell_left;
 801fe30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                else txt_flags = LV_TEXT_FLAG_NONE;
 801fe32:	f006 0602 	and.w	r6, r6, #2
                txt_area.x2 = cell_area.x2 - cell_right;
 801fe36:	9810      	ldr	r0, [sp, #64]	; 0x40
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801fe38:	3101      	adds	r1, #1
                txt_area.x1 = cell_area.x1 + cell_left;
 801fe3a:	4413      	add	r3, r2
 801fe3c:	b29a      	uxth	r2, r3
                txt_area.x2 = cell_area.x2 - cell_right;
 801fe3e:	88ab      	ldrh	r3, [r5, #4]
 801fe40:	1a1b      	subs	r3, r3, r0
                txt_area.y1 = cell_area.y1 + cell_top;
 801fe42:	8868      	ldrh	r0, [r5, #2]
                txt_area.x1 = cell_area.x1 + cell_left;
 801fe44:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                txt_area.x2 = cell_area.x2 - cell_right;
 801fe48:	fa1f fc83 	uxth.w	ip, r3
                txt_area.y1 = cell_area.y1 + cell_top;
 801fe4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fe4e:	4418      	add	r0, r3
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801fe50:	9b12      	ldr	r3, [sp, #72]	; 0x48
                txt_area.x2 = cell_area.x2 - cell_right;
 801fe52:	f8ad c064 	strh.w	ip, [sp, #100]	; 0x64
                txt_area.y1 = cell_area.y1 + cell_top;
 801fe56:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801fe5a:	88e8      	ldrh	r0, [r5, #6]
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801fe5c:	9602      	str	r6, [sp, #8]
                txt_area.y2 = cell_area.y2 - cell_bottom;
 801fe5e:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801fe60:	f10c 0301 	add.w	r3, ip, #1
 801fe64:	1a9b      	subs	r3, r3, r2
 801fe66:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 801fe6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fe6c:	a815      	add	r0, sp, #84	; 0x54
 801fe6e:	b21b      	sxth	r3, r3
 801fe70:	9301      	str	r3, [sp, #4]
 801fe72:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	; 0xaa
 801fe76:	9300      	str	r3, [sp, #0]
 801fe78:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801fe7c:	f7f9 fc5b 	bl	8019736 <lv_txt_get_size>
                if(!crop) {
 801fe80:	f1bb 0f00 	cmp.w	fp, #0
 801fe84:	d10f      	bne.n	801fea6 <draw_main+0x416>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801fe86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fe88:	886b      	ldrh	r3, [r5, #2]
 801fe8a:	4413      	add	r3, r2
 801fe8c:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 801fe90:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801fe94:	b29b      	uxth	r3, r3
 801fe96:	f3c2 024f 	ubfx	r2, r2, #1, #16
 801fe9a:	1a99      	subs	r1, r3, r2
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801fe9c:	4413      	add	r3, r2
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 801fe9e:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 801fea2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                label_mask_ok = _lv_area_intersect(&label_mask, clip_area, &cell_area);
 801fea6:	462a      	mov	r2, r5
 801fea8:	4641      	mov	r1, r8
 801feaa:	a81c      	add	r0, sp, #112	; 0x70
 801feac:	f7f7 f8e3 	bl	8017076 <_lv_area_intersect>
                if(label_mask_ok) {
 801feb0:	b150      	cbz	r0, 801fec8 <draw_main+0x438>
                    lv_draw_label(&txt_area, &label_mask, &label_dsc_act, table->cell_data[cell] + 1, NULL);
 801feb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801feb4:	a91c      	add	r1, sp, #112	; 0x70
 801feb6:	9a06      	ldr	r2, [sp, #24]
 801feb8:	a818      	add	r0, sp, #96	; 0x60
 801feba:	589b      	ldr	r3, [r3, r2]
 801febc:	2200      	movs	r2, #0
 801febe:	3301      	adds	r3, #1
 801fec0:	9200      	str	r2, [sp, #0]
 801fec2:	aa26      	add	r2, sp, #152	; 0x98
 801fec4:	f7ea fdb4 	bl	800aa30 <lv_draw_label>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &dsc);
 801fec8:	aa48      	add	r2, sp, #288	; 0x120
 801feca:	211b      	movs	r1, #27
 801fecc:	4620      	mov	r0, r4
 801fece:	f7e2 f8ab 	bl	8002028 <lv_event_send>
        for(col = 0; col < table->col_cnt; col++) {
 801fed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fed4:	443b      	add	r3, r7
 801fed6:	b29f      	uxth	r7, r3
 801fed8:	e687      	b.n	801fbea <draw_main+0x15a>
 801feda:	bf00      	nop

0801fedc <lv_table_event>:
{
 801fedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801fede:	4891      	ldr	r0, [pc, #580]	; (8020124 <lv_table_event+0x248>)
{
 801fee0:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801fee2:	f7e2 f82a 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801fee6:	2801      	cmp	r0, #1
 801fee8:	d10c      	bne.n	801ff04 <lv_table_event+0x28>
    lv_event_code_t code = lv_event_get_code(e);
 801feea:	4630      	mov	r0, r6
 801feec:	f7e2 f8be 	bl	800206c <lv_event_get_code>
 801fef0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801fef2:	4630      	mov	r0, r6
 801fef4:	f7e2 f8b8 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 801fef8:	2d24      	cmp	r5, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 801fefa:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 801fefc:	d104      	bne.n	801ff08 <lv_table_event+0x2c>
        refr_size(obj, 0);
 801fefe:	2100      	movs	r1, #0
 801ff00:	f7ff fd53 	bl	801f9aa <refr_size>
}
 801ff04:	b003      	add	sp, #12
 801ff06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801ff08:	2d26      	cmp	r5, #38	; 0x26
 801ff0a:	d11d      	bne.n	801ff48 <lv_table_event+0x6c>
        lv_point_t * p = lv_event_get_param(e);
 801ff0c:	4630      	mov	r0, r6
 801ff0e:	f7e2 f8af 	bl	8002070 <lv_event_get_param>
        lv_coord_t w = 0;
 801ff12:	2200      	movs	r2, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801ff14:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 801ff16:	4613      	mov	r3, r2
 801ff18:	428b      	cmp	r3, r1
 801ff1a:	d307      	bcc.n	801ff2c <lv_table_event+0x50>
        lv_coord_t h = 0;
 801ff1c:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801ff1e:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
 801ff20:	4619      	mov	r1, r3
 801ff22:	42a9      	cmp	r1, r5
 801ff24:	d309      	bcc.n	801ff3a <lv_table_event+0x5e>
        p->x = w;
 801ff26:	8002      	strh	r2, [r0, #0]
        p->y = h;
 801ff28:	8043      	strh	r3, [r0, #2]
 801ff2a:	e7eb      	b.n	801ff04 <lv_table_event+0x28>
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 801ff2c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801ff2e:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801ff32:	3301      	adds	r3, #1
 801ff34:	442a      	add	r2, r5
 801ff36:	b212      	sxth	r2, r2
 801ff38:	e7ee      	b.n	801ff18 <lv_table_event+0x3c>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 801ff3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ff3c:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 801ff40:	3101      	adds	r1, #1
 801ff42:	4433      	add	r3, r6
 801ff44:	b21b      	sxth	r3, r3
 801ff46:	e7ec      	b.n	801ff22 <lv_table_event+0x46>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING) {
 801ff48:	1e6b      	subs	r3, r5, #1
 801ff4a:	b2db      	uxtb	r3, r3
 801ff4c:	2b01      	cmp	r3, #1
 801ff4e:	d861      	bhi.n	8020014 <lv_table_event+0x138>

static lv_res_t get_pressed_cell(lv_obj_t * obj, uint16_t * row, uint16_t * col)
{
   lv_table_t * table = (lv_table_t *)obj;

    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 801ff50:	f7e2 fb00 	bl	8002554 <lv_indev_get_act>
 801ff54:	f7e2 fb04 	bl	8002560 <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 801ff58:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 801ff5c:	2801      	cmp	r0, #1
 801ff5e:	d14f      	bne.n	8020000 <lv_table_event+0x124>
        if(row) *row = LV_TABLE_CELL_NONE;
        return LV_RES_INV;
    }

    lv_point_t p;
    lv_indev_get_point(lv_indev_get_act(), &p);
 801ff60:	f7e2 faf8 	bl	8002554 <lv_indev_get_act>
 801ff64:	a901      	add	r1, sp, #4
 801ff66:	f7e2 fb56 	bl	8002616 <lv_indev_get_point>

    lv_coord_t tmp;
    if(col) {
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 801ff6a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f7e6 f85c 	bl	800602c <lv_obj_get_scroll_x>
 801ff74:	4430      	add	r0, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ff76:	f241 426a 	movw	r2, #5226	; 0x146a
 801ff7a:	2100      	movs	r1, #0
 801ff7c:	b285      	uxth	r5, r0
 801ff7e:	4620      	mov	r0, r4
 801ff80:	f7e7 faa2 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801ff84:	b2c0      	uxtb	r0, r0

        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801ff86:	2801      	cmp	r0, #1
 801ff88:	d13c      	bne.n	8020004 <lv_table_event+0x128>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 801ff8a:	8b26      	ldrh	r6, [r4, #24]
 801ff8c:	2100      	movs	r1, #0
 801ff8e:	4620      	mov	r0, r4
 801ff90:	1b75      	subs	r5, r6, r5
 801ff92:	f7ff fc36 	bl	801f802 <lv_obj_get_style_pad_right>
        }
        else {
            x -= obj->coords.x1;
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801ff96:	1a28      	subs	r0, r5, r0
        }

        *col = 0;
        tmp = 0;
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801ff98:	2300      	movs	r3, #0
 801ff9a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801ff9c:	b200      	sxth	r0, r0
        tmp = 0;
 801ff9e:	461a      	mov	r2, r3
 801ffa0:	b29f      	uxth	r7, r3
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 801ffa2:	428f      	cmp	r7, r1
 801ffa4:	d207      	bcs.n	801ffb6 <lv_table_event+0xda>
            tmp += table->col_w[*col];
 801ffa6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801ffa8:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 801ffac:	3301      	adds	r3, #1
 801ffae:	442a      	add	r2, r5
 801ffb0:	b212      	sxth	r2, r2
            if(x < tmp) break;
 801ffb2:	4282      	cmp	r2, r0
 801ffb4:	ddf4      	ble.n	801ffa0 <lv_table_event+0xc4>
        }
    }

    if(row) {
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 801ffb6:	4620      	mov	r0, r4
 801ffb8:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 801ffbc:	f7e6 f848 	bl	8006050 <lv_obj_get_scroll_y>
        y -= obj->coords.y1;
 801ffc0:	8ae5      	ldrh	r5, [r4, #22]
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ffc2:	2100      	movs	r1, #0
        y -= obj->coords.y1;
 801ffc4:	1b76      	subs	r6, r6, r5
 801ffc6:	4430      	add	r0, r6
 801ffc8:	b285      	uxth	r5, r0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ffca:	4620      	mov	r0, r4
 801ffcc:	f7ff fc20 	bl	801f810 <lv_obj_get_style_pad_top>

        *row = 0;
        tmp = 0;

        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801ffd0:	2300      	movs	r3, #0
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ffd2:	1a28      	subs	r0, r5, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801ffd4:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
        tmp = 0;
 801ffd6:	461a      	mov	r2, r3
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 801ffd8:	b200      	sxth	r0, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 801ffda:	b299      	uxth	r1, r3
 801ffdc:	42a9      	cmp	r1, r5
 801ffde:	d207      	bcs.n	801fff0 <lv_table_event+0x114>
            tmp += table->row_h[*row];
 801ffe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ffe2:	f836 6013 	ldrh.w	r6, [r6, r3, lsl #1]
 801ffe6:	3301      	adds	r3, #1
 801ffe8:	4432      	add	r2, r6
 801ffea:	b212      	sxth	r2, r2
            if(y < tmp) break;
 801ffec:	4290      	cmp	r0, r2
 801ffee:	daf4      	bge.n	801ffda <lv_table_event+0xfe>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 801fff0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fff2:	42bb      	cmp	r3, r7
 801fff4:	d102      	bne.n	801fffc <lv_table_event+0x120>
 801fff6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801fff8:	428b      	cmp	r3, r1
 801fffa:	d001      	beq.n	8020000 <lv_table_event+0x124>
            table->col_act = col;
 801fffc:	86a7      	strh	r7, [r4, #52]	; 0x34
            table->row_act = row;
 801fffe:	86e1      	strh	r1, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 8020000:	4620      	mov	r0, r4
 8020002:	e031      	b.n	8020068 <lv_table_event+0x18c>
            x -= obj->coords.x1;
 8020004:	8aa0      	ldrh	r0, [r4, #20]
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8020006:	2100      	movs	r1, #0
            x -= obj->coords.x1;
 8020008:	1a2d      	subs	r5, r5, r0
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802000a:	4620      	mov	r0, r4
            x -= obj->coords.x1;
 802000c:	b2ad      	uxth	r5, r5
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802000e:	f7ff fbf1 	bl	801f7f4 <lv_obj_get_style_pad_left>
 8020012:	e7c0      	b.n	801ff96 <lv_table_event+0xba>
    else if(code == LV_EVENT_RELEASED) {
 8020014:	2d08      	cmp	r5, #8
 8020016:	d125      	bne.n	8020064 <lv_table_event+0x188>
        lv_obj_invalidate(obj);
 8020018:	f7e5 f92e 	bl	8005278 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 802001c:	f7e2 fa9a 	bl	8002554 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 8020020:	f7e2 fb1c 	bl	800265c <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8020024:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8020026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802002a:	429a      	cmp	r2, r3
 802002c:	d10c      	bne.n	8020048 <lv_table_event+0x16c>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802002e:	f7e2 fa91 	bl	8002554 <lv_indev_get_act>
 8020032:	f7e2 fa95 	bl	8002560 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 8020036:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 802003a:	2801      	cmp	r0, #1
 802003c:	f47f af62 	bne.w	801ff04 <lv_table_event+0x28>
            table->col_act = LV_TABLE_CELL_NONE;
 8020040:	f04f 33ff 	mov.w	r3, #4294967295
 8020044:	6363      	str	r3, [r4, #52]	; 0x34
 8020046:	e75d      	b.n	801ff04 <lv_table_event+0x28>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8020048:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 802004a:	429a      	cmp	r2, r3
 802004c:	d0ef      	beq.n	802002e <lv_table_event+0x152>
 802004e:	2800      	cmp	r0, #0
 8020050:	d1ed      	bne.n	802002e <lv_table_event+0x152>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8020052:	4602      	mov	r2, r0
 8020054:	211c      	movs	r1, #28
 8020056:	4620      	mov	r0, r4
 8020058:	f7e1 ffe6 	bl	8002028 <lv_event_send>
            if(res != LV_RES_OK) return;
 802005c:	2801      	cmp	r0, #1
 802005e:	f47f af51 	bne.w	801ff04 <lv_table_event+0x28>
 8020062:	e7e4      	b.n	802002e <lv_table_event+0x152>
    else if(code == LV_EVENT_FOCUSED) {
 8020064:	2d0e      	cmp	r5, #14
 8020066:	d102      	bne.n	802006e <lv_table_event+0x192>
            lv_obj_invalidate(obj);
 8020068:	f7e5 f906 	bl	8005278 <lv_obj_invalidate>
            return;
 802006c:	e74a      	b.n	801ff04 <lv_table_event+0x28>
    } else if(code == LV_EVENT_KEY) {
 802006e:	2d0d      	cmp	r5, #13
 8020070:	d150      	bne.n	8020114 <lv_table_event+0x238>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 8020072:	4630      	mov	r0, r6
 8020074:	f7e1 fffc 	bl	8002070 <lv_event_get_param>
        int32_t col = table->col_act;
 8020078:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 802007a:	f64f 73ff 	movw	r3, #65535	; 0xffff
        int32_t row = table->row_act;
 802007e:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 8020080:	429d      	cmp	r5, r3
 8020082:	d001      	beq.n	8020088 <lv_table_event+0x1ac>
 8020084:	429e      	cmp	r6, r3
 8020086:	d102      	bne.n	802008e <lv_table_event+0x1b2>
            table->col_act = 0;
 8020088:	2300      	movs	r3, #0
 802008a:	6363      	str	r3, [r4, #52]	; 0x34
 802008c:	e7b8      	b.n	8020000 <lv_table_event+0x124>
        if(col >= table->col_cnt) col = 0;
 802008e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
        if(row >= table->row_cnt) row = 0;
 8020090:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
        int32_t c = *((int32_t *)lv_event_get_param(e));
 8020092:	6800      	ldr	r0, [r0, #0]
        if(col >= table->col_cnt) col = 0;
 8020094:	428d      	cmp	r5, r1
 8020096:	bf34      	ite	cc
 8020098:	462a      	movcc	r2, r5
 802009a:	2200      	movcs	r2, #0
        if(row >= table->row_cnt) row = 0;
 802009c:	42be      	cmp	r6, r7
 802009e:	bf34      	ite	cc
 80200a0:	4633      	movcc	r3, r6
 80200a2:	2300      	movcs	r3, #0
        if(c == LV_KEY_LEFT) col--;
 80200a4:	2814      	cmp	r0, #20
 80200a6:	d108      	bne.n	80200ba <lv_table_event+0x1de>
 80200a8:	3a01      	subs	r2, #1
        if(col >= table->col_cnt) {
 80200aa:	4291      	cmp	r1, r2
 80200ac:	dd0a      	ble.n	80200c4 <lv_table_event+0x1e8>
        } else if (col < 0) {
 80200ae:	1c50      	adds	r0, r2, #1
 80200b0:	d10f      	bne.n	80200d2 <lv_table_event+0x1f6>
            if(row != 0) {
 80200b2:	b36b      	cbz	r3, 8020110 <lv_table_event+0x234>
                col = table->col_cnt - 1;
 80200b4:	1e4a      	subs	r2, r1, #1
                row--;
 80200b6:	3b01      	subs	r3, #1
 80200b8:	e00b      	b.n	80200d2 <lv_table_event+0x1f6>
        else if(c == LV_KEY_RIGHT) col++;
 80200ba:	2813      	cmp	r0, #19
 80200bc:	d11f      	bne.n	80200fe <lv_table_event+0x222>
 80200be:	3201      	adds	r2, #1
        if(col >= table->col_cnt) {
 80200c0:	4291      	cmp	r1, r2
 80200c2:	dc06      	bgt.n	80200d2 <lv_table_event+0x1f6>
            if(row < table->row_cnt - 1) {
 80200c4:	1e7a      	subs	r2, r7, #1
 80200c6:	429a      	cmp	r2, r3
                row++;
 80200c8:	bfc6      	itte	gt
 80200ca:	3301      	addgt	r3, #1
                col = 0;
 80200cc:	2200      	movgt	r2, #0
                col = table->col_cnt - 1;
 80200ce:	f101 32ff 	addle.w	r2, r1, #4294967295
        if(row >= table->row_cnt) {
 80200d2:	429f      	cmp	r7, r3
            row = table->row_cnt - 1;
 80200d4:	bfd4      	ite	le
 80200d6:	f107 33ff 	addle.w	r3, r7, #4294967295
        } else if(row < 0) {
 80200da:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 80200de:	4295      	cmp	r5, r2
 80200e0:	d102      	bne.n	80200e8 <lv_table_event+0x20c>
 80200e2:	429e      	cmp	r6, r3
 80200e4:	f43f af0e 	beq.w	801ff04 <lv_table_event+0x28>
            lv_obj_invalidate(obj);
 80200e8:	4620      	mov	r0, r4
            table->col_act = col;
 80200ea:	86a2      	strh	r2, [r4, #52]	; 0x34
            table->row_act = row;
 80200ec:	86e3      	strh	r3, [r4, #54]	; 0x36
            lv_obj_invalidate(obj);
 80200ee:	f7e5 f8c3 	bl	8005278 <lv_obj_invalidate>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80200f2:	2200      	movs	r2, #0
 80200f4:	211c      	movs	r1, #28
 80200f6:	4620      	mov	r0, r4
 80200f8:	f7e1 ff96 	bl	8002028 <lv_event_send>
            if(res != LV_RES_OK) return;
 80200fc:	e702      	b.n	801ff04 <lv_table_event+0x28>
        else if(c == LV_KEY_UP) row--;
 80200fe:	2811      	cmp	r0, #17
 8020100:	d101      	bne.n	8020106 <lv_table_event+0x22a>
 8020102:	3b01      	subs	r3, #1
 8020104:	e7dc      	b.n	80200c0 <lv_table_event+0x1e4>
        else if(c == LV_KEY_DOWN) row++;
 8020106:	2812      	cmp	r0, #18
 8020108:	f47f aefc 	bne.w	801ff04 <lv_table_event+0x28>
 802010c:	3301      	adds	r3, #1
 802010e:	e7d7      	b.n	80200c0 <lv_table_event+0x1e4>
                col = 0;
 8020110:	461a      	mov	r2, r3
 8020112:	e7de      	b.n	80200d2 <lv_table_event+0x1f6>
    } else if(code == LV_EVENT_DRAW_MAIN) {
 8020114:	2d15      	cmp	r5, #21
 8020116:	f47f aef5 	bne.w	801ff04 <lv_table_event+0x28>
        draw_main(e);
 802011a:	4630      	mov	r0, r6
 802011c:	f7ff fcb8 	bl	801fa90 <draw_main>
 8020120:	e6f0      	b.n	801ff04 <lv_table_event+0x28>
 8020122:	bf00      	nop
 8020124:	08029f24 	.word	0x08029f24

08020128 <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 8020128:	4770      	bx	lr

0802012a <lv_textarea_destructor>:
    if(ta->pwd_tmp != NULL) {
 802012a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
{
 802012c:	b510      	push	{r4, lr}
 802012e:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 8020130:	b118      	cbz	r0, 802013a <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 8020132:	f7f7 fbef 	bl	8017914 <lv_mem_free>
        ta->pwd_tmp = NULL;
 8020136:	2300      	movs	r3, #0
 8020138:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->placeholder_txt != NULL) {
 802013a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802013c:	b118      	cbz	r0, 8020146 <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->placeholder_txt);
 802013e:	f7f7 fbe9 	bl	8017914 <lv_mem_free>
        ta->placeholder_txt = NULL;
 8020142:	2300      	movs	r3, #0
 8020144:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8020146:	bd10      	pop	{r4, pc}

08020148 <lv_obj_get_style_text_font.constprop.0>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8020148:	f241 4259 	movw	r2, #5209	; 0x1459
 802014c:	2100      	movs	r1, #0
static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
 802014e:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8020150:	f7e7 f9ba 	bl	80074c8 <lv_obj_get_style_prop>
}
 8020154:	bd08      	pop	{r3, pc}
	...

08020158 <start_cursor_blink>:
        return true; /*If the accepted char list in not specified the accept the character*/
    }
}

static void start_cursor_blink(lv_obj_t * obj)
{
 8020158:	b530      	push	{r4, r5, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 802015a:	2265      	movs	r2, #101	; 0x65
 802015c:	b093      	sub	sp, #76	; 0x4c
 802015e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020162:	4604      	mov	r4, r0
 8020164:	f7e7 f9b0 	bl	80074c8 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 8020168:	4605      	mov	r5, r0
 802016a:	b958      	cbnz	r0, 8020184 <start_cursor_blink+0x2c>
        lv_anim_del(obj, cursor_blink_anim_cb);
 802016c:	4911      	ldr	r1, [pc, #68]	; (80201b4 <start_cursor_blink+0x5c>)
 802016e:	4620      	mov	r0, r4
 8020170:	f7f6 fe6e 	bl	8016e50 <lv_anim_del>
        ta->cursor.show = 1;
 8020174:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8020178:	f043 0301 	orr.w	r3, r3, #1
 802017c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 8020180:	b013      	add	sp, #76	; 0x4c
 8020182:	bd30      	pop	{r4, r5, pc}
        lv_anim_init(&a);
 8020184:	a801      	add	r0, sp, #4
 8020186:	f7f6 fe49 	bl	8016e1c <lv_anim_init>
    a->exec_cb = exec_cb;
 802018a:	4b0a      	ldr	r3, [pc, #40]	; (80201b4 <start_cursor_blink+0x5c>)
        lv_anim_start(&a);
 802018c:	a801      	add	r0, sp, #4
    a->var = var;
 802018e:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8020190:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 8020192:	2301      	movs	r3, #1
    a->time = duration;
 8020194:	950b      	str	r5, [sp, #44]	; 0x2c
    a->playback_time = time;
 8020196:	950e      	str	r5, [sp, #56]	; 0x38
    a->current_value = start;
 8020198:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 802019c:	2300      	movs	r3, #0
 802019e:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 80201a0:	4b05      	ldr	r3, [pc, #20]	; (80201b8 <start_cursor_blink+0x60>)
 80201a2:	9307      	str	r3, [sp, #28]
    a->repeat_cnt = cnt;
 80201a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80201a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80201ac:	f7f6 fe7c 	bl	8016ea8 <lv_anim_start>
}
 80201b0:	e7e6      	b.n	8020180 <start_cursor_blink+0x28>
 80201b2:	bf00      	nop
 80201b4:	080201bd 	.word	0x080201bd
 80201b8:	08016fb3 	.word	0x08016fb3

080201bc <cursor_blink_anim_cb>:
{
 80201bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(show != ta->cursor.show) {
 80201be:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80201c2:	f002 0401 	and.w	r4, r2, #1
 80201c6:	428c      	cmp	r4, r1
 80201c8:	d020      	beq.n	802020c <cursor_blink_anim_cb+0x50>
        ta->cursor.show = show == 0 ? 0 : 1;
 80201ca:	3900      	subs	r1, #0
        area_tmp.x1 += ta->label->coords.x1;
 80201cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dest->x2 = src->x2;
 80201ce:	f9b0 7048 	ldrsh.w	r7, [r0, #72]	; 0x48
        ta->cursor.show = show == 0 ? 0 : 1;
 80201d2:	bf18      	it	ne
 80201d4:	2101      	movne	r1, #1
    dest->y2 = src->y2;
 80201d6:	f9b0 604a 	ldrsh.w	r6, [r0, #74]	; 0x4a
        area_tmp.x1 += ta->label->coords.x1;
 80201da:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
        ta->cursor.show = show == 0 ? 0 : 1;
 80201de:	f361 0200 	bfi	r2, r1, #0, #1
    dest->y1 = src->y1;
 80201e2:	f9b0 1046 	ldrsh.w	r1, [r0, #70]	; 0x46
 80201e6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        area_tmp.y1 += ta->label->coords.y1;
 80201ea:	8aeb      	ldrh	r3, [r5, #22]
        area_tmp.x1 += ta->label->coords.x1;
 80201ec:	8aaa      	ldrh	r2, [r5, #20]
        area_tmp.y1 += ta->label->coords.y1;
 80201ee:	4419      	add	r1, r3
        area_tmp.y2 += ta->label->coords.y1;
 80201f0:	4433      	add	r3, r6
        area_tmp.x1 += ta->label->coords.x1;
 80201f2:	4414      	add	r4, r2
        area_tmp.x2 += ta->label->coords.x1;
 80201f4:	443a      	add	r2, r7
        area_tmp.y1 += ta->label->coords.y1;
 80201f6:	f8ad 1002 	strh.w	r1, [sp, #2]
        lv_obj_invalidate_area(obj, &area_tmp);
 80201fa:	4669      	mov	r1, sp
        area_tmp.x1 += ta->label->coords.x1;
 80201fc:	f8ad 4000 	strh.w	r4, [sp]
        area_tmp.x2 += ta->label->coords.x1;
 8020200:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 8020204:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 8020208:	f7e5 f81c 	bl	8005244 <lv_obj_invalidate_area>
}
 802020c:	b003      	add	sp, #12
 802020e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020210 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 8020210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020214:	4604      	mov	r4, r0
 8020216:	b089      	sub	sp, #36	; 0x24
    lv_textarea_t * ta = (lv_textarea_t *)obj;

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8020218:	f7ff ff96 	bl	8020148 <lv_obj_get_style_text_font.constprop.0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802021c:	f241 425b 	movw	r2, #5211	; 0x145b
 8020220:	2100      	movs	r1, #0
 8020222:	4607      	mov	r7, r0
 8020224:	4620      	mov	r0, r4
    const char * txt = lv_label_get_text(ta->label);

    uint32_t byte_pos;
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);

    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8020226:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8020418 <refr_cursor_area+0x208>
 802022a:	f7e7 f94d 	bl	80074c8 <lv_obj_get_style_prop>
 802022e:	9002      	str	r0, [sp, #8]
    const char * txt = lv_label_get_text(ta->label);
 8020230:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return ta->cursor.pos;
 8020232:	f8d4 b040 	ldr.w	fp, [r4, #64]	; 0x40
    const char * txt = lv_label_get_text(ta->label);
 8020236:	f7fd fe4d 	bl	801ded4 <lv_label_get_text>
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 802023a:	4b75      	ldr	r3, [pc, #468]	; (8020410 <refr_cursor_area+0x200>)
 802023c:	4659      	mov	r1, fp
    const char * txt = lv_label_get_text(ta->label);
 802023e:	9001      	str	r0, [sp, #4]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	4798      	blx	r3
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8020244:	9b01      	ldr	r3, [sp, #4]
    byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8020246:	4606      	mov	r6, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8020248:	2100      	movs	r1, #0
 802024a:	eb03 0900 	add.w	r9, r3, r0
 802024e:	f8da 3000 	ldr.w	r3, [sl]
 8020252:	4648      	mov	r0, r9
 8020254:	4798      	blx	r3

    lv_coord_t letter_h = lv_font_get_line_height(font);

    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 8020256:	280d      	cmp	r0, #13
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8020258:	4680      	mov	r8, r0
    lv_coord_t letter_h = lv_font_get_line_height(font);
 802025a:	f9b7 5008 	ldrsh.w	r5, [r7, #8]
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 802025e:	f8cd a00c 	str.w	sl, [sp, #12]
 8020262:	f200 80cf 	bhi.w	8020404 <refr_cursor_area+0x1f4>
 8020266:	f242 4201 	movw	r2, #9217	; 0x2401
 802026a:	40c2      	lsrs	r2, r0
 802026c:	43d2      	mvns	r2, r2
 802026e:	f012 0201 	ands.w	r2, r2, #1
 8020272:	f040 80c7 	bne.w	8020404 <refr_cursor_area+0x1f4>
        letter_w = lv_font_get_glyph_width(font, ' ', '\0');
 8020276:	2120      	movs	r1, #32
    }
    else {
        /*`letter_next` parameter is '\0' to ignore kerning*/
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 8020278:	4638      	mov	r0, r7
 802027a:	f7f6 fa13 	bl	80166a4 <lv_font_get_glyph_width>
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 802027e:	aa05      	add	r2, sp, #20
 8020280:	4659      	mov	r1, fp
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 8020282:	fa0f fa80 	sxth.w	sl, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 8020286:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020288:	f7fd fe26 	bl	801ded8 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 802028c:	f241 425d 	movw	r2, #5213	; 0x145d
 8020290:	2100      	movs	r1, #0
 8020292:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020294:	f7e7 f918 	bl	80074c8 <lv_obj_get_style_prop>

    lv_text_align_t align = lv_obj_get_style_text_align(ta->label, LV_PART_MAIN);
    if(align == LV_TEXT_ALIGN_AUTO) {
 8020298:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 802029c:	d10a      	bne.n	80202b4 <refr_cursor_area+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802029e:	4601      	mov	r1, r0
 80202a0:	f241 426a 	movw	r2, #5226	; 0x146a
 80202a4:	4620      	mov	r0, r4
 80202a6:	f7e7 f90f 	bl	80074c8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80202aa:	b2c0      	uxtb	r0, r0
       if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_TEXT_ALIGN_RIGHT;
       else align = LV_TEXT_ALIGN_LEFT;
 80202ac:	2801      	cmp	r0, #1
 80202ae:	bf0c      	ite	eq
 80202b0:	2003      	moveq	r0, #3
 80202b2:	2001      	movne	r0, #1
    }

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ta->label->coords.x1 + letter_w > ta->label->coords.x2 && ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT) {
 80202b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80202b6:	b2ad      	uxth	r5, r5
 80202b8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80202bc:	f9b1 c014 	ldrsh.w	ip, [r1, #20]
 80202c0:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 80202c4:	4462      	add	r2, ip
 80202c6:	4452      	add	r2, sl
 80202c8:	428a      	cmp	r2, r1
 80202ca:	dd2e      	ble.n	802032a <refr_cursor_area+0x11a>
 80202cc:	f894 b05c 	ldrb.w	fp, [r4, #92]	; 0x5c
 80202d0:	f01b 0b08 	ands.w	fp, fp, #8
 80202d4:	d129      	bne.n	802032a <refr_cursor_area+0x11a>
 80202d6:	2803      	cmp	r0, #3
 80202d8:	d027      	beq.n	802032a <refr_cursor_area+0x11a>
        letter_pos.x = 0;
        letter_pos.y += letter_h + line_space;
 80202da:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80202de:	9b02      	ldr	r3, [sp, #8]
        letter_pos.x = 0;
 80202e0:	f8ad b014 	strh.w	fp, [sp, #20]
        letter_pos.y += letter_h + line_space;
 80202e4:	4403      	add	r3, r0
 80202e6:	4618      	mov	r0, r3
 80202e8:	4428      	add	r0, r5
 80202ea:	f8ad 0016 	strh.w	r0, [sp, #22]

        if(letter != '\0') {
 80202ee:	f1b8 0f00 	cmp.w	r8, #0
 80202f2:	d013      	beq.n	802031c <refr_cursor_area+0x10c>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 80202f4:	4b47      	ldr	r3, [pc, #284]	; (8020414 <refr_cursor_area+0x204>)
 80202f6:	4648      	mov	r0, r9
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	4798      	blx	r3
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 80202fc:	9a01      	ldr	r2, [sp, #4]
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 80202fe:	4406      	add	r6, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8020300:	9b03      	ldr	r3, [sp, #12]
 8020302:	4659      	mov	r1, fp
 8020304:	4432      	add	r2, r6
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	4610      	mov	r0, r2
 802030a:	4798      	blx	r3
        }

        if(letter == '\0' || letter == '\n' || letter == '\r') {
 802030c:	280d      	cmp	r0, #13
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 802030e:	4601      	mov	r1, r0
        if(letter == '\0' || letter == '\n' || letter == '\r') {
 8020310:	d87b      	bhi.n	802040a <refr_cursor_area+0x1fa>
 8020312:	f242 4301 	movw	r3, #9217	; 0x2401
 8020316:	40c3      	lsrs	r3, r0
 8020318:	07db      	lsls	r3, r3, #31
 802031a:	d576      	bpl.n	802040a <refr_cursor_area+0x1fa>
            letter_w = lv_font_get_glyph_width(font, ' ', '\0');
 802031c:	2200      	movs	r2, #0
 802031e:	2120      	movs	r1, #32
        }
        else {
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
 8020320:	4638      	mov	r0, r7
 8020322:	f7f6 f9bf 	bl	80166a4 <lv_font_get_glyph_width>
 8020326:	fa0f fa80 	sxth.w	sl, r0
        }
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ta->cursor.txt_byte_pos = byte_pos;
 802032a:	64e6      	str	r6, [r4, #76]	; 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802032c:	f241 0210 	movw	r2, #4112	; 0x1010
 8020330:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020334:	4620      	mov	r0, r4
 8020336:	f7e7 f8c7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802033a:	f241 0211 	movw	r2, #4113	; 0x1011
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802033e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8020340:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020344:	4620      	mov	r0, r4
 8020346:	f7e7 f8bf 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802034a:	f241 0212 	movw	r2, #4114	; 0x1012
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802034e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020350:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020354:	4620      	mov	r0, r4
 8020356:	f7e7 f8b7 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802035a:	f241 0213 	movw	r2, #4115	; 0x1013
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802035e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8020360:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020364:	4620      	mov	r0, r4
 8020366:	f7e7 f8af 	bl	80074c8 <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR);
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR);
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR);

    lv_area_t cur_area;
    cur_area.x1 = letter_pos.x - left;
 802036a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    cur_area.y1 = letter_pos.y - top;
 802036e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 8020372:	4410      	add	r0, r2
    cur_area.x1 = letter_pos.x - left;
 8020374:	eba2 0808 	sub.w	r8, r2, r8
    cur_area.y1 = letter_pos.y - top;
 8020378:	1bcf      	subs	r7, r1, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 802037a:	4489      	add	r9, r1
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 802037c:	1e46      	subs	r6, r0, #1
 802037e:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46

    /*Save the new area*/
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 8020382:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 8020386:	f109 39ff 	add.w	r9, r9, #4294967295
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 802038a:	eb06 030a 	add.w	r3, r6, sl
    dest->x2 = src->x2;
 802038e:	f9b4 e048 	ldrsh.w	lr, [r4, #72]	; 0x48
    dest->y2 = src->y2;
 8020392:	f9b4 c04a 	ldrsh.w	ip, [r4, #74]	; 0x4a
    cur_area.x1 = letter_pos.x - left;
 8020396:	fa1f f888 	uxth.w	r8, r8
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 802039a:	b29e      	uxth	r6, r3
    area_tmp.x1 += ta->label->coords.x1;
 802039c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cur_area.y1 = letter_pos.y - top;
 802039e:	b2bf      	uxth	r7, r7
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 80203a0:	444d      	add	r5, r9
    area_tmp.x1 += ta->label->coords.x1;
 80203a2:	8a9a      	ldrh	r2, [r3, #20]
    area_tmp.y1 += ta->label->coords.y1;
 80203a4:	8adb      	ldrh	r3, [r3, #22]
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 80203a6:	b2ad      	uxth	r5, r5
    area_tmp.x1 += ta->label->coords.x1;
 80203a8:	4410      	add	r0, r2
    area_tmp.x2 += ta->label->coords.x1;
 80203aa:	4472      	add	r2, lr
    area_tmp.y1 += ta->label->coords.y1;
 80203ac:	4419      	add	r1, r3
    area_tmp.y2 += ta->label->coords.y1;
 80203ae:	4463      	add	r3, ip
    area_tmp.x1 += ta->label->coords.x1;
 80203b0:	f8ad 0018 	strh.w	r0, [sp, #24]
    lv_obj_invalidate_area(obj, &area_tmp);
 80203b4:	4620      	mov	r0, r4
    area_tmp.y1 += ta->label->coords.y1;
 80203b6:	f8ad 101a 	strh.w	r1, [sp, #26]
    lv_obj_invalidate_area(obj, &area_tmp);
 80203ba:	a906      	add	r1, sp, #24
    area_tmp.x2 += ta->label->coords.x1;
 80203bc:	f8ad 201c 	strh.w	r2, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 80203c0:	f8ad 301e 	strh.w	r3, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 80203c4:	f7e4 ff3e 	bl	8005244 <lv_obj_invalidate_area>

    lv_area_copy(&ta->cursor.area, &cur_area);

    lv_area_copy(&area_tmp, &ta->cursor.area);
    area_tmp.x1 += ta->label->coords.x1;
 80203c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    area_tmp.y1 += ta->label->coords.y1;
    area_tmp.x2 += ta->label->coords.x1;
    area_tmp.y2 += ta->label->coords.y1;
    lv_obj_invalidate_area(obj, &area_tmp);
 80203ca:	a906      	add	r1, sp, #24
    dest->x1 = src->x1;
 80203cc:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
 80203d0:	4620      	mov	r0, r4
    area_tmp.x1 += ta->label->coords.x1;
 80203d2:	8a93      	ldrh	r3, [r2, #20]
    dest->y1 = src->y1;
 80203d4:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
    area_tmp.y1 += ta->label->coords.y1;
 80203d8:	8ad2      	ldrh	r2, [r2, #22]
    area_tmp.x1 += ta->label->coords.x1;
 80203da:	4498      	add	r8, r3
    dest->x2 = src->x2;
 80203dc:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
    area_tmp.x2 += ta->label->coords.x1;
 80203e0:	441e      	add	r6, r3
    area_tmp.y1 += ta->label->coords.y1;
 80203e2:	4417      	add	r7, r2
    dest->y2 = src->y2;
 80203e4:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
    area_tmp.y2 += ta->label->coords.y1;
 80203e8:	4415      	add	r5, r2
    area_tmp.x1 += ta->label->coords.x1;
 80203ea:	f8ad 8018 	strh.w	r8, [sp, #24]
    area_tmp.y1 += ta->label->coords.y1;
 80203ee:	f8ad 701a 	strh.w	r7, [sp, #26]
    area_tmp.x2 += ta->label->coords.x1;
 80203f2:	f8ad 601c 	strh.w	r6, [sp, #28]
    area_tmp.y2 += ta->label->coords.y1;
 80203f6:	f8ad 501e 	strh.w	r5, [sp, #30]
    lv_obj_invalidate_area(obj, &area_tmp);
 80203fa:	f7e4 ff23 	bl	8005244 <lv_obj_invalidate_area>
}
 80203fe:	b009      	add	sp, #36	; 0x24
 8020400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        letter_w = lv_font_get_glyph_width(font, letter, '\0');
 8020404:	2200      	movs	r2, #0
 8020406:	4641      	mov	r1, r8
 8020408:	e736      	b.n	8020278 <refr_cursor_area+0x68>
            letter_w = lv_font_get_glyph_width(font, letter, '\0');
 802040a:	2200      	movs	r2, #0
 802040c:	e788      	b.n	8020320 <refr_cursor_area+0x110>
 802040e:	bf00      	nop
 8020410:	20000038 	.word	0x20000038
 8020414:	20000048 	.word	0x20000048
 8020418:	20000040 	.word	0x20000040

0802041c <pwd_char_hider>:
{
 802041c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    if(ta->pwd_mode != 0) {
 8020420:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8020424:	4606      	mov	r6, r0
    if(ta->pwd_mode != 0) {
 8020426:	075b      	lsls	r3, r3, #29
 8020428:	d535      	bpl.n	8020496 <pwd_char_hider+0x7a>
        char * txt  = lv_label_get_text(ta->label);
 802042a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802042c:	f7fd fd52 	bl	801ded4 <lv_label_get_text>
        int32_t enc_len = _lv_txt_get_encoded_length(txt);
 8020430:	4b1e      	ldr	r3, [pc, #120]	; (80204ac <pwd_char_hider+0x90>)
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	4798      	blx	r3
        if(enc_len == 0) return;
 8020436:	4605      	mov	r5, r0
 8020438:	b368      	cbz	r0, 8020496 <pwd_char_hider+0x7a>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802043a:	4630      	mov	r0, r6
        for(i = 0; i < enc_len; i++) {
 802043c:	f04f 0900 	mov.w	r9, #0
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8020440:	f7ff fe82 	bl	8020148 <lv_obj_get_style_text_font.constprop.0>
        has_bullet = lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0);
 8020444:	a901      	add	r1, sp, #4
 8020446:	2300      	movs	r3, #0
 8020448:	f242 0222 	movw	r2, #8226	; 0x2022
 802044c:	f7f6 f924 	bl	8016698 <lv_font_get_glyph_dsc>
        else bullet = "*";
 8020450:	4a17      	ldr	r2, [pc, #92]	; (80204b0 <pwd_char_hider+0x94>)
 8020452:	4b18      	ldr	r3, [pc, #96]	; (80204b4 <pwd_char_hider+0x98>)
 8020454:	2800      	cmp	r0, #0
 8020456:	bf14      	ite	ne
 8020458:	4690      	movne	r8, r2
 802045a:	4698      	moveq	r8, r3
        size_t bullet_len = strlen(bullet);
 802045c:	4640      	mov	r0, r8
 802045e:	f7df fee1 	bl	8000224 <strlen>
 8020462:	4604      	mov	r4, r0
        char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 8020464:	4368      	muls	r0, r5
 8020466:	3001      	adds	r0, #1
 8020468:	f7f7 fc06 	bl	8017c78 <lv_mem_buf_get>
 802046c:	4607      	mov	r7, r0
        for(i = 0; i < enc_len; i++) {
 802046e:	4682      	mov	sl, r0
 8020470:	454d      	cmp	r5, r9
 8020472:	4650      	mov	r0, sl
 8020474:	44a2      	add	sl, r4
 8020476:	dc11      	bgt.n	802049c <pwd_char_hider+0x80>
        txt_tmp[i * bullet_len] = '\0';
 8020478:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802047c:	2300      	movs	r3, #0
        lv_label_set_text(ta->label, txt_tmp);
 802047e:	4639      	mov	r1, r7
        txt_tmp[i * bullet_len] = '\0';
 8020480:	436c      	muls	r4, r5
 8020482:	553b      	strb	r3, [r7, r4]
        lv_label_set_text(ta->label, txt_tmp);
 8020484:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8020486:	f7fd fc73 	bl	801dd70 <lv_label_set_text>
        lv_mem_buf_release(txt_tmp);
 802048a:	4638      	mov	r0, r7
 802048c:	f7f7 fa50 	bl	8017930 <lv_mem_buf_release>
        refr_cursor_area(obj);
 8020490:	4630      	mov	r0, r6
 8020492:	f7ff febd 	bl	8020210 <refr_cursor_area>
}
 8020496:	b004      	add	sp, #16
 8020498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 802049c:	4622      	mov	r2, r4
 802049e:	4641      	mov	r1, r8
        for(i = 0; i < enc_len; i++) {
 80204a0:	f109 0901 	add.w	r9, r9, #1
            lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 80204a4:	f7f7 fa70 	bl	8017988 <lv_memcpy>
        for(i = 0; i < enc_len; i++) {
 80204a8:	e7e2      	b.n	8020470 <pwd_char_hider+0x54>
 80204aa:	bf00      	nop
 80204ac:	2000004c 	.word	0x2000004c
 80204b0:	08029f40 	.word	0x08029f40
 80204b4:	08025b1f 	.word	0x08025b1f

080204b8 <pwd_char_hider_anim_ready>:
    pwd_char_hider(obj);
 80204b8:	6800      	ldr	r0, [r0, #0]
 80204ba:	f7ff bfaf 	b.w	802041c <pwd_char_hider>
	...

080204c0 <lv_textarea_create>:
{
 80204c0:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80204c2:	4804      	ldr	r0, [pc, #16]	; (80204d4 <lv_textarea_create+0x14>)
{
 80204c4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80204c6:	f7e4 f82d 	bl	8004524 <lv_obj_class_create_obj>
 80204ca:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80204cc:	f7e4 f8b7 	bl	800463e <lv_obj_class_init_obj>
}
 80204d0:	4620      	mov	r0, r4
 80204d2:	bd10      	pop	{r4, pc}
 80204d4:	08029f44 	.word	0x08029f44

080204d8 <lv_textarea_set_placeholder_text>:
{
 80204d8:	b570      	push	{r4, r5, r6, lr}
 80204da:	4604      	mov	r4, r0
    LV_ASSERT_NULL(txt);
 80204dc:	460e      	mov	r6, r1
 80204de:	b901      	cbnz	r1, 80204e2 <lv_textarea_set_placeholder_text+0xa>
 80204e0:	e7fe      	b.n	80204e0 <lv_textarea_set_placeholder_text+0x8>
    size_t txt_len = strlen(txt);
 80204e2:	4608      	mov	r0, r1
 80204e4:	f7df fe9e 	bl	8000224 <strlen>
    if(txt_len == 0) {
 80204e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80204ea:	4605      	mov	r5, r0
 80204ec:	b948      	cbnz	r0, 8020502 <lv_textarea_set_placeholder_text+0x2a>
        if(ta->placeholder_txt) {
 80204ee:	b11b      	cbz	r3, 80204f8 <lv_textarea_set_placeholder_text+0x20>
            lv_mem_free(ta->placeholder_txt);
 80204f0:	4618      	mov	r0, r3
 80204f2:	f7f7 fa0f 	bl	8017914 <lv_mem_free>
            ta->placeholder_txt = NULL;
 80204f6:	62a5      	str	r5, [r4, #40]	; 0x28
    lv_obj_invalidate(obj);
 80204f8:	4620      	mov	r0, r4
}
 80204fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_invalidate(obj);
 80204fe:	f7e4 bebb 	b.w	8005278 <lv_obj_invalidate>
        if(ta->placeholder_txt == NULL) {
 8020502:	1c41      	adds	r1, r0, #1
 8020504:	b933      	cbnz	r3, 8020514 <lv_textarea_set_placeholder_text+0x3c>
            ta->placeholder_txt = lv_mem_alloc(txt_len + 1);
 8020506:	4608      	mov	r0, r1
 8020508:	f7f7 fb86 	bl	8017c18 <lv_mem_alloc>
            ta->placeholder_txt = lv_mem_realloc(ta->placeholder_txt, txt_len + 1);
 802050c:	62a0      	str	r0, [r4, #40]	; 0x28
        LV_ASSERT_MALLOC(ta->placeholder_txt);
 802050e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020510:	b920      	cbnz	r0, 802051c <lv_textarea_set_placeholder_text+0x44>
 8020512:	e7fe      	b.n	8020512 <lv_textarea_set_placeholder_text+0x3a>
            ta->placeholder_txt = lv_mem_realloc(ta->placeholder_txt, txt_len + 1);
 8020514:	4618      	mov	r0, r3
 8020516:	f7f7 fb95 	bl	8017c44 <lv_mem_realloc>
 802051a:	e7f7      	b.n	802050c <lv_textarea_set_placeholder_text+0x34>
        strcpy(ta->placeholder_txt, txt);
 802051c:	4631      	mov	r1, r6
 802051e:	f003 fbb3 	bl	8023c88 <strcpy>
 8020522:	e7e9      	b.n	80204f8 <lv_textarea_set_placeholder_text+0x20>

08020524 <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 8020524:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8020526:	428b      	cmp	r3, r1
{
 8020528:	b5f0      	push	{r4, r5, r6, r7, lr}
 802052a:	4604      	mov	r4, r0
 802052c:	b087      	sub	sp, #28
 802052e:	460e      	mov	r6, r1
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 8020530:	d053      	beq.n	80205da <lv_textarea_set_cursor_pos+0xb6>
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 8020532:	4b2b      	ldr	r3, [pc, #172]	; (80205e0 <lv_textarea_set_cursor_pos+0xbc>)
 8020534:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020536:	681d      	ldr	r5, [r3, #0]
 8020538:	f7fd fccc 	bl	801ded4 <lv_label_get_text>
 802053c:	47a8      	blx	r5
    if(pos < 0) pos = len + pos;
 802053e:	2e00      	cmp	r6, #0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 8020540:	4605      	mov	r5, r0
    if(pos < 0) pos = len + pos;
 8020542:	bfb8      	it	lt
 8020544:	1836      	addlt	r6, r6, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 8020546:	42b0      	cmp	r0, r6
 8020548:	db04      	blt.n	8020554 <lv_textarea_set_cursor_pos+0x30>
 802054a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802054e:	429e      	cmp	r6, r3
 8020550:	bf18      	it	ne
 8020552:	4635      	movne	r5, r6
    ta->cursor.pos = pos;
 8020554:	6425      	str	r5, [r4, #64]	; 0x40
	const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8020556:	4620      	mov	r0, r4
 8020558:	f7ff fdf6 	bl	8020148 <lv_obj_get_style_text_font.constprop.0>
	lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 802055c:	aa01      	add	r2, sp, #4
	const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802055e:	4606      	mov	r6, r0
	lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 8020560:	4629      	mov	r1, r5
 8020562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020564:	f7fd fcb8 	bl	801ded8 <lv_label_get_letter_pos>
	lv_obj_get_coords(obj, &ta_cords);
 8020568:	a904      	add	r1, sp, #16
 802056a:	4620      	mov	r0, r4
 802056c:	f7e4 fcdf 	bl	8004f2e <lv_obj_get_coords>
	lv_obj_get_coords(ta->label, &label_cords);
 8020570:	a902      	add	r1, sp, #8
 8020572:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020574:	f7e4 fcdb 	bl	8004f2e <lv_obj_get_coords>
	lv_obj_update_layout(obj);
 8020578:	4620      	mov	r0, r4
 802057a:	f7e5 fae5 	bl	8005b48 <lv_obj_update_layout>
	lv_coord_t font_h = lv_font_get_line_height(font);
 802057e:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
	if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 8020582:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8020586:	4620      	mov	r0, r4
 8020588:	f7e5 fd74 	bl	8006074 <lv_obj_get_scroll_top>
 802058c:	4286      	cmp	r6, r0
 802058e:	da05      	bge.n	802059c <lv_textarea_set_cursor_pos+0x78>
		lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 8020590:	2201      	movs	r2, #1
 8020592:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8020596:	4620      	mov	r0, r4
 8020598:	f7e6 f8b2 	bl	8006700 <lv_obj_scroll_to_y>
	lv_coord_t h = lv_obj_get_content_height(obj);
 802059c:	4620      	mov	r0, r4
 802059e:	f7e4 fd3c 	bl	800501a <lv_obj_get_content_height>
	if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 80205a2:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
	lv_coord_t h = lv_obj_get_content_height(obj);
 80205a6:	4607      	mov	r7, r0
	if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 80205a8:	4620      	mov	r0, r4
 80205aa:	442e      	add	r6, r5
 80205ac:	f7e5 fd62 	bl	8006074 <lv_obj_get_scroll_top>
 80205b0:	1a36      	subs	r6, r6, r0
 80205b2:	42be      	cmp	r6, r7
 80205b4:	dd08      	ble.n	80205c8 <lv_textarea_set_cursor_pos+0xa4>
		lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 80205b6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80205ba:	2201      	movs	r2, #1
 80205bc:	4405      	add	r5, r0
 80205be:	4620      	mov	r0, r4
 80205c0:	1be9      	subs	r1, r5, r7
 80205c2:	b209      	sxth	r1, r1
 80205c4:	f7e6 f89c 	bl	8006700 <lv_obj_scroll_to_y>
    ta->cursor.valid_x = cur_pos.x;
 80205c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    start_cursor_blink(obj);
 80205cc:	4620      	mov	r0, r4
    ta->cursor.valid_x = cur_pos.x;
 80205ce:	87a3      	strh	r3, [r4, #60]	; 0x3c
    start_cursor_blink(obj);
 80205d0:	f7ff fdc2 	bl	8020158 <start_cursor_blink>
    refr_cursor_area(obj);
 80205d4:	4620      	mov	r0, r4
 80205d6:	f7ff fe1b 	bl	8020210 <refr_cursor_area>
}
 80205da:	b007      	add	sp, #28
 80205dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205de:	bf00      	nop
 80205e0:	2000004c 	.word	0x2000004c

080205e4 <lv_textarea_constructor>:
{
 80205e4:	b538      	push	{r3, r4, r5, lr}
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 80205e6:	f240 53dc 	movw	r3, #1500	; 0x5dc
    ta->pwd_tmp           = NULL;
 80205ea:	2500      	movs	r5, #0
{
 80205ec:	460c      	mov	r4, r1
    ta->label = lv_label_create(obj);
 80205ee:	4608      	mov	r0, r1
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 80205f0:	870b      	strh	r3, [r1, #56]	; 0x38
    ta->cursor.pos        = 1;	/*It will be set to zero later (with zero value lv_textarea_set_cursor_pos(obj, 0); woldn't do anything as there is no difference)*/
 80205f2:	2301      	movs	r3, #1
    ta->pwd_tmp           = NULL;
 80205f4:	62cd      	str	r5, [r1, #44]	; 0x2c
    ta->cursor.pos        = 1;	/*It will be set to zero later (with zero value lv_textarea_set_cursor_pos(obj, 0); woldn't do anything as there is no difference)*/
 80205f6:	640b      	str	r3, [r1, #64]	; 0x40
    ta->cursor.show      = 1;
 80205f8:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    ta->cursor.valid_x    = 0;
 80205fc:	878d      	strh	r5, [r1, #60]	; 0x3c
    ta->cursor.show      = 1;
 80205fe:	f023 0303 	bic.w	r3, r3, #3
 8020602:	f043 0303 	orr.w	r3, r3, #3
 8020606:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    ta->text_sel_en = 0;
 802060a:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 802060e:	f023 030e 	bic.w	r3, r3, #14
    ta->max_length        = 0;
 8020612:	e9c1 550c 	strd	r5, r5, [r1, #48]	; 0x30
    ta->text_sel_en = 0;
 8020616:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    ta->placeholder_txt = NULL;
 802061a:	e9c1 5509 	strd	r5, r5, [r1, #36]	; 0x24
    ta->label = lv_label_create(obj);
 802061e:	f7fd fb9b 	bl	801dd58 <lv_label_create>
    lv_obj_set_width(ta->label, lv_pct(100));
 8020622:	f242 0164 	movw	r1, #8292	; 0x2064
    ta->label = lv_label_create(obj);
 8020626:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 8020628:	f7e4 fb80 	bl	8004d2c <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 802062c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802062e:	4908      	ldr	r1, [pc, #32]	; (8020650 <lv_textarea_constructor+0x6c>)
 8020630:	f7fd fb9e 	bl	801dd70 <lv_label_set_text>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8020634:	4620      	mov	r0, r4
 8020636:	f44f 7100 	mov.w	r1, #512	; 0x200
 802063a:	f7e3 fc15 	bl	8003e68 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 802063e:	4620      	mov	r0, r4
 8020640:	4629      	mov	r1, r5
 8020642:	f7ff ff6f 	bl	8020524 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 8020646:	4620      	mov	r0, r4
}
 8020648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    start_cursor_blink(obj);
 802064c:	f7ff bd84 	b.w	8020158 <start_cursor_blink>
 8020650:	08029f9b 	.word	0x08029f9b

08020654 <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1 : 0;
 8020654:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8020658:	f361 0341 	bfi	r3, r1, #1, #1
 802065c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 8020660:	4770      	bx	lr

08020662 <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 8020662:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8020666:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 802066a:	428a      	cmp	r2, r1
{
 802066c:	b570      	push	{r4, r5, r6, lr}
 802066e:	4604      	mov	r4, r0
    if(ta->one_line == en) return;
 8020670:	d029      	beq.n	80206c6 <lv_textarea_set_one_line+0x64>
    if(en) {
 8020672:	b1d1      	cbz	r1, 80206aa <lv_textarea_set_one_line+0x48>
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8020674:	f7ff fd68 	bl	8020148 <lv_obj_get_style_text_font.constprop.0>
        ta->one_line = 1;
 8020678:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        lv_coord_t font_h              = lv_font_get_line_height(font);
 802067c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 8020680:	f242 71d1 	movw	r1, #10193	; 0x27d1
        ta->one_line = 1;
 8020684:	f043 0308 	orr.w	r3, r3, #8
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 8020688:	6a60      	ldr	r0, [r4, #36]	; 0x24
        ta->one_line = 1;
 802068a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        lv_obj_set_width(ta->label, LV_SIZE_CONTENT);
 802068e:	f7e4 fb4d 	bl	8004d2c <lv_obj_set_width>
        lv_obj_set_content_height(obj, font_h);
 8020692:	4629      	mov	r1, r5
 8020694:	4620      	mov	r0, r4
 8020696:	f7e4 fb88 	bl	8004daa <lv_obj_set_content_height>
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 802069a:	2300      	movs	r3, #0
 802069c:	4620      	mov	r0, r4
 802069e:	461a      	mov	r2, r3
 80206a0:	4619      	mov	r1, r3
}
 80206a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 80206a6:	f7e6 b853 	b.w	8006750 <lv_obj_scroll_to>
        ta->one_line = 0;
 80206aa:	f361 03c3 	bfi	r3, r1, #3, #1
        lv_obj_set_width(ta->label, lv_pct(100));
 80206ae:	f242 0164 	movw	r1, #8292	; 0x2064
        ta->one_line = 0;
 80206b2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        lv_obj_set_width(ta->label, lv_pct(100));
 80206b6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80206b8:	f7e4 fb38 	bl	8004d2c <lv_obj_set_width>
        lv_obj_set_height(obj, LV_DPI_DEF);
 80206bc:	2182      	movs	r1, #130	; 0x82
 80206be:	4620      	mov	r0, r4
 80206c0:	f7e4 fb4e 	bl	8004d60 <lv_obj_set_height>
        lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 80206c4:	e7e9      	b.n	802069a <lv_textarea_set_one_line+0x38>
}
 80206c6:	bd70      	pop	{r4, r5, r6, pc}

080206c8 <lv_textarea_set_max_length>:
    ta->max_length = num;
 80206c8:	6341      	str	r1, [r0, #52]	; 0x34
}
 80206ca:	4770      	bx	lr

080206cc <lv_textarea_get_text>:
    if(ta->pwd_mode == 0) {
 80206cc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80206d0:	075b      	lsls	r3, r3, #29
 80206d2:	d402      	bmi.n	80206da <lv_textarea_get_text+0xe>
        txt = lv_label_get_text(ta->label);
 80206d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80206d6:	f7fd bbfd 	b.w	801ded4 <lv_label_get_text>
}
 80206da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80206dc:	4770      	bx	lr

080206de <lv_textarea_get_cursor_pos>:
}
 80206de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80206e0:	4770      	bx	lr

080206e2 <lv_textarea_get_one_line>:
    return ta->one_line == 0 ? false : true;
 80206e2:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 80206e6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80206ea:	4770      	bx	lr

080206ec <lv_textarea_clear_selection>:
{
 80206ec:	b538      	push	{r3, r4, r5, lr}
 80206ee:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 80206f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80206f2:	f7fd fde2 	bl	801e2ba <lv_label_get_text_selection_start>
 80206f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80206fa:	4605      	mov	r5, r0
 80206fc:	4298      	cmp	r0, r3
 80206fe:	d00b      	beq.n	8020718 <lv_textarea_clear_selection+0x2c>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8020700:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020702:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020706:	f7fd fbdf 	bl	801dec8 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 802070a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802070c:	f64f 71ff 	movw	r1, #65535	; 0xffff
}
 8020710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8020714:	f7fd bbdb 	b.w	801dece <lv_label_set_text_sel_end>
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 8020718:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802071a:	f7fd fdd0 	bl	801e2be <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 802071e:	42a8      	cmp	r0, r5
 8020720:	d1ee      	bne.n	8020700 <lv_textarea_clear_selection+0x14>
}
 8020722:	bd38      	pop	{r3, r4, r5, pc}

08020724 <lv_textarea_add_text>:
{
 8020724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020726:	4604      	mov	r4, r0
 8020728:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(txt);
 802072a:	460d      	mov	r5, r1
 802072c:	b901      	cbnz	r1, 8020730 <lv_textarea_add_text+0xc>
 802072e:	e7fe      	b.n	802072e <lv_textarea_add_text+0xa>
    if(ta->pwd_mode != 0) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 8020730:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8020734:	075a      	lsls	r2, r3, #29
 8020736:	d501      	bpl.n	802073c <lv_textarea_add_text+0x18>
 8020738:	f7ff fe70 	bl	802041c <pwd_char_hider>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802073c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802073e:	b90b      	cbnz	r3, 8020744 <lv_textarea_add_text+0x20>
 8020740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020742:	b19b      	cbz	r3, 802076c <lv_textarea_add_text+0x48>
        uint32_t i = 0;
 8020744:	2300      	movs	r3, #0
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8020746:	4e36      	ldr	r6, [pc, #216]	; (8020820 <lv_textarea_add_text+0xfc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8020748:	4f36      	ldr	r7, [pc, #216]	; (8020824 <lv_textarea_add_text+0x100>)
        uint32_t i = 0;
 802074a:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 802074c:	9b01      	ldr	r3, [sp, #4]
 802074e:	5ceb      	ldrb	r3, [r5, r3]
 8020750:	b90b      	cbnz	r3, 8020756 <lv_textarea_add_text+0x32>
}
 8020752:	b013      	add	sp, #76	; 0x4c
 8020754:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8020756:	a901      	add	r1, sp, #4
 8020758:	6833      	ldr	r3, [r6, #0]
 802075a:	4628      	mov	r0, r5
 802075c:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802075e:	683b      	ldr	r3, [r7, #0]
 8020760:	4798      	blx	r3
 8020762:	4601      	mov	r1, r0
 8020764:	4620      	mov	r0, r4
 8020766:	f000 f885 	bl	8020874 <lv_textarea_add_char>
 802076a:	e7ef      	b.n	802074c <lv_textarea_add_text+0x28>
    lv_res_t res = insert_handler(obj, txt);
 802076c:	4629      	mov	r1, r5
 802076e:	4620      	mov	r0, r4
 8020770:	f000 f862 	bl	8020838 <insert_handler>
    if(res != LV_RES_OK) return;
 8020774:	2801      	cmp	r0, #1
 8020776:	d1ec      	bne.n	8020752 <lv_textarea_add_text+0x2e>
    if(ta->placeholder_txt) {
 8020778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802077a:	b13b      	cbz	r3, 802078c <lv_textarea_add_text+0x68>
        const char * txt_act = lv_label_get_text(ta->label);
 802077c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802077e:	f7fd fba9 	bl	801ded4 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 8020782:	7803      	ldrb	r3, [r0, #0]
 8020784:	b913      	cbnz	r3, 802078c <lv_textarea_add_text+0x68>
 8020786:	4620      	mov	r0, r4
 8020788:	f7e4 fd76 	bl	8005278 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 802078c:	462a      	mov	r2, r5
 802078e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020790:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020792:	f7fd fd97 	bl	801e2c4 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 8020796:	4620      	mov	r0, r4
 8020798:	f7ff ffa8 	bl	80206ec <lv_textarea_clear_selection>
    if(ta->pwd_mode != 0) {
 802079c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80207a0:	075b      	lsls	r3, r3, #29
 80207a2:	d518      	bpl.n	80207d6 <lv_textarea_add_text+0xb2>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + strlen(txt) + 1);
 80207a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80207a6:	4638      	mov	r0, r7
 80207a8:	f7df fd3c 	bl	8000224 <strlen>
 80207ac:	4606      	mov	r6, r0
 80207ae:	4628      	mov	r0, r5
 80207b0:	f7df fd38 	bl	8000224 <strlen>
 80207b4:	4430      	add	r0, r6
 80207b6:	1c41      	adds	r1, r0, #1
 80207b8:	4638      	mov	r0, r7
 80207ba:	f7f7 fa43 	bl	8017c44 <lv_mem_realloc>
 80207be:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80207c0:	b900      	cbnz	r0, 80207c4 <lv_textarea_add_text+0xa0>
 80207c2:	e7fe      	b.n	80207c2 <lv_textarea_add_text+0x9e>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 80207c4:	462a      	mov	r2, r5
 80207c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80207c8:	f7f8 ff0c 	bl	80195e4 <_lv_txt_ins>
        if(ta->pwd_show_time == 0) {
 80207cc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80207ce:	b98b      	cbnz	r3, 80207f4 <lv_textarea_add_text+0xd0>
            pwd_char_hider(obj);
 80207d0:	4620      	mov	r0, r4
 80207d2:	f7ff fe23 	bl	802041c <pwd_char_hider>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 80207d6:	4b14      	ldr	r3, [pc, #80]	; (8020828 <lv_textarea_add_text+0x104>)
 80207d8:	4628      	mov	r0, r5
    return ta->cursor.pos;
 80207da:	6c26      	ldr	r6, [r4, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	4798      	blx	r3
 80207e0:	1981      	adds	r1, r0, r6
 80207e2:	4620      	mov	r0, r4
 80207e4:	f7ff fe9e 	bl	8020524 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80207e8:	2200      	movs	r2, #0
 80207ea:	211c      	movs	r1, #28
 80207ec:	4620      	mov	r0, r4
 80207ee:	f7e1 fc1b 	bl	8002028 <lv_event_send>
 80207f2:	e7ae      	b.n	8020752 <lv_textarea_add_text+0x2e>
            lv_anim_init(&a);
 80207f4:	a801      	add	r0, sp, #4
 80207f6:	f7f6 fb11 	bl	8016e1c <lv_anim_init>
    a->exec_cb = exec_cb;
 80207fa:	4b0c      	ldr	r3, [pc, #48]	; (802082c <lv_textarea_add_text+0x108>)
            lv_anim_start(&a);
 80207fc:	a801      	add	r0, sp, #4
    a->var = var;
 80207fe:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8020800:	9302      	str	r3, [sp, #8]
    a->time = duration;
 8020802:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020804:	930b      	str	r3, [sp, #44]	; 0x2c
    a->start_value = start;
 8020806:	2300      	movs	r3, #0
    a->current_value = start;
 8020808:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 802080c:	2301      	movs	r3, #1
 802080e:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 8020810:	4b07      	ldr	r3, [pc, #28]	; (8020830 <lv_textarea_add_text+0x10c>)
 8020812:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
 8020814:	4b07      	ldr	r3, [pc, #28]	; (8020834 <lv_textarea_add_text+0x110>)
 8020816:	9304      	str	r3, [sp, #16]
 8020818:	f7f6 fb46 	bl	8016ea8 <lv_anim_start>
 802081c:	e7db      	b.n	80207d6 <lv_textarea_add_text+0xb2>
 802081e:	bf00      	nop
 8020820:	20000040 	.word	0x20000040
 8020824:	20000050 	.word	0x20000050
 8020828:	2000004c 	.word	0x2000004c
 802082c:	08020129 	.word	0x08020129
 8020830:	08016fb3 	.word	0x08016fb3
 8020834:	080204b9 	.word	0x080204b9

08020838 <insert_handler>:
    if(code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
#endif
}

static lv_res_t insert_handler(lv_obj_t * obj, const char * txt)
{
 8020838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ta_insert_replace = NULL;
 802083a:	4c0d      	ldr	r4, [pc, #52]	; (8020870 <insert_handler+0x38>)
 802083c:	2700      	movs	r7, #0
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 802083e:	460a      	mov	r2, r1
{
 8020840:	460d      	mov	r5, r1
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 8020842:	211d      	movs	r1, #29
    ta_insert_replace = NULL;
 8020844:	6027      	str	r7, [r4, #0]
{
 8020846:	4606      	mov	r6, r0
    lv_event_send(obj, LV_EVENT_INSERT, (char*)txt);
 8020848:	f7e1 fbee 	bl	8002028 <lv_event_send>
    if(ta_insert_replace) {
 802084c:	6824      	ldr	r4, [r4, #0]
 802084e:	b164      	cbz	r4, 802086a <insert_handler+0x32>
        if(ta_insert_replace[0] == '\0') return LV_RES_INV; /*Drop this text*/
 8020850:	7820      	ldrb	r0, [r4, #0]
 8020852:	b148      	cbz	r0, 8020868 <insert_handler+0x30>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, txt)) {
 8020854:	4629      	mov	r1, r5
 8020856:	4620      	mov	r0, r4
 8020858:	f7df fcda 	bl	8000210 <strcmp>
 802085c:	b128      	cbz	r0, 802086a <insert_handler+0x32>
            lv_textarea_add_text(obj, ta_insert_replace);
 802085e:	4630      	mov	r0, r6
 8020860:	4621      	mov	r1, r4
 8020862:	f7ff ff5f 	bl	8020724 <lv_textarea_add_text>
            return LV_RES_INV;
 8020866:	4638      	mov	r0, r7
        }
    }

    return LV_RES_OK;
}
 8020868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_RES_OK;
 802086a:	2001      	movs	r0, #1
 802086c:	e7fc      	b.n	8020868 <insert_handler+0x30>
 802086e:	bf00      	nop
 8020870:	2000ab7c 	.word	0x2000ab7c

08020874 <lv_textarea_add_char>:
{
 8020874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020876:	b097      	sub	sp, #92	; 0x5c
    u32_buf[1] = 0;
 8020878:	2300      	movs	r3, #0
{
 802087a:	4604      	mov	r4, r0
 802087c:	9101      	str	r1, [sp, #4]
    u32_buf[0] = c;
 802087e:	9103      	str	r1, [sp, #12]
    lv_res_t res = insert_handler(obj, letter_buf);
 8020880:	a903      	add	r1, sp, #12
    u32_buf[1] = 0;
 8020882:	9304      	str	r3, [sp, #16]
    lv_res_t res = insert_handler(obj, letter_buf);
 8020884:	f7ff ffd8 	bl	8020838 <insert_handler>
    if(res != LV_RES_OK) return;
 8020888:	2801      	cmp	r0, #1
 802088a:	d149      	bne.n	8020920 <lv_textarea_add_char+0xac>
    if(ta->one_line && (c == '\n' || c == '\r')) {
 802088c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020890:	0719      	lsls	r1, r3, #28
 8020892:	d504      	bpl.n	802089e <lv_textarea_add_char+0x2a>
 8020894:	9b01      	ldr	r3, [sp, #4]
 8020896:	2b0a      	cmp	r3, #10
 8020898:	d042      	beq.n	8020920 <lv_textarea_add_char+0xac>
 802089a:	2b0d      	cmp	r3, #13
 802089c:	d040      	beq.n	8020920 <lv_textarea_add_char+0xac>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 802089e:	4d3e      	ldr	r5, [pc, #248]	; (8020998 <lv_textarea_add_char+0x124>)
 80208a0:	2100      	movs	r1, #0
 80208a2:	a801      	add	r0, sp, #4
 80208a4:	682b      	ldr	r3, [r5, #0]
 80208a6:	4798      	blx	r3
 80208a8:	4606      	mov	r6, r0
    if(ta->accepted_chars == NULL && ta->max_length == 0) return true;
 80208aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80208ae:	bb6a      	cbnz	r2, 802090c <lv_textarea_add_char+0x98>
 80208b0:	bb6b      	cbnz	r3, 802090e <lv_textarea_add_char+0x9a>
    if(ta->pwd_mode != 0) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 80208b2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80208b6:	075a      	lsls	r2, r3, #29
 80208b8:	d502      	bpl.n	80208c0 <lv_textarea_add_char+0x4c>
 80208ba:	4620      	mov	r0, r4
 80208bc:	f7ff fdae 	bl	802041c <pwd_char_hider>
    if(ta->placeholder_txt) {
 80208c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80208c2:	b13b      	cbz	r3, 80208d4 <lv_textarea_add_char+0x60>
        const char * txt = lv_label_get_text(ta->label);
 80208c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80208c6:	f7fd fb05 	bl	801ded4 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 80208ca:	7803      	ldrb	r3, [r0, #0]
 80208cc:	b913      	cbnz	r3, 80208d4 <lv_textarea_add_char+0x60>
 80208ce:	4620      	mov	r0, r4
 80208d0:	f7e4 fcd2 	bl	8005278 <lv_obj_invalidate>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 80208d4:	aa03      	add	r2, sp, #12
 80208d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80208d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80208da:	f7fd fcf3 	bl	801e2c4 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);                                                /*Clear selection*/
 80208de:	4620      	mov	r0, r4
 80208e0:	f7ff ff04 	bl	80206ec <lv_textarea_clear_selection>
    if(ta->pwd_mode != 0) {
 80208e4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80208e8:	075b      	lsls	r3, r3, #29
 80208ea:	d534      	bpl.n	8020956 <lv_textarea_add_char+0xe2>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + strlen(letter_buf) + 1); /*+2: the new char + \0*/
 80208ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80208ee:	4630      	mov	r0, r6
 80208f0:	f7df fc98 	bl	8000224 <strlen>
 80208f4:	4605      	mov	r5, r0
 80208f6:	a803      	add	r0, sp, #12
 80208f8:	f7df fc94 	bl	8000224 <strlen>
 80208fc:	4428      	add	r0, r5
 80208fe:	1c41      	adds	r1, r0, #1
 8020900:	4630      	mov	r0, r6
 8020902:	f7f7 f99f 	bl	8017c44 <lv_mem_realloc>
 8020906:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8020908:	b9e0      	cbnz	r0, 8020944 <lv_textarea_add_char+0xd0>
 802090a:	e7fe      	b.n	802090a <lv_textarea_add_char+0x96>
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 802090c:	b16b      	cbz	r3, 802092a <lv_textarea_add_char+0xb6>
 802090e:	4b23      	ldr	r3, [pc, #140]	; (802099c <lv_textarea_add_char+0x128>)
 8020910:	4620      	mov	r0, r4
 8020912:	681f      	ldr	r7, [r3, #0]
 8020914:	f7ff feda 	bl	80206cc <lv_textarea_get_text>
 8020918:	47b8      	blx	r7
 802091a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802091c:	4298      	cmp	r0, r3
 802091e:	d301      	bcc.n	8020924 <lv_textarea_add_char+0xb0>
}
 8020920:	b017      	add	sp, #92	; 0x5c
 8020922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ta->accepted_chars) {
 8020924:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020926:	2b00      	cmp	r3, #0
 8020928:	d0c3      	beq.n	80208b2 <lv_textarea_add_char+0x3e>
        uint32_t i = 0;
 802092a:	2300      	movs	r3, #0
 802092c:	9305      	str	r3, [sp, #20]
        while(ta->accepted_chars[i] != '\0') {
 802092e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020930:	9b05      	ldr	r3, [sp, #20]
 8020932:	5cc3      	ldrb	r3, [r0, r3]
 8020934:	2b00      	cmp	r3, #0
 8020936:	d0f3      	beq.n	8020920 <lv_textarea_add_char+0xac>
            uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 8020938:	682b      	ldr	r3, [r5, #0]
 802093a:	a905      	add	r1, sp, #20
 802093c:	4798      	blx	r3
            if(a == c) return true; /*Accepted*/
 802093e:	4286      	cmp	r6, r0
 8020940:	d1f5      	bne.n	802092e <lv_textarea_add_char+0xba>
 8020942:	e7b6      	b.n	80208b2 <lv_textarea_add_char+0x3e>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 8020944:	aa03      	add	r2, sp, #12
 8020946:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020948:	f7f8 fe4c 	bl	80195e4 <_lv_txt_ins>
        if(ta->pwd_show_time == 0) {
 802094c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 802094e:	b96b      	cbnz	r3, 802096c <lv_textarea_add_char+0xf8>
            pwd_char_hider(obj);
 8020950:	4620      	mov	r0, r4
 8020952:	f7ff fd63 	bl	802041c <pwd_char_hider>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 8020956:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020958:	4620      	mov	r0, r4
 802095a:	3101      	adds	r1, #1
 802095c:	f7ff fde2 	bl	8020524 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8020960:	2200      	movs	r2, #0
 8020962:	211c      	movs	r1, #28
 8020964:	4620      	mov	r0, r4
 8020966:	f7e1 fb5f 	bl	8002028 <lv_event_send>
 802096a:	e7d9      	b.n	8020920 <lv_textarea_add_char+0xac>
            lv_anim_init(&a);
 802096c:	a805      	add	r0, sp, #20
 802096e:	f7f6 fa55 	bl	8016e1c <lv_anim_init>
    a->exec_cb = exec_cb;
 8020972:	4b0b      	ldr	r3, [pc, #44]	; (80209a0 <lv_textarea_add_char+0x12c>)
            lv_anim_start(&a);
 8020974:	a805      	add	r0, sp, #20
    a->var = var;
 8020976:	9405      	str	r4, [sp, #20]
    a->exec_cb = exec_cb;
 8020978:	9306      	str	r3, [sp, #24]
    a->time = duration;
 802097a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 802097c:	930f      	str	r3, [sp, #60]	; 0x3c
    a->start_value = start;
 802097e:	2300      	movs	r3, #0
    a->current_value = start;
 8020980:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    a->end_value = end;
 8020984:	2301      	movs	r3, #1
 8020986:	930e      	str	r3, [sp, #56]	; 0x38
    a->path_cb = path_cb;
 8020988:	4b06      	ldr	r3, [pc, #24]	; (80209a4 <lv_textarea_add_char+0x130>)
 802098a:	930b      	str	r3, [sp, #44]	; 0x2c
    a->ready_cb = ready_cb;
 802098c:	4b06      	ldr	r3, [pc, #24]	; (80209a8 <lv_textarea_add_char+0x134>)
 802098e:	9308      	str	r3, [sp, #32]
 8020990:	f7f6 fa8a 	bl	8016ea8 <lv_anim_start>
 8020994:	e7df      	b.n	8020956 <lv_textarea_add_char+0xe2>
 8020996:	bf00      	nop
 8020998:	20000040 	.word	0x20000040
 802099c:	2000004c 	.word	0x2000004c
 80209a0:	08020129 	.word	0x08020129
 80209a4:	08016fb3 	.word	0x08016fb3
 80209a8:	080204b9 	.word	0x080204b9

080209ac <lv_textarea_del_char>:
{
 80209ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(cur_pos == 0) return;
 80209ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 80209b0:	4604      	mov	r4, r0
    if(cur_pos == 0) return;
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d04d      	beq.n	8020a52 <lv_textarea_del_char+0xa6>
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 80209b6:	237f      	movs	r3, #127	; 0x7f
    lv_res_t res = insert_handler(obj, del_buf);
 80209b8:	a903      	add	r1, sp, #12
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 80209ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    lv_res_t res = insert_handler(obj, del_buf);
 80209be:	f7ff ff3b 	bl	8020838 <insert_handler>
    if(res != LV_RES_OK) return;
 80209c2:	2801      	cmp	r0, #1
    lv_res_t res = insert_handler(obj, del_buf);
 80209c4:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return;
 80209c6:	d144      	bne.n	8020a52 <lv_textarea_del_char+0xa6>
    char * label_txt = lv_label_get_text(ta->label);
 80209c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80209ca:	f7fd fa83 	bl	801ded4 <lv_label_get_text>
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 80209ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
    char * label_txt = lv_label_get_text(ta->label);
 80209d0:	4606      	mov	r6, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 80209d2:	462a      	mov	r2, r5
 80209d4:	3901      	subs	r1, #1
 80209d6:	f7f8 fe2d 	bl	8019634 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 80209da:	4631      	mov	r1, r6
 80209dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80209de:	f7fd f9c7 	bl	801dd70 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 80209e2:	4620      	mov	r0, r4
 80209e4:	f7ff fe82 	bl	80206ec <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 80209e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80209ea:	b13b      	cbz	r3, 80209fc <lv_textarea_del_char+0x50>
        const char * txt = lv_label_get_text(ta->label);
 80209ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80209ee:	f7fd fa71 	bl	801ded4 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 80209f2:	7803      	ldrb	r3, [r0, #0]
 80209f4:	b913      	cbnz	r3, 80209fc <lv_textarea_del_char+0x50>
 80209f6:	4620      	mov	r0, r4
 80209f8:	f7e4 fc3e 	bl	8005278 <lv_obj_invalidate>
    if(ta->pwd_mode != 0) {
 80209fc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020a00:	075b      	lsls	r3, r3, #29
 8020a02:	d51c      	bpl.n	8020a3e <lv_textarea_del_char+0x92>
        uint32_t byte_pos = _lv_txt_encoded_get_byte_id(ta->pwd_tmp, ta->cursor.pos - 1);
 8020a04:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020a06:	4b14      	ldr	r3, [pc, #80]	; (8020a58 <lv_textarea_del_char+0xac>)
 8020a08:	3901      	subs	r1, #1
 8020a0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	4798      	blx	r3
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, _lv_txt_encoded_size(&ta->pwd_tmp[byte_pos]));
 8020a10:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020a12:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8020a14:	4b11      	ldr	r3, [pc, #68]	; (8020a5c <lv_textarea_del_char+0xb0>)
 8020a16:	3901      	subs	r1, #1
 8020a18:	4428      	add	r0, r5
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	9101      	str	r1, [sp, #4]
 8020a1e:	4798      	blx	r3
 8020a20:	9901      	ldr	r1, [sp, #4]
 8020a22:	4602      	mov	r2, r0
 8020a24:	4628      	mov	r0, r5
 8020a26:	f7f8 fe05 	bl	8019634 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8020a2a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8020a2c:	4628      	mov	r0, r5
 8020a2e:	f7df fbf9 	bl	8000224 <strlen>
 8020a32:	1c41      	adds	r1, r0, #1
 8020a34:	4628      	mov	r0, r5
 8020a36:	f7f7 f905 	bl	8017c44 <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8020a3a:	b160      	cbz	r0, 8020a56 <lv_textarea_del_char+0xaa>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 8020a3c:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 8020a3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020a40:	4620      	mov	r0, r4
 8020a42:	3901      	subs	r1, #1
 8020a44:	f7ff fd6e 	bl	8020524 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8020a48:	2200      	movs	r2, #0
 8020a4a:	211c      	movs	r1, #28
 8020a4c:	4620      	mov	r0, r4
 8020a4e:	f7e1 faeb 	bl	8002028 <lv_event_send>
}
 8020a52:	b004      	add	sp, #16
 8020a54:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8020a56:	e7fe      	b.n	8020a56 <lv_textarea_del_char+0xaa>
 8020a58:	20000038 	.word	0x20000038
 8020a5c:	20000048 	.word	0x20000048

08020a60 <lv_textarea_del_char_forward>:
{
 8020a60:	b538      	push	{r3, r4, r5, lr}
    return ta->cursor.pos;
 8020a62:	6c05      	ldr	r5, [r0, #64]	; 0x40
{
 8020a64:	4604      	mov	r4, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 8020a66:	1c69      	adds	r1, r5, #1
 8020a68:	f7ff fd5c 	bl	8020524 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8020a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020a6e:	429d      	cmp	r5, r3
 8020a70:	d004      	beq.n	8020a7c <lv_textarea_del_char_forward+0x1c>
 8020a72:	4620      	mov	r0, r4
}
 8020a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8020a78:	f7ff bf98 	b.w	80209ac <lv_textarea_del_char>
}
 8020a7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08020a80 <lv_textarea_set_text>:
{
 8020a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a82:	4604      	mov	r4, r0
 8020a84:	b093      	sub	sp, #76	; 0x4c
    LV_ASSERT_NULL(txt);
 8020a86:	460d      	mov	r5, r1
 8020a88:	b901      	cbnz	r1, 8020a8c <lv_textarea_set_text+0xc>
 8020a8a:	e7fe      	b.n	8020a8a <lv_textarea_set_text+0xa>
    lv_textarea_clear_selection(obj);
 8020a8c:	f7ff fe2e 	bl	80206ec <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 8020a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020a92:	b913      	cbnz	r3, 8020a9a <lv_textarea_set_text+0x1a>
 8020a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d03a      	beq.n	8020b10 <lv_textarea_set_text+0x90>
        lv_label_set_text(ta->label, "");
 8020a9a:	4934      	ldr	r1, [pc, #208]	; (8020b6c <lv_textarea_set_text+0xec>)
 8020a9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020a9e:	f7fd f967 	bl	801dd70 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8020aa2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8020aa6:	4620      	mov	r0, r4
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8020aa8:	4e31      	ldr	r6, [pc, #196]	; (8020b70 <lv_textarea_set_text+0xf0>)
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8020aaa:	f7ff fd3b 	bl	8020524 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode != 0) {
 8020aae:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8020ab2:	4f30      	ldr	r7, [pc, #192]	; (8020b74 <lv_textarea_set_text+0xf4>)
        if(ta->pwd_mode != 0) {
 8020ab4:	f013 0f04 	tst.w	r3, #4
 8020ab8:	f04f 0300 	mov.w	r3, #0
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 8020abc:	bf1c      	itt	ne
 8020abe:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8020ac0:	7013      	strbne	r3, [r2, #0]
        uint32_t i = 0;
 8020ac2:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 8020ac4:	9b01      	ldr	r3, [sp, #4]
 8020ac6:	5ceb      	ldrb	r3, [r5, r3]
 8020ac8:	b9bb      	cbnz	r3, 8020afa <lv_textarea_set_text+0x7a>
    if(ta->placeholder_txt) {
 8020aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020acc:	b13b      	cbz	r3, 8020ade <lv_textarea_set_text+0x5e>
        const char * txt_act = lv_label_get_text(ta->label);
 8020ace:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020ad0:	f7fd fa00 	bl	801ded4 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 8020ad4:	7803      	ldrb	r3, [r0, #0]
 8020ad6:	b913      	cbnz	r3, 8020ade <lv_textarea_set_text+0x5e>
 8020ad8:	4620      	mov	r0, r4
 8020ada:	f7e4 fbcd 	bl	8005278 <lv_obj_invalidate>
    if(ta->pwd_mode != 0) {
 8020ade:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020ae2:	075b      	lsls	r3, r3, #29
 8020ae4:	d526      	bpl.n	8020b34 <lv_textarea_set_text+0xb4>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 8020ae6:	4628      	mov	r0, r5
 8020ae8:	f7df fb9c 	bl	8000224 <strlen>
 8020aec:	1c41      	adds	r1, r0, #1
 8020aee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8020af0:	f7f7 f8a8 	bl	8017c44 <lv_mem_realloc>
 8020af4:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8020af6:	b9a8      	cbnz	r0, 8020b24 <lv_textarea_set_text+0xa4>
 8020af8:	e7fe      	b.n	8020af8 <lv_textarea_set_text+0x78>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 8020afa:	a901      	add	r1, sp, #4
 8020afc:	6833      	ldr	r3, [r6, #0]
 8020afe:	4628      	mov	r0, r5
 8020b00:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8020b02:	683b      	ldr	r3, [r7, #0]
 8020b04:	4798      	blx	r3
 8020b06:	4601      	mov	r1, r0
 8020b08:	4620      	mov	r0, r4
 8020b0a:	f7ff feb3 	bl	8020874 <lv_textarea_add_char>
 8020b0e:	e7d9      	b.n	8020ac4 <lv_textarea_set_text+0x44>
        lv_label_set_text(ta->label, txt);
 8020b10:	4629      	mov	r1, r5
 8020b12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020b14:	f7fd f92c 	bl	801dd70 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8020b18:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8020b1c:	4620      	mov	r0, r4
 8020b1e:	f7ff fd01 	bl	8020524 <lv_textarea_set_cursor_pos>
 8020b22:	e7d2      	b.n	8020aca <lv_textarea_set_text+0x4a>
        strcpy(ta->pwd_tmp, txt);
 8020b24:	4629      	mov	r1, r5
 8020b26:	f003 f8af 	bl	8023c88 <strcpy>
        if(ta->pwd_show_time == 0) {
 8020b2a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b2c:	b94b      	cbnz	r3, 8020b42 <lv_textarea_set_text+0xc2>
            pwd_char_hider(obj);
 8020b2e:	4620      	mov	r0, r4
 8020b30:	f7ff fc74 	bl	802041c <pwd_char_hider>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8020b34:	2200      	movs	r2, #0
 8020b36:	211c      	movs	r1, #28
 8020b38:	4620      	mov	r0, r4
 8020b3a:	f7e1 fa75 	bl	8002028 <lv_event_send>
}
 8020b3e:	b013      	add	sp, #76	; 0x4c
 8020b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_anim_init(&a);
 8020b42:	a801      	add	r0, sp, #4
 8020b44:	f7f6 f96a 	bl	8016e1c <lv_anim_init>
    a->exec_cb = exec_cb;
 8020b48:	4b0b      	ldr	r3, [pc, #44]	; (8020b78 <lv_textarea_set_text+0xf8>)
            lv_anim_start(&a);
 8020b4a:	a801      	add	r0, sp, #4
    a->var = var;
 8020b4c:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 8020b4e:	9302      	str	r3, [sp, #8]
    a->time = duration;
 8020b50:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b52:	930b      	str	r3, [sp, #44]	; 0x2c
    a->start_value = start;
 8020b54:	2300      	movs	r3, #0
    a->current_value = start;
 8020b56:	e9cd 3308 	strd	r3, r3, [sp, #32]
    a->end_value = end;
 8020b5a:	2301      	movs	r3, #1
 8020b5c:	930a      	str	r3, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 8020b5e:	4b07      	ldr	r3, [pc, #28]	; (8020b7c <lv_textarea_set_text+0xfc>)
 8020b60:	9307      	str	r3, [sp, #28]
    a->ready_cb = ready_cb;
 8020b62:	4b07      	ldr	r3, [pc, #28]	; (8020b80 <lv_textarea_set_text+0x100>)
 8020b64:	9304      	str	r3, [sp, #16]
 8020b66:	f7f6 f99f 	bl	8016ea8 <lv_anim_start>
 8020b6a:	e7e3      	b.n	8020b34 <lv_textarea_set_text+0xb4>
 8020b6c:	08029f9b 	.word	0x08029f9b
 8020b70:	20000040 	.word	0x20000040
 8020b74:	20000050 	.word	0x20000050
 8020b78:	08020129 	.word	0x08020129
 8020b7c:	08016fb3 	.word	0x08016fb3
 8020b80:	080204b9 	.word	0x080204b9

08020b84 <lv_textarea_cursor_right>:
    cp++;
 8020b84:	6c01      	ldr	r1, [r0, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, cp);
 8020b86:	3101      	adds	r1, #1
 8020b88:	f7ff bccc 	b.w	8020524 <lv_textarea_set_cursor_pos>

08020b8c <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 8020b8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    if(cp > 0) {
 8020b8e:	b111      	cbz	r1, 8020b96 <lv_textarea_cursor_left+0xa>
        lv_textarea_set_cursor_pos(obj, cp);
 8020b90:	3901      	subs	r1, #1
 8020b92:	f7ff bcc7 	b.w	8020524 <lv_textarea_set_cursor_pos>
}
 8020b96:	4770      	bx	lr

08020b98 <lv_textarea_cursor_down>:
{
 8020b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020b9a:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8020b9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020b9e:	aa01      	add	r2, sp, #4
 8020ba0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020ba2:	f7fd f999 	bl	801ded8 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8020ba6:	f241 425b 	movw	r2, #5211	; 0x145b
 8020baa:	2100      	movs	r1, #0
 8020bac:	4620      	mov	r0, r4
 8020bae:	f7e6 fc8b 	bl	80074c8 <lv_obj_get_style_prop>
 8020bb2:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8020bb4:	4620      	mov	r0, r4
 8020bb6:	f7ff fac7 	bl	8020148 <lv_obj_get_style_text_font.constprop.0>
    pos.y += font_h + line_space + 1;
 8020bba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8020bbe:	441d      	add	r5, r3
 8020bc0:	8903      	ldrh	r3, [r0, #8]
    if(pos.y < lv_obj_get_height(ta->label)) {
 8020bc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y += font_h + line_space + 1;
 8020bc4:	3501      	adds	r5, #1
 8020bc6:	441d      	add	r5, r3
    pos.x = ta->cursor.valid_x;
 8020bc8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    pos.y += font_h + line_space + 1;
 8020bca:	b22d      	sxth	r5, r5
    pos.x = ta->cursor.valid_x;
 8020bcc:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos.y += font_h + line_space + 1;
 8020bd0:	f8ad 5006 	strh.w	r5, [sp, #6]
    if(pos.y < lv_obj_get_height(ta->label)) {
 8020bd4:	f7e4 fa01 	bl	8004fda <lv_obj_get_height>
 8020bd8:	4285      	cmp	r5, r0
 8020bda:	da0a      	bge.n	8020bf2 <lv_textarea_cursor_down+0x5a>
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8020bdc:	a901      	add	r1, sp, #4
 8020bde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020be0:	f7fd fa6a 	bl	801e0b8 <lv_label_get_letter_on>
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8020be4:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8020be8:	4601      	mov	r1, r0
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8020bea:	4620      	mov	r0, r4
 8020bec:	f7ff fc9a 	bl	8020524 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 8020bf0:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8020bf2:	b003      	add	sp, #12
 8020bf4:	bd30      	pop	{r4, r5, pc}

08020bf6 <lv_textarea_cursor_up>:
{
 8020bf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020bf8:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8020bfa:	aa01      	add	r2, sp, #4
 8020bfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020bfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020c00:	f7fd f96a 	bl	801ded8 <lv_label_get_letter_pos>
 8020c04:	f241 425b 	movw	r2, #5211	; 0x145b
 8020c08:	2100      	movs	r1, #0
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	f7e6 fc5c 	bl	80074c8 <lv_obj_get_style_prop>
 8020c10:	4605      	mov	r5, r0
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8020c12:	4620      	mov	r0, r4
 8020c14:	f7ff fa98 	bl	8020148 <lv_obj_get_style_text_font.constprop.0>
    pos.y -= font_h + line_space - 1;
 8020c18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8020c1c:	8900      	ldrh	r0, [r0, #8]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8020c1e:	a901      	add	r1, sp, #4
    pos.y -= font_h + line_space - 1;
 8020c20:	3201      	adds	r2, #1
 8020c22:	1b53      	subs	r3, r2, r5
 8020c24:	1a1b      	subs	r3, r3, r0
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8020c26:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pos.y -= font_h + line_space - 1;
 8020c28:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 8020c2c:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8020c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8020c32:	f7fd fa41 	bl	801e0b8 <lv_label_get_letter_on>
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8020c36:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 8020c3a:	4601      	mov	r1, r0
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8020c3c:	4620      	mov	r0, r4
 8020c3e:	f7ff fc71 	bl	8020524 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 8020c42:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8020c44:	b003      	add	sp, #12
 8020c46:	bd30      	pop	{r4, r5, pc}

08020c48 <lv_textarea_event>:
{
 8020c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8020c4c:	489c      	ldr	r0, [pc, #624]	; (8020ec0 <lv_textarea_event+0x278>)
{
 8020c4e:	b09e      	sub	sp, #120	; 0x78
 8020c50:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8020c52:	f7e1 f972 	bl	8001f3a <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8020c56:	2801      	cmp	r0, #1
 8020c58:	d114      	bne.n	8020c84 <lv_textarea_event+0x3c>
    lv_event_code_t code = lv_event_get_code(e);
 8020c5a:	4628      	mov	r0, r5
 8020c5c:	f7e1 fa06 	bl	800206c <lv_event_get_code>
 8020c60:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8020c62:	4628      	mov	r0, r5
 8020c64:	f7e1 fa00 	bl	8002068 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8020c68:	2e24      	cmp	r6, #36	; 0x24
    lv_obj_t * obj = lv_event_get_target(e);
 8020c6a:	4604      	mov	r4, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8020c6c:	d10d      	bne.n	8020c8a <lv_textarea_event+0x42>
        if(ta->label) {
 8020c6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020c70:	b140      	cbz	r0, 8020c84 <lv_textarea_event+0x3c>
            lv_label_set_text(ta->label, NULL);
 8020c72:	2100      	movs	r1, #0
 8020c74:	f7fd f87c 	bl	801dd70 <lv_label_set_text>
            refr_cursor_area(obj);
 8020c78:	4620      	mov	r0, r4
 8020c7a:	f7ff fac9 	bl	8020210 <refr_cursor_area>
            start_cursor_blink(obj);
 8020c7e:	4620      	mov	r0, r4
        start_cursor_blink(obj);
 8020c80:	f7ff fa6a 	bl	8020158 <start_cursor_blink>
}
 8020c84:	b01e      	add	sp, #120	; 0x78
 8020c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(code == LV_EVENT_FOCUSED) {
 8020c8a:	2e0e      	cmp	r6, #14
 8020c8c:	d0f8      	beq.n	8020c80 <lv_textarea_event+0x38>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8020c8e:	2e23      	cmp	r6, #35	; 0x23
 8020c90:	d10e      	bne.n	8020cb0 <lv_textarea_event+0x68>
        if(ta->label) {
 8020c92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020c94:	2800      	cmp	r0, #0
 8020c96:	d0f5      	beq.n	8020c84 <lv_textarea_event+0x3c>
            lv_obj_set_pos(ta->label, 0, 0);
 8020c98:	2200      	movs	r2, #0
 8020c9a:	4611      	mov	r1, r2
 8020c9c:	f7e4 f8f6 	bl	8004e8c <lv_obj_set_pos>
            lv_label_set_text(ta->label, NULL); /*Refresh the label*/
 8020ca0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020ca2:	2100      	movs	r1, #0
 8020ca4:	f7fd f864 	bl	801dd70 <lv_label_set_text>
            refr_cursor_area(obj);
 8020ca8:	4620      	mov	r0, r4
 8020caa:	f7ff fab1 	bl	8020210 <refr_cursor_area>
 8020cae:	e7e9      	b.n	8020c84 <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_KEY) {
 8020cb0:	2e0d      	cmp	r6, #13
 8020cb2:	d143      	bne.n	8020d3c <lv_textarea_event+0xf4>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8020cb4:	4628      	mov	r0, r5
 8020cb6:	f7e1 f9db 	bl	8002070 <lv_event_get_param>
 8020cba:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 8020cbc:	2913      	cmp	r1, #19
 8020cbe:	d103      	bne.n	8020cc8 <lv_textarea_event+0x80>
            lv_textarea_cursor_right(obj);
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	f7ff ff5f 	bl	8020b84 <lv_textarea_cursor_right>
 8020cc6:	e7dd      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_LEFT)
 8020cc8:	2914      	cmp	r1, #20
 8020cca:	d103      	bne.n	8020cd4 <lv_textarea_event+0x8c>
            lv_textarea_cursor_left(obj);
 8020ccc:	4620      	mov	r0, r4
 8020cce:	f7ff ff5d 	bl	8020b8c <lv_textarea_cursor_left>
 8020cd2:	e7d7      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_UP)
 8020cd4:	2911      	cmp	r1, #17
 8020cd6:	d103      	bne.n	8020ce0 <lv_textarea_event+0x98>
            lv_textarea_cursor_up(obj);
 8020cd8:	4620      	mov	r0, r4
 8020cda:	f7ff ff8c 	bl	8020bf6 <lv_textarea_cursor_up>
 8020cde:	e7d1      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_DOWN)
 8020ce0:	2912      	cmp	r1, #18
 8020ce2:	d103      	bne.n	8020cec <lv_textarea_event+0xa4>
            lv_textarea_cursor_down(obj);
 8020ce4:	4620      	mov	r0, r4
 8020ce6:	f7ff ff57 	bl	8020b98 <lv_textarea_cursor_down>
 8020cea:	e7cb      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_BACKSPACE)
 8020cec:	2908      	cmp	r1, #8
 8020cee:	d103      	bne.n	8020cf8 <lv_textarea_event+0xb0>
            lv_textarea_del_char(obj);
 8020cf0:	4620      	mov	r0, r4
 8020cf2:	f7ff fe5b 	bl	80209ac <lv_textarea_del_char>
 8020cf6:	e7c5      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_DEL)
 8020cf8:	297f      	cmp	r1, #127	; 0x7f
 8020cfa:	d103      	bne.n	8020d04 <lv_textarea_event+0xbc>
            lv_textarea_del_char_forward(obj);
 8020cfc:	4620      	mov	r0, r4
 8020cfe:	f7ff feaf 	bl	8020a60 <lv_textarea_del_char_forward>
 8020d02:	e7bf      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_HOME)
 8020d04:	2902      	cmp	r1, #2
 8020d06:	d104      	bne.n	8020d12 <lv_textarea_event+0xca>
            lv_textarea_set_cursor_pos(obj, 0);
 8020d08:	2100      	movs	r1, #0
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8020d0a:	4620      	mov	r0, r4
 8020d0c:	f7ff fc0a 	bl	8020524 <lv_textarea_set_cursor_pos>
 8020d10:	e7b8      	b.n	8020c84 <lv_textarea_event+0x3c>
        else if(c == LV_KEY_END)
 8020d12:	2903      	cmp	r1, #3
 8020d14:	d102      	bne.n	8020d1c <lv_textarea_event+0xd4>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8020d16:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8020d1a:	e7f6      	b.n	8020d0a <lv_textarea_event+0xc2>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 8020d1c:	290a      	cmp	r1, #10
 8020d1e:	d109      	bne.n	8020d34 <lv_textarea_event+0xec>
    return ta->one_line == 0 ? false : true;
 8020d20:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 8020d24:	071d      	lsls	r5, r3, #28
 8020d26:	d505      	bpl.n	8020d34 <lv_textarea_event+0xec>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 8020d28:	2200      	movs	r2, #0
 8020d2a:	211f      	movs	r1, #31
 8020d2c:	4620      	mov	r0, r4
 8020d2e:	f7e1 f97b 	bl	8002028 <lv_event_send>
 8020d32:	e7a7      	b.n	8020c84 <lv_textarea_event+0x3c>
            lv_textarea_add_char(obj, c);
 8020d34:	4620      	mov	r0, r4
 8020d36:	f7ff fd9d 	bl	8020874 <lv_textarea_add_char>
 8020d3a:	e7a3      	b.n	8020c84 <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING || code == LV_EVENT_PRESS_LOST ||
 8020d3c:	1e73      	subs	r3, r6, #1
 8020d3e:	b2db      	uxtb	r3, r3
 8020d40:	2b02      	cmp	r3, #2
 8020d42:	d902      	bls.n	8020d4a <lv_textarea_event+0x102>
 8020d44:	2e08      	cmp	r6, #8
 8020d46:	f040 80bd 	bne.w	8020ec4 <lv_textarea_event+0x27c>
    lv_indev_t * click_source = lv_indev_get_act();
 8020d4a:	f7e1 fc03 	bl	8002554 <lv_indev_get_act>
    if(click_source == NULL) return;
 8020d4e:	4607      	mov	r7, r0
 8020d50:	2800      	cmp	r0, #0
 8020d52:	d097      	beq.n	8020c84 <lv_textarea_event+0x3c>
    lv_event_code_t code = lv_event_get_code(e);
 8020d54:	4628      	mov	r0, r5
 8020d56:	f7e1 f989 	bl	800206c <lv_event_get_code>
 8020d5a:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8020d5c:	4628      	mov	r0, r5
 8020d5e:	f7e1 f983 	bl	8002068 <lv_event_get_target>
    if(ta->cursor.click_pos == 0) return;
 8020d62:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    lv_obj_t * obj = lv_event_get_target(e);
 8020d66:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 8020d68:	0798      	lsls	r0, r3, #30
 8020d6a:	d58b      	bpl.n	8020c84 <lv_textarea_event+0x3c>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8020d6c:	4638      	mov	r0, r7
 8020d6e:	f7e1 fbf7 	bl	8002560 <lv_indev_get_type>
 8020d72:	2802      	cmp	r0, #2
 8020d74:	d086      	beq.n	8020c84 <lv_textarea_event+0x3c>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 8020d76:	4638      	mov	r0, r7
 8020d78:	f7e1 fbf2 	bl	8002560 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8020d7c:	2804      	cmp	r0, #4
 8020d7e:	d081      	beq.n	8020c84 <lv_textarea_event+0x3c>
    lv_obj_get_coords(ta->label, &label_coords);
 8020d80:	a911      	add	r1, sp, #68	; 0x44
 8020d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020d84:	f7e4 f8d3 	bl	8004f2e <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 8020d88:	a905      	add	r1, sp, #20
 8020d8a:	4638      	mov	r0, r7
 8020d8c:	f7e1 fc43 	bl	8002616 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 8020d90:	a907      	add	r1, sp, #28
 8020d92:	4638      	mov	r0, r7
 8020d94:	f7e1 fc6d 	bl	8002672 <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 8020d98:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8020d9c:	2a00      	cmp	r2, #0
 8020d9e:	f6ff af71 	blt.w	8020c84 <lv_textarea_event+0x3c>
 8020da2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	f6ff af6c 	blt.w	8020c84 <lv_textarea_event+0x3c>
    rel_pos.x = point_act.x - label_coords.x1;
 8020dac:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 8020db0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    rel_pos.x = point_act.x - label_coords.x1;
 8020db2:	1a52      	subs	r2, r2, r1
 8020db4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    rel_pos.y = point_act.y - label_coords.y1;
 8020db8:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8020dbc:	1a9b      	subs	r3, r3, r2
 8020dbe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 8020dc2:	f7e4 f904 	bl	8004fce <lv_obj_get_width>
    if(rel_pos.x < 0) {
 8020dc6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
    lv_label_t * label_data = (lv_label_t *)ta->label;
 8020dca:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	db3b      	blt.n	8020e48 <lv_textarea_event+0x200>
    else if(rel_pos.x >= label_width) {
 8020dd0:	4298      	cmp	r0, r3
 8020dd2:	dd3c      	ble.n	8020e4e <lv_textarea_event+0x206>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8020dd4:	a909      	add	r1, sp, #36	; 0x24
 8020dd6:	4628      	mov	r0, r5
 8020dd8:	f7fd f96e 	bl	801e0b8 <lv_label_get_letter_on>
        click_outside_label       = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8020ddc:	a909      	add	r1, sp, #36	; 0x24
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8020dde:	b287      	uxth	r7, r0
        click_outside_label       = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8020de0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020de2:	f7fd f96d 	bl	801e0c0 <lv_label_is_char_under_pos>
 8020de6:	f080 0001 	eor.w	r0, r0, #1
 8020dea:	b2c0      	uxtb	r0, r0
    if(ta->text_sel_en) {
 8020dec:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020df0:	0799      	lsls	r1, r3, #30
 8020df2:	d540      	bpl.n	8020e76 <lv_textarea_event+0x22e>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 8020df4:	07da      	lsls	r2, r3, #31
 8020df6:	d443      	bmi.n	8020e80 <lv_textarea_event+0x238>
 8020df8:	b368      	cbz	r0, 8020e56 <lv_textarea_event+0x20e>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8020dfa:	2e01      	cmp	r6, #1
 8020dfc:	f47f af42 	bne.w	8020c84 <lv_textarea_event+0x3c>
 8020e00:	4639      	mov	r1, r7
 8020e02:	4620      	mov	r0, r4
 8020e04:	f7ff fb8e 	bl	8020524 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 8020e08:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020e0c:	07db      	lsls	r3, r3, #31
 8020e0e:	f57f af39 	bpl.w	8020c84 <lv_textarea_event+0x3c>
        if(ta->sel_start > ta->sel_end) {
 8020e12:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8020e14:	e9d4 2315 	ldrd	r2, r3, [r4, #84]	; 0x54
 8020e18:	429a      	cmp	r2, r3
 8020e1a:	d93f      	bls.n	8020e9c <lv_textarea_event+0x254>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 8020e1c:	428b      	cmp	r3, r1
 8020e1e:	d102      	bne.n	8020e26 <lv_textarea_event+0x1de>
 8020e20:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8020e22:	428a      	cmp	r2, r1
 8020e24:	d004      	beq.n	8020e30 <lv_textarea_event+0x1e8>
                label_data->sel_end   = ta->sel_start;
 8020e26:	e9c5 320f 	strd	r3, r2, [r5, #60]	; 0x3c
                lv_obj_invalidate(obj);
 8020e2a:	4620      	mov	r0, r4
 8020e2c:	f7e4 fa24 	bl	8005278 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 8020e30:	2e03      	cmp	r6, #3
 8020e32:	d002      	beq.n	8020e3a <lv_textarea_event+0x1f2>
 8020e34:	2e08      	cmp	r6, #8
 8020e36:	f47f af25 	bne.w	8020c84 <lv_textarea_event+0x3c>
            ta->text_sel_in_prog = 0;
 8020e3a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020e3e:	f36f 0300 	bfc	r3, #0, #1
 8020e42:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8020e46:	e71d      	b.n	8020c84 <lv_textarea_event+0x3c>
        click_outside_label       = true;
 8020e48:	2001      	movs	r0, #1
        char_id_at_click = 0;
 8020e4a:	2700      	movs	r7, #0
 8020e4c:	e7ce      	b.n	8020dec <lv_textarea_event+0x1a4>
        click_outside_label       = true;
 8020e4e:	2001      	movs	r0, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 8020e50:	f647 77ff 	movw	r7, #32767	; 0x7fff
 8020e54:	e7ca      	b.n	8020dec <lv_textarea_event+0x1a4>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 8020e56:	2e01      	cmp	r6, #1
 8020e58:	f47f af14 	bne.w	8020c84 <lv_textarea_event+0x3c>
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 8020e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
            ta->text_sel_in_prog = 1;
 8020e60:	f043 0301 	orr.w	r3, r3, #1
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8020e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020e68:	4620      	mov	r0, r4
            ta->sel_start    = char_id_at_click;
 8020e6a:	6567      	str	r7, [r4, #84]	; 0x54
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 8020e6c:	65a2      	str	r2, [r4, #88]	; 0x58
            ta->text_sel_in_prog = 1;
 8020e6e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8020e72:	f7e3 f81c 	bl	8003eae <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 8020e76:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8020e7a:	07d8      	lsls	r0, r3, #31
 8020e7c:	d5bd      	bpl.n	8020dfa <lv_textarea_event+0x1b2>
 8020e7e:	e7bf      	b.n	8020e00 <lv_textarea_event+0x1b8>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 8020e80:	2e02      	cmp	r6, #2
 8020e82:	d101      	bne.n	8020e88 <lv_textarea_event+0x240>
            ta->sel_end = char_id_at_click;
 8020e84:	65a7      	str	r7, [r4, #88]	; 0x58
 8020e86:	e7bb      	b.n	8020e00 <lv_textarea_event+0x1b8>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 8020e88:	2e03      	cmp	r6, #3
 8020e8a:	d001      	beq.n	8020e90 <lv_textarea_event+0x248>
 8020e8c:	2e08      	cmp	r6, #8
 8020e8e:	d1b7      	bne.n	8020e00 <lv_textarea_event+0x1b8>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8020e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020e94:	4620      	mov	r0, r4
 8020e96:	f7e2 ffe7 	bl	8003e68 <lv_obj_add_flag>
 8020e9a:	e7ec      	b.n	8020e76 <lv_textarea_event+0x22e>
        else if(ta->sel_start < ta->sel_end) {
 8020e9c:	d207      	bcs.n	8020eae <lv_textarea_event+0x266>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 8020e9e:	428a      	cmp	r2, r1
 8020ea0:	d102      	bne.n	8020ea8 <lv_textarea_event+0x260>
 8020ea2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8020ea4:	428b      	cmp	r3, r1
 8020ea6:	d0c3      	beq.n	8020e30 <lv_textarea_event+0x1e8>
                label_data->sel_start = ta->sel_start;
 8020ea8:	63ea      	str	r2, [r5, #60]	; 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8020eaa:	642b      	str	r3, [r5, #64]	; 0x40
 8020eac:	e7bd      	b.n	8020e2a <lv_textarea_event+0x1e2>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8020eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020eb2:	4299      	cmp	r1, r3
 8020eb4:	d102      	bne.n	8020ebc <lv_textarea_event+0x274>
 8020eb6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8020eb8:	429a      	cmp	r2, r3
 8020eba:	d0b9      	beq.n	8020e30 <lv_textarea_event+0x1e8>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8020ebc:	63eb      	str	r3, [r5, #60]	; 0x3c
 8020ebe:	e7f4      	b.n	8020eaa <lv_textarea_event+0x262>
 8020ec0:	08029f44 	.word	0x08029f44
    else if(code == LV_EVENT_DRAW_MAIN) {
 8020ec4:	2e15      	cmp	r6, #21
 8020ec6:	d15c      	bne.n	8020f82 <lv_textarea_event+0x33a>

static void draw_placeholder(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 8020ec8:	4628      	mov	r0, r5
 8020eca:	f7e1 f8cd 	bl	8002068 <lv_event_get_target>
 8020ece:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    const lv_area_t * clip_area = lv_event_get_param(e);
 8020ed0:	4628      	mov	r0, r5
 8020ed2:	f7e1 f8cd 	bl	8002070 <lv_event_get_param>
 8020ed6:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 8020ed8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020eda:	f7fc fffb 	bl	801ded4 <lv_label_get_text>

    /*Draw the place holder*/
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 8020ede:	7803      	ldrb	r3, [r0, #0]
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	f47f aecf 	bne.w	8020c84 <lv_textarea_event+0x3c>
 8020ee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	f43f aecb 	beq.w	8020c84 <lv_textarea_event+0x3c>
 8020eee:	781b      	ldrb	r3, [r3, #0]
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	f43f aec7 	beq.w	8020c84 <lv_textarea_event+0x3c>
        lv_draw_label_dsc_t ph_dsc;
        lv_draw_label_dsc_init(&ph_dsc);
 8020ef6:	a811      	add	r0, sp, #68	; 0x44
 8020ef8:	f7e9 fbc2 	bl	800a680 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 8020efc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8020f00:	aa11      	add	r2, sp, #68	; 0x44
 8020f02:	4620      	mov	r0, r4
 8020f04:	f7e3 fd18 	bl	8004938 <lv_obj_init_draw_label_dsc>

        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8020f08:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020f0c:	f241 0212 	movw	r2, #4114	; 0x1012
 8020f10:	4620      	mov	r0, r4
 8020f12:	0719      	lsls	r1, r3, #28
 8020f14:	f04f 0100 	mov.w	r1, #0
 8020f18:	bf42      	ittt	mi
 8020f1a:	f89d 3060 	ldrbmi.w	r3, [sp, #96]	; 0x60
 8020f1e:	f043 0302 	orrmi.w	r3, r3, #2
 8020f22:	f88d 3060 	strbmi.w	r3, [sp, #96]	; 0x60
 8020f26:	f7e6 facf 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020f2a:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020f2e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020f30:	2100      	movs	r1, #0
 8020f32:	4620      	mov	r0, r4
 8020f34:	f7e6 fac8 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8020f38:	f241 0232 	movw	r2, #4146	; 0x1032
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020f3c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8020f3e:	2100      	movs	r1, #0
 8020f40:	4620      	mov	r0, r4
 8020f42:	f7e6 fac1 	bl	80074c8 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8020f46:	8aa3      	ldrh	r3, [r4, #20]
        lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
        lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_area_t ph_coords;
        lv_area_copy(&ph_coords, &obj->coords);
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 8020f48:	fa15 f280 	uxtah	r2, r5, r0
 8020f4c:	fa17 f180 	uxtah	r1, r7, r0
 8020f50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8020f54:	a809      	add	r0, sp, #36	; 0x24
    dest->y1 = src->y1;
 8020f56:	8ae3      	ldrh	r3, [r4, #22]
 8020f58:	b212      	sxth	r2, r2
 8020f5a:	b209      	sxth	r1, r1
 8020f5c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    dest->x2 = src->x2;
 8020f60:	8b23      	ldrh	r3, [r4, #24]
 8020f62:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y2 = src->y2;
 8020f66:	8b63      	ldrh	r3, [r4, #26]
 8020f68:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020f6c:	f7f6 f872 	bl	8017054 <lv_area_move>
        lv_draw_label(&ph_coords, clip_area, &ph_dsc, ta->placeholder_txt, NULL);
 8020f70:	2300      	movs	r3, #0
 8020f72:	aa11      	add	r2, sp, #68	; 0x44
 8020f74:	4631      	mov	r1, r6
 8020f76:	a809      	add	r0, sp, #36	; 0x24
 8020f78:	9300      	str	r3, [sp, #0]
 8020f7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        cur_area.y1 += top + border_width;

        lv_draw_label_dsc_t cur_label_dsc;
        lv_draw_label_dsc_init(&cur_label_dsc);
        lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
        lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
 8020f7c:	f7e9 fd58 	bl	800aa30 <lv_draw_label>
 8020f80:	e680      	b.n	8020c84 <lv_textarea_event+0x3c>
    else if(code == LV_EVENT_DRAW_POST) {
 8020f82:	2e18      	cmp	r6, #24
 8020f84:	f47f ae7e 	bne.w	8020c84 <lv_textarea_event+0x3c>
    lv_obj_t * obj = lv_event_get_target(e);
 8020f88:	4628      	mov	r0, r5
 8020f8a:	f7e1 f86d 	bl	8002068 <lv_event_get_target>
 8020f8e:	4604      	mov	r4, r0
    const lv_area_t * clip_area = lv_event_get_param(e);
 8020f90:	4628      	mov	r0, r5
 8020f92:	f7e1 f86d 	bl	8002070 <lv_event_get_param>
 8020f96:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 8020f98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020f9a:	f7fc ff9b 	bl	801ded4 <lv_label_get_text>
    if(ta->cursor.show == 0) return;
 8020f9e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    const char * txt = lv_label_get_text(ta->label);
 8020fa2:	4605      	mov	r5, r0
    if(ta->cursor.show == 0) return;
 8020fa4:	07da      	lsls	r2, r3, #31
 8020fa6:	f57f ae6d 	bpl.w	8020c84 <lv_textarea_event+0x3c>
    lv_draw_rect_dsc_init(&cur_dsc);
 8020faa:	a811      	add	r0, sp, #68	; 0x44
 8020fac:	f7eb fe1c 	bl	800cbe8 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 8020fb0:	aa11      	add	r2, sp, #68	; 0x44
 8020fb2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8020fb6:	4620      	mov	r0, r4
 8020fb8:	f7e3 fb82 	bl	80046c0 <lv_obj_init_draw_rect_dsc>
    cur_area.x1 += ta->label->coords.x1;
 8020fbc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    dest->x2 = src->x2;
 8020fbe:	f9b4 e048 	ldrsh.w	lr, [r4, #72]	; 0x48
 8020fc2:	8aba      	ldrh	r2, [r7, #20]
    cur_area.y1 += ta->label->coords.y1;
 8020fc4:	8afb      	ldrh	r3, [r7, #22]
    char letter_buf[8] = {0};
 8020fc6:	2700      	movs	r7, #0
    dest->y1 = src->y1;
 8020fc8:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    cur_area.x1 += ta->label->coords.x1;
 8020fcc:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
    dest->y2 = src->y2;
 8020fd0:	f9b4 c04a 	ldrsh.w	ip, [r4, #74]	; 0x4a
    cur_area.y1 += ta->label->coords.y1;
 8020fd4:	4419      	add	r1, r3
    cur_area.x1 += ta->label->coords.x1;
 8020fd6:	4410      	add	r0, r2
    cur_area.x2 += ta->label->coords.x1;
 8020fd8:	4472      	add	r2, lr
    cur_area.y2 += ta->label->coords.y1;
 8020fda:	4463      	add	r3, ip
    cur_area.y1 += ta->label->coords.y1;
 8020fdc:	f8ad 1016 	strh.w	r1, [sp, #22]
    cur_area.x1 += ta->label->coords.x1;
 8020fe0:	f8ad 0014 	strh.w	r0, [sp, #20]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 8020fe4:	4631      	mov	r1, r6
 8020fe6:	a805      	add	r0, sp, #20
    cur_area.x2 += ta->label->coords.x1;
 8020fe8:	f8ad 2018 	strh.w	r2, [sp, #24]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 8020fec:	aa11      	add	r2, sp, #68	; 0x44
    cur_area.y2 += ta->label->coords.y1;
 8020fee:	f8ad 301a 	strh.w	r3, [sp, #26]
    lv_draw_rect(&cur_area, clip_area, &cur_dsc);
 8020ff2:	f7eb fe1b 	bl	800cc2c <lv_draw_rect>
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 8020ff6:	4b24      	ldr	r3, [pc, #144]	; (8021088 <lv_textarea_event+0x440>)
    char letter_buf[8] = {0};
 8020ff8:	e9cd 7707 	strd	r7, r7, [sp, #28]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 8020ffc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8020ffe:	681b      	ldr	r3, [r3, #0]
 8021000:	4429      	add	r1, r5
 8021002:	4608      	mov	r0, r1
 8021004:	9103      	str	r1, [sp, #12]
 8021006:	4798      	blx	r3
 8021008:	9903      	ldr	r1, [sp, #12]
 802100a:	4602      	mov	r2, r0
 802100c:	a807      	add	r0, sp, #28
 802100e:	f7f6 fcbb 	bl	8017988 <lv_memcpy>
    if(cur_dsc.bg_opa == LV_OPA_COVER) {
 8021012:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8021016:	2bff      	cmp	r3, #255	; 0xff
 8021018:	f47f ae34 	bne.w	8020c84 <lv_textarea_event+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802101c:	f241 0212 	movw	r2, #4114	; 0x1012
 8021020:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8021024:	4620      	mov	r0, r4
 8021026:	f7e6 fa4f 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802102a:	f241 0210 	movw	r2, #4112	; 0x1010
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802102e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8021030:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8021034:	4620      	mov	r0, r4
 8021036:	f7e6 fa47 	bl	80074c8 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802103a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802103e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8021040:	f241 0232 	movw	r2, #4146	; 0x1032
 8021044:	4620      	mov	r0, r4
 8021046:	f7e6 fa3f 	bl	80074c8 <lv_obj_get_style_prop>
        cur_area.y1 += top + border_width;
 802104a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 802104e:	4603      	mov	r3, r0
        cur_area.x1 += left + border_width;
 8021050:	f8bd 0014 	ldrh.w	r0, [sp, #20]
        cur_area.y1 += top + border_width;
 8021054:	fa12 f283 	uxtah	r2, r2, r3
        cur_area.x1 += left + border_width;
 8021058:	4405      	add	r5, r0
        lv_draw_label_dsc_init(&cur_label_dsc);
 802105a:	a809      	add	r0, sp, #36	; 0x24
        cur_area.x1 += left + border_width;
 802105c:	fa15 f583 	uxtah	r5, r5, r3
        cur_area.y1 += top + border_width;
 8021060:	eb02 0308 	add.w	r3, r2, r8
        cur_area.x1 += left + border_width;
 8021064:	f8ad 5014 	strh.w	r5, [sp, #20]
        cur_area.y1 += top + border_width;
 8021068:	f8ad 3016 	strh.w	r3, [sp, #22]
        lv_draw_label_dsc_init(&cur_label_dsc);
 802106c:	f7e9 fb08 	bl	800a680 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 8021070:	aa09      	add	r2, sp, #36	; 0x24
 8021072:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8021076:	4620      	mov	r0, r4
 8021078:	f7e3 fc5e 	bl	8004938 <lv_obj_init_draw_label_dsc>
        lv_draw_label(&cur_area, clip_area, &cur_label_dsc, letter_buf, NULL);
 802107c:	ab07      	add	r3, sp, #28
 802107e:	aa09      	add	r2, sp, #36	; 0x24
 8021080:	4631      	mov	r1, r6
 8021082:	a805      	add	r0, sp, #20
 8021084:	9700      	str	r7, [sp, #0]
 8021086:	e779      	b.n	8020f7c <lv_textarea_event+0x334>
 8021088:	20000048 	.word	0x20000048

0802108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802108c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802108e:	2003      	movs	r0, #3
 8021090:	f000 f81a 	bl	80210c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021094:	2000      	movs	r0, #0
 8021096:	f7e0 fc47 	bl	8001928 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 802109a:	f7e0 fc2d 	bl	80018f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 802109e:	2000      	movs	r0, #0
 80210a0:	bd08      	pop	{r3, pc}
	...

080210a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80210a4:	4a03      	ldr	r2, [pc, #12]	; (80210b4 <HAL_IncTick+0x10>)
 80210a6:	4b04      	ldr	r3, [pc, #16]	; (80210b8 <HAL_IncTick+0x14>)
 80210a8:	6811      	ldr	r1, [r2, #0]
 80210aa:	781b      	ldrb	r3, [r3, #0]
 80210ac:	440b      	add	r3, r1
 80210ae:	6013      	str	r3, [r2, #0]
}
 80210b0:	4770      	bx	lr
 80210b2:	bf00      	nop
 80210b4:	2000af74 	.word	0x2000af74
 80210b8:	20000070 	.word	0x20000070

080210bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80210bc:	4b01      	ldr	r3, [pc, #4]	; (80210c4 <HAL_GetTick+0x8>)
 80210be:	6818      	ldr	r0, [r3, #0]
}
 80210c0:	4770      	bx	lr
 80210c2:	bf00      	nop
 80210c4:	2000af74 	.word	0x2000af74

080210c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80210c8:	4907      	ldr	r1, [pc, #28]	; (80210e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80210ca:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80210cc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80210ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80210d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80210d6:	0412      	lsls	r2, r2, #16
 80210d8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80210da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80210dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80210e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80210e4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80210e6:	4770      	bx	lr
 80210e8:	e000ed00 	.word	0xe000ed00

080210ec <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80210ec:	4b16      	ldr	r3, [pc, #88]	; (8021148 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80210ee:	b530      	push	{r4, r5, lr}
 80210f0:	68dc      	ldr	r4, [r3, #12]
 80210f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80210f6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80210fa:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80210fc:	2d04      	cmp	r5, #4
 80210fe:	bf28      	it	cs
 8021100:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021102:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021104:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021108:	bf8c      	ite	hi
 802110a:	3c03      	subhi	r4, #3
 802110c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802110e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8021112:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021114:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021118:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802111c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021120:	fa01 f104 	lsl.w	r1, r1, r4
 8021124:	ea41 0302 	orr.w	r3, r1, r2
 8021128:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802112c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 802112e:	db06      	blt.n	802113e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021130:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8021134:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8021138:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 802113c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802113e:	f000 000f 	and.w	r0, r0, #15
 8021142:	4a02      	ldr	r2, [pc, #8]	; (802114c <HAL_NVIC_SetPriority+0x60>)
 8021144:	5413      	strb	r3, [r2, r0]
 8021146:	e7f9      	b.n	802113c <HAL_NVIC_SetPriority+0x50>
 8021148:	e000ed00 	.word	0xe000ed00
 802114c:	e000ed14 	.word	0xe000ed14

08021150 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8021150:	2800      	cmp	r0, #0
 8021152:	db08      	blt.n	8021166 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021154:	0942      	lsrs	r2, r0, #5
 8021156:	2301      	movs	r3, #1
 8021158:	f000 001f 	and.w	r0, r0, #31
 802115c:	fa03 f000 	lsl.w	r0, r3, r0
 8021160:	4b01      	ldr	r3, [pc, #4]	; (8021168 <HAL_NVIC_EnableIRQ+0x18>)
 8021162:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8021166:	4770      	bx	lr
 8021168:	e000e100 	.word	0xe000e100

0802116c <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 802116c:	2300      	movs	r3, #0
{
 802116e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8021170:	9301      	str	r3, [sp, #4]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8021172:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8021174:	4b5b      	ldr	r3, [pc, #364]	; (80212e4 <HAL_DMA_IRQHandler+0x178>)
{
 8021176:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8021178:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 802117a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802117c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 802117e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8021180:	409a      	lsls	r2, r3
 8021182:	4232      	tst	r2, r6
 8021184:	d00c      	beq.n	80211a0 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8021186:	6801      	ldr	r1, [r0, #0]
 8021188:	6808      	ldr	r0, [r1, #0]
 802118a:	0740      	lsls	r0, r0, #29
 802118c:	d508      	bpl.n	80211a0 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802118e:	6808      	ldr	r0, [r1, #0]
 8021190:	f020 0004 	bic.w	r0, r0, #4
 8021194:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8021196:	60aa      	str	r2, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8021198:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802119a:	f042 0201 	orr.w	r2, r2, #1
 802119e:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80211a0:	2201      	movs	r2, #1
 80211a2:	409a      	lsls	r2, r3
 80211a4:	4232      	tst	r2, r6
 80211a6:	d008      	beq.n	80211ba <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80211a8:	6821      	ldr	r1, [r4, #0]
 80211aa:	6949      	ldr	r1, [r1, #20]
 80211ac:	0609      	lsls	r1, r1, #24
 80211ae:	d504      	bpl.n	80211ba <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80211b0:	60aa      	str	r2, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80211b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80211b4:	f042 0202 	orr.w	r2, r2, #2
 80211b8:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80211ba:	2204      	movs	r2, #4
 80211bc:	409a      	lsls	r2, r3
 80211be:	4232      	tst	r2, r6
 80211c0:	d008      	beq.n	80211d4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80211c2:	6821      	ldr	r1, [r4, #0]
 80211c4:	6809      	ldr	r1, [r1, #0]
 80211c6:	0788      	lsls	r0, r1, #30
 80211c8:	d504      	bpl.n	80211d4 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80211ca:	60aa      	str	r2, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80211cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80211ce:	f042 0204 	orr.w	r2, r2, #4
 80211d2:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80211d4:	2210      	movs	r2, #16
 80211d6:	409a      	lsls	r2, r3
 80211d8:	4232      	tst	r2, r6
 80211da:	d010      	beq.n	80211fe <HAL_DMA_IRQHandler+0x92>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80211dc:	6823      	ldr	r3, [r4, #0]
 80211de:	6819      	ldr	r1, [r3, #0]
 80211e0:	0709      	lsls	r1, r1, #28
 80211e2:	d50c      	bpl.n	80211fe <HAL_DMA_IRQHandler+0x92>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80211e4:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80211e6:	681a      	ldr	r2, [r3, #0]
 80211e8:	0350      	lsls	r0, r2, #13
 80211ea:	d537      	bpl.n	802125c <HAL_DMA_IRQHandler+0xf0>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80211ec:	681b      	ldr	r3, [r3, #0]
 80211ee:	0319      	lsls	r1, r3, #12
 80211f0:	d401      	bmi.n	80211f6 <HAL_DMA_IRQHandler+0x8a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80211f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80211f4:	e000      	b.n	80211f8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80211f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80211f8:	b10b      	cbz	r3, 80211fe <HAL_DMA_IRQHandler+0x92>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80211fa:	4620      	mov	r0, r4
 80211fc:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80211fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021200:	2220      	movs	r2, #32
 8021202:	408a      	lsls	r2, r1
 8021204:	4232      	tst	r2, r6
 8021206:	d03a      	beq.n	802127e <HAL_DMA_IRQHandler+0x112>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8021208:	6823      	ldr	r3, [r4, #0]
 802120a:	6818      	ldr	r0, [r3, #0]
 802120c:	06c6      	lsls	r6, r0, #27
 802120e:	d536      	bpl.n	802127e <HAL_DMA_IRQHandler+0x112>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8021210:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8021212:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8021216:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8021218:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802121a:	d127      	bne.n	802126c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802121c:	f022 0216 	bic.w	r2, r2, #22
 8021220:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8021222:	695a      	ldr	r2, [r3, #20]
 8021224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802122a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802122c:	b90a      	cbnz	r2, 8021232 <HAL_DMA_IRQHandler+0xc6>
 802122e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8021230:	b11a      	cbz	r2, 802123a <HAL_DMA_IRQHandler+0xce>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021232:	681a      	ldr	r2, [r3, #0]
 8021234:	f022 0208 	bic.w	r2, r2, #8
 8021238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802123a:	233f      	movs	r3, #63	; 0x3f
 802123c:	408b      	lsls	r3, r1
 802123e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8021240:	2300      	movs	r3, #0
 8021242:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8021246:	2301      	movs	r3, #1
 8021248:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 802124c:	6d23      	ldr	r3, [r4, #80]	; 0x50

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
    }

    if(hdma->XferErrorCallback != NULL)
 802124e:	2b00      	cmp	r3, #0
 8021250:	d045      	beq.n	80212de <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8021252:	4620      	mov	r0, r4
    }
  }
}
 8021254:	b003      	add	sp, #12
 8021256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 802125a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802125c:	681a      	ldr	r2, [r3, #0]
 802125e:	05d2      	lsls	r2, r2, #23
 8021260:	d4c7      	bmi.n	80211f2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021262:	681a      	ldr	r2, [r3, #0]
 8021264:	f022 0208 	bic.w	r2, r2, #8
 8021268:	601a      	str	r2, [r3, #0]
 802126a:	e7c2      	b.n	80211f2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802126c:	0350      	lsls	r0, r2, #13
 802126e:	d527      	bpl.n	80212c0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	0319      	lsls	r1, r3, #12
 8021274:	d431      	bmi.n	80212da <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8021276:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8021278:	b10b      	cbz	r3, 802127e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 802127a:	4620      	mov	r0, r4
 802127c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802127e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021280:	b36b      	cbz	r3, 80212de <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8021282:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021284:	07da      	lsls	r2, r3, #31
 8021286:	d519      	bpl.n	80212bc <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8021288:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 802128c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 802128e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8021292:	2305      	movs	r3, #5
 8021294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8021298:	6813      	ldr	r3, [r2, #0]
 802129a:	f023 0301 	bic.w	r3, r3, #1
 802129e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80212a0:	9b01      	ldr	r3, [sp, #4]
 80212a2:	3301      	adds	r3, #1
 80212a4:	42bb      	cmp	r3, r7
 80212a6:	9301      	str	r3, [sp, #4]
 80212a8:	d802      	bhi.n	80212b0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80212aa:	6813      	ldr	r3, [r2, #0]
 80212ac:	07db      	lsls	r3, r3, #31
 80212ae:	d4f7      	bmi.n	80212a0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 80212b0:	2300      	movs	r3, #0
 80212b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80212b6:	2301      	movs	r3, #1
 80212b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80212bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80212be:	e7c6      	b.n	802124e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80212c0:	681a      	ldr	r2, [r3, #0]
 80212c2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80212c6:	d108      	bne.n	80212da <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80212c8:	6819      	ldr	r1, [r3, #0]
 80212ca:	f021 0110 	bic.w	r1, r1, #16
 80212ce:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80212d0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80212d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80212d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80212da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80212dc:	e7cc      	b.n	8021278 <HAL_DMA_IRQHandler+0x10c>
}
 80212de:	b003      	add	sp, #12
 80212e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212e2:	bf00      	nop
 80212e4:	20000000 	.word	0x20000000

080212e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80212e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80212ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80212ee:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80214ac <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80212f2:	4a6c      	ldr	r2, [pc, #432]	; (80214a4 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80212f4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80214b0 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80212f8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80212fa:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80212fc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80212fe:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8021302:	43ac      	bics	r4, r5
 8021304:	f040 80b4 	bne.w	8021470 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021308:	684c      	ldr	r4, [r1, #4]
 802130a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 802130e:	2503      	movs	r5, #3
 8021310:	f024 0c10 	bic.w	ip, r4, #16
 8021314:	fa05 f50e 	lsl.w	r5, r5, lr
 8021318:	f10c 37ff 	add.w	r7, ip, #4294967295
 802131c:	43ed      	mvns	r5, r5
 802131e:	2f01      	cmp	r7, #1
 8021320:	d811      	bhi.n	8021346 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 8021322:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8021324:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8021328:	68cf      	ldr	r7, [r1, #12]
 802132a:	fa07 f70e 	lsl.w	r7, r7, lr
 802132e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8021332:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8021334:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021336:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 802133a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 802133e:	409f      	lsls	r7, r3
 8021340:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8021344:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8021346:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021348:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 802134c:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8021350:	688f      	ldr	r7, [r1, #8]
 8021352:	fa07 f70e 	lsl.w	r7, r7, lr
 8021356:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 802135a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802135c:	d116      	bne.n	802138c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 802135e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8021362:	f003 0b07 	and.w	fp, r3, #7
 8021366:	f04f 0c0f 	mov.w	ip, #15
 802136a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 802136e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8021372:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8021376:	fa0c fc0b 	lsl.w	ip, ip, fp
 802137a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 802137e:	690f      	ldr	r7, [r1, #16]
 8021380:	fa07 f70b 	lsl.w	r7, r7, fp
 8021384:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8021388:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 802138c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 802138e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8021390:	f004 0703 	and.w	r7, r4, #3
 8021394:	fa07 fe0e 	lsl.w	lr, r7, lr
 8021398:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 802139c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802139e:	00e5      	lsls	r5, r4, #3
 80213a0:	d566      	bpl.n	8021470 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80213a2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80213a6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80213aa:	f003 0c03 	and.w	ip, r3, #3
 80213ae:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80213b2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80213b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80213ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80213be:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80213c2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80213c6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80213ca:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80213ce:	9501      	str	r5, [sp, #4]
 80213d0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80213d2:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80213d6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80213da:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80213de:	4d32      	ldr	r5, [pc, #200]	; (80214a8 <HAL_GPIO_Init+0x1c0>)
 80213e0:	42a8      	cmp	r0, r5
 80213e2:	d04c      	beq.n	802147e <HAL_GPIO_Init+0x196>
 80213e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80213e8:	42a8      	cmp	r0, r5
 80213ea:	d04a      	beq.n	8021482 <HAL_GPIO_Init+0x19a>
 80213ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80213f0:	42a8      	cmp	r0, r5
 80213f2:	d048      	beq.n	8021486 <HAL_GPIO_Init+0x19e>
 80213f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80213f8:	42a8      	cmp	r0, r5
 80213fa:	d046      	beq.n	802148a <HAL_GPIO_Init+0x1a2>
 80213fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8021400:	42a8      	cmp	r0, r5
 8021402:	d044      	beq.n	802148e <HAL_GPIO_Init+0x1a6>
 8021404:	4548      	cmp	r0, r9
 8021406:	d044      	beq.n	8021492 <HAL_GPIO_Init+0x1aa>
 8021408:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 802140c:	42a8      	cmp	r0, r5
 802140e:	d042      	beq.n	8021496 <HAL_GPIO_Init+0x1ae>
 8021410:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8021414:	42a8      	cmp	r0, r5
 8021416:	d040      	beq.n	802149a <HAL_GPIO_Init+0x1b2>
 8021418:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 802141c:	42a8      	cmp	r0, r5
 802141e:	d03e      	beq.n	802149e <HAL_GPIO_Init+0x1b6>
 8021420:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8021424:	42a8      	cmp	r0, r5
 8021426:	bf0c      	ite	eq
 8021428:	2509      	moveq	r5, #9
 802142a:	250a      	movne	r5, #10
 802142c:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8021430:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8021434:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8021438:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 802143a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 802143e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8021440:	bf0c      	ite	eq
 8021442:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8021444:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8021446:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 802144a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 802144c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 802144e:	bf0c      	ite	eq
 8021450:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8021452:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8021454:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8021458:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 802145a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 802145c:	bf0c      	ite	eq
 802145e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8021460:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8021462:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8021464:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8021466:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8021468:	bf54      	ite	pl
 802146a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 802146c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 802146e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8021470:	3301      	adds	r3, #1
 8021472:	2b10      	cmp	r3, #16
 8021474:	f47f af40 	bne.w	80212f8 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8021478:	b003      	add	sp, #12
 802147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 802147e:	2500      	movs	r5, #0
 8021480:	e7d4      	b.n	802142c <HAL_GPIO_Init+0x144>
 8021482:	2501      	movs	r5, #1
 8021484:	e7d2      	b.n	802142c <HAL_GPIO_Init+0x144>
 8021486:	2502      	movs	r5, #2
 8021488:	e7d0      	b.n	802142c <HAL_GPIO_Init+0x144>
 802148a:	2503      	movs	r5, #3
 802148c:	e7ce      	b.n	802142c <HAL_GPIO_Init+0x144>
 802148e:	2504      	movs	r5, #4
 8021490:	e7cc      	b.n	802142c <HAL_GPIO_Init+0x144>
 8021492:	2505      	movs	r5, #5
 8021494:	e7ca      	b.n	802142c <HAL_GPIO_Init+0x144>
 8021496:	2506      	movs	r5, #6
 8021498:	e7c8      	b.n	802142c <HAL_GPIO_Init+0x144>
 802149a:	2507      	movs	r5, #7
 802149c:	e7c6      	b.n	802142c <HAL_GPIO_Init+0x144>
 802149e:	2508      	movs	r5, #8
 80214a0:	e7c4      	b.n	802142c <HAL_GPIO_Init+0x144>
 80214a2:	bf00      	nop
 80214a4:	40013c00 	.word	0x40013c00
 80214a8:	40020000 	.word	0x40020000
 80214ac:	40023800 	.word	0x40023800
 80214b0:	40021400 	.word	0x40021400

080214b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80214b4:	b10a      	cbz	r2, 80214ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80214b6:	6181      	str	r1, [r0, #24]
  }
}
 80214b8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80214ba:	0409      	lsls	r1, r1, #16
 80214bc:	e7fb      	b.n	80214b6 <HAL_GPIO_WritePin+0x2>

080214be <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80214be:	6803      	ldr	r3, [r0, #0]
 80214c0:	699a      	ldr	r2, [r3, #24]
 80214c2:	0791      	lsls	r1, r2, #30
 80214c4:	d501      	bpl.n	80214ca <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80214c6:	2200      	movs	r2, #0
 80214c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80214ca:	699a      	ldr	r2, [r3, #24]
 80214cc:	07d2      	lsls	r2, r2, #31
 80214ce:	d403      	bmi.n	80214d8 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80214d0:	699a      	ldr	r2, [r3, #24]
 80214d2:	f042 0201 	orr.w	r2, r2, #1
 80214d6:	619a      	str	r2, [r3, #24]
  }
}
 80214d8:	4770      	bx	lr
	...

080214dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80214dc:	b530      	push	{r4, r5, lr}
 80214de:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80214e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80214e4:	6804      	ldr	r4, [r0, #0]
 80214e6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80214ea:	6860      	ldr	r0, [r4, #4]
 80214ec:	431a      	orrs	r2, r3
 80214ee:	4b04      	ldr	r3, [pc, #16]	; (8021500 <I2C_TransferConfig+0x24>)
 80214f0:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80214f4:	430a      	orrs	r2, r1
 80214f6:	ea20 0003 	bic.w	r0, r0, r3
 80214fa:	4302      	orrs	r2, r0
 80214fc:	6062      	str	r2, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80214fe:	bd30      	pop	{r4, r5, pc}
 8021500:	03ff63ff 	.word	0x03ff63ff

08021504 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8021504:	6803      	ldr	r3, [r0, #0]
{
 8021506:	b570      	push	{r4, r5, r6, lr}
 8021508:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802150a:	6998      	ldr	r0, [r3, #24]
{
 802150c:	460d      	mov	r5, r1
 802150e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8021510:	f010 0010 	ands.w	r0, r0, #16
 8021514:	d116      	bne.n	8021544 <I2C_IsAcknowledgeFailed+0x40>
}
 8021516:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8021518:	1c69      	adds	r1, r5, #1
 802151a:	d014      	beq.n	8021546 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802151c:	f7ff fdce 	bl	80210bc <HAL_GetTick>
 8021520:	1b80      	subs	r0, r0, r6
 8021522:	42a8      	cmp	r0, r5
 8021524:	d800      	bhi.n	8021528 <I2C_IsAcknowledgeFailed+0x24>
 8021526:	b96d      	cbnz	r5, 8021544 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8021528:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802152a:	f043 0320 	orr.w	r3, r3, #32
 802152e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8021530:	2320      	movs	r3, #32
 8021532:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8021536:	2300      	movs	r3, #0
    return HAL_ERROR;
 8021538:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802153a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 802153e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8021542:	e7e8      	b.n	8021516 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8021544:	6823      	ldr	r3, [r4, #0]
 8021546:	699a      	ldr	r2, [r3, #24]
 8021548:	0692      	lsls	r2, r2, #26
 802154a:	d5e5      	bpl.n	8021518 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802154c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802154e:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 8021550:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8021552:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8021554:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8021556:	f7ff ffb2 	bl	80214be <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 802155a:	6822      	ldr	r2, [r4, #0]
 802155c:	6853      	ldr	r3, [r2, #4]
 802155e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8021562:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8021566:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 802156a:	f023 0301 	bic.w	r3, r3, #1
 802156e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8021570:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021572:	f043 0304 	orr.w	r3, r3, #4
 8021576:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8021578:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 802157c:	e7db      	b.n	8021536 <I2C_IsAcknowledgeFailed+0x32>

0802157e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 802157e:	b570      	push	{r4, r5, r6, lr}
 8021580:	4604      	mov	r4, r0
 8021582:	460d      	mov	r5, r1
 8021584:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8021586:	6823      	ldr	r3, [r4, #0]
 8021588:	699b      	ldr	r3, [r3, #24]
 802158a:	069b      	lsls	r3, r3, #26
 802158c:	d501      	bpl.n	8021592 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 802158e:	2000      	movs	r0, #0
}
 8021590:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8021592:	4632      	mov	r2, r6
 8021594:	4629      	mov	r1, r5
 8021596:	4620      	mov	r0, r4
 8021598:	f7ff ffb4 	bl	8021504 <I2C_IsAcknowledgeFailed>
 802159c:	b990      	cbnz	r0, 80215c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802159e:	f7ff fd8d 	bl	80210bc <HAL_GetTick>
 80215a2:	1b80      	subs	r0, r0, r6
 80215a4:	42a8      	cmp	r0, r5
 80215a6:	d801      	bhi.n	80215ac <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80215a8:	2d00      	cmp	r5, #0
 80215aa:	d1ec      	bne.n	8021586 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80215ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80215ae:	f043 0320 	orr.w	r3, r3, #32
 80215b2:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80215b4:	2320      	movs	r3, #32
 80215b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80215ba:	2300      	movs	r3, #0
 80215bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80215c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80215c4:	2001      	movs	r0, #1
 80215c6:	e7e3      	b.n	8021590 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080215c8 <I2C_WaitOnFlagUntilTimeout>:
{
 80215c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215cc:	9f06      	ldr	r7, [sp, #24]
 80215ce:	4604      	mov	r4, r0
 80215d0:	4688      	mov	r8, r1
 80215d2:	4616      	mov	r6, r2
 80215d4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80215d6:	6822      	ldr	r2, [r4, #0]
 80215d8:	6993      	ldr	r3, [r2, #24]
 80215da:	ea38 0303 	bics.w	r3, r8, r3
 80215de:	bf0c      	ite	eq
 80215e0:	2301      	moveq	r3, #1
 80215e2:	2300      	movne	r3, #0
 80215e4:	42b3      	cmp	r3, r6
 80215e6:	d001      	beq.n	80215ec <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80215e8:	2000      	movs	r0, #0
 80215ea:	e015      	b.n	8021618 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80215ec:	1c6b      	adds	r3, r5, #1
 80215ee:	d0f3      	beq.n	80215d8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80215f0:	f7ff fd64 	bl	80210bc <HAL_GetTick>
 80215f4:	1bc0      	subs	r0, r0, r7
 80215f6:	42a8      	cmp	r0, r5
 80215f8:	d801      	bhi.n	80215fe <I2C_WaitOnFlagUntilTimeout+0x36>
 80215fa:	2d00      	cmp	r5, #0
 80215fc:	d1eb      	bne.n	80215d6 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80215fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8021600:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8021602:	f043 0320 	orr.w	r3, r3, #32
 8021606:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8021608:	2320      	movs	r3, #32
 802160a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802160e:	2300      	movs	r3, #0
 8021610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8021614:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8021618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802161c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 802161c:	b570      	push	{r4, r5, r6, lr}
 802161e:	4604      	mov	r4, r0
 8021620:	460d      	mov	r5, r1
 8021622:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8021624:	6823      	ldr	r3, [r4, #0]
 8021626:	699b      	ldr	r3, [r3, #24]
 8021628:	079b      	lsls	r3, r3, #30
 802162a:	d501      	bpl.n	8021630 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 802162c:	2000      	movs	r0, #0
}
 802162e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8021630:	4632      	mov	r2, r6
 8021632:	4629      	mov	r1, r5
 8021634:	4620      	mov	r0, r4
 8021636:	f7ff ff65 	bl	8021504 <I2C_IsAcknowledgeFailed>
 802163a:	b9a0      	cbnz	r0, 8021666 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 802163c:	1c6a      	adds	r2, r5, #1
 802163e:	d0f1      	beq.n	8021624 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021640:	f7ff fd3c 	bl	80210bc <HAL_GetTick>
 8021644:	1b80      	subs	r0, r0, r6
 8021646:	42a8      	cmp	r0, r5
 8021648:	d801      	bhi.n	802164e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 802164a:	2d00      	cmp	r5, #0
 802164c:	d1ea      	bne.n	8021624 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 802164e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021650:	f043 0320 	orr.w	r3, r3, #32
 8021654:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8021656:	2320      	movs	r3, #32
 8021658:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802165c:	2300      	movs	r3, #0
 802165e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8021662:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8021666:	2001      	movs	r0, #1
 8021668:	e7e1      	b.n	802162e <I2C_WaitOnTXISFlagUntilTimeout+0x12>
	...

0802166c <I2C_RequestMemoryRead>:
{
 802166c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021670:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8021672:	4b18      	ldr	r3, [pc, #96]	; (80216d4 <I2C_RequestMemoryRead+0x68>)
{
 8021674:	4605      	mov	r5, r0
 8021676:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8021678:	9300      	str	r3, [sp, #0]
 802167a:	b2f2      	uxtb	r2, r6
 802167c:	2300      	movs	r3, #0
{
 802167e:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8021682:	f7ff ff2b 	bl	80214dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8021686:	4628      	mov	r0, r5
 8021688:	4642      	mov	r2, r8
 802168a:	4639      	mov	r1, r7
 802168c:	f7ff ffc6 	bl	802161c <I2C_WaitOnTXISFlagUntilTimeout>
 8021690:	b118      	cbz	r0, 802169a <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8021692:	2001      	movs	r0, #1
}
 8021694:	b002      	add	sp, #8
 8021696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 802169a:	2e01      	cmp	r6, #1
 802169c:	682b      	ldr	r3, [r5, #0]
 802169e:	d10d      	bne.n	80216bc <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80216a0:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80216a2:	2200      	movs	r2, #0
 80216a4:	2140      	movs	r1, #64	; 0x40
 80216a6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80216a8:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80216aa:	463b      	mov	r3, r7
 80216ac:	f8cd 8000 	str.w	r8, [sp]
 80216b0:	f7ff ff8a 	bl	80215c8 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80216b4:	3800      	subs	r0, #0
 80216b6:	bf18      	it	ne
 80216b8:	2001      	movne	r0, #1
 80216ba:	e7eb      	b.n	8021694 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80216bc:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80216be:	4639      	mov	r1, r7
 80216c0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80216c2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80216c4:	4642      	mov	r2, r8
 80216c6:	f7ff ffa9 	bl	802161c <I2C_WaitOnTXISFlagUntilTimeout>
 80216ca:	2800      	cmp	r0, #0
 80216cc:	d1e1      	bne.n	8021692 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80216ce:	682b      	ldr	r3, [r5, #0]
 80216d0:	e7e6      	b.n	80216a0 <I2C_RequestMemoryRead+0x34>
 80216d2:	bf00      	nop
 80216d4:	80002000 	.word	0x80002000

080216d8 <HAL_I2C_Init>:
{
 80216d8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80216da:	4604      	mov	r4, r0
 80216dc:	2800      	cmp	r0, #0
 80216de:	d04a      	beq.n	8021776 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80216e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80216e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80216e8:	b91b      	cbnz	r3, 80216f2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80216ea:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80216ee:	f7df ff3f 	bl	8001570 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80216f2:	2324      	movs	r3, #36	; 0x24
 80216f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80216f8:	6823      	ldr	r3, [r4, #0]
 80216fa:	681a      	ldr	r2, [r3, #0]
 80216fc:	f022 0201 	bic.w	r2, r2, #1
 8021700:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8021702:	6862      	ldr	r2, [r4, #4]
 8021704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8021708:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802170a:	689a      	ldr	r2, [r3, #8]
 802170c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8021710:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8021712:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8021716:	2901      	cmp	r1, #1
 8021718:	d124      	bne.n	8021764 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802171a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802171e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8021720:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8021722:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8021724:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8021728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802172c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802172e:	68da      	ldr	r2, [r3, #12]
 8021730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8021734:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8021736:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 802173a:	430a      	orrs	r2, r1
 802173c:	69a1      	ldr	r1, [r4, #24]
 802173e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8021742:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8021744:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8021748:	430a      	orrs	r2, r1
 802174a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 802174c:	681a      	ldr	r2, [r3, #0]
 802174e:	f042 0201 	orr.w	r2, r2, #1
 8021752:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8021754:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8021756:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8021758:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802175c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802175e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8021762:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8021764:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8021768:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802176a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802176c:	d1d8      	bne.n	8021720 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802176e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021772:	605a      	str	r2, [r3, #4]
 8021774:	e7d4      	b.n	8021720 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8021776:	2001      	movs	r0, #1
 8021778:	e7f3      	b.n	8021762 <HAL_I2C_Init+0x8a>
	...

0802177c <HAL_I2C_Mem_Read>:
{
 802177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021780:	b085      	sub	sp, #20
 8021782:	469b      	mov	fp, r3
 8021784:	4604      	mov	r4, r0
 8021786:	460f      	mov	r7, r1
 8021788:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 802178c:	4692      	mov	sl, r2
 802178e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8021792:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8021794:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8021798:	2b20      	cmp	r3, #32
 802179a:	f040 80a7 	bne.w	80218ec <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 802179e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217a0:	b10b      	cbz	r3, 80217a6 <HAL_I2C_Mem_Read+0x2a>
 80217a2:	9b03      	ldr	r3, [sp, #12]
 80217a4:	b933      	cbnz	r3, 80217b4 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80217a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80217aa:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80217ac:	2001      	movs	r0, #1
}
 80217ae:	b005      	add	sp, #20
 80217b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80217b4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80217b8:	2b01      	cmp	r3, #1
 80217ba:	f000 8097 	beq.w	80218ec <HAL_I2C_Mem_Read+0x170>
 80217be:	2501      	movs	r5, #1
 80217c0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80217c4:	f7ff fc7a 	bl	80210bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80217c8:	2319      	movs	r3, #25
 80217ca:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80217cc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80217ce:	462a      	mov	r2, r5
 80217d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217d4:	4620      	mov	r0, r4
 80217d6:	f7ff fef7 	bl	80215c8 <I2C_WaitOnFlagUntilTimeout>
 80217da:	4680      	mov	r8, r0
 80217dc:	2800      	cmp	r0, #0
 80217de:	d1e5      	bne.n	80217ac <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80217e0:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80217e2:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80217e4:	4652      	mov	r2, sl
 80217e6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80217e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80217ec:	2340      	movs	r3, #64	; 0x40
 80217ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80217f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80217f4:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80217f6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80217f8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80217fa:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80217fc:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8021800:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8021802:	465b      	mov	r3, fp
 8021804:	f7ff ff32 	bl	802166c <I2C_RequestMemoryRead>
 8021808:	b110      	cbz	r0, 8021810 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 802180a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 802180e:	e7cd      	b.n	80217ac <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8021810:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8021812:	b29b      	uxth	r3, r3
 8021814:	2bff      	cmp	r3, #255	; 0xff
 8021816:	4b36      	ldr	r3, [pc, #216]	; (80218f0 <HAL_I2C_Mem_Read+0x174>)
 8021818:	d958      	bls.n	80218cc <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 802181a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 802181c:	9300      	str	r3, [sp, #0]
 802181e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8021822:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8021824:	4639      	mov	r1, r7
 8021826:	4620      	mov	r0, r4
 8021828:	f7ff fe58 	bl	80214dc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 802182c:	464b      	mov	r3, r9
 802182e:	2200      	movs	r2, #0
 8021830:	2104      	movs	r1, #4
 8021832:	4620      	mov	r0, r4
 8021834:	9600      	str	r6, [sp, #0]
 8021836:	f7ff fec7 	bl	80215c8 <I2C_WaitOnFlagUntilTimeout>
 802183a:	2800      	cmp	r0, #0
 802183c:	d1b6      	bne.n	80217ac <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802183e:	6823      	ldr	r3, [r4, #0]
 8021840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021844:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8021846:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8021848:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 802184a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 802184c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 802184e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8021850:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8021852:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8021854:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8021856:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8021858:	b29b      	uxth	r3, r3
 802185a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 802185c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 802185e:	b29b      	uxth	r3, r3
 8021860:	b1ab      	cbz	r3, 802188e <HAL_I2C_Mem_Read+0x112>
 8021862:	b9a2      	cbnz	r2, 802188e <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8021864:	464b      	mov	r3, r9
 8021866:	2180      	movs	r1, #128	; 0x80
 8021868:	4620      	mov	r0, r4
 802186a:	9600      	str	r6, [sp, #0]
 802186c:	f7ff feac 	bl	80215c8 <I2C_WaitOnFlagUntilTimeout>
 8021870:	2800      	cmp	r0, #0
 8021872:	d19b      	bne.n	80217ac <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8021874:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8021876:	b29b      	uxth	r3, r3
 8021878:	2bff      	cmp	r3, #255	; 0xff
 802187a:	d92f      	bls.n	80218dc <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 802187c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 802187e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8021882:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8021884:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8021886:	4639      	mov	r1, r7
 8021888:	4620      	mov	r0, r4
 802188a:	f7ff fe27 	bl	80214dc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 802188e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8021890:	b29b      	uxth	r3, r3
 8021892:	2b00      	cmp	r3, #0
 8021894:	d1ca      	bne.n	802182c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8021896:	4632      	mov	r2, r6
 8021898:	4649      	mov	r1, r9
 802189a:	4620      	mov	r0, r4
 802189c:	f7ff fe6f 	bl	802157e <I2C_WaitOnSTOPFlagUntilTimeout>
 80218a0:	2800      	cmp	r0, #0
 80218a2:	d183      	bne.n	80217ac <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80218a4:	6823      	ldr	r3, [r4, #0]
 80218a6:	2120      	movs	r1, #32
 80218a8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80218aa:	685a      	ldr	r2, [r3, #4]
 80218ac:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80218b0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80218b4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80218b8:	f022 0201 	bic.w	r2, r2, #1
 80218bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80218be:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80218c2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80218c6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80218ca:	e770      	b.n	80217ae <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80218cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80218ce:	9300      	str	r3, [sp, #0]
 80218d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80218d4:	b292      	uxth	r2, r2
 80218d6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80218d8:	b2d2      	uxtb	r2, r2
 80218da:	e7a3      	b.n	8021824 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80218dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80218de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80218e2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80218e4:	b292      	uxth	r2, r2
 80218e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80218e8:	b2d2      	uxtb	r2, r2
 80218ea:	e7cc      	b.n	8021886 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 80218ec:	2002      	movs	r0, #2
 80218ee:	e75e      	b.n	80217ae <HAL_I2C_Mem_Read+0x32>
 80218f0:	80002400 	.word	0x80002400

080218f4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80218f4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80218f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80218f8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80218fa:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80218fc:	b103      	cbz	r3, 8021900 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80218fe:	4718      	bx	r3
}
 8021900:	4770      	bx	lr

08021902 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8021902:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8021904:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8021908:	2b20      	cmp	r3, #32
 802190a:	b2dc      	uxtb	r4, r3
 802190c:	d11d      	bne.n	802194a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802190e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8021912:	2b01      	cmp	r3, #1
 8021914:	d019      	beq.n	802194a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8021916:	2324      	movs	r3, #36	; 0x24
 8021918:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802191c:	6803      	ldr	r3, [r0, #0]
 802191e:	681a      	ldr	r2, [r3, #0]
 8021920:	f022 0201 	bic.w	r2, r2, #1
 8021924:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8021926:	681a      	ldr	r2, [r3, #0]
 8021928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802192c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802192e:	681a      	ldr	r2, [r3, #0]
 8021930:	4311      	orrs	r1, r2
 8021932:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8021934:	681a      	ldr	r2, [r3, #0]
 8021936:	f042 0201 	orr.w	r2, r2, #1
 802193a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802193c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 802193e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8021942:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8021946:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8021948:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 802194a:	2002      	movs	r0, #2
 802194c:	e7fc      	b.n	8021948 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0802194e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802194e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8021950:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8021954:	2b20      	cmp	r3, #32
 8021956:	b2dc      	uxtb	r4, r3
 8021958:	d11c      	bne.n	8021994 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802195a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 802195e:	2b01      	cmp	r3, #1
 8021960:	d018      	beq.n	8021994 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8021962:	2324      	movs	r3, #36	; 0x24
 8021964:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8021968:	6803      	ldr	r3, [r0, #0]
 802196a:	681a      	ldr	r2, [r3, #0]
 802196c:	f022 0201 	bic.w	r2, r2, #1
 8021970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8021972:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8021974:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8021978:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802197c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802197e:	681a      	ldr	r2, [r3, #0]
 8021980:	f042 0201 	orr.w	r2, r2, #1
 8021984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8021986:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8021988:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 802198c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8021990:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8021992:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8021994:	2002      	movs	r0, #2
 8021996:	e7fc      	b.n	8021992 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08021998 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8021998:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802199a:	f8d1 c000 	ldr.w	ip, [r1]
{
 802199e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80219a2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80219a4:	6804      	ldr	r4, [r0, #0]
 80219a6:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80219a8:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80219ac:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80219ae:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80219b0:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80219b4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80219b8:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80219ba:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80219be:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80219c2:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80219c4:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80219c6:	68e0      	ldr	r0, [r4, #12]
 80219c8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80219cc:	4430      	add	r0, r6
 80219ce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80219d2:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80219d4:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80219d6:	68e0      	ldr	r0, [r4, #12]
 80219d8:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80219dc:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80219de:	6898      	ldr	r0, [r3, #8]
 80219e0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80219e4:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80219e6:	6888      	ldr	r0, [r1, #8]
 80219e8:	68e6      	ldr	r6, [r4, #12]
 80219ea:	3001      	adds	r0, #1
 80219ec:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80219f0:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80219f2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80219f4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80219f8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80219fa:	6918      	ldr	r0, [r3, #16]
 80219fc:	f020 0007 	bic.w	r0, r0, #7
 8021a00:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8021a02:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8021a04:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8021a06:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8021a0a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8021a0e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8021a12:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8021a16:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8021a1a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8021a1e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8021a22:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8021a24:	6958      	ldr	r0, [r3, #20]
 8021a26:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8021a2a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8021a2c:	6948      	ldr	r0, [r1, #20]
 8021a2e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8021a30:	69d8      	ldr	r0, [r3, #28]
 8021a32:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8021a36:	f020 0007 	bic.w	r0, r0, #7
 8021a3a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8021a3c:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8021a40:	4305      	orrs	r5, r0
 8021a42:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8021a44:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8021a46:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8021a48:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8021a4c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8021a4e:	b31e      	cbz	r6, 8021a98 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8021a50:	2e01      	cmp	r6, #1
 8021a52:	d023      	beq.n	8021a9c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8021a54:	1eb0      	subs	r0, r6, #2
 8021a56:	2802      	cmp	r0, #2
 8021a58:	d922      	bls.n	8021aa0 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8021a5a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8021a5c:	bf0c      	ite	eq
 8021a5e:	2002      	moveq	r0, #2
 8021a60:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8021a62:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8021a64:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8021a68:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8021a6c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8021a6e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8021a70:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8021a72:	4345      	muls	r5, r0
 8021a74:	4378      	muls	r0, r7
 8021a76:	3003      	adds	r0, #3
 8021a78:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8021a7c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8021a7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021a80:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8021a84:	f020 0007 	bic.w	r0, r0, #7
 8021a88:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8021a8a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8021a8c:	58a3      	ldr	r3, [r4, r2]
 8021a8e:	f043 0301 	orr.w	r3, r3, #1
 8021a92:	50a3      	str	r3, [r4, r2]
}
 8021a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8021a98:	2004      	movs	r0, #4
 8021a9a:	e7e2      	b.n	8021a62 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8021a9c:	2003      	movs	r0, #3
 8021a9e:	e7e0      	b.n	8021a62 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8021aa0:	2002      	movs	r0, #2
 8021aa2:	e7de      	b.n	8021a62 <LTDC_SetConfig+0xca>

08021aa4 <HAL_LTDC_Init>:
{
 8021aa4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8021aa6:	4604      	mov	r4, r0
 8021aa8:	2800      	cmp	r0, #0
 8021aaa:	d063      	beq.n	8021b74 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8021aac:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8021ab0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8021ab4:	b91b      	cbnz	r3, 8021abe <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8021ab6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8021aba:	f7df fd97 	bl	80015ec <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8021abe:	2302      	movs	r3, #2
 8021ac0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8021ac4:	6823      	ldr	r3, [r4, #0]
 8021ac6:	699a      	ldr	r2, [r3, #24]
 8021ac8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8021acc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8021ace:	6999      	ldr	r1, [r3, #24]
 8021ad0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8021ad4:	4302      	orrs	r2, r0
 8021ad6:	68e0      	ldr	r0, [r4, #12]
 8021ad8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8021ada:	6920      	ldr	r0, [r4, #16]
 8021adc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8021ade:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8021ae0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8021ae2:	4925      	ldr	r1, [pc, #148]	; (8021b78 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8021ae4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8021ae6:	689a      	ldr	r2, [r3, #8]
 8021ae8:	400a      	ands	r2, r1
 8021aea:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8021aec:	689a      	ldr	r2, [r3, #8]
 8021aee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8021af2:	69a0      	ldr	r0, [r4, #24]
 8021af4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8021af6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8021af8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8021afa:	68da      	ldr	r2, [r3, #12]
 8021afc:	400a      	ands	r2, r1
 8021afe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8021b00:	68da      	ldr	r2, [r3, #12]
 8021b02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8021b06:	6a20      	ldr	r0, [r4, #32]
 8021b08:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8021b0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8021b0c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8021b0e:	691a      	ldr	r2, [r3, #16]
 8021b10:	400a      	ands	r2, r1
 8021b12:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8021b14:	691a      	ldr	r2, [r3, #16]
 8021b16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8021b1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8021b1c:	4302      	orrs	r2, r0
 8021b1e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8021b20:	695a      	ldr	r2, [r3, #20]
 8021b22:	4011      	ands	r1, r2
 8021b24:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8021b26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8021b28:	695a      	ldr	r2, [r3, #20]
 8021b2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8021b2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8021b30:	430a      	orrs	r2, r1
 8021b32:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8021b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8021b36:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8021b3a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8021b3e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8021b42:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8021b44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8021b46:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8021b4a:	430a      	orrs	r2, r1
 8021b4c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8021b50:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8021b54:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8021b56:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8021b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8021b5a:	f042 0206 	orr.w	r2, r2, #6
 8021b5e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8021b60:	699a      	ldr	r2, [r3, #24]
 8021b62:	f042 0201 	orr.w	r2, r2, #1
 8021b66:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8021b68:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8021b6a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8021b6e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8021b72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8021b74:	2001      	movs	r0, #1
 8021b76:	e7fc      	b.n	8021b72 <HAL_LTDC_Init+0xce>
 8021b78:	f000f800 	.word	0xf000f800

08021b7c <HAL_LTDC_ConfigLayer>:
{
 8021b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8021b80:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8021b84:	4606      	mov	r6, r0
 8021b86:	460f      	mov	r7, r1
 8021b88:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8021b8a:	2b01      	cmp	r3, #1
 8021b8c:	f04f 0002 	mov.w	r0, #2
 8021b90:	d01f      	beq.n	8021bd2 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021b92:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8021b94:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021b98:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8021b9a:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021b9e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8021ba2:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021ba6:	3438      	adds	r4, #56	; 0x38
 8021ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021bb4:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8021bb6:	4630      	mov	r0, r6
 8021bb8:	4662      	mov	r2, ip
 8021bba:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8021bbc:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8021bbe:	f7ff feeb 	bl	8021998 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8021bc2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8021bc4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8021bc6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8021bca:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8021bce:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8021bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08021bd8 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8021bd8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8021bdc:	2b01      	cmp	r3, #1
 8021bde:	f04f 0302 	mov.w	r3, #2
 8021be2:	d00c      	beq.n	8021bfe <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8021be4:	4a07      	ldr	r2, [pc, #28]	; (8021c04 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8021be6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8021bea:	6993      	ldr	r3, [r2, #24]
 8021bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021bf0:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8021bf2:	2301      	movs	r3, #1
 8021bf4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8021bf8:	2300      	movs	r3, #0
 8021bfa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8021bfe:	4618      	mov	r0, r3
}
 8021c00:	4770      	bx	lr
 8021c02:	bf00      	nop
 8021c04:	40016800 	.word	0x40016800

08021c08 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8021c08:	4b19      	ldr	r3, [pc, #100]	; (8021c70 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8021c0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8021c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8021c0e:	4c19      	ldr	r4, [pc, #100]	; (8021c74 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8021c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021c14:	641a      	str	r2, [r3, #64]	; 0x40
 8021c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021c1c:	9301      	str	r3, [sp, #4]
 8021c1e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8021c20:	6823      	ldr	r3, [r4, #0]
 8021c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021c26:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8021c28:	f7ff fa48 	bl	80210bc <HAL_GetTick>
 8021c2c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8021c2e:	6863      	ldr	r3, [r4, #4]
 8021c30:	03da      	lsls	r2, r3, #15
 8021c32:	d50c      	bpl.n	8021c4e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8021c34:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8021c36:	4d0f      	ldr	r5, [pc, #60]	; (8021c74 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8021c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021c3c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8021c3e:	f7ff fa3d 	bl	80210bc <HAL_GetTick>
 8021c42:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8021c44:	686b      	ldr	r3, [r5, #4]
 8021c46:	039b      	lsls	r3, r3, #14
 8021c48:	d50a      	bpl.n	8021c60 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8021c4a:	2000      	movs	r0, #0
 8021c4c:	e006      	b.n	8021c5c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021c4e:	f7ff fa35 	bl	80210bc <HAL_GetTick>
 8021c52:	1b40      	subs	r0, r0, r5
 8021c54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8021c58:	d9e9      	bls.n	8021c2e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8021c5a:	2003      	movs	r0, #3
}
 8021c5c:	b003      	add	sp, #12
 8021c5e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021c60:	f7ff fa2c 	bl	80210bc <HAL_GetTick>
 8021c64:	1b00      	subs	r0, r0, r4
 8021c66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8021c6a:	d9eb      	bls.n	8021c44 <HAL_PWREx_EnableOverDrive+0x3c>
 8021c6c:	e7f5      	b.n	8021c5a <HAL_PWREx_EnableOverDrive+0x52>
 8021c6e:	bf00      	nop
 8021c70:	40023800 	.word	0x40023800
 8021c74:	40007000 	.word	0x40007000

08021c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021c7c:	4604      	mov	r4, r0
 8021c7e:	b340      	cbz	r0, 8021cd2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021c80:	6803      	ldr	r3, [r0, #0]
 8021c82:	07d8      	lsls	r0, r3, #31
 8021c84:	d410      	bmi.n	8021ca8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021c86:	6823      	ldr	r3, [r4, #0]
 8021c88:	0799      	lsls	r1, r3, #30
 8021c8a:	d464      	bmi.n	8021d56 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021c8c:	6823      	ldr	r3, [r4, #0]
 8021c8e:	0719      	lsls	r1, r3, #28
 8021c90:	f100 80aa 	bmi.w	8021de8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021c94:	6823      	ldr	r3, [r4, #0]
 8021c96:	075a      	lsls	r2, r3, #29
 8021c98:	f100 80cb 	bmi.w	8021e32 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021c9c:	69a2      	ldr	r2, [r4, #24]
 8021c9e:	2a00      	cmp	r2, #0
 8021ca0:	f040 8134 	bne.w	8021f0c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8021ca4:	2000      	movs	r0, #0
 8021ca6:	e02b      	b.n	8021d00 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021ca8:	4b96      	ldr	r3, [pc, #600]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021caa:	689a      	ldr	r2, [r3, #8]
 8021cac:	f002 020c 	and.w	r2, r2, #12
 8021cb0:	2a04      	cmp	r2, #4
 8021cb2:	d007      	beq.n	8021cc4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021cb4:	689a      	ldr	r2, [r3, #8]
 8021cb6:	f002 020c 	and.w	r2, r2, #12
 8021cba:	2a08      	cmp	r2, #8
 8021cbc:	d10b      	bne.n	8021cd6 <HAL_RCC_OscConfig+0x5e>
 8021cbe:	685a      	ldr	r2, [r3, #4]
 8021cc0:	0252      	lsls	r2, r2, #9
 8021cc2:	d508      	bpl.n	8021cd6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021cc4:	4b8f      	ldr	r3, [pc, #572]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	039b      	lsls	r3, r3, #14
 8021cca:	d5dc      	bpl.n	8021c86 <HAL_RCC_OscConfig+0xe>
 8021ccc:	6863      	ldr	r3, [r4, #4]
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d1d9      	bne.n	8021c86 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8021cd2:	2001      	movs	r0, #1
 8021cd4:	e014      	b.n	8021d00 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021cd6:	6862      	ldr	r2, [r4, #4]
 8021cd8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8021cdc:	d113      	bne.n	8021d06 <HAL_RCC_OscConfig+0x8e>
 8021cde:	681a      	ldr	r2, [r3, #0]
 8021ce0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021ce6:	f7ff f9e9 	bl	80210bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021cea:	4e86      	ldr	r6, [pc, #536]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8021cec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021cee:	6833      	ldr	r3, [r6, #0]
 8021cf0:	039f      	lsls	r7, r3, #14
 8021cf2:	d4c8      	bmi.n	8021c86 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021cf4:	f7ff f9e2 	bl	80210bc <HAL_GetTick>
 8021cf8:	1b40      	subs	r0, r0, r5
 8021cfa:	2864      	cmp	r0, #100	; 0x64
 8021cfc:	d9f7      	bls.n	8021cee <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8021cfe:	2003      	movs	r0, #3
}
 8021d00:	b002      	add	sp, #8
 8021d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021d06:	4d7f      	ldr	r5, [pc, #508]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021d08:	682b      	ldr	r3, [r5, #0]
 8021d0a:	b992      	cbnz	r2, 8021d32 <HAL_RCC_OscConfig+0xba>
 8021d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021d10:	602b      	str	r3, [r5, #0]
 8021d12:	682b      	ldr	r3, [r5, #0]
 8021d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021d18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8021d1a:	f7ff f9cf 	bl	80210bc <HAL_GetTick>
 8021d1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021d20:	682b      	ldr	r3, [r5, #0]
 8021d22:	0398      	lsls	r0, r3, #14
 8021d24:	d5af      	bpl.n	8021c86 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021d26:	f7ff f9c9 	bl	80210bc <HAL_GetTick>
 8021d2a:	1b80      	subs	r0, r0, r6
 8021d2c:	2864      	cmp	r0, #100	; 0x64
 8021d2e:	d9f7      	bls.n	8021d20 <HAL_RCC_OscConfig+0xa8>
 8021d30:	e7e5      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021d32:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8021d36:	d107      	bne.n	8021d48 <HAL_RCC_OscConfig+0xd0>
 8021d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021d3c:	602b      	str	r3, [r5, #0]
 8021d3e:	682b      	ldr	r3, [r5, #0]
 8021d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021d44:	602b      	str	r3, [r5, #0]
 8021d46:	e7ce      	b.n	8021ce6 <HAL_RCC_OscConfig+0x6e>
 8021d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021d4c:	602b      	str	r3, [r5, #0]
 8021d4e:	682b      	ldr	r3, [r5, #0]
 8021d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021d54:	e7f6      	b.n	8021d44 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8021d56:	4b6b      	ldr	r3, [pc, #428]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021d58:	689a      	ldr	r2, [r3, #8]
 8021d5a:	f012 0f0c 	tst.w	r2, #12
 8021d5e:	d007      	beq.n	8021d70 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021d60:	689a      	ldr	r2, [r3, #8]
 8021d62:	f002 020c 	and.w	r2, r2, #12
 8021d66:	2a08      	cmp	r2, #8
 8021d68:	d111      	bne.n	8021d8e <HAL_RCC_OscConfig+0x116>
 8021d6a:	685a      	ldr	r2, [r3, #4]
 8021d6c:	0251      	lsls	r1, r2, #9
 8021d6e:	d40e      	bmi.n	8021d8e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021d70:	4b64      	ldr	r3, [pc, #400]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021d72:	681a      	ldr	r2, [r3, #0]
 8021d74:	0792      	lsls	r2, r2, #30
 8021d76:	d502      	bpl.n	8021d7e <HAL_RCC_OscConfig+0x106>
 8021d78:	68e2      	ldr	r2, [r4, #12]
 8021d7a:	2a01      	cmp	r2, #1
 8021d7c:	d1a9      	bne.n	8021cd2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021d7e:	681a      	ldr	r2, [r3, #0]
 8021d80:	6921      	ldr	r1, [r4, #16]
 8021d82:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8021d86:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8021d8a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021d8c:	e77e      	b.n	8021c8c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8021d8e:	68e2      	ldr	r2, [r4, #12]
 8021d90:	b1c2      	cbz	r2, 8021dc4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8021d92:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021d94:	4d5b      	ldr	r5, [pc, #364]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8021d96:	f042 0201 	orr.w	r2, r2, #1
 8021d9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021d9c:	f7ff f98e 	bl	80210bc <HAL_GetTick>
 8021da0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021da2:	682b      	ldr	r3, [r5, #0]
 8021da4:	079f      	lsls	r7, r3, #30
 8021da6:	d507      	bpl.n	8021db8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021da8:	682b      	ldr	r3, [r5, #0]
 8021daa:	6922      	ldr	r2, [r4, #16]
 8021dac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8021db0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021db4:	602b      	str	r3, [r5, #0]
 8021db6:	e769      	b.n	8021c8c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021db8:	f7ff f980 	bl	80210bc <HAL_GetTick>
 8021dbc:	1b80      	subs	r0, r0, r6
 8021dbe:	2802      	cmp	r0, #2
 8021dc0:	d9ef      	bls.n	8021da2 <HAL_RCC_OscConfig+0x12a>
 8021dc2:	e79c      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8021dc4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021dc6:	4e4f      	ldr	r6, [pc, #316]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8021dc8:	f022 0201 	bic.w	r2, r2, #1
 8021dcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8021dce:	f7ff f975 	bl	80210bc <HAL_GetTick>
 8021dd2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021dd4:	6833      	ldr	r3, [r6, #0]
 8021dd6:	0798      	lsls	r0, r3, #30
 8021dd8:	f57f af58 	bpl.w	8021c8c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021ddc:	f7ff f96e 	bl	80210bc <HAL_GetTick>
 8021de0:	1b40      	subs	r0, r0, r5
 8021de2:	2802      	cmp	r0, #2
 8021de4:	d9f6      	bls.n	8021dd4 <HAL_RCC_OscConfig+0x15c>
 8021de6:	e78a      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8021de8:	6963      	ldr	r3, [r4, #20]
 8021dea:	4d46      	ldr	r5, [pc, #280]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021dec:	b183      	cbz	r3, 8021e10 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8021dee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8021df0:	f043 0301 	orr.w	r3, r3, #1
 8021df4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8021df6:	f7ff f961 	bl	80210bc <HAL_GetTick>
 8021dfa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021dfc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8021dfe:	079b      	lsls	r3, r3, #30
 8021e00:	f53f af48 	bmi.w	8021c94 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021e04:	f7ff f95a 	bl	80210bc <HAL_GetTick>
 8021e08:	1b80      	subs	r0, r0, r6
 8021e0a:	2802      	cmp	r0, #2
 8021e0c:	d9f6      	bls.n	8021dfc <HAL_RCC_OscConfig+0x184>
 8021e0e:	e776      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8021e10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8021e12:	f023 0301 	bic.w	r3, r3, #1
 8021e16:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8021e18:	f7ff f950 	bl	80210bc <HAL_GetTick>
 8021e1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021e1e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8021e20:	079f      	lsls	r7, r3, #30
 8021e22:	f57f af37 	bpl.w	8021c94 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021e26:	f7ff f949 	bl	80210bc <HAL_GetTick>
 8021e2a:	1b80      	subs	r0, r0, r6
 8021e2c:	2802      	cmp	r0, #2
 8021e2e:	d9f6      	bls.n	8021e1e <HAL_RCC_OscConfig+0x1a6>
 8021e30:	e765      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021e32:	4b34      	ldr	r3, [pc, #208]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021e36:	00d0      	lsls	r0, r2, #3
 8021e38:	d427      	bmi.n	8021e8a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8021e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8021e3c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8021e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021e42:	641a      	str	r2, [r3, #64]	; 0x40
 8021e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021e4a:	9301      	str	r3, [sp, #4]
 8021e4c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021e4e:	4d2e      	ldr	r5, [pc, #184]	; (8021f08 <HAL_RCC_OscConfig+0x290>)
 8021e50:	682b      	ldr	r3, [r5, #0]
 8021e52:	05d9      	lsls	r1, r3, #23
 8021e54:	d51b      	bpl.n	8021e8e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021e56:	68a3      	ldr	r3, [r4, #8]
 8021e58:	4d2a      	ldr	r5, [pc, #168]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021e5a:	2b01      	cmp	r3, #1
 8021e5c:	d127      	bne.n	8021eae <HAL_RCC_OscConfig+0x236>
 8021e5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021e60:	f043 0301 	orr.w	r3, r3, #1
 8021e64:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021e66:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8021e6a:	f7ff f927 	bl	80210bc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021e6e:	4e25      	ldr	r6, [pc, #148]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8021e70:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021e72:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8021e74:	079b      	lsls	r3, r3, #30
 8021e76:	d53f      	bpl.n	8021ef8 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8021e78:	2f00      	cmp	r7, #0
 8021e7a:	f43f af0f 	beq.w	8021c9c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8021e7e:	4a21      	ldr	r2, [pc, #132]	; (8021f04 <HAL_RCC_OscConfig+0x28c>)
 8021e80:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8021e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021e86:	6413      	str	r3, [r2, #64]	; 0x40
 8021e88:	e708      	b.n	8021c9c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8021e8a:	2700      	movs	r7, #0
 8021e8c:	e7df      	b.n	8021e4e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8021e8e:	682b      	ldr	r3, [r5, #0]
 8021e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021e94:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8021e96:	f7ff f911 	bl	80210bc <HAL_GetTick>
 8021e9a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021e9c:	682b      	ldr	r3, [r5, #0]
 8021e9e:	05da      	lsls	r2, r3, #23
 8021ea0:	d4d9      	bmi.n	8021e56 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021ea2:	f7ff f90b 	bl	80210bc <HAL_GetTick>
 8021ea6:	1b80      	subs	r0, r0, r6
 8021ea8:	2864      	cmp	r0, #100	; 0x64
 8021eaa:	d9f7      	bls.n	8021e9c <HAL_RCC_OscConfig+0x224>
 8021eac:	e727      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021eae:	b9ab      	cbnz	r3, 8021edc <HAL_RCC_OscConfig+0x264>
 8021eb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021eb2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021eb6:	f023 0301 	bic.w	r3, r3, #1
 8021eba:	672b      	str	r3, [r5, #112]	; 0x70
 8021ebc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021ebe:	f023 0304 	bic.w	r3, r3, #4
 8021ec2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8021ec4:	f7ff f8fa 	bl	80210bc <HAL_GetTick>
 8021ec8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021eca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021ecc:	0798      	lsls	r0, r3, #30
 8021ece:	d5d3      	bpl.n	8021e78 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021ed0:	f7ff f8f4 	bl	80210bc <HAL_GetTick>
 8021ed4:	1b80      	subs	r0, r0, r6
 8021ed6:	4540      	cmp	r0, r8
 8021ed8:	d9f7      	bls.n	8021eca <HAL_RCC_OscConfig+0x252>
 8021eda:	e710      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021edc:	2b05      	cmp	r3, #5
 8021ede:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021ee0:	d103      	bne.n	8021eea <HAL_RCC_OscConfig+0x272>
 8021ee2:	f043 0304 	orr.w	r3, r3, #4
 8021ee6:	672b      	str	r3, [r5, #112]	; 0x70
 8021ee8:	e7b9      	b.n	8021e5e <HAL_RCC_OscConfig+0x1e6>
 8021eea:	f023 0301 	bic.w	r3, r3, #1
 8021eee:	672b      	str	r3, [r5, #112]	; 0x70
 8021ef0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8021ef2:	f023 0304 	bic.w	r3, r3, #4
 8021ef6:	e7b5      	b.n	8021e64 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021ef8:	f7ff f8e0 	bl	80210bc <HAL_GetTick>
 8021efc:	1b40      	subs	r0, r0, r5
 8021efe:	4540      	cmp	r0, r8
 8021f00:	d9b7      	bls.n	8021e72 <HAL_RCC_OscConfig+0x1fa>
 8021f02:	e6fc      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
 8021f04:	40023800 	.word	0x40023800
 8021f08:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021f0c:	4d38      	ldr	r5, [pc, #224]	; (8021ff0 <HAL_RCC_OscConfig+0x378>)
 8021f0e:	68ab      	ldr	r3, [r5, #8]
 8021f10:	f003 030c 	and.w	r3, r3, #12
 8021f14:	2b08      	cmp	r3, #8
 8021f16:	d041      	beq.n	8021f9c <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8021f18:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021f1a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8021f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8021f20:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021f22:	d12e      	bne.n	8021f82 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8021f24:	f7ff f8ca 	bl	80210bc <HAL_GetTick>
 8021f28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021f2a:	682b      	ldr	r3, [r5, #0]
 8021f2c:	0199      	lsls	r1, r3, #6
 8021f2e:	d422      	bmi.n	8021f76 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021f32:	085b      	lsrs	r3, r3, #1
 8021f34:	1e5a      	subs	r2, r3, #1
 8021f36:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8021f3a:	430b      	orrs	r3, r1
 8021f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021f40:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8021f42:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8021f46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8021f48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8021f50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8021f52:	682b      	ldr	r3, [r5, #0]
 8021f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021f58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8021f5a:	f7ff f8af 	bl	80210bc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021f5e:	4d24      	ldr	r5, [pc, #144]	; (8021ff0 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8021f60:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021f62:	682b      	ldr	r3, [r5, #0]
 8021f64:	019a      	lsls	r2, r3, #6
 8021f66:	f53f ae9d 	bmi.w	8021ca4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021f6a:	f7ff f8a7 	bl	80210bc <HAL_GetTick>
 8021f6e:	1b00      	subs	r0, r0, r4
 8021f70:	2802      	cmp	r0, #2
 8021f72:	d9f6      	bls.n	8021f62 <HAL_RCC_OscConfig+0x2ea>
 8021f74:	e6c3      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021f76:	f7ff f8a1 	bl	80210bc <HAL_GetTick>
 8021f7a:	1b80      	subs	r0, r0, r6
 8021f7c:	2802      	cmp	r0, #2
 8021f7e:	d9d4      	bls.n	8021f2a <HAL_RCC_OscConfig+0x2b2>
 8021f80:	e6bd      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8021f82:	f7ff f89b 	bl	80210bc <HAL_GetTick>
 8021f86:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021f88:	682b      	ldr	r3, [r5, #0]
 8021f8a:	019b      	lsls	r3, r3, #6
 8021f8c:	f57f ae8a 	bpl.w	8021ca4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8021f90:	f7ff f894 	bl	80210bc <HAL_GetTick>
 8021f94:	1b00      	subs	r0, r0, r4
 8021f96:	2802      	cmp	r0, #2
 8021f98:	d9f6      	bls.n	8021f88 <HAL_RCC_OscConfig+0x310>
 8021f9a:	e6b0      	b.n	8021cfe <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021f9c:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8021f9e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021fa0:	f43f ae97 	beq.w	8021cd2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021fa8:	69e1      	ldr	r1, [r4, #28]
 8021faa:	428a      	cmp	r2, r1
 8021fac:	f47f ae91 	bne.w	8021cd2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021fb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021fb4:	6a21      	ldr	r1, [r4, #32]
 8021fb6:	428a      	cmp	r2, r1
 8021fb8:	f47f ae8b 	bne.w	8021cd2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021fbc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021fc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8021fc2:	401a      	ands	r2, r3
 8021fc4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8021fc8:	f47f ae83 	bne.w	8021cd2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8021fcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8021fce:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8021fd2:	0852      	lsrs	r2, r2, #1
 8021fd4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8021fd6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8021fda:	f47f ae7a 	bne.w	8021cd2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8021fde:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8021fe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8021fe4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8021fe8:	f43f ae5c 	beq.w	8021ca4 <HAL_RCC_OscConfig+0x2c>
 8021fec:	e671      	b.n	8021cd2 <HAL_RCC_OscConfig+0x5a>
 8021fee:	bf00      	nop
 8021ff0:	40023800 	.word	0x40023800

08021ff4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8021ff4:	4a02      	ldr	r2, [pc, #8]	; (8022000 <HAL_RCC_EnableCSS+0xc>)
 8021ff6:	6813      	ldr	r3, [r2, #0]
 8021ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8021ffc:	6013      	str	r3, [r2, #0]
}
 8021ffe:	4770      	bx	lr
 8022000:	40023800 	.word	0x40023800

08022004 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022004:	4913      	ldr	r1, [pc, #76]	; (8022054 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8022006:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022008:	688b      	ldr	r3, [r1, #8]
 802200a:	f003 030c 	and.w	r3, r3, #12
 802200e:	2b04      	cmp	r3, #4
 8022010:	d01b      	beq.n	802204a <HAL_RCC_GetSysClockFreq+0x46>
 8022012:	2b08      	cmp	r3, #8
 8022014:	d11b      	bne.n	802204e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8022016:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8022018:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802201a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802201c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8022020:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022024:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8022028:	bf1a      	itte	ne
 802202a:	480b      	ldrne	r0, [pc, #44]	; (8022058 <HAL_RCC_GetSysClockFreq+0x54>)
 802202c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802202e:	480b      	ldreq	r0, [pc, #44]	; (802205c <HAL_RCC_GetSysClockFreq+0x58>)
 8022030:	fba1 0100 	umull	r0, r1, r1, r0
 8022034:	f7de fde8 	bl	8000c08 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8022038:	4b06      	ldr	r3, [pc, #24]	; (8022054 <HAL_RCC_GetSysClockFreq+0x50>)
 802203a:	685b      	ldr	r3, [r3, #4]
 802203c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8022040:	3301      	adds	r3, #1
 8022042:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8022044:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8022048:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802204a:	4803      	ldr	r0, [pc, #12]	; (8022058 <HAL_RCC_GetSysClockFreq+0x54>)
 802204c:	e7fc      	b.n	8022048 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 802204e:	4803      	ldr	r0, [pc, #12]	; (802205c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8022050:	e7fa      	b.n	8022048 <HAL_RCC_GetSysClockFreq+0x44>
 8022052:	bf00      	nop
 8022054:	40023800 	.word	0x40023800
 8022058:	017d7840 	.word	0x017d7840
 802205c:	00f42400 	.word	0x00f42400

08022060 <HAL_RCC_ClockConfig>:
{
 8022060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022064:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8022066:	4604      	mov	r4, r0
 8022068:	b910      	cbnz	r0, 8022070 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 802206a:	2001      	movs	r0, #1
}
 802206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8022070:	4a46      	ldr	r2, [pc, #280]	; (802218c <HAL_RCC_ClockConfig+0x12c>)
 8022072:	6813      	ldr	r3, [r2, #0]
 8022074:	f003 030f 	and.w	r3, r3, #15
 8022078:	428b      	cmp	r3, r1
 802207a:	d328      	bcc.n	80220ce <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802207c:	6822      	ldr	r2, [r4, #0]
 802207e:	0797      	lsls	r7, r2, #30
 8022080:	d430      	bmi.n	80220e4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8022082:	07d0      	lsls	r0, r2, #31
 8022084:	d444      	bmi.n	8022110 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8022086:	4a41      	ldr	r2, [pc, #260]	; (802218c <HAL_RCC_ClockConfig+0x12c>)
 8022088:	6813      	ldr	r3, [r2, #0]
 802208a:	f003 030f 	and.w	r3, r3, #15
 802208e:	42ab      	cmp	r3, r5
 8022090:	d867      	bhi.n	8022162 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022092:	6822      	ldr	r2, [r4, #0]
 8022094:	0751      	lsls	r1, r2, #29
 8022096:	d470      	bmi.n	802217a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022098:	0713      	lsls	r3, r2, #28
 802209a:	d507      	bpl.n	80220ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 802209c:	4a3c      	ldr	r2, [pc, #240]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
 802209e:	6921      	ldr	r1, [r4, #16]
 80220a0:	6893      	ldr	r3, [r2, #8]
 80220a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80220a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80220aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80220ac:	f7ff ffaa 	bl	8022004 <HAL_RCC_GetSysClockFreq>
 80220b0:	4b37      	ldr	r3, [pc, #220]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
 80220b2:	4a38      	ldr	r2, [pc, #224]	; (8022194 <HAL_RCC_ClockConfig+0x134>)
 80220b4:	689b      	ldr	r3, [r3, #8]
 80220b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80220ba:	5cd3      	ldrb	r3, [r2, r3]
 80220bc:	40d8      	lsrs	r0, r3
 80220be:	4b36      	ldr	r3, [pc, #216]	; (8022198 <HAL_RCC_ClockConfig+0x138>)
 80220c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80220c2:	4b36      	ldr	r3, [pc, #216]	; (802219c <HAL_RCC_ClockConfig+0x13c>)
 80220c4:	6818      	ldr	r0, [r3, #0]
 80220c6:	f7df fc2f 	bl	8001928 <HAL_InitTick>
  return HAL_OK;
 80220ca:	2000      	movs	r0, #0
 80220cc:	e7ce      	b.n	802206c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80220ce:	6813      	ldr	r3, [r2, #0]
 80220d0:	f023 030f 	bic.w	r3, r3, #15
 80220d4:	430b      	orrs	r3, r1
 80220d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80220d8:	6813      	ldr	r3, [r2, #0]
 80220da:	f003 030f 	and.w	r3, r3, #15
 80220de:	428b      	cmp	r3, r1
 80220e0:	d1c3      	bne.n	802206a <HAL_RCC_ClockConfig+0xa>
 80220e2:	e7cb      	b.n	802207c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80220e4:	f012 0f04 	tst.w	r2, #4
 80220e8:	4b29      	ldr	r3, [pc, #164]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
 80220ea:	d003      	beq.n	80220f4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80220ec:	6899      	ldr	r1, [r3, #8]
 80220ee:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80220f2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80220f4:	0716      	lsls	r6, r2, #28
 80220f6:	d503      	bpl.n	8022100 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80220f8:	6899      	ldr	r1, [r3, #8]
 80220fa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80220fe:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022100:	4923      	ldr	r1, [pc, #140]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
 8022102:	68a0      	ldr	r0, [r4, #8]
 8022104:	688b      	ldr	r3, [r1, #8]
 8022106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802210a:	4303      	orrs	r3, r0
 802210c:	608b      	str	r3, [r1, #8]
 802210e:	e7b8      	b.n	8022082 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022110:	6861      	ldr	r1, [r4, #4]
 8022112:	4b1f      	ldr	r3, [pc, #124]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
 8022114:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022116:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022118:	d11b      	bne.n	8022152 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802211a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802211e:	d0a4      	beq.n	802206a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022120:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022122:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022126:	4f1a      	ldr	r7, [pc, #104]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022128:	f022 0203 	bic.w	r2, r2, #3
 802212c:	430a      	orrs	r2, r1
 802212e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8022130:	f7fe ffc4 	bl	80210bc <HAL_GetTick>
 8022134:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022136:	68bb      	ldr	r3, [r7, #8]
 8022138:	6862      	ldr	r2, [r4, #4]
 802213a:	f003 030c 	and.w	r3, r3, #12
 802213e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8022142:	d0a0      	beq.n	8022086 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022144:	f7fe ffba 	bl	80210bc <HAL_GetTick>
 8022148:	1b80      	subs	r0, r0, r6
 802214a:	4540      	cmp	r0, r8
 802214c:	d9f3      	bls.n	8022136 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 802214e:	2003      	movs	r0, #3
 8022150:	e78c      	b.n	802206c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8022152:	2902      	cmp	r1, #2
 8022154:	d102      	bne.n	802215c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022156:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 802215a:	e7e0      	b.n	802211e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802215c:	f012 0f02 	tst.w	r2, #2
 8022160:	e7dd      	b.n	802211e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022162:	6813      	ldr	r3, [r2, #0]
 8022164:	f023 030f 	bic.w	r3, r3, #15
 8022168:	432b      	orrs	r3, r5
 802216a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 802216c:	6813      	ldr	r3, [r2, #0]
 802216e:	f003 030f 	and.w	r3, r3, #15
 8022172:	42ab      	cmp	r3, r5
 8022174:	f47f af79 	bne.w	802206a <HAL_RCC_ClockConfig+0xa>
 8022178:	e78b      	b.n	8022092 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802217a:	4905      	ldr	r1, [pc, #20]	; (8022190 <HAL_RCC_ClockConfig+0x130>)
 802217c:	68e0      	ldr	r0, [r4, #12]
 802217e:	688b      	ldr	r3, [r1, #8]
 8022180:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8022184:	4303      	orrs	r3, r0
 8022186:	608b      	str	r3, [r1, #8]
 8022188:	e786      	b.n	8022098 <HAL_RCC_ClockConfig+0x38>
 802218a:	bf00      	nop
 802218c:	40023c00 	.word	0x40023c00
 8022190:	40023800 	.word	0x40023800
 8022194:	08025870 	.word	0x08025870
 8022198:	20000000 	.word	0x20000000
 802219c:	20000074 	.word	0x20000074

080221a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80221a0:	4b04      	ldr	r3, [pc, #16]	; (80221b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80221a2:	4a05      	ldr	r2, [pc, #20]	; (80221b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80221a4:	689b      	ldr	r3, [r3, #8]
 80221a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80221aa:	5cd3      	ldrb	r3, [r2, r3]
 80221ac:	4a03      	ldr	r2, [pc, #12]	; (80221bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80221ae:	6810      	ldr	r0, [r2, #0]
}
 80221b0:	40d8      	lsrs	r0, r3
 80221b2:	4770      	bx	lr
 80221b4:	40023800 	.word	0x40023800
 80221b8:	08025880 	.word	0x08025880
 80221bc:	20000000 	.word	0x20000000

080221c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80221c0:	230f      	movs	r3, #15
 80221c2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80221c4:	4b0b      	ldr	r3, [pc, #44]	; (80221f4 <HAL_RCC_GetClockConfig+0x34>)
 80221c6:	689a      	ldr	r2, [r3, #8]
 80221c8:	f002 0203 	and.w	r2, r2, #3
 80221cc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80221ce:	689a      	ldr	r2, [r3, #8]
 80221d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80221d4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80221d6:	689a      	ldr	r2, [r3, #8]
 80221d8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80221dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80221de:	689b      	ldr	r3, [r3, #8]
 80221e0:	08db      	lsrs	r3, r3, #3
 80221e2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80221e6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80221e8:	4b03      	ldr	r3, [pc, #12]	; (80221f8 <HAL_RCC_GetClockConfig+0x38>)
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	f003 030f 	and.w	r3, r3, #15
 80221f0:	600b      	str	r3, [r1, #0]
}
 80221f2:	4770      	bx	lr
 80221f4:	40023800 	.word	0x40023800
 80221f8:	40023c00 	.word	0x40023c00

080221fc <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80221fc:	4770      	bx	lr
	...

08022200 <HAL_RCC_NMI_IRQHandler>:
{
 8022200:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8022202:	4b05      	ldr	r3, [pc, #20]	; (8022218 <HAL_RCC_NMI_IRQHandler+0x18>)
 8022204:	68db      	ldr	r3, [r3, #12]
 8022206:	061b      	lsls	r3, r3, #24
 8022208:	d504      	bpl.n	8022214 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 802220a:	f7ff fff7 	bl	80221fc <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 802220e:	4b03      	ldr	r3, [pc, #12]	; (802221c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8022210:	2280      	movs	r2, #128	; 0x80
 8022212:	701a      	strb	r2, [r3, #0]
}
 8022214:	bd08      	pop	{r3, pc}
 8022216:	bf00      	nop
 8022218:	40023800 	.word	0x40023800
 802221c:	4002380e 	.word	0x4002380e

08022220 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8022220:	6803      	ldr	r3, [r0, #0]
{
 8022222:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8022226:	f013 0601 	ands.w	r6, r3, #1
{
 802222a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 802222c:	d00b      	beq.n	8022246 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 802222e:	4aaa      	ldr	r2, [pc, #680]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022230:	6891      	ldr	r1, [r2, #8]
 8022232:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8022236:	6091      	str	r1, [r2, #8]
 8022238:	6b46      	ldr	r6, [r0, #52]	; 0x34
 802223a:	6891      	ldr	r1, [r2, #8]
 802223c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 802223e:	fab6 f686 	clz	r6, r6
 8022242:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8022244:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8022246:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 802224a:	d012      	beq.n	8022272 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802224c:	49a2      	ldr	r1, [pc, #648]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802224e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8022250:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8022254:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022258:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 802225c:	bf08      	it	eq
 802225e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022260:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8022264:	bf16      	itet	ne
 8022266:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 802226a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 802226c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802226e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8022272:	02df      	lsls	r7, r3, #11
 8022274:	d510      	bpl.n	8022298 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8022276:	4898      	ldr	r0, [pc, #608]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022278:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802227a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 802227e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8022282:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8022286:	ea42 0201 	orr.w	r2, r2, r1
 802228a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 802228e:	f000 8184 	beq.w	802259a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8022292:	2900      	cmp	r1, #0
 8022294:	bf08      	it	eq
 8022296:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8022298:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 802229c:	bf18      	it	ne
 802229e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80222a0:	0698      	lsls	r0, r3, #26
 80222a2:	d531      	bpl.n	8022308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80222a4:	4b8c      	ldr	r3, [pc, #560]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80222a6:	4f8d      	ldr	r7, [pc, #564]	; (80224dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80222a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80222aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80222ae:	641a      	str	r2, [r3, #64]	; 0x40
 80222b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80222b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80222b6:	9301      	str	r3, [sp, #4]
 80222b8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80222ba:	683b      	ldr	r3, [r7, #0]
 80222bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80222c0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80222c2:	f7fe fefb 	bl	80210bc <HAL_GetTick>
 80222c6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80222c8:	683b      	ldr	r3, [r7, #0]
 80222ca:	05d9      	lsls	r1, r3, #23
 80222cc:	f140 8167 	bpl.w	802259e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80222d0:	4f81      	ldr	r7, [pc, #516]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80222d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80222d4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80222d8:	f040 816c 	bne.w	80225b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80222dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80222de:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80222e2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80222e6:	4a7c      	ldr	r2, [pc, #496]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80222e8:	f040 818a 	bne.w	8022600 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80222ec:	6891      	ldr	r1, [r2, #8]
 80222ee:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80222f2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80222f6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80222fa:	4301      	orrs	r1, r0
 80222fc:	6091      	str	r1, [r2, #8]
 80222fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022302:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8022304:	430b      	orrs	r3, r1
 8022306:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8022308:	6823      	ldr	r3, [r4, #0]
 802230a:	06d8      	lsls	r0, r3, #27
 802230c:	d50c      	bpl.n	8022328 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 802230e:	4a72      	ldr	r2, [pc, #456]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022310:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8022314:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8022318:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 802231c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8022320:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8022322:	4301      	orrs	r1, r0
 8022324:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022328:	0459      	lsls	r1, r3, #17
 802232a:	d508      	bpl.n	802233e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 802232c:	496a      	ldr	r1, [pc, #424]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802232e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8022330:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022334:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8022338:	4302      	orrs	r2, r0
 802233a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 802233e:	041a      	lsls	r2, r3, #16
 8022340:	d508      	bpl.n	8022354 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8022342:	4965      	ldr	r1, [pc, #404]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022344:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8022346:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802234a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 802234e:	4302      	orrs	r2, r0
 8022350:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8022354:	03df      	lsls	r7, r3, #15
 8022356:	d508      	bpl.n	802236a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8022358:	495f      	ldr	r1, [pc, #380]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802235a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 802235c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022360:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8022364:	4302      	orrs	r2, r0
 8022366:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802236a:	0398      	lsls	r0, r3, #14
 802236c:	d508      	bpl.n	8022380 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802236e:	495a      	ldr	r1, [pc, #360]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022370:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8022372:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022376:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 802237a:	4302      	orrs	r2, r0
 802237c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8022380:	0659      	lsls	r1, r3, #25
 8022382:	d508      	bpl.n	8022396 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8022384:	4954      	ldr	r1, [pc, #336]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022386:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8022388:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802238c:	f022 0203 	bic.w	r2, r2, #3
 8022390:	4302      	orrs	r2, r0
 8022392:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8022396:	061a      	lsls	r2, r3, #24
 8022398:	d508      	bpl.n	80223ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 802239a:	494f      	ldr	r1, [pc, #316]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802239c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802239e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80223a2:	f022 020c 	bic.w	r2, r2, #12
 80223a6:	4302      	orrs	r2, r0
 80223a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80223ac:	05df      	lsls	r7, r3, #23
 80223ae:	d508      	bpl.n	80223c2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80223b0:	4949      	ldr	r1, [pc, #292]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80223b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80223b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80223b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80223bc:	4302      	orrs	r2, r0
 80223be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80223c2:	0598      	lsls	r0, r3, #22
 80223c4:	d508      	bpl.n	80223d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80223c6:	4944      	ldr	r1, [pc, #272]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80223c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80223ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80223ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80223d2:	4302      	orrs	r2, r0
 80223d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80223d8:	0559      	lsls	r1, r3, #21
 80223da:	d508      	bpl.n	80223ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80223dc:	493e      	ldr	r1, [pc, #248]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80223de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80223e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80223e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80223e8:	4302      	orrs	r2, r0
 80223ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80223ee:	051a      	lsls	r2, r3, #20
 80223f0:	d508      	bpl.n	8022404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80223f2:	4939      	ldr	r1, [pc, #228]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80223f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80223fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80223fe:	4302      	orrs	r2, r0
 8022400:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8022404:	04df      	lsls	r7, r3, #19
 8022406:	d508      	bpl.n	802241a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8022408:	4933      	ldr	r1, [pc, #204]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802240a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 802240c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022410:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8022414:	4302      	orrs	r2, r0
 8022416:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 802241a:	0498      	lsls	r0, r3, #18
 802241c:	d508      	bpl.n	8022430 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 802241e:	492e      	ldr	r1, [pc, #184]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022420:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8022422:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022426:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 802242a:	4302      	orrs	r2, r0
 802242c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8022430:	0259      	lsls	r1, r3, #9
 8022432:	d508      	bpl.n	8022446 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8022434:	4928      	ldr	r1, [pc, #160]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022436:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8022438:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 802243c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8022440:	4302      	orrs	r2, r0
 8022442:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8022446:	029a      	lsls	r2, r3, #10
 8022448:	d50c      	bpl.n	8022464 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 802244a:	4823      	ldr	r0, [pc, #140]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 802244c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 802244e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8022452:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8022456:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 802245a:	bf08      	it	eq
 802245c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 802245e:	430a      	orrs	r2, r1
 8022460:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8022464:	f013 0f08 	tst.w	r3, #8
 8022468:	bf18      	it	ne
 802246a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802246c:	035f      	lsls	r7, r3, #13
 802246e:	d508      	bpl.n	8022482 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8022470:	4919      	ldr	r1, [pc, #100]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022472:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8022474:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802247c:	4302      	orrs	r2, r0
 802247e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8022482:	0218      	lsls	r0, r3, #8
 8022484:	d509      	bpl.n	802249a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022486:	4914      	ldr	r1, [pc, #80]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8022488:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 802248c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8022490:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8022494:	4302      	orrs	r2, r0
 8022496:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802249a:	2e01      	cmp	r6, #1
 802249c:	f000 80b4 	beq.w	8022608 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80224a0:	0199      	lsls	r1, r3, #6
 80224a2:	f100 80b1 	bmi.w	8022608 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80224a6:	2d01      	cmp	r5, #1
 80224a8:	d175      	bne.n	8022596 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80224aa:	4d0b      	ldr	r5, [pc, #44]	; (80224d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80224ac:	682b      	ldr	r3, [r5, #0]
 80224ae:	462e      	mov	r6, r5
 80224b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80224b4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80224b6:	f7fe fe01 	bl	80210bc <HAL_GetTick>
 80224ba:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80224bc:	682b      	ldr	r3, [r5, #0]
 80224be:	009b      	lsls	r3, r3, #2
 80224c0:	f100 8126 	bmi.w	8022710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80224c4:	6822      	ldr	r2, [r4, #0]
 80224c6:	0315      	lsls	r5, r2, #12
 80224c8:	d501      	bpl.n	80224ce <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80224ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80224cc:	b143      	cbz	r3, 80224e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80224ce:	02d0      	lsls	r0, r2, #11
 80224d0:	d521      	bpl.n	8022516 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80224d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80224d4:	b9fb      	cbnz	r3, 8022516 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80224d6:	e003      	b.n	80224e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80224d8:	40023800 	.word	0x40023800
 80224dc:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80224e0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80224e4:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80224e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80224ec:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80224f0:	430b      	orrs	r3, r1
 80224f2:	6961      	ldr	r1, [r4, #20]
 80224f4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80224f8:	69a1      	ldr	r1, [r4, #24]
 80224fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80224fe:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8022502:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8022506:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8022508:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 802250c:	3901      	subs	r1, #1
 802250e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8022512:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8022516:	0291      	lsls	r1, r2, #10
 8022518:	d515      	bpl.n	8022546 <HAL_RCCEx_PeriphCLKConfig+0x326>
 802251a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 802251c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022520:	d111      	bne.n	8022546 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8022522:	4982      	ldr	r1, [pc, #520]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8022524:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8022528:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 802252c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8022530:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8022534:	4303      	orrs	r3, r0
 8022536:	6960      	ldr	r0, [r4, #20]
 8022538:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 802253c:	6a20      	ldr	r0, [r4, #32]
 802253e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8022542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8022546:	0712      	lsls	r2, r2, #28
 8022548:	d519      	bpl.n	802257e <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 802254a:	4a78      	ldr	r2, [pc, #480]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 802254c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8022550:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8022554:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8022558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802255c:	430b      	orrs	r3, r1
 802255e:	6961      	ldr	r1, [r4, #20]
 8022560:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8022564:	69e1      	ldr	r1, [r4, #28]
 8022566:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 802256a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 802256e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8022572:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8022574:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8022578:	430b      	orrs	r3, r1
 802257a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 802257e:	4c6b      	ldr	r4, [pc, #428]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8022580:	6823      	ldr	r3, [r4, #0]
 8022582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022586:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022588:	f7fe fd98 	bl	80210bc <HAL_GetTick>
 802258c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802258e:	6823      	ldr	r3, [r4, #0]
 8022590:	009b      	lsls	r3, r3, #2
 8022592:	f140 80c4 	bpl.w	802271e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8022596:	2000      	movs	r0, #0
 8022598:	e009      	b.n	80225ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 802259a:	2601      	movs	r6, #1
 802259c:	e67c      	b.n	8022298 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802259e:	f7fe fd8d 	bl	80210bc <HAL_GetTick>
 80225a2:	eba0 0008 	sub.w	r0, r0, r8
 80225a6:	2864      	cmp	r0, #100	; 0x64
 80225a8:	f67f ae8e 	bls.w	80222c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80225ac:	2003      	movs	r0, #3
}
 80225ae:	b003      	add	sp, #12
 80225b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80225b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80225b6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80225ba:	4293      	cmp	r3, r2
 80225bc:	f43f ae8e 	beq.w	80222dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80225c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80225c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80225c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80225c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80225cc:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80225ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80225d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80225d4:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80225d6:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80225d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80225da:	07da      	lsls	r2, r3, #31
 80225dc:	f57f ae7e 	bpl.w	80222dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80225e0:	f7fe fd6c 	bl	80210bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80225e4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80225e8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80225ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80225ec:	079b      	lsls	r3, r3, #30
 80225ee:	f53f ae75 	bmi.w	80222dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80225f2:	f7fe fd63 	bl	80210bc <HAL_GetTick>
 80225f6:	eba0 0008 	sub.w	r0, r0, r8
 80225fa:	4548      	cmp	r0, r9
 80225fc:	d9f5      	bls.n	80225ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80225fe:	e7d5      	b.n	80225ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8022600:	6891      	ldr	r1, [r2, #8]
 8022602:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8022606:	e679      	b.n	80222fc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8022608:	4e48      	ldr	r6, [pc, #288]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 802260a:	6833      	ldr	r3, [r6, #0]
 802260c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8022610:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8022612:	f7fe fd53 	bl	80210bc <HAL_GetTick>
 8022616:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8022618:	6833      	ldr	r3, [r6, #0]
 802261a:	011a      	lsls	r2, r3, #4
 802261c:	d472      	bmi.n	8022704 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 802261e:	6822      	ldr	r2, [r4, #0]
 8022620:	07d3      	lsls	r3, r2, #31
 8022622:	d512      	bpl.n	802264a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8022624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022626:	b983      	cbnz	r3, 802264a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8022628:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 802262c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8022630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8022634:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8022638:	430b      	orrs	r3, r1
 802263a:	6861      	ldr	r1, [r4, #4]
 802263c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8022640:	68a1      	ldr	r1, [r4, #8]
 8022642:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8022646:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 802264a:	0317      	lsls	r7, r2, #12
 802264c:	d503      	bpl.n	8022656 <HAL_RCCEx_PeriphCLKConfig+0x436>
 802264e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022654:	d005      	beq.n	8022662 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8022656:	02d6      	lsls	r6, r2, #11
 8022658:	d51e      	bpl.n	8022698 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 802265a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802265c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8022660:	d11a      	bne.n	8022698 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8022662:	4932      	ldr	r1, [pc, #200]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8022664:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8022668:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 802266c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8022670:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8022674:	4303      	orrs	r3, r0
 8022676:	6860      	ldr	r0, [r4, #4]
 8022678:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 802267c:	68e0      	ldr	r0, [r4, #12]
 802267e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8022682:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8022686:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 802268a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802268c:	f020 001f 	bic.w	r0, r0, #31
 8022690:	3b01      	subs	r3, #1
 8022692:	4303      	orrs	r3, r0
 8022694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8022698:	01d0      	lsls	r0, r2, #7
 802269a:	d511      	bpl.n	80226c0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 802269c:	4923      	ldr	r1, [pc, #140]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 802269e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80226a2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80226a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80226aa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80226ae:	4303      	orrs	r3, r0
 80226b0:	6860      	ldr	r0, [r4, #4]
 80226b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80226b6:	6920      	ldr	r0, [r4, #16]
 80226b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80226bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80226c0:	0191      	lsls	r1, r2, #6
 80226c2:	d50d      	bpl.n	80226e0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80226c4:	6923      	ldr	r3, [r4, #16]
 80226c6:	6862      	ldr	r2, [r4, #4]
 80226c8:	041b      	lsls	r3, r3, #16
 80226ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80226ce:	68e2      	ldr	r2, [r4, #12]
 80226d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80226d4:	68a2      	ldr	r2, [r4, #8]
 80226d6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80226da:	4a14      	ldr	r2, [pc, #80]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80226dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80226e0:	4e12      	ldr	r6, [pc, #72]	; (802272c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80226e2:	6833      	ldr	r3, [r6, #0]
 80226e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80226e8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80226ea:	f7fe fce7 	bl	80210bc <HAL_GetTick>
 80226ee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80226f0:	6833      	ldr	r3, [r6, #0]
 80226f2:	011a      	lsls	r2, r3, #4
 80226f4:	f53f aed7 	bmi.w	80224a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80226f8:	f7fe fce0 	bl	80210bc <HAL_GetTick>
 80226fc:	1bc0      	subs	r0, r0, r7
 80226fe:	2864      	cmp	r0, #100	; 0x64
 8022700:	d9f6      	bls.n	80226f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8022702:	e753      	b.n	80225ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8022704:	f7fe fcda 	bl	80210bc <HAL_GetTick>
 8022708:	1bc0      	subs	r0, r0, r7
 802270a:	2864      	cmp	r0, #100	; 0x64
 802270c:	d984      	bls.n	8022618 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 802270e:	e74d      	b.n	80225ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8022710:	f7fe fcd4 	bl	80210bc <HAL_GetTick>
 8022714:	1bc0      	subs	r0, r0, r7
 8022716:	2864      	cmp	r0, #100	; 0x64
 8022718:	f67f aed0 	bls.w	80224bc <HAL_RCCEx_PeriphCLKConfig+0x29c>
 802271c:	e746      	b.n	80225ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 802271e:	f7fe fccd 	bl	80210bc <HAL_GetTick>
 8022722:	1b40      	subs	r0, r0, r5
 8022724:	2864      	cmp	r0, #100	; 0x64
 8022726:	f67f af32 	bls.w	802258e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 802272a:	e73f      	b.n	80225ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
 802272c:	40023800 	.word	0x40023800

08022730 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8022730:	b538      	push	{r3, r4, r5, lr}
 8022732:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8022734:	4604      	mov	r4, r0
 8022736:	b1c8      	cbz	r0, 802276c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8022738:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 802273c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8022740:	b91b      	cbnz	r3, 802274a <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8022742:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8022746:	f7de fde3 	bl	8001310 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802274a:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802274c:	1d21      	adds	r1, r4, #4
 802274e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8022750:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8022754:	f000 faaa 	bl	8022cac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8022758:	6862      	ldr	r2, [r4, #4]
 802275a:	4629      	mov	r1, r5
 802275c:	6820      	ldr	r0, [r4, #0]
 802275e:	f000 fadb 	bl	8022d18 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8022762:	2301      	movs	r3, #1
  
  return HAL_OK;
 8022764:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8022766:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 802276a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 802276c:	2001      	movs	r0, #1
 802276e:	e7fc      	b.n	802276a <HAL_SDRAM_Init+0x3a>

08022770 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8022770:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8022772:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8022776:	4604      	mov	r4, r0
 8022778:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 802277a:	2b02      	cmp	r3, #2
 802277c:	b2d8      	uxtb	r0, r3
 802277e:	d00d      	beq.n	802279c <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8022780:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8022782:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8022784:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8022788:	f000 fb09 	bl	8022d9e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802278c:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 802278e:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8022790:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8022792:	bf0c      	ite	eq
 8022794:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8022796:	2301      	movne	r3, #1
 8022798:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 802279c:	bd38      	pop	{r3, r4, r5, pc}

0802279e <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 802279e:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80227a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80227a4:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80227a6:	2b02      	cmp	r3, #2
 80227a8:	b2d8      	uxtb	r0, r3
 80227aa:	d009      	beq.n	80227c0 <HAL_SDRAM_SetAutoRefreshNumber+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80227ac:	2302      	movs	r3, #2
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 80227ae:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80227b0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 80227b4:	f000 fb05 	bl	8022dc2 <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80227b8:	2301      	movs	r3, #1
  
  return HAL_OK;
 80227ba:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80227bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80227c0:	bd10      	pop	{r4, pc}
	...

080227c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80227c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80227c8:	2b01      	cmp	r3, #1
 80227ca:	d133      	bne.n	8022834 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80227cc:	2302      	movs	r3, #2
 80227ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80227d2:	6803      	ldr	r3, [r0, #0]
 80227d4:	68da      	ldr	r2, [r3, #12]
 80227d6:	f042 0201 	orr.w	r2, r2, #1
 80227da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80227dc:	4a16      	ldr	r2, [pc, #88]	; (8022838 <HAL_TIM_Base_Start_IT+0x74>)
 80227de:	4293      	cmp	r3, r2
 80227e0:	d01a      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 80227e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80227e6:	d017      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 80227e8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80227ec:	4293      	cmp	r3, r2
 80227ee:	d013      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 80227f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80227f4:	4293      	cmp	r3, r2
 80227f6:	d00f      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 80227f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80227fc:	4293      	cmp	r3, r2
 80227fe:	d00b      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 8022800:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022804:	4293      	cmp	r3, r2
 8022806:	d007      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 8022808:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 802280c:	4293      	cmp	r3, r2
 802280e:	d003      	beq.n	8022818 <HAL_TIM_Base_Start_IT+0x54>
 8022810:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8022814:	4293      	cmp	r3, r2
 8022816:	d107      	bne.n	8022828 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8022818:	6899      	ldr	r1, [r3, #8]
 802281a:	4a08      	ldr	r2, [pc, #32]	; (802283c <HAL_TIM_Base_Start_IT+0x78>)
 802281c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802281e:	2a06      	cmp	r2, #6
 8022820:	d006      	beq.n	8022830 <HAL_TIM_Base_Start_IT+0x6c>
 8022822:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8022826:	d003      	beq.n	8022830 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8022828:	681a      	ldr	r2, [r3, #0]
 802282a:	f042 0201 	orr.w	r2, r2, #1
 802282e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8022830:	2000      	movs	r0, #0
}
 8022832:	4770      	bx	lr
    return HAL_ERROR;
 8022834:	2001      	movs	r0, #1
 8022836:	4770      	bx	lr
 8022838:	40010000 	.word	0x40010000
 802283c:	00010007 	.word	0x00010007

08022840 <HAL_TIM_OC_DelayElapsedCallback>:
 8022840:	4770      	bx	lr

08022842 <HAL_TIM_IC_CaptureCallback>:
 8022842:	4770      	bx	lr

08022844 <HAL_TIM_PWM_PulseFinishedCallback>:
 8022844:	4770      	bx	lr

08022846 <HAL_TIM_TriggerCallback>:
 8022846:	4770      	bx	lr

08022848 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8022848:	6803      	ldr	r3, [r0, #0]
 802284a:	691a      	ldr	r2, [r3, #16]
 802284c:	0791      	lsls	r1, r2, #30
{
 802284e:	b510      	push	{r4, lr}
 8022850:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8022852:	d50f      	bpl.n	8022874 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8022854:	68da      	ldr	r2, [r3, #12]
 8022856:	0792      	lsls	r2, r2, #30
 8022858:	d50c      	bpl.n	8022874 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802285a:	f06f 0202 	mvn.w	r2, #2
 802285e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022860:	2201      	movs	r2, #1
 8022862:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8022864:	699b      	ldr	r3, [r3, #24]
 8022866:	0799      	lsls	r1, r3, #30
 8022868:	f000 8085 	beq.w	8022976 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802286c:	f7ff ffe9 	bl	8022842 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8022870:	2300      	movs	r3, #0
 8022872:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8022874:	6823      	ldr	r3, [r4, #0]
 8022876:	691a      	ldr	r2, [r3, #16]
 8022878:	0752      	lsls	r2, r2, #29
 802287a:	d510      	bpl.n	802289e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802287c:	68da      	ldr	r2, [r3, #12]
 802287e:	0750      	lsls	r0, r2, #29
 8022880:	d50d      	bpl.n	802289e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8022882:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8022886:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8022888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802288a:	2202      	movs	r2, #2
 802288c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802288e:	699b      	ldr	r3, [r3, #24]
 8022890:	f413 7f40 	tst.w	r3, #768	; 0x300
 8022894:	d075      	beq.n	8022982 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8022896:	f7ff ffd4 	bl	8022842 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802289a:	2300      	movs	r3, #0
 802289c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802289e:	6823      	ldr	r3, [r4, #0]
 80228a0:	691a      	ldr	r2, [r3, #16]
 80228a2:	0711      	lsls	r1, r2, #28
 80228a4:	d50f      	bpl.n	80228c6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80228a6:	68da      	ldr	r2, [r3, #12]
 80228a8:	0712      	lsls	r2, r2, #28
 80228aa:	d50c      	bpl.n	80228c6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80228ac:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80228b0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80228b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80228b4:	2204      	movs	r2, #4
 80228b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80228b8:	69db      	ldr	r3, [r3, #28]
 80228ba:	079b      	lsls	r3, r3, #30
 80228bc:	d067      	beq.n	802298e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80228be:	f7ff ffc0 	bl	8022842 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80228c2:	2300      	movs	r3, #0
 80228c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80228c6:	6823      	ldr	r3, [r4, #0]
 80228c8:	691a      	ldr	r2, [r3, #16]
 80228ca:	06d0      	lsls	r0, r2, #27
 80228cc:	d510      	bpl.n	80228f0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80228ce:	68da      	ldr	r2, [r3, #12]
 80228d0:	06d1      	lsls	r1, r2, #27
 80228d2:	d50d      	bpl.n	80228f0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80228d4:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80228d8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80228da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80228dc:	2208      	movs	r2, #8
 80228de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80228e0:	69db      	ldr	r3, [r3, #28]
 80228e2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80228e6:	d058      	beq.n	802299a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80228e8:	f7ff ffab 	bl	8022842 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80228ec:	2300      	movs	r3, #0
 80228ee:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80228f0:	6823      	ldr	r3, [r4, #0]
 80228f2:	691a      	ldr	r2, [r3, #16]
 80228f4:	07d2      	lsls	r2, r2, #31
 80228f6:	d508      	bpl.n	802290a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80228f8:	68da      	ldr	r2, [r3, #12]
 80228fa:	07d0      	lsls	r0, r2, #31
 80228fc:	d505      	bpl.n	802290a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80228fe:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8022902:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8022904:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8022906:	f7de ffcf 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802290a:	6823      	ldr	r3, [r4, #0]
 802290c:	691a      	ldr	r2, [r3, #16]
 802290e:	0611      	lsls	r1, r2, #24
 8022910:	d508      	bpl.n	8022924 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8022912:	68da      	ldr	r2, [r3, #12]
 8022914:	0612      	lsls	r2, r2, #24
 8022916:	d505      	bpl.n	8022924 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8022918:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802291c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802291e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8022920:	f000 f9c1 	bl	8022ca6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8022924:	6823      	ldr	r3, [r4, #0]
 8022926:	691a      	ldr	r2, [r3, #16]
 8022928:	05d0      	lsls	r0, r2, #23
 802292a:	d508      	bpl.n	802293e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802292c:	68da      	ldr	r2, [r3, #12]
 802292e:	0611      	lsls	r1, r2, #24
 8022930:	d505      	bpl.n	802293e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8022932:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8022936:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8022938:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 802293a:	f000 f9b5 	bl	8022ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802293e:	6823      	ldr	r3, [r4, #0]
 8022940:	691a      	ldr	r2, [r3, #16]
 8022942:	0652      	lsls	r2, r2, #25
 8022944:	d508      	bpl.n	8022958 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8022946:	68da      	ldr	r2, [r3, #12]
 8022948:	0650      	lsls	r0, r2, #25
 802294a:	d505      	bpl.n	8022958 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802294c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8022950:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8022952:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8022954:	f7ff ff77 	bl	8022846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8022958:	6823      	ldr	r3, [r4, #0]
 802295a:	691a      	ldr	r2, [r3, #16]
 802295c:	0691      	lsls	r1, r2, #26
 802295e:	d522      	bpl.n	80229a6 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8022960:	68da      	ldr	r2, [r3, #12]
 8022962:	0692      	lsls	r2, r2, #26
 8022964:	d51f      	bpl.n	80229a6 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8022966:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802296a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802296c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802296e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8022972:	f000 b997 	b.w	8022ca4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8022976:	f7ff ff63 	bl	8022840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802297a:	4620      	mov	r0, r4
 802297c:	f7ff ff62 	bl	8022844 <HAL_TIM_PWM_PulseFinishedCallback>
 8022980:	e776      	b.n	8022870 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8022982:	f7ff ff5d 	bl	8022840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022986:	4620      	mov	r0, r4
 8022988:	f7ff ff5c 	bl	8022844 <HAL_TIM_PWM_PulseFinishedCallback>
 802298c:	e785      	b.n	802289a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802298e:	f7ff ff57 	bl	8022840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022992:	4620      	mov	r0, r4
 8022994:	f7ff ff56 	bl	8022844 <HAL_TIM_PWM_PulseFinishedCallback>
 8022998:	e793      	b.n	80228c2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802299a:	f7ff ff51 	bl	8022840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802299e:	4620      	mov	r0, r4
 80229a0:	f7ff ff50 	bl	8022844 <HAL_TIM_PWM_PulseFinishedCallback>
 80229a4:	e7a2      	b.n	80228ec <HAL_TIM_IRQHandler+0xa4>
}
 80229a6:	bd10      	pop	{r4, pc}

080229a8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80229a8:	4a30      	ldr	r2, [pc, #192]	; (8022a6c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80229aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80229ac:	4290      	cmp	r0, r2
 80229ae:	d012      	beq.n	80229d6 <TIM_Base_SetConfig+0x2e>
 80229b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80229b4:	d00f      	beq.n	80229d6 <TIM_Base_SetConfig+0x2e>
 80229b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80229ba:	4290      	cmp	r0, r2
 80229bc:	d00b      	beq.n	80229d6 <TIM_Base_SetConfig+0x2e>
 80229be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80229c2:	4290      	cmp	r0, r2
 80229c4:	d007      	beq.n	80229d6 <TIM_Base_SetConfig+0x2e>
 80229c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80229ca:	4290      	cmp	r0, r2
 80229cc:	d003      	beq.n	80229d6 <TIM_Base_SetConfig+0x2e>
 80229ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80229d2:	4290      	cmp	r0, r2
 80229d4:	d119      	bne.n	8022a0a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80229d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80229d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80229dc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80229de:	4a23      	ldr	r2, [pc, #140]	; (8022a6c <TIM_Base_SetConfig+0xc4>)
 80229e0:	4290      	cmp	r0, r2
 80229e2:	d029      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 80229e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80229e8:	d026      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 80229ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80229ee:	4290      	cmp	r0, r2
 80229f0:	d022      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 80229f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80229f6:	4290      	cmp	r0, r2
 80229f8:	d01e      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 80229fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80229fe:	4290      	cmp	r0, r2
 8022a00:	d01a      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022a06:	4290      	cmp	r0, r2
 8022a08:	d016      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a0a:	4a19      	ldr	r2, [pc, #100]	; (8022a70 <TIM_Base_SetConfig+0xc8>)
 8022a0c:	4290      	cmp	r0, r2
 8022a0e:	d013      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022a14:	4290      	cmp	r0, r2
 8022a16:	d00f      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022a1c:	4290      	cmp	r0, r2
 8022a1e:	d00b      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a20:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8022a24:	4290      	cmp	r0, r2
 8022a26:	d007      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022a2c:	4290      	cmp	r0, r2
 8022a2e:	d003      	beq.n	8022a38 <TIM_Base_SetConfig+0x90>
 8022a30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022a34:	4290      	cmp	r0, r2
 8022a36:	d103      	bne.n	8022a40 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8022a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022a3c:	68ca      	ldr	r2, [r1, #12]
 8022a3e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022a40:	694a      	ldr	r2, [r1, #20]
 8022a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022a46:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8022a48:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022a4a:	688b      	ldr	r3, [r1, #8]
 8022a4c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022a4e:	680b      	ldr	r3, [r1, #0]
 8022a50:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022a52:	4b06      	ldr	r3, [pc, #24]	; (8022a6c <TIM_Base_SetConfig+0xc4>)
 8022a54:	4298      	cmp	r0, r3
 8022a56:	d003      	beq.n	8022a60 <TIM_Base_SetConfig+0xb8>
 8022a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8022a5c:	4298      	cmp	r0, r3
 8022a5e:	d101      	bne.n	8022a64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022a60:	690b      	ldr	r3, [r1, #16]
 8022a62:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8022a64:	2301      	movs	r3, #1
 8022a66:	6143      	str	r3, [r0, #20]
}
 8022a68:	4770      	bx	lr
 8022a6a:	bf00      	nop
 8022a6c:	40010000 	.word	0x40010000
 8022a70:	40014000 	.word	0x40014000

08022a74 <HAL_TIM_Base_Init>:
{
 8022a74:	b510      	push	{r4, lr}
  if (htim == NULL)
 8022a76:	4604      	mov	r4, r0
 8022a78:	b350      	cbz	r0, 8022ad0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8022a7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8022a7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8022a82:	b91b      	cbnz	r3, 8022a8c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8022a84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8022a88:	f7df f850 	bl	8001b2c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8022a8c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022a8e:	6820      	ldr	r0, [r4, #0]
 8022a90:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8022a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022a96:	f7ff ff87 	bl	80229a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8022a9a:	2301      	movs	r3, #1
  return HAL_OK;
 8022a9c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8022a9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022aa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8022aa6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8022aaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8022aae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8022ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8022aba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022ac2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8022ac6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8022aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8022ace:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8022ad0:	2001      	movs	r0, #1
 8022ad2:	e7fc      	b.n	8022ace <HAL_TIM_Base_Init+0x5a>

08022ad4 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022ad4:	4311      	orrs	r1, r2
{
 8022ad6:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8022ad8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022ada:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022ade:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022ae2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8022ae4:	6083      	str	r3, [r0, #8]
}
 8022ae6:	bd10      	pop	{r4, pc}

08022ae8 <HAL_TIM_ConfigClockSource>:
{
 8022ae8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8022aea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8022aee:	4604      	mov	r4, r0
 8022af0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8022af2:	2b01      	cmp	r3, #1
 8022af4:	d025      	beq.n	8022b42 <HAL_TIM_ConfigClockSource+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8022af6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8022afa:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8022afc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8022afe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022b02:	4b42      	ldr	r3, [pc, #264]	; (8022c0c <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8022b04:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022b06:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8022b08:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8022b0a:	680b      	ldr	r3, [r1, #0]
 8022b0c:	2b60      	cmp	r3, #96	; 0x60
 8022b0e:	d04d      	beq.n	8022bac <HAL_TIM_ConfigClockSource+0xc4>
 8022b10:	d832      	bhi.n	8022b78 <HAL_TIM_ConfigClockSource+0x90>
 8022b12:	2b40      	cmp	r3, #64	; 0x40
 8022b14:	d062      	beq.n	8022bdc <HAL_TIM_ConfigClockSource+0xf4>
 8022b16:	d815      	bhi.n	8022b44 <HAL_TIM_ConfigClockSource+0x5c>
 8022b18:	2b20      	cmp	r3, #32
 8022b1a:	d003      	beq.n	8022b24 <HAL_TIM_ConfigClockSource+0x3c>
 8022b1c:	d809      	bhi.n	8022b32 <HAL_TIM_ConfigClockSource+0x4a>
 8022b1e:	f033 0210 	bics.w	r2, r3, #16
 8022b22:	d108      	bne.n	8022b36 <HAL_TIM_ConfigClockSource+0x4e>
  tmpsmcr = TIMx->SMCR;
 8022b24:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022b26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022b2a:	4313      	orrs	r3, r2
 8022b2c:	f043 0307 	orr.w	r3, r3, #7
 8022b30:	e020      	b.n	8022b74 <HAL_TIM_ConfigClockSource+0x8c>
  switch (sClockSourceConfig->ClockSource)
 8022b32:	2b30      	cmp	r3, #48	; 0x30
 8022b34:	d0f6      	beq.n	8022b24 <HAL_TIM_ConfigClockSource+0x3c>
  htim->State = HAL_TIM_STATE_READY;
 8022b36:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8022b38:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8022b3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8022b3e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8022b42:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8022b44:	2b50      	cmp	r3, #80	; 0x50
 8022b46:	d1f6      	bne.n	8022b36 <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022b48:	684a      	ldr	r2, [r1, #4]
 8022b4a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8022b4c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022b4e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022b50:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022b54:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8022b58:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022b5a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022b5c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8022b62:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8022b66:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8022b68:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022b6a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022b70:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8022b74:	6083      	str	r3, [r0, #8]
}
 8022b76:	e7de      	b.n	8022b36 <HAL_TIM_ConfigClockSource+0x4e>
  switch (sClockSourceConfig->ClockSource)
 8022b78:	2b70      	cmp	r3, #112	; 0x70
 8022b7a:	d00c      	beq.n	8022b96 <HAL_TIM_ConfigClockSource+0xae>
 8022b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022b80:	d1d9      	bne.n	8022b36 <HAL_TIM_ConfigClockSource+0x4e>
      TIM_ETR_SetConfig(htim->Instance,
 8022b82:	68cb      	ldr	r3, [r1, #12]
 8022b84:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8022b88:	f7ff ffa4 	bl	8022ad4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8022b8c:	6822      	ldr	r2, [r4, #0]
 8022b8e:	6893      	ldr	r3, [r2, #8]
 8022b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022b94:	e008      	b.n	8022ba8 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8022b96:	68cb      	ldr	r3, [r1, #12]
 8022b98:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8022b9c:	f7ff ff9a 	bl	8022ad4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8022ba0:	6822      	ldr	r2, [r4, #0]
 8022ba2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8022ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8022ba8:	6093      	str	r3, [r2, #8]
      break;
 8022baa:	e7c4      	b.n	8022b36 <HAL_TIM_ConfigClockSource+0x4e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8022bac:	684d      	ldr	r5, [r1, #4]
 8022bae:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022bb0:	6a01      	ldr	r1, [r0, #32]
 8022bb2:	f021 0110 	bic.w	r1, r1, #16
 8022bb6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022bb8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8022bba:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022bbc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8022bc4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8022bc8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8022bcc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8022bce:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022bd0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022bd6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8022bda:	e7cb      	b.n	8022b74 <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022bdc:	684a      	ldr	r2, [r1, #4]
 8022bde:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8022be0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022be2:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022be4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022be8:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8022bec:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022bee:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022bf0:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8022bf6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8022bfa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8022bfc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8022bfe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8022c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022c04:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8022c08:	e7b4      	b.n	8022b74 <HAL_TIM_ConfigClockSource+0x8c>
 8022c0a:	bf00      	nop
 8022c0c:	fffe0088 	.word	0xfffe0088

08022c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8022c10:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8022c12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8022c16:	2b01      	cmp	r3, #1
 8022c18:	f04f 0302 	mov.w	r3, #2
 8022c1c:	d03d      	beq.n	8022c9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022c1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8022c22:	4d1f      	ldr	r5, [pc, #124]	; (8022ca0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 8022c24:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8022c26:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8022c28:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8022c2a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8022c2c:	d003      	beq.n	8022c36 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8022c2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8022c32:	42ab      	cmp	r3, r5
 8022c34:	d103      	bne.n	8022c3e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8022c36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8022c3a:	684d      	ldr	r5, [r1, #4]
 8022c3c:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022c3e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8022c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022c44:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8022c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022c48:	4a15      	ldr	r2, [pc, #84]	; (8022ca0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8022c4a:	4293      	cmp	r3, r2
 8022c4c:	d01a      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022c52:	d017      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c54:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8022c58:	4293      	cmp	r3, r2
 8022c5a:	d013      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022c60:	4293      	cmp	r3, r2
 8022c62:	d00f      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8022c68:	4293      	cmp	r3, r2
 8022c6a:	d00b      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c6c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8022c70:	4293      	cmp	r3, r2
 8022c72:	d007      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c74:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8022c78:	4293      	cmp	r3, r2
 8022c7a:	d003      	beq.n	8022c84 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8022c7c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8022c80:	4293      	cmp	r3, r2
 8022c82:	d104      	bne.n	8022c8e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022c84:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8022c86:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022c8a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8022c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8022c8e:	2301      	movs	r3, #1
 8022c90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8022c94:	2300      	movs	r3, #0
 8022c96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8022c9a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8022c9c:	bd30      	pop	{r4, r5, pc}
 8022c9e:	bf00      	nop
 8022ca0:	40010000 	.word	0x40010000

08022ca4 <HAL_TIMEx_CommutCallback>:
 8022ca4:	4770      	bx	lr

08022ca6 <HAL_TIMEx_BreakCallback>:
 8022ca6:	4770      	bx	lr

08022ca8 <HAL_TIMEx_Break2Callback>:
 8022ca8:	4770      	bx	lr
	...

08022cac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8022cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022cb0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8022cb2:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8022cb6:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8022cba:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8022cbe:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8022cc2:	6809      	ldr	r1, [r1, #0]
 8022cc4:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8022cc6:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8022cc8:	2901      	cmp	r1, #1
 8022cca:	4912      	ldr	r1, [pc, #72]	; (8022d14 <FMC_SDRAM_Init+0x68>)
 8022ccc:	d00f      	beq.n	8022cee <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022cce:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8022cd0:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022cd2:	432a      	orrs	r2, r5
 8022cd4:	ea42 0308 	orr.w	r3, r2, r8
 8022cd8:	ea43 030e 	orr.w	r3, r3, lr
 8022cdc:	ea43 030c 	orr.w	r3, r3, ip
 8022ce0:	433b      	orrs	r3, r7
 8022ce2:	4333      	orrs	r3, r6
 8022ce4:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8022ce6:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8022ce8:	2000      	movs	r0, #0
 8022cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8022cee:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8022cf0:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8022cf2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8022cf6:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022cf8:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8022cfc:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022cfe:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8022d02:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8022d04:	ea42 020c 	orr.w	r2, r2, ip
 8022d08:	433a      	orrs	r2, r7
 8022d0a:	4332      	orrs	r2, r6
 8022d0c:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8022d0e:	6042      	str	r2, [r0, #4]
 8022d10:	e7ea      	b.n	8022ce8 <FMC_SDRAM_Init+0x3c>
 8022d12:	bf00      	nop
 8022d14:	ffff8000 	.word	0xffff8000

08022d18 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8022d18:	68cb      	ldr	r3, [r1, #12]
 8022d1a:	2a01      	cmp	r2, #1
{
 8022d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d1e:	680c      	ldr	r4, [r1, #0]
 8022d20:	f103 37ff 	add.w	r7, r3, #4294967295
 8022d24:	694b      	ldr	r3, [r1, #20]
 8022d26:	688e      	ldr	r6, [r1, #8]
 8022d28:	f104 3cff 	add.w	ip, r4, #4294967295
 8022d2c:	690d      	ldr	r5, [r1, #16]
 8022d2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8022d32:	684c      	ldr	r4, [r1, #4]
 8022d34:	f106 36ff 	add.w	r6, r6, #4294967295
 8022d38:	6989      	ldr	r1, [r1, #24]
 8022d3a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8022d3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8022d42:	f105 35ff 	add.w	r5, r5, #4294967295
 8022d46:	f101 31ff 	add.w	r1, r1, #4294967295
 8022d4a:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8022d4e:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8022d52:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8022d56:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8022d5a:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8022d5e:	d00c      	beq.n	8022d7a <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d60:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8022d64:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d66:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8022d68:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d6c:	4333      	orrs	r3, r6
 8022d6e:	432b      	orrs	r3, r5
 8022d70:	430b      	orrs	r3, r1
 8022d72:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8022d74:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8022d76:	2000      	movs	r0, #0
 8022d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8022d7a:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d7c:	4334      	orrs	r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8022d7e:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d82:	ea44 020c 	orr.w	r2, r4, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8022d86:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d8a:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8022d8c:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8022d8e:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d90:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8022d92:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8022d96:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8022d98:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8022d9a:	60c2      	str	r2, [r0, #12]
 8022d9c:	e7eb      	b.n	8022d76 <FMC_SDRAM_Timing_Init+0x5e>

08022d9e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8022d9e:	6902      	ldr	r2, [r0, #16]
{ 
 8022da0:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8022da2:	e9d1 3400 	ldrd	r3, r4, [r1]
 8022da6:	0d92      	lsrs	r2, r2, #22
 8022da8:	4323      	orrs	r3, r4
 8022daa:	68cc      	ldr	r4, [r1, #12]
 8022dac:	0592      	lsls	r2, r2, #22
 8022dae:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8022db2:	4313      	orrs	r3, r2
 8022db4:	688a      	ldr	r2, [r1, #8]
 8022db6:	3a01      	subs	r2, #1
 8022db8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8022dbc:	6103      	str	r3, [r0, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
}
 8022dbe:	2000      	movs	r0, #0
 8022dc0:	bd10      	pop	{r4, pc}

08022dc2 <FMC_SDRAM_SetAutoRefreshNumber>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 8022dc2:	6903      	ldr	r3, [r0, #16]
 8022dc4:	ea43 1141 	orr.w	r1, r3, r1, lsl #5
 8022dc8:	6101      	str	r1, [r0, #16]

  return HAL_OK;  
}
 8022dca:	2000      	movs	r0, #0
 8022dcc:	4770      	bx	lr

08022dce <__cxa_guard_acquire>:
 8022dce:	6803      	ldr	r3, [r0, #0]
 8022dd0:	07db      	lsls	r3, r3, #31
 8022dd2:	d406      	bmi.n	8022de2 <__cxa_guard_acquire+0x14>
 8022dd4:	7843      	ldrb	r3, [r0, #1]
 8022dd6:	b103      	cbz	r3, 8022dda <__cxa_guard_acquire+0xc>
 8022dd8:	deff      	udf	#255	; 0xff
 8022dda:	2301      	movs	r3, #1
 8022ddc:	7043      	strb	r3, [r0, #1]
 8022dde:	4618      	mov	r0, r3
 8022de0:	4770      	bx	lr
 8022de2:	2000      	movs	r0, #0
 8022de4:	4770      	bx	lr

08022de6 <__cxa_guard_release>:
 8022de6:	2301      	movs	r3, #1
 8022de8:	6003      	str	r3, [r0, #0]
 8022dea:	4770      	bx	lr

08022dec <_Znwj>:
 8022dec:	2801      	cmp	r0, #1
 8022dee:	bf38      	it	cc
 8022df0:	2001      	movcc	r0, #1
 8022df2:	b510      	push	{r4, lr}
 8022df4:	4604      	mov	r4, r0
 8022df6:	4620      	mov	r0, r4
 8022df8:	f000 f874 	bl	8022ee4 <malloc>
 8022dfc:	b930      	cbnz	r0, 8022e0c <_Znwj+0x20>
 8022dfe:	f000 f807 	bl	8022e10 <_ZSt15get_new_handlerv>
 8022e02:	b908      	cbnz	r0, 8022e08 <_Znwj+0x1c>
 8022e04:	f000 f80c 	bl	8022e20 <abort>
 8022e08:	4780      	blx	r0
 8022e0a:	e7f4      	b.n	8022df6 <_Znwj+0xa>
 8022e0c:	bd10      	pop	{r4, pc}
	...

08022e10 <_ZSt15get_new_handlerv>:
 8022e10:	4b02      	ldr	r3, [pc, #8]	; (8022e1c <_ZSt15get_new_handlerv+0xc>)
 8022e12:	6818      	ldr	r0, [r3, #0]
 8022e14:	f3bf 8f5b 	dmb	ish
 8022e18:	4770      	bx	lr
 8022e1a:	bf00      	nop
 8022e1c:	2000ab80 	.word	0x2000ab80

08022e20 <abort>:
 8022e20:	b508      	push	{r3, lr}
 8022e22:	2006      	movs	r0, #6
 8022e24:	f000 ff14 	bl	8023c50 <raise>
 8022e28:	2001      	movs	r0, #1
 8022e2a:	f7de fded 	bl	8001a08 <_exit>
	...

08022e30 <__assert_func>:
 8022e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022e32:	4614      	mov	r4, r2
 8022e34:	461a      	mov	r2, r3
 8022e36:	4b09      	ldr	r3, [pc, #36]	; (8022e5c <__assert_func+0x2c>)
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	4605      	mov	r5, r0
 8022e3c:	68d8      	ldr	r0, [r3, #12]
 8022e3e:	b14c      	cbz	r4, 8022e54 <__assert_func+0x24>
 8022e40:	4b07      	ldr	r3, [pc, #28]	; (8022e60 <__assert_func+0x30>)
 8022e42:	9100      	str	r1, [sp, #0]
 8022e44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022e48:	4906      	ldr	r1, [pc, #24]	; (8022e64 <__assert_func+0x34>)
 8022e4a:	462b      	mov	r3, r5
 8022e4c:	f000 f814 	bl	8022e78 <fiprintf>
 8022e50:	f7ff ffe6 	bl	8022e20 <abort>
 8022e54:	4b04      	ldr	r3, [pc, #16]	; (8022e68 <__assert_func+0x38>)
 8022e56:	461c      	mov	r4, r3
 8022e58:	e7f3      	b.n	8022e42 <__assert_func+0x12>
 8022e5a:	bf00      	nop
 8022e5c:	20000078 	.word	0x20000078
 8022e60:	08029f60 	.word	0x08029f60
 8022e64:	08029f6d 	.word	0x08029f6d
 8022e68:	08029f9b 	.word	0x08029f9b

08022e6c <__errno>:
 8022e6c:	4b01      	ldr	r3, [pc, #4]	; (8022e74 <__errno+0x8>)
 8022e6e:	6818      	ldr	r0, [r3, #0]
 8022e70:	4770      	bx	lr
 8022e72:	bf00      	nop
 8022e74:	20000078 	.word	0x20000078

08022e78 <fiprintf>:
 8022e78:	b40e      	push	{r1, r2, r3}
 8022e7a:	b503      	push	{r0, r1, lr}
 8022e7c:	4601      	mov	r1, r0
 8022e7e:	ab03      	add	r3, sp, #12
 8022e80:	4805      	ldr	r0, [pc, #20]	; (8022e98 <fiprintf+0x20>)
 8022e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e86:	6800      	ldr	r0, [r0, #0]
 8022e88:	9301      	str	r3, [sp, #4]
 8022e8a:	f000 f90f 	bl	80230ac <_vfiprintf_r>
 8022e8e:	b002      	add	sp, #8
 8022e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e94:	b003      	add	sp, #12
 8022e96:	4770      	bx	lr
 8022e98:	20000078 	.word	0x20000078

08022e9c <__libc_init_array>:
 8022e9c:	b570      	push	{r4, r5, r6, lr}
 8022e9e:	4d0d      	ldr	r5, [pc, #52]	; (8022ed4 <__libc_init_array+0x38>)
 8022ea0:	4c0d      	ldr	r4, [pc, #52]	; (8022ed8 <__libc_init_array+0x3c>)
 8022ea2:	1b64      	subs	r4, r4, r5
 8022ea4:	10a4      	asrs	r4, r4, #2
 8022ea6:	2600      	movs	r6, #0
 8022ea8:	42a6      	cmp	r6, r4
 8022eaa:	d109      	bne.n	8022ec0 <__libc_init_array+0x24>
 8022eac:	4d0b      	ldr	r5, [pc, #44]	; (8022edc <__libc_init_array+0x40>)
 8022eae:	4c0c      	ldr	r4, [pc, #48]	; (8022ee0 <__libc_init_array+0x44>)
 8022eb0:	f002 fcc0 	bl	8025834 <_init>
 8022eb4:	1b64      	subs	r4, r4, r5
 8022eb6:	10a4      	asrs	r4, r4, #2
 8022eb8:	2600      	movs	r6, #0
 8022eba:	42a6      	cmp	r6, r4
 8022ebc:	d105      	bne.n	8022eca <__libc_init_array+0x2e>
 8022ebe:	bd70      	pop	{r4, r5, r6, pc}
 8022ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8022ec4:	4798      	blx	r3
 8022ec6:	3601      	adds	r6, #1
 8022ec8:	e7ee      	b.n	8022ea8 <__libc_init_array+0xc>
 8022eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8022ece:	4798      	blx	r3
 8022ed0:	3601      	adds	r6, #1
 8022ed2:	e7f2      	b.n	8022eba <__libc_init_array+0x1e>
 8022ed4:	0802a344 	.word	0x0802a344
 8022ed8:	0802a344 	.word	0x0802a344
 8022edc:	0802a344 	.word	0x0802a344
 8022ee0:	0802a354 	.word	0x0802a354

08022ee4 <malloc>:
 8022ee4:	4b02      	ldr	r3, [pc, #8]	; (8022ef0 <malloc+0xc>)
 8022ee6:	4601      	mov	r1, r0
 8022ee8:	6818      	ldr	r0, [r3, #0]
 8022eea:	f000 b85b 	b.w	8022fa4 <_malloc_r>
 8022eee:	bf00      	nop
 8022ef0:	20000078 	.word	0x20000078

08022ef4 <memset>:
 8022ef4:	4402      	add	r2, r0
 8022ef6:	4603      	mov	r3, r0
 8022ef8:	4293      	cmp	r3, r2
 8022efa:	d100      	bne.n	8022efe <memset+0xa>
 8022efc:	4770      	bx	lr
 8022efe:	f803 1b01 	strb.w	r1, [r3], #1
 8022f02:	e7f9      	b.n	8022ef8 <memset+0x4>

08022f04 <_free_r>:
 8022f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022f06:	2900      	cmp	r1, #0
 8022f08:	d048      	beq.n	8022f9c <_free_r+0x98>
 8022f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022f0e:	9001      	str	r0, [sp, #4]
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	f1a1 0404 	sub.w	r4, r1, #4
 8022f16:	bfb8      	it	lt
 8022f18:	18e4      	addlt	r4, r4, r3
 8022f1a:	f002 f827 	bl	8024f6c <__malloc_lock>
 8022f1e:	4a20      	ldr	r2, [pc, #128]	; (8022fa0 <_free_r+0x9c>)
 8022f20:	9801      	ldr	r0, [sp, #4]
 8022f22:	6813      	ldr	r3, [r2, #0]
 8022f24:	4615      	mov	r5, r2
 8022f26:	b933      	cbnz	r3, 8022f36 <_free_r+0x32>
 8022f28:	6063      	str	r3, [r4, #4]
 8022f2a:	6014      	str	r4, [r2, #0]
 8022f2c:	b003      	add	sp, #12
 8022f2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022f32:	f002 b821 	b.w	8024f78 <__malloc_unlock>
 8022f36:	42a3      	cmp	r3, r4
 8022f38:	d90b      	bls.n	8022f52 <_free_r+0x4e>
 8022f3a:	6821      	ldr	r1, [r4, #0]
 8022f3c:	1862      	adds	r2, r4, r1
 8022f3e:	4293      	cmp	r3, r2
 8022f40:	bf04      	itt	eq
 8022f42:	681a      	ldreq	r2, [r3, #0]
 8022f44:	685b      	ldreq	r3, [r3, #4]
 8022f46:	6063      	str	r3, [r4, #4]
 8022f48:	bf04      	itt	eq
 8022f4a:	1852      	addeq	r2, r2, r1
 8022f4c:	6022      	streq	r2, [r4, #0]
 8022f4e:	602c      	str	r4, [r5, #0]
 8022f50:	e7ec      	b.n	8022f2c <_free_r+0x28>
 8022f52:	461a      	mov	r2, r3
 8022f54:	685b      	ldr	r3, [r3, #4]
 8022f56:	b10b      	cbz	r3, 8022f5c <_free_r+0x58>
 8022f58:	42a3      	cmp	r3, r4
 8022f5a:	d9fa      	bls.n	8022f52 <_free_r+0x4e>
 8022f5c:	6811      	ldr	r1, [r2, #0]
 8022f5e:	1855      	adds	r5, r2, r1
 8022f60:	42a5      	cmp	r5, r4
 8022f62:	d10b      	bne.n	8022f7c <_free_r+0x78>
 8022f64:	6824      	ldr	r4, [r4, #0]
 8022f66:	4421      	add	r1, r4
 8022f68:	1854      	adds	r4, r2, r1
 8022f6a:	42a3      	cmp	r3, r4
 8022f6c:	6011      	str	r1, [r2, #0]
 8022f6e:	d1dd      	bne.n	8022f2c <_free_r+0x28>
 8022f70:	681c      	ldr	r4, [r3, #0]
 8022f72:	685b      	ldr	r3, [r3, #4]
 8022f74:	6053      	str	r3, [r2, #4]
 8022f76:	4421      	add	r1, r4
 8022f78:	6011      	str	r1, [r2, #0]
 8022f7a:	e7d7      	b.n	8022f2c <_free_r+0x28>
 8022f7c:	d902      	bls.n	8022f84 <_free_r+0x80>
 8022f7e:	230c      	movs	r3, #12
 8022f80:	6003      	str	r3, [r0, #0]
 8022f82:	e7d3      	b.n	8022f2c <_free_r+0x28>
 8022f84:	6825      	ldr	r5, [r4, #0]
 8022f86:	1961      	adds	r1, r4, r5
 8022f88:	428b      	cmp	r3, r1
 8022f8a:	bf04      	itt	eq
 8022f8c:	6819      	ldreq	r1, [r3, #0]
 8022f8e:	685b      	ldreq	r3, [r3, #4]
 8022f90:	6063      	str	r3, [r4, #4]
 8022f92:	bf04      	itt	eq
 8022f94:	1949      	addeq	r1, r1, r5
 8022f96:	6021      	streq	r1, [r4, #0]
 8022f98:	6054      	str	r4, [r2, #4]
 8022f9a:	e7c7      	b.n	8022f2c <_free_r+0x28>
 8022f9c:	b003      	add	sp, #12
 8022f9e:	bd30      	pop	{r4, r5, pc}
 8022fa0:	2000ab84 	.word	0x2000ab84

08022fa4 <_malloc_r>:
 8022fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fa6:	1ccd      	adds	r5, r1, #3
 8022fa8:	f025 0503 	bic.w	r5, r5, #3
 8022fac:	3508      	adds	r5, #8
 8022fae:	2d0c      	cmp	r5, #12
 8022fb0:	bf38      	it	cc
 8022fb2:	250c      	movcc	r5, #12
 8022fb4:	2d00      	cmp	r5, #0
 8022fb6:	4606      	mov	r6, r0
 8022fb8:	db01      	blt.n	8022fbe <_malloc_r+0x1a>
 8022fba:	42a9      	cmp	r1, r5
 8022fbc:	d903      	bls.n	8022fc6 <_malloc_r+0x22>
 8022fbe:	230c      	movs	r3, #12
 8022fc0:	6033      	str	r3, [r6, #0]
 8022fc2:	2000      	movs	r0, #0
 8022fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022fc6:	f001 ffd1 	bl	8024f6c <__malloc_lock>
 8022fca:	4921      	ldr	r1, [pc, #132]	; (8023050 <_malloc_r+0xac>)
 8022fcc:	680a      	ldr	r2, [r1, #0]
 8022fce:	4614      	mov	r4, r2
 8022fd0:	b99c      	cbnz	r4, 8022ffa <_malloc_r+0x56>
 8022fd2:	4f20      	ldr	r7, [pc, #128]	; (8023054 <_malloc_r+0xb0>)
 8022fd4:	683b      	ldr	r3, [r7, #0]
 8022fd6:	b923      	cbnz	r3, 8022fe2 <_malloc_r+0x3e>
 8022fd8:	4621      	mov	r1, r4
 8022fda:	4630      	mov	r0, r6
 8022fdc:	f000 fe00 	bl	8023be0 <_sbrk_r>
 8022fe0:	6038      	str	r0, [r7, #0]
 8022fe2:	4629      	mov	r1, r5
 8022fe4:	4630      	mov	r0, r6
 8022fe6:	f000 fdfb 	bl	8023be0 <_sbrk_r>
 8022fea:	1c43      	adds	r3, r0, #1
 8022fec:	d123      	bne.n	8023036 <_malloc_r+0x92>
 8022fee:	230c      	movs	r3, #12
 8022ff0:	6033      	str	r3, [r6, #0]
 8022ff2:	4630      	mov	r0, r6
 8022ff4:	f001 ffc0 	bl	8024f78 <__malloc_unlock>
 8022ff8:	e7e3      	b.n	8022fc2 <_malloc_r+0x1e>
 8022ffa:	6823      	ldr	r3, [r4, #0]
 8022ffc:	1b5b      	subs	r3, r3, r5
 8022ffe:	d417      	bmi.n	8023030 <_malloc_r+0x8c>
 8023000:	2b0b      	cmp	r3, #11
 8023002:	d903      	bls.n	802300c <_malloc_r+0x68>
 8023004:	6023      	str	r3, [r4, #0]
 8023006:	441c      	add	r4, r3
 8023008:	6025      	str	r5, [r4, #0]
 802300a:	e004      	b.n	8023016 <_malloc_r+0x72>
 802300c:	6863      	ldr	r3, [r4, #4]
 802300e:	42a2      	cmp	r2, r4
 8023010:	bf0c      	ite	eq
 8023012:	600b      	streq	r3, [r1, #0]
 8023014:	6053      	strne	r3, [r2, #4]
 8023016:	4630      	mov	r0, r6
 8023018:	f001 ffae 	bl	8024f78 <__malloc_unlock>
 802301c:	f104 000b 	add.w	r0, r4, #11
 8023020:	1d23      	adds	r3, r4, #4
 8023022:	f020 0007 	bic.w	r0, r0, #7
 8023026:	1ac2      	subs	r2, r0, r3
 8023028:	d0cc      	beq.n	8022fc4 <_malloc_r+0x20>
 802302a:	1a1b      	subs	r3, r3, r0
 802302c:	50a3      	str	r3, [r4, r2]
 802302e:	e7c9      	b.n	8022fc4 <_malloc_r+0x20>
 8023030:	4622      	mov	r2, r4
 8023032:	6864      	ldr	r4, [r4, #4]
 8023034:	e7cc      	b.n	8022fd0 <_malloc_r+0x2c>
 8023036:	1cc4      	adds	r4, r0, #3
 8023038:	f024 0403 	bic.w	r4, r4, #3
 802303c:	42a0      	cmp	r0, r4
 802303e:	d0e3      	beq.n	8023008 <_malloc_r+0x64>
 8023040:	1a21      	subs	r1, r4, r0
 8023042:	4630      	mov	r0, r6
 8023044:	f000 fdcc 	bl	8023be0 <_sbrk_r>
 8023048:	3001      	adds	r0, #1
 802304a:	d1dd      	bne.n	8023008 <_malloc_r+0x64>
 802304c:	e7cf      	b.n	8022fee <_malloc_r+0x4a>
 802304e:	bf00      	nop
 8023050:	2000ab84 	.word	0x2000ab84
 8023054:	2000ab88 	.word	0x2000ab88

08023058 <__sfputc_r>:
 8023058:	6893      	ldr	r3, [r2, #8]
 802305a:	3b01      	subs	r3, #1
 802305c:	2b00      	cmp	r3, #0
 802305e:	b410      	push	{r4}
 8023060:	6093      	str	r3, [r2, #8]
 8023062:	da08      	bge.n	8023076 <__sfputc_r+0x1e>
 8023064:	6994      	ldr	r4, [r2, #24]
 8023066:	42a3      	cmp	r3, r4
 8023068:	db01      	blt.n	802306e <__sfputc_r+0x16>
 802306a:	290a      	cmp	r1, #10
 802306c:	d103      	bne.n	8023076 <__sfputc_r+0x1e>
 802306e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023072:	f000 be11 	b.w	8023c98 <__swbuf_r>
 8023076:	6813      	ldr	r3, [r2, #0]
 8023078:	1c58      	adds	r0, r3, #1
 802307a:	6010      	str	r0, [r2, #0]
 802307c:	7019      	strb	r1, [r3, #0]
 802307e:	4608      	mov	r0, r1
 8023080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023084:	4770      	bx	lr

08023086 <__sfputs_r>:
 8023086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023088:	4606      	mov	r6, r0
 802308a:	460f      	mov	r7, r1
 802308c:	4614      	mov	r4, r2
 802308e:	18d5      	adds	r5, r2, r3
 8023090:	42ac      	cmp	r4, r5
 8023092:	d101      	bne.n	8023098 <__sfputs_r+0x12>
 8023094:	2000      	movs	r0, #0
 8023096:	e007      	b.n	80230a8 <__sfputs_r+0x22>
 8023098:	f814 1b01 	ldrb.w	r1, [r4], #1
 802309c:	463a      	mov	r2, r7
 802309e:	4630      	mov	r0, r6
 80230a0:	f7ff ffda 	bl	8023058 <__sfputc_r>
 80230a4:	1c43      	adds	r3, r0, #1
 80230a6:	d1f3      	bne.n	8023090 <__sfputs_r+0xa>
 80230a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080230ac <_vfiprintf_r>:
 80230ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230b0:	460d      	mov	r5, r1
 80230b2:	b09d      	sub	sp, #116	; 0x74
 80230b4:	4614      	mov	r4, r2
 80230b6:	4698      	mov	r8, r3
 80230b8:	4606      	mov	r6, r0
 80230ba:	b118      	cbz	r0, 80230c4 <_vfiprintf_r+0x18>
 80230bc:	6983      	ldr	r3, [r0, #24]
 80230be:	b90b      	cbnz	r3, 80230c4 <_vfiprintf_r+0x18>
 80230c0:	f001 fe3c 	bl	8024d3c <__sinit>
 80230c4:	4b89      	ldr	r3, [pc, #548]	; (80232ec <_vfiprintf_r+0x240>)
 80230c6:	429d      	cmp	r5, r3
 80230c8:	d11b      	bne.n	8023102 <_vfiprintf_r+0x56>
 80230ca:	6875      	ldr	r5, [r6, #4]
 80230cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80230ce:	07d9      	lsls	r1, r3, #31
 80230d0:	d405      	bmi.n	80230de <_vfiprintf_r+0x32>
 80230d2:	89ab      	ldrh	r3, [r5, #12]
 80230d4:	059a      	lsls	r2, r3, #22
 80230d6:	d402      	bmi.n	80230de <_vfiprintf_r+0x32>
 80230d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80230da:	f001 fed2 	bl	8024e82 <__retarget_lock_acquire_recursive>
 80230de:	89ab      	ldrh	r3, [r5, #12]
 80230e0:	071b      	lsls	r3, r3, #28
 80230e2:	d501      	bpl.n	80230e8 <_vfiprintf_r+0x3c>
 80230e4:	692b      	ldr	r3, [r5, #16]
 80230e6:	b9eb      	cbnz	r3, 8023124 <_vfiprintf_r+0x78>
 80230e8:	4629      	mov	r1, r5
 80230ea:	4630      	mov	r0, r6
 80230ec:	f000 fe26 	bl	8023d3c <__swsetup_r>
 80230f0:	b1c0      	cbz	r0, 8023124 <_vfiprintf_r+0x78>
 80230f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80230f4:	07dc      	lsls	r4, r3, #31
 80230f6:	d50e      	bpl.n	8023116 <_vfiprintf_r+0x6a>
 80230f8:	f04f 30ff 	mov.w	r0, #4294967295
 80230fc:	b01d      	add	sp, #116	; 0x74
 80230fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023102:	4b7b      	ldr	r3, [pc, #492]	; (80232f0 <_vfiprintf_r+0x244>)
 8023104:	429d      	cmp	r5, r3
 8023106:	d101      	bne.n	802310c <_vfiprintf_r+0x60>
 8023108:	68b5      	ldr	r5, [r6, #8]
 802310a:	e7df      	b.n	80230cc <_vfiprintf_r+0x20>
 802310c:	4b79      	ldr	r3, [pc, #484]	; (80232f4 <_vfiprintf_r+0x248>)
 802310e:	429d      	cmp	r5, r3
 8023110:	bf08      	it	eq
 8023112:	68f5      	ldreq	r5, [r6, #12]
 8023114:	e7da      	b.n	80230cc <_vfiprintf_r+0x20>
 8023116:	89ab      	ldrh	r3, [r5, #12]
 8023118:	0598      	lsls	r0, r3, #22
 802311a:	d4ed      	bmi.n	80230f8 <_vfiprintf_r+0x4c>
 802311c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802311e:	f001 feb1 	bl	8024e84 <__retarget_lock_release_recursive>
 8023122:	e7e9      	b.n	80230f8 <_vfiprintf_r+0x4c>
 8023124:	2300      	movs	r3, #0
 8023126:	9309      	str	r3, [sp, #36]	; 0x24
 8023128:	2320      	movs	r3, #32
 802312a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802312e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023132:	2330      	movs	r3, #48	; 0x30
 8023134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80232f8 <_vfiprintf_r+0x24c>
 8023138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802313c:	f04f 0901 	mov.w	r9, #1
 8023140:	4623      	mov	r3, r4
 8023142:	469a      	mov	sl, r3
 8023144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023148:	b10a      	cbz	r2, 802314e <_vfiprintf_r+0xa2>
 802314a:	2a25      	cmp	r2, #37	; 0x25
 802314c:	d1f9      	bne.n	8023142 <_vfiprintf_r+0x96>
 802314e:	ebba 0b04 	subs.w	fp, sl, r4
 8023152:	d00b      	beq.n	802316c <_vfiprintf_r+0xc0>
 8023154:	465b      	mov	r3, fp
 8023156:	4622      	mov	r2, r4
 8023158:	4629      	mov	r1, r5
 802315a:	4630      	mov	r0, r6
 802315c:	f7ff ff93 	bl	8023086 <__sfputs_r>
 8023160:	3001      	adds	r0, #1
 8023162:	f000 80aa 	beq.w	80232ba <_vfiprintf_r+0x20e>
 8023166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023168:	445a      	add	r2, fp
 802316a:	9209      	str	r2, [sp, #36]	; 0x24
 802316c:	f89a 3000 	ldrb.w	r3, [sl]
 8023170:	2b00      	cmp	r3, #0
 8023172:	f000 80a2 	beq.w	80232ba <_vfiprintf_r+0x20e>
 8023176:	2300      	movs	r3, #0
 8023178:	f04f 32ff 	mov.w	r2, #4294967295
 802317c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023180:	f10a 0a01 	add.w	sl, sl, #1
 8023184:	9304      	str	r3, [sp, #16]
 8023186:	9307      	str	r3, [sp, #28]
 8023188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802318c:	931a      	str	r3, [sp, #104]	; 0x68
 802318e:	4654      	mov	r4, sl
 8023190:	2205      	movs	r2, #5
 8023192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023196:	4858      	ldr	r0, [pc, #352]	; (80232f8 <_vfiprintf_r+0x24c>)
 8023198:	f7dd f852 	bl	8000240 <memchr>
 802319c:	9a04      	ldr	r2, [sp, #16]
 802319e:	b9d8      	cbnz	r0, 80231d8 <_vfiprintf_r+0x12c>
 80231a0:	06d1      	lsls	r1, r2, #27
 80231a2:	bf44      	itt	mi
 80231a4:	2320      	movmi	r3, #32
 80231a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80231aa:	0713      	lsls	r3, r2, #28
 80231ac:	bf44      	itt	mi
 80231ae:	232b      	movmi	r3, #43	; 0x2b
 80231b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80231b4:	f89a 3000 	ldrb.w	r3, [sl]
 80231b8:	2b2a      	cmp	r3, #42	; 0x2a
 80231ba:	d015      	beq.n	80231e8 <_vfiprintf_r+0x13c>
 80231bc:	9a07      	ldr	r2, [sp, #28]
 80231be:	4654      	mov	r4, sl
 80231c0:	2000      	movs	r0, #0
 80231c2:	f04f 0c0a 	mov.w	ip, #10
 80231c6:	4621      	mov	r1, r4
 80231c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80231cc:	3b30      	subs	r3, #48	; 0x30
 80231ce:	2b09      	cmp	r3, #9
 80231d0:	d94e      	bls.n	8023270 <_vfiprintf_r+0x1c4>
 80231d2:	b1b0      	cbz	r0, 8023202 <_vfiprintf_r+0x156>
 80231d4:	9207      	str	r2, [sp, #28]
 80231d6:	e014      	b.n	8023202 <_vfiprintf_r+0x156>
 80231d8:	eba0 0308 	sub.w	r3, r0, r8
 80231dc:	fa09 f303 	lsl.w	r3, r9, r3
 80231e0:	4313      	orrs	r3, r2
 80231e2:	9304      	str	r3, [sp, #16]
 80231e4:	46a2      	mov	sl, r4
 80231e6:	e7d2      	b.n	802318e <_vfiprintf_r+0xe2>
 80231e8:	9b03      	ldr	r3, [sp, #12]
 80231ea:	1d19      	adds	r1, r3, #4
 80231ec:	681b      	ldr	r3, [r3, #0]
 80231ee:	9103      	str	r1, [sp, #12]
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	bfbb      	ittet	lt
 80231f4:	425b      	neglt	r3, r3
 80231f6:	f042 0202 	orrlt.w	r2, r2, #2
 80231fa:	9307      	strge	r3, [sp, #28]
 80231fc:	9307      	strlt	r3, [sp, #28]
 80231fe:	bfb8      	it	lt
 8023200:	9204      	strlt	r2, [sp, #16]
 8023202:	7823      	ldrb	r3, [r4, #0]
 8023204:	2b2e      	cmp	r3, #46	; 0x2e
 8023206:	d10c      	bne.n	8023222 <_vfiprintf_r+0x176>
 8023208:	7863      	ldrb	r3, [r4, #1]
 802320a:	2b2a      	cmp	r3, #42	; 0x2a
 802320c:	d135      	bne.n	802327a <_vfiprintf_r+0x1ce>
 802320e:	9b03      	ldr	r3, [sp, #12]
 8023210:	1d1a      	adds	r2, r3, #4
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	9203      	str	r2, [sp, #12]
 8023216:	2b00      	cmp	r3, #0
 8023218:	bfb8      	it	lt
 802321a:	f04f 33ff 	movlt.w	r3, #4294967295
 802321e:	3402      	adds	r4, #2
 8023220:	9305      	str	r3, [sp, #20]
 8023222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023308 <_vfiprintf_r+0x25c>
 8023226:	7821      	ldrb	r1, [r4, #0]
 8023228:	2203      	movs	r2, #3
 802322a:	4650      	mov	r0, sl
 802322c:	f7dd f808 	bl	8000240 <memchr>
 8023230:	b140      	cbz	r0, 8023244 <_vfiprintf_r+0x198>
 8023232:	2340      	movs	r3, #64	; 0x40
 8023234:	eba0 000a 	sub.w	r0, r0, sl
 8023238:	fa03 f000 	lsl.w	r0, r3, r0
 802323c:	9b04      	ldr	r3, [sp, #16]
 802323e:	4303      	orrs	r3, r0
 8023240:	3401      	adds	r4, #1
 8023242:	9304      	str	r3, [sp, #16]
 8023244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023248:	482c      	ldr	r0, [pc, #176]	; (80232fc <_vfiprintf_r+0x250>)
 802324a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802324e:	2206      	movs	r2, #6
 8023250:	f7dc fff6 	bl	8000240 <memchr>
 8023254:	2800      	cmp	r0, #0
 8023256:	d03f      	beq.n	80232d8 <_vfiprintf_r+0x22c>
 8023258:	4b29      	ldr	r3, [pc, #164]	; (8023300 <_vfiprintf_r+0x254>)
 802325a:	bb1b      	cbnz	r3, 80232a4 <_vfiprintf_r+0x1f8>
 802325c:	9b03      	ldr	r3, [sp, #12]
 802325e:	3307      	adds	r3, #7
 8023260:	f023 0307 	bic.w	r3, r3, #7
 8023264:	3308      	adds	r3, #8
 8023266:	9303      	str	r3, [sp, #12]
 8023268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802326a:	443b      	add	r3, r7
 802326c:	9309      	str	r3, [sp, #36]	; 0x24
 802326e:	e767      	b.n	8023140 <_vfiprintf_r+0x94>
 8023270:	fb0c 3202 	mla	r2, ip, r2, r3
 8023274:	460c      	mov	r4, r1
 8023276:	2001      	movs	r0, #1
 8023278:	e7a5      	b.n	80231c6 <_vfiprintf_r+0x11a>
 802327a:	2300      	movs	r3, #0
 802327c:	3401      	adds	r4, #1
 802327e:	9305      	str	r3, [sp, #20]
 8023280:	4619      	mov	r1, r3
 8023282:	f04f 0c0a 	mov.w	ip, #10
 8023286:	4620      	mov	r0, r4
 8023288:	f810 2b01 	ldrb.w	r2, [r0], #1
 802328c:	3a30      	subs	r2, #48	; 0x30
 802328e:	2a09      	cmp	r2, #9
 8023290:	d903      	bls.n	802329a <_vfiprintf_r+0x1ee>
 8023292:	2b00      	cmp	r3, #0
 8023294:	d0c5      	beq.n	8023222 <_vfiprintf_r+0x176>
 8023296:	9105      	str	r1, [sp, #20]
 8023298:	e7c3      	b.n	8023222 <_vfiprintf_r+0x176>
 802329a:	fb0c 2101 	mla	r1, ip, r1, r2
 802329e:	4604      	mov	r4, r0
 80232a0:	2301      	movs	r3, #1
 80232a2:	e7f0      	b.n	8023286 <_vfiprintf_r+0x1da>
 80232a4:	ab03      	add	r3, sp, #12
 80232a6:	9300      	str	r3, [sp, #0]
 80232a8:	462a      	mov	r2, r5
 80232aa:	4b16      	ldr	r3, [pc, #88]	; (8023304 <_vfiprintf_r+0x258>)
 80232ac:	a904      	add	r1, sp, #16
 80232ae:	4630      	mov	r0, r6
 80232b0:	f000 f8cc 	bl	802344c <_printf_float>
 80232b4:	4607      	mov	r7, r0
 80232b6:	1c78      	adds	r0, r7, #1
 80232b8:	d1d6      	bne.n	8023268 <_vfiprintf_r+0x1bc>
 80232ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232bc:	07d9      	lsls	r1, r3, #31
 80232be:	d405      	bmi.n	80232cc <_vfiprintf_r+0x220>
 80232c0:	89ab      	ldrh	r3, [r5, #12]
 80232c2:	059a      	lsls	r2, r3, #22
 80232c4:	d402      	bmi.n	80232cc <_vfiprintf_r+0x220>
 80232c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232c8:	f001 fddc 	bl	8024e84 <__retarget_lock_release_recursive>
 80232cc:	89ab      	ldrh	r3, [r5, #12]
 80232ce:	065b      	lsls	r3, r3, #25
 80232d0:	f53f af12 	bmi.w	80230f8 <_vfiprintf_r+0x4c>
 80232d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80232d6:	e711      	b.n	80230fc <_vfiprintf_r+0x50>
 80232d8:	ab03      	add	r3, sp, #12
 80232da:	9300      	str	r3, [sp, #0]
 80232dc:	462a      	mov	r2, r5
 80232de:	4b09      	ldr	r3, [pc, #36]	; (8023304 <_vfiprintf_r+0x258>)
 80232e0:	a904      	add	r1, sp, #16
 80232e2:	4630      	mov	r0, r6
 80232e4:	f000 fb56 	bl	8023994 <_printf_i>
 80232e8:	e7e4      	b.n	80232b4 <_vfiprintf_r+0x208>
 80232ea:	bf00      	nop
 80232ec:	0802a098 	.word	0x0802a098
 80232f0:	0802a0b8 	.word	0x0802a0b8
 80232f4:	0802a078 	.word	0x0802a078
 80232f8:	08029fa0 	.word	0x08029fa0
 80232fc:	08029faa 	.word	0x08029faa
 8023300:	0802344d 	.word	0x0802344d
 8023304:	08023087 	.word	0x08023087
 8023308:	08029fa6 	.word	0x08029fa6

0802330c <__cvt>:
 802330c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023310:	ec55 4b10 	vmov	r4, r5, d0
 8023314:	2d00      	cmp	r5, #0
 8023316:	460e      	mov	r6, r1
 8023318:	4619      	mov	r1, r3
 802331a:	462b      	mov	r3, r5
 802331c:	bfbb      	ittet	lt
 802331e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8023322:	461d      	movlt	r5, r3
 8023324:	2300      	movge	r3, #0
 8023326:	232d      	movlt	r3, #45	; 0x2d
 8023328:	700b      	strb	r3, [r1, #0]
 802332a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802332c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023330:	4691      	mov	r9, r2
 8023332:	f023 0820 	bic.w	r8, r3, #32
 8023336:	bfbc      	itt	lt
 8023338:	4622      	movlt	r2, r4
 802333a:	4614      	movlt	r4, r2
 802333c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023340:	d005      	beq.n	802334e <__cvt+0x42>
 8023342:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8023346:	d100      	bne.n	802334a <__cvt+0x3e>
 8023348:	3601      	adds	r6, #1
 802334a:	2102      	movs	r1, #2
 802334c:	e000      	b.n	8023350 <__cvt+0x44>
 802334e:	2103      	movs	r1, #3
 8023350:	ab03      	add	r3, sp, #12
 8023352:	9301      	str	r3, [sp, #4]
 8023354:	ab02      	add	r3, sp, #8
 8023356:	9300      	str	r3, [sp, #0]
 8023358:	ec45 4b10 	vmov	d0, r4, r5
 802335c:	4653      	mov	r3, sl
 802335e:	4632      	mov	r2, r6
 8023360:	f000 fde6 	bl	8023f30 <_dtoa_r>
 8023364:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8023368:	4607      	mov	r7, r0
 802336a:	d102      	bne.n	8023372 <__cvt+0x66>
 802336c:	f019 0f01 	tst.w	r9, #1
 8023370:	d022      	beq.n	80233b8 <__cvt+0xac>
 8023372:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8023376:	eb07 0906 	add.w	r9, r7, r6
 802337a:	d110      	bne.n	802339e <__cvt+0x92>
 802337c:	783b      	ldrb	r3, [r7, #0]
 802337e:	2b30      	cmp	r3, #48	; 0x30
 8023380:	d10a      	bne.n	8023398 <__cvt+0x8c>
 8023382:	2200      	movs	r2, #0
 8023384:	2300      	movs	r3, #0
 8023386:	4620      	mov	r0, r4
 8023388:	4629      	mov	r1, r5
 802338a:	f7dd fbcd 	bl	8000b28 <__aeabi_dcmpeq>
 802338e:	b918      	cbnz	r0, 8023398 <__cvt+0x8c>
 8023390:	f1c6 0601 	rsb	r6, r6, #1
 8023394:	f8ca 6000 	str.w	r6, [sl]
 8023398:	f8da 3000 	ldr.w	r3, [sl]
 802339c:	4499      	add	r9, r3
 802339e:	2200      	movs	r2, #0
 80233a0:	2300      	movs	r3, #0
 80233a2:	4620      	mov	r0, r4
 80233a4:	4629      	mov	r1, r5
 80233a6:	f7dd fbbf 	bl	8000b28 <__aeabi_dcmpeq>
 80233aa:	b108      	cbz	r0, 80233b0 <__cvt+0xa4>
 80233ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80233b0:	2230      	movs	r2, #48	; 0x30
 80233b2:	9b03      	ldr	r3, [sp, #12]
 80233b4:	454b      	cmp	r3, r9
 80233b6:	d307      	bcc.n	80233c8 <__cvt+0xbc>
 80233b8:	9b03      	ldr	r3, [sp, #12]
 80233ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80233bc:	1bdb      	subs	r3, r3, r7
 80233be:	4638      	mov	r0, r7
 80233c0:	6013      	str	r3, [r2, #0]
 80233c2:	b004      	add	sp, #16
 80233c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233c8:	1c59      	adds	r1, r3, #1
 80233ca:	9103      	str	r1, [sp, #12]
 80233cc:	701a      	strb	r2, [r3, #0]
 80233ce:	e7f0      	b.n	80233b2 <__cvt+0xa6>

080233d0 <__exponent>:
 80233d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80233d2:	4603      	mov	r3, r0
 80233d4:	2900      	cmp	r1, #0
 80233d6:	bfb8      	it	lt
 80233d8:	4249      	neglt	r1, r1
 80233da:	f803 2b02 	strb.w	r2, [r3], #2
 80233de:	bfb4      	ite	lt
 80233e0:	222d      	movlt	r2, #45	; 0x2d
 80233e2:	222b      	movge	r2, #43	; 0x2b
 80233e4:	2909      	cmp	r1, #9
 80233e6:	7042      	strb	r2, [r0, #1]
 80233e8:	dd2a      	ble.n	8023440 <__exponent+0x70>
 80233ea:	f10d 0407 	add.w	r4, sp, #7
 80233ee:	46a4      	mov	ip, r4
 80233f0:	270a      	movs	r7, #10
 80233f2:	46a6      	mov	lr, r4
 80233f4:	460a      	mov	r2, r1
 80233f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80233fa:	fb07 1516 	mls	r5, r7, r6, r1
 80233fe:	3530      	adds	r5, #48	; 0x30
 8023400:	2a63      	cmp	r2, #99	; 0x63
 8023402:	f104 34ff 	add.w	r4, r4, #4294967295
 8023406:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802340a:	4631      	mov	r1, r6
 802340c:	dcf1      	bgt.n	80233f2 <__exponent+0x22>
 802340e:	3130      	adds	r1, #48	; 0x30
 8023410:	f1ae 0502 	sub.w	r5, lr, #2
 8023414:	f804 1c01 	strb.w	r1, [r4, #-1]
 8023418:	1c44      	adds	r4, r0, #1
 802341a:	4629      	mov	r1, r5
 802341c:	4561      	cmp	r1, ip
 802341e:	d30a      	bcc.n	8023436 <__exponent+0x66>
 8023420:	f10d 0209 	add.w	r2, sp, #9
 8023424:	eba2 020e 	sub.w	r2, r2, lr
 8023428:	4565      	cmp	r5, ip
 802342a:	bf88      	it	hi
 802342c:	2200      	movhi	r2, #0
 802342e:	4413      	add	r3, r2
 8023430:	1a18      	subs	r0, r3, r0
 8023432:	b003      	add	sp, #12
 8023434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023436:	f811 2b01 	ldrb.w	r2, [r1], #1
 802343a:	f804 2f01 	strb.w	r2, [r4, #1]!
 802343e:	e7ed      	b.n	802341c <__exponent+0x4c>
 8023440:	2330      	movs	r3, #48	; 0x30
 8023442:	3130      	adds	r1, #48	; 0x30
 8023444:	7083      	strb	r3, [r0, #2]
 8023446:	70c1      	strb	r1, [r0, #3]
 8023448:	1d03      	adds	r3, r0, #4
 802344a:	e7f1      	b.n	8023430 <__exponent+0x60>

0802344c <_printf_float>:
 802344c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023450:	ed2d 8b02 	vpush	{d8}
 8023454:	b08d      	sub	sp, #52	; 0x34
 8023456:	460c      	mov	r4, r1
 8023458:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802345c:	4616      	mov	r6, r2
 802345e:	461f      	mov	r7, r3
 8023460:	4605      	mov	r5, r0
 8023462:	f001 fd09 	bl	8024e78 <_localeconv_r>
 8023466:	f8d0 a000 	ldr.w	sl, [r0]
 802346a:	4650      	mov	r0, sl
 802346c:	f7dc feda 	bl	8000224 <strlen>
 8023470:	2300      	movs	r3, #0
 8023472:	930a      	str	r3, [sp, #40]	; 0x28
 8023474:	6823      	ldr	r3, [r4, #0]
 8023476:	9305      	str	r3, [sp, #20]
 8023478:	f8d8 3000 	ldr.w	r3, [r8]
 802347c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8023480:	3307      	adds	r3, #7
 8023482:	f023 0307 	bic.w	r3, r3, #7
 8023486:	f103 0208 	add.w	r2, r3, #8
 802348a:	f8c8 2000 	str.w	r2, [r8]
 802348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023492:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8023496:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802349a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802349e:	9307      	str	r3, [sp, #28]
 80234a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80234a4:	ee08 0a10 	vmov	s16, r0
 80234a8:	4b9f      	ldr	r3, [pc, #636]	; (8023728 <_printf_float+0x2dc>)
 80234aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80234ae:	f04f 32ff 	mov.w	r2, #4294967295
 80234b2:	f7dd fb6b 	bl	8000b8c <__aeabi_dcmpun>
 80234b6:	bb88      	cbnz	r0, 802351c <_printf_float+0xd0>
 80234b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80234bc:	4b9a      	ldr	r3, [pc, #616]	; (8023728 <_printf_float+0x2dc>)
 80234be:	f04f 32ff 	mov.w	r2, #4294967295
 80234c2:	f7dd fb45 	bl	8000b50 <__aeabi_dcmple>
 80234c6:	bb48      	cbnz	r0, 802351c <_printf_float+0xd0>
 80234c8:	2200      	movs	r2, #0
 80234ca:	2300      	movs	r3, #0
 80234cc:	4640      	mov	r0, r8
 80234ce:	4649      	mov	r1, r9
 80234d0:	f7dd fb34 	bl	8000b3c <__aeabi_dcmplt>
 80234d4:	b110      	cbz	r0, 80234dc <_printf_float+0x90>
 80234d6:	232d      	movs	r3, #45	; 0x2d
 80234d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80234dc:	4b93      	ldr	r3, [pc, #588]	; (802372c <_printf_float+0x2e0>)
 80234de:	4894      	ldr	r0, [pc, #592]	; (8023730 <_printf_float+0x2e4>)
 80234e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80234e4:	bf94      	ite	ls
 80234e6:	4698      	movls	r8, r3
 80234e8:	4680      	movhi	r8, r0
 80234ea:	2303      	movs	r3, #3
 80234ec:	6123      	str	r3, [r4, #16]
 80234ee:	9b05      	ldr	r3, [sp, #20]
 80234f0:	f023 0204 	bic.w	r2, r3, #4
 80234f4:	6022      	str	r2, [r4, #0]
 80234f6:	f04f 0900 	mov.w	r9, #0
 80234fa:	9700      	str	r7, [sp, #0]
 80234fc:	4633      	mov	r3, r6
 80234fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8023500:	4621      	mov	r1, r4
 8023502:	4628      	mov	r0, r5
 8023504:	f000 f9d8 	bl	80238b8 <_printf_common>
 8023508:	3001      	adds	r0, #1
 802350a:	f040 8090 	bne.w	802362e <_printf_float+0x1e2>
 802350e:	f04f 30ff 	mov.w	r0, #4294967295
 8023512:	b00d      	add	sp, #52	; 0x34
 8023514:	ecbd 8b02 	vpop	{d8}
 8023518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802351c:	4642      	mov	r2, r8
 802351e:	464b      	mov	r3, r9
 8023520:	4640      	mov	r0, r8
 8023522:	4649      	mov	r1, r9
 8023524:	f7dd fb32 	bl	8000b8c <__aeabi_dcmpun>
 8023528:	b140      	cbz	r0, 802353c <_printf_float+0xf0>
 802352a:	464b      	mov	r3, r9
 802352c:	2b00      	cmp	r3, #0
 802352e:	bfbc      	itt	lt
 8023530:	232d      	movlt	r3, #45	; 0x2d
 8023532:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023536:	487f      	ldr	r0, [pc, #508]	; (8023734 <_printf_float+0x2e8>)
 8023538:	4b7f      	ldr	r3, [pc, #508]	; (8023738 <_printf_float+0x2ec>)
 802353a:	e7d1      	b.n	80234e0 <_printf_float+0x94>
 802353c:	6863      	ldr	r3, [r4, #4]
 802353e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023542:	9206      	str	r2, [sp, #24]
 8023544:	1c5a      	adds	r2, r3, #1
 8023546:	d13f      	bne.n	80235c8 <_printf_float+0x17c>
 8023548:	2306      	movs	r3, #6
 802354a:	6063      	str	r3, [r4, #4]
 802354c:	9b05      	ldr	r3, [sp, #20]
 802354e:	6861      	ldr	r1, [r4, #4]
 8023550:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023554:	2300      	movs	r3, #0
 8023556:	9303      	str	r3, [sp, #12]
 8023558:	ab0a      	add	r3, sp, #40	; 0x28
 802355a:	e9cd b301 	strd	fp, r3, [sp, #4]
 802355e:	ab09      	add	r3, sp, #36	; 0x24
 8023560:	ec49 8b10 	vmov	d0, r8, r9
 8023564:	9300      	str	r3, [sp, #0]
 8023566:	6022      	str	r2, [r4, #0]
 8023568:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802356c:	4628      	mov	r0, r5
 802356e:	f7ff fecd 	bl	802330c <__cvt>
 8023572:	9b06      	ldr	r3, [sp, #24]
 8023574:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023576:	2b47      	cmp	r3, #71	; 0x47
 8023578:	4680      	mov	r8, r0
 802357a:	d108      	bne.n	802358e <_printf_float+0x142>
 802357c:	1cc8      	adds	r0, r1, #3
 802357e:	db02      	blt.n	8023586 <_printf_float+0x13a>
 8023580:	6863      	ldr	r3, [r4, #4]
 8023582:	4299      	cmp	r1, r3
 8023584:	dd41      	ble.n	802360a <_printf_float+0x1be>
 8023586:	f1ab 0b02 	sub.w	fp, fp, #2
 802358a:	fa5f fb8b 	uxtb.w	fp, fp
 802358e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023592:	d820      	bhi.n	80235d6 <_printf_float+0x18a>
 8023594:	3901      	subs	r1, #1
 8023596:	465a      	mov	r2, fp
 8023598:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802359c:	9109      	str	r1, [sp, #36]	; 0x24
 802359e:	f7ff ff17 	bl	80233d0 <__exponent>
 80235a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80235a4:	1813      	adds	r3, r2, r0
 80235a6:	2a01      	cmp	r2, #1
 80235a8:	4681      	mov	r9, r0
 80235aa:	6123      	str	r3, [r4, #16]
 80235ac:	dc02      	bgt.n	80235b4 <_printf_float+0x168>
 80235ae:	6822      	ldr	r2, [r4, #0]
 80235b0:	07d2      	lsls	r2, r2, #31
 80235b2:	d501      	bpl.n	80235b8 <_printf_float+0x16c>
 80235b4:	3301      	adds	r3, #1
 80235b6:	6123      	str	r3, [r4, #16]
 80235b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80235bc:	2b00      	cmp	r3, #0
 80235be:	d09c      	beq.n	80234fa <_printf_float+0xae>
 80235c0:	232d      	movs	r3, #45	; 0x2d
 80235c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80235c6:	e798      	b.n	80234fa <_printf_float+0xae>
 80235c8:	9a06      	ldr	r2, [sp, #24]
 80235ca:	2a47      	cmp	r2, #71	; 0x47
 80235cc:	d1be      	bne.n	802354c <_printf_float+0x100>
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d1bc      	bne.n	802354c <_printf_float+0x100>
 80235d2:	2301      	movs	r3, #1
 80235d4:	e7b9      	b.n	802354a <_printf_float+0xfe>
 80235d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80235da:	d118      	bne.n	802360e <_printf_float+0x1c2>
 80235dc:	2900      	cmp	r1, #0
 80235de:	6863      	ldr	r3, [r4, #4]
 80235e0:	dd0b      	ble.n	80235fa <_printf_float+0x1ae>
 80235e2:	6121      	str	r1, [r4, #16]
 80235e4:	b913      	cbnz	r3, 80235ec <_printf_float+0x1a0>
 80235e6:	6822      	ldr	r2, [r4, #0]
 80235e8:	07d0      	lsls	r0, r2, #31
 80235ea:	d502      	bpl.n	80235f2 <_printf_float+0x1a6>
 80235ec:	3301      	adds	r3, #1
 80235ee:	440b      	add	r3, r1
 80235f0:	6123      	str	r3, [r4, #16]
 80235f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80235f4:	f04f 0900 	mov.w	r9, #0
 80235f8:	e7de      	b.n	80235b8 <_printf_float+0x16c>
 80235fa:	b913      	cbnz	r3, 8023602 <_printf_float+0x1b6>
 80235fc:	6822      	ldr	r2, [r4, #0]
 80235fe:	07d2      	lsls	r2, r2, #31
 8023600:	d501      	bpl.n	8023606 <_printf_float+0x1ba>
 8023602:	3302      	adds	r3, #2
 8023604:	e7f4      	b.n	80235f0 <_printf_float+0x1a4>
 8023606:	2301      	movs	r3, #1
 8023608:	e7f2      	b.n	80235f0 <_printf_float+0x1a4>
 802360a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802360e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023610:	4299      	cmp	r1, r3
 8023612:	db05      	blt.n	8023620 <_printf_float+0x1d4>
 8023614:	6823      	ldr	r3, [r4, #0]
 8023616:	6121      	str	r1, [r4, #16]
 8023618:	07d8      	lsls	r0, r3, #31
 802361a:	d5ea      	bpl.n	80235f2 <_printf_float+0x1a6>
 802361c:	1c4b      	adds	r3, r1, #1
 802361e:	e7e7      	b.n	80235f0 <_printf_float+0x1a4>
 8023620:	2900      	cmp	r1, #0
 8023622:	bfd4      	ite	le
 8023624:	f1c1 0202 	rsble	r2, r1, #2
 8023628:	2201      	movgt	r2, #1
 802362a:	4413      	add	r3, r2
 802362c:	e7e0      	b.n	80235f0 <_printf_float+0x1a4>
 802362e:	6823      	ldr	r3, [r4, #0]
 8023630:	055a      	lsls	r2, r3, #21
 8023632:	d407      	bmi.n	8023644 <_printf_float+0x1f8>
 8023634:	6923      	ldr	r3, [r4, #16]
 8023636:	4642      	mov	r2, r8
 8023638:	4631      	mov	r1, r6
 802363a:	4628      	mov	r0, r5
 802363c:	47b8      	blx	r7
 802363e:	3001      	adds	r0, #1
 8023640:	d12c      	bne.n	802369c <_printf_float+0x250>
 8023642:	e764      	b.n	802350e <_printf_float+0xc2>
 8023644:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023648:	f240 80e0 	bls.w	802380c <_printf_float+0x3c0>
 802364c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023650:	2200      	movs	r2, #0
 8023652:	2300      	movs	r3, #0
 8023654:	f7dd fa68 	bl	8000b28 <__aeabi_dcmpeq>
 8023658:	2800      	cmp	r0, #0
 802365a:	d034      	beq.n	80236c6 <_printf_float+0x27a>
 802365c:	4a37      	ldr	r2, [pc, #220]	; (802373c <_printf_float+0x2f0>)
 802365e:	2301      	movs	r3, #1
 8023660:	4631      	mov	r1, r6
 8023662:	4628      	mov	r0, r5
 8023664:	47b8      	blx	r7
 8023666:	3001      	adds	r0, #1
 8023668:	f43f af51 	beq.w	802350e <_printf_float+0xc2>
 802366c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023670:	429a      	cmp	r2, r3
 8023672:	db02      	blt.n	802367a <_printf_float+0x22e>
 8023674:	6823      	ldr	r3, [r4, #0]
 8023676:	07d8      	lsls	r0, r3, #31
 8023678:	d510      	bpl.n	802369c <_printf_float+0x250>
 802367a:	ee18 3a10 	vmov	r3, s16
 802367e:	4652      	mov	r2, sl
 8023680:	4631      	mov	r1, r6
 8023682:	4628      	mov	r0, r5
 8023684:	47b8      	blx	r7
 8023686:	3001      	adds	r0, #1
 8023688:	f43f af41 	beq.w	802350e <_printf_float+0xc2>
 802368c:	f04f 0800 	mov.w	r8, #0
 8023690:	f104 091a 	add.w	r9, r4, #26
 8023694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023696:	3b01      	subs	r3, #1
 8023698:	4543      	cmp	r3, r8
 802369a:	dc09      	bgt.n	80236b0 <_printf_float+0x264>
 802369c:	6823      	ldr	r3, [r4, #0]
 802369e:	079b      	lsls	r3, r3, #30
 80236a0:	f100 8105 	bmi.w	80238ae <_printf_float+0x462>
 80236a4:	68e0      	ldr	r0, [r4, #12]
 80236a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80236a8:	4298      	cmp	r0, r3
 80236aa:	bfb8      	it	lt
 80236ac:	4618      	movlt	r0, r3
 80236ae:	e730      	b.n	8023512 <_printf_float+0xc6>
 80236b0:	2301      	movs	r3, #1
 80236b2:	464a      	mov	r2, r9
 80236b4:	4631      	mov	r1, r6
 80236b6:	4628      	mov	r0, r5
 80236b8:	47b8      	blx	r7
 80236ba:	3001      	adds	r0, #1
 80236bc:	f43f af27 	beq.w	802350e <_printf_float+0xc2>
 80236c0:	f108 0801 	add.w	r8, r8, #1
 80236c4:	e7e6      	b.n	8023694 <_printf_float+0x248>
 80236c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	dc39      	bgt.n	8023740 <_printf_float+0x2f4>
 80236cc:	4a1b      	ldr	r2, [pc, #108]	; (802373c <_printf_float+0x2f0>)
 80236ce:	2301      	movs	r3, #1
 80236d0:	4631      	mov	r1, r6
 80236d2:	4628      	mov	r0, r5
 80236d4:	47b8      	blx	r7
 80236d6:	3001      	adds	r0, #1
 80236d8:	f43f af19 	beq.w	802350e <_printf_float+0xc2>
 80236dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80236e0:	4313      	orrs	r3, r2
 80236e2:	d102      	bne.n	80236ea <_printf_float+0x29e>
 80236e4:	6823      	ldr	r3, [r4, #0]
 80236e6:	07d9      	lsls	r1, r3, #31
 80236e8:	d5d8      	bpl.n	802369c <_printf_float+0x250>
 80236ea:	ee18 3a10 	vmov	r3, s16
 80236ee:	4652      	mov	r2, sl
 80236f0:	4631      	mov	r1, r6
 80236f2:	4628      	mov	r0, r5
 80236f4:	47b8      	blx	r7
 80236f6:	3001      	adds	r0, #1
 80236f8:	f43f af09 	beq.w	802350e <_printf_float+0xc2>
 80236fc:	f04f 0900 	mov.w	r9, #0
 8023700:	f104 0a1a 	add.w	sl, r4, #26
 8023704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023706:	425b      	negs	r3, r3
 8023708:	454b      	cmp	r3, r9
 802370a:	dc01      	bgt.n	8023710 <_printf_float+0x2c4>
 802370c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802370e:	e792      	b.n	8023636 <_printf_float+0x1ea>
 8023710:	2301      	movs	r3, #1
 8023712:	4652      	mov	r2, sl
 8023714:	4631      	mov	r1, r6
 8023716:	4628      	mov	r0, r5
 8023718:	47b8      	blx	r7
 802371a:	3001      	adds	r0, #1
 802371c:	f43f aef7 	beq.w	802350e <_printf_float+0xc2>
 8023720:	f109 0901 	add.w	r9, r9, #1
 8023724:	e7ee      	b.n	8023704 <_printf_float+0x2b8>
 8023726:	bf00      	nop
 8023728:	7fefffff 	.word	0x7fefffff
 802372c:	08029fb1 	.word	0x08029fb1
 8023730:	08029fb5 	.word	0x08029fb5
 8023734:	08029fbd 	.word	0x08029fbd
 8023738:	08029fb9 	.word	0x08029fb9
 802373c:	08025b17 	.word	0x08025b17
 8023740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023744:	429a      	cmp	r2, r3
 8023746:	bfa8      	it	ge
 8023748:	461a      	movge	r2, r3
 802374a:	2a00      	cmp	r2, #0
 802374c:	4691      	mov	r9, r2
 802374e:	dc37      	bgt.n	80237c0 <_printf_float+0x374>
 8023750:	f04f 0b00 	mov.w	fp, #0
 8023754:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023758:	f104 021a 	add.w	r2, r4, #26
 802375c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802375e:	9305      	str	r3, [sp, #20]
 8023760:	eba3 0309 	sub.w	r3, r3, r9
 8023764:	455b      	cmp	r3, fp
 8023766:	dc33      	bgt.n	80237d0 <_printf_float+0x384>
 8023768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802376c:	429a      	cmp	r2, r3
 802376e:	db3b      	blt.n	80237e8 <_printf_float+0x39c>
 8023770:	6823      	ldr	r3, [r4, #0]
 8023772:	07da      	lsls	r2, r3, #31
 8023774:	d438      	bmi.n	80237e8 <_printf_float+0x39c>
 8023776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023778:	9b05      	ldr	r3, [sp, #20]
 802377a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802377c:	1ad3      	subs	r3, r2, r3
 802377e:	eba2 0901 	sub.w	r9, r2, r1
 8023782:	4599      	cmp	r9, r3
 8023784:	bfa8      	it	ge
 8023786:	4699      	movge	r9, r3
 8023788:	f1b9 0f00 	cmp.w	r9, #0
 802378c:	dc35      	bgt.n	80237fa <_printf_float+0x3ae>
 802378e:	f04f 0800 	mov.w	r8, #0
 8023792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023796:	f104 0a1a 	add.w	sl, r4, #26
 802379a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802379e:	1a9b      	subs	r3, r3, r2
 80237a0:	eba3 0309 	sub.w	r3, r3, r9
 80237a4:	4543      	cmp	r3, r8
 80237a6:	f77f af79 	ble.w	802369c <_printf_float+0x250>
 80237aa:	2301      	movs	r3, #1
 80237ac:	4652      	mov	r2, sl
 80237ae:	4631      	mov	r1, r6
 80237b0:	4628      	mov	r0, r5
 80237b2:	47b8      	blx	r7
 80237b4:	3001      	adds	r0, #1
 80237b6:	f43f aeaa 	beq.w	802350e <_printf_float+0xc2>
 80237ba:	f108 0801 	add.w	r8, r8, #1
 80237be:	e7ec      	b.n	802379a <_printf_float+0x34e>
 80237c0:	4613      	mov	r3, r2
 80237c2:	4631      	mov	r1, r6
 80237c4:	4642      	mov	r2, r8
 80237c6:	4628      	mov	r0, r5
 80237c8:	47b8      	blx	r7
 80237ca:	3001      	adds	r0, #1
 80237cc:	d1c0      	bne.n	8023750 <_printf_float+0x304>
 80237ce:	e69e      	b.n	802350e <_printf_float+0xc2>
 80237d0:	2301      	movs	r3, #1
 80237d2:	4631      	mov	r1, r6
 80237d4:	4628      	mov	r0, r5
 80237d6:	9205      	str	r2, [sp, #20]
 80237d8:	47b8      	blx	r7
 80237da:	3001      	adds	r0, #1
 80237dc:	f43f ae97 	beq.w	802350e <_printf_float+0xc2>
 80237e0:	9a05      	ldr	r2, [sp, #20]
 80237e2:	f10b 0b01 	add.w	fp, fp, #1
 80237e6:	e7b9      	b.n	802375c <_printf_float+0x310>
 80237e8:	ee18 3a10 	vmov	r3, s16
 80237ec:	4652      	mov	r2, sl
 80237ee:	4631      	mov	r1, r6
 80237f0:	4628      	mov	r0, r5
 80237f2:	47b8      	blx	r7
 80237f4:	3001      	adds	r0, #1
 80237f6:	d1be      	bne.n	8023776 <_printf_float+0x32a>
 80237f8:	e689      	b.n	802350e <_printf_float+0xc2>
 80237fa:	9a05      	ldr	r2, [sp, #20]
 80237fc:	464b      	mov	r3, r9
 80237fe:	4442      	add	r2, r8
 8023800:	4631      	mov	r1, r6
 8023802:	4628      	mov	r0, r5
 8023804:	47b8      	blx	r7
 8023806:	3001      	adds	r0, #1
 8023808:	d1c1      	bne.n	802378e <_printf_float+0x342>
 802380a:	e680      	b.n	802350e <_printf_float+0xc2>
 802380c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802380e:	2a01      	cmp	r2, #1
 8023810:	dc01      	bgt.n	8023816 <_printf_float+0x3ca>
 8023812:	07db      	lsls	r3, r3, #31
 8023814:	d538      	bpl.n	8023888 <_printf_float+0x43c>
 8023816:	2301      	movs	r3, #1
 8023818:	4642      	mov	r2, r8
 802381a:	4631      	mov	r1, r6
 802381c:	4628      	mov	r0, r5
 802381e:	47b8      	blx	r7
 8023820:	3001      	adds	r0, #1
 8023822:	f43f ae74 	beq.w	802350e <_printf_float+0xc2>
 8023826:	ee18 3a10 	vmov	r3, s16
 802382a:	4652      	mov	r2, sl
 802382c:	4631      	mov	r1, r6
 802382e:	4628      	mov	r0, r5
 8023830:	47b8      	blx	r7
 8023832:	3001      	adds	r0, #1
 8023834:	f43f ae6b 	beq.w	802350e <_printf_float+0xc2>
 8023838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802383c:	2200      	movs	r2, #0
 802383e:	2300      	movs	r3, #0
 8023840:	f7dd f972 	bl	8000b28 <__aeabi_dcmpeq>
 8023844:	b9d8      	cbnz	r0, 802387e <_printf_float+0x432>
 8023846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023848:	f108 0201 	add.w	r2, r8, #1
 802384c:	3b01      	subs	r3, #1
 802384e:	4631      	mov	r1, r6
 8023850:	4628      	mov	r0, r5
 8023852:	47b8      	blx	r7
 8023854:	3001      	adds	r0, #1
 8023856:	d10e      	bne.n	8023876 <_printf_float+0x42a>
 8023858:	e659      	b.n	802350e <_printf_float+0xc2>
 802385a:	2301      	movs	r3, #1
 802385c:	4652      	mov	r2, sl
 802385e:	4631      	mov	r1, r6
 8023860:	4628      	mov	r0, r5
 8023862:	47b8      	blx	r7
 8023864:	3001      	adds	r0, #1
 8023866:	f43f ae52 	beq.w	802350e <_printf_float+0xc2>
 802386a:	f108 0801 	add.w	r8, r8, #1
 802386e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023870:	3b01      	subs	r3, #1
 8023872:	4543      	cmp	r3, r8
 8023874:	dcf1      	bgt.n	802385a <_printf_float+0x40e>
 8023876:	464b      	mov	r3, r9
 8023878:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802387c:	e6dc      	b.n	8023638 <_printf_float+0x1ec>
 802387e:	f04f 0800 	mov.w	r8, #0
 8023882:	f104 0a1a 	add.w	sl, r4, #26
 8023886:	e7f2      	b.n	802386e <_printf_float+0x422>
 8023888:	2301      	movs	r3, #1
 802388a:	4642      	mov	r2, r8
 802388c:	e7df      	b.n	802384e <_printf_float+0x402>
 802388e:	2301      	movs	r3, #1
 8023890:	464a      	mov	r2, r9
 8023892:	4631      	mov	r1, r6
 8023894:	4628      	mov	r0, r5
 8023896:	47b8      	blx	r7
 8023898:	3001      	adds	r0, #1
 802389a:	f43f ae38 	beq.w	802350e <_printf_float+0xc2>
 802389e:	f108 0801 	add.w	r8, r8, #1
 80238a2:	68e3      	ldr	r3, [r4, #12]
 80238a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80238a6:	1a5b      	subs	r3, r3, r1
 80238a8:	4543      	cmp	r3, r8
 80238aa:	dcf0      	bgt.n	802388e <_printf_float+0x442>
 80238ac:	e6fa      	b.n	80236a4 <_printf_float+0x258>
 80238ae:	f04f 0800 	mov.w	r8, #0
 80238b2:	f104 0919 	add.w	r9, r4, #25
 80238b6:	e7f4      	b.n	80238a2 <_printf_float+0x456>

080238b8 <_printf_common>:
 80238b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80238bc:	4616      	mov	r6, r2
 80238be:	4699      	mov	r9, r3
 80238c0:	688a      	ldr	r2, [r1, #8]
 80238c2:	690b      	ldr	r3, [r1, #16]
 80238c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80238c8:	4293      	cmp	r3, r2
 80238ca:	bfb8      	it	lt
 80238cc:	4613      	movlt	r3, r2
 80238ce:	6033      	str	r3, [r6, #0]
 80238d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80238d4:	4607      	mov	r7, r0
 80238d6:	460c      	mov	r4, r1
 80238d8:	b10a      	cbz	r2, 80238de <_printf_common+0x26>
 80238da:	3301      	adds	r3, #1
 80238dc:	6033      	str	r3, [r6, #0]
 80238de:	6823      	ldr	r3, [r4, #0]
 80238e0:	0699      	lsls	r1, r3, #26
 80238e2:	bf42      	ittt	mi
 80238e4:	6833      	ldrmi	r3, [r6, #0]
 80238e6:	3302      	addmi	r3, #2
 80238e8:	6033      	strmi	r3, [r6, #0]
 80238ea:	6825      	ldr	r5, [r4, #0]
 80238ec:	f015 0506 	ands.w	r5, r5, #6
 80238f0:	d106      	bne.n	8023900 <_printf_common+0x48>
 80238f2:	f104 0a19 	add.w	sl, r4, #25
 80238f6:	68e3      	ldr	r3, [r4, #12]
 80238f8:	6832      	ldr	r2, [r6, #0]
 80238fa:	1a9b      	subs	r3, r3, r2
 80238fc:	42ab      	cmp	r3, r5
 80238fe:	dc26      	bgt.n	802394e <_printf_common+0x96>
 8023900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023904:	1e13      	subs	r3, r2, #0
 8023906:	6822      	ldr	r2, [r4, #0]
 8023908:	bf18      	it	ne
 802390a:	2301      	movne	r3, #1
 802390c:	0692      	lsls	r2, r2, #26
 802390e:	d42b      	bmi.n	8023968 <_printf_common+0xb0>
 8023910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023914:	4649      	mov	r1, r9
 8023916:	4638      	mov	r0, r7
 8023918:	47c0      	blx	r8
 802391a:	3001      	adds	r0, #1
 802391c:	d01e      	beq.n	802395c <_printf_common+0xa4>
 802391e:	6823      	ldr	r3, [r4, #0]
 8023920:	68e5      	ldr	r5, [r4, #12]
 8023922:	6832      	ldr	r2, [r6, #0]
 8023924:	f003 0306 	and.w	r3, r3, #6
 8023928:	2b04      	cmp	r3, #4
 802392a:	bf08      	it	eq
 802392c:	1aad      	subeq	r5, r5, r2
 802392e:	68a3      	ldr	r3, [r4, #8]
 8023930:	6922      	ldr	r2, [r4, #16]
 8023932:	bf0c      	ite	eq
 8023934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023938:	2500      	movne	r5, #0
 802393a:	4293      	cmp	r3, r2
 802393c:	bfc4      	itt	gt
 802393e:	1a9b      	subgt	r3, r3, r2
 8023940:	18ed      	addgt	r5, r5, r3
 8023942:	2600      	movs	r6, #0
 8023944:	341a      	adds	r4, #26
 8023946:	42b5      	cmp	r5, r6
 8023948:	d11a      	bne.n	8023980 <_printf_common+0xc8>
 802394a:	2000      	movs	r0, #0
 802394c:	e008      	b.n	8023960 <_printf_common+0xa8>
 802394e:	2301      	movs	r3, #1
 8023950:	4652      	mov	r2, sl
 8023952:	4649      	mov	r1, r9
 8023954:	4638      	mov	r0, r7
 8023956:	47c0      	blx	r8
 8023958:	3001      	adds	r0, #1
 802395a:	d103      	bne.n	8023964 <_printf_common+0xac>
 802395c:	f04f 30ff 	mov.w	r0, #4294967295
 8023960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023964:	3501      	adds	r5, #1
 8023966:	e7c6      	b.n	80238f6 <_printf_common+0x3e>
 8023968:	18e1      	adds	r1, r4, r3
 802396a:	1c5a      	adds	r2, r3, #1
 802396c:	2030      	movs	r0, #48	; 0x30
 802396e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023972:	4422      	add	r2, r4
 8023974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802397c:	3302      	adds	r3, #2
 802397e:	e7c7      	b.n	8023910 <_printf_common+0x58>
 8023980:	2301      	movs	r3, #1
 8023982:	4622      	mov	r2, r4
 8023984:	4649      	mov	r1, r9
 8023986:	4638      	mov	r0, r7
 8023988:	47c0      	blx	r8
 802398a:	3001      	adds	r0, #1
 802398c:	d0e6      	beq.n	802395c <_printf_common+0xa4>
 802398e:	3601      	adds	r6, #1
 8023990:	e7d9      	b.n	8023946 <_printf_common+0x8e>
	...

08023994 <_printf_i>:
 8023994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023998:	460c      	mov	r4, r1
 802399a:	4691      	mov	r9, r2
 802399c:	7e27      	ldrb	r7, [r4, #24]
 802399e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80239a0:	2f78      	cmp	r7, #120	; 0x78
 80239a2:	4680      	mov	r8, r0
 80239a4:	469a      	mov	sl, r3
 80239a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80239aa:	d807      	bhi.n	80239bc <_printf_i+0x28>
 80239ac:	2f62      	cmp	r7, #98	; 0x62
 80239ae:	d80a      	bhi.n	80239c6 <_printf_i+0x32>
 80239b0:	2f00      	cmp	r7, #0
 80239b2:	f000 80d8 	beq.w	8023b66 <_printf_i+0x1d2>
 80239b6:	2f58      	cmp	r7, #88	; 0x58
 80239b8:	f000 80a3 	beq.w	8023b02 <_printf_i+0x16e>
 80239bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80239c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80239c4:	e03a      	b.n	8023a3c <_printf_i+0xa8>
 80239c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80239ca:	2b15      	cmp	r3, #21
 80239cc:	d8f6      	bhi.n	80239bc <_printf_i+0x28>
 80239ce:	a001      	add	r0, pc, #4	; (adr r0, 80239d4 <_printf_i+0x40>)
 80239d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80239d4:	08023a2d 	.word	0x08023a2d
 80239d8:	08023a41 	.word	0x08023a41
 80239dc:	080239bd 	.word	0x080239bd
 80239e0:	080239bd 	.word	0x080239bd
 80239e4:	080239bd 	.word	0x080239bd
 80239e8:	080239bd 	.word	0x080239bd
 80239ec:	08023a41 	.word	0x08023a41
 80239f0:	080239bd 	.word	0x080239bd
 80239f4:	080239bd 	.word	0x080239bd
 80239f8:	080239bd 	.word	0x080239bd
 80239fc:	080239bd 	.word	0x080239bd
 8023a00:	08023b4d 	.word	0x08023b4d
 8023a04:	08023a71 	.word	0x08023a71
 8023a08:	08023b2f 	.word	0x08023b2f
 8023a0c:	080239bd 	.word	0x080239bd
 8023a10:	080239bd 	.word	0x080239bd
 8023a14:	08023b6f 	.word	0x08023b6f
 8023a18:	080239bd 	.word	0x080239bd
 8023a1c:	08023a71 	.word	0x08023a71
 8023a20:	080239bd 	.word	0x080239bd
 8023a24:	080239bd 	.word	0x080239bd
 8023a28:	08023b37 	.word	0x08023b37
 8023a2c:	680b      	ldr	r3, [r1, #0]
 8023a2e:	1d1a      	adds	r2, r3, #4
 8023a30:	681b      	ldr	r3, [r3, #0]
 8023a32:	600a      	str	r2, [r1, #0]
 8023a34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023a3c:	2301      	movs	r3, #1
 8023a3e:	e0a3      	b.n	8023b88 <_printf_i+0x1f4>
 8023a40:	6825      	ldr	r5, [r4, #0]
 8023a42:	6808      	ldr	r0, [r1, #0]
 8023a44:	062e      	lsls	r6, r5, #24
 8023a46:	f100 0304 	add.w	r3, r0, #4
 8023a4a:	d50a      	bpl.n	8023a62 <_printf_i+0xce>
 8023a4c:	6805      	ldr	r5, [r0, #0]
 8023a4e:	600b      	str	r3, [r1, #0]
 8023a50:	2d00      	cmp	r5, #0
 8023a52:	da03      	bge.n	8023a5c <_printf_i+0xc8>
 8023a54:	232d      	movs	r3, #45	; 0x2d
 8023a56:	426d      	negs	r5, r5
 8023a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a5c:	485e      	ldr	r0, [pc, #376]	; (8023bd8 <_printf_i+0x244>)
 8023a5e:	230a      	movs	r3, #10
 8023a60:	e019      	b.n	8023a96 <_printf_i+0x102>
 8023a62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8023a66:	6805      	ldr	r5, [r0, #0]
 8023a68:	600b      	str	r3, [r1, #0]
 8023a6a:	bf18      	it	ne
 8023a6c:	b22d      	sxthne	r5, r5
 8023a6e:	e7ef      	b.n	8023a50 <_printf_i+0xbc>
 8023a70:	680b      	ldr	r3, [r1, #0]
 8023a72:	6825      	ldr	r5, [r4, #0]
 8023a74:	1d18      	adds	r0, r3, #4
 8023a76:	6008      	str	r0, [r1, #0]
 8023a78:	0628      	lsls	r0, r5, #24
 8023a7a:	d501      	bpl.n	8023a80 <_printf_i+0xec>
 8023a7c:	681d      	ldr	r5, [r3, #0]
 8023a7e:	e002      	b.n	8023a86 <_printf_i+0xf2>
 8023a80:	0669      	lsls	r1, r5, #25
 8023a82:	d5fb      	bpl.n	8023a7c <_printf_i+0xe8>
 8023a84:	881d      	ldrh	r5, [r3, #0]
 8023a86:	4854      	ldr	r0, [pc, #336]	; (8023bd8 <_printf_i+0x244>)
 8023a88:	2f6f      	cmp	r7, #111	; 0x6f
 8023a8a:	bf0c      	ite	eq
 8023a8c:	2308      	moveq	r3, #8
 8023a8e:	230a      	movne	r3, #10
 8023a90:	2100      	movs	r1, #0
 8023a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023a96:	6866      	ldr	r6, [r4, #4]
 8023a98:	60a6      	str	r6, [r4, #8]
 8023a9a:	2e00      	cmp	r6, #0
 8023a9c:	bfa2      	ittt	ge
 8023a9e:	6821      	ldrge	r1, [r4, #0]
 8023aa0:	f021 0104 	bicge.w	r1, r1, #4
 8023aa4:	6021      	strge	r1, [r4, #0]
 8023aa6:	b90d      	cbnz	r5, 8023aac <_printf_i+0x118>
 8023aa8:	2e00      	cmp	r6, #0
 8023aaa:	d04d      	beq.n	8023b48 <_printf_i+0x1b4>
 8023aac:	4616      	mov	r6, r2
 8023aae:	fbb5 f1f3 	udiv	r1, r5, r3
 8023ab2:	fb03 5711 	mls	r7, r3, r1, r5
 8023ab6:	5dc7      	ldrb	r7, [r0, r7]
 8023ab8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023abc:	462f      	mov	r7, r5
 8023abe:	42bb      	cmp	r3, r7
 8023ac0:	460d      	mov	r5, r1
 8023ac2:	d9f4      	bls.n	8023aae <_printf_i+0x11a>
 8023ac4:	2b08      	cmp	r3, #8
 8023ac6:	d10b      	bne.n	8023ae0 <_printf_i+0x14c>
 8023ac8:	6823      	ldr	r3, [r4, #0]
 8023aca:	07df      	lsls	r7, r3, #31
 8023acc:	d508      	bpl.n	8023ae0 <_printf_i+0x14c>
 8023ace:	6923      	ldr	r3, [r4, #16]
 8023ad0:	6861      	ldr	r1, [r4, #4]
 8023ad2:	4299      	cmp	r1, r3
 8023ad4:	bfde      	ittt	le
 8023ad6:	2330      	movle	r3, #48	; 0x30
 8023ad8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023adc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023ae0:	1b92      	subs	r2, r2, r6
 8023ae2:	6122      	str	r2, [r4, #16]
 8023ae4:	f8cd a000 	str.w	sl, [sp]
 8023ae8:	464b      	mov	r3, r9
 8023aea:	aa03      	add	r2, sp, #12
 8023aec:	4621      	mov	r1, r4
 8023aee:	4640      	mov	r0, r8
 8023af0:	f7ff fee2 	bl	80238b8 <_printf_common>
 8023af4:	3001      	adds	r0, #1
 8023af6:	d14c      	bne.n	8023b92 <_printf_i+0x1fe>
 8023af8:	f04f 30ff 	mov.w	r0, #4294967295
 8023afc:	b004      	add	sp, #16
 8023afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b02:	4835      	ldr	r0, [pc, #212]	; (8023bd8 <_printf_i+0x244>)
 8023b04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023b08:	6823      	ldr	r3, [r4, #0]
 8023b0a:	680e      	ldr	r6, [r1, #0]
 8023b0c:	061f      	lsls	r7, r3, #24
 8023b0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8023b12:	600e      	str	r6, [r1, #0]
 8023b14:	d514      	bpl.n	8023b40 <_printf_i+0x1ac>
 8023b16:	07d9      	lsls	r1, r3, #31
 8023b18:	bf44      	itt	mi
 8023b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8023b1e:	6023      	strmi	r3, [r4, #0]
 8023b20:	b91d      	cbnz	r5, 8023b2a <_printf_i+0x196>
 8023b22:	6823      	ldr	r3, [r4, #0]
 8023b24:	f023 0320 	bic.w	r3, r3, #32
 8023b28:	6023      	str	r3, [r4, #0]
 8023b2a:	2310      	movs	r3, #16
 8023b2c:	e7b0      	b.n	8023a90 <_printf_i+0xfc>
 8023b2e:	6823      	ldr	r3, [r4, #0]
 8023b30:	f043 0320 	orr.w	r3, r3, #32
 8023b34:	6023      	str	r3, [r4, #0]
 8023b36:	2378      	movs	r3, #120	; 0x78
 8023b38:	4828      	ldr	r0, [pc, #160]	; (8023bdc <_printf_i+0x248>)
 8023b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023b3e:	e7e3      	b.n	8023b08 <_printf_i+0x174>
 8023b40:	065e      	lsls	r6, r3, #25
 8023b42:	bf48      	it	mi
 8023b44:	b2ad      	uxthmi	r5, r5
 8023b46:	e7e6      	b.n	8023b16 <_printf_i+0x182>
 8023b48:	4616      	mov	r6, r2
 8023b4a:	e7bb      	b.n	8023ac4 <_printf_i+0x130>
 8023b4c:	680b      	ldr	r3, [r1, #0]
 8023b4e:	6826      	ldr	r6, [r4, #0]
 8023b50:	6960      	ldr	r0, [r4, #20]
 8023b52:	1d1d      	adds	r5, r3, #4
 8023b54:	600d      	str	r5, [r1, #0]
 8023b56:	0635      	lsls	r5, r6, #24
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	d501      	bpl.n	8023b60 <_printf_i+0x1cc>
 8023b5c:	6018      	str	r0, [r3, #0]
 8023b5e:	e002      	b.n	8023b66 <_printf_i+0x1d2>
 8023b60:	0671      	lsls	r1, r6, #25
 8023b62:	d5fb      	bpl.n	8023b5c <_printf_i+0x1c8>
 8023b64:	8018      	strh	r0, [r3, #0]
 8023b66:	2300      	movs	r3, #0
 8023b68:	6123      	str	r3, [r4, #16]
 8023b6a:	4616      	mov	r6, r2
 8023b6c:	e7ba      	b.n	8023ae4 <_printf_i+0x150>
 8023b6e:	680b      	ldr	r3, [r1, #0]
 8023b70:	1d1a      	adds	r2, r3, #4
 8023b72:	600a      	str	r2, [r1, #0]
 8023b74:	681e      	ldr	r6, [r3, #0]
 8023b76:	6862      	ldr	r2, [r4, #4]
 8023b78:	2100      	movs	r1, #0
 8023b7a:	4630      	mov	r0, r6
 8023b7c:	f7dc fb60 	bl	8000240 <memchr>
 8023b80:	b108      	cbz	r0, 8023b86 <_printf_i+0x1f2>
 8023b82:	1b80      	subs	r0, r0, r6
 8023b84:	6060      	str	r0, [r4, #4]
 8023b86:	6863      	ldr	r3, [r4, #4]
 8023b88:	6123      	str	r3, [r4, #16]
 8023b8a:	2300      	movs	r3, #0
 8023b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023b90:	e7a8      	b.n	8023ae4 <_printf_i+0x150>
 8023b92:	6923      	ldr	r3, [r4, #16]
 8023b94:	4632      	mov	r2, r6
 8023b96:	4649      	mov	r1, r9
 8023b98:	4640      	mov	r0, r8
 8023b9a:	47d0      	blx	sl
 8023b9c:	3001      	adds	r0, #1
 8023b9e:	d0ab      	beq.n	8023af8 <_printf_i+0x164>
 8023ba0:	6823      	ldr	r3, [r4, #0]
 8023ba2:	079b      	lsls	r3, r3, #30
 8023ba4:	d413      	bmi.n	8023bce <_printf_i+0x23a>
 8023ba6:	68e0      	ldr	r0, [r4, #12]
 8023ba8:	9b03      	ldr	r3, [sp, #12]
 8023baa:	4298      	cmp	r0, r3
 8023bac:	bfb8      	it	lt
 8023bae:	4618      	movlt	r0, r3
 8023bb0:	e7a4      	b.n	8023afc <_printf_i+0x168>
 8023bb2:	2301      	movs	r3, #1
 8023bb4:	4632      	mov	r2, r6
 8023bb6:	4649      	mov	r1, r9
 8023bb8:	4640      	mov	r0, r8
 8023bba:	47d0      	blx	sl
 8023bbc:	3001      	adds	r0, #1
 8023bbe:	d09b      	beq.n	8023af8 <_printf_i+0x164>
 8023bc0:	3501      	adds	r5, #1
 8023bc2:	68e3      	ldr	r3, [r4, #12]
 8023bc4:	9903      	ldr	r1, [sp, #12]
 8023bc6:	1a5b      	subs	r3, r3, r1
 8023bc8:	42ab      	cmp	r3, r5
 8023bca:	dcf2      	bgt.n	8023bb2 <_printf_i+0x21e>
 8023bcc:	e7eb      	b.n	8023ba6 <_printf_i+0x212>
 8023bce:	2500      	movs	r5, #0
 8023bd0:	f104 0619 	add.w	r6, r4, #25
 8023bd4:	e7f5      	b.n	8023bc2 <_printf_i+0x22e>
 8023bd6:	bf00      	nop
 8023bd8:	08029fc1 	.word	0x08029fc1
 8023bdc:	08029fd2 	.word	0x08029fd2

08023be0 <_sbrk_r>:
 8023be0:	b538      	push	{r3, r4, r5, lr}
 8023be2:	4d06      	ldr	r5, [pc, #24]	; (8023bfc <_sbrk_r+0x1c>)
 8023be4:	2300      	movs	r3, #0
 8023be6:	4604      	mov	r4, r0
 8023be8:	4608      	mov	r0, r1
 8023bea:	602b      	str	r3, [r5, #0]
 8023bec:	f7dd ff38 	bl	8001a60 <_sbrk>
 8023bf0:	1c43      	adds	r3, r0, #1
 8023bf2:	d102      	bne.n	8023bfa <_sbrk_r+0x1a>
 8023bf4:	682b      	ldr	r3, [r5, #0]
 8023bf6:	b103      	cbz	r3, 8023bfa <_sbrk_r+0x1a>
 8023bf8:	6023      	str	r3, [r4, #0]
 8023bfa:	bd38      	pop	{r3, r4, r5, pc}
 8023bfc:	2000af84 	.word	0x2000af84

08023c00 <_raise_r>:
 8023c00:	291f      	cmp	r1, #31
 8023c02:	b538      	push	{r3, r4, r5, lr}
 8023c04:	4604      	mov	r4, r0
 8023c06:	460d      	mov	r5, r1
 8023c08:	d904      	bls.n	8023c14 <_raise_r+0x14>
 8023c0a:	2316      	movs	r3, #22
 8023c0c:	6003      	str	r3, [r0, #0]
 8023c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c12:	bd38      	pop	{r3, r4, r5, pc}
 8023c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023c16:	b112      	cbz	r2, 8023c1e <_raise_r+0x1e>
 8023c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023c1c:	b94b      	cbnz	r3, 8023c32 <_raise_r+0x32>
 8023c1e:	4620      	mov	r0, r4
 8023c20:	f000 f830 	bl	8023c84 <_getpid_r>
 8023c24:	462a      	mov	r2, r5
 8023c26:	4601      	mov	r1, r0
 8023c28:	4620      	mov	r0, r4
 8023c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023c2e:	f000 b817 	b.w	8023c60 <_kill_r>
 8023c32:	2b01      	cmp	r3, #1
 8023c34:	d00a      	beq.n	8023c4c <_raise_r+0x4c>
 8023c36:	1c59      	adds	r1, r3, #1
 8023c38:	d103      	bne.n	8023c42 <_raise_r+0x42>
 8023c3a:	2316      	movs	r3, #22
 8023c3c:	6003      	str	r3, [r0, #0]
 8023c3e:	2001      	movs	r0, #1
 8023c40:	e7e7      	b.n	8023c12 <_raise_r+0x12>
 8023c42:	2400      	movs	r4, #0
 8023c44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023c48:	4628      	mov	r0, r5
 8023c4a:	4798      	blx	r3
 8023c4c:	2000      	movs	r0, #0
 8023c4e:	e7e0      	b.n	8023c12 <_raise_r+0x12>

08023c50 <raise>:
 8023c50:	4b02      	ldr	r3, [pc, #8]	; (8023c5c <raise+0xc>)
 8023c52:	4601      	mov	r1, r0
 8023c54:	6818      	ldr	r0, [r3, #0]
 8023c56:	f7ff bfd3 	b.w	8023c00 <_raise_r>
 8023c5a:	bf00      	nop
 8023c5c:	20000078 	.word	0x20000078

08023c60 <_kill_r>:
 8023c60:	b538      	push	{r3, r4, r5, lr}
 8023c62:	4d07      	ldr	r5, [pc, #28]	; (8023c80 <_kill_r+0x20>)
 8023c64:	2300      	movs	r3, #0
 8023c66:	4604      	mov	r4, r0
 8023c68:	4608      	mov	r0, r1
 8023c6a:	4611      	mov	r1, r2
 8023c6c:	602b      	str	r3, [r5, #0]
 8023c6e:	f7dd fec3 	bl	80019f8 <_kill>
 8023c72:	1c43      	adds	r3, r0, #1
 8023c74:	d102      	bne.n	8023c7c <_kill_r+0x1c>
 8023c76:	682b      	ldr	r3, [r5, #0]
 8023c78:	b103      	cbz	r3, 8023c7c <_kill_r+0x1c>
 8023c7a:	6023      	str	r3, [r4, #0]
 8023c7c:	bd38      	pop	{r3, r4, r5, pc}
 8023c7e:	bf00      	nop
 8023c80:	2000af84 	.word	0x2000af84

08023c84 <_getpid_r>:
 8023c84:	f7dd beb6 	b.w	80019f4 <_getpid>

08023c88 <strcpy>:
 8023c88:	4603      	mov	r3, r0
 8023c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023c8e:	f803 2b01 	strb.w	r2, [r3], #1
 8023c92:	2a00      	cmp	r2, #0
 8023c94:	d1f9      	bne.n	8023c8a <strcpy+0x2>
 8023c96:	4770      	bx	lr

08023c98 <__swbuf_r>:
 8023c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c9a:	460e      	mov	r6, r1
 8023c9c:	4614      	mov	r4, r2
 8023c9e:	4605      	mov	r5, r0
 8023ca0:	b118      	cbz	r0, 8023caa <__swbuf_r+0x12>
 8023ca2:	6983      	ldr	r3, [r0, #24]
 8023ca4:	b90b      	cbnz	r3, 8023caa <__swbuf_r+0x12>
 8023ca6:	f001 f849 	bl	8024d3c <__sinit>
 8023caa:	4b21      	ldr	r3, [pc, #132]	; (8023d30 <__swbuf_r+0x98>)
 8023cac:	429c      	cmp	r4, r3
 8023cae:	d12b      	bne.n	8023d08 <__swbuf_r+0x70>
 8023cb0:	686c      	ldr	r4, [r5, #4]
 8023cb2:	69a3      	ldr	r3, [r4, #24]
 8023cb4:	60a3      	str	r3, [r4, #8]
 8023cb6:	89a3      	ldrh	r3, [r4, #12]
 8023cb8:	071a      	lsls	r2, r3, #28
 8023cba:	d52f      	bpl.n	8023d1c <__swbuf_r+0x84>
 8023cbc:	6923      	ldr	r3, [r4, #16]
 8023cbe:	b36b      	cbz	r3, 8023d1c <__swbuf_r+0x84>
 8023cc0:	6923      	ldr	r3, [r4, #16]
 8023cc2:	6820      	ldr	r0, [r4, #0]
 8023cc4:	1ac0      	subs	r0, r0, r3
 8023cc6:	6963      	ldr	r3, [r4, #20]
 8023cc8:	b2f6      	uxtb	r6, r6
 8023cca:	4283      	cmp	r3, r0
 8023ccc:	4637      	mov	r7, r6
 8023cce:	dc04      	bgt.n	8023cda <__swbuf_r+0x42>
 8023cd0:	4621      	mov	r1, r4
 8023cd2:	4628      	mov	r0, r5
 8023cd4:	f000 ff9e 	bl	8024c14 <_fflush_r>
 8023cd8:	bb30      	cbnz	r0, 8023d28 <__swbuf_r+0x90>
 8023cda:	68a3      	ldr	r3, [r4, #8]
 8023cdc:	3b01      	subs	r3, #1
 8023cde:	60a3      	str	r3, [r4, #8]
 8023ce0:	6823      	ldr	r3, [r4, #0]
 8023ce2:	1c5a      	adds	r2, r3, #1
 8023ce4:	6022      	str	r2, [r4, #0]
 8023ce6:	701e      	strb	r6, [r3, #0]
 8023ce8:	6963      	ldr	r3, [r4, #20]
 8023cea:	3001      	adds	r0, #1
 8023cec:	4283      	cmp	r3, r0
 8023cee:	d004      	beq.n	8023cfa <__swbuf_r+0x62>
 8023cf0:	89a3      	ldrh	r3, [r4, #12]
 8023cf2:	07db      	lsls	r3, r3, #31
 8023cf4:	d506      	bpl.n	8023d04 <__swbuf_r+0x6c>
 8023cf6:	2e0a      	cmp	r6, #10
 8023cf8:	d104      	bne.n	8023d04 <__swbuf_r+0x6c>
 8023cfa:	4621      	mov	r1, r4
 8023cfc:	4628      	mov	r0, r5
 8023cfe:	f000 ff89 	bl	8024c14 <_fflush_r>
 8023d02:	b988      	cbnz	r0, 8023d28 <__swbuf_r+0x90>
 8023d04:	4638      	mov	r0, r7
 8023d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d08:	4b0a      	ldr	r3, [pc, #40]	; (8023d34 <__swbuf_r+0x9c>)
 8023d0a:	429c      	cmp	r4, r3
 8023d0c:	d101      	bne.n	8023d12 <__swbuf_r+0x7a>
 8023d0e:	68ac      	ldr	r4, [r5, #8]
 8023d10:	e7cf      	b.n	8023cb2 <__swbuf_r+0x1a>
 8023d12:	4b09      	ldr	r3, [pc, #36]	; (8023d38 <__swbuf_r+0xa0>)
 8023d14:	429c      	cmp	r4, r3
 8023d16:	bf08      	it	eq
 8023d18:	68ec      	ldreq	r4, [r5, #12]
 8023d1a:	e7ca      	b.n	8023cb2 <__swbuf_r+0x1a>
 8023d1c:	4621      	mov	r1, r4
 8023d1e:	4628      	mov	r0, r5
 8023d20:	f000 f80c 	bl	8023d3c <__swsetup_r>
 8023d24:	2800      	cmp	r0, #0
 8023d26:	d0cb      	beq.n	8023cc0 <__swbuf_r+0x28>
 8023d28:	f04f 37ff 	mov.w	r7, #4294967295
 8023d2c:	e7ea      	b.n	8023d04 <__swbuf_r+0x6c>
 8023d2e:	bf00      	nop
 8023d30:	0802a098 	.word	0x0802a098
 8023d34:	0802a0b8 	.word	0x0802a0b8
 8023d38:	0802a078 	.word	0x0802a078

08023d3c <__swsetup_r>:
 8023d3c:	4b32      	ldr	r3, [pc, #200]	; (8023e08 <__swsetup_r+0xcc>)
 8023d3e:	b570      	push	{r4, r5, r6, lr}
 8023d40:	681d      	ldr	r5, [r3, #0]
 8023d42:	4606      	mov	r6, r0
 8023d44:	460c      	mov	r4, r1
 8023d46:	b125      	cbz	r5, 8023d52 <__swsetup_r+0x16>
 8023d48:	69ab      	ldr	r3, [r5, #24]
 8023d4a:	b913      	cbnz	r3, 8023d52 <__swsetup_r+0x16>
 8023d4c:	4628      	mov	r0, r5
 8023d4e:	f000 fff5 	bl	8024d3c <__sinit>
 8023d52:	4b2e      	ldr	r3, [pc, #184]	; (8023e0c <__swsetup_r+0xd0>)
 8023d54:	429c      	cmp	r4, r3
 8023d56:	d10f      	bne.n	8023d78 <__swsetup_r+0x3c>
 8023d58:	686c      	ldr	r4, [r5, #4]
 8023d5a:	89a3      	ldrh	r3, [r4, #12]
 8023d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023d60:	0719      	lsls	r1, r3, #28
 8023d62:	d42c      	bmi.n	8023dbe <__swsetup_r+0x82>
 8023d64:	06dd      	lsls	r5, r3, #27
 8023d66:	d411      	bmi.n	8023d8c <__swsetup_r+0x50>
 8023d68:	2309      	movs	r3, #9
 8023d6a:	6033      	str	r3, [r6, #0]
 8023d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023d70:	81a3      	strh	r3, [r4, #12]
 8023d72:	f04f 30ff 	mov.w	r0, #4294967295
 8023d76:	e03e      	b.n	8023df6 <__swsetup_r+0xba>
 8023d78:	4b25      	ldr	r3, [pc, #148]	; (8023e10 <__swsetup_r+0xd4>)
 8023d7a:	429c      	cmp	r4, r3
 8023d7c:	d101      	bne.n	8023d82 <__swsetup_r+0x46>
 8023d7e:	68ac      	ldr	r4, [r5, #8]
 8023d80:	e7eb      	b.n	8023d5a <__swsetup_r+0x1e>
 8023d82:	4b24      	ldr	r3, [pc, #144]	; (8023e14 <__swsetup_r+0xd8>)
 8023d84:	429c      	cmp	r4, r3
 8023d86:	bf08      	it	eq
 8023d88:	68ec      	ldreq	r4, [r5, #12]
 8023d8a:	e7e6      	b.n	8023d5a <__swsetup_r+0x1e>
 8023d8c:	0758      	lsls	r0, r3, #29
 8023d8e:	d512      	bpl.n	8023db6 <__swsetup_r+0x7a>
 8023d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023d92:	b141      	cbz	r1, 8023da6 <__swsetup_r+0x6a>
 8023d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023d98:	4299      	cmp	r1, r3
 8023d9a:	d002      	beq.n	8023da2 <__swsetup_r+0x66>
 8023d9c:	4630      	mov	r0, r6
 8023d9e:	f7ff f8b1 	bl	8022f04 <_free_r>
 8023da2:	2300      	movs	r3, #0
 8023da4:	6363      	str	r3, [r4, #52]	; 0x34
 8023da6:	89a3      	ldrh	r3, [r4, #12]
 8023da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023dac:	81a3      	strh	r3, [r4, #12]
 8023dae:	2300      	movs	r3, #0
 8023db0:	6063      	str	r3, [r4, #4]
 8023db2:	6923      	ldr	r3, [r4, #16]
 8023db4:	6023      	str	r3, [r4, #0]
 8023db6:	89a3      	ldrh	r3, [r4, #12]
 8023db8:	f043 0308 	orr.w	r3, r3, #8
 8023dbc:	81a3      	strh	r3, [r4, #12]
 8023dbe:	6923      	ldr	r3, [r4, #16]
 8023dc0:	b94b      	cbnz	r3, 8023dd6 <__swsetup_r+0x9a>
 8023dc2:	89a3      	ldrh	r3, [r4, #12]
 8023dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023dcc:	d003      	beq.n	8023dd6 <__swsetup_r+0x9a>
 8023dce:	4621      	mov	r1, r4
 8023dd0:	4630      	mov	r0, r6
 8023dd2:	f001 f87d 	bl	8024ed0 <__smakebuf_r>
 8023dd6:	89a0      	ldrh	r0, [r4, #12]
 8023dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023ddc:	f010 0301 	ands.w	r3, r0, #1
 8023de0:	d00a      	beq.n	8023df8 <__swsetup_r+0xbc>
 8023de2:	2300      	movs	r3, #0
 8023de4:	60a3      	str	r3, [r4, #8]
 8023de6:	6963      	ldr	r3, [r4, #20]
 8023de8:	425b      	negs	r3, r3
 8023dea:	61a3      	str	r3, [r4, #24]
 8023dec:	6923      	ldr	r3, [r4, #16]
 8023dee:	b943      	cbnz	r3, 8023e02 <__swsetup_r+0xc6>
 8023df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023df4:	d1ba      	bne.n	8023d6c <__swsetup_r+0x30>
 8023df6:	bd70      	pop	{r4, r5, r6, pc}
 8023df8:	0781      	lsls	r1, r0, #30
 8023dfa:	bf58      	it	pl
 8023dfc:	6963      	ldrpl	r3, [r4, #20]
 8023dfe:	60a3      	str	r3, [r4, #8]
 8023e00:	e7f4      	b.n	8023dec <__swsetup_r+0xb0>
 8023e02:	2000      	movs	r0, #0
 8023e04:	e7f7      	b.n	8023df6 <__swsetup_r+0xba>
 8023e06:	bf00      	nop
 8023e08:	20000078 	.word	0x20000078
 8023e0c:	0802a098 	.word	0x0802a098
 8023e10:	0802a0b8 	.word	0x0802a0b8
 8023e14:	0802a078 	.word	0x0802a078

08023e18 <quorem>:
 8023e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e1c:	6903      	ldr	r3, [r0, #16]
 8023e1e:	690c      	ldr	r4, [r1, #16]
 8023e20:	42a3      	cmp	r3, r4
 8023e22:	4607      	mov	r7, r0
 8023e24:	f2c0 8081 	blt.w	8023f2a <quorem+0x112>
 8023e28:	3c01      	subs	r4, #1
 8023e2a:	f101 0814 	add.w	r8, r1, #20
 8023e2e:	f100 0514 	add.w	r5, r0, #20
 8023e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023e36:	9301      	str	r3, [sp, #4]
 8023e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8023e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023e40:	3301      	adds	r3, #1
 8023e42:	429a      	cmp	r2, r3
 8023e44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8023e48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8023e4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8023e50:	d331      	bcc.n	8023eb6 <quorem+0x9e>
 8023e52:	f04f 0e00 	mov.w	lr, #0
 8023e56:	4640      	mov	r0, r8
 8023e58:	46ac      	mov	ip, r5
 8023e5a:	46f2      	mov	sl, lr
 8023e5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8023e60:	b293      	uxth	r3, r2
 8023e62:	fb06 e303 	mla	r3, r6, r3, lr
 8023e66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8023e6a:	b29b      	uxth	r3, r3
 8023e6c:	ebaa 0303 	sub.w	r3, sl, r3
 8023e70:	0c12      	lsrs	r2, r2, #16
 8023e72:	f8dc a000 	ldr.w	sl, [ip]
 8023e76:	fb06 e202 	mla	r2, r6, r2, lr
 8023e7a:	fa13 f38a 	uxtah	r3, r3, sl
 8023e7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8023e82:	fa1f fa82 	uxth.w	sl, r2
 8023e86:	f8dc 2000 	ldr.w	r2, [ip]
 8023e8a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8023e8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023e92:	b29b      	uxth	r3, r3
 8023e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023e98:	4581      	cmp	r9, r0
 8023e9a:	f84c 3b04 	str.w	r3, [ip], #4
 8023e9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8023ea2:	d2db      	bcs.n	8023e5c <quorem+0x44>
 8023ea4:	f855 300b 	ldr.w	r3, [r5, fp]
 8023ea8:	b92b      	cbnz	r3, 8023eb6 <quorem+0x9e>
 8023eaa:	9b01      	ldr	r3, [sp, #4]
 8023eac:	3b04      	subs	r3, #4
 8023eae:	429d      	cmp	r5, r3
 8023eb0:	461a      	mov	r2, r3
 8023eb2:	d32e      	bcc.n	8023f12 <quorem+0xfa>
 8023eb4:	613c      	str	r4, [r7, #16]
 8023eb6:	4638      	mov	r0, r7
 8023eb8:	f001 fae2 	bl	8025480 <__mcmp>
 8023ebc:	2800      	cmp	r0, #0
 8023ebe:	db24      	blt.n	8023f0a <quorem+0xf2>
 8023ec0:	3601      	adds	r6, #1
 8023ec2:	4628      	mov	r0, r5
 8023ec4:	f04f 0c00 	mov.w	ip, #0
 8023ec8:	f858 2b04 	ldr.w	r2, [r8], #4
 8023ecc:	f8d0 e000 	ldr.w	lr, [r0]
 8023ed0:	b293      	uxth	r3, r2
 8023ed2:	ebac 0303 	sub.w	r3, ip, r3
 8023ed6:	0c12      	lsrs	r2, r2, #16
 8023ed8:	fa13 f38e 	uxtah	r3, r3, lr
 8023edc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8023ee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023ee4:	b29b      	uxth	r3, r3
 8023ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023eea:	45c1      	cmp	r9, r8
 8023eec:	f840 3b04 	str.w	r3, [r0], #4
 8023ef0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8023ef4:	d2e8      	bcs.n	8023ec8 <quorem+0xb0>
 8023ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023efa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023efe:	b922      	cbnz	r2, 8023f0a <quorem+0xf2>
 8023f00:	3b04      	subs	r3, #4
 8023f02:	429d      	cmp	r5, r3
 8023f04:	461a      	mov	r2, r3
 8023f06:	d30a      	bcc.n	8023f1e <quorem+0x106>
 8023f08:	613c      	str	r4, [r7, #16]
 8023f0a:	4630      	mov	r0, r6
 8023f0c:	b003      	add	sp, #12
 8023f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f12:	6812      	ldr	r2, [r2, #0]
 8023f14:	3b04      	subs	r3, #4
 8023f16:	2a00      	cmp	r2, #0
 8023f18:	d1cc      	bne.n	8023eb4 <quorem+0x9c>
 8023f1a:	3c01      	subs	r4, #1
 8023f1c:	e7c7      	b.n	8023eae <quorem+0x96>
 8023f1e:	6812      	ldr	r2, [r2, #0]
 8023f20:	3b04      	subs	r3, #4
 8023f22:	2a00      	cmp	r2, #0
 8023f24:	d1f0      	bne.n	8023f08 <quorem+0xf0>
 8023f26:	3c01      	subs	r4, #1
 8023f28:	e7eb      	b.n	8023f02 <quorem+0xea>
 8023f2a:	2000      	movs	r0, #0
 8023f2c:	e7ee      	b.n	8023f0c <quorem+0xf4>
	...

08023f30 <_dtoa_r>:
 8023f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f34:	ed2d 8b02 	vpush	{d8}
 8023f38:	ec57 6b10 	vmov	r6, r7, d0
 8023f3c:	b095      	sub	sp, #84	; 0x54
 8023f3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023f40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8023f44:	9105      	str	r1, [sp, #20]
 8023f46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8023f4a:	4604      	mov	r4, r0
 8023f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8023f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8023f50:	b975      	cbnz	r5, 8023f70 <_dtoa_r+0x40>
 8023f52:	2010      	movs	r0, #16
 8023f54:	f7fe ffc6 	bl	8022ee4 <malloc>
 8023f58:	4602      	mov	r2, r0
 8023f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8023f5c:	b920      	cbnz	r0, 8023f68 <_dtoa_r+0x38>
 8023f5e:	4bb2      	ldr	r3, [pc, #712]	; (8024228 <_dtoa_r+0x2f8>)
 8023f60:	21ea      	movs	r1, #234	; 0xea
 8023f62:	48b2      	ldr	r0, [pc, #712]	; (802422c <_dtoa_r+0x2fc>)
 8023f64:	f7fe ff64 	bl	8022e30 <__assert_func>
 8023f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8023f6c:	6005      	str	r5, [r0, #0]
 8023f6e:	60c5      	str	r5, [r0, #12]
 8023f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023f72:	6819      	ldr	r1, [r3, #0]
 8023f74:	b151      	cbz	r1, 8023f8c <_dtoa_r+0x5c>
 8023f76:	685a      	ldr	r2, [r3, #4]
 8023f78:	604a      	str	r2, [r1, #4]
 8023f7a:	2301      	movs	r3, #1
 8023f7c:	4093      	lsls	r3, r2
 8023f7e:	608b      	str	r3, [r1, #8]
 8023f80:	4620      	mov	r0, r4
 8023f82:	f001 f83f 	bl	8025004 <_Bfree>
 8023f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023f88:	2200      	movs	r2, #0
 8023f8a:	601a      	str	r2, [r3, #0]
 8023f8c:	1e3b      	subs	r3, r7, #0
 8023f8e:	bfb9      	ittee	lt
 8023f90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8023f94:	9303      	strlt	r3, [sp, #12]
 8023f96:	2300      	movge	r3, #0
 8023f98:	f8c8 3000 	strge.w	r3, [r8]
 8023f9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8023fa0:	4ba3      	ldr	r3, [pc, #652]	; (8024230 <_dtoa_r+0x300>)
 8023fa2:	bfbc      	itt	lt
 8023fa4:	2201      	movlt	r2, #1
 8023fa6:	f8c8 2000 	strlt.w	r2, [r8]
 8023faa:	ea33 0309 	bics.w	r3, r3, r9
 8023fae:	d11b      	bne.n	8023fe8 <_dtoa_r+0xb8>
 8023fb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8023fb6:	6013      	str	r3, [r2, #0]
 8023fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023fbc:	4333      	orrs	r3, r6
 8023fbe:	f000 857a 	beq.w	8024ab6 <_dtoa_r+0xb86>
 8023fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023fc4:	b963      	cbnz	r3, 8023fe0 <_dtoa_r+0xb0>
 8023fc6:	4b9b      	ldr	r3, [pc, #620]	; (8024234 <_dtoa_r+0x304>)
 8023fc8:	e024      	b.n	8024014 <_dtoa_r+0xe4>
 8023fca:	4b9b      	ldr	r3, [pc, #620]	; (8024238 <_dtoa_r+0x308>)
 8023fcc:	9300      	str	r3, [sp, #0]
 8023fce:	3308      	adds	r3, #8
 8023fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023fd2:	6013      	str	r3, [r2, #0]
 8023fd4:	9800      	ldr	r0, [sp, #0]
 8023fd6:	b015      	add	sp, #84	; 0x54
 8023fd8:	ecbd 8b02 	vpop	{d8}
 8023fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fe0:	4b94      	ldr	r3, [pc, #592]	; (8024234 <_dtoa_r+0x304>)
 8023fe2:	9300      	str	r3, [sp, #0]
 8023fe4:	3303      	adds	r3, #3
 8023fe6:	e7f3      	b.n	8023fd0 <_dtoa_r+0xa0>
 8023fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023fec:	2200      	movs	r2, #0
 8023fee:	ec51 0b17 	vmov	r0, r1, d7
 8023ff2:	2300      	movs	r3, #0
 8023ff4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8023ff8:	f7dc fd96 	bl	8000b28 <__aeabi_dcmpeq>
 8023ffc:	4680      	mov	r8, r0
 8023ffe:	b158      	cbz	r0, 8024018 <_dtoa_r+0xe8>
 8024000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024002:	2301      	movs	r3, #1
 8024004:	6013      	str	r3, [r2, #0]
 8024006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024008:	2b00      	cmp	r3, #0
 802400a:	f000 8551 	beq.w	8024ab0 <_dtoa_r+0xb80>
 802400e:	488b      	ldr	r0, [pc, #556]	; (802423c <_dtoa_r+0x30c>)
 8024010:	6018      	str	r0, [r3, #0]
 8024012:	1e43      	subs	r3, r0, #1
 8024014:	9300      	str	r3, [sp, #0]
 8024016:	e7dd      	b.n	8023fd4 <_dtoa_r+0xa4>
 8024018:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802401c:	aa12      	add	r2, sp, #72	; 0x48
 802401e:	a913      	add	r1, sp, #76	; 0x4c
 8024020:	4620      	mov	r0, r4
 8024022:	f001 fad1 	bl	80255c8 <__d2b>
 8024026:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802402a:	4683      	mov	fp, r0
 802402c:	2d00      	cmp	r5, #0
 802402e:	d07c      	beq.n	802412a <_dtoa_r+0x1fa>
 8024030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024032:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8024036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802403a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 802403e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8024042:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8024046:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802404a:	4b7d      	ldr	r3, [pc, #500]	; (8024240 <_dtoa_r+0x310>)
 802404c:	2200      	movs	r2, #0
 802404e:	4630      	mov	r0, r6
 8024050:	4639      	mov	r1, r7
 8024052:	f7dc f949 	bl	80002e8 <__aeabi_dsub>
 8024056:	a36e      	add	r3, pc, #440	; (adr r3, 8024210 <_dtoa_r+0x2e0>)
 8024058:	e9d3 2300 	ldrd	r2, r3, [r3]
 802405c:	f7dc fafc 	bl	8000658 <__aeabi_dmul>
 8024060:	a36d      	add	r3, pc, #436	; (adr r3, 8024218 <_dtoa_r+0x2e8>)
 8024062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024066:	f7dc f941 	bl	80002ec <__adddf3>
 802406a:	4606      	mov	r6, r0
 802406c:	4628      	mov	r0, r5
 802406e:	460f      	mov	r7, r1
 8024070:	f7dc fa88 	bl	8000584 <__aeabi_i2d>
 8024074:	a36a      	add	r3, pc, #424	; (adr r3, 8024220 <_dtoa_r+0x2f0>)
 8024076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802407a:	f7dc faed 	bl	8000658 <__aeabi_dmul>
 802407e:	4602      	mov	r2, r0
 8024080:	460b      	mov	r3, r1
 8024082:	4630      	mov	r0, r6
 8024084:	4639      	mov	r1, r7
 8024086:	f7dc f931 	bl	80002ec <__adddf3>
 802408a:	4606      	mov	r6, r0
 802408c:	460f      	mov	r7, r1
 802408e:	f7dc fd93 	bl	8000bb8 <__aeabi_d2iz>
 8024092:	2200      	movs	r2, #0
 8024094:	4682      	mov	sl, r0
 8024096:	2300      	movs	r3, #0
 8024098:	4630      	mov	r0, r6
 802409a:	4639      	mov	r1, r7
 802409c:	f7dc fd4e 	bl	8000b3c <__aeabi_dcmplt>
 80240a0:	b148      	cbz	r0, 80240b6 <_dtoa_r+0x186>
 80240a2:	4650      	mov	r0, sl
 80240a4:	f7dc fa6e 	bl	8000584 <__aeabi_i2d>
 80240a8:	4632      	mov	r2, r6
 80240aa:	463b      	mov	r3, r7
 80240ac:	f7dc fd3c 	bl	8000b28 <__aeabi_dcmpeq>
 80240b0:	b908      	cbnz	r0, 80240b6 <_dtoa_r+0x186>
 80240b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80240b6:	f1ba 0f16 	cmp.w	sl, #22
 80240ba:	d854      	bhi.n	8024166 <_dtoa_r+0x236>
 80240bc:	4b61      	ldr	r3, [pc, #388]	; (8024244 <_dtoa_r+0x314>)
 80240be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80240c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80240ca:	f7dc fd37 	bl	8000b3c <__aeabi_dcmplt>
 80240ce:	2800      	cmp	r0, #0
 80240d0:	d04b      	beq.n	802416a <_dtoa_r+0x23a>
 80240d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80240d6:	2300      	movs	r3, #0
 80240d8:	930e      	str	r3, [sp, #56]	; 0x38
 80240da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80240dc:	1b5d      	subs	r5, r3, r5
 80240de:	1e6b      	subs	r3, r5, #1
 80240e0:	9304      	str	r3, [sp, #16]
 80240e2:	bf43      	ittte	mi
 80240e4:	2300      	movmi	r3, #0
 80240e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80240ea:	9304      	strmi	r3, [sp, #16]
 80240ec:	f04f 0800 	movpl.w	r8, #0
 80240f0:	f1ba 0f00 	cmp.w	sl, #0
 80240f4:	db3b      	blt.n	802416e <_dtoa_r+0x23e>
 80240f6:	9b04      	ldr	r3, [sp, #16]
 80240f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80240fc:	4453      	add	r3, sl
 80240fe:	9304      	str	r3, [sp, #16]
 8024100:	2300      	movs	r3, #0
 8024102:	9306      	str	r3, [sp, #24]
 8024104:	9b05      	ldr	r3, [sp, #20]
 8024106:	2b09      	cmp	r3, #9
 8024108:	d869      	bhi.n	80241de <_dtoa_r+0x2ae>
 802410a:	2b05      	cmp	r3, #5
 802410c:	bfc4      	itt	gt
 802410e:	3b04      	subgt	r3, #4
 8024110:	9305      	strgt	r3, [sp, #20]
 8024112:	9b05      	ldr	r3, [sp, #20]
 8024114:	f1a3 0302 	sub.w	r3, r3, #2
 8024118:	bfcc      	ite	gt
 802411a:	2500      	movgt	r5, #0
 802411c:	2501      	movle	r5, #1
 802411e:	2b03      	cmp	r3, #3
 8024120:	d869      	bhi.n	80241f6 <_dtoa_r+0x2c6>
 8024122:	e8df f003 	tbb	[pc, r3]
 8024126:	4e2c      	.short	0x4e2c
 8024128:	5a4c      	.short	0x5a4c
 802412a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 802412e:	441d      	add	r5, r3
 8024130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8024134:	2b20      	cmp	r3, #32
 8024136:	bfc1      	itttt	gt
 8024138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802413c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8024140:	fa09 f303 	lslgt.w	r3, r9, r3
 8024144:	fa26 f000 	lsrgt.w	r0, r6, r0
 8024148:	bfda      	itte	le
 802414a:	f1c3 0320 	rsble	r3, r3, #32
 802414e:	fa06 f003 	lslle.w	r0, r6, r3
 8024152:	4318      	orrgt	r0, r3
 8024154:	f7dc fa06 	bl	8000564 <__aeabi_ui2d>
 8024158:	2301      	movs	r3, #1
 802415a:	4606      	mov	r6, r0
 802415c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8024160:	3d01      	subs	r5, #1
 8024162:	9310      	str	r3, [sp, #64]	; 0x40
 8024164:	e771      	b.n	802404a <_dtoa_r+0x11a>
 8024166:	2301      	movs	r3, #1
 8024168:	e7b6      	b.n	80240d8 <_dtoa_r+0x1a8>
 802416a:	900e      	str	r0, [sp, #56]	; 0x38
 802416c:	e7b5      	b.n	80240da <_dtoa_r+0x1aa>
 802416e:	f1ca 0300 	rsb	r3, sl, #0
 8024172:	9306      	str	r3, [sp, #24]
 8024174:	2300      	movs	r3, #0
 8024176:	eba8 080a 	sub.w	r8, r8, sl
 802417a:	930d      	str	r3, [sp, #52]	; 0x34
 802417c:	e7c2      	b.n	8024104 <_dtoa_r+0x1d4>
 802417e:	2300      	movs	r3, #0
 8024180:	9308      	str	r3, [sp, #32]
 8024182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024184:	2b00      	cmp	r3, #0
 8024186:	dc39      	bgt.n	80241fc <_dtoa_r+0x2cc>
 8024188:	f04f 0901 	mov.w	r9, #1
 802418c:	f8cd 9004 	str.w	r9, [sp, #4]
 8024190:	464b      	mov	r3, r9
 8024192:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8024196:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8024198:	2200      	movs	r2, #0
 802419a:	6042      	str	r2, [r0, #4]
 802419c:	2204      	movs	r2, #4
 802419e:	f102 0614 	add.w	r6, r2, #20
 80241a2:	429e      	cmp	r6, r3
 80241a4:	6841      	ldr	r1, [r0, #4]
 80241a6:	d92f      	bls.n	8024208 <_dtoa_r+0x2d8>
 80241a8:	4620      	mov	r0, r4
 80241aa:	f000 feeb 	bl	8024f84 <_Balloc>
 80241ae:	9000      	str	r0, [sp, #0]
 80241b0:	2800      	cmp	r0, #0
 80241b2:	d14b      	bne.n	802424c <_dtoa_r+0x31c>
 80241b4:	4b24      	ldr	r3, [pc, #144]	; (8024248 <_dtoa_r+0x318>)
 80241b6:	4602      	mov	r2, r0
 80241b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80241bc:	e6d1      	b.n	8023f62 <_dtoa_r+0x32>
 80241be:	2301      	movs	r3, #1
 80241c0:	e7de      	b.n	8024180 <_dtoa_r+0x250>
 80241c2:	2300      	movs	r3, #0
 80241c4:	9308      	str	r3, [sp, #32]
 80241c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241c8:	eb0a 0903 	add.w	r9, sl, r3
 80241cc:	f109 0301 	add.w	r3, r9, #1
 80241d0:	2b01      	cmp	r3, #1
 80241d2:	9301      	str	r3, [sp, #4]
 80241d4:	bfb8      	it	lt
 80241d6:	2301      	movlt	r3, #1
 80241d8:	e7dd      	b.n	8024196 <_dtoa_r+0x266>
 80241da:	2301      	movs	r3, #1
 80241dc:	e7f2      	b.n	80241c4 <_dtoa_r+0x294>
 80241de:	2501      	movs	r5, #1
 80241e0:	2300      	movs	r3, #0
 80241e2:	9305      	str	r3, [sp, #20]
 80241e4:	9508      	str	r5, [sp, #32]
 80241e6:	f04f 39ff 	mov.w	r9, #4294967295
 80241ea:	2200      	movs	r2, #0
 80241ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80241f0:	2312      	movs	r3, #18
 80241f2:	9209      	str	r2, [sp, #36]	; 0x24
 80241f4:	e7cf      	b.n	8024196 <_dtoa_r+0x266>
 80241f6:	2301      	movs	r3, #1
 80241f8:	9308      	str	r3, [sp, #32]
 80241fa:	e7f4      	b.n	80241e6 <_dtoa_r+0x2b6>
 80241fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8024200:	f8cd 9004 	str.w	r9, [sp, #4]
 8024204:	464b      	mov	r3, r9
 8024206:	e7c6      	b.n	8024196 <_dtoa_r+0x266>
 8024208:	3101      	adds	r1, #1
 802420a:	6041      	str	r1, [r0, #4]
 802420c:	0052      	lsls	r2, r2, #1
 802420e:	e7c6      	b.n	802419e <_dtoa_r+0x26e>
 8024210:	636f4361 	.word	0x636f4361
 8024214:	3fd287a7 	.word	0x3fd287a7
 8024218:	8b60c8b3 	.word	0x8b60c8b3
 802421c:	3fc68a28 	.word	0x3fc68a28
 8024220:	509f79fb 	.word	0x509f79fb
 8024224:	3fd34413 	.word	0x3fd34413
 8024228:	08029ff0 	.word	0x08029ff0
 802422c:	0802a007 	.word	0x0802a007
 8024230:	7ff00000 	.word	0x7ff00000
 8024234:	08029fec 	.word	0x08029fec
 8024238:	08029fe3 	.word	0x08029fe3
 802423c:	08025b18 	.word	0x08025b18
 8024240:	3ff80000 	.word	0x3ff80000
 8024244:	0802a160 	.word	0x0802a160
 8024248:	0802a066 	.word	0x0802a066
 802424c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802424e:	9a00      	ldr	r2, [sp, #0]
 8024250:	601a      	str	r2, [r3, #0]
 8024252:	9b01      	ldr	r3, [sp, #4]
 8024254:	2b0e      	cmp	r3, #14
 8024256:	f200 80ad 	bhi.w	80243b4 <_dtoa_r+0x484>
 802425a:	2d00      	cmp	r5, #0
 802425c:	f000 80aa 	beq.w	80243b4 <_dtoa_r+0x484>
 8024260:	f1ba 0f00 	cmp.w	sl, #0
 8024264:	dd36      	ble.n	80242d4 <_dtoa_r+0x3a4>
 8024266:	4ac3      	ldr	r2, [pc, #780]	; (8024574 <_dtoa_r+0x644>)
 8024268:	f00a 030f 	and.w	r3, sl, #15
 802426c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8024270:	ed93 7b00 	vldr	d7, [r3]
 8024274:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8024278:	ea4f 172a 	mov.w	r7, sl, asr #4
 802427c:	eeb0 8a47 	vmov.f32	s16, s14
 8024280:	eef0 8a67 	vmov.f32	s17, s15
 8024284:	d016      	beq.n	80242b4 <_dtoa_r+0x384>
 8024286:	4bbc      	ldr	r3, [pc, #752]	; (8024578 <_dtoa_r+0x648>)
 8024288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802428c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8024290:	f7dc fb0c 	bl	80008ac <__aeabi_ddiv>
 8024294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024298:	f007 070f 	and.w	r7, r7, #15
 802429c:	2503      	movs	r5, #3
 802429e:	4eb6      	ldr	r6, [pc, #728]	; (8024578 <_dtoa_r+0x648>)
 80242a0:	b957      	cbnz	r7, 80242b8 <_dtoa_r+0x388>
 80242a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80242a6:	ec53 2b18 	vmov	r2, r3, d8
 80242aa:	f7dc faff 	bl	80008ac <__aeabi_ddiv>
 80242ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80242b2:	e029      	b.n	8024308 <_dtoa_r+0x3d8>
 80242b4:	2502      	movs	r5, #2
 80242b6:	e7f2      	b.n	802429e <_dtoa_r+0x36e>
 80242b8:	07f9      	lsls	r1, r7, #31
 80242ba:	d508      	bpl.n	80242ce <_dtoa_r+0x39e>
 80242bc:	ec51 0b18 	vmov	r0, r1, d8
 80242c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80242c4:	f7dc f9c8 	bl	8000658 <__aeabi_dmul>
 80242c8:	ec41 0b18 	vmov	d8, r0, r1
 80242cc:	3501      	adds	r5, #1
 80242ce:	107f      	asrs	r7, r7, #1
 80242d0:	3608      	adds	r6, #8
 80242d2:	e7e5      	b.n	80242a0 <_dtoa_r+0x370>
 80242d4:	f000 80a6 	beq.w	8024424 <_dtoa_r+0x4f4>
 80242d8:	f1ca 0600 	rsb	r6, sl, #0
 80242dc:	4ba5      	ldr	r3, [pc, #660]	; (8024574 <_dtoa_r+0x644>)
 80242de:	4fa6      	ldr	r7, [pc, #664]	; (8024578 <_dtoa_r+0x648>)
 80242e0:	f006 020f 	and.w	r2, r6, #15
 80242e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80242e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80242f0:	f7dc f9b2 	bl	8000658 <__aeabi_dmul>
 80242f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80242f8:	1136      	asrs	r6, r6, #4
 80242fa:	2300      	movs	r3, #0
 80242fc:	2502      	movs	r5, #2
 80242fe:	2e00      	cmp	r6, #0
 8024300:	f040 8085 	bne.w	802440e <_dtoa_r+0x4de>
 8024304:	2b00      	cmp	r3, #0
 8024306:	d1d2      	bne.n	80242ae <_dtoa_r+0x37e>
 8024308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802430a:	2b00      	cmp	r3, #0
 802430c:	f000 808c 	beq.w	8024428 <_dtoa_r+0x4f8>
 8024310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8024314:	4b99      	ldr	r3, [pc, #612]	; (802457c <_dtoa_r+0x64c>)
 8024316:	2200      	movs	r2, #0
 8024318:	4630      	mov	r0, r6
 802431a:	4639      	mov	r1, r7
 802431c:	f7dc fc0e 	bl	8000b3c <__aeabi_dcmplt>
 8024320:	2800      	cmp	r0, #0
 8024322:	f000 8081 	beq.w	8024428 <_dtoa_r+0x4f8>
 8024326:	9b01      	ldr	r3, [sp, #4]
 8024328:	2b00      	cmp	r3, #0
 802432a:	d07d      	beq.n	8024428 <_dtoa_r+0x4f8>
 802432c:	f1b9 0f00 	cmp.w	r9, #0
 8024330:	dd3c      	ble.n	80243ac <_dtoa_r+0x47c>
 8024332:	f10a 33ff 	add.w	r3, sl, #4294967295
 8024336:	9307      	str	r3, [sp, #28]
 8024338:	2200      	movs	r2, #0
 802433a:	4b91      	ldr	r3, [pc, #580]	; (8024580 <_dtoa_r+0x650>)
 802433c:	4630      	mov	r0, r6
 802433e:	4639      	mov	r1, r7
 8024340:	f7dc f98a 	bl	8000658 <__aeabi_dmul>
 8024344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024348:	3501      	adds	r5, #1
 802434a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 802434e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8024352:	4628      	mov	r0, r5
 8024354:	f7dc f916 	bl	8000584 <__aeabi_i2d>
 8024358:	4632      	mov	r2, r6
 802435a:	463b      	mov	r3, r7
 802435c:	f7dc f97c 	bl	8000658 <__aeabi_dmul>
 8024360:	4b88      	ldr	r3, [pc, #544]	; (8024584 <_dtoa_r+0x654>)
 8024362:	2200      	movs	r2, #0
 8024364:	f7db ffc2 	bl	80002ec <__adddf3>
 8024368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802436c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024370:	9303      	str	r3, [sp, #12]
 8024372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024374:	2b00      	cmp	r3, #0
 8024376:	d15c      	bne.n	8024432 <_dtoa_r+0x502>
 8024378:	4b83      	ldr	r3, [pc, #524]	; (8024588 <_dtoa_r+0x658>)
 802437a:	2200      	movs	r2, #0
 802437c:	4630      	mov	r0, r6
 802437e:	4639      	mov	r1, r7
 8024380:	f7db ffb2 	bl	80002e8 <__aeabi_dsub>
 8024384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024388:	4606      	mov	r6, r0
 802438a:	460f      	mov	r7, r1
 802438c:	f7dc fbf4 	bl	8000b78 <__aeabi_dcmpgt>
 8024390:	2800      	cmp	r0, #0
 8024392:	f040 8296 	bne.w	80248c2 <_dtoa_r+0x992>
 8024396:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802439a:	4630      	mov	r0, r6
 802439c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80243a0:	4639      	mov	r1, r7
 80243a2:	f7dc fbcb 	bl	8000b3c <__aeabi_dcmplt>
 80243a6:	2800      	cmp	r0, #0
 80243a8:	f040 8288 	bne.w	80248bc <_dtoa_r+0x98c>
 80243ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80243b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80243b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80243b6:	2b00      	cmp	r3, #0
 80243b8:	f2c0 8158 	blt.w	802466c <_dtoa_r+0x73c>
 80243bc:	f1ba 0f0e 	cmp.w	sl, #14
 80243c0:	f300 8154 	bgt.w	802466c <_dtoa_r+0x73c>
 80243c4:	4b6b      	ldr	r3, [pc, #428]	; (8024574 <_dtoa_r+0x644>)
 80243c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80243ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80243ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243d0:	2b00      	cmp	r3, #0
 80243d2:	f280 80e3 	bge.w	802459c <_dtoa_r+0x66c>
 80243d6:	9b01      	ldr	r3, [sp, #4]
 80243d8:	2b00      	cmp	r3, #0
 80243da:	f300 80df 	bgt.w	802459c <_dtoa_r+0x66c>
 80243de:	f040 826d 	bne.w	80248bc <_dtoa_r+0x98c>
 80243e2:	4b69      	ldr	r3, [pc, #420]	; (8024588 <_dtoa_r+0x658>)
 80243e4:	2200      	movs	r2, #0
 80243e6:	4640      	mov	r0, r8
 80243e8:	4649      	mov	r1, r9
 80243ea:	f7dc f935 	bl	8000658 <__aeabi_dmul>
 80243ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80243f2:	f7dc fbb7 	bl	8000b64 <__aeabi_dcmpge>
 80243f6:	9e01      	ldr	r6, [sp, #4]
 80243f8:	4637      	mov	r7, r6
 80243fa:	2800      	cmp	r0, #0
 80243fc:	f040 8243 	bne.w	8024886 <_dtoa_r+0x956>
 8024400:	9d00      	ldr	r5, [sp, #0]
 8024402:	2331      	movs	r3, #49	; 0x31
 8024404:	f805 3b01 	strb.w	r3, [r5], #1
 8024408:	f10a 0a01 	add.w	sl, sl, #1
 802440c:	e23f      	b.n	802488e <_dtoa_r+0x95e>
 802440e:	07f2      	lsls	r2, r6, #31
 8024410:	d505      	bpl.n	802441e <_dtoa_r+0x4ee>
 8024412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024416:	f7dc f91f 	bl	8000658 <__aeabi_dmul>
 802441a:	3501      	adds	r5, #1
 802441c:	2301      	movs	r3, #1
 802441e:	1076      	asrs	r6, r6, #1
 8024420:	3708      	adds	r7, #8
 8024422:	e76c      	b.n	80242fe <_dtoa_r+0x3ce>
 8024424:	2502      	movs	r5, #2
 8024426:	e76f      	b.n	8024308 <_dtoa_r+0x3d8>
 8024428:	9b01      	ldr	r3, [sp, #4]
 802442a:	f8cd a01c 	str.w	sl, [sp, #28]
 802442e:	930c      	str	r3, [sp, #48]	; 0x30
 8024430:	e78d      	b.n	802434e <_dtoa_r+0x41e>
 8024432:	9900      	ldr	r1, [sp, #0]
 8024434:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024438:	4b4e      	ldr	r3, [pc, #312]	; (8024574 <_dtoa_r+0x644>)
 802443a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802443e:	4401      	add	r1, r0
 8024440:	9102      	str	r1, [sp, #8]
 8024442:	9908      	ldr	r1, [sp, #32]
 8024444:	eeb0 8a47 	vmov.f32	s16, s14
 8024448:	eef0 8a67 	vmov.f32	s17, s15
 802444c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8024450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024454:	2900      	cmp	r1, #0
 8024456:	d045      	beq.n	80244e4 <_dtoa_r+0x5b4>
 8024458:	494c      	ldr	r1, [pc, #304]	; (802458c <_dtoa_r+0x65c>)
 802445a:	2000      	movs	r0, #0
 802445c:	f7dc fa26 	bl	80008ac <__aeabi_ddiv>
 8024460:	ec53 2b18 	vmov	r2, r3, d8
 8024464:	f7db ff40 	bl	80002e8 <__aeabi_dsub>
 8024468:	9d00      	ldr	r5, [sp, #0]
 802446a:	ec41 0b18 	vmov	d8, r0, r1
 802446e:	4639      	mov	r1, r7
 8024470:	4630      	mov	r0, r6
 8024472:	f7dc fba1 	bl	8000bb8 <__aeabi_d2iz>
 8024476:	900c      	str	r0, [sp, #48]	; 0x30
 8024478:	f7dc f884 	bl	8000584 <__aeabi_i2d>
 802447c:	4602      	mov	r2, r0
 802447e:	460b      	mov	r3, r1
 8024480:	4630      	mov	r0, r6
 8024482:	4639      	mov	r1, r7
 8024484:	f7db ff30 	bl	80002e8 <__aeabi_dsub>
 8024488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802448a:	3330      	adds	r3, #48	; 0x30
 802448c:	f805 3b01 	strb.w	r3, [r5], #1
 8024490:	ec53 2b18 	vmov	r2, r3, d8
 8024494:	4606      	mov	r6, r0
 8024496:	460f      	mov	r7, r1
 8024498:	f7dc fb50 	bl	8000b3c <__aeabi_dcmplt>
 802449c:	2800      	cmp	r0, #0
 802449e:	d165      	bne.n	802456c <_dtoa_r+0x63c>
 80244a0:	4632      	mov	r2, r6
 80244a2:	463b      	mov	r3, r7
 80244a4:	4935      	ldr	r1, [pc, #212]	; (802457c <_dtoa_r+0x64c>)
 80244a6:	2000      	movs	r0, #0
 80244a8:	f7db ff1e 	bl	80002e8 <__aeabi_dsub>
 80244ac:	ec53 2b18 	vmov	r2, r3, d8
 80244b0:	f7dc fb44 	bl	8000b3c <__aeabi_dcmplt>
 80244b4:	2800      	cmp	r0, #0
 80244b6:	f040 80b9 	bne.w	802462c <_dtoa_r+0x6fc>
 80244ba:	9b02      	ldr	r3, [sp, #8]
 80244bc:	429d      	cmp	r5, r3
 80244be:	f43f af75 	beq.w	80243ac <_dtoa_r+0x47c>
 80244c2:	4b2f      	ldr	r3, [pc, #188]	; (8024580 <_dtoa_r+0x650>)
 80244c4:	ec51 0b18 	vmov	r0, r1, d8
 80244c8:	2200      	movs	r2, #0
 80244ca:	f7dc f8c5 	bl	8000658 <__aeabi_dmul>
 80244ce:	4b2c      	ldr	r3, [pc, #176]	; (8024580 <_dtoa_r+0x650>)
 80244d0:	ec41 0b18 	vmov	d8, r0, r1
 80244d4:	2200      	movs	r2, #0
 80244d6:	4630      	mov	r0, r6
 80244d8:	4639      	mov	r1, r7
 80244da:	f7dc f8bd 	bl	8000658 <__aeabi_dmul>
 80244de:	4606      	mov	r6, r0
 80244e0:	460f      	mov	r7, r1
 80244e2:	e7c4      	b.n	802446e <_dtoa_r+0x53e>
 80244e4:	ec51 0b17 	vmov	r0, r1, d7
 80244e8:	f7dc f8b6 	bl	8000658 <__aeabi_dmul>
 80244ec:	9b02      	ldr	r3, [sp, #8]
 80244ee:	9d00      	ldr	r5, [sp, #0]
 80244f0:	930c      	str	r3, [sp, #48]	; 0x30
 80244f2:	ec41 0b18 	vmov	d8, r0, r1
 80244f6:	4639      	mov	r1, r7
 80244f8:	4630      	mov	r0, r6
 80244fa:	f7dc fb5d 	bl	8000bb8 <__aeabi_d2iz>
 80244fe:	9011      	str	r0, [sp, #68]	; 0x44
 8024500:	f7dc f840 	bl	8000584 <__aeabi_i2d>
 8024504:	4602      	mov	r2, r0
 8024506:	460b      	mov	r3, r1
 8024508:	4630      	mov	r0, r6
 802450a:	4639      	mov	r1, r7
 802450c:	f7db feec 	bl	80002e8 <__aeabi_dsub>
 8024510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024512:	3330      	adds	r3, #48	; 0x30
 8024514:	f805 3b01 	strb.w	r3, [r5], #1
 8024518:	9b02      	ldr	r3, [sp, #8]
 802451a:	429d      	cmp	r5, r3
 802451c:	4606      	mov	r6, r0
 802451e:	460f      	mov	r7, r1
 8024520:	f04f 0200 	mov.w	r2, #0
 8024524:	d134      	bne.n	8024590 <_dtoa_r+0x660>
 8024526:	4b19      	ldr	r3, [pc, #100]	; (802458c <_dtoa_r+0x65c>)
 8024528:	ec51 0b18 	vmov	r0, r1, d8
 802452c:	f7db fede 	bl	80002ec <__adddf3>
 8024530:	4602      	mov	r2, r0
 8024532:	460b      	mov	r3, r1
 8024534:	4630      	mov	r0, r6
 8024536:	4639      	mov	r1, r7
 8024538:	f7dc fb1e 	bl	8000b78 <__aeabi_dcmpgt>
 802453c:	2800      	cmp	r0, #0
 802453e:	d175      	bne.n	802462c <_dtoa_r+0x6fc>
 8024540:	ec53 2b18 	vmov	r2, r3, d8
 8024544:	4911      	ldr	r1, [pc, #68]	; (802458c <_dtoa_r+0x65c>)
 8024546:	2000      	movs	r0, #0
 8024548:	f7db fece 	bl	80002e8 <__aeabi_dsub>
 802454c:	4602      	mov	r2, r0
 802454e:	460b      	mov	r3, r1
 8024550:	4630      	mov	r0, r6
 8024552:	4639      	mov	r1, r7
 8024554:	f7dc faf2 	bl	8000b3c <__aeabi_dcmplt>
 8024558:	2800      	cmp	r0, #0
 802455a:	f43f af27 	beq.w	80243ac <_dtoa_r+0x47c>
 802455e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024560:	1e6b      	subs	r3, r5, #1
 8024562:	930c      	str	r3, [sp, #48]	; 0x30
 8024564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024568:	2b30      	cmp	r3, #48	; 0x30
 802456a:	d0f8      	beq.n	802455e <_dtoa_r+0x62e>
 802456c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8024570:	e04a      	b.n	8024608 <_dtoa_r+0x6d8>
 8024572:	bf00      	nop
 8024574:	0802a160 	.word	0x0802a160
 8024578:	0802a138 	.word	0x0802a138
 802457c:	3ff00000 	.word	0x3ff00000
 8024580:	40240000 	.word	0x40240000
 8024584:	401c0000 	.word	0x401c0000
 8024588:	40140000 	.word	0x40140000
 802458c:	3fe00000 	.word	0x3fe00000
 8024590:	4baf      	ldr	r3, [pc, #700]	; (8024850 <_dtoa_r+0x920>)
 8024592:	f7dc f861 	bl	8000658 <__aeabi_dmul>
 8024596:	4606      	mov	r6, r0
 8024598:	460f      	mov	r7, r1
 802459a:	e7ac      	b.n	80244f6 <_dtoa_r+0x5c6>
 802459c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80245a0:	9d00      	ldr	r5, [sp, #0]
 80245a2:	4642      	mov	r2, r8
 80245a4:	464b      	mov	r3, r9
 80245a6:	4630      	mov	r0, r6
 80245a8:	4639      	mov	r1, r7
 80245aa:	f7dc f97f 	bl	80008ac <__aeabi_ddiv>
 80245ae:	f7dc fb03 	bl	8000bb8 <__aeabi_d2iz>
 80245b2:	9002      	str	r0, [sp, #8]
 80245b4:	f7db ffe6 	bl	8000584 <__aeabi_i2d>
 80245b8:	4642      	mov	r2, r8
 80245ba:	464b      	mov	r3, r9
 80245bc:	f7dc f84c 	bl	8000658 <__aeabi_dmul>
 80245c0:	4602      	mov	r2, r0
 80245c2:	460b      	mov	r3, r1
 80245c4:	4630      	mov	r0, r6
 80245c6:	4639      	mov	r1, r7
 80245c8:	f7db fe8e 	bl	80002e8 <__aeabi_dsub>
 80245cc:	9e02      	ldr	r6, [sp, #8]
 80245ce:	9f01      	ldr	r7, [sp, #4]
 80245d0:	3630      	adds	r6, #48	; 0x30
 80245d2:	f805 6b01 	strb.w	r6, [r5], #1
 80245d6:	9e00      	ldr	r6, [sp, #0]
 80245d8:	1bae      	subs	r6, r5, r6
 80245da:	42b7      	cmp	r7, r6
 80245dc:	4602      	mov	r2, r0
 80245de:	460b      	mov	r3, r1
 80245e0:	d137      	bne.n	8024652 <_dtoa_r+0x722>
 80245e2:	f7db fe83 	bl	80002ec <__adddf3>
 80245e6:	4642      	mov	r2, r8
 80245e8:	464b      	mov	r3, r9
 80245ea:	4606      	mov	r6, r0
 80245ec:	460f      	mov	r7, r1
 80245ee:	f7dc fac3 	bl	8000b78 <__aeabi_dcmpgt>
 80245f2:	b9c8      	cbnz	r0, 8024628 <_dtoa_r+0x6f8>
 80245f4:	4642      	mov	r2, r8
 80245f6:	464b      	mov	r3, r9
 80245f8:	4630      	mov	r0, r6
 80245fa:	4639      	mov	r1, r7
 80245fc:	f7dc fa94 	bl	8000b28 <__aeabi_dcmpeq>
 8024600:	b110      	cbz	r0, 8024608 <_dtoa_r+0x6d8>
 8024602:	9b02      	ldr	r3, [sp, #8]
 8024604:	07d9      	lsls	r1, r3, #31
 8024606:	d40f      	bmi.n	8024628 <_dtoa_r+0x6f8>
 8024608:	4620      	mov	r0, r4
 802460a:	4659      	mov	r1, fp
 802460c:	f000 fcfa 	bl	8025004 <_Bfree>
 8024610:	2300      	movs	r3, #0
 8024612:	702b      	strb	r3, [r5, #0]
 8024614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024616:	f10a 0001 	add.w	r0, sl, #1
 802461a:	6018      	str	r0, [r3, #0]
 802461c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802461e:	2b00      	cmp	r3, #0
 8024620:	f43f acd8 	beq.w	8023fd4 <_dtoa_r+0xa4>
 8024624:	601d      	str	r5, [r3, #0]
 8024626:	e4d5      	b.n	8023fd4 <_dtoa_r+0xa4>
 8024628:	f8cd a01c 	str.w	sl, [sp, #28]
 802462c:	462b      	mov	r3, r5
 802462e:	461d      	mov	r5, r3
 8024630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024634:	2a39      	cmp	r2, #57	; 0x39
 8024636:	d108      	bne.n	802464a <_dtoa_r+0x71a>
 8024638:	9a00      	ldr	r2, [sp, #0]
 802463a:	429a      	cmp	r2, r3
 802463c:	d1f7      	bne.n	802462e <_dtoa_r+0x6fe>
 802463e:	9a07      	ldr	r2, [sp, #28]
 8024640:	9900      	ldr	r1, [sp, #0]
 8024642:	3201      	adds	r2, #1
 8024644:	9207      	str	r2, [sp, #28]
 8024646:	2230      	movs	r2, #48	; 0x30
 8024648:	700a      	strb	r2, [r1, #0]
 802464a:	781a      	ldrb	r2, [r3, #0]
 802464c:	3201      	adds	r2, #1
 802464e:	701a      	strb	r2, [r3, #0]
 8024650:	e78c      	b.n	802456c <_dtoa_r+0x63c>
 8024652:	4b7f      	ldr	r3, [pc, #508]	; (8024850 <_dtoa_r+0x920>)
 8024654:	2200      	movs	r2, #0
 8024656:	f7db ffff 	bl	8000658 <__aeabi_dmul>
 802465a:	2200      	movs	r2, #0
 802465c:	2300      	movs	r3, #0
 802465e:	4606      	mov	r6, r0
 8024660:	460f      	mov	r7, r1
 8024662:	f7dc fa61 	bl	8000b28 <__aeabi_dcmpeq>
 8024666:	2800      	cmp	r0, #0
 8024668:	d09b      	beq.n	80245a2 <_dtoa_r+0x672>
 802466a:	e7cd      	b.n	8024608 <_dtoa_r+0x6d8>
 802466c:	9a08      	ldr	r2, [sp, #32]
 802466e:	2a00      	cmp	r2, #0
 8024670:	f000 80c4 	beq.w	80247fc <_dtoa_r+0x8cc>
 8024674:	9a05      	ldr	r2, [sp, #20]
 8024676:	2a01      	cmp	r2, #1
 8024678:	f300 80a8 	bgt.w	80247cc <_dtoa_r+0x89c>
 802467c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802467e:	2a00      	cmp	r2, #0
 8024680:	f000 80a0 	beq.w	80247c4 <_dtoa_r+0x894>
 8024684:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8024688:	9e06      	ldr	r6, [sp, #24]
 802468a:	4645      	mov	r5, r8
 802468c:	9a04      	ldr	r2, [sp, #16]
 802468e:	2101      	movs	r1, #1
 8024690:	441a      	add	r2, r3
 8024692:	4620      	mov	r0, r4
 8024694:	4498      	add	r8, r3
 8024696:	9204      	str	r2, [sp, #16]
 8024698:	f000 fd70 	bl	802517c <__i2b>
 802469c:	4607      	mov	r7, r0
 802469e:	2d00      	cmp	r5, #0
 80246a0:	dd0b      	ble.n	80246ba <_dtoa_r+0x78a>
 80246a2:	9b04      	ldr	r3, [sp, #16]
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	dd08      	ble.n	80246ba <_dtoa_r+0x78a>
 80246a8:	42ab      	cmp	r3, r5
 80246aa:	9a04      	ldr	r2, [sp, #16]
 80246ac:	bfa8      	it	ge
 80246ae:	462b      	movge	r3, r5
 80246b0:	eba8 0803 	sub.w	r8, r8, r3
 80246b4:	1aed      	subs	r5, r5, r3
 80246b6:	1ad3      	subs	r3, r2, r3
 80246b8:	9304      	str	r3, [sp, #16]
 80246ba:	9b06      	ldr	r3, [sp, #24]
 80246bc:	b1fb      	cbz	r3, 80246fe <_dtoa_r+0x7ce>
 80246be:	9b08      	ldr	r3, [sp, #32]
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	f000 809f 	beq.w	8024804 <_dtoa_r+0x8d4>
 80246c6:	2e00      	cmp	r6, #0
 80246c8:	dd11      	ble.n	80246ee <_dtoa_r+0x7be>
 80246ca:	4639      	mov	r1, r7
 80246cc:	4632      	mov	r2, r6
 80246ce:	4620      	mov	r0, r4
 80246d0:	f000 fe10 	bl	80252f4 <__pow5mult>
 80246d4:	465a      	mov	r2, fp
 80246d6:	4601      	mov	r1, r0
 80246d8:	4607      	mov	r7, r0
 80246da:	4620      	mov	r0, r4
 80246dc:	f000 fd64 	bl	80251a8 <__multiply>
 80246e0:	4659      	mov	r1, fp
 80246e2:	9007      	str	r0, [sp, #28]
 80246e4:	4620      	mov	r0, r4
 80246e6:	f000 fc8d 	bl	8025004 <_Bfree>
 80246ea:	9b07      	ldr	r3, [sp, #28]
 80246ec:	469b      	mov	fp, r3
 80246ee:	9b06      	ldr	r3, [sp, #24]
 80246f0:	1b9a      	subs	r2, r3, r6
 80246f2:	d004      	beq.n	80246fe <_dtoa_r+0x7ce>
 80246f4:	4659      	mov	r1, fp
 80246f6:	4620      	mov	r0, r4
 80246f8:	f000 fdfc 	bl	80252f4 <__pow5mult>
 80246fc:	4683      	mov	fp, r0
 80246fe:	2101      	movs	r1, #1
 8024700:	4620      	mov	r0, r4
 8024702:	f000 fd3b 	bl	802517c <__i2b>
 8024706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024708:	2b00      	cmp	r3, #0
 802470a:	4606      	mov	r6, r0
 802470c:	dd7c      	ble.n	8024808 <_dtoa_r+0x8d8>
 802470e:	461a      	mov	r2, r3
 8024710:	4601      	mov	r1, r0
 8024712:	4620      	mov	r0, r4
 8024714:	f000 fdee 	bl	80252f4 <__pow5mult>
 8024718:	9b05      	ldr	r3, [sp, #20]
 802471a:	2b01      	cmp	r3, #1
 802471c:	4606      	mov	r6, r0
 802471e:	dd76      	ble.n	802480e <_dtoa_r+0x8de>
 8024720:	2300      	movs	r3, #0
 8024722:	9306      	str	r3, [sp, #24]
 8024724:	6933      	ldr	r3, [r6, #16]
 8024726:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802472a:	6918      	ldr	r0, [r3, #16]
 802472c:	f000 fcd6 	bl	80250dc <__hi0bits>
 8024730:	f1c0 0020 	rsb	r0, r0, #32
 8024734:	9b04      	ldr	r3, [sp, #16]
 8024736:	4418      	add	r0, r3
 8024738:	f010 001f 	ands.w	r0, r0, #31
 802473c:	f000 8086 	beq.w	802484c <_dtoa_r+0x91c>
 8024740:	f1c0 0320 	rsb	r3, r0, #32
 8024744:	2b04      	cmp	r3, #4
 8024746:	dd7f      	ble.n	8024848 <_dtoa_r+0x918>
 8024748:	f1c0 001c 	rsb	r0, r0, #28
 802474c:	9b04      	ldr	r3, [sp, #16]
 802474e:	4403      	add	r3, r0
 8024750:	4480      	add	r8, r0
 8024752:	4405      	add	r5, r0
 8024754:	9304      	str	r3, [sp, #16]
 8024756:	f1b8 0f00 	cmp.w	r8, #0
 802475a:	dd05      	ble.n	8024768 <_dtoa_r+0x838>
 802475c:	4659      	mov	r1, fp
 802475e:	4642      	mov	r2, r8
 8024760:	4620      	mov	r0, r4
 8024762:	f000 fe21 	bl	80253a8 <__lshift>
 8024766:	4683      	mov	fp, r0
 8024768:	9b04      	ldr	r3, [sp, #16]
 802476a:	2b00      	cmp	r3, #0
 802476c:	dd05      	ble.n	802477a <_dtoa_r+0x84a>
 802476e:	4631      	mov	r1, r6
 8024770:	461a      	mov	r2, r3
 8024772:	4620      	mov	r0, r4
 8024774:	f000 fe18 	bl	80253a8 <__lshift>
 8024778:	4606      	mov	r6, r0
 802477a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802477c:	2b00      	cmp	r3, #0
 802477e:	d069      	beq.n	8024854 <_dtoa_r+0x924>
 8024780:	4631      	mov	r1, r6
 8024782:	4658      	mov	r0, fp
 8024784:	f000 fe7c 	bl	8025480 <__mcmp>
 8024788:	2800      	cmp	r0, #0
 802478a:	da63      	bge.n	8024854 <_dtoa_r+0x924>
 802478c:	2300      	movs	r3, #0
 802478e:	4659      	mov	r1, fp
 8024790:	220a      	movs	r2, #10
 8024792:	4620      	mov	r0, r4
 8024794:	f000 fc58 	bl	8025048 <__multadd>
 8024798:	9b08      	ldr	r3, [sp, #32]
 802479a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802479e:	4683      	mov	fp, r0
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	f000 818f 	beq.w	8024ac4 <_dtoa_r+0xb94>
 80247a6:	4639      	mov	r1, r7
 80247a8:	2300      	movs	r3, #0
 80247aa:	220a      	movs	r2, #10
 80247ac:	4620      	mov	r0, r4
 80247ae:	f000 fc4b 	bl	8025048 <__multadd>
 80247b2:	f1b9 0f00 	cmp.w	r9, #0
 80247b6:	4607      	mov	r7, r0
 80247b8:	f300 808e 	bgt.w	80248d8 <_dtoa_r+0x9a8>
 80247bc:	9b05      	ldr	r3, [sp, #20]
 80247be:	2b02      	cmp	r3, #2
 80247c0:	dc50      	bgt.n	8024864 <_dtoa_r+0x934>
 80247c2:	e089      	b.n	80248d8 <_dtoa_r+0x9a8>
 80247c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80247c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80247ca:	e75d      	b.n	8024688 <_dtoa_r+0x758>
 80247cc:	9b01      	ldr	r3, [sp, #4]
 80247ce:	1e5e      	subs	r6, r3, #1
 80247d0:	9b06      	ldr	r3, [sp, #24]
 80247d2:	42b3      	cmp	r3, r6
 80247d4:	bfbf      	itttt	lt
 80247d6:	9b06      	ldrlt	r3, [sp, #24]
 80247d8:	9606      	strlt	r6, [sp, #24]
 80247da:	1af2      	sublt	r2, r6, r3
 80247dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80247de:	bfb6      	itet	lt
 80247e0:	189b      	addlt	r3, r3, r2
 80247e2:	1b9e      	subge	r6, r3, r6
 80247e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80247e6:	9b01      	ldr	r3, [sp, #4]
 80247e8:	bfb8      	it	lt
 80247ea:	2600      	movlt	r6, #0
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	bfb5      	itete	lt
 80247f0:	eba8 0503 	sublt.w	r5, r8, r3
 80247f4:	9b01      	ldrge	r3, [sp, #4]
 80247f6:	2300      	movlt	r3, #0
 80247f8:	4645      	movge	r5, r8
 80247fa:	e747      	b.n	802468c <_dtoa_r+0x75c>
 80247fc:	9e06      	ldr	r6, [sp, #24]
 80247fe:	9f08      	ldr	r7, [sp, #32]
 8024800:	4645      	mov	r5, r8
 8024802:	e74c      	b.n	802469e <_dtoa_r+0x76e>
 8024804:	9a06      	ldr	r2, [sp, #24]
 8024806:	e775      	b.n	80246f4 <_dtoa_r+0x7c4>
 8024808:	9b05      	ldr	r3, [sp, #20]
 802480a:	2b01      	cmp	r3, #1
 802480c:	dc18      	bgt.n	8024840 <_dtoa_r+0x910>
 802480e:	9b02      	ldr	r3, [sp, #8]
 8024810:	b9b3      	cbnz	r3, 8024840 <_dtoa_r+0x910>
 8024812:	9b03      	ldr	r3, [sp, #12]
 8024814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024818:	b9a3      	cbnz	r3, 8024844 <_dtoa_r+0x914>
 802481a:	9b03      	ldr	r3, [sp, #12]
 802481c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024820:	0d1b      	lsrs	r3, r3, #20
 8024822:	051b      	lsls	r3, r3, #20
 8024824:	b12b      	cbz	r3, 8024832 <_dtoa_r+0x902>
 8024826:	9b04      	ldr	r3, [sp, #16]
 8024828:	3301      	adds	r3, #1
 802482a:	9304      	str	r3, [sp, #16]
 802482c:	f108 0801 	add.w	r8, r8, #1
 8024830:	2301      	movs	r3, #1
 8024832:	9306      	str	r3, [sp, #24]
 8024834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024836:	2b00      	cmp	r3, #0
 8024838:	f47f af74 	bne.w	8024724 <_dtoa_r+0x7f4>
 802483c:	2001      	movs	r0, #1
 802483e:	e779      	b.n	8024734 <_dtoa_r+0x804>
 8024840:	2300      	movs	r3, #0
 8024842:	e7f6      	b.n	8024832 <_dtoa_r+0x902>
 8024844:	9b02      	ldr	r3, [sp, #8]
 8024846:	e7f4      	b.n	8024832 <_dtoa_r+0x902>
 8024848:	d085      	beq.n	8024756 <_dtoa_r+0x826>
 802484a:	4618      	mov	r0, r3
 802484c:	301c      	adds	r0, #28
 802484e:	e77d      	b.n	802474c <_dtoa_r+0x81c>
 8024850:	40240000 	.word	0x40240000
 8024854:	9b01      	ldr	r3, [sp, #4]
 8024856:	2b00      	cmp	r3, #0
 8024858:	dc38      	bgt.n	80248cc <_dtoa_r+0x99c>
 802485a:	9b05      	ldr	r3, [sp, #20]
 802485c:	2b02      	cmp	r3, #2
 802485e:	dd35      	ble.n	80248cc <_dtoa_r+0x99c>
 8024860:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8024864:	f1b9 0f00 	cmp.w	r9, #0
 8024868:	d10d      	bne.n	8024886 <_dtoa_r+0x956>
 802486a:	4631      	mov	r1, r6
 802486c:	464b      	mov	r3, r9
 802486e:	2205      	movs	r2, #5
 8024870:	4620      	mov	r0, r4
 8024872:	f000 fbe9 	bl	8025048 <__multadd>
 8024876:	4601      	mov	r1, r0
 8024878:	4606      	mov	r6, r0
 802487a:	4658      	mov	r0, fp
 802487c:	f000 fe00 	bl	8025480 <__mcmp>
 8024880:	2800      	cmp	r0, #0
 8024882:	f73f adbd 	bgt.w	8024400 <_dtoa_r+0x4d0>
 8024886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024888:	9d00      	ldr	r5, [sp, #0]
 802488a:	ea6f 0a03 	mvn.w	sl, r3
 802488e:	f04f 0800 	mov.w	r8, #0
 8024892:	4631      	mov	r1, r6
 8024894:	4620      	mov	r0, r4
 8024896:	f000 fbb5 	bl	8025004 <_Bfree>
 802489a:	2f00      	cmp	r7, #0
 802489c:	f43f aeb4 	beq.w	8024608 <_dtoa_r+0x6d8>
 80248a0:	f1b8 0f00 	cmp.w	r8, #0
 80248a4:	d005      	beq.n	80248b2 <_dtoa_r+0x982>
 80248a6:	45b8      	cmp	r8, r7
 80248a8:	d003      	beq.n	80248b2 <_dtoa_r+0x982>
 80248aa:	4641      	mov	r1, r8
 80248ac:	4620      	mov	r0, r4
 80248ae:	f000 fba9 	bl	8025004 <_Bfree>
 80248b2:	4639      	mov	r1, r7
 80248b4:	4620      	mov	r0, r4
 80248b6:	f000 fba5 	bl	8025004 <_Bfree>
 80248ba:	e6a5      	b.n	8024608 <_dtoa_r+0x6d8>
 80248bc:	2600      	movs	r6, #0
 80248be:	4637      	mov	r7, r6
 80248c0:	e7e1      	b.n	8024886 <_dtoa_r+0x956>
 80248c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80248c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80248c8:	4637      	mov	r7, r6
 80248ca:	e599      	b.n	8024400 <_dtoa_r+0x4d0>
 80248cc:	9b08      	ldr	r3, [sp, #32]
 80248ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80248d2:	2b00      	cmp	r3, #0
 80248d4:	f000 80fd 	beq.w	8024ad2 <_dtoa_r+0xba2>
 80248d8:	2d00      	cmp	r5, #0
 80248da:	dd05      	ble.n	80248e8 <_dtoa_r+0x9b8>
 80248dc:	4639      	mov	r1, r7
 80248de:	462a      	mov	r2, r5
 80248e0:	4620      	mov	r0, r4
 80248e2:	f000 fd61 	bl	80253a8 <__lshift>
 80248e6:	4607      	mov	r7, r0
 80248e8:	9b06      	ldr	r3, [sp, #24]
 80248ea:	2b00      	cmp	r3, #0
 80248ec:	d05c      	beq.n	80249a8 <_dtoa_r+0xa78>
 80248ee:	6879      	ldr	r1, [r7, #4]
 80248f0:	4620      	mov	r0, r4
 80248f2:	f000 fb47 	bl	8024f84 <_Balloc>
 80248f6:	4605      	mov	r5, r0
 80248f8:	b928      	cbnz	r0, 8024906 <_dtoa_r+0x9d6>
 80248fa:	4b80      	ldr	r3, [pc, #512]	; (8024afc <_dtoa_r+0xbcc>)
 80248fc:	4602      	mov	r2, r0
 80248fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8024902:	f7ff bb2e 	b.w	8023f62 <_dtoa_r+0x32>
 8024906:	693a      	ldr	r2, [r7, #16]
 8024908:	3202      	adds	r2, #2
 802490a:	0092      	lsls	r2, r2, #2
 802490c:	f107 010c 	add.w	r1, r7, #12
 8024910:	300c      	adds	r0, #12
 8024912:	f000 fb1d 	bl	8024f50 <memcpy>
 8024916:	2201      	movs	r2, #1
 8024918:	4629      	mov	r1, r5
 802491a:	4620      	mov	r0, r4
 802491c:	f000 fd44 	bl	80253a8 <__lshift>
 8024920:	9b00      	ldr	r3, [sp, #0]
 8024922:	3301      	adds	r3, #1
 8024924:	9301      	str	r3, [sp, #4]
 8024926:	9b00      	ldr	r3, [sp, #0]
 8024928:	444b      	add	r3, r9
 802492a:	9307      	str	r3, [sp, #28]
 802492c:	9b02      	ldr	r3, [sp, #8]
 802492e:	f003 0301 	and.w	r3, r3, #1
 8024932:	46b8      	mov	r8, r7
 8024934:	9306      	str	r3, [sp, #24]
 8024936:	4607      	mov	r7, r0
 8024938:	9b01      	ldr	r3, [sp, #4]
 802493a:	4631      	mov	r1, r6
 802493c:	3b01      	subs	r3, #1
 802493e:	4658      	mov	r0, fp
 8024940:	9302      	str	r3, [sp, #8]
 8024942:	f7ff fa69 	bl	8023e18 <quorem>
 8024946:	4603      	mov	r3, r0
 8024948:	3330      	adds	r3, #48	; 0x30
 802494a:	9004      	str	r0, [sp, #16]
 802494c:	4641      	mov	r1, r8
 802494e:	4658      	mov	r0, fp
 8024950:	9308      	str	r3, [sp, #32]
 8024952:	f000 fd95 	bl	8025480 <__mcmp>
 8024956:	463a      	mov	r2, r7
 8024958:	4681      	mov	r9, r0
 802495a:	4631      	mov	r1, r6
 802495c:	4620      	mov	r0, r4
 802495e:	f000 fdab 	bl	80254b8 <__mdiff>
 8024962:	68c2      	ldr	r2, [r0, #12]
 8024964:	9b08      	ldr	r3, [sp, #32]
 8024966:	4605      	mov	r5, r0
 8024968:	bb02      	cbnz	r2, 80249ac <_dtoa_r+0xa7c>
 802496a:	4601      	mov	r1, r0
 802496c:	4658      	mov	r0, fp
 802496e:	f000 fd87 	bl	8025480 <__mcmp>
 8024972:	9b08      	ldr	r3, [sp, #32]
 8024974:	4602      	mov	r2, r0
 8024976:	4629      	mov	r1, r5
 8024978:	4620      	mov	r0, r4
 802497a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 802497e:	f000 fb41 	bl	8025004 <_Bfree>
 8024982:	9b05      	ldr	r3, [sp, #20]
 8024984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024986:	9d01      	ldr	r5, [sp, #4]
 8024988:	ea43 0102 	orr.w	r1, r3, r2
 802498c:	9b06      	ldr	r3, [sp, #24]
 802498e:	430b      	orrs	r3, r1
 8024990:	9b08      	ldr	r3, [sp, #32]
 8024992:	d10d      	bne.n	80249b0 <_dtoa_r+0xa80>
 8024994:	2b39      	cmp	r3, #57	; 0x39
 8024996:	d029      	beq.n	80249ec <_dtoa_r+0xabc>
 8024998:	f1b9 0f00 	cmp.w	r9, #0
 802499c:	dd01      	ble.n	80249a2 <_dtoa_r+0xa72>
 802499e:	9b04      	ldr	r3, [sp, #16]
 80249a0:	3331      	adds	r3, #49	; 0x31
 80249a2:	9a02      	ldr	r2, [sp, #8]
 80249a4:	7013      	strb	r3, [r2, #0]
 80249a6:	e774      	b.n	8024892 <_dtoa_r+0x962>
 80249a8:	4638      	mov	r0, r7
 80249aa:	e7b9      	b.n	8024920 <_dtoa_r+0x9f0>
 80249ac:	2201      	movs	r2, #1
 80249ae:	e7e2      	b.n	8024976 <_dtoa_r+0xa46>
 80249b0:	f1b9 0f00 	cmp.w	r9, #0
 80249b4:	db06      	blt.n	80249c4 <_dtoa_r+0xa94>
 80249b6:	9905      	ldr	r1, [sp, #20]
 80249b8:	ea41 0909 	orr.w	r9, r1, r9
 80249bc:	9906      	ldr	r1, [sp, #24]
 80249be:	ea59 0101 	orrs.w	r1, r9, r1
 80249c2:	d120      	bne.n	8024a06 <_dtoa_r+0xad6>
 80249c4:	2a00      	cmp	r2, #0
 80249c6:	ddec      	ble.n	80249a2 <_dtoa_r+0xa72>
 80249c8:	4659      	mov	r1, fp
 80249ca:	2201      	movs	r2, #1
 80249cc:	4620      	mov	r0, r4
 80249ce:	9301      	str	r3, [sp, #4]
 80249d0:	f000 fcea 	bl	80253a8 <__lshift>
 80249d4:	4631      	mov	r1, r6
 80249d6:	4683      	mov	fp, r0
 80249d8:	f000 fd52 	bl	8025480 <__mcmp>
 80249dc:	2800      	cmp	r0, #0
 80249de:	9b01      	ldr	r3, [sp, #4]
 80249e0:	dc02      	bgt.n	80249e8 <_dtoa_r+0xab8>
 80249e2:	d1de      	bne.n	80249a2 <_dtoa_r+0xa72>
 80249e4:	07da      	lsls	r2, r3, #31
 80249e6:	d5dc      	bpl.n	80249a2 <_dtoa_r+0xa72>
 80249e8:	2b39      	cmp	r3, #57	; 0x39
 80249ea:	d1d8      	bne.n	802499e <_dtoa_r+0xa6e>
 80249ec:	9a02      	ldr	r2, [sp, #8]
 80249ee:	2339      	movs	r3, #57	; 0x39
 80249f0:	7013      	strb	r3, [r2, #0]
 80249f2:	462b      	mov	r3, r5
 80249f4:	461d      	mov	r5, r3
 80249f6:	3b01      	subs	r3, #1
 80249f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80249fc:	2a39      	cmp	r2, #57	; 0x39
 80249fe:	d050      	beq.n	8024aa2 <_dtoa_r+0xb72>
 8024a00:	3201      	adds	r2, #1
 8024a02:	701a      	strb	r2, [r3, #0]
 8024a04:	e745      	b.n	8024892 <_dtoa_r+0x962>
 8024a06:	2a00      	cmp	r2, #0
 8024a08:	dd03      	ble.n	8024a12 <_dtoa_r+0xae2>
 8024a0a:	2b39      	cmp	r3, #57	; 0x39
 8024a0c:	d0ee      	beq.n	80249ec <_dtoa_r+0xabc>
 8024a0e:	3301      	adds	r3, #1
 8024a10:	e7c7      	b.n	80249a2 <_dtoa_r+0xa72>
 8024a12:	9a01      	ldr	r2, [sp, #4]
 8024a14:	9907      	ldr	r1, [sp, #28]
 8024a16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024a1a:	428a      	cmp	r2, r1
 8024a1c:	d02a      	beq.n	8024a74 <_dtoa_r+0xb44>
 8024a1e:	4659      	mov	r1, fp
 8024a20:	2300      	movs	r3, #0
 8024a22:	220a      	movs	r2, #10
 8024a24:	4620      	mov	r0, r4
 8024a26:	f000 fb0f 	bl	8025048 <__multadd>
 8024a2a:	45b8      	cmp	r8, r7
 8024a2c:	4683      	mov	fp, r0
 8024a2e:	f04f 0300 	mov.w	r3, #0
 8024a32:	f04f 020a 	mov.w	r2, #10
 8024a36:	4641      	mov	r1, r8
 8024a38:	4620      	mov	r0, r4
 8024a3a:	d107      	bne.n	8024a4c <_dtoa_r+0xb1c>
 8024a3c:	f000 fb04 	bl	8025048 <__multadd>
 8024a40:	4680      	mov	r8, r0
 8024a42:	4607      	mov	r7, r0
 8024a44:	9b01      	ldr	r3, [sp, #4]
 8024a46:	3301      	adds	r3, #1
 8024a48:	9301      	str	r3, [sp, #4]
 8024a4a:	e775      	b.n	8024938 <_dtoa_r+0xa08>
 8024a4c:	f000 fafc 	bl	8025048 <__multadd>
 8024a50:	4639      	mov	r1, r7
 8024a52:	4680      	mov	r8, r0
 8024a54:	2300      	movs	r3, #0
 8024a56:	220a      	movs	r2, #10
 8024a58:	4620      	mov	r0, r4
 8024a5a:	f000 faf5 	bl	8025048 <__multadd>
 8024a5e:	4607      	mov	r7, r0
 8024a60:	e7f0      	b.n	8024a44 <_dtoa_r+0xb14>
 8024a62:	f1b9 0f00 	cmp.w	r9, #0
 8024a66:	9a00      	ldr	r2, [sp, #0]
 8024a68:	bfcc      	ite	gt
 8024a6a:	464d      	movgt	r5, r9
 8024a6c:	2501      	movle	r5, #1
 8024a6e:	4415      	add	r5, r2
 8024a70:	f04f 0800 	mov.w	r8, #0
 8024a74:	4659      	mov	r1, fp
 8024a76:	2201      	movs	r2, #1
 8024a78:	4620      	mov	r0, r4
 8024a7a:	9301      	str	r3, [sp, #4]
 8024a7c:	f000 fc94 	bl	80253a8 <__lshift>
 8024a80:	4631      	mov	r1, r6
 8024a82:	4683      	mov	fp, r0
 8024a84:	f000 fcfc 	bl	8025480 <__mcmp>
 8024a88:	2800      	cmp	r0, #0
 8024a8a:	dcb2      	bgt.n	80249f2 <_dtoa_r+0xac2>
 8024a8c:	d102      	bne.n	8024a94 <_dtoa_r+0xb64>
 8024a8e:	9b01      	ldr	r3, [sp, #4]
 8024a90:	07db      	lsls	r3, r3, #31
 8024a92:	d4ae      	bmi.n	80249f2 <_dtoa_r+0xac2>
 8024a94:	462b      	mov	r3, r5
 8024a96:	461d      	mov	r5, r3
 8024a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8024a9c:	2a30      	cmp	r2, #48	; 0x30
 8024a9e:	d0fa      	beq.n	8024a96 <_dtoa_r+0xb66>
 8024aa0:	e6f7      	b.n	8024892 <_dtoa_r+0x962>
 8024aa2:	9a00      	ldr	r2, [sp, #0]
 8024aa4:	429a      	cmp	r2, r3
 8024aa6:	d1a5      	bne.n	80249f4 <_dtoa_r+0xac4>
 8024aa8:	f10a 0a01 	add.w	sl, sl, #1
 8024aac:	2331      	movs	r3, #49	; 0x31
 8024aae:	e779      	b.n	80249a4 <_dtoa_r+0xa74>
 8024ab0:	4b13      	ldr	r3, [pc, #76]	; (8024b00 <_dtoa_r+0xbd0>)
 8024ab2:	f7ff baaf 	b.w	8024014 <_dtoa_r+0xe4>
 8024ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024ab8:	2b00      	cmp	r3, #0
 8024aba:	f47f aa86 	bne.w	8023fca <_dtoa_r+0x9a>
 8024abe:	4b11      	ldr	r3, [pc, #68]	; (8024b04 <_dtoa_r+0xbd4>)
 8024ac0:	f7ff baa8 	b.w	8024014 <_dtoa_r+0xe4>
 8024ac4:	f1b9 0f00 	cmp.w	r9, #0
 8024ac8:	dc03      	bgt.n	8024ad2 <_dtoa_r+0xba2>
 8024aca:	9b05      	ldr	r3, [sp, #20]
 8024acc:	2b02      	cmp	r3, #2
 8024ace:	f73f aec9 	bgt.w	8024864 <_dtoa_r+0x934>
 8024ad2:	9d00      	ldr	r5, [sp, #0]
 8024ad4:	4631      	mov	r1, r6
 8024ad6:	4658      	mov	r0, fp
 8024ad8:	f7ff f99e 	bl	8023e18 <quorem>
 8024adc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8024ae0:	f805 3b01 	strb.w	r3, [r5], #1
 8024ae4:	9a00      	ldr	r2, [sp, #0]
 8024ae6:	1aaa      	subs	r2, r5, r2
 8024ae8:	4591      	cmp	r9, r2
 8024aea:	ddba      	ble.n	8024a62 <_dtoa_r+0xb32>
 8024aec:	4659      	mov	r1, fp
 8024aee:	2300      	movs	r3, #0
 8024af0:	220a      	movs	r2, #10
 8024af2:	4620      	mov	r0, r4
 8024af4:	f000 faa8 	bl	8025048 <__multadd>
 8024af8:	4683      	mov	fp, r0
 8024afa:	e7eb      	b.n	8024ad4 <_dtoa_r+0xba4>
 8024afc:	0802a066 	.word	0x0802a066
 8024b00:	08025b17 	.word	0x08025b17
 8024b04:	08029fe3 	.word	0x08029fe3

08024b08 <__sflush_r>:
 8024b08:	898a      	ldrh	r2, [r1, #12]
 8024b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b0e:	4605      	mov	r5, r0
 8024b10:	0710      	lsls	r0, r2, #28
 8024b12:	460c      	mov	r4, r1
 8024b14:	d458      	bmi.n	8024bc8 <__sflush_r+0xc0>
 8024b16:	684b      	ldr	r3, [r1, #4]
 8024b18:	2b00      	cmp	r3, #0
 8024b1a:	dc05      	bgt.n	8024b28 <__sflush_r+0x20>
 8024b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	dc02      	bgt.n	8024b28 <__sflush_r+0x20>
 8024b22:	2000      	movs	r0, #0
 8024b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024b2a:	2e00      	cmp	r6, #0
 8024b2c:	d0f9      	beq.n	8024b22 <__sflush_r+0x1a>
 8024b2e:	2300      	movs	r3, #0
 8024b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024b34:	682f      	ldr	r7, [r5, #0]
 8024b36:	602b      	str	r3, [r5, #0]
 8024b38:	d032      	beq.n	8024ba0 <__sflush_r+0x98>
 8024b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024b3c:	89a3      	ldrh	r3, [r4, #12]
 8024b3e:	075a      	lsls	r2, r3, #29
 8024b40:	d505      	bpl.n	8024b4e <__sflush_r+0x46>
 8024b42:	6863      	ldr	r3, [r4, #4]
 8024b44:	1ac0      	subs	r0, r0, r3
 8024b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024b48:	b10b      	cbz	r3, 8024b4e <__sflush_r+0x46>
 8024b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b4c:	1ac0      	subs	r0, r0, r3
 8024b4e:	2300      	movs	r3, #0
 8024b50:	4602      	mov	r2, r0
 8024b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024b54:	6a21      	ldr	r1, [r4, #32]
 8024b56:	4628      	mov	r0, r5
 8024b58:	47b0      	blx	r6
 8024b5a:	1c43      	adds	r3, r0, #1
 8024b5c:	89a3      	ldrh	r3, [r4, #12]
 8024b5e:	d106      	bne.n	8024b6e <__sflush_r+0x66>
 8024b60:	6829      	ldr	r1, [r5, #0]
 8024b62:	291d      	cmp	r1, #29
 8024b64:	d82c      	bhi.n	8024bc0 <__sflush_r+0xb8>
 8024b66:	4a2a      	ldr	r2, [pc, #168]	; (8024c10 <__sflush_r+0x108>)
 8024b68:	40ca      	lsrs	r2, r1
 8024b6a:	07d6      	lsls	r6, r2, #31
 8024b6c:	d528      	bpl.n	8024bc0 <__sflush_r+0xb8>
 8024b6e:	2200      	movs	r2, #0
 8024b70:	6062      	str	r2, [r4, #4]
 8024b72:	04d9      	lsls	r1, r3, #19
 8024b74:	6922      	ldr	r2, [r4, #16]
 8024b76:	6022      	str	r2, [r4, #0]
 8024b78:	d504      	bpl.n	8024b84 <__sflush_r+0x7c>
 8024b7a:	1c42      	adds	r2, r0, #1
 8024b7c:	d101      	bne.n	8024b82 <__sflush_r+0x7a>
 8024b7e:	682b      	ldr	r3, [r5, #0]
 8024b80:	b903      	cbnz	r3, 8024b84 <__sflush_r+0x7c>
 8024b82:	6560      	str	r0, [r4, #84]	; 0x54
 8024b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024b86:	602f      	str	r7, [r5, #0]
 8024b88:	2900      	cmp	r1, #0
 8024b8a:	d0ca      	beq.n	8024b22 <__sflush_r+0x1a>
 8024b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024b90:	4299      	cmp	r1, r3
 8024b92:	d002      	beq.n	8024b9a <__sflush_r+0x92>
 8024b94:	4628      	mov	r0, r5
 8024b96:	f7fe f9b5 	bl	8022f04 <_free_r>
 8024b9a:	2000      	movs	r0, #0
 8024b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8024b9e:	e7c1      	b.n	8024b24 <__sflush_r+0x1c>
 8024ba0:	6a21      	ldr	r1, [r4, #32]
 8024ba2:	2301      	movs	r3, #1
 8024ba4:	4628      	mov	r0, r5
 8024ba6:	47b0      	blx	r6
 8024ba8:	1c41      	adds	r1, r0, #1
 8024baa:	d1c7      	bne.n	8024b3c <__sflush_r+0x34>
 8024bac:	682b      	ldr	r3, [r5, #0]
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d0c4      	beq.n	8024b3c <__sflush_r+0x34>
 8024bb2:	2b1d      	cmp	r3, #29
 8024bb4:	d001      	beq.n	8024bba <__sflush_r+0xb2>
 8024bb6:	2b16      	cmp	r3, #22
 8024bb8:	d101      	bne.n	8024bbe <__sflush_r+0xb6>
 8024bba:	602f      	str	r7, [r5, #0]
 8024bbc:	e7b1      	b.n	8024b22 <__sflush_r+0x1a>
 8024bbe:	89a3      	ldrh	r3, [r4, #12]
 8024bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024bc4:	81a3      	strh	r3, [r4, #12]
 8024bc6:	e7ad      	b.n	8024b24 <__sflush_r+0x1c>
 8024bc8:	690f      	ldr	r7, [r1, #16]
 8024bca:	2f00      	cmp	r7, #0
 8024bcc:	d0a9      	beq.n	8024b22 <__sflush_r+0x1a>
 8024bce:	0793      	lsls	r3, r2, #30
 8024bd0:	680e      	ldr	r6, [r1, #0]
 8024bd2:	bf08      	it	eq
 8024bd4:	694b      	ldreq	r3, [r1, #20]
 8024bd6:	600f      	str	r7, [r1, #0]
 8024bd8:	bf18      	it	ne
 8024bda:	2300      	movne	r3, #0
 8024bdc:	eba6 0807 	sub.w	r8, r6, r7
 8024be0:	608b      	str	r3, [r1, #8]
 8024be2:	f1b8 0f00 	cmp.w	r8, #0
 8024be6:	dd9c      	ble.n	8024b22 <__sflush_r+0x1a>
 8024be8:	6a21      	ldr	r1, [r4, #32]
 8024bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024bec:	4643      	mov	r3, r8
 8024bee:	463a      	mov	r2, r7
 8024bf0:	4628      	mov	r0, r5
 8024bf2:	47b0      	blx	r6
 8024bf4:	2800      	cmp	r0, #0
 8024bf6:	dc06      	bgt.n	8024c06 <__sflush_r+0xfe>
 8024bf8:	89a3      	ldrh	r3, [r4, #12]
 8024bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024bfe:	81a3      	strh	r3, [r4, #12]
 8024c00:	f04f 30ff 	mov.w	r0, #4294967295
 8024c04:	e78e      	b.n	8024b24 <__sflush_r+0x1c>
 8024c06:	4407      	add	r7, r0
 8024c08:	eba8 0800 	sub.w	r8, r8, r0
 8024c0c:	e7e9      	b.n	8024be2 <__sflush_r+0xda>
 8024c0e:	bf00      	nop
 8024c10:	20400001 	.word	0x20400001

08024c14 <_fflush_r>:
 8024c14:	b538      	push	{r3, r4, r5, lr}
 8024c16:	690b      	ldr	r3, [r1, #16]
 8024c18:	4605      	mov	r5, r0
 8024c1a:	460c      	mov	r4, r1
 8024c1c:	b913      	cbnz	r3, 8024c24 <_fflush_r+0x10>
 8024c1e:	2500      	movs	r5, #0
 8024c20:	4628      	mov	r0, r5
 8024c22:	bd38      	pop	{r3, r4, r5, pc}
 8024c24:	b118      	cbz	r0, 8024c2e <_fflush_r+0x1a>
 8024c26:	6983      	ldr	r3, [r0, #24]
 8024c28:	b90b      	cbnz	r3, 8024c2e <_fflush_r+0x1a>
 8024c2a:	f000 f887 	bl	8024d3c <__sinit>
 8024c2e:	4b14      	ldr	r3, [pc, #80]	; (8024c80 <_fflush_r+0x6c>)
 8024c30:	429c      	cmp	r4, r3
 8024c32:	d11b      	bne.n	8024c6c <_fflush_r+0x58>
 8024c34:	686c      	ldr	r4, [r5, #4]
 8024c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c3a:	2b00      	cmp	r3, #0
 8024c3c:	d0ef      	beq.n	8024c1e <_fflush_r+0xa>
 8024c3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024c40:	07d0      	lsls	r0, r2, #31
 8024c42:	d404      	bmi.n	8024c4e <_fflush_r+0x3a>
 8024c44:	0599      	lsls	r1, r3, #22
 8024c46:	d402      	bmi.n	8024c4e <_fflush_r+0x3a>
 8024c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024c4a:	f000 f91a 	bl	8024e82 <__retarget_lock_acquire_recursive>
 8024c4e:	4628      	mov	r0, r5
 8024c50:	4621      	mov	r1, r4
 8024c52:	f7ff ff59 	bl	8024b08 <__sflush_r>
 8024c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024c58:	07da      	lsls	r2, r3, #31
 8024c5a:	4605      	mov	r5, r0
 8024c5c:	d4e0      	bmi.n	8024c20 <_fflush_r+0xc>
 8024c5e:	89a3      	ldrh	r3, [r4, #12]
 8024c60:	059b      	lsls	r3, r3, #22
 8024c62:	d4dd      	bmi.n	8024c20 <_fflush_r+0xc>
 8024c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024c66:	f000 f90d 	bl	8024e84 <__retarget_lock_release_recursive>
 8024c6a:	e7d9      	b.n	8024c20 <_fflush_r+0xc>
 8024c6c:	4b05      	ldr	r3, [pc, #20]	; (8024c84 <_fflush_r+0x70>)
 8024c6e:	429c      	cmp	r4, r3
 8024c70:	d101      	bne.n	8024c76 <_fflush_r+0x62>
 8024c72:	68ac      	ldr	r4, [r5, #8]
 8024c74:	e7df      	b.n	8024c36 <_fflush_r+0x22>
 8024c76:	4b04      	ldr	r3, [pc, #16]	; (8024c88 <_fflush_r+0x74>)
 8024c78:	429c      	cmp	r4, r3
 8024c7a:	bf08      	it	eq
 8024c7c:	68ec      	ldreq	r4, [r5, #12]
 8024c7e:	e7da      	b.n	8024c36 <_fflush_r+0x22>
 8024c80:	0802a098 	.word	0x0802a098
 8024c84:	0802a0b8 	.word	0x0802a0b8
 8024c88:	0802a078 	.word	0x0802a078

08024c8c <std>:
 8024c8c:	2300      	movs	r3, #0
 8024c8e:	b510      	push	{r4, lr}
 8024c90:	4604      	mov	r4, r0
 8024c92:	e9c0 3300 	strd	r3, r3, [r0]
 8024c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024c9a:	6083      	str	r3, [r0, #8]
 8024c9c:	8181      	strh	r1, [r0, #12]
 8024c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8024ca0:	81c2      	strh	r2, [r0, #14]
 8024ca2:	6183      	str	r3, [r0, #24]
 8024ca4:	4619      	mov	r1, r3
 8024ca6:	2208      	movs	r2, #8
 8024ca8:	305c      	adds	r0, #92	; 0x5c
 8024caa:	f7fe f923 	bl	8022ef4 <memset>
 8024cae:	4b05      	ldr	r3, [pc, #20]	; (8024cc4 <std+0x38>)
 8024cb0:	6263      	str	r3, [r4, #36]	; 0x24
 8024cb2:	4b05      	ldr	r3, [pc, #20]	; (8024cc8 <std+0x3c>)
 8024cb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8024cb6:	4b05      	ldr	r3, [pc, #20]	; (8024ccc <std+0x40>)
 8024cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024cba:	4b05      	ldr	r3, [pc, #20]	; (8024cd0 <std+0x44>)
 8024cbc:	6224      	str	r4, [r4, #32]
 8024cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8024cc0:	bd10      	pop	{r4, pc}
 8024cc2:	bf00      	nop
 8024cc4:	0802569f 	.word	0x0802569f
 8024cc8:	080256c1 	.word	0x080256c1
 8024ccc:	080256f9 	.word	0x080256f9
 8024cd0:	0802571d 	.word	0x0802571d

08024cd4 <_cleanup_r>:
 8024cd4:	4901      	ldr	r1, [pc, #4]	; (8024cdc <_cleanup_r+0x8>)
 8024cd6:	f000 b8af 	b.w	8024e38 <_fwalk_reent>
 8024cda:	bf00      	nop
 8024cdc:	08024c15 	.word	0x08024c15

08024ce0 <__sfmoreglue>:
 8024ce0:	b570      	push	{r4, r5, r6, lr}
 8024ce2:	1e4a      	subs	r2, r1, #1
 8024ce4:	2568      	movs	r5, #104	; 0x68
 8024ce6:	4355      	muls	r5, r2
 8024ce8:	460e      	mov	r6, r1
 8024cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024cee:	f7fe f959 	bl	8022fa4 <_malloc_r>
 8024cf2:	4604      	mov	r4, r0
 8024cf4:	b140      	cbz	r0, 8024d08 <__sfmoreglue+0x28>
 8024cf6:	2100      	movs	r1, #0
 8024cf8:	e9c0 1600 	strd	r1, r6, [r0]
 8024cfc:	300c      	adds	r0, #12
 8024cfe:	60a0      	str	r0, [r4, #8]
 8024d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024d04:	f7fe f8f6 	bl	8022ef4 <memset>
 8024d08:	4620      	mov	r0, r4
 8024d0a:	bd70      	pop	{r4, r5, r6, pc}

08024d0c <__sfp_lock_acquire>:
 8024d0c:	4801      	ldr	r0, [pc, #4]	; (8024d14 <__sfp_lock_acquire+0x8>)
 8024d0e:	f000 b8b8 	b.w	8024e82 <__retarget_lock_acquire_recursive>
 8024d12:	bf00      	nop
 8024d14:	2000af80 	.word	0x2000af80

08024d18 <__sfp_lock_release>:
 8024d18:	4801      	ldr	r0, [pc, #4]	; (8024d20 <__sfp_lock_release+0x8>)
 8024d1a:	f000 b8b3 	b.w	8024e84 <__retarget_lock_release_recursive>
 8024d1e:	bf00      	nop
 8024d20:	2000af80 	.word	0x2000af80

08024d24 <__sinit_lock_acquire>:
 8024d24:	4801      	ldr	r0, [pc, #4]	; (8024d2c <__sinit_lock_acquire+0x8>)
 8024d26:	f000 b8ac 	b.w	8024e82 <__retarget_lock_acquire_recursive>
 8024d2a:	bf00      	nop
 8024d2c:	2000af7b 	.word	0x2000af7b

08024d30 <__sinit_lock_release>:
 8024d30:	4801      	ldr	r0, [pc, #4]	; (8024d38 <__sinit_lock_release+0x8>)
 8024d32:	f000 b8a7 	b.w	8024e84 <__retarget_lock_release_recursive>
 8024d36:	bf00      	nop
 8024d38:	2000af7b 	.word	0x2000af7b

08024d3c <__sinit>:
 8024d3c:	b510      	push	{r4, lr}
 8024d3e:	4604      	mov	r4, r0
 8024d40:	f7ff fff0 	bl	8024d24 <__sinit_lock_acquire>
 8024d44:	69a3      	ldr	r3, [r4, #24]
 8024d46:	b11b      	cbz	r3, 8024d50 <__sinit+0x14>
 8024d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d4c:	f7ff bff0 	b.w	8024d30 <__sinit_lock_release>
 8024d50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024d54:	6523      	str	r3, [r4, #80]	; 0x50
 8024d56:	4b13      	ldr	r3, [pc, #76]	; (8024da4 <__sinit+0x68>)
 8024d58:	4a13      	ldr	r2, [pc, #76]	; (8024da8 <__sinit+0x6c>)
 8024d5a:	681b      	ldr	r3, [r3, #0]
 8024d5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8024d5e:	42a3      	cmp	r3, r4
 8024d60:	bf04      	itt	eq
 8024d62:	2301      	moveq	r3, #1
 8024d64:	61a3      	streq	r3, [r4, #24]
 8024d66:	4620      	mov	r0, r4
 8024d68:	f000 f820 	bl	8024dac <__sfp>
 8024d6c:	6060      	str	r0, [r4, #4]
 8024d6e:	4620      	mov	r0, r4
 8024d70:	f000 f81c 	bl	8024dac <__sfp>
 8024d74:	60a0      	str	r0, [r4, #8]
 8024d76:	4620      	mov	r0, r4
 8024d78:	f000 f818 	bl	8024dac <__sfp>
 8024d7c:	2200      	movs	r2, #0
 8024d7e:	60e0      	str	r0, [r4, #12]
 8024d80:	2104      	movs	r1, #4
 8024d82:	6860      	ldr	r0, [r4, #4]
 8024d84:	f7ff ff82 	bl	8024c8c <std>
 8024d88:	68a0      	ldr	r0, [r4, #8]
 8024d8a:	2201      	movs	r2, #1
 8024d8c:	2109      	movs	r1, #9
 8024d8e:	f7ff ff7d 	bl	8024c8c <std>
 8024d92:	68e0      	ldr	r0, [r4, #12]
 8024d94:	2202      	movs	r2, #2
 8024d96:	2112      	movs	r1, #18
 8024d98:	f7ff ff78 	bl	8024c8c <std>
 8024d9c:	2301      	movs	r3, #1
 8024d9e:	61a3      	str	r3, [r4, #24]
 8024da0:	e7d2      	b.n	8024d48 <__sinit+0xc>
 8024da2:	bf00      	nop
 8024da4:	08029f9c 	.word	0x08029f9c
 8024da8:	08024cd5 	.word	0x08024cd5

08024dac <__sfp>:
 8024dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024dae:	4607      	mov	r7, r0
 8024db0:	f7ff ffac 	bl	8024d0c <__sfp_lock_acquire>
 8024db4:	4b1e      	ldr	r3, [pc, #120]	; (8024e30 <__sfp+0x84>)
 8024db6:	681e      	ldr	r6, [r3, #0]
 8024db8:	69b3      	ldr	r3, [r6, #24]
 8024dba:	b913      	cbnz	r3, 8024dc2 <__sfp+0x16>
 8024dbc:	4630      	mov	r0, r6
 8024dbe:	f7ff ffbd 	bl	8024d3c <__sinit>
 8024dc2:	3648      	adds	r6, #72	; 0x48
 8024dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024dc8:	3b01      	subs	r3, #1
 8024dca:	d503      	bpl.n	8024dd4 <__sfp+0x28>
 8024dcc:	6833      	ldr	r3, [r6, #0]
 8024dce:	b30b      	cbz	r3, 8024e14 <__sfp+0x68>
 8024dd0:	6836      	ldr	r6, [r6, #0]
 8024dd2:	e7f7      	b.n	8024dc4 <__sfp+0x18>
 8024dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024dd8:	b9d5      	cbnz	r5, 8024e10 <__sfp+0x64>
 8024dda:	4b16      	ldr	r3, [pc, #88]	; (8024e34 <__sfp+0x88>)
 8024ddc:	60e3      	str	r3, [r4, #12]
 8024dde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024de2:	6665      	str	r5, [r4, #100]	; 0x64
 8024de4:	f000 f84c 	bl	8024e80 <__retarget_lock_init_recursive>
 8024de8:	f7ff ff96 	bl	8024d18 <__sfp_lock_release>
 8024dec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8024df0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024df4:	6025      	str	r5, [r4, #0]
 8024df6:	61a5      	str	r5, [r4, #24]
 8024df8:	2208      	movs	r2, #8
 8024dfa:	4629      	mov	r1, r5
 8024dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8024e00:	f7fe f878 	bl	8022ef4 <memset>
 8024e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024e0c:	4620      	mov	r0, r4
 8024e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e10:	3468      	adds	r4, #104	; 0x68
 8024e12:	e7d9      	b.n	8024dc8 <__sfp+0x1c>
 8024e14:	2104      	movs	r1, #4
 8024e16:	4638      	mov	r0, r7
 8024e18:	f7ff ff62 	bl	8024ce0 <__sfmoreglue>
 8024e1c:	4604      	mov	r4, r0
 8024e1e:	6030      	str	r0, [r6, #0]
 8024e20:	2800      	cmp	r0, #0
 8024e22:	d1d5      	bne.n	8024dd0 <__sfp+0x24>
 8024e24:	f7ff ff78 	bl	8024d18 <__sfp_lock_release>
 8024e28:	230c      	movs	r3, #12
 8024e2a:	603b      	str	r3, [r7, #0]
 8024e2c:	e7ee      	b.n	8024e0c <__sfp+0x60>
 8024e2e:	bf00      	nop
 8024e30:	08029f9c 	.word	0x08029f9c
 8024e34:	ffff0001 	.word	0xffff0001

08024e38 <_fwalk_reent>:
 8024e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024e3c:	4606      	mov	r6, r0
 8024e3e:	4688      	mov	r8, r1
 8024e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024e44:	2700      	movs	r7, #0
 8024e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8024e4e:	d505      	bpl.n	8024e5c <_fwalk_reent+0x24>
 8024e50:	6824      	ldr	r4, [r4, #0]
 8024e52:	2c00      	cmp	r4, #0
 8024e54:	d1f7      	bne.n	8024e46 <_fwalk_reent+0xe>
 8024e56:	4638      	mov	r0, r7
 8024e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e5c:	89ab      	ldrh	r3, [r5, #12]
 8024e5e:	2b01      	cmp	r3, #1
 8024e60:	d907      	bls.n	8024e72 <_fwalk_reent+0x3a>
 8024e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024e66:	3301      	adds	r3, #1
 8024e68:	d003      	beq.n	8024e72 <_fwalk_reent+0x3a>
 8024e6a:	4629      	mov	r1, r5
 8024e6c:	4630      	mov	r0, r6
 8024e6e:	47c0      	blx	r8
 8024e70:	4307      	orrs	r7, r0
 8024e72:	3568      	adds	r5, #104	; 0x68
 8024e74:	e7e9      	b.n	8024e4a <_fwalk_reent+0x12>
	...

08024e78 <_localeconv_r>:
 8024e78:	4800      	ldr	r0, [pc, #0]	; (8024e7c <_localeconv_r+0x4>)
 8024e7a:	4770      	bx	lr
 8024e7c:	200001cc 	.word	0x200001cc

08024e80 <__retarget_lock_init_recursive>:
 8024e80:	4770      	bx	lr

08024e82 <__retarget_lock_acquire_recursive>:
 8024e82:	4770      	bx	lr

08024e84 <__retarget_lock_release_recursive>:
 8024e84:	4770      	bx	lr

08024e86 <__swhatbuf_r>:
 8024e86:	b570      	push	{r4, r5, r6, lr}
 8024e88:	460e      	mov	r6, r1
 8024e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024e8e:	2900      	cmp	r1, #0
 8024e90:	b096      	sub	sp, #88	; 0x58
 8024e92:	4614      	mov	r4, r2
 8024e94:	461d      	mov	r5, r3
 8024e96:	da07      	bge.n	8024ea8 <__swhatbuf_r+0x22>
 8024e98:	2300      	movs	r3, #0
 8024e9a:	602b      	str	r3, [r5, #0]
 8024e9c:	89b3      	ldrh	r3, [r6, #12]
 8024e9e:	061a      	lsls	r2, r3, #24
 8024ea0:	d410      	bmi.n	8024ec4 <__swhatbuf_r+0x3e>
 8024ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024ea6:	e00e      	b.n	8024ec6 <__swhatbuf_r+0x40>
 8024ea8:	466a      	mov	r2, sp
 8024eaa:	f000 fc5d 	bl	8025768 <_fstat_r>
 8024eae:	2800      	cmp	r0, #0
 8024eb0:	dbf2      	blt.n	8024e98 <__swhatbuf_r+0x12>
 8024eb2:	9a01      	ldr	r2, [sp, #4]
 8024eb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024eb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024ebc:	425a      	negs	r2, r3
 8024ebe:	415a      	adcs	r2, r3
 8024ec0:	602a      	str	r2, [r5, #0]
 8024ec2:	e7ee      	b.n	8024ea2 <__swhatbuf_r+0x1c>
 8024ec4:	2340      	movs	r3, #64	; 0x40
 8024ec6:	2000      	movs	r0, #0
 8024ec8:	6023      	str	r3, [r4, #0]
 8024eca:	b016      	add	sp, #88	; 0x58
 8024ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08024ed0 <__smakebuf_r>:
 8024ed0:	898b      	ldrh	r3, [r1, #12]
 8024ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024ed4:	079d      	lsls	r5, r3, #30
 8024ed6:	4606      	mov	r6, r0
 8024ed8:	460c      	mov	r4, r1
 8024eda:	d507      	bpl.n	8024eec <__smakebuf_r+0x1c>
 8024edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024ee0:	6023      	str	r3, [r4, #0]
 8024ee2:	6123      	str	r3, [r4, #16]
 8024ee4:	2301      	movs	r3, #1
 8024ee6:	6163      	str	r3, [r4, #20]
 8024ee8:	b002      	add	sp, #8
 8024eea:	bd70      	pop	{r4, r5, r6, pc}
 8024eec:	ab01      	add	r3, sp, #4
 8024eee:	466a      	mov	r2, sp
 8024ef0:	f7ff ffc9 	bl	8024e86 <__swhatbuf_r>
 8024ef4:	9900      	ldr	r1, [sp, #0]
 8024ef6:	4605      	mov	r5, r0
 8024ef8:	4630      	mov	r0, r6
 8024efa:	f7fe f853 	bl	8022fa4 <_malloc_r>
 8024efe:	b948      	cbnz	r0, 8024f14 <__smakebuf_r+0x44>
 8024f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f04:	059a      	lsls	r2, r3, #22
 8024f06:	d4ef      	bmi.n	8024ee8 <__smakebuf_r+0x18>
 8024f08:	f023 0303 	bic.w	r3, r3, #3
 8024f0c:	f043 0302 	orr.w	r3, r3, #2
 8024f10:	81a3      	strh	r3, [r4, #12]
 8024f12:	e7e3      	b.n	8024edc <__smakebuf_r+0xc>
 8024f14:	4b0d      	ldr	r3, [pc, #52]	; (8024f4c <__smakebuf_r+0x7c>)
 8024f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8024f18:	89a3      	ldrh	r3, [r4, #12]
 8024f1a:	6020      	str	r0, [r4, #0]
 8024f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024f20:	81a3      	strh	r3, [r4, #12]
 8024f22:	9b00      	ldr	r3, [sp, #0]
 8024f24:	6163      	str	r3, [r4, #20]
 8024f26:	9b01      	ldr	r3, [sp, #4]
 8024f28:	6120      	str	r0, [r4, #16]
 8024f2a:	b15b      	cbz	r3, 8024f44 <__smakebuf_r+0x74>
 8024f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024f30:	4630      	mov	r0, r6
 8024f32:	f000 fc2b 	bl	802578c <_isatty_r>
 8024f36:	b128      	cbz	r0, 8024f44 <__smakebuf_r+0x74>
 8024f38:	89a3      	ldrh	r3, [r4, #12]
 8024f3a:	f023 0303 	bic.w	r3, r3, #3
 8024f3e:	f043 0301 	orr.w	r3, r3, #1
 8024f42:	81a3      	strh	r3, [r4, #12]
 8024f44:	89a0      	ldrh	r0, [r4, #12]
 8024f46:	4305      	orrs	r5, r0
 8024f48:	81a5      	strh	r5, [r4, #12]
 8024f4a:	e7cd      	b.n	8024ee8 <__smakebuf_r+0x18>
 8024f4c:	08024cd5 	.word	0x08024cd5

08024f50 <memcpy>:
 8024f50:	440a      	add	r2, r1
 8024f52:	4291      	cmp	r1, r2
 8024f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8024f58:	d100      	bne.n	8024f5c <memcpy+0xc>
 8024f5a:	4770      	bx	lr
 8024f5c:	b510      	push	{r4, lr}
 8024f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024f66:	4291      	cmp	r1, r2
 8024f68:	d1f9      	bne.n	8024f5e <memcpy+0xe>
 8024f6a:	bd10      	pop	{r4, pc}

08024f6c <__malloc_lock>:
 8024f6c:	4801      	ldr	r0, [pc, #4]	; (8024f74 <__malloc_lock+0x8>)
 8024f6e:	f7ff bf88 	b.w	8024e82 <__retarget_lock_acquire_recursive>
 8024f72:	bf00      	nop
 8024f74:	2000af7c 	.word	0x2000af7c

08024f78 <__malloc_unlock>:
 8024f78:	4801      	ldr	r0, [pc, #4]	; (8024f80 <__malloc_unlock+0x8>)
 8024f7a:	f7ff bf83 	b.w	8024e84 <__retarget_lock_release_recursive>
 8024f7e:	bf00      	nop
 8024f80:	2000af7c 	.word	0x2000af7c

08024f84 <_Balloc>:
 8024f84:	b570      	push	{r4, r5, r6, lr}
 8024f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024f88:	4604      	mov	r4, r0
 8024f8a:	460d      	mov	r5, r1
 8024f8c:	b976      	cbnz	r6, 8024fac <_Balloc+0x28>
 8024f8e:	2010      	movs	r0, #16
 8024f90:	f7fd ffa8 	bl	8022ee4 <malloc>
 8024f94:	4602      	mov	r2, r0
 8024f96:	6260      	str	r0, [r4, #36]	; 0x24
 8024f98:	b920      	cbnz	r0, 8024fa4 <_Balloc+0x20>
 8024f9a:	4b18      	ldr	r3, [pc, #96]	; (8024ffc <_Balloc+0x78>)
 8024f9c:	4818      	ldr	r0, [pc, #96]	; (8025000 <_Balloc+0x7c>)
 8024f9e:	2166      	movs	r1, #102	; 0x66
 8024fa0:	f7fd ff46 	bl	8022e30 <__assert_func>
 8024fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024fa8:	6006      	str	r6, [r0, #0]
 8024faa:	60c6      	str	r6, [r0, #12]
 8024fac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8024fae:	68f3      	ldr	r3, [r6, #12]
 8024fb0:	b183      	cbz	r3, 8024fd4 <_Balloc+0x50>
 8024fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024fb4:	68db      	ldr	r3, [r3, #12]
 8024fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8024fba:	b9b8      	cbnz	r0, 8024fec <_Balloc+0x68>
 8024fbc:	2101      	movs	r1, #1
 8024fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8024fc2:	1d72      	adds	r2, r6, #5
 8024fc4:	0092      	lsls	r2, r2, #2
 8024fc6:	4620      	mov	r0, r4
 8024fc8:	f000 fb5a 	bl	8025680 <_calloc_r>
 8024fcc:	b160      	cbz	r0, 8024fe8 <_Balloc+0x64>
 8024fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024fd2:	e00e      	b.n	8024ff2 <_Balloc+0x6e>
 8024fd4:	2221      	movs	r2, #33	; 0x21
 8024fd6:	2104      	movs	r1, #4
 8024fd8:	4620      	mov	r0, r4
 8024fda:	f000 fb51 	bl	8025680 <_calloc_r>
 8024fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024fe0:	60f0      	str	r0, [r6, #12]
 8024fe2:	68db      	ldr	r3, [r3, #12]
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	d1e4      	bne.n	8024fb2 <_Balloc+0x2e>
 8024fe8:	2000      	movs	r0, #0
 8024fea:	bd70      	pop	{r4, r5, r6, pc}
 8024fec:	6802      	ldr	r2, [r0, #0]
 8024fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024ff2:	2300      	movs	r3, #0
 8024ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024ff8:	e7f7      	b.n	8024fea <_Balloc+0x66>
 8024ffa:	bf00      	nop
 8024ffc:	08029ff0 	.word	0x08029ff0
 8025000:	0802a0d8 	.word	0x0802a0d8

08025004 <_Bfree>:
 8025004:	b570      	push	{r4, r5, r6, lr}
 8025006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025008:	4605      	mov	r5, r0
 802500a:	460c      	mov	r4, r1
 802500c:	b976      	cbnz	r6, 802502c <_Bfree+0x28>
 802500e:	2010      	movs	r0, #16
 8025010:	f7fd ff68 	bl	8022ee4 <malloc>
 8025014:	4602      	mov	r2, r0
 8025016:	6268      	str	r0, [r5, #36]	; 0x24
 8025018:	b920      	cbnz	r0, 8025024 <_Bfree+0x20>
 802501a:	4b09      	ldr	r3, [pc, #36]	; (8025040 <_Bfree+0x3c>)
 802501c:	4809      	ldr	r0, [pc, #36]	; (8025044 <_Bfree+0x40>)
 802501e:	218a      	movs	r1, #138	; 0x8a
 8025020:	f7fd ff06 	bl	8022e30 <__assert_func>
 8025024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025028:	6006      	str	r6, [r0, #0]
 802502a:	60c6      	str	r6, [r0, #12]
 802502c:	b13c      	cbz	r4, 802503e <_Bfree+0x3a>
 802502e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8025030:	6862      	ldr	r2, [r4, #4]
 8025032:	68db      	ldr	r3, [r3, #12]
 8025034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025038:	6021      	str	r1, [r4, #0]
 802503a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802503e:	bd70      	pop	{r4, r5, r6, pc}
 8025040:	08029ff0 	.word	0x08029ff0
 8025044:	0802a0d8 	.word	0x0802a0d8

08025048 <__multadd>:
 8025048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802504c:	690e      	ldr	r6, [r1, #16]
 802504e:	4607      	mov	r7, r0
 8025050:	4698      	mov	r8, r3
 8025052:	460c      	mov	r4, r1
 8025054:	f101 0014 	add.w	r0, r1, #20
 8025058:	2300      	movs	r3, #0
 802505a:	6805      	ldr	r5, [r0, #0]
 802505c:	b2a9      	uxth	r1, r5
 802505e:	fb02 8101 	mla	r1, r2, r1, r8
 8025062:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8025066:	0c2d      	lsrs	r5, r5, #16
 8025068:	fb02 c505 	mla	r5, r2, r5, ip
 802506c:	b289      	uxth	r1, r1
 802506e:	3301      	adds	r3, #1
 8025070:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8025074:	429e      	cmp	r6, r3
 8025076:	f840 1b04 	str.w	r1, [r0], #4
 802507a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802507e:	dcec      	bgt.n	802505a <__multadd+0x12>
 8025080:	f1b8 0f00 	cmp.w	r8, #0
 8025084:	d022      	beq.n	80250cc <__multadd+0x84>
 8025086:	68a3      	ldr	r3, [r4, #8]
 8025088:	42b3      	cmp	r3, r6
 802508a:	dc19      	bgt.n	80250c0 <__multadd+0x78>
 802508c:	6861      	ldr	r1, [r4, #4]
 802508e:	4638      	mov	r0, r7
 8025090:	3101      	adds	r1, #1
 8025092:	f7ff ff77 	bl	8024f84 <_Balloc>
 8025096:	4605      	mov	r5, r0
 8025098:	b928      	cbnz	r0, 80250a6 <__multadd+0x5e>
 802509a:	4602      	mov	r2, r0
 802509c:	4b0d      	ldr	r3, [pc, #52]	; (80250d4 <__multadd+0x8c>)
 802509e:	480e      	ldr	r0, [pc, #56]	; (80250d8 <__multadd+0x90>)
 80250a0:	21b5      	movs	r1, #181	; 0xb5
 80250a2:	f7fd fec5 	bl	8022e30 <__assert_func>
 80250a6:	6922      	ldr	r2, [r4, #16]
 80250a8:	3202      	adds	r2, #2
 80250aa:	f104 010c 	add.w	r1, r4, #12
 80250ae:	0092      	lsls	r2, r2, #2
 80250b0:	300c      	adds	r0, #12
 80250b2:	f7ff ff4d 	bl	8024f50 <memcpy>
 80250b6:	4621      	mov	r1, r4
 80250b8:	4638      	mov	r0, r7
 80250ba:	f7ff ffa3 	bl	8025004 <_Bfree>
 80250be:	462c      	mov	r4, r5
 80250c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80250c4:	3601      	adds	r6, #1
 80250c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80250ca:	6126      	str	r6, [r4, #16]
 80250cc:	4620      	mov	r0, r4
 80250ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80250d2:	bf00      	nop
 80250d4:	0802a066 	.word	0x0802a066
 80250d8:	0802a0d8 	.word	0x0802a0d8

080250dc <__hi0bits>:
 80250dc:	0c03      	lsrs	r3, r0, #16
 80250de:	041b      	lsls	r3, r3, #16
 80250e0:	b9d3      	cbnz	r3, 8025118 <__hi0bits+0x3c>
 80250e2:	0400      	lsls	r0, r0, #16
 80250e4:	2310      	movs	r3, #16
 80250e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80250ea:	bf04      	itt	eq
 80250ec:	0200      	lsleq	r0, r0, #8
 80250ee:	3308      	addeq	r3, #8
 80250f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80250f4:	bf04      	itt	eq
 80250f6:	0100      	lsleq	r0, r0, #4
 80250f8:	3304      	addeq	r3, #4
 80250fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80250fe:	bf04      	itt	eq
 8025100:	0080      	lsleq	r0, r0, #2
 8025102:	3302      	addeq	r3, #2
 8025104:	2800      	cmp	r0, #0
 8025106:	db05      	blt.n	8025114 <__hi0bits+0x38>
 8025108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802510c:	f103 0301 	add.w	r3, r3, #1
 8025110:	bf08      	it	eq
 8025112:	2320      	moveq	r3, #32
 8025114:	4618      	mov	r0, r3
 8025116:	4770      	bx	lr
 8025118:	2300      	movs	r3, #0
 802511a:	e7e4      	b.n	80250e6 <__hi0bits+0xa>

0802511c <__lo0bits>:
 802511c:	6803      	ldr	r3, [r0, #0]
 802511e:	f013 0207 	ands.w	r2, r3, #7
 8025122:	4601      	mov	r1, r0
 8025124:	d00b      	beq.n	802513e <__lo0bits+0x22>
 8025126:	07da      	lsls	r2, r3, #31
 8025128:	d424      	bmi.n	8025174 <__lo0bits+0x58>
 802512a:	0798      	lsls	r0, r3, #30
 802512c:	bf49      	itett	mi
 802512e:	085b      	lsrmi	r3, r3, #1
 8025130:	089b      	lsrpl	r3, r3, #2
 8025132:	2001      	movmi	r0, #1
 8025134:	600b      	strmi	r3, [r1, #0]
 8025136:	bf5c      	itt	pl
 8025138:	600b      	strpl	r3, [r1, #0]
 802513a:	2002      	movpl	r0, #2
 802513c:	4770      	bx	lr
 802513e:	b298      	uxth	r0, r3
 8025140:	b9b0      	cbnz	r0, 8025170 <__lo0bits+0x54>
 8025142:	0c1b      	lsrs	r3, r3, #16
 8025144:	2010      	movs	r0, #16
 8025146:	f013 0fff 	tst.w	r3, #255	; 0xff
 802514a:	bf04      	itt	eq
 802514c:	0a1b      	lsreq	r3, r3, #8
 802514e:	3008      	addeq	r0, #8
 8025150:	071a      	lsls	r2, r3, #28
 8025152:	bf04      	itt	eq
 8025154:	091b      	lsreq	r3, r3, #4
 8025156:	3004      	addeq	r0, #4
 8025158:	079a      	lsls	r2, r3, #30
 802515a:	bf04      	itt	eq
 802515c:	089b      	lsreq	r3, r3, #2
 802515e:	3002      	addeq	r0, #2
 8025160:	07da      	lsls	r2, r3, #31
 8025162:	d403      	bmi.n	802516c <__lo0bits+0x50>
 8025164:	085b      	lsrs	r3, r3, #1
 8025166:	f100 0001 	add.w	r0, r0, #1
 802516a:	d005      	beq.n	8025178 <__lo0bits+0x5c>
 802516c:	600b      	str	r3, [r1, #0]
 802516e:	4770      	bx	lr
 8025170:	4610      	mov	r0, r2
 8025172:	e7e8      	b.n	8025146 <__lo0bits+0x2a>
 8025174:	2000      	movs	r0, #0
 8025176:	4770      	bx	lr
 8025178:	2020      	movs	r0, #32
 802517a:	4770      	bx	lr

0802517c <__i2b>:
 802517c:	b510      	push	{r4, lr}
 802517e:	460c      	mov	r4, r1
 8025180:	2101      	movs	r1, #1
 8025182:	f7ff feff 	bl	8024f84 <_Balloc>
 8025186:	4602      	mov	r2, r0
 8025188:	b928      	cbnz	r0, 8025196 <__i2b+0x1a>
 802518a:	4b05      	ldr	r3, [pc, #20]	; (80251a0 <__i2b+0x24>)
 802518c:	4805      	ldr	r0, [pc, #20]	; (80251a4 <__i2b+0x28>)
 802518e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8025192:	f7fd fe4d 	bl	8022e30 <__assert_func>
 8025196:	2301      	movs	r3, #1
 8025198:	6144      	str	r4, [r0, #20]
 802519a:	6103      	str	r3, [r0, #16]
 802519c:	bd10      	pop	{r4, pc}
 802519e:	bf00      	nop
 80251a0:	0802a066 	.word	0x0802a066
 80251a4:	0802a0d8 	.word	0x0802a0d8

080251a8 <__multiply>:
 80251a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251ac:	4614      	mov	r4, r2
 80251ae:	690a      	ldr	r2, [r1, #16]
 80251b0:	6923      	ldr	r3, [r4, #16]
 80251b2:	429a      	cmp	r2, r3
 80251b4:	bfb8      	it	lt
 80251b6:	460b      	movlt	r3, r1
 80251b8:	460d      	mov	r5, r1
 80251ba:	bfbc      	itt	lt
 80251bc:	4625      	movlt	r5, r4
 80251be:	461c      	movlt	r4, r3
 80251c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80251c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80251c8:	68ab      	ldr	r3, [r5, #8]
 80251ca:	6869      	ldr	r1, [r5, #4]
 80251cc:	eb0a 0709 	add.w	r7, sl, r9
 80251d0:	42bb      	cmp	r3, r7
 80251d2:	b085      	sub	sp, #20
 80251d4:	bfb8      	it	lt
 80251d6:	3101      	addlt	r1, #1
 80251d8:	f7ff fed4 	bl	8024f84 <_Balloc>
 80251dc:	b930      	cbnz	r0, 80251ec <__multiply+0x44>
 80251de:	4602      	mov	r2, r0
 80251e0:	4b42      	ldr	r3, [pc, #264]	; (80252ec <__multiply+0x144>)
 80251e2:	4843      	ldr	r0, [pc, #268]	; (80252f0 <__multiply+0x148>)
 80251e4:	f240 115d 	movw	r1, #349	; 0x15d
 80251e8:	f7fd fe22 	bl	8022e30 <__assert_func>
 80251ec:	f100 0614 	add.w	r6, r0, #20
 80251f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80251f4:	4633      	mov	r3, r6
 80251f6:	2200      	movs	r2, #0
 80251f8:	4543      	cmp	r3, r8
 80251fa:	d31e      	bcc.n	802523a <__multiply+0x92>
 80251fc:	f105 0c14 	add.w	ip, r5, #20
 8025200:	f104 0314 	add.w	r3, r4, #20
 8025204:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8025208:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802520c:	9202      	str	r2, [sp, #8]
 802520e:	ebac 0205 	sub.w	r2, ip, r5
 8025212:	3a15      	subs	r2, #21
 8025214:	f022 0203 	bic.w	r2, r2, #3
 8025218:	3204      	adds	r2, #4
 802521a:	f105 0115 	add.w	r1, r5, #21
 802521e:	458c      	cmp	ip, r1
 8025220:	bf38      	it	cc
 8025222:	2204      	movcc	r2, #4
 8025224:	9201      	str	r2, [sp, #4]
 8025226:	9a02      	ldr	r2, [sp, #8]
 8025228:	9303      	str	r3, [sp, #12]
 802522a:	429a      	cmp	r2, r3
 802522c:	d808      	bhi.n	8025240 <__multiply+0x98>
 802522e:	2f00      	cmp	r7, #0
 8025230:	dc55      	bgt.n	80252de <__multiply+0x136>
 8025232:	6107      	str	r7, [r0, #16]
 8025234:	b005      	add	sp, #20
 8025236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802523a:	f843 2b04 	str.w	r2, [r3], #4
 802523e:	e7db      	b.n	80251f8 <__multiply+0x50>
 8025240:	f8b3 a000 	ldrh.w	sl, [r3]
 8025244:	f1ba 0f00 	cmp.w	sl, #0
 8025248:	d020      	beq.n	802528c <__multiply+0xe4>
 802524a:	f105 0e14 	add.w	lr, r5, #20
 802524e:	46b1      	mov	r9, r6
 8025250:	2200      	movs	r2, #0
 8025252:	f85e 4b04 	ldr.w	r4, [lr], #4
 8025256:	f8d9 b000 	ldr.w	fp, [r9]
 802525a:	b2a1      	uxth	r1, r4
 802525c:	fa1f fb8b 	uxth.w	fp, fp
 8025260:	fb0a b101 	mla	r1, sl, r1, fp
 8025264:	4411      	add	r1, r2
 8025266:	f8d9 2000 	ldr.w	r2, [r9]
 802526a:	0c24      	lsrs	r4, r4, #16
 802526c:	0c12      	lsrs	r2, r2, #16
 802526e:	fb0a 2404 	mla	r4, sl, r4, r2
 8025272:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8025276:	b289      	uxth	r1, r1
 8025278:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802527c:	45f4      	cmp	ip, lr
 802527e:	f849 1b04 	str.w	r1, [r9], #4
 8025282:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8025286:	d8e4      	bhi.n	8025252 <__multiply+0xaa>
 8025288:	9901      	ldr	r1, [sp, #4]
 802528a:	5072      	str	r2, [r6, r1]
 802528c:	9a03      	ldr	r2, [sp, #12]
 802528e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025292:	3304      	adds	r3, #4
 8025294:	f1b9 0f00 	cmp.w	r9, #0
 8025298:	d01f      	beq.n	80252da <__multiply+0x132>
 802529a:	6834      	ldr	r4, [r6, #0]
 802529c:	f105 0114 	add.w	r1, r5, #20
 80252a0:	46b6      	mov	lr, r6
 80252a2:	f04f 0a00 	mov.w	sl, #0
 80252a6:	880a      	ldrh	r2, [r1, #0]
 80252a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80252ac:	fb09 b202 	mla	r2, r9, r2, fp
 80252b0:	4492      	add	sl, r2
 80252b2:	b2a4      	uxth	r4, r4
 80252b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80252b8:	f84e 4b04 	str.w	r4, [lr], #4
 80252bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80252c0:	f8be 2000 	ldrh.w	r2, [lr]
 80252c4:	0c24      	lsrs	r4, r4, #16
 80252c6:	fb09 2404 	mla	r4, r9, r4, r2
 80252ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80252ce:	458c      	cmp	ip, r1
 80252d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80252d4:	d8e7      	bhi.n	80252a6 <__multiply+0xfe>
 80252d6:	9a01      	ldr	r2, [sp, #4]
 80252d8:	50b4      	str	r4, [r6, r2]
 80252da:	3604      	adds	r6, #4
 80252dc:	e7a3      	b.n	8025226 <__multiply+0x7e>
 80252de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80252e2:	2b00      	cmp	r3, #0
 80252e4:	d1a5      	bne.n	8025232 <__multiply+0x8a>
 80252e6:	3f01      	subs	r7, #1
 80252e8:	e7a1      	b.n	802522e <__multiply+0x86>
 80252ea:	bf00      	nop
 80252ec:	0802a066 	.word	0x0802a066
 80252f0:	0802a0d8 	.word	0x0802a0d8

080252f4 <__pow5mult>:
 80252f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80252f8:	4615      	mov	r5, r2
 80252fa:	f012 0203 	ands.w	r2, r2, #3
 80252fe:	4606      	mov	r6, r0
 8025300:	460f      	mov	r7, r1
 8025302:	d007      	beq.n	8025314 <__pow5mult+0x20>
 8025304:	4c25      	ldr	r4, [pc, #148]	; (802539c <__pow5mult+0xa8>)
 8025306:	3a01      	subs	r2, #1
 8025308:	2300      	movs	r3, #0
 802530a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802530e:	f7ff fe9b 	bl	8025048 <__multadd>
 8025312:	4607      	mov	r7, r0
 8025314:	10ad      	asrs	r5, r5, #2
 8025316:	d03d      	beq.n	8025394 <__pow5mult+0xa0>
 8025318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802531a:	b97c      	cbnz	r4, 802533c <__pow5mult+0x48>
 802531c:	2010      	movs	r0, #16
 802531e:	f7fd fde1 	bl	8022ee4 <malloc>
 8025322:	4602      	mov	r2, r0
 8025324:	6270      	str	r0, [r6, #36]	; 0x24
 8025326:	b928      	cbnz	r0, 8025334 <__pow5mult+0x40>
 8025328:	4b1d      	ldr	r3, [pc, #116]	; (80253a0 <__pow5mult+0xac>)
 802532a:	481e      	ldr	r0, [pc, #120]	; (80253a4 <__pow5mult+0xb0>)
 802532c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8025330:	f7fd fd7e 	bl	8022e30 <__assert_func>
 8025334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8025338:	6004      	str	r4, [r0, #0]
 802533a:	60c4      	str	r4, [r0, #12]
 802533c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8025340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8025344:	b94c      	cbnz	r4, 802535a <__pow5mult+0x66>
 8025346:	f240 2171 	movw	r1, #625	; 0x271
 802534a:	4630      	mov	r0, r6
 802534c:	f7ff ff16 	bl	802517c <__i2b>
 8025350:	2300      	movs	r3, #0
 8025352:	f8c8 0008 	str.w	r0, [r8, #8]
 8025356:	4604      	mov	r4, r0
 8025358:	6003      	str	r3, [r0, #0]
 802535a:	f04f 0900 	mov.w	r9, #0
 802535e:	07eb      	lsls	r3, r5, #31
 8025360:	d50a      	bpl.n	8025378 <__pow5mult+0x84>
 8025362:	4639      	mov	r1, r7
 8025364:	4622      	mov	r2, r4
 8025366:	4630      	mov	r0, r6
 8025368:	f7ff ff1e 	bl	80251a8 <__multiply>
 802536c:	4639      	mov	r1, r7
 802536e:	4680      	mov	r8, r0
 8025370:	4630      	mov	r0, r6
 8025372:	f7ff fe47 	bl	8025004 <_Bfree>
 8025376:	4647      	mov	r7, r8
 8025378:	106d      	asrs	r5, r5, #1
 802537a:	d00b      	beq.n	8025394 <__pow5mult+0xa0>
 802537c:	6820      	ldr	r0, [r4, #0]
 802537e:	b938      	cbnz	r0, 8025390 <__pow5mult+0x9c>
 8025380:	4622      	mov	r2, r4
 8025382:	4621      	mov	r1, r4
 8025384:	4630      	mov	r0, r6
 8025386:	f7ff ff0f 	bl	80251a8 <__multiply>
 802538a:	6020      	str	r0, [r4, #0]
 802538c:	f8c0 9000 	str.w	r9, [r0]
 8025390:	4604      	mov	r4, r0
 8025392:	e7e4      	b.n	802535e <__pow5mult+0x6a>
 8025394:	4638      	mov	r0, r7
 8025396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802539a:	bf00      	nop
 802539c:	0802a228 	.word	0x0802a228
 80253a0:	08029ff0 	.word	0x08029ff0
 80253a4:	0802a0d8 	.word	0x0802a0d8

080253a8 <__lshift>:
 80253a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80253ac:	460c      	mov	r4, r1
 80253ae:	6849      	ldr	r1, [r1, #4]
 80253b0:	6923      	ldr	r3, [r4, #16]
 80253b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80253b6:	68a3      	ldr	r3, [r4, #8]
 80253b8:	4607      	mov	r7, r0
 80253ba:	4691      	mov	r9, r2
 80253bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80253c0:	f108 0601 	add.w	r6, r8, #1
 80253c4:	42b3      	cmp	r3, r6
 80253c6:	db0b      	blt.n	80253e0 <__lshift+0x38>
 80253c8:	4638      	mov	r0, r7
 80253ca:	f7ff fddb 	bl	8024f84 <_Balloc>
 80253ce:	4605      	mov	r5, r0
 80253d0:	b948      	cbnz	r0, 80253e6 <__lshift+0x3e>
 80253d2:	4602      	mov	r2, r0
 80253d4:	4b28      	ldr	r3, [pc, #160]	; (8025478 <__lshift+0xd0>)
 80253d6:	4829      	ldr	r0, [pc, #164]	; (802547c <__lshift+0xd4>)
 80253d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80253dc:	f7fd fd28 	bl	8022e30 <__assert_func>
 80253e0:	3101      	adds	r1, #1
 80253e2:	005b      	lsls	r3, r3, #1
 80253e4:	e7ee      	b.n	80253c4 <__lshift+0x1c>
 80253e6:	2300      	movs	r3, #0
 80253e8:	f100 0114 	add.w	r1, r0, #20
 80253ec:	f100 0210 	add.w	r2, r0, #16
 80253f0:	4618      	mov	r0, r3
 80253f2:	4553      	cmp	r3, sl
 80253f4:	db33      	blt.n	802545e <__lshift+0xb6>
 80253f6:	6920      	ldr	r0, [r4, #16]
 80253f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80253fc:	f104 0314 	add.w	r3, r4, #20
 8025400:	f019 091f 	ands.w	r9, r9, #31
 8025404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8025408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802540c:	d02b      	beq.n	8025466 <__lshift+0xbe>
 802540e:	f1c9 0e20 	rsb	lr, r9, #32
 8025412:	468a      	mov	sl, r1
 8025414:	2200      	movs	r2, #0
 8025416:	6818      	ldr	r0, [r3, #0]
 8025418:	fa00 f009 	lsl.w	r0, r0, r9
 802541c:	4302      	orrs	r2, r0
 802541e:	f84a 2b04 	str.w	r2, [sl], #4
 8025422:	f853 2b04 	ldr.w	r2, [r3], #4
 8025426:	459c      	cmp	ip, r3
 8025428:	fa22 f20e 	lsr.w	r2, r2, lr
 802542c:	d8f3      	bhi.n	8025416 <__lshift+0x6e>
 802542e:	ebac 0304 	sub.w	r3, ip, r4
 8025432:	3b15      	subs	r3, #21
 8025434:	f023 0303 	bic.w	r3, r3, #3
 8025438:	3304      	adds	r3, #4
 802543a:	f104 0015 	add.w	r0, r4, #21
 802543e:	4584      	cmp	ip, r0
 8025440:	bf38      	it	cc
 8025442:	2304      	movcc	r3, #4
 8025444:	50ca      	str	r2, [r1, r3]
 8025446:	b10a      	cbz	r2, 802544c <__lshift+0xa4>
 8025448:	f108 0602 	add.w	r6, r8, #2
 802544c:	3e01      	subs	r6, #1
 802544e:	4638      	mov	r0, r7
 8025450:	612e      	str	r6, [r5, #16]
 8025452:	4621      	mov	r1, r4
 8025454:	f7ff fdd6 	bl	8025004 <_Bfree>
 8025458:	4628      	mov	r0, r5
 802545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802545e:	f842 0f04 	str.w	r0, [r2, #4]!
 8025462:	3301      	adds	r3, #1
 8025464:	e7c5      	b.n	80253f2 <__lshift+0x4a>
 8025466:	3904      	subs	r1, #4
 8025468:	f853 2b04 	ldr.w	r2, [r3], #4
 802546c:	f841 2f04 	str.w	r2, [r1, #4]!
 8025470:	459c      	cmp	ip, r3
 8025472:	d8f9      	bhi.n	8025468 <__lshift+0xc0>
 8025474:	e7ea      	b.n	802544c <__lshift+0xa4>
 8025476:	bf00      	nop
 8025478:	0802a066 	.word	0x0802a066
 802547c:	0802a0d8 	.word	0x0802a0d8

08025480 <__mcmp>:
 8025480:	b530      	push	{r4, r5, lr}
 8025482:	6902      	ldr	r2, [r0, #16]
 8025484:	690c      	ldr	r4, [r1, #16]
 8025486:	1b12      	subs	r2, r2, r4
 8025488:	d10e      	bne.n	80254a8 <__mcmp+0x28>
 802548a:	f100 0314 	add.w	r3, r0, #20
 802548e:	3114      	adds	r1, #20
 8025490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8025494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8025498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802549c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80254a0:	42a5      	cmp	r5, r4
 80254a2:	d003      	beq.n	80254ac <__mcmp+0x2c>
 80254a4:	d305      	bcc.n	80254b2 <__mcmp+0x32>
 80254a6:	2201      	movs	r2, #1
 80254a8:	4610      	mov	r0, r2
 80254aa:	bd30      	pop	{r4, r5, pc}
 80254ac:	4283      	cmp	r3, r0
 80254ae:	d3f3      	bcc.n	8025498 <__mcmp+0x18>
 80254b0:	e7fa      	b.n	80254a8 <__mcmp+0x28>
 80254b2:	f04f 32ff 	mov.w	r2, #4294967295
 80254b6:	e7f7      	b.n	80254a8 <__mcmp+0x28>

080254b8 <__mdiff>:
 80254b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254bc:	460c      	mov	r4, r1
 80254be:	4606      	mov	r6, r0
 80254c0:	4611      	mov	r1, r2
 80254c2:	4620      	mov	r0, r4
 80254c4:	4617      	mov	r7, r2
 80254c6:	f7ff ffdb 	bl	8025480 <__mcmp>
 80254ca:	1e05      	subs	r5, r0, #0
 80254cc:	d110      	bne.n	80254f0 <__mdiff+0x38>
 80254ce:	4629      	mov	r1, r5
 80254d0:	4630      	mov	r0, r6
 80254d2:	f7ff fd57 	bl	8024f84 <_Balloc>
 80254d6:	b930      	cbnz	r0, 80254e6 <__mdiff+0x2e>
 80254d8:	4b39      	ldr	r3, [pc, #228]	; (80255c0 <__mdiff+0x108>)
 80254da:	4602      	mov	r2, r0
 80254dc:	f240 2132 	movw	r1, #562	; 0x232
 80254e0:	4838      	ldr	r0, [pc, #224]	; (80255c4 <__mdiff+0x10c>)
 80254e2:	f7fd fca5 	bl	8022e30 <__assert_func>
 80254e6:	2301      	movs	r3, #1
 80254e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80254ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254f0:	bfa4      	itt	ge
 80254f2:	463b      	movge	r3, r7
 80254f4:	4627      	movge	r7, r4
 80254f6:	4630      	mov	r0, r6
 80254f8:	6879      	ldr	r1, [r7, #4]
 80254fa:	bfa6      	itte	ge
 80254fc:	461c      	movge	r4, r3
 80254fe:	2500      	movge	r5, #0
 8025500:	2501      	movlt	r5, #1
 8025502:	f7ff fd3f 	bl	8024f84 <_Balloc>
 8025506:	b920      	cbnz	r0, 8025512 <__mdiff+0x5a>
 8025508:	4b2d      	ldr	r3, [pc, #180]	; (80255c0 <__mdiff+0x108>)
 802550a:	4602      	mov	r2, r0
 802550c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8025510:	e7e6      	b.n	80254e0 <__mdiff+0x28>
 8025512:	693e      	ldr	r6, [r7, #16]
 8025514:	60c5      	str	r5, [r0, #12]
 8025516:	6925      	ldr	r5, [r4, #16]
 8025518:	f107 0114 	add.w	r1, r7, #20
 802551c:	f104 0914 	add.w	r9, r4, #20
 8025520:	f100 0e14 	add.w	lr, r0, #20
 8025524:	f107 0210 	add.w	r2, r7, #16
 8025528:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802552c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8025530:	46f2      	mov	sl, lr
 8025532:	2700      	movs	r7, #0
 8025534:	f859 3b04 	ldr.w	r3, [r9], #4
 8025538:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802553c:	fa1f f883 	uxth.w	r8, r3
 8025540:	fa17 f78b 	uxtah	r7, r7, fp
 8025544:	0c1b      	lsrs	r3, r3, #16
 8025546:	eba7 0808 	sub.w	r8, r7, r8
 802554a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802554e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8025552:	fa1f f888 	uxth.w	r8, r8
 8025556:	141f      	asrs	r7, r3, #16
 8025558:	454d      	cmp	r5, r9
 802555a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802555e:	f84a 3b04 	str.w	r3, [sl], #4
 8025562:	d8e7      	bhi.n	8025534 <__mdiff+0x7c>
 8025564:	1b2b      	subs	r3, r5, r4
 8025566:	3b15      	subs	r3, #21
 8025568:	f023 0303 	bic.w	r3, r3, #3
 802556c:	3304      	adds	r3, #4
 802556e:	3415      	adds	r4, #21
 8025570:	42a5      	cmp	r5, r4
 8025572:	bf38      	it	cc
 8025574:	2304      	movcc	r3, #4
 8025576:	4419      	add	r1, r3
 8025578:	4473      	add	r3, lr
 802557a:	469e      	mov	lr, r3
 802557c:	460d      	mov	r5, r1
 802557e:	4565      	cmp	r5, ip
 8025580:	d30e      	bcc.n	80255a0 <__mdiff+0xe8>
 8025582:	f10c 0203 	add.w	r2, ip, #3
 8025586:	1a52      	subs	r2, r2, r1
 8025588:	f022 0203 	bic.w	r2, r2, #3
 802558c:	3903      	subs	r1, #3
 802558e:	458c      	cmp	ip, r1
 8025590:	bf38      	it	cc
 8025592:	2200      	movcc	r2, #0
 8025594:	441a      	add	r2, r3
 8025596:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802559a:	b17b      	cbz	r3, 80255bc <__mdiff+0x104>
 802559c:	6106      	str	r6, [r0, #16]
 802559e:	e7a5      	b.n	80254ec <__mdiff+0x34>
 80255a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80255a4:	fa17 f488 	uxtah	r4, r7, r8
 80255a8:	1422      	asrs	r2, r4, #16
 80255aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80255ae:	b2a4      	uxth	r4, r4
 80255b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80255b4:	f84e 4b04 	str.w	r4, [lr], #4
 80255b8:	1417      	asrs	r7, r2, #16
 80255ba:	e7e0      	b.n	802557e <__mdiff+0xc6>
 80255bc:	3e01      	subs	r6, #1
 80255be:	e7ea      	b.n	8025596 <__mdiff+0xde>
 80255c0:	0802a066 	.word	0x0802a066
 80255c4:	0802a0d8 	.word	0x0802a0d8

080255c8 <__d2b>:
 80255c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80255cc:	4689      	mov	r9, r1
 80255ce:	2101      	movs	r1, #1
 80255d0:	ec57 6b10 	vmov	r6, r7, d0
 80255d4:	4690      	mov	r8, r2
 80255d6:	f7ff fcd5 	bl	8024f84 <_Balloc>
 80255da:	4604      	mov	r4, r0
 80255dc:	b930      	cbnz	r0, 80255ec <__d2b+0x24>
 80255de:	4602      	mov	r2, r0
 80255e0:	4b25      	ldr	r3, [pc, #148]	; (8025678 <__d2b+0xb0>)
 80255e2:	4826      	ldr	r0, [pc, #152]	; (802567c <__d2b+0xb4>)
 80255e4:	f240 310a 	movw	r1, #778	; 0x30a
 80255e8:	f7fd fc22 	bl	8022e30 <__assert_func>
 80255ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80255f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80255f4:	bb35      	cbnz	r5, 8025644 <__d2b+0x7c>
 80255f6:	2e00      	cmp	r6, #0
 80255f8:	9301      	str	r3, [sp, #4]
 80255fa:	d028      	beq.n	802564e <__d2b+0x86>
 80255fc:	4668      	mov	r0, sp
 80255fe:	9600      	str	r6, [sp, #0]
 8025600:	f7ff fd8c 	bl	802511c <__lo0bits>
 8025604:	9900      	ldr	r1, [sp, #0]
 8025606:	b300      	cbz	r0, 802564a <__d2b+0x82>
 8025608:	9a01      	ldr	r2, [sp, #4]
 802560a:	f1c0 0320 	rsb	r3, r0, #32
 802560e:	fa02 f303 	lsl.w	r3, r2, r3
 8025612:	430b      	orrs	r3, r1
 8025614:	40c2      	lsrs	r2, r0
 8025616:	6163      	str	r3, [r4, #20]
 8025618:	9201      	str	r2, [sp, #4]
 802561a:	9b01      	ldr	r3, [sp, #4]
 802561c:	61a3      	str	r3, [r4, #24]
 802561e:	2b00      	cmp	r3, #0
 8025620:	bf14      	ite	ne
 8025622:	2202      	movne	r2, #2
 8025624:	2201      	moveq	r2, #1
 8025626:	6122      	str	r2, [r4, #16]
 8025628:	b1d5      	cbz	r5, 8025660 <__d2b+0x98>
 802562a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802562e:	4405      	add	r5, r0
 8025630:	f8c9 5000 	str.w	r5, [r9]
 8025634:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8025638:	f8c8 0000 	str.w	r0, [r8]
 802563c:	4620      	mov	r0, r4
 802563e:	b003      	add	sp, #12
 8025640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8025648:	e7d5      	b.n	80255f6 <__d2b+0x2e>
 802564a:	6161      	str	r1, [r4, #20]
 802564c:	e7e5      	b.n	802561a <__d2b+0x52>
 802564e:	a801      	add	r0, sp, #4
 8025650:	f7ff fd64 	bl	802511c <__lo0bits>
 8025654:	9b01      	ldr	r3, [sp, #4]
 8025656:	6163      	str	r3, [r4, #20]
 8025658:	2201      	movs	r2, #1
 802565a:	6122      	str	r2, [r4, #16]
 802565c:	3020      	adds	r0, #32
 802565e:	e7e3      	b.n	8025628 <__d2b+0x60>
 8025660:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8025664:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8025668:	f8c9 0000 	str.w	r0, [r9]
 802566c:	6918      	ldr	r0, [r3, #16]
 802566e:	f7ff fd35 	bl	80250dc <__hi0bits>
 8025672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8025676:	e7df      	b.n	8025638 <__d2b+0x70>
 8025678:	0802a066 	.word	0x0802a066
 802567c:	0802a0d8 	.word	0x0802a0d8

08025680 <_calloc_r>:
 8025680:	b513      	push	{r0, r1, r4, lr}
 8025682:	434a      	muls	r2, r1
 8025684:	4611      	mov	r1, r2
 8025686:	9201      	str	r2, [sp, #4]
 8025688:	f7fd fc8c 	bl	8022fa4 <_malloc_r>
 802568c:	4604      	mov	r4, r0
 802568e:	b118      	cbz	r0, 8025698 <_calloc_r+0x18>
 8025690:	9a01      	ldr	r2, [sp, #4]
 8025692:	2100      	movs	r1, #0
 8025694:	f7fd fc2e 	bl	8022ef4 <memset>
 8025698:	4620      	mov	r0, r4
 802569a:	b002      	add	sp, #8
 802569c:	bd10      	pop	{r4, pc}

0802569e <__sread>:
 802569e:	b510      	push	{r4, lr}
 80256a0:	460c      	mov	r4, r1
 80256a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256a6:	f000 f8a5 	bl	80257f4 <_read_r>
 80256aa:	2800      	cmp	r0, #0
 80256ac:	bfab      	itete	ge
 80256ae:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80256b0:	89a3      	ldrhlt	r3, [r4, #12]
 80256b2:	181b      	addge	r3, r3, r0
 80256b4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80256b8:	bfac      	ite	ge
 80256ba:	6563      	strge	r3, [r4, #84]	; 0x54
 80256bc:	81a3      	strhlt	r3, [r4, #12]
 80256be:	bd10      	pop	{r4, pc}

080256c0 <__swrite>:
 80256c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80256c4:	461f      	mov	r7, r3
 80256c6:	898b      	ldrh	r3, [r1, #12]
 80256c8:	05db      	lsls	r3, r3, #23
 80256ca:	4605      	mov	r5, r0
 80256cc:	460c      	mov	r4, r1
 80256ce:	4616      	mov	r6, r2
 80256d0:	d505      	bpl.n	80256de <__swrite+0x1e>
 80256d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256d6:	2302      	movs	r3, #2
 80256d8:	2200      	movs	r2, #0
 80256da:	f000 f867 	bl	80257ac <_lseek_r>
 80256de:	89a3      	ldrh	r3, [r4, #12]
 80256e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80256e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80256e8:	81a3      	strh	r3, [r4, #12]
 80256ea:	4632      	mov	r2, r6
 80256ec:	463b      	mov	r3, r7
 80256ee:	4628      	mov	r0, r5
 80256f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80256f4:	f000 b816 	b.w	8025724 <_write_r>

080256f8 <__sseek>:
 80256f8:	b510      	push	{r4, lr}
 80256fa:	460c      	mov	r4, r1
 80256fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025700:	f000 f854 	bl	80257ac <_lseek_r>
 8025704:	1c43      	adds	r3, r0, #1
 8025706:	89a3      	ldrh	r3, [r4, #12]
 8025708:	bf15      	itete	ne
 802570a:	6560      	strne	r0, [r4, #84]	; 0x54
 802570c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025710:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025714:	81a3      	strheq	r3, [r4, #12]
 8025716:	bf18      	it	ne
 8025718:	81a3      	strhne	r3, [r4, #12]
 802571a:	bd10      	pop	{r4, pc}

0802571c <__sclose>:
 802571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025720:	f000 b812 	b.w	8025748 <_close_r>

08025724 <_write_r>:
 8025724:	b538      	push	{r3, r4, r5, lr}
 8025726:	4d07      	ldr	r5, [pc, #28]	; (8025744 <_write_r+0x20>)
 8025728:	4604      	mov	r4, r0
 802572a:	4608      	mov	r0, r1
 802572c:	4611      	mov	r1, r2
 802572e:	2200      	movs	r2, #0
 8025730:	602a      	str	r2, [r5, #0]
 8025732:	461a      	mov	r2, r3
 8025734:	f7dc f97b 	bl	8001a2e <_write>
 8025738:	1c43      	adds	r3, r0, #1
 802573a:	d102      	bne.n	8025742 <_write_r+0x1e>
 802573c:	682b      	ldr	r3, [r5, #0]
 802573e:	b103      	cbz	r3, 8025742 <_write_r+0x1e>
 8025740:	6023      	str	r3, [r4, #0]
 8025742:	bd38      	pop	{r3, r4, r5, pc}
 8025744:	2000af84 	.word	0x2000af84

08025748 <_close_r>:
 8025748:	b538      	push	{r3, r4, r5, lr}
 802574a:	4d06      	ldr	r5, [pc, #24]	; (8025764 <_close_r+0x1c>)
 802574c:	2300      	movs	r3, #0
 802574e:	4604      	mov	r4, r0
 8025750:	4608      	mov	r0, r1
 8025752:	602b      	str	r3, [r5, #0]
 8025754:	f7dc f978 	bl	8001a48 <_close>
 8025758:	1c43      	adds	r3, r0, #1
 802575a:	d102      	bne.n	8025762 <_close_r+0x1a>
 802575c:	682b      	ldr	r3, [r5, #0]
 802575e:	b103      	cbz	r3, 8025762 <_close_r+0x1a>
 8025760:	6023      	str	r3, [r4, #0]
 8025762:	bd38      	pop	{r3, r4, r5, pc}
 8025764:	2000af84 	.word	0x2000af84

08025768 <_fstat_r>:
 8025768:	b538      	push	{r3, r4, r5, lr}
 802576a:	4d07      	ldr	r5, [pc, #28]	; (8025788 <_fstat_r+0x20>)
 802576c:	2300      	movs	r3, #0
 802576e:	4604      	mov	r4, r0
 8025770:	4608      	mov	r0, r1
 8025772:	4611      	mov	r1, r2
 8025774:	602b      	str	r3, [r5, #0]
 8025776:	f7dc f96a 	bl	8001a4e <_fstat>
 802577a:	1c43      	adds	r3, r0, #1
 802577c:	d102      	bne.n	8025784 <_fstat_r+0x1c>
 802577e:	682b      	ldr	r3, [r5, #0]
 8025780:	b103      	cbz	r3, 8025784 <_fstat_r+0x1c>
 8025782:	6023      	str	r3, [r4, #0]
 8025784:	bd38      	pop	{r3, r4, r5, pc}
 8025786:	bf00      	nop
 8025788:	2000af84 	.word	0x2000af84

0802578c <_isatty_r>:
 802578c:	b538      	push	{r3, r4, r5, lr}
 802578e:	4d06      	ldr	r5, [pc, #24]	; (80257a8 <_isatty_r+0x1c>)
 8025790:	2300      	movs	r3, #0
 8025792:	4604      	mov	r4, r0
 8025794:	4608      	mov	r0, r1
 8025796:	602b      	str	r3, [r5, #0]
 8025798:	f7dc f95e 	bl	8001a58 <_isatty>
 802579c:	1c43      	adds	r3, r0, #1
 802579e:	d102      	bne.n	80257a6 <_isatty_r+0x1a>
 80257a0:	682b      	ldr	r3, [r5, #0]
 80257a2:	b103      	cbz	r3, 80257a6 <_isatty_r+0x1a>
 80257a4:	6023      	str	r3, [r4, #0]
 80257a6:	bd38      	pop	{r3, r4, r5, pc}
 80257a8:	2000af84 	.word	0x2000af84

080257ac <_lseek_r>:
 80257ac:	b538      	push	{r3, r4, r5, lr}
 80257ae:	4d07      	ldr	r5, [pc, #28]	; (80257cc <_lseek_r+0x20>)
 80257b0:	4604      	mov	r4, r0
 80257b2:	4608      	mov	r0, r1
 80257b4:	4611      	mov	r1, r2
 80257b6:	2200      	movs	r2, #0
 80257b8:	602a      	str	r2, [r5, #0]
 80257ba:	461a      	mov	r2, r3
 80257bc:	f7dc f94e 	bl	8001a5c <_lseek>
 80257c0:	1c43      	adds	r3, r0, #1
 80257c2:	d102      	bne.n	80257ca <_lseek_r+0x1e>
 80257c4:	682b      	ldr	r3, [r5, #0]
 80257c6:	b103      	cbz	r3, 80257ca <_lseek_r+0x1e>
 80257c8:	6023      	str	r3, [r4, #0]
 80257ca:	bd38      	pop	{r3, r4, r5, pc}
 80257cc:	2000af84 	.word	0x2000af84

080257d0 <__ascii_mbtowc>:
 80257d0:	b082      	sub	sp, #8
 80257d2:	b901      	cbnz	r1, 80257d6 <__ascii_mbtowc+0x6>
 80257d4:	a901      	add	r1, sp, #4
 80257d6:	b142      	cbz	r2, 80257ea <__ascii_mbtowc+0x1a>
 80257d8:	b14b      	cbz	r3, 80257ee <__ascii_mbtowc+0x1e>
 80257da:	7813      	ldrb	r3, [r2, #0]
 80257dc:	600b      	str	r3, [r1, #0]
 80257de:	7812      	ldrb	r2, [r2, #0]
 80257e0:	1e10      	subs	r0, r2, #0
 80257e2:	bf18      	it	ne
 80257e4:	2001      	movne	r0, #1
 80257e6:	b002      	add	sp, #8
 80257e8:	4770      	bx	lr
 80257ea:	4610      	mov	r0, r2
 80257ec:	e7fb      	b.n	80257e6 <__ascii_mbtowc+0x16>
 80257ee:	f06f 0001 	mvn.w	r0, #1
 80257f2:	e7f8      	b.n	80257e6 <__ascii_mbtowc+0x16>

080257f4 <_read_r>:
 80257f4:	b538      	push	{r3, r4, r5, lr}
 80257f6:	4d07      	ldr	r5, [pc, #28]	; (8025814 <_read_r+0x20>)
 80257f8:	4604      	mov	r4, r0
 80257fa:	4608      	mov	r0, r1
 80257fc:	4611      	mov	r1, r2
 80257fe:	2200      	movs	r2, #0
 8025800:	602a      	str	r2, [r5, #0]
 8025802:	461a      	mov	r2, r3
 8025804:	f7dc f906 	bl	8001a14 <_read>
 8025808:	1c43      	adds	r3, r0, #1
 802580a:	d102      	bne.n	8025812 <_read_r+0x1e>
 802580c:	682b      	ldr	r3, [r5, #0]
 802580e:	b103      	cbz	r3, 8025812 <_read_r+0x1e>
 8025810:	6023      	str	r3, [r4, #0]
 8025812:	bd38      	pop	{r3, r4, r5, pc}
 8025814:	2000af84 	.word	0x2000af84

08025818 <__ascii_wctomb>:
 8025818:	b149      	cbz	r1, 802582e <__ascii_wctomb+0x16>
 802581a:	2aff      	cmp	r2, #255	; 0xff
 802581c:	bf85      	ittet	hi
 802581e:	238a      	movhi	r3, #138	; 0x8a
 8025820:	6003      	strhi	r3, [r0, #0]
 8025822:	700a      	strbls	r2, [r1, #0]
 8025824:	f04f 30ff 	movhi.w	r0, #4294967295
 8025828:	bf98      	it	ls
 802582a:	2001      	movls	r0, #1
 802582c:	4770      	bx	lr
 802582e:	4608      	mov	r0, r1
 8025830:	4770      	bx	lr
	...

08025834 <_init>:
 8025834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025836:	bf00      	nop
 8025838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802583a:	bc08      	pop	{r3}
 802583c:	469e      	mov	lr, r3
 802583e:	4770      	bx	lr

08025840 <_fini>:
 8025840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025842:	bf00      	nop
 8025844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025846:	bc08      	pop	{r3}
 8025848:	469e      	mov	lr, r3
 802584a:	4770      	bx	lr
